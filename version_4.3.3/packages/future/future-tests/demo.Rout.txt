
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:05.336] plan(): Setting new future strategy stack:
[13:36:05.336] List of future strategies:
[13:36:05.336] 1. sequential:
[13:36:05.336]    - args: function (..., envir = parent.frame())
[13:36:05.336]    - tweaked: FALSE
[13:36:05.336]    - call: future::plan("sequential")
[13:36:05.350] plan(): nbrOfWorkers() = 1
> 
> message("*** Demos ...")
*** Demos ...
> 
> message("*** Fibonacci demo of the 'future' package ...")
*** Fibonacci demo of the 'future' package ...
> demo("fibonacci", package = "future", ask = FALSE)


	demo(fibonacci)
	---- ~~~~~~~~~

> library("future")

> library("listenv")

> ## IMPORTANT:
> ## 1. The below usage of lazy futures will only work when they are
> ##    all evaluated in the same process.
> ## 2. We disable the capturing of standard output (stdout=NA) to avoid
> ##    'sink stack is full' errors
> ## 3. We disable the capturing of most conditions (condition="error") to
> ##    avoid stacking up too many conditions
> oplan <- plan(sequential)
[13:36:05.364] plan(): Setting new future strategy stack:
[13:36:05.365] List of future strategies:
[13:36:05.365] 1. sequential:
[13:36:05.365]    - args: function (..., envir = parent.frame())
[13:36:05.365]    - tweaked: FALSE
[13:36:05.365]    - call: plan(sequential)
[13:36:05.375] plan(): nbrOfWorkers() = 1

> ## Defines the first 100 Fibonacci numbers
> ## (0, 1, 1, 2, 3, 5, 8, ...)
> ## but calculate only the ones need when
> ## a number is actually requested.
> 
> x <- listenv()

> x[[1]] <- 0

> x[[2]] <- 1

> for (i in 3:100) {
+   x[[i]] %<-% { x[[i - 2]] + x[[i - 1]] } %lazy% TRUE %stdout% NA %conditions% "error"
+ }
[13:36:05.382] getGlobalsAndPackages() ...
[13:36:05.382] Searching for globals...
[13:36:05.390] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.391] Searching for globals ... DONE
[13:36:05.391] Resolving globals: FALSE
[13:36:05.392] The total size of the 2 globals is 224 bytes (224 bytes)
[13:36:05.392] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 224 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (168 bytes of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.392] - globals: [2] ‘x’, ‘i’
[13:36:05.393] 
[13:36:05.393] getGlobalsAndPackages() ... DONE
[13:36:05.393] getGlobalsAndPackages() ...
[13:36:05.393] Searching for globals...
[13:36:05.395] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.395] Searching for globals ... DONE
[13:36:05.395] Resolving globals: FALSE
[13:36:05.396] The total size of the 2 globals is 8.41 KiB (8608 bytes)
[13:36:05.396] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 8.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (8.35 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.396] - globals: [2] ‘x’, ‘i’
[13:36:05.396] 
[13:36:05.397] getGlobalsAndPackages() ... DONE
[13:36:05.397] getGlobalsAndPackages() ...
[13:36:05.397] Searching for globals...
[13:36:05.399] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.399] Searching for globals ... DONE
[13:36:05.399] Resolving globals: FALSE
[13:36:05.400] The total size of the 2 globals is 16.76 KiB (17160 bytes)
[13:36:05.400] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 16.76 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (16.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.400] - globals: [2] ‘x’, ‘i’
[13:36:05.400] 
[13:36:05.400] getGlobalsAndPackages() ... DONE
[13:36:05.401] getGlobalsAndPackages() ...
[13:36:05.401] Searching for globals...
[13:36:05.402] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.403] Searching for globals ... DONE
[13:36:05.403] Resolving globals: FALSE
[13:36:05.404] The total size of the 2 globals is 25.11 KiB (25712 bytes)
[13:36:05.404] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 25.11 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (25.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.404] - globals: [2] ‘x’, ‘i’
[13:36:05.404] 
[13:36:05.404] getGlobalsAndPackages() ... DONE
[13:36:05.405] getGlobalsAndPackages() ...
[13:36:05.405] Searching for globals...
[13:36:05.406] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.407] Searching for globals ... DONE
[13:36:05.407] Resolving globals: FALSE
[13:36:05.408] The total size of the 2 globals is 33.46 KiB (34264 bytes)
[13:36:05.408] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 33.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (33.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.409] - globals: [2] ‘x’, ‘i’
[13:36:05.409] 
[13:36:05.409] getGlobalsAndPackages() ... DONE
[13:36:05.409] getGlobalsAndPackages() ...
[13:36:05.409] Searching for globals...
[13:36:05.411] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.411] Searching for globals ... DONE
[13:36:05.411] Resolving globals: FALSE
[13:36:05.414] The total size of the 2 globals is 41.81 KiB (42816 bytes)
[13:36:05.414] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 41.81 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (41.76 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.414] - globals: [2] ‘x’, ‘i’
[13:36:05.414] 
[13:36:05.414] getGlobalsAndPackages() ... DONE
[13:36:05.415] getGlobalsAndPackages() ...
[13:36:05.415] Searching for globals...
[13:36:05.416] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.416] Searching for globals ... DONE
[13:36:05.416] Resolving globals: FALSE
[13:36:05.418] The total size of the 2 globals is 50.16 KiB (51368 bytes)
[13:36:05.419] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 50.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (50.11 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.419] - globals: [2] ‘x’, ‘i’
[13:36:05.419] 
[13:36:05.419] getGlobalsAndPackages() ... DONE
[13:36:05.420] getGlobalsAndPackages() ...
[13:36:05.420] Searching for globals...
[13:36:05.421] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.421] Searching for globals ... DONE
[13:36:05.421] Resolving globals: FALSE
[13:36:05.424] The total size of the 2 globals is 58.52 KiB (59920 bytes)
[13:36:05.424] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 58.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (58.46 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.424] - globals: [2] ‘x’, ‘i’
[13:36:05.424] 
[13:36:05.424] getGlobalsAndPackages() ... DONE
[13:36:05.425] getGlobalsAndPackages() ...
[13:36:05.425] Searching for globals...
[13:36:05.426] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.426] Searching for globals ... DONE
[13:36:05.426] Resolving globals: FALSE
[13:36:05.429] The total size of the 2 globals is 66.87 KiB (68472 bytes)
[13:36:05.429] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 66.87 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (66.81 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.429] - globals: [2] ‘x’, ‘i’
[13:36:05.429] 
[13:36:05.429] getGlobalsAndPackages() ... DONE
[13:36:05.430] getGlobalsAndPackages() ...
[13:36:05.430] Searching for globals...
[13:36:05.431] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.432] Searching for globals ... DONE
[13:36:05.432] Resolving globals: FALSE
[13:36:05.435] The total size of the 2 globals is 75.22 KiB (77024 bytes)
[13:36:05.436] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 75.22 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (75.16 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.436] - globals: [2] ‘x’, ‘i’
[13:36:05.436] 
[13:36:05.436] getGlobalsAndPackages() ... DONE
[13:36:05.436] getGlobalsAndPackages() ...
[13:36:05.437] Searching for globals...
[13:36:05.438] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.438] Searching for globals ... DONE
[13:36:05.438] Resolving globals: FALSE
[13:36:05.441] The total size of the 2 globals is 83.57 KiB (85576 bytes)
[13:36:05.441] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 83.57 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (83.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.442] - globals: [2] ‘x’, ‘i’
[13:36:05.442] 
[13:36:05.442] getGlobalsAndPackages() ... DONE
[13:36:05.442] getGlobalsAndPackages() ...
[13:36:05.442] Searching for globals...
[13:36:05.444] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.444] Searching for globals ... DONE
[13:36:05.444] Resolving globals: FALSE
[13:36:05.447] The total size of the 2 globals is 91.92 KiB (94128 bytes)
[13:36:05.447] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 91.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (91.87 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.447] - globals: [2] ‘x’, ‘i’
[13:36:05.448] 
[13:36:05.448] getGlobalsAndPackages() ... DONE
[13:36:05.448] getGlobalsAndPackages() ...
[13:36:05.448] Searching for globals...
[13:36:05.450] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.450] Searching for globals ... DONE
[13:36:05.450] Resolving globals: FALSE
[13:36:05.454] The total size of the 2 globals is 100.27 KiB (102680 bytes)
[13:36:05.454] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 100.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (100.22 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.455] - globals: [2] ‘x’, ‘i’
[13:36:05.455] 
[13:36:05.455] getGlobalsAndPackages() ... DONE
[13:36:05.455] getGlobalsAndPackages() ...
[13:36:05.455] Searching for globals...
[13:36:05.457] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.457] Searching for globals ... DONE
[13:36:05.457] Resolving globals: FALSE
[13:36:05.460] The total size of the 2 globals is 108.62 KiB (111232 bytes)
[13:36:05.461] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 108.62 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (108.57 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.461] - globals: [2] ‘x’, ‘i’
[13:36:05.461] 
[13:36:05.461] getGlobalsAndPackages() ... DONE
[13:36:05.462] getGlobalsAndPackages() ...
[13:36:05.462] Searching for globals...
[13:36:05.463] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.463] Searching for globals ... DONE
[13:36:05.463] Resolving globals: FALSE
[13:36:05.467] The total size of the 2 globals is 116.98 KiB (119784 bytes)
[13:36:05.467] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 116.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (116.92 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.468] - globals: [2] ‘x’, ‘i’
[13:36:05.468] 
[13:36:05.468] getGlobalsAndPackages() ... DONE
[13:36:05.468] getGlobalsAndPackages() ...
[13:36:05.468] Searching for globals...
[13:36:05.470] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.471] Searching for globals ... DONE
[13:36:05.471] Resolving globals: FALSE
[13:36:05.475] The total size of the 2 globals is 125.33 KiB (128336 bytes)
[13:36:05.475] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 125.33 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (125.27 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.475] - globals: [2] ‘x’, ‘i’
[13:36:05.475] 
[13:36:05.475] getGlobalsAndPackages() ... DONE
[13:36:05.476] getGlobalsAndPackages() ...
[13:36:05.476] Searching for globals...
[13:36:05.477] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.478] Searching for globals ... DONE
[13:36:05.478] Resolving globals: FALSE
[13:36:05.482] The total size of the 2 globals is 133.68 KiB (136888 bytes)
[13:36:05.482] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 133.68 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (133.62 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.482] - globals: [2] ‘x’, ‘i’
[13:36:05.482] 
[13:36:05.483] getGlobalsAndPackages() ... DONE
[13:36:05.483] getGlobalsAndPackages() ...
[13:36:05.483] Searching for globals...
[13:36:05.485] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.485] Searching for globals ... DONE
[13:36:05.485] Resolving globals: FALSE
[13:36:05.490] The total size of the 2 globals is 142.03 KiB (145440 bytes)
[13:36:05.490] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 142.03 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (141.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.491] - globals: [2] ‘x’, ‘i’
[13:36:05.491] 
[13:36:05.491] getGlobalsAndPackages() ... DONE
[13:36:05.491] getGlobalsAndPackages() ...
[13:36:05.491] Searching for globals...
[13:36:05.493] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.493] Searching for globals ... DONE
[13:36:05.493] Resolving globals: FALSE
[13:36:05.498] The total size of the 2 globals is 150.38 KiB (153992 bytes)
[13:36:05.498] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 150.38 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (150.33 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.498] - globals: [2] ‘x’, ‘i’
[13:36:05.498] 
[13:36:05.498] getGlobalsAndPackages() ... DONE
[13:36:05.499] getGlobalsAndPackages() ...
[13:36:05.499] Searching for globals...
[13:36:05.500] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.500] Searching for globals ... DONE
[13:36:05.501] Resolving globals: FALSE
[13:36:05.506] The total size of the 2 globals is 158.73 KiB (162544 bytes)
[13:36:05.507] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 158.73 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (158.68 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.507] - globals: [2] ‘x’, ‘i’
[13:36:05.507] 
[13:36:05.507] getGlobalsAndPackages() ... DONE
[13:36:05.507] getGlobalsAndPackages() ...
[13:36:05.508] Searching for globals...
[13:36:05.509] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.509] Searching for globals ... DONE
[13:36:05.509] Resolving globals: FALSE
[13:36:05.514] The total size of the 2 globals is 167.09 KiB (171096 bytes)
[13:36:05.515] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 167.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (167.03 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.515] - globals: [2] ‘x’, ‘i’
[13:36:05.515] 
[13:36:05.515] getGlobalsAndPackages() ... DONE
[13:36:05.516] getGlobalsAndPackages() ...
[13:36:05.516] Searching for globals...
[13:36:05.517] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.517] Searching for globals ... DONE
[13:36:05.517] Resolving globals: FALSE
[13:36:05.524] The total size of the 2 globals is 175.44 KiB (179648 bytes)
[13:36:05.524] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 175.44 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (175.38 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.524] - globals: [2] ‘x’, ‘i’
[13:36:05.524] 
[13:36:05.524] getGlobalsAndPackages() ... DONE
[13:36:05.525] getGlobalsAndPackages() ...
[13:36:05.525] Searching for globals...
[13:36:05.526] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.526] Searching for globals ... DONE
[13:36:05.526] Resolving globals: FALSE
[13:36:05.532] The total size of the 2 globals is 183.79 KiB (188200 bytes)
[13:36:05.533] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 183.79 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (183.73 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.533] - globals: [2] ‘x’, ‘i’
[13:36:05.533] 
[13:36:05.533] getGlobalsAndPackages() ... DONE
[13:36:05.533] getGlobalsAndPackages() ...
[13:36:05.533] Searching for globals...
[13:36:05.535] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.535] Searching for globals ... DONE
[13:36:05.535] Resolving globals: FALSE
[13:36:05.542] The total size of the 2 globals is 192.14 KiB (196752 bytes)
[13:36:05.542] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 192.14 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (192.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.542] - globals: [2] ‘x’, ‘i’
[13:36:05.542] 
[13:36:05.542] getGlobalsAndPackages() ... DONE
[13:36:05.543] getGlobalsAndPackages() ...
[13:36:05.543] Searching for globals...
[13:36:05.544] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.545] Searching for globals ... DONE
[13:36:05.545] Resolving globals: FALSE
[13:36:05.551] The total size of the 2 globals is 200.49 KiB (205304 bytes)
[13:36:05.551] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 200.49 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (200.44 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.551] - globals: [2] ‘x’, ‘i’
[13:36:05.552] 
[13:36:05.552] getGlobalsAndPackages() ... DONE
[13:36:05.552] getGlobalsAndPackages() ...
[13:36:05.552] Searching for globals...
[13:36:05.554] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.554] Searching for globals ... DONE
[13:36:05.554] Resolving globals: FALSE
[13:36:05.561] The total size of the 2 globals is 208.84 KiB (213856 bytes)
[13:36:05.561] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 208.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (208.79 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.562] - globals: [2] ‘x’, ‘i’
[13:36:05.562] 
[13:36:05.562] getGlobalsAndPackages() ... DONE
[13:36:05.562] getGlobalsAndPackages() ...
[13:36:05.562] Searching for globals...
[13:36:05.564] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.564] Searching for globals ... DONE
[13:36:05.564] Resolving globals: FALSE
[13:36:05.571] The total size of the 2 globals is 217.20 KiB (222408 bytes)
[13:36:05.572] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 217.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (217.14 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.572] - globals: [2] ‘x’, ‘i’
[13:36:05.572] 
[13:36:05.572] getGlobalsAndPackages() ... DONE
[13:36:05.573] getGlobalsAndPackages() ...
[13:36:05.573] Searching for globals...
[13:36:05.574] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.574] Searching for globals ... DONE
[13:36:05.574] Resolving globals: FALSE
[13:36:05.581] The total size of the 2 globals is 225.55 KiB (230960 bytes)
[13:36:05.582] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 225.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (225.49 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.582] - globals: [2] ‘x’, ‘i’
[13:36:05.582] 
[13:36:05.582] getGlobalsAndPackages() ... DONE
[13:36:05.583] getGlobalsAndPackages() ...
[13:36:05.583] Searching for globals...
[13:36:05.584] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.584] Searching for globals ... DONE
[13:36:05.584] Resolving globals: FALSE
[13:36:05.592] The total size of the 2 globals is 233.90 KiB (239512 bytes)
[13:36:05.593] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 233.90 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (233.84 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.593] - globals: [2] ‘x’, ‘i’
[13:36:05.593] 
[13:36:05.593] getGlobalsAndPackages() ... DONE
[13:36:05.593] getGlobalsAndPackages() ...
[13:36:05.594] Searching for globals...
[13:36:05.595] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.595] Searching for globals ... DONE
[13:36:05.595] Resolving globals: FALSE
[13:36:05.603] The total size of the 2 globals is 242.25 KiB (248064 bytes)
[13:36:05.604] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 242.25 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (242.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.604] - globals: [2] ‘x’, ‘i’
[13:36:05.604] 
[13:36:05.604] getGlobalsAndPackages() ... DONE
[13:36:05.605] getGlobalsAndPackages() ...
[13:36:05.605] Searching for globals...
[13:36:05.606] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.606] Searching for globals ... DONE
[13:36:05.606] Resolving globals: FALSE
[13:36:05.614] The total size of the 2 globals is 250.60 KiB (256616 bytes)
[13:36:05.614] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 250.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (250.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.614] - globals: [2] ‘x’, ‘i’
[13:36:05.615] 
[13:36:05.615] getGlobalsAndPackages() ... DONE
[13:36:05.615] getGlobalsAndPackages() ...
[13:36:05.615] Searching for globals...
[13:36:05.617] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.617] Searching for globals ... DONE
[13:36:05.617] Resolving globals: FALSE
[13:36:05.626] The total size of the 2 globals is 258.95 KiB (265168 bytes)
[13:36:05.626] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 258.95 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (258.90 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.627] - globals: [2] ‘x’, ‘i’
[13:36:05.627] 
[13:36:05.627] getGlobalsAndPackages() ... DONE
[13:36:05.627] getGlobalsAndPackages() ...
[13:36:05.627] Searching for globals...
[13:36:05.629] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.629] Searching for globals ... DONE
[13:36:05.629] Resolving globals: FALSE
[13:36:05.638] The total size of the 2 globals is 267.30 KiB (273720 bytes)
[13:36:05.638] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 267.30 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (267.25 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.639] - globals: [2] ‘x’, ‘i’
[13:36:05.639] 
[13:36:05.639] getGlobalsAndPackages() ... DONE
[13:36:05.639] getGlobalsAndPackages() ...
[13:36:05.639] Searching for globals...
[13:36:05.641] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.641] Searching for globals ... DONE
[13:36:05.641] Resolving globals: FALSE
[13:36:05.649] The total size of the 2 globals is 275.66 KiB (282272 bytes)
[13:36:05.650] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 275.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (275.60 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.650] - globals: [2] ‘x’, ‘i’
[13:36:05.650] 
[13:36:05.650] getGlobalsAndPackages() ... DONE
[13:36:05.651] getGlobalsAndPackages() ...
[13:36:05.651] Searching for globals...
[13:36:05.653] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.653] Searching for globals ... DONE
[13:36:05.653] Resolving globals: FALSE
[13:36:05.662] The total size of the 2 globals is 284.01 KiB (290824 bytes)
[13:36:05.662] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 284.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (283.95 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.662] - globals: [2] ‘x’, ‘i’
[13:36:05.662] 
[13:36:05.662] getGlobalsAndPackages() ... DONE
[13:36:05.663] getGlobalsAndPackages() ...
[13:36:05.663] Searching for globals...
[13:36:05.664] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.664] Searching for globals ... DONE
[13:36:05.665] Resolving globals: FALSE
[13:36:05.674] The total size of the 2 globals is 292.36 KiB (299376 bytes)
[13:36:05.675] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 292.36 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (292.30 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.675] - globals: [2] ‘x’, ‘i’
[13:36:05.675] 
[13:36:05.675] getGlobalsAndPackages() ... DONE
[13:36:05.675] getGlobalsAndPackages() ...
[13:36:05.675] Searching for globals...
[13:36:05.677] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.677] Searching for globals ... DONE
[13:36:05.677] Resolving globals: FALSE
[13:36:05.687] The total size of the 2 globals is 300.71 KiB (307928 bytes)
[13:36:05.687] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 300.71 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (300.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.687] - globals: [2] ‘x’, ‘i’
[13:36:05.688] 
[13:36:05.688] getGlobalsAndPackages() ... DONE
[13:36:05.688] getGlobalsAndPackages() ...
[13:36:05.688] Searching for globals...
[13:36:05.690] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.690] Searching for globals ... DONE
[13:36:05.690] Resolving globals: FALSE
[13:36:05.721] The total size of the 2 globals is 309.06 KiB (316480 bytes)
[13:36:05.721] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 309.06 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (309.01 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.721] - globals: [2] ‘x’, ‘i’
[13:36:05.721] 
[13:36:05.721] getGlobalsAndPackages() ... DONE
[13:36:05.722] getGlobalsAndPackages() ...
[13:36:05.722] Searching for globals...
[13:36:05.723] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.724] Searching for globals ... DONE
[13:36:05.724] Resolving globals: FALSE
[13:36:05.735] The total size of the 2 globals is 317.41 KiB (325032 bytes)
[13:36:05.735] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 317.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (317.36 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.735] - globals: [2] ‘x’, ‘i’
[13:36:05.735] 
[13:36:05.735] getGlobalsAndPackages() ... DONE
[13:36:05.736] getGlobalsAndPackages() ...
[13:36:05.736] Searching for globals...
[13:36:05.737] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.737] Searching for globals ... DONE
[13:36:05.737] Resolving globals: FALSE
[13:36:05.748] The total size of the 2 globals is 325.77 KiB (333584 bytes)
[13:36:05.748] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 325.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (325.71 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.748] - globals: [2] ‘x’, ‘i’
[13:36:05.748] 
[13:36:05.748] getGlobalsAndPackages() ... DONE
[13:36:05.749] getGlobalsAndPackages() ...
[13:36:05.749] Searching for globals...
[13:36:05.751] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.751] Searching for globals ... DONE
[13:36:05.751] Resolving globals: FALSE
[13:36:05.762] The total size of the 2 globals is 334.12 KiB (342136 bytes)
[13:36:05.762] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 334.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (334.06 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.762] - globals: [2] ‘x’, ‘i’
[13:36:05.762] 
[13:36:05.762] getGlobalsAndPackages() ... DONE
[13:36:05.763] getGlobalsAndPackages() ...
[13:36:05.763] Searching for globals...
[13:36:05.764] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.765] Searching for globals ... DONE
[13:36:05.765] Resolving globals: FALSE
[13:36:05.776] The total size of the 2 globals is 342.47 KiB (350688 bytes)
[13:36:05.776] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 342.47 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (342.41 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.777] - globals: [2] ‘x’, ‘i’
[13:36:05.777] 
[13:36:05.777] getGlobalsAndPackages() ... DONE
[13:36:05.777] getGlobalsAndPackages() ...
[13:36:05.777] Searching for globals...
[13:36:05.779] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.779] Searching for globals ... DONE
[13:36:05.779] Resolving globals: FALSE
[13:36:05.791] The total size of the 2 globals is 350.82 KiB (359240 bytes)
[13:36:05.791] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 350.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (350.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.791] - globals: [2] ‘x’, ‘i’
[13:36:05.792] 
[13:36:05.792] getGlobalsAndPackages() ... DONE
[13:36:05.792] getGlobalsAndPackages() ...
[13:36:05.792] Searching for globals...
[13:36:05.794] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.794] Searching for globals ... DONE
[13:36:05.794] Resolving globals: FALSE
[13:36:05.806] The total size of the 2 globals is 359.17 KiB (367792 bytes)
[13:36:05.806] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 359.17 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (359.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.806] - globals: [2] ‘x’, ‘i’
[13:36:05.806] 
[13:36:05.806] getGlobalsAndPackages() ... DONE
[13:36:05.807] getGlobalsAndPackages() ...
[13:36:05.807] Searching for globals...
[13:36:05.808] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.808] Searching for globals ... DONE
[13:36:05.808] Resolving globals: FALSE
[13:36:05.821] The total size of the 2 globals is 367.52 KiB (376344 bytes)
[13:36:05.821] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 367.52 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (367.47 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.821] - globals: [2] ‘x’, ‘i’
[13:36:05.821] 
[13:36:05.821] getGlobalsAndPackages() ... DONE
[13:36:05.822] getGlobalsAndPackages() ...
[13:36:05.822] Searching for globals...
[13:36:05.823] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.823] Searching for globals ... DONE
[13:36:05.824] Resolving globals: FALSE
[13:36:05.836] The total size of the 2 globals is 375.88 KiB (384896 bytes)
[13:36:05.836] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 375.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (375.82 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.837] - globals: [2] ‘x’, ‘i’
[13:36:05.837] 
[13:36:05.837] getGlobalsAndPackages() ... DONE
[13:36:05.837] getGlobalsAndPackages() ...
[13:36:05.837] Searching for globals...
[13:36:05.839] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.839] Searching for globals ... DONE
[13:36:05.839] Resolving globals: FALSE
[13:36:05.852] The total size of the 2 globals is 384.23 KiB (393448 bytes)
[13:36:05.852] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 384.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (384.17 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.852] - globals: [2] ‘x’, ‘i’
[13:36:05.852] 
[13:36:05.852] getGlobalsAndPackages() ... DONE
[13:36:05.853] getGlobalsAndPackages() ...
[13:36:05.853] Searching for globals...
[13:36:05.854] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.854] Searching for globals ... DONE
[13:36:05.855] Resolving globals: FALSE
[13:36:05.869] The total size of the 2 globals is 392.58 KiB (402000 bytes)
[13:36:05.869] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 392.58 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (392.52 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.869] - globals: [2] ‘x’, ‘i’
[13:36:05.869] 
[13:36:05.869] getGlobalsAndPackages() ... DONE
[13:36:05.870] getGlobalsAndPackages() ...
[13:36:05.870] Searching for globals...
[13:36:05.871] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.871] Searching for globals ... DONE
[13:36:05.871] Resolving globals: FALSE
[13:36:05.885] The total size of the 2 globals is 400.93 KiB (410552 bytes)
[13:36:05.886] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 400.93 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (400.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.886] - globals: [2] ‘x’, ‘i’
[13:36:05.886] 
[13:36:05.886] getGlobalsAndPackages() ... DONE
[13:36:05.887] getGlobalsAndPackages() ...
[13:36:05.887] Searching for globals...
[13:36:05.888] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.888] Searching for globals ... DONE
[13:36:05.888] Resolving globals: FALSE
[13:36:05.902] The total size of the 2 globals is 409.28 KiB (419104 bytes)
[13:36:05.903] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 409.28 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (409.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.903] - globals: [2] ‘x’, ‘i’
[13:36:05.903] 
[13:36:05.903] getGlobalsAndPackages() ... DONE
[13:36:05.903] getGlobalsAndPackages() ...
[13:36:05.904] Searching for globals...
[13:36:05.905] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.905] Searching for globals ... DONE
[13:36:05.905] Resolving globals: FALSE
[13:36:05.919] The total size of the 2 globals is 417.63 KiB (427656 bytes)
[13:36:05.920] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 417.63 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (417.58 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.920] - globals: [2] ‘x’, ‘i’
[13:36:05.920] 
[13:36:05.920] getGlobalsAndPackages() ... DONE
[13:36:05.920] getGlobalsAndPackages() ...
[13:36:05.921] Searching for globals...
[13:36:05.923] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.923] Searching for globals ... DONE
[13:36:05.923] Resolving globals: FALSE
[13:36:05.937] The total size of the 2 globals is 425.98 KiB (436208 bytes)
[13:36:05.937] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 425.98 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (425.93 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.938] - globals: [2] ‘x’, ‘i’
[13:36:05.938] 
[13:36:05.938] getGlobalsAndPackages() ... DONE
[13:36:05.938] getGlobalsAndPackages() ...
[13:36:05.938] Searching for globals...
[13:36:05.940] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.940] Searching for globals ... DONE
[13:36:05.940] Resolving globals: FALSE
[13:36:05.954] The total size of the 2 globals is 434.34 KiB (444760 bytes)
[13:36:05.955] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 434.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (434.28 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.955] - globals: [2] ‘x’, ‘i’
[13:36:05.955] 
[13:36:05.955] getGlobalsAndPackages() ... DONE
[13:36:05.956] getGlobalsAndPackages() ...
[13:36:05.956] Searching for globals...
[13:36:05.957] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.957] Searching for globals ... DONE
[13:36:05.957] Resolving globals: FALSE
[13:36:05.972] The total size of the 2 globals is 442.69 KiB (453312 bytes)
[13:36:05.972] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 442.69 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (442.63 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.973] - globals: [2] ‘x’, ‘i’
[13:36:05.973] 
[13:36:05.973] getGlobalsAndPackages() ... DONE
[13:36:05.973] getGlobalsAndPackages() ...
[13:36:05.973] Searching for globals...
[13:36:05.975] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.975] Searching for globals ... DONE
[13:36:05.975] Resolving globals: FALSE
[13:36:05.990] The total size of the 2 globals is 451.04 KiB (461864 bytes)
[13:36:05.990] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 451.04 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (450.98 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:05.990] - globals: [2] ‘x’, ‘i’
[13:36:05.991] 
[13:36:05.991] getGlobalsAndPackages() ... DONE
[13:36:05.991] getGlobalsAndPackages() ...
[13:36:05.991] Searching for globals...
[13:36:05.993] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:05.993] Searching for globals ... DONE
[13:36:05.993] Resolving globals: FALSE
[13:36:06.008] The total size of the 2 globals is 459.39 KiB (470416 bytes)
[13:36:06.008] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 459.39 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (459.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.009] - globals: [2] ‘x’, ‘i’
[13:36:06.009] 
[13:36:06.009] getGlobalsAndPackages() ... DONE
[13:36:06.010] getGlobalsAndPackages() ...
[13:36:06.010] Searching for globals...
[13:36:06.011] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.012] Searching for globals ... DONE
[13:36:06.012] Resolving globals: FALSE
[13:36:06.027] The total size of the 2 globals is 467.74 KiB (478968 bytes)
[13:36:06.027] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 467.74 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (467.69 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.028] - globals: [2] ‘x’, ‘i’
[13:36:06.028] 
[13:36:06.028] getGlobalsAndPackages() ... DONE
[13:36:06.028] getGlobalsAndPackages() ...
[13:36:06.028] Searching for globals...
[13:36:06.030] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.030] Searching for globals ... DONE
[13:36:06.030] Resolving globals: FALSE
[13:36:06.046] The total size of the 2 globals is 476.09 KiB (487520 bytes)
[13:36:06.046] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 476.09 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (476.04 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.047] - globals: [2] ‘x’, ‘i’
[13:36:06.047] 
[13:36:06.047] getGlobalsAndPackages() ... DONE
[13:36:06.047] getGlobalsAndPackages() ...
[13:36:06.047] Searching for globals...
[13:36:06.049] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.049] Searching for globals ... DONE
[13:36:06.049] Resolving globals: FALSE
[13:36:06.065] The total size of the 2 globals is 484.45 KiB (496072 bytes)
[13:36:06.065] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 484.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (484.39 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.066] - globals: [2] ‘x’, ‘i’
[13:36:06.066] 
[13:36:06.066] getGlobalsAndPackages() ... DONE
[13:36:06.066] getGlobalsAndPackages() ...
[13:36:06.066] Searching for globals...
[13:36:06.068] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.068] Searching for globals ... DONE
[13:36:06.068] Resolving globals: FALSE
[13:36:06.085] The total size of the 2 globals is 492.80 KiB (504624 bytes)
[13:36:06.085] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 492.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (492.74 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.085] - globals: [2] ‘x’, ‘i’
[13:36:06.085] 
[13:36:06.086] getGlobalsAndPackages() ... DONE
[13:36:06.086] getGlobalsAndPackages() ...
[13:36:06.086] Searching for globals...
[13:36:06.088] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.088] Searching for globals ... DONE
[13:36:06.088] Resolving globals: FALSE
[13:36:06.104] The total size of the 2 globals is 501.15 KiB (513176 bytes)
[13:36:06.104] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 501.15 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (501.09 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.105] - globals: [2] ‘x’, ‘i’
[13:36:06.105] 
[13:36:06.105] getGlobalsAndPackages() ... DONE
[13:36:06.105] getGlobalsAndPackages() ...
[13:36:06.105] Searching for globals...
[13:36:06.107] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.107] Searching for globals ... DONE
[13:36:06.107] Resolving globals: FALSE
[13:36:06.124] The total size of the 2 globals is 509.50 KiB (521728 bytes)
[13:36:06.124] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 509.50 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (509.45 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.124] - globals: [2] ‘x’, ‘i’
[13:36:06.124] 
[13:36:06.124] getGlobalsAndPackages() ... DONE
[13:36:06.125] getGlobalsAndPackages() ...
[13:36:06.125] Searching for globals...
[13:36:06.126] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.126] Searching for globals ... DONE
[13:36:06.127] Resolving globals: FALSE
[13:36:06.144] The total size of the 2 globals is 517.85 KiB (530280 bytes)
[13:36:06.145] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 517.85 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (517.80 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.145] - globals: [2] ‘x’, ‘i’
[13:36:06.145] 
[13:36:06.145] getGlobalsAndPackages() ... DONE
[13:36:06.145] getGlobalsAndPackages() ...
[13:36:06.145] Searching for globals...
[13:36:06.147] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.147] Searching for globals ... DONE
[13:36:06.147] Resolving globals: FALSE
[13:36:06.164] The total size of the 2 globals is 526.20 KiB (538832 bytes)
[13:36:06.165] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 526.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (526.15 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.165] - globals: [2] ‘x’, ‘i’
[13:36:06.165] 
[13:36:06.165] getGlobalsAndPackages() ... DONE
[13:36:06.166] getGlobalsAndPackages() ...
[13:36:06.166] Searching for globals...
[13:36:06.167] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.167] Searching for globals ... DONE
[13:36:06.167] Resolving globals: FALSE
[13:36:06.186] The total size of the 2 globals is 534.55 KiB (547384 bytes)
[13:36:06.186] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 534.55 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (534.50 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.186] - globals: [2] ‘x’, ‘i’
[13:36:06.187] 
[13:36:06.187] getGlobalsAndPackages() ... DONE
[13:36:06.187] getGlobalsAndPackages() ...
[13:36:06.187] Searching for globals...
[13:36:06.189] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.189] Searching for globals ... DONE
[13:36:06.189] Resolving globals: FALSE
[13:36:06.207] The total size of the 2 globals is 542.91 KiB (555936 bytes)
[13:36:06.207] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 542.91 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (542.85 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.207] - globals: [2] ‘x’, ‘i’
[13:36:06.207] 
[13:36:06.208] getGlobalsAndPackages() ... DONE
[13:36:06.208] getGlobalsAndPackages() ...
[13:36:06.208] Searching for globals...
[13:36:06.209] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.210] Searching for globals ... DONE
[13:36:06.210] Resolving globals: FALSE
[13:36:06.228] The total size of the 2 globals is 551.26 KiB (564488 bytes)
[13:36:06.229] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 551.26 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (551.20 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.229] - globals: [2] ‘x’, ‘i’
[13:36:06.229] 
[13:36:06.229] getGlobalsAndPackages() ... DONE
[13:36:06.230] getGlobalsAndPackages() ...
[13:36:06.230] Searching for globals...
[13:36:06.231] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.231] Searching for globals ... DONE
[13:36:06.231] Resolving globals: FALSE
[13:36:06.250] The total size of the 2 globals is 559.61 KiB (573040 bytes)
[13:36:06.251] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 559.61 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (559.55 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.251] - globals: [2] ‘x’, ‘i’
[13:36:06.251] 
[13:36:06.251] getGlobalsAndPackages() ... DONE
[13:36:06.251] getGlobalsAndPackages() ...
[13:36:06.251] Searching for globals...
[13:36:06.253] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.253] Searching for globals ... DONE
[13:36:06.253] Resolving globals: FALSE
[13:36:06.273] The total size of the 2 globals is 567.96 KiB (581592 bytes)
[13:36:06.274] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 567.96 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (567.91 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.274] - globals: [2] ‘x’, ‘i’
[13:36:06.274] 
[13:36:06.274] getGlobalsAndPackages() ... DONE
[13:36:06.274] getGlobalsAndPackages() ...
[13:36:06.274] Searching for globals...
[13:36:06.276] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.276] Searching for globals ... DONE
[13:36:06.276] Resolving globals: FALSE
[13:36:06.295] The total size of the 2 globals is 576.31 KiB (590144 bytes)
[13:36:06.296] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 576.31 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (576.26 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.296] - globals: [2] ‘x’, ‘i’
[13:36:06.296] 
[13:36:06.296] getGlobalsAndPackages() ... DONE
[13:36:06.296] getGlobalsAndPackages() ...
[13:36:06.297] Searching for globals...
[13:36:06.298] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.298] Searching for globals ... DONE
[13:36:06.298] Resolving globals: FALSE
[13:36:06.318] The total size of the 2 globals is 584.66 KiB (598696 bytes)
[13:36:06.319] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 584.66 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (584.61 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.319] - globals: [2] ‘x’, ‘i’
[13:36:06.319] 
[13:36:06.319] getGlobalsAndPackages() ... DONE
[13:36:06.320] getGlobalsAndPackages() ...
[13:36:06.320] Searching for globals...
[13:36:06.321] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.321] Searching for globals ... DONE
[13:36:06.321] Resolving globals: FALSE
[13:36:06.342] The total size of the 2 globals is 593.02 KiB (607248 bytes)
[13:36:06.342] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 593.02 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (592.96 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.343] - globals: [2] ‘x’, ‘i’
[13:36:06.343] 
[13:36:06.343] getGlobalsAndPackages() ... DONE
[13:36:06.343] getGlobalsAndPackages() ...
[13:36:06.343] Searching for globals...
[13:36:06.345] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.345] Searching for globals ... DONE
[13:36:06.345] Resolving globals: FALSE
[13:36:06.365] The total size of the 2 globals is 601.37 KiB (615800 bytes)
[13:36:06.365] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 601.37 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (601.31 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.365] - globals: [2] ‘x’, ‘i’
[13:36:06.365] 
[13:36:06.366] getGlobalsAndPackages() ... DONE
[13:36:06.366] getGlobalsAndPackages() ...
[13:36:06.366] Searching for globals...
[13:36:06.368] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.368] Searching for globals ... DONE
[13:36:06.368] Resolving globals: FALSE
[13:36:06.389] The total size of the 2 globals is 609.72 KiB (624352 bytes)
[13:36:06.389] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 609.72 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (609.66 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.389] - globals: [2] ‘x’, ‘i’
[13:36:06.389] 
[13:36:06.389] getGlobalsAndPackages() ... DONE
[13:36:06.390] getGlobalsAndPackages() ...
[13:36:06.390] Searching for globals...
[13:36:06.391] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.392] Searching for globals ... DONE
[13:36:06.392] Resolving globals: FALSE
[13:36:06.413] The total size of the 2 globals is 618.07 KiB (632904 bytes)
[13:36:06.413] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 618.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (618.02 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.413] - globals: [2] ‘x’, ‘i’
[13:36:06.414] 
[13:36:06.414] getGlobalsAndPackages() ... DONE
[13:36:06.414] getGlobalsAndPackages() ...
[13:36:06.414] Searching for globals...
[13:36:06.416] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.416] Searching for globals ... DONE
[13:36:06.416] Resolving globals: FALSE
[13:36:06.437] The total size of the 2 globals is 626.42 KiB (641456 bytes)
[13:36:06.437] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 626.42 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (626.37 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.437] - globals: [2] ‘x’, ‘i’
[13:36:06.437] 
[13:36:06.437] getGlobalsAndPackages() ... DONE
[13:36:06.438] getGlobalsAndPackages() ...
[13:36:06.438] Searching for globals...
[13:36:06.440] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.440] Searching for globals ... DONE
[13:36:06.440] Resolving globals: FALSE
[13:36:06.461] The total size of the 2 globals is 634.77 KiB (650008 bytes)
[13:36:06.462] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 634.77 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (634.72 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.462] - globals: [2] ‘x’, ‘i’
[13:36:06.462] 
[13:36:06.462] getGlobalsAndPackages() ... DONE
[13:36:06.462] getGlobalsAndPackages() ...
[13:36:06.462] Searching for globals...
[13:36:06.464] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.464] Searching for globals ... DONE
[13:36:06.464] Resolving globals: FALSE
[13:36:06.486] The total size of the 2 globals is 643.12 KiB (658560 bytes)
[13:36:06.487] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 643.12 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (643.07 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.487] - globals: [2] ‘x’, ‘i’
[13:36:06.487] 
[13:36:06.487] getGlobalsAndPackages() ... DONE
[13:36:06.488] getGlobalsAndPackages() ...
[13:36:06.488] Searching for globals...
[13:36:06.489] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.489] Searching for globals ... DONE
[13:36:06.489] Resolving globals: FALSE
[13:36:06.512] The total size of the 2 globals is 651.48 KiB (667112 bytes)
[13:36:06.512] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 651.48 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (651.42 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.512] - globals: [2] ‘x’, ‘i’
[13:36:06.512] 
[13:36:06.512] getGlobalsAndPackages() ... DONE
[13:36:06.513] getGlobalsAndPackages() ...
[13:36:06.513] Searching for globals...
[13:36:06.514] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.515] Searching for globals ... DONE
[13:36:06.515] Resolving globals: FALSE
[13:36:06.537] The total size of the 2 globals is 659.83 KiB (675664 bytes)
[13:36:06.538] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 659.83 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (659.77 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.538] - globals: [2] ‘x’, ‘i’
[13:36:06.538] 
[13:36:06.538] getGlobalsAndPackages() ... DONE
[13:36:06.538] getGlobalsAndPackages() ...
[13:36:06.539] Searching for globals...
[13:36:06.540] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.540] Searching for globals ... DONE
[13:36:06.540] Resolving globals: FALSE
[13:36:06.563] The total size of the 2 globals is 668.18 KiB (684216 bytes)
[13:36:06.564] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 668.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (668.12 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.564] - globals: [2] ‘x’, ‘i’
[13:36:06.564] 
[13:36:06.564] getGlobalsAndPackages() ... DONE
[13:36:06.565] getGlobalsAndPackages() ...
[13:36:06.565] Searching for globals...
[13:36:06.566] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.567] Searching for globals ... DONE
[13:36:06.567] Resolving globals: FALSE
[13:36:06.589] The total size of the 2 globals is 676.53 KiB (692768 bytes)
[13:36:06.590] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 676.53 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (676.48 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.590] - globals: [2] ‘x’, ‘i’
[13:36:06.590] 
[13:36:06.590] getGlobalsAndPackages() ... DONE
[13:36:06.591] getGlobalsAndPackages() ...
[13:36:06.591] Searching for globals...
[13:36:06.593] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.593] Searching for globals ... DONE
[13:36:06.593] Resolving globals: FALSE
[13:36:06.616] The total size of the 2 globals is 684.88 KiB (701320 bytes)
[13:36:06.616] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 684.88 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (684.83 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.616] - globals: [2] ‘x’, ‘i’
[13:36:06.616] 
[13:36:06.617] getGlobalsAndPackages() ... DONE
[13:36:06.617] getGlobalsAndPackages() ...
[13:36:06.617] Searching for globals...
[13:36:06.619] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.620] Searching for globals ... DONE
[13:36:06.620] Resolving globals: FALSE
[13:36:06.645] The total size of the 2 globals is 693.23 KiB (709872 bytes)
[13:36:06.645] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 693.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (693.18 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.645] - globals: [2] ‘x’, ‘i’
[13:36:06.645] 
[13:36:06.645] getGlobalsAndPackages() ... DONE
[13:36:06.646] getGlobalsAndPackages() ...
[13:36:06.646] Searching for globals...
[13:36:06.648] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.648] Searching for globals ... DONE
[13:36:06.648] Resolving globals: FALSE
[13:36:06.672] The total size of the 2 globals is 701.59 KiB (718424 bytes)
[13:36:06.672] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 701.59 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (701.53 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.673] - globals: [2] ‘x’, ‘i’
[13:36:06.673] 
[13:36:06.673] getGlobalsAndPackages() ... DONE
[13:36:06.673] getGlobalsAndPackages() ...
[13:36:06.673] Searching for globals...
[13:36:06.676] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.676] Searching for globals ... DONE
[13:36:06.676] Resolving globals: FALSE
[13:36:06.700] The total size of the 2 globals is 709.94 KiB (726976 bytes)
[13:36:06.700] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 709.94 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (709.88 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.700] - globals: [2] ‘x’, ‘i’
[13:36:06.700] 
[13:36:06.700] getGlobalsAndPackages() ... DONE
[13:36:06.701] getGlobalsAndPackages() ...
[13:36:06.701] Searching for globals...
[13:36:06.703] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.703] Searching for globals ... DONE
[13:36:06.703] Resolving globals: FALSE
[13:36:06.728] The total size of the 2 globals is 718.29 KiB (735528 bytes)
[13:36:06.728] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 718.29 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (718.23 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.728] - globals: [2] ‘x’, ‘i’
[13:36:06.728] 
[13:36:06.728] getGlobalsAndPackages() ... DONE
[13:36:06.729] getGlobalsAndPackages() ...
[13:36:06.729] Searching for globals...
[13:36:06.731] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.731] Searching for globals ... DONE
[13:36:06.731] Resolving globals: FALSE
[13:36:06.757] The total size of the 2 globals is 726.64 KiB (744080 bytes)
[13:36:06.758] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 726.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (726.59 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.758] - globals: [2] ‘x’, ‘i’
[13:36:06.758] 
[13:36:06.758] getGlobalsAndPackages() ... DONE
[13:36:06.759] getGlobalsAndPackages() ...
[13:36:06.759] Searching for globals...
[13:36:06.760] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.761] Searching for globals ... DONE
[13:36:06.761] Resolving globals: FALSE
[13:36:06.787] The total size of the 2 globals is 734.99 KiB (752632 bytes)
[13:36:06.787] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 734.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (734.94 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.787] - globals: [2] ‘x’, ‘i’
[13:36:06.787] 
[13:36:06.788] getGlobalsAndPackages() ... DONE
[13:36:06.788] getGlobalsAndPackages() ...
[13:36:06.788] Searching for globals...
[13:36:06.790] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.790] Searching for globals ... DONE
[13:36:06.790] Resolving globals: FALSE
[13:36:06.816] The total size of the 2 globals is 743.34 KiB (761184 bytes)
[13:36:06.816] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 743.34 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (743.29 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.816] - globals: [2] ‘x’, ‘i’
[13:36:06.816] 
[13:36:06.816] getGlobalsAndPackages() ... DONE
[13:36:06.817] getGlobalsAndPackages() ...
[13:36:06.817] Searching for globals...
[13:36:06.818] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.818] Searching for globals ... DONE
[13:36:06.818] Resolving globals: FALSE
[13:36:06.844] The total size of the 2 globals is 751.70 KiB (769736 bytes)
[13:36:06.845] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 751.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (751.64 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.845] - globals: [2] ‘x’, ‘i’
[13:36:06.845] 
[13:36:06.845] getGlobalsAndPackages() ... DONE
[13:36:06.846] getGlobalsAndPackages() ...
[13:36:06.846] Searching for globals...
[13:36:06.847] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.847] Searching for globals ... DONE
[13:36:06.847] Resolving globals: FALSE
[13:36:06.874] The total size of the 2 globals is 760.05 KiB (778288 bytes)
[13:36:06.874] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 760.05 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (759.99 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.874] - globals: [2] ‘x’, ‘i’
[13:36:06.874] 
[13:36:06.874] getGlobalsAndPackages() ... DONE
[13:36:06.875] getGlobalsAndPackages() ...
[13:36:06.875] Searching for globals...
[13:36:06.877] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.877] Searching for globals ... DONE
[13:36:06.877] Resolving globals: FALSE
[13:36:06.904] The total size of the 2 globals is 768.40 KiB (786840 bytes)
[13:36:06.905] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 768.40 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (768.34 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.905] - globals: [2] ‘x’, ‘i’
[13:36:06.905] 
[13:36:06.905] getGlobalsAndPackages() ... DONE
[13:36:06.906] getGlobalsAndPackages() ...
[13:36:06.906] Searching for globals...
[13:36:06.907] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.907] Searching for globals ... DONE
[13:36:06.907] Resolving globals: FALSE
[13:36:06.935] The total size of the 2 globals is 776.75 KiB (795392 bytes)
[13:36:06.935] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 776.75 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (776.70 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.935] - globals: [2] ‘x’, ‘i’
[13:36:06.936] 
[13:36:06.936] getGlobalsAndPackages() ... DONE
[13:36:06.936] getGlobalsAndPackages() ...
[13:36:06.936] Searching for globals...
[13:36:06.938] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.938] Searching for globals ... DONE
[13:36:06.938] Resolving globals: FALSE
[13:36:06.965] The total size of the 2 globals is 785.10 KiB (803944 bytes)
[13:36:06.965] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 785.10 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (785.05 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.966] - globals: [2] ‘x’, ‘i’
[13:36:06.966] 
[13:36:06.966] getGlobalsAndPackages() ... DONE
[13:36:06.966] getGlobalsAndPackages() ...
[13:36:06.966] Searching for globals...
[13:36:06.968] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.968] Searching for globals ... DONE
[13:36:06.968] Resolving globals: FALSE
[13:36:06.996] The total size of the 2 globals is 793.45 KiB (812496 bytes)
[13:36:06.996] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 793.45 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (793.40 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:06.996] - globals: [2] ‘x’, ‘i’
[13:36:06.996] 
[13:36:06.996] getGlobalsAndPackages() ... DONE
[13:36:06.997] getGlobalsAndPackages() ...
[13:36:06.997] Searching for globals...
[13:36:06.999] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:06.999] Searching for globals ... DONE
[13:36:06.999] Resolving globals: FALSE
[13:36:07.027] The total size of the 2 globals is 801.80 KiB (821048 bytes)
[13:36:07.027] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 801.80 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (801.75 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:07.027] - globals: [2] ‘x’, ‘i’
[13:36:07.028] 
[13:36:07.028] getGlobalsAndPackages() ... DONE
[13:36:07.028] getGlobalsAndPackages() ...
[13:36:07.028] Searching for globals...
[13:36:07.030] - globals found: [6] ‘{’, ‘+’, ‘[[’, ‘x’, ‘-’, ‘i’
[13:36:07.030] Searching for globals ... DONE
[13:36:07.030] Resolving globals: FALSE
[13:36:07.058] The total size of the 2 globals is 810.16 KiB (829600 bytes)
[13:36:07.058] The total size of the 2 globals exported for future expression (‘{; x[[i - 2]] + x[[i - 1]]; }’) is 810.16 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (810.10 KiB of class ‘environment’) and ‘i’ (56 bytes of class ‘numeric’)
[13:36:07.058] - globals: [2] ‘x’, ‘i’
[13:36:07.059] 
[13:36:07.059] getGlobalsAndPackages() ... DONE

> ## At this point nothing has been calculated,
> ## because lazy evaluation is in place.
> 
> ## Get the 7:th Fibonnaci numbers (should be 8)
> print(x[[7]])
[13:36:07.060] run() for ‘Future’ ...
[13:36:07.060] - state: ‘created’
[13:36:07.060] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:07.060] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:07.060] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:07.060]   - Field: ‘label’
[13:36:07.061]   - Field: ‘local’
[13:36:07.061]   - Field: ‘owner’
[13:36:07.061]   - Field: ‘envir’
[13:36:07.061]   - Field: ‘packages’
[13:36:07.061]   - Field: ‘gc’
[13:36:07.061]   - Field: ‘conditions’
[13:36:07.061]   - Field: ‘expr’
[13:36:07.061]   - Field: ‘uuid’
[13:36:07.061]   - Field: ‘seed’
[13:36:07.061]   - Field: ‘version’
[13:36:07.061]   - Field: ‘result’
[13:36:07.062]   - Field: ‘asynchronous’
[13:36:07.062]   - Field: ‘calls’
[13:36:07.062]   - Field: ‘globals’
[13:36:07.062]   - Field: ‘stdout’
[13:36:07.062]   - Field: ‘earlySignal’
[13:36:07.062]   - Field: ‘lazy’
[13:36:07.062]   - Field: ‘state’
[13:36:07.062] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:07.062] - Launch lazy future ...
[13:36:07.063] Packages needed by the future expression (n = 0): <none>
[13:36:07.063] Packages needed by future strategies (n = 0): <none>
[13:36:07.064] {
[13:36:07.064]     {
[13:36:07.064]         {
[13:36:07.064]             ...future.startTime <- base::Sys.time()
[13:36:07.064]             {
[13:36:07.064]                 {
[13:36:07.064]                   {
[13:36:07.064]                     base::local({
[13:36:07.064]                       has_future <- base::requireNamespace("future", 
[13:36:07.064]                         quietly = TRUE)
[13:36:07.064]                       if (has_future) {
[13:36:07.064]                         ns <- base::getNamespace("future")
[13:36:07.064]                         version <- ns[[".package"]][["version"]]
[13:36:07.064]                         if (is.null(version)) 
[13:36:07.064]                           version <- utils::packageVersion("future")
[13:36:07.064]                       }
[13:36:07.064]                       else {
[13:36:07.064]                         version <- NULL
[13:36:07.064]                       }
[13:36:07.064]                       if (!has_future || version < "1.8.0") {
[13:36:07.064]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:07.064]                           "", base::R.version$version.string), 
[13:36:07.064]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:07.064]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:07.064]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:07.064]                             "release", "version")], collapse = " "), 
[13:36:07.064]                           hostname = base::Sys.info()[["nodename"]])
[13:36:07.064]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:07.064]                           info)
[13:36:07.064]                         info <- base::paste(info, collapse = "; ")
[13:36:07.064]                         if (!has_future) {
[13:36:07.064]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:07.064]                             info)
[13:36:07.064]                         }
[13:36:07.064]                         else {
[13:36:07.064]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:07.064]                             info, version)
[13:36:07.064]                         }
[13:36:07.064]                         base::stop(msg)
[13:36:07.064]                       }
[13:36:07.064]                     })
[13:36:07.064]                   }
[13:36:07.064]                   ...future.strategy.old <- future::plan("list")
[13:36:07.064]                   options(future.plan = NULL)
[13:36:07.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:07.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:07.064]                 }
[13:36:07.064]                 ...future.workdir <- getwd()
[13:36:07.064]             }
[13:36:07.064]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:07.064]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:07.064]         }
[13:36:07.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:07.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:07.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:07.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:07.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:07.064]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:07.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:07.064]             base::names(...future.oldOptions))
[13:36:07.064]     }
[13:36:07.064]     if (TRUE) {
[13:36:07.064]     }
[13:36:07.064]     else {
[13:36:07.064]         if (NA) {
[13:36:07.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:07.064]                 open = "w")
[13:36:07.064]         }
[13:36:07.064]         else {
[13:36:07.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:07.064]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:07.064]         }
[13:36:07.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:07.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:07.064]             base::sink(type = "output", split = FALSE)
[13:36:07.064]             base::close(...future.stdout)
[13:36:07.064]         }, add = TRUE)
[13:36:07.064]     }
[13:36:07.064]     ...future.frame <- base::sys.nframe()
[13:36:07.064]     ...future.conditions <- base::list()
[13:36:07.064]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:07.064]     if (FALSE) {
[13:36:07.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:07.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:07.064]     }
[13:36:07.064]     ...future.result <- base::tryCatch({
[13:36:07.064]         base::withCallingHandlers({
[13:36:07.064]             ...future.value <- base::withVisible(base::local({
[13:36:07.064]                 x[[i - 2]] + x[[i - 1]]
[13:36:07.064]             }))
[13:36:07.064]             future::FutureResult(value = ...future.value$value, 
[13:36:07.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:07.064]                   ...future.rng), globalenv = if (FALSE) 
[13:36:07.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:07.064]                     ...future.globalenv.names))
[13:36:07.064]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:07.064]         }, condition = base::local({
[13:36:07.064]             c <- base::c
[13:36:07.064]             inherits <- base::inherits
[13:36:07.064]             invokeRestart <- base::invokeRestart
[13:36:07.064]             length <- base::length
[13:36:07.064]             list <- base::list
[13:36:07.064]             seq.int <- base::seq.int
[13:36:07.064]             signalCondition <- base::signalCondition
[13:36:07.064]             sys.calls <- base::sys.calls
[13:36:07.064]             `[[` <- base::`[[`
[13:36:07.064]             `+` <- base::`+`
[13:36:07.064]             `<<-` <- base::`<<-`
[13:36:07.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:07.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:07.064]                   3L)]
[13:36:07.064]             }
[13:36:07.064]             function(cond) {
[13:36:07.064]                 is_error <- inherits(cond, "error")
[13:36:07.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:07.064]                   NULL)
[13:36:07.064]                 if (is_error) {
[13:36:07.064]                   sessionInformation <- function() {
[13:36:07.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:07.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:07.064]                       search = base::search(), system = base::Sys.info())
[13:36:07.064]                   }
[13:36:07.064]                   ...future.conditions[[length(...future.conditions) + 
[13:36:07.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:07.064]                     cond$call), session = sessionInformation(), 
[13:36:07.064]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:07.064]                   signalCondition(cond)
[13:36:07.064]                 }
[13:36:07.064]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[13:36:07.064]                 "immediateCondition"))) {
[13:36:07.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:07.064]                   ...future.conditions[[length(...future.conditions) + 
[13:36:07.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:07.064]                   if (TRUE && !signal) {
[13:36:07.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:07.064]                     {
[13:36:07.064]                       inherits <- base::inherits
[13:36:07.064]                       invokeRestart <- base::invokeRestart
[13:36:07.064]                       is.null <- base::is.null
[13:36:07.064]                       muffled <- FALSE
[13:36:07.064]                       if (inherits(cond, "message")) {
[13:36:07.064]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:07.064]                         if (muffled) 
[13:36:07.064]                           invokeRestart("muffleMessage")
[13:36:07.064]                       }
[13:36:07.064]                       else if (inherits(cond, "warning")) {
[13:36:07.064]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:07.064]                         if (muffled) 
[13:36:07.064]                           invokeRestart("muffleWarning")
[13:36:07.064]                       }
[13:36:07.064]                       else if (inherits(cond, "condition")) {
[13:36:07.064]                         if (!is.null(pattern)) {
[13:36:07.064]                           computeRestarts <- base::computeRestarts
[13:36:07.064]                           grepl <- base::grepl
[13:36:07.064]                           restarts <- computeRestarts(cond)
[13:36:07.064]                           for (restart in restarts) {
[13:36:07.064]                             name <- restart$name
[13:36:07.064]                             if (is.null(name)) 
[13:36:07.064]                               next
[13:36:07.064]                             if (!grepl(pattern, name)) 
[13:36:07.064]                               next
[13:36:07.064]                             invokeRestart(restart)
[13:36:07.064]                             muffled <- TRUE
[13:36:07.064]                             break
[13:36:07.064]                           }
[13:36:07.064]                         }
[13:36:07.064]                       }
[13:36:07.064]                       invisible(muffled)
[13:36:07.064]                     }
[13:36:07.064]                     muffleCondition(cond, pattern = "^muffle")
[13:36:07.064]                   }
[13:36:07.064]                 }
[13:36:07.064]                 else {
[13:36:07.064]                   if (TRUE) {
[13:36:07.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:07.064]                     {
[13:36:07.064]                       inherits <- base::inherits
[13:36:07.064]                       invokeRestart <- base::invokeRestart
[13:36:07.064]                       is.null <- base::is.null
[13:36:07.064]                       muffled <- FALSE
[13:36:07.064]                       if (inherits(cond, "message")) {
[13:36:07.064]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:07.064]                         if (muffled) 
[13:36:07.064]                           invokeRestart("muffleMessage")
[13:36:07.064]                       }
[13:36:07.064]                       else if (inherits(cond, "warning")) {
[13:36:07.064]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:07.064]                         if (muffled) 
[13:36:07.064]                           invokeRestart("muffleWarning")
[13:36:07.064]                       }
[13:36:07.064]                       else if (inherits(cond, "condition")) {
[13:36:07.064]                         if (!is.null(pattern)) {
[13:36:07.064]                           computeRestarts <- base::computeRestarts
[13:36:07.064]                           grepl <- base::grepl
[13:36:07.064]                           restarts <- computeRestarts(cond)
[13:36:07.064]                           for (restart in restarts) {
[13:36:07.064]                             name <- restart$name
[13:36:07.064]                             if (is.null(name)) 
[13:36:07.064]                               next
[13:36:07.064]                             if (!grepl(pattern, name)) 
[13:36:07.064]                               next
[13:36:07.064]                             invokeRestart(restart)
[13:36:07.064]                             muffled <- TRUE
[13:36:07.064]                             break
[13:36:07.064]                           }
[13:36:07.064]                         }
[13:36:07.064]                       }
[13:36:07.064]                       invisible(muffled)
[13:36:07.064]                     }
[13:36:07.064]                     muffleCondition(cond, pattern = "^muffle")
[13:36:07.064]                   }
[13:36:07.064]                 }
[13:36:07.064]             }
[13:36:07.064]         }))
[13:36:07.064]     }, error = function(ex) {
[13:36:07.064]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:07.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:07.064]                 ...future.rng), started = ...future.startTime, 
[13:36:07.064]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:07.064]             version = "1.8"), class = "FutureResult")
[13:36:07.064]     }, finally = {
[13:36:07.064]         if (!identical(...future.workdir, getwd())) 
[13:36:07.064]             setwd(...future.workdir)
[13:36:07.064]         {
[13:36:07.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:07.064]                 ...future.oldOptions$nwarnings <- NULL
[13:36:07.064]             }
[13:36:07.064]             base::options(...future.oldOptions)
[13:36:07.064]             if (.Platform$OS.type == "windows") {
[13:36:07.064]                 old_names <- names(...future.oldEnvVars)
[13:36:07.064]                 envs <- base::Sys.getenv()
[13:36:07.064]                 names <- names(envs)
[13:36:07.064]                 common <- intersect(names, old_names)
[13:36:07.064]                 added <- setdiff(names, old_names)
[13:36:07.064]                 removed <- setdiff(old_names, names)
[13:36:07.064]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:07.064]                   envs[common]]
[13:36:07.064]                 NAMES <- toupper(changed)
[13:36:07.064]                 args <- list()
[13:36:07.064]                 for (kk in seq_along(NAMES)) {
[13:36:07.064]                   name <- changed[[kk]]
[13:36:07.064]                   NAME <- NAMES[[kk]]
[13:36:07.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.064]                     next
[13:36:07.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:07.064]                 }
[13:36:07.064]                 NAMES <- toupper(added)
[13:36:07.064]                 for (kk in seq_along(NAMES)) {
[13:36:07.064]                   name <- added[[kk]]
[13:36:07.064]                   NAME <- NAMES[[kk]]
[13:36:07.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.064]                     next
[13:36:07.064]                   args[[name]] <- ""
[13:36:07.064]                 }
[13:36:07.064]                 NAMES <- toupper(removed)
[13:36:07.064]                 for (kk in seq_along(NAMES)) {
[13:36:07.064]                   name <- removed[[kk]]
[13:36:07.064]                   NAME <- NAMES[[kk]]
[13:36:07.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.064]                     next
[13:36:07.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:07.064]                 }
[13:36:07.064]                 if (length(args) > 0) 
[13:36:07.064]                   base::do.call(base::Sys.setenv, args = args)
[13:36:07.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:07.064]             }
[13:36:07.064]             else {
[13:36:07.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:07.064]             }
[13:36:07.064]             {
[13:36:07.064]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:07.064]                   0L) {
[13:36:07.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:07.064]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:07.064]                   base::options(opts)
[13:36:07.064]                 }
[13:36:07.064]                 {
[13:36:07.064]                   {
[13:36:07.064]                     NULL
[13:36:07.064]                     RNGkind("Mersenne-Twister")
[13:36:07.064]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:07.064]                       inherits = FALSE)
[13:36:07.064]                   }
[13:36:07.064]                   options(future.plan = NULL)
[13:36:07.064]                   if (is.na(NA_character_)) 
[13:36:07.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:07.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:07.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:07.064]                     .init = FALSE)
[13:36:07.064]                 }
[13:36:07.064]             }
[13:36:07.064]         }
[13:36:07.064]     })
[13:36:07.064]     if (FALSE) {
[13:36:07.064]         base::sink(type = "output", split = FALSE)
[13:36:07.064]         if (NA) {
[13:36:07.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:07.064]         }
[13:36:07.064]         else {
[13:36:07.064]             ...future.result["stdout"] <- base::list(NULL)
[13:36:07.064]         }
[13:36:07.064]         base::close(...future.stdout)
[13:36:07.064]         ...future.stdout <- NULL
[13:36:07.064]     }
[13:36:07.064]     ...future.result$conditions <- ...future.conditions
[13:36:07.064]     ...future.result$finished <- base::Sys.time()
[13:36:07.064]     ...future.result
[13:36:07.064] }
[13:36:07.066] assign_globals() ...
[13:36:07.066] List of 2
[13:36:07.066]  $ x:Classes 'listenv', 'environment' <environment: 0x556980c03b98> 
[13:36:07.066]  $ i: int 7
[13:36:07.066]  - attr(*, "where")=List of 2
[13:36:07.066]   ..$ x:<environment: R_EmptyEnv> 
[13:36:07.066]   ..$ i:<environment: R_EmptyEnv> 
[13:36:07.066]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:07.066]  - attr(*, "resolved")= logi FALSE
[13:36:07.066]  - attr(*, "total_size")= num 34264
[13:36:07.066]  - attr(*, "already-done")= logi TRUE
[13:36:07.072] - copied ‘x’ to environment
[13:36:07.072] - copied ‘i’ to environment
[13:36:07.072] assign_globals() ... done
[13:36:07.073] plan(): Setting new future strategy stack:
[13:36:07.073] List of future strategies:
[13:36:07.073] 1. sequential:
[13:36:07.073]    - args: function (..., envir = parent.frame())
[13:36:07.073]    - tweaked: FALSE
[13:36:07.073]    - call: NULL
[13:36:07.073] plan(): nbrOfWorkers() = 1
[13:36:07.143] plan(): Setting new future strategy stack:
[13:36:07.143] List of future strategies:
[13:36:07.143] 1. sequential:
[13:36:07.143]    - args: function (..., envir = parent.frame())
[13:36:07.143]    - tweaked: FALSE
[13:36:07.143]    - call: plan(sequential)
[13:36:07.143] plan(): nbrOfWorkers() = 1
[13:36:07.144] SequentialFuture started (and completed)
[13:36:07.144] - Launch lazy future ... done
[13:36:07.144] run() for ‘SequentialFuture’ ... done
[1] 8

> ## At this point x[1:7] have been calculated,
> ## but nothing beyond.
> 
> ## Let's get the 50:th number.
> print(x[[50]])
[13:36:07.144] run() for ‘Future’ ...
[13:36:07.144] - state: ‘created’
[13:36:07.144] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:07.145] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:07.145] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:07.145]   - Field: ‘label’
[13:36:07.145]   - Field: ‘local’
[13:36:07.145]   - Field: ‘owner’
[13:36:07.145]   - Field: ‘envir’
[13:36:07.145]   - Field: ‘packages’
[13:36:07.145]   - Field: ‘gc’
[13:36:07.145]   - Field: ‘conditions’
[13:36:07.145]   - Field: ‘expr’
[13:36:07.145]   - Field: ‘uuid’
[13:36:07.146]   - Field: ‘seed’
[13:36:07.146]   - Field: ‘version’
[13:36:07.146]   - Field: ‘result’
[13:36:07.146]   - Field: ‘asynchronous’
[13:36:07.146]   - Field: ‘calls’
[13:36:07.146]   - Field: ‘globals’
[13:36:07.146]   - Field: ‘stdout’
[13:36:07.146]   - Field: ‘earlySignal’
[13:36:07.146]   - Field: ‘lazy’
[13:36:07.146]   - Field: ‘state’
[13:36:07.146] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:07.147] - Launch lazy future ...
[13:36:07.147] Packages needed by the future expression (n = 0): <none>
[13:36:07.147] Packages needed by future strategies (n = 0): <none>
[13:36:07.147] {
[13:36:07.147]     {
[13:36:07.147]         {
[13:36:07.147]             ...future.startTime <- base::Sys.time()
[13:36:07.147]             {
[13:36:07.147]                 {
[13:36:07.147]                   {
[13:36:07.147]                     base::local({
[13:36:07.147]                       has_future <- base::requireNamespace("future", 
[13:36:07.147]                         quietly = TRUE)
[13:36:07.147]                       if (has_future) {
[13:36:07.147]                         ns <- base::getNamespace("future")
[13:36:07.147]                         version <- ns[[".package"]][["version"]]
[13:36:07.147]                         if (is.null(version)) 
[13:36:07.147]                           version <- utils::packageVersion("future")
[13:36:07.147]                       }
[13:36:07.147]                       else {
[13:36:07.147]                         version <- NULL
[13:36:07.147]                       }
[13:36:07.147]                       if (!has_future || version < "1.8.0") {
[13:36:07.147]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:07.147]                           "", base::R.version$version.string), 
[13:36:07.147]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:07.147]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:07.147]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:07.147]                             "release", "version")], collapse = " "), 
[13:36:07.147]                           hostname = base::Sys.info()[["nodename"]])
[13:36:07.147]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:07.147]                           info)
[13:36:07.147]                         info <- base::paste(info, collapse = "; ")
[13:36:07.147]                         if (!has_future) {
[13:36:07.147]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:07.147]                             info)
[13:36:07.147]                         }
[13:36:07.147]                         else {
[13:36:07.147]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:07.147]                             info, version)
[13:36:07.147]                         }
[13:36:07.147]                         base::stop(msg)
[13:36:07.147]                       }
[13:36:07.147]                     })
[13:36:07.147]                   }
[13:36:07.147]                   ...future.strategy.old <- future::plan("list")
[13:36:07.147]                   options(future.plan = NULL)
[13:36:07.147]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:07.147]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:07.147]                 }
[13:36:07.147]                 ...future.workdir <- getwd()
[13:36:07.147]             }
[13:36:07.147]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:07.147]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:07.147]         }
[13:36:07.147]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:07.147]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:07.147]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:07.147]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:07.147]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:07.147]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:07.147]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:07.147]             base::names(...future.oldOptions))
[13:36:07.147]     }
[13:36:07.147]     if (TRUE) {
[13:36:07.147]     }
[13:36:07.147]     else {
[13:36:07.147]         if (NA) {
[13:36:07.147]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:07.147]                 open = "w")
[13:36:07.147]         }
[13:36:07.147]         else {
[13:36:07.147]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:07.147]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:07.147]         }
[13:36:07.147]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:07.147]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:07.147]             base::sink(type = "output", split = FALSE)
[13:36:07.147]             base::close(...future.stdout)
[13:36:07.147]         }, add = TRUE)
[13:36:07.147]     }
[13:36:07.147]     ...future.frame <- base::sys.nframe()
[13:36:07.147]     ...future.conditions <- base::list()
[13:36:07.147]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:07.147]     if (FALSE) {
[13:36:07.147]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:07.147]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:07.147]     }
[13:36:07.147]     ...future.result <- base::tryCatch({
[13:36:07.147]         base::withCallingHandlers({
[13:36:07.147]             ...future.value <- base::withVisible(base::local({
[13:36:07.147]                 x[[i - 2]] + x[[i - 1]]
[13:36:07.147]             }))
[13:36:07.147]             future::FutureResult(value = ...future.value$value, 
[13:36:07.147]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:07.147]                   ...future.rng), globalenv = if (FALSE) 
[13:36:07.147]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:07.147]                     ...future.globalenv.names))
[13:36:07.147]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:07.147]         }, condition = base::local({
[13:36:07.147]             c <- base::c
[13:36:07.147]             inherits <- base::inherits
[13:36:07.147]             invokeRestart <- base::invokeRestart
[13:36:07.147]             length <- base::length
[13:36:07.147]             list <- base::list
[13:36:07.147]             seq.int <- base::seq.int
[13:36:07.147]             signalCondition <- base::signalCondition
[13:36:07.147]             sys.calls <- base::sys.calls
[13:36:07.147]             `[[` <- base::`[[`
[13:36:07.147]             `+` <- base::`+`
[13:36:07.147]             `<<-` <- base::`<<-`
[13:36:07.147]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:07.147]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:07.147]                   3L)]
[13:36:07.147]             }
[13:36:07.147]             function(cond) {
[13:36:07.147]                 is_error <- inherits(cond, "error")
[13:36:07.147]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:07.147]                   NULL)
[13:36:07.147]                 if (is_error) {
[13:36:07.147]                   sessionInformation <- function() {
[13:36:07.147]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:07.147]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:07.147]                       search = base::search(), system = base::Sys.info())
[13:36:07.147]                   }
[13:36:07.147]                   ...future.conditions[[length(...future.conditions) + 
[13:36:07.147]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:07.147]                     cond$call), session = sessionInformation(), 
[13:36:07.147]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:07.147]                   signalCondition(cond)
[13:36:07.147]                 }
[13:36:07.147]                 else if (!ignore && TRUE && inherits(cond, c("error", 
[13:36:07.147]                 "immediateCondition"))) {
[13:36:07.147]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:07.147]                   ...future.conditions[[length(...future.conditions) + 
[13:36:07.147]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:07.147]                   if (TRUE && !signal) {
[13:36:07.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:07.147]                     {
[13:36:07.147]                       inherits <- base::inherits
[13:36:07.147]                       invokeRestart <- base::invokeRestart
[13:36:07.147]                       is.null <- base::is.null
[13:36:07.147]                       muffled <- FALSE
[13:36:07.147]                       if (inherits(cond, "message")) {
[13:36:07.147]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:07.147]                         if (muffled) 
[13:36:07.147]                           invokeRestart("muffleMessage")
[13:36:07.147]                       }
[13:36:07.147]                       else if (inherits(cond, "warning")) {
[13:36:07.147]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:07.147]                         if (muffled) 
[13:36:07.147]                           invokeRestart("muffleWarning")
[13:36:07.147]                       }
[13:36:07.147]                       else if (inherits(cond, "condition")) {
[13:36:07.147]                         if (!is.null(pattern)) {
[13:36:07.147]                           computeRestarts <- base::computeRestarts
[13:36:07.147]                           grepl <- base::grepl
[13:36:07.147]                           restarts <- computeRestarts(cond)
[13:36:07.147]                           for (restart in restarts) {
[13:36:07.147]                             name <- restart$name
[13:36:07.147]                             if (is.null(name)) 
[13:36:07.147]                               next
[13:36:07.147]                             if (!grepl(pattern, name)) 
[13:36:07.147]                               next
[13:36:07.147]                             invokeRestart(restart)
[13:36:07.147]                             muffled <- TRUE
[13:36:07.147]                             break
[13:36:07.147]                           }
[13:36:07.147]                         }
[13:36:07.147]                       }
[13:36:07.147]                       invisible(muffled)
[13:36:07.147]                     }
[13:36:07.147]                     muffleCondition(cond, pattern = "^muffle")
[13:36:07.147]                   }
[13:36:07.147]                 }
[13:36:07.147]                 else {
[13:36:07.147]                   if (TRUE) {
[13:36:07.147]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:07.147]                     {
[13:36:07.147]                       inherits <- base::inherits
[13:36:07.147]                       invokeRestart <- base::invokeRestart
[13:36:07.147]                       is.null <- base::is.null
[13:36:07.147]                       muffled <- FALSE
[13:36:07.147]                       if (inherits(cond, "message")) {
[13:36:07.147]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:07.147]                         if (muffled) 
[13:36:07.147]                           invokeRestart("muffleMessage")
[13:36:07.147]                       }
[13:36:07.147]                       else if (inherits(cond, "warning")) {
[13:36:07.147]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:07.147]                         if (muffled) 
[13:36:07.147]                           invokeRestart("muffleWarning")
[13:36:07.147]                       }
[13:36:07.147]                       else if (inherits(cond, "condition")) {
[13:36:07.147]                         if (!is.null(pattern)) {
[13:36:07.147]                           computeRestarts <- base::computeRestarts
[13:36:07.147]                           grepl <- base::grepl
[13:36:07.147]                           restarts <- computeRestarts(cond)
[13:36:07.147]                           for (restart in restarts) {
[13:36:07.147]                             name <- restart$name
[13:36:07.147]                             if (is.null(name)) 
[13:36:07.147]                               next
[13:36:07.147]                             if (!grepl(pattern, name)) 
[13:36:07.147]                               next
[13:36:07.147]                             invokeRestart(restart)
[13:36:07.147]                             muffled <- TRUE
[13:36:07.147]                             break
[13:36:07.147]                           }
[13:36:07.147]                         }
[13:36:07.147]                       }
[13:36:07.147]                       invisible(muffled)
[13:36:07.147]                     }
[13:36:07.147]                     muffleCondition(cond, pattern = "^muffle")
[13:36:07.147]                   }
[13:36:07.147]                 }
[13:36:07.147]             }
[13:36:07.147]         }))
[13:36:07.147]     }, error = function(ex) {
[13:36:07.147]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:07.147]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:07.147]                 ...future.rng), started = ...future.startTime, 
[13:36:07.147]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:07.147]             version = "1.8"), class = "FutureResult")
[13:36:07.147]     }, finally = {
[13:36:07.147]         if (!identical(...future.workdir, getwd())) 
[13:36:07.147]             setwd(...future.workdir)
[13:36:07.147]         {
[13:36:07.147]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:07.147]                 ...future.oldOptions$nwarnings <- NULL
[13:36:07.147]             }
[13:36:07.147]             base::options(...future.oldOptions)
[13:36:07.147]             if (.Platform$OS.type == "windows") {
[13:36:07.147]                 old_names <- names(...future.oldEnvVars)
[13:36:07.147]                 envs <- base::Sys.getenv()
[13:36:07.147]                 names <- names(envs)
[13:36:07.147]                 common <- intersect(names, old_names)
[13:36:07.147]                 added <- setdiff(names, old_names)
[13:36:07.147]                 removed <- setdiff(old_names, names)
[13:36:07.147]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:07.147]                   envs[common]]
[13:36:07.147]                 NAMES <- toupper(changed)
[13:36:07.147]                 args <- list()
[13:36:07.147]                 for (kk in seq_along(NAMES)) {
[13:36:07.147]                   name <- changed[[kk]]
[13:36:07.147]                   NAME <- NAMES[[kk]]
[13:36:07.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.147]                     next
[13:36:07.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:07.147]                 }
[13:36:07.147]                 NAMES <- toupper(added)
[13:36:07.147]                 for (kk in seq_along(NAMES)) {
[13:36:07.147]                   name <- added[[kk]]
[13:36:07.147]                   NAME <- NAMES[[kk]]
[13:36:07.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.147]                     next
[13:36:07.147]                   args[[name]] <- ""
[13:36:07.147]                 }
[13:36:07.147]                 NAMES <- toupper(removed)
[13:36:07.147]                 for (kk in seq_along(NAMES)) {
[13:36:07.147]                   name <- removed[[kk]]
[13:36:07.147]                   NAME <- NAMES[[kk]]
[13:36:07.147]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:07.147]                     next
[13:36:07.147]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:07.147]                 }
[13:36:07.147]                 if (length(args) > 0) 
[13:36:07.147]                   base::do.call(base::Sys.setenv, args = args)
[13:36:07.147]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:07.147]             }
[13:36:07.147]             else {
[13:36:07.147]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:07.147]             }
[13:36:07.147]             {
[13:36:07.147]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:07.147]                   0L) {
[13:36:07.147]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:07.147]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:07.147]                   base::options(opts)
[13:36:07.147]                 }
[13:36:07.147]                 {
[13:36:07.147]                   {
[13:36:07.147]                     NULL
[13:36:07.147]                     RNGkind("Mersenne-Twister")
[13:36:07.147]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:07.147]                       inherits = FALSE)
[13:36:07.147]                   }
[13:36:07.147]                   options(future.plan = NULL)
[13:36:07.147]                   if (is.na(NA_character_)) 
[13:36:07.147]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:07.147]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:07.147]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:07.147]                     .init = FALSE)
[13:36:07.147]                 }
[13:36:07.147]             }
[13:36:07.147]         }
[13:36:07.147]     })
[13:36:07.147]     if (FALSE) {
[13:36:07.147]         base::sink(type = "output", split = FALSE)
[13:36:07.147]         if (NA) {
[13:36:07.147]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:07.147]         }
[13:36:07.147]         else {
[13:36:07.147]             ...future.result["stdout"] <- base::list(NULL)
[13:36:07.147]         }
[13:36:07.147]         base::close(...future.stdout)
[13:36:07.147]         ...future.stdout <- NULL
[13:36:07.147]     }
[13:36:07.147]     ...future.result$conditions <- ...future.conditions
[13:36:07.147]     ...future.result$finished <- base::Sys.time()
[13:36:07.147]     ...future.result
[13:36:07.147] }
[13:36:07.149] assign_globals() ...
[13:36:07.149] List of 2
[13:36:07.149]  $ x:Classes 'listenv', 'environment' <environment: 0x556980c03b98> 
[13:36:07.149]  $ i: int 50
[13:36:07.149]  - attr(*, "where")=List of 2
[13:36:07.149]   ..$ x:<environment: R_EmptyEnv> 
[13:36:07.149]   ..$ i:<environment: R_EmptyEnv> 
[13:36:07.149]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:07.149]  - attr(*, "resolved")= logi FALSE
[13:36:07.149]  - attr(*, "total_size")= num 402000
[13:36:07.149]  - attr(*, "already-done")= logi TRUE
[13:36:07.153] - copied ‘x’ to environment
[13:36:07.153] - copied ‘i’ to environment
[13:36:07.153] assign_globals() ... done
[13:36:07.153] plan(): Setting new future strategy stack:
[13:36:07.153] List of future strategies:
[13:36:07.153] 1. sequential:
[13:36:07.153]    - args: function (..., envir = parent.frame())
[13:36:07.153]    - tweaked: FALSE
[13:36:07.153]    - call: NULL
[13:36:07.153] plan(): nbrOfWorkers() = 1
[13:36:07.980] plan(): Setting new future strategy stack:
[13:36:07.980] List of future strategies:
[13:36:07.980] 1. sequential:
[13:36:07.980]    - args: function (..., envir = parent.frame())
[13:36:07.980]    - tweaked: FALSE
[13:36:07.980]    - call: plan(sequential)
[13:36:07.980] plan(): nbrOfWorkers() = 1
[13:36:07.980] SequentialFuture started (and completed)
[13:36:07.980] - Launch lazy future ... done
[13:36:07.980] run() for ‘SequentialFuture’ ... done
[1] 7778742049

> ## Reset plan
> plan(oplan)
[13:36:07.981] plan(): Setting new future strategy stack:
[13:36:07.981] List of future strategies:
[13:36:07.981] 1. sequential:
[13:36:07.981]    - args: function (..., envir = parent.frame())
[13:36:07.981]    - tweaked: FALSE
[13:36:07.981]    - call: future::plan("sequential")
[13:36:07.981] plan(): nbrOfWorkers() = 1
> message("*** Fibonacci demo of the 'future' package ... DONE")
*** Fibonacci demo of the 'future' package ... DONE
> 
> 
> message("*** Mandelbrot demo of the 'future' package ...")
*** Mandelbrot demo of the 'future' package ...
> if (getRversion() >= "3.2.0" && !isWin32) {
+   options(future.demo.mandelbrot.nrow = 2L)
+   options(future.demo.mandelbrot.resolution = 50L)
+   options(future.demo.mandelbrot.delay = FALSE)
+   
+   for (cores in 1:availCores) {
+     message(sprintf("Testing with %d cores ...", cores))
+     options(mc.cores = cores)
+   
+     for (strategy in supportedStrategies(cores)) {
+       message(sprintf("- plan('%s') ...", strategy))
+       plan(strategy)
+       demo("mandelbrot", package = "future", ask = FALSE)
+       message(sprintf("- plan('%s') ... DONE", strategy))
+     }
+   
+     message(sprintf("Testing with %d cores ... DONE", cores))
+   } ## for (cores ...)
+ } else {
+   message(" - This demo requires R (>= 3.2.0). Skipping test. (Skipping also on Win32 i386 for speed)")
+ }
Testing with 1 cores ...
- plan('sequential') ...
[13:36:07.988] plan(): Setting new future strategy stack:
[13:36:07.988] List of future strategies:
[13:36:07.988] 1. sequential:
[13:36:07.988]    - args: function (..., envir = parent.frame())
[13:36:07.988]    - tweaked: FALSE
[13:36:07.988]    - call: plan(strategy)
[13:36:07.988] plan(): nbrOfWorkers() = 1


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 1 2 3 4

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:36:08.018] getGlobalsAndPackages() ...
[13:36:08.018] Searching for globals...
[13:36:08.024] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.025] Searching for globals ... DONE
[13:36:08.025] Resolving globals: FALSE
[13:36:08.025] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.026] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.026] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.026] - packages: [1] ‘future’
[13:36:08.026] getGlobalsAndPackages() ... DONE
 2[13:36:08.030] getGlobalsAndPackages() ...
[13:36:08.030] Searching for globals...
[13:36:08.033] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.033] Searching for globals ... DONE
[13:36:08.033] Resolving globals: FALSE
[13:36:08.034] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.034] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.034] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.034] - packages: [1] ‘future’
[13:36:08.034] getGlobalsAndPackages() ... DONE
 3[13:36:08.035] getGlobalsAndPackages() ...
[13:36:08.035] Searching for globals...
[13:36:08.038] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.038] Searching for globals ... DONE
[13:36:08.038] Resolving globals: FALSE
[13:36:08.039] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.039] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.039] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.040] - packages: [1] ‘future’
[13:36:08.040] getGlobalsAndPackages() ... DONE
 4[13:36:08.040] getGlobalsAndPackages() ...
[13:36:08.040] Searching for globals...
[13:36:08.043] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.043] Searching for globals ... DONE
[13:36:08.044] Resolving globals: FALSE
[13:36:08.044] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.044] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.045] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.045] - packages: [1] ‘future’
[13:36:08.045] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:36:08.058] resolved() for ‘Future’ ...
[13:36:08.058] - state: ‘created’
[13:36:08.058] - run: TRUE
[13:36:08.058] - run() ...
[13:36:08.058] run() for ‘Future’ ...
[13:36:08.059] - state: ‘created’
[13:36:08.059] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:08.059] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:08.059] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:08.060]   - Field: ‘label’
[13:36:08.060]   - Field: ‘local’
[13:36:08.060]   - Field: ‘owner’
[13:36:08.060]   - Field: ‘envir’
[13:36:08.060]   - Field: ‘packages’
[13:36:08.061]   - Field: ‘gc’
[13:36:08.061]   - Field: ‘conditions’
[13:36:08.061]   - Field: ‘expr’
[13:36:08.061]   - Field: ‘uuid’
[13:36:08.061]   - Field: ‘seed’
[13:36:08.061]   - Field: ‘version’
[13:36:08.062]   - Field: ‘result’
[13:36:08.062]   - Field: ‘asynchronous’
[13:36:08.062]   - Field: ‘calls’
[13:36:08.062]   - Field: ‘globals’
[13:36:08.062]   - Field: ‘stdout’
[13:36:08.062]   - Field: ‘earlySignal’
[13:36:08.063]   - Field: ‘lazy’
[13:36:08.063]   - Field: ‘state’
[13:36:08.063] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:08.063] - Launch lazy future ...
[13:36:08.063] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.064] Packages needed by future strategies (n = 0): <none>
[13:36:08.065] {
[13:36:08.065]     {
[13:36:08.065]         {
[13:36:08.065]             ...future.startTime <- base::Sys.time()
[13:36:08.065]             {
[13:36:08.065]                 {
[13:36:08.065]                   {
[13:36:08.065]                     {
[13:36:08.065]                       base::local({
[13:36:08.065]                         has_future <- base::requireNamespace("future", 
[13:36:08.065]                           quietly = TRUE)
[13:36:08.065]                         if (has_future) {
[13:36:08.065]                           ns <- base::getNamespace("future")
[13:36:08.065]                           version <- ns[[".package"]][["version"]]
[13:36:08.065]                           if (is.null(version)) 
[13:36:08.065]                             version <- utils::packageVersion("future")
[13:36:08.065]                         }
[13:36:08.065]                         else {
[13:36:08.065]                           version <- NULL
[13:36:08.065]                         }
[13:36:08.065]                         if (!has_future || version < "1.8.0") {
[13:36:08.065]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.065]                             "", base::R.version$version.string), 
[13:36:08.065]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:08.065]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:08.065]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.065]                               "release", "version")], collapse = " "), 
[13:36:08.065]                             hostname = base::Sys.info()[["nodename"]])
[13:36:08.065]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.065]                             info)
[13:36:08.065]                           info <- base::paste(info, collapse = "; ")
[13:36:08.065]                           if (!has_future) {
[13:36:08.065]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.065]                               info)
[13:36:08.065]                           }
[13:36:08.065]                           else {
[13:36:08.065]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.065]                               info, version)
[13:36:08.065]                           }
[13:36:08.065]                           base::stop(msg)
[13:36:08.065]                         }
[13:36:08.065]                       })
[13:36:08.065]                     }
[13:36:08.065]                     base::local({
[13:36:08.065]                       for (pkg in "future") {
[13:36:08.065]                         base::loadNamespace(pkg)
[13:36:08.065]                         base::library(pkg, character.only = TRUE)
[13:36:08.065]                       }
[13:36:08.065]                     })
[13:36:08.065]                   }
[13:36:08.065]                   ...future.strategy.old <- future::plan("list")
[13:36:08.065]                   options(future.plan = NULL)
[13:36:08.065]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.065]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.065]                 }
[13:36:08.065]                 ...future.workdir <- getwd()
[13:36:08.065]             }
[13:36:08.065]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.065]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.065]         }
[13:36:08.065]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.065]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.065]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.065]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.065]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.065]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.065]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.065]             base::names(...future.oldOptions))
[13:36:08.065]     }
[13:36:08.065]     if (FALSE) {
[13:36:08.065]     }
[13:36:08.065]     else {
[13:36:08.065]         if (TRUE) {
[13:36:08.065]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.065]                 open = "w")
[13:36:08.065]         }
[13:36:08.065]         else {
[13:36:08.065]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.065]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.065]         }
[13:36:08.065]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.065]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.065]             base::sink(type = "output", split = FALSE)
[13:36:08.065]             base::close(...future.stdout)
[13:36:08.065]         }, add = TRUE)
[13:36:08.065]     }
[13:36:08.065]     ...future.frame <- base::sys.nframe()
[13:36:08.065]     ...future.conditions <- base::list()
[13:36:08.065]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.065]     if (FALSE) {
[13:36:08.065]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.065]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.065]     }
[13:36:08.065]     ...future.result <- base::tryCatch({
[13:36:08.065]         base::withCallingHandlers({
[13:36:08.065]             ...future.value <- base::withVisible(base::local({
[13:36:08.065]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.065]                   ii, n), appendLF = FALSE)
[13:36:08.065]                 fit <- mandelbrot(C)
[13:36:08.065]                 delay(fit)
[13:36:08.065]                 message(" done")
[13:36:08.065]                 fit
[13:36:08.065]             }))
[13:36:08.065]             future::FutureResult(value = ...future.value$value, 
[13:36:08.065]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.065]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.065]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.065]                     ...future.globalenv.names))
[13:36:08.065]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.065]         }, condition = base::local({
[13:36:08.065]             c <- base::c
[13:36:08.065]             inherits <- base::inherits
[13:36:08.065]             invokeRestart <- base::invokeRestart
[13:36:08.065]             length <- base::length
[13:36:08.065]             list <- base::list
[13:36:08.065]             seq.int <- base::seq.int
[13:36:08.065]             signalCondition <- base::signalCondition
[13:36:08.065]             sys.calls <- base::sys.calls
[13:36:08.065]             `[[` <- base::`[[`
[13:36:08.065]             `+` <- base::`+`
[13:36:08.065]             `<<-` <- base::`<<-`
[13:36:08.065]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.065]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.065]                   3L)]
[13:36:08.065]             }
[13:36:08.065]             function(cond) {
[13:36:08.065]                 is_error <- inherits(cond, "error")
[13:36:08.065]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.065]                   NULL)
[13:36:08.065]                 if (is_error) {
[13:36:08.065]                   sessionInformation <- function() {
[13:36:08.065]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.065]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.065]                       search = base::search(), system = base::Sys.info())
[13:36:08.065]                   }
[13:36:08.065]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.065]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.065]                     cond$call), session = sessionInformation(), 
[13:36:08.065]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.065]                   signalCondition(cond)
[13:36:08.065]                 }
[13:36:08.065]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.065]                 "immediateCondition"))) {
[13:36:08.065]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.065]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.065]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.065]                   if (TRUE && !signal) {
[13:36:08.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.065]                     {
[13:36:08.065]                       inherits <- base::inherits
[13:36:08.065]                       invokeRestart <- base::invokeRestart
[13:36:08.065]                       is.null <- base::is.null
[13:36:08.065]                       muffled <- FALSE
[13:36:08.065]                       if (inherits(cond, "message")) {
[13:36:08.065]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.065]                         if (muffled) 
[13:36:08.065]                           invokeRestart("muffleMessage")
[13:36:08.065]                       }
[13:36:08.065]                       else if (inherits(cond, "warning")) {
[13:36:08.065]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.065]                         if (muffled) 
[13:36:08.065]                           invokeRestart("muffleWarning")
[13:36:08.065]                       }
[13:36:08.065]                       else if (inherits(cond, "condition")) {
[13:36:08.065]                         if (!is.null(pattern)) {
[13:36:08.065]                           computeRestarts <- base::computeRestarts
[13:36:08.065]                           grepl <- base::grepl
[13:36:08.065]                           restarts <- computeRestarts(cond)
[13:36:08.065]                           for (restart in restarts) {
[13:36:08.065]                             name <- restart$name
[13:36:08.065]                             if (is.null(name)) 
[13:36:08.065]                               next
[13:36:08.065]                             if (!grepl(pattern, name)) 
[13:36:08.065]                               next
[13:36:08.065]                             invokeRestart(restart)
[13:36:08.065]                             muffled <- TRUE
[13:36:08.065]                             break
[13:36:08.065]                           }
[13:36:08.065]                         }
[13:36:08.065]                       }
[13:36:08.065]                       invisible(muffled)
[13:36:08.065]                     }
[13:36:08.065]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.065]                   }
[13:36:08.065]                 }
[13:36:08.065]                 else {
[13:36:08.065]                   if (TRUE) {
[13:36:08.065]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.065]                     {
[13:36:08.065]                       inherits <- base::inherits
[13:36:08.065]                       invokeRestart <- base::invokeRestart
[13:36:08.065]                       is.null <- base::is.null
[13:36:08.065]                       muffled <- FALSE
[13:36:08.065]                       if (inherits(cond, "message")) {
[13:36:08.065]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.065]                         if (muffled) 
[13:36:08.065]                           invokeRestart("muffleMessage")
[13:36:08.065]                       }
[13:36:08.065]                       else if (inherits(cond, "warning")) {
[13:36:08.065]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.065]                         if (muffled) 
[13:36:08.065]                           invokeRestart("muffleWarning")
[13:36:08.065]                       }
[13:36:08.065]                       else if (inherits(cond, "condition")) {
[13:36:08.065]                         if (!is.null(pattern)) {
[13:36:08.065]                           computeRestarts <- base::computeRestarts
[13:36:08.065]                           grepl <- base::grepl
[13:36:08.065]                           restarts <- computeRestarts(cond)
[13:36:08.065]                           for (restart in restarts) {
[13:36:08.065]                             name <- restart$name
[13:36:08.065]                             if (is.null(name)) 
[13:36:08.065]                               next
[13:36:08.065]                             if (!grepl(pattern, name)) 
[13:36:08.065]                               next
[13:36:08.065]                             invokeRestart(restart)
[13:36:08.065]                             muffled <- TRUE
[13:36:08.065]                             break
[13:36:08.065]                           }
[13:36:08.065]                         }
[13:36:08.065]                       }
[13:36:08.065]                       invisible(muffled)
[13:36:08.065]                     }
[13:36:08.065]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.065]                   }
[13:36:08.065]                 }
[13:36:08.065]             }
[13:36:08.065]         }))
[13:36:08.065]     }, error = function(ex) {
[13:36:08.065]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.065]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.065]                 ...future.rng), started = ...future.startTime, 
[13:36:08.065]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.065]             version = "1.8"), class = "FutureResult")
[13:36:08.065]     }, finally = {
[13:36:08.065]         if (!identical(...future.workdir, getwd())) 
[13:36:08.065]             setwd(...future.workdir)
[13:36:08.065]         {
[13:36:08.065]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.065]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.065]             }
[13:36:08.065]             base::options(...future.oldOptions)
[13:36:08.065]             if (.Platform$OS.type == "windows") {
[13:36:08.065]                 old_names <- names(...future.oldEnvVars)
[13:36:08.065]                 envs <- base::Sys.getenv()
[13:36:08.065]                 names <- names(envs)
[13:36:08.065]                 common <- intersect(names, old_names)
[13:36:08.065]                 added <- setdiff(names, old_names)
[13:36:08.065]                 removed <- setdiff(old_names, names)
[13:36:08.065]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.065]                   envs[common]]
[13:36:08.065]                 NAMES <- toupper(changed)
[13:36:08.065]                 args <- list()
[13:36:08.065]                 for (kk in seq_along(NAMES)) {
[13:36:08.065]                   name <- changed[[kk]]
[13:36:08.065]                   NAME <- NAMES[[kk]]
[13:36:08.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.065]                     next
[13:36:08.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.065]                 }
[13:36:08.065]                 NAMES <- toupper(added)
[13:36:08.065]                 for (kk in seq_along(NAMES)) {
[13:36:08.065]                   name <- added[[kk]]
[13:36:08.065]                   NAME <- NAMES[[kk]]
[13:36:08.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.065]                     next
[13:36:08.065]                   args[[name]] <- ""
[13:36:08.065]                 }
[13:36:08.065]                 NAMES <- toupper(removed)
[13:36:08.065]                 for (kk in seq_along(NAMES)) {
[13:36:08.065]                   name <- removed[[kk]]
[13:36:08.065]                   NAME <- NAMES[[kk]]
[13:36:08.065]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.065]                     next
[13:36:08.065]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.065]                 }
[13:36:08.065]                 if (length(args) > 0) 
[13:36:08.065]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.065]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.065]             }
[13:36:08.065]             else {
[13:36:08.065]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.065]             }
[13:36:08.065]             {
[13:36:08.065]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.065]                   0L) {
[13:36:08.065]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.065]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.065]                   base::options(opts)
[13:36:08.065]                 }
[13:36:08.065]                 {
[13:36:08.065]                   {
[13:36:08.065]                     NULL
[13:36:08.065]                     RNGkind("Mersenne-Twister")
[13:36:08.065]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:08.065]                       inherits = FALSE)
[13:36:08.065]                   }
[13:36:08.065]                   options(future.plan = NULL)
[13:36:08.065]                   if (is.na(NA_character_)) 
[13:36:08.065]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.065]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.065]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.065]                     .init = FALSE)
[13:36:08.065]                 }
[13:36:08.065]             }
[13:36:08.065]         }
[13:36:08.065]     })
[13:36:08.065]     if (TRUE) {
[13:36:08.065]         base::sink(type = "output", split = FALSE)
[13:36:08.065]         if (TRUE) {
[13:36:08.065]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.065]         }
[13:36:08.065]         else {
[13:36:08.065]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.065]         }
[13:36:08.065]         base::close(...future.stdout)
[13:36:08.065]         ...future.stdout <- NULL
[13:36:08.065]     }
[13:36:08.065]     ...future.result$conditions <- ...future.conditions
[13:36:08.065]     ...future.result$finished <- base::Sys.time()
[13:36:08.065]     ...future.result
[13:36:08.065] }
[13:36:08.067] assign_globals() ...
[13:36:08.067] List of 4
[13:36:08.067]  $ ii   : int 1
[13:36:08.067]  $ n    : int 4
[13:36:08.067]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[13:36:08.067]   ..- attr(*, "region")=List of 2
[13:36:08.067]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:36:08.067]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:36:08.067]   ..- attr(*, "tile")= int [1:2] 1 1
[13:36:08.067]  $ delay:function (counts)  
[13:36:08.067]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.067]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5569828892e8> 
[13:36:08.067]  - attr(*, "where")=List of 4
[13:36:08.067]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.067]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.067]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.067]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.067]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.067]  - attr(*, "resolved")= logi FALSE
[13:36:08.067]  - attr(*, "total_size")= num 14584
[13:36:08.067]  - attr(*, "already-done")= logi TRUE
[13:36:08.076] - copied ‘ii’ to environment
[13:36:08.077] - copied ‘n’ to environment
[13:36:08.077] - copied ‘C’ to environment
[13:36:08.077] - reassign environment for ‘delay’
[13:36:08.077] - copied ‘delay’ to environment
[13:36:08.077] assign_globals() ... done
[13:36:08.078] plan(): Setting new future strategy stack:
[13:36:08.078] List of future strategies:
[13:36:08.078] 1. sequential:
[13:36:08.078]    - args: function (..., envir = parent.frame())
[13:36:08.078]    - tweaked: FALSE
[13:36:08.078]    - call: NULL
[13:36:08.078] plan(): nbrOfWorkers() = 1
[13:36:08.103] plan(): Setting new future strategy stack:
[13:36:08.103] List of future strategies:
[13:36:08.103] 1. sequential:
[13:36:08.103]    - args: function (..., envir = parent.frame())
[13:36:08.103]    - tweaked: FALSE
[13:36:08.103]    - call: plan(strategy)
[13:36:08.103] plan(): nbrOfWorkers() = 1
[13:36:08.104] SequentialFuture started (and completed)
[13:36:08.104] signalConditions() ...
[13:36:08.104]  - include = ‘immediateCondition’
[13:36:08.104]  - exclude = 
[13:36:08.104]  - resignal = FALSE
[13:36:08.105]  - Number of conditions: 2
[13:36:08.105] signalConditions() ... done
[13:36:08.105] - Launch lazy future ... done
[13:36:08.105] run() for ‘SequentialFuture’ ... done
[13:36:08.105] - run() ... done
[13:36:08.105] - resolved() ...
[13:36:08.106] resolved() for ‘SequentialFuture’ ...
[13:36:08.106] - state: ‘finished’
[13:36:08.106] - run: TRUE
[13:36:08.106] - result: ‘FutureResult’
[13:36:08.106] resolved() for ‘SequentialFuture’ ... done
[13:36:08.106] - resolved: TRUE
[13:36:08.106] - resolved() ... done
[13:36:08.107] resolved() for ‘SequentialFuture’ ... done
Plotting tile #1 of 4 ...
[13:36:08.107] signalConditions() ...
[13:36:08.107]  - include = ‘immediateCondition’
[13:36:08.107]  - exclude = 
[13:36:08.107]  - resignal = FALSE
[13:36:08.107]  - Number of conditions: 2
[13:36:08.108] signalConditions() ... done
[13:36:08.108] Future state: ‘finished’
[13:36:08.108] signalConditions() ...
[13:36:08.108]  - include = ‘condition’
[13:36:08.108]  - exclude = ‘immediateCondition’
[13:36:08.108]  - resignal = TRUE
[13:36:08.108]  - Number of conditions: 2
[13:36:08.109]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:36:08.109]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.109] signalConditions() ... done
[13:36:08.111] resolved() for ‘Future’ ...
[13:36:08.112] - state: ‘created’
[13:36:08.112] - run: TRUE
[13:36:08.112] - run() ...
[13:36:08.112] run() for ‘Future’ ...
[13:36:08.112] - state: ‘created’
[13:36:08.112] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:08.113] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:08.113] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:08.113]   - Field: ‘label’
[13:36:08.113]   - Field: ‘local’
[13:36:08.114]   - Field: ‘owner’
[13:36:08.114]   - Field: ‘envir’
[13:36:08.114]   - Field: ‘packages’
[13:36:08.114]   - Field: ‘gc’
[13:36:08.114]   - Field: ‘conditions’
[13:36:08.114]   - Field: ‘expr’
[13:36:08.114]   - Field: ‘uuid’
[13:36:08.115]   - Field: ‘seed’
[13:36:08.115]   - Field: ‘version’
[13:36:08.115]   - Field: ‘result’
[13:36:08.115]   - Field: ‘asynchronous’
[13:36:08.115]   - Field: ‘calls’
[13:36:08.115]   - Field: ‘globals’
[13:36:08.115]   - Field: ‘stdout’
[13:36:08.116]   - Field: ‘earlySignal’
[13:36:08.116]   - Field: ‘lazy’
[13:36:08.116]   - Field: ‘state’
[13:36:08.116] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:08.116] - Launch lazy future ...
[13:36:08.117] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.117] Packages needed by future strategies (n = 0): <none>
[13:36:08.117] {
[13:36:08.117]     {
[13:36:08.117]         {
[13:36:08.117]             ...future.startTime <- base::Sys.time()
[13:36:08.117]             {
[13:36:08.117]                 {
[13:36:08.117]                   {
[13:36:08.117]                     {
[13:36:08.117]                       base::local({
[13:36:08.117]                         has_future <- base::requireNamespace("future", 
[13:36:08.117]                           quietly = TRUE)
[13:36:08.117]                         if (has_future) {
[13:36:08.117]                           ns <- base::getNamespace("future")
[13:36:08.117]                           version <- ns[[".package"]][["version"]]
[13:36:08.117]                           if (is.null(version)) 
[13:36:08.117]                             version <- utils::packageVersion("future")
[13:36:08.117]                         }
[13:36:08.117]                         else {
[13:36:08.117]                           version <- NULL
[13:36:08.117]                         }
[13:36:08.117]                         if (!has_future || version < "1.8.0") {
[13:36:08.117]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.117]                             "", base::R.version$version.string), 
[13:36:08.117]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:08.117]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:08.117]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.117]                               "release", "version")], collapse = " "), 
[13:36:08.117]                             hostname = base::Sys.info()[["nodename"]])
[13:36:08.117]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.117]                             info)
[13:36:08.117]                           info <- base::paste(info, collapse = "; ")
[13:36:08.117]                           if (!has_future) {
[13:36:08.117]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.117]                               info)
[13:36:08.117]                           }
[13:36:08.117]                           else {
[13:36:08.117]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.117]                               info, version)
[13:36:08.117]                           }
[13:36:08.117]                           base::stop(msg)
[13:36:08.117]                         }
[13:36:08.117]                       })
[13:36:08.117]                     }
[13:36:08.117]                     base::local({
[13:36:08.117]                       for (pkg in "future") {
[13:36:08.117]                         base::loadNamespace(pkg)
[13:36:08.117]                         base::library(pkg, character.only = TRUE)
[13:36:08.117]                       }
[13:36:08.117]                     })
[13:36:08.117]                   }
[13:36:08.117]                   ...future.strategy.old <- future::plan("list")
[13:36:08.117]                   options(future.plan = NULL)
[13:36:08.117]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.117]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.117]                 }
[13:36:08.117]                 ...future.workdir <- getwd()
[13:36:08.117]             }
[13:36:08.117]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.117]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.117]         }
[13:36:08.117]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.117]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.117]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.117]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.117]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.117]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.117]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.117]             base::names(...future.oldOptions))
[13:36:08.117]     }
[13:36:08.117]     if (FALSE) {
[13:36:08.117]     }
[13:36:08.117]     else {
[13:36:08.117]         if (TRUE) {
[13:36:08.117]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.117]                 open = "w")
[13:36:08.117]         }
[13:36:08.117]         else {
[13:36:08.117]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.117]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.117]         }
[13:36:08.117]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.117]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.117]             base::sink(type = "output", split = FALSE)
[13:36:08.117]             base::close(...future.stdout)
[13:36:08.117]         }, add = TRUE)
[13:36:08.117]     }
[13:36:08.117]     ...future.frame <- base::sys.nframe()
[13:36:08.117]     ...future.conditions <- base::list()
[13:36:08.117]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.117]     if (FALSE) {
[13:36:08.117]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.117]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.117]     }
[13:36:08.117]     ...future.result <- base::tryCatch({
[13:36:08.117]         base::withCallingHandlers({
[13:36:08.117]             ...future.value <- base::withVisible(base::local({
[13:36:08.117]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.117]                   ii, n), appendLF = FALSE)
[13:36:08.117]                 fit <- mandelbrot(C)
[13:36:08.117]                 delay(fit)
[13:36:08.117]                 message(" done")
[13:36:08.117]                 fit
[13:36:08.117]             }))
[13:36:08.117]             future::FutureResult(value = ...future.value$value, 
[13:36:08.117]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.117]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.117]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.117]                     ...future.globalenv.names))
[13:36:08.117]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.117]         }, condition = base::local({
[13:36:08.117]             c <- base::c
[13:36:08.117]             inherits <- base::inherits
[13:36:08.117]             invokeRestart <- base::invokeRestart
[13:36:08.117]             length <- base::length
[13:36:08.117]             list <- base::list
[13:36:08.117]             seq.int <- base::seq.int
[13:36:08.117]             signalCondition <- base::signalCondition
[13:36:08.117]             sys.calls <- base::sys.calls
[13:36:08.117]             `[[` <- base::`[[`
[13:36:08.117]             `+` <- base::`+`
[13:36:08.117]             `<<-` <- base::`<<-`
[13:36:08.117]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.117]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.117]                   3L)]
[13:36:08.117]             }
[13:36:08.117]             function(cond) {
[13:36:08.117]                 is_error <- inherits(cond, "error")
[13:36:08.117]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.117]                   NULL)
[13:36:08.117]                 if (is_error) {
[13:36:08.117]                   sessionInformation <- function() {
[13:36:08.117]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.117]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.117]                       search = base::search(), system = base::Sys.info())
[13:36:08.117]                   }
[13:36:08.117]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.117]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.117]                     cond$call), session = sessionInformation(), 
[13:36:08.117]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.117]                   signalCondition(cond)
[13:36:08.117]                 }
[13:36:08.117]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.117]                 "immediateCondition"))) {
[13:36:08.117]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.117]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.117]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.117]                   if (TRUE && !signal) {
[13:36:08.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.117]                     {
[13:36:08.117]                       inherits <- base::inherits
[13:36:08.117]                       invokeRestart <- base::invokeRestart
[13:36:08.117]                       is.null <- base::is.null
[13:36:08.117]                       muffled <- FALSE
[13:36:08.117]                       if (inherits(cond, "message")) {
[13:36:08.117]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.117]                         if (muffled) 
[13:36:08.117]                           invokeRestart("muffleMessage")
[13:36:08.117]                       }
[13:36:08.117]                       else if (inherits(cond, "warning")) {
[13:36:08.117]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.117]                         if (muffled) 
[13:36:08.117]                           invokeRestart("muffleWarning")
[13:36:08.117]                       }
[13:36:08.117]                       else if (inherits(cond, "condition")) {
[13:36:08.117]                         if (!is.null(pattern)) {
[13:36:08.117]                           computeRestarts <- base::computeRestarts
[13:36:08.117]                           grepl <- base::grepl
[13:36:08.117]                           restarts <- computeRestarts(cond)
[13:36:08.117]                           for (restart in restarts) {
[13:36:08.117]                             name <- restart$name
[13:36:08.117]                             if (is.null(name)) 
[13:36:08.117]                               next
[13:36:08.117]                             if (!grepl(pattern, name)) 
[13:36:08.117]                               next
[13:36:08.117]                             invokeRestart(restart)
[13:36:08.117]                             muffled <- TRUE
[13:36:08.117]                             break
[13:36:08.117]                           }
[13:36:08.117]                         }
[13:36:08.117]                       }
[13:36:08.117]                       invisible(muffled)
[13:36:08.117]                     }
[13:36:08.117]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.117]                   }
[13:36:08.117]                 }
[13:36:08.117]                 else {
[13:36:08.117]                   if (TRUE) {
[13:36:08.117]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.117]                     {
[13:36:08.117]                       inherits <- base::inherits
[13:36:08.117]                       invokeRestart <- base::invokeRestart
[13:36:08.117]                       is.null <- base::is.null
[13:36:08.117]                       muffled <- FALSE
[13:36:08.117]                       if (inherits(cond, "message")) {
[13:36:08.117]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.117]                         if (muffled) 
[13:36:08.117]                           invokeRestart("muffleMessage")
[13:36:08.117]                       }
[13:36:08.117]                       else if (inherits(cond, "warning")) {
[13:36:08.117]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.117]                         if (muffled) 
[13:36:08.117]                           invokeRestart("muffleWarning")
[13:36:08.117]                       }
[13:36:08.117]                       else if (inherits(cond, "condition")) {
[13:36:08.117]                         if (!is.null(pattern)) {
[13:36:08.117]                           computeRestarts <- base::computeRestarts
[13:36:08.117]                           grepl <- base::grepl
[13:36:08.117]                           restarts <- computeRestarts(cond)
[13:36:08.117]                           for (restart in restarts) {
[13:36:08.117]                             name <- restart$name
[13:36:08.117]                             if (is.null(name)) 
[13:36:08.117]                               next
[13:36:08.117]                             if (!grepl(pattern, name)) 
[13:36:08.117]                               next
[13:36:08.117]                             invokeRestart(restart)
[13:36:08.117]                             muffled <- TRUE
[13:36:08.117]                             break
[13:36:08.117]                           }
[13:36:08.117]                         }
[13:36:08.117]                       }
[13:36:08.117]                       invisible(muffled)
[13:36:08.117]                     }
[13:36:08.117]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.117]                   }
[13:36:08.117]                 }
[13:36:08.117]             }
[13:36:08.117]         }))
[13:36:08.117]     }, error = function(ex) {
[13:36:08.117]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.117]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.117]                 ...future.rng), started = ...future.startTime, 
[13:36:08.117]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.117]             version = "1.8"), class = "FutureResult")
[13:36:08.117]     }, finally = {
[13:36:08.117]         if (!identical(...future.workdir, getwd())) 
[13:36:08.117]             setwd(...future.workdir)
[13:36:08.117]         {
[13:36:08.117]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.117]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.117]             }
[13:36:08.117]             base::options(...future.oldOptions)
[13:36:08.117]             if (.Platform$OS.type == "windows") {
[13:36:08.117]                 old_names <- names(...future.oldEnvVars)
[13:36:08.117]                 envs <- base::Sys.getenv()
[13:36:08.117]                 names <- names(envs)
[13:36:08.117]                 common <- intersect(names, old_names)
[13:36:08.117]                 added <- setdiff(names, old_names)
[13:36:08.117]                 removed <- setdiff(old_names, names)
[13:36:08.117]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.117]                   envs[common]]
[13:36:08.117]                 NAMES <- toupper(changed)
[13:36:08.117]                 args <- list()
[13:36:08.117]                 for (kk in seq_along(NAMES)) {
[13:36:08.117]                   name <- changed[[kk]]
[13:36:08.117]                   NAME <- NAMES[[kk]]
[13:36:08.117]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.117]                     next
[13:36:08.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.117]                 }
[13:36:08.117]                 NAMES <- toupper(added)
[13:36:08.117]                 for (kk in seq_along(NAMES)) {
[13:36:08.117]                   name <- added[[kk]]
[13:36:08.117]                   NAME <- NAMES[[kk]]
[13:36:08.117]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.117]                     next
[13:36:08.117]                   args[[name]] <- ""
[13:36:08.117]                 }
[13:36:08.117]                 NAMES <- toupper(removed)
[13:36:08.117]                 for (kk in seq_along(NAMES)) {
[13:36:08.117]                   name <- removed[[kk]]
[13:36:08.117]                   NAME <- NAMES[[kk]]
[13:36:08.117]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.117]                     next
[13:36:08.117]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.117]                 }
[13:36:08.117]                 if (length(args) > 0) 
[13:36:08.117]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.117]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.117]             }
[13:36:08.117]             else {
[13:36:08.117]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.117]             }
[13:36:08.117]             {
[13:36:08.117]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.117]                   0L) {
[13:36:08.117]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.117]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.117]                   base::options(opts)
[13:36:08.117]                 }
[13:36:08.117]                 {
[13:36:08.117]                   {
[13:36:08.117]                     NULL
[13:36:08.117]                     RNGkind("Mersenne-Twister")
[13:36:08.117]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:08.117]                       inherits = FALSE)
[13:36:08.117]                   }
[13:36:08.117]                   options(future.plan = NULL)
[13:36:08.117]                   if (is.na(NA_character_)) 
[13:36:08.117]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.117]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.117]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.117]                     .init = FALSE)
[13:36:08.117]                 }
[13:36:08.117]             }
[13:36:08.117]         }
[13:36:08.117]     })
[13:36:08.117]     if (TRUE) {
[13:36:08.117]         base::sink(type = "output", split = FALSE)
[13:36:08.117]         if (TRUE) {
[13:36:08.117]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.117]         }
[13:36:08.117]         else {
[13:36:08.117]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.117]         }
[13:36:08.117]         base::close(...future.stdout)
[13:36:08.117]         ...future.stdout <- NULL
[13:36:08.117]     }
[13:36:08.117]     ...future.result$conditions <- ...future.conditions
[13:36:08.117]     ...future.result$finished <- base::Sys.time()
[13:36:08.117]     ...future.result
[13:36:08.117] }
[13:36:08.120] assign_globals() ...
[13:36:08.120] List of 4
[13:36:08.120]  $ ii   : int 2
[13:36:08.120]  $ n    : int 4
[13:36:08.120]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[13:36:08.120]   ..- attr(*, "region")=List of 2
[13:36:08.120]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:36:08.120]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:36:08.120]   ..- attr(*, "tile")= int [1:2] 1 2
[13:36:08.120]  $ delay:function (counts)  
[13:36:08.120]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.120]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5569828892e8> 
[13:36:08.120]  - attr(*, "where")=List of 4
[13:36:08.120]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.120]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.120]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.120]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.120]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.120]  - attr(*, "resolved")= logi FALSE
[13:36:08.120]  - attr(*, "total_size")= num 14584
[13:36:08.120]  - attr(*, "already-done")= logi TRUE
[13:36:08.127] - copied ‘ii’ to environment
[13:36:08.127] - copied ‘n’ to environment
[13:36:08.127] - copied ‘C’ to environment
[13:36:08.127] - reassign environment for ‘delay’
[13:36:08.127] - copied ‘delay’ to environment
[13:36:08.127] assign_globals() ... done
[13:36:08.128] plan(): Setting new future strategy stack:
[13:36:08.128] List of future strategies:
[13:36:08.128] 1. sequential:
[13:36:08.128]    - args: function (..., envir = parent.frame())
[13:36:08.128]    - tweaked: FALSE
[13:36:08.128]    - call: NULL
[13:36:08.128] plan(): nbrOfWorkers() = 1
[13:36:08.143] plan(): Setting new future strategy stack:
[13:36:08.143] List of future strategies:
[13:36:08.143] 1. sequential:
[13:36:08.143]    - args: function (..., envir = parent.frame())
[13:36:08.143]    - tweaked: FALSE
[13:36:08.143]    - call: plan(strategy)
[13:36:08.143] plan(): nbrOfWorkers() = 1
[13:36:08.143] SequentialFuture started (and completed)
[13:36:08.143] signalConditions() ...
[13:36:08.143]  - include = ‘immediateCondition’
[13:36:08.143]  - exclude = 
[13:36:08.144]  - resignal = FALSE
[13:36:08.144]  - Number of conditions: 2
[13:36:08.144] signalConditions() ... done
[13:36:08.144] - Launch lazy future ... done
[13:36:08.144] run() for ‘SequentialFuture’ ... done
[13:36:08.144] - run() ... done
[13:36:08.144] - resolved() ...
[13:36:08.144] resolved() for ‘SequentialFuture’ ...
[13:36:08.144] - state: ‘finished’
[13:36:08.144] - run: TRUE
[13:36:08.144] - result: ‘FutureResult’
[13:36:08.145] resolved() for ‘SequentialFuture’ ... done
[13:36:08.145] - resolved: TRUE
[13:36:08.145] - resolved() ... done
[13:36:08.145] resolved() for ‘SequentialFuture’ ... done
Plotting tile #2 of 4 ...
[13:36:08.145] signalConditions() ...
[13:36:08.145]  - include = ‘immediateCondition’
[13:36:08.145]  - exclude = 
[13:36:08.145]  - resignal = FALSE
[13:36:08.145]  - Number of conditions: 2
[13:36:08.145] signalConditions() ... done
[13:36:08.146] Future state: ‘finished’
[13:36:08.146] signalConditions() ...
[13:36:08.146]  - include = ‘condition’
[13:36:08.146]  - exclude = ‘immediateCondition’
[13:36:08.146]  - resignal = TRUE
[13:36:08.146]  - Number of conditions: 2
[13:36:08.146]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:36:08.146]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.146] signalConditions() ... done
[13:36:08.147] resolved() for ‘Future’ ...
[13:36:08.147] - state: ‘created’
[13:36:08.147] - run: TRUE
[13:36:08.147] - run() ...
[13:36:08.147] run() for ‘Future’ ...
[13:36:08.147] - state: ‘created’
[13:36:08.148] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:08.148] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:08.148] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:08.148]   - Field: ‘label’
[13:36:08.148]   - Field: ‘local’
[13:36:08.148]   - Field: ‘owner’
[13:36:08.148]   - Field: ‘envir’
[13:36:08.148]   - Field: ‘packages’
[13:36:08.149]   - Field: ‘gc’
[13:36:08.149]   - Field: ‘conditions’
[13:36:08.149]   - Field: ‘expr’
[13:36:08.149]   - Field: ‘uuid’
[13:36:08.149]   - Field: ‘seed’
[13:36:08.149]   - Field: ‘version’
[13:36:08.149]   - Field: ‘result’
[13:36:08.149]   - Field: ‘asynchronous’
[13:36:08.149]   - Field: ‘calls’
[13:36:08.149]   - Field: ‘globals’
[13:36:08.149]   - Field: ‘stdout’
[13:36:08.150]   - Field: ‘earlySignal’
[13:36:08.150]   - Field: ‘lazy’
[13:36:08.150]   - Field: ‘state’
[13:36:08.150] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:08.150] - Launch lazy future ...
[13:36:08.150] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.150] Packages needed by future strategies (n = 0): <none>
[13:36:08.151] {
[13:36:08.151]     {
[13:36:08.151]         {
[13:36:08.151]             ...future.startTime <- base::Sys.time()
[13:36:08.151]             {
[13:36:08.151]                 {
[13:36:08.151]                   {
[13:36:08.151]                     {
[13:36:08.151]                       base::local({
[13:36:08.151]                         has_future <- base::requireNamespace("future", 
[13:36:08.151]                           quietly = TRUE)
[13:36:08.151]                         if (has_future) {
[13:36:08.151]                           ns <- base::getNamespace("future")
[13:36:08.151]                           version <- ns[[".package"]][["version"]]
[13:36:08.151]                           if (is.null(version)) 
[13:36:08.151]                             version <- utils::packageVersion("future")
[13:36:08.151]                         }
[13:36:08.151]                         else {
[13:36:08.151]                           version <- NULL
[13:36:08.151]                         }
[13:36:08.151]                         if (!has_future || version < "1.8.0") {
[13:36:08.151]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.151]                             "", base::R.version$version.string), 
[13:36:08.151]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:08.151]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:08.151]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.151]                               "release", "version")], collapse = " "), 
[13:36:08.151]                             hostname = base::Sys.info()[["nodename"]])
[13:36:08.151]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.151]                             info)
[13:36:08.151]                           info <- base::paste(info, collapse = "; ")
[13:36:08.151]                           if (!has_future) {
[13:36:08.151]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.151]                               info)
[13:36:08.151]                           }
[13:36:08.151]                           else {
[13:36:08.151]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.151]                               info, version)
[13:36:08.151]                           }
[13:36:08.151]                           base::stop(msg)
[13:36:08.151]                         }
[13:36:08.151]                       })
[13:36:08.151]                     }
[13:36:08.151]                     base::local({
[13:36:08.151]                       for (pkg in "future") {
[13:36:08.151]                         base::loadNamespace(pkg)
[13:36:08.151]                         base::library(pkg, character.only = TRUE)
[13:36:08.151]                       }
[13:36:08.151]                     })
[13:36:08.151]                   }
[13:36:08.151]                   ...future.strategy.old <- future::plan("list")
[13:36:08.151]                   options(future.plan = NULL)
[13:36:08.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.151]                 }
[13:36:08.151]                 ...future.workdir <- getwd()
[13:36:08.151]             }
[13:36:08.151]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.151]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.151]         }
[13:36:08.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.151]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.151]             base::names(...future.oldOptions))
[13:36:08.151]     }
[13:36:08.151]     if (FALSE) {
[13:36:08.151]     }
[13:36:08.151]     else {
[13:36:08.151]         if (TRUE) {
[13:36:08.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.151]                 open = "w")
[13:36:08.151]         }
[13:36:08.151]         else {
[13:36:08.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.151]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.151]         }
[13:36:08.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.151]             base::sink(type = "output", split = FALSE)
[13:36:08.151]             base::close(...future.stdout)
[13:36:08.151]         }, add = TRUE)
[13:36:08.151]     }
[13:36:08.151]     ...future.frame <- base::sys.nframe()
[13:36:08.151]     ...future.conditions <- base::list()
[13:36:08.151]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.151]     if (FALSE) {
[13:36:08.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.151]     }
[13:36:08.151]     ...future.result <- base::tryCatch({
[13:36:08.151]         base::withCallingHandlers({
[13:36:08.151]             ...future.value <- base::withVisible(base::local({
[13:36:08.151]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.151]                   ii, n), appendLF = FALSE)
[13:36:08.151]                 fit <- mandelbrot(C)
[13:36:08.151]                 delay(fit)
[13:36:08.151]                 message(" done")
[13:36:08.151]                 fit
[13:36:08.151]             }))
[13:36:08.151]             future::FutureResult(value = ...future.value$value, 
[13:36:08.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.151]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.151]                     ...future.globalenv.names))
[13:36:08.151]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.151]         }, condition = base::local({
[13:36:08.151]             c <- base::c
[13:36:08.151]             inherits <- base::inherits
[13:36:08.151]             invokeRestart <- base::invokeRestart
[13:36:08.151]             length <- base::length
[13:36:08.151]             list <- base::list
[13:36:08.151]             seq.int <- base::seq.int
[13:36:08.151]             signalCondition <- base::signalCondition
[13:36:08.151]             sys.calls <- base::sys.calls
[13:36:08.151]             `[[` <- base::`[[`
[13:36:08.151]             `+` <- base::`+`
[13:36:08.151]             `<<-` <- base::`<<-`
[13:36:08.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.151]                   3L)]
[13:36:08.151]             }
[13:36:08.151]             function(cond) {
[13:36:08.151]                 is_error <- inherits(cond, "error")
[13:36:08.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.151]                   NULL)
[13:36:08.151]                 if (is_error) {
[13:36:08.151]                   sessionInformation <- function() {
[13:36:08.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.151]                       search = base::search(), system = base::Sys.info())
[13:36:08.151]                   }
[13:36:08.151]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.151]                     cond$call), session = sessionInformation(), 
[13:36:08.151]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.151]                   signalCondition(cond)
[13:36:08.151]                 }
[13:36:08.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.151]                 "immediateCondition"))) {
[13:36:08.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.151]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.151]                   if (TRUE && !signal) {
[13:36:08.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.151]                     {
[13:36:08.151]                       inherits <- base::inherits
[13:36:08.151]                       invokeRestart <- base::invokeRestart
[13:36:08.151]                       is.null <- base::is.null
[13:36:08.151]                       muffled <- FALSE
[13:36:08.151]                       if (inherits(cond, "message")) {
[13:36:08.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.151]                         if (muffled) 
[13:36:08.151]                           invokeRestart("muffleMessage")
[13:36:08.151]                       }
[13:36:08.151]                       else if (inherits(cond, "warning")) {
[13:36:08.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.151]                         if (muffled) 
[13:36:08.151]                           invokeRestart("muffleWarning")
[13:36:08.151]                       }
[13:36:08.151]                       else if (inherits(cond, "condition")) {
[13:36:08.151]                         if (!is.null(pattern)) {
[13:36:08.151]                           computeRestarts <- base::computeRestarts
[13:36:08.151]                           grepl <- base::grepl
[13:36:08.151]                           restarts <- computeRestarts(cond)
[13:36:08.151]                           for (restart in restarts) {
[13:36:08.151]                             name <- restart$name
[13:36:08.151]                             if (is.null(name)) 
[13:36:08.151]                               next
[13:36:08.151]                             if (!grepl(pattern, name)) 
[13:36:08.151]                               next
[13:36:08.151]                             invokeRestart(restart)
[13:36:08.151]                             muffled <- TRUE
[13:36:08.151]                             break
[13:36:08.151]                           }
[13:36:08.151]                         }
[13:36:08.151]                       }
[13:36:08.151]                       invisible(muffled)
[13:36:08.151]                     }
[13:36:08.151]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.151]                   }
[13:36:08.151]                 }
[13:36:08.151]                 else {
[13:36:08.151]                   if (TRUE) {
[13:36:08.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.151]                     {
[13:36:08.151]                       inherits <- base::inherits
[13:36:08.151]                       invokeRestart <- base::invokeRestart
[13:36:08.151]                       is.null <- base::is.null
[13:36:08.151]                       muffled <- FALSE
[13:36:08.151]                       if (inherits(cond, "message")) {
[13:36:08.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.151]                         if (muffled) 
[13:36:08.151]                           invokeRestart("muffleMessage")
[13:36:08.151]                       }
[13:36:08.151]                       else if (inherits(cond, "warning")) {
[13:36:08.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.151]                         if (muffled) 
[13:36:08.151]                           invokeRestart("muffleWarning")
[13:36:08.151]                       }
[13:36:08.151]                       else if (inherits(cond, "condition")) {
[13:36:08.151]                         if (!is.null(pattern)) {
[13:36:08.151]                           computeRestarts <- base::computeRestarts
[13:36:08.151]                           grepl <- base::grepl
[13:36:08.151]                           restarts <- computeRestarts(cond)
[13:36:08.151]                           for (restart in restarts) {
[13:36:08.151]                             name <- restart$name
[13:36:08.151]                             if (is.null(name)) 
[13:36:08.151]                               next
[13:36:08.151]                             if (!grepl(pattern, name)) 
[13:36:08.151]                               next
[13:36:08.151]                             invokeRestart(restart)
[13:36:08.151]                             muffled <- TRUE
[13:36:08.151]                             break
[13:36:08.151]                           }
[13:36:08.151]                         }
[13:36:08.151]                       }
[13:36:08.151]                       invisible(muffled)
[13:36:08.151]                     }
[13:36:08.151]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.151]                   }
[13:36:08.151]                 }
[13:36:08.151]             }
[13:36:08.151]         }))
[13:36:08.151]     }, error = function(ex) {
[13:36:08.151]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.151]                 ...future.rng), started = ...future.startTime, 
[13:36:08.151]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.151]             version = "1.8"), class = "FutureResult")
[13:36:08.151]     }, finally = {
[13:36:08.151]         if (!identical(...future.workdir, getwd())) 
[13:36:08.151]             setwd(...future.workdir)
[13:36:08.151]         {
[13:36:08.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.151]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.151]             }
[13:36:08.151]             base::options(...future.oldOptions)
[13:36:08.151]             if (.Platform$OS.type == "windows") {
[13:36:08.151]                 old_names <- names(...future.oldEnvVars)
[13:36:08.151]                 envs <- base::Sys.getenv()
[13:36:08.151]                 names <- names(envs)
[13:36:08.151]                 common <- intersect(names, old_names)
[13:36:08.151]                 added <- setdiff(names, old_names)
[13:36:08.151]                 removed <- setdiff(old_names, names)
[13:36:08.151]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.151]                   envs[common]]
[13:36:08.151]                 NAMES <- toupper(changed)
[13:36:08.151]                 args <- list()
[13:36:08.151]                 for (kk in seq_along(NAMES)) {
[13:36:08.151]                   name <- changed[[kk]]
[13:36:08.151]                   NAME <- NAMES[[kk]]
[13:36:08.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.151]                     next
[13:36:08.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.151]                 }
[13:36:08.151]                 NAMES <- toupper(added)
[13:36:08.151]                 for (kk in seq_along(NAMES)) {
[13:36:08.151]                   name <- added[[kk]]
[13:36:08.151]                   NAME <- NAMES[[kk]]
[13:36:08.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.151]                     next
[13:36:08.151]                   args[[name]] <- ""
[13:36:08.151]                 }
[13:36:08.151]                 NAMES <- toupper(removed)
[13:36:08.151]                 for (kk in seq_along(NAMES)) {
[13:36:08.151]                   name <- removed[[kk]]
[13:36:08.151]                   NAME <- NAMES[[kk]]
[13:36:08.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.151]                     next
[13:36:08.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.151]                 }
[13:36:08.151]                 if (length(args) > 0) 
[13:36:08.151]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.151]             }
[13:36:08.151]             else {
[13:36:08.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.151]             }
[13:36:08.151]             {
[13:36:08.151]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.151]                   0L) {
[13:36:08.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.151]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.151]                   base::options(opts)
[13:36:08.151]                 }
[13:36:08.151]                 {
[13:36:08.151]                   {
[13:36:08.151]                     NULL
[13:36:08.151]                     RNGkind("Mersenne-Twister")
[13:36:08.151]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:08.151]                       inherits = FALSE)
[13:36:08.151]                   }
[13:36:08.151]                   options(future.plan = NULL)
[13:36:08.151]                   if (is.na(NA_character_)) 
[13:36:08.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.151]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.151]                     .init = FALSE)
[13:36:08.151]                 }
[13:36:08.151]             }
[13:36:08.151]         }
[13:36:08.151]     })
[13:36:08.151]     if (TRUE) {
[13:36:08.151]         base::sink(type = "output", split = FALSE)
[13:36:08.151]         if (TRUE) {
[13:36:08.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.151]         }
[13:36:08.151]         else {
[13:36:08.151]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.151]         }
[13:36:08.151]         base::close(...future.stdout)
[13:36:08.151]         ...future.stdout <- NULL
[13:36:08.151]     }
[13:36:08.151]     ...future.result$conditions <- ...future.conditions
[13:36:08.151]     ...future.result$finished <- base::Sys.time()
[13:36:08.151]     ...future.result
[13:36:08.151] }
[13:36:08.152] assign_globals() ...
[13:36:08.153] List of 4
[13:36:08.153]  $ ii   : int 3
[13:36:08.153]  $ n    : int 4
[13:36:08.153]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[13:36:08.153]   ..- attr(*, "region")=List of 2
[13:36:08.153]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:36:08.153]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:36:08.153]   ..- attr(*, "tile")= int [1:2] 2 1
[13:36:08.153]  $ delay:function (counts)  
[13:36:08.153]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.153]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5569828892e8> 
[13:36:08.153]  - attr(*, "where")=List of 4
[13:36:08.153]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.153]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.153]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.153]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.153]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.153]  - attr(*, "resolved")= logi FALSE
[13:36:08.153]  - attr(*, "total_size")= num 14584
[13:36:08.153]  - attr(*, "already-done")= logi TRUE
[13:36:08.158] - copied ‘ii’ to environment
[13:36:08.159] - copied ‘n’ to environment
[13:36:08.159] - copied ‘C’ to environment
[13:36:08.159] - reassign environment for ‘delay’
[13:36:08.159] - copied ‘delay’ to environment
[13:36:08.159] assign_globals() ... done
[13:36:08.159] plan(): Setting new future strategy stack:
[13:36:08.159] List of future strategies:
[13:36:08.159] 1. sequential:
[13:36:08.159]    - args: function (..., envir = parent.frame())
[13:36:08.159]    - tweaked: FALSE
[13:36:08.159]    - call: NULL
[13:36:08.160] plan(): nbrOfWorkers() = 1
[13:36:08.176] plan(): Setting new future strategy stack:
[13:36:08.176] List of future strategies:
[13:36:08.176] 1. sequential:
[13:36:08.176]    - args: function (..., envir = parent.frame())
[13:36:08.176]    - tweaked: FALSE
[13:36:08.176]    - call: plan(strategy)
[13:36:08.177] plan(): nbrOfWorkers() = 1
[13:36:08.177] SequentialFuture started (and completed)
[13:36:08.177] signalConditions() ...
[13:36:08.177]  - include = ‘immediateCondition’
[13:36:08.177]  - exclude = 
[13:36:08.177]  - resignal = FALSE
[13:36:08.177]  - Number of conditions: 2
[13:36:08.177] signalConditions() ... done
[13:36:08.177] - Launch lazy future ... done
[13:36:08.178] run() for ‘SequentialFuture’ ... done
[13:36:08.178] - run() ... done
[13:36:08.178] - resolved() ...
[13:36:08.178] resolved() for ‘SequentialFuture’ ...
[13:36:08.178] - state: ‘finished’
[13:36:08.178] - run: TRUE
[13:36:08.178] - result: ‘FutureResult’
[13:36:08.178] resolved() for ‘SequentialFuture’ ... done
[13:36:08.178] - resolved: TRUE
[13:36:08.178] - resolved() ... done
[13:36:08.178] resolved() for ‘SequentialFuture’ ... done
Plotting tile #3 of 4 ...
[13:36:08.179] signalConditions() ...
[13:36:08.179]  - include = ‘immediateCondition’
[13:36:08.179]  - exclude = 
[13:36:08.179]  - resignal = FALSE
[13:36:08.179]  - Number of conditions: 2
[13:36:08.179] signalConditions() ... done
[13:36:08.179] Future state: ‘finished’
[13:36:08.179] signalConditions() ...
[13:36:08.179]  - include = ‘condition’
[13:36:08.179]  - exclude = ‘immediateCondition’
[13:36:08.180]  - resignal = TRUE
[13:36:08.180]  - Number of conditions: 2
[13:36:08.180]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:36:08.180]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.180] signalConditions() ... done
[13:36:08.180] resolved() for ‘Future’ ...
[13:36:08.181] - state: ‘created’
[13:36:08.181] - run: TRUE
[13:36:08.181] - run() ...
[13:36:08.181] run() for ‘Future’ ...
[13:36:08.181] - state: ‘created’
[13:36:08.181] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:08.181] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:08.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:08.182]   - Field: ‘label’
[13:36:08.182]   - Field: ‘local’
[13:36:08.182]   - Field: ‘owner’
[13:36:08.182]   - Field: ‘envir’
[13:36:08.182]   - Field: ‘packages’
[13:36:08.182]   - Field: ‘gc’
[13:36:08.182]   - Field: ‘conditions’
[13:36:08.182]   - Field: ‘expr’
[13:36:08.182]   - Field: ‘uuid’
[13:36:08.182]   - Field: ‘seed’
[13:36:08.183]   - Field: ‘version’
[13:36:08.183]   - Field: ‘result’
[13:36:08.183]   - Field: ‘asynchronous’
[13:36:08.183]   - Field: ‘calls’
[13:36:08.183]   - Field: ‘globals’
[13:36:08.183]   - Field: ‘stdout’
[13:36:08.183]   - Field: ‘earlySignal’
[13:36:08.183]   - Field: ‘lazy’
[13:36:08.183]   - Field: ‘state’
[13:36:08.183] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:08.184] - Launch lazy future ...
[13:36:08.184] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.184] Packages needed by future strategies (n = 0): <none>
[13:36:08.184] {
[13:36:08.184]     {
[13:36:08.184]         {
[13:36:08.184]             ...future.startTime <- base::Sys.time()
[13:36:08.184]             {
[13:36:08.184]                 {
[13:36:08.184]                   {
[13:36:08.184]                     {
[13:36:08.184]                       base::local({
[13:36:08.184]                         has_future <- base::requireNamespace("future", 
[13:36:08.184]                           quietly = TRUE)
[13:36:08.184]                         if (has_future) {
[13:36:08.184]                           ns <- base::getNamespace("future")
[13:36:08.184]                           version <- ns[[".package"]][["version"]]
[13:36:08.184]                           if (is.null(version)) 
[13:36:08.184]                             version <- utils::packageVersion("future")
[13:36:08.184]                         }
[13:36:08.184]                         else {
[13:36:08.184]                           version <- NULL
[13:36:08.184]                         }
[13:36:08.184]                         if (!has_future || version < "1.8.0") {
[13:36:08.184]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.184]                             "", base::R.version$version.string), 
[13:36:08.184]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:08.184]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:08.184]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.184]                               "release", "version")], collapse = " "), 
[13:36:08.184]                             hostname = base::Sys.info()[["nodename"]])
[13:36:08.184]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.184]                             info)
[13:36:08.184]                           info <- base::paste(info, collapse = "; ")
[13:36:08.184]                           if (!has_future) {
[13:36:08.184]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.184]                               info)
[13:36:08.184]                           }
[13:36:08.184]                           else {
[13:36:08.184]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.184]                               info, version)
[13:36:08.184]                           }
[13:36:08.184]                           base::stop(msg)
[13:36:08.184]                         }
[13:36:08.184]                       })
[13:36:08.184]                     }
[13:36:08.184]                     base::local({
[13:36:08.184]                       for (pkg in "future") {
[13:36:08.184]                         base::loadNamespace(pkg)
[13:36:08.184]                         base::library(pkg, character.only = TRUE)
[13:36:08.184]                       }
[13:36:08.184]                     })
[13:36:08.184]                   }
[13:36:08.184]                   ...future.strategy.old <- future::plan("list")
[13:36:08.184]                   options(future.plan = NULL)
[13:36:08.184]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.184]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.184]                 }
[13:36:08.184]                 ...future.workdir <- getwd()
[13:36:08.184]             }
[13:36:08.184]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.184]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.184]         }
[13:36:08.184]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.184]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.184]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.184]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.184]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.184]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.184]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.184]             base::names(...future.oldOptions))
[13:36:08.184]     }
[13:36:08.184]     if (FALSE) {
[13:36:08.184]     }
[13:36:08.184]     else {
[13:36:08.184]         if (TRUE) {
[13:36:08.184]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.184]                 open = "w")
[13:36:08.184]         }
[13:36:08.184]         else {
[13:36:08.184]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.184]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.184]         }
[13:36:08.184]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.184]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.184]             base::sink(type = "output", split = FALSE)
[13:36:08.184]             base::close(...future.stdout)
[13:36:08.184]         }, add = TRUE)
[13:36:08.184]     }
[13:36:08.184]     ...future.frame <- base::sys.nframe()
[13:36:08.184]     ...future.conditions <- base::list()
[13:36:08.184]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.184]     if (FALSE) {
[13:36:08.184]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.184]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.184]     }
[13:36:08.184]     ...future.result <- base::tryCatch({
[13:36:08.184]         base::withCallingHandlers({
[13:36:08.184]             ...future.value <- base::withVisible(base::local({
[13:36:08.184]                 message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.184]                   ii, n), appendLF = FALSE)
[13:36:08.184]                 fit <- mandelbrot(C)
[13:36:08.184]                 delay(fit)
[13:36:08.184]                 message(" done")
[13:36:08.184]                 fit
[13:36:08.184]             }))
[13:36:08.184]             future::FutureResult(value = ...future.value$value, 
[13:36:08.184]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.184]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.184]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.184]                     ...future.globalenv.names))
[13:36:08.184]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.184]         }, condition = base::local({
[13:36:08.184]             c <- base::c
[13:36:08.184]             inherits <- base::inherits
[13:36:08.184]             invokeRestart <- base::invokeRestart
[13:36:08.184]             length <- base::length
[13:36:08.184]             list <- base::list
[13:36:08.184]             seq.int <- base::seq.int
[13:36:08.184]             signalCondition <- base::signalCondition
[13:36:08.184]             sys.calls <- base::sys.calls
[13:36:08.184]             `[[` <- base::`[[`
[13:36:08.184]             `+` <- base::`+`
[13:36:08.184]             `<<-` <- base::`<<-`
[13:36:08.184]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.184]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.184]                   3L)]
[13:36:08.184]             }
[13:36:08.184]             function(cond) {
[13:36:08.184]                 is_error <- inherits(cond, "error")
[13:36:08.184]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.184]                   NULL)
[13:36:08.184]                 if (is_error) {
[13:36:08.184]                   sessionInformation <- function() {
[13:36:08.184]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.184]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.184]                       search = base::search(), system = base::Sys.info())
[13:36:08.184]                   }
[13:36:08.184]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.184]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.184]                     cond$call), session = sessionInformation(), 
[13:36:08.184]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.184]                   signalCondition(cond)
[13:36:08.184]                 }
[13:36:08.184]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.184]                 "immediateCondition"))) {
[13:36:08.184]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.184]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.184]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.184]                   if (TRUE && !signal) {
[13:36:08.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.184]                     {
[13:36:08.184]                       inherits <- base::inherits
[13:36:08.184]                       invokeRestart <- base::invokeRestart
[13:36:08.184]                       is.null <- base::is.null
[13:36:08.184]                       muffled <- FALSE
[13:36:08.184]                       if (inherits(cond, "message")) {
[13:36:08.184]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.184]                         if (muffled) 
[13:36:08.184]                           invokeRestart("muffleMessage")
[13:36:08.184]                       }
[13:36:08.184]                       else if (inherits(cond, "warning")) {
[13:36:08.184]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.184]                         if (muffled) 
[13:36:08.184]                           invokeRestart("muffleWarning")
[13:36:08.184]                       }
[13:36:08.184]                       else if (inherits(cond, "condition")) {
[13:36:08.184]                         if (!is.null(pattern)) {
[13:36:08.184]                           computeRestarts <- base::computeRestarts
[13:36:08.184]                           grepl <- base::grepl
[13:36:08.184]                           restarts <- computeRestarts(cond)
[13:36:08.184]                           for (restart in restarts) {
[13:36:08.184]                             name <- restart$name
[13:36:08.184]                             if (is.null(name)) 
[13:36:08.184]                               next
[13:36:08.184]                             if (!grepl(pattern, name)) 
[13:36:08.184]                               next
[13:36:08.184]                             invokeRestart(restart)
[13:36:08.184]                             muffled <- TRUE
[13:36:08.184]                             break
[13:36:08.184]                           }
[13:36:08.184]                         }
[13:36:08.184]                       }
[13:36:08.184]                       invisible(muffled)
[13:36:08.184]                     }
[13:36:08.184]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.184]                   }
[13:36:08.184]                 }
[13:36:08.184]                 else {
[13:36:08.184]                   if (TRUE) {
[13:36:08.184]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.184]                     {
[13:36:08.184]                       inherits <- base::inherits
[13:36:08.184]                       invokeRestart <- base::invokeRestart
[13:36:08.184]                       is.null <- base::is.null
[13:36:08.184]                       muffled <- FALSE
[13:36:08.184]                       if (inherits(cond, "message")) {
[13:36:08.184]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.184]                         if (muffled) 
[13:36:08.184]                           invokeRestart("muffleMessage")
[13:36:08.184]                       }
[13:36:08.184]                       else if (inherits(cond, "warning")) {
[13:36:08.184]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.184]                         if (muffled) 
[13:36:08.184]                           invokeRestart("muffleWarning")
[13:36:08.184]                       }
[13:36:08.184]                       else if (inherits(cond, "condition")) {
[13:36:08.184]                         if (!is.null(pattern)) {
[13:36:08.184]                           computeRestarts <- base::computeRestarts
[13:36:08.184]                           grepl <- base::grepl
[13:36:08.184]                           restarts <- computeRestarts(cond)
[13:36:08.184]                           for (restart in restarts) {
[13:36:08.184]                             name <- restart$name
[13:36:08.184]                             if (is.null(name)) 
[13:36:08.184]                               next
[13:36:08.184]                             if (!grepl(pattern, name)) 
[13:36:08.184]                               next
[13:36:08.184]                             invokeRestart(restart)
[13:36:08.184]                             muffled <- TRUE
[13:36:08.184]                             break
[13:36:08.184]                           }
[13:36:08.184]                         }
[13:36:08.184]                       }
[13:36:08.184]                       invisible(muffled)
[13:36:08.184]                     }
[13:36:08.184]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.184]                   }
[13:36:08.184]                 }
[13:36:08.184]             }
[13:36:08.184]         }))
[13:36:08.184]     }, error = function(ex) {
[13:36:08.184]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.184]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.184]                 ...future.rng), started = ...future.startTime, 
[13:36:08.184]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.184]             version = "1.8"), class = "FutureResult")
[13:36:08.184]     }, finally = {
[13:36:08.184]         if (!identical(...future.workdir, getwd())) 
[13:36:08.184]             setwd(...future.workdir)
[13:36:08.184]         {
[13:36:08.184]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.184]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.184]             }
[13:36:08.184]             base::options(...future.oldOptions)
[13:36:08.184]             if (.Platform$OS.type == "windows") {
[13:36:08.184]                 old_names <- names(...future.oldEnvVars)
[13:36:08.184]                 envs <- base::Sys.getenv()
[13:36:08.184]                 names <- names(envs)
[13:36:08.184]                 common <- intersect(names, old_names)
[13:36:08.184]                 added <- setdiff(names, old_names)
[13:36:08.184]                 removed <- setdiff(old_names, names)
[13:36:08.184]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.184]                   envs[common]]
[13:36:08.184]                 NAMES <- toupper(changed)
[13:36:08.184]                 args <- list()
[13:36:08.184]                 for (kk in seq_along(NAMES)) {
[13:36:08.184]                   name <- changed[[kk]]
[13:36:08.184]                   NAME <- NAMES[[kk]]
[13:36:08.184]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.184]                     next
[13:36:08.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.184]                 }
[13:36:08.184]                 NAMES <- toupper(added)
[13:36:08.184]                 for (kk in seq_along(NAMES)) {
[13:36:08.184]                   name <- added[[kk]]
[13:36:08.184]                   NAME <- NAMES[[kk]]
[13:36:08.184]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.184]                     next
[13:36:08.184]                   args[[name]] <- ""
[13:36:08.184]                 }
[13:36:08.184]                 NAMES <- toupper(removed)
[13:36:08.184]                 for (kk in seq_along(NAMES)) {
[13:36:08.184]                   name <- removed[[kk]]
[13:36:08.184]                   NAME <- NAMES[[kk]]
[13:36:08.184]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.184]                     next
[13:36:08.184]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.184]                 }
[13:36:08.184]                 if (length(args) > 0) 
[13:36:08.184]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.184]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.184]             }
[13:36:08.184]             else {
[13:36:08.184]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.184]             }
[13:36:08.184]             {
[13:36:08.184]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.184]                   0L) {
[13:36:08.184]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.184]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.184]                   base::options(opts)
[13:36:08.184]                 }
[13:36:08.184]                 {
[13:36:08.184]                   {
[13:36:08.184]                     NULL
[13:36:08.184]                     RNGkind("Mersenne-Twister")
[13:36:08.184]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:08.184]                       inherits = FALSE)
[13:36:08.184]                   }
[13:36:08.184]                   options(future.plan = NULL)
[13:36:08.184]                   if (is.na(NA_character_)) 
[13:36:08.184]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.184]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.184]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.184]                     .init = FALSE)
[13:36:08.184]                 }
[13:36:08.184]             }
[13:36:08.184]         }
[13:36:08.184]     })
[13:36:08.184]     if (TRUE) {
[13:36:08.184]         base::sink(type = "output", split = FALSE)
[13:36:08.184]         if (TRUE) {
[13:36:08.184]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.184]         }
[13:36:08.184]         else {
[13:36:08.184]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.184]         }
[13:36:08.184]         base::close(...future.stdout)
[13:36:08.184]         ...future.stdout <- NULL
[13:36:08.184]     }
[13:36:08.184]     ...future.result$conditions <- ...future.conditions
[13:36:08.184]     ...future.result$finished <- base::Sys.time()
[13:36:08.184]     ...future.result
[13:36:08.184] }
[13:36:08.186] assign_globals() ...
[13:36:08.186] List of 4
[13:36:08.186]  $ ii   : int 4
[13:36:08.186]  $ n    : int 4
[13:36:08.186]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[13:36:08.186]   ..- attr(*, "region")=List of 2
[13:36:08.186]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:36:08.186]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:36:08.186]   ..- attr(*, "tile")= int [1:2] 2 2
[13:36:08.186]  $ delay:function (counts)  
[13:36:08.186]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.186]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x5569828892e8> 
[13:36:08.186]  - attr(*, "where")=List of 4
[13:36:08.186]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.186]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.186]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.186]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.186]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.186]  - attr(*, "resolved")= logi FALSE
[13:36:08.186]  - attr(*, "total_size")= num 14584
[13:36:08.186]  - attr(*, "already-done")= logi TRUE
[13:36:08.192] - copied ‘ii’ to environment
[13:36:08.192] - copied ‘n’ to environment
[13:36:08.192] - copied ‘C’ to environment
[13:36:08.192] - reassign environment for ‘delay’
[13:36:08.192] - copied ‘delay’ to environment
[13:36:08.192] assign_globals() ... done
[13:36:08.193] plan(): Setting new future strategy stack:
[13:36:08.193] List of future strategies:
[13:36:08.193] 1. sequential:
[13:36:08.193]    - args: function (..., envir = parent.frame())
[13:36:08.193]    - tweaked: FALSE
[13:36:08.193]    - call: NULL
[13:36:08.193] plan(): nbrOfWorkers() = 1
[13:36:08.207] plan(): Setting new future strategy stack:
[13:36:08.207] List of future strategies:
[13:36:08.207] 1. sequential:
[13:36:08.207]    - args: function (..., envir = parent.frame())
[13:36:08.207]    - tweaked: FALSE
[13:36:08.207]    - call: plan(strategy)
[13:36:08.208] plan(): nbrOfWorkers() = 1
[13:36:08.208] SequentialFuture started (and completed)
[13:36:08.208] signalConditions() ...
[13:36:08.208]  - include = ‘immediateCondition’
[13:36:08.208]  - exclude = 
[13:36:08.208]  - resignal = FALSE
[13:36:08.208]  - Number of conditions: 2
[13:36:08.208] signalConditions() ... done
[13:36:08.208] - Launch lazy future ... done
[13:36:08.209] run() for ‘SequentialFuture’ ... done
[13:36:08.209] - run() ... done
[13:36:08.209] - resolved() ...
[13:36:08.209] resolved() for ‘SequentialFuture’ ...
[13:36:08.209] - state: ‘finished’
[13:36:08.209] - run: TRUE
[13:36:08.209] - result: ‘FutureResult’
[13:36:08.209] resolved() for ‘SequentialFuture’ ... done
[13:36:08.209] - resolved: TRUE
[13:36:08.209] - resolved() ... done
[13:36:08.209] resolved() for ‘SequentialFuture’ ... done
Plotting tile #4 of 4 ...
[13:36:08.210] signalConditions() ...
[13:36:08.210]  - include = ‘immediateCondition’
[13:36:08.210]  - exclude = 
[13:36:08.210]  - resignal = FALSE
[13:36:08.210]  - Number of conditions: 2
[13:36:08.210] signalConditions() ... done
[13:36:08.210] Future state: ‘finished’
[13:36:08.210] signalConditions() ...
[13:36:08.210]  - include = ‘condition’
[13:36:08.210]  - exclude = ‘immediateCondition’
[13:36:08.211]  - resignal = TRUE
[13:36:08.211]  - Number of conditions: 2
[13:36:08.211]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:36:08.211]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.211] signalConditions() ... done

> close.screen()
[1] 1 2 3 4

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('sequential') ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
- plan('multicore') ...
[13:36:08.217] plan(): Setting new future strategy stack:
[13:36:08.217] List of future strategies:
[13:36:08.217] 1. multicore:
[13:36:08.217]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:08.217]    - tweaked: FALSE
[13:36:08.217]    - call: plan(strategy)
[13:36:08.221] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1] 5 6 7 8

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:36:08.225] getGlobalsAndPackages() ...
[13:36:08.225] Searching for globals...
[13:36:08.231] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.231] Searching for globals ... DONE
[13:36:08.231] Resolving globals: FALSE
[13:36:08.232] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.232] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.232] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.232] - packages: [1] ‘future’
[13:36:08.232] getGlobalsAndPackages() ... DONE
 2[13:36:08.236] getGlobalsAndPackages() ...
[13:36:08.236] Searching for globals...
[13:36:08.239] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.239] Searching for globals ... DONE
[13:36:08.240] Resolving globals: FALSE
[13:36:08.240] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.240] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.241] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.241] - packages: [1] ‘future’
[13:36:08.241] getGlobalsAndPackages() ... DONE
 3[13:36:08.241] getGlobalsAndPackages() ...
[13:36:08.241] Searching for globals...
[13:36:08.244] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.245] Searching for globals ... DONE
[13:36:08.245] Resolving globals: FALSE
[13:36:08.245] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.245] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.246] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.246] - packages: [1] ‘future’
[13:36:08.246] getGlobalsAndPackages() ... DONE
 4[13:36:08.246] getGlobalsAndPackages() ...
[13:36:08.246] Searching for globals...
[13:36:08.249] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:08.250] Searching for globals ... DONE
[13:36:08.250] Resolving globals: FALSE
[13:36:08.250] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:08.251] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:08.251] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:08.251] - packages: [1] ‘future’
[13:36:08.251] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:36:08.259] resolved() for ‘Future’ ...
[13:36:08.259] - state: ‘created’
[13:36:08.260] - run: TRUE
[13:36:08.260] - run() ...
[13:36:08.260] run() for ‘Future’ ...
[13:36:08.260] - state: ‘created’
[13:36:08.260] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:08.264] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:08.264] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:08.264]   - Field: ‘label’
[13:36:08.264]   - Field: ‘local’
[13:36:08.264]   - Field: ‘owner’
[13:36:08.265]   - Field: ‘envir’
[13:36:08.265]   - Field: ‘workers’
[13:36:08.265]   - Field: ‘packages’
[13:36:08.265]   - Field: ‘gc’
[13:36:08.265]   - Field: ‘job’
[13:36:08.265]   - Field: ‘conditions’
[13:36:08.265]   - Field: ‘expr’
[13:36:08.265]   - Field: ‘uuid’
[13:36:08.265]   - Field: ‘seed’
[13:36:08.266]   - Field: ‘version’
[13:36:08.266]   - Field: ‘result’
[13:36:08.266]   - Field: ‘asynchronous’
[13:36:08.266]   - Field: ‘calls’
[13:36:08.266]   - Field: ‘globals’
[13:36:08.266]   - Field: ‘stdout’
[13:36:08.266]   - Field: ‘earlySignal’
[13:36:08.266]   - Field: ‘lazy’
[13:36:08.266]   - Field: ‘state’
[13:36:08.266] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:08.267] - Launch lazy future ...
[13:36:08.268] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.268] Packages needed by future strategies (n = 0): <none>
[13:36:08.268] {
[13:36:08.268]     {
[13:36:08.268]         {
[13:36:08.268]             ...future.startTime <- base::Sys.time()
[13:36:08.268]             {
[13:36:08.268]                 {
[13:36:08.268]                   {
[13:36:08.268]                     {
[13:36:08.268]                       {
[13:36:08.268]                         base::local({
[13:36:08.268]                           has_future <- base::requireNamespace("future", 
[13:36:08.268]                             quietly = TRUE)
[13:36:08.268]                           if (has_future) {
[13:36:08.268]                             ns <- base::getNamespace("future")
[13:36:08.268]                             version <- ns[[".package"]][["version"]]
[13:36:08.268]                             if (is.null(version)) 
[13:36:08.268]                               version <- utils::packageVersion("future")
[13:36:08.268]                           }
[13:36:08.268]                           else {
[13:36:08.268]                             version <- NULL
[13:36:08.268]                           }
[13:36:08.268]                           if (!has_future || version < "1.8.0") {
[13:36:08.268]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.268]                               "", base::R.version$version.string), 
[13:36:08.268]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:08.268]                                 base::R.version$platform, 8 * 
[13:36:08.268]                                   base::.Machine$sizeof.pointer), 
[13:36:08.268]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.268]                                 "release", "version")], collapse = " "), 
[13:36:08.268]                               hostname = base::Sys.info()[["nodename"]])
[13:36:08.268]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.268]                               info)
[13:36:08.268]                             info <- base::paste(info, collapse = "; ")
[13:36:08.268]                             if (!has_future) {
[13:36:08.268]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.268]                                 info)
[13:36:08.268]                             }
[13:36:08.268]                             else {
[13:36:08.268]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.268]                                 info, version)
[13:36:08.268]                             }
[13:36:08.268]                             base::stop(msg)
[13:36:08.268]                           }
[13:36:08.268]                         })
[13:36:08.268]                       }
[13:36:08.268]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:08.268]                       base::options(mc.cores = 1L)
[13:36:08.268]                     }
[13:36:08.268]                     base::local({
[13:36:08.268]                       for (pkg in "future") {
[13:36:08.268]                         base::loadNamespace(pkg)
[13:36:08.268]                         base::library(pkg, character.only = TRUE)
[13:36:08.268]                       }
[13:36:08.268]                     })
[13:36:08.268]                   }
[13:36:08.268]                   ...future.strategy.old <- future::plan("list")
[13:36:08.268]                   options(future.plan = NULL)
[13:36:08.268]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.268]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.268]                 }
[13:36:08.268]                 ...future.workdir <- getwd()
[13:36:08.268]             }
[13:36:08.268]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.268]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.268]         }
[13:36:08.268]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.268]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.268]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.268]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.268]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.268]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.268]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.268]             base::names(...future.oldOptions))
[13:36:08.268]     }
[13:36:08.268]     if (FALSE) {
[13:36:08.268]     }
[13:36:08.268]     else {
[13:36:08.268]         if (TRUE) {
[13:36:08.268]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.268]                 open = "w")
[13:36:08.268]         }
[13:36:08.268]         else {
[13:36:08.268]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.268]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.268]         }
[13:36:08.268]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.268]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.268]             base::sink(type = "output", split = FALSE)
[13:36:08.268]             base::close(...future.stdout)
[13:36:08.268]         }, add = TRUE)
[13:36:08.268]     }
[13:36:08.268]     ...future.frame <- base::sys.nframe()
[13:36:08.268]     ...future.conditions <- base::list()
[13:36:08.268]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.268]     if (FALSE) {
[13:36:08.268]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.268]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.268]     }
[13:36:08.268]     ...future.result <- base::tryCatch({
[13:36:08.268]         base::withCallingHandlers({
[13:36:08.268]             ...future.value <- base::withVisible(base::local({
[13:36:08.268]                 withCallingHandlers({
[13:36:08.268]                   {
[13:36:08.268]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.268]                       ii, n), appendLF = FALSE)
[13:36:08.268]                     fit <- mandelbrot(C)
[13:36:08.268]                     delay(fit)
[13:36:08.268]                     message(" done")
[13:36:08.268]                     fit
[13:36:08.268]                   }
[13:36:08.268]                 }, immediateCondition = function(cond) {
[13:36:08.268]                   save_rds <- function (object, pathname, ...) 
[13:36:08.268]                   {
[13:36:08.268]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:08.268]                     if (file_test("-f", pathname_tmp)) {
[13:36:08.268]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.268]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:08.268]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.268]                         fi_tmp[["mtime"]])
[13:36:08.268]                     }
[13:36:08.268]                     tryCatch({
[13:36:08.268]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:08.268]                     }, error = function(ex) {
[13:36:08.268]                       msg <- conditionMessage(ex)
[13:36:08.268]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.268]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:08.268]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.268]                         fi_tmp[["mtime"]], msg)
[13:36:08.268]                       ex$message <- msg
[13:36:08.268]                       stop(ex)
[13:36:08.268]                     })
[13:36:08.268]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:08.268]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:08.268]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:08.268]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.268]                       fi <- file.info(pathname)
[13:36:08.268]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:08.268]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.268]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:08.268]                         fi[["size"]], fi[["mtime"]])
[13:36:08.268]                       stop(msg)
[13:36:08.268]                     }
[13:36:08.268]                     invisible(pathname)
[13:36:08.268]                   }
[13:36:08.268]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:08.268]                     rootPath = tempdir()) 
[13:36:08.268]                   {
[13:36:08.268]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:08.268]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:08.268]                       tmpdir = path, fileext = ".rds")
[13:36:08.268]                     save_rds(obj, file)
[13:36:08.268]                   }
[13:36:08.268]                   saveImmediateCondition(cond, path = "/tmp/RtmpOqwNI3/.future/immediateConditions")
[13:36:08.268]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.268]                   {
[13:36:08.268]                     inherits <- base::inherits
[13:36:08.268]                     invokeRestart <- base::invokeRestart
[13:36:08.268]                     is.null <- base::is.null
[13:36:08.268]                     muffled <- FALSE
[13:36:08.268]                     if (inherits(cond, "message")) {
[13:36:08.268]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:08.268]                       if (muffled) 
[13:36:08.268]                         invokeRestart("muffleMessage")
[13:36:08.268]                     }
[13:36:08.268]                     else if (inherits(cond, "warning")) {
[13:36:08.268]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:08.268]                       if (muffled) 
[13:36:08.268]                         invokeRestart("muffleWarning")
[13:36:08.268]                     }
[13:36:08.268]                     else if (inherits(cond, "condition")) {
[13:36:08.268]                       if (!is.null(pattern)) {
[13:36:08.268]                         computeRestarts <- base::computeRestarts
[13:36:08.268]                         grepl <- base::grepl
[13:36:08.268]                         restarts <- computeRestarts(cond)
[13:36:08.268]                         for (restart in restarts) {
[13:36:08.268]                           name <- restart$name
[13:36:08.268]                           if (is.null(name)) 
[13:36:08.268]                             next
[13:36:08.268]                           if (!grepl(pattern, name)) 
[13:36:08.268]                             next
[13:36:08.268]                           invokeRestart(restart)
[13:36:08.268]                           muffled <- TRUE
[13:36:08.268]                           break
[13:36:08.268]                         }
[13:36:08.268]                       }
[13:36:08.268]                     }
[13:36:08.268]                     invisible(muffled)
[13:36:08.268]                   }
[13:36:08.268]                   muffleCondition(cond)
[13:36:08.268]                 })
[13:36:08.268]             }))
[13:36:08.268]             future::FutureResult(value = ...future.value$value, 
[13:36:08.268]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.268]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.268]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.268]                     ...future.globalenv.names))
[13:36:08.268]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.268]         }, condition = base::local({
[13:36:08.268]             c <- base::c
[13:36:08.268]             inherits <- base::inherits
[13:36:08.268]             invokeRestart <- base::invokeRestart
[13:36:08.268]             length <- base::length
[13:36:08.268]             list <- base::list
[13:36:08.268]             seq.int <- base::seq.int
[13:36:08.268]             signalCondition <- base::signalCondition
[13:36:08.268]             sys.calls <- base::sys.calls
[13:36:08.268]             `[[` <- base::`[[`
[13:36:08.268]             `+` <- base::`+`
[13:36:08.268]             `<<-` <- base::`<<-`
[13:36:08.268]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.268]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.268]                   3L)]
[13:36:08.268]             }
[13:36:08.268]             function(cond) {
[13:36:08.268]                 is_error <- inherits(cond, "error")
[13:36:08.268]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.268]                   NULL)
[13:36:08.268]                 if (is_error) {
[13:36:08.268]                   sessionInformation <- function() {
[13:36:08.268]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.268]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.268]                       search = base::search(), system = base::Sys.info())
[13:36:08.268]                   }
[13:36:08.268]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.268]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.268]                     cond$call), session = sessionInformation(), 
[13:36:08.268]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.268]                   signalCondition(cond)
[13:36:08.268]                 }
[13:36:08.268]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.268]                 "immediateCondition"))) {
[13:36:08.268]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.268]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.268]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.268]                   if (TRUE && !signal) {
[13:36:08.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.268]                     {
[13:36:08.268]                       inherits <- base::inherits
[13:36:08.268]                       invokeRestart <- base::invokeRestart
[13:36:08.268]                       is.null <- base::is.null
[13:36:08.268]                       muffled <- FALSE
[13:36:08.268]                       if (inherits(cond, "message")) {
[13:36:08.268]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.268]                         if (muffled) 
[13:36:08.268]                           invokeRestart("muffleMessage")
[13:36:08.268]                       }
[13:36:08.268]                       else if (inherits(cond, "warning")) {
[13:36:08.268]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.268]                         if (muffled) 
[13:36:08.268]                           invokeRestart("muffleWarning")
[13:36:08.268]                       }
[13:36:08.268]                       else if (inherits(cond, "condition")) {
[13:36:08.268]                         if (!is.null(pattern)) {
[13:36:08.268]                           computeRestarts <- base::computeRestarts
[13:36:08.268]                           grepl <- base::grepl
[13:36:08.268]                           restarts <- computeRestarts(cond)
[13:36:08.268]                           for (restart in restarts) {
[13:36:08.268]                             name <- restart$name
[13:36:08.268]                             if (is.null(name)) 
[13:36:08.268]                               next
[13:36:08.268]                             if (!grepl(pattern, name)) 
[13:36:08.268]                               next
[13:36:08.268]                             invokeRestart(restart)
[13:36:08.268]                             muffled <- TRUE
[13:36:08.268]                             break
[13:36:08.268]                           }
[13:36:08.268]                         }
[13:36:08.268]                       }
[13:36:08.268]                       invisible(muffled)
[13:36:08.268]                     }
[13:36:08.268]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.268]                   }
[13:36:08.268]                 }
[13:36:08.268]                 else {
[13:36:08.268]                   if (TRUE) {
[13:36:08.268]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.268]                     {
[13:36:08.268]                       inherits <- base::inherits
[13:36:08.268]                       invokeRestart <- base::invokeRestart
[13:36:08.268]                       is.null <- base::is.null
[13:36:08.268]                       muffled <- FALSE
[13:36:08.268]                       if (inherits(cond, "message")) {
[13:36:08.268]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.268]                         if (muffled) 
[13:36:08.268]                           invokeRestart("muffleMessage")
[13:36:08.268]                       }
[13:36:08.268]                       else if (inherits(cond, "warning")) {
[13:36:08.268]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.268]                         if (muffled) 
[13:36:08.268]                           invokeRestart("muffleWarning")
[13:36:08.268]                       }
[13:36:08.268]                       else if (inherits(cond, "condition")) {
[13:36:08.268]                         if (!is.null(pattern)) {
[13:36:08.268]                           computeRestarts <- base::computeRestarts
[13:36:08.268]                           grepl <- base::grepl
[13:36:08.268]                           restarts <- computeRestarts(cond)
[13:36:08.268]                           for (restart in restarts) {
[13:36:08.268]                             name <- restart$name
[13:36:08.268]                             if (is.null(name)) 
[13:36:08.268]                               next
[13:36:08.268]                             if (!grepl(pattern, name)) 
[13:36:08.268]                               next
[13:36:08.268]                             invokeRestart(restart)
[13:36:08.268]                             muffled <- TRUE
[13:36:08.268]                             break
[13:36:08.268]                           }
[13:36:08.268]                         }
[13:36:08.268]                       }
[13:36:08.268]                       invisible(muffled)
[13:36:08.268]                     }
[13:36:08.268]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.268]                   }
[13:36:08.268]                 }
[13:36:08.268]             }
[13:36:08.268]         }))
[13:36:08.268]     }, error = function(ex) {
[13:36:08.268]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.268]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.268]                 ...future.rng), started = ...future.startTime, 
[13:36:08.268]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.268]             version = "1.8"), class = "FutureResult")
[13:36:08.268]     }, finally = {
[13:36:08.268]         if (!identical(...future.workdir, getwd())) 
[13:36:08.268]             setwd(...future.workdir)
[13:36:08.268]         {
[13:36:08.268]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.268]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.268]             }
[13:36:08.268]             base::options(...future.oldOptions)
[13:36:08.268]             if (.Platform$OS.type == "windows") {
[13:36:08.268]                 old_names <- names(...future.oldEnvVars)
[13:36:08.268]                 envs <- base::Sys.getenv()
[13:36:08.268]                 names <- names(envs)
[13:36:08.268]                 common <- intersect(names, old_names)
[13:36:08.268]                 added <- setdiff(names, old_names)
[13:36:08.268]                 removed <- setdiff(old_names, names)
[13:36:08.268]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.268]                   envs[common]]
[13:36:08.268]                 NAMES <- toupper(changed)
[13:36:08.268]                 args <- list()
[13:36:08.268]                 for (kk in seq_along(NAMES)) {
[13:36:08.268]                   name <- changed[[kk]]
[13:36:08.268]                   NAME <- NAMES[[kk]]
[13:36:08.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.268]                     next
[13:36:08.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.268]                 }
[13:36:08.268]                 NAMES <- toupper(added)
[13:36:08.268]                 for (kk in seq_along(NAMES)) {
[13:36:08.268]                   name <- added[[kk]]
[13:36:08.268]                   NAME <- NAMES[[kk]]
[13:36:08.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.268]                     next
[13:36:08.268]                   args[[name]] <- ""
[13:36:08.268]                 }
[13:36:08.268]                 NAMES <- toupper(removed)
[13:36:08.268]                 for (kk in seq_along(NAMES)) {
[13:36:08.268]                   name <- removed[[kk]]
[13:36:08.268]                   NAME <- NAMES[[kk]]
[13:36:08.268]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.268]                     next
[13:36:08.268]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.268]                 }
[13:36:08.268]                 if (length(args) > 0) 
[13:36:08.268]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.268]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.268]             }
[13:36:08.268]             else {
[13:36:08.268]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.268]             }
[13:36:08.268]             {
[13:36:08.268]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.268]                   0L) {
[13:36:08.268]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.268]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.268]                   base::options(opts)
[13:36:08.268]                 }
[13:36:08.268]                 {
[13:36:08.268]                   {
[13:36:08.268]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:08.268]                     NULL
[13:36:08.268]                   }
[13:36:08.268]                   options(future.plan = NULL)
[13:36:08.268]                   if (is.na(NA_character_)) 
[13:36:08.268]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.268]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.268]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.268]                     .init = FALSE)
[13:36:08.268]                 }
[13:36:08.268]             }
[13:36:08.268]         }
[13:36:08.268]     })
[13:36:08.268]     if (TRUE) {
[13:36:08.268]         base::sink(type = "output", split = FALSE)
[13:36:08.268]         if (TRUE) {
[13:36:08.268]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.268]         }
[13:36:08.268]         else {
[13:36:08.268]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.268]         }
[13:36:08.268]         base::close(...future.stdout)
[13:36:08.268]         ...future.stdout <- NULL
[13:36:08.268]     }
[13:36:08.268]     ...future.result$conditions <- ...future.conditions
[13:36:08.268]     ...future.result$finished <- base::Sys.time()
[13:36:08.268]     ...future.result
[13:36:08.268] }
[13:36:08.270] assign_globals() ...
[13:36:08.271] List of 4
[13:36:08.271]  $ ii   : int 1
[13:36:08.271]  $ n    : int 4
[13:36:08.271]  $ C    : cplx [1:25, 1:25] -2.25-1.5i -2.25-1.44i -2.25-1.38i ...
[13:36:08.271]   ..- attr(*, "region")=List of 2
[13:36:08.271]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:36:08.271]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:36:08.271]   ..- attr(*, "tile")= int [1:2] 1 1
[13:36:08.271]  $ delay:function (counts)  
[13:36:08.271]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.271]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556982995018> 
[13:36:08.271]  - attr(*, "where")=List of 4
[13:36:08.271]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.271]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.271]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.271]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.271]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.271]  - attr(*, "resolved")= logi FALSE
[13:36:08.271]  - attr(*, "total_size")= num 14584
[13:36:08.271]  - attr(*, "already-done")= logi TRUE
[13:36:08.276] - copied ‘ii’ to environment
[13:36:08.276] - copied ‘n’ to environment
[13:36:08.277] - copied ‘C’ to environment
[13:36:08.277] - reassign environment for ‘delay’
[13:36:08.277] - copied ‘delay’ to environment
[13:36:08.277] assign_globals() ... done
[13:36:08.277] requestCore(): workers = 2
[13:36:08.280] MulticoreFuture started
[13:36:08.281] - Launch lazy future ... done
[13:36:08.281] run() for ‘MulticoreFuture’ ... done
[13:36:08.281] - run() ... done
[13:36:08.281] - resolved() ...
[13:36:08.281] plan(): Setting new future strategy stack:
[13:36:08.281] List of future strategies:
[13:36:08.281] 1. sequential:
[13:36:08.281]    - args: function (..., envir = parent.frame())
[13:36:08.281]    - tweaked: FALSE
[13:36:08.281]    - call: NULL
[13:36:08.282] plan(): nbrOfWorkers() = 1
[13:36:08.286] plan(): Setting new future strategy stack:
[13:36:08.286] List of future strategies:
[13:36:08.286] 1. multicore:
[13:36:08.286]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:08.286]    - tweaked: FALSE
[13:36:08.286]    - call: plan(strategy)
[13:36:08.291] plan(): nbrOfWorkers() = 2
[13:36:08.292] - resolved: TRUE
[13:36:08.292] - resolved() ... done
[13:36:08.292] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #1 of 4 ...
[13:36:08.293] result() for MulticoreFuture ...
[13:36:08.298] result() for MulticoreFuture ...
[13:36:08.298] result() for MulticoreFuture ... done
[13:36:08.298] signalConditions() ...
[13:36:08.298]  - include = ‘immediateCondition’
[13:36:08.298]  - exclude = 
[13:36:08.298]  - resignal = FALSE
[13:36:08.298]  - Number of conditions: 2
[13:36:08.299] signalConditions() ... done
[13:36:08.299] result() for MulticoreFuture ... done
[13:36:08.299] result() for MulticoreFuture ...
[13:36:08.299] result() for MulticoreFuture ... done
[13:36:08.299] signalConditions() ...
[13:36:08.299]  - include = ‘immediateCondition’
[13:36:08.299]  - exclude = 
[13:36:08.299]  - resignal = FALSE
[13:36:08.299]  - Number of conditions: 2
[13:36:08.300] signalConditions() ... done
[13:36:08.300] Future state: ‘finished’
[13:36:08.300] result() for MulticoreFuture ...
[13:36:08.300] result() for MulticoreFuture ... done
[13:36:08.300] signalConditions() ...
[13:36:08.300]  - include = ‘condition’
[13:36:08.300]  - exclude = ‘immediateCondition’
[13:36:08.300]  - resignal = TRUE
[13:36:08.300]  - Number of conditions: 2
[13:36:08.301]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:36:08.301]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.301] signalConditions() ... done
[13:36:08.302] resolved() for ‘Future’ ...
[13:36:08.302] - state: ‘created’
[13:36:08.302] - run: TRUE
[13:36:08.302] - run() ...
[13:36:08.302] run() for ‘Future’ ...
[13:36:08.302] - state: ‘created’
[13:36:08.302] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:08.307] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:08.307] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:08.307]   - Field: ‘label’
[13:36:08.307]   - Field: ‘local’
[13:36:08.307]   - Field: ‘owner’
[13:36:08.311]   - Field: ‘envir’
[13:36:08.311]   - Field: ‘workers’
[13:36:08.311]   - Field: ‘packages’
[13:36:08.311]   - Field: ‘gc’
[13:36:08.311]   - Field: ‘job’
[13:36:08.312]   - Field: ‘conditions’
[13:36:08.312]   - Field: ‘expr’
[13:36:08.312]   - Field: ‘uuid’
[13:36:08.312]   - Field: ‘seed’
[13:36:08.312]   - Field: ‘version’
[13:36:08.312]   - Field: ‘result’
[13:36:08.312]   - Field: ‘asynchronous’
[13:36:08.312]   - Field: ‘calls’
[13:36:08.312]   - Field: ‘globals’
[13:36:08.313]   - Field: ‘stdout’
[13:36:08.313]   - Field: ‘earlySignal’
[13:36:08.313]   - Field: ‘lazy’
[13:36:08.313]   - Field: ‘state’
[13:36:08.313] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:08.313] - Launch lazy future ...
[13:36:08.313] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.314] Packages needed by future strategies (n = 0): <none>
[13:36:08.314] {
[13:36:08.314]     {
[13:36:08.314]         {
[13:36:08.314]             ...future.startTime <- base::Sys.time()
[13:36:08.314]             {
[13:36:08.314]                 {
[13:36:08.314]                   {
[13:36:08.314]                     {
[13:36:08.314]                       {
[13:36:08.314]                         base::local({
[13:36:08.314]                           has_future <- base::requireNamespace("future", 
[13:36:08.314]                             quietly = TRUE)
[13:36:08.314]                           if (has_future) {
[13:36:08.314]                             ns <- base::getNamespace("future")
[13:36:08.314]                             version <- ns[[".package"]][["version"]]
[13:36:08.314]                             if (is.null(version)) 
[13:36:08.314]                               version <- utils::packageVersion("future")
[13:36:08.314]                           }
[13:36:08.314]                           else {
[13:36:08.314]                             version <- NULL
[13:36:08.314]                           }
[13:36:08.314]                           if (!has_future || version < "1.8.0") {
[13:36:08.314]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.314]                               "", base::R.version$version.string), 
[13:36:08.314]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:08.314]                                 base::R.version$platform, 8 * 
[13:36:08.314]                                   base::.Machine$sizeof.pointer), 
[13:36:08.314]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.314]                                 "release", "version")], collapse = " "), 
[13:36:08.314]                               hostname = base::Sys.info()[["nodename"]])
[13:36:08.314]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.314]                               info)
[13:36:08.314]                             info <- base::paste(info, collapse = "; ")
[13:36:08.314]                             if (!has_future) {
[13:36:08.314]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.314]                                 info)
[13:36:08.314]                             }
[13:36:08.314]                             else {
[13:36:08.314]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.314]                                 info, version)
[13:36:08.314]                             }
[13:36:08.314]                             base::stop(msg)
[13:36:08.314]                           }
[13:36:08.314]                         })
[13:36:08.314]                       }
[13:36:08.314]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:08.314]                       base::options(mc.cores = 1L)
[13:36:08.314]                     }
[13:36:08.314]                     base::local({
[13:36:08.314]                       for (pkg in "future") {
[13:36:08.314]                         base::loadNamespace(pkg)
[13:36:08.314]                         base::library(pkg, character.only = TRUE)
[13:36:08.314]                       }
[13:36:08.314]                     })
[13:36:08.314]                   }
[13:36:08.314]                   ...future.strategy.old <- future::plan("list")
[13:36:08.314]                   options(future.plan = NULL)
[13:36:08.314]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.314]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.314]                 }
[13:36:08.314]                 ...future.workdir <- getwd()
[13:36:08.314]             }
[13:36:08.314]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.314]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.314]         }
[13:36:08.314]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.314]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.314]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.314]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.314]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.314]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.314]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.314]             base::names(...future.oldOptions))
[13:36:08.314]     }
[13:36:08.314]     if (FALSE) {
[13:36:08.314]     }
[13:36:08.314]     else {
[13:36:08.314]         if (TRUE) {
[13:36:08.314]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.314]                 open = "w")
[13:36:08.314]         }
[13:36:08.314]         else {
[13:36:08.314]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.314]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.314]         }
[13:36:08.314]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.314]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.314]             base::sink(type = "output", split = FALSE)
[13:36:08.314]             base::close(...future.stdout)
[13:36:08.314]         }, add = TRUE)
[13:36:08.314]     }
[13:36:08.314]     ...future.frame <- base::sys.nframe()
[13:36:08.314]     ...future.conditions <- base::list()
[13:36:08.314]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.314]     if (FALSE) {
[13:36:08.314]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.314]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.314]     }
[13:36:08.314]     ...future.result <- base::tryCatch({
[13:36:08.314]         base::withCallingHandlers({
[13:36:08.314]             ...future.value <- base::withVisible(base::local({
[13:36:08.314]                 withCallingHandlers({
[13:36:08.314]                   {
[13:36:08.314]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.314]                       ii, n), appendLF = FALSE)
[13:36:08.314]                     fit <- mandelbrot(C)
[13:36:08.314]                     delay(fit)
[13:36:08.314]                     message(" done")
[13:36:08.314]                     fit
[13:36:08.314]                   }
[13:36:08.314]                 }, immediateCondition = function(cond) {
[13:36:08.314]                   save_rds <- function (object, pathname, ...) 
[13:36:08.314]                   {
[13:36:08.314]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:08.314]                     if (file_test("-f", pathname_tmp)) {
[13:36:08.314]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.314]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:08.314]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.314]                         fi_tmp[["mtime"]])
[13:36:08.314]                     }
[13:36:08.314]                     tryCatch({
[13:36:08.314]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:08.314]                     }, error = function(ex) {
[13:36:08.314]                       msg <- conditionMessage(ex)
[13:36:08.314]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.314]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:08.314]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.314]                         fi_tmp[["mtime"]], msg)
[13:36:08.314]                       ex$message <- msg
[13:36:08.314]                       stop(ex)
[13:36:08.314]                     })
[13:36:08.314]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:08.314]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:08.314]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:08.314]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.314]                       fi <- file.info(pathname)
[13:36:08.314]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:08.314]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.314]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:08.314]                         fi[["size"]], fi[["mtime"]])
[13:36:08.314]                       stop(msg)
[13:36:08.314]                     }
[13:36:08.314]                     invisible(pathname)
[13:36:08.314]                   }
[13:36:08.314]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:08.314]                     rootPath = tempdir()) 
[13:36:08.314]                   {
[13:36:08.314]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:08.314]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:08.314]                       tmpdir = path, fileext = ".rds")
[13:36:08.314]                     save_rds(obj, file)
[13:36:08.314]                   }
[13:36:08.314]                   saveImmediateCondition(cond, path = "/tmp/RtmpOqwNI3/.future/immediateConditions")
[13:36:08.314]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.314]                   {
[13:36:08.314]                     inherits <- base::inherits
[13:36:08.314]                     invokeRestart <- base::invokeRestart
[13:36:08.314]                     is.null <- base::is.null
[13:36:08.314]                     muffled <- FALSE
[13:36:08.314]                     if (inherits(cond, "message")) {
[13:36:08.314]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:08.314]                       if (muffled) 
[13:36:08.314]                         invokeRestart("muffleMessage")
[13:36:08.314]                     }
[13:36:08.314]                     else if (inherits(cond, "warning")) {
[13:36:08.314]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:08.314]                       if (muffled) 
[13:36:08.314]                         invokeRestart("muffleWarning")
[13:36:08.314]                     }
[13:36:08.314]                     else if (inherits(cond, "condition")) {
[13:36:08.314]                       if (!is.null(pattern)) {
[13:36:08.314]                         computeRestarts <- base::computeRestarts
[13:36:08.314]                         grepl <- base::grepl
[13:36:08.314]                         restarts <- computeRestarts(cond)
[13:36:08.314]                         for (restart in restarts) {
[13:36:08.314]                           name <- restart$name
[13:36:08.314]                           if (is.null(name)) 
[13:36:08.314]                             next
[13:36:08.314]                           if (!grepl(pattern, name)) 
[13:36:08.314]                             next
[13:36:08.314]                           invokeRestart(restart)
[13:36:08.314]                           muffled <- TRUE
[13:36:08.314]                           break
[13:36:08.314]                         }
[13:36:08.314]                       }
[13:36:08.314]                     }
[13:36:08.314]                     invisible(muffled)
[13:36:08.314]                   }
[13:36:08.314]                   muffleCondition(cond)
[13:36:08.314]                 })
[13:36:08.314]             }))
[13:36:08.314]             future::FutureResult(value = ...future.value$value, 
[13:36:08.314]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.314]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.314]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.314]                     ...future.globalenv.names))
[13:36:08.314]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.314]         }, condition = base::local({
[13:36:08.314]             c <- base::c
[13:36:08.314]             inherits <- base::inherits
[13:36:08.314]             invokeRestart <- base::invokeRestart
[13:36:08.314]             length <- base::length
[13:36:08.314]             list <- base::list
[13:36:08.314]             seq.int <- base::seq.int
[13:36:08.314]             signalCondition <- base::signalCondition
[13:36:08.314]             sys.calls <- base::sys.calls
[13:36:08.314]             `[[` <- base::`[[`
[13:36:08.314]             `+` <- base::`+`
[13:36:08.314]             `<<-` <- base::`<<-`
[13:36:08.314]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.314]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.314]                   3L)]
[13:36:08.314]             }
[13:36:08.314]             function(cond) {
[13:36:08.314]                 is_error <- inherits(cond, "error")
[13:36:08.314]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.314]                   NULL)
[13:36:08.314]                 if (is_error) {
[13:36:08.314]                   sessionInformation <- function() {
[13:36:08.314]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.314]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.314]                       search = base::search(), system = base::Sys.info())
[13:36:08.314]                   }
[13:36:08.314]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.314]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.314]                     cond$call), session = sessionInformation(), 
[13:36:08.314]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.314]                   signalCondition(cond)
[13:36:08.314]                 }
[13:36:08.314]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.314]                 "immediateCondition"))) {
[13:36:08.314]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.314]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.314]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.314]                   if (TRUE && !signal) {
[13:36:08.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.314]                     {
[13:36:08.314]                       inherits <- base::inherits
[13:36:08.314]                       invokeRestart <- base::invokeRestart
[13:36:08.314]                       is.null <- base::is.null
[13:36:08.314]                       muffled <- FALSE
[13:36:08.314]                       if (inherits(cond, "message")) {
[13:36:08.314]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.314]                         if (muffled) 
[13:36:08.314]                           invokeRestart("muffleMessage")
[13:36:08.314]                       }
[13:36:08.314]                       else if (inherits(cond, "warning")) {
[13:36:08.314]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.314]                         if (muffled) 
[13:36:08.314]                           invokeRestart("muffleWarning")
[13:36:08.314]                       }
[13:36:08.314]                       else if (inherits(cond, "condition")) {
[13:36:08.314]                         if (!is.null(pattern)) {
[13:36:08.314]                           computeRestarts <- base::computeRestarts
[13:36:08.314]                           grepl <- base::grepl
[13:36:08.314]                           restarts <- computeRestarts(cond)
[13:36:08.314]                           for (restart in restarts) {
[13:36:08.314]                             name <- restart$name
[13:36:08.314]                             if (is.null(name)) 
[13:36:08.314]                               next
[13:36:08.314]                             if (!grepl(pattern, name)) 
[13:36:08.314]                               next
[13:36:08.314]                             invokeRestart(restart)
[13:36:08.314]                             muffled <- TRUE
[13:36:08.314]                             break
[13:36:08.314]                           }
[13:36:08.314]                         }
[13:36:08.314]                       }
[13:36:08.314]                       invisible(muffled)
[13:36:08.314]                     }
[13:36:08.314]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.314]                   }
[13:36:08.314]                 }
[13:36:08.314]                 else {
[13:36:08.314]                   if (TRUE) {
[13:36:08.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.314]                     {
[13:36:08.314]                       inherits <- base::inherits
[13:36:08.314]                       invokeRestart <- base::invokeRestart
[13:36:08.314]                       is.null <- base::is.null
[13:36:08.314]                       muffled <- FALSE
[13:36:08.314]                       if (inherits(cond, "message")) {
[13:36:08.314]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.314]                         if (muffled) 
[13:36:08.314]                           invokeRestart("muffleMessage")
[13:36:08.314]                       }
[13:36:08.314]                       else if (inherits(cond, "warning")) {
[13:36:08.314]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.314]                         if (muffled) 
[13:36:08.314]                           invokeRestart("muffleWarning")
[13:36:08.314]                       }
[13:36:08.314]                       else if (inherits(cond, "condition")) {
[13:36:08.314]                         if (!is.null(pattern)) {
[13:36:08.314]                           computeRestarts <- base::computeRestarts
[13:36:08.314]                           grepl <- base::grepl
[13:36:08.314]                           restarts <- computeRestarts(cond)
[13:36:08.314]                           for (restart in restarts) {
[13:36:08.314]                             name <- restart$name
[13:36:08.314]                             if (is.null(name)) 
[13:36:08.314]                               next
[13:36:08.314]                             if (!grepl(pattern, name)) 
[13:36:08.314]                               next
[13:36:08.314]                             invokeRestart(restart)
[13:36:08.314]                             muffled <- TRUE
[13:36:08.314]                             break
[13:36:08.314]                           }
[13:36:08.314]                         }
[13:36:08.314]                       }
[13:36:08.314]                       invisible(muffled)
[13:36:08.314]                     }
[13:36:08.314]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.314]                   }
[13:36:08.314]                 }
[13:36:08.314]             }
[13:36:08.314]         }))
[13:36:08.314]     }, error = function(ex) {
[13:36:08.314]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.314]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.314]                 ...future.rng), started = ...future.startTime, 
[13:36:08.314]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.314]             version = "1.8"), class = "FutureResult")
[13:36:08.314]     }, finally = {
[13:36:08.314]         if (!identical(...future.workdir, getwd())) 
[13:36:08.314]             setwd(...future.workdir)
[13:36:08.314]         {
[13:36:08.314]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.314]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.314]             }
[13:36:08.314]             base::options(...future.oldOptions)
[13:36:08.314]             if (.Platform$OS.type == "windows") {
[13:36:08.314]                 old_names <- names(...future.oldEnvVars)
[13:36:08.314]                 envs <- base::Sys.getenv()
[13:36:08.314]                 names <- names(envs)
[13:36:08.314]                 common <- intersect(names, old_names)
[13:36:08.314]                 added <- setdiff(names, old_names)
[13:36:08.314]                 removed <- setdiff(old_names, names)
[13:36:08.314]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.314]                   envs[common]]
[13:36:08.314]                 NAMES <- toupper(changed)
[13:36:08.314]                 args <- list()
[13:36:08.314]                 for (kk in seq_along(NAMES)) {
[13:36:08.314]                   name <- changed[[kk]]
[13:36:08.314]                   NAME <- NAMES[[kk]]
[13:36:08.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.314]                     next
[13:36:08.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.314]                 }
[13:36:08.314]                 NAMES <- toupper(added)
[13:36:08.314]                 for (kk in seq_along(NAMES)) {
[13:36:08.314]                   name <- added[[kk]]
[13:36:08.314]                   NAME <- NAMES[[kk]]
[13:36:08.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.314]                     next
[13:36:08.314]                   args[[name]] <- ""
[13:36:08.314]                 }
[13:36:08.314]                 NAMES <- toupper(removed)
[13:36:08.314]                 for (kk in seq_along(NAMES)) {
[13:36:08.314]                   name <- removed[[kk]]
[13:36:08.314]                   NAME <- NAMES[[kk]]
[13:36:08.314]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.314]                     next
[13:36:08.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.314]                 }
[13:36:08.314]                 if (length(args) > 0) 
[13:36:08.314]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.314]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.314]             }
[13:36:08.314]             else {
[13:36:08.314]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.314]             }
[13:36:08.314]             {
[13:36:08.314]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.314]                   0L) {
[13:36:08.314]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.314]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.314]                   base::options(opts)
[13:36:08.314]                 }
[13:36:08.314]                 {
[13:36:08.314]                   {
[13:36:08.314]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:08.314]                     NULL
[13:36:08.314]                   }
[13:36:08.314]                   options(future.plan = NULL)
[13:36:08.314]                   if (is.na(NA_character_)) 
[13:36:08.314]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.314]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.314]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.314]                     .init = FALSE)
[13:36:08.314]                 }
[13:36:08.314]             }
[13:36:08.314]         }
[13:36:08.314]     })
[13:36:08.314]     if (TRUE) {
[13:36:08.314]         base::sink(type = "output", split = FALSE)
[13:36:08.314]         if (TRUE) {
[13:36:08.314]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.314]         }
[13:36:08.314]         else {
[13:36:08.314]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.314]         }
[13:36:08.314]         base::close(...future.stdout)
[13:36:08.314]         ...future.stdout <- NULL
[13:36:08.314]     }
[13:36:08.314]     ...future.result$conditions <- ...future.conditions
[13:36:08.314]     ...future.result$finished <- base::Sys.time()
[13:36:08.314]     ...future.result
[13:36:08.314] }
[13:36:08.317] assign_globals() ...
[13:36:08.317] List of 4
[13:36:08.317]  $ ii   : int 2
[13:36:08.317]  $ n    : int 4
[13:36:08.317]  $ C    : cplx [1:25, 1:25] -0.72-1.5i -0.72-1.44i -0.72-1.38i ...
[13:36:08.317]   ..- attr(*, "region")=List of 2
[13:36:08.317]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:36:08.317]   .. ..$ yrange: num [1:2] -1.5 -0.0306
[13:36:08.317]   ..- attr(*, "tile")= int [1:2] 1 2
[13:36:08.317]  $ delay:function (counts)  
[13:36:08.317]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.317]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556982995018> 
[13:36:08.317]  - attr(*, "where")=List of 4
[13:36:08.317]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.317]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.317]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.317]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.317]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.317]  - attr(*, "resolved")= logi FALSE
[13:36:08.317]  - attr(*, "total_size")= num 14584
[13:36:08.317]  - attr(*, "already-done")= logi TRUE
[13:36:08.324] - copied ‘ii’ to environment
[13:36:08.324] - copied ‘n’ to environment
[13:36:08.324] - copied ‘C’ to environment
[13:36:08.325] - reassign environment for ‘delay’
[13:36:08.325] - copied ‘delay’ to environment
[13:36:08.325] assign_globals() ... done
[13:36:08.325] requestCore(): workers = 2
[13:36:08.327] MulticoreFuture started
[13:36:08.327] - Launch lazy future ... done
[13:36:08.328] run() for ‘MulticoreFuture’ ... done
[13:36:08.328] - run() ... done
[13:36:08.328] - resolved() ...
[13:36:08.329] plan(): Setting new future strategy stack:
[13:36:08.329] List of future strategies:
[13:36:08.329] 1. sequential:
[13:36:08.329]    - args: function (..., envir = parent.frame())
[13:36:08.329]    - tweaked: FALSE
[13:36:08.329]    - call: NULL
[13:36:08.330] plan(): nbrOfWorkers() = 1
[13:36:08.335] plan(): Setting new future strategy stack:
[13:36:08.335] List of future strategies:
[13:36:08.335] 1. multicore:
[13:36:08.335]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:08.335]    - tweaked: FALSE
[13:36:08.335]    - call: plan(strategy)
[13:36:08.339] - resolved: FALSE
[13:36:08.339] - resolved() ... done
[13:36:08.339] resolved() for ‘MulticoreFuture’ ... done
[13:36:08.339] resolved() for ‘Future’ ...
[13:36:08.339] - state: ‘created’
[13:36:08.339] - run: TRUE
[13:36:08.339] - run() ...
[13:36:08.340] run() for ‘Future’ ...
[13:36:08.340] - state: ‘created’
[13:36:08.340] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:08.340] plan(): nbrOfWorkers() = 2
[13:36:08.344] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:08.344] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:08.345]   - Field: ‘label’
[13:36:08.345]   - Field: ‘local’
[13:36:08.345]   - Field: ‘owner’
[13:36:08.345]   - Field: ‘envir’
[13:36:08.345]   - Field: ‘workers’
[13:36:08.345]   - Field: ‘packages’
[13:36:08.345]   - Field: ‘gc’
[13:36:08.346]   - Field: ‘job’
[13:36:08.346]   - Field: ‘conditions’
[13:36:08.346]   - Field: ‘expr’
[13:36:08.346]   - Field: ‘uuid’
[13:36:08.346]   - Field: ‘seed’
[13:36:08.346]   - Field: ‘version’
[13:36:08.347]   - Field: ‘result’
[13:36:08.347]   - Field: ‘asynchronous’
[13:36:08.347]   - Field: ‘calls’
[13:36:08.347]   - Field: ‘globals’
[13:36:08.347]   - Field: ‘stdout’
[13:36:08.347]   - Field: ‘earlySignal’
[13:36:08.347]   - Field: ‘lazy’
[13:36:08.348]   - Field: ‘state’
[13:36:08.348] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:08.348] - Launch lazy future ...
[13:36:08.348] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.349] Packages needed by future strategies (n = 0): <none>
[13:36:08.350] {
[13:36:08.350]     {
[13:36:08.350]         {
[13:36:08.350]             ...future.startTime <- base::Sys.time()
[13:36:08.350]             {
[13:36:08.350]                 {
[13:36:08.350]                   {
[13:36:08.350]                     {
[13:36:08.350]                       {
[13:36:08.350]                         base::local({
[13:36:08.350]                           has_future <- base::requireNamespace("future", 
[13:36:08.350]                             quietly = TRUE)
[13:36:08.350]                           if (has_future) {
[13:36:08.350]                             ns <- base::getNamespace("future")
[13:36:08.350]                             version <- ns[[".package"]][["version"]]
[13:36:08.350]                             if (is.null(version)) 
[13:36:08.350]                               version <- utils::packageVersion("future")
[13:36:08.350]                           }
[13:36:08.350]                           else {
[13:36:08.350]                             version <- NULL
[13:36:08.350]                           }
[13:36:08.350]                           if (!has_future || version < "1.8.0") {
[13:36:08.350]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.350]                               "", base::R.version$version.string), 
[13:36:08.350]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:08.350]                                 base::R.version$platform, 8 * 
[13:36:08.350]                                   base::.Machine$sizeof.pointer), 
[13:36:08.350]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.350]                                 "release", "version")], collapse = " "), 
[13:36:08.350]                               hostname = base::Sys.info()[["nodename"]])
[13:36:08.350]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.350]                               info)
[13:36:08.350]                             info <- base::paste(info, collapse = "; ")
[13:36:08.350]                             if (!has_future) {
[13:36:08.350]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.350]                                 info)
[13:36:08.350]                             }
[13:36:08.350]                             else {
[13:36:08.350]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.350]                                 info, version)
[13:36:08.350]                             }
[13:36:08.350]                             base::stop(msg)
[13:36:08.350]                           }
[13:36:08.350]                         })
[13:36:08.350]                       }
[13:36:08.350]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:08.350]                       base::options(mc.cores = 1L)
[13:36:08.350]                     }
[13:36:08.350]                     base::local({
[13:36:08.350]                       for (pkg in "future") {
[13:36:08.350]                         base::loadNamespace(pkg)
[13:36:08.350]                         base::library(pkg, character.only = TRUE)
[13:36:08.350]                       }
[13:36:08.350]                     })
[13:36:08.350]                   }
[13:36:08.350]                   ...future.strategy.old <- future::plan("list")
[13:36:08.350]                   options(future.plan = NULL)
[13:36:08.350]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.350]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.350]                 }
[13:36:08.350]                 ...future.workdir <- getwd()
[13:36:08.350]             }
[13:36:08.350]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.350]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.350]         }
[13:36:08.350]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.350]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.350]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.350]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.350]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.350]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.350]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.350]             base::names(...future.oldOptions))
[13:36:08.350]     }
[13:36:08.350]     if (FALSE) {
[13:36:08.350]     }
[13:36:08.350]     else {
[13:36:08.350]         if (TRUE) {
[13:36:08.350]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.350]                 open = "w")
[13:36:08.350]         }
[13:36:08.350]         else {
[13:36:08.350]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.350]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.350]         }
[13:36:08.350]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.350]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.350]             base::sink(type = "output", split = FALSE)
[13:36:08.350]             base::close(...future.stdout)
[13:36:08.350]         }, add = TRUE)
[13:36:08.350]     }
[13:36:08.350]     ...future.frame <- base::sys.nframe()
[13:36:08.350]     ...future.conditions <- base::list()
[13:36:08.350]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.350]     if (FALSE) {
[13:36:08.350]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.350]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.350]     }
[13:36:08.350]     ...future.result <- base::tryCatch({
[13:36:08.350]         base::withCallingHandlers({
[13:36:08.350]             ...future.value <- base::withVisible(base::local({
[13:36:08.350]                 withCallingHandlers({
[13:36:08.350]                   {
[13:36:08.350]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.350]                       ii, n), appendLF = FALSE)
[13:36:08.350]                     fit <- mandelbrot(C)
[13:36:08.350]                     delay(fit)
[13:36:08.350]                     message(" done")
[13:36:08.350]                     fit
[13:36:08.350]                   }
[13:36:08.350]                 }, immediateCondition = function(cond) {
[13:36:08.350]                   save_rds <- function (object, pathname, ...) 
[13:36:08.350]                   {
[13:36:08.350]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:08.350]                     if (file_test("-f", pathname_tmp)) {
[13:36:08.350]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.350]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:08.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.350]                         fi_tmp[["mtime"]])
[13:36:08.350]                     }
[13:36:08.350]                     tryCatch({
[13:36:08.350]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:08.350]                     }, error = function(ex) {
[13:36:08.350]                       msg <- conditionMessage(ex)
[13:36:08.350]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.350]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:08.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.350]                         fi_tmp[["mtime"]], msg)
[13:36:08.350]                       ex$message <- msg
[13:36:08.350]                       stop(ex)
[13:36:08.350]                     })
[13:36:08.350]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:08.350]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:08.350]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:08.350]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.350]                       fi <- file.info(pathname)
[13:36:08.350]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:08.350]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.350]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:08.350]                         fi[["size"]], fi[["mtime"]])
[13:36:08.350]                       stop(msg)
[13:36:08.350]                     }
[13:36:08.350]                     invisible(pathname)
[13:36:08.350]                   }
[13:36:08.350]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:08.350]                     rootPath = tempdir()) 
[13:36:08.350]                   {
[13:36:08.350]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:08.350]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:08.350]                       tmpdir = path, fileext = ".rds")
[13:36:08.350]                     save_rds(obj, file)
[13:36:08.350]                   }
[13:36:08.350]                   saveImmediateCondition(cond, path = "/tmp/RtmpOqwNI3/.future/immediateConditions")
[13:36:08.350]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.350]                   {
[13:36:08.350]                     inherits <- base::inherits
[13:36:08.350]                     invokeRestart <- base::invokeRestart
[13:36:08.350]                     is.null <- base::is.null
[13:36:08.350]                     muffled <- FALSE
[13:36:08.350]                     if (inherits(cond, "message")) {
[13:36:08.350]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:08.350]                       if (muffled) 
[13:36:08.350]                         invokeRestart("muffleMessage")
[13:36:08.350]                     }
[13:36:08.350]                     else if (inherits(cond, "warning")) {
[13:36:08.350]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:08.350]                       if (muffled) 
[13:36:08.350]                         invokeRestart("muffleWarning")
[13:36:08.350]                     }
[13:36:08.350]                     else if (inherits(cond, "condition")) {
[13:36:08.350]                       if (!is.null(pattern)) {
[13:36:08.350]                         computeRestarts <- base::computeRestarts
[13:36:08.350]                         grepl <- base::grepl
[13:36:08.350]                         restarts <- computeRestarts(cond)
[13:36:08.350]                         for (restart in restarts) {
[13:36:08.350]                           name <- restart$name
[13:36:08.350]                           if (is.null(name)) 
[13:36:08.350]                             next
[13:36:08.350]                           if (!grepl(pattern, name)) 
[13:36:08.350]                             next
[13:36:08.350]                           invokeRestart(restart)
[13:36:08.350]                           muffled <- TRUE
[13:36:08.350]                           break
[13:36:08.350]                         }
[13:36:08.350]                       }
[13:36:08.350]                     }
[13:36:08.350]                     invisible(muffled)
[13:36:08.350]                   }
[13:36:08.350]                   muffleCondition(cond)
[13:36:08.350]                 })
[13:36:08.350]             }))
[13:36:08.350]             future::FutureResult(value = ...future.value$value, 
[13:36:08.350]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.350]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.350]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.350]                     ...future.globalenv.names))
[13:36:08.350]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.350]         }, condition = base::local({
[13:36:08.350]             c <- base::c
[13:36:08.350]             inherits <- base::inherits
[13:36:08.350]             invokeRestart <- base::invokeRestart
[13:36:08.350]             length <- base::length
[13:36:08.350]             list <- base::list
[13:36:08.350]             seq.int <- base::seq.int
[13:36:08.350]             signalCondition <- base::signalCondition
[13:36:08.350]             sys.calls <- base::sys.calls
[13:36:08.350]             `[[` <- base::`[[`
[13:36:08.350]             `+` <- base::`+`
[13:36:08.350]             `<<-` <- base::`<<-`
[13:36:08.350]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.350]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.350]                   3L)]
[13:36:08.350]             }
[13:36:08.350]             function(cond) {
[13:36:08.350]                 is_error <- inherits(cond, "error")
[13:36:08.350]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.350]                   NULL)
[13:36:08.350]                 if (is_error) {
[13:36:08.350]                   sessionInformation <- function() {
[13:36:08.350]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.350]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.350]                       search = base::search(), system = base::Sys.info())
[13:36:08.350]                   }
[13:36:08.350]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.350]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.350]                     cond$call), session = sessionInformation(), 
[13:36:08.350]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.350]                   signalCondition(cond)
[13:36:08.350]                 }
[13:36:08.350]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.350]                 "immediateCondition"))) {
[13:36:08.350]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.350]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.350]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.350]                   if (TRUE && !signal) {
[13:36:08.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.350]                     {
[13:36:08.350]                       inherits <- base::inherits
[13:36:08.350]                       invokeRestart <- base::invokeRestart
[13:36:08.350]                       is.null <- base::is.null
[13:36:08.350]                       muffled <- FALSE
[13:36:08.350]                       if (inherits(cond, "message")) {
[13:36:08.350]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.350]                         if (muffled) 
[13:36:08.350]                           invokeRestart("muffleMessage")
[13:36:08.350]                       }
[13:36:08.350]                       else if (inherits(cond, "warning")) {
[13:36:08.350]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.350]                         if (muffled) 
[13:36:08.350]                           invokeRestart("muffleWarning")
[13:36:08.350]                       }
[13:36:08.350]                       else if (inherits(cond, "condition")) {
[13:36:08.350]                         if (!is.null(pattern)) {
[13:36:08.350]                           computeRestarts <- base::computeRestarts
[13:36:08.350]                           grepl <- base::grepl
[13:36:08.350]                           restarts <- computeRestarts(cond)
[13:36:08.350]                           for (restart in restarts) {
[13:36:08.350]                             name <- restart$name
[13:36:08.350]                             if (is.null(name)) 
[13:36:08.350]                               next
[13:36:08.350]                             if (!grepl(pattern, name)) 
[13:36:08.350]                               next
[13:36:08.350]                             invokeRestart(restart)
[13:36:08.350]                             muffled <- TRUE
[13:36:08.350]                             break
[13:36:08.350]                           }
[13:36:08.350]                         }
[13:36:08.350]                       }
[13:36:08.350]                       invisible(muffled)
[13:36:08.350]                     }
[13:36:08.350]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.350]                   }
[13:36:08.350]                 }
[13:36:08.350]                 else {
[13:36:08.350]                   if (TRUE) {
[13:36:08.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.350]                     {
[13:36:08.350]                       inherits <- base::inherits
[13:36:08.350]                       invokeRestart <- base::invokeRestart
[13:36:08.350]                       is.null <- base::is.null
[13:36:08.350]                       muffled <- FALSE
[13:36:08.350]                       if (inherits(cond, "message")) {
[13:36:08.350]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.350]                         if (muffled) 
[13:36:08.350]                           invokeRestart("muffleMessage")
[13:36:08.350]                       }
[13:36:08.350]                       else if (inherits(cond, "warning")) {
[13:36:08.350]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.350]                         if (muffled) 
[13:36:08.350]                           invokeRestart("muffleWarning")
[13:36:08.350]                       }
[13:36:08.350]                       else if (inherits(cond, "condition")) {
[13:36:08.350]                         if (!is.null(pattern)) {
[13:36:08.350]                           computeRestarts <- base::computeRestarts
[13:36:08.350]                           grepl <- base::grepl
[13:36:08.350]                           restarts <- computeRestarts(cond)
[13:36:08.350]                           for (restart in restarts) {
[13:36:08.350]                             name <- restart$name
[13:36:08.350]                             if (is.null(name)) 
[13:36:08.350]                               next
[13:36:08.350]                             if (!grepl(pattern, name)) 
[13:36:08.350]                               next
[13:36:08.350]                             invokeRestart(restart)
[13:36:08.350]                             muffled <- TRUE
[13:36:08.350]                             break
[13:36:08.350]                           }
[13:36:08.350]                         }
[13:36:08.350]                       }
[13:36:08.350]                       invisible(muffled)
[13:36:08.350]                     }
[13:36:08.350]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.350]                   }
[13:36:08.350]                 }
[13:36:08.350]             }
[13:36:08.350]         }))
[13:36:08.350]     }, error = function(ex) {
[13:36:08.350]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.350]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.350]                 ...future.rng), started = ...future.startTime, 
[13:36:08.350]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.350]             version = "1.8"), class = "FutureResult")
[13:36:08.350]     }, finally = {
[13:36:08.350]         if (!identical(...future.workdir, getwd())) 
[13:36:08.350]             setwd(...future.workdir)
[13:36:08.350]         {
[13:36:08.350]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.350]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.350]             }
[13:36:08.350]             base::options(...future.oldOptions)
[13:36:08.350]             if (.Platform$OS.type == "windows") {
[13:36:08.350]                 old_names <- names(...future.oldEnvVars)
[13:36:08.350]                 envs <- base::Sys.getenv()
[13:36:08.350]                 names <- names(envs)
[13:36:08.350]                 common <- intersect(names, old_names)
[13:36:08.350]                 added <- setdiff(names, old_names)
[13:36:08.350]                 removed <- setdiff(old_names, names)
[13:36:08.350]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.350]                   envs[common]]
[13:36:08.350]                 NAMES <- toupper(changed)
[13:36:08.350]                 args <- list()
[13:36:08.350]                 for (kk in seq_along(NAMES)) {
[13:36:08.350]                   name <- changed[[kk]]
[13:36:08.350]                   NAME <- NAMES[[kk]]
[13:36:08.350]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.350]                     next
[13:36:08.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.350]                 }
[13:36:08.350]                 NAMES <- toupper(added)
[13:36:08.350]                 for (kk in seq_along(NAMES)) {
[13:36:08.350]                   name <- added[[kk]]
[13:36:08.350]                   NAME <- NAMES[[kk]]
[13:36:08.350]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.350]                     next
[13:36:08.350]                   args[[name]] <- ""
[13:36:08.350]                 }
[13:36:08.350]                 NAMES <- toupper(removed)
[13:36:08.350]                 for (kk in seq_along(NAMES)) {
[13:36:08.350]                   name <- removed[[kk]]
[13:36:08.350]                   NAME <- NAMES[[kk]]
[13:36:08.350]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.350]                     next
[13:36:08.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.350]                 }
[13:36:08.350]                 if (length(args) > 0) 
[13:36:08.350]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.350]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.350]             }
[13:36:08.350]             else {
[13:36:08.350]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.350]             }
[13:36:08.350]             {
[13:36:08.350]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.350]                   0L) {
[13:36:08.350]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.350]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.350]                   base::options(opts)
[13:36:08.350]                 }
[13:36:08.350]                 {
[13:36:08.350]                   {
[13:36:08.350]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:08.350]                     NULL
[13:36:08.350]                   }
[13:36:08.350]                   options(future.plan = NULL)
[13:36:08.350]                   if (is.na(NA_character_)) 
[13:36:08.350]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.350]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.350]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.350]                     .init = FALSE)
[13:36:08.350]                 }
[13:36:08.350]             }
[13:36:08.350]         }
[13:36:08.350]     })
[13:36:08.350]     if (TRUE) {
[13:36:08.350]         base::sink(type = "output", split = FALSE)
[13:36:08.350]         if (TRUE) {
[13:36:08.350]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.350]         }
[13:36:08.350]         else {
[13:36:08.350]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.350]         }
[13:36:08.350]         base::close(...future.stdout)
[13:36:08.350]         ...future.stdout <- NULL
[13:36:08.350]     }
[13:36:08.350]     ...future.result$conditions <- ...future.conditions
[13:36:08.350]     ...future.result$finished <- base::Sys.time()
[13:36:08.350]     ...future.result
[13:36:08.350] }
[13:36:08.353] assign_globals() ...
[13:36:08.353] List of 4
[13:36:08.353]  $ ii   : int 3
[13:36:08.353]  $ n    : int 4
[13:36:08.353]  $ C    : cplx [1:25, 1:25] -2.25+0.03i -2.25+0.09i -2.25+0.15i ...
[13:36:08.353]   ..- attr(*, "region")=List of 2
[13:36:08.353]   .. ..$ xrange: num [1:2] -2.25 -0.781
[13:36:08.353]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:36:08.353]   ..- attr(*, "tile")= int [1:2] 2 1
[13:36:08.353]  $ delay:function (counts)  
[13:36:08.353]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.353]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556982995018> 
[13:36:08.353]  - attr(*, "where")=List of 4
[13:36:08.353]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.353]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.353]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.353]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.353]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.353]  - attr(*, "resolved")= logi FALSE
[13:36:08.353]  - attr(*, "total_size")= num 14584
[13:36:08.353]  - attr(*, "already-done")= logi TRUE
[13:36:08.363] - copied ‘ii’ to environment
[13:36:08.363] - copied ‘n’ to environment
[13:36:08.363] - copied ‘C’ to environment
[13:36:08.364] - reassign environment for ‘delay’
[13:36:08.364] - copied ‘delay’ to environment
[13:36:08.364] assign_globals() ... done
[13:36:08.364] requestCore(): workers = 2
[13:36:08.366] MulticoreFuture started
[13:36:08.367] - Launch lazy future ... done
[13:36:08.367] run() for ‘MulticoreFuture’ ... done
[13:36:08.367] - run() ... done
[13:36:08.367] - resolved() ...
[13:36:08.368] plan(): Setting new future strategy stack:
[13:36:08.368] List of future strategies:
[13:36:08.368] 1. sequential:
[13:36:08.368]    - args: function (..., envir = parent.frame())
[13:36:08.368]    - tweaked: FALSE
[13:36:08.368]    - call: NULL
[13:36:08.369] plan(): nbrOfWorkers() = 1
[13:36:08.373] plan(): Setting new future strategy stack:
[13:36:08.373] List of future strategies:
[13:36:08.373] 1. multicore:
[13:36:08.373]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:08.373]    - tweaked: FALSE
[13:36:08.373]    - call: plan(strategy)
[13:36:08.378] - resolved: FALSE
[13:36:08.378] - resolved() ... done
[13:36:08.378] resolved() for ‘MulticoreFuture’ ... done
[13:36:08.378] resolved() for ‘Future’ ...
[13:36:08.378] plan(): nbrOfWorkers() = 2
[13:36:08.379] - state: ‘created’
[13:36:08.379] - run: TRUE
[13:36:08.379] - run() ...
[13:36:08.379] run() for ‘Future’ ...
[13:36:08.379] - state: ‘created’
[13:36:08.379] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:08.385] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:08.385] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:08.385]   - Field: ‘label’
[13:36:08.385]   - Field: ‘local’
[13:36:08.385]   - Field: ‘owner’
[13:36:08.385]   - Field: ‘envir’
[13:36:08.385]   - Field: ‘workers’
[13:36:08.386]   - Field: ‘packages’
[13:36:08.386]   - Field: ‘gc’
[13:36:08.386]   - Field: ‘job’
[13:36:08.386]   - Field: ‘conditions’
[13:36:08.386]   - Field: ‘expr’
[13:36:08.386]   - Field: ‘uuid’
[13:36:08.387]   - Field: ‘seed’
[13:36:08.387]   - Field: ‘version’
[13:36:08.387]   - Field: ‘result’
[13:36:08.387]   - Field: ‘asynchronous’
[13:36:08.387]   - Field: ‘calls’
[13:36:08.387]   - Field: ‘globals’
[13:36:08.387]   - Field: ‘stdout’
[13:36:08.387]   - Field: ‘earlySignal’
[13:36:08.388]   - Field: ‘lazy’
[13:36:08.388]   - Field: ‘state’
[13:36:08.388] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:08.388] - Launch lazy future ...
[13:36:08.389] Packages needed by the future expression (n = 1): ‘future’
[13:36:08.389] Packages needed by future strategies (n = 0): <none>
[13:36:08.390] {
[13:36:08.390]     {
[13:36:08.390]         {
[13:36:08.390]             ...future.startTime <- base::Sys.time()
[13:36:08.390]             {
[13:36:08.390]                 {
[13:36:08.390]                   {
[13:36:08.390]                     {
[13:36:08.390]                       {
[13:36:08.390]                         base::local({
[13:36:08.390]                           has_future <- base::requireNamespace("future", 
[13:36:08.390]                             quietly = TRUE)
[13:36:08.390]                           if (has_future) {
[13:36:08.390]                             ns <- base::getNamespace("future")
[13:36:08.390]                             version <- ns[[".package"]][["version"]]
[13:36:08.390]                             if (is.null(version)) 
[13:36:08.390]                               version <- utils::packageVersion("future")
[13:36:08.390]                           }
[13:36:08.390]                           else {
[13:36:08.390]                             version <- NULL
[13:36:08.390]                           }
[13:36:08.390]                           if (!has_future || version < "1.8.0") {
[13:36:08.390]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.390]                               "", base::R.version$version.string), 
[13:36:08.390]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:08.390]                                 base::R.version$platform, 8 * 
[13:36:08.390]                                   base::.Machine$sizeof.pointer), 
[13:36:08.390]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.390]                                 "release", "version")], collapse = " "), 
[13:36:08.390]                               hostname = base::Sys.info()[["nodename"]])
[13:36:08.390]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.390]                               info)
[13:36:08.390]                             info <- base::paste(info, collapse = "; ")
[13:36:08.390]                             if (!has_future) {
[13:36:08.390]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.390]                                 info)
[13:36:08.390]                             }
[13:36:08.390]                             else {
[13:36:08.390]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.390]                                 info, version)
[13:36:08.390]                             }
[13:36:08.390]                             base::stop(msg)
[13:36:08.390]                           }
[13:36:08.390]                         })
[13:36:08.390]                       }
[13:36:08.390]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:08.390]                       base::options(mc.cores = 1L)
[13:36:08.390]                     }
[13:36:08.390]                     base::local({
[13:36:08.390]                       for (pkg in "future") {
[13:36:08.390]                         base::loadNamespace(pkg)
[13:36:08.390]                         base::library(pkg, character.only = TRUE)
[13:36:08.390]                       }
[13:36:08.390]                     })
[13:36:08.390]                   }
[13:36:08.390]                   ...future.strategy.old <- future::plan("list")
[13:36:08.390]                   options(future.plan = NULL)
[13:36:08.390]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.390]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.390]                 }
[13:36:08.390]                 ...future.workdir <- getwd()
[13:36:08.390]             }
[13:36:08.390]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.390]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.390]         }
[13:36:08.390]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.390]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.390]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.390]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.390]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.390]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.390]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.390]             base::names(...future.oldOptions))
[13:36:08.390]     }
[13:36:08.390]     if (FALSE) {
[13:36:08.390]     }
[13:36:08.390]     else {
[13:36:08.390]         if (TRUE) {
[13:36:08.390]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.390]                 open = "w")
[13:36:08.390]         }
[13:36:08.390]         else {
[13:36:08.390]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.390]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.390]         }
[13:36:08.390]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.390]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.390]             base::sink(type = "output", split = FALSE)
[13:36:08.390]             base::close(...future.stdout)
[13:36:08.390]         }, add = TRUE)
[13:36:08.390]     }
[13:36:08.390]     ...future.frame <- base::sys.nframe()
[13:36:08.390]     ...future.conditions <- base::list()
[13:36:08.390]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.390]     if (FALSE) {
[13:36:08.390]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.390]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.390]     }
[13:36:08.390]     ...future.result <- base::tryCatch({
[13:36:08.390]         base::withCallingHandlers({
[13:36:08.390]             ...future.value <- base::withVisible(base::local({
[13:36:08.390]                 withCallingHandlers({
[13:36:08.390]                   {
[13:36:08.390]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:08.390]                       ii, n), appendLF = FALSE)
[13:36:08.390]                     fit <- mandelbrot(C)
[13:36:08.390]                     delay(fit)
[13:36:08.390]                     message(" done")
[13:36:08.390]                     fit
[13:36:08.390]                   }
[13:36:08.390]                 }, immediateCondition = function(cond) {
[13:36:08.390]                   save_rds <- function (object, pathname, ...) 
[13:36:08.390]                   {
[13:36:08.390]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:08.390]                     if (file_test("-f", pathname_tmp)) {
[13:36:08.390]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.390]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:08.390]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.390]                         fi_tmp[["mtime"]])
[13:36:08.390]                     }
[13:36:08.390]                     tryCatch({
[13:36:08.390]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:08.390]                     }, error = function(ex) {
[13:36:08.390]                       msg <- conditionMessage(ex)
[13:36:08.390]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.390]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:08.390]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.390]                         fi_tmp[["mtime"]], msg)
[13:36:08.390]                       ex$message <- msg
[13:36:08.390]                       stop(ex)
[13:36:08.390]                     })
[13:36:08.390]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:08.390]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:08.390]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:08.390]                       fi_tmp <- file.info(pathname_tmp)
[13:36:08.390]                       fi <- file.info(pathname)
[13:36:08.390]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:08.390]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:08.390]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:08.390]                         fi[["size"]], fi[["mtime"]])
[13:36:08.390]                       stop(msg)
[13:36:08.390]                     }
[13:36:08.390]                     invisible(pathname)
[13:36:08.390]                   }
[13:36:08.390]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:08.390]                     rootPath = tempdir()) 
[13:36:08.390]                   {
[13:36:08.390]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:08.390]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:08.390]                       tmpdir = path, fileext = ".rds")
[13:36:08.390]                     save_rds(obj, file)
[13:36:08.390]                   }
[13:36:08.390]                   saveImmediateCondition(cond, path = "/tmp/RtmpOqwNI3/.future/immediateConditions")
[13:36:08.390]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.390]                   {
[13:36:08.390]                     inherits <- base::inherits
[13:36:08.390]                     invokeRestart <- base::invokeRestart
[13:36:08.390]                     is.null <- base::is.null
[13:36:08.390]                     muffled <- FALSE
[13:36:08.390]                     if (inherits(cond, "message")) {
[13:36:08.390]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:08.390]                       if (muffled) 
[13:36:08.390]                         invokeRestart("muffleMessage")
[13:36:08.390]                     }
[13:36:08.390]                     else if (inherits(cond, "warning")) {
[13:36:08.390]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:08.390]                       if (muffled) 
[13:36:08.390]                         invokeRestart("muffleWarning")
[13:36:08.390]                     }
[13:36:08.390]                     else if (inherits(cond, "condition")) {
[13:36:08.390]                       if (!is.null(pattern)) {
[13:36:08.390]                         computeRestarts <- base::computeRestarts
[13:36:08.390]                         grepl <- base::grepl
[13:36:08.390]                         restarts <- computeRestarts(cond)
[13:36:08.390]                         for (restart in restarts) {
[13:36:08.390]                           name <- restart$name
[13:36:08.390]                           if (is.null(name)) 
[13:36:08.390]                             next
[13:36:08.390]                           if (!grepl(pattern, name)) 
[13:36:08.390]                             next
[13:36:08.390]                           invokeRestart(restart)
[13:36:08.390]                           muffled <- TRUE
[13:36:08.390]                           break
[13:36:08.390]                         }
[13:36:08.390]                       }
[13:36:08.390]                     }
[13:36:08.390]                     invisible(muffled)
[13:36:08.390]                   }
[13:36:08.390]                   muffleCondition(cond)
[13:36:08.390]                 })
[13:36:08.390]             }))
[13:36:08.390]             future::FutureResult(value = ...future.value$value, 
[13:36:08.390]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.390]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.390]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.390]                     ...future.globalenv.names))
[13:36:08.390]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.390]         }, condition = base::local({
[13:36:08.390]             c <- base::c
[13:36:08.390]             inherits <- base::inherits
[13:36:08.390]             invokeRestart <- base::invokeRestart
[13:36:08.390]             length <- base::length
[13:36:08.390]             list <- base::list
[13:36:08.390]             seq.int <- base::seq.int
[13:36:08.390]             signalCondition <- base::signalCondition
[13:36:08.390]             sys.calls <- base::sys.calls
[13:36:08.390]             `[[` <- base::`[[`
[13:36:08.390]             `+` <- base::`+`
[13:36:08.390]             `<<-` <- base::`<<-`
[13:36:08.390]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.390]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.390]                   3L)]
[13:36:08.390]             }
[13:36:08.390]             function(cond) {
[13:36:08.390]                 is_error <- inherits(cond, "error")
[13:36:08.390]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.390]                   NULL)
[13:36:08.390]                 if (is_error) {
[13:36:08.390]                   sessionInformation <- function() {
[13:36:08.390]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.390]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.390]                       search = base::search(), system = base::Sys.info())
[13:36:08.390]                   }
[13:36:08.390]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.390]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.390]                     cond$call), session = sessionInformation(), 
[13:36:08.390]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.390]                   signalCondition(cond)
[13:36:08.390]                 }
[13:36:08.390]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.390]                 "immediateCondition"))) {
[13:36:08.390]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.390]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.390]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.390]                   if (TRUE && !signal) {
[13:36:08.390]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.390]                     {
[13:36:08.390]                       inherits <- base::inherits
[13:36:08.390]                       invokeRestart <- base::invokeRestart
[13:36:08.390]                       is.null <- base::is.null
[13:36:08.390]                       muffled <- FALSE
[13:36:08.390]                       if (inherits(cond, "message")) {
[13:36:08.390]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.390]                         if (muffled) 
[13:36:08.390]                           invokeRestart("muffleMessage")
[13:36:08.390]                       }
[13:36:08.390]                       else if (inherits(cond, "warning")) {
[13:36:08.390]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.390]                         if (muffled) 
[13:36:08.390]                           invokeRestart("muffleWarning")
[13:36:08.390]                       }
[13:36:08.390]                       else if (inherits(cond, "condition")) {
[13:36:08.390]                         if (!is.null(pattern)) {
[13:36:08.390]                           computeRestarts <- base::computeRestarts
[13:36:08.390]                           grepl <- base::grepl
[13:36:08.390]                           restarts <- computeRestarts(cond)
[13:36:08.390]                           for (restart in restarts) {
[13:36:08.390]                             name <- restart$name
[13:36:08.390]                             if (is.null(name)) 
[13:36:08.390]                               next
[13:36:08.390]                             if (!grepl(pattern, name)) 
[13:36:08.390]                               next
[13:36:08.390]                             invokeRestart(restart)
[13:36:08.390]                             muffled <- TRUE
[13:36:08.390]                             break
[13:36:08.390]                           }
[13:36:08.390]                         }
[13:36:08.390]                       }
[13:36:08.390]                       invisible(muffled)
[13:36:08.390]                     }
[13:36:08.390]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.390]                   }
[13:36:08.390]                 }
[13:36:08.390]                 else {
[13:36:08.390]                   if (TRUE) {
[13:36:08.390]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.390]                     {
[13:36:08.390]                       inherits <- base::inherits
[13:36:08.390]                       invokeRestart <- base::invokeRestart
[13:36:08.390]                       is.null <- base::is.null
[13:36:08.390]                       muffled <- FALSE
[13:36:08.390]                       if (inherits(cond, "message")) {
[13:36:08.390]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.390]                         if (muffled) 
[13:36:08.390]                           invokeRestart("muffleMessage")
[13:36:08.390]                       }
[13:36:08.390]                       else if (inherits(cond, "warning")) {
[13:36:08.390]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.390]                         if (muffled) 
[13:36:08.390]                           invokeRestart("muffleWarning")
[13:36:08.390]                       }
[13:36:08.390]                       else if (inherits(cond, "condition")) {
[13:36:08.390]                         if (!is.null(pattern)) {
[13:36:08.390]                           computeRestarts <- base::computeRestarts
[13:36:08.390]                           grepl <- base::grepl
[13:36:08.390]                           restarts <- computeRestarts(cond)
[13:36:08.390]                           for (restart in restarts) {
[13:36:08.390]                             name <- restart$name
[13:36:08.390]                             if (is.null(name)) 
[13:36:08.390]                               next
[13:36:08.390]                             if (!grepl(pattern, name)) 
[13:36:08.390]                               next
[13:36:08.390]                             invokeRestart(restart)
[13:36:08.390]                             muffled <- TRUE
[13:36:08.390]                             break
[13:36:08.390]                           }
[13:36:08.390]                         }
[13:36:08.390]                       }
[13:36:08.390]                       invisible(muffled)
[13:36:08.390]                     }
[13:36:08.390]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.390]                   }
[13:36:08.390]                 }
[13:36:08.390]             }
[13:36:08.390]         }))
[13:36:08.390]     }, error = function(ex) {
[13:36:08.390]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.390]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.390]                 ...future.rng), started = ...future.startTime, 
[13:36:08.390]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.390]             version = "1.8"), class = "FutureResult")
[13:36:08.390]     }, finally = {
[13:36:08.390]         if (!identical(...future.workdir, getwd())) 
[13:36:08.390]             setwd(...future.workdir)
[13:36:08.390]         {
[13:36:08.390]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.390]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.390]             }
[13:36:08.390]             base::options(...future.oldOptions)
[13:36:08.390]             if (.Platform$OS.type == "windows") {
[13:36:08.390]                 old_names <- names(...future.oldEnvVars)
[13:36:08.390]                 envs <- base::Sys.getenv()
[13:36:08.390]                 names <- names(envs)
[13:36:08.390]                 common <- intersect(names, old_names)
[13:36:08.390]                 added <- setdiff(names, old_names)
[13:36:08.390]                 removed <- setdiff(old_names, names)
[13:36:08.390]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.390]                   envs[common]]
[13:36:08.390]                 NAMES <- toupper(changed)
[13:36:08.390]                 args <- list()
[13:36:08.390]                 for (kk in seq_along(NAMES)) {
[13:36:08.390]                   name <- changed[[kk]]
[13:36:08.390]                   NAME <- NAMES[[kk]]
[13:36:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.390]                     next
[13:36:08.390]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.390]                 }
[13:36:08.390]                 NAMES <- toupper(added)
[13:36:08.390]                 for (kk in seq_along(NAMES)) {
[13:36:08.390]                   name <- added[[kk]]
[13:36:08.390]                   NAME <- NAMES[[kk]]
[13:36:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.390]                     next
[13:36:08.390]                   args[[name]] <- ""
[13:36:08.390]                 }
[13:36:08.390]                 NAMES <- toupper(removed)
[13:36:08.390]                 for (kk in seq_along(NAMES)) {
[13:36:08.390]                   name <- removed[[kk]]
[13:36:08.390]                   NAME <- NAMES[[kk]]
[13:36:08.390]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.390]                     next
[13:36:08.390]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.390]                 }
[13:36:08.390]                 if (length(args) > 0) 
[13:36:08.390]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.390]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.390]             }
[13:36:08.390]             else {
[13:36:08.390]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.390]             }
[13:36:08.390]             {
[13:36:08.390]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.390]                   0L) {
[13:36:08.390]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.390]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.390]                   base::options(opts)
[13:36:08.390]                 }
[13:36:08.390]                 {
[13:36:08.390]                   {
[13:36:08.390]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:08.390]                     NULL
[13:36:08.390]                   }
[13:36:08.390]                   options(future.plan = NULL)
[13:36:08.390]                   if (is.na(NA_character_)) 
[13:36:08.390]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.390]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.390]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.390]                     .init = FALSE)
[13:36:08.390]                 }
[13:36:08.390]             }
[13:36:08.390]         }
[13:36:08.390]     })
[13:36:08.390]     if (TRUE) {
[13:36:08.390]         base::sink(type = "output", split = FALSE)
[13:36:08.390]         if (TRUE) {
[13:36:08.390]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.390]         }
[13:36:08.390]         else {
[13:36:08.390]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.390]         }
[13:36:08.390]         base::close(...future.stdout)
[13:36:08.390]         ...future.stdout <- NULL
[13:36:08.390]     }
[13:36:08.390]     ...future.result$conditions <- ...future.conditions
[13:36:08.390]     ...future.result$finished <- base::Sys.time()
[13:36:08.390]     ...future.result
[13:36:08.390] }
[13:36:08.393] assign_globals() ...
[13:36:08.393] List of 4
[13:36:08.393]  $ ii   : int 4
[13:36:08.393]  $ n    : int 4
[13:36:08.393]  $ C    : cplx [1:25, 1:25] -0.719+0.031i -0.719+0.092i -0.719+0.153i ...
[13:36:08.393]   ..- attr(*, "region")=List of 2
[13:36:08.393]   .. ..$ xrange: num [1:2] -0.719 0.75
[13:36:08.393]   .. ..$ yrange: num [1:2] 0.0306 1.5
[13:36:08.393]   ..- attr(*, "tile")= int [1:2] 2 2
[13:36:08.393]  $ delay:function (counts)  
[13:36:08.393]   ..- attr(*, "srcref")= 'srcref' int [1:8] 41 12 41 30 12 30 41 41
[13:36:08.393]   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x556982995018> 
[13:36:08.393]  - attr(*, "where")=List of 4
[13:36:08.393]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:08.393]   ..$ n    :<environment: R_EmptyEnv> 
[13:36:08.393]   ..$ C    :<environment: R_EmptyEnv> 
[13:36:08.393]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:08.393]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:08.393]  - attr(*, "resolved")= logi FALSE
[13:36:08.393]  - attr(*, "total_size")= num 14584
[13:36:08.393]  - attr(*, "already-done")= logi TRUE
[13:36:08.402] - copied ‘ii’ to environment
[13:36:08.402] - copied ‘n’ to environment
[13:36:08.402] - copied ‘C’ to environment
[13:36:08.402] - reassign environment for ‘delay’
[13:36:08.402] - copied ‘delay’ to environment
[13:36:08.402] assign_globals() ... done
[13:36:08.403] requestCore(): workers = 2
[13:36:08.403] Poll #1 (0): usedCores() = 2, workers = 2
[13:36:08.414] result() for MulticoreFuture ...
[13:36:08.415] result() for MulticoreFuture ...
[13:36:08.415] result() for MulticoreFuture ... done
[13:36:08.415] signalConditions() ...
[13:36:08.415]  - include = ‘immediateCondition’
[13:36:08.415]  - exclude = 
[13:36:08.416]  - resignal = FALSE
[13:36:08.416]  - Number of conditions: 2
[13:36:08.416] signalConditions() ... done
[13:36:08.416] result() for MulticoreFuture ... done
[13:36:08.416] result() for MulticoreFuture ...
[13:36:08.416] result() for MulticoreFuture ... done
[13:36:08.416] signalConditions() ...
[13:36:08.416]  - include = ‘immediateCondition’
[13:36:08.417]  - exclude = 
[13:36:08.417]  - resignal = FALSE
[13:36:08.417]  - Number of conditions: 2
[13:36:08.417] signalConditions() ... done
[13:36:08.420] MulticoreFuture started
[13:36:08.420] - Launch lazy future ... done
[13:36:08.420] run() for ‘MulticoreFuture’ ... done
[13:36:08.420] - run() ... done
[13:36:08.421] - resolved() ...
[13:36:08.421] plan(): Setting new future strategy stack:
[13:36:08.422] List of future strategies:
[13:36:08.422] 1. sequential:
[13:36:08.422]    - args: function (..., envir = parent.frame())
[13:36:08.422]    - tweaked: FALSE
[13:36:08.422]    - call: NULL
[13:36:08.422] plan(): nbrOfWorkers() = 1
[13:36:08.427] plan(): Setting new future strategy stack:
[13:36:08.427] List of future strategies:
[13:36:08.427] 1. multicore:
[13:36:08.427]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:08.427]    - tweaked: FALSE
[13:36:08.427]    - call: plan(strategy)
[13:36:08.431] - resolved: FALSE
[13:36:08.431] - resolved() ... done
[13:36:08.431] resolved() for ‘MulticoreFuture’ ... done
Plotting tile #2 of 4 ...
[13:36:08.432] result() for MulticoreFuture ...
[13:36:08.432] result() for MulticoreFuture ... done
[13:36:08.432] result() for MulticoreFuture ...
[13:36:08.432] result() for MulticoreFuture ... done
[13:36:08.432] plan(): nbrOfWorkers() = 2
[13:36:08.433] signalConditions() ...
[13:36:08.433]  - include = ‘immediateCondition’
[13:36:08.433]  - exclude = 
[13:36:08.433]  - resignal = FALSE
[13:36:08.433]  - Number of conditions: 2
[13:36:08.433] signalConditions() ... done
[13:36:08.433] Future state: ‘finished’
[13:36:08.433] result() for MulticoreFuture ...
[13:36:08.434] result() for MulticoreFuture ... done
[13:36:08.434] signalConditions() ...
[13:36:08.434]  - include = ‘condition’
[13:36:08.434]  - exclude = ‘immediateCondition’
[13:36:08.434]  - resignal = TRUE
[13:36:08.434]  - Number of conditions: 2
[13:36:08.434]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:36:08.435]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.435] signalConditions() ... done
Plotting tile #3 of 4 ...
[13:36:08.436] result() for MulticoreFuture ...
[13:36:08.437] result() for MulticoreFuture ...
[13:36:08.438] result() for MulticoreFuture ... done
[13:36:08.438] signalConditions() ...
[13:36:08.438]  - include = ‘immediateCondition’
[13:36:08.438]  - exclude = 
[13:36:08.438]  - resignal = FALSE
[13:36:08.438]  - Number of conditions: 2
[13:36:08.438] signalConditions() ... done
[13:36:08.438] result() for MulticoreFuture ... done
[13:36:08.439] result() for MulticoreFuture ...
[13:36:08.439] result() for MulticoreFuture ... done
[13:36:08.439] signalConditions() ...
[13:36:08.439]  - include = ‘immediateCondition’
[13:36:08.439]  - exclude = 
[13:36:08.439]  - resignal = FALSE
[13:36:08.439]  - Number of conditions: 2
[13:36:08.439] signalConditions() ... done
[13:36:08.440] Future state: ‘finished’
[13:36:08.440] result() for MulticoreFuture ...
[13:36:08.440] result() for MulticoreFuture ... done
[13:36:08.440] signalConditions() ...
[13:36:08.440]  - include = ‘condition’
[13:36:08.440]  - exclude = ‘immediateCondition’
[13:36:08.440]  - resignal = TRUE
[13:36:08.441]  - Number of conditions: 2
[13:36:08.441]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:36:08.441]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.441] signalConditions() ... done
Plotting tile #4 of 4 ...
[13:36:08.442] result() for MulticoreFuture ...
[13:36:08.443] result() for MulticoreFuture ...
[13:36:08.443] result() for MulticoreFuture ... done
[13:36:08.443] signalConditions() ...
[13:36:08.443]  - include = ‘immediateCondition’
[13:36:08.443]  - exclude = 
[13:36:08.444]  - resignal = FALSE
[13:36:08.444]  - Number of conditions: 2
[13:36:08.444] signalConditions() ... done
[13:36:08.444] result() for MulticoreFuture ... done
[13:36:08.444] result() for MulticoreFuture ...
[13:36:08.445] result() for MulticoreFuture ... done
[13:36:08.445] signalConditions() ...
[13:36:08.445]  - include = ‘immediateCondition’
[13:36:08.445]  - exclude = 
[13:36:08.445]  - resignal = FALSE
[13:36:08.445]  - Number of conditions: 2
[13:36:08.445] signalConditions() ... done
[13:36:08.445] Future state: ‘finished’
[13:36:08.445] result() for MulticoreFuture ...
[13:36:08.446] result() for MulticoreFuture ... done
[13:36:08.446] signalConditions() ...
[13:36:08.446]  - include = ‘condition’
[13:36:08.446]  - exclude = ‘immediateCondition’
[13:36:08.446]  - resignal = TRUE
[13:36:08.446]  - Number of conditions: 2
[13:36:08.446]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:36:08.446]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:08.447] signalConditions() ... done

> close.screen()
[1] 1 2 3 4 5 6 7 8

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multicore') ... DONE
- plan('multisession') ...
[13:36:08.448] plan(): Setting new future strategy stack:
[13:36:08.448] List of future strategies:
[13:36:08.448] 1. multisession:
[13:36:08.448]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:08.448]    - tweaked: FALSE
[13:36:08.448]    - call: plan(strategy)
[13:36:08.449] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:08.449] multisession:
[13:36:08.449] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:08.449] - tweaked: FALSE
[13:36:08.449] - call: plan(strategy)
[13:36:08.456] getGlobalsAndPackages() ...
[13:36:08.456] Not searching for globals
[13:36:08.456] - globals: [0] <none>
[13:36:08.456] getGlobalsAndPackages() ... DONE
[13:36:08.457] [local output] makeClusterPSOCK() ...
[13:36:08.518] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:08.519] [local output] Base port: 11903
[13:36:08.519] [local output] Getting setup options for 2 cluster nodes ...
[13:36:08.519] [local output]  - Node 1 of 2 ...
[13:36:08.520] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:08.520] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpOqwNI3/worker.rank=1.parallelly.parent=80486.13a6652a35c81.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpOqwNI3/worker.rank=1.parallelly.parent=80486.13a6652a35c81.pid")'’
[13:36:08.711] - Possible to infer worker's PID: TRUE
[13:36:08.711] [local output] Rscript port: 11903

[13:36:08.712] [local output]  - Node 2 of 2 ...
[13:36:08.712] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:08.713] [local output] Rscript port: 11903

[13:36:08.713] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:08.713] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:08.714] [local output] Setting up PSOCK nodes in parallel
[13:36:08.714] List of 36
[13:36:08.714]  $ worker          : chr "localhost"
[13:36:08.714]   ..- attr(*, "localhost")= logi TRUE
[13:36:08.714]  $ master          : chr "localhost"
[13:36:08.714]  $ port            : int 11903
[13:36:08.714]  $ connectTimeout  : num 120
[13:36:08.714]  $ timeout         : num 2592000
[13:36:08.714]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:08.714]  $ homogeneous     : logi TRUE
[13:36:08.714]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:08.714]  $ rscript_envs    : NULL
[13:36:08.714]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:08.714]  $ rscript_startup : NULL
[13:36:08.714]  $ rscript_sh      : chr "sh"
[13:36:08.714]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:08.714]  $ methods         : logi TRUE
[13:36:08.714]  $ socketOptions   : chr "no-delay"
[13:36:08.714]  $ useXDR          : logi FALSE
[13:36:08.714]  $ outfile         : chr "/dev/null"
[13:36:08.714]  $ renice          : int NA
[13:36:08.714]  $ rshcmd          : NULL
[13:36:08.714]  $ user            : chr(0) 
[13:36:08.714]  $ revtunnel       : logi FALSE
[13:36:08.714]  $ rshlogfile      : NULL
[13:36:08.714]  $ rshopts         : chr(0) 
[13:36:08.714]  $ rank            : int 1
[13:36:08.714]  $ manual          : logi FALSE
[13:36:08.714]  $ dryrun          : logi FALSE
[13:36:08.714]  $ quiet           : logi FALSE
[13:36:08.714]  $ setup_strategy  : chr "parallel"
[13:36:08.714]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:08.714]  $ pidfile         : chr "/tmp/RtmpOqwNI3/worker.rank=1.parallelly.parent=80486.13a6652a35c81.pid"
[13:36:08.714]  $ rshcmd_label    : NULL
[13:36:08.714]  $ rsh_call        : NULL
[13:36:08.714]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:08.714]  $ localMachine    : logi TRUE
[13:36:08.714]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:08.714]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:08.714]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:08.714]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:08.714]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:08.714]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:08.714]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:08.714]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:08.714]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:08.714]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:08.714]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:08.714]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:08.714]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:08.714]  $ arguments       :List of 28
[13:36:08.714]   ..$ worker          : chr "localhost"
[13:36:08.714]   ..$ master          : NULL
[13:36:08.714]   ..$ port            : int 11903
[13:36:08.714]   ..$ connectTimeout  : num 120
[13:36:08.714]   ..$ timeout         : num 2592000
[13:36:08.714]   ..$ rscript         : NULL
[13:36:08.714]   ..$ homogeneous     : NULL
[13:36:08.714]   ..$ rscript_args    : NULL
[13:36:08.714]   ..$ rscript_envs    : NULL
[13:36:08.714]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:08.714]   ..$ rscript_startup : NULL
[13:36:08.714]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:08.714]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:08.714]   ..$ methods         : logi TRUE
[13:36:08.714]   ..$ socketOptions   : chr "no-delay"
[13:36:08.714]   ..$ useXDR          : logi FALSE
[13:36:08.714]   ..$ outfile         : chr "/dev/null"
[13:36:08.714]   ..$ renice          : int NA
[13:36:08.714]   ..$ rshcmd          : NULL
[13:36:08.714]   ..$ user            : NULL
[13:36:08.714]   ..$ revtunnel       : logi NA
[13:36:08.714]   ..$ rshlogfile      : NULL
[13:36:08.714]   ..$ rshopts         : NULL
[13:36:08.714]   ..$ rank            : int 1
[13:36:08.714]   ..$ manual          : logi FALSE
[13:36:08.714]   ..$ dryrun          : logi FALSE
[13:36:08.714]   ..$ quiet           : logi FALSE
[13:36:08.714]   ..$ setup_strategy  : chr "parallel"
[13:36:08.714]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:08.731] [local output] System call to launch all workers:
[13:36:08.731] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpOqwNI3/worker.rank=1.parallelly.parent=80486.13a6652a35c81.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11903 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:08.731] [local output] Starting PSOCK main server
[13:36:08.736] [local output] Workers launched
[13:36:08.736] [local output] Waiting for workers to connect back
[13:36:08.736]  - [local output] 0 workers out of 2 ready
[13:36:08.979]  - [local output] 0 workers out of 2 ready
[13:36:08.980]  - [local output] 1 workers out of 2 ready
[13:36:08.980]  - [local output] 2 workers out of 2 ready
[13:36:08.980] [local output] Launching of workers completed
[13:36:08.980] [local output] Collecting session information from workers
[13:36:08.981] [local output]  - Worker #1 of 2
[13:36:08.982] [local output]  - Worker #2 of 2
[13:36:08.982] [local output] makeClusterPSOCK() ... done
[13:36:08.993] Packages needed by the future expression (n = 0): <none>
[13:36:08.993] Packages needed by future strategies (n = 0): <none>
[13:36:08.994] {
[13:36:08.994]     {
[13:36:08.994]         {
[13:36:08.994]             ...future.startTime <- base::Sys.time()
[13:36:08.994]             {
[13:36:08.994]                 {
[13:36:08.994]                   {
[13:36:08.994]                     {
[13:36:08.994]                       base::local({
[13:36:08.994]                         has_future <- base::requireNamespace("future", 
[13:36:08.994]                           quietly = TRUE)
[13:36:08.994]                         if (has_future) {
[13:36:08.994]                           ns <- base::getNamespace("future")
[13:36:08.994]                           version <- ns[[".package"]][["version"]]
[13:36:08.994]                           if (is.null(version)) 
[13:36:08.994]                             version <- utils::packageVersion("future")
[13:36:08.994]                         }
[13:36:08.994]                         else {
[13:36:08.994]                           version <- NULL
[13:36:08.994]                         }
[13:36:08.994]                         if (!has_future || version < "1.8.0") {
[13:36:08.994]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:08.994]                             "", base::R.version$version.string), 
[13:36:08.994]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:08.994]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:08.994]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:08.994]                               "release", "version")], collapse = " "), 
[13:36:08.994]                             hostname = base::Sys.info()[["nodename"]])
[13:36:08.994]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:08.994]                             info)
[13:36:08.994]                           info <- base::paste(info, collapse = "; ")
[13:36:08.994]                           if (!has_future) {
[13:36:08.994]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:08.994]                               info)
[13:36:08.994]                           }
[13:36:08.994]                           else {
[13:36:08.994]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:08.994]                               info, version)
[13:36:08.994]                           }
[13:36:08.994]                           base::stop(msg)
[13:36:08.994]                         }
[13:36:08.994]                       })
[13:36:08.994]                     }
[13:36:08.994]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:08.994]                     base::options(mc.cores = 1L)
[13:36:08.994]                   }
[13:36:08.994]                   ...future.strategy.old <- future::plan("list")
[13:36:08.994]                   options(future.plan = NULL)
[13:36:08.994]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.994]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:08.994]                 }
[13:36:08.994]                 ...future.workdir <- getwd()
[13:36:08.994]             }
[13:36:08.994]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:08.994]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:08.994]         }
[13:36:08.994]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:08.994]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:08.994]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:08.994]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:08.994]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:08.994]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:08.994]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:08.994]             base::names(...future.oldOptions))
[13:36:08.994]     }
[13:36:08.994]     if (FALSE) {
[13:36:08.994]     }
[13:36:08.994]     else {
[13:36:08.994]         if (TRUE) {
[13:36:08.994]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:08.994]                 open = "w")
[13:36:08.994]         }
[13:36:08.994]         else {
[13:36:08.994]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:08.994]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:08.994]         }
[13:36:08.994]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:08.994]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:08.994]             base::sink(type = "output", split = FALSE)
[13:36:08.994]             base::close(...future.stdout)
[13:36:08.994]         }, add = TRUE)
[13:36:08.994]     }
[13:36:08.994]     ...future.frame <- base::sys.nframe()
[13:36:08.994]     ...future.conditions <- base::list()
[13:36:08.994]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:08.994]     if (FALSE) {
[13:36:08.994]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:08.994]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:08.994]     }
[13:36:08.994]     ...future.result <- base::tryCatch({
[13:36:08.994]         base::withCallingHandlers({
[13:36:08.994]             ...future.value <- base::withVisible(base::local({
[13:36:08.994]                 ...future.makeSendCondition <- base::local({
[13:36:08.994]                   sendCondition <- NULL
[13:36:08.994]                   function(frame = 1L) {
[13:36:08.994]                     if (is.function(sendCondition)) 
[13:36:08.994]                       return(sendCondition)
[13:36:08.994]                     ns <- getNamespace("parallel")
[13:36:08.994]                     if (exists("sendData", mode = "function", 
[13:36:08.994]                       envir = ns)) {
[13:36:08.994]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:08.994]                         envir = ns)
[13:36:08.994]                       envir <- sys.frame(frame)
[13:36:08.994]                       master <- NULL
[13:36:08.994]                       while (!identical(envir, .GlobalEnv) && 
[13:36:08.994]                         !identical(envir, emptyenv())) {
[13:36:08.994]                         if (exists("master", mode = "list", envir = envir, 
[13:36:08.994]                           inherits = FALSE)) {
[13:36:08.994]                           master <- get("master", mode = "list", 
[13:36:08.994]                             envir = envir, inherits = FALSE)
[13:36:08.994]                           if (inherits(master, c("SOCKnode", 
[13:36:08.994]                             "SOCK0node"))) {
[13:36:08.994]                             sendCondition <<- function(cond) {
[13:36:08.994]                               data <- list(type = "VALUE", value = cond, 
[13:36:08.994]                                 success = TRUE)
[13:36:08.994]                               parallel_sendData(master, data)
[13:36:08.994]                             }
[13:36:08.994]                             return(sendCondition)
[13:36:08.994]                           }
[13:36:08.994]                         }
[13:36:08.994]                         frame <- frame + 1L
[13:36:08.994]                         envir <- sys.frame(frame)
[13:36:08.994]                       }
[13:36:08.994]                     }
[13:36:08.994]                     sendCondition <<- function(cond) NULL
[13:36:08.994]                   }
[13:36:08.994]                 })
[13:36:08.994]                 withCallingHandlers({
[13:36:08.994]                   NA
[13:36:08.994]                 }, immediateCondition = function(cond) {
[13:36:08.994]                   sendCondition <- ...future.makeSendCondition()
[13:36:08.994]                   sendCondition(cond)
[13:36:08.994]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.994]                   {
[13:36:08.994]                     inherits <- base::inherits
[13:36:08.994]                     invokeRestart <- base::invokeRestart
[13:36:08.994]                     is.null <- base::is.null
[13:36:08.994]                     muffled <- FALSE
[13:36:08.994]                     if (inherits(cond, "message")) {
[13:36:08.994]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:08.994]                       if (muffled) 
[13:36:08.994]                         invokeRestart("muffleMessage")
[13:36:08.994]                     }
[13:36:08.994]                     else if (inherits(cond, "warning")) {
[13:36:08.994]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:08.994]                       if (muffled) 
[13:36:08.994]                         invokeRestart("muffleWarning")
[13:36:08.994]                     }
[13:36:08.994]                     else if (inherits(cond, "condition")) {
[13:36:08.994]                       if (!is.null(pattern)) {
[13:36:08.994]                         computeRestarts <- base::computeRestarts
[13:36:08.994]                         grepl <- base::grepl
[13:36:08.994]                         restarts <- computeRestarts(cond)
[13:36:08.994]                         for (restart in restarts) {
[13:36:08.994]                           name <- restart$name
[13:36:08.994]                           if (is.null(name)) 
[13:36:08.994]                             next
[13:36:08.994]                           if (!grepl(pattern, name)) 
[13:36:08.994]                             next
[13:36:08.994]                           invokeRestart(restart)
[13:36:08.994]                           muffled <- TRUE
[13:36:08.994]                           break
[13:36:08.994]                         }
[13:36:08.994]                       }
[13:36:08.994]                     }
[13:36:08.994]                     invisible(muffled)
[13:36:08.994]                   }
[13:36:08.994]                   muffleCondition(cond)
[13:36:08.994]                 })
[13:36:08.994]             }))
[13:36:08.994]             future::FutureResult(value = ...future.value$value, 
[13:36:08.994]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.994]                   ...future.rng), globalenv = if (FALSE) 
[13:36:08.994]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:08.994]                     ...future.globalenv.names))
[13:36:08.994]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:08.994]         }, condition = base::local({
[13:36:08.994]             c <- base::c
[13:36:08.994]             inherits <- base::inherits
[13:36:08.994]             invokeRestart <- base::invokeRestart
[13:36:08.994]             length <- base::length
[13:36:08.994]             list <- base::list
[13:36:08.994]             seq.int <- base::seq.int
[13:36:08.994]             signalCondition <- base::signalCondition
[13:36:08.994]             sys.calls <- base::sys.calls
[13:36:08.994]             `[[` <- base::`[[`
[13:36:08.994]             `+` <- base::`+`
[13:36:08.994]             `<<-` <- base::`<<-`
[13:36:08.994]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:08.994]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:08.994]                   3L)]
[13:36:08.994]             }
[13:36:08.994]             function(cond) {
[13:36:08.994]                 is_error <- inherits(cond, "error")
[13:36:08.994]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:08.994]                   NULL)
[13:36:08.994]                 if (is_error) {
[13:36:08.994]                   sessionInformation <- function() {
[13:36:08.994]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:08.994]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:08.994]                       search = base::search(), system = base::Sys.info())
[13:36:08.994]                   }
[13:36:08.994]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.994]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:08.994]                     cond$call), session = sessionInformation(), 
[13:36:08.994]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:08.994]                   signalCondition(cond)
[13:36:08.994]                 }
[13:36:08.994]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:08.994]                 "immediateCondition"))) {
[13:36:08.994]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:08.994]                   ...future.conditions[[length(...future.conditions) + 
[13:36:08.994]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:08.994]                   if (TRUE && !signal) {
[13:36:08.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.994]                     {
[13:36:08.994]                       inherits <- base::inherits
[13:36:08.994]                       invokeRestart <- base::invokeRestart
[13:36:08.994]                       is.null <- base::is.null
[13:36:08.994]                       muffled <- FALSE
[13:36:08.994]                       if (inherits(cond, "message")) {
[13:36:08.994]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.994]                         if (muffled) 
[13:36:08.994]                           invokeRestart("muffleMessage")
[13:36:08.994]                       }
[13:36:08.994]                       else if (inherits(cond, "warning")) {
[13:36:08.994]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.994]                         if (muffled) 
[13:36:08.994]                           invokeRestart("muffleWarning")
[13:36:08.994]                       }
[13:36:08.994]                       else if (inherits(cond, "condition")) {
[13:36:08.994]                         if (!is.null(pattern)) {
[13:36:08.994]                           computeRestarts <- base::computeRestarts
[13:36:08.994]                           grepl <- base::grepl
[13:36:08.994]                           restarts <- computeRestarts(cond)
[13:36:08.994]                           for (restart in restarts) {
[13:36:08.994]                             name <- restart$name
[13:36:08.994]                             if (is.null(name)) 
[13:36:08.994]                               next
[13:36:08.994]                             if (!grepl(pattern, name)) 
[13:36:08.994]                               next
[13:36:08.994]                             invokeRestart(restart)
[13:36:08.994]                             muffled <- TRUE
[13:36:08.994]                             break
[13:36:08.994]                           }
[13:36:08.994]                         }
[13:36:08.994]                       }
[13:36:08.994]                       invisible(muffled)
[13:36:08.994]                     }
[13:36:08.994]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.994]                   }
[13:36:08.994]                 }
[13:36:08.994]                 else {
[13:36:08.994]                   if (TRUE) {
[13:36:08.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:08.994]                     {
[13:36:08.994]                       inherits <- base::inherits
[13:36:08.994]                       invokeRestart <- base::invokeRestart
[13:36:08.994]                       is.null <- base::is.null
[13:36:08.994]                       muffled <- FALSE
[13:36:08.994]                       if (inherits(cond, "message")) {
[13:36:08.994]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:08.994]                         if (muffled) 
[13:36:08.994]                           invokeRestart("muffleMessage")
[13:36:08.994]                       }
[13:36:08.994]                       else if (inherits(cond, "warning")) {
[13:36:08.994]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:08.994]                         if (muffled) 
[13:36:08.994]                           invokeRestart("muffleWarning")
[13:36:08.994]                       }
[13:36:08.994]                       else if (inherits(cond, "condition")) {
[13:36:08.994]                         if (!is.null(pattern)) {
[13:36:08.994]                           computeRestarts <- base::computeRestarts
[13:36:08.994]                           grepl <- base::grepl
[13:36:08.994]                           restarts <- computeRestarts(cond)
[13:36:08.994]                           for (restart in restarts) {
[13:36:08.994]                             name <- restart$name
[13:36:08.994]                             if (is.null(name)) 
[13:36:08.994]                               next
[13:36:08.994]                             if (!grepl(pattern, name)) 
[13:36:08.994]                               next
[13:36:08.994]                             invokeRestart(restart)
[13:36:08.994]                             muffled <- TRUE
[13:36:08.994]                             break
[13:36:08.994]                           }
[13:36:08.994]                         }
[13:36:08.994]                       }
[13:36:08.994]                       invisible(muffled)
[13:36:08.994]                     }
[13:36:08.994]                     muffleCondition(cond, pattern = "^muffle")
[13:36:08.994]                   }
[13:36:08.994]                 }
[13:36:08.994]             }
[13:36:08.994]         }))
[13:36:08.994]     }, error = function(ex) {
[13:36:08.994]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:08.994]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:08.994]                 ...future.rng), started = ...future.startTime, 
[13:36:08.994]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:08.994]             version = "1.8"), class = "FutureResult")
[13:36:08.994]     }, finally = {
[13:36:08.994]         if (!identical(...future.workdir, getwd())) 
[13:36:08.994]             setwd(...future.workdir)
[13:36:08.994]         {
[13:36:08.994]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:08.994]                 ...future.oldOptions$nwarnings <- NULL
[13:36:08.994]             }
[13:36:08.994]             base::options(...future.oldOptions)
[13:36:08.994]             if (.Platform$OS.type == "windows") {
[13:36:08.994]                 old_names <- names(...future.oldEnvVars)
[13:36:08.994]                 envs <- base::Sys.getenv()
[13:36:08.994]                 names <- names(envs)
[13:36:08.994]                 common <- intersect(names, old_names)
[13:36:08.994]                 added <- setdiff(names, old_names)
[13:36:08.994]                 removed <- setdiff(old_names, names)
[13:36:08.994]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:08.994]                   envs[common]]
[13:36:08.994]                 NAMES <- toupper(changed)
[13:36:08.994]                 args <- list()
[13:36:08.994]                 for (kk in seq_along(NAMES)) {
[13:36:08.994]                   name <- changed[[kk]]
[13:36:08.994]                   NAME <- NAMES[[kk]]
[13:36:08.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.994]                     next
[13:36:08.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.994]                 }
[13:36:08.994]                 NAMES <- toupper(added)
[13:36:08.994]                 for (kk in seq_along(NAMES)) {
[13:36:08.994]                   name <- added[[kk]]
[13:36:08.994]                   NAME <- NAMES[[kk]]
[13:36:08.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.994]                     next
[13:36:08.994]                   args[[name]] <- ""
[13:36:08.994]                 }
[13:36:08.994]                 NAMES <- toupper(removed)
[13:36:08.994]                 for (kk in seq_along(NAMES)) {
[13:36:08.994]                   name <- removed[[kk]]
[13:36:08.994]                   NAME <- NAMES[[kk]]
[13:36:08.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:08.994]                     next
[13:36:08.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:08.994]                 }
[13:36:08.994]                 if (length(args) > 0) 
[13:36:08.994]                   base::do.call(base::Sys.setenv, args = args)
[13:36:08.994]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:08.994]             }
[13:36:08.994]             else {
[13:36:08.994]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:08.994]             }
[13:36:08.994]             {
[13:36:08.994]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:08.994]                   0L) {
[13:36:08.994]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:08.994]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:08.994]                   base::options(opts)
[13:36:08.994]                 }
[13:36:08.994]                 {
[13:36:08.994]                   {
[13:36:08.994]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:08.994]                     NULL
[13:36:08.994]                   }
[13:36:08.994]                   options(future.plan = NULL)
[13:36:08.994]                   if (is.na(NA_character_)) 
[13:36:08.994]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:08.994]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:08.994]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:08.994]                     .init = FALSE)
[13:36:08.994]                 }
[13:36:08.994]             }
[13:36:08.994]         }
[13:36:08.994]     })
[13:36:08.994]     if (TRUE) {
[13:36:08.994]         base::sink(type = "output", split = FALSE)
[13:36:08.994]         if (TRUE) {
[13:36:08.994]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:08.994]         }
[13:36:08.994]         else {
[13:36:08.994]             ...future.result["stdout"] <- base::list(NULL)
[13:36:08.994]         }
[13:36:08.994]         base::close(...future.stdout)
[13:36:08.994]         ...future.stdout <- NULL
[13:36:08.994]     }
[13:36:08.994]     ...future.result$conditions <- ...future.conditions
[13:36:08.994]     ...future.result$finished <- base::Sys.time()
[13:36:08.994]     ...future.result
[13:36:08.994] }
[13:36:09.046] MultisessionFuture started
[13:36:09.046] result() for ClusterFuture ...
[13:36:09.047] receiveMessageFromWorker() for ClusterFuture ...
[13:36:09.047] - Validating connection of MultisessionFuture
[13:36:09.079] - received message: FutureResult
[13:36:09.079] - Received FutureResult
[13:36:09.079] - Erased future from FutureRegistry
[13:36:09.079] result() for ClusterFuture ...
[13:36:09.079] - result already collected: FutureResult
[13:36:09.079] result() for ClusterFuture ... done
[13:36:09.080] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:09.080] result() for ClusterFuture ... done
[13:36:09.080] result() for ClusterFuture ...
[13:36:09.080] - result already collected: FutureResult
[13:36:09.080] result() for ClusterFuture ... done
[13:36:09.080] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:09.084] plan(): nbrOfWorkers() = 2


	demo(mandelbrot)
	---- ~~~~~~~~~~

> library("future")

> library("graphics")

> plot_what_is_done <- function(counts) {
+   for (kk in seq_along(counts)) {
+     f <- counts[[kk]]
+ 
+     ## Already plotted?
+     if (!inherits(f, "Future")) next
+ 
+     ## Not resolved?
+     if (!resolved(f)) next
+ 
+     message(sprintf("Plotting tile #%d of %d ...", kk, n))
+     counts[[kk]] <- value(f)
+     screen(kk)
+     plot(counts[[kk]])
+   }
+ 
+   counts
+ }

> ## Options
> region <- getOption("future.demo.mandelbrot.region", 1L)

> if (!is.list(region)) {
+   if (region == 1L) {
+     region <- list(xmid = -0.75, ymid = 0.0, side = 3.0)
+   } else if (region == 2L) {
+     region <- list(xmid = 0.283, ymid = -0.0095, side = 0.00026)
+   } else if (region == 3L) {
+     region <- list(xmid = 0.282989, ymid = -0.01, side = 3e-8)
+   }
+ }

> nrow <- getOption("future.demo.mandelbrot.nrow", 3L)

> resolution <- getOption("future.demo.mandelbrot.resolution", 400L)

> delay <- getOption("future.demo.mandelbrot.delay", interactive())

> if (isTRUE(delay)) {
+   delay <- function(counts) Sys.sleep(1.0)
+ } else if (!is.function(delay)) {
+   delay <- function(counts) {}
+ }

> ## Generate Mandelbrot tiles to be computed
> Cs <- mandelbrot_tiles(xmid = region$xmid, ymid = region$ymid,
+                        side = region$side, nrow = nrow,
+                        resolution = resolution)

> if (interactive()) {
+   dev.new()
+   plot.new()
+   split.screen(dim(Cs))
+   for (ii in seq_along(Cs)) {
+     screen(ii)
+     par(mar = c(0, 0, 0, 0))
+     text(x = 1 / 2, y = 1 / 2, sprintf("Future #%d\nunresolved", ii), cex = 2)
+   }
+ } else {
+   split.screen(dim(Cs))
+ }
[1]  9 10 11 12

> ## Create all Mandelbrot tiles via lazy futures
> n <- length(Cs)

> message(sprintf("Creating %d Mandelbrot tiles:", n), appendLF = FALSE)
Creating 4 Mandelbrot tiles:
> counts <- lapply(seq_along(Cs), FUN=function(ii) {
+   message(" ", ii, appendLF = FALSE)
+   C <- Cs[[ii]]
+   future({
+     message(sprintf("Calculating tile #%d of %d ...", ii, n), appendLF = FALSE)
+     fit <- mandelbrot(C)
+ 
+     ## Emulate slowness
+     delay(fit)
+ 
+     message(" done")
+     fit
+   }, lazy = TRUE)
+ })
 1[13:36:09.088] getGlobalsAndPackages() ...
[13:36:09.088] Searching for globals...
[13:36:09.092] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:09.092] Searching for globals ... DONE
[13:36:09.092] Resolving globals: FALSE
[13:36:09.093] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:09.093] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:09.093] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:09.093] - packages: [1] ‘future’
[13:36:09.093] getGlobalsAndPackages() ... DONE
 2[13:36:09.097] getGlobalsAndPackages() ...
[13:36:09.097] Searching for globals...
[13:36:09.101] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:09.101] Searching for globals ... DONE
[13:36:09.101] Resolving globals: FALSE
[13:36:09.101] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:09.102] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:09.102] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:09.102] - packages: [1] ‘future’
[13:36:09.102] getGlobalsAndPackages() ... DONE
 3[13:36:09.103] getGlobalsAndPackages() ...
[13:36:09.103] Searching for globals...
[13:36:09.106] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:09.106] Searching for globals ... DONE
[13:36:09.106] Resolving globals: FALSE
[13:36:09.107] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:09.107] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:09.107] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:09.107] - packages: [1] ‘future’
[13:36:09.107] getGlobalsAndPackages() ... DONE
 4[13:36:09.108] getGlobalsAndPackages() ...
[13:36:09.108] Searching for globals...
[13:36:09.111] - globals found: [9] ‘{’, ‘message’, ‘sprintf’, ‘ii’, ‘n’, ‘<-’, ‘mandelbrot’, ‘C’, ‘delay’
[13:36:09.111] Searching for globals ... DONE
[13:36:09.111] Resolving globals: FALSE
[13:36:09.112] The total size of the 4 globals is 14.24 KiB (14584 bytes)
[13:36:09.112] The total size of the 4 globals exported for future expression (‘{; message(sprintf("Calculating tile #%d of %d ...", ii, n),; appendLF = FALSE); fit <- mandelbrot(C); delay(fit); message(" done"); fit; }’) is 14.24 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). The three largest globals are ‘C’ (10.72 KiB of class ‘complex’), ‘delay’ (3.41 KiB of class ‘function’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:09.112] - globals: [4] ‘ii’, ‘n’, ‘C’, ‘delay’
[13:36:09.112] - packages: [1] ‘future’
[13:36:09.113] getGlobalsAndPackages() ... DONE

> message(".")
.

> ## Calculate and plot tiles
> repeat {
+   counts <- plot_what_is_done(counts)
+   if (!any(sapply(counts, FUN = inherits, "Future"))) break
+ }
[13:36:09.123] resolved() for ‘Future’ ...
[13:36:09.124] - state: ‘created’
[13:36:09.124] - run: TRUE
[13:36:09.124] - run() ...
[13:36:09.124] run() for ‘Future’ ...
[13:36:09.124] - state: ‘created’
[13:36:09.124] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:09.138] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:09.138] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:09.138]   - Field: ‘node’
[13:36:09.138]   - Field: ‘label’
[13:36:09.138]   - Field: ‘local’
[13:36:09.138]   - Field: ‘owner’
[13:36:09.138]   - Field: ‘envir’
[13:36:09.139]   - Field: ‘workers’
[13:36:09.139]   - Field: ‘packages’
[13:36:09.139]   - Field: ‘gc’
[13:36:09.139]   - Field: ‘conditions’
[13:36:09.139]   - Field: ‘persistent’
[13:36:09.139]   - Field: ‘expr’
[13:36:09.139]   - Field: ‘uuid’
[13:36:09.139]   - Field: ‘seed’
[13:36:09.139]   - Field: ‘version’
[13:36:09.139]   - Field: ‘result’
[13:36:09.139]   - Field: ‘asynchronous’
[13:36:09.140]   - Field: ‘calls’
[13:36:09.140]   - Field: ‘globals’
[13:36:09.140]   - Field: ‘stdout’
[13:36:09.140]   - Field: ‘earlySignal’
[13:36:09.140]   - Field: ‘lazy’
[13:36:09.140]   - Field: ‘state’
[13:36:09.140] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:09.140] - Launch lazy future ...
[13:36:09.140] Packages needed by the future expression (n = 1): ‘future’
[13:36:09.141] Packages needed by future strategies (n = 0): <none>
[13:36:09.141] {
[13:36:09.141]     {
[13:36:09.141]         {
[13:36:09.141]             ...future.startTime <- base::Sys.time()
[13:36:09.141]             {
[13:36:09.141]                 {
[13:36:09.141]                   {
[13:36:09.141]                     {
[13:36:09.141]                       {
[13:36:09.141]                         base::local({
[13:36:09.141]                           has_future <- base::requireNamespace("future", 
[13:36:09.141]                             quietly = TRUE)
[13:36:09.141]                           if (has_future) {
[13:36:09.141]                             ns <- base::getNamespace("future")
[13:36:09.141]                             version <- ns[[".package"]][["version"]]
[13:36:09.141]                             if (is.null(version)) 
[13:36:09.141]                               version <- utils::packageVersion("future")
[13:36:09.141]                           }
[13:36:09.141]                           else {
[13:36:09.141]                             version <- NULL
[13:36:09.141]                           }
[13:36:09.141]                           if (!has_future || version < "1.8.0") {
[13:36:09.141]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:09.141]                               "", base::R.version$version.string), 
[13:36:09.141]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:09.141]                                 base::R.version$platform, 8 * 
[13:36:09.141]                                   base::.Machine$sizeof.pointer), 
[13:36:09.141]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:09.141]                                 "release", "version")], collapse = " "), 
[13:36:09.141]                               hostname = base::Sys.info()[["nodename"]])
[13:36:09.141]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:09.141]                               info)
[13:36:09.141]                             info <- base::paste(info, collapse = "; ")
[13:36:09.141]                             if (!has_future) {
[13:36:09.141]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:09.141]                                 info)
[13:36:09.141]                             }
[13:36:09.141]                             else {
[13:36:09.141]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:09.141]                                 info, version)
[13:36:09.141]                             }
[13:36:09.141]                             base::stop(msg)
[13:36:09.141]                           }
[13:36:09.141]                         })
[13:36:09.141]                       }
[13:36:09.141]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:09.141]                       base::options(mc.cores = 1L)
[13:36:09.141]                     }
[13:36:09.141]                     base::local({
[13:36:09.141]                       for (pkg in "future") {
[13:36:09.141]                         base::loadNamespace(pkg)
[13:36:09.141]                         base::library(pkg, character.only = TRUE)
[13:36:09.141]                       }
[13:36:09.141]                     })
[13:36:09.141]                   }
[13:36:09.141]                   ...future.strategy.old <- future::plan("list")
[13:36:09.141]                   options(future.plan = NULL)
[13:36:09.141]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.141]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:09.141]                 }
[13:36:09.141]                 ...future.workdir <- getwd()
[13:36:09.141]             }
[13:36:09.141]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:09.141]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:09.141]         }
[13:36:09.141]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:09.141]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:09.141]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:09.141]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:09.141]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:09.141]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:09.141]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:09.141]             base::names(...future.oldOptions))
[13:36:09.141]     }
[13:36:09.141]     if (FALSE) {
[13:36:09.141]     }
[13:36:09.141]     else {
[13:36:09.141]         if (TRUE) {
[13:36:09.141]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:09.141]                 open = "w")
[13:36:09.141]         }
[13:36:09.141]         else {
[13:36:09.141]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:09.141]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:09.141]         }
[13:36:09.141]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:09.141]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:09.141]             base::sink(type = "output", split = FALSE)
[13:36:09.141]             base::close(...future.stdout)
[13:36:09.141]         }, add = TRUE)
[13:36:09.141]     }
[13:36:09.141]     ...future.frame <- base::sys.nframe()
[13:36:09.141]     ...future.conditions <- base::list()
[13:36:09.141]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:09.141]     if (FALSE) {
[13:36:09.141]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:09.141]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:09.141]     }
[13:36:09.141]     ...future.result <- base::tryCatch({
[13:36:09.141]         base::withCallingHandlers({
[13:36:09.141]             ...future.value <- base::withVisible(base::local({
[13:36:09.141]                 ...future.makeSendCondition <- base::local({
[13:36:09.141]                   sendCondition <- NULL
[13:36:09.141]                   function(frame = 1L) {
[13:36:09.141]                     if (is.function(sendCondition)) 
[13:36:09.141]                       return(sendCondition)
[13:36:09.141]                     ns <- getNamespace("parallel")
[13:36:09.141]                     if (exists("sendData", mode = "function", 
[13:36:09.141]                       envir = ns)) {
[13:36:09.141]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:09.141]                         envir = ns)
[13:36:09.141]                       envir <- sys.frame(frame)
[13:36:09.141]                       master <- NULL
[13:36:09.141]                       while (!identical(envir, .GlobalEnv) && 
[13:36:09.141]                         !identical(envir, emptyenv())) {
[13:36:09.141]                         if (exists("master", mode = "list", envir = envir, 
[13:36:09.141]                           inherits = FALSE)) {
[13:36:09.141]                           master <- get("master", mode = "list", 
[13:36:09.141]                             envir = envir, inherits = FALSE)
[13:36:09.141]                           if (inherits(master, c("SOCKnode", 
[13:36:09.141]                             "SOCK0node"))) {
[13:36:09.141]                             sendCondition <<- function(cond) {
[13:36:09.141]                               data <- list(type = "VALUE", value = cond, 
[13:36:09.141]                                 success = TRUE)
[13:36:09.141]                               parallel_sendData(master, data)
[13:36:09.141]                             }
[13:36:09.141]                             return(sendCondition)
[13:36:09.141]                           }
[13:36:09.141]                         }
[13:36:09.141]                         frame <- frame + 1L
[13:36:09.141]                         envir <- sys.frame(frame)
[13:36:09.141]                       }
[13:36:09.141]                     }
[13:36:09.141]                     sendCondition <<- function(cond) NULL
[13:36:09.141]                   }
[13:36:09.141]                 })
[13:36:09.141]                 withCallingHandlers({
[13:36:09.141]                   {
[13:36:09.141]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:09.141]                       ii, n), appendLF = FALSE)
[13:36:09.141]                     fit <- mandelbrot(C)
[13:36:09.141]                     delay(fit)
[13:36:09.141]                     message(" done")
[13:36:09.141]                     fit
[13:36:09.141]                   }
[13:36:09.141]                 }, immediateCondition = function(cond) {
[13:36:09.141]                   sendCondition <- ...future.makeSendCondition()
[13:36:09.141]                   sendCondition(cond)
[13:36:09.141]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.141]                   {
[13:36:09.141]                     inherits <- base::inherits
[13:36:09.141]                     invokeRestart <- base::invokeRestart
[13:36:09.141]                     is.null <- base::is.null
[13:36:09.141]                     muffled <- FALSE
[13:36:09.141]                     if (inherits(cond, "message")) {
[13:36:09.141]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:09.141]                       if (muffled) 
[13:36:09.141]                         invokeRestart("muffleMessage")
[13:36:09.141]                     }
[13:36:09.141]                     else if (inherits(cond, "warning")) {
[13:36:09.141]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:09.141]                       if (muffled) 
[13:36:09.141]                         invokeRestart("muffleWarning")
[13:36:09.141]                     }
[13:36:09.141]                     else if (inherits(cond, "condition")) {
[13:36:09.141]                       if (!is.null(pattern)) {
[13:36:09.141]                         computeRestarts <- base::computeRestarts
[13:36:09.141]                         grepl <- base::grepl
[13:36:09.141]                         restarts <- computeRestarts(cond)
[13:36:09.141]                         for (restart in restarts) {
[13:36:09.141]                           name <- restart$name
[13:36:09.141]                           if (is.null(name)) 
[13:36:09.141]                             next
[13:36:09.141]                           if (!grepl(pattern, name)) 
[13:36:09.141]                             next
[13:36:09.141]                           invokeRestart(restart)
[13:36:09.141]                           muffled <- TRUE
[13:36:09.141]                           break
[13:36:09.141]                         }
[13:36:09.141]                       }
[13:36:09.141]                     }
[13:36:09.141]                     invisible(muffled)
[13:36:09.141]                   }
[13:36:09.141]                   muffleCondition(cond)
[13:36:09.141]                 })
[13:36:09.141]             }))
[13:36:09.141]             future::FutureResult(value = ...future.value$value, 
[13:36:09.141]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.141]                   ...future.rng), globalenv = if (FALSE) 
[13:36:09.141]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:09.141]                     ...future.globalenv.names))
[13:36:09.141]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:09.141]         }, condition = base::local({
[13:36:09.141]             c <- base::c
[13:36:09.141]             inherits <- base::inherits
[13:36:09.141]             invokeRestart <- base::invokeRestart
[13:36:09.141]             length <- base::length
[13:36:09.141]             list <- base::list
[13:36:09.141]             seq.int <- base::seq.int
[13:36:09.141]             signalCondition <- base::signalCondition
[13:36:09.141]             sys.calls <- base::sys.calls
[13:36:09.141]             `[[` <- base::`[[`
[13:36:09.141]             `+` <- base::`+`
[13:36:09.141]             `<<-` <- base::`<<-`
[13:36:09.141]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:09.141]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:09.141]                   3L)]
[13:36:09.141]             }
[13:36:09.141]             function(cond) {
[13:36:09.141]                 is_error <- inherits(cond, "error")
[13:36:09.141]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:09.141]                   NULL)
[13:36:09.141]                 if (is_error) {
[13:36:09.141]                   sessionInformation <- function() {
[13:36:09.141]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:09.141]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:09.141]                       search = base::search(), system = base::Sys.info())
[13:36:09.141]                   }
[13:36:09.141]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.141]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:09.141]                     cond$call), session = sessionInformation(), 
[13:36:09.141]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:09.141]                   signalCondition(cond)
[13:36:09.141]                 }
[13:36:09.141]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:09.141]                 "immediateCondition"))) {
[13:36:09.141]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:09.141]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.141]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:09.141]                   if (TRUE && !signal) {
[13:36:09.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.141]                     {
[13:36:09.141]                       inherits <- base::inherits
[13:36:09.141]                       invokeRestart <- base::invokeRestart
[13:36:09.141]                       is.null <- base::is.null
[13:36:09.141]                       muffled <- FALSE
[13:36:09.141]                       if (inherits(cond, "message")) {
[13:36:09.141]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.141]                         if (muffled) 
[13:36:09.141]                           invokeRestart("muffleMessage")
[13:36:09.141]                       }
[13:36:09.141]                       else if (inherits(cond, "warning")) {
[13:36:09.141]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.141]                         if (muffled) 
[13:36:09.141]                           invokeRestart("muffleWarning")
[13:36:09.141]                       }
[13:36:09.141]                       else if (inherits(cond, "condition")) {
[13:36:09.141]                         if (!is.null(pattern)) {
[13:36:09.141]                           computeRestarts <- base::computeRestarts
[13:36:09.141]                           grepl <- base::grepl
[13:36:09.141]                           restarts <- computeRestarts(cond)
[13:36:09.141]                           for (restart in restarts) {
[13:36:09.141]                             name <- restart$name
[13:36:09.141]                             if (is.null(name)) 
[13:36:09.141]                               next
[13:36:09.141]                             if (!grepl(pattern, name)) 
[13:36:09.141]                               next
[13:36:09.141]                             invokeRestart(restart)
[13:36:09.141]                             muffled <- TRUE
[13:36:09.141]                             break
[13:36:09.141]                           }
[13:36:09.141]                         }
[13:36:09.141]                       }
[13:36:09.141]                       invisible(muffled)
[13:36:09.141]                     }
[13:36:09.141]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.141]                   }
[13:36:09.141]                 }
[13:36:09.141]                 else {
[13:36:09.141]                   if (TRUE) {
[13:36:09.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.141]                     {
[13:36:09.141]                       inherits <- base::inherits
[13:36:09.141]                       invokeRestart <- base::invokeRestart
[13:36:09.141]                       is.null <- base::is.null
[13:36:09.141]                       muffled <- FALSE
[13:36:09.141]                       if (inherits(cond, "message")) {
[13:36:09.141]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.141]                         if (muffled) 
[13:36:09.141]                           invokeRestart("muffleMessage")
[13:36:09.141]                       }
[13:36:09.141]                       else if (inherits(cond, "warning")) {
[13:36:09.141]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.141]                         if (muffled) 
[13:36:09.141]                           invokeRestart("muffleWarning")
[13:36:09.141]                       }
[13:36:09.141]                       else if (inherits(cond, "condition")) {
[13:36:09.141]                         if (!is.null(pattern)) {
[13:36:09.141]                           computeRestarts <- base::computeRestarts
[13:36:09.141]                           grepl <- base::grepl
[13:36:09.141]                           restarts <- computeRestarts(cond)
[13:36:09.141]                           for (restart in restarts) {
[13:36:09.141]                             name <- restart$name
[13:36:09.141]                             if (is.null(name)) 
[13:36:09.141]                               next
[13:36:09.141]                             if (!grepl(pattern, name)) 
[13:36:09.141]                               next
[13:36:09.141]                             invokeRestart(restart)
[13:36:09.141]                             muffled <- TRUE
[13:36:09.141]                             break
[13:36:09.141]                           }
[13:36:09.141]                         }
[13:36:09.141]                       }
[13:36:09.141]                       invisible(muffled)
[13:36:09.141]                     }
[13:36:09.141]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.141]                   }
[13:36:09.141]                 }
[13:36:09.141]             }
[13:36:09.141]         }))
[13:36:09.141]     }, error = function(ex) {
[13:36:09.141]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:09.141]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.141]                 ...future.rng), started = ...future.startTime, 
[13:36:09.141]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:09.141]             version = "1.8"), class = "FutureResult")
[13:36:09.141]     }, finally = {
[13:36:09.141]         if (!identical(...future.workdir, getwd())) 
[13:36:09.141]             setwd(...future.workdir)
[13:36:09.141]         {
[13:36:09.141]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:09.141]                 ...future.oldOptions$nwarnings <- NULL
[13:36:09.141]             }
[13:36:09.141]             base::options(...future.oldOptions)
[13:36:09.141]             if (.Platform$OS.type == "windows") {
[13:36:09.141]                 old_names <- names(...future.oldEnvVars)
[13:36:09.141]                 envs <- base::Sys.getenv()
[13:36:09.141]                 names <- names(envs)
[13:36:09.141]                 common <- intersect(names, old_names)
[13:36:09.141]                 added <- setdiff(names, old_names)
[13:36:09.141]                 removed <- setdiff(old_names, names)
[13:36:09.141]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:09.141]                   envs[common]]
[13:36:09.141]                 NAMES <- toupper(changed)
[13:36:09.141]                 args <- list()
[13:36:09.141]                 for (kk in seq_along(NAMES)) {
[13:36:09.141]                   name <- changed[[kk]]
[13:36:09.141]                   NAME <- NAMES[[kk]]
[13:36:09.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.141]                     next
[13:36:09.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.141]                 }
[13:36:09.141]                 NAMES <- toupper(added)
[13:36:09.141]                 for (kk in seq_along(NAMES)) {
[13:36:09.141]                   name <- added[[kk]]
[13:36:09.141]                   NAME <- NAMES[[kk]]
[13:36:09.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.141]                     next
[13:36:09.141]                   args[[name]] <- ""
[13:36:09.141]                 }
[13:36:09.141]                 NAMES <- toupper(removed)
[13:36:09.141]                 for (kk in seq_along(NAMES)) {
[13:36:09.141]                   name <- removed[[kk]]
[13:36:09.141]                   NAME <- NAMES[[kk]]
[13:36:09.141]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.141]                     next
[13:36:09.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.141]                 }
[13:36:09.141]                 if (length(args) > 0) 
[13:36:09.141]                   base::do.call(base::Sys.setenv, args = args)
[13:36:09.141]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:09.141]             }
[13:36:09.141]             else {
[13:36:09.141]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:09.141]             }
[13:36:09.141]             {
[13:36:09.141]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:09.141]                   0L) {
[13:36:09.141]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:09.141]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:09.141]                   base::options(opts)
[13:36:09.141]                 }
[13:36:09.141]                 {
[13:36:09.141]                   {
[13:36:09.141]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:09.141]                     NULL
[13:36:09.141]                   }
[13:36:09.141]                   options(future.plan = NULL)
[13:36:09.141]                   if (is.na(NA_character_)) 
[13:36:09.141]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.141]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:09.141]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:09.141]                     .init = FALSE)
[13:36:09.141]                 }
[13:36:09.141]             }
[13:36:09.141]         }
[13:36:09.141]     })
[13:36:09.141]     if (TRUE) {
[13:36:09.141]         base::sink(type = "output", split = FALSE)
[13:36:09.141]         if (TRUE) {
[13:36:09.141]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:09.141]         }
[13:36:09.141]         else {
[13:36:09.141]             ...future.result["stdout"] <- base::list(NULL)
[13:36:09.141]         }
[13:36:09.141]         base::close(...future.stdout)
[13:36:09.141]         ...future.stdout <- NULL
[13:36:09.141]     }
[13:36:09.141]     ...future.result$conditions <- ...future.conditions
[13:36:09.141]     ...future.result$finished <- base::Sys.time()
[13:36:09.141]     ...future.result
[13:36:09.141] }
[13:36:09.144] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[13:36:09.144] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:36:09.144] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:36:09.144] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[13:36:09.145] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[13:36:09.145] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[13:36:09.186] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[13:36:09.187] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[13:36:09.231] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[13:36:09.231] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[13:36:09.232] MultisessionFuture started
[13:36:09.232] - Launch lazy future ... done
[13:36:09.232] run() for ‘MultisessionFuture’ ... done
[13:36:09.232] - run() ... done
[13:36:09.232] - resolved() ...
[13:36:09.243] - resolved: FALSE
[13:36:09.243] - resolved() ... done
[13:36:09.243] resolved() for ‘MultisessionFuture’ ... done
[13:36:09.243] resolved() for ‘Future’ ...
[13:36:09.244] - state: ‘created’
[13:36:09.244] - run: TRUE
[13:36:09.244] - run() ...
[13:36:09.244] run() for ‘Future’ ...
[13:36:09.244] - state: ‘created’
[13:36:09.244] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:09.258] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:09.258] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:09.258]   - Field: ‘node’
[13:36:09.258]   - Field: ‘label’
[13:36:09.258]   - Field: ‘local’
[13:36:09.258]   - Field: ‘owner’
[13:36:09.258]   - Field: ‘envir’
[13:36:09.258]   - Field: ‘workers’
[13:36:09.259]   - Field: ‘packages’
[13:36:09.259]   - Field: ‘gc’
[13:36:09.259]   - Field: ‘conditions’
[13:36:09.259]   - Field: ‘persistent’
[13:36:09.259]   - Field: ‘expr’
[13:36:09.259]   - Field: ‘uuid’
[13:36:09.259]   - Field: ‘seed’
[13:36:09.259]   - Field: ‘version’
[13:36:09.259]   - Field: ‘result’
[13:36:09.259]   - Field: ‘asynchronous’
[13:36:09.259]   - Field: ‘calls’
[13:36:09.259]   - Field: ‘globals’
[13:36:09.260]   - Field: ‘stdout’
[13:36:09.260]   - Field: ‘earlySignal’
[13:36:09.260]   - Field: ‘lazy’
[13:36:09.260]   - Field: ‘state’
[13:36:09.260] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:09.260] - Launch lazy future ...
[13:36:09.260] Packages needed by the future expression (n = 1): ‘future’
[13:36:09.260] Packages needed by future strategies (n = 0): <none>
[13:36:09.261] {
[13:36:09.261]     {
[13:36:09.261]         {
[13:36:09.261]             ...future.startTime <- base::Sys.time()
[13:36:09.261]             {
[13:36:09.261]                 {
[13:36:09.261]                   {
[13:36:09.261]                     {
[13:36:09.261]                       {
[13:36:09.261]                         base::local({
[13:36:09.261]                           has_future <- base::requireNamespace("future", 
[13:36:09.261]                             quietly = TRUE)
[13:36:09.261]                           if (has_future) {
[13:36:09.261]                             ns <- base::getNamespace("future")
[13:36:09.261]                             version <- ns[[".package"]][["version"]]
[13:36:09.261]                             if (is.null(version)) 
[13:36:09.261]                               version <- utils::packageVersion("future")
[13:36:09.261]                           }
[13:36:09.261]                           else {
[13:36:09.261]                             version <- NULL
[13:36:09.261]                           }
[13:36:09.261]                           if (!has_future || version < "1.8.0") {
[13:36:09.261]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:09.261]                               "", base::R.version$version.string), 
[13:36:09.261]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:09.261]                                 base::R.version$platform, 8 * 
[13:36:09.261]                                   base::.Machine$sizeof.pointer), 
[13:36:09.261]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:09.261]                                 "release", "version")], collapse = " "), 
[13:36:09.261]                               hostname = base::Sys.info()[["nodename"]])
[13:36:09.261]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:09.261]                               info)
[13:36:09.261]                             info <- base::paste(info, collapse = "; ")
[13:36:09.261]                             if (!has_future) {
[13:36:09.261]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:09.261]                                 info)
[13:36:09.261]                             }
[13:36:09.261]                             else {
[13:36:09.261]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:09.261]                                 info, version)
[13:36:09.261]                             }
[13:36:09.261]                             base::stop(msg)
[13:36:09.261]                           }
[13:36:09.261]                         })
[13:36:09.261]                       }
[13:36:09.261]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:09.261]                       base::options(mc.cores = 1L)
[13:36:09.261]                     }
[13:36:09.261]                     base::local({
[13:36:09.261]                       for (pkg in "future") {
[13:36:09.261]                         base::loadNamespace(pkg)
[13:36:09.261]                         base::library(pkg, character.only = TRUE)
[13:36:09.261]                       }
[13:36:09.261]                     })
[13:36:09.261]                   }
[13:36:09.261]                   ...future.strategy.old <- future::plan("list")
[13:36:09.261]                   options(future.plan = NULL)
[13:36:09.261]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.261]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:09.261]                 }
[13:36:09.261]                 ...future.workdir <- getwd()
[13:36:09.261]             }
[13:36:09.261]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:09.261]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:09.261]         }
[13:36:09.261]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:09.261]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:09.261]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:09.261]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:09.261]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:09.261]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:09.261]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:09.261]             base::names(...future.oldOptions))
[13:36:09.261]     }
[13:36:09.261]     if (FALSE) {
[13:36:09.261]     }
[13:36:09.261]     else {
[13:36:09.261]         if (TRUE) {
[13:36:09.261]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:09.261]                 open = "w")
[13:36:09.261]         }
[13:36:09.261]         else {
[13:36:09.261]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:09.261]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:09.261]         }
[13:36:09.261]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:09.261]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:09.261]             base::sink(type = "output", split = FALSE)
[13:36:09.261]             base::close(...future.stdout)
[13:36:09.261]         }, add = TRUE)
[13:36:09.261]     }
[13:36:09.261]     ...future.frame <- base::sys.nframe()
[13:36:09.261]     ...future.conditions <- base::list()
[13:36:09.261]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:09.261]     if (FALSE) {
[13:36:09.261]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:09.261]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:09.261]     }
[13:36:09.261]     ...future.result <- base::tryCatch({
[13:36:09.261]         base::withCallingHandlers({
[13:36:09.261]             ...future.value <- base::withVisible(base::local({
[13:36:09.261]                 ...future.makeSendCondition <- base::local({
[13:36:09.261]                   sendCondition <- NULL
[13:36:09.261]                   function(frame = 1L) {
[13:36:09.261]                     if (is.function(sendCondition)) 
[13:36:09.261]                       return(sendCondition)
[13:36:09.261]                     ns <- getNamespace("parallel")
[13:36:09.261]                     if (exists("sendData", mode = "function", 
[13:36:09.261]                       envir = ns)) {
[13:36:09.261]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:09.261]                         envir = ns)
[13:36:09.261]                       envir <- sys.frame(frame)
[13:36:09.261]                       master <- NULL
[13:36:09.261]                       while (!identical(envir, .GlobalEnv) && 
[13:36:09.261]                         !identical(envir, emptyenv())) {
[13:36:09.261]                         if (exists("master", mode = "list", envir = envir, 
[13:36:09.261]                           inherits = FALSE)) {
[13:36:09.261]                           master <- get("master", mode = "list", 
[13:36:09.261]                             envir = envir, inherits = FALSE)
[13:36:09.261]                           if (inherits(master, c("SOCKnode", 
[13:36:09.261]                             "SOCK0node"))) {
[13:36:09.261]                             sendCondition <<- function(cond) {
[13:36:09.261]                               data <- list(type = "VALUE", value = cond, 
[13:36:09.261]                                 success = TRUE)
[13:36:09.261]                               parallel_sendData(master, data)
[13:36:09.261]                             }
[13:36:09.261]                             return(sendCondition)
[13:36:09.261]                           }
[13:36:09.261]                         }
[13:36:09.261]                         frame <- frame + 1L
[13:36:09.261]                         envir <- sys.frame(frame)
[13:36:09.261]                       }
[13:36:09.261]                     }
[13:36:09.261]                     sendCondition <<- function(cond) NULL
[13:36:09.261]                   }
[13:36:09.261]                 })
[13:36:09.261]                 withCallingHandlers({
[13:36:09.261]                   {
[13:36:09.261]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:09.261]                       ii, n), appendLF = FALSE)
[13:36:09.261]                     fit <- mandelbrot(C)
[13:36:09.261]                     delay(fit)
[13:36:09.261]                     message(" done")
[13:36:09.261]                     fit
[13:36:09.261]                   }
[13:36:09.261]                 }, immediateCondition = function(cond) {
[13:36:09.261]                   sendCondition <- ...future.makeSendCondition()
[13:36:09.261]                   sendCondition(cond)
[13:36:09.261]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.261]                   {
[13:36:09.261]                     inherits <- base::inherits
[13:36:09.261]                     invokeRestart <- base::invokeRestart
[13:36:09.261]                     is.null <- base::is.null
[13:36:09.261]                     muffled <- FALSE
[13:36:09.261]                     if (inherits(cond, "message")) {
[13:36:09.261]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:09.261]                       if (muffled) 
[13:36:09.261]                         invokeRestart("muffleMessage")
[13:36:09.261]                     }
[13:36:09.261]                     else if (inherits(cond, "warning")) {
[13:36:09.261]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:09.261]                       if (muffled) 
[13:36:09.261]                         invokeRestart("muffleWarning")
[13:36:09.261]                     }
[13:36:09.261]                     else if (inherits(cond, "condition")) {
[13:36:09.261]                       if (!is.null(pattern)) {
[13:36:09.261]                         computeRestarts <- base::computeRestarts
[13:36:09.261]                         grepl <- base::grepl
[13:36:09.261]                         restarts <- computeRestarts(cond)
[13:36:09.261]                         for (restart in restarts) {
[13:36:09.261]                           name <- restart$name
[13:36:09.261]                           if (is.null(name)) 
[13:36:09.261]                             next
[13:36:09.261]                           if (!grepl(pattern, name)) 
[13:36:09.261]                             next
[13:36:09.261]                           invokeRestart(restart)
[13:36:09.261]                           muffled <- TRUE
[13:36:09.261]                           break
[13:36:09.261]                         }
[13:36:09.261]                       }
[13:36:09.261]                     }
[13:36:09.261]                     invisible(muffled)
[13:36:09.261]                   }
[13:36:09.261]                   muffleCondition(cond)
[13:36:09.261]                 })
[13:36:09.261]             }))
[13:36:09.261]             future::FutureResult(value = ...future.value$value, 
[13:36:09.261]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.261]                   ...future.rng), globalenv = if (FALSE) 
[13:36:09.261]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:09.261]                     ...future.globalenv.names))
[13:36:09.261]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:09.261]         }, condition = base::local({
[13:36:09.261]             c <- base::c
[13:36:09.261]             inherits <- base::inherits
[13:36:09.261]             invokeRestart <- base::invokeRestart
[13:36:09.261]             length <- base::length
[13:36:09.261]             list <- base::list
[13:36:09.261]             seq.int <- base::seq.int
[13:36:09.261]             signalCondition <- base::signalCondition
[13:36:09.261]             sys.calls <- base::sys.calls
[13:36:09.261]             `[[` <- base::`[[`
[13:36:09.261]             `+` <- base::`+`
[13:36:09.261]             `<<-` <- base::`<<-`
[13:36:09.261]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:09.261]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:09.261]                   3L)]
[13:36:09.261]             }
[13:36:09.261]             function(cond) {
[13:36:09.261]                 is_error <- inherits(cond, "error")
[13:36:09.261]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:09.261]                   NULL)
[13:36:09.261]                 if (is_error) {
[13:36:09.261]                   sessionInformation <- function() {
[13:36:09.261]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:09.261]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:09.261]                       search = base::search(), system = base::Sys.info())
[13:36:09.261]                   }
[13:36:09.261]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.261]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:09.261]                     cond$call), session = sessionInformation(), 
[13:36:09.261]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:09.261]                   signalCondition(cond)
[13:36:09.261]                 }
[13:36:09.261]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:09.261]                 "immediateCondition"))) {
[13:36:09.261]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:09.261]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.261]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:09.261]                   if (TRUE && !signal) {
[13:36:09.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.261]                     {
[13:36:09.261]                       inherits <- base::inherits
[13:36:09.261]                       invokeRestart <- base::invokeRestart
[13:36:09.261]                       is.null <- base::is.null
[13:36:09.261]                       muffled <- FALSE
[13:36:09.261]                       if (inherits(cond, "message")) {
[13:36:09.261]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.261]                         if (muffled) 
[13:36:09.261]                           invokeRestart("muffleMessage")
[13:36:09.261]                       }
[13:36:09.261]                       else if (inherits(cond, "warning")) {
[13:36:09.261]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.261]                         if (muffled) 
[13:36:09.261]                           invokeRestart("muffleWarning")
[13:36:09.261]                       }
[13:36:09.261]                       else if (inherits(cond, "condition")) {
[13:36:09.261]                         if (!is.null(pattern)) {
[13:36:09.261]                           computeRestarts <- base::computeRestarts
[13:36:09.261]                           grepl <- base::grepl
[13:36:09.261]                           restarts <- computeRestarts(cond)
[13:36:09.261]                           for (restart in restarts) {
[13:36:09.261]                             name <- restart$name
[13:36:09.261]                             if (is.null(name)) 
[13:36:09.261]                               next
[13:36:09.261]                             if (!grepl(pattern, name)) 
[13:36:09.261]                               next
[13:36:09.261]                             invokeRestart(restart)
[13:36:09.261]                             muffled <- TRUE
[13:36:09.261]                             break
[13:36:09.261]                           }
[13:36:09.261]                         }
[13:36:09.261]                       }
[13:36:09.261]                       invisible(muffled)
[13:36:09.261]                     }
[13:36:09.261]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.261]                   }
[13:36:09.261]                 }
[13:36:09.261]                 else {
[13:36:09.261]                   if (TRUE) {
[13:36:09.261]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.261]                     {
[13:36:09.261]                       inherits <- base::inherits
[13:36:09.261]                       invokeRestart <- base::invokeRestart
[13:36:09.261]                       is.null <- base::is.null
[13:36:09.261]                       muffled <- FALSE
[13:36:09.261]                       if (inherits(cond, "message")) {
[13:36:09.261]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.261]                         if (muffled) 
[13:36:09.261]                           invokeRestart("muffleMessage")
[13:36:09.261]                       }
[13:36:09.261]                       else if (inherits(cond, "warning")) {
[13:36:09.261]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.261]                         if (muffled) 
[13:36:09.261]                           invokeRestart("muffleWarning")
[13:36:09.261]                       }
[13:36:09.261]                       else if (inherits(cond, "condition")) {
[13:36:09.261]                         if (!is.null(pattern)) {
[13:36:09.261]                           computeRestarts <- base::computeRestarts
[13:36:09.261]                           grepl <- base::grepl
[13:36:09.261]                           restarts <- computeRestarts(cond)
[13:36:09.261]                           for (restart in restarts) {
[13:36:09.261]                             name <- restart$name
[13:36:09.261]                             if (is.null(name)) 
[13:36:09.261]                               next
[13:36:09.261]                             if (!grepl(pattern, name)) 
[13:36:09.261]                               next
[13:36:09.261]                             invokeRestart(restart)
[13:36:09.261]                             muffled <- TRUE
[13:36:09.261]                             break
[13:36:09.261]                           }
[13:36:09.261]                         }
[13:36:09.261]                       }
[13:36:09.261]                       invisible(muffled)
[13:36:09.261]                     }
[13:36:09.261]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.261]                   }
[13:36:09.261]                 }
[13:36:09.261]             }
[13:36:09.261]         }))
[13:36:09.261]     }, error = function(ex) {
[13:36:09.261]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:09.261]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.261]                 ...future.rng), started = ...future.startTime, 
[13:36:09.261]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:09.261]             version = "1.8"), class = "FutureResult")
[13:36:09.261]     }, finally = {
[13:36:09.261]         if (!identical(...future.workdir, getwd())) 
[13:36:09.261]             setwd(...future.workdir)
[13:36:09.261]         {
[13:36:09.261]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:09.261]                 ...future.oldOptions$nwarnings <- NULL
[13:36:09.261]             }
[13:36:09.261]             base::options(...future.oldOptions)
[13:36:09.261]             if (.Platform$OS.type == "windows") {
[13:36:09.261]                 old_names <- names(...future.oldEnvVars)
[13:36:09.261]                 envs <- base::Sys.getenv()
[13:36:09.261]                 names <- names(envs)
[13:36:09.261]                 common <- intersect(names, old_names)
[13:36:09.261]                 added <- setdiff(names, old_names)
[13:36:09.261]                 removed <- setdiff(old_names, names)
[13:36:09.261]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:09.261]                   envs[common]]
[13:36:09.261]                 NAMES <- toupper(changed)
[13:36:09.261]                 args <- list()
[13:36:09.261]                 for (kk in seq_along(NAMES)) {
[13:36:09.261]                   name <- changed[[kk]]
[13:36:09.261]                   NAME <- NAMES[[kk]]
[13:36:09.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.261]                     next
[13:36:09.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.261]                 }
[13:36:09.261]                 NAMES <- toupper(added)
[13:36:09.261]                 for (kk in seq_along(NAMES)) {
[13:36:09.261]                   name <- added[[kk]]
[13:36:09.261]                   NAME <- NAMES[[kk]]
[13:36:09.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.261]                     next
[13:36:09.261]                   args[[name]] <- ""
[13:36:09.261]                 }
[13:36:09.261]                 NAMES <- toupper(removed)
[13:36:09.261]                 for (kk in seq_along(NAMES)) {
[13:36:09.261]                   name <- removed[[kk]]
[13:36:09.261]                   NAME <- NAMES[[kk]]
[13:36:09.261]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.261]                     next
[13:36:09.261]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.261]                 }
[13:36:09.261]                 if (length(args) > 0) 
[13:36:09.261]                   base::do.call(base::Sys.setenv, args = args)
[13:36:09.261]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:09.261]             }
[13:36:09.261]             else {
[13:36:09.261]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:09.261]             }
[13:36:09.261]             {
[13:36:09.261]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:09.261]                   0L) {
[13:36:09.261]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:09.261]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:09.261]                   base::options(opts)
[13:36:09.261]                 }
[13:36:09.261]                 {
[13:36:09.261]                   {
[13:36:09.261]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:09.261]                     NULL
[13:36:09.261]                   }
[13:36:09.261]                   options(future.plan = NULL)
[13:36:09.261]                   if (is.na(NA_character_)) 
[13:36:09.261]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.261]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:09.261]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:09.261]                     .init = FALSE)
[13:36:09.261]                 }
[13:36:09.261]             }
[13:36:09.261]         }
[13:36:09.261]     })
[13:36:09.261]     if (TRUE) {
[13:36:09.261]         base::sink(type = "output", split = FALSE)
[13:36:09.261]         if (TRUE) {
[13:36:09.261]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:09.261]         }
[13:36:09.261]         else {
[13:36:09.261]             ...future.result["stdout"] <- base::list(NULL)
[13:36:09.261]         }
[13:36:09.261]         base::close(...future.stdout)
[13:36:09.261]         ...future.stdout <- NULL
[13:36:09.261]     }
[13:36:09.261]     ...future.result$conditions <- ...future.conditions
[13:36:09.261]     ...future.result$finished <- base::Sys.time()
[13:36:09.261]     ...future.result
[13:36:09.261] }
[13:36:09.314] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[13:36:09.315] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:36:09.315] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:36:09.315] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[13:36:09.316] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[13:36:09.316] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[13:36:09.358] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[13:36:09.359] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[13:36:09.403] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[13:36:09.403] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[13:36:09.404] MultisessionFuture started
[13:36:09.404] - Launch lazy future ... done
[13:36:09.404] run() for ‘MultisessionFuture’ ... done
[13:36:09.404] - run() ... done
[13:36:09.404] - resolved() ...
[13:36:09.415] - resolved: FALSE
[13:36:09.415] - resolved() ... done
[13:36:09.415] resolved() for ‘MultisessionFuture’ ... done
[13:36:09.415] resolved() for ‘Future’ ...
[13:36:09.415] - state: ‘created’
[13:36:09.416] - run: TRUE
[13:36:09.416] - run() ...
[13:36:09.416] run() for ‘Future’ ...
[13:36:09.416] - state: ‘created’
[13:36:09.416] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:09.431] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:09.431] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:09.431]   - Field: ‘node’
[13:36:09.431]   - Field: ‘label’
[13:36:09.431]   - Field: ‘local’
[13:36:09.431]   - Field: ‘owner’
[13:36:09.431]   - Field: ‘envir’
[13:36:09.432]   - Field: ‘workers’
[13:36:09.432]   - Field: ‘packages’
[13:36:09.432]   - Field: ‘gc’
[13:36:09.432]   - Field: ‘conditions’
[13:36:09.432]   - Field: ‘persistent’
[13:36:09.432]   - Field: ‘expr’
[13:36:09.432]   - Field: ‘uuid’
[13:36:09.432]   - Field: ‘seed’
[13:36:09.432]   - Field: ‘version’
[13:36:09.432]   - Field: ‘result’
[13:36:09.432]   - Field: ‘asynchronous’
[13:36:09.433]   - Field: ‘calls’
[13:36:09.433]   - Field: ‘globals’
[13:36:09.433]   - Field: ‘stdout’
[13:36:09.433]   - Field: ‘earlySignal’
[13:36:09.433]   - Field: ‘lazy’
[13:36:09.433]   - Field: ‘state’
[13:36:09.433] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:09.433] - Launch lazy future ...
[13:36:09.433] Packages needed by the future expression (n = 1): ‘future’
[13:36:09.434] Packages needed by future strategies (n = 0): <none>
[13:36:09.434] {
[13:36:09.434]     {
[13:36:09.434]         {
[13:36:09.434]             ...future.startTime <- base::Sys.time()
[13:36:09.434]             {
[13:36:09.434]                 {
[13:36:09.434]                   {
[13:36:09.434]                     {
[13:36:09.434]                       {
[13:36:09.434]                         base::local({
[13:36:09.434]                           has_future <- base::requireNamespace("future", 
[13:36:09.434]                             quietly = TRUE)
[13:36:09.434]                           if (has_future) {
[13:36:09.434]                             ns <- base::getNamespace("future")
[13:36:09.434]                             version <- ns[[".package"]][["version"]]
[13:36:09.434]                             if (is.null(version)) 
[13:36:09.434]                               version <- utils::packageVersion("future")
[13:36:09.434]                           }
[13:36:09.434]                           else {
[13:36:09.434]                             version <- NULL
[13:36:09.434]                           }
[13:36:09.434]                           if (!has_future || version < "1.8.0") {
[13:36:09.434]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:09.434]                               "", base::R.version$version.string), 
[13:36:09.434]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:09.434]                                 base::R.version$platform, 8 * 
[13:36:09.434]                                   base::.Machine$sizeof.pointer), 
[13:36:09.434]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:09.434]                                 "release", "version")], collapse = " "), 
[13:36:09.434]                               hostname = base::Sys.info()[["nodename"]])
[13:36:09.434]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:09.434]                               info)
[13:36:09.434]                             info <- base::paste(info, collapse = "; ")
[13:36:09.434]                             if (!has_future) {
[13:36:09.434]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:09.434]                                 info)
[13:36:09.434]                             }
[13:36:09.434]                             else {
[13:36:09.434]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:09.434]                                 info, version)
[13:36:09.434]                             }
[13:36:09.434]                             base::stop(msg)
[13:36:09.434]                           }
[13:36:09.434]                         })
[13:36:09.434]                       }
[13:36:09.434]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:09.434]                       base::options(mc.cores = 1L)
[13:36:09.434]                     }
[13:36:09.434]                     base::local({
[13:36:09.434]                       for (pkg in "future") {
[13:36:09.434]                         base::loadNamespace(pkg)
[13:36:09.434]                         base::library(pkg, character.only = TRUE)
[13:36:09.434]                       }
[13:36:09.434]                     })
[13:36:09.434]                   }
[13:36:09.434]                   ...future.strategy.old <- future::plan("list")
[13:36:09.434]                   options(future.plan = NULL)
[13:36:09.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:09.434]                 }
[13:36:09.434]                 ...future.workdir <- getwd()
[13:36:09.434]             }
[13:36:09.434]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:09.434]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:09.434]         }
[13:36:09.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:09.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:09.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:09.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:09.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:09.434]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:09.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:09.434]             base::names(...future.oldOptions))
[13:36:09.434]     }
[13:36:09.434]     if (FALSE) {
[13:36:09.434]     }
[13:36:09.434]     else {
[13:36:09.434]         if (TRUE) {
[13:36:09.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:09.434]                 open = "w")
[13:36:09.434]         }
[13:36:09.434]         else {
[13:36:09.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:09.434]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:09.434]         }
[13:36:09.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:09.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:09.434]             base::sink(type = "output", split = FALSE)
[13:36:09.434]             base::close(...future.stdout)
[13:36:09.434]         }, add = TRUE)
[13:36:09.434]     }
[13:36:09.434]     ...future.frame <- base::sys.nframe()
[13:36:09.434]     ...future.conditions <- base::list()
[13:36:09.434]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:09.434]     if (FALSE) {
[13:36:09.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:09.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:09.434]     }
[13:36:09.434]     ...future.result <- base::tryCatch({
[13:36:09.434]         base::withCallingHandlers({
[13:36:09.434]             ...future.value <- base::withVisible(base::local({
[13:36:09.434]                 ...future.makeSendCondition <- base::local({
[13:36:09.434]                   sendCondition <- NULL
[13:36:09.434]                   function(frame = 1L) {
[13:36:09.434]                     if (is.function(sendCondition)) 
[13:36:09.434]                       return(sendCondition)
[13:36:09.434]                     ns <- getNamespace("parallel")
[13:36:09.434]                     if (exists("sendData", mode = "function", 
[13:36:09.434]                       envir = ns)) {
[13:36:09.434]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:09.434]                         envir = ns)
[13:36:09.434]                       envir <- sys.frame(frame)
[13:36:09.434]                       master <- NULL
[13:36:09.434]                       while (!identical(envir, .GlobalEnv) && 
[13:36:09.434]                         !identical(envir, emptyenv())) {
[13:36:09.434]                         if (exists("master", mode = "list", envir = envir, 
[13:36:09.434]                           inherits = FALSE)) {
[13:36:09.434]                           master <- get("master", mode = "list", 
[13:36:09.434]                             envir = envir, inherits = FALSE)
[13:36:09.434]                           if (inherits(master, c("SOCKnode", 
[13:36:09.434]                             "SOCK0node"))) {
[13:36:09.434]                             sendCondition <<- function(cond) {
[13:36:09.434]                               data <- list(type = "VALUE", value = cond, 
[13:36:09.434]                                 success = TRUE)
[13:36:09.434]                               parallel_sendData(master, data)
[13:36:09.434]                             }
[13:36:09.434]                             return(sendCondition)
[13:36:09.434]                           }
[13:36:09.434]                         }
[13:36:09.434]                         frame <- frame + 1L
[13:36:09.434]                         envir <- sys.frame(frame)
[13:36:09.434]                       }
[13:36:09.434]                     }
[13:36:09.434]                     sendCondition <<- function(cond) NULL
[13:36:09.434]                   }
[13:36:09.434]                 })
[13:36:09.434]                 withCallingHandlers({
[13:36:09.434]                   {
[13:36:09.434]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:09.434]                       ii, n), appendLF = FALSE)
[13:36:09.434]                     fit <- mandelbrot(C)
[13:36:09.434]                     delay(fit)
[13:36:09.434]                     message(" done")
[13:36:09.434]                     fit
[13:36:09.434]                   }
[13:36:09.434]                 }, immediateCondition = function(cond) {
[13:36:09.434]                   sendCondition <- ...future.makeSendCondition()
[13:36:09.434]                   sendCondition(cond)
[13:36:09.434]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.434]                   {
[13:36:09.434]                     inherits <- base::inherits
[13:36:09.434]                     invokeRestart <- base::invokeRestart
[13:36:09.434]                     is.null <- base::is.null
[13:36:09.434]                     muffled <- FALSE
[13:36:09.434]                     if (inherits(cond, "message")) {
[13:36:09.434]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:09.434]                       if (muffled) 
[13:36:09.434]                         invokeRestart("muffleMessage")
[13:36:09.434]                     }
[13:36:09.434]                     else if (inherits(cond, "warning")) {
[13:36:09.434]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:09.434]                       if (muffled) 
[13:36:09.434]                         invokeRestart("muffleWarning")
[13:36:09.434]                     }
[13:36:09.434]                     else if (inherits(cond, "condition")) {
[13:36:09.434]                       if (!is.null(pattern)) {
[13:36:09.434]                         computeRestarts <- base::computeRestarts
[13:36:09.434]                         grepl <- base::grepl
[13:36:09.434]                         restarts <- computeRestarts(cond)
[13:36:09.434]                         for (restart in restarts) {
[13:36:09.434]                           name <- restart$name
[13:36:09.434]                           if (is.null(name)) 
[13:36:09.434]                             next
[13:36:09.434]                           if (!grepl(pattern, name)) 
[13:36:09.434]                             next
[13:36:09.434]                           invokeRestart(restart)
[13:36:09.434]                           muffled <- TRUE
[13:36:09.434]                           break
[13:36:09.434]                         }
[13:36:09.434]                       }
[13:36:09.434]                     }
[13:36:09.434]                     invisible(muffled)
[13:36:09.434]                   }
[13:36:09.434]                   muffleCondition(cond)
[13:36:09.434]                 })
[13:36:09.434]             }))
[13:36:09.434]             future::FutureResult(value = ...future.value$value, 
[13:36:09.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.434]                   ...future.rng), globalenv = if (FALSE) 
[13:36:09.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:09.434]                     ...future.globalenv.names))
[13:36:09.434]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:09.434]         }, condition = base::local({
[13:36:09.434]             c <- base::c
[13:36:09.434]             inherits <- base::inherits
[13:36:09.434]             invokeRestart <- base::invokeRestart
[13:36:09.434]             length <- base::length
[13:36:09.434]             list <- base::list
[13:36:09.434]             seq.int <- base::seq.int
[13:36:09.434]             signalCondition <- base::signalCondition
[13:36:09.434]             sys.calls <- base::sys.calls
[13:36:09.434]             `[[` <- base::`[[`
[13:36:09.434]             `+` <- base::`+`
[13:36:09.434]             `<<-` <- base::`<<-`
[13:36:09.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:09.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:09.434]                   3L)]
[13:36:09.434]             }
[13:36:09.434]             function(cond) {
[13:36:09.434]                 is_error <- inherits(cond, "error")
[13:36:09.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:09.434]                   NULL)
[13:36:09.434]                 if (is_error) {
[13:36:09.434]                   sessionInformation <- function() {
[13:36:09.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:09.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:09.434]                       search = base::search(), system = base::Sys.info())
[13:36:09.434]                   }
[13:36:09.434]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:09.434]                     cond$call), session = sessionInformation(), 
[13:36:09.434]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:09.434]                   signalCondition(cond)
[13:36:09.434]                 }
[13:36:09.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:09.434]                 "immediateCondition"))) {
[13:36:09.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:09.434]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:09.434]                   if (TRUE && !signal) {
[13:36:09.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.434]                     {
[13:36:09.434]                       inherits <- base::inherits
[13:36:09.434]                       invokeRestart <- base::invokeRestart
[13:36:09.434]                       is.null <- base::is.null
[13:36:09.434]                       muffled <- FALSE
[13:36:09.434]                       if (inherits(cond, "message")) {
[13:36:09.434]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.434]                         if (muffled) 
[13:36:09.434]                           invokeRestart("muffleMessage")
[13:36:09.434]                       }
[13:36:09.434]                       else if (inherits(cond, "warning")) {
[13:36:09.434]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.434]                         if (muffled) 
[13:36:09.434]                           invokeRestart("muffleWarning")
[13:36:09.434]                       }
[13:36:09.434]                       else if (inherits(cond, "condition")) {
[13:36:09.434]                         if (!is.null(pattern)) {
[13:36:09.434]                           computeRestarts <- base::computeRestarts
[13:36:09.434]                           grepl <- base::grepl
[13:36:09.434]                           restarts <- computeRestarts(cond)
[13:36:09.434]                           for (restart in restarts) {
[13:36:09.434]                             name <- restart$name
[13:36:09.434]                             if (is.null(name)) 
[13:36:09.434]                               next
[13:36:09.434]                             if (!grepl(pattern, name)) 
[13:36:09.434]                               next
[13:36:09.434]                             invokeRestart(restart)
[13:36:09.434]                             muffled <- TRUE
[13:36:09.434]                             break
[13:36:09.434]                           }
[13:36:09.434]                         }
[13:36:09.434]                       }
[13:36:09.434]                       invisible(muffled)
[13:36:09.434]                     }
[13:36:09.434]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.434]                   }
[13:36:09.434]                 }
[13:36:09.434]                 else {
[13:36:09.434]                   if (TRUE) {
[13:36:09.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.434]                     {
[13:36:09.434]                       inherits <- base::inherits
[13:36:09.434]                       invokeRestart <- base::invokeRestart
[13:36:09.434]                       is.null <- base::is.null
[13:36:09.434]                       muffled <- FALSE
[13:36:09.434]                       if (inherits(cond, "message")) {
[13:36:09.434]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.434]                         if (muffled) 
[13:36:09.434]                           invokeRestart("muffleMessage")
[13:36:09.434]                       }
[13:36:09.434]                       else if (inherits(cond, "warning")) {
[13:36:09.434]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.434]                         if (muffled) 
[13:36:09.434]                           invokeRestart("muffleWarning")
[13:36:09.434]                       }
[13:36:09.434]                       else if (inherits(cond, "condition")) {
[13:36:09.434]                         if (!is.null(pattern)) {
[13:36:09.434]                           computeRestarts <- base::computeRestarts
[13:36:09.434]                           grepl <- base::grepl
[13:36:09.434]                           restarts <- computeRestarts(cond)
[13:36:09.434]                           for (restart in restarts) {
[13:36:09.434]                             name <- restart$name
[13:36:09.434]                             if (is.null(name)) 
[13:36:09.434]                               next
[13:36:09.434]                             if (!grepl(pattern, name)) 
[13:36:09.434]                               next
[13:36:09.434]                             invokeRestart(restart)
[13:36:09.434]                             muffled <- TRUE
[13:36:09.434]                             break
[13:36:09.434]                           }
[13:36:09.434]                         }
[13:36:09.434]                       }
[13:36:09.434]                       invisible(muffled)
[13:36:09.434]                     }
[13:36:09.434]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.434]                   }
[13:36:09.434]                 }
[13:36:09.434]             }
[13:36:09.434]         }))
[13:36:09.434]     }, error = function(ex) {
[13:36:09.434]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:09.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.434]                 ...future.rng), started = ...future.startTime, 
[13:36:09.434]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:09.434]             version = "1.8"), class = "FutureResult")
[13:36:09.434]     }, finally = {
[13:36:09.434]         if (!identical(...future.workdir, getwd())) 
[13:36:09.434]             setwd(...future.workdir)
[13:36:09.434]         {
[13:36:09.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:09.434]                 ...future.oldOptions$nwarnings <- NULL
[13:36:09.434]             }
[13:36:09.434]             base::options(...future.oldOptions)
[13:36:09.434]             if (.Platform$OS.type == "windows") {
[13:36:09.434]                 old_names <- names(...future.oldEnvVars)
[13:36:09.434]                 envs <- base::Sys.getenv()
[13:36:09.434]                 names <- names(envs)
[13:36:09.434]                 common <- intersect(names, old_names)
[13:36:09.434]                 added <- setdiff(names, old_names)
[13:36:09.434]                 removed <- setdiff(old_names, names)
[13:36:09.434]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:09.434]                   envs[common]]
[13:36:09.434]                 NAMES <- toupper(changed)
[13:36:09.434]                 args <- list()
[13:36:09.434]                 for (kk in seq_along(NAMES)) {
[13:36:09.434]                   name <- changed[[kk]]
[13:36:09.434]                   NAME <- NAMES[[kk]]
[13:36:09.434]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.434]                     next
[13:36:09.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.434]                 }
[13:36:09.434]                 NAMES <- toupper(added)
[13:36:09.434]                 for (kk in seq_along(NAMES)) {
[13:36:09.434]                   name <- added[[kk]]
[13:36:09.434]                   NAME <- NAMES[[kk]]
[13:36:09.434]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.434]                     next
[13:36:09.434]                   args[[name]] <- ""
[13:36:09.434]                 }
[13:36:09.434]                 NAMES <- toupper(removed)
[13:36:09.434]                 for (kk in seq_along(NAMES)) {
[13:36:09.434]                   name <- removed[[kk]]
[13:36:09.434]                   NAME <- NAMES[[kk]]
[13:36:09.434]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.434]                     next
[13:36:09.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.434]                 }
[13:36:09.434]                 if (length(args) > 0) 
[13:36:09.434]                   base::do.call(base::Sys.setenv, args = args)
[13:36:09.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:09.434]             }
[13:36:09.434]             else {
[13:36:09.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:09.434]             }
[13:36:09.434]             {
[13:36:09.434]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:09.434]                   0L) {
[13:36:09.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:09.434]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:09.434]                   base::options(opts)
[13:36:09.434]                 }
[13:36:09.434]                 {
[13:36:09.434]                   {
[13:36:09.434]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:09.434]                     NULL
[13:36:09.434]                   }
[13:36:09.434]                   options(future.plan = NULL)
[13:36:09.434]                   if (is.na(NA_character_)) 
[13:36:09.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:09.434]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:09.434]                     .init = FALSE)
[13:36:09.434]                 }
[13:36:09.434]             }
[13:36:09.434]         }
[13:36:09.434]     })
[13:36:09.434]     if (TRUE) {
[13:36:09.434]         base::sink(type = "output", split = FALSE)
[13:36:09.434]         if (TRUE) {
[13:36:09.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:09.434]         }
[13:36:09.434]         else {
[13:36:09.434]             ...future.result["stdout"] <- base::list(NULL)
[13:36:09.434]         }
[13:36:09.434]         base::close(...future.stdout)
[13:36:09.434]         ...future.stdout <- NULL
[13:36:09.434]     }
[13:36:09.434]     ...future.result$conditions <- ...future.conditions
[13:36:09.434]     ...future.result$finished <- base::Sys.time()
[13:36:09.434]     ...future.result
[13:36:09.434] }
[13:36:09.436] Poll #1 (0): usedNodes() = 2, workers = 2
[13:36:09.461] receiveMessageFromWorker() for ClusterFuture ...
[13:36:09.461] - Validating connection of MultisessionFuture
[13:36:09.461] - received message: FutureResult
[13:36:09.462] - Received FutureResult
[13:36:09.462] - Erased future from FutureRegistry
[13:36:09.462] result() for ClusterFuture ...
[13:36:09.462] - result already collected: FutureResult
[13:36:09.462] result() for ClusterFuture ... done
[13:36:09.462] signalConditions() ...
[13:36:09.462]  - include = ‘immediateCondition’
[13:36:09.463]  - exclude = 
[13:36:09.463]  - resignal = FALSE
[13:36:09.463]  - Number of conditions: 2
[13:36:09.463] signalConditions() ... done
[13:36:09.463] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:09.463] result() for ClusterFuture ...
[13:36:09.463] - result already collected: FutureResult
[13:36:09.464] result() for ClusterFuture ... done
[13:36:09.464] result() for ClusterFuture ...
[13:36:09.464] - result already collected: FutureResult
[13:36:09.464] result() for ClusterFuture ... done
[13:36:09.464] signalConditions() ...
[13:36:09.464]  - include = ‘immediateCondition’
[13:36:09.464]  - exclude = 
[13:36:09.464]  - resignal = FALSE
[13:36:09.464]  - Number of conditions: 2
[13:36:09.465] signalConditions() ... done
[13:36:09.466] Exporting 4 global objects (14.24 KiB) to cluster node #1 ...
[13:36:09.466] Exporting ‘ii’ (56 bytes) to cluster node #1 ...
[13:36:09.466] Exporting ‘ii’ (56 bytes) to cluster node #1 ... DONE
[13:36:09.466] Exporting ‘n’ (56 bytes) to cluster node #1 ...
[13:36:09.467] Exporting ‘n’ (56 bytes) to cluster node #1 ... DONE
[13:36:09.467] Exporting ‘C’ (10.72 KiB) to cluster node #1 ...
[13:36:09.510] Exporting ‘C’ (10.72 KiB) to cluster node #1 ... DONE
[13:36:09.511] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ...
[13:36:09.555] Exporting ‘delay’ (3.41 KiB) to cluster node #1 ... DONE
[13:36:09.555] Exporting 4 global objects (14.24 KiB) to cluster node #1 ... DONE
[13:36:09.555] MultisessionFuture started
[13:36:09.556] - Launch lazy future ... done
[13:36:09.556] run() for ‘MultisessionFuture’ ... done
[13:36:09.556] - run() ... done
[13:36:09.556] - resolved() ...
[13:36:09.566] - resolved: FALSE
[13:36:09.567] - resolved() ... done
[13:36:09.567] resolved() for ‘MultisessionFuture’ ... done
[13:36:09.567] resolved() for ‘Future’ ...
[13:36:09.567] - state: ‘created’
[13:36:09.567] - run: TRUE
[13:36:09.567] - run() ...
[13:36:09.567] run() for ‘Future’ ...
[13:36:09.567] - state: ‘created’
[13:36:09.568] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:09.582] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:09.582] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:09.582]   - Field: ‘node’
[13:36:09.583]   - Field: ‘label’
[13:36:09.583]   - Field: ‘local’
[13:36:09.583]   - Field: ‘owner’
[13:36:09.583]   - Field: ‘envir’
[13:36:09.583]   - Field: ‘workers’
[13:36:09.583]   - Field: ‘packages’
[13:36:09.583]   - Field: ‘gc’
[13:36:09.583]   - Field: ‘conditions’
[13:36:09.583]   - Field: ‘persistent’
[13:36:09.583]   - Field: ‘expr’
[13:36:09.584]   - Field: ‘uuid’
[13:36:09.584]   - Field: ‘seed’
[13:36:09.584]   - Field: ‘version’
[13:36:09.584]   - Field: ‘result’
[13:36:09.584]   - Field: ‘asynchronous’
[13:36:09.584]   - Field: ‘calls’
[13:36:09.584]   - Field: ‘globals’
[13:36:09.584]   - Field: ‘stdout’
[13:36:09.584]   - Field: ‘earlySignal’
[13:36:09.584]   - Field: ‘lazy’
[13:36:09.584]   - Field: ‘state’
[13:36:09.585] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:09.585] - Launch lazy future ...
[13:36:09.585] Packages needed by the future expression (n = 1): ‘future’
[13:36:09.585] Packages needed by future strategies (n = 0): <none>
[13:36:09.586] {
[13:36:09.586]     {
[13:36:09.586]         {
[13:36:09.586]             ...future.startTime <- base::Sys.time()
[13:36:09.586]             {
[13:36:09.586]                 {
[13:36:09.586]                   {
[13:36:09.586]                     {
[13:36:09.586]                       {
[13:36:09.586]                         base::local({
[13:36:09.586]                           has_future <- base::requireNamespace("future", 
[13:36:09.586]                             quietly = TRUE)
[13:36:09.586]                           if (has_future) {
[13:36:09.586]                             ns <- base::getNamespace("future")
[13:36:09.586]                             version <- ns[[".package"]][["version"]]
[13:36:09.586]                             if (is.null(version)) 
[13:36:09.586]                               version <- utils::packageVersion("future")
[13:36:09.586]                           }
[13:36:09.586]                           else {
[13:36:09.586]                             version <- NULL
[13:36:09.586]                           }
[13:36:09.586]                           if (!has_future || version < "1.8.0") {
[13:36:09.586]                             info <- base::c(r_version = base::gsub("R version ", 
[13:36:09.586]                               "", base::R.version$version.string), 
[13:36:09.586]                               platform = base::sprintf("%s (%s-bit)", 
[13:36:09.586]                                 base::R.version$platform, 8 * 
[13:36:09.586]                                   base::.Machine$sizeof.pointer), 
[13:36:09.586]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:09.586]                                 "release", "version")], collapse = " "), 
[13:36:09.586]                               hostname = base::Sys.info()[["nodename"]])
[13:36:09.586]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:36:09.586]                               info)
[13:36:09.586]                             info <- base::paste(info, collapse = "; ")
[13:36:09.586]                             if (!has_future) {
[13:36:09.586]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:09.586]                                 info)
[13:36:09.586]                             }
[13:36:09.586]                             else {
[13:36:09.586]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:09.586]                                 info, version)
[13:36:09.586]                             }
[13:36:09.586]                             base::stop(msg)
[13:36:09.586]                           }
[13:36:09.586]                         })
[13:36:09.586]                       }
[13:36:09.586]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:09.586]                       base::options(mc.cores = 1L)
[13:36:09.586]                     }
[13:36:09.586]                     base::local({
[13:36:09.586]                       for (pkg in "future") {
[13:36:09.586]                         base::loadNamespace(pkg)
[13:36:09.586]                         base::library(pkg, character.only = TRUE)
[13:36:09.586]                       }
[13:36:09.586]                     })
[13:36:09.586]                   }
[13:36:09.586]                   ...future.strategy.old <- future::plan("list")
[13:36:09.586]                   options(future.plan = NULL)
[13:36:09.586]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.586]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:09.586]                 }
[13:36:09.586]                 ...future.workdir <- getwd()
[13:36:09.586]             }
[13:36:09.586]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:09.586]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:09.586]         }
[13:36:09.586]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:09.586]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:09.586]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:09.586]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:09.586]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:09.586]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:09.586]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:09.586]             base::names(...future.oldOptions))
[13:36:09.586]     }
[13:36:09.586]     if (FALSE) {
[13:36:09.586]     }
[13:36:09.586]     else {
[13:36:09.586]         if (TRUE) {
[13:36:09.586]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:09.586]                 open = "w")
[13:36:09.586]         }
[13:36:09.586]         else {
[13:36:09.586]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:09.586]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:09.586]         }
[13:36:09.586]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:09.586]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:09.586]             base::sink(type = "output", split = FALSE)
[13:36:09.586]             base::close(...future.stdout)
[13:36:09.586]         }, add = TRUE)
[13:36:09.586]     }
[13:36:09.586]     ...future.frame <- base::sys.nframe()
[13:36:09.586]     ...future.conditions <- base::list()
[13:36:09.586]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:09.586]     if (FALSE) {
[13:36:09.586]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:09.586]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:09.586]     }
[13:36:09.586]     ...future.result <- base::tryCatch({
[13:36:09.586]         base::withCallingHandlers({
[13:36:09.586]             ...future.value <- base::withVisible(base::local({
[13:36:09.586]                 ...future.makeSendCondition <- base::local({
[13:36:09.586]                   sendCondition <- NULL
[13:36:09.586]                   function(frame = 1L) {
[13:36:09.586]                     if (is.function(sendCondition)) 
[13:36:09.586]                       return(sendCondition)
[13:36:09.586]                     ns <- getNamespace("parallel")
[13:36:09.586]                     if (exists("sendData", mode = "function", 
[13:36:09.586]                       envir = ns)) {
[13:36:09.586]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:09.586]                         envir = ns)
[13:36:09.586]                       envir <- sys.frame(frame)
[13:36:09.586]                       master <- NULL
[13:36:09.586]                       while (!identical(envir, .GlobalEnv) && 
[13:36:09.586]                         !identical(envir, emptyenv())) {
[13:36:09.586]                         if (exists("master", mode = "list", envir = envir, 
[13:36:09.586]                           inherits = FALSE)) {
[13:36:09.586]                           master <- get("master", mode = "list", 
[13:36:09.586]                             envir = envir, inherits = FALSE)
[13:36:09.586]                           if (inherits(master, c("SOCKnode", 
[13:36:09.586]                             "SOCK0node"))) {
[13:36:09.586]                             sendCondition <<- function(cond) {
[13:36:09.586]                               data <- list(type = "VALUE", value = cond, 
[13:36:09.586]                                 success = TRUE)
[13:36:09.586]                               parallel_sendData(master, data)
[13:36:09.586]                             }
[13:36:09.586]                             return(sendCondition)
[13:36:09.586]                           }
[13:36:09.586]                         }
[13:36:09.586]                         frame <- frame + 1L
[13:36:09.586]                         envir <- sys.frame(frame)
[13:36:09.586]                       }
[13:36:09.586]                     }
[13:36:09.586]                     sendCondition <<- function(cond) NULL
[13:36:09.586]                   }
[13:36:09.586]                 })
[13:36:09.586]                 withCallingHandlers({
[13:36:09.586]                   {
[13:36:09.586]                     message(sprintf("Calculating tile #%d of %d ...", 
[13:36:09.586]                       ii, n), appendLF = FALSE)
[13:36:09.586]                     fit <- mandelbrot(C)
[13:36:09.586]                     delay(fit)
[13:36:09.586]                     message(" done")
[13:36:09.586]                     fit
[13:36:09.586]                   }
[13:36:09.586]                 }, immediateCondition = function(cond) {
[13:36:09.586]                   sendCondition <- ...future.makeSendCondition()
[13:36:09.586]                   sendCondition(cond)
[13:36:09.586]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.586]                   {
[13:36:09.586]                     inherits <- base::inherits
[13:36:09.586]                     invokeRestart <- base::invokeRestart
[13:36:09.586]                     is.null <- base::is.null
[13:36:09.586]                     muffled <- FALSE
[13:36:09.586]                     if (inherits(cond, "message")) {
[13:36:09.586]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:09.586]                       if (muffled) 
[13:36:09.586]                         invokeRestart("muffleMessage")
[13:36:09.586]                     }
[13:36:09.586]                     else if (inherits(cond, "warning")) {
[13:36:09.586]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:09.586]                       if (muffled) 
[13:36:09.586]                         invokeRestart("muffleWarning")
[13:36:09.586]                     }
[13:36:09.586]                     else if (inherits(cond, "condition")) {
[13:36:09.586]                       if (!is.null(pattern)) {
[13:36:09.586]                         computeRestarts <- base::computeRestarts
[13:36:09.586]                         grepl <- base::grepl
[13:36:09.586]                         restarts <- computeRestarts(cond)
[13:36:09.586]                         for (restart in restarts) {
[13:36:09.586]                           name <- restart$name
[13:36:09.586]                           if (is.null(name)) 
[13:36:09.586]                             next
[13:36:09.586]                           if (!grepl(pattern, name)) 
[13:36:09.586]                             next
[13:36:09.586]                           invokeRestart(restart)
[13:36:09.586]                           muffled <- TRUE
[13:36:09.586]                           break
[13:36:09.586]                         }
[13:36:09.586]                       }
[13:36:09.586]                     }
[13:36:09.586]                     invisible(muffled)
[13:36:09.586]                   }
[13:36:09.586]                   muffleCondition(cond)
[13:36:09.586]                 })
[13:36:09.586]             }))
[13:36:09.586]             future::FutureResult(value = ...future.value$value, 
[13:36:09.586]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.586]                   ...future.rng), globalenv = if (FALSE) 
[13:36:09.586]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:09.586]                     ...future.globalenv.names))
[13:36:09.586]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:09.586]         }, condition = base::local({
[13:36:09.586]             c <- base::c
[13:36:09.586]             inherits <- base::inherits
[13:36:09.586]             invokeRestart <- base::invokeRestart
[13:36:09.586]             length <- base::length
[13:36:09.586]             list <- base::list
[13:36:09.586]             seq.int <- base::seq.int
[13:36:09.586]             signalCondition <- base::signalCondition
[13:36:09.586]             sys.calls <- base::sys.calls
[13:36:09.586]             `[[` <- base::`[[`
[13:36:09.586]             `+` <- base::`+`
[13:36:09.586]             `<<-` <- base::`<<-`
[13:36:09.586]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:09.586]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:09.586]                   3L)]
[13:36:09.586]             }
[13:36:09.586]             function(cond) {
[13:36:09.586]                 is_error <- inherits(cond, "error")
[13:36:09.586]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:09.586]                   NULL)
[13:36:09.586]                 if (is_error) {
[13:36:09.586]                   sessionInformation <- function() {
[13:36:09.586]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:09.586]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:09.586]                       search = base::search(), system = base::Sys.info())
[13:36:09.586]                   }
[13:36:09.586]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.586]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:09.586]                     cond$call), session = sessionInformation(), 
[13:36:09.586]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:09.586]                   signalCondition(cond)
[13:36:09.586]                 }
[13:36:09.586]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:09.586]                 "immediateCondition"))) {
[13:36:09.586]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:09.586]                   ...future.conditions[[length(...future.conditions) + 
[13:36:09.586]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:09.586]                   if (TRUE && !signal) {
[13:36:09.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.586]                     {
[13:36:09.586]                       inherits <- base::inherits
[13:36:09.586]                       invokeRestart <- base::invokeRestart
[13:36:09.586]                       is.null <- base::is.null
[13:36:09.586]                       muffled <- FALSE
[13:36:09.586]                       if (inherits(cond, "message")) {
[13:36:09.586]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.586]                         if (muffled) 
[13:36:09.586]                           invokeRestart("muffleMessage")
[13:36:09.586]                       }
[13:36:09.586]                       else if (inherits(cond, "warning")) {
[13:36:09.586]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.586]                         if (muffled) 
[13:36:09.586]                           invokeRestart("muffleWarning")
[13:36:09.586]                       }
[13:36:09.586]                       else if (inherits(cond, "condition")) {
[13:36:09.586]                         if (!is.null(pattern)) {
[13:36:09.586]                           computeRestarts <- base::computeRestarts
[13:36:09.586]                           grepl <- base::grepl
[13:36:09.586]                           restarts <- computeRestarts(cond)
[13:36:09.586]                           for (restart in restarts) {
[13:36:09.586]                             name <- restart$name
[13:36:09.586]                             if (is.null(name)) 
[13:36:09.586]                               next
[13:36:09.586]                             if (!grepl(pattern, name)) 
[13:36:09.586]                               next
[13:36:09.586]                             invokeRestart(restart)
[13:36:09.586]                             muffled <- TRUE
[13:36:09.586]                             break
[13:36:09.586]                           }
[13:36:09.586]                         }
[13:36:09.586]                       }
[13:36:09.586]                       invisible(muffled)
[13:36:09.586]                     }
[13:36:09.586]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.586]                   }
[13:36:09.586]                 }
[13:36:09.586]                 else {
[13:36:09.586]                   if (TRUE) {
[13:36:09.586]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:09.586]                     {
[13:36:09.586]                       inherits <- base::inherits
[13:36:09.586]                       invokeRestart <- base::invokeRestart
[13:36:09.586]                       is.null <- base::is.null
[13:36:09.586]                       muffled <- FALSE
[13:36:09.586]                       if (inherits(cond, "message")) {
[13:36:09.586]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:09.586]                         if (muffled) 
[13:36:09.586]                           invokeRestart("muffleMessage")
[13:36:09.586]                       }
[13:36:09.586]                       else if (inherits(cond, "warning")) {
[13:36:09.586]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:09.586]                         if (muffled) 
[13:36:09.586]                           invokeRestart("muffleWarning")
[13:36:09.586]                       }
[13:36:09.586]                       else if (inherits(cond, "condition")) {
[13:36:09.586]                         if (!is.null(pattern)) {
[13:36:09.586]                           computeRestarts <- base::computeRestarts
[13:36:09.586]                           grepl <- base::grepl
[13:36:09.586]                           restarts <- computeRestarts(cond)
[13:36:09.586]                           for (restart in restarts) {
[13:36:09.586]                             name <- restart$name
[13:36:09.586]                             if (is.null(name)) 
[13:36:09.586]                               next
[13:36:09.586]                             if (!grepl(pattern, name)) 
[13:36:09.586]                               next
[13:36:09.586]                             invokeRestart(restart)
[13:36:09.586]                             muffled <- TRUE
[13:36:09.586]                             break
[13:36:09.586]                           }
[13:36:09.586]                         }
[13:36:09.586]                       }
[13:36:09.586]                       invisible(muffled)
[13:36:09.586]                     }
[13:36:09.586]                     muffleCondition(cond, pattern = "^muffle")
[13:36:09.586]                   }
[13:36:09.586]                 }
[13:36:09.586]             }
[13:36:09.586]         }))
[13:36:09.586]     }, error = function(ex) {
[13:36:09.586]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:09.586]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:09.586]                 ...future.rng), started = ...future.startTime, 
[13:36:09.586]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:09.586]             version = "1.8"), class = "FutureResult")
[13:36:09.586]     }, finally = {
[13:36:09.586]         if (!identical(...future.workdir, getwd())) 
[13:36:09.586]             setwd(...future.workdir)
[13:36:09.586]         {
[13:36:09.586]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:09.586]                 ...future.oldOptions$nwarnings <- NULL
[13:36:09.586]             }
[13:36:09.586]             base::options(...future.oldOptions)
[13:36:09.586]             if (.Platform$OS.type == "windows") {
[13:36:09.586]                 old_names <- names(...future.oldEnvVars)
[13:36:09.586]                 envs <- base::Sys.getenv()
[13:36:09.586]                 names <- names(envs)
[13:36:09.586]                 common <- intersect(names, old_names)
[13:36:09.586]                 added <- setdiff(names, old_names)
[13:36:09.586]                 removed <- setdiff(old_names, names)
[13:36:09.586]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:09.586]                   envs[common]]
[13:36:09.586]                 NAMES <- toupper(changed)
[13:36:09.586]                 args <- list()
[13:36:09.586]                 for (kk in seq_along(NAMES)) {
[13:36:09.586]                   name <- changed[[kk]]
[13:36:09.586]                   NAME <- NAMES[[kk]]
[13:36:09.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.586]                     next
[13:36:09.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.586]                 }
[13:36:09.586]                 NAMES <- toupper(added)
[13:36:09.586]                 for (kk in seq_along(NAMES)) {
[13:36:09.586]                   name <- added[[kk]]
[13:36:09.586]                   NAME <- NAMES[[kk]]
[13:36:09.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.586]                     next
[13:36:09.586]                   args[[name]] <- ""
[13:36:09.586]                 }
[13:36:09.586]                 NAMES <- toupper(removed)
[13:36:09.586]                 for (kk in seq_along(NAMES)) {
[13:36:09.586]                   name <- removed[[kk]]
[13:36:09.586]                   NAME <- NAMES[[kk]]
[13:36:09.586]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:09.586]                     next
[13:36:09.586]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:09.586]                 }
[13:36:09.586]                 if (length(args) > 0) 
[13:36:09.586]                   base::do.call(base::Sys.setenv, args = args)
[13:36:09.586]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:09.586]             }
[13:36:09.586]             else {
[13:36:09.586]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:09.586]             }
[13:36:09.586]             {
[13:36:09.586]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:09.586]                   0L) {
[13:36:09.586]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:09.586]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:09.586]                   base::options(opts)
[13:36:09.586]                 }
[13:36:09.586]                 {
[13:36:09.586]                   {
[13:36:09.586]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:09.586]                     NULL
[13:36:09.586]                   }
[13:36:09.586]                   options(future.plan = NULL)
[13:36:09.586]                   if (is.na(NA_character_)) 
[13:36:09.586]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:09.586]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:09.586]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:09.586]                     .init = FALSE)
[13:36:09.586]                 }
[13:36:09.586]             }
[13:36:09.586]         }
[13:36:09.586]     })
[13:36:09.586]     if (TRUE) {
[13:36:09.586]         base::sink(type = "output", split = FALSE)
[13:36:09.586]         if (TRUE) {
[13:36:09.586]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:09.586]         }
[13:36:09.586]         else {
[13:36:09.586]             ...future.result["stdout"] <- base::list(NULL)
[13:36:09.586]         }
[13:36:09.586]         base::close(...future.stdout)
[13:36:09.586]         ...future.stdout <- NULL
[13:36:09.586]     }
[13:36:09.586]     ...future.result$conditions <- ...future.conditions
[13:36:09.586]     ...future.result$finished <- base::Sys.time()
[13:36:09.586]     ...future.result
[13:36:09.586] }
[13:36:09.588] Poll #1 (0): usedNodes() = 2, workers = 2
[13:36:09.599] receiveMessageFromWorker() for ClusterFuture ...
[13:36:09.599] - Validating connection of MultisessionFuture
[13:36:09.599] - received message: FutureResult
[13:36:09.599] - Received FutureResult
[13:36:09.599] - Erased future from FutureRegistry
[13:36:09.600] result() for ClusterFuture ...
[13:36:09.600] - result already collected: FutureResult
[13:36:09.600] result() for ClusterFuture ... done
[13:36:09.600] signalConditions() ...
[13:36:09.600]  - include = ‘immediateCondition’
[13:36:09.600]  - exclude = 
[13:36:09.600]  - resignal = FALSE
[13:36:09.600]  - Number of conditions: 2
[13:36:09.600] signalConditions() ... done
[13:36:09.600] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:09.601] result() for ClusterFuture ...
[13:36:09.601] - result already collected: FutureResult
[13:36:09.601] result() for ClusterFuture ... done
[13:36:09.601] result() for ClusterFuture ...
[13:36:09.601] - result already collected: FutureResult
[13:36:09.601] result() for ClusterFuture ... done
[13:36:09.601] signalConditions() ...
[13:36:09.601]  - include = ‘immediateCondition’
[13:36:09.601]  - exclude = 
[13:36:09.601]  - resignal = FALSE
[13:36:09.601]  - Number of conditions: 2
[13:36:09.601] signalConditions() ... done
[13:36:09.602] Exporting 4 global objects (14.24 KiB) to cluster node #2 ...
[13:36:09.602] Exporting ‘ii’ (56 bytes) to cluster node #2 ...
[13:36:09.603] Exporting ‘ii’ (56 bytes) to cluster node #2 ... DONE
[13:36:09.603] Exporting ‘n’ (56 bytes) to cluster node #2 ...
[13:36:09.603] Exporting ‘n’ (56 bytes) to cluster node #2 ... DONE
[13:36:09.603] Exporting ‘C’ (10.72 KiB) to cluster node #2 ...
[13:36:09.646] Exporting ‘C’ (10.72 KiB) to cluster node #2 ... DONE
[13:36:09.647] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ...
[13:36:09.691] Exporting ‘delay’ (3.41 KiB) to cluster node #2 ... DONE
[13:36:09.691] Exporting 4 global objects (14.24 KiB) to cluster node #2 ... DONE
[13:36:09.692] MultisessionFuture started
[13:36:09.692] - Launch lazy future ... done
[13:36:09.692] run() for ‘MultisessionFuture’ ... done
[13:36:09.692] - run() ... done
[13:36:09.692] - resolved() ...
[13:36:09.702] - resolved: FALSE
[13:36:09.703] - resolved() ... done
[13:36:09.703] resolved() for ‘MultisessionFuture’ ... done
Plotting tile #1 of 4 ...
[13:36:09.703] result() for ClusterFuture ...
[13:36:09.703] - result already collected: FutureResult
[13:36:09.703] result() for ClusterFuture ... done
[13:36:09.703] result() for ClusterFuture ...
[13:36:09.703] - result already collected: FutureResult
[13:36:09.703] result() for ClusterFuture ... done
[13:36:09.704] signalConditions() ...
[13:36:09.704]  - include = ‘immediateCondition’
[13:36:09.704]  - exclude = 
[13:36:09.704]  - resignal = FALSE
[13:36:09.704]  - Number of conditions: 2
[13:36:09.704] signalConditions() ... done
[13:36:09.704] Future state: ‘finished’
[13:36:09.704] result() for ClusterFuture ...
[13:36:09.704] - result already collected: FutureResult
[13:36:09.704] result() for ClusterFuture ... done
[13:36:09.704] signalConditions() ...
[13:36:09.705]  - include = ‘condition’
[13:36:09.705]  - exclude = ‘immediateCondition’
[13:36:09.705]  - resignal = TRUE
[13:36:09.705]  - Number of conditions: 2
[13:36:09.705]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #1 of 4 ...[13:36:09.705]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:09.705] signalConditions() ... done
Plotting tile #2 of 4 ...
[13:36:09.708] result() for ClusterFuture ...
[13:36:09.708] - result already collected: FutureResult
[13:36:09.709] result() for ClusterFuture ... done
[13:36:09.709] result() for ClusterFuture ...
[13:36:09.709] - result already collected: FutureResult
[13:36:09.709] result() for ClusterFuture ... done
[13:36:09.709] signalConditions() ...
[13:36:09.709]  - include = ‘immediateCondition’
[13:36:09.709]  - exclude = 
[13:36:09.709]  - resignal = FALSE
[13:36:09.709]  - Number of conditions: 2
[13:36:09.709] signalConditions() ... done
[13:36:09.709] Future state: ‘finished’
[13:36:09.710] result() for ClusterFuture ...
[13:36:09.710] - result already collected: FutureResult
[13:36:09.710] result() for ClusterFuture ... done
[13:36:09.710] signalConditions() ...
[13:36:09.710]  - include = ‘condition’
[13:36:09.710]  - exclude = ‘immediateCondition’
[13:36:09.710]  - resignal = TRUE
[13:36:09.710]  - Number of conditions: 2
[13:36:09.710]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #2 of 4 ...[13:36:09.710]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:09.710] signalConditions() ... done
[13:36:09.711] receiveMessageFromWorker() for ClusterFuture ...
[13:36:09.711] - Validating connection of MultisessionFuture
[13:36:09.712] - received message: FutureResult
[13:36:09.712] - Received FutureResult
[13:36:09.712] - Erased future from FutureRegistry
[13:36:09.712] result() for ClusterFuture ...
[13:36:09.712] - result already collected: FutureResult
[13:36:09.712] result() for ClusterFuture ... done
[13:36:09.712] signalConditions() ...
[13:36:09.713]  - include = ‘immediateCondition’
[13:36:09.713]  - exclude = 
[13:36:09.713]  - resignal = FALSE
[13:36:09.713]  - Number of conditions: 2
[13:36:09.713] signalConditions() ... done
[13:36:09.713] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #3 of 4 ...
[13:36:09.713] result() for ClusterFuture ...
[13:36:09.713] - result already collected: FutureResult
[13:36:09.713] result() for ClusterFuture ... done
[13:36:09.713] result() for ClusterFuture ...
[13:36:09.713] - result already collected: FutureResult
[13:36:09.714] result() for ClusterFuture ... done
[13:36:09.714] signalConditions() ...
[13:36:09.714]  - include = ‘immediateCondition’
[13:36:09.714]  - exclude = 
[13:36:09.714]  - resignal = FALSE
[13:36:09.714]  - Number of conditions: 2
[13:36:09.714] signalConditions() ... done
[13:36:09.714] Future state: ‘finished’
[13:36:09.714] result() for ClusterFuture ...
[13:36:09.714] - result already collected: FutureResult
[13:36:09.714] result() for ClusterFuture ... done
[13:36:09.715] signalConditions() ...
[13:36:09.715]  - include = ‘condition’
[13:36:09.715]  - exclude = ‘immediateCondition’
[13:36:09.715]  - resignal = TRUE
[13:36:09.715]  - Number of conditions: 2
[13:36:09.715]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #3 of 4 ...[13:36:09.715]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:09.715] signalConditions() ... done
[13:36:09.752] receiveMessageFromWorker() for ClusterFuture ...
[13:36:09.752] - Validating connection of MultisessionFuture
[13:36:09.753] - received message: FutureResult
[13:36:09.753] - Received FutureResult
[13:36:09.753] - Erased future from FutureRegistry
[13:36:09.753] result() for ClusterFuture ...
[13:36:09.753] - result already collected: FutureResult
[13:36:09.753] result() for ClusterFuture ... done
[13:36:09.753] signalConditions() ...
[13:36:09.753]  - include = ‘immediateCondition’
[13:36:09.753]  - exclude = 
[13:36:09.754]  - resignal = FALSE
[13:36:09.754]  - Number of conditions: 2
[13:36:09.754] signalConditions() ... done
[13:36:09.754] receiveMessageFromWorker() for ClusterFuture ... done
Plotting tile #4 of 4 ...
[13:36:09.754] result() for ClusterFuture ...
[13:36:09.754] - result already collected: FutureResult
[13:36:09.754] result() for ClusterFuture ... done
[13:36:09.754] result() for ClusterFuture ...
[13:36:09.754] - result already collected: FutureResult
[13:36:09.754] result() for ClusterFuture ... done
[13:36:09.755] signalConditions() ...
[13:36:09.755]  - include = ‘immediateCondition’
[13:36:09.755]  - exclude = 
[13:36:09.755]  - resignal = FALSE
[13:36:09.755]  - Number of conditions: 2
[13:36:09.755] signalConditions() ... done
[13:36:09.755] Future state: ‘finished’
[13:36:09.755] result() for ClusterFuture ...
[13:36:09.755] - result already collected: FutureResult
[13:36:09.755] result() for ClusterFuture ... done
[13:36:09.755] signalConditions() ...
[13:36:09.755]  - include = ‘condition’
[13:36:09.756]  - exclude = ‘immediateCondition’
[13:36:09.756]  - resignal = TRUE
[13:36:09.756]  - Number of conditions: 2
[13:36:09.756]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
Calculating tile #4 of 4 ...[13:36:09.756]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
 done
[13:36:09.756] signalConditions() ... done

> close.screen()
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

> message("SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).\n")
SUGGESTION: Try to rerun this demo after changing strategy for how futures are resolved, e.g. plan(multisession).

- plan('multisession') ... DONE
Testing with 2 cores ... DONE
> message("*** Mandelbrot demo of the 'future' package ... DONE")
*** Mandelbrot demo of the 'future' package ... DONE
> 
> message("*** Demos ... DONE")
*** Demos ... DONE
> 
> source("incl/end.R")
[13:36:09.758] plan(): Setting new future strategy stack:
[13:36:09.758] List of future strategies:
[13:36:09.758] 1. sequential:
[13:36:09.758]    - args: function (..., envir = parent.frame())
[13:36:09.758]    - tweaked: FALSE
[13:36:09.758]    - call: future::plan("sequential")
[13:36:09.759] plan(): nbrOfWorkers() = 1
> 
