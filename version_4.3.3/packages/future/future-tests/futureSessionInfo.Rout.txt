
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:39.275] plan(): Setting new future strategy stack:
[13:36:39.276] List of future strategies:
[13:36:39.276] 1. sequential:
[13:36:39.276]    - args: function (..., envir = parent.frame())
[13:36:39.276]    - tweaked: FALSE
[13:36:39.276]    - call: future::plan("sequential")
[13:36:39.290] plan(): nbrOfWorkers() = 1
> 
> message("*** futureSessionInfo() ...")
*** futureSessionInfo() ...
> 
> message(" - test = FALSE")
 - test = FALSE
> futureSessionInfo(test = FALSE)
*** Package versions
future 1.33.2, parallelly 1.37.1, parallel 4.3.3, globals 0.16.3, listenv 0.9.1

*** Allocations
availableCores():
  system    nproc mc.cores 
       4        4        2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
> 
> message(" - test = TRUE")
 - test = TRUE
> futureSessionInfo(test = TRUE)
*** Package versions
future 1.33.2, parallelly 1.37.1, parallel 4.3.3, globals 0.16.3, listenv 0.9.1

*** Allocations
availableCores():
  system    nproc mc.cores 
       4        4        2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame())
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
Main R session details:
    pid     r sysname          release
1 83229 4.3.3   Linux 6.5.0-1025-azure
                                              version nodename machine   login
1 #26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024  host001  x86_64 user002
     user effective_user
1 user001        user001
[13:36:39.326] getGlobalsAndPackages() ...
[13:36:39.326] Searching for globals...
[13:36:39.333] - globals found: [9] ‘{’, ‘Sys.sleep’, ‘delay’, ‘data.frame’, ‘ii’, ‘Sys.getpid’, ‘getRversion’, ‘as.list’, ‘Sys.info’
[13:36:39.333] Searching for globals ... DONE
[13:36:39.334] Resolving globals: FALSE
[13:36:39.335] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:39.335] The total size of the 2 globals exported for future expression (‘{; Sys.sleep(delay); data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(),; as.list(Sys.info())); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘delay’ (56 bytes of class ‘numeric’) and ‘ii’ (56 bytes of class ‘numeric’)
[13:36:39.335] - globals: [2] ‘delay’, ‘ii’
[13:36:39.335] 
[13:36:39.336] getGlobalsAndPackages() ... DONE
[13:36:39.336] run() for ‘Future’ ...
[13:36:39.336] - state: ‘created’
[13:36:39.337] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:39.337] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:39.337] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:39.337]   - Field: ‘label’
[13:36:39.337]   - Field: ‘local’
[13:36:39.337]   - Field: ‘owner’
[13:36:39.337]   - Field: ‘envir’
[13:36:39.337]   - Field: ‘packages’
[13:36:39.338]   - Field: ‘gc’
[13:36:39.338]   - Field: ‘conditions’
[13:36:39.338]   - Field: ‘expr’
[13:36:39.338]   - Field: ‘uuid’
[13:36:39.338]   - Field: ‘seed’
[13:36:39.338]   - Field: ‘version’
[13:36:39.338]   - Field: ‘result’
[13:36:39.338]   - Field: ‘asynchronous’
[13:36:39.338]   - Field: ‘calls’
[13:36:39.338]   - Field: ‘globals’
[13:36:39.339]   - Field: ‘stdout’
[13:36:39.339]   - Field: ‘earlySignal’
[13:36:39.339]   - Field: ‘lazy’
[13:36:39.339]   - Field: ‘state’
[13:36:39.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:39.339] - Launch lazy future ...
[13:36:39.340] Packages needed by the future expression (n = 0): <none>
[13:36:39.340] Packages needed by future strategies (n = 0): <none>
[13:36:39.343] {
[13:36:39.343]     {
[13:36:39.343]         {
[13:36:39.343]             ...future.startTime <- base::Sys.time()
[13:36:39.343]             {
[13:36:39.343]                 {
[13:36:39.343]                   {
[13:36:39.343]                     base::local({
[13:36:39.343]                       has_future <- base::requireNamespace("future", 
[13:36:39.343]                         quietly = TRUE)
[13:36:39.343]                       if (has_future) {
[13:36:39.343]                         ns <- base::getNamespace("future")
[13:36:39.343]                         version <- ns[[".package"]][["version"]]
[13:36:39.343]                         if (is.null(version)) 
[13:36:39.343]                           version <- utils::packageVersion("future")
[13:36:39.343]                       }
[13:36:39.343]                       else {
[13:36:39.343]                         version <- NULL
[13:36:39.343]                       }
[13:36:39.343]                       if (!has_future || version < "1.8.0") {
[13:36:39.343]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:39.343]                           "", base::R.version$version.string), 
[13:36:39.343]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:39.343]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:39.343]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:39.343]                             "release", "version")], collapse = " "), 
[13:36:39.343]                           hostname = base::Sys.info()[["nodename"]])
[13:36:39.343]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:39.343]                           info)
[13:36:39.343]                         info <- base::paste(info, collapse = "; ")
[13:36:39.343]                         if (!has_future) {
[13:36:39.343]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:39.343]                             info)
[13:36:39.343]                         }
[13:36:39.343]                         else {
[13:36:39.343]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:39.343]                             info, version)
[13:36:39.343]                         }
[13:36:39.343]                         base::stop(msg)
[13:36:39.343]                       }
[13:36:39.343]                     })
[13:36:39.343]                   }
[13:36:39.343]                   ...future.strategy.old <- future::plan("list")
[13:36:39.343]                   options(future.plan = NULL)
[13:36:39.343]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:39.343]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:39.343]                 }
[13:36:39.343]                 ...future.workdir <- getwd()
[13:36:39.343]             }
[13:36:39.343]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:39.343]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:39.343]         }
[13:36:39.343]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:39.343]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:39.343]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:39.343]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:39.343]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:39.343]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:39.343]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:39.343]             base::names(...future.oldOptions))
[13:36:39.343]     }
[13:36:39.343]     if (FALSE) {
[13:36:39.343]     }
[13:36:39.343]     else {
[13:36:39.343]         if (TRUE) {
[13:36:39.343]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:39.343]                 open = "w")
[13:36:39.343]         }
[13:36:39.343]         else {
[13:36:39.343]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:39.343]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:39.343]         }
[13:36:39.343]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:39.343]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:39.343]             base::sink(type = "output", split = FALSE)
[13:36:39.343]             base::close(...future.stdout)
[13:36:39.343]         }, add = TRUE)
[13:36:39.343]     }
[13:36:39.343]     ...future.frame <- base::sys.nframe()
[13:36:39.343]     ...future.conditions <- base::list()
[13:36:39.343]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:39.343]     if (FALSE) {
[13:36:39.343]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:39.343]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:39.343]     }
[13:36:39.343]     ...future.result <- base::tryCatch({
[13:36:39.343]         base::withCallingHandlers({
[13:36:39.343]             ...future.value <- base::withVisible(base::local({
[13:36:39.343]                 Sys.sleep(delay)
[13:36:39.343]                 data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(), 
[13:36:39.343]                   as.list(Sys.info()))
[13:36:39.343]             }))
[13:36:39.343]             future::FutureResult(value = ...future.value$value, 
[13:36:39.343]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:39.343]                   ...future.rng), globalenv = if (FALSE) 
[13:36:39.343]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:39.343]                     ...future.globalenv.names))
[13:36:39.343]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:39.343]         }, condition = base::local({
[13:36:39.343]             c <- base::c
[13:36:39.343]             inherits <- base::inherits
[13:36:39.343]             invokeRestart <- base::invokeRestart
[13:36:39.343]             length <- base::length
[13:36:39.343]             list <- base::list
[13:36:39.343]             seq.int <- base::seq.int
[13:36:39.343]             signalCondition <- base::signalCondition
[13:36:39.343]             sys.calls <- base::sys.calls
[13:36:39.343]             `[[` <- base::`[[`
[13:36:39.343]             `+` <- base::`+`
[13:36:39.343]             `<<-` <- base::`<<-`
[13:36:39.343]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:39.343]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:39.343]                   3L)]
[13:36:39.343]             }
[13:36:39.343]             function(cond) {
[13:36:39.343]                 is_error <- inherits(cond, "error")
[13:36:39.343]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:39.343]                   NULL)
[13:36:39.343]                 if (is_error) {
[13:36:39.343]                   sessionInformation <- function() {
[13:36:39.343]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:39.343]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:39.343]                       search = base::search(), system = base::Sys.info())
[13:36:39.343]                   }
[13:36:39.343]                   ...future.conditions[[length(...future.conditions) + 
[13:36:39.343]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:39.343]                     cond$call), session = sessionInformation(), 
[13:36:39.343]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:39.343]                   signalCondition(cond)
[13:36:39.343]                 }
[13:36:39.343]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:39.343]                 "immediateCondition"))) {
[13:36:39.343]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:39.343]                   ...future.conditions[[length(...future.conditions) + 
[13:36:39.343]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:39.343]                   if (TRUE && !signal) {
[13:36:39.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:39.343]                     {
[13:36:39.343]                       inherits <- base::inherits
[13:36:39.343]                       invokeRestart <- base::invokeRestart
[13:36:39.343]                       is.null <- base::is.null
[13:36:39.343]                       muffled <- FALSE
[13:36:39.343]                       if (inherits(cond, "message")) {
[13:36:39.343]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:39.343]                         if (muffled) 
[13:36:39.343]                           invokeRestart("muffleMessage")
[13:36:39.343]                       }
[13:36:39.343]                       else if (inherits(cond, "warning")) {
[13:36:39.343]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:39.343]                         if (muffled) 
[13:36:39.343]                           invokeRestart("muffleWarning")
[13:36:39.343]                       }
[13:36:39.343]                       else if (inherits(cond, "condition")) {
[13:36:39.343]                         if (!is.null(pattern)) {
[13:36:39.343]                           computeRestarts <- base::computeRestarts
[13:36:39.343]                           grepl <- base::grepl
[13:36:39.343]                           restarts <- computeRestarts(cond)
[13:36:39.343]                           for (restart in restarts) {
[13:36:39.343]                             name <- restart$name
[13:36:39.343]                             if (is.null(name)) 
[13:36:39.343]                               next
[13:36:39.343]                             if (!grepl(pattern, name)) 
[13:36:39.343]                               next
[13:36:39.343]                             invokeRestart(restart)
[13:36:39.343]                             muffled <- TRUE
[13:36:39.343]                             break
[13:36:39.343]                           }
[13:36:39.343]                         }
[13:36:39.343]                       }
[13:36:39.343]                       invisible(muffled)
[13:36:39.343]                     }
[13:36:39.343]                     muffleCondition(cond, pattern = "^muffle")
[13:36:39.343]                   }
[13:36:39.343]                 }
[13:36:39.343]                 else {
[13:36:39.343]                   if (TRUE) {
[13:36:39.343]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:39.343]                     {
[13:36:39.343]                       inherits <- base::inherits
[13:36:39.343]                       invokeRestart <- base::invokeRestart
[13:36:39.343]                       is.null <- base::is.null
[13:36:39.343]                       muffled <- FALSE
[13:36:39.343]                       if (inherits(cond, "message")) {
[13:36:39.343]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:39.343]                         if (muffled) 
[13:36:39.343]                           invokeRestart("muffleMessage")
[13:36:39.343]                       }
[13:36:39.343]                       else if (inherits(cond, "warning")) {
[13:36:39.343]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:39.343]                         if (muffled) 
[13:36:39.343]                           invokeRestart("muffleWarning")
[13:36:39.343]                       }
[13:36:39.343]                       else if (inherits(cond, "condition")) {
[13:36:39.343]                         if (!is.null(pattern)) {
[13:36:39.343]                           computeRestarts <- base::computeRestarts
[13:36:39.343]                           grepl <- base::grepl
[13:36:39.343]                           restarts <- computeRestarts(cond)
[13:36:39.343]                           for (restart in restarts) {
[13:36:39.343]                             name <- restart$name
[13:36:39.343]                             if (is.null(name)) 
[13:36:39.343]                               next
[13:36:39.343]                             if (!grepl(pattern, name)) 
[13:36:39.343]                               next
[13:36:39.343]                             invokeRestart(restart)
[13:36:39.343]                             muffled <- TRUE
[13:36:39.343]                             break
[13:36:39.343]                           }
[13:36:39.343]                         }
[13:36:39.343]                       }
[13:36:39.343]                       invisible(muffled)
[13:36:39.343]                     }
[13:36:39.343]                     muffleCondition(cond, pattern = "^muffle")
[13:36:39.343]                   }
[13:36:39.343]                 }
[13:36:39.343]             }
[13:36:39.343]         }))
[13:36:39.343]     }, error = function(ex) {
[13:36:39.343]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:39.343]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:39.343]                 ...future.rng), started = ...future.startTime, 
[13:36:39.343]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:39.343]             version = "1.8"), class = "FutureResult")
[13:36:39.343]     }, finally = {
[13:36:39.343]         if (!identical(...future.workdir, getwd())) 
[13:36:39.343]             setwd(...future.workdir)
[13:36:39.343]         {
[13:36:39.343]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:39.343]                 ...future.oldOptions$nwarnings <- NULL
[13:36:39.343]             }
[13:36:39.343]             base::options(...future.oldOptions)
[13:36:39.343]             if (.Platform$OS.type == "windows") {
[13:36:39.343]                 old_names <- names(...future.oldEnvVars)
[13:36:39.343]                 envs <- base::Sys.getenv()
[13:36:39.343]                 names <- names(envs)
[13:36:39.343]                 common <- intersect(names, old_names)
[13:36:39.343]                 added <- setdiff(names, old_names)
[13:36:39.343]                 removed <- setdiff(old_names, names)
[13:36:39.343]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:39.343]                   envs[common]]
[13:36:39.343]                 NAMES <- toupper(changed)
[13:36:39.343]                 args <- list()
[13:36:39.343]                 for (kk in seq_along(NAMES)) {
[13:36:39.343]                   name <- changed[[kk]]
[13:36:39.343]                   NAME <- NAMES[[kk]]
[13:36:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:39.343]                     next
[13:36:39.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:39.343]                 }
[13:36:39.343]                 NAMES <- toupper(added)
[13:36:39.343]                 for (kk in seq_along(NAMES)) {
[13:36:39.343]                   name <- added[[kk]]
[13:36:39.343]                   NAME <- NAMES[[kk]]
[13:36:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:39.343]                     next
[13:36:39.343]                   args[[name]] <- ""
[13:36:39.343]                 }
[13:36:39.343]                 NAMES <- toupper(removed)
[13:36:39.343]                 for (kk in seq_along(NAMES)) {
[13:36:39.343]                   name <- removed[[kk]]
[13:36:39.343]                   NAME <- NAMES[[kk]]
[13:36:39.343]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:39.343]                     next
[13:36:39.343]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:39.343]                 }
[13:36:39.343]                 if (length(args) > 0) 
[13:36:39.343]                   base::do.call(base::Sys.setenv, args = args)
[13:36:39.343]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:39.343]             }
[13:36:39.343]             else {
[13:36:39.343]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:39.343]             }
[13:36:39.343]             {
[13:36:39.343]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:39.343]                   0L) {
[13:36:39.343]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:39.343]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:39.343]                   base::options(opts)
[13:36:39.343]                 }
[13:36:39.343]                 {
[13:36:39.343]                   {
[13:36:39.343]                     NULL
[13:36:39.343]                     RNGkind("Mersenne-Twister")
[13:36:39.343]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:39.343]                       inherits = FALSE)
[13:36:39.343]                   }
[13:36:39.343]                   options(future.plan = NULL)
[13:36:39.343]                   if (is.na(NA_character_)) 
[13:36:39.343]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:39.343]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:39.343]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:39.343]                     .init = FALSE)
[13:36:39.343]                 }
[13:36:39.343]             }
[13:36:39.343]         }
[13:36:39.343]     })
[13:36:39.343]     if (TRUE) {
[13:36:39.343]         base::sink(type = "output", split = FALSE)
[13:36:39.343]         if (TRUE) {
[13:36:39.343]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:39.343]         }
[13:36:39.343]         else {
[13:36:39.343]             ...future.result["stdout"] <- base::list(NULL)
[13:36:39.343]         }
[13:36:39.343]         base::close(...future.stdout)
[13:36:39.343]         ...future.stdout <- NULL
[13:36:39.343]     }
[13:36:39.343]     ...future.result$conditions <- ...future.conditions
[13:36:39.343]     ...future.result$finished <- base::Sys.time()
[13:36:39.343]     ...future.result
[13:36:39.343] }
[13:36:39.345] assign_globals() ...
[13:36:39.345] List of 2
[13:36:39.345]  $ delay: num 1
[13:36:39.345]  $ ii   : int 1
[13:36:39.345]  - attr(*, "where")=List of 2
[13:36:39.345]   ..$ delay:<environment: R_EmptyEnv> 
[13:36:39.345]   ..$ ii   :<environment: R_EmptyEnv> 
[13:36:39.345]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:39.345]  - attr(*, "resolved")= logi FALSE
[13:36:39.345]  - attr(*, "total_size")= num 112
[13:36:39.345]  - attr(*, "already-done")= logi TRUE
[13:36:39.350] - copied ‘delay’ to environment
[13:36:39.350] - copied ‘ii’ to environment
[13:36:39.350] assign_globals() ... done
[13:36:39.350] plan(): Setting new future strategy stack:
[13:36:39.350] List of future strategies:
[13:36:39.350] 1. sequential:
[13:36:39.350]    - args: function (..., envir = parent.frame())
[13:36:39.350]    - tweaked: FALSE
[13:36:39.350]    - call: NULL
[13:36:39.351] plan(): nbrOfWorkers() = 1
[13:36:40.354] plan(): Setting new future strategy stack:
[13:36:40.354] List of future strategies:
[13:36:40.354] 1. sequential:
[13:36:40.354]    - args: function (..., envir = parent.frame())
[13:36:40.354]    - tweaked: FALSE
[13:36:40.354]    - call: future::plan("sequential")
[13:36:40.355] plan(): nbrOfWorkers() = 1
[13:36:40.355] SequentialFuture started (and completed)
[13:36:40.356] - Launch lazy future ... done
[13:36:40.356] run() for ‘SequentialFuture’ ... done
[13:36:40.357] resolve() on list ...
[13:36:40.357]  recursive: 0
[13:36:40.357]  length: 1
[13:36:40.357] 
[13:36:40.357] resolved() for ‘SequentialFuture’ ...
[13:36:40.357] - state: ‘finished’
[13:36:40.358] - run: TRUE
[13:36:40.358] - result: ‘FutureResult’
[13:36:40.358] resolved() for ‘SequentialFuture’ ... done
[13:36:40.358] Future #1
[13:36:40.358] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:36:40.358] - nx: 1
[13:36:40.358] - relay: TRUE
[13:36:40.359] - stdout: TRUE
[13:36:40.359] - signal: TRUE
[13:36:40.359] - resignal: FALSE
[13:36:40.359] - force: TRUE
[13:36:40.359] - relayed: [n=1] FALSE
[13:36:40.359] - queued futures: [n=1] FALSE
[13:36:40.359]  - until=1
[13:36:40.359]  - relaying element #1
[13:36:40.359] - relayed: [n=1] TRUE
[13:36:40.359] - queued futures: [n=1] TRUE
[13:36:40.360] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:36:40.360]  length: 0 (resolved future 1)
[13:36:40.360] Relaying remaining futures
[13:36:40.360] signalConditionsASAP(NULL, pos=0) ...
[13:36:40.360] - nx: 1
[13:36:40.360] - relay: TRUE
[13:36:40.360] - stdout: TRUE
[13:36:40.360] - signal: TRUE
[13:36:40.360] - resignal: FALSE
[13:36:40.360] - force: TRUE
[13:36:40.360] - relayed: [n=1] TRUE
[13:36:40.361] - queued futures: [n=1] TRUE
 - flush all
[13:36:40.361] - relayed: [n=1] TRUE
[13:36:40.361] - queued futures: [n=1] TRUE
[13:36:40.361] signalConditionsASAP(NULL, pos=0) ... done
[13:36:40.361] resolve() on list ... DONE
Worker R session details:
  worker   pid     r sysname          release
1      1 83229 4.3.3   Linux 6.5.0-1025-azure
                                              version nodename machine   login
1 #26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024  host001  x86_64 user002
     user effective_user
1 user001        user001
Number of unique worker PIDs: 1 (as expected)
> 
> message("*** futureSessionInfo() ... DONE")
*** futureSessionInfo() ... DONE
> 
> source("incl/end.R")
[13:36:40.364] plan(): Setting new future strategy stack:
[13:36:40.364] List of future strategies:
[13:36:40.364] 1. FutureStrategy:
[13:36:40.364]    - args: function (..., envir = parent.frame())
[13:36:40.364]    - tweaked: FALSE
[13:36:40.364]    - call: future::plan(oplan)
[13:36:40.377] plan(): nbrOfWorkers() = 1
> 
