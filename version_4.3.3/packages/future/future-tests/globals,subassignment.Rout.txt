
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:58.870] plan(): Setting new future strategy stack:
[16:20:58.871] List of future strategies:
[16:20:58.871] 1. sequential:
[16:20:58.871]    - args: function (..., envir = parent.frame())
[16:20:58.871]    - tweaked: FALSE
[16:20:58.871]    - call: future::plan("sequential")
[16:20:58.885] plan(): nbrOfWorkers() = 1
> 
> oopts <- c(oopts, options(
+   future.globals.resolve = TRUE,
+   future.globals.onMissing = "error"
+ ))
> 
> message("*** Globals - subassignments ...")
*** Globals - subassignments ...
> 
> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...
> 
> ## Truth:
> x <- x0 <- list()
> y0 <- list(a = 1)
> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1
> 
> y <- local({
+   x$a <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x[["a"]] <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x["a"] <- list(1)
+   x
+ })
> stopifnot(identical(y, y0))
> 
> stopifnot(identical(x, list()))
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("availableCores(): ", availableCores())
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Same with forced lazy evaluation
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     } %lazy% TRUE
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## 'x' is _not_ a global variable here
+     x <- list()
+     y %<-% {
+       x <- list(b = 2)
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, list(b = 2, a = 1)))
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x[["a"]] <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+     
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x["a"] <- list(1)
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     name <- "a"
+     y %<-% {
+       x[name] <- list(1)
+       x
+     }
+     rm(list = c("x", "name"))
+     print(y)
+     stopifnot(identical(y, y0))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[16:20:58.951] plan(): Setting new future strategy stack:
[16:20:58.951] List of future strategies:
[16:20:58.951] 1. sequential:
[16:20:58.951]    - args: function (..., envir = parent.frame())
[16:20:58.951]    - tweaked: FALSE
[16:20:58.951]    - call: plan(strategy)
[16:20:58.961] plan(): nbrOfWorkers() = 1
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:58.962] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:58.962] Searching for globals...
[16:20:58.970] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:58.970] Searching for globals ... DONE
[16:20:58.970] Resolving globals: TRUE
[16:20:58.970] Resolving any globals that are futures ...
[16:20:58.970] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:58.970] Resolving any globals that are futures ... DONE
[16:20:58.971] Resolving futures part of globals (recursively) ...
[16:20:58.972] resolve() on list ...
[16:20:58.972]  recursive: 99
[16:20:58.972]  length: 1
[16:20:58.972]  elements: ‘x’
[16:20:58.972]  length: 0 (resolved future 1)
[16:20:58.972] resolve() on list ... DONE
[16:20:58.972] - globals: [1] ‘x’
[16:20:58.973] Resolving futures part of globals (recursively) ... DONE
[16:20:58.973] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:58.973] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:58.974] - globals: [1] ‘x’
[16:20:58.974] 
[16:20:58.974] getGlobalsAndPackages() ... DONE
[16:20:58.974] run() for ‘Future’ ...
[16:20:58.975] - state: ‘created’
[16:20:58.975] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:58.975] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:58.975] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:58.975]   - Field: ‘label’
[16:20:58.975]   - Field: ‘local’
[16:20:58.976]   - Field: ‘owner’
[16:20:58.976]   - Field: ‘envir’
[16:20:58.976]   - Field: ‘packages’
[16:20:58.976]   - Field: ‘gc’
[16:20:58.976]   - Field: ‘conditions’
[16:20:58.976]   - Field: ‘expr’
[16:20:58.976]   - Field: ‘uuid’
[16:20:58.976]   - Field: ‘seed’
[16:20:58.976]   - Field: ‘version’
[16:20:58.976]   - Field: ‘result’
[16:20:58.976]   - Field: ‘asynchronous’
[16:20:58.977]   - Field: ‘calls’
[16:20:58.977]   - Field: ‘globals’
[16:20:58.977]   - Field: ‘stdout’
[16:20:58.977]   - Field: ‘earlySignal’
[16:20:58.977]   - Field: ‘lazy’
[16:20:58.977]   - Field: ‘state’
[16:20:58.977] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:58.977] - Launch lazy future ...
[16:20:58.979] Packages needed by the future expression (n = 0): <none>
[16:20:58.979] Packages needed by future strategies (n = 0): <none>
[16:20:58.980] {
[16:20:58.980]     {
[16:20:58.980]         {
[16:20:58.980]             ...future.startTime <- base::Sys.time()
[16:20:58.980]             {
[16:20:58.980]                 {
[16:20:58.980]                   {
[16:20:58.980]                     base::local({
[16:20:58.980]                       has_future <- base::requireNamespace("future", 
[16:20:58.980]                         quietly = TRUE)
[16:20:58.980]                       if (has_future) {
[16:20:58.980]                         ns <- base::getNamespace("future")
[16:20:58.980]                         version <- ns[[".package"]][["version"]]
[16:20:58.980]                         if (is.null(version)) 
[16:20:58.980]                           version <- utils::packageVersion("future")
[16:20:58.980]                       }
[16:20:58.980]                       else {
[16:20:58.980]                         version <- NULL
[16:20:58.980]                       }
[16:20:58.980]                       if (!has_future || version < "1.8.0") {
[16:20:58.980]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:58.980]                           "", base::R.version$version.string), 
[16:20:58.980]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:58.980]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:58.980]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:58.980]                             "release", "version")], collapse = " "), 
[16:20:58.980]                           hostname = base::Sys.info()[["nodename"]])
[16:20:58.980]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:58.980]                           info)
[16:20:58.980]                         info <- base::paste(info, collapse = "; ")
[16:20:58.980]                         if (!has_future) {
[16:20:58.980]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:58.980]                             info)
[16:20:58.980]                         }
[16:20:58.980]                         else {
[16:20:58.980]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:58.980]                             info, version)
[16:20:58.980]                         }
[16:20:58.980]                         base::stop(msg)
[16:20:58.980]                       }
[16:20:58.980]                     })
[16:20:58.980]                   }
[16:20:58.980]                   ...future.strategy.old <- future::plan("list")
[16:20:58.980]                   options(future.plan = NULL)
[16:20:58.980]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.980]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:58.980]                 }
[16:20:58.980]                 ...future.workdir <- getwd()
[16:20:58.980]             }
[16:20:58.980]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:58.980]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:58.980]         }
[16:20:58.980]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:58.980]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:58.980]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:58.980]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:58.980]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:58.980]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:58.980]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:58.980]             base::names(...future.oldOptions))
[16:20:58.980]     }
[16:20:58.980]     if (FALSE) {
[16:20:58.980]     }
[16:20:58.980]     else {
[16:20:58.980]         if (TRUE) {
[16:20:58.980]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:58.980]                 open = "w")
[16:20:58.980]         }
[16:20:58.980]         else {
[16:20:58.980]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:58.980]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:58.980]         }
[16:20:58.980]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:58.980]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:58.980]             base::sink(type = "output", split = FALSE)
[16:20:58.980]             base::close(...future.stdout)
[16:20:58.980]         }, add = TRUE)
[16:20:58.980]     }
[16:20:58.980]     ...future.frame <- base::sys.nframe()
[16:20:58.980]     ...future.conditions <- base::list()
[16:20:58.980]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:58.980]     if (FALSE) {
[16:20:58.980]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:58.980]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:58.980]     }
[16:20:58.980]     ...future.result <- base::tryCatch({
[16:20:58.980]         base::withCallingHandlers({
[16:20:58.980]             ...future.value <- base::withVisible(base::local({
[16:20:58.980]                 x$a <- 1
[16:20:58.980]                 x
[16:20:58.980]             }))
[16:20:58.980]             future::FutureResult(value = ...future.value$value, 
[16:20:58.980]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.980]                   ...future.rng), globalenv = if (FALSE) 
[16:20:58.980]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:58.980]                     ...future.globalenv.names))
[16:20:58.980]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:58.980]         }, condition = base::local({
[16:20:58.980]             c <- base::c
[16:20:58.980]             inherits <- base::inherits
[16:20:58.980]             invokeRestart <- base::invokeRestart
[16:20:58.980]             length <- base::length
[16:20:58.980]             list <- base::list
[16:20:58.980]             seq.int <- base::seq.int
[16:20:58.980]             signalCondition <- base::signalCondition
[16:20:58.980]             sys.calls <- base::sys.calls
[16:20:58.980]             `[[` <- base::`[[`
[16:20:58.980]             `+` <- base::`+`
[16:20:58.980]             `<<-` <- base::`<<-`
[16:20:58.980]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:58.980]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:58.980]                   3L)]
[16:20:58.980]             }
[16:20:58.980]             function(cond) {
[16:20:58.980]                 is_error <- inherits(cond, "error")
[16:20:58.980]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:58.980]                   NULL)
[16:20:58.980]                 if (is_error) {
[16:20:58.980]                   sessionInformation <- function() {
[16:20:58.980]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:58.980]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:58.980]                       search = base::search(), system = base::Sys.info())
[16:20:58.980]                   }
[16:20:58.980]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.980]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:58.980]                     cond$call), session = sessionInformation(), 
[16:20:58.980]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:58.980]                   signalCondition(cond)
[16:20:58.980]                 }
[16:20:58.980]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:58.980]                 "immediateCondition"))) {
[16:20:58.980]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:58.980]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.980]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:58.980]                   if (TRUE && !signal) {
[16:20:58.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.980]                     {
[16:20:58.980]                       inherits <- base::inherits
[16:20:58.980]                       invokeRestart <- base::invokeRestart
[16:20:58.980]                       is.null <- base::is.null
[16:20:58.980]                       muffled <- FALSE
[16:20:58.980]                       if (inherits(cond, "message")) {
[16:20:58.980]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.980]                         if (muffled) 
[16:20:58.980]                           invokeRestart("muffleMessage")
[16:20:58.980]                       }
[16:20:58.980]                       else if (inherits(cond, "warning")) {
[16:20:58.980]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.980]                         if (muffled) 
[16:20:58.980]                           invokeRestart("muffleWarning")
[16:20:58.980]                       }
[16:20:58.980]                       else if (inherits(cond, "condition")) {
[16:20:58.980]                         if (!is.null(pattern)) {
[16:20:58.980]                           computeRestarts <- base::computeRestarts
[16:20:58.980]                           grepl <- base::grepl
[16:20:58.980]                           restarts <- computeRestarts(cond)
[16:20:58.980]                           for (restart in restarts) {
[16:20:58.980]                             name <- restart$name
[16:20:58.980]                             if (is.null(name)) 
[16:20:58.980]                               next
[16:20:58.980]                             if (!grepl(pattern, name)) 
[16:20:58.980]                               next
[16:20:58.980]                             invokeRestart(restart)
[16:20:58.980]                             muffled <- TRUE
[16:20:58.980]                             break
[16:20:58.980]                           }
[16:20:58.980]                         }
[16:20:58.980]                       }
[16:20:58.980]                       invisible(muffled)
[16:20:58.980]                     }
[16:20:58.980]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.980]                   }
[16:20:58.980]                 }
[16:20:58.980]                 else {
[16:20:58.980]                   if (TRUE) {
[16:20:58.980]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.980]                     {
[16:20:58.980]                       inherits <- base::inherits
[16:20:58.980]                       invokeRestart <- base::invokeRestart
[16:20:58.980]                       is.null <- base::is.null
[16:20:58.980]                       muffled <- FALSE
[16:20:58.980]                       if (inherits(cond, "message")) {
[16:20:58.980]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.980]                         if (muffled) 
[16:20:58.980]                           invokeRestart("muffleMessage")
[16:20:58.980]                       }
[16:20:58.980]                       else if (inherits(cond, "warning")) {
[16:20:58.980]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.980]                         if (muffled) 
[16:20:58.980]                           invokeRestart("muffleWarning")
[16:20:58.980]                       }
[16:20:58.980]                       else if (inherits(cond, "condition")) {
[16:20:58.980]                         if (!is.null(pattern)) {
[16:20:58.980]                           computeRestarts <- base::computeRestarts
[16:20:58.980]                           grepl <- base::grepl
[16:20:58.980]                           restarts <- computeRestarts(cond)
[16:20:58.980]                           for (restart in restarts) {
[16:20:58.980]                             name <- restart$name
[16:20:58.980]                             if (is.null(name)) 
[16:20:58.980]                               next
[16:20:58.980]                             if (!grepl(pattern, name)) 
[16:20:58.980]                               next
[16:20:58.980]                             invokeRestart(restart)
[16:20:58.980]                             muffled <- TRUE
[16:20:58.980]                             break
[16:20:58.980]                           }
[16:20:58.980]                         }
[16:20:58.980]                       }
[16:20:58.980]                       invisible(muffled)
[16:20:58.980]                     }
[16:20:58.980]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.980]                   }
[16:20:58.980]                 }
[16:20:58.980]             }
[16:20:58.980]         }))
[16:20:58.980]     }, error = function(ex) {
[16:20:58.980]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:58.980]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.980]                 ...future.rng), started = ...future.startTime, 
[16:20:58.980]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:58.980]             version = "1.8"), class = "FutureResult")
[16:20:58.980]     }, finally = {
[16:20:58.980]         if (!identical(...future.workdir, getwd())) 
[16:20:58.980]             setwd(...future.workdir)
[16:20:58.980]         {
[16:20:58.980]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:58.980]                 ...future.oldOptions$nwarnings <- NULL
[16:20:58.980]             }
[16:20:58.980]             base::options(...future.oldOptions)
[16:20:58.980]             if (.Platform$OS.type == "windows") {
[16:20:58.980]                 old_names <- names(...future.oldEnvVars)
[16:20:58.980]                 envs <- base::Sys.getenv()
[16:20:58.980]                 names <- names(envs)
[16:20:58.980]                 common <- intersect(names, old_names)
[16:20:58.980]                 added <- setdiff(names, old_names)
[16:20:58.980]                 removed <- setdiff(old_names, names)
[16:20:58.980]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:58.980]                   envs[common]]
[16:20:58.980]                 NAMES <- toupper(changed)
[16:20:58.980]                 args <- list()
[16:20:58.980]                 for (kk in seq_along(NAMES)) {
[16:20:58.980]                   name <- changed[[kk]]
[16:20:58.980]                   NAME <- NAMES[[kk]]
[16:20:58.980]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.980]                     next
[16:20:58.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.980]                 }
[16:20:58.980]                 NAMES <- toupper(added)
[16:20:58.980]                 for (kk in seq_along(NAMES)) {
[16:20:58.980]                   name <- added[[kk]]
[16:20:58.980]                   NAME <- NAMES[[kk]]
[16:20:58.980]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.980]                     next
[16:20:58.980]                   args[[name]] <- ""
[16:20:58.980]                 }
[16:20:58.980]                 NAMES <- toupper(removed)
[16:20:58.980]                 for (kk in seq_along(NAMES)) {
[16:20:58.980]                   name <- removed[[kk]]
[16:20:58.980]                   NAME <- NAMES[[kk]]
[16:20:58.980]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.980]                     next
[16:20:58.980]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.980]                 }
[16:20:58.980]                 if (length(args) > 0) 
[16:20:58.980]                   base::do.call(base::Sys.setenv, args = args)
[16:20:58.980]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:58.980]             }
[16:20:58.980]             else {
[16:20:58.980]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:58.980]             }
[16:20:58.980]             {
[16:20:58.980]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:58.980]                   0L) {
[16:20:58.980]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:58.980]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:58.980]                   base::options(opts)
[16:20:58.980]                 }
[16:20:58.980]                 {
[16:20:58.980]                   {
[16:20:58.980]                     NULL
[16:20:58.980]                     RNGkind("Mersenne-Twister")
[16:20:58.980]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:58.980]                       inherits = FALSE)
[16:20:58.980]                   }
[16:20:58.980]                   options(future.plan = NULL)
[16:20:58.980]                   if (is.na(NA_character_)) 
[16:20:58.980]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.980]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:58.980]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:58.980]                     .init = FALSE)
[16:20:58.980]                 }
[16:20:58.980]             }
[16:20:58.980]         }
[16:20:58.980]     })
[16:20:58.980]     if (TRUE) {
[16:20:58.980]         base::sink(type = "output", split = FALSE)
[16:20:58.980]         if (TRUE) {
[16:20:58.980]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:58.980]         }
[16:20:58.980]         else {
[16:20:58.980]             ...future.result["stdout"] <- base::list(NULL)
[16:20:58.980]         }
[16:20:58.980]         base::close(...future.stdout)
[16:20:58.980]         ...future.stdout <- NULL
[16:20:58.980]     }
[16:20:58.980]     ...future.result$conditions <- ...future.conditions
[16:20:58.980]     ...future.result$finished <- base::Sys.time()
[16:20:58.980]     ...future.result
[16:20:58.980] }
[16:20:58.982] assign_globals() ...
[16:20:58.982] List of 1
[16:20:58.982]  $ x: list()
[16:20:58.982]  - attr(*, "where")=List of 1
[16:20:58.982]   ..$ x:<environment: R_EmptyEnv> 
[16:20:58.982]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:58.982]  - attr(*, "resolved")= logi TRUE
[16:20:58.982]  - attr(*, "total_size")= num 0
[16:20:58.982]  - attr(*, "already-done")= logi TRUE
[16:20:58.985] - copied ‘x’ to environment
[16:20:58.985] assign_globals() ... done
[16:20:58.985] plan(): Setting new future strategy stack:
[16:20:58.985] List of future strategies:
[16:20:58.985] 1. sequential:
[16:20:58.985]    - args: function (..., envir = parent.frame())
[16:20:58.985]    - tweaked: FALSE
[16:20:58.985]    - call: NULL
[16:20:58.985] plan(): nbrOfWorkers() = 1
[16:20:58.986] plan(): Setting new future strategy stack:
[16:20:58.987] List of future strategies:
[16:20:58.987] 1. sequential:
[16:20:58.987]    - args: function (..., envir = parent.frame())
[16:20:58.987]    - tweaked: FALSE
[16:20:58.987]    - call: plan(strategy)
[16:20:58.987] plan(): nbrOfWorkers() = 1
[16:20:58.987] SequentialFuture started (and completed)
[16:20:58.988] - Launch lazy future ... done
[16:20:58.988] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:58.988] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:58.988] Searching for globals...
[16:20:58.990] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:58.990] Searching for globals ... DONE
[16:20:58.990] Resolving globals: TRUE
[16:20:58.991] Resolving any globals that are futures ...
[16:20:58.991] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:58.991] Resolving any globals that are futures ... DONE
[16:20:58.991] Resolving futures part of globals (recursively) ...
[16:20:58.991] resolve() on list ...
[16:20:58.991]  recursive: 99
[16:20:58.991]  length: 1
[16:20:58.991]  elements: ‘x’
[16:20:58.992]  length: 0 (resolved future 1)
[16:20:58.992] resolve() on list ... DONE
[16:20:58.992] - globals: [1] ‘x’
[16:20:58.992] Resolving futures part of globals (recursively) ... DONE
[16:20:58.992] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:58.992] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:58.992] - globals: [1] ‘x’
[16:20:58.993] 
[16:20:58.993] getGlobalsAndPackages() ... DONE
[16:20:58.993] run() for ‘Future’ ...
[16:20:58.993] - state: ‘created’
[16:20:58.993] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:58.993] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:58.993] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:58.994]   - Field: ‘label’
[16:20:58.994]   - Field: ‘local’
[16:20:58.994]   - Field: ‘owner’
[16:20:58.994]   - Field: ‘envir’
[16:20:58.994]   - Field: ‘packages’
[16:20:58.994]   - Field: ‘gc’
[16:20:58.994]   - Field: ‘conditions’
[16:20:58.994]   - Field: ‘expr’
[16:20:58.994]   - Field: ‘uuid’
[16:20:58.994]   - Field: ‘seed’
[16:20:58.994]   - Field: ‘version’
[16:20:58.995]   - Field: ‘result’
[16:20:58.995]   - Field: ‘asynchronous’
[16:20:58.995]   - Field: ‘calls’
[16:20:58.995]   - Field: ‘globals’
[16:20:58.995]   - Field: ‘stdout’
[16:20:58.995]   - Field: ‘earlySignal’
[16:20:58.995]   - Field: ‘lazy’
[16:20:58.995]   - Field: ‘state’
[16:20:58.995] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:58.995] - Launch lazy future ...
[16:20:58.996] Packages needed by the future expression (n = 0): <none>
[16:20:58.996] Packages needed by future strategies (n = 0): <none>
[16:20:58.996] {
[16:20:58.996]     {
[16:20:58.996]         {
[16:20:58.996]             ...future.startTime <- base::Sys.time()
[16:20:58.996]             {
[16:20:58.996]                 {
[16:20:58.996]                   {
[16:20:58.996]                     base::local({
[16:20:58.996]                       has_future <- base::requireNamespace("future", 
[16:20:58.996]                         quietly = TRUE)
[16:20:58.996]                       if (has_future) {
[16:20:58.996]                         ns <- base::getNamespace("future")
[16:20:58.996]                         version <- ns[[".package"]][["version"]]
[16:20:58.996]                         if (is.null(version)) 
[16:20:58.996]                           version <- utils::packageVersion("future")
[16:20:58.996]                       }
[16:20:58.996]                       else {
[16:20:58.996]                         version <- NULL
[16:20:58.996]                       }
[16:20:58.996]                       if (!has_future || version < "1.8.0") {
[16:20:58.996]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:58.996]                           "", base::R.version$version.string), 
[16:20:58.996]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:58.996]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:58.996]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:58.996]                             "release", "version")], collapse = " "), 
[16:20:58.996]                           hostname = base::Sys.info()[["nodename"]])
[16:20:58.996]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:58.996]                           info)
[16:20:58.996]                         info <- base::paste(info, collapse = "; ")
[16:20:58.996]                         if (!has_future) {
[16:20:58.996]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:58.996]                             info)
[16:20:58.996]                         }
[16:20:58.996]                         else {
[16:20:58.996]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:58.996]                             info, version)
[16:20:58.996]                         }
[16:20:58.996]                         base::stop(msg)
[16:20:58.996]                       }
[16:20:58.996]                     })
[16:20:58.996]                   }
[16:20:58.996]                   ...future.strategy.old <- future::plan("list")
[16:20:58.996]                   options(future.plan = NULL)
[16:20:58.996]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.996]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:58.996]                 }
[16:20:58.996]                 ...future.workdir <- getwd()
[16:20:58.996]             }
[16:20:58.996]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:58.996]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:58.996]         }
[16:20:58.996]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:58.996]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:58.996]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:58.996]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:58.996]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:58.996]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:58.996]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:58.996]             base::names(...future.oldOptions))
[16:20:58.996]     }
[16:20:58.996]     if (FALSE) {
[16:20:58.996]     }
[16:20:58.996]     else {
[16:20:58.996]         if (TRUE) {
[16:20:58.996]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:58.996]                 open = "w")
[16:20:58.996]         }
[16:20:58.996]         else {
[16:20:58.996]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:58.996]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:58.996]         }
[16:20:58.996]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:58.996]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:58.996]             base::sink(type = "output", split = FALSE)
[16:20:58.996]             base::close(...future.stdout)
[16:20:58.996]         }, add = TRUE)
[16:20:58.996]     }
[16:20:58.996]     ...future.frame <- base::sys.nframe()
[16:20:58.996]     ...future.conditions <- base::list()
[16:20:58.996]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:58.996]     if (FALSE) {
[16:20:58.996]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:58.996]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:58.996]     }
[16:20:58.996]     ...future.result <- base::tryCatch({
[16:20:58.996]         base::withCallingHandlers({
[16:20:58.996]             ...future.value <- base::withVisible(base::local({
[16:20:58.996]                 x$a <- 1
[16:20:58.996]                 x
[16:20:58.996]             }))
[16:20:58.996]             future::FutureResult(value = ...future.value$value, 
[16:20:58.996]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.996]                   ...future.rng), globalenv = if (FALSE) 
[16:20:58.996]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:58.996]                     ...future.globalenv.names))
[16:20:58.996]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:58.996]         }, condition = base::local({
[16:20:58.996]             c <- base::c
[16:20:58.996]             inherits <- base::inherits
[16:20:58.996]             invokeRestart <- base::invokeRestart
[16:20:58.996]             length <- base::length
[16:20:58.996]             list <- base::list
[16:20:58.996]             seq.int <- base::seq.int
[16:20:58.996]             signalCondition <- base::signalCondition
[16:20:58.996]             sys.calls <- base::sys.calls
[16:20:58.996]             `[[` <- base::`[[`
[16:20:58.996]             `+` <- base::`+`
[16:20:58.996]             `<<-` <- base::`<<-`
[16:20:58.996]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:58.996]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:58.996]                   3L)]
[16:20:58.996]             }
[16:20:58.996]             function(cond) {
[16:20:58.996]                 is_error <- inherits(cond, "error")
[16:20:58.996]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:58.996]                   NULL)
[16:20:58.996]                 if (is_error) {
[16:20:58.996]                   sessionInformation <- function() {
[16:20:58.996]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:58.996]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:58.996]                       search = base::search(), system = base::Sys.info())
[16:20:58.996]                   }
[16:20:58.996]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.996]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:58.996]                     cond$call), session = sessionInformation(), 
[16:20:58.996]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:58.996]                   signalCondition(cond)
[16:20:58.996]                 }
[16:20:58.996]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:58.996]                 "immediateCondition"))) {
[16:20:58.996]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:58.996]                   ...future.conditions[[length(...future.conditions) + 
[16:20:58.996]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:58.996]                   if (TRUE && !signal) {
[16:20:58.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.996]                     {
[16:20:58.996]                       inherits <- base::inherits
[16:20:58.996]                       invokeRestart <- base::invokeRestart
[16:20:58.996]                       is.null <- base::is.null
[16:20:58.996]                       muffled <- FALSE
[16:20:58.996]                       if (inherits(cond, "message")) {
[16:20:58.996]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.996]                         if (muffled) 
[16:20:58.996]                           invokeRestart("muffleMessage")
[16:20:58.996]                       }
[16:20:58.996]                       else if (inherits(cond, "warning")) {
[16:20:58.996]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.996]                         if (muffled) 
[16:20:58.996]                           invokeRestart("muffleWarning")
[16:20:58.996]                       }
[16:20:58.996]                       else if (inherits(cond, "condition")) {
[16:20:58.996]                         if (!is.null(pattern)) {
[16:20:58.996]                           computeRestarts <- base::computeRestarts
[16:20:58.996]                           grepl <- base::grepl
[16:20:58.996]                           restarts <- computeRestarts(cond)
[16:20:58.996]                           for (restart in restarts) {
[16:20:58.996]                             name <- restart$name
[16:20:58.996]                             if (is.null(name)) 
[16:20:58.996]                               next
[16:20:58.996]                             if (!grepl(pattern, name)) 
[16:20:58.996]                               next
[16:20:58.996]                             invokeRestart(restart)
[16:20:58.996]                             muffled <- TRUE
[16:20:58.996]                             break
[16:20:58.996]                           }
[16:20:58.996]                         }
[16:20:58.996]                       }
[16:20:58.996]                       invisible(muffled)
[16:20:58.996]                     }
[16:20:58.996]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.996]                   }
[16:20:58.996]                 }
[16:20:58.996]                 else {
[16:20:58.996]                   if (TRUE) {
[16:20:58.996]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:58.996]                     {
[16:20:58.996]                       inherits <- base::inherits
[16:20:58.996]                       invokeRestart <- base::invokeRestart
[16:20:58.996]                       is.null <- base::is.null
[16:20:58.996]                       muffled <- FALSE
[16:20:58.996]                       if (inherits(cond, "message")) {
[16:20:58.996]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:58.996]                         if (muffled) 
[16:20:58.996]                           invokeRestart("muffleMessage")
[16:20:58.996]                       }
[16:20:58.996]                       else if (inherits(cond, "warning")) {
[16:20:58.996]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:58.996]                         if (muffled) 
[16:20:58.996]                           invokeRestart("muffleWarning")
[16:20:58.996]                       }
[16:20:58.996]                       else if (inherits(cond, "condition")) {
[16:20:58.996]                         if (!is.null(pattern)) {
[16:20:58.996]                           computeRestarts <- base::computeRestarts
[16:20:58.996]                           grepl <- base::grepl
[16:20:58.996]                           restarts <- computeRestarts(cond)
[16:20:58.996]                           for (restart in restarts) {
[16:20:58.996]                             name <- restart$name
[16:20:58.996]                             if (is.null(name)) 
[16:20:58.996]                               next
[16:20:58.996]                             if (!grepl(pattern, name)) 
[16:20:58.996]                               next
[16:20:58.996]                             invokeRestart(restart)
[16:20:58.996]                             muffled <- TRUE
[16:20:58.996]                             break
[16:20:58.996]                           }
[16:20:58.996]                         }
[16:20:58.996]                       }
[16:20:58.996]                       invisible(muffled)
[16:20:58.996]                     }
[16:20:58.996]                     muffleCondition(cond, pattern = "^muffle")
[16:20:58.996]                   }
[16:20:58.996]                 }
[16:20:58.996]             }
[16:20:58.996]         }))
[16:20:58.996]     }, error = function(ex) {
[16:20:58.996]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:58.996]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:58.996]                 ...future.rng), started = ...future.startTime, 
[16:20:58.996]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:58.996]             version = "1.8"), class = "FutureResult")
[16:20:58.996]     }, finally = {
[16:20:58.996]         if (!identical(...future.workdir, getwd())) 
[16:20:58.996]             setwd(...future.workdir)
[16:20:58.996]         {
[16:20:58.996]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:58.996]                 ...future.oldOptions$nwarnings <- NULL
[16:20:58.996]             }
[16:20:58.996]             base::options(...future.oldOptions)
[16:20:58.996]             if (.Platform$OS.type == "windows") {
[16:20:58.996]                 old_names <- names(...future.oldEnvVars)
[16:20:58.996]                 envs <- base::Sys.getenv()
[16:20:58.996]                 names <- names(envs)
[16:20:58.996]                 common <- intersect(names, old_names)
[16:20:58.996]                 added <- setdiff(names, old_names)
[16:20:58.996]                 removed <- setdiff(old_names, names)
[16:20:58.996]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:58.996]                   envs[common]]
[16:20:58.996]                 NAMES <- toupper(changed)
[16:20:58.996]                 args <- list()
[16:20:58.996]                 for (kk in seq_along(NAMES)) {
[16:20:58.996]                   name <- changed[[kk]]
[16:20:58.996]                   NAME <- NAMES[[kk]]
[16:20:58.996]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.996]                     next
[16:20:58.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.996]                 }
[16:20:58.996]                 NAMES <- toupper(added)
[16:20:58.996]                 for (kk in seq_along(NAMES)) {
[16:20:58.996]                   name <- added[[kk]]
[16:20:58.996]                   NAME <- NAMES[[kk]]
[16:20:58.996]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.996]                     next
[16:20:58.996]                   args[[name]] <- ""
[16:20:58.996]                 }
[16:20:58.996]                 NAMES <- toupper(removed)
[16:20:58.996]                 for (kk in seq_along(NAMES)) {
[16:20:58.996]                   name <- removed[[kk]]
[16:20:58.996]                   NAME <- NAMES[[kk]]
[16:20:58.996]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:58.996]                     next
[16:20:58.996]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:58.996]                 }
[16:20:58.996]                 if (length(args) > 0) 
[16:20:58.996]                   base::do.call(base::Sys.setenv, args = args)
[16:20:58.996]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:58.996]             }
[16:20:58.996]             else {
[16:20:58.996]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:58.996]             }
[16:20:58.996]             {
[16:20:58.996]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:58.996]                   0L) {
[16:20:58.996]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:58.996]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:58.996]                   base::options(opts)
[16:20:58.996]                 }
[16:20:58.996]                 {
[16:20:58.996]                   {
[16:20:58.996]                     NULL
[16:20:58.996]                     RNGkind("Mersenne-Twister")
[16:20:58.996]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:58.996]                       inherits = FALSE)
[16:20:58.996]                   }
[16:20:58.996]                   options(future.plan = NULL)
[16:20:58.996]                   if (is.na(NA_character_)) 
[16:20:58.996]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:58.996]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:58.996]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:58.996]                     .init = FALSE)
[16:20:58.996]                 }
[16:20:58.996]             }
[16:20:58.996]         }
[16:20:58.996]     })
[16:20:58.996]     if (TRUE) {
[16:20:58.996]         base::sink(type = "output", split = FALSE)
[16:20:58.996]         if (TRUE) {
[16:20:58.996]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:58.996]         }
[16:20:58.996]         else {
[16:20:58.996]             ...future.result["stdout"] <- base::list(NULL)
[16:20:58.996]         }
[16:20:58.996]         base::close(...future.stdout)
[16:20:58.996]         ...future.stdout <- NULL
[16:20:58.996]     }
[16:20:58.996]     ...future.result$conditions <- ...future.conditions
[16:20:58.996]     ...future.result$finished <- base::Sys.time()
[16:20:58.996]     ...future.result
[16:20:58.996] }
[16:20:58.998] assign_globals() ...
[16:20:58.998] List of 1
[16:20:58.998]  $ x: list()
[16:20:58.998]  - attr(*, "where")=List of 1
[16:20:58.998]   ..$ x:<environment: R_EmptyEnv> 
[16:20:58.998]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:58.998]  - attr(*, "resolved")= logi TRUE
[16:20:58.998]  - attr(*, "total_size")= num 0
[16:20:58.998]  - attr(*, "already-done")= logi TRUE
[16:20:59.000] - copied ‘x’ to environment
[16:20:59.000] assign_globals() ... done
[16:20:59.000] plan(): Setting new future strategy stack:
[16:20:59.000] List of future strategies:
[16:20:59.000] 1. sequential:
[16:20:59.000]    - args: function (..., envir = parent.frame())
[16:20:59.000]    - tweaked: FALSE
[16:20:59.000]    - call: NULL
[16:20:59.001] plan(): nbrOfWorkers() = 1
[16:20:59.001] plan(): Setting new future strategy stack:
[16:20:59.001] List of future strategies:
[16:20:59.001] 1. sequential:
[16:20:59.001]    - args: function (..., envir = parent.frame())
[16:20:59.001]    - tweaked: FALSE
[16:20:59.001]    - call: plan(strategy)
[16:20:59.002] plan(): nbrOfWorkers() = 1
[16:20:59.002] SequentialFuture started (and completed)
[16:20:59.002] - Launch lazy future ... done
[16:20:59.002] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.003] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.004] Searching for globals...
[16:20:59.005] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.005] Searching for globals ... DONE
[16:20:59.006] Resolving globals: TRUE
[16:20:59.006] Resolving any globals that are futures ...
[16:20:59.006] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.006] Resolving any globals that are futures ... DONE
[16:20:59.006] Resolving futures part of globals (recursively) ...
[16:20:59.006] resolve() on list ...
[16:20:59.006]  recursive: 99
[16:20:59.007]  length: 1
[16:20:59.007]  elements: ‘x’
[16:20:59.007]  length: 0 (resolved future 1)
[16:20:59.007] resolve() on list ... DONE
[16:20:59.007] - globals: [1] ‘x’
[16:20:59.007] Resolving futures part of globals (recursively) ... DONE
[16:20:59.007] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.009] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.009] - globals: [1] ‘x’
[16:20:59.009] 
[16:20:59.009] getGlobalsAndPackages() ... DONE
[16:20:59.009] run() for ‘Future’ ...
[16:20:59.009] - state: ‘created’
[16:20:59.009] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.010] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.010] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.010]   - Field: ‘label’
[16:20:59.010]   - Field: ‘local’
[16:20:59.010]   - Field: ‘owner’
[16:20:59.010]   - Field: ‘envir’
[16:20:59.010]   - Field: ‘packages’
[16:20:59.010]   - Field: ‘gc’
[16:20:59.010]   - Field: ‘conditions’
[16:20:59.011]   - Field: ‘expr’
[16:20:59.011]   - Field: ‘uuid’
[16:20:59.011]   - Field: ‘seed’
[16:20:59.011]   - Field: ‘version’
[16:20:59.011]   - Field: ‘result’
[16:20:59.011]   - Field: ‘asynchronous’
[16:20:59.011]   - Field: ‘calls’
[16:20:59.011]   - Field: ‘globals’
[16:20:59.011]   - Field: ‘stdout’
[16:20:59.011]   - Field: ‘earlySignal’
[16:20:59.011]   - Field: ‘lazy’
[16:20:59.012]   - Field: ‘state’
[16:20:59.012] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.012] - Launch lazy future ...
[16:20:59.012] Packages needed by the future expression (n = 0): <none>
[16:20:59.012] Packages needed by future strategies (n = 0): <none>
[16:20:59.012] {
[16:20:59.012]     {
[16:20:59.012]         {
[16:20:59.012]             ...future.startTime <- base::Sys.time()
[16:20:59.012]             {
[16:20:59.012]                 {
[16:20:59.012]                   {
[16:20:59.012]                     base::local({
[16:20:59.012]                       has_future <- base::requireNamespace("future", 
[16:20:59.012]                         quietly = TRUE)
[16:20:59.012]                       if (has_future) {
[16:20:59.012]                         ns <- base::getNamespace("future")
[16:20:59.012]                         version <- ns[[".package"]][["version"]]
[16:20:59.012]                         if (is.null(version)) 
[16:20:59.012]                           version <- utils::packageVersion("future")
[16:20:59.012]                       }
[16:20:59.012]                       else {
[16:20:59.012]                         version <- NULL
[16:20:59.012]                       }
[16:20:59.012]                       if (!has_future || version < "1.8.0") {
[16:20:59.012]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.012]                           "", base::R.version$version.string), 
[16:20:59.012]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.012]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.012]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.012]                             "release", "version")], collapse = " "), 
[16:20:59.012]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.012]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.012]                           info)
[16:20:59.012]                         info <- base::paste(info, collapse = "; ")
[16:20:59.012]                         if (!has_future) {
[16:20:59.012]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.012]                             info)
[16:20:59.012]                         }
[16:20:59.012]                         else {
[16:20:59.012]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.012]                             info, version)
[16:20:59.012]                         }
[16:20:59.012]                         base::stop(msg)
[16:20:59.012]                       }
[16:20:59.012]                     })
[16:20:59.012]                   }
[16:20:59.012]                   ...future.strategy.old <- future::plan("list")
[16:20:59.012]                   options(future.plan = NULL)
[16:20:59.012]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.012]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.012]                 }
[16:20:59.012]                 ...future.workdir <- getwd()
[16:20:59.012]             }
[16:20:59.012]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.012]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.012]         }
[16:20:59.012]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.012]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.012]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.012]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.012]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.012]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.012]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.012]             base::names(...future.oldOptions))
[16:20:59.012]     }
[16:20:59.012]     if (FALSE) {
[16:20:59.012]     }
[16:20:59.012]     else {
[16:20:59.012]         if (TRUE) {
[16:20:59.012]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.012]                 open = "w")
[16:20:59.012]         }
[16:20:59.012]         else {
[16:20:59.012]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.012]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.012]         }
[16:20:59.012]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.012]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.012]             base::sink(type = "output", split = FALSE)
[16:20:59.012]             base::close(...future.stdout)
[16:20:59.012]         }, add = TRUE)
[16:20:59.012]     }
[16:20:59.012]     ...future.frame <- base::sys.nframe()
[16:20:59.012]     ...future.conditions <- base::list()
[16:20:59.012]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.012]     if (FALSE) {
[16:20:59.012]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.012]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.012]     }
[16:20:59.012]     ...future.result <- base::tryCatch({
[16:20:59.012]         base::withCallingHandlers({
[16:20:59.012]             ...future.value <- base::withVisible(base::local({
[16:20:59.012]                 x$a <- 1
[16:20:59.012]                 x
[16:20:59.012]             }))
[16:20:59.012]             future::FutureResult(value = ...future.value$value, 
[16:20:59.012]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.012]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.012]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.012]                     ...future.globalenv.names))
[16:20:59.012]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.012]         }, condition = base::local({
[16:20:59.012]             c <- base::c
[16:20:59.012]             inherits <- base::inherits
[16:20:59.012]             invokeRestart <- base::invokeRestart
[16:20:59.012]             length <- base::length
[16:20:59.012]             list <- base::list
[16:20:59.012]             seq.int <- base::seq.int
[16:20:59.012]             signalCondition <- base::signalCondition
[16:20:59.012]             sys.calls <- base::sys.calls
[16:20:59.012]             `[[` <- base::`[[`
[16:20:59.012]             `+` <- base::`+`
[16:20:59.012]             `<<-` <- base::`<<-`
[16:20:59.012]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.012]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.012]                   3L)]
[16:20:59.012]             }
[16:20:59.012]             function(cond) {
[16:20:59.012]                 is_error <- inherits(cond, "error")
[16:20:59.012]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.012]                   NULL)
[16:20:59.012]                 if (is_error) {
[16:20:59.012]                   sessionInformation <- function() {
[16:20:59.012]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.012]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.012]                       search = base::search(), system = base::Sys.info())
[16:20:59.012]                   }
[16:20:59.012]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.012]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.012]                     cond$call), session = sessionInformation(), 
[16:20:59.012]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.012]                   signalCondition(cond)
[16:20:59.012]                 }
[16:20:59.012]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.012]                 "immediateCondition"))) {
[16:20:59.012]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.012]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.012]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.012]                   if (TRUE && !signal) {
[16:20:59.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.012]                     {
[16:20:59.012]                       inherits <- base::inherits
[16:20:59.012]                       invokeRestart <- base::invokeRestart
[16:20:59.012]                       is.null <- base::is.null
[16:20:59.012]                       muffled <- FALSE
[16:20:59.012]                       if (inherits(cond, "message")) {
[16:20:59.012]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.012]                         if (muffled) 
[16:20:59.012]                           invokeRestart("muffleMessage")
[16:20:59.012]                       }
[16:20:59.012]                       else if (inherits(cond, "warning")) {
[16:20:59.012]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.012]                         if (muffled) 
[16:20:59.012]                           invokeRestart("muffleWarning")
[16:20:59.012]                       }
[16:20:59.012]                       else if (inherits(cond, "condition")) {
[16:20:59.012]                         if (!is.null(pattern)) {
[16:20:59.012]                           computeRestarts <- base::computeRestarts
[16:20:59.012]                           grepl <- base::grepl
[16:20:59.012]                           restarts <- computeRestarts(cond)
[16:20:59.012]                           for (restart in restarts) {
[16:20:59.012]                             name <- restart$name
[16:20:59.012]                             if (is.null(name)) 
[16:20:59.012]                               next
[16:20:59.012]                             if (!grepl(pattern, name)) 
[16:20:59.012]                               next
[16:20:59.012]                             invokeRestart(restart)
[16:20:59.012]                             muffled <- TRUE
[16:20:59.012]                             break
[16:20:59.012]                           }
[16:20:59.012]                         }
[16:20:59.012]                       }
[16:20:59.012]                       invisible(muffled)
[16:20:59.012]                     }
[16:20:59.012]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.012]                   }
[16:20:59.012]                 }
[16:20:59.012]                 else {
[16:20:59.012]                   if (TRUE) {
[16:20:59.012]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.012]                     {
[16:20:59.012]                       inherits <- base::inherits
[16:20:59.012]                       invokeRestart <- base::invokeRestart
[16:20:59.012]                       is.null <- base::is.null
[16:20:59.012]                       muffled <- FALSE
[16:20:59.012]                       if (inherits(cond, "message")) {
[16:20:59.012]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.012]                         if (muffled) 
[16:20:59.012]                           invokeRestart("muffleMessage")
[16:20:59.012]                       }
[16:20:59.012]                       else if (inherits(cond, "warning")) {
[16:20:59.012]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.012]                         if (muffled) 
[16:20:59.012]                           invokeRestart("muffleWarning")
[16:20:59.012]                       }
[16:20:59.012]                       else if (inherits(cond, "condition")) {
[16:20:59.012]                         if (!is.null(pattern)) {
[16:20:59.012]                           computeRestarts <- base::computeRestarts
[16:20:59.012]                           grepl <- base::grepl
[16:20:59.012]                           restarts <- computeRestarts(cond)
[16:20:59.012]                           for (restart in restarts) {
[16:20:59.012]                             name <- restart$name
[16:20:59.012]                             if (is.null(name)) 
[16:20:59.012]                               next
[16:20:59.012]                             if (!grepl(pattern, name)) 
[16:20:59.012]                               next
[16:20:59.012]                             invokeRestart(restart)
[16:20:59.012]                             muffled <- TRUE
[16:20:59.012]                             break
[16:20:59.012]                           }
[16:20:59.012]                         }
[16:20:59.012]                       }
[16:20:59.012]                       invisible(muffled)
[16:20:59.012]                     }
[16:20:59.012]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.012]                   }
[16:20:59.012]                 }
[16:20:59.012]             }
[16:20:59.012]         }))
[16:20:59.012]     }, error = function(ex) {
[16:20:59.012]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.012]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.012]                 ...future.rng), started = ...future.startTime, 
[16:20:59.012]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.012]             version = "1.8"), class = "FutureResult")
[16:20:59.012]     }, finally = {
[16:20:59.012]         if (!identical(...future.workdir, getwd())) 
[16:20:59.012]             setwd(...future.workdir)
[16:20:59.012]         {
[16:20:59.012]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.012]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.012]             }
[16:20:59.012]             base::options(...future.oldOptions)
[16:20:59.012]             if (.Platform$OS.type == "windows") {
[16:20:59.012]                 old_names <- names(...future.oldEnvVars)
[16:20:59.012]                 envs <- base::Sys.getenv()
[16:20:59.012]                 names <- names(envs)
[16:20:59.012]                 common <- intersect(names, old_names)
[16:20:59.012]                 added <- setdiff(names, old_names)
[16:20:59.012]                 removed <- setdiff(old_names, names)
[16:20:59.012]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.012]                   envs[common]]
[16:20:59.012]                 NAMES <- toupper(changed)
[16:20:59.012]                 args <- list()
[16:20:59.012]                 for (kk in seq_along(NAMES)) {
[16:20:59.012]                   name <- changed[[kk]]
[16:20:59.012]                   NAME <- NAMES[[kk]]
[16:20:59.012]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.012]                     next
[16:20:59.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.012]                 }
[16:20:59.012]                 NAMES <- toupper(added)
[16:20:59.012]                 for (kk in seq_along(NAMES)) {
[16:20:59.012]                   name <- added[[kk]]
[16:20:59.012]                   NAME <- NAMES[[kk]]
[16:20:59.012]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.012]                     next
[16:20:59.012]                   args[[name]] <- ""
[16:20:59.012]                 }
[16:20:59.012]                 NAMES <- toupper(removed)
[16:20:59.012]                 for (kk in seq_along(NAMES)) {
[16:20:59.012]                   name <- removed[[kk]]
[16:20:59.012]                   NAME <- NAMES[[kk]]
[16:20:59.012]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.012]                     next
[16:20:59.012]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.012]                 }
[16:20:59.012]                 if (length(args) > 0) 
[16:20:59.012]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.012]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.012]             }
[16:20:59.012]             else {
[16:20:59.012]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.012]             }
[16:20:59.012]             {
[16:20:59.012]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.012]                   0L) {
[16:20:59.012]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.012]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.012]                   base::options(opts)
[16:20:59.012]                 }
[16:20:59.012]                 {
[16:20:59.012]                   {
[16:20:59.012]                     NULL
[16:20:59.012]                     RNGkind("Mersenne-Twister")
[16:20:59.012]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.012]                       inherits = FALSE)
[16:20:59.012]                   }
[16:20:59.012]                   options(future.plan = NULL)
[16:20:59.012]                   if (is.na(NA_character_)) 
[16:20:59.012]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.012]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.012]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.012]                     .init = FALSE)
[16:20:59.012]                 }
[16:20:59.012]             }
[16:20:59.012]         }
[16:20:59.012]     })
[16:20:59.012]     if (TRUE) {
[16:20:59.012]         base::sink(type = "output", split = FALSE)
[16:20:59.012]         if (TRUE) {
[16:20:59.012]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.012]         }
[16:20:59.012]         else {
[16:20:59.012]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.012]         }
[16:20:59.012]         base::close(...future.stdout)
[16:20:59.012]         ...future.stdout <- NULL
[16:20:59.012]     }
[16:20:59.012]     ...future.result$conditions <- ...future.conditions
[16:20:59.012]     ...future.result$finished <- base::Sys.time()
[16:20:59.012]     ...future.result
[16:20:59.012] }
[16:20:59.014] assign_globals() ...
[16:20:59.014] List of 1
[16:20:59.014]  $ x: list()
[16:20:59.014]  - attr(*, "where")=List of 1
[16:20:59.014]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.014]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.014]  - attr(*, "resolved")= logi TRUE
[16:20:59.014]  - attr(*, "total_size")= num 0
[16:20:59.014]  - attr(*, "already-done")= logi TRUE
[16:20:59.016] - copied ‘x’ to environment
[16:20:59.016] assign_globals() ... done
[16:20:59.017] plan(): Setting new future strategy stack:
[16:20:59.017] List of future strategies:
[16:20:59.017] 1. sequential:
[16:20:59.017]    - args: function (..., envir = parent.frame())
[16:20:59.017]    - tweaked: FALSE
[16:20:59.017]    - call: NULL
[16:20:59.017] plan(): nbrOfWorkers() = 1
[16:20:59.018] plan(): Setting new future strategy stack:
[16:20:59.018] List of future strategies:
[16:20:59.018] 1. sequential:
[16:20:59.018]    - args: function (..., envir = parent.frame())
[16:20:59.018]    - tweaked: FALSE
[16:20:59.018]    - call: plan(strategy)
[16:20:59.018] plan(): nbrOfWorkers() = 1
[16:20:59.018] SequentialFuture started (and completed)
[16:20:59.018] - Launch lazy future ... done
[16:20:59.018] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.019] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.019] Searching for globals...
[16:20:59.021] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.021] Searching for globals ... DONE
[16:20:59.021] Resolving globals: TRUE
[16:20:59.021] Resolving any globals that are futures ...
[16:20:59.021] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.021] Resolving any globals that are futures ... DONE
[16:20:59.022] Resolving futures part of globals (recursively) ...
[16:20:59.022] resolve() on list ...
[16:20:59.022]  recursive: 99
[16:20:59.022]  length: 1
[16:20:59.022]  elements: ‘x’
[16:20:59.022]  length: 0 (resolved future 1)
[16:20:59.022] resolve() on list ... DONE
[16:20:59.022] - globals: [1] ‘x’
[16:20:59.022] Resolving futures part of globals (recursively) ... DONE
[16:20:59.023] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.023] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.023] - globals: [1] ‘x’
[16:20:59.023] 
[16:20:59.023] getGlobalsAndPackages() ... DONE
[16:20:59.023] run() for ‘Future’ ...
[16:20:59.024] - state: ‘created’
[16:20:59.024] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.024] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.024] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.024]   - Field: ‘label’
[16:20:59.024]   - Field: ‘local’
[16:20:59.024]   - Field: ‘owner’
[16:20:59.024]   - Field: ‘envir’
[16:20:59.024]   - Field: ‘packages’
[16:20:59.025]   - Field: ‘gc’
[16:20:59.025]   - Field: ‘conditions’
[16:20:59.025]   - Field: ‘expr’
[16:20:59.025]   - Field: ‘uuid’
[16:20:59.025]   - Field: ‘seed’
[16:20:59.025]   - Field: ‘version’
[16:20:59.025]   - Field: ‘result’
[16:20:59.025]   - Field: ‘asynchronous’
[16:20:59.025]   - Field: ‘calls’
[16:20:59.025]   - Field: ‘globals’
[16:20:59.025]   - Field: ‘stdout’
[16:20:59.026]   - Field: ‘earlySignal’
[16:20:59.026]   - Field: ‘lazy’
[16:20:59.026]   - Field: ‘state’
[16:20:59.026] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.026] - Launch lazy future ...
[16:20:59.026] Packages needed by the future expression (n = 0): <none>
[16:20:59.026] Packages needed by future strategies (n = 0): <none>
[16:20:59.027] {
[16:20:59.027]     {
[16:20:59.027]         {
[16:20:59.027]             ...future.startTime <- base::Sys.time()
[16:20:59.027]             {
[16:20:59.027]                 {
[16:20:59.027]                   {
[16:20:59.027]                     base::local({
[16:20:59.027]                       has_future <- base::requireNamespace("future", 
[16:20:59.027]                         quietly = TRUE)
[16:20:59.027]                       if (has_future) {
[16:20:59.027]                         ns <- base::getNamespace("future")
[16:20:59.027]                         version <- ns[[".package"]][["version"]]
[16:20:59.027]                         if (is.null(version)) 
[16:20:59.027]                           version <- utils::packageVersion("future")
[16:20:59.027]                       }
[16:20:59.027]                       else {
[16:20:59.027]                         version <- NULL
[16:20:59.027]                       }
[16:20:59.027]                       if (!has_future || version < "1.8.0") {
[16:20:59.027]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.027]                           "", base::R.version$version.string), 
[16:20:59.027]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.027]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.027]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.027]                             "release", "version")], collapse = " "), 
[16:20:59.027]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.027]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.027]                           info)
[16:20:59.027]                         info <- base::paste(info, collapse = "; ")
[16:20:59.027]                         if (!has_future) {
[16:20:59.027]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.027]                             info)
[16:20:59.027]                         }
[16:20:59.027]                         else {
[16:20:59.027]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.027]                             info, version)
[16:20:59.027]                         }
[16:20:59.027]                         base::stop(msg)
[16:20:59.027]                       }
[16:20:59.027]                     })
[16:20:59.027]                   }
[16:20:59.027]                   ...future.strategy.old <- future::plan("list")
[16:20:59.027]                   options(future.plan = NULL)
[16:20:59.027]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.027]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.027]                 }
[16:20:59.027]                 ...future.workdir <- getwd()
[16:20:59.027]             }
[16:20:59.027]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.027]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.027]         }
[16:20:59.027]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.027]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.027]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.027]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.027]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.027]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.027]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.027]             base::names(...future.oldOptions))
[16:20:59.027]     }
[16:20:59.027]     if (FALSE) {
[16:20:59.027]     }
[16:20:59.027]     else {
[16:20:59.027]         if (TRUE) {
[16:20:59.027]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.027]                 open = "w")
[16:20:59.027]         }
[16:20:59.027]         else {
[16:20:59.027]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.027]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.027]         }
[16:20:59.027]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.027]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.027]             base::sink(type = "output", split = FALSE)
[16:20:59.027]             base::close(...future.stdout)
[16:20:59.027]         }, add = TRUE)
[16:20:59.027]     }
[16:20:59.027]     ...future.frame <- base::sys.nframe()
[16:20:59.027]     ...future.conditions <- base::list()
[16:20:59.027]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.027]     if (FALSE) {
[16:20:59.027]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.027]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.027]     }
[16:20:59.027]     ...future.result <- base::tryCatch({
[16:20:59.027]         base::withCallingHandlers({
[16:20:59.027]             ...future.value <- base::withVisible(base::local({
[16:20:59.027]                 x$a <- 1
[16:20:59.027]                 x
[16:20:59.027]             }))
[16:20:59.027]             future::FutureResult(value = ...future.value$value, 
[16:20:59.027]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.027]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.027]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.027]                     ...future.globalenv.names))
[16:20:59.027]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.027]         }, condition = base::local({
[16:20:59.027]             c <- base::c
[16:20:59.027]             inherits <- base::inherits
[16:20:59.027]             invokeRestart <- base::invokeRestart
[16:20:59.027]             length <- base::length
[16:20:59.027]             list <- base::list
[16:20:59.027]             seq.int <- base::seq.int
[16:20:59.027]             signalCondition <- base::signalCondition
[16:20:59.027]             sys.calls <- base::sys.calls
[16:20:59.027]             `[[` <- base::`[[`
[16:20:59.027]             `+` <- base::`+`
[16:20:59.027]             `<<-` <- base::`<<-`
[16:20:59.027]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.027]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.027]                   3L)]
[16:20:59.027]             }
[16:20:59.027]             function(cond) {
[16:20:59.027]                 is_error <- inherits(cond, "error")
[16:20:59.027]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.027]                   NULL)
[16:20:59.027]                 if (is_error) {
[16:20:59.027]                   sessionInformation <- function() {
[16:20:59.027]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.027]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.027]                       search = base::search(), system = base::Sys.info())
[16:20:59.027]                   }
[16:20:59.027]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.027]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.027]                     cond$call), session = sessionInformation(), 
[16:20:59.027]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.027]                   signalCondition(cond)
[16:20:59.027]                 }
[16:20:59.027]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.027]                 "immediateCondition"))) {
[16:20:59.027]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.027]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.027]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.027]                   if (TRUE && !signal) {
[16:20:59.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.027]                     {
[16:20:59.027]                       inherits <- base::inherits
[16:20:59.027]                       invokeRestart <- base::invokeRestart
[16:20:59.027]                       is.null <- base::is.null
[16:20:59.027]                       muffled <- FALSE
[16:20:59.027]                       if (inherits(cond, "message")) {
[16:20:59.027]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.027]                         if (muffled) 
[16:20:59.027]                           invokeRestart("muffleMessage")
[16:20:59.027]                       }
[16:20:59.027]                       else if (inherits(cond, "warning")) {
[16:20:59.027]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.027]                         if (muffled) 
[16:20:59.027]                           invokeRestart("muffleWarning")
[16:20:59.027]                       }
[16:20:59.027]                       else if (inherits(cond, "condition")) {
[16:20:59.027]                         if (!is.null(pattern)) {
[16:20:59.027]                           computeRestarts <- base::computeRestarts
[16:20:59.027]                           grepl <- base::grepl
[16:20:59.027]                           restarts <- computeRestarts(cond)
[16:20:59.027]                           for (restart in restarts) {
[16:20:59.027]                             name <- restart$name
[16:20:59.027]                             if (is.null(name)) 
[16:20:59.027]                               next
[16:20:59.027]                             if (!grepl(pattern, name)) 
[16:20:59.027]                               next
[16:20:59.027]                             invokeRestart(restart)
[16:20:59.027]                             muffled <- TRUE
[16:20:59.027]                             break
[16:20:59.027]                           }
[16:20:59.027]                         }
[16:20:59.027]                       }
[16:20:59.027]                       invisible(muffled)
[16:20:59.027]                     }
[16:20:59.027]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.027]                   }
[16:20:59.027]                 }
[16:20:59.027]                 else {
[16:20:59.027]                   if (TRUE) {
[16:20:59.027]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.027]                     {
[16:20:59.027]                       inherits <- base::inherits
[16:20:59.027]                       invokeRestart <- base::invokeRestart
[16:20:59.027]                       is.null <- base::is.null
[16:20:59.027]                       muffled <- FALSE
[16:20:59.027]                       if (inherits(cond, "message")) {
[16:20:59.027]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.027]                         if (muffled) 
[16:20:59.027]                           invokeRestart("muffleMessage")
[16:20:59.027]                       }
[16:20:59.027]                       else if (inherits(cond, "warning")) {
[16:20:59.027]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.027]                         if (muffled) 
[16:20:59.027]                           invokeRestart("muffleWarning")
[16:20:59.027]                       }
[16:20:59.027]                       else if (inherits(cond, "condition")) {
[16:20:59.027]                         if (!is.null(pattern)) {
[16:20:59.027]                           computeRestarts <- base::computeRestarts
[16:20:59.027]                           grepl <- base::grepl
[16:20:59.027]                           restarts <- computeRestarts(cond)
[16:20:59.027]                           for (restart in restarts) {
[16:20:59.027]                             name <- restart$name
[16:20:59.027]                             if (is.null(name)) 
[16:20:59.027]                               next
[16:20:59.027]                             if (!grepl(pattern, name)) 
[16:20:59.027]                               next
[16:20:59.027]                             invokeRestart(restart)
[16:20:59.027]                             muffled <- TRUE
[16:20:59.027]                             break
[16:20:59.027]                           }
[16:20:59.027]                         }
[16:20:59.027]                       }
[16:20:59.027]                       invisible(muffled)
[16:20:59.027]                     }
[16:20:59.027]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.027]                   }
[16:20:59.027]                 }
[16:20:59.027]             }
[16:20:59.027]         }))
[16:20:59.027]     }, error = function(ex) {
[16:20:59.027]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.027]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.027]                 ...future.rng), started = ...future.startTime, 
[16:20:59.027]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.027]             version = "1.8"), class = "FutureResult")
[16:20:59.027]     }, finally = {
[16:20:59.027]         if (!identical(...future.workdir, getwd())) 
[16:20:59.027]             setwd(...future.workdir)
[16:20:59.027]         {
[16:20:59.027]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.027]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.027]             }
[16:20:59.027]             base::options(...future.oldOptions)
[16:20:59.027]             if (.Platform$OS.type == "windows") {
[16:20:59.027]                 old_names <- names(...future.oldEnvVars)
[16:20:59.027]                 envs <- base::Sys.getenv()
[16:20:59.027]                 names <- names(envs)
[16:20:59.027]                 common <- intersect(names, old_names)
[16:20:59.027]                 added <- setdiff(names, old_names)
[16:20:59.027]                 removed <- setdiff(old_names, names)
[16:20:59.027]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.027]                   envs[common]]
[16:20:59.027]                 NAMES <- toupper(changed)
[16:20:59.027]                 args <- list()
[16:20:59.027]                 for (kk in seq_along(NAMES)) {
[16:20:59.027]                   name <- changed[[kk]]
[16:20:59.027]                   NAME <- NAMES[[kk]]
[16:20:59.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.027]                     next
[16:20:59.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.027]                 }
[16:20:59.027]                 NAMES <- toupper(added)
[16:20:59.027]                 for (kk in seq_along(NAMES)) {
[16:20:59.027]                   name <- added[[kk]]
[16:20:59.027]                   NAME <- NAMES[[kk]]
[16:20:59.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.027]                     next
[16:20:59.027]                   args[[name]] <- ""
[16:20:59.027]                 }
[16:20:59.027]                 NAMES <- toupper(removed)
[16:20:59.027]                 for (kk in seq_along(NAMES)) {
[16:20:59.027]                   name <- removed[[kk]]
[16:20:59.027]                   NAME <- NAMES[[kk]]
[16:20:59.027]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.027]                     next
[16:20:59.027]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.027]                 }
[16:20:59.027]                 if (length(args) > 0) 
[16:20:59.027]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.027]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.027]             }
[16:20:59.027]             else {
[16:20:59.027]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.027]             }
[16:20:59.027]             {
[16:20:59.027]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.027]                   0L) {
[16:20:59.027]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.027]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.027]                   base::options(opts)
[16:20:59.027]                 }
[16:20:59.027]                 {
[16:20:59.027]                   {
[16:20:59.027]                     NULL
[16:20:59.027]                     RNGkind("Mersenne-Twister")
[16:20:59.027]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.027]                       inherits = FALSE)
[16:20:59.027]                   }
[16:20:59.027]                   options(future.plan = NULL)
[16:20:59.027]                   if (is.na(NA_character_)) 
[16:20:59.027]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.027]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.027]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.027]                     .init = FALSE)
[16:20:59.027]                 }
[16:20:59.027]             }
[16:20:59.027]         }
[16:20:59.027]     })
[16:20:59.027]     if (TRUE) {
[16:20:59.027]         base::sink(type = "output", split = FALSE)
[16:20:59.027]         if (TRUE) {
[16:20:59.027]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.027]         }
[16:20:59.027]         else {
[16:20:59.027]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.027]         }
[16:20:59.027]         base::close(...future.stdout)
[16:20:59.027]         ...future.stdout <- NULL
[16:20:59.027]     }
[16:20:59.027]     ...future.result$conditions <- ...future.conditions
[16:20:59.027]     ...future.result$finished <- base::Sys.time()
[16:20:59.027]     ...future.result
[16:20:59.027] }
[16:20:59.028] assign_globals() ...
[16:20:59.028] List of 1
[16:20:59.028]  $ x: list()
[16:20:59.028]  - attr(*, "where")=List of 1
[16:20:59.028]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.028]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.028]  - attr(*, "resolved")= logi TRUE
[16:20:59.028]  - attr(*, "total_size")= num 0
[16:20:59.028]  - attr(*, "already-done")= logi TRUE
[16:20:59.030] - copied ‘x’ to environment
[16:20:59.030] assign_globals() ... done
[16:20:59.031] plan(): Setting new future strategy stack:
[16:20:59.031] List of future strategies:
[16:20:59.031] 1. sequential:
[16:20:59.031]    - args: function (..., envir = parent.frame())
[16:20:59.031]    - tweaked: FALSE
[16:20:59.031]    - call: NULL
[16:20:59.031] plan(): nbrOfWorkers() = 1
[16:20:59.032] plan(): Setting new future strategy stack:
[16:20:59.032] List of future strategies:
[16:20:59.032] 1. sequential:
[16:20:59.032]    - args: function (..., envir = parent.frame())
[16:20:59.032]    - tweaked: FALSE
[16:20:59.032]    - call: plan(strategy)
[16:20:59.032] plan(): nbrOfWorkers() = 1
[16:20:59.032] SequentialFuture started (and completed)
[16:20:59.032] - Launch lazy future ... done
[16:20:59.033] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.033] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.033] Searching for globals...
[16:20:59.036] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:20:59.036] Searching for globals ... DONE
[16:20:59.037] Resolving globals: TRUE
[16:20:59.037] Resolving any globals that are futures ...
[16:20:59.037] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:20:59.037] Resolving any globals that are futures ... DONE
[16:20:59.037] 
[16:20:59.037] 
[16:20:59.037] getGlobalsAndPackages() ... DONE
[16:20:59.038] run() for ‘Future’ ...
[16:20:59.038] - state: ‘created’
[16:20:59.038] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.038] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.038] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.038]   - Field: ‘label’
[16:20:59.038]   - Field: ‘local’
[16:20:59.038]   - Field: ‘owner’
[16:20:59.039]   - Field: ‘envir’
[16:20:59.039]   - Field: ‘packages’
[16:20:59.039]   - Field: ‘gc’
[16:20:59.039]   - Field: ‘conditions’
[16:20:59.039]   - Field: ‘expr’
[16:20:59.039]   - Field: ‘uuid’
[16:20:59.039]   - Field: ‘seed’
[16:20:59.039]   - Field: ‘version’
[16:20:59.039]   - Field: ‘result’
[16:20:59.039]   - Field: ‘asynchronous’
[16:20:59.039]   - Field: ‘calls’
[16:20:59.040]   - Field: ‘globals’
[16:20:59.040]   - Field: ‘stdout’
[16:20:59.040]   - Field: ‘earlySignal’
[16:20:59.040]   - Field: ‘lazy’
[16:20:59.040]   - Field: ‘state’
[16:20:59.040] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.040] - Launch lazy future ...
[16:20:59.040] Packages needed by the future expression (n = 0): <none>
[16:20:59.040] Packages needed by future strategies (n = 0): <none>
[16:20:59.041] {
[16:20:59.041]     {
[16:20:59.041]         {
[16:20:59.041]             ...future.startTime <- base::Sys.time()
[16:20:59.041]             {
[16:20:59.041]                 {
[16:20:59.041]                   {
[16:20:59.041]                     base::local({
[16:20:59.041]                       has_future <- base::requireNamespace("future", 
[16:20:59.041]                         quietly = TRUE)
[16:20:59.041]                       if (has_future) {
[16:20:59.041]                         ns <- base::getNamespace("future")
[16:20:59.041]                         version <- ns[[".package"]][["version"]]
[16:20:59.041]                         if (is.null(version)) 
[16:20:59.041]                           version <- utils::packageVersion("future")
[16:20:59.041]                       }
[16:20:59.041]                       else {
[16:20:59.041]                         version <- NULL
[16:20:59.041]                       }
[16:20:59.041]                       if (!has_future || version < "1.8.0") {
[16:20:59.041]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.041]                           "", base::R.version$version.string), 
[16:20:59.041]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.041]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.041]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.041]                             "release", "version")], collapse = " "), 
[16:20:59.041]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.041]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.041]                           info)
[16:20:59.041]                         info <- base::paste(info, collapse = "; ")
[16:20:59.041]                         if (!has_future) {
[16:20:59.041]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.041]                             info)
[16:20:59.041]                         }
[16:20:59.041]                         else {
[16:20:59.041]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.041]                             info, version)
[16:20:59.041]                         }
[16:20:59.041]                         base::stop(msg)
[16:20:59.041]                       }
[16:20:59.041]                     })
[16:20:59.041]                   }
[16:20:59.041]                   ...future.strategy.old <- future::plan("list")
[16:20:59.041]                   options(future.plan = NULL)
[16:20:59.041]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.041]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.041]                 }
[16:20:59.041]                 ...future.workdir <- getwd()
[16:20:59.041]             }
[16:20:59.041]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.041]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.041]         }
[16:20:59.041]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.041]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.041]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.041]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.041]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.041]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.041]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.041]             base::names(...future.oldOptions))
[16:20:59.041]     }
[16:20:59.041]     if (FALSE) {
[16:20:59.041]     }
[16:20:59.041]     else {
[16:20:59.041]         if (TRUE) {
[16:20:59.041]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.041]                 open = "w")
[16:20:59.041]         }
[16:20:59.041]         else {
[16:20:59.041]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.041]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.041]         }
[16:20:59.041]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.041]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.041]             base::sink(type = "output", split = FALSE)
[16:20:59.041]             base::close(...future.stdout)
[16:20:59.041]         }, add = TRUE)
[16:20:59.041]     }
[16:20:59.041]     ...future.frame <- base::sys.nframe()
[16:20:59.041]     ...future.conditions <- base::list()
[16:20:59.041]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.041]     if (FALSE) {
[16:20:59.041]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.041]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.041]     }
[16:20:59.041]     ...future.result <- base::tryCatch({
[16:20:59.041]         base::withCallingHandlers({
[16:20:59.041]             ...future.value <- base::withVisible(base::local({
[16:20:59.041]                 x <- list(b = 2)
[16:20:59.041]                 x$a <- 1
[16:20:59.041]                 x
[16:20:59.041]             }))
[16:20:59.041]             future::FutureResult(value = ...future.value$value, 
[16:20:59.041]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.041]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.041]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.041]                     ...future.globalenv.names))
[16:20:59.041]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.041]         }, condition = base::local({
[16:20:59.041]             c <- base::c
[16:20:59.041]             inherits <- base::inherits
[16:20:59.041]             invokeRestart <- base::invokeRestart
[16:20:59.041]             length <- base::length
[16:20:59.041]             list <- base::list
[16:20:59.041]             seq.int <- base::seq.int
[16:20:59.041]             signalCondition <- base::signalCondition
[16:20:59.041]             sys.calls <- base::sys.calls
[16:20:59.041]             `[[` <- base::`[[`
[16:20:59.041]             `+` <- base::`+`
[16:20:59.041]             `<<-` <- base::`<<-`
[16:20:59.041]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.041]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.041]                   3L)]
[16:20:59.041]             }
[16:20:59.041]             function(cond) {
[16:20:59.041]                 is_error <- inherits(cond, "error")
[16:20:59.041]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.041]                   NULL)
[16:20:59.041]                 if (is_error) {
[16:20:59.041]                   sessionInformation <- function() {
[16:20:59.041]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.041]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.041]                       search = base::search(), system = base::Sys.info())
[16:20:59.041]                   }
[16:20:59.041]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.041]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.041]                     cond$call), session = sessionInformation(), 
[16:20:59.041]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.041]                   signalCondition(cond)
[16:20:59.041]                 }
[16:20:59.041]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.041]                 "immediateCondition"))) {
[16:20:59.041]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.041]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.041]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.041]                   if (TRUE && !signal) {
[16:20:59.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.041]                     {
[16:20:59.041]                       inherits <- base::inherits
[16:20:59.041]                       invokeRestart <- base::invokeRestart
[16:20:59.041]                       is.null <- base::is.null
[16:20:59.041]                       muffled <- FALSE
[16:20:59.041]                       if (inherits(cond, "message")) {
[16:20:59.041]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.041]                         if (muffled) 
[16:20:59.041]                           invokeRestart("muffleMessage")
[16:20:59.041]                       }
[16:20:59.041]                       else if (inherits(cond, "warning")) {
[16:20:59.041]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.041]                         if (muffled) 
[16:20:59.041]                           invokeRestart("muffleWarning")
[16:20:59.041]                       }
[16:20:59.041]                       else if (inherits(cond, "condition")) {
[16:20:59.041]                         if (!is.null(pattern)) {
[16:20:59.041]                           computeRestarts <- base::computeRestarts
[16:20:59.041]                           grepl <- base::grepl
[16:20:59.041]                           restarts <- computeRestarts(cond)
[16:20:59.041]                           for (restart in restarts) {
[16:20:59.041]                             name <- restart$name
[16:20:59.041]                             if (is.null(name)) 
[16:20:59.041]                               next
[16:20:59.041]                             if (!grepl(pattern, name)) 
[16:20:59.041]                               next
[16:20:59.041]                             invokeRestart(restart)
[16:20:59.041]                             muffled <- TRUE
[16:20:59.041]                             break
[16:20:59.041]                           }
[16:20:59.041]                         }
[16:20:59.041]                       }
[16:20:59.041]                       invisible(muffled)
[16:20:59.041]                     }
[16:20:59.041]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.041]                   }
[16:20:59.041]                 }
[16:20:59.041]                 else {
[16:20:59.041]                   if (TRUE) {
[16:20:59.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.041]                     {
[16:20:59.041]                       inherits <- base::inherits
[16:20:59.041]                       invokeRestart <- base::invokeRestart
[16:20:59.041]                       is.null <- base::is.null
[16:20:59.041]                       muffled <- FALSE
[16:20:59.041]                       if (inherits(cond, "message")) {
[16:20:59.041]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.041]                         if (muffled) 
[16:20:59.041]                           invokeRestart("muffleMessage")
[16:20:59.041]                       }
[16:20:59.041]                       else if (inherits(cond, "warning")) {
[16:20:59.041]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.041]                         if (muffled) 
[16:20:59.041]                           invokeRestart("muffleWarning")
[16:20:59.041]                       }
[16:20:59.041]                       else if (inherits(cond, "condition")) {
[16:20:59.041]                         if (!is.null(pattern)) {
[16:20:59.041]                           computeRestarts <- base::computeRestarts
[16:20:59.041]                           grepl <- base::grepl
[16:20:59.041]                           restarts <- computeRestarts(cond)
[16:20:59.041]                           for (restart in restarts) {
[16:20:59.041]                             name <- restart$name
[16:20:59.041]                             if (is.null(name)) 
[16:20:59.041]                               next
[16:20:59.041]                             if (!grepl(pattern, name)) 
[16:20:59.041]                               next
[16:20:59.041]                             invokeRestart(restart)
[16:20:59.041]                             muffled <- TRUE
[16:20:59.041]                             break
[16:20:59.041]                           }
[16:20:59.041]                         }
[16:20:59.041]                       }
[16:20:59.041]                       invisible(muffled)
[16:20:59.041]                     }
[16:20:59.041]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.041]                   }
[16:20:59.041]                 }
[16:20:59.041]             }
[16:20:59.041]         }))
[16:20:59.041]     }, error = function(ex) {
[16:20:59.041]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.041]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.041]                 ...future.rng), started = ...future.startTime, 
[16:20:59.041]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.041]             version = "1.8"), class = "FutureResult")
[16:20:59.041]     }, finally = {
[16:20:59.041]         if (!identical(...future.workdir, getwd())) 
[16:20:59.041]             setwd(...future.workdir)
[16:20:59.041]         {
[16:20:59.041]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.041]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.041]             }
[16:20:59.041]             base::options(...future.oldOptions)
[16:20:59.041]             if (.Platform$OS.type == "windows") {
[16:20:59.041]                 old_names <- names(...future.oldEnvVars)
[16:20:59.041]                 envs <- base::Sys.getenv()
[16:20:59.041]                 names <- names(envs)
[16:20:59.041]                 common <- intersect(names, old_names)
[16:20:59.041]                 added <- setdiff(names, old_names)
[16:20:59.041]                 removed <- setdiff(old_names, names)
[16:20:59.041]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.041]                   envs[common]]
[16:20:59.041]                 NAMES <- toupper(changed)
[16:20:59.041]                 args <- list()
[16:20:59.041]                 for (kk in seq_along(NAMES)) {
[16:20:59.041]                   name <- changed[[kk]]
[16:20:59.041]                   NAME <- NAMES[[kk]]
[16:20:59.041]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.041]                     next
[16:20:59.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.041]                 }
[16:20:59.041]                 NAMES <- toupper(added)
[16:20:59.041]                 for (kk in seq_along(NAMES)) {
[16:20:59.041]                   name <- added[[kk]]
[16:20:59.041]                   NAME <- NAMES[[kk]]
[16:20:59.041]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.041]                     next
[16:20:59.041]                   args[[name]] <- ""
[16:20:59.041]                 }
[16:20:59.041]                 NAMES <- toupper(removed)
[16:20:59.041]                 for (kk in seq_along(NAMES)) {
[16:20:59.041]                   name <- removed[[kk]]
[16:20:59.041]                   NAME <- NAMES[[kk]]
[16:20:59.041]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.041]                     next
[16:20:59.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.041]                 }
[16:20:59.041]                 if (length(args) > 0) 
[16:20:59.041]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.041]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.041]             }
[16:20:59.041]             else {
[16:20:59.041]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.041]             }
[16:20:59.041]             {
[16:20:59.041]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.041]                   0L) {
[16:20:59.041]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.041]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.041]                   base::options(opts)
[16:20:59.041]                 }
[16:20:59.041]                 {
[16:20:59.041]                   {
[16:20:59.041]                     NULL
[16:20:59.041]                     RNGkind("Mersenne-Twister")
[16:20:59.041]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.041]                       inherits = FALSE)
[16:20:59.041]                   }
[16:20:59.041]                   options(future.plan = NULL)
[16:20:59.041]                   if (is.na(NA_character_)) 
[16:20:59.041]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.041]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.041]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.041]                     .init = FALSE)
[16:20:59.041]                 }
[16:20:59.041]             }
[16:20:59.041]         }
[16:20:59.041]     })
[16:20:59.041]     if (TRUE) {
[16:20:59.041]         base::sink(type = "output", split = FALSE)
[16:20:59.041]         if (TRUE) {
[16:20:59.041]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.041]         }
[16:20:59.041]         else {
[16:20:59.041]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.041]         }
[16:20:59.041]         base::close(...future.stdout)
[16:20:59.041]         ...future.stdout <- NULL
[16:20:59.041]     }
[16:20:59.041]     ...future.result$conditions <- ...future.conditions
[16:20:59.041]     ...future.result$finished <- base::Sys.time()
[16:20:59.041]     ...future.result
[16:20:59.041] }
[16:20:59.042] plan(): Setting new future strategy stack:
[16:20:59.043] List of future strategies:
[16:20:59.043] 1. sequential:
[16:20:59.043]    - args: function (..., envir = parent.frame())
[16:20:59.043]    - tweaked: FALSE
[16:20:59.043]    - call: NULL
[16:20:59.043] plan(): nbrOfWorkers() = 1
[16:20:59.044] plan(): Setting new future strategy stack:
[16:20:59.044] List of future strategies:
[16:20:59.044] 1. sequential:
[16:20:59.044]    - args: function (..., envir = parent.frame())
[16:20:59.044]    - tweaked: FALSE
[16:20:59.044]    - call: plan(strategy)
[16:20:59.044] plan(): nbrOfWorkers() = 1
[16:20:59.044] SequentialFuture started (and completed)
[16:20:59.044] - Launch lazy future ... done
[16:20:59.044] run() for ‘SequentialFuture’ ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.045] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.045] Searching for globals...
[16:20:59.047] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.047] Searching for globals ... DONE
[16:20:59.047] Resolving globals: TRUE
[16:20:59.047] Resolving any globals that are futures ...
[16:20:59.047] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.047] Resolving any globals that are futures ... DONE
[16:20:59.047] Resolving futures part of globals (recursively) ...
[16:20:59.048] resolve() on list ...
[16:20:59.048]  recursive: 99
[16:20:59.048]  length: 1
[16:20:59.048]  elements: ‘x’
[16:20:59.048]  length: 0 (resolved future 1)
[16:20:59.048] resolve() on list ... DONE
[16:20:59.048] - globals: [1] ‘x’
[16:20:59.048] Resolving futures part of globals (recursively) ... DONE
[16:20:59.048] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.049] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.049] - globals: [1] ‘x’
[16:20:59.049] 
[16:20:59.049] getGlobalsAndPackages() ... DONE
[16:20:59.049] run() for ‘Future’ ...
[16:20:59.049] - state: ‘created’
[16:20:59.050] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.050] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.050] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.050]   - Field: ‘label’
[16:20:59.050]   - Field: ‘local’
[16:20:59.050]   - Field: ‘owner’
[16:20:59.050]   - Field: ‘envir’
[16:20:59.050]   - Field: ‘packages’
[16:20:59.050]   - Field: ‘gc’
[16:20:59.050]   - Field: ‘conditions’
[16:20:59.051]   - Field: ‘expr’
[16:20:59.051]   - Field: ‘uuid’
[16:20:59.051]   - Field: ‘seed’
[16:20:59.051]   - Field: ‘version’
[16:20:59.051]   - Field: ‘result’
[16:20:59.051]   - Field: ‘asynchronous’
[16:20:59.051]   - Field: ‘calls’
[16:20:59.051]   - Field: ‘globals’
[16:20:59.051]   - Field: ‘stdout’
[16:20:59.051]   - Field: ‘earlySignal’
[16:20:59.051]   - Field: ‘lazy’
[16:20:59.052]   - Field: ‘state’
[16:20:59.052] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.052] - Launch lazy future ...
[16:20:59.052] Packages needed by the future expression (n = 0): <none>
[16:20:59.052] Packages needed by future strategies (n = 0): <none>
[16:20:59.052] {
[16:20:59.052]     {
[16:20:59.052]         {
[16:20:59.052]             ...future.startTime <- base::Sys.time()
[16:20:59.052]             {
[16:20:59.052]                 {
[16:20:59.052]                   {
[16:20:59.052]                     base::local({
[16:20:59.052]                       has_future <- base::requireNamespace("future", 
[16:20:59.052]                         quietly = TRUE)
[16:20:59.052]                       if (has_future) {
[16:20:59.052]                         ns <- base::getNamespace("future")
[16:20:59.052]                         version <- ns[[".package"]][["version"]]
[16:20:59.052]                         if (is.null(version)) 
[16:20:59.052]                           version <- utils::packageVersion("future")
[16:20:59.052]                       }
[16:20:59.052]                       else {
[16:20:59.052]                         version <- NULL
[16:20:59.052]                       }
[16:20:59.052]                       if (!has_future || version < "1.8.0") {
[16:20:59.052]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.052]                           "", base::R.version$version.string), 
[16:20:59.052]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.052]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.052]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.052]                             "release", "version")], collapse = " "), 
[16:20:59.052]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.052]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.052]                           info)
[16:20:59.052]                         info <- base::paste(info, collapse = "; ")
[16:20:59.052]                         if (!has_future) {
[16:20:59.052]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.052]                             info)
[16:20:59.052]                         }
[16:20:59.052]                         else {
[16:20:59.052]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.052]                             info, version)
[16:20:59.052]                         }
[16:20:59.052]                         base::stop(msg)
[16:20:59.052]                       }
[16:20:59.052]                     })
[16:20:59.052]                   }
[16:20:59.052]                   ...future.strategy.old <- future::plan("list")
[16:20:59.052]                   options(future.plan = NULL)
[16:20:59.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.052]                 }
[16:20:59.052]                 ...future.workdir <- getwd()
[16:20:59.052]             }
[16:20:59.052]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.052]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.052]         }
[16:20:59.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.052]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.052]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.052]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.052]             base::names(...future.oldOptions))
[16:20:59.052]     }
[16:20:59.052]     if (FALSE) {
[16:20:59.052]     }
[16:20:59.052]     else {
[16:20:59.052]         if (TRUE) {
[16:20:59.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.052]                 open = "w")
[16:20:59.052]         }
[16:20:59.052]         else {
[16:20:59.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.052]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.052]         }
[16:20:59.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.052]             base::sink(type = "output", split = FALSE)
[16:20:59.052]             base::close(...future.stdout)
[16:20:59.052]         }, add = TRUE)
[16:20:59.052]     }
[16:20:59.052]     ...future.frame <- base::sys.nframe()
[16:20:59.052]     ...future.conditions <- base::list()
[16:20:59.052]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.052]     if (FALSE) {
[16:20:59.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.052]     }
[16:20:59.052]     ...future.result <- base::tryCatch({
[16:20:59.052]         base::withCallingHandlers({
[16:20:59.052]             ...future.value <- base::withVisible(base::local({
[16:20:59.052]                 x[["a"]] <- 1
[16:20:59.052]                 x
[16:20:59.052]             }))
[16:20:59.052]             future::FutureResult(value = ...future.value$value, 
[16:20:59.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.052]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.052]                     ...future.globalenv.names))
[16:20:59.052]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.052]         }, condition = base::local({
[16:20:59.052]             c <- base::c
[16:20:59.052]             inherits <- base::inherits
[16:20:59.052]             invokeRestart <- base::invokeRestart
[16:20:59.052]             length <- base::length
[16:20:59.052]             list <- base::list
[16:20:59.052]             seq.int <- base::seq.int
[16:20:59.052]             signalCondition <- base::signalCondition
[16:20:59.052]             sys.calls <- base::sys.calls
[16:20:59.052]             `[[` <- base::`[[`
[16:20:59.052]             `+` <- base::`+`
[16:20:59.052]             `<<-` <- base::`<<-`
[16:20:59.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.052]                   3L)]
[16:20:59.052]             }
[16:20:59.052]             function(cond) {
[16:20:59.052]                 is_error <- inherits(cond, "error")
[16:20:59.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.052]                   NULL)
[16:20:59.052]                 if (is_error) {
[16:20:59.052]                   sessionInformation <- function() {
[16:20:59.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.052]                       search = base::search(), system = base::Sys.info())
[16:20:59.052]                   }
[16:20:59.052]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.052]                     cond$call), session = sessionInformation(), 
[16:20:59.052]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.052]                   signalCondition(cond)
[16:20:59.052]                 }
[16:20:59.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.052]                 "immediateCondition"))) {
[16:20:59.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.052]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.052]                   if (TRUE && !signal) {
[16:20:59.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.052]                     {
[16:20:59.052]                       inherits <- base::inherits
[16:20:59.052]                       invokeRestart <- base::invokeRestart
[16:20:59.052]                       is.null <- base::is.null
[16:20:59.052]                       muffled <- FALSE
[16:20:59.052]                       if (inherits(cond, "message")) {
[16:20:59.052]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.052]                         if (muffled) 
[16:20:59.052]                           invokeRestart("muffleMessage")
[16:20:59.052]                       }
[16:20:59.052]                       else if (inherits(cond, "warning")) {
[16:20:59.052]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.052]                         if (muffled) 
[16:20:59.052]                           invokeRestart("muffleWarning")
[16:20:59.052]                       }
[16:20:59.052]                       else if (inherits(cond, "condition")) {
[16:20:59.052]                         if (!is.null(pattern)) {
[16:20:59.052]                           computeRestarts <- base::computeRestarts
[16:20:59.052]                           grepl <- base::grepl
[16:20:59.052]                           restarts <- computeRestarts(cond)
[16:20:59.052]                           for (restart in restarts) {
[16:20:59.052]                             name <- restart$name
[16:20:59.052]                             if (is.null(name)) 
[16:20:59.052]                               next
[16:20:59.052]                             if (!grepl(pattern, name)) 
[16:20:59.052]                               next
[16:20:59.052]                             invokeRestart(restart)
[16:20:59.052]                             muffled <- TRUE
[16:20:59.052]                             break
[16:20:59.052]                           }
[16:20:59.052]                         }
[16:20:59.052]                       }
[16:20:59.052]                       invisible(muffled)
[16:20:59.052]                     }
[16:20:59.052]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.052]                   }
[16:20:59.052]                 }
[16:20:59.052]                 else {
[16:20:59.052]                   if (TRUE) {
[16:20:59.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.052]                     {
[16:20:59.052]                       inherits <- base::inherits
[16:20:59.052]                       invokeRestart <- base::invokeRestart
[16:20:59.052]                       is.null <- base::is.null
[16:20:59.052]                       muffled <- FALSE
[16:20:59.052]                       if (inherits(cond, "message")) {
[16:20:59.052]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.052]                         if (muffled) 
[16:20:59.052]                           invokeRestart("muffleMessage")
[16:20:59.052]                       }
[16:20:59.052]                       else if (inherits(cond, "warning")) {
[16:20:59.052]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.052]                         if (muffled) 
[16:20:59.052]                           invokeRestart("muffleWarning")
[16:20:59.052]                       }
[16:20:59.052]                       else if (inherits(cond, "condition")) {
[16:20:59.052]                         if (!is.null(pattern)) {
[16:20:59.052]                           computeRestarts <- base::computeRestarts
[16:20:59.052]                           grepl <- base::grepl
[16:20:59.052]                           restarts <- computeRestarts(cond)
[16:20:59.052]                           for (restart in restarts) {
[16:20:59.052]                             name <- restart$name
[16:20:59.052]                             if (is.null(name)) 
[16:20:59.052]                               next
[16:20:59.052]                             if (!grepl(pattern, name)) 
[16:20:59.052]                               next
[16:20:59.052]                             invokeRestart(restart)
[16:20:59.052]                             muffled <- TRUE
[16:20:59.052]                             break
[16:20:59.052]                           }
[16:20:59.052]                         }
[16:20:59.052]                       }
[16:20:59.052]                       invisible(muffled)
[16:20:59.052]                     }
[16:20:59.052]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.052]                   }
[16:20:59.052]                 }
[16:20:59.052]             }
[16:20:59.052]         }))
[16:20:59.052]     }, error = function(ex) {
[16:20:59.052]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.052]                 ...future.rng), started = ...future.startTime, 
[16:20:59.052]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.052]             version = "1.8"), class = "FutureResult")
[16:20:59.052]     }, finally = {
[16:20:59.052]         if (!identical(...future.workdir, getwd())) 
[16:20:59.052]             setwd(...future.workdir)
[16:20:59.052]         {
[16:20:59.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.052]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.052]             }
[16:20:59.052]             base::options(...future.oldOptions)
[16:20:59.052]             if (.Platform$OS.type == "windows") {
[16:20:59.052]                 old_names <- names(...future.oldEnvVars)
[16:20:59.052]                 envs <- base::Sys.getenv()
[16:20:59.052]                 names <- names(envs)
[16:20:59.052]                 common <- intersect(names, old_names)
[16:20:59.052]                 added <- setdiff(names, old_names)
[16:20:59.052]                 removed <- setdiff(old_names, names)
[16:20:59.052]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.052]                   envs[common]]
[16:20:59.052]                 NAMES <- toupper(changed)
[16:20:59.052]                 args <- list()
[16:20:59.052]                 for (kk in seq_along(NAMES)) {
[16:20:59.052]                   name <- changed[[kk]]
[16:20:59.052]                   NAME <- NAMES[[kk]]
[16:20:59.052]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.052]                     next
[16:20:59.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.052]                 }
[16:20:59.052]                 NAMES <- toupper(added)
[16:20:59.052]                 for (kk in seq_along(NAMES)) {
[16:20:59.052]                   name <- added[[kk]]
[16:20:59.052]                   NAME <- NAMES[[kk]]
[16:20:59.052]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.052]                     next
[16:20:59.052]                   args[[name]] <- ""
[16:20:59.052]                 }
[16:20:59.052]                 NAMES <- toupper(removed)
[16:20:59.052]                 for (kk in seq_along(NAMES)) {
[16:20:59.052]                   name <- removed[[kk]]
[16:20:59.052]                   NAME <- NAMES[[kk]]
[16:20:59.052]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.052]                     next
[16:20:59.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.052]                 }
[16:20:59.052]                 if (length(args) > 0) 
[16:20:59.052]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.052]             }
[16:20:59.052]             else {
[16:20:59.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.052]             }
[16:20:59.052]             {
[16:20:59.052]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.052]                   0L) {
[16:20:59.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.052]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.052]                   base::options(opts)
[16:20:59.052]                 }
[16:20:59.052]                 {
[16:20:59.052]                   {
[16:20:59.052]                     NULL
[16:20:59.052]                     RNGkind("Mersenne-Twister")
[16:20:59.052]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.052]                       inherits = FALSE)
[16:20:59.052]                   }
[16:20:59.052]                   options(future.plan = NULL)
[16:20:59.052]                   if (is.na(NA_character_)) 
[16:20:59.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.052]                     .init = FALSE)
[16:20:59.052]                 }
[16:20:59.052]             }
[16:20:59.052]         }
[16:20:59.052]     })
[16:20:59.052]     if (TRUE) {
[16:20:59.052]         base::sink(type = "output", split = FALSE)
[16:20:59.052]         if (TRUE) {
[16:20:59.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.052]         }
[16:20:59.052]         else {
[16:20:59.052]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.052]         }
[16:20:59.052]         base::close(...future.stdout)
[16:20:59.052]         ...future.stdout <- NULL
[16:20:59.052]     }
[16:20:59.052]     ...future.result$conditions <- ...future.conditions
[16:20:59.052]     ...future.result$finished <- base::Sys.time()
[16:20:59.052]     ...future.result
[16:20:59.052] }
[16:20:59.054] assign_globals() ...
[16:20:59.054] List of 1
[16:20:59.054]  $ x: list()
[16:20:59.054]  - attr(*, "where")=List of 1
[16:20:59.054]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.054]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.054]  - attr(*, "resolved")= logi TRUE
[16:20:59.054]  - attr(*, "total_size")= num 0
[16:20:59.054]  - attr(*, "already-done")= logi TRUE
[16:20:59.056] - copied ‘x’ to environment
[16:20:59.056] assign_globals() ... done
[16:20:59.057] plan(): Setting new future strategy stack:
[16:20:59.057] List of future strategies:
[16:20:59.057] 1. sequential:
[16:20:59.057]    - args: function (..., envir = parent.frame())
[16:20:59.057]    - tweaked: FALSE
[16:20:59.057]    - call: NULL
[16:20:59.057] plan(): nbrOfWorkers() = 1
[16:20:59.058] plan(): Setting new future strategy stack:
[16:20:59.058] List of future strategies:
[16:20:59.058] 1. sequential:
[16:20:59.058]    - args: function (..., envir = parent.frame())
[16:20:59.058]    - tweaked: FALSE
[16:20:59.058]    - call: plan(strategy)
[16:20:59.058] plan(): nbrOfWorkers() = 1
[16:20:59.058] SequentialFuture started (and completed)
[16:20:59.058] - Launch lazy future ... done
[16:20:59.058] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.059] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.059] Searching for globals...
[16:20:59.062] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.062] Searching for globals ... DONE
[16:20:59.062] Resolving globals: TRUE
[16:20:59.062] Resolving any globals that are futures ...
[16:20:59.062] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.062] Resolving any globals that are futures ... DONE
[16:20:59.063] Resolving futures part of globals (recursively) ...
[16:20:59.063] resolve() on list ...
[16:20:59.063]  recursive: 99
[16:20:59.063]  length: 1
[16:20:59.063]  elements: ‘x’
[16:20:59.063]  length: 0 (resolved future 1)
[16:20:59.063] resolve() on list ... DONE
[16:20:59.063] - globals: [1] ‘x’
[16:20:59.063] Resolving futures part of globals (recursively) ... DONE
[16:20:59.064] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.064] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.064] - globals: [1] ‘x’
[16:20:59.064] 
[16:20:59.064] getGlobalsAndPackages() ... DONE
[16:20:59.064] run() for ‘Future’ ...
[16:20:59.065] - state: ‘created’
[16:20:59.065] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.065] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.065] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.065]   - Field: ‘label’
[16:20:59.065]   - Field: ‘local’
[16:20:59.065]   - Field: ‘owner’
[16:20:59.065]   - Field: ‘envir’
[16:20:59.066]   - Field: ‘packages’
[16:20:59.066]   - Field: ‘gc’
[16:20:59.066]   - Field: ‘conditions’
[16:20:59.066]   - Field: ‘expr’
[16:20:59.066]   - Field: ‘uuid’
[16:20:59.066]   - Field: ‘seed’
[16:20:59.066]   - Field: ‘version’
[16:20:59.066]   - Field: ‘result’
[16:20:59.066]   - Field: ‘asynchronous’
[16:20:59.066]   - Field: ‘calls’
[16:20:59.066]   - Field: ‘globals’
[16:20:59.067]   - Field: ‘stdout’
[16:20:59.067]   - Field: ‘earlySignal’
[16:20:59.067]   - Field: ‘lazy’
[16:20:59.067]   - Field: ‘state’
[16:20:59.067] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.067] - Launch lazy future ...
[16:20:59.067] Packages needed by the future expression (n = 0): <none>
[16:20:59.067] Packages needed by future strategies (n = 0): <none>
[16:20:59.068] {
[16:20:59.068]     {
[16:20:59.068]         {
[16:20:59.068]             ...future.startTime <- base::Sys.time()
[16:20:59.068]             {
[16:20:59.068]                 {
[16:20:59.068]                   {
[16:20:59.068]                     base::local({
[16:20:59.068]                       has_future <- base::requireNamespace("future", 
[16:20:59.068]                         quietly = TRUE)
[16:20:59.068]                       if (has_future) {
[16:20:59.068]                         ns <- base::getNamespace("future")
[16:20:59.068]                         version <- ns[[".package"]][["version"]]
[16:20:59.068]                         if (is.null(version)) 
[16:20:59.068]                           version <- utils::packageVersion("future")
[16:20:59.068]                       }
[16:20:59.068]                       else {
[16:20:59.068]                         version <- NULL
[16:20:59.068]                       }
[16:20:59.068]                       if (!has_future || version < "1.8.0") {
[16:20:59.068]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.068]                           "", base::R.version$version.string), 
[16:20:59.068]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.068]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.068]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.068]                             "release", "version")], collapse = " "), 
[16:20:59.068]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.068]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.068]                           info)
[16:20:59.068]                         info <- base::paste(info, collapse = "; ")
[16:20:59.068]                         if (!has_future) {
[16:20:59.068]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.068]                             info)
[16:20:59.068]                         }
[16:20:59.068]                         else {
[16:20:59.068]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.068]                             info, version)
[16:20:59.068]                         }
[16:20:59.068]                         base::stop(msg)
[16:20:59.068]                       }
[16:20:59.068]                     })
[16:20:59.068]                   }
[16:20:59.068]                   ...future.strategy.old <- future::plan("list")
[16:20:59.068]                   options(future.plan = NULL)
[16:20:59.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.068]                 }
[16:20:59.068]                 ...future.workdir <- getwd()
[16:20:59.068]             }
[16:20:59.068]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.068]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.068]         }
[16:20:59.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.068]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.068]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.068]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.068]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.068]             base::names(...future.oldOptions))
[16:20:59.068]     }
[16:20:59.068]     if (FALSE) {
[16:20:59.068]     }
[16:20:59.068]     else {
[16:20:59.068]         if (TRUE) {
[16:20:59.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.068]                 open = "w")
[16:20:59.068]         }
[16:20:59.068]         else {
[16:20:59.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.068]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.068]         }
[16:20:59.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.068]             base::sink(type = "output", split = FALSE)
[16:20:59.068]             base::close(...future.stdout)
[16:20:59.068]         }, add = TRUE)
[16:20:59.068]     }
[16:20:59.068]     ...future.frame <- base::sys.nframe()
[16:20:59.068]     ...future.conditions <- base::list()
[16:20:59.068]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.068]     if (FALSE) {
[16:20:59.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.068]     }
[16:20:59.068]     ...future.result <- base::tryCatch({
[16:20:59.068]         base::withCallingHandlers({
[16:20:59.068]             ...future.value <- base::withVisible(base::local({
[16:20:59.068]                 x[["a"]] <- 1
[16:20:59.068]                 x
[16:20:59.068]             }))
[16:20:59.068]             future::FutureResult(value = ...future.value$value, 
[16:20:59.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.068]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.068]                     ...future.globalenv.names))
[16:20:59.068]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.068]         }, condition = base::local({
[16:20:59.068]             c <- base::c
[16:20:59.068]             inherits <- base::inherits
[16:20:59.068]             invokeRestart <- base::invokeRestart
[16:20:59.068]             length <- base::length
[16:20:59.068]             list <- base::list
[16:20:59.068]             seq.int <- base::seq.int
[16:20:59.068]             signalCondition <- base::signalCondition
[16:20:59.068]             sys.calls <- base::sys.calls
[16:20:59.068]             `[[` <- base::`[[`
[16:20:59.068]             `+` <- base::`+`
[16:20:59.068]             `<<-` <- base::`<<-`
[16:20:59.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.068]                   3L)]
[16:20:59.068]             }
[16:20:59.068]             function(cond) {
[16:20:59.068]                 is_error <- inherits(cond, "error")
[16:20:59.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.068]                   NULL)
[16:20:59.068]                 if (is_error) {
[16:20:59.068]                   sessionInformation <- function() {
[16:20:59.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.068]                       search = base::search(), system = base::Sys.info())
[16:20:59.068]                   }
[16:20:59.068]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.068]                     cond$call), session = sessionInformation(), 
[16:20:59.068]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.068]                   signalCondition(cond)
[16:20:59.068]                 }
[16:20:59.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.068]                 "immediateCondition"))) {
[16:20:59.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.068]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.068]                   if (TRUE && !signal) {
[16:20:59.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.068]                     {
[16:20:59.068]                       inherits <- base::inherits
[16:20:59.068]                       invokeRestart <- base::invokeRestart
[16:20:59.068]                       is.null <- base::is.null
[16:20:59.068]                       muffled <- FALSE
[16:20:59.068]                       if (inherits(cond, "message")) {
[16:20:59.068]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.068]                         if (muffled) 
[16:20:59.068]                           invokeRestart("muffleMessage")
[16:20:59.068]                       }
[16:20:59.068]                       else if (inherits(cond, "warning")) {
[16:20:59.068]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.068]                         if (muffled) 
[16:20:59.068]                           invokeRestart("muffleWarning")
[16:20:59.068]                       }
[16:20:59.068]                       else if (inherits(cond, "condition")) {
[16:20:59.068]                         if (!is.null(pattern)) {
[16:20:59.068]                           computeRestarts <- base::computeRestarts
[16:20:59.068]                           grepl <- base::grepl
[16:20:59.068]                           restarts <- computeRestarts(cond)
[16:20:59.068]                           for (restart in restarts) {
[16:20:59.068]                             name <- restart$name
[16:20:59.068]                             if (is.null(name)) 
[16:20:59.068]                               next
[16:20:59.068]                             if (!grepl(pattern, name)) 
[16:20:59.068]                               next
[16:20:59.068]                             invokeRestart(restart)
[16:20:59.068]                             muffled <- TRUE
[16:20:59.068]                             break
[16:20:59.068]                           }
[16:20:59.068]                         }
[16:20:59.068]                       }
[16:20:59.068]                       invisible(muffled)
[16:20:59.068]                     }
[16:20:59.068]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.068]                   }
[16:20:59.068]                 }
[16:20:59.068]                 else {
[16:20:59.068]                   if (TRUE) {
[16:20:59.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.068]                     {
[16:20:59.068]                       inherits <- base::inherits
[16:20:59.068]                       invokeRestart <- base::invokeRestart
[16:20:59.068]                       is.null <- base::is.null
[16:20:59.068]                       muffled <- FALSE
[16:20:59.068]                       if (inherits(cond, "message")) {
[16:20:59.068]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.068]                         if (muffled) 
[16:20:59.068]                           invokeRestart("muffleMessage")
[16:20:59.068]                       }
[16:20:59.068]                       else if (inherits(cond, "warning")) {
[16:20:59.068]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.068]                         if (muffled) 
[16:20:59.068]                           invokeRestart("muffleWarning")
[16:20:59.068]                       }
[16:20:59.068]                       else if (inherits(cond, "condition")) {
[16:20:59.068]                         if (!is.null(pattern)) {
[16:20:59.068]                           computeRestarts <- base::computeRestarts
[16:20:59.068]                           grepl <- base::grepl
[16:20:59.068]                           restarts <- computeRestarts(cond)
[16:20:59.068]                           for (restart in restarts) {
[16:20:59.068]                             name <- restart$name
[16:20:59.068]                             if (is.null(name)) 
[16:20:59.068]                               next
[16:20:59.068]                             if (!grepl(pattern, name)) 
[16:20:59.068]                               next
[16:20:59.068]                             invokeRestart(restart)
[16:20:59.068]                             muffled <- TRUE
[16:20:59.068]                             break
[16:20:59.068]                           }
[16:20:59.068]                         }
[16:20:59.068]                       }
[16:20:59.068]                       invisible(muffled)
[16:20:59.068]                     }
[16:20:59.068]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.068]                   }
[16:20:59.068]                 }
[16:20:59.068]             }
[16:20:59.068]         }))
[16:20:59.068]     }, error = function(ex) {
[16:20:59.068]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.068]                 ...future.rng), started = ...future.startTime, 
[16:20:59.068]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.068]             version = "1.8"), class = "FutureResult")
[16:20:59.068]     }, finally = {
[16:20:59.068]         if (!identical(...future.workdir, getwd())) 
[16:20:59.068]             setwd(...future.workdir)
[16:20:59.068]         {
[16:20:59.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.068]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.068]             }
[16:20:59.068]             base::options(...future.oldOptions)
[16:20:59.068]             if (.Platform$OS.type == "windows") {
[16:20:59.068]                 old_names <- names(...future.oldEnvVars)
[16:20:59.068]                 envs <- base::Sys.getenv()
[16:20:59.068]                 names <- names(envs)
[16:20:59.068]                 common <- intersect(names, old_names)
[16:20:59.068]                 added <- setdiff(names, old_names)
[16:20:59.068]                 removed <- setdiff(old_names, names)
[16:20:59.068]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.068]                   envs[common]]
[16:20:59.068]                 NAMES <- toupper(changed)
[16:20:59.068]                 args <- list()
[16:20:59.068]                 for (kk in seq_along(NAMES)) {
[16:20:59.068]                   name <- changed[[kk]]
[16:20:59.068]                   NAME <- NAMES[[kk]]
[16:20:59.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.068]                     next
[16:20:59.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.068]                 }
[16:20:59.068]                 NAMES <- toupper(added)
[16:20:59.068]                 for (kk in seq_along(NAMES)) {
[16:20:59.068]                   name <- added[[kk]]
[16:20:59.068]                   NAME <- NAMES[[kk]]
[16:20:59.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.068]                     next
[16:20:59.068]                   args[[name]] <- ""
[16:20:59.068]                 }
[16:20:59.068]                 NAMES <- toupper(removed)
[16:20:59.068]                 for (kk in seq_along(NAMES)) {
[16:20:59.068]                   name <- removed[[kk]]
[16:20:59.068]                   NAME <- NAMES[[kk]]
[16:20:59.068]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.068]                     next
[16:20:59.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.068]                 }
[16:20:59.068]                 if (length(args) > 0) 
[16:20:59.068]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.068]             }
[16:20:59.068]             else {
[16:20:59.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.068]             }
[16:20:59.068]             {
[16:20:59.068]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.068]                   0L) {
[16:20:59.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.068]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.068]                   base::options(opts)
[16:20:59.068]                 }
[16:20:59.068]                 {
[16:20:59.068]                   {
[16:20:59.068]                     NULL
[16:20:59.068]                     RNGkind("Mersenne-Twister")
[16:20:59.068]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.068]                       inherits = FALSE)
[16:20:59.068]                   }
[16:20:59.068]                   options(future.plan = NULL)
[16:20:59.068]                   if (is.na(NA_character_)) 
[16:20:59.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.068]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.068]                     .init = FALSE)
[16:20:59.068]                 }
[16:20:59.068]             }
[16:20:59.068]         }
[16:20:59.068]     })
[16:20:59.068]     if (TRUE) {
[16:20:59.068]         base::sink(type = "output", split = FALSE)
[16:20:59.068]         if (TRUE) {
[16:20:59.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.068]         }
[16:20:59.068]         else {
[16:20:59.068]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.068]         }
[16:20:59.068]         base::close(...future.stdout)
[16:20:59.068]         ...future.stdout <- NULL
[16:20:59.068]     }
[16:20:59.068]     ...future.result$conditions <- ...future.conditions
[16:20:59.068]     ...future.result$finished <- base::Sys.time()
[16:20:59.068]     ...future.result
[16:20:59.068] }
[16:20:59.069] assign_globals() ...
[16:20:59.069] List of 1
[16:20:59.069]  $ x: list()
[16:20:59.069]  - attr(*, "where")=List of 1
[16:20:59.069]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.069]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.069]  - attr(*, "resolved")= logi TRUE
[16:20:59.069]  - attr(*, "total_size")= num 0
[16:20:59.069]  - attr(*, "already-done")= logi TRUE
[16:20:59.071] - copied ‘x’ to environment
[16:20:59.072] assign_globals() ... done
[16:20:59.072] plan(): Setting new future strategy stack:
[16:20:59.072] List of future strategies:
[16:20:59.072] 1. sequential:
[16:20:59.072]    - args: function (..., envir = parent.frame())
[16:20:59.072]    - tweaked: FALSE
[16:20:59.072]    - call: NULL
[16:20:59.072] plan(): nbrOfWorkers() = 1
[16:20:59.073] plan(): Setting new future strategy stack:
[16:20:59.073] List of future strategies:
[16:20:59.073] 1. sequential:
[16:20:59.073]    - args: function (..., envir = parent.frame())
[16:20:59.073]    - tweaked: FALSE
[16:20:59.073]    - call: plan(strategy)
[16:20:59.073] plan(): nbrOfWorkers() = 1
[16:20:59.074] SequentialFuture started (and completed)
[16:20:59.074] - Launch lazy future ... done
[16:20:59.074] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.074] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.074] Searching for globals...
[16:20:59.076] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.076] Searching for globals ... DONE
[16:20:59.076] Resolving globals: TRUE
[16:20:59.076] Resolving any globals that are futures ...
[16:20:59.076] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.077] Resolving any globals that are futures ... DONE
[16:20:59.077] Resolving futures part of globals (recursively) ...
[16:20:59.077] resolve() on list ...
[16:20:59.077]  recursive: 99
[16:20:59.077]  length: 1
[16:20:59.077]  elements: ‘x’
[16:20:59.078]  length: 0 (resolved future 1)
[16:20:59.078] resolve() on list ... DONE
[16:20:59.078] - globals: [1] ‘x’
[16:20:59.078] Resolving futures part of globals (recursively) ... DONE
[16:20:59.078] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.078] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.078] - globals: [1] ‘x’
[16:20:59.078] 
[16:20:59.079] getGlobalsAndPackages() ... DONE
[16:20:59.079] run() for ‘Future’ ...
[16:20:59.079] - state: ‘created’
[16:20:59.079] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.079] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.079] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.079]   - Field: ‘label’
[16:20:59.080]   - Field: ‘local’
[16:20:59.080]   - Field: ‘owner’
[16:20:59.080]   - Field: ‘envir’
[16:20:59.080]   - Field: ‘packages’
[16:20:59.080]   - Field: ‘gc’
[16:20:59.080]   - Field: ‘conditions’
[16:20:59.080]   - Field: ‘expr’
[16:20:59.080]   - Field: ‘uuid’
[16:20:59.080]   - Field: ‘seed’
[16:20:59.080]   - Field: ‘version’
[16:20:59.080]   - Field: ‘result’
[16:20:59.081]   - Field: ‘asynchronous’
[16:20:59.081]   - Field: ‘calls’
[16:20:59.081]   - Field: ‘globals’
[16:20:59.081]   - Field: ‘stdout’
[16:20:59.081]   - Field: ‘earlySignal’
[16:20:59.081]   - Field: ‘lazy’
[16:20:59.081]   - Field: ‘state’
[16:20:59.081] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.081] - Launch lazy future ...
[16:20:59.081] Packages needed by the future expression (n = 0): <none>
[16:20:59.082] Packages needed by future strategies (n = 0): <none>
[16:20:59.082] {
[16:20:59.082]     {
[16:20:59.082]         {
[16:20:59.082]             ...future.startTime <- base::Sys.time()
[16:20:59.082]             {
[16:20:59.082]                 {
[16:20:59.082]                   {
[16:20:59.082]                     base::local({
[16:20:59.082]                       has_future <- base::requireNamespace("future", 
[16:20:59.082]                         quietly = TRUE)
[16:20:59.082]                       if (has_future) {
[16:20:59.082]                         ns <- base::getNamespace("future")
[16:20:59.082]                         version <- ns[[".package"]][["version"]]
[16:20:59.082]                         if (is.null(version)) 
[16:20:59.082]                           version <- utils::packageVersion("future")
[16:20:59.082]                       }
[16:20:59.082]                       else {
[16:20:59.082]                         version <- NULL
[16:20:59.082]                       }
[16:20:59.082]                       if (!has_future || version < "1.8.0") {
[16:20:59.082]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.082]                           "", base::R.version$version.string), 
[16:20:59.082]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.082]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.082]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.082]                             "release", "version")], collapse = " "), 
[16:20:59.082]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.082]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.082]                           info)
[16:20:59.082]                         info <- base::paste(info, collapse = "; ")
[16:20:59.082]                         if (!has_future) {
[16:20:59.082]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.082]                             info)
[16:20:59.082]                         }
[16:20:59.082]                         else {
[16:20:59.082]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.082]                             info, version)
[16:20:59.082]                         }
[16:20:59.082]                         base::stop(msg)
[16:20:59.082]                       }
[16:20:59.082]                     })
[16:20:59.082]                   }
[16:20:59.082]                   ...future.strategy.old <- future::plan("list")
[16:20:59.082]                   options(future.plan = NULL)
[16:20:59.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.082]                 }
[16:20:59.082]                 ...future.workdir <- getwd()
[16:20:59.082]             }
[16:20:59.082]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.082]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.082]         }
[16:20:59.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.082]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.082]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.082]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.082]             base::names(...future.oldOptions))
[16:20:59.082]     }
[16:20:59.082]     if (FALSE) {
[16:20:59.082]     }
[16:20:59.082]     else {
[16:20:59.082]         if (TRUE) {
[16:20:59.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.082]                 open = "w")
[16:20:59.082]         }
[16:20:59.082]         else {
[16:20:59.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.082]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.082]         }
[16:20:59.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.082]             base::sink(type = "output", split = FALSE)
[16:20:59.082]             base::close(...future.stdout)
[16:20:59.082]         }, add = TRUE)
[16:20:59.082]     }
[16:20:59.082]     ...future.frame <- base::sys.nframe()
[16:20:59.082]     ...future.conditions <- base::list()
[16:20:59.082]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.082]     if (FALSE) {
[16:20:59.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.082]     }
[16:20:59.082]     ...future.result <- base::tryCatch({
[16:20:59.082]         base::withCallingHandlers({
[16:20:59.082]             ...future.value <- base::withVisible(base::local({
[16:20:59.082]                 x[["a"]] <- 1
[16:20:59.082]                 x
[16:20:59.082]             }))
[16:20:59.082]             future::FutureResult(value = ...future.value$value, 
[16:20:59.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.082]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.082]                     ...future.globalenv.names))
[16:20:59.082]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.082]         }, condition = base::local({
[16:20:59.082]             c <- base::c
[16:20:59.082]             inherits <- base::inherits
[16:20:59.082]             invokeRestart <- base::invokeRestart
[16:20:59.082]             length <- base::length
[16:20:59.082]             list <- base::list
[16:20:59.082]             seq.int <- base::seq.int
[16:20:59.082]             signalCondition <- base::signalCondition
[16:20:59.082]             sys.calls <- base::sys.calls
[16:20:59.082]             `[[` <- base::`[[`
[16:20:59.082]             `+` <- base::`+`
[16:20:59.082]             `<<-` <- base::`<<-`
[16:20:59.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.082]                   3L)]
[16:20:59.082]             }
[16:20:59.082]             function(cond) {
[16:20:59.082]                 is_error <- inherits(cond, "error")
[16:20:59.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.082]                   NULL)
[16:20:59.082]                 if (is_error) {
[16:20:59.082]                   sessionInformation <- function() {
[16:20:59.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.082]                       search = base::search(), system = base::Sys.info())
[16:20:59.082]                   }
[16:20:59.082]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.082]                     cond$call), session = sessionInformation(), 
[16:20:59.082]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.082]                   signalCondition(cond)
[16:20:59.082]                 }
[16:20:59.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.082]                 "immediateCondition"))) {
[16:20:59.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.082]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.082]                   if (TRUE && !signal) {
[16:20:59.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.082]                     {
[16:20:59.082]                       inherits <- base::inherits
[16:20:59.082]                       invokeRestart <- base::invokeRestart
[16:20:59.082]                       is.null <- base::is.null
[16:20:59.082]                       muffled <- FALSE
[16:20:59.082]                       if (inherits(cond, "message")) {
[16:20:59.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.082]                         if (muffled) 
[16:20:59.082]                           invokeRestart("muffleMessage")
[16:20:59.082]                       }
[16:20:59.082]                       else if (inherits(cond, "warning")) {
[16:20:59.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.082]                         if (muffled) 
[16:20:59.082]                           invokeRestart("muffleWarning")
[16:20:59.082]                       }
[16:20:59.082]                       else if (inherits(cond, "condition")) {
[16:20:59.082]                         if (!is.null(pattern)) {
[16:20:59.082]                           computeRestarts <- base::computeRestarts
[16:20:59.082]                           grepl <- base::grepl
[16:20:59.082]                           restarts <- computeRestarts(cond)
[16:20:59.082]                           for (restart in restarts) {
[16:20:59.082]                             name <- restart$name
[16:20:59.082]                             if (is.null(name)) 
[16:20:59.082]                               next
[16:20:59.082]                             if (!grepl(pattern, name)) 
[16:20:59.082]                               next
[16:20:59.082]                             invokeRestart(restart)
[16:20:59.082]                             muffled <- TRUE
[16:20:59.082]                             break
[16:20:59.082]                           }
[16:20:59.082]                         }
[16:20:59.082]                       }
[16:20:59.082]                       invisible(muffled)
[16:20:59.082]                     }
[16:20:59.082]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.082]                   }
[16:20:59.082]                 }
[16:20:59.082]                 else {
[16:20:59.082]                   if (TRUE) {
[16:20:59.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.082]                     {
[16:20:59.082]                       inherits <- base::inherits
[16:20:59.082]                       invokeRestart <- base::invokeRestart
[16:20:59.082]                       is.null <- base::is.null
[16:20:59.082]                       muffled <- FALSE
[16:20:59.082]                       if (inherits(cond, "message")) {
[16:20:59.082]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.082]                         if (muffled) 
[16:20:59.082]                           invokeRestart("muffleMessage")
[16:20:59.082]                       }
[16:20:59.082]                       else if (inherits(cond, "warning")) {
[16:20:59.082]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.082]                         if (muffled) 
[16:20:59.082]                           invokeRestart("muffleWarning")
[16:20:59.082]                       }
[16:20:59.082]                       else if (inherits(cond, "condition")) {
[16:20:59.082]                         if (!is.null(pattern)) {
[16:20:59.082]                           computeRestarts <- base::computeRestarts
[16:20:59.082]                           grepl <- base::grepl
[16:20:59.082]                           restarts <- computeRestarts(cond)
[16:20:59.082]                           for (restart in restarts) {
[16:20:59.082]                             name <- restart$name
[16:20:59.082]                             if (is.null(name)) 
[16:20:59.082]                               next
[16:20:59.082]                             if (!grepl(pattern, name)) 
[16:20:59.082]                               next
[16:20:59.082]                             invokeRestart(restart)
[16:20:59.082]                             muffled <- TRUE
[16:20:59.082]                             break
[16:20:59.082]                           }
[16:20:59.082]                         }
[16:20:59.082]                       }
[16:20:59.082]                       invisible(muffled)
[16:20:59.082]                     }
[16:20:59.082]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.082]                   }
[16:20:59.082]                 }
[16:20:59.082]             }
[16:20:59.082]         }))
[16:20:59.082]     }, error = function(ex) {
[16:20:59.082]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.082]                 ...future.rng), started = ...future.startTime, 
[16:20:59.082]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.082]             version = "1.8"), class = "FutureResult")
[16:20:59.082]     }, finally = {
[16:20:59.082]         if (!identical(...future.workdir, getwd())) 
[16:20:59.082]             setwd(...future.workdir)
[16:20:59.082]         {
[16:20:59.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.082]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.082]             }
[16:20:59.082]             base::options(...future.oldOptions)
[16:20:59.082]             if (.Platform$OS.type == "windows") {
[16:20:59.082]                 old_names <- names(...future.oldEnvVars)
[16:20:59.082]                 envs <- base::Sys.getenv()
[16:20:59.082]                 names <- names(envs)
[16:20:59.082]                 common <- intersect(names, old_names)
[16:20:59.082]                 added <- setdiff(names, old_names)
[16:20:59.082]                 removed <- setdiff(old_names, names)
[16:20:59.082]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.082]                   envs[common]]
[16:20:59.082]                 NAMES <- toupper(changed)
[16:20:59.082]                 args <- list()
[16:20:59.082]                 for (kk in seq_along(NAMES)) {
[16:20:59.082]                   name <- changed[[kk]]
[16:20:59.082]                   NAME <- NAMES[[kk]]
[16:20:59.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.082]                     next
[16:20:59.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.082]                 }
[16:20:59.082]                 NAMES <- toupper(added)
[16:20:59.082]                 for (kk in seq_along(NAMES)) {
[16:20:59.082]                   name <- added[[kk]]
[16:20:59.082]                   NAME <- NAMES[[kk]]
[16:20:59.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.082]                     next
[16:20:59.082]                   args[[name]] <- ""
[16:20:59.082]                 }
[16:20:59.082]                 NAMES <- toupper(removed)
[16:20:59.082]                 for (kk in seq_along(NAMES)) {
[16:20:59.082]                   name <- removed[[kk]]
[16:20:59.082]                   NAME <- NAMES[[kk]]
[16:20:59.082]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.082]                     next
[16:20:59.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.082]                 }
[16:20:59.082]                 if (length(args) > 0) 
[16:20:59.082]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.082]             }
[16:20:59.082]             else {
[16:20:59.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.082]             }
[16:20:59.082]             {
[16:20:59.082]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.082]                   0L) {
[16:20:59.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.082]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.082]                   base::options(opts)
[16:20:59.082]                 }
[16:20:59.082]                 {
[16:20:59.082]                   {
[16:20:59.082]                     NULL
[16:20:59.082]                     RNGkind("Mersenne-Twister")
[16:20:59.082]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.082]                       inherits = FALSE)
[16:20:59.082]                   }
[16:20:59.082]                   options(future.plan = NULL)
[16:20:59.082]                   if (is.na(NA_character_)) 
[16:20:59.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.082]                     .init = FALSE)
[16:20:59.082]                 }
[16:20:59.082]             }
[16:20:59.082]         }
[16:20:59.082]     })
[16:20:59.082]     if (TRUE) {
[16:20:59.082]         base::sink(type = "output", split = FALSE)
[16:20:59.082]         if (TRUE) {
[16:20:59.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.082]         }
[16:20:59.082]         else {
[16:20:59.082]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.082]         }
[16:20:59.082]         base::close(...future.stdout)
[16:20:59.082]         ...future.stdout <- NULL
[16:20:59.082]     }
[16:20:59.082]     ...future.result$conditions <- ...future.conditions
[16:20:59.082]     ...future.result$finished <- base::Sys.time()
[16:20:59.082]     ...future.result
[16:20:59.082] }
[16:20:59.084] assign_globals() ...
[16:20:59.084] List of 1
[16:20:59.084]  $ x: list()
[16:20:59.084]  - attr(*, "where")=List of 1
[16:20:59.084]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.084]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.084]  - attr(*, "resolved")= logi TRUE
[16:20:59.084]  - attr(*, "total_size")= num 0
[16:20:59.084]  - attr(*, "already-done")= logi TRUE
[16:20:59.087] - copied ‘x’ to environment
[16:20:59.087] assign_globals() ... done
[16:20:59.087] plan(): Setting new future strategy stack:
[16:20:59.087] List of future strategies:
[16:20:59.087] 1. sequential:
[16:20:59.087]    - args: function (..., envir = parent.frame())
[16:20:59.087]    - tweaked: FALSE
[16:20:59.087]    - call: NULL
[16:20:59.088] plan(): nbrOfWorkers() = 1
[16:20:59.088] plan(): Setting new future strategy stack:
[16:20:59.089] List of future strategies:
[16:20:59.089] 1. sequential:
[16:20:59.089]    - args: function (..., envir = parent.frame())
[16:20:59.089]    - tweaked: FALSE
[16:20:59.089]    - call: plan(strategy)
[16:20:59.089] plan(): nbrOfWorkers() = 1
[16:20:59.089] SequentialFuture started (and completed)
[16:20:59.089] - Launch lazy future ... done
[16:20:59.089] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.090] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.090] Searching for globals...
[16:20:59.092] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.092] Searching for globals ... DONE
[16:20:59.092] Resolving globals: TRUE
[16:20:59.092] Resolving any globals that are futures ...
[16:20:59.092] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.092] Resolving any globals that are futures ... DONE
[16:20:59.093] Resolving futures part of globals (recursively) ...
[16:20:59.093] resolve() on list ...
[16:20:59.093]  recursive: 99
[16:20:59.093]  length: 1
[16:20:59.093]  elements: ‘x’
[16:20:59.093]  length: 0 (resolved future 1)
[16:20:59.093] resolve() on list ... DONE
[16:20:59.093] - globals: [1] ‘x’
[16:20:59.093] Resolving futures part of globals (recursively) ... DONE
[16:20:59.094] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.094] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.094] - globals: [1] ‘x’
[16:20:59.094] 
[16:20:59.094] getGlobalsAndPackages() ... DONE
[16:20:59.094] run() for ‘Future’ ...
[16:20:59.095] - state: ‘created’
[16:20:59.095] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.095] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.095]   - Field: ‘label’
[16:20:59.095]   - Field: ‘local’
[16:20:59.095]   - Field: ‘owner’
[16:20:59.095]   - Field: ‘envir’
[16:20:59.096]   - Field: ‘packages’
[16:20:59.096]   - Field: ‘gc’
[16:20:59.096]   - Field: ‘conditions’
[16:20:59.096]   - Field: ‘expr’
[16:20:59.096]   - Field: ‘uuid’
[16:20:59.096]   - Field: ‘seed’
[16:20:59.096]   - Field: ‘version’
[16:20:59.096]   - Field: ‘result’
[16:20:59.096]   - Field: ‘asynchronous’
[16:20:59.096]   - Field: ‘calls’
[16:20:59.096]   - Field: ‘globals’
[16:20:59.097]   - Field: ‘stdout’
[16:20:59.097]   - Field: ‘earlySignal’
[16:20:59.097]   - Field: ‘lazy’
[16:20:59.097]   - Field: ‘state’
[16:20:59.097] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.097] - Launch lazy future ...
[16:20:59.097] Packages needed by the future expression (n = 0): <none>
[16:20:59.097] Packages needed by future strategies (n = 0): <none>
[16:20:59.098] {
[16:20:59.098]     {
[16:20:59.098]         {
[16:20:59.098]             ...future.startTime <- base::Sys.time()
[16:20:59.098]             {
[16:20:59.098]                 {
[16:20:59.098]                   {
[16:20:59.098]                     base::local({
[16:20:59.098]                       has_future <- base::requireNamespace("future", 
[16:20:59.098]                         quietly = TRUE)
[16:20:59.098]                       if (has_future) {
[16:20:59.098]                         ns <- base::getNamespace("future")
[16:20:59.098]                         version <- ns[[".package"]][["version"]]
[16:20:59.098]                         if (is.null(version)) 
[16:20:59.098]                           version <- utils::packageVersion("future")
[16:20:59.098]                       }
[16:20:59.098]                       else {
[16:20:59.098]                         version <- NULL
[16:20:59.098]                       }
[16:20:59.098]                       if (!has_future || version < "1.8.0") {
[16:20:59.098]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.098]                           "", base::R.version$version.string), 
[16:20:59.098]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.098]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.098]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.098]                             "release", "version")], collapse = " "), 
[16:20:59.098]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.098]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.098]                           info)
[16:20:59.098]                         info <- base::paste(info, collapse = "; ")
[16:20:59.098]                         if (!has_future) {
[16:20:59.098]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.098]                             info)
[16:20:59.098]                         }
[16:20:59.098]                         else {
[16:20:59.098]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.098]                             info, version)
[16:20:59.098]                         }
[16:20:59.098]                         base::stop(msg)
[16:20:59.098]                       }
[16:20:59.098]                     })
[16:20:59.098]                   }
[16:20:59.098]                   ...future.strategy.old <- future::plan("list")
[16:20:59.098]                   options(future.plan = NULL)
[16:20:59.098]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.098]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.098]                 }
[16:20:59.098]                 ...future.workdir <- getwd()
[16:20:59.098]             }
[16:20:59.098]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.098]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.098]         }
[16:20:59.098]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.098]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.098]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.098]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.098]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.098]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.098]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.098]             base::names(...future.oldOptions))
[16:20:59.098]     }
[16:20:59.098]     if (FALSE) {
[16:20:59.098]     }
[16:20:59.098]     else {
[16:20:59.098]         if (TRUE) {
[16:20:59.098]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.098]                 open = "w")
[16:20:59.098]         }
[16:20:59.098]         else {
[16:20:59.098]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.098]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.098]         }
[16:20:59.098]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.098]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.098]             base::sink(type = "output", split = FALSE)
[16:20:59.098]             base::close(...future.stdout)
[16:20:59.098]         }, add = TRUE)
[16:20:59.098]     }
[16:20:59.098]     ...future.frame <- base::sys.nframe()
[16:20:59.098]     ...future.conditions <- base::list()
[16:20:59.098]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.098]     if (FALSE) {
[16:20:59.098]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.098]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.098]     }
[16:20:59.098]     ...future.result <- base::tryCatch({
[16:20:59.098]         base::withCallingHandlers({
[16:20:59.098]             ...future.value <- base::withVisible(base::local({
[16:20:59.098]                 x["a"] <- list(1)
[16:20:59.098]                 x
[16:20:59.098]             }))
[16:20:59.098]             future::FutureResult(value = ...future.value$value, 
[16:20:59.098]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.098]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.098]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.098]                     ...future.globalenv.names))
[16:20:59.098]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.098]         }, condition = base::local({
[16:20:59.098]             c <- base::c
[16:20:59.098]             inherits <- base::inherits
[16:20:59.098]             invokeRestart <- base::invokeRestart
[16:20:59.098]             length <- base::length
[16:20:59.098]             list <- base::list
[16:20:59.098]             seq.int <- base::seq.int
[16:20:59.098]             signalCondition <- base::signalCondition
[16:20:59.098]             sys.calls <- base::sys.calls
[16:20:59.098]             `[[` <- base::`[[`
[16:20:59.098]             `+` <- base::`+`
[16:20:59.098]             `<<-` <- base::`<<-`
[16:20:59.098]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.098]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.098]                   3L)]
[16:20:59.098]             }
[16:20:59.098]             function(cond) {
[16:20:59.098]                 is_error <- inherits(cond, "error")
[16:20:59.098]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.098]                   NULL)
[16:20:59.098]                 if (is_error) {
[16:20:59.098]                   sessionInformation <- function() {
[16:20:59.098]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.098]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.098]                       search = base::search(), system = base::Sys.info())
[16:20:59.098]                   }
[16:20:59.098]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.098]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.098]                     cond$call), session = sessionInformation(), 
[16:20:59.098]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.098]                   signalCondition(cond)
[16:20:59.098]                 }
[16:20:59.098]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.098]                 "immediateCondition"))) {
[16:20:59.098]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.098]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.098]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.098]                   if (TRUE && !signal) {
[16:20:59.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.098]                     {
[16:20:59.098]                       inherits <- base::inherits
[16:20:59.098]                       invokeRestart <- base::invokeRestart
[16:20:59.098]                       is.null <- base::is.null
[16:20:59.098]                       muffled <- FALSE
[16:20:59.098]                       if (inherits(cond, "message")) {
[16:20:59.098]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.098]                         if (muffled) 
[16:20:59.098]                           invokeRestart("muffleMessage")
[16:20:59.098]                       }
[16:20:59.098]                       else if (inherits(cond, "warning")) {
[16:20:59.098]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.098]                         if (muffled) 
[16:20:59.098]                           invokeRestart("muffleWarning")
[16:20:59.098]                       }
[16:20:59.098]                       else if (inherits(cond, "condition")) {
[16:20:59.098]                         if (!is.null(pattern)) {
[16:20:59.098]                           computeRestarts <- base::computeRestarts
[16:20:59.098]                           grepl <- base::grepl
[16:20:59.098]                           restarts <- computeRestarts(cond)
[16:20:59.098]                           for (restart in restarts) {
[16:20:59.098]                             name <- restart$name
[16:20:59.098]                             if (is.null(name)) 
[16:20:59.098]                               next
[16:20:59.098]                             if (!grepl(pattern, name)) 
[16:20:59.098]                               next
[16:20:59.098]                             invokeRestart(restart)
[16:20:59.098]                             muffled <- TRUE
[16:20:59.098]                             break
[16:20:59.098]                           }
[16:20:59.098]                         }
[16:20:59.098]                       }
[16:20:59.098]                       invisible(muffled)
[16:20:59.098]                     }
[16:20:59.098]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.098]                   }
[16:20:59.098]                 }
[16:20:59.098]                 else {
[16:20:59.098]                   if (TRUE) {
[16:20:59.098]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.098]                     {
[16:20:59.098]                       inherits <- base::inherits
[16:20:59.098]                       invokeRestart <- base::invokeRestart
[16:20:59.098]                       is.null <- base::is.null
[16:20:59.098]                       muffled <- FALSE
[16:20:59.098]                       if (inherits(cond, "message")) {
[16:20:59.098]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.098]                         if (muffled) 
[16:20:59.098]                           invokeRestart("muffleMessage")
[16:20:59.098]                       }
[16:20:59.098]                       else if (inherits(cond, "warning")) {
[16:20:59.098]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.098]                         if (muffled) 
[16:20:59.098]                           invokeRestart("muffleWarning")
[16:20:59.098]                       }
[16:20:59.098]                       else if (inherits(cond, "condition")) {
[16:20:59.098]                         if (!is.null(pattern)) {
[16:20:59.098]                           computeRestarts <- base::computeRestarts
[16:20:59.098]                           grepl <- base::grepl
[16:20:59.098]                           restarts <- computeRestarts(cond)
[16:20:59.098]                           for (restart in restarts) {
[16:20:59.098]                             name <- restart$name
[16:20:59.098]                             if (is.null(name)) 
[16:20:59.098]                               next
[16:20:59.098]                             if (!grepl(pattern, name)) 
[16:20:59.098]                               next
[16:20:59.098]                             invokeRestart(restart)
[16:20:59.098]                             muffled <- TRUE
[16:20:59.098]                             break
[16:20:59.098]                           }
[16:20:59.098]                         }
[16:20:59.098]                       }
[16:20:59.098]                       invisible(muffled)
[16:20:59.098]                     }
[16:20:59.098]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.098]                   }
[16:20:59.098]                 }
[16:20:59.098]             }
[16:20:59.098]         }))
[16:20:59.098]     }, error = function(ex) {
[16:20:59.098]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.098]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.098]                 ...future.rng), started = ...future.startTime, 
[16:20:59.098]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.098]             version = "1.8"), class = "FutureResult")
[16:20:59.098]     }, finally = {
[16:20:59.098]         if (!identical(...future.workdir, getwd())) 
[16:20:59.098]             setwd(...future.workdir)
[16:20:59.098]         {
[16:20:59.098]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.098]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.098]             }
[16:20:59.098]             base::options(...future.oldOptions)
[16:20:59.098]             if (.Platform$OS.type == "windows") {
[16:20:59.098]                 old_names <- names(...future.oldEnvVars)
[16:20:59.098]                 envs <- base::Sys.getenv()
[16:20:59.098]                 names <- names(envs)
[16:20:59.098]                 common <- intersect(names, old_names)
[16:20:59.098]                 added <- setdiff(names, old_names)
[16:20:59.098]                 removed <- setdiff(old_names, names)
[16:20:59.098]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.098]                   envs[common]]
[16:20:59.098]                 NAMES <- toupper(changed)
[16:20:59.098]                 args <- list()
[16:20:59.098]                 for (kk in seq_along(NAMES)) {
[16:20:59.098]                   name <- changed[[kk]]
[16:20:59.098]                   NAME <- NAMES[[kk]]
[16:20:59.098]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.098]                     next
[16:20:59.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.098]                 }
[16:20:59.098]                 NAMES <- toupper(added)
[16:20:59.098]                 for (kk in seq_along(NAMES)) {
[16:20:59.098]                   name <- added[[kk]]
[16:20:59.098]                   NAME <- NAMES[[kk]]
[16:20:59.098]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.098]                     next
[16:20:59.098]                   args[[name]] <- ""
[16:20:59.098]                 }
[16:20:59.098]                 NAMES <- toupper(removed)
[16:20:59.098]                 for (kk in seq_along(NAMES)) {
[16:20:59.098]                   name <- removed[[kk]]
[16:20:59.098]                   NAME <- NAMES[[kk]]
[16:20:59.098]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.098]                     next
[16:20:59.098]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.098]                 }
[16:20:59.098]                 if (length(args) > 0) 
[16:20:59.098]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.098]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.098]             }
[16:20:59.098]             else {
[16:20:59.098]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.098]             }
[16:20:59.098]             {
[16:20:59.098]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.098]                   0L) {
[16:20:59.098]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.098]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.098]                   base::options(opts)
[16:20:59.098]                 }
[16:20:59.098]                 {
[16:20:59.098]                   {
[16:20:59.098]                     NULL
[16:20:59.098]                     RNGkind("Mersenne-Twister")
[16:20:59.098]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.098]                       inherits = FALSE)
[16:20:59.098]                   }
[16:20:59.098]                   options(future.plan = NULL)
[16:20:59.098]                   if (is.na(NA_character_)) 
[16:20:59.098]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.098]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.098]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.098]                     .init = FALSE)
[16:20:59.098]                 }
[16:20:59.098]             }
[16:20:59.098]         }
[16:20:59.098]     })
[16:20:59.098]     if (TRUE) {
[16:20:59.098]         base::sink(type = "output", split = FALSE)
[16:20:59.098]         if (TRUE) {
[16:20:59.098]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.098]         }
[16:20:59.098]         else {
[16:20:59.098]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.098]         }
[16:20:59.098]         base::close(...future.stdout)
[16:20:59.098]         ...future.stdout <- NULL
[16:20:59.098]     }
[16:20:59.098]     ...future.result$conditions <- ...future.conditions
[16:20:59.098]     ...future.result$finished <- base::Sys.time()
[16:20:59.098]     ...future.result
[16:20:59.098] }
[16:20:59.099] assign_globals() ...
[16:20:59.099] List of 1
[16:20:59.099]  $ x: list()
[16:20:59.099]  - attr(*, "where")=List of 1
[16:20:59.099]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.099]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.099]  - attr(*, "resolved")= logi TRUE
[16:20:59.099]  - attr(*, "total_size")= num 0
[16:20:59.099]  - attr(*, "already-done")= logi TRUE
[16:20:59.101] - copied ‘x’ to environment
[16:20:59.102] assign_globals() ... done
[16:20:59.102] plan(): Setting new future strategy stack:
[16:20:59.102] List of future strategies:
[16:20:59.102] 1. sequential:
[16:20:59.102]    - args: function (..., envir = parent.frame())
[16:20:59.102]    - tweaked: FALSE
[16:20:59.102]    - call: NULL
[16:20:59.102] plan(): nbrOfWorkers() = 1
[16:20:59.103] plan(): Setting new future strategy stack:
[16:20:59.103] List of future strategies:
[16:20:59.103] 1. sequential:
[16:20:59.103]    - args: function (..., envir = parent.frame())
[16:20:59.103]    - tweaked: FALSE
[16:20:59.103]    - call: plan(strategy)
[16:20:59.103] plan(): nbrOfWorkers() = 1
[16:20:59.104] SequentialFuture started (and completed)
[16:20:59.104] - Launch lazy future ... done
[16:20:59.104] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.104] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.104] Searching for globals...
[16:20:59.106] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.106] Searching for globals ... DONE
[16:20:59.106] Resolving globals: TRUE
[16:20:59.106] Resolving any globals that are futures ...
[16:20:59.107] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.107] Resolving any globals that are futures ... DONE
[16:20:59.107] Resolving futures part of globals (recursively) ...
[16:20:59.107] resolve() on list ...
[16:20:59.107]  recursive: 99
[16:20:59.107]  length: 1
[16:20:59.107]  elements: ‘x’
[16:20:59.108]  length: 0 (resolved future 1)
[16:20:59.108] resolve() on list ... DONE
[16:20:59.108] - globals: [1] ‘x’
[16:20:59.108] Resolving futures part of globals (recursively) ... DONE
[16:20:59.108] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.108] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.108] - globals: [1] ‘x’
[16:20:59.109] 
[16:20:59.109] getGlobalsAndPackages() ... DONE
[16:20:59.109] run() for ‘Future’ ...
[16:20:59.109] - state: ‘created’
[16:20:59.109] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.109] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.109] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.110]   - Field: ‘label’
[16:20:59.110]   - Field: ‘local’
[16:20:59.110]   - Field: ‘owner’
[16:20:59.110]   - Field: ‘envir’
[16:20:59.110]   - Field: ‘packages’
[16:20:59.111]   - Field: ‘gc’
[16:20:59.111]   - Field: ‘conditions’
[16:20:59.111]   - Field: ‘expr’
[16:20:59.111]   - Field: ‘uuid’
[16:20:59.111]   - Field: ‘seed’
[16:20:59.112]   - Field: ‘version’
[16:20:59.112]   - Field: ‘result’
[16:20:59.112]   - Field: ‘asynchronous’
[16:20:59.112]   - Field: ‘calls’
[16:20:59.112]   - Field: ‘globals’
[16:20:59.112]   - Field: ‘stdout’
[16:20:59.112]   - Field: ‘earlySignal’
[16:20:59.112]   - Field: ‘lazy’
[16:20:59.112]   - Field: ‘state’
[16:20:59.112] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.113] - Launch lazy future ...
[16:20:59.113] Packages needed by the future expression (n = 0): <none>
[16:20:59.113] Packages needed by future strategies (n = 0): <none>
[16:20:59.113] {
[16:20:59.113]     {
[16:20:59.113]         {
[16:20:59.113]             ...future.startTime <- base::Sys.time()
[16:20:59.113]             {
[16:20:59.113]                 {
[16:20:59.113]                   {
[16:20:59.113]                     base::local({
[16:20:59.113]                       has_future <- base::requireNamespace("future", 
[16:20:59.113]                         quietly = TRUE)
[16:20:59.113]                       if (has_future) {
[16:20:59.113]                         ns <- base::getNamespace("future")
[16:20:59.113]                         version <- ns[[".package"]][["version"]]
[16:20:59.113]                         if (is.null(version)) 
[16:20:59.113]                           version <- utils::packageVersion("future")
[16:20:59.113]                       }
[16:20:59.113]                       else {
[16:20:59.113]                         version <- NULL
[16:20:59.113]                       }
[16:20:59.113]                       if (!has_future || version < "1.8.0") {
[16:20:59.113]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.113]                           "", base::R.version$version.string), 
[16:20:59.113]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.113]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.113]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.113]                             "release", "version")], collapse = " "), 
[16:20:59.113]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.113]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.113]                           info)
[16:20:59.113]                         info <- base::paste(info, collapse = "; ")
[16:20:59.113]                         if (!has_future) {
[16:20:59.113]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.113]                             info)
[16:20:59.113]                         }
[16:20:59.113]                         else {
[16:20:59.113]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.113]                             info, version)
[16:20:59.113]                         }
[16:20:59.113]                         base::stop(msg)
[16:20:59.113]                       }
[16:20:59.113]                     })
[16:20:59.113]                   }
[16:20:59.113]                   ...future.strategy.old <- future::plan("list")
[16:20:59.113]                   options(future.plan = NULL)
[16:20:59.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.113]                 }
[16:20:59.113]                 ...future.workdir <- getwd()
[16:20:59.113]             }
[16:20:59.113]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.113]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.113]         }
[16:20:59.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.113]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.113]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.113]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.113]             base::names(...future.oldOptions))
[16:20:59.113]     }
[16:20:59.113]     if (FALSE) {
[16:20:59.113]     }
[16:20:59.113]     else {
[16:20:59.113]         if (TRUE) {
[16:20:59.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.113]                 open = "w")
[16:20:59.113]         }
[16:20:59.113]         else {
[16:20:59.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.113]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.113]         }
[16:20:59.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.113]             base::sink(type = "output", split = FALSE)
[16:20:59.113]             base::close(...future.stdout)
[16:20:59.113]         }, add = TRUE)
[16:20:59.113]     }
[16:20:59.113]     ...future.frame <- base::sys.nframe()
[16:20:59.113]     ...future.conditions <- base::list()
[16:20:59.113]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.113]     if (FALSE) {
[16:20:59.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.113]     }
[16:20:59.113]     ...future.result <- base::tryCatch({
[16:20:59.113]         base::withCallingHandlers({
[16:20:59.113]             ...future.value <- base::withVisible(base::local({
[16:20:59.113]                 x["a"] <- list(1)
[16:20:59.113]                 x
[16:20:59.113]             }))
[16:20:59.113]             future::FutureResult(value = ...future.value$value, 
[16:20:59.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.113]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.113]                     ...future.globalenv.names))
[16:20:59.113]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.113]         }, condition = base::local({
[16:20:59.113]             c <- base::c
[16:20:59.113]             inherits <- base::inherits
[16:20:59.113]             invokeRestart <- base::invokeRestart
[16:20:59.113]             length <- base::length
[16:20:59.113]             list <- base::list
[16:20:59.113]             seq.int <- base::seq.int
[16:20:59.113]             signalCondition <- base::signalCondition
[16:20:59.113]             sys.calls <- base::sys.calls
[16:20:59.113]             `[[` <- base::`[[`
[16:20:59.113]             `+` <- base::`+`
[16:20:59.113]             `<<-` <- base::`<<-`
[16:20:59.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.113]                   3L)]
[16:20:59.113]             }
[16:20:59.113]             function(cond) {
[16:20:59.113]                 is_error <- inherits(cond, "error")
[16:20:59.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.113]                   NULL)
[16:20:59.113]                 if (is_error) {
[16:20:59.113]                   sessionInformation <- function() {
[16:20:59.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.113]                       search = base::search(), system = base::Sys.info())
[16:20:59.113]                   }
[16:20:59.113]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.113]                     cond$call), session = sessionInformation(), 
[16:20:59.113]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.113]                   signalCondition(cond)
[16:20:59.113]                 }
[16:20:59.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.113]                 "immediateCondition"))) {
[16:20:59.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.113]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.113]                   if (TRUE && !signal) {
[16:20:59.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.113]                     {
[16:20:59.113]                       inherits <- base::inherits
[16:20:59.113]                       invokeRestart <- base::invokeRestart
[16:20:59.113]                       is.null <- base::is.null
[16:20:59.113]                       muffled <- FALSE
[16:20:59.113]                       if (inherits(cond, "message")) {
[16:20:59.113]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.113]                         if (muffled) 
[16:20:59.113]                           invokeRestart("muffleMessage")
[16:20:59.113]                       }
[16:20:59.113]                       else if (inherits(cond, "warning")) {
[16:20:59.113]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.113]                         if (muffled) 
[16:20:59.113]                           invokeRestart("muffleWarning")
[16:20:59.113]                       }
[16:20:59.113]                       else if (inherits(cond, "condition")) {
[16:20:59.113]                         if (!is.null(pattern)) {
[16:20:59.113]                           computeRestarts <- base::computeRestarts
[16:20:59.113]                           grepl <- base::grepl
[16:20:59.113]                           restarts <- computeRestarts(cond)
[16:20:59.113]                           for (restart in restarts) {
[16:20:59.113]                             name <- restart$name
[16:20:59.113]                             if (is.null(name)) 
[16:20:59.113]                               next
[16:20:59.113]                             if (!grepl(pattern, name)) 
[16:20:59.113]                               next
[16:20:59.113]                             invokeRestart(restart)
[16:20:59.113]                             muffled <- TRUE
[16:20:59.113]                             break
[16:20:59.113]                           }
[16:20:59.113]                         }
[16:20:59.113]                       }
[16:20:59.113]                       invisible(muffled)
[16:20:59.113]                     }
[16:20:59.113]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.113]                   }
[16:20:59.113]                 }
[16:20:59.113]                 else {
[16:20:59.113]                   if (TRUE) {
[16:20:59.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.113]                     {
[16:20:59.113]                       inherits <- base::inherits
[16:20:59.113]                       invokeRestart <- base::invokeRestart
[16:20:59.113]                       is.null <- base::is.null
[16:20:59.113]                       muffled <- FALSE
[16:20:59.113]                       if (inherits(cond, "message")) {
[16:20:59.113]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.113]                         if (muffled) 
[16:20:59.113]                           invokeRestart("muffleMessage")
[16:20:59.113]                       }
[16:20:59.113]                       else if (inherits(cond, "warning")) {
[16:20:59.113]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.113]                         if (muffled) 
[16:20:59.113]                           invokeRestart("muffleWarning")
[16:20:59.113]                       }
[16:20:59.113]                       else if (inherits(cond, "condition")) {
[16:20:59.113]                         if (!is.null(pattern)) {
[16:20:59.113]                           computeRestarts <- base::computeRestarts
[16:20:59.113]                           grepl <- base::grepl
[16:20:59.113]                           restarts <- computeRestarts(cond)
[16:20:59.113]                           for (restart in restarts) {
[16:20:59.113]                             name <- restart$name
[16:20:59.113]                             if (is.null(name)) 
[16:20:59.113]                               next
[16:20:59.113]                             if (!grepl(pattern, name)) 
[16:20:59.113]                               next
[16:20:59.113]                             invokeRestart(restart)
[16:20:59.113]                             muffled <- TRUE
[16:20:59.113]                             break
[16:20:59.113]                           }
[16:20:59.113]                         }
[16:20:59.113]                       }
[16:20:59.113]                       invisible(muffled)
[16:20:59.113]                     }
[16:20:59.113]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.113]                   }
[16:20:59.113]                 }
[16:20:59.113]             }
[16:20:59.113]         }))
[16:20:59.113]     }, error = function(ex) {
[16:20:59.113]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.113]                 ...future.rng), started = ...future.startTime, 
[16:20:59.113]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.113]             version = "1.8"), class = "FutureResult")
[16:20:59.113]     }, finally = {
[16:20:59.113]         if (!identical(...future.workdir, getwd())) 
[16:20:59.113]             setwd(...future.workdir)
[16:20:59.113]         {
[16:20:59.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.113]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.113]             }
[16:20:59.113]             base::options(...future.oldOptions)
[16:20:59.113]             if (.Platform$OS.type == "windows") {
[16:20:59.113]                 old_names <- names(...future.oldEnvVars)
[16:20:59.113]                 envs <- base::Sys.getenv()
[16:20:59.113]                 names <- names(envs)
[16:20:59.113]                 common <- intersect(names, old_names)
[16:20:59.113]                 added <- setdiff(names, old_names)
[16:20:59.113]                 removed <- setdiff(old_names, names)
[16:20:59.113]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.113]                   envs[common]]
[16:20:59.113]                 NAMES <- toupper(changed)
[16:20:59.113]                 args <- list()
[16:20:59.113]                 for (kk in seq_along(NAMES)) {
[16:20:59.113]                   name <- changed[[kk]]
[16:20:59.113]                   NAME <- NAMES[[kk]]
[16:20:59.113]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.113]                     next
[16:20:59.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.113]                 }
[16:20:59.113]                 NAMES <- toupper(added)
[16:20:59.113]                 for (kk in seq_along(NAMES)) {
[16:20:59.113]                   name <- added[[kk]]
[16:20:59.113]                   NAME <- NAMES[[kk]]
[16:20:59.113]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.113]                     next
[16:20:59.113]                   args[[name]] <- ""
[16:20:59.113]                 }
[16:20:59.113]                 NAMES <- toupper(removed)
[16:20:59.113]                 for (kk in seq_along(NAMES)) {
[16:20:59.113]                   name <- removed[[kk]]
[16:20:59.113]                   NAME <- NAMES[[kk]]
[16:20:59.113]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.113]                     next
[16:20:59.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.113]                 }
[16:20:59.113]                 if (length(args) > 0) 
[16:20:59.113]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.113]             }
[16:20:59.113]             else {
[16:20:59.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.113]             }
[16:20:59.113]             {
[16:20:59.113]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.113]                   0L) {
[16:20:59.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.113]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.113]                   base::options(opts)
[16:20:59.113]                 }
[16:20:59.113]                 {
[16:20:59.113]                   {
[16:20:59.113]                     NULL
[16:20:59.113]                     RNGkind("Mersenne-Twister")
[16:20:59.113]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.113]                       inherits = FALSE)
[16:20:59.113]                   }
[16:20:59.113]                   options(future.plan = NULL)
[16:20:59.113]                   if (is.na(NA_character_)) 
[16:20:59.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.113]                     .init = FALSE)
[16:20:59.113]                 }
[16:20:59.113]             }
[16:20:59.113]         }
[16:20:59.113]     })
[16:20:59.113]     if (TRUE) {
[16:20:59.113]         base::sink(type = "output", split = FALSE)
[16:20:59.113]         if (TRUE) {
[16:20:59.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.113]         }
[16:20:59.113]         else {
[16:20:59.113]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.113]         }
[16:20:59.113]         base::close(...future.stdout)
[16:20:59.113]         ...future.stdout <- NULL
[16:20:59.113]     }
[16:20:59.113]     ...future.result$conditions <- ...future.conditions
[16:20:59.113]     ...future.result$finished <- base::Sys.time()
[16:20:59.113]     ...future.result
[16:20:59.113] }
[16:20:59.115] assign_globals() ...
[16:20:59.115] List of 1
[16:20:59.115]  $ x: list()
[16:20:59.115]  - attr(*, "where")=List of 1
[16:20:59.115]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.115]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.115]  - attr(*, "resolved")= logi TRUE
[16:20:59.115]  - attr(*, "total_size")= num 0
[16:20:59.115]  - attr(*, "already-done")= logi TRUE
[16:20:59.117] - copied ‘x’ to environment
[16:20:59.117] assign_globals() ... done
[16:20:59.117] plan(): Setting new future strategy stack:
[16:20:59.117] List of future strategies:
[16:20:59.117] 1. sequential:
[16:20:59.117]    - args: function (..., envir = parent.frame())
[16:20:59.117]    - tweaked: FALSE
[16:20:59.117]    - call: NULL
[16:20:59.118] plan(): nbrOfWorkers() = 1
[16:20:59.118] plan(): Setting new future strategy stack:
[16:20:59.119] List of future strategies:
[16:20:59.119] 1. sequential:
[16:20:59.119]    - args: function (..., envir = parent.frame())
[16:20:59.119]    - tweaked: FALSE
[16:20:59.119]    - call: plan(strategy)
[16:20:59.119] plan(): nbrOfWorkers() = 1
[16:20:59.119] SequentialFuture started (and completed)
[16:20:59.119] - Launch lazy future ... done
[16:20:59.119] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.120] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.120] Searching for globals...
[16:20:59.122] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.122] Searching for globals ... DONE
[16:20:59.122] Resolving globals: TRUE
[16:20:59.122] Resolving any globals that are futures ...
[16:20:59.122] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.122] Resolving any globals that are futures ... DONE
[16:20:59.123] Resolving futures part of globals (recursively) ...
[16:20:59.123] resolve() on list ...
[16:20:59.123]  recursive: 99
[16:20:59.123]  length: 1
[16:20:59.123]  elements: ‘x’
[16:20:59.123]  length: 0 (resolved future 1)
[16:20:59.123] resolve() on list ... DONE
[16:20:59.123] - globals: [1] ‘x’
[16:20:59.123] Resolving futures part of globals (recursively) ... DONE
[16:20:59.124] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.124] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.124] - globals: [1] ‘x’
[16:20:59.124] 
[16:20:59.124] getGlobalsAndPackages() ... DONE
[16:20:59.124] run() for ‘Future’ ...
[16:20:59.125] - state: ‘created’
[16:20:59.125] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.125] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.125] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.125]   - Field: ‘label’
[16:20:59.125]   - Field: ‘local’
[16:20:59.125]   - Field: ‘owner’
[16:20:59.125]   - Field: ‘envir’
[16:20:59.125]   - Field: ‘packages’
[16:20:59.126]   - Field: ‘gc’
[16:20:59.126]   - Field: ‘conditions’
[16:20:59.126]   - Field: ‘expr’
[16:20:59.126]   - Field: ‘uuid’
[16:20:59.126]   - Field: ‘seed’
[16:20:59.126]   - Field: ‘version’
[16:20:59.126]   - Field: ‘result’
[16:20:59.126]   - Field: ‘asynchronous’
[16:20:59.126]   - Field: ‘calls’
[16:20:59.126]   - Field: ‘globals’
[16:20:59.126]   - Field: ‘stdout’
[16:20:59.127]   - Field: ‘earlySignal’
[16:20:59.127]   - Field: ‘lazy’
[16:20:59.127]   - Field: ‘state’
[16:20:59.127] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.127] - Launch lazy future ...
[16:20:59.127] Packages needed by the future expression (n = 0): <none>
[16:20:59.127] Packages needed by future strategies (n = 0): <none>
[16:20:59.128] {
[16:20:59.128]     {
[16:20:59.128]         {
[16:20:59.128]             ...future.startTime <- base::Sys.time()
[16:20:59.128]             {
[16:20:59.128]                 {
[16:20:59.128]                   {
[16:20:59.128]                     base::local({
[16:20:59.128]                       has_future <- base::requireNamespace("future", 
[16:20:59.128]                         quietly = TRUE)
[16:20:59.128]                       if (has_future) {
[16:20:59.128]                         ns <- base::getNamespace("future")
[16:20:59.128]                         version <- ns[[".package"]][["version"]]
[16:20:59.128]                         if (is.null(version)) 
[16:20:59.128]                           version <- utils::packageVersion("future")
[16:20:59.128]                       }
[16:20:59.128]                       else {
[16:20:59.128]                         version <- NULL
[16:20:59.128]                       }
[16:20:59.128]                       if (!has_future || version < "1.8.0") {
[16:20:59.128]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.128]                           "", base::R.version$version.string), 
[16:20:59.128]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.128]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.128]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.128]                             "release", "version")], collapse = " "), 
[16:20:59.128]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.128]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.128]                           info)
[16:20:59.128]                         info <- base::paste(info, collapse = "; ")
[16:20:59.128]                         if (!has_future) {
[16:20:59.128]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.128]                             info)
[16:20:59.128]                         }
[16:20:59.128]                         else {
[16:20:59.128]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.128]                             info, version)
[16:20:59.128]                         }
[16:20:59.128]                         base::stop(msg)
[16:20:59.128]                       }
[16:20:59.128]                     })
[16:20:59.128]                   }
[16:20:59.128]                   ...future.strategy.old <- future::plan("list")
[16:20:59.128]                   options(future.plan = NULL)
[16:20:59.128]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.128]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.128]                 }
[16:20:59.128]                 ...future.workdir <- getwd()
[16:20:59.128]             }
[16:20:59.128]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.128]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.128]         }
[16:20:59.128]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.128]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.128]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.128]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.128]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.128]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.128]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.128]             base::names(...future.oldOptions))
[16:20:59.128]     }
[16:20:59.128]     if (FALSE) {
[16:20:59.128]     }
[16:20:59.128]     else {
[16:20:59.128]         if (TRUE) {
[16:20:59.128]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.128]                 open = "w")
[16:20:59.128]         }
[16:20:59.128]         else {
[16:20:59.128]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.128]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.128]         }
[16:20:59.128]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.128]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.128]             base::sink(type = "output", split = FALSE)
[16:20:59.128]             base::close(...future.stdout)
[16:20:59.128]         }, add = TRUE)
[16:20:59.128]     }
[16:20:59.128]     ...future.frame <- base::sys.nframe()
[16:20:59.128]     ...future.conditions <- base::list()
[16:20:59.128]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.128]     if (FALSE) {
[16:20:59.128]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.128]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.128]     }
[16:20:59.128]     ...future.result <- base::tryCatch({
[16:20:59.128]         base::withCallingHandlers({
[16:20:59.128]             ...future.value <- base::withVisible(base::local({
[16:20:59.128]                 x["a"] <- list(1)
[16:20:59.128]                 x
[16:20:59.128]             }))
[16:20:59.128]             future::FutureResult(value = ...future.value$value, 
[16:20:59.128]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.128]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.128]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.128]                     ...future.globalenv.names))
[16:20:59.128]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.128]         }, condition = base::local({
[16:20:59.128]             c <- base::c
[16:20:59.128]             inherits <- base::inherits
[16:20:59.128]             invokeRestart <- base::invokeRestart
[16:20:59.128]             length <- base::length
[16:20:59.128]             list <- base::list
[16:20:59.128]             seq.int <- base::seq.int
[16:20:59.128]             signalCondition <- base::signalCondition
[16:20:59.128]             sys.calls <- base::sys.calls
[16:20:59.128]             `[[` <- base::`[[`
[16:20:59.128]             `+` <- base::`+`
[16:20:59.128]             `<<-` <- base::`<<-`
[16:20:59.128]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.128]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.128]                   3L)]
[16:20:59.128]             }
[16:20:59.128]             function(cond) {
[16:20:59.128]                 is_error <- inherits(cond, "error")
[16:20:59.128]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.128]                   NULL)
[16:20:59.128]                 if (is_error) {
[16:20:59.128]                   sessionInformation <- function() {
[16:20:59.128]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.128]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.128]                       search = base::search(), system = base::Sys.info())
[16:20:59.128]                   }
[16:20:59.128]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.128]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.128]                     cond$call), session = sessionInformation(), 
[16:20:59.128]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.128]                   signalCondition(cond)
[16:20:59.128]                 }
[16:20:59.128]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.128]                 "immediateCondition"))) {
[16:20:59.128]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.128]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.128]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.128]                   if (TRUE && !signal) {
[16:20:59.128]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.128]                     {
[16:20:59.128]                       inherits <- base::inherits
[16:20:59.128]                       invokeRestart <- base::invokeRestart
[16:20:59.128]                       is.null <- base::is.null
[16:20:59.128]                       muffled <- FALSE
[16:20:59.128]                       if (inherits(cond, "message")) {
[16:20:59.128]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.128]                         if (muffled) 
[16:20:59.128]                           invokeRestart("muffleMessage")
[16:20:59.128]                       }
[16:20:59.128]                       else if (inherits(cond, "warning")) {
[16:20:59.128]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.128]                         if (muffled) 
[16:20:59.128]                           invokeRestart("muffleWarning")
[16:20:59.128]                       }
[16:20:59.128]                       else if (inherits(cond, "condition")) {
[16:20:59.128]                         if (!is.null(pattern)) {
[16:20:59.128]                           computeRestarts <- base::computeRestarts
[16:20:59.128]                           grepl <- base::grepl
[16:20:59.128]                           restarts <- computeRestarts(cond)
[16:20:59.128]                           for (restart in restarts) {
[16:20:59.128]                             name <- restart$name
[16:20:59.128]                             if (is.null(name)) 
[16:20:59.128]                               next
[16:20:59.128]                             if (!grepl(pattern, name)) 
[16:20:59.128]                               next
[16:20:59.128]                             invokeRestart(restart)
[16:20:59.128]                             muffled <- TRUE
[16:20:59.128]                             break
[16:20:59.128]                           }
[16:20:59.128]                         }
[16:20:59.128]                       }
[16:20:59.128]                       invisible(muffled)
[16:20:59.128]                     }
[16:20:59.128]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.128]                   }
[16:20:59.128]                 }
[16:20:59.128]                 else {
[16:20:59.128]                   if (TRUE) {
[16:20:59.128]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.128]                     {
[16:20:59.128]                       inherits <- base::inherits
[16:20:59.128]                       invokeRestart <- base::invokeRestart
[16:20:59.128]                       is.null <- base::is.null
[16:20:59.128]                       muffled <- FALSE
[16:20:59.128]                       if (inherits(cond, "message")) {
[16:20:59.128]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.128]                         if (muffled) 
[16:20:59.128]                           invokeRestart("muffleMessage")
[16:20:59.128]                       }
[16:20:59.128]                       else if (inherits(cond, "warning")) {
[16:20:59.128]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.128]                         if (muffled) 
[16:20:59.128]                           invokeRestart("muffleWarning")
[16:20:59.128]                       }
[16:20:59.128]                       else if (inherits(cond, "condition")) {
[16:20:59.128]                         if (!is.null(pattern)) {
[16:20:59.128]                           computeRestarts <- base::computeRestarts
[16:20:59.128]                           grepl <- base::grepl
[16:20:59.128]                           restarts <- computeRestarts(cond)
[16:20:59.128]                           for (restart in restarts) {
[16:20:59.128]                             name <- restart$name
[16:20:59.128]                             if (is.null(name)) 
[16:20:59.128]                               next
[16:20:59.128]                             if (!grepl(pattern, name)) 
[16:20:59.128]                               next
[16:20:59.128]                             invokeRestart(restart)
[16:20:59.128]                             muffled <- TRUE
[16:20:59.128]                             break
[16:20:59.128]                           }
[16:20:59.128]                         }
[16:20:59.128]                       }
[16:20:59.128]                       invisible(muffled)
[16:20:59.128]                     }
[16:20:59.128]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.128]                   }
[16:20:59.128]                 }
[16:20:59.128]             }
[16:20:59.128]         }))
[16:20:59.128]     }, error = function(ex) {
[16:20:59.128]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.128]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.128]                 ...future.rng), started = ...future.startTime, 
[16:20:59.128]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.128]             version = "1.8"), class = "FutureResult")
[16:20:59.128]     }, finally = {
[16:20:59.128]         if (!identical(...future.workdir, getwd())) 
[16:20:59.128]             setwd(...future.workdir)
[16:20:59.128]         {
[16:20:59.128]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.128]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.128]             }
[16:20:59.128]             base::options(...future.oldOptions)
[16:20:59.128]             if (.Platform$OS.type == "windows") {
[16:20:59.128]                 old_names <- names(...future.oldEnvVars)
[16:20:59.128]                 envs <- base::Sys.getenv()
[16:20:59.128]                 names <- names(envs)
[16:20:59.128]                 common <- intersect(names, old_names)
[16:20:59.128]                 added <- setdiff(names, old_names)
[16:20:59.128]                 removed <- setdiff(old_names, names)
[16:20:59.128]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.128]                   envs[common]]
[16:20:59.128]                 NAMES <- toupper(changed)
[16:20:59.128]                 args <- list()
[16:20:59.128]                 for (kk in seq_along(NAMES)) {
[16:20:59.128]                   name <- changed[[kk]]
[16:20:59.128]                   NAME <- NAMES[[kk]]
[16:20:59.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.128]                     next
[16:20:59.128]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.128]                 }
[16:20:59.128]                 NAMES <- toupper(added)
[16:20:59.128]                 for (kk in seq_along(NAMES)) {
[16:20:59.128]                   name <- added[[kk]]
[16:20:59.128]                   NAME <- NAMES[[kk]]
[16:20:59.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.128]                     next
[16:20:59.128]                   args[[name]] <- ""
[16:20:59.128]                 }
[16:20:59.128]                 NAMES <- toupper(removed)
[16:20:59.128]                 for (kk in seq_along(NAMES)) {
[16:20:59.128]                   name <- removed[[kk]]
[16:20:59.128]                   NAME <- NAMES[[kk]]
[16:20:59.128]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.128]                     next
[16:20:59.128]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.128]                 }
[16:20:59.128]                 if (length(args) > 0) 
[16:20:59.128]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.128]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.128]             }
[16:20:59.128]             else {
[16:20:59.128]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.128]             }
[16:20:59.128]             {
[16:20:59.128]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.128]                   0L) {
[16:20:59.128]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.128]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.128]                   base::options(opts)
[16:20:59.128]                 }
[16:20:59.128]                 {
[16:20:59.128]                   {
[16:20:59.128]                     NULL
[16:20:59.128]                     RNGkind("Mersenne-Twister")
[16:20:59.128]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.128]                       inherits = FALSE)
[16:20:59.128]                   }
[16:20:59.128]                   options(future.plan = NULL)
[16:20:59.128]                   if (is.na(NA_character_)) 
[16:20:59.128]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.128]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.128]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.128]                     .init = FALSE)
[16:20:59.128]                 }
[16:20:59.128]             }
[16:20:59.128]         }
[16:20:59.128]     })
[16:20:59.128]     if (TRUE) {
[16:20:59.128]         base::sink(type = "output", split = FALSE)
[16:20:59.128]         if (TRUE) {
[16:20:59.128]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.128]         }
[16:20:59.128]         else {
[16:20:59.128]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.128]         }
[16:20:59.128]         base::close(...future.stdout)
[16:20:59.128]         ...future.stdout <- NULL
[16:20:59.128]     }
[16:20:59.128]     ...future.result$conditions <- ...future.conditions
[16:20:59.128]     ...future.result$finished <- base::Sys.time()
[16:20:59.128]     ...future.result
[16:20:59.128] }
[16:20:59.129] assign_globals() ...
[16:20:59.129] List of 1
[16:20:59.129]  $ x: list()
[16:20:59.129]  - attr(*, "where")=List of 1
[16:20:59.129]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.129]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.129]  - attr(*, "resolved")= logi TRUE
[16:20:59.129]  - attr(*, "total_size")= num 0
[16:20:59.129]  - attr(*, "already-done")= logi TRUE
[16:20:59.131] - copied ‘x’ to environment
[16:20:59.132] assign_globals() ... done
[16:20:59.132] plan(): Setting new future strategy stack:
[16:20:59.132] List of future strategies:
[16:20:59.132] 1. sequential:
[16:20:59.132]    - args: function (..., envir = parent.frame())
[16:20:59.132]    - tweaked: FALSE
[16:20:59.132]    - call: NULL
[16:20:59.132] plan(): nbrOfWorkers() = 1
[16:20:59.133] plan(): Setting new future strategy stack:
[16:20:59.133] List of future strategies:
[16:20:59.133] 1. sequential:
[16:20:59.133]    - args: function (..., envir = parent.frame())
[16:20:59.133]    - tweaked: FALSE
[16:20:59.133]    - call: plan(strategy)
[16:20:59.133] plan(): nbrOfWorkers() = 1
[16:20:59.133] SequentialFuture started (and completed)
[16:20:59.134] - Launch lazy future ... done
[16:20:59.134] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.134] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.134] Searching for globals...
[16:20:59.137] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:20:59.137] Searching for globals ... DONE
[16:20:59.138] Resolving globals: TRUE
[16:20:59.138] Resolving any globals that are futures ...
[16:20:59.138] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:20:59.138] Resolving any globals that are futures ... DONE
[16:20:59.138] Resolving futures part of globals (recursively) ...
[16:20:59.138] resolve() on list ...
[16:20:59.139]  recursive: 99
[16:20:59.139]  length: 2
[16:20:59.139]  elements: ‘x’, ‘name’
[16:20:59.139]  length: 1 (resolved future 1)
[16:20:59.139]  length: 0 (resolved future 2)
[16:20:59.139] resolve() on list ... DONE
[16:20:59.139] - globals: [2] ‘x’, ‘name’
[16:20:59.139] Resolving futures part of globals (recursively) ... DONE
[16:20:59.139] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:59.140] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[16:20:59.140] - globals: [2] ‘x’, ‘name’
[16:20:59.140] 
[16:20:59.140] getGlobalsAndPackages() ... DONE
[16:20:59.140] run() for ‘Future’ ...
[16:20:59.140] - state: ‘created’
[16:20:59.141] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:59.141] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:59.141] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:59.141]   - Field: ‘label’
[16:20:59.141]   - Field: ‘local’
[16:20:59.141]   - Field: ‘owner’
[16:20:59.141]   - Field: ‘envir’
[16:20:59.141]   - Field: ‘packages’
[16:20:59.141]   - Field: ‘gc’
[16:20:59.142]   - Field: ‘conditions’
[16:20:59.142]   - Field: ‘expr’
[16:20:59.142]   - Field: ‘uuid’
[16:20:59.142]   - Field: ‘seed’
[16:20:59.142]   - Field: ‘version’
[16:20:59.142]   - Field: ‘result’
[16:20:59.142]   - Field: ‘asynchronous’
[16:20:59.142]   - Field: ‘calls’
[16:20:59.142]   - Field: ‘globals’
[16:20:59.142]   - Field: ‘stdout’
[16:20:59.142]   - Field: ‘earlySignal’
[16:20:59.143]   - Field: ‘lazy’
[16:20:59.143]   - Field: ‘state’
[16:20:59.143] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:59.143] - Launch lazy future ...
[16:20:59.143] Packages needed by the future expression (n = 0): <none>
[16:20:59.143] Packages needed by future strategies (n = 0): <none>
[16:20:59.143] {
[16:20:59.143]     {
[16:20:59.143]         {
[16:20:59.143]             ...future.startTime <- base::Sys.time()
[16:20:59.143]             {
[16:20:59.143]                 {
[16:20:59.143]                   {
[16:20:59.143]                     base::local({
[16:20:59.143]                       has_future <- base::requireNamespace("future", 
[16:20:59.143]                         quietly = TRUE)
[16:20:59.143]                       if (has_future) {
[16:20:59.143]                         ns <- base::getNamespace("future")
[16:20:59.143]                         version <- ns[[".package"]][["version"]]
[16:20:59.143]                         if (is.null(version)) 
[16:20:59.143]                           version <- utils::packageVersion("future")
[16:20:59.143]                       }
[16:20:59.143]                       else {
[16:20:59.143]                         version <- NULL
[16:20:59.143]                       }
[16:20:59.143]                       if (!has_future || version < "1.8.0") {
[16:20:59.143]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.143]                           "", base::R.version$version.string), 
[16:20:59.143]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:59.143]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.143]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.143]                             "release", "version")], collapse = " "), 
[16:20:59.143]                           hostname = base::Sys.info()[["nodename"]])
[16:20:59.143]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.143]                           info)
[16:20:59.143]                         info <- base::paste(info, collapse = "; ")
[16:20:59.143]                         if (!has_future) {
[16:20:59.143]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.143]                             info)
[16:20:59.143]                         }
[16:20:59.143]                         else {
[16:20:59.143]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.143]                             info, version)
[16:20:59.143]                         }
[16:20:59.143]                         base::stop(msg)
[16:20:59.143]                       }
[16:20:59.143]                     })
[16:20:59.143]                   }
[16:20:59.143]                   ...future.strategy.old <- future::plan("list")
[16:20:59.143]                   options(future.plan = NULL)
[16:20:59.143]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.143]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.143]                 }
[16:20:59.143]                 ...future.workdir <- getwd()
[16:20:59.143]             }
[16:20:59.143]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.143]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.143]         }
[16:20:59.143]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.143]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.143]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.143]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.143]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.143]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.143]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.143]             base::names(...future.oldOptions))
[16:20:59.143]     }
[16:20:59.143]     if (FALSE) {
[16:20:59.143]     }
[16:20:59.143]     else {
[16:20:59.143]         if (TRUE) {
[16:20:59.143]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.143]                 open = "w")
[16:20:59.143]         }
[16:20:59.143]         else {
[16:20:59.143]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.143]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.143]         }
[16:20:59.143]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.143]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.143]             base::sink(type = "output", split = FALSE)
[16:20:59.143]             base::close(...future.stdout)
[16:20:59.143]         }, add = TRUE)
[16:20:59.143]     }
[16:20:59.143]     ...future.frame <- base::sys.nframe()
[16:20:59.143]     ...future.conditions <- base::list()
[16:20:59.143]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.143]     if (FALSE) {
[16:20:59.143]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.143]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.143]     }
[16:20:59.143]     ...future.result <- base::tryCatch({
[16:20:59.143]         base::withCallingHandlers({
[16:20:59.143]             ...future.value <- base::withVisible(base::local({
[16:20:59.143]                 x[name] <- list(1)
[16:20:59.143]                 x
[16:20:59.143]             }))
[16:20:59.143]             future::FutureResult(value = ...future.value$value, 
[16:20:59.143]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.143]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.143]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.143]                     ...future.globalenv.names))
[16:20:59.143]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.143]         }, condition = base::local({
[16:20:59.143]             c <- base::c
[16:20:59.143]             inherits <- base::inherits
[16:20:59.143]             invokeRestart <- base::invokeRestart
[16:20:59.143]             length <- base::length
[16:20:59.143]             list <- base::list
[16:20:59.143]             seq.int <- base::seq.int
[16:20:59.143]             signalCondition <- base::signalCondition
[16:20:59.143]             sys.calls <- base::sys.calls
[16:20:59.143]             `[[` <- base::`[[`
[16:20:59.143]             `+` <- base::`+`
[16:20:59.143]             `<<-` <- base::`<<-`
[16:20:59.143]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.143]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.143]                   3L)]
[16:20:59.143]             }
[16:20:59.143]             function(cond) {
[16:20:59.143]                 is_error <- inherits(cond, "error")
[16:20:59.143]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.143]                   NULL)
[16:20:59.143]                 if (is_error) {
[16:20:59.143]                   sessionInformation <- function() {
[16:20:59.143]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.143]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.143]                       search = base::search(), system = base::Sys.info())
[16:20:59.143]                   }
[16:20:59.143]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.143]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.143]                     cond$call), session = sessionInformation(), 
[16:20:59.143]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.143]                   signalCondition(cond)
[16:20:59.143]                 }
[16:20:59.143]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.143]                 "immediateCondition"))) {
[16:20:59.143]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.143]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.143]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.143]                   if (TRUE && !signal) {
[16:20:59.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.143]                     {
[16:20:59.143]                       inherits <- base::inherits
[16:20:59.143]                       invokeRestart <- base::invokeRestart
[16:20:59.143]                       is.null <- base::is.null
[16:20:59.143]                       muffled <- FALSE
[16:20:59.143]                       if (inherits(cond, "message")) {
[16:20:59.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.143]                         if (muffled) 
[16:20:59.143]                           invokeRestart("muffleMessage")
[16:20:59.143]                       }
[16:20:59.143]                       else if (inherits(cond, "warning")) {
[16:20:59.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.143]                         if (muffled) 
[16:20:59.143]                           invokeRestart("muffleWarning")
[16:20:59.143]                       }
[16:20:59.143]                       else if (inherits(cond, "condition")) {
[16:20:59.143]                         if (!is.null(pattern)) {
[16:20:59.143]                           computeRestarts <- base::computeRestarts
[16:20:59.143]                           grepl <- base::grepl
[16:20:59.143]                           restarts <- computeRestarts(cond)
[16:20:59.143]                           for (restart in restarts) {
[16:20:59.143]                             name <- restart$name
[16:20:59.143]                             if (is.null(name)) 
[16:20:59.143]                               next
[16:20:59.143]                             if (!grepl(pattern, name)) 
[16:20:59.143]                               next
[16:20:59.143]                             invokeRestart(restart)
[16:20:59.143]                             muffled <- TRUE
[16:20:59.143]                             break
[16:20:59.143]                           }
[16:20:59.143]                         }
[16:20:59.143]                       }
[16:20:59.143]                       invisible(muffled)
[16:20:59.143]                     }
[16:20:59.143]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.143]                   }
[16:20:59.143]                 }
[16:20:59.143]                 else {
[16:20:59.143]                   if (TRUE) {
[16:20:59.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.143]                     {
[16:20:59.143]                       inherits <- base::inherits
[16:20:59.143]                       invokeRestart <- base::invokeRestart
[16:20:59.143]                       is.null <- base::is.null
[16:20:59.143]                       muffled <- FALSE
[16:20:59.143]                       if (inherits(cond, "message")) {
[16:20:59.143]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.143]                         if (muffled) 
[16:20:59.143]                           invokeRestart("muffleMessage")
[16:20:59.143]                       }
[16:20:59.143]                       else if (inherits(cond, "warning")) {
[16:20:59.143]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.143]                         if (muffled) 
[16:20:59.143]                           invokeRestart("muffleWarning")
[16:20:59.143]                       }
[16:20:59.143]                       else if (inherits(cond, "condition")) {
[16:20:59.143]                         if (!is.null(pattern)) {
[16:20:59.143]                           computeRestarts <- base::computeRestarts
[16:20:59.143]                           grepl <- base::grepl
[16:20:59.143]                           restarts <- computeRestarts(cond)
[16:20:59.143]                           for (restart in restarts) {
[16:20:59.143]                             name <- restart$name
[16:20:59.143]                             if (is.null(name)) 
[16:20:59.143]                               next
[16:20:59.143]                             if (!grepl(pattern, name)) 
[16:20:59.143]                               next
[16:20:59.143]                             invokeRestart(restart)
[16:20:59.143]                             muffled <- TRUE
[16:20:59.143]                             break
[16:20:59.143]                           }
[16:20:59.143]                         }
[16:20:59.143]                       }
[16:20:59.143]                       invisible(muffled)
[16:20:59.143]                     }
[16:20:59.143]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.143]                   }
[16:20:59.143]                 }
[16:20:59.143]             }
[16:20:59.143]         }))
[16:20:59.143]     }, error = function(ex) {
[16:20:59.143]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.143]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.143]                 ...future.rng), started = ...future.startTime, 
[16:20:59.143]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.143]             version = "1.8"), class = "FutureResult")
[16:20:59.143]     }, finally = {
[16:20:59.143]         if (!identical(...future.workdir, getwd())) 
[16:20:59.143]             setwd(...future.workdir)
[16:20:59.143]         {
[16:20:59.143]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.143]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.143]             }
[16:20:59.143]             base::options(...future.oldOptions)
[16:20:59.143]             if (.Platform$OS.type == "windows") {
[16:20:59.143]                 old_names <- names(...future.oldEnvVars)
[16:20:59.143]                 envs <- base::Sys.getenv()
[16:20:59.143]                 names <- names(envs)
[16:20:59.143]                 common <- intersect(names, old_names)
[16:20:59.143]                 added <- setdiff(names, old_names)
[16:20:59.143]                 removed <- setdiff(old_names, names)
[16:20:59.143]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.143]                   envs[common]]
[16:20:59.143]                 NAMES <- toupper(changed)
[16:20:59.143]                 args <- list()
[16:20:59.143]                 for (kk in seq_along(NAMES)) {
[16:20:59.143]                   name <- changed[[kk]]
[16:20:59.143]                   NAME <- NAMES[[kk]]
[16:20:59.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.143]                     next
[16:20:59.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.143]                 }
[16:20:59.143]                 NAMES <- toupper(added)
[16:20:59.143]                 for (kk in seq_along(NAMES)) {
[16:20:59.143]                   name <- added[[kk]]
[16:20:59.143]                   NAME <- NAMES[[kk]]
[16:20:59.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.143]                     next
[16:20:59.143]                   args[[name]] <- ""
[16:20:59.143]                 }
[16:20:59.143]                 NAMES <- toupper(removed)
[16:20:59.143]                 for (kk in seq_along(NAMES)) {
[16:20:59.143]                   name <- removed[[kk]]
[16:20:59.143]                   NAME <- NAMES[[kk]]
[16:20:59.143]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.143]                     next
[16:20:59.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.143]                 }
[16:20:59.143]                 if (length(args) > 0) 
[16:20:59.143]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.143]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.143]             }
[16:20:59.143]             else {
[16:20:59.143]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.143]             }
[16:20:59.143]             {
[16:20:59.143]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.143]                   0L) {
[16:20:59.143]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.143]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.143]                   base::options(opts)
[16:20:59.143]                 }
[16:20:59.143]                 {
[16:20:59.143]                   {
[16:20:59.143]                     NULL
[16:20:59.143]                     RNGkind("Mersenne-Twister")
[16:20:59.143]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:59.143]                       inherits = FALSE)
[16:20:59.143]                   }
[16:20:59.143]                   options(future.plan = NULL)
[16:20:59.143]                   if (is.na(NA_character_)) 
[16:20:59.143]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.143]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.143]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.143]                     .init = FALSE)
[16:20:59.143]                 }
[16:20:59.143]             }
[16:20:59.143]         }
[16:20:59.143]     })
[16:20:59.143]     if (TRUE) {
[16:20:59.143]         base::sink(type = "output", split = FALSE)
[16:20:59.143]         if (TRUE) {
[16:20:59.143]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.143]         }
[16:20:59.143]         else {
[16:20:59.143]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.143]         }
[16:20:59.143]         base::close(...future.stdout)
[16:20:59.143]         ...future.stdout <- NULL
[16:20:59.143]     }
[16:20:59.143]     ...future.result$conditions <- ...future.conditions
[16:20:59.143]     ...future.result$finished <- base::Sys.time()
[16:20:59.143]     ...future.result
[16:20:59.143] }
[16:20:59.145] assign_globals() ...
[16:20:59.145] List of 2
[16:20:59.145]  $ x   : list()
[16:20:59.145]  $ name: chr "a"
[16:20:59.145]  - attr(*, "where")=List of 2
[16:20:59.145]   ..$ x   :<environment: R_EmptyEnv> 
[16:20:59.145]   ..$ name:<environment: R_EmptyEnv> 
[16:20:59.145]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.145]  - attr(*, "resolved")= logi TRUE
[16:20:59.145]  - attr(*, "total_size")= num 112
[16:20:59.145]  - attr(*, "already-done")= logi TRUE
[16:20:59.148] - copied ‘x’ to environment
[16:20:59.148] - copied ‘name’ to environment
[16:20:59.148] assign_globals() ... done
[16:20:59.148] plan(): Setting new future strategy stack:
[16:20:59.148] List of future strategies:
[16:20:59.148] 1. sequential:
[16:20:59.148]    - args: function (..., envir = parent.frame())
[16:20:59.148]    - tweaked: FALSE
[16:20:59.148]    - call: NULL
[16:20:59.149] plan(): nbrOfWorkers() = 1
[16:20:59.149] plan(): Setting new future strategy stack:
[16:20:59.149] List of future strategies:
[16:20:59.149] 1. sequential:
[16:20:59.149]    - args: function (..., envir = parent.frame())
[16:20:59.149]    - tweaked: FALSE
[16:20:59.149]    - call: plan(strategy)
[16:20:59.150] plan(): nbrOfWorkers() = 1
[16:20:59.150] SequentialFuture started (and completed)
[16:20:59.150] - Launch lazy future ... done
[16:20:59.150] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[16:20:59.159] plan(): Setting new future strategy stack:
[16:20:59.159] List of future strategies:
[16:20:59.159] 1. multicore:
[16:20:59.159]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.159]    - tweaked: FALSE
[16:20:59.159]    - call: plan(strategy)
[16:20:59.163] plan(): nbrOfWorkers() = 2
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.163] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.163] Searching for globals...
[16:20:59.166] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.166] Searching for globals ... DONE
[16:20:59.166] Resolving globals: TRUE
[16:20:59.166] Resolving any globals that are futures ...
[16:20:59.167] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.167] Resolving any globals that are futures ... DONE
[16:20:59.167] Resolving futures part of globals (recursively) ...
[16:20:59.167] resolve() on list ...
[16:20:59.167]  recursive: 99
[16:20:59.167]  length: 1
[16:20:59.167]  elements: ‘x’
[16:20:59.168]  length: 0 (resolved future 1)
[16:20:59.168] resolve() on list ... DONE
[16:20:59.168] - globals: [1] ‘x’
[16:20:59.168] Resolving futures part of globals (recursively) ... DONE
[16:20:59.168] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.168] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.168] - globals: [1] ‘x’
[16:20:59.169] 
[16:20:59.169] getGlobalsAndPackages() ... DONE
[16:20:59.169] run() for ‘Future’ ...
[16:20:59.169] - state: ‘created’
[16:20:59.169] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.173] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.173] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.173]   - Field: ‘label’
[16:20:59.173]   - Field: ‘local’
[16:20:59.173]   - Field: ‘owner’
[16:20:59.173]   - Field: ‘envir’
[16:20:59.174]   - Field: ‘workers’
[16:20:59.174]   - Field: ‘packages’
[16:20:59.174]   - Field: ‘gc’
[16:20:59.174]   - Field: ‘job’
[16:20:59.174]   - Field: ‘conditions’
[16:20:59.174]   - Field: ‘expr’
[16:20:59.174]   - Field: ‘uuid’
[16:20:59.174]   - Field: ‘seed’
[16:20:59.174]   - Field: ‘version’
[16:20:59.174]   - Field: ‘result’
[16:20:59.174]   - Field: ‘asynchronous’
[16:20:59.175]   - Field: ‘calls’
[16:20:59.175]   - Field: ‘globals’
[16:20:59.175]   - Field: ‘stdout’
[16:20:59.175]   - Field: ‘earlySignal’
[16:20:59.175]   - Field: ‘lazy’
[16:20:59.175]   - Field: ‘state’
[16:20:59.175] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.175] - Launch lazy future ...
[16:20:59.176] Packages needed by the future expression (n = 0): <none>
[16:20:59.176] Packages needed by future strategies (n = 0): <none>
[16:20:59.177] {
[16:20:59.177]     {
[16:20:59.177]         {
[16:20:59.177]             ...future.startTime <- base::Sys.time()
[16:20:59.177]             {
[16:20:59.177]                 {
[16:20:59.177]                   {
[16:20:59.177]                     {
[16:20:59.177]                       base::local({
[16:20:59.177]                         has_future <- base::requireNamespace("future", 
[16:20:59.177]                           quietly = TRUE)
[16:20:59.177]                         if (has_future) {
[16:20:59.177]                           ns <- base::getNamespace("future")
[16:20:59.177]                           version <- ns[[".package"]][["version"]]
[16:20:59.177]                           if (is.null(version)) 
[16:20:59.177]                             version <- utils::packageVersion("future")
[16:20:59.177]                         }
[16:20:59.177]                         else {
[16:20:59.177]                           version <- NULL
[16:20:59.177]                         }
[16:20:59.177]                         if (!has_future || version < "1.8.0") {
[16:20:59.177]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.177]                             "", base::R.version$version.string), 
[16:20:59.177]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.177]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.177]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.177]                               "release", "version")], collapse = " "), 
[16:20:59.177]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.177]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.177]                             info)
[16:20:59.177]                           info <- base::paste(info, collapse = "; ")
[16:20:59.177]                           if (!has_future) {
[16:20:59.177]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.177]                               info)
[16:20:59.177]                           }
[16:20:59.177]                           else {
[16:20:59.177]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.177]                               info, version)
[16:20:59.177]                           }
[16:20:59.177]                           base::stop(msg)
[16:20:59.177]                         }
[16:20:59.177]                       })
[16:20:59.177]                     }
[16:20:59.177]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.177]                     base::options(mc.cores = 1L)
[16:20:59.177]                   }
[16:20:59.177]                   ...future.strategy.old <- future::plan("list")
[16:20:59.177]                   options(future.plan = NULL)
[16:20:59.177]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.177]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.177]                 }
[16:20:59.177]                 ...future.workdir <- getwd()
[16:20:59.177]             }
[16:20:59.177]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.177]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.177]         }
[16:20:59.177]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.177]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.177]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.177]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.177]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.177]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.177]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.177]             base::names(...future.oldOptions))
[16:20:59.177]     }
[16:20:59.177]     if (FALSE) {
[16:20:59.177]     }
[16:20:59.177]     else {
[16:20:59.177]         if (TRUE) {
[16:20:59.177]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.177]                 open = "w")
[16:20:59.177]         }
[16:20:59.177]         else {
[16:20:59.177]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.177]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.177]         }
[16:20:59.177]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.177]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.177]             base::sink(type = "output", split = FALSE)
[16:20:59.177]             base::close(...future.stdout)
[16:20:59.177]         }, add = TRUE)
[16:20:59.177]     }
[16:20:59.177]     ...future.frame <- base::sys.nframe()
[16:20:59.177]     ...future.conditions <- base::list()
[16:20:59.177]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.177]     if (FALSE) {
[16:20:59.177]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.177]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.177]     }
[16:20:59.177]     ...future.result <- base::tryCatch({
[16:20:59.177]         base::withCallingHandlers({
[16:20:59.177]             ...future.value <- base::withVisible(base::local({
[16:20:59.177]                 withCallingHandlers({
[16:20:59.177]                   {
[16:20:59.177]                     x$a <- 1
[16:20:59.177]                     x
[16:20:59.177]                   }
[16:20:59.177]                 }, immediateCondition = function(cond) {
[16:20:59.177]                   save_rds <- function (object, pathname, ...) 
[16:20:59.177]                   {
[16:20:59.177]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.177]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.177]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.177]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.177]                         fi_tmp[["mtime"]])
[16:20:59.177]                     }
[16:20:59.177]                     tryCatch({
[16:20:59.177]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.177]                     }, error = function(ex) {
[16:20:59.177]                       msg <- conditionMessage(ex)
[16:20:59.177]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.177]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.177]                         fi_tmp[["mtime"]], msg)
[16:20:59.177]                       ex$message <- msg
[16:20:59.177]                       stop(ex)
[16:20:59.177]                     })
[16:20:59.177]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.177]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.177]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.177]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.177]                       fi <- file.info(pathname)
[16:20:59.177]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.177]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.177]                         fi[["size"]], fi[["mtime"]])
[16:20:59.177]                       stop(msg)
[16:20:59.177]                     }
[16:20:59.177]                     invisible(pathname)
[16:20:59.177]                   }
[16:20:59.177]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.177]                     rootPath = tempdir()) 
[16:20:59.177]                   {
[16:20:59.177]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.177]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.177]                       tmpdir = path, fileext = ".rds")
[16:20:59.177]                     save_rds(obj, file)
[16:20:59.177]                   }
[16:20:59.177]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.177]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.177]                   {
[16:20:59.177]                     inherits <- base::inherits
[16:20:59.177]                     invokeRestart <- base::invokeRestart
[16:20:59.177]                     is.null <- base::is.null
[16:20:59.177]                     muffled <- FALSE
[16:20:59.177]                     if (inherits(cond, "message")) {
[16:20:59.177]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.177]                       if (muffled) 
[16:20:59.177]                         invokeRestart("muffleMessage")
[16:20:59.177]                     }
[16:20:59.177]                     else if (inherits(cond, "warning")) {
[16:20:59.177]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.177]                       if (muffled) 
[16:20:59.177]                         invokeRestart("muffleWarning")
[16:20:59.177]                     }
[16:20:59.177]                     else if (inherits(cond, "condition")) {
[16:20:59.177]                       if (!is.null(pattern)) {
[16:20:59.177]                         computeRestarts <- base::computeRestarts
[16:20:59.177]                         grepl <- base::grepl
[16:20:59.177]                         restarts <- computeRestarts(cond)
[16:20:59.177]                         for (restart in restarts) {
[16:20:59.177]                           name <- restart$name
[16:20:59.177]                           if (is.null(name)) 
[16:20:59.177]                             next
[16:20:59.177]                           if (!grepl(pattern, name)) 
[16:20:59.177]                             next
[16:20:59.177]                           invokeRestart(restart)
[16:20:59.177]                           muffled <- TRUE
[16:20:59.177]                           break
[16:20:59.177]                         }
[16:20:59.177]                       }
[16:20:59.177]                     }
[16:20:59.177]                     invisible(muffled)
[16:20:59.177]                   }
[16:20:59.177]                   muffleCondition(cond)
[16:20:59.177]                 })
[16:20:59.177]             }))
[16:20:59.177]             future::FutureResult(value = ...future.value$value, 
[16:20:59.177]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.177]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.177]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.177]                     ...future.globalenv.names))
[16:20:59.177]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.177]         }, condition = base::local({
[16:20:59.177]             c <- base::c
[16:20:59.177]             inherits <- base::inherits
[16:20:59.177]             invokeRestart <- base::invokeRestart
[16:20:59.177]             length <- base::length
[16:20:59.177]             list <- base::list
[16:20:59.177]             seq.int <- base::seq.int
[16:20:59.177]             signalCondition <- base::signalCondition
[16:20:59.177]             sys.calls <- base::sys.calls
[16:20:59.177]             `[[` <- base::`[[`
[16:20:59.177]             `+` <- base::`+`
[16:20:59.177]             `<<-` <- base::`<<-`
[16:20:59.177]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.177]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.177]                   3L)]
[16:20:59.177]             }
[16:20:59.177]             function(cond) {
[16:20:59.177]                 is_error <- inherits(cond, "error")
[16:20:59.177]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.177]                   NULL)
[16:20:59.177]                 if (is_error) {
[16:20:59.177]                   sessionInformation <- function() {
[16:20:59.177]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.177]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.177]                       search = base::search(), system = base::Sys.info())
[16:20:59.177]                   }
[16:20:59.177]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.177]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.177]                     cond$call), session = sessionInformation(), 
[16:20:59.177]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.177]                   signalCondition(cond)
[16:20:59.177]                 }
[16:20:59.177]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.177]                 "immediateCondition"))) {
[16:20:59.177]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.177]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.177]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.177]                   if (TRUE && !signal) {
[16:20:59.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.177]                     {
[16:20:59.177]                       inherits <- base::inherits
[16:20:59.177]                       invokeRestart <- base::invokeRestart
[16:20:59.177]                       is.null <- base::is.null
[16:20:59.177]                       muffled <- FALSE
[16:20:59.177]                       if (inherits(cond, "message")) {
[16:20:59.177]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.177]                         if (muffled) 
[16:20:59.177]                           invokeRestart("muffleMessage")
[16:20:59.177]                       }
[16:20:59.177]                       else if (inherits(cond, "warning")) {
[16:20:59.177]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.177]                         if (muffled) 
[16:20:59.177]                           invokeRestart("muffleWarning")
[16:20:59.177]                       }
[16:20:59.177]                       else if (inherits(cond, "condition")) {
[16:20:59.177]                         if (!is.null(pattern)) {
[16:20:59.177]                           computeRestarts <- base::computeRestarts
[16:20:59.177]                           grepl <- base::grepl
[16:20:59.177]                           restarts <- computeRestarts(cond)
[16:20:59.177]                           for (restart in restarts) {
[16:20:59.177]                             name <- restart$name
[16:20:59.177]                             if (is.null(name)) 
[16:20:59.177]                               next
[16:20:59.177]                             if (!grepl(pattern, name)) 
[16:20:59.177]                               next
[16:20:59.177]                             invokeRestart(restart)
[16:20:59.177]                             muffled <- TRUE
[16:20:59.177]                             break
[16:20:59.177]                           }
[16:20:59.177]                         }
[16:20:59.177]                       }
[16:20:59.177]                       invisible(muffled)
[16:20:59.177]                     }
[16:20:59.177]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.177]                   }
[16:20:59.177]                 }
[16:20:59.177]                 else {
[16:20:59.177]                   if (TRUE) {
[16:20:59.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.177]                     {
[16:20:59.177]                       inherits <- base::inherits
[16:20:59.177]                       invokeRestart <- base::invokeRestart
[16:20:59.177]                       is.null <- base::is.null
[16:20:59.177]                       muffled <- FALSE
[16:20:59.177]                       if (inherits(cond, "message")) {
[16:20:59.177]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.177]                         if (muffled) 
[16:20:59.177]                           invokeRestart("muffleMessage")
[16:20:59.177]                       }
[16:20:59.177]                       else if (inherits(cond, "warning")) {
[16:20:59.177]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.177]                         if (muffled) 
[16:20:59.177]                           invokeRestart("muffleWarning")
[16:20:59.177]                       }
[16:20:59.177]                       else if (inherits(cond, "condition")) {
[16:20:59.177]                         if (!is.null(pattern)) {
[16:20:59.177]                           computeRestarts <- base::computeRestarts
[16:20:59.177]                           grepl <- base::grepl
[16:20:59.177]                           restarts <- computeRestarts(cond)
[16:20:59.177]                           for (restart in restarts) {
[16:20:59.177]                             name <- restart$name
[16:20:59.177]                             if (is.null(name)) 
[16:20:59.177]                               next
[16:20:59.177]                             if (!grepl(pattern, name)) 
[16:20:59.177]                               next
[16:20:59.177]                             invokeRestart(restart)
[16:20:59.177]                             muffled <- TRUE
[16:20:59.177]                             break
[16:20:59.177]                           }
[16:20:59.177]                         }
[16:20:59.177]                       }
[16:20:59.177]                       invisible(muffled)
[16:20:59.177]                     }
[16:20:59.177]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.177]                   }
[16:20:59.177]                 }
[16:20:59.177]             }
[16:20:59.177]         }))
[16:20:59.177]     }, error = function(ex) {
[16:20:59.177]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.177]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.177]                 ...future.rng), started = ...future.startTime, 
[16:20:59.177]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.177]             version = "1.8"), class = "FutureResult")
[16:20:59.177]     }, finally = {
[16:20:59.177]         if (!identical(...future.workdir, getwd())) 
[16:20:59.177]             setwd(...future.workdir)
[16:20:59.177]         {
[16:20:59.177]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.177]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.177]             }
[16:20:59.177]             base::options(...future.oldOptions)
[16:20:59.177]             if (.Platform$OS.type == "windows") {
[16:20:59.177]                 old_names <- names(...future.oldEnvVars)
[16:20:59.177]                 envs <- base::Sys.getenv()
[16:20:59.177]                 names <- names(envs)
[16:20:59.177]                 common <- intersect(names, old_names)
[16:20:59.177]                 added <- setdiff(names, old_names)
[16:20:59.177]                 removed <- setdiff(old_names, names)
[16:20:59.177]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.177]                   envs[common]]
[16:20:59.177]                 NAMES <- toupper(changed)
[16:20:59.177]                 args <- list()
[16:20:59.177]                 for (kk in seq_along(NAMES)) {
[16:20:59.177]                   name <- changed[[kk]]
[16:20:59.177]                   NAME <- NAMES[[kk]]
[16:20:59.177]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.177]                     next
[16:20:59.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.177]                 }
[16:20:59.177]                 NAMES <- toupper(added)
[16:20:59.177]                 for (kk in seq_along(NAMES)) {
[16:20:59.177]                   name <- added[[kk]]
[16:20:59.177]                   NAME <- NAMES[[kk]]
[16:20:59.177]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.177]                     next
[16:20:59.177]                   args[[name]] <- ""
[16:20:59.177]                 }
[16:20:59.177]                 NAMES <- toupper(removed)
[16:20:59.177]                 for (kk in seq_along(NAMES)) {
[16:20:59.177]                   name <- removed[[kk]]
[16:20:59.177]                   NAME <- NAMES[[kk]]
[16:20:59.177]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.177]                     next
[16:20:59.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.177]                 }
[16:20:59.177]                 if (length(args) > 0) 
[16:20:59.177]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.177]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.177]             }
[16:20:59.177]             else {
[16:20:59.177]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.177]             }
[16:20:59.177]             {
[16:20:59.177]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.177]                   0L) {
[16:20:59.177]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.177]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.177]                   base::options(opts)
[16:20:59.177]                 }
[16:20:59.177]                 {
[16:20:59.177]                   {
[16:20:59.177]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.177]                     NULL
[16:20:59.177]                   }
[16:20:59.177]                   options(future.plan = NULL)
[16:20:59.177]                   if (is.na(NA_character_)) 
[16:20:59.177]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.177]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.177]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.177]                     .init = FALSE)
[16:20:59.177]                 }
[16:20:59.177]             }
[16:20:59.177]         }
[16:20:59.177]     })
[16:20:59.177]     if (TRUE) {
[16:20:59.177]         base::sink(type = "output", split = FALSE)
[16:20:59.177]         if (TRUE) {
[16:20:59.177]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.177]         }
[16:20:59.177]         else {
[16:20:59.177]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.177]         }
[16:20:59.177]         base::close(...future.stdout)
[16:20:59.177]         ...future.stdout <- NULL
[16:20:59.177]     }
[16:20:59.177]     ...future.result$conditions <- ...future.conditions
[16:20:59.177]     ...future.result$finished <- base::Sys.time()
[16:20:59.177]     ...future.result
[16:20:59.177] }
[16:20:59.179] assign_globals() ...
[16:20:59.179] List of 1
[16:20:59.179]  $ x: list()
[16:20:59.179]  - attr(*, "where")=List of 1
[16:20:59.179]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.179]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.179]  - attr(*, "resolved")= logi TRUE
[16:20:59.179]  - attr(*, "total_size")= num 0
[16:20:59.179]  - attr(*, "already-done")= logi TRUE
[16:20:59.181] - copied ‘x’ to environment
[16:20:59.181] assign_globals() ... done
[16:20:59.182] requestCore(): workers = 2
[16:20:59.184] MulticoreFuture started
[16:20:59.185] - Launch lazy future ... done
[16:20:59.185] run() for ‘MulticoreFuture’ ... done
[16:20:59.185] plan(): Setting new future strategy stack:
[16:20:59.186] List of future strategies:
[16:20:59.186] 1. sequential:
[16:20:59.186]    - args: function (..., envir = parent.frame())
[16:20:59.186]    - tweaked: FALSE
[16:20:59.186]    - call: NULL
[16:20:59.186] result() for MulticoreFuture ...
[16:20:59.186] plan(): nbrOfWorkers() = 1
[16:20:59.188] plan(): Setting new future strategy stack:
[16:20:59.188] List of future strategies:
[16:20:59.188] 1. multicore:
[16:20:59.188]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.188]    - tweaked: FALSE
[16:20:59.188]    - call: plan(strategy)
[16:20:59.193] plan(): nbrOfWorkers() = 2
[16:20:59.198] result() for MulticoreFuture ...
[16:20:59.198] result() for MulticoreFuture ... done
[16:20:59.198] result() for MulticoreFuture ... done
[16:20:59.198] result() for MulticoreFuture ...
[16:20:59.198] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.199] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.199] Searching for globals...
[16:20:59.201] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.202] Searching for globals ... DONE
[16:20:59.202] Resolving globals: TRUE
[16:20:59.202] Resolving any globals that are futures ...
[16:20:59.202] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.202] Resolving any globals that are futures ... DONE
[16:20:59.202] Resolving futures part of globals (recursively) ...
[16:20:59.203] resolve() on list ...
[16:20:59.203]  recursive: 99
[16:20:59.203]  length: 1
[16:20:59.203]  elements: ‘x’
[16:20:59.203]  length: 0 (resolved future 1)
[16:20:59.203] resolve() on list ... DONE
[16:20:59.203] - globals: [1] ‘x’
[16:20:59.204] Resolving futures part of globals (recursively) ... DONE
[16:20:59.204] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.204] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.204] - globals: [1] ‘x’
[16:20:59.205] 
[16:20:59.205] getGlobalsAndPackages() ... DONE
[16:20:59.205] run() for ‘Future’ ...
[16:20:59.205] - state: ‘created’
[16:20:59.205] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.212] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.212] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.212]   - Field: ‘label’
[16:20:59.212]   - Field: ‘local’
[16:20:59.212]   - Field: ‘owner’
[16:20:59.212]   - Field: ‘envir’
[16:20:59.213]   - Field: ‘workers’
[16:20:59.213]   - Field: ‘packages’
[16:20:59.213]   - Field: ‘gc’
[16:20:59.213]   - Field: ‘job’
[16:20:59.213]   - Field: ‘conditions’
[16:20:59.213]   - Field: ‘expr’
[16:20:59.213]   - Field: ‘uuid’
[16:20:59.213]   - Field: ‘seed’
[16:20:59.214]   - Field: ‘version’
[16:20:59.214]   - Field: ‘result’
[16:20:59.214]   - Field: ‘asynchronous’
[16:20:59.214]   - Field: ‘calls’
[16:20:59.214]   - Field: ‘globals’
[16:20:59.214]   - Field: ‘stdout’
[16:20:59.214]   - Field: ‘earlySignal’
[16:20:59.214]   - Field: ‘lazy’
[16:20:59.214]   - Field: ‘state’
[16:20:59.215] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.215] - Launch lazy future ...
[16:20:59.215] Packages needed by the future expression (n = 0): <none>
[16:20:59.215] Packages needed by future strategies (n = 0): <none>
[16:20:59.216] {
[16:20:59.216]     {
[16:20:59.216]         {
[16:20:59.216]             ...future.startTime <- base::Sys.time()
[16:20:59.216]             {
[16:20:59.216]                 {
[16:20:59.216]                   {
[16:20:59.216]                     {
[16:20:59.216]                       base::local({
[16:20:59.216]                         has_future <- base::requireNamespace("future", 
[16:20:59.216]                           quietly = TRUE)
[16:20:59.216]                         if (has_future) {
[16:20:59.216]                           ns <- base::getNamespace("future")
[16:20:59.216]                           version <- ns[[".package"]][["version"]]
[16:20:59.216]                           if (is.null(version)) 
[16:20:59.216]                             version <- utils::packageVersion("future")
[16:20:59.216]                         }
[16:20:59.216]                         else {
[16:20:59.216]                           version <- NULL
[16:20:59.216]                         }
[16:20:59.216]                         if (!has_future || version < "1.8.0") {
[16:20:59.216]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.216]                             "", base::R.version$version.string), 
[16:20:59.216]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.216]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.216]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.216]                               "release", "version")], collapse = " "), 
[16:20:59.216]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.216]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.216]                             info)
[16:20:59.216]                           info <- base::paste(info, collapse = "; ")
[16:20:59.216]                           if (!has_future) {
[16:20:59.216]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.216]                               info)
[16:20:59.216]                           }
[16:20:59.216]                           else {
[16:20:59.216]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.216]                               info, version)
[16:20:59.216]                           }
[16:20:59.216]                           base::stop(msg)
[16:20:59.216]                         }
[16:20:59.216]                       })
[16:20:59.216]                     }
[16:20:59.216]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.216]                     base::options(mc.cores = 1L)
[16:20:59.216]                   }
[16:20:59.216]                   ...future.strategy.old <- future::plan("list")
[16:20:59.216]                   options(future.plan = NULL)
[16:20:59.216]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.216]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.216]                 }
[16:20:59.216]                 ...future.workdir <- getwd()
[16:20:59.216]             }
[16:20:59.216]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.216]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.216]         }
[16:20:59.216]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.216]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.216]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.216]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.216]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.216]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.216]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.216]             base::names(...future.oldOptions))
[16:20:59.216]     }
[16:20:59.216]     if (FALSE) {
[16:20:59.216]     }
[16:20:59.216]     else {
[16:20:59.216]         if (TRUE) {
[16:20:59.216]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.216]                 open = "w")
[16:20:59.216]         }
[16:20:59.216]         else {
[16:20:59.216]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.216]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.216]         }
[16:20:59.216]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.216]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.216]             base::sink(type = "output", split = FALSE)
[16:20:59.216]             base::close(...future.stdout)
[16:20:59.216]         }, add = TRUE)
[16:20:59.216]     }
[16:20:59.216]     ...future.frame <- base::sys.nframe()
[16:20:59.216]     ...future.conditions <- base::list()
[16:20:59.216]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.216]     if (FALSE) {
[16:20:59.216]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.216]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.216]     }
[16:20:59.216]     ...future.result <- base::tryCatch({
[16:20:59.216]         base::withCallingHandlers({
[16:20:59.216]             ...future.value <- base::withVisible(base::local({
[16:20:59.216]                 withCallingHandlers({
[16:20:59.216]                   {
[16:20:59.216]                     x$a <- 1
[16:20:59.216]                     x
[16:20:59.216]                   }
[16:20:59.216]                 }, immediateCondition = function(cond) {
[16:20:59.216]                   save_rds <- function (object, pathname, ...) 
[16:20:59.216]                   {
[16:20:59.216]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.216]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.216]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.216]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.216]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.216]                         fi_tmp[["mtime"]])
[16:20:59.216]                     }
[16:20:59.216]                     tryCatch({
[16:20:59.216]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.216]                     }, error = function(ex) {
[16:20:59.216]                       msg <- conditionMessage(ex)
[16:20:59.216]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.216]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.216]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.216]                         fi_tmp[["mtime"]], msg)
[16:20:59.216]                       ex$message <- msg
[16:20:59.216]                       stop(ex)
[16:20:59.216]                     })
[16:20:59.216]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.216]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.216]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.216]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.216]                       fi <- file.info(pathname)
[16:20:59.216]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.216]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.216]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.216]                         fi[["size"]], fi[["mtime"]])
[16:20:59.216]                       stop(msg)
[16:20:59.216]                     }
[16:20:59.216]                     invisible(pathname)
[16:20:59.216]                   }
[16:20:59.216]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.216]                     rootPath = tempdir()) 
[16:20:59.216]                   {
[16:20:59.216]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.216]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.216]                       tmpdir = path, fileext = ".rds")
[16:20:59.216]                     save_rds(obj, file)
[16:20:59.216]                   }
[16:20:59.216]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.216]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.216]                   {
[16:20:59.216]                     inherits <- base::inherits
[16:20:59.216]                     invokeRestart <- base::invokeRestart
[16:20:59.216]                     is.null <- base::is.null
[16:20:59.216]                     muffled <- FALSE
[16:20:59.216]                     if (inherits(cond, "message")) {
[16:20:59.216]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.216]                       if (muffled) 
[16:20:59.216]                         invokeRestart("muffleMessage")
[16:20:59.216]                     }
[16:20:59.216]                     else if (inherits(cond, "warning")) {
[16:20:59.216]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.216]                       if (muffled) 
[16:20:59.216]                         invokeRestart("muffleWarning")
[16:20:59.216]                     }
[16:20:59.216]                     else if (inherits(cond, "condition")) {
[16:20:59.216]                       if (!is.null(pattern)) {
[16:20:59.216]                         computeRestarts <- base::computeRestarts
[16:20:59.216]                         grepl <- base::grepl
[16:20:59.216]                         restarts <- computeRestarts(cond)
[16:20:59.216]                         for (restart in restarts) {
[16:20:59.216]                           name <- restart$name
[16:20:59.216]                           if (is.null(name)) 
[16:20:59.216]                             next
[16:20:59.216]                           if (!grepl(pattern, name)) 
[16:20:59.216]                             next
[16:20:59.216]                           invokeRestart(restart)
[16:20:59.216]                           muffled <- TRUE
[16:20:59.216]                           break
[16:20:59.216]                         }
[16:20:59.216]                       }
[16:20:59.216]                     }
[16:20:59.216]                     invisible(muffled)
[16:20:59.216]                   }
[16:20:59.216]                   muffleCondition(cond)
[16:20:59.216]                 })
[16:20:59.216]             }))
[16:20:59.216]             future::FutureResult(value = ...future.value$value, 
[16:20:59.216]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.216]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.216]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.216]                     ...future.globalenv.names))
[16:20:59.216]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.216]         }, condition = base::local({
[16:20:59.216]             c <- base::c
[16:20:59.216]             inherits <- base::inherits
[16:20:59.216]             invokeRestart <- base::invokeRestart
[16:20:59.216]             length <- base::length
[16:20:59.216]             list <- base::list
[16:20:59.216]             seq.int <- base::seq.int
[16:20:59.216]             signalCondition <- base::signalCondition
[16:20:59.216]             sys.calls <- base::sys.calls
[16:20:59.216]             `[[` <- base::`[[`
[16:20:59.216]             `+` <- base::`+`
[16:20:59.216]             `<<-` <- base::`<<-`
[16:20:59.216]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.216]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.216]                   3L)]
[16:20:59.216]             }
[16:20:59.216]             function(cond) {
[16:20:59.216]                 is_error <- inherits(cond, "error")
[16:20:59.216]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.216]                   NULL)
[16:20:59.216]                 if (is_error) {
[16:20:59.216]                   sessionInformation <- function() {
[16:20:59.216]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.216]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.216]                       search = base::search(), system = base::Sys.info())
[16:20:59.216]                   }
[16:20:59.216]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.216]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.216]                     cond$call), session = sessionInformation(), 
[16:20:59.216]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.216]                   signalCondition(cond)
[16:20:59.216]                 }
[16:20:59.216]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.216]                 "immediateCondition"))) {
[16:20:59.216]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.216]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.216]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.216]                   if (TRUE && !signal) {
[16:20:59.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.216]                     {
[16:20:59.216]                       inherits <- base::inherits
[16:20:59.216]                       invokeRestart <- base::invokeRestart
[16:20:59.216]                       is.null <- base::is.null
[16:20:59.216]                       muffled <- FALSE
[16:20:59.216]                       if (inherits(cond, "message")) {
[16:20:59.216]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.216]                         if (muffled) 
[16:20:59.216]                           invokeRestart("muffleMessage")
[16:20:59.216]                       }
[16:20:59.216]                       else if (inherits(cond, "warning")) {
[16:20:59.216]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.216]                         if (muffled) 
[16:20:59.216]                           invokeRestart("muffleWarning")
[16:20:59.216]                       }
[16:20:59.216]                       else if (inherits(cond, "condition")) {
[16:20:59.216]                         if (!is.null(pattern)) {
[16:20:59.216]                           computeRestarts <- base::computeRestarts
[16:20:59.216]                           grepl <- base::grepl
[16:20:59.216]                           restarts <- computeRestarts(cond)
[16:20:59.216]                           for (restart in restarts) {
[16:20:59.216]                             name <- restart$name
[16:20:59.216]                             if (is.null(name)) 
[16:20:59.216]                               next
[16:20:59.216]                             if (!grepl(pattern, name)) 
[16:20:59.216]                               next
[16:20:59.216]                             invokeRestart(restart)
[16:20:59.216]                             muffled <- TRUE
[16:20:59.216]                             break
[16:20:59.216]                           }
[16:20:59.216]                         }
[16:20:59.216]                       }
[16:20:59.216]                       invisible(muffled)
[16:20:59.216]                     }
[16:20:59.216]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.216]                   }
[16:20:59.216]                 }
[16:20:59.216]                 else {
[16:20:59.216]                   if (TRUE) {
[16:20:59.216]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.216]                     {
[16:20:59.216]                       inherits <- base::inherits
[16:20:59.216]                       invokeRestart <- base::invokeRestart
[16:20:59.216]                       is.null <- base::is.null
[16:20:59.216]                       muffled <- FALSE
[16:20:59.216]                       if (inherits(cond, "message")) {
[16:20:59.216]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.216]                         if (muffled) 
[16:20:59.216]                           invokeRestart("muffleMessage")
[16:20:59.216]                       }
[16:20:59.216]                       else if (inherits(cond, "warning")) {
[16:20:59.216]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.216]                         if (muffled) 
[16:20:59.216]                           invokeRestart("muffleWarning")
[16:20:59.216]                       }
[16:20:59.216]                       else if (inherits(cond, "condition")) {
[16:20:59.216]                         if (!is.null(pattern)) {
[16:20:59.216]                           computeRestarts <- base::computeRestarts
[16:20:59.216]                           grepl <- base::grepl
[16:20:59.216]                           restarts <- computeRestarts(cond)
[16:20:59.216]                           for (restart in restarts) {
[16:20:59.216]                             name <- restart$name
[16:20:59.216]                             if (is.null(name)) 
[16:20:59.216]                               next
[16:20:59.216]                             if (!grepl(pattern, name)) 
[16:20:59.216]                               next
[16:20:59.216]                             invokeRestart(restart)
[16:20:59.216]                             muffled <- TRUE
[16:20:59.216]                             break
[16:20:59.216]                           }
[16:20:59.216]                         }
[16:20:59.216]                       }
[16:20:59.216]                       invisible(muffled)
[16:20:59.216]                     }
[16:20:59.216]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.216]                   }
[16:20:59.216]                 }
[16:20:59.216]             }
[16:20:59.216]         }))
[16:20:59.216]     }, error = function(ex) {
[16:20:59.216]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.216]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.216]                 ...future.rng), started = ...future.startTime, 
[16:20:59.216]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.216]             version = "1.8"), class = "FutureResult")
[16:20:59.216]     }, finally = {
[16:20:59.216]         if (!identical(...future.workdir, getwd())) 
[16:20:59.216]             setwd(...future.workdir)
[16:20:59.216]         {
[16:20:59.216]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.216]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.216]             }
[16:20:59.216]             base::options(...future.oldOptions)
[16:20:59.216]             if (.Platform$OS.type == "windows") {
[16:20:59.216]                 old_names <- names(...future.oldEnvVars)
[16:20:59.216]                 envs <- base::Sys.getenv()
[16:20:59.216]                 names <- names(envs)
[16:20:59.216]                 common <- intersect(names, old_names)
[16:20:59.216]                 added <- setdiff(names, old_names)
[16:20:59.216]                 removed <- setdiff(old_names, names)
[16:20:59.216]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.216]                   envs[common]]
[16:20:59.216]                 NAMES <- toupper(changed)
[16:20:59.216]                 args <- list()
[16:20:59.216]                 for (kk in seq_along(NAMES)) {
[16:20:59.216]                   name <- changed[[kk]]
[16:20:59.216]                   NAME <- NAMES[[kk]]
[16:20:59.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.216]                     next
[16:20:59.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.216]                 }
[16:20:59.216]                 NAMES <- toupper(added)
[16:20:59.216]                 for (kk in seq_along(NAMES)) {
[16:20:59.216]                   name <- added[[kk]]
[16:20:59.216]                   NAME <- NAMES[[kk]]
[16:20:59.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.216]                     next
[16:20:59.216]                   args[[name]] <- ""
[16:20:59.216]                 }
[16:20:59.216]                 NAMES <- toupper(removed)
[16:20:59.216]                 for (kk in seq_along(NAMES)) {
[16:20:59.216]                   name <- removed[[kk]]
[16:20:59.216]                   NAME <- NAMES[[kk]]
[16:20:59.216]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.216]                     next
[16:20:59.216]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.216]                 }
[16:20:59.216]                 if (length(args) > 0) 
[16:20:59.216]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.216]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.216]             }
[16:20:59.216]             else {
[16:20:59.216]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.216]             }
[16:20:59.216]             {
[16:20:59.216]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.216]                   0L) {
[16:20:59.216]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.216]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.216]                   base::options(opts)
[16:20:59.216]                 }
[16:20:59.216]                 {
[16:20:59.216]                   {
[16:20:59.216]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.216]                     NULL
[16:20:59.216]                   }
[16:20:59.216]                   options(future.plan = NULL)
[16:20:59.216]                   if (is.na(NA_character_)) 
[16:20:59.216]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.216]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.216]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.216]                     .init = FALSE)
[16:20:59.216]                 }
[16:20:59.216]             }
[16:20:59.216]         }
[16:20:59.216]     })
[16:20:59.216]     if (TRUE) {
[16:20:59.216]         base::sink(type = "output", split = FALSE)
[16:20:59.216]         if (TRUE) {
[16:20:59.216]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.216]         }
[16:20:59.216]         else {
[16:20:59.216]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.216]         }
[16:20:59.216]         base::close(...future.stdout)
[16:20:59.216]         ...future.stdout <- NULL
[16:20:59.216]     }
[16:20:59.216]     ...future.result$conditions <- ...future.conditions
[16:20:59.216]     ...future.result$finished <- base::Sys.time()
[16:20:59.216]     ...future.result
[16:20:59.216] }
[16:20:59.218] assign_globals() ...
[16:20:59.218] List of 1
[16:20:59.218]  $ x: list()
[16:20:59.218]  - attr(*, "where")=List of 1
[16:20:59.218]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.218]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.218]  - attr(*, "resolved")= logi TRUE
[16:20:59.218]  - attr(*, "total_size")= num 0
[16:20:59.218]  - attr(*, "already-done")= logi TRUE
[16:20:59.221] - copied ‘x’ to environment
[16:20:59.221] assign_globals() ... done
[16:20:59.221] requestCore(): workers = 2
[16:20:59.223] MulticoreFuture started
[16:20:59.223] - Launch lazy future ... done
[16:20:59.224] run() for ‘MulticoreFuture’ ... done
[16:20:59.224] result() for MulticoreFuture ...
[16:20:59.224] plan(): Setting new future strategy stack:
[16:20:59.225] List of future strategies:
[16:20:59.225] 1. sequential:
[16:20:59.225]    - args: function (..., envir = parent.frame())
[16:20:59.225]    - tweaked: FALSE
[16:20:59.225]    - call: NULL
[16:20:59.225] plan(): nbrOfWorkers() = 1
[16:20:59.227] plan(): Setting new future strategy stack:
[16:20:59.228] List of future strategies:
[16:20:59.228] 1. multicore:
[16:20:59.228]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.228]    - tweaked: FALSE
[16:20:59.228]    - call: plan(strategy)
[16:20:59.232] plan(): nbrOfWorkers() = 2
[16:20:59.233] result() for MulticoreFuture ...
[16:20:59.233] result() for MulticoreFuture ... done
[16:20:59.233] result() for MulticoreFuture ... done
[16:20:59.234] result() for MulticoreFuture ...
[16:20:59.234] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.234] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.235] Searching for globals...
[16:20:59.237] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.237] Searching for globals ... DONE
[16:20:59.238] Resolving globals: TRUE
[16:20:59.238] Resolving any globals that are futures ...
[16:20:59.238] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.238] Resolving any globals that are futures ... DONE
[16:20:59.238] Resolving futures part of globals (recursively) ...
[16:20:59.239] resolve() on list ...
[16:20:59.239]  recursive: 99
[16:20:59.239]  length: 1
[16:20:59.239]  elements: ‘x’
[16:20:59.239]  length: 0 (resolved future 1)
[16:20:59.239] resolve() on list ... DONE
[16:20:59.239] - globals: [1] ‘x’
[16:20:59.240] Resolving futures part of globals (recursively) ... DONE
[16:20:59.240] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.240] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.240] - globals: [1] ‘x’
[16:20:59.241] 
[16:20:59.241] getGlobalsAndPackages() ... DONE
[16:20:59.241] run() for ‘Future’ ...
[16:20:59.241] - state: ‘created’
[16:20:59.241] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.245] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.245] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.246]   - Field: ‘label’
[16:20:59.246]   - Field: ‘local’
[16:20:59.246]   - Field: ‘owner’
[16:20:59.246]   - Field: ‘envir’
[16:20:59.246]   - Field: ‘workers’
[16:20:59.246]   - Field: ‘packages’
[16:20:59.246]   - Field: ‘gc’
[16:20:59.246]   - Field: ‘job’
[16:20:59.246]   - Field: ‘conditions’
[16:20:59.247]   - Field: ‘expr’
[16:20:59.247]   - Field: ‘uuid’
[16:20:59.247]   - Field: ‘seed’
[16:20:59.247]   - Field: ‘version’
[16:20:59.247]   - Field: ‘result’
[16:20:59.247]   - Field: ‘asynchronous’
[16:20:59.247]   - Field: ‘calls’
[16:20:59.247]   - Field: ‘globals’
[16:20:59.247]   - Field: ‘stdout’
[16:20:59.248]   - Field: ‘earlySignal’
[16:20:59.248]   - Field: ‘lazy’
[16:20:59.248]   - Field: ‘state’
[16:20:59.248] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.248] - Launch lazy future ...
[16:20:59.248] Packages needed by the future expression (n = 0): <none>
[16:20:59.249] Packages needed by future strategies (n = 0): <none>
[16:20:59.249] {
[16:20:59.249]     {
[16:20:59.249]         {
[16:20:59.249]             ...future.startTime <- base::Sys.time()
[16:20:59.249]             {
[16:20:59.249]                 {
[16:20:59.249]                   {
[16:20:59.249]                     {
[16:20:59.249]                       base::local({
[16:20:59.249]                         has_future <- base::requireNamespace("future", 
[16:20:59.249]                           quietly = TRUE)
[16:20:59.249]                         if (has_future) {
[16:20:59.249]                           ns <- base::getNamespace("future")
[16:20:59.249]                           version <- ns[[".package"]][["version"]]
[16:20:59.249]                           if (is.null(version)) 
[16:20:59.249]                             version <- utils::packageVersion("future")
[16:20:59.249]                         }
[16:20:59.249]                         else {
[16:20:59.249]                           version <- NULL
[16:20:59.249]                         }
[16:20:59.249]                         if (!has_future || version < "1.8.0") {
[16:20:59.249]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.249]                             "", base::R.version$version.string), 
[16:20:59.249]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.249]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.249]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.249]                               "release", "version")], collapse = " "), 
[16:20:59.249]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.249]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.249]                             info)
[16:20:59.249]                           info <- base::paste(info, collapse = "; ")
[16:20:59.249]                           if (!has_future) {
[16:20:59.249]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.249]                               info)
[16:20:59.249]                           }
[16:20:59.249]                           else {
[16:20:59.249]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.249]                               info, version)
[16:20:59.249]                           }
[16:20:59.249]                           base::stop(msg)
[16:20:59.249]                         }
[16:20:59.249]                       })
[16:20:59.249]                     }
[16:20:59.249]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.249]                     base::options(mc.cores = 1L)
[16:20:59.249]                   }
[16:20:59.249]                   ...future.strategy.old <- future::plan("list")
[16:20:59.249]                   options(future.plan = NULL)
[16:20:59.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.249]                 }
[16:20:59.249]                 ...future.workdir <- getwd()
[16:20:59.249]             }
[16:20:59.249]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.249]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.249]         }
[16:20:59.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.249]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.249]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.249]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.249]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.249]             base::names(...future.oldOptions))
[16:20:59.249]     }
[16:20:59.249]     if (FALSE) {
[16:20:59.249]     }
[16:20:59.249]     else {
[16:20:59.249]         if (TRUE) {
[16:20:59.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.249]                 open = "w")
[16:20:59.249]         }
[16:20:59.249]         else {
[16:20:59.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.249]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.249]         }
[16:20:59.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.249]             base::sink(type = "output", split = FALSE)
[16:20:59.249]             base::close(...future.stdout)
[16:20:59.249]         }, add = TRUE)
[16:20:59.249]     }
[16:20:59.249]     ...future.frame <- base::sys.nframe()
[16:20:59.249]     ...future.conditions <- base::list()
[16:20:59.249]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.249]     if (FALSE) {
[16:20:59.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.249]     }
[16:20:59.249]     ...future.result <- base::tryCatch({
[16:20:59.249]         base::withCallingHandlers({
[16:20:59.249]             ...future.value <- base::withVisible(base::local({
[16:20:59.249]                 withCallingHandlers({
[16:20:59.249]                   {
[16:20:59.249]                     x$a <- 1
[16:20:59.249]                     x
[16:20:59.249]                   }
[16:20:59.249]                 }, immediateCondition = function(cond) {
[16:20:59.249]                   save_rds <- function (object, pathname, ...) 
[16:20:59.249]                   {
[16:20:59.249]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.249]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.249]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.249]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.249]                         fi_tmp[["mtime"]])
[16:20:59.249]                     }
[16:20:59.249]                     tryCatch({
[16:20:59.249]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.249]                     }, error = function(ex) {
[16:20:59.249]                       msg <- conditionMessage(ex)
[16:20:59.249]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.249]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.249]                         fi_tmp[["mtime"]], msg)
[16:20:59.249]                       ex$message <- msg
[16:20:59.249]                       stop(ex)
[16:20:59.249]                     })
[16:20:59.249]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.249]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.249]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.249]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.249]                       fi <- file.info(pathname)
[16:20:59.249]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.249]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.249]                         fi[["size"]], fi[["mtime"]])
[16:20:59.249]                       stop(msg)
[16:20:59.249]                     }
[16:20:59.249]                     invisible(pathname)
[16:20:59.249]                   }
[16:20:59.249]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.249]                     rootPath = tempdir()) 
[16:20:59.249]                   {
[16:20:59.249]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.249]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.249]                       tmpdir = path, fileext = ".rds")
[16:20:59.249]                     save_rds(obj, file)
[16:20:59.249]                   }
[16:20:59.249]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.249]                   {
[16:20:59.249]                     inherits <- base::inherits
[16:20:59.249]                     invokeRestart <- base::invokeRestart
[16:20:59.249]                     is.null <- base::is.null
[16:20:59.249]                     muffled <- FALSE
[16:20:59.249]                     if (inherits(cond, "message")) {
[16:20:59.249]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.249]                       if (muffled) 
[16:20:59.249]                         invokeRestart("muffleMessage")
[16:20:59.249]                     }
[16:20:59.249]                     else if (inherits(cond, "warning")) {
[16:20:59.249]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.249]                       if (muffled) 
[16:20:59.249]                         invokeRestart("muffleWarning")
[16:20:59.249]                     }
[16:20:59.249]                     else if (inherits(cond, "condition")) {
[16:20:59.249]                       if (!is.null(pattern)) {
[16:20:59.249]                         computeRestarts <- base::computeRestarts
[16:20:59.249]                         grepl <- base::grepl
[16:20:59.249]                         restarts <- computeRestarts(cond)
[16:20:59.249]                         for (restart in restarts) {
[16:20:59.249]                           name <- restart$name
[16:20:59.249]                           if (is.null(name)) 
[16:20:59.249]                             next
[16:20:59.249]                           if (!grepl(pattern, name)) 
[16:20:59.249]                             next
[16:20:59.249]                           invokeRestart(restart)
[16:20:59.249]                           muffled <- TRUE
[16:20:59.249]                           break
[16:20:59.249]                         }
[16:20:59.249]                       }
[16:20:59.249]                     }
[16:20:59.249]                     invisible(muffled)
[16:20:59.249]                   }
[16:20:59.249]                   muffleCondition(cond)
[16:20:59.249]                 })
[16:20:59.249]             }))
[16:20:59.249]             future::FutureResult(value = ...future.value$value, 
[16:20:59.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.249]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.249]                     ...future.globalenv.names))
[16:20:59.249]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.249]         }, condition = base::local({
[16:20:59.249]             c <- base::c
[16:20:59.249]             inherits <- base::inherits
[16:20:59.249]             invokeRestart <- base::invokeRestart
[16:20:59.249]             length <- base::length
[16:20:59.249]             list <- base::list
[16:20:59.249]             seq.int <- base::seq.int
[16:20:59.249]             signalCondition <- base::signalCondition
[16:20:59.249]             sys.calls <- base::sys.calls
[16:20:59.249]             `[[` <- base::`[[`
[16:20:59.249]             `+` <- base::`+`
[16:20:59.249]             `<<-` <- base::`<<-`
[16:20:59.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.249]                   3L)]
[16:20:59.249]             }
[16:20:59.249]             function(cond) {
[16:20:59.249]                 is_error <- inherits(cond, "error")
[16:20:59.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.249]                   NULL)
[16:20:59.249]                 if (is_error) {
[16:20:59.249]                   sessionInformation <- function() {
[16:20:59.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.249]                       search = base::search(), system = base::Sys.info())
[16:20:59.249]                   }
[16:20:59.249]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.249]                     cond$call), session = sessionInformation(), 
[16:20:59.249]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.249]                   signalCondition(cond)
[16:20:59.249]                 }
[16:20:59.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.249]                 "immediateCondition"))) {
[16:20:59.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.249]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.249]                   if (TRUE && !signal) {
[16:20:59.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.249]                     {
[16:20:59.249]                       inherits <- base::inherits
[16:20:59.249]                       invokeRestart <- base::invokeRestart
[16:20:59.249]                       is.null <- base::is.null
[16:20:59.249]                       muffled <- FALSE
[16:20:59.249]                       if (inherits(cond, "message")) {
[16:20:59.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.249]                         if (muffled) 
[16:20:59.249]                           invokeRestart("muffleMessage")
[16:20:59.249]                       }
[16:20:59.249]                       else if (inherits(cond, "warning")) {
[16:20:59.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.249]                         if (muffled) 
[16:20:59.249]                           invokeRestart("muffleWarning")
[16:20:59.249]                       }
[16:20:59.249]                       else if (inherits(cond, "condition")) {
[16:20:59.249]                         if (!is.null(pattern)) {
[16:20:59.249]                           computeRestarts <- base::computeRestarts
[16:20:59.249]                           grepl <- base::grepl
[16:20:59.249]                           restarts <- computeRestarts(cond)
[16:20:59.249]                           for (restart in restarts) {
[16:20:59.249]                             name <- restart$name
[16:20:59.249]                             if (is.null(name)) 
[16:20:59.249]                               next
[16:20:59.249]                             if (!grepl(pattern, name)) 
[16:20:59.249]                               next
[16:20:59.249]                             invokeRestart(restart)
[16:20:59.249]                             muffled <- TRUE
[16:20:59.249]                             break
[16:20:59.249]                           }
[16:20:59.249]                         }
[16:20:59.249]                       }
[16:20:59.249]                       invisible(muffled)
[16:20:59.249]                     }
[16:20:59.249]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.249]                   }
[16:20:59.249]                 }
[16:20:59.249]                 else {
[16:20:59.249]                   if (TRUE) {
[16:20:59.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.249]                     {
[16:20:59.249]                       inherits <- base::inherits
[16:20:59.249]                       invokeRestart <- base::invokeRestart
[16:20:59.249]                       is.null <- base::is.null
[16:20:59.249]                       muffled <- FALSE
[16:20:59.249]                       if (inherits(cond, "message")) {
[16:20:59.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.249]                         if (muffled) 
[16:20:59.249]                           invokeRestart("muffleMessage")
[16:20:59.249]                       }
[16:20:59.249]                       else if (inherits(cond, "warning")) {
[16:20:59.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.249]                         if (muffled) 
[16:20:59.249]                           invokeRestart("muffleWarning")
[16:20:59.249]                       }
[16:20:59.249]                       else if (inherits(cond, "condition")) {
[16:20:59.249]                         if (!is.null(pattern)) {
[16:20:59.249]                           computeRestarts <- base::computeRestarts
[16:20:59.249]                           grepl <- base::grepl
[16:20:59.249]                           restarts <- computeRestarts(cond)
[16:20:59.249]                           for (restart in restarts) {
[16:20:59.249]                             name <- restart$name
[16:20:59.249]                             if (is.null(name)) 
[16:20:59.249]                               next
[16:20:59.249]                             if (!grepl(pattern, name)) 
[16:20:59.249]                               next
[16:20:59.249]                             invokeRestart(restart)
[16:20:59.249]                             muffled <- TRUE
[16:20:59.249]                             break
[16:20:59.249]                           }
[16:20:59.249]                         }
[16:20:59.249]                       }
[16:20:59.249]                       invisible(muffled)
[16:20:59.249]                     }
[16:20:59.249]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.249]                   }
[16:20:59.249]                 }
[16:20:59.249]             }
[16:20:59.249]         }))
[16:20:59.249]     }, error = function(ex) {
[16:20:59.249]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.249]                 ...future.rng), started = ...future.startTime, 
[16:20:59.249]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.249]             version = "1.8"), class = "FutureResult")
[16:20:59.249]     }, finally = {
[16:20:59.249]         if (!identical(...future.workdir, getwd())) 
[16:20:59.249]             setwd(...future.workdir)
[16:20:59.249]         {
[16:20:59.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.249]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.249]             }
[16:20:59.249]             base::options(...future.oldOptions)
[16:20:59.249]             if (.Platform$OS.type == "windows") {
[16:20:59.249]                 old_names <- names(...future.oldEnvVars)
[16:20:59.249]                 envs <- base::Sys.getenv()
[16:20:59.249]                 names <- names(envs)
[16:20:59.249]                 common <- intersect(names, old_names)
[16:20:59.249]                 added <- setdiff(names, old_names)
[16:20:59.249]                 removed <- setdiff(old_names, names)
[16:20:59.249]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.249]                   envs[common]]
[16:20:59.249]                 NAMES <- toupper(changed)
[16:20:59.249]                 args <- list()
[16:20:59.249]                 for (kk in seq_along(NAMES)) {
[16:20:59.249]                   name <- changed[[kk]]
[16:20:59.249]                   NAME <- NAMES[[kk]]
[16:20:59.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.249]                     next
[16:20:59.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.249]                 }
[16:20:59.249]                 NAMES <- toupper(added)
[16:20:59.249]                 for (kk in seq_along(NAMES)) {
[16:20:59.249]                   name <- added[[kk]]
[16:20:59.249]                   NAME <- NAMES[[kk]]
[16:20:59.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.249]                     next
[16:20:59.249]                   args[[name]] <- ""
[16:20:59.249]                 }
[16:20:59.249]                 NAMES <- toupper(removed)
[16:20:59.249]                 for (kk in seq_along(NAMES)) {
[16:20:59.249]                   name <- removed[[kk]]
[16:20:59.249]                   NAME <- NAMES[[kk]]
[16:20:59.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.249]                     next
[16:20:59.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.249]                 }
[16:20:59.249]                 if (length(args) > 0) 
[16:20:59.249]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.249]             }
[16:20:59.249]             else {
[16:20:59.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.249]             }
[16:20:59.249]             {
[16:20:59.249]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.249]                   0L) {
[16:20:59.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.249]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.249]                   base::options(opts)
[16:20:59.249]                 }
[16:20:59.249]                 {
[16:20:59.249]                   {
[16:20:59.249]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.249]                     NULL
[16:20:59.249]                   }
[16:20:59.249]                   options(future.plan = NULL)
[16:20:59.249]                   if (is.na(NA_character_)) 
[16:20:59.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.249]                     .init = FALSE)
[16:20:59.249]                 }
[16:20:59.249]             }
[16:20:59.249]         }
[16:20:59.249]     })
[16:20:59.249]     if (TRUE) {
[16:20:59.249]         base::sink(type = "output", split = FALSE)
[16:20:59.249]         if (TRUE) {
[16:20:59.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.249]         }
[16:20:59.249]         else {
[16:20:59.249]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.249]         }
[16:20:59.249]         base::close(...future.stdout)
[16:20:59.249]         ...future.stdout <- NULL
[16:20:59.249]     }
[16:20:59.249]     ...future.result$conditions <- ...future.conditions
[16:20:59.249]     ...future.result$finished <- base::Sys.time()
[16:20:59.249]     ...future.result
[16:20:59.249] }
[16:20:59.252] assign_globals() ...
[16:20:59.252] List of 1
[16:20:59.252]  $ x: list()
[16:20:59.252]  - attr(*, "where")=List of 1
[16:20:59.252]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.252]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.252]  - attr(*, "resolved")= logi TRUE
[16:20:59.252]  - attr(*, "total_size")= num 0
[16:20:59.252]  - attr(*, "already-done")= logi TRUE
[16:20:59.255] - copied ‘x’ to environment
[16:20:59.255] assign_globals() ... done
[16:20:59.255] requestCore(): workers = 2
[16:20:59.257] MulticoreFuture started
[16:20:59.257] - Launch lazy future ... done
[16:20:59.257] run() for ‘MulticoreFuture’ ... done
[16:20:59.258] result() for MulticoreFuture ...
[16:20:59.258] plan(): Setting new future strategy stack:
[16:20:59.258] List of future strategies:
[16:20:59.258] 1. sequential:
[16:20:59.258]    - args: function (..., envir = parent.frame())
[16:20:59.258]    - tweaked: FALSE
[16:20:59.258]    - call: NULL
[16:20:59.259] plan(): nbrOfWorkers() = 1
[16:20:59.265] plan(): Setting new future strategy stack:
[16:20:59.265] List of future strategies:
[16:20:59.265] 1. multicore:
[16:20:59.265]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.265]    - tweaked: FALSE
[16:20:59.265]    - call: plan(strategy)
[16:20:59.271] plan(): nbrOfWorkers() = 2
[16:20:59.272] result() for MulticoreFuture ...
[16:20:59.274] result() for MulticoreFuture ... done
[16:20:59.275] result() for MulticoreFuture ... done
[16:20:59.275] result() for MulticoreFuture ...
[16:20:59.275] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.276] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.276] Searching for globals...
[16:20:59.279] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.279] Searching for globals ... DONE
[16:20:59.279] Resolving globals: TRUE
[16:20:59.279] Resolving any globals that are futures ...
[16:20:59.279] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:20:59.279] Resolving any globals that are futures ... DONE
[16:20:59.280] Resolving futures part of globals (recursively) ...
[16:20:59.280] resolve() on list ...
[16:20:59.280]  recursive: 99
[16:20:59.280]  length: 1
[16:20:59.281]  elements: ‘x’
[16:20:59.281]  length: 0 (resolved future 1)
[16:20:59.281] resolve() on list ... DONE
[16:20:59.281] - globals: [1] ‘x’
[16:20:59.281] Resolving futures part of globals (recursively) ... DONE
[16:20:59.281] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.282] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.282] - globals: [1] ‘x’
[16:20:59.282] 
[16:20:59.282] getGlobalsAndPackages() ... DONE
[16:20:59.282] run() for ‘Future’ ...
[16:20:59.283] - state: ‘created’
[16:20:59.283] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.287] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.287] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.287]   - Field: ‘label’
[16:20:59.287]   - Field: ‘local’
[16:20:59.287]   - Field: ‘owner’
[16:20:59.287]   - Field: ‘envir’
[16:20:59.287]   - Field: ‘workers’
[16:20:59.288]   - Field: ‘packages’
[16:20:59.288]   - Field: ‘gc’
[16:20:59.288]   - Field: ‘job’
[16:20:59.288]   - Field: ‘conditions’
[16:20:59.288]   - Field: ‘expr’
[16:20:59.288]   - Field: ‘uuid’
[16:20:59.288]   - Field: ‘seed’
[16:20:59.288]   - Field: ‘version’
[16:20:59.289]   - Field: ‘result’
[16:20:59.289]   - Field: ‘asynchronous’
[16:20:59.289]   - Field: ‘calls’
[16:20:59.289]   - Field: ‘globals’
[16:20:59.289]   - Field: ‘stdout’
[16:20:59.289]   - Field: ‘earlySignal’
[16:20:59.289]   - Field: ‘lazy’
[16:20:59.289]   - Field: ‘state’
[16:20:59.289] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.290] - Launch lazy future ...
[16:20:59.290] Packages needed by the future expression (n = 0): <none>
[16:20:59.290] Packages needed by future strategies (n = 0): <none>
[16:20:59.291] {
[16:20:59.291]     {
[16:20:59.291]         {
[16:20:59.291]             ...future.startTime <- base::Sys.time()
[16:20:59.291]             {
[16:20:59.291]                 {
[16:20:59.291]                   {
[16:20:59.291]                     {
[16:20:59.291]                       base::local({
[16:20:59.291]                         has_future <- base::requireNamespace("future", 
[16:20:59.291]                           quietly = TRUE)
[16:20:59.291]                         if (has_future) {
[16:20:59.291]                           ns <- base::getNamespace("future")
[16:20:59.291]                           version <- ns[[".package"]][["version"]]
[16:20:59.291]                           if (is.null(version)) 
[16:20:59.291]                             version <- utils::packageVersion("future")
[16:20:59.291]                         }
[16:20:59.291]                         else {
[16:20:59.291]                           version <- NULL
[16:20:59.291]                         }
[16:20:59.291]                         if (!has_future || version < "1.8.0") {
[16:20:59.291]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.291]                             "", base::R.version$version.string), 
[16:20:59.291]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.291]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.291]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.291]                               "release", "version")], collapse = " "), 
[16:20:59.291]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.291]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.291]                             info)
[16:20:59.291]                           info <- base::paste(info, collapse = "; ")
[16:20:59.291]                           if (!has_future) {
[16:20:59.291]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.291]                               info)
[16:20:59.291]                           }
[16:20:59.291]                           else {
[16:20:59.291]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.291]                               info, version)
[16:20:59.291]                           }
[16:20:59.291]                           base::stop(msg)
[16:20:59.291]                         }
[16:20:59.291]                       })
[16:20:59.291]                     }
[16:20:59.291]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.291]                     base::options(mc.cores = 1L)
[16:20:59.291]                   }
[16:20:59.291]                   ...future.strategy.old <- future::plan("list")
[16:20:59.291]                   options(future.plan = NULL)
[16:20:59.291]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.291]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.291]                 }
[16:20:59.291]                 ...future.workdir <- getwd()
[16:20:59.291]             }
[16:20:59.291]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.291]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.291]         }
[16:20:59.291]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.291]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.291]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.291]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.291]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.291]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.291]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.291]             base::names(...future.oldOptions))
[16:20:59.291]     }
[16:20:59.291]     if (FALSE) {
[16:20:59.291]     }
[16:20:59.291]     else {
[16:20:59.291]         if (TRUE) {
[16:20:59.291]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.291]                 open = "w")
[16:20:59.291]         }
[16:20:59.291]         else {
[16:20:59.291]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.291]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.291]         }
[16:20:59.291]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.291]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.291]             base::sink(type = "output", split = FALSE)
[16:20:59.291]             base::close(...future.stdout)
[16:20:59.291]         }, add = TRUE)
[16:20:59.291]     }
[16:20:59.291]     ...future.frame <- base::sys.nframe()
[16:20:59.291]     ...future.conditions <- base::list()
[16:20:59.291]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.291]     if (FALSE) {
[16:20:59.291]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.291]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.291]     }
[16:20:59.291]     ...future.result <- base::tryCatch({
[16:20:59.291]         base::withCallingHandlers({
[16:20:59.291]             ...future.value <- base::withVisible(base::local({
[16:20:59.291]                 withCallingHandlers({
[16:20:59.291]                   {
[16:20:59.291]                     x$a <- 1
[16:20:59.291]                     x
[16:20:59.291]                   }
[16:20:59.291]                 }, immediateCondition = function(cond) {
[16:20:59.291]                   save_rds <- function (object, pathname, ...) 
[16:20:59.291]                   {
[16:20:59.291]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.291]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.291]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.291]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.291]                         fi_tmp[["mtime"]])
[16:20:59.291]                     }
[16:20:59.291]                     tryCatch({
[16:20:59.291]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.291]                     }, error = function(ex) {
[16:20:59.291]                       msg <- conditionMessage(ex)
[16:20:59.291]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.291]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.291]                         fi_tmp[["mtime"]], msg)
[16:20:59.291]                       ex$message <- msg
[16:20:59.291]                       stop(ex)
[16:20:59.291]                     })
[16:20:59.291]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.291]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.291]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.291]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.291]                       fi <- file.info(pathname)
[16:20:59.291]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.291]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.291]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.291]                         fi[["size"]], fi[["mtime"]])
[16:20:59.291]                       stop(msg)
[16:20:59.291]                     }
[16:20:59.291]                     invisible(pathname)
[16:20:59.291]                   }
[16:20:59.291]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.291]                     rootPath = tempdir()) 
[16:20:59.291]                   {
[16:20:59.291]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.291]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.291]                       tmpdir = path, fileext = ".rds")
[16:20:59.291]                     save_rds(obj, file)
[16:20:59.291]                   }
[16:20:59.291]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.291]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.291]                   {
[16:20:59.291]                     inherits <- base::inherits
[16:20:59.291]                     invokeRestart <- base::invokeRestart
[16:20:59.291]                     is.null <- base::is.null
[16:20:59.291]                     muffled <- FALSE
[16:20:59.291]                     if (inherits(cond, "message")) {
[16:20:59.291]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.291]                       if (muffled) 
[16:20:59.291]                         invokeRestart("muffleMessage")
[16:20:59.291]                     }
[16:20:59.291]                     else if (inherits(cond, "warning")) {
[16:20:59.291]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.291]                       if (muffled) 
[16:20:59.291]                         invokeRestart("muffleWarning")
[16:20:59.291]                     }
[16:20:59.291]                     else if (inherits(cond, "condition")) {
[16:20:59.291]                       if (!is.null(pattern)) {
[16:20:59.291]                         computeRestarts <- base::computeRestarts
[16:20:59.291]                         grepl <- base::grepl
[16:20:59.291]                         restarts <- computeRestarts(cond)
[16:20:59.291]                         for (restart in restarts) {
[16:20:59.291]                           name <- restart$name
[16:20:59.291]                           if (is.null(name)) 
[16:20:59.291]                             next
[16:20:59.291]                           if (!grepl(pattern, name)) 
[16:20:59.291]                             next
[16:20:59.291]                           invokeRestart(restart)
[16:20:59.291]                           muffled <- TRUE
[16:20:59.291]                           break
[16:20:59.291]                         }
[16:20:59.291]                       }
[16:20:59.291]                     }
[16:20:59.291]                     invisible(muffled)
[16:20:59.291]                   }
[16:20:59.291]                   muffleCondition(cond)
[16:20:59.291]                 })
[16:20:59.291]             }))
[16:20:59.291]             future::FutureResult(value = ...future.value$value, 
[16:20:59.291]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.291]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.291]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.291]                     ...future.globalenv.names))
[16:20:59.291]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.291]         }, condition = base::local({
[16:20:59.291]             c <- base::c
[16:20:59.291]             inherits <- base::inherits
[16:20:59.291]             invokeRestart <- base::invokeRestart
[16:20:59.291]             length <- base::length
[16:20:59.291]             list <- base::list
[16:20:59.291]             seq.int <- base::seq.int
[16:20:59.291]             signalCondition <- base::signalCondition
[16:20:59.291]             sys.calls <- base::sys.calls
[16:20:59.291]             `[[` <- base::`[[`
[16:20:59.291]             `+` <- base::`+`
[16:20:59.291]             `<<-` <- base::`<<-`
[16:20:59.291]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.291]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.291]                   3L)]
[16:20:59.291]             }
[16:20:59.291]             function(cond) {
[16:20:59.291]                 is_error <- inherits(cond, "error")
[16:20:59.291]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.291]                   NULL)
[16:20:59.291]                 if (is_error) {
[16:20:59.291]                   sessionInformation <- function() {
[16:20:59.291]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.291]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.291]                       search = base::search(), system = base::Sys.info())
[16:20:59.291]                   }
[16:20:59.291]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.291]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.291]                     cond$call), session = sessionInformation(), 
[16:20:59.291]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.291]                   signalCondition(cond)
[16:20:59.291]                 }
[16:20:59.291]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.291]                 "immediateCondition"))) {
[16:20:59.291]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.291]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.291]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.291]                   if (TRUE && !signal) {
[16:20:59.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.291]                     {
[16:20:59.291]                       inherits <- base::inherits
[16:20:59.291]                       invokeRestart <- base::invokeRestart
[16:20:59.291]                       is.null <- base::is.null
[16:20:59.291]                       muffled <- FALSE
[16:20:59.291]                       if (inherits(cond, "message")) {
[16:20:59.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.291]                         if (muffled) 
[16:20:59.291]                           invokeRestart("muffleMessage")
[16:20:59.291]                       }
[16:20:59.291]                       else if (inherits(cond, "warning")) {
[16:20:59.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.291]                         if (muffled) 
[16:20:59.291]                           invokeRestart("muffleWarning")
[16:20:59.291]                       }
[16:20:59.291]                       else if (inherits(cond, "condition")) {
[16:20:59.291]                         if (!is.null(pattern)) {
[16:20:59.291]                           computeRestarts <- base::computeRestarts
[16:20:59.291]                           grepl <- base::grepl
[16:20:59.291]                           restarts <- computeRestarts(cond)
[16:20:59.291]                           for (restart in restarts) {
[16:20:59.291]                             name <- restart$name
[16:20:59.291]                             if (is.null(name)) 
[16:20:59.291]                               next
[16:20:59.291]                             if (!grepl(pattern, name)) 
[16:20:59.291]                               next
[16:20:59.291]                             invokeRestart(restart)
[16:20:59.291]                             muffled <- TRUE
[16:20:59.291]                             break
[16:20:59.291]                           }
[16:20:59.291]                         }
[16:20:59.291]                       }
[16:20:59.291]                       invisible(muffled)
[16:20:59.291]                     }
[16:20:59.291]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.291]                   }
[16:20:59.291]                 }
[16:20:59.291]                 else {
[16:20:59.291]                   if (TRUE) {
[16:20:59.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.291]                     {
[16:20:59.291]                       inherits <- base::inherits
[16:20:59.291]                       invokeRestart <- base::invokeRestart
[16:20:59.291]                       is.null <- base::is.null
[16:20:59.291]                       muffled <- FALSE
[16:20:59.291]                       if (inherits(cond, "message")) {
[16:20:59.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.291]                         if (muffled) 
[16:20:59.291]                           invokeRestart("muffleMessage")
[16:20:59.291]                       }
[16:20:59.291]                       else if (inherits(cond, "warning")) {
[16:20:59.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.291]                         if (muffled) 
[16:20:59.291]                           invokeRestart("muffleWarning")
[16:20:59.291]                       }
[16:20:59.291]                       else if (inherits(cond, "condition")) {
[16:20:59.291]                         if (!is.null(pattern)) {
[16:20:59.291]                           computeRestarts <- base::computeRestarts
[16:20:59.291]                           grepl <- base::grepl
[16:20:59.291]                           restarts <- computeRestarts(cond)
[16:20:59.291]                           for (restart in restarts) {
[16:20:59.291]                             name <- restart$name
[16:20:59.291]                             if (is.null(name)) 
[16:20:59.291]                               next
[16:20:59.291]                             if (!grepl(pattern, name)) 
[16:20:59.291]                               next
[16:20:59.291]                             invokeRestart(restart)
[16:20:59.291]                             muffled <- TRUE
[16:20:59.291]                             break
[16:20:59.291]                           }
[16:20:59.291]                         }
[16:20:59.291]                       }
[16:20:59.291]                       invisible(muffled)
[16:20:59.291]                     }
[16:20:59.291]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.291]                   }
[16:20:59.291]                 }
[16:20:59.291]             }
[16:20:59.291]         }))
[16:20:59.291]     }, error = function(ex) {
[16:20:59.291]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.291]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.291]                 ...future.rng), started = ...future.startTime, 
[16:20:59.291]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.291]             version = "1.8"), class = "FutureResult")
[16:20:59.291]     }, finally = {
[16:20:59.291]         if (!identical(...future.workdir, getwd())) 
[16:20:59.291]             setwd(...future.workdir)
[16:20:59.291]         {
[16:20:59.291]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.291]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.291]             }
[16:20:59.291]             base::options(...future.oldOptions)
[16:20:59.291]             if (.Platform$OS.type == "windows") {
[16:20:59.291]                 old_names <- names(...future.oldEnvVars)
[16:20:59.291]                 envs <- base::Sys.getenv()
[16:20:59.291]                 names <- names(envs)
[16:20:59.291]                 common <- intersect(names, old_names)
[16:20:59.291]                 added <- setdiff(names, old_names)
[16:20:59.291]                 removed <- setdiff(old_names, names)
[16:20:59.291]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.291]                   envs[common]]
[16:20:59.291]                 NAMES <- toupper(changed)
[16:20:59.291]                 args <- list()
[16:20:59.291]                 for (kk in seq_along(NAMES)) {
[16:20:59.291]                   name <- changed[[kk]]
[16:20:59.291]                   NAME <- NAMES[[kk]]
[16:20:59.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.291]                     next
[16:20:59.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.291]                 }
[16:20:59.291]                 NAMES <- toupper(added)
[16:20:59.291]                 for (kk in seq_along(NAMES)) {
[16:20:59.291]                   name <- added[[kk]]
[16:20:59.291]                   NAME <- NAMES[[kk]]
[16:20:59.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.291]                     next
[16:20:59.291]                   args[[name]] <- ""
[16:20:59.291]                 }
[16:20:59.291]                 NAMES <- toupper(removed)
[16:20:59.291]                 for (kk in seq_along(NAMES)) {
[16:20:59.291]                   name <- removed[[kk]]
[16:20:59.291]                   NAME <- NAMES[[kk]]
[16:20:59.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.291]                     next
[16:20:59.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.291]                 }
[16:20:59.291]                 if (length(args) > 0) 
[16:20:59.291]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.291]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.291]             }
[16:20:59.291]             else {
[16:20:59.291]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.291]             }
[16:20:59.291]             {
[16:20:59.291]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.291]                   0L) {
[16:20:59.291]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.291]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.291]                   base::options(opts)
[16:20:59.291]                 }
[16:20:59.291]                 {
[16:20:59.291]                   {
[16:20:59.291]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.291]                     NULL
[16:20:59.291]                   }
[16:20:59.291]                   options(future.plan = NULL)
[16:20:59.291]                   if (is.na(NA_character_)) 
[16:20:59.291]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.291]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.291]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.291]                     .init = FALSE)
[16:20:59.291]                 }
[16:20:59.291]             }
[16:20:59.291]         }
[16:20:59.291]     })
[16:20:59.291]     if (TRUE) {
[16:20:59.291]         base::sink(type = "output", split = FALSE)
[16:20:59.291]         if (TRUE) {
[16:20:59.291]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.291]         }
[16:20:59.291]         else {
[16:20:59.291]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.291]         }
[16:20:59.291]         base::close(...future.stdout)
[16:20:59.291]         ...future.stdout <- NULL
[16:20:59.291]     }
[16:20:59.291]     ...future.result$conditions <- ...future.conditions
[16:20:59.291]     ...future.result$finished <- base::Sys.time()
[16:20:59.291]     ...future.result
[16:20:59.291] }
[16:20:59.293] assign_globals() ...
[16:20:59.293] List of 1
[16:20:59.293]  $ x: list()
[16:20:59.293]  - attr(*, "where")=List of 1
[16:20:59.293]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.293]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.293]  - attr(*, "resolved")= logi TRUE
[16:20:59.293]  - attr(*, "total_size")= num 0
[16:20:59.293]  - attr(*, "already-done")= logi TRUE
[16:20:59.296] - copied ‘x’ to environment
[16:20:59.296] assign_globals() ... done
[16:20:59.296] requestCore(): workers = 2
[16:20:59.298] MulticoreFuture started
[16:20:59.298] - Launch lazy future ... done
[16:20:59.298] run() for ‘MulticoreFuture’ ... done
[16:20:59.299] result() for MulticoreFuture ...
[16:20:59.299] plan(): Setting new future strategy stack:
[16:20:59.299] List of future strategies:
[16:20:59.299] 1. sequential:
[16:20:59.299]    - args: function (..., envir = parent.frame())
[16:20:59.299]    - tweaked: FALSE
[16:20:59.299]    - call: NULL
[16:20:59.300] plan(): nbrOfWorkers() = 1
[16:20:59.302] plan(): Setting new future strategy stack:
[16:20:59.302] List of future strategies:
[16:20:59.302] 1. multicore:
[16:20:59.302]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.302]    - tweaked: FALSE
[16:20:59.302]    - call: plan(strategy)
[16:20:59.307] plan(): nbrOfWorkers() = 2
[16:20:59.308] result() for MulticoreFuture ...
[16:20:59.308] result() for MulticoreFuture ... done
[16:20:59.308] result() for MulticoreFuture ... done
[16:20:59.308] result() for MulticoreFuture ...
[16:20:59.308] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.309] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.310] Searching for globals...
[16:20:59.313] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:20:59.313] Searching for globals ... DONE
[16:20:59.313] Resolving globals: TRUE
[16:20:59.313] Resolving any globals that are futures ...
[16:20:59.313] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:20:59.313] Resolving any globals that are futures ... DONE
[16:20:59.314] 
[16:20:59.314] 
[16:20:59.314] getGlobalsAndPackages() ... DONE
[16:20:59.314] run() for ‘Future’ ...
[16:20:59.315] - state: ‘created’
[16:20:59.315] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.319] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.319] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.319]   - Field: ‘label’
[16:20:59.319]   - Field: ‘local’
[16:20:59.319]   - Field: ‘owner’
[16:20:59.319]   - Field: ‘envir’
[16:20:59.320]   - Field: ‘workers’
[16:20:59.322]   - Field: ‘packages’
[16:20:59.322]   - Field: ‘gc’
[16:20:59.322]   - Field: ‘job’
[16:20:59.322]   - Field: ‘conditions’
[16:20:59.322]   - Field: ‘expr’
[16:20:59.322]   - Field: ‘uuid’
[16:20:59.323]   - Field: ‘seed’
[16:20:59.323]   - Field: ‘version’
[16:20:59.323]   - Field: ‘result’
[16:20:59.323]   - Field: ‘asynchronous’
[16:20:59.323]   - Field: ‘calls’
[16:20:59.323]   - Field: ‘globals’
[16:20:59.323]   - Field: ‘stdout’
[16:20:59.324]   - Field: ‘earlySignal’
[16:20:59.324]   - Field: ‘lazy’
[16:20:59.324]   - Field: ‘state’
[16:20:59.324] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.324] - Launch lazy future ...
[16:20:59.324] Packages needed by the future expression (n = 0): <none>
[16:20:59.325] Packages needed by future strategies (n = 0): <none>
[16:20:59.325] {
[16:20:59.325]     {
[16:20:59.325]         {
[16:20:59.325]             ...future.startTime <- base::Sys.time()
[16:20:59.325]             {
[16:20:59.325]                 {
[16:20:59.325]                   {
[16:20:59.325]                     {
[16:20:59.325]                       base::local({
[16:20:59.325]                         has_future <- base::requireNamespace("future", 
[16:20:59.325]                           quietly = TRUE)
[16:20:59.325]                         if (has_future) {
[16:20:59.325]                           ns <- base::getNamespace("future")
[16:20:59.325]                           version <- ns[[".package"]][["version"]]
[16:20:59.325]                           if (is.null(version)) 
[16:20:59.325]                             version <- utils::packageVersion("future")
[16:20:59.325]                         }
[16:20:59.325]                         else {
[16:20:59.325]                           version <- NULL
[16:20:59.325]                         }
[16:20:59.325]                         if (!has_future || version < "1.8.0") {
[16:20:59.325]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.325]                             "", base::R.version$version.string), 
[16:20:59.325]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.325]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.325]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.325]                               "release", "version")], collapse = " "), 
[16:20:59.325]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.325]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.325]                             info)
[16:20:59.325]                           info <- base::paste(info, collapse = "; ")
[16:20:59.325]                           if (!has_future) {
[16:20:59.325]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.325]                               info)
[16:20:59.325]                           }
[16:20:59.325]                           else {
[16:20:59.325]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.325]                               info, version)
[16:20:59.325]                           }
[16:20:59.325]                           base::stop(msg)
[16:20:59.325]                         }
[16:20:59.325]                       })
[16:20:59.325]                     }
[16:20:59.325]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.325]                     base::options(mc.cores = 1L)
[16:20:59.325]                   }
[16:20:59.325]                   ...future.strategy.old <- future::plan("list")
[16:20:59.325]                   options(future.plan = NULL)
[16:20:59.325]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.325]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.325]                 }
[16:20:59.325]                 ...future.workdir <- getwd()
[16:20:59.325]             }
[16:20:59.325]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.325]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.325]         }
[16:20:59.325]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.325]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.325]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.325]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.325]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.325]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.325]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.325]             base::names(...future.oldOptions))
[16:20:59.325]     }
[16:20:59.325]     if (FALSE) {
[16:20:59.325]     }
[16:20:59.325]     else {
[16:20:59.325]         if (TRUE) {
[16:20:59.325]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.325]                 open = "w")
[16:20:59.325]         }
[16:20:59.325]         else {
[16:20:59.325]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.325]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.325]         }
[16:20:59.325]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.325]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.325]             base::sink(type = "output", split = FALSE)
[16:20:59.325]             base::close(...future.stdout)
[16:20:59.325]         }, add = TRUE)
[16:20:59.325]     }
[16:20:59.325]     ...future.frame <- base::sys.nframe()
[16:20:59.325]     ...future.conditions <- base::list()
[16:20:59.325]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.325]     if (FALSE) {
[16:20:59.325]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.325]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.325]     }
[16:20:59.325]     ...future.result <- base::tryCatch({
[16:20:59.325]         base::withCallingHandlers({
[16:20:59.325]             ...future.value <- base::withVisible(base::local({
[16:20:59.325]                 withCallingHandlers({
[16:20:59.325]                   {
[16:20:59.325]                     x <- list(b = 2)
[16:20:59.325]                     x$a <- 1
[16:20:59.325]                     x
[16:20:59.325]                   }
[16:20:59.325]                 }, immediateCondition = function(cond) {
[16:20:59.325]                   save_rds <- function (object, pathname, ...) 
[16:20:59.325]                   {
[16:20:59.325]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.325]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.325]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.325]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.325]                         fi_tmp[["mtime"]])
[16:20:59.325]                     }
[16:20:59.325]                     tryCatch({
[16:20:59.325]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.325]                     }, error = function(ex) {
[16:20:59.325]                       msg <- conditionMessage(ex)
[16:20:59.325]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.325]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.325]                         fi_tmp[["mtime"]], msg)
[16:20:59.325]                       ex$message <- msg
[16:20:59.325]                       stop(ex)
[16:20:59.325]                     })
[16:20:59.325]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.325]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.325]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.325]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.325]                       fi <- file.info(pathname)
[16:20:59.325]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.325]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.325]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.325]                         fi[["size"]], fi[["mtime"]])
[16:20:59.325]                       stop(msg)
[16:20:59.325]                     }
[16:20:59.325]                     invisible(pathname)
[16:20:59.325]                   }
[16:20:59.325]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.325]                     rootPath = tempdir()) 
[16:20:59.325]                   {
[16:20:59.325]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.325]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.325]                       tmpdir = path, fileext = ".rds")
[16:20:59.325]                     save_rds(obj, file)
[16:20:59.325]                   }
[16:20:59.325]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.325]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.325]                   {
[16:20:59.325]                     inherits <- base::inherits
[16:20:59.325]                     invokeRestart <- base::invokeRestart
[16:20:59.325]                     is.null <- base::is.null
[16:20:59.325]                     muffled <- FALSE
[16:20:59.325]                     if (inherits(cond, "message")) {
[16:20:59.325]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.325]                       if (muffled) 
[16:20:59.325]                         invokeRestart("muffleMessage")
[16:20:59.325]                     }
[16:20:59.325]                     else if (inherits(cond, "warning")) {
[16:20:59.325]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.325]                       if (muffled) 
[16:20:59.325]                         invokeRestart("muffleWarning")
[16:20:59.325]                     }
[16:20:59.325]                     else if (inherits(cond, "condition")) {
[16:20:59.325]                       if (!is.null(pattern)) {
[16:20:59.325]                         computeRestarts <- base::computeRestarts
[16:20:59.325]                         grepl <- base::grepl
[16:20:59.325]                         restarts <- computeRestarts(cond)
[16:20:59.325]                         for (restart in restarts) {
[16:20:59.325]                           name <- restart$name
[16:20:59.325]                           if (is.null(name)) 
[16:20:59.325]                             next
[16:20:59.325]                           if (!grepl(pattern, name)) 
[16:20:59.325]                             next
[16:20:59.325]                           invokeRestart(restart)
[16:20:59.325]                           muffled <- TRUE
[16:20:59.325]                           break
[16:20:59.325]                         }
[16:20:59.325]                       }
[16:20:59.325]                     }
[16:20:59.325]                     invisible(muffled)
[16:20:59.325]                   }
[16:20:59.325]                   muffleCondition(cond)
[16:20:59.325]                 })
[16:20:59.325]             }))
[16:20:59.325]             future::FutureResult(value = ...future.value$value, 
[16:20:59.325]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.325]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.325]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.325]                     ...future.globalenv.names))
[16:20:59.325]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.325]         }, condition = base::local({
[16:20:59.325]             c <- base::c
[16:20:59.325]             inherits <- base::inherits
[16:20:59.325]             invokeRestart <- base::invokeRestart
[16:20:59.325]             length <- base::length
[16:20:59.325]             list <- base::list
[16:20:59.325]             seq.int <- base::seq.int
[16:20:59.325]             signalCondition <- base::signalCondition
[16:20:59.325]             sys.calls <- base::sys.calls
[16:20:59.325]             `[[` <- base::`[[`
[16:20:59.325]             `+` <- base::`+`
[16:20:59.325]             `<<-` <- base::`<<-`
[16:20:59.325]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.325]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.325]                   3L)]
[16:20:59.325]             }
[16:20:59.325]             function(cond) {
[16:20:59.325]                 is_error <- inherits(cond, "error")
[16:20:59.325]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.325]                   NULL)
[16:20:59.325]                 if (is_error) {
[16:20:59.325]                   sessionInformation <- function() {
[16:20:59.325]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.325]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.325]                       search = base::search(), system = base::Sys.info())
[16:20:59.325]                   }
[16:20:59.325]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.325]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.325]                     cond$call), session = sessionInformation(), 
[16:20:59.325]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.325]                   signalCondition(cond)
[16:20:59.325]                 }
[16:20:59.325]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.325]                 "immediateCondition"))) {
[16:20:59.325]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.325]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.325]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.325]                   if (TRUE && !signal) {
[16:20:59.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.325]                     {
[16:20:59.325]                       inherits <- base::inherits
[16:20:59.325]                       invokeRestart <- base::invokeRestart
[16:20:59.325]                       is.null <- base::is.null
[16:20:59.325]                       muffled <- FALSE
[16:20:59.325]                       if (inherits(cond, "message")) {
[16:20:59.325]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.325]                         if (muffled) 
[16:20:59.325]                           invokeRestart("muffleMessage")
[16:20:59.325]                       }
[16:20:59.325]                       else if (inherits(cond, "warning")) {
[16:20:59.325]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.325]                         if (muffled) 
[16:20:59.325]                           invokeRestart("muffleWarning")
[16:20:59.325]                       }
[16:20:59.325]                       else if (inherits(cond, "condition")) {
[16:20:59.325]                         if (!is.null(pattern)) {
[16:20:59.325]                           computeRestarts <- base::computeRestarts
[16:20:59.325]                           grepl <- base::grepl
[16:20:59.325]                           restarts <- computeRestarts(cond)
[16:20:59.325]                           for (restart in restarts) {
[16:20:59.325]                             name <- restart$name
[16:20:59.325]                             if (is.null(name)) 
[16:20:59.325]                               next
[16:20:59.325]                             if (!grepl(pattern, name)) 
[16:20:59.325]                               next
[16:20:59.325]                             invokeRestart(restart)
[16:20:59.325]                             muffled <- TRUE
[16:20:59.325]                             break
[16:20:59.325]                           }
[16:20:59.325]                         }
[16:20:59.325]                       }
[16:20:59.325]                       invisible(muffled)
[16:20:59.325]                     }
[16:20:59.325]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.325]                   }
[16:20:59.325]                 }
[16:20:59.325]                 else {
[16:20:59.325]                   if (TRUE) {
[16:20:59.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.325]                     {
[16:20:59.325]                       inherits <- base::inherits
[16:20:59.325]                       invokeRestart <- base::invokeRestart
[16:20:59.325]                       is.null <- base::is.null
[16:20:59.325]                       muffled <- FALSE
[16:20:59.325]                       if (inherits(cond, "message")) {
[16:20:59.325]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.325]                         if (muffled) 
[16:20:59.325]                           invokeRestart("muffleMessage")
[16:20:59.325]                       }
[16:20:59.325]                       else if (inherits(cond, "warning")) {
[16:20:59.325]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.325]                         if (muffled) 
[16:20:59.325]                           invokeRestart("muffleWarning")
[16:20:59.325]                       }
[16:20:59.325]                       else if (inherits(cond, "condition")) {
[16:20:59.325]                         if (!is.null(pattern)) {
[16:20:59.325]                           computeRestarts <- base::computeRestarts
[16:20:59.325]                           grepl <- base::grepl
[16:20:59.325]                           restarts <- computeRestarts(cond)
[16:20:59.325]                           for (restart in restarts) {
[16:20:59.325]                             name <- restart$name
[16:20:59.325]                             if (is.null(name)) 
[16:20:59.325]                               next
[16:20:59.325]                             if (!grepl(pattern, name)) 
[16:20:59.325]                               next
[16:20:59.325]                             invokeRestart(restart)
[16:20:59.325]                             muffled <- TRUE
[16:20:59.325]                             break
[16:20:59.325]                           }
[16:20:59.325]                         }
[16:20:59.325]                       }
[16:20:59.325]                       invisible(muffled)
[16:20:59.325]                     }
[16:20:59.325]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.325]                   }
[16:20:59.325]                 }
[16:20:59.325]             }
[16:20:59.325]         }))
[16:20:59.325]     }, error = function(ex) {
[16:20:59.325]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.325]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.325]                 ...future.rng), started = ...future.startTime, 
[16:20:59.325]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.325]             version = "1.8"), class = "FutureResult")
[16:20:59.325]     }, finally = {
[16:20:59.325]         if (!identical(...future.workdir, getwd())) 
[16:20:59.325]             setwd(...future.workdir)
[16:20:59.325]         {
[16:20:59.325]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.325]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.325]             }
[16:20:59.325]             base::options(...future.oldOptions)
[16:20:59.325]             if (.Platform$OS.type == "windows") {
[16:20:59.325]                 old_names <- names(...future.oldEnvVars)
[16:20:59.325]                 envs <- base::Sys.getenv()
[16:20:59.325]                 names <- names(envs)
[16:20:59.325]                 common <- intersect(names, old_names)
[16:20:59.325]                 added <- setdiff(names, old_names)
[16:20:59.325]                 removed <- setdiff(old_names, names)
[16:20:59.325]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.325]                   envs[common]]
[16:20:59.325]                 NAMES <- toupper(changed)
[16:20:59.325]                 args <- list()
[16:20:59.325]                 for (kk in seq_along(NAMES)) {
[16:20:59.325]                   name <- changed[[kk]]
[16:20:59.325]                   NAME <- NAMES[[kk]]
[16:20:59.325]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.325]                     next
[16:20:59.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.325]                 }
[16:20:59.325]                 NAMES <- toupper(added)
[16:20:59.325]                 for (kk in seq_along(NAMES)) {
[16:20:59.325]                   name <- added[[kk]]
[16:20:59.325]                   NAME <- NAMES[[kk]]
[16:20:59.325]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.325]                     next
[16:20:59.325]                   args[[name]] <- ""
[16:20:59.325]                 }
[16:20:59.325]                 NAMES <- toupper(removed)
[16:20:59.325]                 for (kk in seq_along(NAMES)) {
[16:20:59.325]                   name <- removed[[kk]]
[16:20:59.325]                   NAME <- NAMES[[kk]]
[16:20:59.325]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.325]                     next
[16:20:59.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.325]                 }
[16:20:59.325]                 if (length(args) > 0) 
[16:20:59.325]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.325]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.325]             }
[16:20:59.325]             else {
[16:20:59.325]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.325]             }
[16:20:59.325]             {
[16:20:59.325]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.325]                   0L) {
[16:20:59.325]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.325]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.325]                   base::options(opts)
[16:20:59.325]                 }
[16:20:59.325]                 {
[16:20:59.325]                   {
[16:20:59.325]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.325]                     NULL
[16:20:59.325]                   }
[16:20:59.325]                   options(future.plan = NULL)
[16:20:59.325]                   if (is.na(NA_character_)) 
[16:20:59.325]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.325]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.325]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.325]                     .init = FALSE)
[16:20:59.325]                 }
[16:20:59.325]             }
[16:20:59.325]         }
[16:20:59.325]     })
[16:20:59.325]     if (TRUE) {
[16:20:59.325]         base::sink(type = "output", split = FALSE)
[16:20:59.325]         if (TRUE) {
[16:20:59.325]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.325]         }
[16:20:59.325]         else {
[16:20:59.325]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.325]         }
[16:20:59.325]         base::close(...future.stdout)
[16:20:59.325]         ...future.stdout <- NULL
[16:20:59.325]     }
[16:20:59.325]     ...future.result$conditions <- ...future.conditions
[16:20:59.325]     ...future.result$finished <- base::Sys.time()
[16:20:59.325]     ...future.result
[16:20:59.325] }
[16:20:59.328] requestCore(): workers = 2
[16:20:59.329] MulticoreFuture started
[16:20:59.330] - Launch lazy future ... done
[16:20:59.330] run() for ‘MulticoreFuture’ ... done
[16:20:59.330] result() for MulticoreFuture ...
[16:20:59.330] plan(): Setting new future strategy stack:
[16:20:59.331] List of future strategies:
[16:20:59.331] 1. sequential:
[16:20:59.331]    - args: function (..., envir = parent.frame())
[16:20:59.331]    - tweaked: FALSE
[16:20:59.331]    - call: NULL
[16:20:59.331] plan(): nbrOfWorkers() = 1
[16:20:59.333] plan(): Setting new future strategy stack:
[16:20:59.334] List of future strategies:
[16:20:59.334] 1. multicore:
[16:20:59.334]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.334]    - tweaked: FALSE
[16:20:59.334]    - call: plan(strategy)
[16:20:59.339] plan(): nbrOfWorkers() = 2
[16:20:59.339] result() for MulticoreFuture ...
[16:20:59.340] result() for MulticoreFuture ... done
[16:20:59.340] result() for MulticoreFuture ... done
[16:20:59.340] result() for MulticoreFuture ...
[16:20:59.340] result() for MulticoreFuture ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.341] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.341] Searching for globals...
[16:20:59.343] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.344] Searching for globals ... DONE
[16:20:59.344] Resolving globals: TRUE
[16:20:59.344] Resolving any globals that are futures ...
[16:20:59.344] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.344] Resolving any globals that are futures ... DONE
[16:20:59.345] Resolving futures part of globals (recursively) ...
[16:20:59.345] resolve() on list ...
[16:20:59.345]  recursive: 99
[16:20:59.345]  length: 1
[16:20:59.345]  elements: ‘x’
[16:20:59.346]  length: 0 (resolved future 1)
[16:20:59.346] resolve() on list ... DONE
[16:20:59.346] - globals: [1] ‘x’
[16:20:59.346] Resolving futures part of globals (recursively) ... DONE
[16:20:59.346] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.347] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.347] - globals: [1] ‘x’
[16:20:59.347] 
[16:20:59.347] getGlobalsAndPackages() ... DONE
[16:20:59.347] run() for ‘Future’ ...
[16:20:59.347] - state: ‘created’
[16:20:59.348] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.351] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.352] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.352]   - Field: ‘label’
[16:20:59.352]   - Field: ‘local’
[16:20:59.352]   - Field: ‘owner’
[16:20:59.352]   - Field: ‘envir’
[16:20:59.352]   - Field: ‘workers’
[16:20:59.352]   - Field: ‘packages’
[16:20:59.353]   - Field: ‘gc’
[16:20:59.353]   - Field: ‘job’
[16:20:59.353]   - Field: ‘conditions’
[16:20:59.353]   - Field: ‘expr’
[16:20:59.353]   - Field: ‘uuid’
[16:20:59.353]   - Field: ‘seed’
[16:20:59.353]   - Field: ‘version’
[16:20:59.353]   - Field: ‘result’
[16:20:59.353]   - Field: ‘asynchronous’
[16:20:59.354]   - Field: ‘calls’
[16:20:59.354]   - Field: ‘globals’
[16:20:59.354]   - Field: ‘stdout’
[16:20:59.354]   - Field: ‘earlySignal’
[16:20:59.354]   - Field: ‘lazy’
[16:20:59.354]   - Field: ‘state’
[16:20:59.354] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.354] - Launch lazy future ...
[16:20:59.355] Packages needed by the future expression (n = 0): <none>
[16:20:59.355] Packages needed by future strategies (n = 0): <none>
[16:20:59.355] {
[16:20:59.355]     {
[16:20:59.355]         {
[16:20:59.355]             ...future.startTime <- base::Sys.time()
[16:20:59.355]             {
[16:20:59.355]                 {
[16:20:59.355]                   {
[16:20:59.355]                     {
[16:20:59.355]                       base::local({
[16:20:59.355]                         has_future <- base::requireNamespace("future", 
[16:20:59.355]                           quietly = TRUE)
[16:20:59.355]                         if (has_future) {
[16:20:59.355]                           ns <- base::getNamespace("future")
[16:20:59.355]                           version <- ns[[".package"]][["version"]]
[16:20:59.355]                           if (is.null(version)) 
[16:20:59.355]                             version <- utils::packageVersion("future")
[16:20:59.355]                         }
[16:20:59.355]                         else {
[16:20:59.355]                           version <- NULL
[16:20:59.355]                         }
[16:20:59.355]                         if (!has_future || version < "1.8.0") {
[16:20:59.355]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.355]                             "", base::R.version$version.string), 
[16:20:59.355]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.355]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.355]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.355]                               "release", "version")], collapse = " "), 
[16:20:59.355]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.355]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.355]                             info)
[16:20:59.355]                           info <- base::paste(info, collapse = "; ")
[16:20:59.355]                           if (!has_future) {
[16:20:59.355]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.355]                               info)
[16:20:59.355]                           }
[16:20:59.355]                           else {
[16:20:59.355]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.355]                               info, version)
[16:20:59.355]                           }
[16:20:59.355]                           base::stop(msg)
[16:20:59.355]                         }
[16:20:59.355]                       })
[16:20:59.355]                     }
[16:20:59.355]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.355]                     base::options(mc.cores = 1L)
[16:20:59.355]                   }
[16:20:59.355]                   ...future.strategy.old <- future::plan("list")
[16:20:59.355]                   options(future.plan = NULL)
[16:20:59.355]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.355]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.355]                 }
[16:20:59.355]                 ...future.workdir <- getwd()
[16:20:59.355]             }
[16:20:59.355]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.355]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.355]         }
[16:20:59.355]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.355]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.355]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.355]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.355]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.355]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.355]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.355]             base::names(...future.oldOptions))
[16:20:59.355]     }
[16:20:59.355]     if (FALSE) {
[16:20:59.355]     }
[16:20:59.355]     else {
[16:20:59.355]         if (TRUE) {
[16:20:59.355]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.355]                 open = "w")
[16:20:59.355]         }
[16:20:59.355]         else {
[16:20:59.355]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.355]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.355]         }
[16:20:59.355]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.355]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.355]             base::sink(type = "output", split = FALSE)
[16:20:59.355]             base::close(...future.stdout)
[16:20:59.355]         }, add = TRUE)
[16:20:59.355]     }
[16:20:59.355]     ...future.frame <- base::sys.nframe()
[16:20:59.355]     ...future.conditions <- base::list()
[16:20:59.355]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.355]     if (FALSE) {
[16:20:59.355]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.355]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.355]     }
[16:20:59.355]     ...future.result <- base::tryCatch({
[16:20:59.355]         base::withCallingHandlers({
[16:20:59.355]             ...future.value <- base::withVisible(base::local({
[16:20:59.355]                 withCallingHandlers({
[16:20:59.355]                   {
[16:20:59.355]                     x[["a"]] <- 1
[16:20:59.355]                     x
[16:20:59.355]                   }
[16:20:59.355]                 }, immediateCondition = function(cond) {
[16:20:59.355]                   save_rds <- function (object, pathname, ...) 
[16:20:59.355]                   {
[16:20:59.355]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.355]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.355]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.355]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.355]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.355]                         fi_tmp[["mtime"]])
[16:20:59.355]                     }
[16:20:59.355]                     tryCatch({
[16:20:59.355]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.355]                     }, error = function(ex) {
[16:20:59.355]                       msg <- conditionMessage(ex)
[16:20:59.355]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.355]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.355]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.355]                         fi_tmp[["mtime"]], msg)
[16:20:59.355]                       ex$message <- msg
[16:20:59.355]                       stop(ex)
[16:20:59.355]                     })
[16:20:59.355]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.355]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.355]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.355]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.355]                       fi <- file.info(pathname)
[16:20:59.355]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.355]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.355]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.355]                         fi[["size"]], fi[["mtime"]])
[16:20:59.355]                       stop(msg)
[16:20:59.355]                     }
[16:20:59.355]                     invisible(pathname)
[16:20:59.355]                   }
[16:20:59.355]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.355]                     rootPath = tempdir()) 
[16:20:59.355]                   {
[16:20:59.355]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.355]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.355]                       tmpdir = path, fileext = ".rds")
[16:20:59.355]                     save_rds(obj, file)
[16:20:59.355]                   }
[16:20:59.355]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.355]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.355]                   {
[16:20:59.355]                     inherits <- base::inherits
[16:20:59.355]                     invokeRestart <- base::invokeRestart
[16:20:59.355]                     is.null <- base::is.null
[16:20:59.355]                     muffled <- FALSE
[16:20:59.355]                     if (inherits(cond, "message")) {
[16:20:59.355]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.355]                       if (muffled) 
[16:20:59.355]                         invokeRestart("muffleMessage")
[16:20:59.355]                     }
[16:20:59.355]                     else if (inherits(cond, "warning")) {
[16:20:59.355]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.355]                       if (muffled) 
[16:20:59.355]                         invokeRestart("muffleWarning")
[16:20:59.355]                     }
[16:20:59.355]                     else if (inherits(cond, "condition")) {
[16:20:59.355]                       if (!is.null(pattern)) {
[16:20:59.355]                         computeRestarts <- base::computeRestarts
[16:20:59.355]                         grepl <- base::grepl
[16:20:59.355]                         restarts <- computeRestarts(cond)
[16:20:59.355]                         for (restart in restarts) {
[16:20:59.355]                           name <- restart$name
[16:20:59.355]                           if (is.null(name)) 
[16:20:59.355]                             next
[16:20:59.355]                           if (!grepl(pattern, name)) 
[16:20:59.355]                             next
[16:20:59.355]                           invokeRestart(restart)
[16:20:59.355]                           muffled <- TRUE
[16:20:59.355]                           break
[16:20:59.355]                         }
[16:20:59.355]                       }
[16:20:59.355]                     }
[16:20:59.355]                     invisible(muffled)
[16:20:59.355]                   }
[16:20:59.355]                   muffleCondition(cond)
[16:20:59.355]                 })
[16:20:59.355]             }))
[16:20:59.355]             future::FutureResult(value = ...future.value$value, 
[16:20:59.355]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.355]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.355]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.355]                     ...future.globalenv.names))
[16:20:59.355]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.355]         }, condition = base::local({
[16:20:59.355]             c <- base::c
[16:20:59.355]             inherits <- base::inherits
[16:20:59.355]             invokeRestart <- base::invokeRestart
[16:20:59.355]             length <- base::length
[16:20:59.355]             list <- base::list
[16:20:59.355]             seq.int <- base::seq.int
[16:20:59.355]             signalCondition <- base::signalCondition
[16:20:59.355]             sys.calls <- base::sys.calls
[16:20:59.355]             `[[` <- base::`[[`
[16:20:59.355]             `+` <- base::`+`
[16:20:59.355]             `<<-` <- base::`<<-`
[16:20:59.355]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.355]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.355]                   3L)]
[16:20:59.355]             }
[16:20:59.355]             function(cond) {
[16:20:59.355]                 is_error <- inherits(cond, "error")
[16:20:59.355]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.355]                   NULL)
[16:20:59.355]                 if (is_error) {
[16:20:59.355]                   sessionInformation <- function() {
[16:20:59.355]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.355]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.355]                       search = base::search(), system = base::Sys.info())
[16:20:59.355]                   }
[16:20:59.355]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.355]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.355]                     cond$call), session = sessionInformation(), 
[16:20:59.355]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.355]                   signalCondition(cond)
[16:20:59.355]                 }
[16:20:59.355]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.355]                 "immediateCondition"))) {
[16:20:59.355]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.355]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.355]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.355]                   if (TRUE && !signal) {
[16:20:59.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.355]                     {
[16:20:59.355]                       inherits <- base::inherits
[16:20:59.355]                       invokeRestart <- base::invokeRestart
[16:20:59.355]                       is.null <- base::is.null
[16:20:59.355]                       muffled <- FALSE
[16:20:59.355]                       if (inherits(cond, "message")) {
[16:20:59.355]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.355]                         if (muffled) 
[16:20:59.355]                           invokeRestart("muffleMessage")
[16:20:59.355]                       }
[16:20:59.355]                       else if (inherits(cond, "warning")) {
[16:20:59.355]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.355]                         if (muffled) 
[16:20:59.355]                           invokeRestart("muffleWarning")
[16:20:59.355]                       }
[16:20:59.355]                       else if (inherits(cond, "condition")) {
[16:20:59.355]                         if (!is.null(pattern)) {
[16:20:59.355]                           computeRestarts <- base::computeRestarts
[16:20:59.355]                           grepl <- base::grepl
[16:20:59.355]                           restarts <- computeRestarts(cond)
[16:20:59.355]                           for (restart in restarts) {
[16:20:59.355]                             name <- restart$name
[16:20:59.355]                             if (is.null(name)) 
[16:20:59.355]                               next
[16:20:59.355]                             if (!grepl(pattern, name)) 
[16:20:59.355]                               next
[16:20:59.355]                             invokeRestart(restart)
[16:20:59.355]                             muffled <- TRUE
[16:20:59.355]                             break
[16:20:59.355]                           }
[16:20:59.355]                         }
[16:20:59.355]                       }
[16:20:59.355]                       invisible(muffled)
[16:20:59.355]                     }
[16:20:59.355]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.355]                   }
[16:20:59.355]                 }
[16:20:59.355]                 else {
[16:20:59.355]                   if (TRUE) {
[16:20:59.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.355]                     {
[16:20:59.355]                       inherits <- base::inherits
[16:20:59.355]                       invokeRestart <- base::invokeRestart
[16:20:59.355]                       is.null <- base::is.null
[16:20:59.355]                       muffled <- FALSE
[16:20:59.355]                       if (inherits(cond, "message")) {
[16:20:59.355]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.355]                         if (muffled) 
[16:20:59.355]                           invokeRestart("muffleMessage")
[16:20:59.355]                       }
[16:20:59.355]                       else if (inherits(cond, "warning")) {
[16:20:59.355]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.355]                         if (muffled) 
[16:20:59.355]                           invokeRestart("muffleWarning")
[16:20:59.355]                       }
[16:20:59.355]                       else if (inherits(cond, "condition")) {
[16:20:59.355]                         if (!is.null(pattern)) {
[16:20:59.355]                           computeRestarts <- base::computeRestarts
[16:20:59.355]                           grepl <- base::grepl
[16:20:59.355]                           restarts <- computeRestarts(cond)
[16:20:59.355]                           for (restart in restarts) {
[16:20:59.355]                             name <- restart$name
[16:20:59.355]                             if (is.null(name)) 
[16:20:59.355]                               next
[16:20:59.355]                             if (!grepl(pattern, name)) 
[16:20:59.355]                               next
[16:20:59.355]                             invokeRestart(restart)
[16:20:59.355]                             muffled <- TRUE
[16:20:59.355]                             break
[16:20:59.355]                           }
[16:20:59.355]                         }
[16:20:59.355]                       }
[16:20:59.355]                       invisible(muffled)
[16:20:59.355]                     }
[16:20:59.355]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.355]                   }
[16:20:59.355]                 }
[16:20:59.355]             }
[16:20:59.355]         }))
[16:20:59.355]     }, error = function(ex) {
[16:20:59.355]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.355]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.355]                 ...future.rng), started = ...future.startTime, 
[16:20:59.355]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.355]             version = "1.8"), class = "FutureResult")
[16:20:59.355]     }, finally = {
[16:20:59.355]         if (!identical(...future.workdir, getwd())) 
[16:20:59.355]             setwd(...future.workdir)
[16:20:59.355]         {
[16:20:59.355]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.355]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.355]             }
[16:20:59.355]             base::options(...future.oldOptions)
[16:20:59.355]             if (.Platform$OS.type == "windows") {
[16:20:59.355]                 old_names <- names(...future.oldEnvVars)
[16:20:59.355]                 envs <- base::Sys.getenv()
[16:20:59.355]                 names <- names(envs)
[16:20:59.355]                 common <- intersect(names, old_names)
[16:20:59.355]                 added <- setdiff(names, old_names)
[16:20:59.355]                 removed <- setdiff(old_names, names)
[16:20:59.355]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.355]                   envs[common]]
[16:20:59.355]                 NAMES <- toupper(changed)
[16:20:59.355]                 args <- list()
[16:20:59.355]                 for (kk in seq_along(NAMES)) {
[16:20:59.355]                   name <- changed[[kk]]
[16:20:59.355]                   NAME <- NAMES[[kk]]
[16:20:59.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.355]                     next
[16:20:59.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.355]                 }
[16:20:59.355]                 NAMES <- toupper(added)
[16:20:59.355]                 for (kk in seq_along(NAMES)) {
[16:20:59.355]                   name <- added[[kk]]
[16:20:59.355]                   NAME <- NAMES[[kk]]
[16:20:59.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.355]                     next
[16:20:59.355]                   args[[name]] <- ""
[16:20:59.355]                 }
[16:20:59.355]                 NAMES <- toupper(removed)
[16:20:59.355]                 for (kk in seq_along(NAMES)) {
[16:20:59.355]                   name <- removed[[kk]]
[16:20:59.355]                   NAME <- NAMES[[kk]]
[16:20:59.355]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.355]                     next
[16:20:59.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.355]                 }
[16:20:59.355]                 if (length(args) > 0) 
[16:20:59.355]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.355]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.355]             }
[16:20:59.355]             else {
[16:20:59.355]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.355]             }
[16:20:59.355]             {
[16:20:59.355]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.355]                   0L) {
[16:20:59.355]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.355]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.355]                   base::options(opts)
[16:20:59.355]                 }
[16:20:59.355]                 {
[16:20:59.355]                   {
[16:20:59.355]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.355]                     NULL
[16:20:59.355]                   }
[16:20:59.355]                   options(future.plan = NULL)
[16:20:59.355]                   if (is.na(NA_character_)) 
[16:20:59.355]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.355]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.355]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.355]                     .init = FALSE)
[16:20:59.355]                 }
[16:20:59.355]             }
[16:20:59.355]         }
[16:20:59.355]     })
[16:20:59.355]     if (TRUE) {
[16:20:59.355]         base::sink(type = "output", split = FALSE)
[16:20:59.355]         if (TRUE) {
[16:20:59.355]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.355]         }
[16:20:59.355]         else {
[16:20:59.355]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.355]         }
[16:20:59.355]         base::close(...future.stdout)
[16:20:59.355]         ...future.stdout <- NULL
[16:20:59.355]     }
[16:20:59.355]     ...future.result$conditions <- ...future.conditions
[16:20:59.355]     ...future.result$finished <- base::Sys.time()
[16:20:59.355]     ...future.result
[16:20:59.355] }
[16:20:59.358] assign_globals() ...
[16:20:59.358] List of 1
[16:20:59.358]  $ x: list()
[16:20:59.358]  - attr(*, "where")=List of 1
[16:20:59.358]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.358]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.358]  - attr(*, "resolved")= logi TRUE
[16:20:59.358]  - attr(*, "total_size")= num 0
[16:20:59.358]  - attr(*, "already-done")= logi TRUE
[16:20:59.361] - copied ‘x’ to environment
[16:20:59.361] assign_globals() ... done
[16:20:59.361] requestCore(): workers = 2
[16:20:59.363] MulticoreFuture started
[16:20:59.363] - Launch lazy future ... done
[16:20:59.363] run() for ‘MulticoreFuture’ ... done
[16:20:59.364] result() for MulticoreFuture ...
[16:20:59.364] plan(): Setting new future strategy stack:
[16:20:59.364] List of future strategies:
[16:20:59.364] 1. sequential:
[16:20:59.364]    - args: function (..., envir = parent.frame())
[16:20:59.364]    - tweaked: FALSE
[16:20:59.364]    - call: NULL
[16:20:59.365] plan(): nbrOfWorkers() = 1
[16:20:59.367] plan(): Setting new future strategy stack:
[16:20:59.367] List of future strategies:
[16:20:59.367] 1. multicore:
[16:20:59.367]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.367]    - tweaked: FALSE
[16:20:59.367]    - call: plan(strategy)
[16:20:59.372] plan(): nbrOfWorkers() = 2
[16:20:59.373] result() for MulticoreFuture ...
[16:20:59.373] result() for MulticoreFuture ... done
[16:20:59.373] result() for MulticoreFuture ... done
[16:20:59.374] result() for MulticoreFuture ...
[16:20:59.374] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.374] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.374] Searching for globals...
[16:20:59.377] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.377] Searching for globals ... DONE
[16:20:59.377] Resolving globals: TRUE
[16:20:59.377] Resolving any globals that are futures ...
[16:20:59.377] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.378] Resolving any globals that are futures ... DONE
[16:20:59.381] Resolving futures part of globals (recursively) ...
[16:20:59.381] resolve() on list ...
[16:20:59.381]  recursive: 99
[16:20:59.381]  length: 1
[16:20:59.381]  elements: ‘x’
[16:20:59.382]  length: 0 (resolved future 1)
[16:20:59.382] resolve() on list ... DONE
[16:20:59.382] - globals: [1] ‘x’
[16:20:59.382] Resolving futures part of globals (recursively) ... DONE
[16:20:59.382] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.383] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.383] - globals: [1] ‘x’
[16:20:59.383] 
[16:20:59.383] getGlobalsAndPackages() ... DONE
[16:20:59.383] run() for ‘Future’ ...
[16:20:59.384] - state: ‘created’
[16:20:59.384] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.388] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.388] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.388]   - Field: ‘label’
[16:20:59.388]   - Field: ‘local’
[16:20:59.388]   - Field: ‘owner’
[16:20:59.388]   - Field: ‘envir’
[16:20:59.388]   - Field: ‘workers’
[16:20:59.388]   - Field: ‘packages’
[16:20:59.389]   - Field: ‘gc’
[16:20:59.389]   - Field: ‘job’
[16:20:59.389]   - Field: ‘conditions’
[16:20:59.389]   - Field: ‘expr’
[16:20:59.389]   - Field: ‘uuid’
[16:20:59.389]   - Field: ‘seed’
[16:20:59.389]   - Field: ‘version’
[16:20:59.389]   - Field: ‘result’
[16:20:59.390]   - Field: ‘asynchronous’
[16:20:59.390]   - Field: ‘calls’
[16:20:59.390]   - Field: ‘globals’
[16:20:59.390]   - Field: ‘stdout’
[16:20:59.390]   - Field: ‘earlySignal’
[16:20:59.390]   - Field: ‘lazy’
[16:20:59.390]   - Field: ‘state’
[16:20:59.390] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.390] - Launch lazy future ...
[16:20:59.391] Packages needed by the future expression (n = 0): <none>
[16:20:59.391] Packages needed by future strategies (n = 0): <none>
[16:20:59.391] {
[16:20:59.391]     {
[16:20:59.391]         {
[16:20:59.391]             ...future.startTime <- base::Sys.time()
[16:20:59.391]             {
[16:20:59.391]                 {
[16:20:59.391]                   {
[16:20:59.391]                     {
[16:20:59.391]                       base::local({
[16:20:59.391]                         has_future <- base::requireNamespace("future", 
[16:20:59.391]                           quietly = TRUE)
[16:20:59.391]                         if (has_future) {
[16:20:59.391]                           ns <- base::getNamespace("future")
[16:20:59.391]                           version <- ns[[".package"]][["version"]]
[16:20:59.391]                           if (is.null(version)) 
[16:20:59.391]                             version <- utils::packageVersion("future")
[16:20:59.391]                         }
[16:20:59.391]                         else {
[16:20:59.391]                           version <- NULL
[16:20:59.391]                         }
[16:20:59.391]                         if (!has_future || version < "1.8.0") {
[16:20:59.391]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.391]                             "", base::R.version$version.string), 
[16:20:59.391]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.391]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.391]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.391]                               "release", "version")], collapse = " "), 
[16:20:59.391]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.391]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.391]                             info)
[16:20:59.391]                           info <- base::paste(info, collapse = "; ")
[16:20:59.391]                           if (!has_future) {
[16:20:59.391]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.391]                               info)
[16:20:59.391]                           }
[16:20:59.391]                           else {
[16:20:59.391]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.391]                               info, version)
[16:20:59.391]                           }
[16:20:59.391]                           base::stop(msg)
[16:20:59.391]                         }
[16:20:59.391]                       })
[16:20:59.391]                     }
[16:20:59.391]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.391]                     base::options(mc.cores = 1L)
[16:20:59.391]                   }
[16:20:59.391]                   ...future.strategy.old <- future::plan("list")
[16:20:59.391]                   options(future.plan = NULL)
[16:20:59.391]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.391]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.391]                 }
[16:20:59.391]                 ...future.workdir <- getwd()
[16:20:59.391]             }
[16:20:59.391]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.391]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.391]         }
[16:20:59.391]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.391]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.391]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.391]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.391]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.391]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.391]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.391]             base::names(...future.oldOptions))
[16:20:59.391]     }
[16:20:59.391]     if (FALSE) {
[16:20:59.391]     }
[16:20:59.391]     else {
[16:20:59.391]         if (TRUE) {
[16:20:59.391]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.391]                 open = "w")
[16:20:59.391]         }
[16:20:59.391]         else {
[16:20:59.391]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.391]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.391]         }
[16:20:59.391]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.391]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.391]             base::sink(type = "output", split = FALSE)
[16:20:59.391]             base::close(...future.stdout)
[16:20:59.391]         }, add = TRUE)
[16:20:59.391]     }
[16:20:59.391]     ...future.frame <- base::sys.nframe()
[16:20:59.391]     ...future.conditions <- base::list()
[16:20:59.391]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.391]     if (FALSE) {
[16:20:59.391]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.391]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.391]     }
[16:20:59.391]     ...future.result <- base::tryCatch({
[16:20:59.391]         base::withCallingHandlers({
[16:20:59.391]             ...future.value <- base::withVisible(base::local({
[16:20:59.391]                 withCallingHandlers({
[16:20:59.391]                   {
[16:20:59.391]                     x[["a"]] <- 1
[16:20:59.391]                     x
[16:20:59.391]                   }
[16:20:59.391]                 }, immediateCondition = function(cond) {
[16:20:59.391]                   save_rds <- function (object, pathname, ...) 
[16:20:59.391]                   {
[16:20:59.391]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.391]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.391]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.391]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.391]                         fi_tmp[["mtime"]])
[16:20:59.391]                     }
[16:20:59.391]                     tryCatch({
[16:20:59.391]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.391]                     }, error = function(ex) {
[16:20:59.391]                       msg <- conditionMessage(ex)
[16:20:59.391]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.391]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.391]                         fi_tmp[["mtime"]], msg)
[16:20:59.391]                       ex$message <- msg
[16:20:59.391]                       stop(ex)
[16:20:59.391]                     })
[16:20:59.391]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.391]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.391]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.391]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.391]                       fi <- file.info(pathname)
[16:20:59.391]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.391]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.391]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.391]                         fi[["size"]], fi[["mtime"]])
[16:20:59.391]                       stop(msg)
[16:20:59.391]                     }
[16:20:59.391]                     invisible(pathname)
[16:20:59.391]                   }
[16:20:59.391]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.391]                     rootPath = tempdir()) 
[16:20:59.391]                   {
[16:20:59.391]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.391]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.391]                       tmpdir = path, fileext = ".rds")
[16:20:59.391]                     save_rds(obj, file)
[16:20:59.391]                   }
[16:20:59.391]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.391]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.391]                   {
[16:20:59.391]                     inherits <- base::inherits
[16:20:59.391]                     invokeRestart <- base::invokeRestart
[16:20:59.391]                     is.null <- base::is.null
[16:20:59.391]                     muffled <- FALSE
[16:20:59.391]                     if (inherits(cond, "message")) {
[16:20:59.391]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.391]                       if (muffled) 
[16:20:59.391]                         invokeRestart("muffleMessage")
[16:20:59.391]                     }
[16:20:59.391]                     else if (inherits(cond, "warning")) {
[16:20:59.391]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.391]                       if (muffled) 
[16:20:59.391]                         invokeRestart("muffleWarning")
[16:20:59.391]                     }
[16:20:59.391]                     else if (inherits(cond, "condition")) {
[16:20:59.391]                       if (!is.null(pattern)) {
[16:20:59.391]                         computeRestarts <- base::computeRestarts
[16:20:59.391]                         grepl <- base::grepl
[16:20:59.391]                         restarts <- computeRestarts(cond)
[16:20:59.391]                         for (restart in restarts) {
[16:20:59.391]                           name <- restart$name
[16:20:59.391]                           if (is.null(name)) 
[16:20:59.391]                             next
[16:20:59.391]                           if (!grepl(pattern, name)) 
[16:20:59.391]                             next
[16:20:59.391]                           invokeRestart(restart)
[16:20:59.391]                           muffled <- TRUE
[16:20:59.391]                           break
[16:20:59.391]                         }
[16:20:59.391]                       }
[16:20:59.391]                     }
[16:20:59.391]                     invisible(muffled)
[16:20:59.391]                   }
[16:20:59.391]                   muffleCondition(cond)
[16:20:59.391]                 })
[16:20:59.391]             }))
[16:20:59.391]             future::FutureResult(value = ...future.value$value, 
[16:20:59.391]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.391]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.391]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.391]                     ...future.globalenv.names))
[16:20:59.391]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.391]         }, condition = base::local({
[16:20:59.391]             c <- base::c
[16:20:59.391]             inherits <- base::inherits
[16:20:59.391]             invokeRestart <- base::invokeRestart
[16:20:59.391]             length <- base::length
[16:20:59.391]             list <- base::list
[16:20:59.391]             seq.int <- base::seq.int
[16:20:59.391]             signalCondition <- base::signalCondition
[16:20:59.391]             sys.calls <- base::sys.calls
[16:20:59.391]             `[[` <- base::`[[`
[16:20:59.391]             `+` <- base::`+`
[16:20:59.391]             `<<-` <- base::`<<-`
[16:20:59.391]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.391]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.391]                   3L)]
[16:20:59.391]             }
[16:20:59.391]             function(cond) {
[16:20:59.391]                 is_error <- inherits(cond, "error")
[16:20:59.391]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.391]                   NULL)
[16:20:59.391]                 if (is_error) {
[16:20:59.391]                   sessionInformation <- function() {
[16:20:59.391]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.391]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.391]                       search = base::search(), system = base::Sys.info())
[16:20:59.391]                   }
[16:20:59.391]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.391]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.391]                     cond$call), session = sessionInformation(), 
[16:20:59.391]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.391]                   signalCondition(cond)
[16:20:59.391]                 }
[16:20:59.391]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.391]                 "immediateCondition"))) {
[16:20:59.391]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.391]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.391]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.391]                   if (TRUE && !signal) {
[16:20:59.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.391]                     {
[16:20:59.391]                       inherits <- base::inherits
[16:20:59.391]                       invokeRestart <- base::invokeRestart
[16:20:59.391]                       is.null <- base::is.null
[16:20:59.391]                       muffled <- FALSE
[16:20:59.391]                       if (inherits(cond, "message")) {
[16:20:59.391]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.391]                         if (muffled) 
[16:20:59.391]                           invokeRestart("muffleMessage")
[16:20:59.391]                       }
[16:20:59.391]                       else if (inherits(cond, "warning")) {
[16:20:59.391]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.391]                         if (muffled) 
[16:20:59.391]                           invokeRestart("muffleWarning")
[16:20:59.391]                       }
[16:20:59.391]                       else if (inherits(cond, "condition")) {
[16:20:59.391]                         if (!is.null(pattern)) {
[16:20:59.391]                           computeRestarts <- base::computeRestarts
[16:20:59.391]                           grepl <- base::grepl
[16:20:59.391]                           restarts <- computeRestarts(cond)
[16:20:59.391]                           for (restart in restarts) {
[16:20:59.391]                             name <- restart$name
[16:20:59.391]                             if (is.null(name)) 
[16:20:59.391]                               next
[16:20:59.391]                             if (!grepl(pattern, name)) 
[16:20:59.391]                               next
[16:20:59.391]                             invokeRestart(restart)
[16:20:59.391]                             muffled <- TRUE
[16:20:59.391]                             break
[16:20:59.391]                           }
[16:20:59.391]                         }
[16:20:59.391]                       }
[16:20:59.391]                       invisible(muffled)
[16:20:59.391]                     }
[16:20:59.391]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.391]                   }
[16:20:59.391]                 }
[16:20:59.391]                 else {
[16:20:59.391]                   if (TRUE) {
[16:20:59.391]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.391]                     {
[16:20:59.391]                       inherits <- base::inherits
[16:20:59.391]                       invokeRestart <- base::invokeRestart
[16:20:59.391]                       is.null <- base::is.null
[16:20:59.391]                       muffled <- FALSE
[16:20:59.391]                       if (inherits(cond, "message")) {
[16:20:59.391]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.391]                         if (muffled) 
[16:20:59.391]                           invokeRestart("muffleMessage")
[16:20:59.391]                       }
[16:20:59.391]                       else if (inherits(cond, "warning")) {
[16:20:59.391]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.391]                         if (muffled) 
[16:20:59.391]                           invokeRestart("muffleWarning")
[16:20:59.391]                       }
[16:20:59.391]                       else if (inherits(cond, "condition")) {
[16:20:59.391]                         if (!is.null(pattern)) {
[16:20:59.391]                           computeRestarts <- base::computeRestarts
[16:20:59.391]                           grepl <- base::grepl
[16:20:59.391]                           restarts <- computeRestarts(cond)
[16:20:59.391]                           for (restart in restarts) {
[16:20:59.391]                             name <- restart$name
[16:20:59.391]                             if (is.null(name)) 
[16:20:59.391]                               next
[16:20:59.391]                             if (!grepl(pattern, name)) 
[16:20:59.391]                               next
[16:20:59.391]                             invokeRestart(restart)
[16:20:59.391]                             muffled <- TRUE
[16:20:59.391]                             break
[16:20:59.391]                           }
[16:20:59.391]                         }
[16:20:59.391]                       }
[16:20:59.391]                       invisible(muffled)
[16:20:59.391]                     }
[16:20:59.391]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.391]                   }
[16:20:59.391]                 }
[16:20:59.391]             }
[16:20:59.391]         }))
[16:20:59.391]     }, error = function(ex) {
[16:20:59.391]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.391]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.391]                 ...future.rng), started = ...future.startTime, 
[16:20:59.391]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.391]             version = "1.8"), class = "FutureResult")
[16:20:59.391]     }, finally = {
[16:20:59.391]         if (!identical(...future.workdir, getwd())) 
[16:20:59.391]             setwd(...future.workdir)
[16:20:59.391]         {
[16:20:59.391]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.391]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.391]             }
[16:20:59.391]             base::options(...future.oldOptions)
[16:20:59.391]             if (.Platform$OS.type == "windows") {
[16:20:59.391]                 old_names <- names(...future.oldEnvVars)
[16:20:59.391]                 envs <- base::Sys.getenv()
[16:20:59.391]                 names <- names(envs)
[16:20:59.391]                 common <- intersect(names, old_names)
[16:20:59.391]                 added <- setdiff(names, old_names)
[16:20:59.391]                 removed <- setdiff(old_names, names)
[16:20:59.391]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.391]                   envs[common]]
[16:20:59.391]                 NAMES <- toupper(changed)
[16:20:59.391]                 args <- list()
[16:20:59.391]                 for (kk in seq_along(NAMES)) {
[16:20:59.391]                   name <- changed[[kk]]
[16:20:59.391]                   NAME <- NAMES[[kk]]
[16:20:59.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.391]                     next
[16:20:59.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.391]                 }
[16:20:59.391]                 NAMES <- toupper(added)
[16:20:59.391]                 for (kk in seq_along(NAMES)) {
[16:20:59.391]                   name <- added[[kk]]
[16:20:59.391]                   NAME <- NAMES[[kk]]
[16:20:59.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.391]                     next
[16:20:59.391]                   args[[name]] <- ""
[16:20:59.391]                 }
[16:20:59.391]                 NAMES <- toupper(removed)
[16:20:59.391]                 for (kk in seq_along(NAMES)) {
[16:20:59.391]                   name <- removed[[kk]]
[16:20:59.391]                   NAME <- NAMES[[kk]]
[16:20:59.391]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.391]                     next
[16:20:59.391]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.391]                 }
[16:20:59.391]                 if (length(args) > 0) 
[16:20:59.391]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.391]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.391]             }
[16:20:59.391]             else {
[16:20:59.391]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.391]             }
[16:20:59.391]             {
[16:20:59.391]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.391]                   0L) {
[16:20:59.391]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.391]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.391]                   base::options(opts)
[16:20:59.391]                 }
[16:20:59.391]                 {
[16:20:59.391]                   {
[16:20:59.391]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.391]                     NULL
[16:20:59.391]                   }
[16:20:59.391]                   options(future.plan = NULL)
[16:20:59.391]                   if (is.na(NA_character_)) 
[16:20:59.391]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.391]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.391]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.391]                     .init = FALSE)
[16:20:59.391]                 }
[16:20:59.391]             }
[16:20:59.391]         }
[16:20:59.391]     })
[16:20:59.391]     if (TRUE) {
[16:20:59.391]         base::sink(type = "output", split = FALSE)
[16:20:59.391]         if (TRUE) {
[16:20:59.391]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.391]         }
[16:20:59.391]         else {
[16:20:59.391]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.391]         }
[16:20:59.391]         base::close(...future.stdout)
[16:20:59.391]         ...future.stdout <- NULL
[16:20:59.391]     }
[16:20:59.391]     ...future.result$conditions <- ...future.conditions
[16:20:59.391]     ...future.result$finished <- base::Sys.time()
[16:20:59.391]     ...future.result
[16:20:59.391] }
[16:20:59.394] assign_globals() ...
[16:20:59.394] List of 1
[16:20:59.394]  $ x: list()
[16:20:59.394]  - attr(*, "where")=List of 1
[16:20:59.394]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.394]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.394]  - attr(*, "resolved")= logi TRUE
[16:20:59.394]  - attr(*, "total_size")= num 0
[16:20:59.394]  - attr(*, "already-done")= logi TRUE
[16:20:59.397] - copied ‘x’ to environment
[16:20:59.397] assign_globals() ... done
[16:20:59.397] requestCore(): workers = 2
[16:20:59.399] MulticoreFuture started
[16:20:59.399] - Launch lazy future ... done
[16:20:59.399] run() for ‘MulticoreFuture’ ... done
[16:20:59.399] result() for MulticoreFuture ...
[16:20:59.400] plan(): Setting new future strategy stack:
[16:20:59.400] List of future strategies:
[16:20:59.400] 1. sequential:
[16:20:59.400]    - args: function (..., envir = parent.frame())
[16:20:59.400]    - tweaked: FALSE
[16:20:59.400]    - call: NULL
[16:20:59.401] plan(): nbrOfWorkers() = 1
[16:20:59.403] plan(): Setting new future strategy stack:
[16:20:59.403] List of future strategies:
[16:20:59.403] 1. multicore:
[16:20:59.403]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.403]    - tweaked: FALSE
[16:20:59.403]    - call: plan(strategy)
[16:20:59.408] plan(): nbrOfWorkers() = 2
[16:20:59.409] result() for MulticoreFuture ...
[16:20:59.409] result() for MulticoreFuture ... done
[16:20:59.409] result() for MulticoreFuture ... done
[16:20:59.409] result() for MulticoreFuture ...
[16:20:59.409] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.410] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.410] Searching for globals...
[16:20:59.413] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.413] Searching for globals ... DONE
[16:20:59.413] Resolving globals: TRUE
[16:20:59.413] Resolving any globals that are futures ...
[16:20:59.413] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:20:59.414] Resolving any globals that are futures ... DONE
[16:20:59.414] Resolving futures part of globals (recursively) ...
[16:20:59.414] resolve() on list ...
[16:20:59.414]  recursive: 99
[16:20:59.415]  length: 1
[16:20:59.415]  elements: ‘x’
[16:20:59.415]  length: 0 (resolved future 1)
[16:20:59.415] resolve() on list ... DONE
[16:20:59.415] - globals: [1] ‘x’
[16:20:59.415] Resolving futures part of globals (recursively) ... DONE
[16:20:59.415] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.416] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.416] - globals: [1] ‘x’
[16:20:59.416] 
[16:20:59.416] getGlobalsAndPackages() ... DONE
[16:20:59.417] run() for ‘Future’ ...
[16:20:59.417] - state: ‘created’
[16:20:59.417] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.421] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.421] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.421]   - Field: ‘label’
[16:20:59.421]   - Field: ‘local’
[16:20:59.421]   - Field: ‘owner’
[16:20:59.421]   - Field: ‘envir’
[16:20:59.422]   - Field: ‘workers’
[16:20:59.422]   - Field: ‘packages’
[16:20:59.422]   - Field: ‘gc’
[16:20:59.422]   - Field: ‘job’
[16:20:59.422]   - Field: ‘conditions’
[16:20:59.422]   - Field: ‘expr’
[16:20:59.422]   - Field: ‘uuid’
[16:20:59.422]   - Field: ‘seed’
[16:20:59.422]   - Field: ‘version’
[16:20:59.423]   - Field: ‘result’
[16:20:59.423]   - Field: ‘asynchronous’
[16:20:59.423]   - Field: ‘calls’
[16:20:59.423]   - Field: ‘globals’
[16:20:59.423]   - Field: ‘stdout’
[16:20:59.423]   - Field: ‘earlySignal’
[16:20:59.423]   - Field: ‘lazy’
[16:20:59.423]   - Field: ‘state’
[16:20:59.423] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.424] - Launch lazy future ...
[16:20:59.424] Packages needed by the future expression (n = 0): <none>
[16:20:59.424] Packages needed by future strategies (n = 0): <none>
[16:20:59.425] {
[16:20:59.425]     {
[16:20:59.425]         {
[16:20:59.425]             ...future.startTime <- base::Sys.time()
[16:20:59.425]             {
[16:20:59.425]                 {
[16:20:59.425]                   {
[16:20:59.425]                     {
[16:20:59.425]                       base::local({
[16:20:59.425]                         has_future <- base::requireNamespace("future", 
[16:20:59.425]                           quietly = TRUE)
[16:20:59.425]                         if (has_future) {
[16:20:59.425]                           ns <- base::getNamespace("future")
[16:20:59.425]                           version <- ns[[".package"]][["version"]]
[16:20:59.425]                           if (is.null(version)) 
[16:20:59.425]                             version <- utils::packageVersion("future")
[16:20:59.425]                         }
[16:20:59.425]                         else {
[16:20:59.425]                           version <- NULL
[16:20:59.425]                         }
[16:20:59.425]                         if (!has_future || version < "1.8.0") {
[16:20:59.425]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.425]                             "", base::R.version$version.string), 
[16:20:59.425]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.425]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.425]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.425]                               "release", "version")], collapse = " "), 
[16:20:59.425]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.425]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.425]                             info)
[16:20:59.425]                           info <- base::paste(info, collapse = "; ")
[16:20:59.425]                           if (!has_future) {
[16:20:59.425]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.425]                               info)
[16:20:59.425]                           }
[16:20:59.425]                           else {
[16:20:59.425]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.425]                               info, version)
[16:20:59.425]                           }
[16:20:59.425]                           base::stop(msg)
[16:20:59.425]                         }
[16:20:59.425]                       })
[16:20:59.425]                     }
[16:20:59.425]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.425]                     base::options(mc.cores = 1L)
[16:20:59.425]                   }
[16:20:59.425]                   ...future.strategy.old <- future::plan("list")
[16:20:59.425]                   options(future.plan = NULL)
[16:20:59.425]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.425]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.425]                 }
[16:20:59.425]                 ...future.workdir <- getwd()
[16:20:59.425]             }
[16:20:59.425]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.425]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.425]         }
[16:20:59.425]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.425]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.425]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.425]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.425]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.425]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.425]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.425]             base::names(...future.oldOptions))
[16:20:59.425]     }
[16:20:59.425]     if (FALSE) {
[16:20:59.425]     }
[16:20:59.425]     else {
[16:20:59.425]         if (TRUE) {
[16:20:59.425]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.425]                 open = "w")
[16:20:59.425]         }
[16:20:59.425]         else {
[16:20:59.425]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.425]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.425]         }
[16:20:59.425]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.425]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.425]             base::sink(type = "output", split = FALSE)
[16:20:59.425]             base::close(...future.stdout)
[16:20:59.425]         }, add = TRUE)
[16:20:59.425]     }
[16:20:59.425]     ...future.frame <- base::sys.nframe()
[16:20:59.425]     ...future.conditions <- base::list()
[16:20:59.425]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.425]     if (FALSE) {
[16:20:59.425]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.425]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.425]     }
[16:20:59.425]     ...future.result <- base::tryCatch({
[16:20:59.425]         base::withCallingHandlers({
[16:20:59.425]             ...future.value <- base::withVisible(base::local({
[16:20:59.425]                 withCallingHandlers({
[16:20:59.425]                   {
[16:20:59.425]                     x[["a"]] <- 1
[16:20:59.425]                     x
[16:20:59.425]                   }
[16:20:59.425]                 }, immediateCondition = function(cond) {
[16:20:59.425]                   save_rds <- function (object, pathname, ...) 
[16:20:59.425]                   {
[16:20:59.425]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.425]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.425]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.425]                         fi_tmp[["mtime"]])
[16:20:59.425]                     }
[16:20:59.425]                     tryCatch({
[16:20:59.425]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.425]                     }, error = function(ex) {
[16:20:59.425]                       msg <- conditionMessage(ex)
[16:20:59.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.425]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.425]                         fi_tmp[["mtime"]], msg)
[16:20:59.425]                       ex$message <- msg
[16:20:59.425]                       stop(ex)
[16:20:59.425]                     })
[16:20:59.425]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.425]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.425]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.425]                       fi <- file.info(pathname)
[16:20:59.425]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.425]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.425]                         fi[["size"]], fi[["mtime"]])
[16:20:59.425]                       stop(msg)
[16:20:59.425]                     }
[16:20:59.425]                     invisible(pathname)
[16:20:59.425]                   }
[16:20:59.425]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.425]                     rootPath = tempdir()) 
[16:20:59.425]                   {
[16:20:59.425]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.425]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.425]                       tmpdir = path, fileext = ".rds")
[16:20:59.425]                     save_rds(obj, file)
[16:20:59.425]                   }
[16:20:59.425]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.425]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.425]                   {
[16:20:59.425]                     inherits <- base::inherits
[16:20:59.425]                     invokeRestart <- base::invokeRestart
[16:20:59.425]                     is.null <- base::is.null
[16:20:59.425]                     muffled <- FALSE
[16:20:59.425]                     if (inherits(cond, "message")) {
[16:20:59.425]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.425]                       if (muffled) 
[16:20:59.425]                         invokeRestart("muffleMessage")
[16:20:59.425]                     }
[16:20:59.425]                     else if (inherits(cond, "warning")) {
[16:20:59.425]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.425]                       if (muffled) 
[16:20:59.425]                         invokeRestart("muffleWarning")
[16:20:59.425]                     }
[16:20:59.425]                     else if (inherits(cond, "condition")) {
[16:20:59.425]                       if (!is.null(pattern)) {
[16:20:59.425]                         computeRestarts <- base::computeRestarts
[16:20:59.425]                         grepl <- base::grepl
[16:20:59.425]                         restarts <- computeRestarts(cond)
[16:20:59.425]                         for (restart in restarts) {
[16:20:59.425]                           name <- restart$name
[16:20:59.425]                           if (is.null(name)) 
[16:20:59.425]                             next
[16:20:59.425]                           if (!grepl(pattern, name)) 
[16:20:59.425]                             next
[16:20:59.425]                           invokeRestart(restart)
[16:20:59.425]                           muffled <- TRUE
[16:20:59.425]                           break
[16:20:59.425]                         }
[16:20:59.425]                       }
[16:20:59.425]                     }
[16:20:59.425]                     invisible(muffled)
[16:20:59.425]                   }
[16:20:59.425]                   muffleCondition(cond)
[16:20:59.425]                 })
[16:20:59.425]             }))
[16:20:59.425]             future::FutureResult(value = ...future.value$value, 
[16:20:59.425]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.425]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.425]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.425]                     ...future.globalenv.names))
[16:20:59.425]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.425]         }, condition = base::local({
[16:20:59.425]             c <- base::c
[16:20:59.425]             inherits <- base::inherits
[16:20:59.425]             invokeRestart <- base::invokeRestart
[16:20:59.425]             length <- base::length
[16:20:59.425]             list <- base::list
[16:20:59.425]             seq.int <- base::seq.int
[16:20:59.425]             signalCondition <- base::signalCondition
[16:20:59.425]             sys.calls <- base::sys.calls
[16:20:59.425]             `[[` <- base::`[[`
[16:20:59.425]             `+` <- base::`+`
[16:20:59.425]             `<<-` <- base::`<<-`
[16:20:59.425]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.425]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.425]                   3L)]
[16:20:59.425]             }
[16:20:59.425]             function(cond) {
[16:20:59.425]                 is_error <- inherits(cond, "error")
[16:20:59.425]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.425]                   NULL)
[16:20:59.425]                 if (is_error) {
[16:20:59.425]                   sessionInformation <- function() {
[16:20:59.425]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.425]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.425]                       search = base::search(), system = base::Sys.info())
[16:20:59.425]                   }
[16:20:59.425]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.425]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.425]                     cond$call), session = sessionInformation(), 
[16:20:59.425]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.425]                   signalCondition(cond)
[16:20:59.425]                 }
[16:20:59.425]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.425]                 "immediateCondition"))) {
[16:20:59.425]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.425]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.425]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.425]                   if (TRUE && !signal) {
[16:20:59.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.425]                     {
[16:20:59.425]                       inherits <- base::inherits
[16:20:59.425]                       invokeRestart <- base::invokeRestart
[16:20:59.425]                       is.null <- base::is.null
[16:20:59.425]                       muffled <- FALSE
[16:20:59.425]                       if (inherits(cond, "message")) {
[16:20:59.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.425]                         if (muffled) 
[16:20:59.425]                           invokeRestart("muffleMessage")
[16:20:59.425]                       }
[16:20:59.425]                       else if (inherits(cond, "warning")) {
[16:20:59.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.425]                         if (muffled) 
[16:20:59.425]                           invokeRestart("muffleWarning")
[16:20:59.425]                       }
[16:20:59.425]                       else if (inherits(cond, "condition")) {
[16:20:59.425]                         if (!is.null(pattern)) {
[16:20:59.425]                           computeRestarts <- base::computeRestarts
[16:20:59.425]                           grepl <- base::grepl
[16:20:59.425]                           restarts <- computeRestarts(cond)
[16:20:59.425]                           for (restart in restarts) {
[16:20:59.425]                             name <- restart$name
[16:20:59.425]                             if (is.null(name)) 
[16:20:59.425]                               next
[16:20:59.425]                             if (!grepl(pattern, name)) 
[16:20:59.425]                               next
[16:20:59.425]                             invokeRestart(restart)
[16:20:59.425]                             muffled <- TRUE
[16:20:59.425]                             break
[16:20:59.425]                           }
[16:20:59.425]                         }
[16:20:59.425]                       }
[16:20:59.425]                       invisible(muffled)
[16:20:59.425]                     }
[16:20:59.425]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.425]                   }
[16:20:59.425]                 }
[16:20:59.425]                 else {
[16:20:59.425]                   if (TRUE) {
[16:20:59.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.425]                     {
[16:20:59.425]                       inherits <- base::inherits
[16:20:59.425]                       invokeRestart <- base::invokeRestart
[16:20:59.425]                       is.null <- base::is.null
[16:20:59.425]                       muffled <- FALSE
[16:20:59.425]                       if (inherits(cond, "message")) {
[16:20:59.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.425]                         if (muffled) 
[16:20:59.425]                           invokeRestart("muffleMessage")
[16:20:59.425]                       }
[16:20:59.425]                       else if (inherits(cond, "warning")) {
[16:20:59.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.425]                         if (muffled) 
[16:20:59.425]                           invokeRestart("muffleWarning")
[16:20:59.425]                       }
[16:20:59.425]                       else if (inherits(cond, "condition")) {
[16:20:59.425]                         if (!is.null(pattern)) {
[16:20:59.425]                           computeRestarts <- base::computeRestarts
[16:20:59.425]                           grepl <- base::grepl
[16:20:59.425]                           restarts <- computeRestarts(cond)
[16:20:59.425]                           for (restart in restarts) {
[16:20:59.425]                             name <- restart$name
[16:20:59.425]                             if (is.null(name)) 
[16:20:59.425]                               next
[16:20:59.425]                             if (!grepl(pattern, name)) 
[16:20:59.425]                               next
[16:20:59.425]                             invokeRestart(restart)
[16:20:59.425]                             muffled <- TRUE
[16:20:59.425]                             break
[16:20:59.425]                           }
[16:20:59.425]                         }
[16:20:59.425]                       }
[16:20:59.425]                       invisible(muffled)
[16:20:59.425]                     }
[16:20:59.425]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.425]                   }
[16:20:59.425]                 }
[16:20:59.425]             }
[16:20:59.425]         }))
[16:20:59.425]     }, error = function(ex) {
[16:20:59.425]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.425]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.425]                 ...future.rng), started = ...future.startTime, 
[16:20:59.425]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.425]             version = "1.8"), class = "FutureResult")
[16:20:59.425]     }, finally = {
[16:20:59.425]         if (!identical(...future.workdir, getwd())) 
[16:20:59.425]             setwd(...future.workdir)
[16:20:59.425]         {
[16:20:59.425]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.425]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.425]             }
[16:20:59.425]             base::options(...future.oldOptions)
[16:20:59.425]             if (.Platform$OS.type == "windows") {
[16:20:59.425]                 old_names <- names(...future.oldEnvVars)
[16:20:59.425]                 envs <- base::Sys.getenv()
[16:20:59.425]                 names <- names(envs)
[16:20:59.425]                 common <- intersect(names, old_names)
[16:20:59.425]                 added <- setdiff(names, old_names)
[16:20:59.425]                 removed <- setdiff(old_names, names)
[16:20:59.425]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.425]                   envs[common]]
[16:20:59.425]                 NAMES <- toupper(changed)
[16:20:59.425]                 args <- list()
[16:20:59.425]                 for (kk in seq_along(NAMES)) {
[16:20:59.425]                   name <- changed[[kk]]
[16:20:59.425]                   NAME <- NAMES[[kk]]
[16:20:59.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.425]                     next
[16:20:59.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.425]                 }
[16:20:59.425]                 NAMES <- toupper(added)
[16:20:59.425]                 for (kk in seq_along(NAMES)) {
[16:20:59.425]                   name <- added[[kk]]
[16:20:59.425]                   NAME <- NAMES[[kk]]
[16:20:59.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.425]                     next
[16:20:59.425]                   args[[name]] <- ""
[16:20:59.425]                 }
[16:20:59.425]                 NAMES <- toupper(removed)
[16:20:59.425]                 for (kk in seq_along(NAMES)) {
[16:20:59.425]                   name <- removed[[kk]]
[16:20:59.425]                   NAME <- NAMES[[kk]]
[16:20:59.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.425]                     next
[16:20:59.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.425]                 }
[16:20:59.425]                 if (length(args) > 0) 
[16:20:59.425]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.425]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.425]             }
[16:20:59.425]             else {
[16:20:59.425]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.425]             }
[16:20:59.425]             {
[16:20:59.425]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.425]                   0L) {
[16:20:59.425]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.425]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.425]                   base::options(opts)
[16:20:59.425]                 }
[16:20:59.425]                 {
[16:20:59.425]                   {
[16:20:59.425]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.425]                     NULL
[16:20:59.425]                   }
[16:20:59.425]                   options(future.plan = NULL)
[16:20:59.425]                   if (is.na(NA_character_)) 
[16:20:59.425]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.425]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.425]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.425]                     .init = FALSE)
[16:20:59.425]                 }
[16:20:59.425]             }
[16:20:59.425]         }
[16:20:59.425]     })
[16:20:59.425]     if (TRUE) {
[16:20:59.425]         base::sink(type = "output", split = FALSE)
[16:20:59.425]         if (TRUE) {
[16:20:59.425]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.425]         }
[16:20:59.425]         else {
[16:20:59.425]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.425]         }
[16:20:59.425]         base::close(...future.stdout)
[16:20:59.425]         ...future.stdout <- NULL
[16:20:59.425]     }
[16:20:59.425]     ...future.result$conditions <- ...future.conditions
[16:20:59.425]     ...future.result$finished <- base::Sys.time()
[16:20:59.425]     ...future.result
[16:20:59.425] }
[16:20:59.427] assign_globals() ...
[16:20:59.427] List of 1
[16:20:59.427]  $ x: list()
[16:20:59.427]  - attr(*, "where")=List of 1
[16:20:59.427]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.427]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.427]  - attr(*, "resolved")= logi TRUE
[16:20:59.427]  - attr(*, "total_size")= num 0
[16:20:59.427]  - attr(*, "already-done")= logi TRUE
[16:20:59.433] - copied ‘x’ to environment
[16:20:59.433] assign_globals() ... done
[16:20:59.433] requestCore(): workers = 2
[16:20:59.435] MulticoreFuture started
[16:20:59.435] - Launch lazy future ... done
[16:20:59.435] run() for ‘MulticoreFuture’ ... done
[16:20:59.436] result() for MulticoreFuture ...
[16:20:59.436] plan(): Setting new future strategy stack:
[16:20:59.436] List of future strategies:
[16:20:59.436] 1. sequential:
[16:20:59.436]    - args: function (..., envir = parent.frame())
[16:20:59.436]    - tweaked: FALSE
[16:20:59.436]    - call: NULL
[16:20:59.437] plan(): nbrOfWorkers() = 1
[16:20:59.439] plan(): Setting new future strategy stack:
[16:20:59.439] List of future strategies:
[16:20:59.439] 1. multicore:
[16:20:59.439]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.439]    - tweaked: FALSE
[16:20:59.439]    - call: plan(strategy)
[16:20:59.444] plan(): nbrOfWorkers() = 2
[16:20:59.445] result() for MulticoreFuture ...
[16:20:59.445] result() for MulticoreFuture ... done
[16:20:59.445] result() for MulticoreFuture ... done
[16:20:59.446] result() for MulticoreFuture ...
[16:20:59.446] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.446] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.446] Searching for globals...
[16:20:59.449] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.449] Searching for globals ... DONE
[16:20:59.450] Resolving globals: TRUE
[16:20:59.450] Resolving any globals that are futures ...
[16:20:59.450] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.450] Resolving any globals that are futures ... DONE
[16:20:59.450] Resolving futures part of globals (recursively) ...
[16:20:59.451] resolve() on list ...
[16:20:59.451]  recursive: 99
[16:20:59.451]  length: 1
[16:20:59.451]  elements: ‘x’
[16:20:59.451]  length: 0 (resolved future 1)
[16:20:59.451] resolve() on list ... DONE
[16:20:59.452] - globals: [1] ‘x’
[16:20:59.452] Resolving futures part of globals (recursively) ... DONE
[16:20:59.452] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.452] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.452] - globals: [1] ‘x’
[16:20:59.453] 
[16:20:59.453] getGlobalsAndPackages() ... DONE
[16:20:59.453] run() for ‘Future’ ...
[16:20:59.453] - state: ‘created’
[16:20:59.453] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.457] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.457] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.458]   - Field: ‘label’
[16:20:59.458]   - Field: ‘local’
[16:20:59.458]   - Field: ‘owner’
[16:20:59.458]   - Field: ‘envir’
[16:20:59.458]   - Field: ‘workers’
[16:20:59.458]   - Field: ‘packages’
[16:20:59.458]   - Field: ‘gc’
[16:20:59.458]   - Field: ‘job’
[16:20:59.458]   - Field: ‘conditions’
[16:20:59.459]   - Field: ‘expr’
[16:20:59.459]   - Field: ‘uuid’
[16:20:59.459]   - Field: ‘seed’
[16:20:59.459]   - Field: ‘version’
[16:20:59.459]   - Field: ‘result’
[16:20:59.459]   - Field: ‘asynchronous’
[16:20:59.459]   - Field: ‘calls’
[16:20:59.459]   - Field: ‘globals’
[16:20:59.460]   - Field: ‘stdout’
[16:20:59.460]   - Field: ‘earlySignal’
[16:20:59.460]   - Field: ‘lazy’
[16:20:59.460]   - Field: ‘state’
[16:20:59.460] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.460] - Launch lazy future ...
[16:20:59.460] Packages needed by the future expression (n = 0): <none>
[16:20:59.461] Packages needed by future strategies (n = 0): <none>
[16:20:59.461] {
[16:20:59.461]     {
[16:20:59.461]         {
[16:20:59.461]             ...future.startTime <- base::Sys.time()
[16:20:59.461]             {
[16:20:59.461]                 {
[16:20:59.461]                   {
[16:20:59.461]                     {
[16:20:59.461]                       base::local({
[16:20:59.461]                         has_future <- base::requireNamespace("future", 
[16:20:59.461]                           quietly = TRUE)
[16:20:59.461]                         if (has_future) {
[16:20:59.461]                           ns <- base::getNamespace("future")
[16:20:59.461]                           version <- ns[[".package"]][["version"]]
[16:20:59.461]                           if (is.null(version)) 
[16:20:59.461]                             version <- utils::packageVersion("future")
[16:20:59.461]                         }
[16:20:59.461]                         else {
[16:20:59.461]                           version <- NULL
[16:20:59.461]                         }
[16:20:59.461]                         if (!has_future || version < "1.8.0") {
[16:20:59.461]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.461]                             "", base::R.version$version.string), 
[16:20:59.461]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.461]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.461]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.461]                               "release", "version")], collapse = " "), 
[16:20:59.461]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.461]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.461]                             info)
[16:20:59.461]                           info <- base::paste(info, collapse = "; ")
[16:20:59.461]                           if (!has_future) {
[16:20:59.461]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.461]                               info)
[16:20:59.461]                           }
[16:20:59.461]                           else {
[16:20:59.461]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.461]                               info, version)
[16:20:59.461]                           }
[16:20:59.461]                           base::stop(msg)
[16:20:59.461]                         }
[16:20:59.461]                       })
[16:20:59.461]                     }
[16:20:59.461]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.461]                     base::options(mc.cores = 1L)
[16:20:59.461]                   }
[16:20:59.461]                   ...future.strategy.old <- future::plan("list")
[16:20:59.461]                   options(future.plan = NULL)
[16:20:59.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.461]                 }
[16:20:59.461]                 ...future.workdir <- getwd()
[16:20:59.461]             }
[16:20:59.461]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.461]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.461]         }
[16:20:59.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.461]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.461]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.461]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.461]             base::names(...future.oldOptions))
[16:20:59.461]     }
[16:20:59.461]     if (FALSE) {
[16:20:59.461]     }
[16:20:59.461]     else {
[16:20:59.461]         if (TRUE) {
[16:20:59.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.461]                 open = "w")
[16:20:59.461]         }
[16:20:59.461]         else {
[16:20:59.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.461]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.461]         }
[16:20:59.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.461]             base::sink(type = "output", split = FALSE)
[16:20:59.461]             base::close(...future.stdout)
[16:20:59.461]         }, add = TRUE)
[16:20:59.461]     }
[16:20:59.461]     ...future.frame <- base::sys.nframe()
[16:20:59.461]     ...future.conditions <- base::list()
[16:20:59.461]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.461]     if (FALSE) {
[16:20:59.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.461]     }
[16:20:59.461]     ...future.result <- base::tryCatch({
[16:20:59.461]         base::withCallingHandlers({
[16:20:59.461]             ...future.value <- base::withVisible(base::local({
[16:20:59.461]                 withCallingHandlers({
[16:20:59.461]                   {
[16:20:59.461]                     x["a"] <- list(1)
[16:20:59.461]                     x
[16:20:59.461]                   }
[16:20:59.461]                 }, immediateCondition = function(cond) {
[16:20:59.461]                   save_rds <- function (object, pathname, ...) 
[16:20:59.461]                   {
[16:20:59.461]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.461]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.461]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.461]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.461]                         fi_tmp[["mtime"]])
[16:20:59.461]                     }
[16:20:59.461]                     tryCatch({
[16:20:59.461]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.461]                     }, error = function(ex) {
[16:20:59.461]                       msg <- conditionMessage(ex)
[16:20:59.461]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.461]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.461]                         fi_tmp[["mtime"]], msg)
[16:20:59.461]                       ex$message <- msg
[16:20:59.461]                       stop(ex)
[16:20:59.461]                     })
[16:20:59.461]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.461]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.461]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.461]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.461]                       fi <- file.info(pathname)
[16:20:59.461]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.461]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.461]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.461]                         fi[["size"]], fi[["mtime"]])
[16:20:59.461]                       stop(msg)
[16:20:59.461]                     }
[16:20:59.461]                     invisible(pathname)
[16:20:59.461]                   }
[16:20:59.461]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.461]                     rootPath = tempdir()) 
[16:20:59.461]                   {
[16:20:59.461]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.461]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.461]                       tmpdir = path, fileext = ".rds")
[16:20:59.461]                     save_rds(obj, file)
[16:20:59.461]                   }
[16:20:59.461]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.461]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.461]                   {
[16:20:59.461]                     inherits <- base::inherits
[16:20:59.461]                     invokeRestart <- base::invokeRestart
[16:20:59.461]                     is.null <- base::is.null
[16:20:59.461]                     muffled <- FALSE
[16:20:59.461]                     if (inherits(cond, "message")) {
[16:20:59.461]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.461]                       if (muffled) 
[16:20:59.461]                         invokeRestart("muffleMessage")
[16:20:59.461]                     }
[16:20:59.461]                     else if (inherits(cond, "warning")) {
[16:20:59.461]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.461]                       if (muffled) 
[16:20:59.461]                         invokeRestart("muffleWarning")
[16:20:59.461]                     }
[16:20:59.461]                     else if (inherits(cond, "condition")) {
[16:20:59.461]                       if (!is.null(pattern)) {
[16:20:59.461]                         computeRestarts <- base::computeRestarts
[16:20:59.461]                         grepl <- base::grepl
[16:20:59.461]                         restarts <- computeRestarts(cond)
[16:20:59.461]                         for (restart in restarts) {
[16:20:59.461]                           name <- restart$name
[16:20:59.461]                           if (is.null(name)) 
[16:20:59.461]                             next
[16:20:59.461]                           if (!grepl(pattern, name)) 
[16:20:59.461]                             next
[16:20:59.461]                           invokeRestart(restart)
[16:20:59.461]                           muffled <- TRUE
[16:20:59.461]                           break
[16:20:59.461]                         }
[16:20:59.461]                       }
[16:20:59.461]                     }
[16:20:59.461]                     invisible(muffled)
[16:20:59.461]                   }
[16:20:59.461]                   muffleCondition(cond)
[16:20:59.461]                 })
[16:20:59.461]             }))
[16:20:59.461]             future::FutureResult(value = ...future.value$value, 
[16:20:59.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.461]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.461]                     ...future.globalenv.names))
[16:20:59.461]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.461]         }, condition = base::local({
[16:20:59.461]             c <- base::c
[16:20:59.461]             inherits <- base::inherits
[16:20:59.461]             invokeRestart <- base::invokeRestart
[16:20:59.461]             length <- base::length
[16:20:59.461]             list <- base::list
[16:20:59.461]             seq.int <- base::seq.int
[16:20:59.461]             signalCondition <- base::signalCondition
[16:20:59.461]             sys.calls <- base::sys.calls
[16:20:59.461]             `[[` <- base::`[[`
[16:20:59.461]             `+` <- base::`+`
[16:20:59.461]             `<<-` <- base::`<<-`
[16:20:59.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.461]                   3L)]
[16:20:59.461]             }
[16:20:59.461]             function(cond) {
[16:20:59.461]                 is_error <- inherits(cond, "error")
[16:20:59.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.461]                   NULL)
[16:20:59.461]                 if (is_error) {
[16:20:59.461]                   sessionInformation <- function() {
[16:20:59.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.461]                       search = base::search(), system = base::Sys.info())
[16:20:59.461]                   }
[16:20:59.461]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.461]                     cond$call), session = sessionInformation(), 
[16:20:59.461]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.461]                   signalCondition(cond)
[16:20:59.461]                 }
[16:20:59.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.461]                 "immediateCondition"))) {
[16:20:59.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.461]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.461]                   if (TRUE && !signal) {
[16:20:59.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.461]                     {
[16:20:59.461]                       inherits <- base::inherits
[16:20:59.461]                       invokeRestart <- base::invokeRestart
[16:20:59.461]                       is.null <- base::is.null
[16:20:59.461]                       muffled <- FALSE
[16:20:59.461]                       if (inherits(cond, "message")) {
[16:20:59.461]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.461]                         if (muffled) 
[16:20:59.461]                           invokeRestart("muffleMessage")
[16:20:59.461]                       }
[16:20:59.461]                       else if (inherits(cond, "warning")) {
[16:20:59.461]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.461]                         if (muffled) 
[16:20:59.461]                           invokeRestart("muffleWarning")
[16:20:59.461]                       }
[16:20:59.461]                       else if (inherits(cond, "condition")) {
[16:20:59.461]                         if (!is.null(pattern)) {
[16:20:59.461]                           computeRestarts <- base::computeRestarts
[16:20:59.461]                           grepl <- base::grepl
[16:20:59.461]                           restarts <- computeRestarts(cond)
[16:20:59.461]                           for (restart in restarts) {
[16:20:59.461]                             name <- restart$name
[16:20:59.461]                             if (is.null(name)) 
[16:20:59.461]                               next
[16:20:59.461]                             if (!grepl(pattern, name)) 
[16:20:59.461]                               next
[16:20:59.461]                             invokeRestart(restart)
[16:20:59.461]                             muffled <- TRUE
[16:20:59.461]                             break
[16:20:59.461]                           }
[16:20:59.461]                         }
[16:20:59.461]                       }
[16:20:59.461]                       invisible(muffled)
[16:20:59.461]                     }
[16:20:59.461]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.461]                   }
[16:20:59.461]                 }
[16:20:59.461]                 else {
[16:20:59.461]                   if (TRUE) {
[16:20:59.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.461]                     {
[16:20:59.461]                       inherits <- base::inherits
[16:20:59.461]                       invokeRestart <- base::invokeRestart
[16:20:59.461]                       is.null <- base::is.null
[16:20:59.461]                       muffled <- FALSE
[16:20:59.461]                       if (inherits(cond, "message")) {
[16:20:59.461]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.461]                         if (muffled) 
[16:20:59.461]                           invokeRestart("muffleMessage")
[16:20:59.461]                       }
[16:20:59.461]                       else if (inherits(cond, "warning")) {
[16:20:59.461]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.461]                         if (muffled) 
[16:20:59.461]                           invokeRestart("muffleWarning")
[16:20:59.461]                       }
[16:20:59.461]                       else if (inherits(cond, "condition")) {
[16:20:59.461]                         if (!is.null(pattern)) {
[16:20:59.461]                           computeRestarts <- base::computeRestarts
[16:20:59.461]                           grepl <- base::grepl
[16:20:59.461]                           restarts <- computeRestarts(cond)
[16:20:59.461]                           for (restart in restarts) {
[16:20:59.461]                             name <- restart$name
[16:20:59.461]                             if (is.null(name)) 
[16:20:59.461]                               next
[16:20:59.461]                             if (!grepl(pattern, name)) 
[16:20:59.461]                               next
[16:20:59.461]                             invokeRestart(restart)
[16:20:59.461]                             muffled <- TRUE
[16:20:59.461]                             break
[16:20:59.461]                           }
[16:20:59.461]                         }
[16:20:59.461]                       }
[16:20:59.461]                       invisible(muffled)
[16:20:59.461]                     }
[16:20:59.461]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.461]                   }
[16:20:59.461]                 }
[16:20:59.461]             }
[16:20:59.461]         }))
[16:20:59.461]     }, error = function(ex) {
[16:20:59.461]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.461]                 ...future.rng), started = ...future.startTime, 
[16:20:59.461]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.461]             version = "1.8"), class = "FutureResult")
[16:20:59.461]     }, finally = {
[16:20:59.461]         if (!identical(...future.workdir, getwd())) 
[16:20:59.461]             setwd(...future.workdir)
[16:20:59.461]         {
[16:20:59.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.461]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.461]             }
[16:20:59.461]             base::options(...future.oldOptions)
[16:20:59.461]             if (.Platform$OS.type == "windows") {
[16:20:59.461]                 old_names <- names(...future.oldEnvVars)
[16:20:59.461]                 envs <- base::Sys.getenv()
[16:20:59.461]                 names <- names(envs)
[16:20:59.461]                 common <- intersect(names, old_names)
[16:20:59.461]                 added <- setdiff(names, old_names)
[16:20:59.461]                 removed <- setdiff(old_names, names)
[16:20:59.461]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.461]                   envs[common]]
[16:20:59.461]                 NAMES <- toupper(changed)
[16:20:59.461]                 args <- list()
[16:20:59.461]                 for (kk in seq_along(NAMES)) {
[16:20:59.461]                   name <- changed[[kk]]
[16:20:59.461]                   NAME <- NAMES[[kk]]
[16:20:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.461]                     next
[16:20:59.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.461]                 }
[16:20:59.461]                 NAMES <- toupper(added)
[16:20:59.461]                 for (kk in seq_along(NAMES)) {
[16:20:59.461]                   name <- added[[kk]]
[16:20:59.461]                   NAME <- NAMES[[kk]]
[16:20:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.461]                     next
[16:20:59.461]                   args[[name]] <- ""
[16:20:59.461]                 }
[16:20:59.461]                 NAMES <- toupper(removed)
[16:20:59.461]                 for (kk in seq_along(NAMES)) {
[16:20:59.461]                   name <- removed[[kk]]
[16:20:59.461]                   NAME <- NAMES[[kk]]
[16:20:59.461]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.461]                     next
[16:20:59.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.461]                 }
[16:20:59.461]                 if (length(args) > 0) 
[16:20:59.461]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.461]             }
[16:20:59.461]             else {
[16:20:59.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.461]             }
[16:20:59.461]             {
[16:20:59.461]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.461]                   0L) {
[16:20:59.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.461]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.461]                   base::options(opts)
[16:20:59.461]                 }
[16:20:59.461]                 {
[16:20:59.461]                   {
[16:20:59.461]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.461]                     NULL
[16:20:59.461]                   }
[16:20:59.461]                   options(future.plan = NULL)
[16:20:59.461]                   if (is.na(NA_character_)) 
[16:20:59.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.461]                     .init = FALSE)
[16:20:59.461]                 }
[16:20:59.461]             }
[16:20:59.461]         }
[16:20:59.461]     })
[16:20:59.461]     if (TRUE) {
[16:20:59.461]         base::sink(type = "output", split = FALSE)
[16:20:59.461]         if (TRUE) {
[16:20:59.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.461]         }
[16:20:59.461]         else {
[16:20:59.461]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.461]         }
[16:20:59.461]         base::close(...future.stdout)
[16:20:59.461]         ...future.stdout <- NULL
[16:20:59.461]     }
[16:20:59.461]     ...future.result$conditions <- ...future.conditions
[16:20:59.461]     ...future.result$finished <- base::Sys.time()
[16:20:59.461]     ...future.result
[16:20:59.461] }
[16:20:59.464] assign_globals() ...
[16:20:59.464] List of 1
[16:20:59.464]  $ x: list()
[16:20:59.464]  - attr(*, "where")=List of 1
[16:20:59.464]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.464]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.464]  - attr(*, "resolved")= logi TRUE
[16:20:59.464]  - attr(*, "total_size")= num 0
[16:20:59.464]  - attr(*, "already-done")= logi TRUE
[16:20:59.467] - copied ‘x’ to environment
[16:20:59.467] assign_globals() ... done
[16:20:59.467] requestCore(): workers = 2
[16:20:59.469] MulticoreFuture started
[16:20:59.469] - Launch lazy future ... done
[16:20:59.469] run() for ‘MulticoreFuture’ ... done
[16:20:59.469] result() for MulticoreFuture ...
[16:20:59.470] plan(): Setting new future strategy stack:
[16:20:59.470] List of future strategies:
[16:20:59.470] 1. sequential:
[16:20:59.470]    - args: function (..., envir = parent.frame())
[16:20:59.470]    - tweaked: FALSE
[16:20:59.470]    - call: NULL
[16:20:59.471] plan(): nbrOfWorkers() = 1
[16:20:59.473] plan(): Setting new future strategy stack:
[16:20:59.473] List of future strategies:
[16:20:59.473] 1. multicore:
[16:20:59.473]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.473]    - tweaked: FALSE
[16:20:59.473]    - call: plan(strategy)
[16:20:59.478] plan(): nbrOfWorkers() = 2
[16:20:59.479] result() for MulticoreFuture ...
[16:20:59.479] result() for MulticoreFuture ... done
[16:20:59.479] result() for MulticoreFuture ... done
[16:20:59.479] result() for MulticoreFuture ...
[16:20:59.479] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.480] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.480] Searching for globals...
[16:20:59.483] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.483] Searching for globals ... DONE
[16:20:59.485] Resolving globals: TRUE
[16:20:59.486] Resolving any globals that are futures ...
[16:20:59.486] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.486] Resolving any globals that are futures ... DONE
[16:20:59.486] Resolving futures part of globals (recursively) ...
[16:20:59.487] resolve() on list ...
[16:20:59.487]  recursive: 99
[16:20:59.487]  length: 1
[16:20:59.487]  elements: ‘x’
[16:20:59.487]  length: 0 (resolved future 1)
[16:20:59.488] resolve() on list ... DONE
[16:20:59.488] - globals: [1] ‘x’
[16:20:59.488] Resolving futures part of globals (recursively) ... DONE
[16:20:59.488] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.488] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.489] - globals: [1] ‘x’
[16:20:59.489] 
[16:20:59.489] getGlobalsAndPackages() ... DONE
[16:20:59.489] run() for ‘Future’ ...
[16:20:59.489] - state: ‘created’
[16:20:59.489] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.493] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.494] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.494]   - Field: ‘label’
[16:20:59.494]   - Field: ‘local’
[16:20:59.494]   - Field: ‘owner’
[16:20:59.494]   - Field: ‘envir’
[16:20:59.494]   - Field: ‘workers’
[16:20:59.494]   - Field: ‘packages’
[16:20:59.494]   - Field: ‘gc’
[16:20:59.495]   - Field: ‘job’
[16:20:59.495]   - Field: ‘conditions’
[16:20:59.495]   - Field: ‘expr’
[16:20:59.495]   - Field: ‘uuid’
[16:20:59.495]   - Field: ‘seed’
[16:20:59.495]   - Field: ‘version’
[16:20:59.495]   - Field: ‘result’
[16:20:59.495]   - Field: ‘asynchronous’
[16:20:59.496]   - Field: ‘calls’
[16:20:59.496]   - Field: ‘globals’
[16:20:59.496]   - Field: ‘stdout’
[16:20:59.496]   - Field: ‘earlySignal’
[16:20:59.496]   - Field: ‘lazy’
[16:20:59.496]   - Field: ‘state’
[16:20:59.496] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.496] - Launch lazy future ...
[16:20:59.497] Packages needed by the future expression (n = 0): <none>
[16:20:59.497] Packages needed by future strategies (n = 0): <none>
[16:20:59.497] {
[16:20:59.497]     {
[16:20:59.497]         {
[16:20:59.497]             ...future.startTime <- base::Sys.time()
[16:20:59.497]             {
[16:20:59.497]                 {
[16:20:59.497]                   {
[16:20:59.497]                     {
[16:20:59.497]                       base::local({
[16:20:59.497]                         has_future <- base::requireNamespace("future", 
[16:20:59.497]                           quietly = TRUE)
[16:20:59.497]                         if (has_future) {
[16:20:59.497]                           ns <- base::getNamespace("future")
[16:20:59.497]                           version <- ns[[".package"]][["version"]]
[16:20:59.497]                           if (is.null(version)) 
[16:20:59.497]                             version <- utils::packageVersion("future")
[16:20:59.497]                         }
[16:20:59.497]                         else {
[16:20:59.497]                           version <- NULL
[16:20:59.497]                         }
[16:20:59.497]                         if (!has_future || version < "1.8.0") {
[16:20:59.497]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.497]                             "", base::R.version$version.string), 
[16:20:59.497]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.497]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.497]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.497]                               "release", "version")], collapse = " "), 
[16:20:59.497]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.497]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.497]                             info)
[16:20:59.497]                           info <- base::paste(info, collapse = "; ")
[16:20:59.497]                           if (!has_future) {
[16:20:59.497]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.497]                               info)
[16:20:59.497]                           }
[16:20:59.497]                           else {
[16:20:59.497]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.497]                               info, version)
[16:20:59.497]                           }
[16:20:59.497]                           base::stop(msg)
[16:20:59.497]                         }
[16:20:59.497]                       })
[16:20:59.497]                     }
[16:20:59.497]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.497]                     base::options(mc.cores = 1L)
[16:20:59.497]                   }
[16:20:59.497]                   ...future.strategy.old <- future::plan("list")
[16:20:59.497]                   options(future.plan = NULL)
[16:20:59.497]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.497]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.497]                 }
[16:20:59.497]                 ...future.workdir <- getwd()
[16:20:59.497]             }
[16:20:59.497]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.497]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.497]         }
[16:20:59.497]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.497]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.497]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.497]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.497]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.497]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.497]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.497]             base::names(...future.oldOptions))
[16:20:59.497]     }
[16:20:59.497]     if (FALSE) {
[16:20:59.497]     }
[16:20:59.497]     else {
[16:20:59.497]         if (TRUE) {
[16:20:59.497]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.497]                 open = "w")
[16:20:59.497]         }
[16:20:59.497]         else {
[16:20:59.497]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.497]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.497]         }
[16:20:59.497]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.497]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.497]             base::sink(type = "output", split = FALSE)
[16:20:59.497]             base::close(...future.stdout)
[16:20:59.497]         }, add = TRUE)
[16:20:59.497]     }
[16:20:59.497]     ...future.frame <- base::sys.nframe()
[16:20:59.497]     ...future.conditions <- base::list()
[16:20:59.497]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.497]     if (FALSE) {
[16:20:59.497]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.497]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.497]     }
[16:20:59.497]     ...future.result <- base::tryCatch({
[16:20:59.497]         base::withCallingHandlers({
[16:20:59.497]             ...future.value <- base::withVisible(base::local({
[16:20:59.497]                 withCallingHandlers({
[16:20:59.497]                   {
[16:20:59.497]                     x["a"] <- list(1)
[16:20:59.497]                     x
[16:20:59.497]                   }
[16:20:59.497]                 }, immediateCondition = function(cond) {
[16:20:59.497]                   save_rds <- function (object, pathname, ...) 
[16:20:59.497]                   {
[16:20:59.497]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.497]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.497]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.497]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.497]                         fi_tmp[["mtime"]])
[16:20:59.497]                     }
[16:20:59.497]                     tryCatch({
[16:20:59.497]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.497]                     }, error = function(ex) {
[16:20:59.497]                       msg <- conditionMessage(ex)
[16:20:59.497]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.497]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.497]                         fi_tmp[["mtime"]], msg)
[16:20:59.497]                       ex$message <- msg
[16:20:59.497]                       stop(ex)
[16:20:59.497]                     })
[16:20:59.497]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.497]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.497]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.497]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.497]                       fi <- file.info(pathname)
[16:20:59.497]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.497]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.497]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.497]                         fi[["size"]], fi[["mtime"]])
[16:20:59.497]                       stop(msg)
[16:20:59.497]                     }
[16:20:59.497]                     invisible(pathname)
[16:20:59.497]                   }
[16:20:59.497]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.497]                     rootPath = tempdir()) 
[16:20:59.497]                   {
[16:20:59.497]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.497]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.497]                       tmpdir = path, fileext = ".rds")
[16:20:59.497]                     save_rds(obj, file)
[16:20:59.497]                   }
[16:20:59.497]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.497]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.497]                   {
[16:20:59.497]                     inherits <- base::inherits
[16:20:59.497]                     invokeRestart <- base::invokeRestart
[16:20:59.497]                     is.null <- base::is.null
[16:20:59.497]                     muffled <- FALSE
[16:20:59.497]                     if (inherits(cond, "message")) {
[16:20:59.497]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.497]                       if (muffled) 
[16:20:59.497]                         invokeRestart("muffleMessage")
[16:20:59.497]                     }
[16:20:59.497]                     else if (inherits(cond, "warning")) {
[16:20:59.497]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.497]                       if (muffled) 
[16:20:59.497]                         invokeRestart("muffleWarning")
[16:20:59.497]                     }
[16:20:59.497]                     else if (inherits(cond, "condition")) {
[16:20:59.497]                       if (!is.null(pattern)) {
[16:20:59.497]                         computeRestarts <- base::computeRestarts
[16:20:59.497]                         grepl <- base::grepl
[16:20:59.497]                         restarts <- computeRestarts(cond)
[16:20:59.497]                         for (restart in restarts) {
[16:20:59.497]                           name <- restart$name
[16:20:59.497]                           if (is.null(name)) 
[16:20:59.497]                             next
[16:20:59.497]                           if (!grepl(pattern, name)) 
[16:20:59.497]                             next
[16:20:59.497]                           invokeRestart(restart)
[16:20:59.497]                           muffled <- TRUE
[16:20:59.497]                           break
[16:20:59.497]                         }
[16:20:59.497]                       }
[16:20:59.497]                     }
[16:20:59.497]                     invisible(muffled)
[16:20:59.497]                   }
[16:20:59.497]                   muffleCondition(cond)
[16:20:59.497]                 })
[16:20:59.497]             }))
[16:20:59.497]             future::FutureResult(value = ...future.value$value, 
[16:20:59.497]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.497]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.497]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.497]                     ...future.globalenv.names))
[16:20:59.497]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.497]         }, condition = base::local({
[16:20:59.497]             c <- base::c
[16:20:59.497]             inherits <- base::inherits
[16:20:59.497]             invokeRestart <- base::invokeRestart
[16:20:59.497]             length <- base::length
[16:20:59.497]             list <- base::list
[16:20:59.497]             seq.int <- base::seq.int
[16:20:59.497]             signalCondition <- base::signalCondition
[16:20:59.497]             sys.calls <- base::sys.calls
[16:20:59.497]             `[[` <- base::`[[`
[16:20:59.497]             `+` <- base::`+`
[16:20:59.497]             `<<-` <- base::`<<-`
[16:20:59.497]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.497]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.497]                   3L)]
[16:20:59.497]             }
[16:20:59.497]             function(cond) {
[16:20:59.497]                 is_error <- inherits(cond, "error")
[16:20:59.497]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.497]                   NULL)
[16:20:59.497]                 if (is_error) {
[16:20:59.497]                   sessionInformation <- function() {
[16:20:59.497]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.497]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.497]                       search = base::search(), system = base::Sys.info())
[16:20:59.497]                   }
[16:20:59.497]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.497]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.497]                     cond$call), session = sessionInformation(), 
[16:20:59.497]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.497]                   signalCondition(cond)
[16:20:59.497]                 }
[16:20:59.497]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.497]                 "immediateCondition"))) {
[16:20:59.497]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.497]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.497]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.497]                   if (TRUE && !signal) {
[16:20:59.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.497]                     {
[16:20:59.497]                       inherits <- base::inherits
[16:20:59.497]                       invokeRestart <- base::invokeRestart
[16:20:59.497]                       is.null <- base::is.null
[16:20:59.497]                       muffled <- FALSE
[16:20:59.497]                       if (inherits(cond, "message")) {
[16:20:59.497]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.497]                         if (muffled) 
[16:20:59.497]                           invokeRestart("muffleMessage")
[16:20:59.497]                       }
[16:20:59.497]                       else if (inherits(cond, "warning")) {
[16:20:59.497]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.497]                         if (muffled) 
[16:20:59.497]                           invokeRestart("muffleWarning")
[16:20:59.497]                       }
[16:20:59.497]                       else if (inherits(cond, "condition")) {
[16:20:59.497]                         if (!is.null(pattern)) {
[16:20:59.497]                           computeRestarts <- base::computeRestarts
[16:20:59.497]                           grepl <- base::grepl
[16:20:59.497]                           restarts <- computeRestarts(cond)
[16:20:59.497]                           for (restart in restarts) {
[16:20:59.497]                             name <- restart$name
[16:20:59.497]                             if (is.null(name)) 
[16:20:59.497]                               next
[16:20:59.497]                             if (!grepl(pattern, name)) 
[16:20:59.497]                               next
[16:20:59.497]                             invokeRestart(restart)
[16:20:59.497]                             muffled <- TRUE
[16:20:59.497]                             break
[16:20:59.497]                           }
[16:20:59.497]                         }
[16:20:59.497]                       }
[16:20:59.497]                       invisible(muffled)
[16:20:59.497]                     }
[16:20:59.497]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.497]                   }
[16:20:59.497]                 }
[16:20:59.497]                 else {
[16:20:59.497]                   if (TRUE) {
[16:20:59.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.497]                     {
[16:20:59.497]                       inherits <- base::inherits
[16:20:59.497]                       invokeRestart <- base::invokeRestart
[16:20:59.497]                       is.null <- base::is.null
[16:20:59.497]                       muffled <- FALSE
[16:20:59.497]                       if (inherits(cond, "message")) {
[16:20:59.497]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.497]                         if (muffled) 
[16:20:59.497]                           invokeRestart("muffleMessage")
[16:20:59.497]                       }
[16:20:59.497]                       else if (inherits(cond, "warning")) {
[16:20:59.497]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.497]                         if (muffled) 
[16:20:59.497]                           invokeRestart("muffleWarning")
[16:20:59.497]                       }
[16:20:59.497]                       else if (inherits(cond, "condition")) {
[16:20:59.497]                         if (!is.null(pattern)) {
[16:20:59.497]                           computeRestarts <- base::computeRestarts
[16:20:59.497]                           grepl <- base::grepl
[16:20:59.497]                           restarts <- computeRestarts(cond)
[16:20:59.497]                           for (restart in restarts) {
[16:20:59.497]                             name <- restart$name
[16:20:59.497]                             if (is.null(name)) 
[16:20:59.497]                               next
[16:20:59.497]                             if (!grepl(pattern, name)) 
[16:20:59.497]                               next
[16:20:59.497]                             invokeRestart(restart)
[16:20:59.497]                             muffled <- TRUE
[16:20:59.497]                             break
[16:20:59.497]                           }
[16:20:59.497]                         }
[16:20:59.497]                       }
[16:20:59.497]                       invisible(muffled)
[16:20:59.497]                     }
[16:20:59.497]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.497]                   }
[16:20:59.497]                 }
[16:20:59.497]             }
[16:20:59.497]         }))
[16:20:59.497]     }, error = function(ex) {
[16:20:59.497]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.497]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.497]                 ...future.rng), started = ...future.startTime, 
[16:20:59.497]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.497]             version = "1.8"), class = "FutureResult")
[16:20:59.497]     }, finally = {
[16:20:59.497]         if (!identical(...future.workdir, getwd())) 
[16:20:59.497]             setwd(...future.workdir)
[16:20:59.497]         {
[16:20:59.497]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.497]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.497]             }
[16:20:59.497]             base::options(...future.oldOptions)
[16:20:59.497]             if (.Platform$OS.type == "windows") {
[16:20:59.497]                 old_names <- names(...future.oldEnvVars)
[16:20:59.497]                 envs <- base::Sys.getenv()
[16:20:59.497]                 names <- names(envs)
[16:20:59.497]                 common <- intersect(names, old_names)
[16:20:59.497]                 added <- setdiff(names, old_names)
[16:20:59.497]                 removed <- setdiff(old_names, names)
[16:20:59.497]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.497]                   envs[common]]
[16:20:59.497]                 NAMES <- toupper(changed)
[16:20:59.497]                 args <- list()
[16:20:59.497]                 for (kk in seq_along(NAMES)) {
[16:20:59.497]                   name <- changed[[kk]]
[16:20:59.497]                   NAME <- NAMES[[kk]]
[16:20:59.497]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.497]                     next
[16:20:59.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.497]                 }
[16:20:59.497]                 NAMES <- toupper(added)
[16:20:59.497]                 for (kk in seq_along(NAMES)) {
[16:20:59.497]                   name <- added[[kk]]
[16:20:59.497]                   NAME <- NAMES[[kk]]
[16:20:59.497]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.497]                     next
[16:20:59.497]                   args[[name]] <- ""
[16:20:59.497]                 }
[16:20:59.497]                 NAMES <- toupper(removed)
[16:20:59.497]                 for (kk in seq_along(NAMES)) {
[16:20:59.497]                   name <- removed[[kk]]
[16:20:59.497]                   NAME <- NAMES[[kk]]
[16:20:59.497]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.497]                     next
[16:20:59.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.497]                 }
[16:20:59.497]                 if (length(args) > 0) 
[16:20:59.497]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.497]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.497]             }
[16:20:59.497]             else {
[16:20:59.497]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.497]             }
[16:20:59.497]             {
[16:20:59.497]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.497]                   0L) {
[16:20:59.497]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.497]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.497]                   base::options(opts)
[16:20:59.497]                 }
[16:20:59.497]                 {
[16:20:59.497]                   {
[16:20:59.497]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.497]                     NULL
[16:20:59.497]                   }
[16:20:59.497]                   options(future.plan = NULL)
[16:20:59.497]                   if (is.na(NA_character_)) 
[16:20:59.497]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.497]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.497]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.497]                     .init = FALSE)
[16:20:59.497]                 }
[16:20:59.497]             }
[16:20:59.497]         }
[16:20:59.497]     })
[16:20:59.497]     if (TRUE) {
[16:20:59.497]         base::sink(type = "output", split = FALSE)
[16:20:59.497]         if (TRUE) {
[16:20:59.497]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.497]         }
[16:20:59.497]         else {
[16:20:59.497]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.497]         }
[16:20:59.497]         base::close(...future.stdout)
[16:20:59.497]         ...future.stdout <- NULL
[16:20:59.497]     }
[16:20:59.497]     ...future.result$conditions <- ...future.conditions
[16:20:59.497]     ...future.result$finished <- base::Sys.time()
[16:20:59.497]     ...future.result
[16:20:59.497] }
[16:20:59.500] assign_globals() ...
[16:20:59.500] List of 1
[16:20:59.500]  $ x: list()
[16:20:59.500]  - attr(*, "where")=List of 1
[16:20:59.500]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.500]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.500]  - attr(*, "resolved")= logi TRUE
[16:20:59.500]  - attr(*, "total_size")= num 0
[16:20:59.500]  - attr(*, "already-done")= logi TRUE
[16:20:59.503] - copied ‘x’ to environment
[16:20:59.503] assign_globals() ... done
[16:20:59.503] requestCore(): workers = 2
[16:20:59.505] MulticoreFuture started
[16:20:59.505] - Launch lazy future ... done
[16:20:59.505] run() for ‘MulticoreFuture’ ... done
[16:20:59.505] result() for MulticoreFuture ...
[16:20:59.506] plan(): Setting new future strategy stack:
[16:20:59.506] List of future strategies:
[16:20:59.506] 1. sequential:
[16:20:59.506]    - args: function (..., envir = parent.frame())
[16:20:59.506]    - tweaked: FALSE
[16:20:59.506]    - call: NULL
[16:20:59.507] plan(): nbrOfWorkers() = 1
[16:20:59.509] plan(): Setting new future strategy stack:
[16:20:59.509] List of future strategies:
[16:20:59.509] 1. multicore:
[16:20:59.509]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.509]    - tweaked: FALSE
[16:20:59.509]    - call: plan(strategy)
[16:20:59.514] plan(): nbrOfWorkers() = 2
[16:20:59.515] result() for MulticoreFuture ...
[16:20:59.515] result() for MulticoreFuture ... done
[16:20:59.515] result() for MulticoreFuture ... done
[16:20:59.515] result() for MulticoreFuture ...
[16:20:59.515] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.516] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.517] Searching for globals...
[16:20:59.519] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.519] Searching for globals ... DONE
[16:20:59.520] Resolving globals: TRUE
[16:20:59.520] Resolving any globals that are futures ...
[16:20:59.520] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:20:59.520] Resolving any globals that are futures ... DONE
[16:20:59.521] Resolving futures part of globals (recursively) ...
[16:20:59.521] resolve() on list ...
[16:20:59.521]  recursive: 99
[16:20:59.521]  length: 1
[16:20:59.521]  elements: ‘x’
[16:20:59.521]  length: 0 (resolved future 1)
[16:20:59.521] resolve() on list ... DONE
[16:20:59.522] - globals: [1] ‘x’
[16:20:59.522] Resolving futures part of globals (recursively) ... DONE
[16:20:59.522] The total size of the 1 globals is 0 bytes (0 bytes)
[16:20:59.522] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:20:59.522] - globals: [1] ‘x’
[16:20:59.523] 
[16:20:59.523] getGlobalsAndPackages() ... DONE
[16:20:59.523] run() for ‘Future’ ...
[16:20:59.523] - state: ‘created’
[16:20:59.523] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.528] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.528] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.528]   - Field: ‘label’
[16:20:59.528]   - Field: ‘local’
[16:20:59.528]   - Field: ‘owner’
[16:20:59.528]   - Field: ‘envir’
[16:20:59.528]   - Field: ‘workers’
[16:20:59.529]   - Field: ‘packages’
[16:20:59.529]   - Field: ‘gc’
[16:20:59.529]   - Field: ‘job’
[16:20:59.529]   - Field: ‘conditions’
[16:20:59.529]   - Field: ‘expr’
[16:20:59.529]   - Field: ‘uuid’
[16:20:59.529]   - Field: ‘seed’
[16:20:59.529]   - Field: ‘version’
[16:20:59.529]   - Field: ‘result’
[16:20:59.530]   - Field: ‘asynchronous’
[16:20:59.530]   - Field: ‘calls’
[16:20:59.530]   - Field: ‘globals’
[16:20:59.530]   - Field: ‘stdout’
[16:20:59.530]   - Field: ‘earlySignal’
[16:20:59.530]   - Field: ‘lazy’
[16:20:59.530]   - Field: ‘state’
[16:20:59.530] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.530] - Launch lazy future ...
[16:20:59.531] Packages needed by the future expression (n = 0): <none>
[16:20:59.531] Packages needed by future strategies (n = 0): <none>
[16:20:59.534] {
[16:20:59.534]     {
[16:20:59.534]         {
[16:20:59.534]             ...future.startTime <- base::Sys.time()
[16:20:59.534]             {
[16:20:59.534]                 {
[16:20:59.534]                   {
[16:20:59.534]                     {
[16:20:59.534]                       base::local({
[16:20:59.534]                         has_future <- base::requireNamespace("future", 
[16:20:59.534]                           quietly = TRUE)
[16:20:59.534]                         if (has_future) {
[16:20:59.534]                           ns <- base::getNamespace("future")
[16:20:59.534]                           version <- ns[[".package"]][["version"]]
[16:20:59.534]                           if (is.null(version)) 
[16:20:59.534]                             version <- utils::packageVersion("future")
[16:20:59.534]                         }
[16:20:59.534]                         else {
[16:20:59.534]                           version <- NULL
[16:20:59.534]                         }
[16:20:59.534]                         if (!has_future || version < "1.8.0") {
[16:20:59.534]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.534]                             "", base::R.version$version.string), 
[16:20:59.534]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.534]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.534]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.534]                               "release", "version")], collapse = " "), 
[16:20:59.534]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.534]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.534]                             info)
[16:20:59.534]                           info <- base::paste(info, collapse = "; ")
[16:20:59.534]                           if (!has_future) {
[16:20:59.534]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.534]                               info)
[16:20:59.534]                           }
[16:20:59.534]                           else {
[16:20:59.534]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.534]                               info, version)
[16:20:59.534]                           }
[16:20:59.534]                           base::stop(msg)
[16:20:59.534]                         }
[16:20:59.534]                       })
[16:20:59.534]                     }
[16:20:59.534]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.534]                     base::options(mc.cores = 1L)
[16:20:59.534]                   }
[16:20:59.534]                   ...future.strategy.old <- future::plan("list")
[16:20:59.534]                   options(future.plan = NULL)
[16:20:59.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.534]                 }
[16:20:59.534]                 ...future.workdir <- getwd()
[16:20:59.534]             }
[16:20:59.534]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.534]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.534]         }
[16:20:59.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.534]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.534]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.534]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.534]             base::names(...future.oldOptions))
[16:20:59.534]     }
[16:20:59.534]     if (FALSE) {
[16:20:59.534]     }
[16:20:59.534]     else {
[16:20:59.534]         if (TRUE) {
[16:20:59.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.534]                 open = "w")
[16:20:59.534]         }
[16:20:59.534]         else {
[16:20:59.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.534]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.534]         }
[16:20:59.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.534]             base::sink(type = "output", split = FALSE)
[16:20:59.534]             base::close(...future.stdout)
[16:20:59.534]         }, add = TRUE)
[16:20:59.534]     }
[16:20:59.534]     ...future.frame <- base::sys.nframe()
[16:20:59.534]     ...future.conditions <- base::list()
[16:20:59.534]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.534]     if (FALSE) {
[16:20:59.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.534]     }
[16:20:59.534]     ...future.result <- base::tryCatch({
[16:20:59.534]         base::withCallingHandlers({
[16:20:59.534]             ...future.value <- base::withVisible(base::local({
[16:20:59.534]                 withCallingHandlers({
[16:20:59.534]                   {
[16:20:59.534]                     x["a"] <- list(1)
[16:20:59.534]                     x
[16:20:59.534]                   }
[16:20:59.534]                 }, immediateCondition = function(cond) {
[16:20:59.534]                   save_rds <- function (object, pathname, ...) 
[16:20:59.534]                   {
[16:20:59.534]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.534]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.534]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.534]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.534]                         fi_tmp[["mtime"]])
[16:20:59.534]                     }
[16:20:59.534]                     tryCatch({
[16:20:59.534]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.534]                     }, error = function(ex) {
[16:20:59.534]                       msg <- conditionMessage(ex)
[16:20:59.534]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.534]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.534]                         fi_tmp[["mtime"]], msg)
[16:20:59.534]                       ex$message <- msg
[16:20:59.534]                       stop(ex)
[16:20:59.534]                     })
[16:20:59.534]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.534]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.534]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.534]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.534]                       fi <- file.info(pathname)
[16:20:59.534]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.534]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.534]                         fi[["size"]], fi[["mtime"]])
[16:20:59.534]                       stop(msg)
[16:20:59.534]                     }
[16:20:59.534]                     invisible(pathname)
[16:20:59.534]                   }
[16:20:59.534]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.534]                     rootPath = tempdir()) 
[16:20:59.534]                   {
[16:20:59.534]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.534]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.534]                       tmpdir = path, fileext = ".rds")
[16:20:59.534]                     save_rds(obj, file)
[16:20:59.534]                   }
[16:20:59.534]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.534]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.534]                   {
[16:20:59.534]                     inherits <- base::inherits
[16:20:59.534]                     invokeRestart <- base::invokeRestart
[16:20:59.534]                     is.null <- base::is.null
[16:20:59.534]                     muffled <- FALSE
[16:20:59.534]                     if (inherits(cond, "message")) {
[16:20:59.534]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.534]                       if (muffled) 
[16:20:59.534]                         invokeRestart("muffleMessage")
[16:20:59.534]                     }
[16:20:59.534]                     else if (inherits(cond, "warning")) {
[16:20:59.534]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.534]                       if (muffled) 
[16:20:59.534]                         invokeRestart("muffleWarning")
[16:20:59.534]                     }
[16:20:59.534]                     else if (inherits(cond, "condition")) {
[16:20:59.534]                       if (!is.null(pattern)) {
[16:20:59.534]                         computeRestarts <- base::computeRestarts
[16:20:59.534]                         grepl <- base::grepl
[16:20:59.534]                         restarts <- computeRestarts(cond)
[16:20:59.534]                         for (restart in restarts) {
[16:20:59.534]                           name <- restart$name
[16:20:59.534]                           if (is.null(name)) 
[16:20:59.534]                             next
[16:20:59.534]                           if (!grepl(pattern, name)) 
[16:20:59.534]                             next
[16:20:59.534]                           invokeRestart(restart)
[16:20:59.534]                           muffled <- TRUE
[16:20:59.534]                           break
[16:20:59.534]                         }
[16:20:59.534]                       }
[16:20:59.534]                     }
[16:20:59.534]                     invisible(muffled)
[16:20:59.534]                   }
[16:20:59.534]                   muffleCondition(cond)
[16:20:59.534]                 })
[16:20:59.534]             }))
[16:20:59.534]             future::FutureResult(value = ...future.value$value, 
[16:20:59.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.534]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.534]                     ...future.globalenv.names))
[16:20:59.534]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.534]         }, condition = base::local({
[16:20:59.534]             c <- base::c
[16:20:59.534]             inherits <- base::inherits
[16:20:59.534]             invokeRestart <- base::invokeRestart
[16:20:59.534]             length <- base::length
[16:20:59.534]             list <- base::list
[16:20:59.534]             seq.int <- base::seq.int
[16:20:59.534]             signalCondition <- base::signalCondition
[16:20:59.534]             sys.calls <- base::sys.calls
[16:20:59.534]             `[[` <- base::`[[`
[16:20:59.534]             `+` <- base::`+`
[16:20:59.534]             `<<-` <- base::`<<-`
[16:20:59.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.534]                   3L)]
[16:20:59.534]             }
[16:20:59.534]             function(cond) {
[16:20:59.534]                 is_error <- inherits(cond, "error")
[16:20:59.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.534]                   NULL)
[16:20:59.534]                 if (is_error) {
[16:20:59.534]                   sessionInformation <- function() {
[16:20:59.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.534]                       search = base::search(), system = base::Sys.info())
[16:20:59.534]                   }
[16:20:59.534]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.534]                     cond$call), session = sessionInformation(), 
[16:20:59.534]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.534]                   signalCondition(cond)
[16:20:59.534]                 }
[16:20:59.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.534]                 "immediateCondition"))) {
[16:20:59.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.534]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.534]                   if (TRUE && !signal) {
[16:20:59.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.534]                     {
[16:20:59.534]                       inherits <- base::inherits
[16:20:59.534]                       invokeRestart <- base::invokeRestart
[16:20:59.534]                       is.null <- base::is.null
[16:20:59.534]                       muffled <- FALSE
[16:20:59.534]                       if (inherits(cond, "message")) {
[16:20:59.534]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.534]                         if (muffled) 
[16:20:59.534]                           invokeRestart("muffleMessage")
[16:20:59.534]                       }
[16:20:59.534]                       else if (inherits(cond, "warning")) {
[16:20:59.534]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.534]                         if (muffled) 
[16:20:59.534]                           invokeRestart("muffleWarning")
[16:20:59.534]                       }
[16:20:59.534]                       else if (inherits(cond, "condition")) {
[16:20:59.534]                         if (!is.null(pattern)) {
[16:20:59.534]                           computeRestarts <- base::computeRestarts
[16:20:59.534]                           grepl <- base::grepl
[16:20:59.534]                           restarts <- computeRestarts(cond)
[16:20:59.534]                           for (restart in restarts) {
[16:20:59.534]                             name <- restart$name
[16:20:59.534]                             if (is.null(name)) 
[16:20:59.534]                               next
[16:20:59.534]                             if (!grepl(pattern, name)) 
[16:20:59.534]                               next
[16:20:59.534]                             invokeRestart(restart)
[16:20:59.534]                             muffled <- TRUE
[16:20:59.534]                             break
[16:20:59.534]                           }
[16:20:59.534]                         }
[16:20:59.534]                       }
[16:20:59.534]                       invisible(muffled)
[16:20:59.534]                     }
[16:20:59.534]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.534]                   }
[16:20:59.534]                 }
[16:20:59.534]                 else {
[16:20:59.534]                   if (TRUE) {
[16:20:59.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.534]                     {
[16:20:59.534]                       inherits <- base::inherits
[16:20:59.534]                       invokeRestart <- base::invokeRestart
[16:20:59.534]                       is.null <- base::is.null
[16:20:59.534]                       muffled <- FALSE
[16:20:59.534]                       if (inherits(cond, "message")) {
[16:20:59.534]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.534]                         if (muffled) 
[16:20:59.534]                           invokeRestart("muffleMessage")
[16:20:59.534]                       }
[16:20:59.534]                       else if (inherits(cond, "warning")) {
[16:20:59.534]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.534]                         if (muffled) 
[16:20:59.534]                           invokeRestart("muffleWarning")
[16:20:59.534]                       }
[16:20:59.534]                       else if (inherits(cond, "condition")) {
[16:20:59.534]                         if (!is.null(pattern)) {
[16:20:59.534]                           computeRestarts <- base::computeRestarts
[16:20:59.534]                           grepl <- base::grepl
[16:20:59.534]                           restarts <- computeRestarts(cond)
[16:20:59.534]                           for (restart in restarts) {
[16:20:59.534]                             name <- restart$name
[16:20:59.534]                             if (is.null(name)) 
[16:20:59.534]                               next
[16:20:59.534]                             if (!grepl(pattern, name)) 
[16:20:59.534]                               next
[16:20:59.534]                             invokeRestart(restart)
[16:20:59.534]                             muffled <- TRUE
[16:20:59.534]                             break
[16:20:59.534]                           }
[16:20:59.534]                         }
[16:20:59.534]                       }
[16:20:59.534]                       invisible(muffled)
[16:20:59.534]                     }
[16:20:59.534]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.534]                   }
[16:20:59.534]                 }
[16:20:59.534]             }
[16:20:59.534]         }))
[16:20:59.534]     }, error = function(ex) {
[16:20:59.534]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.534]                 ...future.rng), started = ...future.startTime, 
[16:20:59.534]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.534]             version = "1.8"), class = "FutureResult")
[16:20:59.534]     }, finally = {
[16:20:59.534]         if (!identical(...future.workdir, getwd())) 
[16:20:59.534]             setwd(...future.workdir)
[16:20:59.534]         {
[16:20:59.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.534]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.534]             }
[16:20:59.534]             base::options(...future.oldOptions)
[16:20:59.534]             if (.Platform$OS.type == "windows") {
[16:20:59.534]                 old_names <- names(...future.oldEnvVars)
[16:20:59.534]                 envs <- base::Sys.getenv()
[16:20:59.534]                 names <- names(envs)
[16:20:59.534]                 common <- intersect(names, old_names)
[16:20:59.534]                 added <- setdiff(names, old_names)
[16:20:59.534]                 removed <- setdiff(old_names, names)
[16:20:59.534]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.534]                   envs[common]]
[16:20:59.534]                 NAMES <- toupper(changed)
[16:20:59.534]                 args <- list()
[16:20:59.534]                 for (kk in seq_along(NAMES)) {
[16:20:59.534]                   name <- changed[[kk]]
[16:20:59.534]                   NAME <- NAMES[[kk]]
[16:20:59.534]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.534]                     next
[16:20:59.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.534]                 }
[16:20:59.534]                 NAMES <- toupper(added)
[16:20:59.534]                 for (kk in seq_along(NAMES)) {
[16:20:59.534]                   name <- added[[kk]]
[16:20:59.534]                   NAME <- NAMES[[kk]]
[16:20:59.534]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.534]                     next
[16:20:59.534]                   args[[name]] <- ""
[16:20:59.534]                 }
[16:20:59.534]                 NAMES <- toupper(removed)
[16:20:59.534]                 for (kk in seq_along(NAMES)) {
[16:20:59.534]                   name <- removed[[kk]]
[16:20:59.534]                   NAME <- NAMES[[kk]]
[16:20:59.534]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.534]                     next
[16:20:59.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.534]                 }
[16:20:59.534]                 if (length(args) > 0) 
[16:20:59.534]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.534]             }
[16:20:59.534]             else {
[16:20:59.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.534]             }
[16:20:59.534]             {
[16:20:59.534]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.534]                   0L) {
[16:20:59.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.534]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.534]                   base::options(opts)
[16:20:59.534]                 }
[16:20:59.534]                 {
[16:20:59.534]                   {
[16:20:59.534]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.534]                     NULL
[16:20:59.534]                   }
[16:20:59.534]                   options(future.plan = NULL)
[16:20:59.534]                   if (is.na(NA_character_)) 
[16:20:59.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.534]                     .init = FALSE)
[16:20:59.534]                 }
[16:20:59.534]             }
[16:20:59.534]         }
[16:20:59.534]     })
[16:20:59.534]     if (TRUE) {
[16:20:59.534]         base::sink(type = "output", split = FALSE)
[16:20:59.534]         if (TRUE) {
[16:20:59.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.534]         }
[16:20:59.534]         else {
[16:20:59.534]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.534]         }
[16:20:59.534]         base::close(...future.stdout)
[16:20:59.534]         ...future.stdout <- NULL
[16:20:59.534]     }
[16:20:59.534]     ...future.result$conditions <- ...future.conditions
[16:20:59.534]     ...future.result$finished <- base::Sys.time()
[16:20:59.534]     ...future.result
[16:20:59.534] }
[16:20:59.536] assign_globals() ...
[16:20:59.536] List of 1
[16:20:59.536]  $ x: list()
[16:20:59.536]  - attr(*, "where")=List of 1
[16:20:59.536]   ..$ x:<environment: R_EmptyEnv> 
[16:20:59.536]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.536]  - attr(*, "resolved")= logi TRUE
[16:20:59.536]  - attr(*, "total_size")= num 0
[16:20:59.536]  - attr(*, "already-done")= logi TRUE
[16:20:59.539] - copied ‘x’ to environment
[16:20:59.540] assign_globals() ... done
[16:20:59.540] requestCore(): workers = 2
[16:20:59.541] MulticoreFuture started
[16:20:59.542] - Launch lazy future ... done
[16:20:59.542] run() for ‘MulticoreFuture’ ... done
[16:20:59.543] result() for MulticoreFuture ...
[16:20:59.543] plan(): Setting new future strategy stack:
[16:20:59.543] List of future strategies:
[16:20:59.543] 1. sequential:
[16:20:59.543]    - args: function (..., envir = parent.frame())
[16:20:59.543]    - tweaked: FALSE
[16:20:59.543]    - call: NULL
[16:20:59.544] plan(): nbrOfWorkers() = 1
[16:20:59.546] plan(): Setting new future strategy stack:
[16:20:59.546] List of future strategies:
[16:20:59.546] 1. multicore:
[16:20:59.546]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.546]    - tweaked: FALSE
[16:20:59.546]    - call: plan(strategy)
[16:20:59.551] plan(): nbrOfWorkers() = 2
[16:20:59.552] result() for MulticoreFuture ...
[16:20:59.552] result() for MulticoreFuture ... done
[16:20:59.552] result() for MulticoreFuture ... done
[16:20:59.552] result() for MulticoreFuture ...
[16:20:59.553] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.553] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.554] Searching for globals...
[16:20:59.556] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:20:59.557] Searching for globals ... DONE
[16:20:59.557] Resolving globals: TRUE
[16:20:59.557] Resolving any globals that are futures ...
[16:20:59.557] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:20:59.557] Resolving any globals that are futures ... DONE
[16:20:59.558] Resolving futures part of globals (recursively) ...
[16:20:59.558] resolve() on list ...
[16:20:59.558]  recursive: 99
[16:20:59.558]  length: 2
[16:20:59.558]  elements: ‘x’, ‘name’
[16:20:59.559]  length: 1 (resolved future 1)
[16:20:59.559]  length: 0 (resolved future 2)
[16:20:59.559] resolve() on list ... DONE
[16:20:59.559] - globals: [2] ‘x’, ‘name’
[16:20:59.559] Resolving futures part of globals (recursively) ... DONE
[16:20:59.559] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:59.560] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[16:20:59.560] - globals: [2] ‘x’, ‘name’
[16:20:59.560] 
[16:20:59.560] getGlobalsAndPackages() ... DONE
[16:20:59.560] run() for ‘Future’ ...
[16:20:59.561] - state: ‘created’
[16:20:59.561] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:59.565] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:59.565] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:59.565]   - Field: ‘label’
[16:20:59.565]   - Field: ‘local’
[16:20:59.565]   - Field: ‘owner’
[16:20:59.565]   - Field: ‘envir’
[16:20:59.565]   - Field: ‘workers’
[16:20:59.565]   - Field: ‘packages’
[16:20:59.566]   - Field: ‘gc’
[16:20:59.566]   - Field: ‘job’
[16:20:59.566]   - Field: ‘conditions’
[16:20:59.566]   - Field: ‘expr’
[16:20:59.566]   - Field: ‘uuid’
[16:20:59.566]   - Field: ‘seed’
[16:20:59.566]   - Field: ‘version’
[16:20:59.566]   - Field: ‘result’
[16:20:59.567]   - Field: ‘asynchronous’
[16:20:59.567]   - Field: ‘calls’
[16:20:59.567]   - Field: ‘globals’
[16:20:59.567]   - Field: ‘stdout’
[16:20:59.567]   - Field: ‘earlySignal’
[16:20:59.567]   - Field: ‘lazy’
[16:20:59.567]   - Field: ‘state’
[16:20:59.567] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:59.567] - Launch lazy future ...
[16:20:59.568] Packages needed by the future expression (n = 0): <none>
[16:20:59.568] Packages needed by future strategies (n = 0): <none>
[16:20:59.568] {
[16:20:59.568]     {
[16:20:59.568]         {
[16:20:59.568]             ...future.startTime <- base::Sys.time()
[16:20:59.568]             {
[16:20:59.568]                 {
[16:20:59.568]                   {
[16:20:59.568]                     {
[16:20:59.568]                       base::local({
[16:20:59.568]                         has_future <- base::requireNamespace("future", 
[16:20:59.568]                           quietly = TRUE)
[16:20:59.568]                         if (has_future) {
[16:20:59.568]                           ns <- base::getNamespace("future")
[16:20:59.568]                           version <- ns[[".package"]][["version"]]
[16:20:59.568]                           if (is.null(version)) 
[16:20:59.568]                             version <- utils::packageVersion("future")
[16:20:59.568]                         }
[16:20:59.568]                         else {
[16:20:59.568]                           version <- NULL
[16:20:59.568]                         }
[16:20:59.568]                         if (!has_future || version < "1.8.0") {
[16:20:59.568]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:59.568]                             "", base::R.version$version.string), 
[16:20:59.568]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:59.568]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:59.568]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:59.568]                               "release", "version")], collapse = " "), 
[16:20:59.568]                             hostname = base::Sys.info()[["nodename"]])
[16:20:59.568]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:59.568]                             info)
[16:20:59.568]                           info <- base::paste(info, collapse = "; ")
[16:20:59.568]                           if (!has_future) {
[16:20:59.568]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:59.568]                               info)
[16:20:59.568]                           }
[16:20:59.568]                           else {
[16:20:59.568]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:59.568]                               info, version)
[16:20:59.568]                           }
[16:20:59.568]                           base::stop(msg)
[16:20:59.568]                         }
[16:20:59.568]                       })
[16:20:59.568]                     }
[16:20:59.568]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:59.568]                     base::options(mc.cores = 1L)
[16:20:59.568]                   }
[16:20:59.568]                   ...future.strategy.old <- future::plan("list")
[16:20:59.568]                   options(future.plan = NULL)
[16:20:59.568]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.568]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:59.568]                 }
[16:20:59.568]                 ...future.workdir <- getwd()
[16:20:59.568]             }
[16:20:59.568]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:59.568]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:59.568]         }
[16:20:59.568]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:20:59.568]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:59.568]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:20:59.568]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:20:59.568]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:59.568]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:59.568]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:59.568]             base::names(...future.oldOptions))
[16:20:59.568]     }
[16:20:59.568]     if (FALSE) {
[16:20:59.568]     }
[16:20:59.568]     else {
[16:20:59.568]         if (TRUE) {
[16:20:59.568]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:59.568]                 open = "w")
[16:20:59.568]         }
[16:20:59.568]         else {
[16:20:59.568]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:59.568]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:59.568]         }
[16:20:59.568]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:59.568]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:59.568]             base::sink(type = "output", split = FALSE)
[16:20:59.568]             base::close(...future.stdout)
[16:20:59.568]         }, add = TRUE)
[16:20:59.568]     }
[16:20:59.568]     ...future.frame <- base::sys.nframe()
[16:20:59.568]     ...future.conditions <- base::list()
[16:20:59.568]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:59.568]     if (FALSE) {
[16:20:59.568]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:59.568]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:59.568]     }
[16:20:59.568]     ...future.result <- base::tryCatch({
[16:20:59.568]         base::withCallingHandlers({
[16:20:59.568]             ...future.value <- base::withVisible(base::local({
[16:20:59.568]                 withCallingHandlers({
[16:20:59.568]                   {
[16:20:59.568]                     x[name] <- list(1)
[16:20:59.568]                     x
[16:20:59.568]                   }
[16:20:59.568]                 }, immediateCondition = function(cond) {
[16:20:59.568]                   save_rds <- function (object, pathname, ...) 
[16:20:59.568]                   {
[16:20:59.568]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:59.568]                     if (file_test("-f", pathname_tmp)) {
[16:20:59.568]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.568]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:59.568]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.568]                         fi_tmp[["mtime"]])
[16:20:59.568]                     }
[16:20:59.568]                     tryCatch({
[16:20:59.568]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:59.568]                     }, error = function(ex) {
[16:20:59.568]                       msg <- conditionMessage(ex)
[16:20:59.568]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.568]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:59.568]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.568]                         fi_tmp[["mtime"]], msg)
[16:20:59.568]                       ex$message <- msg
[16:20:59.568]                       stop(ex)
[16:20:59.568]                     })
[16:20:59.568]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:59.568]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:59.568]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:59.568]                       fi_tmp <- file.info(pathname_tmp)
[16:20:59.568]                       fi <- file.info(pathname)
[16:20:59.568]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:59.568]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:59.568]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:59.568]                         fi[["size"]], fi[["mtime"]])
[16:20:59.568]                       stop(msg)
[16:20:59.568]                     }
[16:20:59.568]                     invisible(pathname)
[16:20:59.568]                   }
[16:20:59.568]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:59.568]                     rootPath = tempdir()) 
[16:20:59.568]                   {
[16:20:59.568]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:59.568]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:59.568]                       tmpdir = path, fileext = ".rds")
[16:20:59.568]                     save_rds(obj, file)
[16:20:59.568]                   }
[16:20:59.568]                   saveImmediateCondition(cond, path = "/tmp/RtmpyLvP7u/.future/immediateConditions")
[16:20:59.568]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.568]                   {
[16:20:59.568]                     inherits <- base::inherits
[16:20:59.568]                     invokeRestart <- base::invokeRestart
[16:20:59.568]                     is.null <- base::is.null
[16:20:59.568]                     muffled <- FALSE
[16:20:59.568]                     if (inherits(cond, "message")) {
[16:20:59.568]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:59.568]                       if (muffled) 
[16:20:59.568]                         invokeRestart("muffleMessage")
[16:20:59.568]                     }
[16:20:59.568]                     else if (inherits(cond, "warning")) {
[16:20:59.568]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:59.568]                       if (muffled) 
[16:20:59.568]                         invokeRestart("muffleWarning")
[16:20:59.568]                     }
[16:20:59.568]                     else if (inherits(cond, "condition")) {
[16:20:59.568]                       if (!is.null(pattern)) {
[16:20:59.568]                         computeRestarts <- base::computeRestarts
[16:20:59.568]                         grepl <- base::grepl
[16:20:59.568]                         restarts <- computeRestarts(cond)
[16:20:59.568]                         for (restart in restarts) {
[16:20:59.568]                           name <- restart$name
[16:20:59.568]                           if (is.null(name)) 
[16:20:59.568]                             next
[16:20:59.568]                           if (!grepl(pattern, name)) 
[16:20:59.568]                             next
[16:20:59.568]                           invokeRestart(restart)
[16:20:59.568]                           muffled <- TRUE
[16:20:59.568]                           break
[16:20:59.568]                         }
[16:20:59.568]                       }
[16:20:59.568]                     }
[16:20:59.568]                     invisible(muffled)
[16:20:59.568]                   }
[16:20:59.568]                   muffleCondition(cond)
[16:20:59.568]                 })
[16:20:59.568]             }))
[16:20:59.568]             future::FutureResult(value = ...future.value$value, 
[16:20:59.568]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.568]                   ...future.rng), globalenv = if (FALSE) 
[16:20:59.568]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:59.568]                     ...future.globalenv.names))
[16:20:59.568]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:59.568]         }, condition = base::local({
[16:20:59.568]             c <- base::c
[16:20:59.568]             inherits <- base::inherits
[16:20:59.568]             invokeRestart <- base::invokeRestart
[16:20:59.568]             length <- base::length
[16:20:59.568]             list <- base::list
[16:20:59.568]             seq.int <- base::seq.int
[16:20:59.568]             signalCondition <- base::signalCondition
[16:20:59.568]             sys.calls <- base::sys.calls
[16:20:59.568]             `[[` <- base::`[[`
[16:20:59.568]             `+` <- base::`+`
[16:20:59.568]             `<<-` <- base::`<<-`
[16:20:59.568]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:59.568]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:59.568]                   3L)]
[16:20:59.568]             }
[16:20:59.568]             function(cond) {
[16:20:59.568]                 is_error <- inherits(cond, "error")
[16:20:59.568]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:59.568]                   NULL)
[16:20:59.568]                 if (is_error) {
[16:20:59.568]                   sessionInformation <- function() {
[16:20:59.568]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:59.568]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:59.568]                       search = base::search(), system = base::Sys.info())
[16:20:59.568]                   }
[16:20:59.568]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.568]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:59.568]                     cond$call), session = sessionInformation(), 
[16:20:59.568]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:59.568]                   signalCondition(cond)
[16:20:59.568]                 }
[16:20:59.568]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:59.568]                 "immediateCondition"))) {
[16:20:59.568]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:59.568]                   ...future.conditions[[length(...future.conditions) + 
[16:20:59.568]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:59.568]                   if (TRUE && !signal) {
[16:20:59.568]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.568]                     {
[16:20:59.568]                       inherits <- base::inherits
[16:20:59.568]                       invokeRestart <- base::invokeRestart
[16:20:59.568]                       is.null <- base::is.null
[16:20:59.568]                       muffled <- FALSE
[16:20:59.568]                       if (inherits(cond, "message")) {
[16:20:59.568]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.568]                         if (muffled) 
[16:20:59.568]                           invokeRestart("muffleMessage")
[16:20:59.568]                       }
[16:20:59.568]                       else if (inherits(cond, "warning")) {
[16:20:59.568]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.568]                         if (muffled) 
[16:20:59.568]                           invokeRestart("muffleWarning")
[16:20:59.568]                       }
[16:20:59.568]                       else if (inherits(cond, "condition")) {
[16:20:59.568]                         if (!is.null(pattern)) {
[16:20:59.568]                           computeRestarts <- base::computeRestarts
[16:20:59.568]                           grepl <- base::grepl
[16:20:59.568]                           restarts <- computeRestarts(cond)
[16:20:59.568]                           for (restart in restarts) {
[16:20:59.568]                             name <- restart$name
[16:20:59.568]                             if (is.null(name)) 
[16:20:59.568]                               next
[16:20:59.568]                             if (!grepl(pattern, name)) 
[16:20:59.568]                               next
[16:20:59.568]                             invokeRestart(restart)
[16:20:59.568]                             muffled <- TRUE
[16:20:59.568]                             break
[16:20:59.568]                           }
[16:20:59.568]                         }
[16:20:59.568]                       }
[16:20:59.568]                       invisible(muffled)
[16:20:59.568]                     }
[16:20:59.568]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.568]                   }
[16:20:59.568]                 }
[16:20:59.568]                 else {
[16:20:59.568]                   if (TRUE) {
[16:20:59.568]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:59.568]                     {
[16:20:59.568]                       inherits <- base::inherits
[16:20:59.568]                       invokeRestart <- base::invokeRestart
[16:20:59.568]                       is.null <- base::is.null
[16:20:59.568]                       muffled <- FALSE
[16:20:59.568]                       if (inherits(cond, "message")) {
[16:20:59.568]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:59.568]                         if (muffled) 
[16:20:59.568]                           invokeRestart("muffleMessage")
[16:20:59.568]                       }
[16:20:59.568]                       else if (inherits(cond, "warning")) {
[16:20:59.568]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:59.568]                         if (muffled) 
[16:20:59.568]                           invokeRestart("muffleWarning")
[16:20:59.568]                       }
[16:20:59.568]                       else if (inherits(cond, "condition")) {
[16:20:59.568]                         if (!is.null(pattern)) {
[16:20:59.568]                           computeRestarts <- base::computeRestarts
[16:20:59.568]                           grepl <- base::grepl
[16:20:59.568]                           restarts <- computeRestarts(cond)
[16:20:59.568]                           for (restart in restarts) {
[16:20:59.568]                             name <- restart$name
[16:20:59.568]                             if (is.null(name)) 
[16:20:59.568]                               next
[16:20:59.568]                             if (!grepl(pattern, name)) 
[16:20:59.568]                               next
[16:20:59.568]                             invokeRestart(restart)
[16:20:59.568]                             muffled <- TRUE
[16:20:59.568]                             break
[16:20:59.568]                           }
[16:20:59.568]                         }
[16:20:59.568]                       }
[16:20:59.568]                       invisible(muffled)
[16:20:59.568]                     }
[16:20:59.568]                     muffleCondition(cond, pattern = "^muffle")
[16:20:59.568]                   }
[16:20:59.568]                 }
[16:20:59.568]             }
[16:20:59.568]         }))
[16:20:59.568]     }, error = function(ex) {
[16:20:59.568]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:59.568]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:59.568]                 ...future.rng), started = ...future.startTime, 
[16:20:59.568]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:59.568]             version = "1.8"), class = "FutureResult")
[16:20:59.568]     }, finally = {
[16:20:59.568]         if (!identical(...future.workdir, getwd())) 
[16:20:59.568]             setwd(...future.workdir)
[16:20:59.568]         {
[16:20:59.568]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:59.568]                 ...future.oldOptions$nwarnings <- NULL
[16:20:59.568]             }
[16:20:59.568]             base::options(...future.oldOptions)
[16:20:59.568]             if (.Platform$OS.type == "windows") {
[16:20:59.568]                 old_names <- names(...future.oldEnvVars)
[16:20:59.568]                 envs <- base::Sys.getenv()
[16:20:59.568]                 names <- names(envs)
[16:20:59.568]                 common <- intersect(names, old_names)
[16:20:59.568]                 added <- setdiff(names, old_names)
[16:20:59.568]                 removed <- setdiff(old_names, names)
[16:20:59.568]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:59.568]                   envs[common]]
[16:20:59.568]                 NAMES <- toupper(changed)
[16:20:59.568]                 args <- list()
[16:20:59.568]                 for (kk in seq_along(NAMES)) {
[16:20:59.568]                   name <- changed[[kk]]
[16:20:59.568]                   NAME <- NAMES[[kk]]
[16:20:59.568]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.568]                     next
[16:20:59.568]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.568]                 }
[16:20:59.568]                 NAMES <- toupper(added)
[16:20:59.568]                 for (kk in seq_along(NAMES)) {
[16:20:59.568]                   name <- added[[kk]]
[16:20:59.568]                   NAME <- NAMES[[kk]]
[16:20:59.568]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.568]                     next
[16:20:59.568]                   args[[name]] <- ""
[16:20:59.568]                 }
[16:20:59.568]                 NAMES <- toupper(removed)
[16:20:59.568]                 for (kk in seq_along(NAMES)) {
[16:20:59.568]                   name <- removed[[kk]]
[16:20:59.568]                   NAME <- NAMES[[kk]]
[16:20:59.568]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:59.568]                     next
[16:20:59.568]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:59.568]                 }
[16:20:59.568]                 if (length(args) > 0) 
[16:20:59.568]                   base::do.call(base::Sys.setenv, args = args)
[16:20:59.568]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:59.568]             }
[16:20:59.568]             else {
[16:20:59.568]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:59.568]             }
[16:20:59.568]             {
[16:20:59.568]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:59.568]                   0L) {
[16:20:59.568]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:59.568]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:59.568]                   base::options(opts)
[16:20:59.568]                 }
[16:20:59.568]                 {
[16:20:59.568]                   {
[16:20:59.568]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:59.568]                     NULL
[16:20:59.568]                   }
[16:20:59.568]                   options(future.plan = NULL)
[16:20:59.568]                   if (is.na(NA_character_)) 
[16:20:59.568]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:59.568]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:59.568]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:59.568]                     .init = FALSE)
[16:20:59.568]                 }
[16:20:59.568]             }
[16:20:59.568]         }
[16:20:59.568]     })
[16:20:59.568]     if (TRUE) {
[16:20:59.568]         base::sink(type = "output", split = FALSE)
[16:20:59.568]         if (TRUE) {
[16:20:59.568]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:59.568]         }
[16:20:59.568]         else {
[16:20:59.568]             ...future.result["stdout"] <- base::list(NULL)
[16:20:59.568]         }
[16:20:59.568]         base::close(...future.stdout)
[16:20:59.568]         ...future.stdout <- NULL
[16:20:59.568]     }
[16:20:59.568]     ...future.result$conditions <- ...future.conditions
[16:20:59.568]     ...future.result$finished <- base::Sys.time()
[16:20:59.568]     ...future.result
[16:20:59.568] }
[16:20:59.571] assign_globals() ...
[16:20:59.571] List of 2
[16:20:59.571]  $ x   : list()
[16:20:59.571]  $ name: chr "a"
[16:20:59.571]  - attr(*, "where")=List of 2
[16:20:59.571]   ..$ x   :<environment: R_EmptyEnv> 
[16:20:59.571]   ..$ name:<environment: R_EmptyEnv> 
[16:20:59.571]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:59.571]  - attr(*, "resolved")= logi TRUE
[16:20:59.571]  - attr(*, "total_size")= num 112
[16:20:59.571]  - attr(*, "already-done")= logi TRUE
[16:20:59.575] - copied ‘x’ to environment
[16:20:59.575] - copied ‘name’ to environment
[16:20:59.575] assign_globals() ... done
[16:20:59.575] requestCore(): workers = 2
[16:20:59.577] MulticoreFuture started
[16:20:59.577] - Launch lazy future ... done
[16:20:59.577] run() for ‘MulticoreFuture’ ... done
[16:20:59.578] result() for MulticoreFuture ...
[16:20:59.578] plan(): Setting new future strategy stack:
[16:20:59.578] List of future strategies:
[16:20:59.578] 1. sequential:
[16:20:59.578]    - args: function (..., envir = parent.frame())
[16:20:59.578]    - tweaked: FALSE
[16:20:59.578]    - call: NULL
[16:20:59.579] plan(): nbrOfWorkers() = 1
[16:20:59.581] plan(): Setting new future strategy stack:
[16:20:59.581] List of future strategies:
[16:20:59.581] 1. multicore:
[16:20:59.581]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:59.581]    - tweaked: FALSE
[16:20:59.581]    - call: plan(strategy)
[16:20:59.590] plan(): nbrOfWorkers() = 2
[16:20:59.591] result() for MulticoreFuture ...
[16:20:59.592] result() for MulticoreFuture ... done
[16:20:59.592] result() for MulticoreFuture ... done
[16:20:59.592] result() for MulticoreFuture ...
[16:20:59.592] result() for MulticoreFuture ... done
$a
[1] 1

- plan('multisession') ...
[16:20:59.593] plan(): Setting new future strategy stack:
[16:20:59.593] List of future strategies:
[16:20:59.593] 1. multisession:
[16:20:59.593]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:59.593]    - tweaked: FALSE
[16:20:59.593]    - call: plan(strategy)
[16:20:59.593] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:59.594] multisession:
[16:20:59.594] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:59.594] - tweaked: FALSE
[16:20:59.594] - call: plan(strategy)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:20:59.603] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:20:59.604] Not searching for globals
[16:20:59.604] - globals: [0] <none>
[16:20:59.604] getGlobalsAndPackages() ... DONE
[16:20:59.605] [local output] makeClusterPSOCK() ...
[16:20:59.648] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:59.649] [local output] Base port: 11575
[16:20:59.649] [local output] Getting setup options for 2 cluster nodes ...
[16:20:59.649] [local output]  - Node 1 of 2 ...
[16:20:59.650] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:59.650] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpyLvP7u/worker.rank=1.parallelly.parent=83580.1467c5d3badf0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpyLvP7u/worker.rank=1.parallelly.parent=83580.1467c5d3badf0.pid")'’
[16:20:59.842] - Possible to infer worker's PID: TRUE
[16:20:59.843] [local output] Rscript port: 11575

[16:20:59.843] [local output]  - Node 2 of 2 ...
[16:20:59.843] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:59.844] [local output] Rscript port: 11575

[16:20:59.844] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:59.844] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:59.845] [local output] Setting up PSOCK nodes in parallel
[16:20:59.845] List of 36
[16:20:59.845]  $ worker          : chr "localhost"
[16:20:59.845]   ..- attr(*, "localhost")= logi TRUE
[16:20:59.845]  $ master          : chr "localhost"
[16:20:59.845]  $ port            : int 11575
[16:20:59.845]  $ connectTimeout  : num 120
[16:20:59.845]  $ timeout         : num 2592000
[16:20:59.845]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:59.845]  $ homogeneous     : logi TRUE
[16:20:59.845]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:59.845]  $ rscript_envs    : NULL
[16:20:59.845]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:59.845]  $ rscript_startup : NULL
[16:20:59.845]  $ rscript_sh      : chr "sh"
[16:20:59.845]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:59.845]  $ methods         : logi TRUE
[16:20:59.845]  $ socketOptions   : chr "no-delay"
[16:20:59.845]  $ useXDR          : logi FALSE
[16:20:59.845]  $ outfile         : chr "/dev/null"
[16:20:59.845]  $ renice          : int NA
[16:20:59.845]  $ rshcmd          : NULL
[16:20:59.845]  $ user            : chr(0) 
[16:20:59.845]  $ revtunnel       : logi FALSE
[16:20:59.845]  $ rshlogfile      : NULL
[16:20:59.845]  $ rshopts         : chr(0) 
[16:20:59.845]  $ rank            : int 1
[16:20:59.845]  $ manual          : logi FALSE
[16:20:59.845]  $ dryrun          : logi FALSE
[16:20:59.845]  $ quiet           : logi FALSE
[16:20:59.845]  $ setup_strategy  : chr "parallel"
[16:20:59.845]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:59.845]  $ pidfile         : chr "/tmp/RtmpyLvP7u/worker.rank=1.parallelly.parent=83580.1467c5d3badf0.pid"
[16:20:59.845]  $ rshcmd_label    : NULL
[16:20:59.845]  $ rsh_call        : NULL
[16:20:59.845]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:59.845]  $ localMachine    : logi TRUE
[16:20:59.845]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:59.845]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:59.845]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:59.845]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:59.845]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:59.845]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:59.845]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:59.845]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:59.845]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:59.845]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:59.845]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:59.845]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:59.845]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:59.845]  $ arguments       :List of 28
[16:20:59.845]   ..$ worker          : chr "localhost"
[16:20:59.845]   ..$ master          : NULL
[16:20:59.845]   ..$ port            : int 11575
[16:20:59.845]   ..$ connectTimeout  : num 120
[16:20:59.845]   ..$ timeout         : num 2592000
[16:20:59.845]   ..$ rscript         : NULL
[16:20:59.845]   ..$ homogeneous     : NULL
[16:20:59.845]   ..$ rscript_args    : NULL
[16:20:59.845]   ..$ rscript_envs    : NULL
[16:20:59.845]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:59.845]   ..$ rscript_startup : NULL
[16:20:59.845]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:59.845]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:59.845]   ..$ methods         : logi TRUE
[16:20:59.845]   ..$ socketOptions   : chr "no-delay"
[16:20:59.845]   ..$ useXDR          : logi FALSE
[16:20:59.845]   ..$ outfile         : chr "/dev/null"
[16:20:59.845]   ..$ renice          : int NA
[16:20:59.845]   ..$ rshcmd          : NULL
[16:20:59.845]   ..$ user            : NULL
[16:20:59.845]   ..$ revtunnel       : logi NA
[16:20:59.845]   ..$ rshlogfile      : NULL
[16:20:59.845]   ..$ rshopts         : NULL
[16:20:59.845]   ..$ rank            : int 1
[16:20:59.845]   ..$ manual          : logi FALSE
[16:20:59.845]   ..$ dryrun          : logi FALSE
[16:20:59.845]   ..$ quiet           : logi FALSE
[16:20:59.845]   ..$ setup_strategy  : chr "parallel"
[16:20:59.845]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:59.862] [local output] System call to launch all workers:
[16:20:59.862] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpyLvP7u/worker.rank=1.parallelly.parent=83580.1467c5d3badf0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11575 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:59.862] [local output] Starting PSOCK main server
[16:20:59.867] [local output] Workers launched
[16:20:59.868] [local output] Waiting for workers to connect back
[16:20:59.868]  - [local output] 0 workers out of 2 ready
[16:21:00.109]  - [local output] 0 workers out of 2 ready
[16:21:00.109]  - [local output] 1 workers out of 2 ready
[16:21:00.118]  - [local output] 1 workers out of 2 ready
[16:21:00.118]  - [local output] 2 workers out of 2 ready
[16:21:00.118] [local output] Launching of workers completed
[16:21:00.119] [local output] Collecting session information from workers
[16:21:00.120] [local output]  - Worker #1 of 2
[16:21:00.120] [local output]  - Worker #2 of 2
[16:21:00.120] [local output] makeClusterPSOCK() ... done
[16:21:00.131] Packages needed by the future expression (n = 0): <none>
[16:21:00.132] Packages needed by future strategies (n = 0): <none>
[16:21:00.132] {
[16:21:00.132]     {
[16:21:00.132]         {
[16:21:00.132]             ...future.startTime <- base::Sys.time()
[16:21:00.132]             {
[16:21:00.132]                 {
[16:21:00.132]                   {
[16:21:00.132]                     {
[16:21:00.132]                       base::local({
[16:21:00.132]                         has_future <- base::requireNamespace("future", 
[16:21:00.132]                           quietly = TRUE)
[16:21:00.132]                         if (has_future) {
[16:21:00.132]                           ns <- base::getNamespace("future")
[16:21:00.132]                           version <- ns[[".package"]][["version"]]
[16:21:00.132]                           if (is.null(version)) 
[16:21:00.132]                             version <- utils::packageVersion("future")
[16:21:00.132]                         }
[16:21:00.132]                         else {
[16:21:00.132]                           version <- NULL
[16:21:00.132]                         }
[16:21:00.132]                         if (!has_future || version < "1.8.0") {
[16:21:00.132]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.132]                             "", base::R.version$version.string), 
[16:21:00.132]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.132]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.132]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.132]                               "release", "version")], collapse = " "), 
[16:21:00.132]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.132]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.132]                             info)
[16:21:00.132]                           info <- base::paste(info, collapse = "; ")
[16:21:00.132]                           if (!has_future) {
[16:21:00.132]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.132]                               info)
[16:21:00.132]                           }
[16:21:00.132]                           else {
[16:21:00.132]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.132]                               info, version)
[16:21:00.132]                           }
[16:21:00.132]                           base::stop(msg)
[16:21:00.132]                         }
[16:21:00.132]                       })
[16:21:00.132]                     }
[16:21:00.132]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.132]                     base::options(mc.cores = 1L)
[16:21:00.132]                   }
[16:21:00.132]                   ...future.strategy.old <- future::plan("list")
[16:21:00.132]                   options(future.plan = NULL)
[16:21:00.132]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.132]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.132]                 }
[16:21:00.132]                 ...future.workdir <- getwd()
[16:21:00.132]             }
[16:21:00.132]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.132]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.132]         }
[16:21:00.132]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.132]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.132]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.132]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.132]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.132]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.132]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.132]             base::names(...future.oldOptions))
[16:21:00.132]     }
[16:21:00.132]     if (FALSE) {
[16:21:00.132]     }
[16:21:00.132]     else {
[16:21:00.132]         if (TRUE) {
[16:21:00.132]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.132]                 open = "w")
[16:21:00.132]         }
[16:21:00.132]         else {
[16:21:00.132]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.132]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.132]         }
[16:21:00.132]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.132]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.132]             base::sink(type = "output", split = FALSE)
[16:21:00.132]             base::close(...future.stdout)
[16:21:00.132]         }, add = TRUE)
[16:21:00.132]     }
[16:21:00.132]     ...future.frame <- base::sys.nframe()
[16:21:00.132]     ...future.conditions <- base::list()
[16:21:00.132]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.132]     if (FALSE) {
[16:21:00.132]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.132]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.132]     }
[16:21:00.132]     ...future.result <- base::tryCatch({
[16:21:00.132]         base::withCallingHandlers({
[16:21:00.132]             ...future.value <- base::withVisible(base::local({
[16:21:00.132]                 ...future.makeSendCondition <- base::local({
[16:21:00.132]                   sendCondition <- NULL
[16:21:00.132]                   function(frame = 1L) {
[16:21:00.132]                     if (is.function(sendCondition)) 
[16:21:00.132]                       return(sendCondition)
[16:21:00.132]                     ns <- getNamespace("parallel")
[16:21:00.132]                     if (exists("sendData", mode = "function", 
[16:21:00.132]                       envir = ns)) {
[16:21:00.132]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.132]                         envir = ns)
[16:21:00.132]                       envir <- sys.frame(frame)
[16:21:00.132]                       master <- NULL
[16:21:00.132]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.132]                         !identical(envir, emptyenv())) {
[16:21:00.132]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.132]                           inherits = FALSE)) {
[16:21:00.132]                           master <- get("master", mode = "list", 
[16:21:00.132]                             envir = envir, inherits = FALSE)
[16:21:00.132]                           if (inherits(master, c("SOCKnode", 
[16:21:00.132]                             "SOCK0node"))) {
[16:21:00.132]                             sendCondition <<- function(cond) {
[16:21:00.132]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.132]                                 success = TRUE)
[16:21:00.132]                               parallel_sendData(master, data)
[16:21:00.132]                             }
[16:21:00.132]                             return(sendCondition)
[16:21:00.132]                           }
[16:21:00.132]                         }
[16:21:00.132]                         frame <- frame + 1L
[16:21:00.132]                         envir <- sys.frame(frame)
[16:21:00.132]                       }
[16:21:00.132]                     }
[16:21:00.132]                     sendCondition <<- function(cond) NULL
[16:21:00.132]                   }
[16:21:00.132]                 })
[16:21:00.132]                 withCallingHandlers({
[16:21:00.132]                   NA
[16:21:00.132]                 }, immediateCondition = function(cond) {
[16:21:00.132]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.132]                   sendCondition(cond)
[16:21:00.132]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.132]                   {
[16:21:00.132]                     inherits <- base::inherits
[16:21:00.132]                     invokeRestart <- base::invokeRestart
[16:21:00.132]                     is.null <- base::is.null
[16:21:00.132]                     muffled <- FALSE
[16:21:00.132]                     if (inherits(cond, "message")) {
[16:21:00.132]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.132]                       if (muffled) 
[16:21:00.132]                         invokeRestart("muffleMessage")
[16:21:00.132]                     }
[16:21:00.132]                     else if (inherits(cond, "warning")) {
[16:21:00.132]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.132]                       if (muffled) 
[16:21:00.132]                         invokeRestart("muffleWarning")
[16:21:00.132]                     }
[16:21:00.132]                     else if (inherits(cond, "condition")) {
[16:21:00.132]                       if (!is.null(pattern)) {
[16:21:00.132]                         computeRestarts <- base::computeRestarts
[16:21:00.132]                         grepl <- base::grepl
[16:21:00.132]                         restarts <- computeRestarts(cond)
[16:21:00.132]                         for (restart in restarts) {
[16:21:00.132]                           name <- restart$name
[16:21:00.132]                           if (is.null(name)) 
[16:21:00.132]                             next
[16:21:00.132]                           if (!grepl(pattern, name)) 
[16:21:00.132]                             next
[16:21:00.132]                           invokeRestart(restart)
[16:21:00.132]                           muffled <- TRUE
[16:21:00.132]                           break
[16:21:00.132]                         }
[16:21:00.132]                       }
[16:21:00.132]                     }
[16:21:00.132]                     invisible(muffled)
[16:21:00.132]                   }
[16:21:00.132]                   muffleCondition(cond)
[16:21:00.132]                 })
[16:21:00.132]             }))
[16:21:00.132]             future::FutureResult(value = ...future.value$value, 
[16:21:00.132]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.132]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.132]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.132]                     ...future.globalenv.names))
[16:21:00.132]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.132]         }, condition = base::local({
[16:21:00.132]             c <- base::c
[16:21:00.132]             inherits <- base::inherits
[16:21:00.132]             invokeRestart <- base::invokeRestart
[16:21:00.132]             length <- base::length
[16:21:00.132]             list <- base::list
[16:21:00.132]             seq.int <- base::seq.int
[16:21:00.132]             signalCondition <- base::signalCondition
[16:21:00.132]             sys.calls <- base::sys.calls
[16:21:00.132]             `[[` <- base::`[[`
[16:21:00.132]             `+` <- base::`+`
[16:21:00.132]             `<<-` <- base::`<<-`
[16:21:00.132]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.132]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.132]                   3L)]
[16:21:00.132]             }
[16:21:00.132]             function(cond) {
[16:21:00.132]                 is_error <- inherits(cond, "error")
[16:21:00.132]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.132]                   NULL)
[16:21:00.132]                 if (is_error) {
[16:21:00.132]                   sessionInformation <- function() {
[16:21:00.132]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.132]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.132]                       search = base::search(), system = base::Sys.info())
[16:21:00.132]                   }
[16:21:00.132]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.132]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.132]                     cond$call), session = sessionInformation(), 
[16:21:00.132]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.132]                   signalCondition(cond)
[16:21:00.132]                 }
[16:21:00.132]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.132]                 "immediateCondition"))) {
[16:21:00.132]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.132]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.132]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.132]                   if (TRUE && !signal) {
[16:21:00.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.132]                     {
[16:21:00.132]                       inherits <- base::inherits
[16:21:00.132]                       invokeRestart <- base::invokeRestart
[16:21:00.132]                       is.null <- base::is.null
[16:21:00.132]                       muffled <- FALSE
[16:21:00.132]                       if (inherits(cond, "message")) {
[16:21:00.132]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.132]                         if (muffled) 
[16:21:00.132]                           invokeRestart("muffleMessage")
[16:21:00.132]                       }
[16:21:00.132]                       else if (inherits(cond, "warning")) {
[16:21:00.132]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.132]                         if (muffled) 
[16:21:00.132]                           invokeRestart("muffleWarning")
[16:21:00.132]                       }
[16:21:00.132]                       else if (inherits(cond, "condition")) {
[16:21:00.132]                         if (!is.null(pattern)) {
[16:21:00.132]                           computeRestarts <- base::computeRestarts
[16:21:00.132]                           grepl <- base::grepl
[16:21:00.132]                           restarts <- computeRestarts(cond)
[16:21:00.132]                           for (restart in restarts) {
[16:21:00.132]                             name <- restart$name
[16:21:00.132]                             if (is.null(name)) 
[16:21:00.132]                               next
[16:21:00.132]                             if (!grepl(pattern, name)) 
[16:21:00.132]                               next
[16:21:00.132]                             invokeRestart(restart)
[16:21:00.132]                             muffled <- TRUE
[16:21:00.132]                             break
[16:21:00.132]                           }
[16:21:00.132]                         }
[16:21:00.132]                       }
[16:21:00.132]                       invisible(muffled)
[16:21:00.132]                     }
[16:21:00.132]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.132]                   }
[16:21:00.132]                 }
[16:21:00.132]                 else {
[16:21:00.132]                   if (TRUE) {
[16:21:00.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.132]                     {
[16:21:00.132]                       inherits <- base::inherits
[16:21:00.132]                       invokeRestart <- base::invokeRestart
[16:21:00.132]                       is.null <- base::is.null
[16:21:00.132]                       muffled <- FALSE
[16:21:00.132]                       if (inherits(cond, "message")) {
[16:21:00.132]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.132]                         if (muffled) 
[16:21:00.132]                           invokeRestart("muffleMessage")
[16:21:00.132]                       }
[16:21:00.132]                       else if (inherits(cond, "warning")) {
[16:21:00.132]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.132]                         if (muffled) 
[16:21:00.132]                           invokeRestart("muffleWarning")
[16:21:00.132]                       }
[16:21:00.132]                       else if (inherits(cond, "condition")) {
[16:21:00.132]                         if (!is.null(pattern)) {
[16:21:00.132]                           computeRestarts <- base::computeRestarts
[16:21:00.132]                           grepl <- base::grepl
[16:21:00.132]                           restarts <- computeRestarts(cond)
[16:21:00.132]                           for (restart in restarts) {
[16:21:00.132]                             name <- restart$name
[16:21:00.132]                             if (is.null(name)) 
[16:21:00.132]                               next
[16:21:00.132]                             if (!grepl(pattern, name)) 
[16:21:00.132]                               next
[16:21:00.132]                             invokeRestart(restart)
[16:21:00.132]                             muffled <- TRUE
[16:21:00.132]                             break
[16:21:00.132]                           }
[16:21:00.132]                         }
[16:21:00.132]                       }
[16:21:00.132]                       invisible(muffled)
[16:21:00.132]                     }
[16:21:00.132]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.132]                   }
[16:21:00.132]                 }
[16:21:00.132]             }
[16:21:00.132]         }))
[16:21:00.132]     }, error = function(ex) {
[16:21:00.132]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.132]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.132]                 ...future.rng), started = ...future.startTime, 
[16:21:00.132]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.132]             version = "1.8"), class = "FutureResult")
[16:21:00.132]     }, finally = {
[16:21:00.132]         if (!identical(...future.workdir, getwd())) 
[16:21:00.132]             setwd(...future.workdir)
[16:21:00.132]         {
[16:21:00.132]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.132]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.132]             }
[16:21:00.132]             base::options(...future.oldOptions)
[16:21:00.132]             if (.Platform$OS.type == "windows") {
[16:21:00.132]                 old_names <- names(...future.oldEnvVars)
[16:21:00.132]                 envs <- base::Sys.getenv()
[16:21:00.132]                 names <- names(envs)
[16:21:00.132]                 common <- intersect(names, old_names)
[16:21:00.132]                 added <- setdiff(names, old_names)
[16:21:00.132]                 removed <- setdiff(old_names, names)
[16:21:00.132]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.132]                   envs[common]]
[16:21:00.132]                 NAMES <- toupper(changed)
[16:21:00.132]                 args <- list()
[16:21:00.132]                 for (kk in seq_along(NAMES)) {
[16:21:00.132]                   name <- changed[[kk]]
[16:21:00.132]                   NAME <- NAMES[[kk]]
[16:21:00.132]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.132]                     next
[16:21:00.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.132]                 }
[16:21:00.132]                 NAMES <- toupper(added)
[16:21:00.132]                 for (kk in seq_along(NAMES)) {
[16:21:00.132]                   name <- added[[kk]]
[16:21:00.132]                   NAME <- NAMES[[kk]]
[16:21:00.132]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.132]                     next
[16:21:00.132]                   args[[name]] <- ""
[16:21:00.132]                 }
[16:21:00.132]                 NAMES <- toupper(removed)
[16:21:00.132]                 for (kk in seq_along(NAMES)) {
[16:21:00.132]                   name <- removed[[kk]]
[16:21:00.132]                   NAME <- NAMES[[kk]]
[16:21:00.132]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.132]                     next
[16:21:00.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.132]                 }
[16:21:00.132]                 if (length(args) > 0) 
[16:21:00.132]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.132]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.132]             }
[16:21:00.132]             else {
[16:21:00.132]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.132]             }
[16:21:00.132]             {
[16:21:00.132]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.132]                   0L) {
[16:21:00.132]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.132]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.132]                   base::options(opts)
[16:21:00.132]                 }
[16:21:00.132]                 {
[16:21:00.132]                   {
[16:21:00.132]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.132]                     NULL
[16:21:00.132]                   }
[16:21:00.132]                   options(future.plan = NULL)
[16:21:00.132]                   if (is.na(NA_character_)) 
[16:21:00.132]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.132]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.132]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.132]                     .init = FALSE)
[16:21:00.132]                 }
[16:21:00.132]             }
[16:21:00.132]         }
[16:21:00.132]     })
[16:21:00.132]     if (TRUE) {
[16:21:00.132]         base::sink(type = "output", split = FALSE)
[16:21:00.132]         if (TRUE) {
[16:21:00.132]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.132]         }
[16:21:00.132]         else {
[16:21:00.132]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.132]         }
[16:21:00.132]         base::close(...future.stdout)
[16:21:00.132]         ...future.stdout <- NULL
[16:21:00.132]     }
[16:21:00.132]     ...future.result$conditions <- ...future.conditions
[16:21:00.132]     ...future.result$finished <- base::Sys.time()
[16:21:00.132]     ...future.result
[16:21:00.132] }
[16:21:00.185] MultisessionFuture started
[16:21:00.185] result() for ClusterFuture ...
[16:21:00.186] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.186] - Validating connection of MultisessionFuture
[16:21:00.218] - received message: FutureResult
[16:21:00.218] - Received FutureResult
[16:21:00.219] - Erased future from FutureRegistry
[16:21:00.219] result() for ClusterFuture ...
[16:21:00.219] - result already collected: FutureResult
[16:21:00.219] result() for ClusterFuture ... done
[16:21:00.219] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.219] result() for ClusterFuture ... done
[16:21:00.219] result() for ClusterFuture ...
[16:21:00.219] - result already collected: FutureResult
[16:21:00.220] result() for ClusterFuture ... done
[16:21:00.220] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:21:00.224] plan(): nbrOfWorkers() = 2
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.224] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.224] Searching for globals...
[16:21:00.227] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.227] Searching for globals ... DONE
[16:21:00.227] Resolving globals: TRUE
[16:21:00.227] Resolving any globals that are futures ...
[16:21:00.227] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.228] Resolving any globals that are futures ... DONE
[16:21:00.228] Resolving futures part of globals (recursively) ...
[16:21:00.228] resolve() on list ...
[16:21:00.229]  recursive: 99
[16:21:00.229]  length: 1
[16:21:00.229]  elements: ‘x’
[16:21:00.229]  length: 0 (resolved future 1)
[16:21:00.229] resolve() on list ... DONE
[16:21:00.229] - globals: [1] ‘x’
[16:21:00.229] Resolving futures part of globals (recursively) ... DONE
[16:21:00.229] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.230] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.230] - globals: [1] ‘x’
[16:21:00.230] 
[16:21:00.230] getGlobalsAndPackages() ... DONE
[16:21:00.231] run() for ‘Future’ ...
[16:21:00.231] - state: ‘created’
[16:21:00.231] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.245] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.245] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.246]   - Field: ‘node’
[16:21:00.246]   - Field: ‘label’
[16:21:00.246]   - Field: ‘local’
[16:21:00.246]   - Field: ‘owner’
[16:21:00.246]   - Field: ‘envir’
[16:21:00.246]   - Field: ‘workers’
[16:21:00.246]   - Field: ‘packages’
[16:21:00.246]   - Field: ‘gc’
[16:21:00.246]   - Field: ‘conditions’
[16:21:00.246]   - Field: ‘persistent’
[16:21:00.247]   - Field: ‘expr’
[16:21:00.247]   - Field: ‘uuid’
[16:21:00.247]   - Field: ‘seed’
[16:21:00.247]   - Field: ‘version’
[16:21:00.247]   - Field: ‘result’
[16:21:00.247]   - Field: ‘asynchronous’
[16:21:00.247]   - Field: ‘calls’
[16:21:00.247]   - Field: ‘globals’
[16:21:00.248]   - Field: ‘stdout’
[16:21:00.248]   - Field: ‘earlySignal’
[16:21:00.248]   - Field: ‘lazy’
[16:21:00.248]   - Field: ‘state’
[16:21:00.248] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.248] - Launch lazy future ...
[16:21:00.249] Packages needed by the future expression (n = 0): <none>
[16:21:00.249] Packages needed by future strategies (n = 0): <none>
[16:21:00.249] {
[16:21:00.249]     {
[16:21:00.249]         {
[16:21:00.249]             ...future.startTime <- base::Sys.time()
[16:21:00.249]             {
[16:21:00.249]                 {
[16:21:00.249]                   {
[16:21:00.249]                     {
[16:21:00.249]                       base::local({
[16:21:00.249]                         has_future <- base::requireNamespace("future", 
[16:21:00.249]                           quietly = TRUE)
[16:21:00.249]                         if (has_future) {
[16:21:00.249]                           ns <- base::getNamespace("future")
[16:21:00.249]                           version <- ns[[".package"]][["version"]]
[16:21:00.249]                           if (is.null(version)) 
[16:21:00.249]                             version <- utils::packageVersion("future")
[16:21:00.249]                         }
[16:21:00.249]                         else {
[16:21:00.249]                           version <- NULL
[16:21:00.249]                         }
[16:21:00.249]                         if (!has_future || version < "1.8.0") {
[16:21:00.249]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.249]                             "", base::R.version$version.string), 
[16:21:00.249]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.249]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.249]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.249]                               "release", "version")], collapse = " "), 
[16:21:00.249]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.249]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.249]                             info)
[16:21:00.249]                           info <- base::paste(info, collapse = "; ")
[16:21:00.249]                           if (!has_future) {
[16:21:00.249]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.249]                               info)
[16:21:00.249]                           }
[16:21:00.249]                           else {
[16:21:00.249]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.249]                               info, version)
[16:21:00.249]                           }
[16:21:00.249]                           base::stop(msg)
[16:21:00.249]                         }
[16:21:00.249]                       })
[16:21:00.249]                     }
[16:21:00.249]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.249]                     base::options(mc.cores = 1L)
[16:21:00.249]                   }
[16:21:00.249]                   ...future.strategy.old <- future::plan("list")
[16:21:00.249]                   options(future.plan = NULL)
[16:21:00.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.249]                 }
[16:21:00.249]                 ...future.workdir <- getwd()
[16:21:00.249]             }
[16:21:00.249]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.249]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.249]         }
[16:21:00.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.249]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.249]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.249]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.249]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.249]             base::names(...future.oldOptions))
[16:21:00.249]     }
[16:21:00.249]     if (FALSE) {
[16:21:00.249]     }
[16:21:00.249]     else {
[16:21:00.249]         if (TRUE) {
[16:21:00.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.249]                 open = "w")
[16:21:00.249]         }
[16:21:00.249]         else {
[16:21:00.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.249]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.249]         }
[16:21:00.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.249]             base::sink(type = "output", split = FALSE)
[16:21:00.249]             base::close(...future.stdout)
[16:21:00.249]         }, add = TRUE)
[16:21:00.249]     }
[16:21:00.249]     ...future.frame <- base::sys.nframe()
[16:21:00.249]     ...future.conditions <- base::list()
[16:21:00.249]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.249]     if (FALSE) {
[16:21:00.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.249]     }
[16:21:00.249]     ...future.result <- base::tryCatch({
[16:21:00.249]         base::withCallingHandlers({
[16:21:00.249]             ...future.value <- base::withVisible(base::local({
[16:21:00.249]                 ...future.makeSendCondition <- base::local({
[16:21:00.249]                   sendCondition <- NULL
[16:21:00.249]                   function(frame = 1L) {
[16:21:00.249]                     if (is.function(sendCondition)) 
[16:21:00.249]                       return(sendCondition)
[16:21:00.249]                     ns <- getNamespace("parallel")
[16:21:00.249]                     if (exists("sendData", mode = "function", 
[16:21:00.249]                       envir = ns)) {
[16:21:00.249]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.249]                         envir = ns)
[16:21:00.249]                       envir <- sys.frame(frame)
[16:21:00.249]                       master <- NULL
[16:21:00.249]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.249]                         !identical(envir, emptyenv())) {
[16:21:00.249]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.249]                           inherits = FALSE)) {
[16:21:00.249]                           master <- get("master", mode = "list", 
[16:21:00.249]                             envir = envir, inherits = FALSE)
[16:21:00.249]                           if (inherits(master, c("SOCKnode", 
[16:21:00.249]                             "SOCK0node"))) {
[16:21:00.249]                             sendCondition <<- function(cond) {
[16:21:00.249]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.249]                                 success = TRUE)
[16:21:00.249]                               parallel_sendData(master, data)
[16:21:00.249]                             }
[16:21:00.249]                             return(sendCondition)
[16:21:00.249]                           }
[16:21:00.249]                         }
[16:21:00.249]                         frame <- frame + 1L
[16:21:00.249]                         envir <- sys.frame(frame)
[16:21:00.249]                       }
[16:21:00.249]                     }
[16:21:00.249]                     sendCondition <<- function(cond) NULL
[16:21:00.249]                   }
[16:21:00.249]                 })
[16:21:00.249]                 withCallingHandlers({
[16:21:00.249]                   {
[16:21:00.249]                     x$a <- 1
[16:21:00.249]                     x
[16:21:00.249]                   }
[16:21:00.249]                 }, immediateCondition = function(cond) {
[16:21:00.249]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.249]                   sendCondition(cond)
[16:21:00.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.249]                   {
[16:21:00.249]                     inherits <- base::inherits
[16:21:00.249]                     invokeRestart <- base::invokeRestart
[16:21:00.249]                     is.null <- base::is.null
[16:21:00.249]                     muffled <- FALSE
[16:21:00.249]                     if (inherits(cond, "message")) {
[16:21:00.249]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.249]                       if (muffled) 
[16:21:00.249]                         invokeRestart("muffleMessage")
[16:21:00.249]                     }
[16:21:00.249]                     else if (inherits(cond, "warning")) {
[16:21:00.249]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.249]                       if (muffled) 
[16:21:00.249]                         invokeRestart("muffleWarning")
[16:21:00.249]                     }
[16:21:00.249]                     else if (inherits(cond, "condition")) {
[16:21:00.249]                       if (!is.null(pattern)) {
[16:21:00.249]                         computeRestarts <- base::computeRestarts
[16:21:00.249]                         grepl <- base::grepl
[16:21:00.249]                         restarts <- computeRestarts(cond)
[16:21:00.249]                         for (restart in restarts) {
[16:21:00.249]                           name <- restart$name
[16:21:00.249]                           if (is.null(name)) 
[16:21:00.249]                             next
[16:21:00.249]                           if (!grepl(pattern, name)) 
[16:21:00.249]                             next
[16:21:00.249]                           invokeRestart(restart)
[16:21:00.249]                           muffled <- TRUE
[16:21:00.249]                           break
[16:21:00.249]                         }
[16:21:00.249]                       }
[16:21:00.249]                     }
[16:21:00.249]                     invisible(muffled)
[16:21:00.249]                   }
[16:21:00.249]                   muffleCondition(cond)
[16:21:00.249]                 })
[16:21:00.249]             }))
[16:21:00.249]             future::FutureResult(value = ...future.value$value, 
[16:21:00.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.249]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.249]                     ...future.globalenv.names))
[16:21:00.249]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.249]         }, condition = base::local({
[16:21:00.249]             c <- base::c
[16:21:00.249]             inherits <- base::inherits
[16:21:00.249]             invokeRestart <- base::invokeRestart
[16:21:00.249]             length <- base::length
[16:21:00.249]             list <- base::list
[16:21:00.249]             seq.int <- base::seq.int
[16:21:00.249]             signalCondition <- base::signalCondition
[16:21:00.249]             sys.calls <- base::sys.calls
[16:21:00.249]             `[[` <- base::`[[`
[16:21:00.249]             `+` <- base::`+`
[16:21:00.249]             `<<-` <- base::`<<-`
[16:21:00.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.249]                   3L)]
[16:21:00.249]             }
[16:21:00.249]             function(cond) {
[16:21:00.249]                 is_error <- inherits(cond, "error")
[16:21:00.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.249]                   NULL)
[16:21:00.249]                 if (is_error) {
[16:21:00.249]                   sessionInformation <- function() {
[16:21:00.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.249]                       search = base::search(), system = base::Sys.info())
[16:21:00.249]                   }
[16:21:00.249]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.249]                     cond$call), session = sessionInformation(), 
[16:21:00.249]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.249]                   signalCondition(cond)
[16:21:00.249]                 }
[16:21:00.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.249]                 "immediateCondition"))) {
[16:21:00.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.249]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.249]                   if (TRUE && !signal) {
[16:21:00.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.249]                     {
[16:21:00.249]                       inherits <- base::inherits
[16:21:00.249]                       invokeRestart <- base::invokeRestart
[16:21:00.249]                       is.null <- base::is.null
[16:21:00.249]                       muffled <- FALSE
[16:21:00.249]                       if (inherits(cond, "message")) {
[16:21:00.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.249]                         if (muffled) 
[16:21:00.249]                           invokeRestart("muffleMessage")
[16:21:00.249]                       }
[16:21:00.249]                       else if (inherits(cond, "warning")) {
[16:21:00.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.249]                         if (muffled) 
[16:21:00.249]                           invokeRestart("muffleWarning")
[16:21:00.249]                       }
[16:21:00.249]                       else if (inherits(cond, "condition")) {
[16:21:00.249]                         if (!is.null(pattern)) {
[16:21:00.249]                           computeRestarts <- base::computeRestarts
[16:21:00.249]                           grepl <- base::grepl
[16:21:00.249]                           restarts <- computeRestarts(cond)
[16:21:00.249]                           for (restart in restarts) {
[16:21:00.249]                             name <- restart$name
[16:21:00.249]                             if (is.null(name)) 
[16:21:00.249]                               next
[16:21:00.249]                             if (!grepl(pattern, name)) 
[16:21:00.249]                               next
[16:21:00.249]                             invokeRestart(restart)
[16:21:00.249]                             muffled <- TRUE
[16:21:00.249]                             break
[16:21:00.249]                           }
[16:21:00.249]                         }
[16:21:00.249]                       }
[16:21:00.249]                       invisible(muffled)
[16:21:00.249]                     }
[16:21:00.249]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.249]                   }
[16:21:00.249]                 }
[16:21:00.249]                 else {
[16:21:00.249]                   if (TRUE) {
[16:21:00.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.249]                     {
[16:21:00.249]                       inherits <- base::inherits
[16:21:00.249]                       invokeRestart <- base::invokeRestart
[16:21:00.249]                       is.null <- base::is.null
[16:21:00.249]                       muffled <- FALSE
[16:21:00.249]                       if (inherits(cond, "message")) {
[16:21:00.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.249]                         if (muffled) 
[16:21:00.249]                           invokeRestart("muffleMessage")
[16:21:00.249]                       }
[16:21:00.249]                       else if (inherits(cond, "warning")) {
[16:21:00.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.249]                         if (muffled) 
[16:21:00.249]                           invokeRestart("muffleWarning")
[16:21:00.249]                       }
[16:21:00.249]                       else if (inherits(cond, "condition")) {
[16:21:00.249]                         if (!is.null(pattern)) {
[16:21:00.249]                           computeRestarts <- base::computeRestarts
[16:21:00.249]                           grepl <- base::grepl
[16:21:00.249]                           restarts <- computeRestarts(cond)
[16:21:00.249]                           for (restart in restarts) {
[16:21:00.249]                             name <- restart$name
[16:21:00.249]                             if (is.null(name)) 
[16:21:00.249]                               next
[16:21:00.249]                             if (!grepl(pattern, name)) 
[16:21:00.249]                               next
[16:21:00.249]                             invokeRestart(restart)
[16:21:00.249]                             muffled <- TRUE
[16:21:00.249]                             break
[16:21:00.249]                           }
[16:21:00.249]                         }
[16:21:00.249]                       }
[16:21:00.249]                       invisible(muffled)
[16:21:00.249]                     }
[16:21:00.249]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.249]                   }
[16:21:00.249]                 }
[16:21:00.249]             }
[16:21:00.249]         }))
[16:21:00.249]     }, error = function(ex) {
[16:21:00.249]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.249]                 ...future.rng), started = ...future.startTime, 
[16:21:00.249]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.249]             version = "1.8"), class = "FutureResult")
[16:21:00.249]     }, finally = {
[16:21:00.249]         if (!identical(...future.workdir, getwd())) 
[16:21:00.249]             setwd(...future.workdir)
[16:21:00.249]         {
[16:21:00.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.249]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.249]             }
[16:21:00.249]             base::options(...future.oldOptions)
[16:21:00.249]             if (.Platform$OS.type == "windows") {
[16:21:00.249]                 old_names <- names(...future.oldEnvVars)
[16:21:00.249]                 envs <- base::Sys.getenv()
[16:21:00.249]                 names <- names(envs)
[16:21:00.249]                 common <- intersect(names, old_names)
[16:21:00.249]                 added <- setdiff(names, old_names)
[16:21:00.249]                 removed <- setdiff(old_names, names)
[16:21:00.249]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.249]                   envs[common]]
[16:21:00.249]                 NAMES <- toupper(changed)
[16:21:00.249]                 args <- list()
[16:21:00.249]                 for (kk in seq_along(NAMES)) {
[16:21:00.249]                   name <- changed[[kk]]
[16:21:00.249]                   NAME <- NAMES[[kk]]
[16:21:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.249]                     next
[16:21:00.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.249]                 }
[16:21:00.249]                 NAMES <- toupper(added)
[16:21:00.249]                 for (kk in seq_along(NAMES)) {
[16:21:00.249]                   name <- added[[kk]]
[16:21:00.249]                   NAME <- NAMES[[kk]]
[16:21:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.249]                     next
[16:21:00.249]                   args[[name]] <- ""
[16:21:00.249]                 }
[16:21:00.249]                 NAMES <- toupper(removed)
[16:21:00.249]                 for (kk in seq_along(NAMES)) {
[16:21:00.249]                   name <- removed[[kk]]
[16:21:00.249]                   NAME <- NAMES[[kk]]
[16:21:00.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.249]                     next
[16:21:00.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.249]                 }
[16:21:00.249]                 if (length(args) > 0) 
[16:21:00.249]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.249]             }
[16:21:00.249]             else {
[16:21:00.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.249]             }
[16:21:00.249]             {
[16:21:00.249]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.249]                   0L) {
[16:21:00.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.249]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.249]                   base::options(opts)
[16:21:00.249]                 }
[16:21:00.249]                 {
[16:21:00.249]                   {
[16:21:00.249]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.249]                     NULL
[16:21:00.249]                   }
[16:21:00.249]                   options(future.plan = NULL)
[16:21:00.249]                   if (is.na(NA_character_)) 
[16:21:00.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.249]                     .init = FALSE)
[16:21:00.249]                 }
[16:21:00.249]             }
[16:21:00.249]         }
[16:21:00.249]     })
[16:21:00.249]     if (TRUE) {
[16:21:00.249]         base::sink(type = "output", split = FALSE)
[16:21:00.249]         if (TRUE) {
[16:21:00.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.249]         }
[16:21:00.249]         else {
[16:21:00.249]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.249]         }
[16:21:00.249]         base::close(...future.stdout)
[16:21:00.249]         ...future.stdout <- NULL
[16:21:00.249]     }
[16:21:00.249]     ...future.result$conditions <- ...future.conditions
[16:21:00.249]     ...future.result$finished <- base::Sys.time()
[16:21:00.249]     ...future.result
[16:21:00.249] }
[16:21:00.252] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.252] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.253] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.253] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.254] MultisessionFuture started
[16:21:00.254] - Launch lazy future ... done
[16:21:00.254] run() for ‘MultisessionFuture’ ... done
[16:21:00.254] result() for ClusterFuture ...
[16:21:00.254] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.255] - Validating connection of MultisessionFuture
[16:21:00.259] - received message: FutureResult
[16:21:00.259] - Received FutureResult
[16:21:00.259] - Erased future from FutureRegistry
[16:21:00.259] result() for ClusterFuture ...
[16:21:00.259] - result already collected: FutureResult
[16:21:00.260] result() for ClusterFuture ... done
[16:21:00.260] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.260] result() for ClusterFuture ... done
[16:21:00.260] result() for ClusterFuture ...
[16:21:00.260] - result already collected: FutureResult
[16:21:00.260] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.261] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.261] Searching for globals...
[16:21:00.263] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.263] Searching for globals ... DONE
[16:21:00.264] Resolving globals: TRUE
[16:21:00.264] Resolving any globals that are futures ...
[16:21:00.264] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.264] Resolving any globals that are futures ... DONE
[16:21:00.264] Resolving futures part of globals (recursively) ...
[16:21:00.265] resolve() on list ...
[16:21:00.265]  recursive: 99
[16:21:00.265]  length: 1
[16:21:00.265]  elements: ‘x’
[16:21:00.265]  length: 0 (resolved future 1)
[16:21:00.265] resolve() on list ... DONE
[16:21:00.265] - globals: [1] ‘x’
[16:21:00.266] Resolving futures part of globals (recursively) ... DONE
[16:21:00.266] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.266] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.266] - globals: [1] ‘x’
[16:21:00.266] 
[16:21:00.267] getGlobalsAndPackages() ... DONE
[16:21:00.267] run() for ‘Future’ ...
[16:21:00.267] - state: ‘created’
[16:21:00.267] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.282] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.282] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.282]   - Field: ‘node’
[16:21:00.282]   - Field: ‘label’
[16:21:00.282]   - Field: ‘local’
[16:21:00.282]   - Field: ‘owner’
[16:21:00.282]   - Field: ‘envir’
[16:21:00.282]   - Field: ‘workers’
[16:21:00.282]   - Field: ‘packages’
[16:21:00.282]   - Field: ‘gc’
[16:21:00.283]   - Field: ‘conditions’
[16:21:00.283]   - Field: ‘persistent’
[16:21:00.283]   - Field: ‘expr’
[16:21:00.283]   - Field: ‘uuid’
[16:21:00.283]   - Field: ‘seed’
[16:21:00.283]   - Field: ‘version’
[16:21:00.283]   - Field: ‘result’
[16:21:00.283]   - Field: ‘asynchronous’
[16:21:00.284]   - Field: ‘calls’
[16:21:00.284]   - Field: ‘globals’
[16:21:00.284]   - Field: ‘stdout’
[16:21:00.284]   - Field: ‘earlySignal’
[16:21:00.284]   - Field: ‘lazy’
[16:21:00.284]   - Field: ‘state’
[16:21:00.284] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.285] - Launch lazy future ...
[16:21:00.285] Packages needed by the future expression (n = 0): <none>
[16:21:00.285] Packages needed by future strategies (n = 0): <none>
[16:21:00.285] {
[16:21:00.285]     {
[16:21:00.285]         {
[16:21:00.285]             ...future.startTime <- base::Sys.time()
[16:21:00.285]             {
[16:21:00.285]                 {
[16:21:00.285]                   {
[16:21:00.285]                     {
[16:21:00.285]                       base::local({
[16:21:00.285]                         has_future <- base::requireNamespace("future", 
[16:21:00.285]                           quietly = TRUE)
[16:21:00.285]                         if (has_future) {
[16:21:00.285]                           ns <- base::getNamespace("future")
[16:21:00.285]                           version <- ns[[".package"]][["version"]]
[16:21:00.285]                           if (is.null(version)) 
[16:21:00.285]                             version <- utils::packageVersion("future")
[16:21:00.285]                         }
[16:21:00.285]                         else {
[16:21:00.285]                           version <- NULL
[16:21:00.285]                         }
[16:21:00.285]                         if (!has_future || version < "1.8.0") {
[16:21:00.285]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.285]                             "", base::R.version$version.string), 
[16:21:00.285]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.285]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.285]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.285]                               "release", "version")], collapse = " "), 
[16:21:00.285]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.285]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.285]                             info)
[16:21:00.285]                           info <- base::paste(info, collapse = "; ")
[16:21:00.285]                           if (!has_future) {
[16:21:00.285]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.285]                               info)
[16:21:00.285]                           }
[16:21:00.285]                           else {
[16:21:00.285]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.285]                               info, version)
[16:21:00.285]                           }
[16:21:00.285]                           base::stop(msg)
[16:21:00.285]                         }
[16:21:00.285]                       })
[16:21:00.285]                     }
[16:21:00.285]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.285]                     base::options(mc.cores = 1L)
[16:21:00.285]                   }
[16:21:00.285]                   ...future.strategy.old <- future::plan("list")
[16:21:00.285]                   options(future.plan = NULL)
[16:21:00.285]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.285]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.285]                 }
[16:21:00.285]                 ...future.workdir <- getwd()
[16:21:00.285]             }
[16:21:00.285]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.285]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.285]         }
[16:21:00.285]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.285]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.285]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.285]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.285]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.285]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.285]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.285]             base::names(...future.oldOptions))
[16:21:00.285]     }
[16:21:00.285]     if (FALSE) {
[16:21:00.285]     }
[16:21:00.285]     else {
[16:21:00.285]         if (TRUE) {
[16:21:00.285]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.285]                 open = "w")
[16:21:00.285]         }
[16:21:00.285]         else {
[16:21:00.285]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.285]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.285]         }
[16:21:00.285]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.285]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.285]             base::sink(type = "output", split = FALSE)
[16:21:00.285]             base::close(...future.stdout)
[16:21:00.285]         }, add = TRUE)
[16:21:00.285]     }
[16:21:00.285]     ...future.frame <- base::sys.nframe()
[16:21:00.285]     ...future.conditions <- base::list()
[16:21:00.285]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.285]     if (FALSE) {
[16:21:00.285]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.285]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.285]     }
[16:21:00.285]     ...future.result <- base::tryCatch({
[16:21:00.285]         base::withCallingHandlers({
[16:21:00.285]             ...future.value <- base::withVisible(base::local({
[16:21:00.285]                 ...future.makeSendCondition <- base::local({
[16:21:00.285]                   sendCondition <- NULL
[16:21:00.285]                   function(frame = 1L) {
[16:21:00.285]                     if (is.function(sendCondition)) 
[16:21:00.285]                       return(sendCondition)
[16:21:00.285]                     ns <- getNamespace("parallel")
[16:21:00.285]                     if (exists("sendData", mode = "function", 
[16:21:00.285]                       envir = ns)) {
[16:21:00.285]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.285]                         envir = ns)
[16:21:00.285]                       envir <- sys.frame(frame)
[16:21:00.285]                       master <- NULL
[16:21:00.285]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.285]                         !identical(envir, emptyenv())) {
[16:21:00.285]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.285]                           inherits = FALSE)) {
[16:21:00.285]                           master <- get("master", mode = "list", 
[16:21:00.285]                             envir = envir, inherits = FALSE)
[16:21:00.285]                           if (inherits(master, c("SOCKnode", 
[16:21:00.285]                             "SOCK0node"))) {
[16:21:00.285]                             sendCondition <<- function(cond) {
[16:21:00.285]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.285]                                 success = TRUE)
[16:21:00.285]                               parallel_sendData(master, data)
[16:21:00.285]                             }
[16:21:00.285]                             return(sendCondition)
[16:21:00.285]                           }
[16:21:00.285]                         }
[16:21:00.285]                         frame <- frame + 1L
[16:21:00.285]                         envir <- sys.frame(frame)
[16:21:00.285]                       }
[16:21:00.285]                     }
[16:21:00.285]                     sendCondition <<- function(cond) NULL
[16:21:00.285]                   }
[16:21:00.285]                 })
[16:21:00.285]                 withCallingHandlers({
[16:21:00.285]                   {
[16:21:00.285]                     x$a <- 1
[16:21:00.285]                     x
[16:21:00.285]                   }
[16:21:00.285]                 }, immediateCondition = function(cond) {
[16:21:00.285]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.285]                   sendCondition(cond)
[16:21:00.285]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.285]                   {
[16:21:00.285]                     inherits <- base::inherits
[16:21:00.285]                     invokeRestart <- base::invokeRestart
[16:21:00.285]                     is.null <- base::is.null
[16:21:00.285]                     muffled <- FALSE
[16:21:00.285]                     if (inherits(cond, "message")) {
[16:21:00.285]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.285]                       if (muffled) 
[16:21:00.285]                         invokeRestart("muffleMessage")
[16:21:00.285]                     }
[16:21:00.285]                     else if (inherits(cond, "warning")) {
[16:21:00.285]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.285]                       if (muffled) 
[16:21:00.285]                         invokeRestart("muffleWarning")
[16:21:00.285]                     }
[16:21:00.285]                     else if (inherits(cond, "condition")) {
[16:21:00.285]                       if (!is.null(pattern)) {
[16:21:00.285]                         computeRestarts <- base::computeRestarts
[16:21:00.285]                         grepl <- base::grepl
[16:21:00.285]                         restarts <- computeRestarts(cond)
[16:21:00.285]                         for (restart in restarts) {
[16:21:00.285]                           name <- restart$name
[16:21:00.285]                           if (is.null(name)) 
[16:21:00.285]                             next
[16:21:00.285]                           if (!grepl(pattern, name)) 
[16:21:00.285]                             next
[16:21:00.285]                           invokeRestart(restart)
[16:21:00.285]                           muffled <- TRUE
[16:21:00.285]                           break
[16:21:00.285]                         }
[16:21:00.285]                       }
[16:21:00.285]                     }
[16:21:00.285]                     invisible(muffled)
[16:21:00.285]                   }
[16:21:00.285]                   muffleCondition(cond)
[16:21:00.285]                 })
[16:21:00.285]             }))
[16:21:00.285]             future::FutureResult(value = ...future.value$value, 
[16:21:00.285]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.285]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.285]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.285]                     ...future.globalenv.names))
[16:21:00.285]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.285]         }, condition = base::local({
[16:21:00.285]             c <- base::c
[16:21:00.285]             inherits <- base::inherits
[16:21:00.285]             invokeRestart <- base::invokeRestart
[16:21:00.285]             length <- base::length
[16:21:00.285]             list <- base::list
[16:21:00.285]             seq.int <- base::seq.int
[16:21:00.285]             signalCondition <- base::signalCondition
[16:21:00.285]             sys.calls <- base::sys.calls
[16:21:00.285]             `[[` <- base::`[[`
[16:21:00.285]             `+` <- base::`+`
[16:21:00.285]             `<<-` <- base::`<<-`
[16:21:00.285]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.285]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.285]                   3L)]
[16:21:00.285]             }
[16:21:00.285]             function(cond) {
[16:21:00.285]                 is_error <- inherits(cond, "error")
[16:21:00.285]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.285]                   NULL)
[16:21:00.285]                 if (is_error) {
[16:21:00.285]                   sessionInformation <- function() {
[16:21:00.285]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.285]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.285]                       search = base::search(), system = base::Sys.info())
[16:21:00.285]                   }
[16:21:00.285]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.285]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.285]                     cond$call), session = sessionInformation(), 
[16:21:00.285]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.285]                   signalCondition(cond)
[16:21:00.285]                 }
[16:21:00.285]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.285]                 "immediateCondition"))) {
[16:21:00.285]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.285]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.285]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.285]                   if (TRUE && !signal) {
[16:21:00.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.285]                     {
[16:21:00.285]                       inherits <- base::inherits
[16:21:00.285]                       invokeRestart <- base::invokeRestart
[16:21:00.285]                       is.null <- base::is.null
[16:21:00.285]                       muffled <- FALSE
[16:21:00.285]                       if (inherits(cond, "message")) {
[16:21:00.285]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.285]                         if (muffled) 
[16:21:00.285]                           invokeRestart("muffleMessage")
[16:21:00.285]                       }
[16:21:00.285]                       else if (inherits(cond, "warning")) {
[16:21:00.285]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.285]                         if (muffled) 
[16:21:00.285]                           invokeRestart("muffleWarning")
[16:21:00.285]                       }
[16:21:00.285]                       else if (inherits(cond, "condition")) {
[16:21:00.285]                         if (!is.null(pattern)) {
[16:21:00.285]                           computeRestarts <- base::computeRestarts
[16:21:00.285]                           grepl <- base::grepl
[16:21:00.285]                           restarts <- computeRestarts(cond)
[16:21:00.285]                           for (restart in restarts) {
[16:21:00.285]                             name <- restart$name
[16:21:00.285]                             if (is.null(name)) 
[16:21:00.285]                               next
[16:21:00.285]                             if (!grepl(pattern, name)) 
[16:21:00.285]                               next
[16:21:00.285]                             invokeRestart(restart)
[16:21:00.285]                             muffled <- TRUE
[16:21:00.285]                             break
[16:21:00.285]                           }
[16:21:00.285]                         }
[16:21:00.285]                       }
[16:21:00.285]                       invisible(muffled)
[16:21:00.285]                     }
[16:21:00.285]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.285]                   }
[16:21:00.285]                 }
[16:21:00.285]                 else {
[16:21:00.285]                   if (TRUE) {
[16:21:00.285]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.285]                     {
[16:21:00.285]                       inherits <- base::inherits
[16:21:00.285]                       invokeRestart <- base::invokeRestart
[16:21:00.285]                       is.null <- base::is.null
[16:21:00.285]                       muffled <- FALSE
[16:21:00.285]                       if (inherits(cond, "message")) {
[16:21:00.285]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.285]                         if (muffled) 
[16:21:00.285]                           invokeRestart("muffleMessage")
[16:21:00.285]                       }
[16:21:00.285]                       else if (inherits(cond, "warning")) {
[16:21:00.285]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.285]                         if (muffled) 
[16:21:00.285]                           invokeRestart("muffleWarning")
[16:21:00.285]                       }
[16:21:00.285]                       else if (inherits(cond, "condition")) {
[16:21:00.285]                         if (!is.null(pattern)) {
[16:21:00.285]                           computeRestarts <- base::computeRestarts
[16:21:00.285]                           grepl <- base::grepl
[16:21:00.285]                           restarts <- computeRestarts(cond)
[16:21:00.285]                           for (restart in restarts) {
[16:21:00.285]                             name <- restart$name
[16:21:00.285]                             if (is.null(name)) 
[16:21:00.285]                               next
[16:21:00.285]                             if (!grepl(pattern, name)) 
[16:21:00.285]                               next
[16:21:00.285]                             invokeRestart(restart)
[16:21:00.285]                             muffled <- TRUE
[16:21:00.285]                             break
[16:21:00.285]                           }
[16:21:00.285]                         }
[16:21:00.285]                       }
[16:21:00.285]                       invisible(muffled)
[16:21:00.285]                     }
[16:21:00.285]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.285]                   }
[16:21:00.285]                 }
[16:21:00.285]             }
[16:21:00.285]         }))
[16:21:00.285]     }, error = function(ex) {
[16:21:00.285]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.285]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.285]                 ...future.rng), started = ...future.startTime, 
[16:21:00.285]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.285]             version = "1.8"), class = "FutureResult")
[16:21:00.285]     }, finally = {
[16:21:00.285]         if (!identical(...future.workdir, getwd())) 
[16:21:00.285]             setwd(...future.workdir)
[16:21:00.285]         {
[16:21:00.285]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.285]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.285]             }
[16:21:00.285]             base::options(...future.oldOptions)
[16:21:00.285]             if (.Platform$OS.type == "windows") {
[16:21:00.285]                 old_names <- names(...future.oldEnvVars)
[16:21:00.285]                 envs <- base::Sys.getenv()
[16:21:00.285]                 names <- names(envs)
[16:21:00.285]                 common <- intersect(names, old_names)
[16:21:00.285]                 added <- setdiff(names, old_names)
[16:21:00.285]                 removed <- setdiff(old_names, names)
[16:21:00.285]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.285]                   envs[common]]
[16:21:00.285]                 NAMES <- toupper(changed)
[16:21:00.285]                 args <- list()
[16:21:00.285]                 for (kk in seq_along(NAMES)) {
[16:21:00.285]                   name <- changed[[kk]]
[16:21:00.285]                   NAME <- NAMES[[kk]]
[16:21:00.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.285]                     next
[16:21:00.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.285]                 }
[16:21:00.285]                 NAMES <- toupper(added)
[16:21:00.285]                 for (kk in seq_along(NAMES)) {
[16:21:00.285]                   name <- added[[kk]]
[16:21:00.285]                   NAME <- NAMES[[kk]]
[16:21:00.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.285]                     next
[16:21:00.285]                   args[[name]] <- ""
[16:21:00.285]                 }
[16:21:00.285]                 NAMES <- toupper(removed)
[16:21:00.285]                 for (kk in seq_along(NAMES)) {
[16:21:00.285]                   name <- removed[[kk]]
[16:21:00.285]                   NAME <- NAMES[[kk]]
[16:21:00.285]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.285]                     next
[16:21:00.285]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.285]                 }
[16:21:00.285]                 if (length(args) > 0) 
[16:21:00.285]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.285]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.285]             }
[16:21:00.285]             else {
[16:21:00.285]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.285]             }
[16:21:00.285]             {
[16:21:00.285]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.285]                   0L) {
[16:21:00.285]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.285]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.285]                   base::options(opts)
[16:21:00.285]                 }
[16:21:00.285]                 {
[16:21:00.285]                   {
[16:21:00.285]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.285]                     NULL
[16:21:00.285]                   }
[16:21:00.285]                   options(future.plan = NULL)
[16:21:00.285]                   if (is.na(NA_character_)) 
[16:21:00.285]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.285]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.285]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.285]                     .init = FALSE)
[16:21:00.285]                 }
[16:21:00.285]             }
[16:21:00.285]         }
[16:21:00.285]     })
[16:21:00.285]     if (TRUE) {
[16:21:00.285]         base::sink(type = "output", split = FALSE)
[16:21:00.285]         if (TRUE) {
[16:21:00.285]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.285]         }
[16:21:00.285]         else {
[16:21:00.285]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.285]         }
[16:21:00.285]         base::close(...future.stdout)
[16:21:00.285]         ...future.stdout <- NULL
[16:21:00.285]     }
[16:21:00.285]     ...future.result$conditions <- ...future.conditions
[16:21:00.285]     ...future.result$finished <- base::Sys.time()
[16:21:00.285]     ...future.result
[16:21:00.285] }
[16:21:00.288] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.289] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.289] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.289] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.290] MultisessionFuture started
[16:21:00.290] - Launch lazy future ... done
[16:21:00.290] run() for ‘MultisessionFuture’ ... done
[16:21:00.290] result() for ClusterFuture ...
[16:21:00.291] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.291] - Validating connection of MultisessionFuture
[16:21:00.292] - received message: FutureResult
[16:21:00.292] - Received FutureResult
[16:21:00.292] - Erased future from FutureRegistry
[16:21:00.292] result() for ClusterFuture ...
[16:21:00.292] - result already collected: FutureResult
[16:21:00.292] result() for ClusterFuture ... done
[16:21:00.293] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.293] result() for ClusterFuture ... done
[16:21:00.293] result() for ClusterFuture ...
[16:21:00.293] - result already collected: FutureResult
[16:21:00.293] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.294] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.294] Searching for globals...
[16:21:00.296] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.296] Searching for globals ... DONE
[16:21:00.297] Resolving globals: TRUE
[16:21:00.297] Resolving any globals that are futures ...
[16:21:00.297] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.297] Resolving any globals that are futures ... DONE
[16:21:00.297] Resolving futures part of globals (recursively) ...
[16:21:00.298] resolve() on list ...
[16:21:00.298]  recursive: 99
[16:21:00.298]  length: 1
[16:21:00.298]  elements: ‘x’
[16:21:00.298]  length: 0 (resolved future 1)
[16:21:00.298] resolve() on list ... DONE
[16:21:00.298] - globals: [1] ‘x’
[16:21:00.299] Resolving futures part of globals (recursively) ... DONE
[16:21:00.299] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.299] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.299] - globals: [1] ‘x’
[16:21:00.299] 
[16:21:00.299] getGlobalsAndPackages() ... DONE
[16:21:00.300] run() for ‘Future’ ...
[16:21:00.300] - state: ‘created’
[16:21:00.300] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.320] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.320] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.320]   - Field: ‘node’
[16:21:00.320]   - Field: ‘label’
[16:21:00.320]   - Field: ‘local’
[16:21:00.320]   - Field: ‘owner’
[16:21:00.321]   - Field: ‘envir’
[16:21:00.321]   - Field: ‘workers’
[16:21:00.321]   - Field: ‘packages’
[16:21:00.321]   - Field: ‘gc’
[16:21:00.321]   - Field: ‘conditions’
[16:21:00.321]   - Field: ‘persistent’
[16:21:00.321]   - Field: ‘expr’
[16:21:00.321]   - Field: ‘uuid’
[16:21:00.321]   - Field: ‘seed’
[16:21:00.321]   - Field: ‘version’
[16:21:00.321]   - Field: ‘result’
[16:21:00.322]   - Field: ‘asynchronous’
[16:21:00.322]   - Field: ‘calls’
[16:21:00.322]   - Field: ‘globals’
[16:21:00.322]   - Field: ‘stdout’
[16:21:00.322]   - Field: ‘earlySignal’
[16:21:00.322]   - Field: ‘lazy’
[16:21:00.322]   - Field: ‘state’
[16:21:00.322] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.322] - Launch lazy future ...
[16:21:00.323] Packages needed by the future expression (n = 0): <none>
[16:21:00.323] Packages needed by future strategies (n = 0): <none>
[16:21:00.323] {
[16:21:00.323]     {
[16:21:00.323]         {
[16:21:00.323]             ...future.startTime <- base::Sys.time()
[16:21:00.323]             {
[16:21:00.323]                 {
[16:21:00.323]                   {
[16:21:00.323]                     {
[16:21:00.323]                       base::local({
[16:21:00.323]                         has_future <- base::requireNamespace("future", 
[16:21:00.323]                           quietly = TRUE)
[16:21:00.323]                         if (has_future) {
[16:21:00.323]                           ns <- base::getNamespace("future")
[16:21:00.323]                           version <- ns[[".package"]][["version"]]
[16:21:00.323]                           if (is.null(version)) 
[16:21:00.323]                             version <- utils::packageVersion("future")
[16:21:00.323]                         }
[16:21:00.323]                         else {
[16:21:00.323]                           version <- NULL
[16:21:00.323]                         }
[16:21:00.323]                         if (!has_future || version < "1.8.0") {
[16:21:00.323]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.323]                             "", base::R.version$version.string), 
[16:21:00.323]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.323]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.323]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.323]                               "release", "version")], collapse = " "), 
[16:21:00.323]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.323]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.323]                             info)
[16:21:00.323]                           info <- base::paste(info, collapse = "; ")
[16:21:00.323]                           if (!has_future) {
[16:21:00.323]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.323]                               info)
[16:21:00.323]                           }
[16:21:00.323]                           else {
[16:21:00.323]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.323]                               info, version)
[16:21:00.323]                           }
[16:21:00.323]                           base::stop(msg)
[16:21:00.323]                         }
[16:21:00.323]                       })
[16:21:00.323]                     }
[16:21:00.323]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.323]                     base::options(mc.cores = 1L)
[16:21:00.323]                   }
[16:21:00.323]                   ...future.strategy.old <- future::plan("list")
[16:21:00.323]                   options(future.plan = NULL)
[16:21:00.323]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.323]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.323]                 }
[16:21:00.323]                 ...future.workdir <- getwd()
[16:21:00.323]             }
[16:21:00.323]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.323]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.323]         }
[16:21:00.323]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.323]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.323]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.323]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.323]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.323]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.323]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.323]             base::names(...future.oldOptions))
[16:21:00.323]     }
[16:21:00.323]     if (FALSE) {
[16:21:00.323]     }
[16:21:00.323]     else {
[16:21:00.323]         if (TRUE) {
[16:21:00.323]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.323]                 open = "w")
[16:21:00.323]         }
[16:21:00.323]         else {
[16:21:00.323]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.323]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.323]         }
[16:21:00.323]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.323]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.323]             base::sink(type = "output", split = FALSE)
[16:21:00.323]             base::close(...future.stdout)
[16:21:00.323]         }, add = TRUE)
[16:21:00.323]     }
[16:21:00.323]     ...future.frame <- base::sys.nframe()
[16:21:00.323]     ...future.conditions <- base::list()
[16:21:00.323]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.323]     if (FALSE) {
[16:21:00.323]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.323]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.323]     }
[16:21:00.323]     ...future.result <- base::tryCatch({
[16:21:00.323]         base::withCallingHandlers({
[16:21:00.323]             ...future.value <- base::withVisible(base::local({
[16:21:00.323]                 ...future.makeSendCondition <- base::local({
[16:21:00.323]                   sendCondition <- NULL
[16:21:00.323]                   function(frame = 1L) {
[16:21:00.323]                     if (is.function(sendCondition)) 
[16:21:00.323]                       return(sendCondition)
[16:21:00.323]                     ns <- getNamespace("parallel")
[16:21:00.323]                     if (exists("sendData", mode = "function", 
[16:21:00.323]                       envir = ns)) {
[16:21:00.323]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.323]                         envir = ns)
[16:21:00.323]                       envir <- sys.frame(frame)
[16:21:00.323]                       master <- NULL
[16:21:00.323]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.323]                         !identical(envir, emptyenv())) {
[16:21:00.323]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.323]                           inherits = FALSE)) {
[16:21:00.323]                           master <- get("master", mode = "list", 
[16:21:00.323]                             envir = envir, inherits = FALSE)
[16:21:00.323]                           if (inherits(master, c("SOCKnode", 
[16:21:00.323]                             "SOCK0node"))) {
[16:21:00.323]                             sendCondition <<- function(cond) {
[16:21:00.323]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.323]                                 success = TRUE)
[16:21:00.323]                               parallel_sendData(master, data)
[16:21:00.323]                             }
[16:21:00.323]                             return(sendCondition)
[16:21:00.323]                           }
[16:21:00.323]                         }
[16:21:00.323]                         frame <- frame + 1L
[16:21:00.323]                         envir <- sys.frame(frame)
[16:21:00.323]                       }
[16:21:00.323]                     }
[16:21:00.323]                     sendCondition <<- function(cond) NULL
[16:21:00.323]                   }
[16:21:00.323]                 })
[16:21:00.323]                 withCallingHandlers({
[16:21:00.323]                   {
[16:21:00.323]                     x$a <- 1
[16:21:00.323]                     x
[16:21:00.323]                   }
[16:21:00.323]                 }, immediateCondition = function(cond) {
[16:21:00.323]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.323]                   sendCondition(cond)
[16:21:00.323]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.323]                   {
[16:21:00.323]                     inherits <- base::inherits
[16:21:00.323]                     invokeRestart <- base::invokeRestart
[16:21:00.323]                     is.null <- base::is.null
[16:21:00.323]                     muffled <- FALSE
[16:21:00.323]                     if (inherits(cond, "message")) {
[16:21:00.323]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.323]                       if (muffled) 
[16:21:00.323]                         invokeRestart("muffleMessage")
[16:21:00.323]                     }
[16:21:00.323]                     else if (inherits(cond, "warning")) {
[16:21:00.323]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.323]                       if (muffled) 
[16:21:00.323]                         invokeRestart("muffleWarning")
[16:21:00.323]                     }
[16:21:00.323]                     else if (inherits(cond, "condition")) {
[16:21:00.323]                       if (!is.null(pattern)) {
[16:21:00.323]                         computeRestarts <- base::computeRestarts
[16:21:00.323]                         grepl <- base::grepl
[16:21:00.323]                         restarts <- computeRestarts(cond)
[16:21:00.323]                         for (restart in restarts) {
[16:21:00.323]                           name <- restart$name
[16:21:00.323]                           if (is.null(name)) 
[16:21:00.323]                             next
[16:21:00.323]                           if (!grepl(pattern, name)) 
[16:21:00.323]                             next
[16:21:00.323]                           invokeRestart(restart)
[16:21:00.323]                           muffled <- TRUE
[16:21:00.323]                           break
[16:21:00.323]                         }
[16:21:00.323]                       }
[16:21:00.323]                     }
[16:21:00.323]                     invisible(muffled)
[16:21:00.323]                   }
[16:21:00.323]                   muffleCondition(cond)
[16:21:00.323]                 })
[16:21:00.323]             }))
[16:21:00.323]             future::FutureResult(value = ...future.value$value, 
[16:21:00.323]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.323]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.323]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.323]                     ...future.globalenv.names))
[16:21:00.323]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.323]         }, condition = base::local({
[16:21:00.323]             c <- base::c
[16:21:00.323]             inherits <- base::inherits
[16:21:00.323]             invokeRestart <- base::invokeRestart
[16:21:00.323]             length <- base::length
[16:21:00.323]             list <- base::list
[16:21:00.323]             seq.int <- base::seq.int
[16:21:00.323]             signalCondition <- base::signalCondition
[16:21:00.323]             sys.calls <- base::sys.calls
[16:21:00.323]             `[[` <- base::`[[`
[16:21:00.323]             `+` <- base::`+`
[16:21:00.323]             `<<-` <- base::`<<-`
[16:21:00.323]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.323]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.323]                   3L)]
[16:21:00.323]             }
[16:21:00.323]             function(cond) {
[16:21:00.323]                 is_error <- inherits(cond, "error")
[16:21:00.323]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.323]                   NULL)
[16:21:00.323]                 if (is_error) {
[16:21:00.323]                   sessionInformation <- function() {
[16:21:00.323]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.323]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.323]                       search = base::search(), system = base::Sys.info())
[16:21:00.323]                   }
[16:21:00.323]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.323]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.323]                     cond$call), session = sessionInformation(), 
[16:21:00.323]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.323]                   signalCondition(cond)
[16:21:00.323]                 }
[16:21:00.323]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.323]                 "immediateCondition"))) {
[16:21:00.323]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.323]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.323]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.323]                   if (TRUE && !signal) {
[16:21:00.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.323]                     {
[16:21:00.323]                       inherits <- base::inherits
[16:21:00.323]                       invokeRestart <- base::invokeRestart
[16:21:00.323]                       is.null <- base::is.null
[16:21:00.323]                       muffled <- FALSE
[16:21:00.323]                       if (inherits(cond, "message")) {
[16:21:00.323]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.323]                         if (muffled) 
[16:21:00.323]                           invokeRestart("muffleMessage")
[16:21:00.323]                       }
[16:21:00.323]                       else if (inherits(cond, "warning")) {
[16:21:00.323]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.323]                         if (muffled) 
[16:21:00.323]                           invokeRestart("muffleWarning")
[16:21:00.323]                       }
[16:21:00.323]                       else if (inherits(cond, "condition")) {
[16:21:00.323]                         if (!is.null(pattern)) {
[16:21:00.323]                           computeRestarts <- base::computeRestarts
[16:21:00.323]                           grepl <- base::grepl
[16:21:00.323]                           restarts <- computeRestarts(cond)
[16:21:00.323]                           for (restart in restarts) {
[16:21:00.323]                             name <- restart$name
[16:21:00.323]                             if (is.null(name)) 
[16:21:00.323]                               next
[16:21:00.323]                             if (!grepl(pattern, name)) 
[16:21:00.323]                               next
[16:21:00.323]                             invokeRestart(restart)
[16:21:00.323]                             muffled <- TRUE
[16:21:00.323]                             break
[16:21:00.323]                           }
[16:21:00.323]                         }
[16:21:00.323]                       }
[16:21:00.323]                       invisible(muffled)
[16:21:00.323]                     }
[16:21:00.323]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.323]                   }
[16:21:00.323]                 }
[16:21:00.323]                 else {
[16:21:00.323]                   if (TRUE) {
[16:21:00.323]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.323]                     {
[16:21:00.323]                       inherits <- base::inherits
[16:21:00.323]                       invokeRestart <- base::invokeRestart
[16:21:00.323]                       is.null <- base::is.null
[16:21:00.323]                       muffled <- FALSE
[16:21:00.323]                       if (inherits(cond, "message")) {
[16:21:00.323]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.323]                         if (muffled) 
[16:21:00.323]                           invokeRestart("muffleMessage")
[16:21:00.323]                       }
[16:21:00.323]                       else if (inherits(cond, "warning")) {
[16:21:00.323]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.323]                         if (muffled) 
[16:21:00.323]                           invokeRestart("muffleWarning")
[16:21:00.323]                       }
[16:21:00.323]                       else if (inherits(cond, "condition")) {
[16:21:00.323]                         if (!is.null(pattern)) {
[16:21:00.323]                           computeRestarts <- base::computeRestarts
[16:21:00.323]                           grepl <- base::grepl
[16:21:00.323]                           restarts <- computeRestarts(cond)
[16:21:00.323]                           for (restart in restarts) {
[16:21:00.323]                             name <- restart$name
[16:21:00.323]                             if (is.null(name)) 
[16:21:00.323]                               next
[16:21:00.323]                             if (!grepl(pattern, name)) 
[16:21:00.323]                               next
[16:21:00.323]                             invokeRestart(restart)
[16:21:00.323]                             muffled <- TRUE
[16:21:00.323]                             break
[16:21:00.323]                           }
[16:21:00.323]                         }
[16:21:00.323]                       }
[16:21:00.323]                       invisible(muffled)
[16:21:00.323]                     }
[16:21:00.323]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.323]                   }
[16:21:00.323]                 }
[16:21:00.323]             }
[16:21:00.323]         }))
[16:21:00.323]     }, error = function(ex) {
[16:21:00.323]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.323]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.323]                 ...future.rng), started = ...future.startTime, 
[16:21:00.323]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.323]             version = "1.8"), class = "FutureResult")
[16:21:00.323]     }, finally = {
[16:21:00.323]         if (!identical(...future.workdir, getwd())) 
[16:21:00.323]             setwd(...future.workdir)
[16:21:00.323]         {
[16:21:00.323]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.323]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.323]             }
[16:21:00.323]             base::options(...future.oldOptions)
[16:21:00.323]             if (.Platform$OS.type == "windows") {
[16:21:00.323]                 old_names <- names(...future.oldEnvVars)
[16:21:00.323]                 envs <- base::Sys.getenv()
[16:21:00.323]                 names <- names(envs)
[16:21:00.323]                 common <- intersect(names, old_names)
[16:21:00.323]                 added <- setdiff(names, old_names)
[16:21:00.323]                 removed <- setdiff(old_names, names)
[16:21:00.323]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.323]                   envs[common]]
[16:21:00.323]                 NAMES <- toupper(changed)
[16:21:00.323]                 args <- list()
[16:21:00.323]                 for (kk in seq_along(NAMES)) {
[16:21:00.323]                   name <- changed[[kk]]
[16:21:00.323]                   NAME <- NAMES[[kk]]
[16:21:00.323]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.323]                     next
[16:21:00.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.323]                 }
[16:21:00.323]                 NAMES <- toupper(added)
[16:21:00.323]                 for (kk in seq_along(NAMES)) {
[16:21:00.323]                   name <- added[[kk]]
[16:21:00.323]                   NAME <- NAMES[[kk]]
[16:21:00.323]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.323]                     next
[16:21:00.323]                   args[[name]] <- ""
[16:21:00.323]                 }
[16:21:00.323]                 NAMES <- toupper(removed)
[16:21:00.323]                 for (kk in seq_along(NAMES)) {
[16:21:00.323]                   name <- removed[[kk]]
[16:21:00.323]                   NAME <- NAMES[[kk]]
[16:21:00.323]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.323]                     next
[16:21:00.323]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.323]                 }
[16:21:00.323]                 if (length(args) > 0) 
[16:21:00.323]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.323]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.323]             }
[16:21:00.323]             else {
[16:21:00.323]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.323]             }
[16:21:00.323]             {
[16:21:00.323]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.323]                   0L) {
[16:21:00.323]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.323]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.323]                   base::options(opts)
[16:21:00.323]                 }
[16:21:00.323]                 {
[16:21:00.323]                   {
[16:21:00.323]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.323]                     NULL
[16:21:00.323]                   }
[16:21:00.323]                   options(future.plan = NULL)
[16:21:00.323]                   if (is.na(NA_character_)) 
[16:21:00.323]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.323]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.323]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.323]                     .init = FALSE)
[16:21:00.323]                 }
[16:21:00.323]             }
[16:21:00.323]         }
[16:21:00.323]     })
[16:21:00.323]     if (TRUE) {
[16:21:00.323]         base::sink(type = "output", split = FALSE)
[16:21:00.323]         if (TRUE) {
[16:21:00.323]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.323]         }
[16:21:00.323]         else {
[16:21:00.323]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.323]         }
[16:21:00.323]         base::close(...future.stdout)
[16:21:00.323]         ...future.stdout <- NULL
[16:21:00.323]     }
[16:21:00.323]     ...future.result$conditions <- ...future.conditions
[16:21:00.323]     ...future.result$finished <- base::Sys.time()
[16:21:00.323]     ...future.result
[16:21:00.323] }
[16:21:00.326] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.326] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.326] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.326] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.327] MultisessionFuture started
[16:21:00.327] - Launch lazy future ... done
[16:21:00.327] run() for ‘MultisessionFuture’ ... done
[16:21:00.327] result() for ClusterFuture ...
[16:21:00.327] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.327] - Validating connection of MultisessionFuture
[16:21:00.328] - received message: FutureResult
[16:21:00.328] - Received FutureResult
[16:21:00.328] - Erased future from FutureRegistry
[16:21:00.329] result() for ClusterFuture ...
[16:21:00.329] - result already collected: FutureResult
[16:21:00.329] result() for ClusterFuture ... done
[16:21:00.329] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.329] result() for ClusterFuture ... done
[16:21:00.329] result() for ClusterFuture ...
[16:21:00.329] - result already collected: FutureResult
[16:21:00.329] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.330] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.330] Searching for globals...
[16:21:00.332] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.332] Searching for globals ... DONE
[16:21:00.332] Resolving globals: TRUE
[16:21:00.332] Resolving any globals that are futures ...
[16:21:00.332] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[16:21:00.332] Resolving any globals that are futures ... DONE
[16:21:00.333] Resolving futures part of globals (recursively) ...
[16:21:00.333] resolve() on list ...
[16:21:00.333]  recursive: 99
[16:21:00.333]  length: 1
[16:21:00.333]  elements: ‘x’
[16:21:00.333]  length: 0 (resolved future 1)
[16:21:00.333] resolve() on list ... DONE
[16:21:00.333] - globals: [1] ‘x’
[16:21:00.334] Resolving futures part of globals (recursively) ... DONE
[16:21:00.334] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.334] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.334] - globals: [1] ‘x’
[16:21:00.334] 
[16:21:00.334] getGlobalsAndPackages() ... DONE
[16:21:00.335] run() for ‘Future’ ...
[16:21:00.335] - state: ‘created’
[16:21:00.335] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.348] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.348] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.349]   - Field: ‘node’
[16:21:00.349]   - Field: ‘label’
[16:21:00.349]   - Field: ‘local’
[16:21:00.349]   - Field: ‘owner’
[16:21:00.349]   - Field: ‘envir’
[16:21:00.349]   - Field: ‘workers’
[16:21:00.349]   - Field: ‘packages’
[16:21:00.349]   - Field: ‘gc’
[16:21:00.349]   - Field: ‘conditions’
[16:21:00.349]   - Field: ‘persistent’
[16:21:00.349]   - Field: ‘expr’
[16:21:00.350]   - Field: ‘uuid’
[16:21:00.350]   - Field: ‘seed’
[16:21:00.350]   - Field: ‘version’
[16:21:00.350]   - Field: ‘result’
[16:21:00.350]   - Field: ‘asynchronous’
[16:21:00.350]   - Field: ‘calls’
[16:21:00.350]   - Field: ‘globals’
[16:21:00.350]   - Field: ‘stdout’
[16:21:00.350]   - Field: ‘earlySignal’
[16:21:00.350]   - Field: ‘lazy’
[16:21:00.350]   - Field: ‘state’
[16:21:00.351] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.351] - Launch lazy future ...
[16:21:00.351] Packages needed by the future expression (n = 0): <none>
[16:21:00.351] Packages needed by future strategies (n = 0): <none>
[16:21:00.351] {
[16:21:00.351]     {
[16:21:00.351]         {
[16:21:00.351]             ...future.startTime <- base::Sys.time()
[16:21:00.351]             {
[16:21:00.351]                 {
[16:21:00.351]                   {
[16:21:00.351]                     {
[16:21:00.351]                       base::local({
[16:21:00.351]                         has_future <- base::requireNamespace("future", 
[16:21:00.351]                           quietly = TRUE)
[16:21:00.351]                         if (has_future) {
[16:21:00.351]                           ns <- base::getNamespace("future")
[16:21:00.351]                           version <- ns[[".package"]][["version"]]
[16:21:00.351]                           if (is.null(version)) 
[16:21:00.351]                             version <- utils::packageVersion("future")
[16:21:00.351]                         }
[16:21:00.351]                         else {
[16:21:00.351]                           version <- NULL
[16:21:00.351]                         }
[16:21:00.351]                         if (!has_future || version < "1.8.0") {
[16:21:00.351]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.351]                             "", base::R.version$version.string), 
[16:21:00.351]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.351]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.351]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.351]                               "release", "version")], collapse = " "), 
[16:21:00.351]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.351]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.351]                             info)
[16:21:00.351]                           info <- base::paste(info, collapse = "; ")
[16:21:00.351]                           if (!has_future) {
[16:21:00.351]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.351]                               info)
[16:21:00.351]                           }
[16:21:00.351]                           else {
[16:21:00.351]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.351]                               info, version)
[16:21:00.351]                           }
[16:21:00.351]                           base::stop(msg)
[16:21:00.351]                         }
[16:21:00.351]                       })
[16:21:00.351]                     }
[16:21:00.351]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.351]                     base::options(mc.cores = 1L)
[16:21:00.351]                   }
[16:21:00.351]                   ...future.strategy.old <- future::plan("list")
[16:21:00.351]                   options(future.plan = NULL)
[16:21:00.351]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.351]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.351]                 }
[16:21:00.351]                 ...future.workdir <- getwd()
[16:21:00.351]             }
[16:21:00.351]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.351]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.351]         }
[16:21:00.351]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.351]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.351]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.351]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.351]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.351]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.351]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.351]             base::names(...future.oldOptions))
[16:21:00.351]     }
[16:21:00.351]     if (FALSE) {
[16:21:00.351]     }
[16:21:00.351]     else {
[16:21:00.351]         if (TRUE) {
[16:21:00.351]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.351]                 open = "w")
[16:21:00.351]         }
[16:21:00.351]         else {
[16:21:00.351]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.351]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.351]         }
[16:21:00.351]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.351]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.351]             base::sink(type = "output", split = FALSE)
[16:21:00.351]             base::close(...future.stdout)
[16:21:00.351]         }, add = TRUE)
[16:21:00.351]     }
[16:21:00.351]     ...future.frame <- base::sys.nframe()
[16:21:00.351]     ...future.conditions <- base::list()
[16:21:00.351]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.351]     if (FALSE) {
[16:21:00.351]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.351]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.351]     }
[16:21:00.351]     ...future.result <- base::tryCatch({
[16:21:00.351]         base::withCallingHandlers({
[16:21:00.351]             ...future.value <- base::withVisible(base::local({
[16:21:00.351]                 ...future.makeSendCondition <- base::local({
[16:21:00.351]                   sendCondition <- NULL
[16:21:00.351]                   function(frame = 1L) {
[16:21:00.351]                     if (is.function(sendCondition)) 
[16:21:00.351]                       return(sendCondition)
[16:21:00.351]                     ns <- getNamespace("parallel")
[16:21:00.351]                     if (exists("sendData", mode = "function", 
[16:21:00.351]                       envir = ns)) {
[16:21:00.351]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.351]                         envir = ns)
[16:21:00.351]                       envir <- sys.frame(frame)
[16:21:00.351]                       master <- NULL
[16:21:00.351]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.351]                         !identical(envir, emptyenv())) {
[16:21:00.351]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.351]                           inherits = FALSE)) {
[16:21:00.351]                           master <- get("master", mode = "list", 
[16:21:00.351]                             envir = envir, inherits = FALSE)
[16:21:00.351]                           if (inherits(master, c("SOCKnode", 
[16:21:00.351]                             "SOCK0node"))) {
[16:21:00.351]                             sendCondition <<- function(cond) {
[16:21:00.351]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.351]                                 success = TRUE)
[16:21:00.351]                               parallel_sendData(master, data)
[16:21:00.351]                             }
[16:21:00.351]                             return(sendCondition)
[16:21:00.351]                           }
[16:21:00.351]                         }
[16:21:00.351]                         frame <- frame + 1L
[16:21:00.351]                         envir <- sys.frame(frame)
[16:21:00.351]                       }
[16:21:00.351]                     }
[16:21:00.351]                     sendCondition <<- function(cond) NULL
[16:21:00.351]                   }
[16:21:00.351]                 })
[16:21:00.351]                 withCallingHandlers({
[16:21:00.351]                   {
[16:21:00.351]                     x$a <- 1
[16:21:00.351]                     x
[16:21:00.351]                   }
[16:21:00.351]                 }, immediateCondition = function(cond) {
[16:21:00.351]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.351]                   sendCondition(cond)
[16:21:00.351]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.351]                   {
[16:21:00.351]                     inherits <- base::inherits
[16:21:00.351]                     invokeRestart <- base::invokeRestart
[16:21:00.351]                     is.null <- base::is.null
[16:21:00.351]                     muffled <- FALSE
[16:21:00.351]                     if (inherits(cond, "message")) {
[16:21:00.351]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.351]                       if (muffled) 
[16:21:00.351]                         invokeRestart("muffleMessage")
[16:21:00.351]                     }
[16:21:00.351]                     else if (inherits(cond, "warning")) {
[16:21:00.351]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.351]                       if (muffled) 
[16:21:00.351]                         invokeRestart("muffleWarning")
[16:21:00.351]                     }
[16:21:00.351]                     else if (inherits(cond, "condition")) {
[16:21:00.351]                       if (!is.null(pattern)) {
[16:21:00.351]                         computeRestarts <- base::computeRestarts
[16:21:00.351]                         grepl <- base::grepl
[16:21:00.351]                         restarts <- computeRestarts(cond)
[16:21:00.351]                         for (restart in restarts) {
[16:21:00.351]                           name <- restart$name
[16:21:00.351]                           if (is.null(name)) 
[16:21:00.351]                             next
[16:21:00.351]                           if (!grepl(pattern, name)) 
[16:21:00.351]                             next
[16:21:00.351]                           invokeRestart(restart)
[16:21:00.351]                           muffled <- TRUE
[16:21:00.351]                           break
[16:21:00.351]                         }
[16:21:00.351]                       }
[16:21:00.351]                     }
[16:21:00.351]                     invisible(muffled)
[16:21:00.351]                   }
[16:21:00.351]                   muffleCondition(cond)
[16:21:00.351]                 })
[16:21:00.351]             }))
[16:21:00.351]             future::FutureResult(value = ...future.value$value, 
[16:21:00.351]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.351]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.351]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.351]                     ...future.globalenv.names))
[16:21:00.351]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.351]         }, condition = base::local({
[16:21:00.351]             c <- base::c
[16:21:00.351]             inherits <- base::inherits
[16:21:00.351]             invokeRestart <- base::invokeRestart
[16:21:00.351]             length <- base::length
[16:21:00.351]             list <- base::list
[16:21:00.351]             seq.int <- base::seq.int
[16:21:00.351]             signalCondition <- base::signalCondition
[16:21:00.351]             sys.calls <- base::sys.calls
[16:21:00.351]             `[[` <- base::`[[`
[16:21:00.351]             `+` <- base::`+`
[16:21:00.351]             `<<-` <- base::`<<-`
[16:21:00.351]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.351]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.351]                   3L)]
[16:21:00.351]             }
[16:21:00.351]             function(cond) {
[16:21:00.351]                 is_error <- inherits(cond, "error")
[16:21:00.351]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.351]                   NULL)
[16:21:00.351]                 if (is_error) {
[16:21:00.351]                   sessionInformation <- function() {
[16:21:00.351]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.351]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.351]                       search = base::search(), system = base::Sys.info())
[16:21:00.351]                   }
[16:21:00.351]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.351]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.351]                     cond$call), session = sessionInformation(), 
[16:21:00.351]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.351]                   signalCondition(cond)
[16:21:00.351]                 }
[16:21:00.351]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.351]                 "immediateCondition"))) {
[16:21:00.351]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.351]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.351]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.351]                   if (TRUE && !signal) {
[16:21:00.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.351]                     {
[16:21:00.351]                       inherits <- base::inherits
[16:21:00.351]                       invokeRestart <- base::invokeRestart
[16:21:00.351]                       is.null <- base::is.null
[16:21:00.351]                       muffled <- FALSE
[16:21:00.351]                       if (inherits(cond, "message")) {
[16:21:00.351]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.351]                         if (muffled) 
[16:21:00.351]                           invokeRestart("muffleMessage")
[16:21:00.351]                       }
[16:21:00.351]                       else if (inherits(cond, "warning")) {
[16:21:00.351]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.351]                         if (muffled) 
[16:21:00.351]                           invokeRestart("muffleWarning")
[16:21:00.351]                       }
[16:21:00.351]                       else if (inherits(cond, "condition")) {
[16:21:00.351]                         if (!is.null(pattern)) {
[16:21:00.351]                           computeRestarts <- base::computeRestarts
[16:21:00.351]                           grepl <- base::grepl
[16:21:00.351]                           restarts <- computeRestarts(cond)
[16:21:00.351]                           for (restart in restarts) {
[16:21:00.351]                             name <- restart$name
[16:21:00.351]                             if (is.null(name)) 
[16:21:00.351]                               next
[16:21:00.351]                             if (!grepl(pattern, name)) 
[16:21:00.351]                               next
[16:21:00.351]                             invokeRestart(restart)
[16:21:00.351]                             muffled <- TRUE
[16:21:00.351]                             break
[16:21:00.351]                           }
[16:21:00.351]                         }
[16:21:00.351]                       }
[16:21:00.351]                       invisible(muffled)
[16:21:00.351]                     }
[16:21:00.351]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.351]                   }
[16:21:00.351]                 }
[16:21:00.351]                 else {
[16:21:00.351]                   if (TRUE) {
[16:21:00.351]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.351]                     {
[16:21:00.351]                       inherits <- base::inherits
[16:21:00.351]                       invokeRestart <- base::invokeRestart
[16:21:00.351]                       is.null <- base::is.null
[16:21:00.351]                       muffled <- FALSE
[16:21:00.351]                       if (inherits(cond, "message")) {
[16:21:00.351]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.351]                         if (muffled) 
[16:21:00.351]                           invokeRestart("muffleMessage")
[16:21:00.351]                       }
[16:21:00.351]                       else if (inherits(cond, "warning")) {
[16:21:00.351]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.351]                         if (muffled) 
[16:21:00.351]                           invokeRestart("muffleWarning")
[16:21:00.351]                       }
[16:21:00.351]                       else if (inherits(cond, "condition")) {
[16:21:00.351]                         if (!is.null(pattern)) {
[16:21:00.351]                           computeRestarts <- base::computeRestarts
[16:21:00.351]                           grepl <- base::grepl
[16:21:00.351]                           restarts <- computeRestarts(cond)
[16:21:00.351]                           for (restart in restarts) {
[16:21:00.351]                             name <- restart$name
[16:21:00.351]                             if (is.null(name)) 
[16:21:00.351]                               next
[16:21:00.351]                             if (!grepl(pattern, name)) 
[16:21:00.351]                               next
[16:21:00.351]                             invokeRestart(restart)
[16:21:00.351]                             muffled <- TRUE
[16:21:00.351]                             break
[16:21:00.351]                           }
[16:21:00.351]                         }
[16:21:00.351]                       }
[16:21:00.351]                       invisible(muffled)
[16:21:00.351]                     }
[16:21:00.351]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.351]                   }
[16:21:00.351]                 }
[16:21:00.351]             }
[16:21:00.351]         }))
[16:21:00.351]     }, error = function(ex) {
[16:21:00.351]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.351]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.351]                 ...future.rng), started = ...future.startTime, 
[16:21:00.351]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.351]             version = "1.8"), class = "FutureResult")
[16:21:00.351]     }, finally = {
[16:21:00.351]         if (!identical(...future.workdir, getwd())) 
[16:21:00.351]             setwd(...future.workdir)
[16:21:00.351]         {
[16:21:00.351]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.351]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.351]             }
[16:21:00.351]             base::options(...future.oldOptions)
[16:21:00.351]             if (.Platform$OS.type == "windows") {
[16:21:00.351]                 old_names <- names(...future.oldEnvVars)
[16:21:00.351]                 envs <- base::Sys.getenv()
[16:21:00.351]                 names <- names(envs)
[16:21:00.351]                 common <- intersect(names, old_names)
[16:21:00.351]                 added <- setdiff(names, old_names)
[16:21:00.351]                 removed <- setdiff(old_names, names)
[16:21:00.351]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.351]                   envs[common]]
[16:21:00.351]                 NAMES <- toupper(changed)
[16:21:00.351]                 args <- list()
[16:21:00.351]                 for (kk in seq_along(NAMES)) {
[16:21:00.351]                   name <- changed[[kk]]
[16:21:00.351]                   NAME <- NAMES[[kk]]
[16:21:00.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.351]                     next
[16:21:00.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.351]                 }
[16:21:00.351]                 NAMES <- toupper(added)
[16:21:00.351]                 for (kk in seq_along(NAMES)) {
[16:21:00.351]                   name <- added[[kk]]
[16:21:00.351]                   NAME <- NAMES[[kk]]
[16:21:00.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.351]                     next
[16:21:00.351]                   args[[name]] <- ""
[16:21:00.351]                 }
[16:21:00.351]                 NAMES <- toupper(removed)
[16:21:00.351]                 for (kk in seq_along(NAMES)) {
[16:21:00.351]                   name <- removed[[kk]]
[16:21:00.351]                   NAME <- NAMES[[kk]]
[16:21:00.351]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.351]                     next
[16:21:00.351]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.351]                 }
[16:21:00.351]                 if (length(args) > 0) 
[16:21:00.351]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.351]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.351]             }
[16:21:00.351]             else {
[16:21:00.351]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.351]             }
[16:21:00.351]             {
[16:21:00.351]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.351]                   0L) {
[16:21:00.351]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.351]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.351]                   base::options(opts)
[16:21:00.351]                 }
[16:21:00.351]                 {
[16:21:00.351]                   {
[16:21:00.351]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.351]                     NULL
[16:21:00.351]                   }
[16:21:00.351]                   options(future.plan = NULL)
[16:21:00.351]                   if (is.na(NA_character_)) 
[16:21:00.351]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.351]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.351]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.351]                     .init = FALSE)
[16:21:00.351]                 }
[16:21:00.351]             }
[16:21:00.351]         }
[16:21:00.351]     })
[16:21:00.351]     if (TRUE) {
[16:21:00.351]         base::sink(type = "output", split = FALSE)
[16:21:00.351]         if (TRUE) {
[16:21:00.351]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.351]         }
[16:21:00.351]         else {
[16:21:00.351]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.351]         }
[16:21:00.351]         base::close(...future.stdout)
[16:21:00.351]         ...future.stdout <- NULL
[16:21:00.351]     }
[16:21:00.351]     ...future.result$conditions <- ...future.conditions
[16:21:00.351]     ...future.result$finished <- base::Sys.time()
[16:21:00.351]     ...future.result
[16:21:00.351] }
[16:21:00.354] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.354] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.354] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.354] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.355] MultisessionFuture started
[16:21:00.355] - Launch lazy future ... done
[16:21:00.355] run() for ‘MultisessionFuture’ ... done
[16:21:00.355] result() for ClusterFuture ...
[16:21:00.355] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.355] - Validating connection of MultisessionFuture
[16:21:00.356] - received message: FutureResult
[16:21:00.357] - Received FutureResult
[16:21:00.357] - Erased future from FutureRegistry
[16:21:00.357] result() for ClusterFuture ...
[16:21:00.357] - result already collected: FutureResult
[16:21:00.357] result() for ClusterFuture ... done
[16:21:00.357] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.357] result() for ClusterFuture ... done
[16:21:00.357] result() for ClusterFuture ...
[16:21:00.357] - result already collected: FutureResult
[16:21:00.357] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.358] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.358] Searching for globals...
[16:21:00.360] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:21:00.361] Searching for globals ... DONE
[16:21:00.361] Resolving globals: TRUE
[16:21:00.361] Resolving any globals that are futures ...
[16:21:00.361] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[16:21:00.361] Resolving any globals that are futures ... DONE
[16:21:00.361] 
[16:21:00.361] 
[16:21:00.361] getGlobalsAndPackages() ... DONE
[16:21:00.362] run() for ‘Future’ ...
[16:21:00.362] - state: ‘created’
[16:21:00.362] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.375] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.376] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.376]   - Field: ‘node’
[16:21:00.376]   - Field: ‘label’
[16:21:00.376]   - Field: ‘local’
[16:21:00.376]   - Field: ‘owner’
[16:21:00.376]   - Field: ‘envir’
[16:21:00.376]   - Field: ‘workers’
[16:21:00.376]   - Field: ‘packages’
[16:21:00.376]   - Field: ‘gc’
[16:21:00.377]   - Field: ‘conditions’
[16:21:00.377]   - Field: ‘persistent’
[16:21:00.377]   - Field: ‘expr’
[16:21:00.377]   - Field: ‘uuid’
[16:21:00.377]   - Field: ‘seed’
[16:21:00.377]   - Field: ‘version’
[16:21:00.377]   - Field: ‘result’
[16:21:00.377]   - Field: ‘asynchronous’
[16:21:00.377]   - Field: ‘calls’
[16:21:00.377]   - Field: ‘globals’
[16:21:00.377]   - Field: ‘stdout’
[16:21:00.378]   - Field: ‘earlySignal’
[16:21:00.378]   - Field: ‘lazy’
[16:21:00.378]   - Field: ‘state’
[16:21:00.378] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.378] - Launch lazy future ...
[16:21:00.378] Packages needed by the future expression (n = 0): <none>
[16:21:00.378] Packages needed by future strategies (n = 0): <none>
[16:21:00.379] {
[16:21:00.379]     {
[16:21:00.379]         {
[16:21:00.379]             ...future.startTime <- base::Sys.time()
[16:21:00.379]             {
[16:21:00.379]                 {
[16:21:00.379]                   {
[16:21:00.379]                     {
[16:21:00.379]                       base::local({
[16:21:00.379]                         has_future <- base::requireNamespace("future", 
[16:21:00.379]                           quietly = TRUE)
[16:21:00.379]                         if (has_future) {
[16:21:00.379]                           ns <- base::getNamespace("future")
[16:21:00.379]                           version <- ns[[".package"]][["version"]]
[16:21:00.379]                           if (is.null(version)) 
[16:21:00.379]                             version <- utils::packageVersion("future")
[16:21:00.379]                         }
[16:21:00.379]                         else {
[16:21:00.379]                           version <- NULL
[16:21:00.379]                         }
[16:21:00.379]                         if (!has_future || version < "1.8.0") {
[16:21:00.379]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.379]                             "", base::R.version$version.string), 
[16:21:00.379]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.379]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.379]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.379]                               "release", "version")], collapse = " "), 
[16:21:00.379]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.379]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.379]                             info)
[16:21:00.379]                           info <- base::paste(info, collapse = "; ")
[16:21:00.379]                           if (!has_future) {
[16:21:00.379]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.379]                               info)
[16:21:00.379]                           }
[16:21:00.379]                           else {
[16:21:00.379]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.379]                               info, version)
[16:21:00.379]                           }
[16:21:00.379]                           base::stop(msg)
[16:21:00.379]                         }
[16:21:00.379]                       })
[16:21:00.379]                     }
[16:21:00.379]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.379]                     base::options(mc.cores = 1L)
[16:21:00.379]                   }
[16:21:00.379]                   ...future.strategy.old <- future::plan("list")
[16:21:00.379]                   options(future.plan = NULL)
[16:21:00.379]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.379]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.379]                 }
[16:21:00.379]                 ...future.workdir <- getwd()
[16:21:00.379]             }
[16:21:00.379]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.379]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.379]         }
[16:21:00.379]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.379]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.379]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.379]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.379]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.379]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.379]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.379]             base::names(...future.oldOptions))
[16:21:00.379]     }
[16:21:00.379]     if (FALSE) {
[16:21:00.379]     }
[16:21:00.379]     else {
[16:21:00.379]         if (TRUE) {
[16:21:00.379]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.379]                 open = "w")
[16:21:00.379]         }
[16:21:00.379]         else {
[16:21:00.379]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.379]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.379]         }
[16:21:00.379]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.379]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.379]             base::sink(type = "output", split = FALSE)
[16:21:00.379]             base::close(...future.stdout)
[16:21:00.379]         }, add = TRUE)
[16:21:00.379]     }
[16:21:00.379]     ...future.frame <- base::sys.nframe()
[16:21:00.379]     ...future.conditions <- base::list()
[16:21:00.379]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.379]     if (FALSE) {
[16:21:00.379]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.379]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.379]     }
[16:21:00.379]     ...future.result <- base::tryCatch({
[16:21:00.379]         base::withCallingHandlers({
[16:21:00.379]             ...future.value <- base::withVisible(base::local({
[16:21:00.379]                 ...future.makeSendCondition <- base::local({
[16:21:00.379]                   sendCondition <- NULL
[16:21:00.379]                   function(frame = 1L) {
[16:21:00.379]                     if (is.function(sendCondition)) 
[16:21:00.379]                       return(sendCondition)
[16:21:00.379]                     ns <- getNamespace("parallel")
[16:21:00.379]                     if (exists("sendData", mode = "function", 
[16:21:00.379]                       envir = ns)) {
[16:21:00.379]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.379]                         envir = ns)
[16:21:00.379]                       envir <- sys.frame(frame)
[16:21:00.379]                       master <- NULL
[16:21:00.379]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.379]                         !identical(envir, emptyenv())) {
[16:21:00.379]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.379]                           inherits = FALSE)) {
[16:21:00.379]                           master <- get("master", mode = "list", 
[16:21:00.379]                             envir = envir, inherits = FALSE)
[16:21:00.379]                           if (inherits(master, c("SOCKnode", 
[16:21:00.379]                             "SOCK0node"))) {
[16:21:00.379]                             sendCondition <<- function(cond) {
[16:21:00.379]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.379]                                 success = TRUE)
[16:21:00.379]                               parallel_sendData(master, data)
[16:21:00.379]                             }
[16:21:00.379]                             return(sendCondition)
[16:21:00.379]                           }
[16:21:00.379]                         }
[16:21:00.379]                         frame <- frame + 1L
[16:21:00.379]                         envir <- sys.frame(frame)
[16:21:00.379]                       }
[16:21:00.379]                     }
[16:21:00.379]                     sendCondition <<- function(cond) NULL
[16:21:00.379]                   }
[16:21:00.379]                 })
[16:21:00.379]                 withCallingHandlers({
[16:21:00.379]                   {
[16:21:00.379]                     x <- list(b = 2)
[16:21:00.379]                     x$a <- 1
[16:21:00.379]                     x
[16:21:00.379]                   }
[16:21:00.379]                 }, immediateCondition = function(cond) {
[16:21:00.379]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.379]                   sendCondition(cond)
[16:21:00.379]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.379]                   {
[16:21:00.379]                     inherits <- base::inherits
[16:21:00.379]                     invokeRestart <- base::invokeRestart
[16:21:00.379]                     is.null <- base::is.null
[16:21:00.379]                     muffled <- FALSE
[16:21:00.379]                     if (inherits(cond, "message")) {
[16:21:00.379]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.379]                       if (muffled) 
[16:21:00.379]                         invokeRestart("muffleMessage")
[16:21:00.379]                     }
[16:21:00.379]                     else if (inherits(cond, "warning")) {
[16:21:00.379]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.379]                       if (muffled) 
[16:21:00.379]                         invokeRestart("muffleWarning")
[16:21:00.379]                     }
[16:21:00.379]                     else if (inherits(cond, "condition")) {
[16:21:00.379]                       if (!is.null(pattern)) {
[16:21:00.379]                         computeRestarts <- base::computeRestarts
[16:21:00.379]                         grepl <- base::grepl
[16:21:00.379]                         restarts <- computeRestarts(cond)
[16:21:00.379]                         for (restart in restarts) {
[16:21:00.379]                           name <- restart$name
[16:21:00.379]                           if (is.null(name)) 
[16:21:00.379]                             next
[16:21:00.379]                           if (!grepl(pattern, name)) 
[16:21:00.379]                             next
[16:21:00.379]                           invokeRestart(restart)
[16:21:00.379]                           muffled <- TRUE
[16:21:00.379]                           break
[16:21:00.379]                         }
[16:21:00.379]                       }
[16:21:00.379]                     }
[16:21:00.379]                     invisible(muffled)
[16:21:00.379]                   }
[16:21:00.379]                   muffleCondition(cond)
[16:21:00.379]                 })
[16:21:00.379]             }))
[16:21:00.379]             future::FutureResult(value = ...future.value$value, 
[16:21:00.379]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.379]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.379]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.379]                     ...future.globalenv.names))
[16:21:00.379]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.379]         }, condition = base::local({
[16:21:00.379]             c <- base::c
[16:21:00.379]             inherits <- base::inherits
[16:21:00.379]             invokeRestart <- base::invokeRestart
[16:21:00.379]             length <- base::length
[16:21:00.379]             list <- base::list
[16:21:00.379]             seq.int <- base::seq.int
[16:21:00.379]             signalCondition <- base::signalCondition
[16:21:00.379]             sys.calls <- base::sys.calls
[16:21:00.379]             `[[` <- base::`[[`
[16:21:00.379]             `+` <- base::`+`
[16:21:00.379]             `<<-` <- base::`<<-`
[16:21:00.379]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.379]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.379]                   3L)]
[16:21:00.379]             }
[16:21:00.379]             function(cond) {
[16:21:00.379]                 is_error <- inherits(cond, "error")
[16:21:00.379]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.379]                   NULL)
[16:21:00.379]                 if (is_error) {
[16:21:00.379]                   sessionInformation <- function() {
[16:21:00.379]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.379]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.379]                       search = base::search(), system = base::Sys.info())
[16:21:00.379]                   }
[16:21:00.379]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.379]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.379]                     cond$call), session = sessionInformation(), 
[16:21:00.379]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.379]                   signalCondition(cond)
[16:21:00.379]                 }
[16:21:00.379]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.379]                 "immediateCondition"))) {
[16:21:00.379]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.379]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.379]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.379]                   if (TRUE && !signal) {
[16:21:00.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.379]                     {
[16:21:00.379]                       inherits <- base::inherits
[16:21:00.379]                       invokeRestart <- base::invokeRestart
[16:21:00.379]                       is.null <- base::is.null
[16:21:00.379]                       muffled <- FALSE
[16:21:00.379]                       if (inherits(cond, "message")) {
[16:21:00.379]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.379]                         if (muffled) 
[16:21:00.379]                           invokeRestart("muffleMessage")
[16:21:00.379]                       }
[16:21:00.379]                       else if (inherits(cond, "warning")) {
[16:21:00.379]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.379]                         if (muffled) 
[16:21:00.379]                           invokeRestart("muffleWarning")
[16:21:00.379]                       }
[16:21:00.379]                       else if (inherits(cond, "condition")) {
[16:21:00.379]                         if (!is.null(pattern)) {
[16:21:00.379]                           computeRestarts <- base::computeRestarts
[16:21:00.379]                           grepl <- base::grepl
[16:21:00.379]                           restarts <- computeRestarts(cond)
[16:21:00.379]                           for (restart in restarts) {
[16:21:00.379]                             name <- restart$name
[16:21:00.379]                             if (is.null(name)) 
[16:21:00.379]                               next
[16:21:00.379]                             if (!grepl(pattern, name)) 
[16:21:00.379]                               next
[16:21:00.379]                             invokeRestart(restart)
[16:21:00.379]                             muffled <- TRUE
[16:21:00.379]                             break
[16:21:00.379]                           }
[16:21:00.379]                         }
[16:21:00.379]                       }
[16:21:00.379]                       invisible(muffled)
[16:21:00.379]                     }
[16:21:00.379]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.379]                   }
[16:21:00.379]                 }
[16:21:00.379]                 else {
[16:21:00.379]                   if (TRUE) {
[16:21:00.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.379]                     {
[16:21:00.379]                       inherits <- base::inherits
[16:21:00.379]                       invokeRestart <- base::invokeRestart
[16:21:00.379]                       is.null <- base::is.null
[16:21:00.379]                       muffled <- FALSE
[16:21:00.379]                       if (inherits(cond, "message")) {
[16:21:00.379]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.379]                         if (muffled) 
[16:21:00.379]                           invokeRestart("muffleMessage")
[16:21:00.379]                       }
[16:21:00.379]                       else if (inherits(cond, "warning")) {
[16:21:00.379]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.379]                         if (muffled) 
[16:21:00.379]                           invokeRestart("muffleWarning")
[16:21:00.379]                       }
[16:21:00.379]                       else if (inherits(cond, "condition")) {
[16:21:00.379]                         if (!is.null(pattern)) {
[16:21:00.379]                           computeRestarts <- base::computeRestarts
[16:21:00.379]                           grepl <- base::grepl
[16:21:00.379]                           restarts <- computeRestarts(cond)
[16:21:00.379]                           for (restart in restarts) {
[16:21:00.379]                             name <- restart$name
[16:21:00.379]                             if (is.null(name)) 
[16:21:00.379]                               next
[16:21:00.379]                             if (!grepl(pattern, name)) 
[16:21:00.379]                               next
[16:21:00.379]                             invokeRestart(restart)
[16:21:00.379]                             muffled <- TRUE
[16:21:00.379]                             break
[16:21:00.379]                           }
[16:21:00.379]                         }
[16:21:00.379]                       }
[16:21:00.379]                       invisible(muffled)
[16:21:00.379]                     }
[16:21:00.379]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.379]                   }
[16:21:00.379]                 }
[16:21:00.379]             }
[16:21:00.379]         }))
[16:21:00.379]     }, error = function(ex) {
[16:21:00.379]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.379]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.379]                 ...future.rng), started = ...future.startTime, 
[16:21:00.379]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.379]             version = "1.8"), class = "FutureResult")
[16:21:00.379]     }, finally = {
[16:21:00.379]         if (!identical(...future.workdir, getwd())) 
[16:21:00.379]             setwd(...future.workdir)
[16:21:00.379]         {
[16:21:00.379]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.379]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.379]             }
[16:21:00.379]             base::options(...future.oldOptions)
[16:21:00.379]             if (.Platform$OS.type == "windows") {
[16:21:00.379]                 old_names <- names(...future.oldEnvVars)
[16:21:00.379]                 envs <- base::Sys.getenv()
[16:21:00.379]                 names <- names(envs)
[16:21:00.379]                 common <- intersect(names, old_names)
[16:21:00.379]                 added <- setdiff(names, old_names)
[16:21:00.379]                 removed <- setdiff(old_names, names)
[16:21:00.379]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.379]                   envs[common]]
[16:21:00.379]                 NAMES <- toupper(changed)
[16:21:00.379]                 args <- list()
[16:21:00.379]                 for (kk in seq_along(NAMES)) {
[16:21:00.379]                   name <- changed[[kk]]
[16:21:00.379]                   NAME <- NAMES[[kk]]
[16:21:00.379]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.379]                     next
[16:21:00.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.379]                 }
[16:21:00.379]                 NAMES <- toupper(added)
[16:21:00.379]                 for (kk in seq_along(NAMES)) {
[16:21:00.379]                   name <- added[[kk]]
[16:21:00.379]                   NAME <- NAMES[[kk]]
[16:21:00.379]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.379]                     next
[16:21:00.379]                   args[[name]] <- ""
[16:21:00.379]                 }
[16:21:00.379]                 NAMES <- toupper(removed)
[16:21:00.379]                 for (kk in seq_along(NAMES)) {
[16:21:00.379]                   name <- removed[[kk]]
[16:21:00.379]                   NAME <- NAMES[[kk]]
[16:21:00.379]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.379]                     next
[16:21:00.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.379]                 }
[16:21:00.379]                 if (length(args) > 0) 
[16:21:00.379]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.379]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.379]             }
[16:21:00.379]             else {
[16:21:00.379]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.379]             }
[16:21:00.379]             {
[16:21:00.379]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.379]                   0L) {
[16:21:00.379]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.379]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.379]                   base::options(opts)
[16:21:00.379]                 }
[16:21:00.379]                 {
[16:21:00.379]                   {
[16:21:00.379]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.379]                     NULL
[16:21:00.379]                   }
[16:21:00.379]                   options(future.plan = NULL)
[16:21:00.379]                   if (is.na(NA_character_)) 
[16:21:00.379]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.379]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.379]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.379]                     .init = FALSE)
[16:21:00.379]                 }
[16:21:00.379]             }
[16:21:00.379]         }
[16:21:00.379]     })
[16:21:00.379]     if (TRUE) {
[16:21:00.379]         base::sink(type = "output", split = FALSE)
[16:21:00.379]         if (TRUE) {
[16:21:00.379]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.379]         }
[16:21:00.379]         else {
[16:21:00.379]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.379]         }
[16:21:00.379]         base::close(...future.stdout)
[16:21:00.379]         ...future.stdout <- NULL
[16:21:00.379]     }
[16:21:00.379]     ...future.result$conditions <- ...future.conditions
[16:21:00.379]     ...future.result$finished <- base::Sys.time()
[16:21:00.379]     ...future.result
[16:21:00.379] }
[16:21:00.382] MultisessionFuture started
[16:21:00.382] - Launch lazy future ... done
[16:21:00.382] run() for ‘MultisessionFuture’ ... done
[16:21:00.382] result() for ClusterFuture ...
[16:21:00.382] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.383] - Validating connection of MultisessionFuture
[16:21:00.384] - received message: FutureResult
[16:21:00.384] - Received FutureResult
[16:21:00.384] - Erased future from FutureRegistry
[16:21:00.384] result() for ClusterFuture ...
[16:21:00.384] - result already collected: FutureResult
[16:21:00.384] result() for ClusterFuture ... done
[16:21:00.384] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.384] result() for ClusterFuture ... done
[16:21:00.384] result() for ClusterFuture ...
[16:21:00.385] - result already collected: FutureResult
[16:21:00.385] result() for ClusterFuture ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.385] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.385] Searching for globals...
[16:21:00.387] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.387] Searching for globals ... DONE
[16:21:00.387] Resolving globals: TRUE
[16:21:00.387] Resolving any globals that are futures ...
[16:21:00.387] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.388] Resolving any globals that are futures ... DONE
[16:21:00.388] Resolving futures part of globals (recursively) ...
[16:21:00.388] resolve() on list ...
[16:21:00.388]  recursive: 99
[16:21:00.388]  length: 1
[16:21:00.388]  elements: ‘x’
[16:21:00.389]  length: 0 (resolved future 1)
[16:21:00.389] resolve() on list ... DONE
[16:21:00.389] - globals: [1] ‘x’
[16:21:00.389] Resolving futures part of globals (recursively) ... DONE
[16:21:00.389] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.389] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.389] - globals: [1] ‘x’
[16:21:00.390] 
[16:21:00.390] getGlobalsAndPackages() ... DONE
[16:21:00.390] run() for ‘Future’ ...
[16:21:00.390] - state: ‘created’
[16:21:00.390] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.404] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.404] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.404]   - Field: ‘node’
[16:21:00.404]   - Field: ‘label’
[16:21:00.404]   - Field: ‘local’
[16:21:00.404]   - Field: ‘owner’
[16:21:00.404]   - Field: ‘envir’
[16:21:00.404]   - Field: ‘workers’
[16:21:00.404]   - Field: ‘packages’
[16:21:00.405]   - Field: ‘gc’
[16:21:00.405]   - Field: ‘conditions’
[16:21:00.405]   - Field: ‘persistent’
[16:21:00.405]   - Field: ‘expr’
[16:21:00.405]   - Field: ‘uuid’
[16:21:00.405]   - Field: ‘seed’
[16:21:00.405]   - Field: ‘version’
[16:21:00.405]   - Field: ‘result’
[16:21:00.405]   - Field: ‘asynchronous’
[16:21:00.405]   - Field: ‘calls’
[16:21:00.405]   - Field: ‘globals’
[16:21:00.406]   - Field: ‘stdout’
[16:21:00.406]   - Field: ‘earlySignal’
[16:21:00.406]   - Field: ‘lazy’
[16:21:00.406]   - Field: ‘state’
[16:21:00.406] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.406] - Launch lazy future ...
[16:21:00.406] Packages needed by the future expression (n = 0): <none>
[16:21:00.406] Packages needed by future strategies (n = 0): <none>
[16:21:00.407] {
[16:21:00.407]     {
[16:21:00.407]         {
[16:21:00.407]             ...future.startTime <- base::Sys.time()
[16:21:00.407]             {
[16:21:00.407]                 {
[16:21:00.407]                   {
[16:21:00.407]                     {
[16:21:00.407]                       base::local({
[16:21:00.407]                         has_future <- base::requireNamespace("future", 
[16:21:00.407]                           quietly = TRUE)
[16:21:00.407]                         if (has_future) {
[16:21:00.407]                           ns <- base::getNamespace("future")
[16:21:00.407]                           version <- ns[[".package"]][["version"]]
[16:21:00.407]                           if (is.null(version)) 
[16:21:00.407]                             version <- utils::packageVersion("future")
[16:21:00.407]                         }
[16:21:00.407]                         else {
[16:21:00.407]                           version <- NULL
[16:21:00.407]                         }
[16:21:00.407]                         if (!has_future || version < "1.8.0") {
[16:21:00.407]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.407]                             "", base::R.version$version.string), 
[16:21:00.407]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.407]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.407]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.407]                               "release", "version")], collapse = " "), 
[16:21:00.407]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.407]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.407]                             info)
[16:21:00.407]                           info <- base::paste(info, collapse = "; ")
[16:21:00.407]                           if (!has_future) {
[16:21:00.407]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.407]                               info)
[16:21:00.407]                           }
[16:21:00.407]                           else {
[16:21:00.407]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.407]                               info, version)
[16:21:00.407]                           }
[16:21:00.407]                           base::stop(msg)
[16:21:00.407]                         }
[16:21:00.407]                       })
[16:21:00.407]                     }
[16:21:00.407]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.407]                     base::options(mc.cores = 1L)
[16:21:00.407]                   }
[16:21:00.407]                   ...future.strategy.old <- future::plan("list")
[16:21:00.407]                   options(future.plan = NULL)
[16:21:00.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.407]                 }
[16:21:00.407]                 ...future.workdir <- getwd()
[16:21:00.407]             }
[16:21:00.407]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.407]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.407]         }
[16:21:00.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.407]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.407]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.407]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.407]             base::names(...future.oldOptions))
[16:21:00.407]     }
[16:21:00.407]     if (FALSE) {
[16:21:00.407]     }
[16:21:00.407]     else {
[16:21:00.407]         if (TRUE) {
[16:21:00.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.407]                 open = "w")
[16:21:00.407]         }
[16:21:00.407]         else {
[16:21:00.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.407]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.407]         }
[16:21:00.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.407]             base::sink(type = "output", split = FALSE)
[16:21:00.407]             base::close(...future.stdout)
[16:21:00.407]         }, add = TRUE)
[16:21:00.407]     }
[16:21:00.407]     ...future.frame <- base::sys.nframe()
[16:21:00.407]     ...future.conditions <- base::list()
[16:21:00.407]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.407]     if (FALSE) {
[16:21:00.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.407]     }
[16:21:00.407]     ...future.result <- base::tryCatch({
[16:21:00.407]         base::withCallingHandlers({
[16:21:00.407]             ...future.value <- base::withVisible(base::local({
[16:21:00.407]                 ...future.makeSendCondition <- base::local({
[16:21:00.407]                   sendCondition <- NULL
[16:21:00.407]                   function(frame = 1L) {
[16:21:00.407]                     if (is.function(sendCondition)) 
[16:21:00.407]                       return(sendCondition)
[16:21:00.407]                     ns <- getNamespace("parallel")
[16:21:00.407]                     if (exists("sendData", mode = "function", 
[16:21:00.407]                       envir = ns)) {
[16:21:00.407]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.407]                         envir = ns)
[16:21:00.407]                       envir <- sys.frame(frame)
[16:21:00.407]                       master <- NULL
[16:21:00.407]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.407]                         !identical(envir, emptyenv())) {
[16:21:00.407]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.407]                           inherits = FALSE)) {
[16:21:00.407]                           master <- get("master", mode = "list", 
[16:21:00.407]                             envir = envir, inherits = FALSE)
[16:21:00.407]                           if (inherits(master, c("SOCKnode", 
[16:21:00.407]                             "SOCK0node"))) {
[16:21:00.407]                             sendCondition <<- function(cond) {
[16:21:00.407]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.407]                                 success = TRUE)
[16:21:00.407]                               parallel_sendData(master, data)
[16:21:00.407]                             }
[16:21:00.407]                             return(sendCondition)
[16:21:00.407]                           }
[16:21:00.407]                         }
[16:21:00.407]                         frame <- frame + 1L
[16:21:00.407]                         envir <- sys.frame(frame)
[16:21:00.407]                       }
[16:21:00.407]                     }
[16:21:00.407]                     sendCondition <<- function(cond) NULL
[16:21:00.407]                   }
[16:21:00.407]                 })
[16:21:00.407]                 withCallingHandlers({
[16:21:00.407]                   {
[16:21:00.407]                     x[["a"]] <- 1
[16:21:00.407]                     x
[16:21:00.407]                   }
[16:21:00.407]                 }, immediateCondition = function(cond) {
[16:21:00.407]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.407]                   sendCondition(cond)
[16:21:00.407]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.407]                   {
[16:21:00.407]                     inherits <- base::inherits
[16:21:00.407]                     invokeRestart <- base::invokeRestart
[16:21:00.407]                     is.null <- base::is.null
[16:21:00.407]                     muffled <- FALSE
[16:21:00.407]                     if (inherits(cond, "message")) {
[16:21:00.407]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.407]                       if (muffled) 
[16:21:00.407]                         invokeRestart("muffleMessage")
[16:21:00.407]                     }
[16:21:00.407]                     else if (inherits(cond, "warning")) {
[16:21:00.407]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.407]                       if (muffled) 
[16:21:00.407]                         invokeRestart("muffleWarning")
[16:21:00.407]                     }
[16:21:00.407]                     else if (inherits(cond, "condition")) {
[16:21:00.407]                       if (!is.null(pattern)) {
[16:21:00.407]                         computeRestarts <- base::computeRestarts
[16:21:00.407]                         grepl <- base::grepl
[16:21:00.407]                         restarts <- computeRestarts(cond)
[16:21:00.407]                         for (restart in restarts) {
[16:21:00.407]                           name <- restart$name
[16:21:00.407]                           if (is.null(name)) 
[16:21:00.407]                             next
[16:21:00.407]                           if (!grepl(pattern, name)) 
[16:21:00.407]                             next
[16:21:00.407]                           invokeRestart(restart)
[16:21:00.407]                           muffled <- TRUE
[16:21:00.407]                           break
[16:21:00.407]                         }
[16:21:00.407]                       }
[16:21:00.407]                     }
[16:21:00.407]                     invisible(muffled)
[16:21:00.407]                   }
[16:21:00.407]                   muffleCondition(cond)
[16:21:00.407]                 })
[16:21:00.407]             }))
[16:21:00.407]             future::FutureResult(value = ...future.value$value, 
[16:21:00.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.407]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.407]                     ...future.globalenv.names))
[16:21:00.407]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.407]         }, condition = base::local({
[16:21:00.407]             c <- base::c
[16:21:00.407]             inherits <- base::inherits
[16:21:00.407]             invokeRestart <- base::invokeRestart
[16:21:00.407]             length <- base::length
[16:21:00.407]             list <- base::list
[16:21:00.407]             seq.int <- base::seq.int
[16:21:00.407]             signalCondition <- base::signalCondition
[16:21:00.407]             sys.calls <- base::sys.calls
[16:21:00.407]             `[[` <- base::`[[`
[16:21:00.407]             `+` <- base::`+`
[16:21:00.407]             `<<-` <- base::`<<-`
[16:21:00.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.407]                   3L)]
[16:21:00.407]             }
[16:21:00.407]             function(cond) {
[16:21:00.407]                 is_error <- inherits(cond, "error")
[16:21:00.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.407]                   NULL)
[16:21:00.407]                 if (is_error) {
[16:21:00.407]                   sessionInformation <- function() {
[16:21:00.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.407]                       search = base::search(), system = base::Sys.info())
[16:21:00.407]                   }
[16:21:00.407]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.407]                     cond$call), session = sessionInformation(), 
[16:21:00.407]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.407]                   signalCondition(cond)
[16:21:00.407]                 }
[16:21:00.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.407]                 "immediateCondition"))) {
[16:21:00.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.407]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.407]                   if (TRUE && !signal) {
[16:21:00.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.407]                     {
[16:21:00.407]                       inherits <- base::inherits
[16:21:00.407]                       invokeRestart <- base::invokeRestart
[16:21:00.407]                       is.null <- base::is.null
[16:21:00.407]                       muffled <- FALSE
[16:21:00.407]                       if (inherits(cond, "message")) {
[16:21:00.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.407]                         if (muffled) 
[16:21:00.407]                           invokeRestart("muffleMessage")
[16:21:00.407]                       }
[16:21:00.407]                       else if (inherits(cond, "warning")) {
[16:21:00.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.407]                         if (muffled) 
[16:21:00.407]                           invokeRestart("muffleWarning")
[16:21:00.407]                       }
[16:21:00.407]                       else if (inherits(cond, "condition")) {
[16:21:00.407]                         if (!is.null(pattern)) {
[16:21:00.407]                           computeRestarts <- base::computeRestarts
[16:21:00.407]                           grepl <- base::grepl
[16:21:00.407]                           restarts <- computeRestarts(cond)
[16:21:00.407]                           for (restart in restarts) {
[16:21:00.407]                             name <- restart$name
[16:21:00.407]                             if (is.null(name)) 
[16:21:00.407]                               next
[16:21:00.407]                             if (!grepl(pattern, name)) 
[16:21:00.407]                               next
[16:21:00.407]                             invokeRestart(restart)
[16:21:00.407]                             muffled <- TRUE
[16:21:00.407]                             break
[16:21:00.407]                           }
[16:21:00.407]                         }
[16:21:00.407]                       }
[16:21:00.407]                       invisible(muffled)
[16:21:00.407]                     }
[16:21:00.407]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.407]                   }
[16:21:00.407]                 }
[16:21:00.407]                 else {
[16:21:00.407]                   if (TRUE) {
[16:21:00.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.407]                     {
[16:21:00.407]                       inherits <- base::inherits
[16:21:00.407]                       invokeRestart <- base::invokeRestart
[16:21:00.407]                       is.null <- base::is.null
[16:21:00.407]                       muffled <- FALSE
[16:21:00.407]                       if (inherits(cond, "message")) {
[16:21:00.407]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.407]                         if (muffled) 
[16:21:00.407]                           invokeRestart("muffleMessage")
[16:21:00.407]                       }
[16:21:00.407]                       else if (inherits(cond, "warning")) {
[16:21:00.407]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.407]                         if (muffled) 
[16:21:00.407]                           invokeRestart("muffleWarning")
[16:21:00.407]                       }
[16:21:00.407]                       else if (inherits(cond, "condition")) {
[16:21:00.407]                         if (!is.null(pattern)) {
[16:21:00.407]                           computeRestarts <- base::computeRestarts
[16:21:00.407]                           grepl <- base::grepl
[16:21:00.407]                           restarts <- computeRestarts(cond)
[16:21:00.407]                           for (restart in restarts) {
[16:21:00.407]                             name <- restart$name
[16:21:00.407]                             if (is.null(name)) 
[16:21:00.407]                               next
[16:21:00.407]                             if (!grepl(pattern, name)) 
[16:21:00.407]                               next
[16:21:00.407]                             invokeRestart(restart)
[16:21:00.407]                             muffled <- TRUE
[16:21:00.407]                             break
[16:21:00.407]                           }
[16:21:00.407]                         }
[16:21:00.407]                       }
[16:21:00.407]                       invisible(muffled)
[16:21:00.407]                     }
[16:21:00.407]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.407]                   }
[16:21:00.407]                 }
[16:21:00.407]             }
[16:21:00.407]         }))
[16:21:00.407]     }, error = function(ex) {
[16:21:00.407]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.407]                 ...future.rng), started = ...future.startTime, 
[16:21:00.407]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.407]             version = "1.8"), class = "FutureResult")
[16:21:00.407]     }, finally = {
[16:21:00.407]         if (!identical(...future.workdir, getwd())) 
[16:21:00.407]             setwd(...future.workdir)
[16:21:00.407]         {
[16:21:00.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.407]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.407]             }
[16:21:00.407]             base::options(...future.oldOptions)
[16:21:00.407]             if (.Platform$OS.type == "windows") {
[16:21:00.407]                 old_names <- names(...future.oldEnvVars)
[16:21:00.407]                 envs <- base::Sys.getenv()
[16:21:00.407]                 names <- names(envs)
[16:21:00.407]                 common <- intersect(names, old_names)
[16:21:00.407]                 added <- setdiff(names, old_names)
[16:21:00.407]                 removed <- setdiff(old_names, names)
[16:21:00.407]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.407]                   envs[common]]
[16:21:00.407]                 NAMES <- toupper(changed)
[16:21:00.407]                 args <- list()
[16:21:00.407]                 for (kk in seq_along(NAMES)) {
[16:21:00.407]                   name <- changed[[kk]]
[16:21:00.407]                   NAME <- NAMES[[kk]]
[16:21:00.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.407]                     next
[16:21:00.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.407]                 }
[16:21:00.407]                 NAMES <- toupper(added)
[16:21:00.407]                 for (kk in seq_along(NAMES)) {
[16:21:00.407]                   name <- added[[kk]]
[16:21:00.407]                   NAME <- NAMES[[kk]]
[16:21:00.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.407]                     next
[16:21:00.407]                   args[[name]] <- ""
[16:21:00.407]                 }
[16:21:00.407]                 NAMES <- toupper(removed)
[16:21:00.407]                 for (kk in seq_along(NAMES)) {
[16:21:00.407]                   name <- removed[[kk]]
[16:21:00.407]                   NAME <- NAMES[[kk]]
[16:21:00.407]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.407]                     next
[16:21:00.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.407]                 }
[16:21:00.407]                 if (length(args) > 0) 
[16:21:00.407]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.407]             }
[16:21:00.407]             else {
[16:21:00.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.407]             }
[16:21:00.407]             {
[16:21:00.407]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.407]                   0L) {
[16:21:00.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.407]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.407]                   base::options(opts)
[16:21:00.407]                 }
[16:21:00.407]                 {
[16:21:00.407]                   {
[16:21:00.407]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.407]                     NULL
[16:21:00.407]                   }
[16:21:00.407]                   options(future.plan = NULL)
[16:21:00.407]                   if (is.na(NA_character_)) 
[16:21:00.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.407]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.407]                     .init = FALSE)
[16:21:00.407]                 }
[16:21:00.407]             }
[16:21:00.407]         }
[16:21:00.407]     })
[16:21:00.407]     if (TRUE) {
[16:21:00.407]         base::sink(type = "output", split = FALSE)
[16:21:00.407]         if (TRUE) {
[16:21:00.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.407]         }
[16:21:00.407]         else {
[16:21:00.407]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.407]         }
[16:21:00.407]         base::close(...future.stdout)
[16:21:00.407]         ...future.stdout <- NULL
[16:21:00.407]     }
[16:21:00.407]     ...future.result$conditions <- ...future.conditions
[16:21:00.407]     ...future.result$finished <- base::Sys.time()
[16:21:00.407]     ...future.result
[16:21:00.407] }
[16:21:00.409] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.409] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.410] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.410] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.410] MultisessionFuture started
[16:21:00.410] - Launch lazy future ... done
[16:21:00.411] run() for ‘MultisessionFuture’ ... done
[16:21:00.411] result() for ClusterFuture ...
[16:21:00.411] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.411] - Validating connection of MultisessionFuture
[16:21:00.412] - received message: FutureResult
[16:21:00.412] - Received FutureResult
[16:21:00.412] - Erased future from FutureRegistry
[16:21:00.412] result() for ClusterFuture ...
[16:21:00.412] - result already collected: FutureResult
[16:21:00.412] result() for ClusterFuture ... done
[16:21:00.412] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.413] result() for ClusterFuture ... done
[16:21:00.413] result() for ClusterFuture ...
[16:21:00.413] - result already collected: FutureResult
[16:21:00.413] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.413] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.413] Searching for globals...
[16:21:00.415] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.415] Searching for globals ... DONE
[16:21:00.415] Resolving globals: TRUE
[16:21:00.415] Resolving any globals that are futures ...
[16:21:00.416] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.416] Resolving any globals that are futures ... DONE
[16:21:00.416] Resolving futures part of globals (recursively) ...
[16:21:00.416] resolve() on list ...
[16:21:00.416]  recursive: 99
[16:21:00.416]  length: 1
[16:21:00.417]  elements: ‘x’
[16:21:00.417]  length: 0 (resolved future 1)
[16:21:00.417] resolve() on list ... DONE
[16:21:00.417] - globals: [1] ‘x’
[16:21:00.417] Resolving futures part of globals (recursively) ... DONE
[16:21:00.417] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.418] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.418] - globals: [1] ‘x’
[16:21:00.418] 
[16:21:00.418] getGlobalsAndPackages() ... DONE
[16:21:00.418] run() for ‘Future’ ...
[16:21:00.418] - state: ‘created’
[16:21:00.418] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.432] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.432] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.432]   - Field: ‘node’
[16:21:00.432]   - Field: ‘label’
[16:21:00.432]   - Field: ‘local’
[16:21:00.432]   - Field: ‘owner’
[16:21:00.432]   - Field: ‘envir’
[16:21:00.433]   - Field: ‘workers’
[16:21:00.433]   - Field: ‘packages’
[16:21:00.433]   - Field: ‘gc’
[16:21:00.433]   - Field: ‘conditions’
[16:21:00.433]   - Field: ‘persistent’
[16:21:00.433]   - Field: ‘expr’
[16:21:00.433]   - Field: ‘uuid’
[16:21:00.433]   - Field: ‘seed’
[16:21:00.433]   - Field: ‘version’
[16:21:00.433]   - Field: ‘result’
[16:21:00.433]   - Field: ‘asynchronous’
[16:21:00.434]   - Field: ‘calls’
[16:21:00.434]   - Field: ‘globals’
[16:21:00.434]   - Field: ‘stdout’
[16:21:00.434]   - Field: ‘earlySignal’
[16:21:00.434]   - Field: ‘lazy’
[16:21:00.434]   - Field: ‘state’
[16:21:00.434] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.434] - Launch lazy future ...
[16:21:00.434] Packages needed by the future expression (n = 0): <none>
[16:21:00.435] Packages needed by future strategies (n = 0): <none>
[16:21:00.435] {
[16:21:00.435]     {
[16:21:00.435]         {
[16:21:00.435]             ...future.startTime <- base::Sys.time()
[16:21:00.435]             {
[16:21:00.435]                 {
[16:21:00.435]                   {
[16:21:00.435]                     {
[16:21:00.435]                       base::local({
[16:21:00.435]                         has_future <- base::requireNamespace("future", 
[16:21:00.435]                           quietly = TRUE)
[16:21:00.435]                         if (has_future) {
[16:21:00.435]                           ns <- base::getNamespace("future")
[16:21:00.435]                           version <- ns[[".package"]][["version"]]
[16:21:00.435]                           if (is.null(version)) 
[16:21:00.435]                             version <- utils::packageVersion("future")
[16:21:00.435]                         }
[16:21:00.435]                         else {
[16:21:00.435]                           version <- NULL
[16:21:00.435]                         }
[16:21:00.435]                         if (!has_future || version < "1.8.0") {
[16:21:00.435]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.435]                             "", base::R.version$version.string), 
[16:21:00.435]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.435]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.435]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.435]                               "release", "version")], collapse = " "), 
[16:21:00.435]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.435]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.435]                             info)
[16:21:00.435]                           info <- base::paste(info, collapse = "; ")
[16:21:00.435]                           if (!has_future) {
[16:21:00.435]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.435]                               info)
[16:21:00.435]                           }
[16:21:00.435]                           else {
[16:21:00.435]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.435]                               info, version)
[16:21:00.435]                           }
[16:21:00.435]                           base::stop(msg)
[16:21:00.435]                         }
[16:21:00.435]                       })
[16:21:00.435]                     }
[16:21:00.435]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.435]                     base::options(mc.cores = 1L)
[16:21:00.435]                   }
[16:21:00.435]                   ...future.strategy.old <- future::plan("list")
[16:21:00.435]                   options(future.plan = NULL)
[16:21:00.435]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.435]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.435]                 }
[16:21:00.435]                 ...future.workdir <- getwd()
[16:21:00.435]             }
[16:21:00.435]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.435]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.435]         }
[16:21:00.435]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.435]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.435]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.435]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.435]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.435]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.435]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.435]             base::names(...future.oldOptions))
[16:21:00.435]     }
[16:21:00.435]     if (FALSE) {
[16:21:00.435]     }
[16:21:00.435]     else {
[16:21:00.435]         if (TRUE) {
[16:21:00.435]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.435]                 open = "w")
[16:21:00.435]         }
[16:21:00.435]         else {
[16:21:00.435]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.435]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.435]         }
[16:21:00.435]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.435]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.435]             base::sink(type = "output", split = FALSE)
[16:21:00.435]             base::close(...future.stdout)
[16:21:00.435]         }, add = TRUE)
[16:21:00.435]     }
[16:21:00.435]     ...future.frame <- base::sys.nframe()
[16:21:00.435]     ...future.conditions <- base::list()
[16:21:00.435]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.435]     if (FALSE) {
[16:21:00.435]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.435]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.435]     }
[16:21:00.435]     ...future.result <- base::tryCatch({
[16:21:00.435]         base::withCallingHandlers({
[16:21:00.435]             ...future.value <- base::withVisible(base::local({
[16:21:00.435]                 ...future.makeSendCondition <- base::local({
[16:21:00.435]                   sendCondition <- NULL
[16:21:00.435]                   function(frame = 1L) {
[16:21:00.435]                     if (is.function(sendCondition)) 
[16:21:00.435]                       return(sendCondition)
[16:21:00.435]                     ns <- getNamespace("parallel")
[16:21:00.435]                     if (exists("sendData", mode = "function", 
[16:21:00.435]                       envir = ns)) {
[16:21:00.435]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.435]                         envir = ns)
[16:21:00.435]                       envir <- sys.frame(frame)
[16:21:00.435]                       master <- NULL
[16:21:00.435]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.435]                         !identical(envir, emptyenv())) {
[16:21:00.435]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.435]                           inherits = FALSE)) {
[16:21:00.435]                           master <- get("master", mode = "list", 
[16:21:00.435]                             envir = envir, inherits = FALSE)
[16:21:00.435]                           if (inherits(master, c("SOCKnode", 
[16:21:00.435]                             "SOCK0node"))) {
[16:21:00.435]                             sendCondition <<- function(cond) {
[16:21:00.435]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.435]                                 success = TRUE)
[16:21:00.435]                               parallel_sendData(master, data)
[16:21:00.435]                             }
[16:21:00.435]                             return(sendCondition)
[16:21:00.435]                           }
[16:21:00.435]                         }
[16:21:00.435]                         frame <- frame + 1L
[16:21:00.435]                         envir <- sys.frame(frame)
[16:21:00.435]                       }
[16:21:00.435]                     }
[16:21:00.435]                     sendCondition <<- function(cond) NULL
[16:21:00.435]                   }
[16:21:00.435]                 })
[16:21:00.435]                 withCallingHandlers({
[16:21:00.435]                   {
[16:21:00.435]                     x[["a"]] <- 1
[16:21:00.435]                     x
[16:21:00.435]                   }
[16:21:00.435]                 }, immediateCondition = function(cond) {
[16:21:00.435]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.435]                   sendCondition(cond)
[16:21:00.435]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.435]                   {
[16:21:00.435]                     inherits <- base::inherits
[16:21:00.435]                     invokeRestart <- base::invokeRestart
[16:21:00.435]                     is.null <- base::is.null
[16:21:00.435]                     muffled <- FALSE
[16:21:00.435]                     if (inherits(cond, "message")) {
[16:21:00.435]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.435]                       if (muffled) 
[16:21:00.435]                         invokeRestart("muffleMessage")
[16:21:00.435]                     }
[16:21:00.435]                     else if (inherits(cond, "warning")) {
[16:21:00.435]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.435]                       if (muffled) 
[16:21:00.435]                         invokeRestart("muffleWarning")
[16:21:00.435]                     }
[16:21:00.435]                     else if (inherits(cond, "condition")) {
[16:21:00.435]                       if (!is.null(pattern)) {
[16:21:00.435]                         computeRestarts <- base::computeRestarts
[16:21:00.435]                         grepl <- base::grepl
[16:21:00.435]                         restarts <- computeRestarts(cond)
[16:21:00.435]                         for (restart in restarts) {
[16:21:00.435]                           name <- restart$name
[16:21:00.435]                           if (is.null(name)) 
[16:21:00.435]                             next
[16:21:00.435]                           if (!grepl(pattern, name)) 
[16:21:00.435]                             next
[16:21:00.435]                           invokeRestart(restart)
[16:21:00.435]                           muffled <- TRUE
[16:21:00.435]                           break
[16:21:00.435]                         }
[16:21:00.435]                       }
[16:21:00.435]                     }
[16:21:00.435]                     invisible(muffled)
[16:21:00.435]                   }
[16:21:00.435]                   muffleCondition(cond)
[16:21:00.435]                 })
[16:21:00.435]             }))
[16:21:00.435]             future::FutureResult(value = ...future.value$value, 
[16:21:00.435]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.435]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.435]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.435]                     ...future.globalenv.names))
[16:21:00.435]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.435]         }, condition = base::local({
[16:21:00.435]             c <- base::c
[16:21:00.435]             inherits <- base::inherits
[16:21:00.435]             invokeRestart <- base::invokeRestart
[16:21:00.435]             length <- base::length
[16:21:00.435]             list <- base::list
[16:21:00.435]             seq.int <- base::seq.int
[16:21:00.435]             signalCondition <- base::signalCondition
[16:21:00.435]             sys.calls <- base::sys.calls
[16:21:00.435]             `[[` <- base::`[[`
[16:21:00.435]             `+` <- base::`+`
[16:21:00.435]             `<<-` <- base::`<<-`
[16:21:00.435]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.435]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.435]                   3L)]
[16:21:00.435]             }
[16:21:00.435]             function(cond) {
[16:21:00.435]                 is_error <- inherits(cond, "error")
[16:21:00.435]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.435]                   NULL)
[16:21:00.435]                 if (is_error) {
[16:21:00.435]                   sessionInformation <- function() {
[16:21:00.435]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.435]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.435]                       search = base::search(), system = base::Sys.info())
[16:21:00.435]                   }
[16:21:00.435]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.435]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.435]                     cond$call), session = sessionInformation(), 
[16:21:00.435]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.435]                   signalCondition(cond)
[16:21:00.435]                 }
[16:21:00.435]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.435]                 "immediateCondition"))) {
[16:21:00.435]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.435]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.435]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.435]                   if (TRUE && !signal) {
[16:21:00.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.435]                     {
[16:21:00.435]                       inherits <- base::inherits
[16:21:00.435]                       invokeRestart <- base::invokeRestart
[16:21:00.435]                       is.null <- base::is.null
[16:21:00.435]                       muffled <- FALSE
[16:21:00.435]                       if (inherits(cond, "message")) {
[16:21:00.435]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.435]                         if (muffled) 
[16:21:00.435]                           invokeRestart("muffleMessage")
[16:21:00.435]                       }
[16:21:00.435]                       else if (inherits(cond, "warning")) {
[16:21:00.435]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.435]                         if (muffled) 
[16:21:00.435]                           invokeRestart("muffleWarning")
[16:21:00.435]                       }
[16:21:00.435]                       else if (inherits(cond, "condition")) {
[16:21:00.435]                         if (!is.null(pattern)) {
[16:21:00.435]                           computeRestarts <- base::computeRestarts
[16:21:00.435]                           grepl <- base::grepl
[16:21:00.435]                           restarts <- computeRestarts(cond)
[16:21:00.435]                           for (restart in restarts) {
[16:21:00.435]                             name <- restart$name
[16:21:00.435]                             if (is.null(name)) 
[16:21:00.435]                               next
[16:21:00.435]                             if (!grepl(pattern, name)) 
[16:21:00.435]                               next
[16:21:00.435]                             invokeRestart(restart)
[16:21:00.435]                             muffled <- TRUE
[16:21:00.435]                             break
[16:21:00.435]                           }
[16:21:00.435]                         }
[16:21:00.435]                       }
[16:21:00.435]                       invisible(muffled)
[16:21:00.435]                     }
[16:21:00.435]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.435]                   }
[16:21:00.435]                 }
[16:21:00.435]                 else {
[16:21:00.435]                   if (TRUE) {
[16:21:00.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.435]                     {
[16:21:00.435]                       inherits <- base::inherits
[16:21:00.435]                       invokeRestart <- base::invokeRestart
[16:21:00.435]                       is.null <- base::is.null
[16:21:00.435]                       muffled <- FALSE
[16:21:00.435]                       if (inherits(cond, "message")) {
[16:21:00.435]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.435]                         if (muffled) 
[16:21:00.435]                           invokeRestart("muffleMessage")
[16:21:00.435]                       }
[16:21:00.435]                       else if (inherits(cond, "warning")) {
[16:21:00.435]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.435]                         if (muffled) 
[16:21:00.435]                           invokeRestart("muffleWarning")
[16:21:00.435]                       }
[16:21:00.435]                       else if (inherits(cond, "condition")) {
[16:21:00.435]                         if (!is.null(pattern)) {
[16:21:00.435]                           computeRestarts <- base::computeRestarts
[16:21:00.435]                           grepl <- base::grepl
[16:21:00.435]                           restarts <- computeRestarts(cond)
[16:21:00.435]                           for (restart in restarts) {
[16:21:00.435]                             name <- restart$name
[16:21:00.435]                             if (is.null(name)) 
[16:21:00.435]                               next
[16:21:00.435]                             if (!grepl(pattern, name)) 
[16:21:00.435]                               next
[16:21:00.435]                             invokeRestart(restart)
[16:21:00.435]                             muffled <- TRUE
[16:21:00.435]                             break
[16:21:00.435]                           }
[16:21:00.435]                         }
[16:21:00.435]                       }
[16:21:00.435]                       invisible(muffled)
[16:21:00.435]                     }
[16:21:00.435]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.435]                   }
[16:21:00.435]                 }
[16:21:00.435]             }
[16:21:00.435]         }))
[16:21:00.435]     }, error = function(ex) {
[16:21:00.435]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.435]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.435]                 ...future.rng), started = ...future.startTime, 
[16:21:00.435]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.435]             version = "1.8"), class = "FutureResult")
[16:21:00.435]     }, finally = {
[16:21:00.435]         if (!identical(...future.workdir, getwd())) 
[16:21:00.435]             setwd(...future.workdir)
[16:21:00.435]         {
[16:21:00.435]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.435]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.435]             }
[16:21:00.435]             base::options(...future.oldOptions)
[16:21:00.435]             if (.Platform$OS.type == "windows") {
[16:21:00.435]                 old_names <- names(...future.oldEnvVars)
[16:21:00.435]                 envs <- base::Sys.getenv()
[16:21:00.435]                 names <- names(envs)
[16:21:00.435]                 common <- intersect(names, old_names)
[16:21:00.435]                 added <- setdiff(names, old_names)
[16:21:00.435]                 removed <- setdiff(old_names, names)
[16:21:00.435]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.435]                   envs[common]]
[16:21:00.435]                 NAMES <- toupper(changed)
[16:21:00.435]                 args <- list()
[16:21:00.435]                 for (kk in seq_along(NAMES)) {
[16:21:00.435]                   name <- changed[[kk]]
[16:21:00.435]                   NAME <- NAMES[[kk]]
[16:21:00.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.435]                     next
[16:21:00.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.435]                 }
[16:21:00.435]                 NAMES <- toupper(added)
[16:21:00.435]                 for (kk in seq_along(NAMES)) {
[16:21:00.435]                   name <- added[[kk]]
[16:21:00.435]                   NAME <- NAMES[[kk]]
[16:21:00.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.435]                     next
[16:21:00.435]                   args[[name]] <- ""
[16:21:00.435]                 }
[16:21:00.435]                 NAMES <- toupper(removed)
[16:21:00.435]                 for (kk in seq_along(NAMES)) {
[16:21:00.435]                   name <- removed[[kk]]
[16:21:00.435]                   NAME <- NAMES[[kk]]
[16:21:00.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.435]                     next
[16:21:00.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.435]                 }
[16:21:00.435]                 if (length(args) > 0) 
[16:21:00.435]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.435]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.435]             }
[16:21:00.435]             else {
[16:21:00.435]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.435]             }
[16:21:00.435]             {
[16:21:00.435]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.435]                   0L) {
[16:21:00.435]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.435]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.435]                   base::options(opts)
[16:21:00.435]                 }
[16:21:00.435]                 {
[16:21:00.435]                   {
[16:21:00.435]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.435]                     NULL
[16:21:00.435]                   }
[16:21:00.435]                   options(future.plan = NULL)
[16:21:00.435]                   if (is.na(NA_character_)) 
[16:21:00.435]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.435]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.435]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.435]                     .init = FALSE)
[16:21:00.435]                 }
[16:21:00.435]             }
[16:21:00.435]         }
[16:21:00.435]     })
[16:21:00.435]     if (TRUE) {
[16:21:00.435]         base::sink(type = "output", split = FALSE)
[16:21:00.435]         if (TRUE) {
[16:21:00.435]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.435]         }
[16:21:00.435]         else {
[16:21:00.435]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.435]         }
[16:21:00.435]         base::close(...future.stdout)
[16:21:00.435]         ...future.stdout <- NULL
[16:21:00.435]     }
[16:21:00.435]     ...future.result$conditions <- ...future.conditions
[16:21:00.435]     ...future.result$finished <- base::Sys.time()
[16:21:00.435]     ...future.result
[16:21:00.435] }
[16:21:00.437] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.438] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.438] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.438] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.439] MultisessionFuture started
[16:21:00.439] - Launch lazy future ... done
[16:21:00.439] run() for ‘MultisessionFuture’ ... done
[16:21:00.439] result() for ClusterFuture ...
[16:21:00.439] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.439] - Validating connection of MultisessionFuture
[16:21:00.440] - received message: FutureResult
[16:21:00.441] - Received FutureResult
[16:21:00.441] - Erased future from FutureRegistry
[16:21:00.441] result() for ClusterFuture ...
[16:21:00.441] - result already collected: FutureResult
[16:21:00.441] result() for ClusterFuture ... done
[16:21:00.441] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.441] result() for ClusterFuture ... done
[16:21:00.441] result() for ClusterFuture ...
[16:21:00.441] - result already collected: FutureResult
[16:21:00.441] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.442] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.442] Searching for globals...
[16:21:00.444] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.445] Searching for globals ... DONE
[16:21:00.445] Resolving globals: TRUE
[16:21:00.445] Resolving any globals that are futures ...
[16:21:00.445] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[16:21:00.445] Resolving any globals that are futures ... DONE
[16:21:00.445] Resolving futures part of globals (recursively) ...
[16:21:00.446] resolve() on list ...
[16:21:00.446]  recursive: 99
[16:21:00.446]  length: 1
[16:21:00.446]  elements: ‘x’
[16:21:00.448]  length: 0 (resolved future 1)
[16:21:00.448] resolve() on list ... DONE
[16:21:00.449] - globals: [1] ‘x’
[16:21:00.449] Resolving futures part of globals (recursively) ... DONE
[16:21:00.449] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.449] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.449] - globals: [1] ‘x’
[16:21:00.449] 
[16:21:00.450] getGlobalsAndPackages() ... DONE
[16:21:00.450] run() for ‘Future’ ...
[16:21:00.450] - state: ‘created’
[16:21:00.450] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.464] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.464] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.464]   - Field: ‘node’
[16:21:00.464]   - Field: ‘label’
[16:21:00.464]   - Field: ‘local’
[16:21:00.464]   - Field: ‘owner’
[16:21:00.464]   - Field: ‘envir’
[16:21:00.464]   - Field: ‘workers’
[16:21:00.465]   - Field: ‘packages’
[16:21:00.465]   - Field: ‘gc’
[16:21:00.465]   - Field: ‘conditions’
[16:21:00.465]   - Field: ‘persistent’
[16:21:00.465]   - Field: ‘expr’
[16:21:00.465]   - Field: ‘uuid’
[16:21:00.465]   - Field: ‘seed’
[16:21:00.465]   - Field: ‘version’
[16:21:00.465]   - Field: ‘result’
[16:21:00.465]   - Field: ‘asynchronous’
[16:21:00.465]   - Field: ‘calls’
[16:21:00.466]   - Field: ‘globals’
[16:21:00.466]   - Field: ‘stdout’
[16:21:00.466]   - Field: ‘earlySignal’
[16:21:00.466]   - Field: ‘lazy’
[16:21:00.466]   - Field: ‘state’
[16:21:00.466] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.466] - Launch lazy future ...
[16:21:00.466] Packages needed by the future expression (n = 0): <none>
[16:21:00.466] Packages needed by future strategies (n = 0): <none>
[16:21:00.467] {
[16:21:00.467]     {
[16:21:00.467]         {
[16:21:00.467]             ...future.startTime <- base::Sys.time()
[16:21:00.467]             {
[16:21:00.467]                 {
[16:21:00.467]                   {
[16:21:00.467]                     {
[16:21:00.467]                       base::local({
[16:21:00.467]                         has_future <- base::requireNamespace("future", 
[16:21:00.467]                           quietly = TRUE)
[16:21:00.467]                         if (has_future) {
[16:21:00.467]                           ns <- base::getNamespace("future")
[16:21:00.467]                           version <- ns[[".package"]][["version"]]
[16:21:00.467]                           if (is.null(version)) 
[16:21:00.467]                             version <- utils::packageVersion("future")
[16:21:00.467]                         }
[16:21:00.467]                         else {
[16:21:00.467]                           version <- NULL
[16:21:00.467]                         }
[16:21:00.467]                         if (!has_future || version < "1.8.0") {
[16:21:00.467]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.467]                             "", base::R.version$version.string), 
[16:21:00.467]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.467]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.467]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.467]                               "release", "version")], collapse = " "), 
[16:21:00.467]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.467]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.467]                             info)
[16:21:00.467]                           info <- base::paste(info, collapse = "; ")
[16:21:00.467]                           if (!has_future) {
[16:21:00.467]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.467]                               info)
[16:21:00.467]                           }
[16:21:00.467]                           else {
[16:21:00.467]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.467]                               info, version)
[16:21:00.467]                           }
[16:21:00.467]                           base::stop(msg)
[16:21:00.467]                         }
[16:21:00.467]                       })
[16:21:00.467]                     }
[16:21:00.467]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.467]                     base::options(mc.cores = 1L)
[16:21:00.467]                   }
[16:21:00.467]                   ...future.strategy.old <- future::plan("list")
[16:21:00.467]                   options(future.plan = NULL)
[16:21:00.467]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.467]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.467]                 }
[16:21:00.467]                 ...future.workdir <- getwd()
[16:21:00.467]             }
[16:21:00.467]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.467]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.467]         }
[16:21:00.467]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.467]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.467]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.467]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.467]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.467]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.467]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.467]             base::names(...future.oldOptions))
[16:21:00.467]     }
[16:21:00.467]     if (FALSE) {
[16:21:00.467]     }
[16:21:00.467]     else {
[16:21:00.467]         if (TRUE) {
[16:21:00.467]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.467]                 open = "w")
[16:21:00.467]         }
[16:21:00.467]         else {
[16:21:00.467]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.467]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.467]         }
[16:21:00.467]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.467]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.467]             base::sink(type = "output", split = FALSE)
[16:21:00.467]             base::close(...future.stdout)
[16:21:00.467]         }, add = TRUE)
[16:21:00.467]     }
[16:21:00.467]     ...future.frame <- base::sys.nframe()
[16:21:00.467]     ...future.conditions <- base::list()
[16:21:00.467]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.467]     if (FALSE) {
[16:21:00.467]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.467]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.467]     }
[16:21:00.467]     ...future.result <- base::tryCatch({
[16:21:00.467]         base::withCallingHandlers({
[16:21:00.467]             ...future.value <- base::withVisible(base::local({
[16:21:00.467]                 ...future.makeSendCondition <- base::local({
[16:21:00.467]                   sendCondition <- NULL
[16:21:00.467]                   function(frame = 1L) {
[16:21:00.467]                     if (is.function(sendCondition)) 
[16:21:00.467]                       return(sendCondition)
[16:21:00.467]                     ns <- getNamespace("parallel")
[16:21:00.467]                     if (exists("sendData", mode = "function", 
[16:21:00.467]                       envir = ns)) {
[16:21:00.467]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.467]                         envir = ns)
[16:21:00.467]                       envir <- sys.frame(frame)
[16:21:00.467]                       master <- NULL
[16:21:00.467]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.467]                         !identical(envir, emptyenv())) {
[16:21:00.467]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.467]                           inherits = FALSE)) {
[16:21:00.467]                           master <- get("master", mode = "list", 
[16:21:00.467]                             envir = envir, inherits = FALSE)
[16:21:00.467]                           if (inherits(master, c("SOCKnode", 
[16:21:00.467]                             "SOCK0node"))) {
[16:21:00.467]                             sendCondition <<- function(cond) {
[16:21:00.467]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.467]                                 success = TRUE)
[16:21:00.467]                               parallel_sendData(master, data)
[16:21:00.467]                             }
[16:21:00.467]                             return(sendCondition)
[16:21:00.467]                           }
[16:21:00.467]                         }
[16:21:00.467]                         frame <- frame + 1L
[16:21:00.467]                         envir <- sys.frame(frame)
[16:21:00.467]                       }
[16:21:00.467]                     }
[16:21:00.467]                     sendCondition <<- function(cond) NULL
[16:21:00.467]                   }
[16:21:00.467]                 })
[16:21:00.467]                 withCallingHandlers({
[16:21:00.467]                   {
[16:21:00.467]                     x[["a"]] <- 1
[16:21:00.467]                     x
[16:21:00.467]                   }
[16:21:00.467]                 }, immediateCondition = function(cond) {
[16:21:00.467]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.467]                   sendCondition(cond)
[16:21:00.467]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.467]                   {
[16:21:00.467]                     inherits <- base::inherits
[16:21:00.467]                     invokeRestart <- base::invokeRestart
[16:21:00.467]                     is.null <- base::is.null
[16:21:00.467]                     muffled <- FALSE
[16:21:00.467]                     if (inherits(cond, "message")) {
[16:21:00.467]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.467]                       if (muffled) 
[16:21:00.467]                         invokeRestart("muffleMessage")
[16:21:00.467]                     }
[16:21:00.467]                     else if (inherits(cond, "warning")) {
[16:21:00.467]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.467]                       if (muffled) 
[16:21:00.467]                         invokeRestart("muffleWarning")
[16:21:00.467]                     }
[16:21:00.467]                     else if (inherits(cond, "condition")) {
[16:21:00.467]                       if (!is.null(pattern)) {
[16:21:00.467]                         computeRestarts <- base::computeRestarts
[16:21:00.467]                         grepl <- base::grepl
[16:21:00.467]                         restarts <- computeRestarts(cond)
[16:21:00.467]                         for (restart in restarts) {
[16:21:00.467]                           name <- restart$name
[16:21:00.467]                           if (is.null(name)) 
[16:21:00.467]                             next
[16:21:00.467]                           if (!grepl(pattern, name)) 
[16:21:00.467]                             next
[16:21:00.467]                           invokeRestart(restart)
[16:21:00.467]                           muffled <- TRUE
[16:21:00.467]                           break
[16:21:00.467]                         }
[16:21:00.467]                       }
[16:21:00.467]                     }
[16:21:00.467]                     invisible(muffled)
[16:21:00.467]                   }
[16:21:00.467]                   muffleCondition(cond)
[16:21:00.467]                 })
[16:21:00.467]             }))
[16:21:00.467]             future::FutureResult(value = ...future.value$value, 
[16:21:00.467]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.467]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.467]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.467]                     ...future.globalenv.names))
[16:21:00.467]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.467]         }, condition = base::local({
[16:21:00.467]             c <- base::c
[16:21:00.467]             inherits <- base::inherits
[16:21:00.467]             invokeRestart <- base::invokeRestart
[16:21:00.467]             length <- base::length
[16:21:00.467]             list <- base::list
[16:21:00.467]             seq.int <- base::seq.int
[16:21:00.467]             signalCondition <- base::signalCondition
[16:21:00.467]             sys.calls <- base::sys.calls
[16:21:00.467]             `[[` <- base::`[[`
[16:21:00.467]             `+` <- base::`+`
[16:21:00.467]             `<<-` <- base::`<<-`
[16:21:00.467]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.467]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.467]                   3L)]
[16:21:00.467]             }
[16:21:00.467]             function(cond) {
[16:21:00.467]                 is_error <- inherits(cond, "error")
[16:21:00.467]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.467]                   NULL)
[16:21:00.467]                 if (is_error) {
[16:21:00.467]                   sessionInformation <- function() {
[16:21:00.467]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.467]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.467]                       search = base::search(), system = base::Sys.info())
[16:21:00.467]                   }
[16:21:00.467]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.467]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.467]                     cond$call), session = sessionInformation(), 
[16:21:00.467]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.467]                   signalCondition(cond)
[16:21:00.467]                 }
[16:21:00.467]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.467]                 "immediateCondition"))) {
[16:21:00.467]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.467]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.467]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.467]                   if (TRUE && !signal) {
[16:21:00.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.467]                     {
[16:21:00.467]                       inherits <- base::inherits
[16:21:00.467]                       invokeRestart <- base::invokeRestart
[16:21:00.467]                       is.null <- base::is.null
[16:21:00.467]                       muffled <- FALSE
[16:21:00.467]                       if (inherits(cond, "message")) {
[16:21:00.467]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.467]                         if (muffled) 
[16:21:00.467]                           invokeRestart("muffleMessage")
[16:21:00.467]                       }
[16:21:00.467]                       else if (inherits(cond, "warning")) {
[16:21:00.467]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.467]                         if (muffled) 
[16:21:00.467]                           invokeRestart("muffleWarning")
[16:21:00.467]                       }
[16:21:00.467]                       else if (inherits(cond, "condition")) {
[16:21:00.467]                         if (!is.null(pattern)) {
[16:21:00.467]                           computeRestarts <- base::computeRestarts
[16:21:00.467]                           grepl <- base::grepl
[16:21:00.467]                           restarts <- computeRestarts(cond)
[16:21:00.467]                           for (restart in restarts) {
[16:21:00.467]                             name <- restart$name
[16:21:00.467]                             if (is.null(name)) 
[16:21:00.467]                               next
[16:21:00.467]                             if (!grepl(pattern, name)) 
[16:21:00.467]                               next
[16:21:00.467]                             invokeRestart(restart)
[16:21:00.467]                             muffled <- TRUE
[16:21:00.467]                             break
[16:21:00.467]                           }
[16:21:00.467]                         }
[16:21:00.467]                       }
[16:21:00.467]                       invisible(muffled)
[16:21:00.467]                     }
[16:21:00.467]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.467]                   }
[16:21:00.467]                 }
[16:21:00.467]                 else {
[16:21:00.467]                   if (TRUE) {
[16:21:00.467]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.467]                     {
[16:21:00.467]                       inherits <- base::inherits
[16:21:00.467]                       invokeRestart <- base::invokeRestart
[16:21:00.467]                       is.null <- base::is.null
[16:21:00.467]                       muffled <- FALSE
[16:21:00.467]                       if (inherits(cond, "message")) {
[16:21:00.467]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.467]                         if (muffled) 
[16:21:00.467]                           invokeRestart("muffleMessage")
[16:21:00.467]                       }
[16:21:00.467]                       else if (inherits(cond, "warning")) {
[16:21:00.467]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.467]                         if (muffled) 
[16:21:00.467]                           invokeRestart("muffleWarning")
[16:21:00.467]                       }
[16:21:00.467]                       else if (inherits(cond, "condition")) {
[16:21:00.467]                         if (!is.null(pattern)) {
[16:21:00.467]                           computeRestarts <- base::computeRestarts
[16:21:00.467]                           grepl <- base::grepl
[16:21:00.467]                           restarts <- computeRestarts(cond)
[16:21:00.467]                           for (restart in restarts) {
[16:21:00.467]                             name <- restart$name
[16:21:00.467]                             if (is.null(name)) 
[16:21:00.467]                               next
[16:21:00.467]                             if (!grepl(pattern, name)) 
[16:21:00.467]                               next
[16:21:00.467]                             invokeRestart(restart)
[16:21:00.467]                             muffled <- TRUE
[16:21:00.467]                             break
[16:21:00.467]                           }
[16:21:00.467]                         }
[16:21:00.467]                       }
[16:21:00.467]                       invisible(muffled)
[16:21:00.467]                     }
[16:21:00.467]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.467]                   }
[16:21:00.467]                 }
[16:21:00.467]             }
[16:21:00.467]         }))
[16:21:00.467]     }, error = function(ex) {
[16:21:00.467]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.467]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.467]                 ...future.rng), started = ...future.startTime, 
[16:21:00.467]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.467]             version = "1.8"), class = "FutureResult")
[16:21:00.467]     }, finally = {
[16:21:00.467]         if (!identical(...future.workdir, getwd())) 
[16:21:00.467]             setwd(...future.workdir)
[16:21:00.467]         {
[16:21:00.467]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.467]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.467]             }
[16:21:00.467]             base::options(...future.oldOptions)
[16:21:00.467]             if (.Platform$OS.type == "windows") {
[16:21:00.467]                 old_names <- names(...future.oldEnvVars)
[16:21:00.467]                 envs <- base::Sys.getenv()
[16:21:00.467]                 names <- names(envs)
[16:21:00.467]                 common <- intersect(names, old_names)
[16:21:00.467]                 added <- setdiff(names, old_names)
[16:21:00.467]                 removed <- setdiff(old_names, names)
[16:21:00.467]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.467]                   envs[common]]
[16:21:00.467]                 NAMES <- toupper(changed)
[16:21:00.467]                 args <- list()
[16:21:00.467]                 for (kk in seq_along(NAMES)) {
[16:21:00.467]                   name <- changed[[kk]]
[16:21:00.467]                   NAME <- NAMES[[kk]]
[16:21:00.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.467]                     next
[16:21:00.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.467]                 }
[16:21:00.467]                 NAMES <- toupper(added)
[16:21:00.467]                 for (kk in seq_along(NAMES)) {
[16:21:00.467]                   name <- added[[kk]]
[16:21:00.467]                   NAME <- NAMES[[kk]]
[16:21:00.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.467]                     next
[16:21:00.467]                   args[[name]] <- ""
[16:21:00.467]                 }
[16:21:00.467]                 NAMES <- toupper(removed)
[16:21:00.467]                 for (kk in seq_along(NAMES)) {
[16:21:00.467]                   name <- removed[[kk]]
[16:21:00.467]                   NAME <- NAMES[[kk]]
[16:21:00.467]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.467]                     next
[16:21:00.467]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.467]                 }
[16:21:00.467]                 if (length(args) > 0) 
[16:21:00.467]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.467]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.467]             }
[16:21:00.467]             else {
[16:21:00.467]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.467]             }
[16:21:00.467]             {
[16:21:00.467]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.467]                   0L) {
[16:21:00.467]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.467]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.467]                   base::options(opts)
[16:21:00.467]                 }
[16:21:00.467]                 {
[16:21:00.467]                   {
[16:21:00.467]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.467]                     NULL
[16:21:00.467]                   }
[16:21:00.467]                   options(future.plan = NULL)
[16:21:00.467]                   if (is.na(NA_character_)) 
[16:21:00.467]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.467]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.467]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.467]                     .init = FALSE)
[16:21:00.467]                 }
[16:21:00.467]             }
[16:21:00.467]         }
[16:21:00.467]     })
[16:21:00.467]     if (TRUE) {
[16:21:00.467]         base::sink(type = "output", split = FALSE)
[16:21:00.467]         if (TRUE) {
[16:21:00.467]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.467]         }
[16:21:00.467]         else {
[16:21:00.467]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.467]         }
[16:21:00.467]         base::close(...future.stdout)
[16:21:00.467]         ...future.stdout <- NULL
[16:21:00.467]     }
[16:21:00.467]     ...future.result$conditions <- ...future.conditions
[16:21:00.467]     ...future.result$finished <- base::Sys.time()
[16:21:00.467]     ...future.result
[16:21:00.467] }
[16:21:00.469] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.469] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.470] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.470] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.470] MultisessionFuture started
[16:21:00.470] - Launch lazy future ... done
[16:21:00.470] run() for ‘MultisessionFuture’ ... done
[16:21:00.471] result() for ClusterFuture ...
[16:21:00.471] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.471] - Validating connection of MultisessionFuture
[16:21:00.472] - received message: FutureResult
[16:21:00.472] - Received FutureResult
[16:21:00.472] - Erased future from FutureRegistry
[16:21:00.472] result() for ClusterFuture ...
[16:21:00.472] - result already collected: FutureResult
[16:21:00.472] result() for ClusterFuture ... done
[16:21:00.472] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.472] result() for ClusterFuture ... done
[16:21:00.472] result() for ClusterFuture ...
[16:21:00.473] - result already collected: FutureResult
[16:21:00.473] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.473] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.473] Searching for globals...
[16:21:00.475] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.475] Searching for globals ... DONE
[16:21:00.475] Resolving globals: TRUE
[16:21:00.475] Resolving any globals that are futures ...
[16:21:00.475] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.475] Resolving any globals that are futures ... DONE
[16:21:00.476] Resolving futures part of globals (recursively) ...
[16:21:00.476] resolve() on list ...
[16:21:00.476]  recursive: 99
[16:21:00.476]  length: 1
[16:21:00.476]  elements: ‘x’
[16:21:00.476]  length: 0 (resolved future 1)
[16:21:00.477] resolve() on list ... DONE
[16:21:00.477] - globals: [1] ‘x’
[16:21:00.477] Resolving futures part of globals (recursively) ... DONE
[16:21:00.477] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.477] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.477] - globals: [1] ‘x’
[16:21:00.477] 
[16:21:00.478] getGlobalsAndPackages() ... DONE
[16:21:00.478] run() for ‘Future’ ...
[16:21:00.478] - state: ‘created’
[16:21:00.478] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.491] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.492]   - Field: ‘node’
[16:21:00.492]   - Field: ‘label’
[16:21:00.492]   - Field: ‘local’
[16:21:00.492]   - Field: ‘owner’
[16:21:00.492]   - Field: ‘envir’
[16:21:00.492]   - Field: ‘workers’
[16:21:00.492]   - Field: ‘packages’
[16:21:00.492]   - Field: ‘gc’
[16:21:00.492]   - Field: ‘conditions’
[16:21:00.493]   - Field: ‘persistent’
[16:21:00.493]   - Field: ‘expr’
[16:21:00.493]   - Field: ‘uuid’
[16:21:00.493]   - Field: ‘seed’
[16:21:00.493]   - Field: ‘version’
[16:21:00.493]   - Field: ‘result’
[16:21:00.493]   - Field: ‘asynchronous’
[16:21:00.493]   - Field: ‘calls’
[16:21:00.493]   - Field: ‘globals’
[16:21:00.493]   - Field: ‘stdout’
[16:21:00.493]   - Field: ‘earlySignal’
[16:21:00.494]   - Field: ‘lazy’
[16:21:00.494]   - Field: ‘state’
[16:21:00.494] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.494] - Launch lazy future ...
[16:21:00.494] Packages needed by the future expression (n = 0): <none>
[16:21:00.494] Packages needed by future strategies (n = 0): <none>
[16:21:00.495] {
[16:21:00.495]     {
[16:21:00.495]         {
[16:21:00.495]             ...future.startTime <- base::Sys.time()
[16:21:00.495]             {
[16:21:00.495]                 {
[16:21:00.495]                   {
[16:21:00.495]                     {
[16:21:00.495]                       base::local({
[16:21:00.495]                         has_future <- base::requireNamespace("future", 
[16:21:00.495]                           quietly = TRUE)
[16:21:00.495]                         if (has_future) {
[16:21:00.495]                           ns <- base::getNamespace("future")
[16:21:00.495]                           version <- ns[[".package"]][["version"]]
[16:21:00.495]                           if (is.null(version)) 
[16:21:00.495]                             version <- utils::packageVersion("future")
[16:21:00.495]                         }
[16:21:00.495]                         else {
[16:21:00.495]                           version <- NULL
[16:21:00.495]                         }
[16:21:00.495]                         if (!has_future || version < "1.8.0") {
[16:21:00.495]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.495]                             "", base::R.version$version.string), 
[16:21:00.495]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.495]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.495]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.495]                               "release", "version")], collapse = " "), 
[16:21:00.495]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.495]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.495]                             info)
[16:21:00.495]                           info <- base::paste(info, collapse = "; ")
[16:21:00.495]                           if (!has_future) {
[16:21:00.495]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.495]                               info)
[16:21:00.495]                           }
[16:21:00.495]                           else {
[16:21:00.495]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.495]                               info, version)
[16:21:00.495]                           }
[16:21:00.495]                           base::stop(msg)
[16:21:00.495]                         }
[16:21:00.495]                       })
[16:21:00.495]                     }
[16:21:00.495]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.495]                     base::options(mc.cores = 1L)
[16:21:00.495]                   }
[16:21:00.495]                   ...future.strategy.old <- future::plan("list")
[16:21:00.495]                   options(future.plan = NULL)
[16:21:00.495]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.495]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.495]                 }
[16:21:00.495]                 ...future.workdir <- getwd()
[16:21:00.495]             }
[16:21:00.495]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.495]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.495]         }
[16:21:00.495]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.495]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.495]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.495]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.495]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.495]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.495]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.495]             base::names(...future.oldOptions))
[16:21:00.495]     }
[16:21:00.495]     if (FALSE) {
[16:21:00.495]     }
[16:21:00.495]     else {
[16:21:00.495]         if (TRUE) {
[16:21:00.495]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.495]                 open = "w")
[16:21:00.495]         }
[16:21:00.495]         else {
[16:21:00.495]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.495]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.495]         }
[16:21:00.495]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.495]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.495]             base::sink(type = "output", split = FALSE)
[16:21:00.495]             base::close(...future.stdout)
[16:21:00.495]         }, add = TRUE)
[16:21:00.495]     }
[16:21:00.495]     ...future.frame <- base::sys.nframe()
[16:21:00.495]     ...future.conditions <- base::list()
[16:21:00.495]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.495]     if (FALSE) {
[16:21:00.495]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.495]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.495]     }
[16:21:00.495]     ...future.result <- base::tryCatch({
[16:21:00.495]         base::withCallingHandlers({
[16:21:00.495]             ...future.value <- base::withVisible(base::local({
[16:21:00.495]                 ...future.makeSendCondition <- base::local({
[16:21:00.495]                   sendCondition <- NULL
[16:21:00.495]                   function(frame = 1L) {
[16:21:00.495]                     if (is.function(sendCondition)) 
[16:21:00.495]                       return(sendCondition)
[16:21:00.495]                     ns <- getNamespace("parallel")
[16:21:00.495]                     if (exists("sendData", mode = "function", 
[16:21:00.495]                       envir = ns)) {
[16:21:00.495]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.495]                         envir = ns)
[16:21:00.495]                       envir <- sys.frame(frame)
[16:21:00.495]                       master <- NULL
[16:21:00.495]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.495]                         !identical(envir, emptyenv())) {
[16:21:00.495]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.495]                           inherits = FALSE)) {
[16:21:00.495]                           master <- get("master", mode = "list", 
[16:21:00.495]                             envir = envir, inherits = FALSE)
[16:21:00.495]                           if (inherits(master, c("SOCKnode", 
[16:21:00.495]                             "SOCK0node"))) {
[16:21:00.495]                             sendCondition <<- function(cond) {
[16:21:00.495]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.495]                                 success = TRUE)
[16:21:00.495]                               parallel_sendData(master, data)
[16:21:00.495]                             }
[16:21:00.495]                             return(sendCondition)
[16:21:00.495]                           }
[16:21:00.495]                         }
[16:21:00.495]                         frame <- frame + 1L
[16:21:00.495]                         envir <- sys.frame(frame)
[16:21:00.495]                       }
[16:21:00.495]                     }
[16:21:00.495]                     sendCondition <<- function(cond) NULL
[16:21:00.495]                   }
[16:21:00.495]                 })
[16:21:00.495]                 withCallingHandlers({
[16:21:00.495]                   {
[16:21:00.495]                     x["a"] <- list(1)
[16:21:00.495]                     x
[16:21:00.495]                   }
[16:21:00.495]                 }, immediateCondition = function(cond) {
[16:21:00.495]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.495]                   sendCondition(cond)
[16:21:00.495]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.495]                   {
[16:21:00.495]                     inherits <- base::inherits
[16:21:00.495]                     invokeRestart <- base::invokeRestart
[16:21:00.495]                     is.null <- base::is.null
[16:21:00.495]                     muffled <- FALSE
[16:21:00.495]                     if (inherits(cond, "message")) {
[16:21:00.495]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.495]                       if (muffled) 
[16:21:00.495]                         invokeRestart("muffleMessage")
[16:21:00.495]                     }
[16:21:00.495]                     else if (inherits(cond, "warning")) {
[16:21:00.495]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.495]                       if (muffled) 
[16:21:00.495]                         invokeRestart("muffleWarning")
[16:21:00.495]                     }
[16:21:00.495]                     else if (inherits(cond, "condition")) {
[16:21:00.495]                       if (!is.null(pattern)) {
[16:21:00.495]                         computeRestarts <- base::computeRestarts
[16:21:00.495]                         grepl <- base::grepl
[16:21:00.495]                         restarts <- computeRestarts(cond)
[16:21:00.495]                         for (restart in restarts) {
[16:21:00.495]                           name <- restart$name
[16:21:00.495]                           if (is.null(name)) 
[16:21:00.495]                             next
[16:21:00.495]                           if (!grepl(pattern, name)) 
[16:21:00.495]                             next
[16:21:00.495]                           invokeRestart(restart)
[16:21:00.495]                           muffled <- TRUE
[16:21:00.495]                           break
[16:21:00.495]                         }
[16:21:00.495]                       }
[16:21:00.495]                     }
[16:21:00.495]                     invisible(muffled)
[16:21:00.495]                   }
[16:21:00.495]                   muffleCondition(cond)
[16:21:00.495]                 })
[16:21:00.495]             }))
[16:21:00.495]             future::FutureResult(value = ...future.value$value, 
[16:21:00.495]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.495]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.495]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.495]                     ...future.globalenv.names))
[16:21:00.495]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.495]         }, condition = base::local({
[16:21:00.495]             c <- base::c
[16:21:00.495]             inherits <- base::inherits
[16:21:00.495]             invokeRestart <- base::invokeRestart
[16:21:00.495]             length <- base::length
[16:21:00.495]             list <- base::list
[16:21:00.495]             seq.int <- base::seq.int
[16:21:00.495]             signalCondition <- base::signalCondition
[16:21:00.495]             sys.calls <- base::sys.calls
[16:21:00.495]             `[[` <- base::`[[`
[16:21:00.495]             `+` <- base::`+`
[16:21:00.495]             `<<-` <- base::`<<-`
[16:21:00.495]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.495]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.495]                   3L)]
[16:21:00.495]             }
[16:21:00.495]             function(cond) {
[16:21:00.495]                 is_error <- inherits(cond, "error")
[16:21:00.495]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.495]                   NULL)
[16:21:00.495]                 if (is_error) {
[16:21:00.495]                   sessionInformation <- function() {
[16:21:00.495]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.495]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.495]                       search = base::search(), system = base::Sys.info())
[16:21:00.495]                   }
[16:21:00.495]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.495]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.495]                     cond$call), session = sessionInformation(), 
[16:21:00.495]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.495]                   signalCondition(cond)
[16:21:00.495]                 }
[16:21:00.495]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.495]                 "immediateCondition"))) {
[16:21:00.495]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.495]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.495]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.495]                   if (TRUE && !signal) {
[16:21:00.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.495]                     {
[16:21:00.495]                       inherits <- base::inherits
[16:21:00.495]                       invokeRestart <- base::invokeRestart
[16:21:00.495]                       is.null <- base::is.null
[16:21:00.495]                       muffled <- FALSE
[16:21:00.495]                       if (inherits(cond, "message")) {
[16:21:00.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.495]                         if (muffled) 
[16:21:00.495]                           invokeRestart("muffleMessage")
[16:21:00.495]                       }
[16:21:00.495]                       else if (inherits(cond, "warning")) {
[16:21:00.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.495]                         if (muffled) 
[16:21:00.495]                           invokeRestart("muffleWarning")
[16:21:00.495]                       }
[16:21:00.495]                       else if (inherits(cond, "condition")) {
[16:21:00.495]                         if (!is.null(pattern)) {
[16:21:00.495]                           computeRestarts <- base::computeRestarts
[16:21:00.495]                           grepl <- base::grepl
[16:21:00.495]                           restarts <- computeRestarts(cond)
[16:21:00.495]                           for (restart in restarts) {
[16:21:00.495]                             name <- restart$name
[16:21:00.495]                             if (is.null(name)) 
[16:21:00.495]                               next
[16:21:00.495]                             if (!grepl(pattern, name)) 
[16:21:00.495]                               next
[16:21:00.495]                             invokeRestart(restart)
[16:21:00.495]                             muffled <- TRUE
[16:21:00.495]                             break
[16:21:00.495]                           }
[16:21:00.495]                         }
[16:21:00.495]                       }
[16:21:00.495]                       invisible(muffled)
[16:21:00.495]                     }
[16:21:00.495]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.495]                   }
[16:21:00.495]                 }
[16:21:00.495]                 else {
[16:21:00.495]                   if (TRUE) {
[16:21:00.495]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.495]                     {
[16:21:00.495]                       inherits <- base::inherits
[16:21:00.495]                       invokeRestart <- base::invokeRestart
[16:21:00.495]                       is.null <- base::is.null
[16:21:00.495]                       muffled <- FALSE
[16:21:00.495]                       if (inherits(cond, "message")) {
[16:21:00.495]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.495]                         if (muffled) 
[16:21:00.495]                           invokeRestart("muffleMessage")
[16:21:00.495]                       }
[16:21:00.495]                       else if (inherits(cond, "warning")) {
[16:21:00.495]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.495]                         if (muffled) 
[16:21:00.495]                           invokeRestart("muffleWarning")
[16:21:00.495]                       }
[16:21:00.495]                       else if (inherits(cond, "condition")) {
[16:21:00.495]                         if (!is.null(pattern)) {
[16:21:00.495]                           computeRestarts <- base::computeRestarts
[16:21:00.495]                           grepl <- base::grepl
[16:21:00.495]                           restarts <- computeRestarts(cond)
[16:21:00.495]                           for (restart in restarts) {
[16:21:00.495]                             name <- restart$name
[16:21:00.495]                             if (is.null(name)) 
[16:21:00.495]                               next
[16:21:00.495]                             if (!grepl(pattern, name)) 
[16:21:00.495]                               next
[16:21:00.495]                             invokeRestart(restart)
[16:21:00.495]                             muffled <- TRUE
[16:21:00.495]                             break
[16:21:00.495]                           }
[16:21:00.495]                         }
[16:21:00.495]                       }
[16:21:00.495]                       invisible(muffled)
[16:21:00.495]                     }
[16:21:00.495]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.495]                   }
[16:21:00.495]                 }
[16:21:00.495]             }
[16:21:00.495]         }))
[16:21:00.495]     }, error = function(ex) {
[16:21:00.495]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.495]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.495]                 ...future.rng), started = ...future.startTime, 
[16:21:00.495]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.495]             version = "1.8"), class = "FutureResult")
[16:21:00.495]     }, finally = {
[16:21:00.495]         if (!identical(...future.workdir, getwd())) 
[16:21:00.495]             setwd(...future.workdir)
[16:21:00.495]         {
[16:21:00.495]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.495]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.495]             }
[16:21:00.495]             base::options(...future.oldOptions)
[16:21:00.495]             if (.Platform$OS.type == "windows") {
[16:21:00.495]                 old_names <- names(...future.oldEnvVars)
[16:21:00.495]                 envs <- base::Sys.getenv()
[16:21:00.495]                 names <- names(envs)
[16:21:00.495]                 common <- intersect(names, old_names)
[16:21:00.495]                 added <- setdiff(names, old_names)
[16:21:00.495]                 removed <- setdiff(old_names, names)
[16:21:00.495]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.495]                   envs[common]]
[16:21:00.495]                 NAMES <- toupper(changed)
[16:21:00.495]                 args <- list()
[16:21:00.495]                 for (kk in seq_along(NAMES)) {
[16:21:00.495]                   name <- changed[[kk]]
[16:21:00.495]                   NAME <- NAMES[[kk]]
[16:21:00.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.495]                     next
[16:21:00.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.495]                 }
[16:21:00.495]                 NAMES <- toupper(added)
[16:21:00.495]                 for (kk in seq_along(NAMES)) {
[16:21:00.495]                   name <- added[[kk]]
[16:21:00.495]                   NAME <- NAMES[[kk]]
[16:21:00.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.495]                     next
[16:21:00.495]                   args[[name]] <- ""
[16:21:00.495]                 }
[16:21:00.495]                 NAMES <- toupper(removed)
[16:21:00.495]                 for (kk in seq_along(NAMES)) {
[16:21:00.495]                   name <- removed[[kk]]
[16:21:00.495]                   NAME <- NAMES[[kk]]
[16:21:00.495]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.495]                     next
[16:21:00.495]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.495]                 }
[16:21:00.495]                 if (length(args) > 0) 
[16:21:00.495]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.495]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.495]             }
[16:21:00.495]             else {
[16:21:00.495]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.495]             }
[16:21:00.495]             {
[16:21:00.495]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.495]                   0L) {
[16:21:00.495]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.495]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.495]                   base::options(opts)
[16:21:00.495]                 }
[16:21:00.495]                 {
[16:21:00.495]                   {
[16:21:00.495]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.495]                     NULL
[16:21:00.495]                   }
[16:21:00.495]                   options(future.plan = NULL)
[16:21:00.495]                   if (is.na(NA_character_)) 
[16:21:00.495]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.495]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.495]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.495]                     .init = FALSE)
[16:21:00.495]                 }
[16:21:00.495]             }
[16:21:00.495]         }
[16:21:00.495]     })
[16:21:00.495]     if (TRUE) {
[16:21:00.495]         base::sink(type = "output", split = FALSE)
[16:21:00.495]         if (TRUE) {
[16:21:00.495]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.495]         }
[16:21:00.495]         else {
[16:21:00.495]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.495]         }
[16:21:00.495]         base::close(...future.stdout)
[16:21:00.495]         ...future.stdout <- NULL
[16:21:00.495]     }
[16:21:00.495]     ...future.result$conditions <- ...future.conditions
[16:21:00.495]     ...future.result$finished <- base::Sys.time()
[16:21:00.495]     ...future.result
[16:21:00.495] }
[16:21:00.497] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.497] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.497] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.498] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.498] MultisessionFuture started
[16:21:00.498] - Launch lazy future ... done
[16:21:00.498] run() for ‘MultisessionFuture’ ... done
[16:21:00.498] result() for ClusterFuture ...
[16:21:00.498] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.499] - Validating connection of MultisessionFuture
[16:21:00.499] - received message: FutureResult
[16:21:00.500] - Received FutureResult
[16:21:00.500] - Erased future from FutureRegistry
[16:21:00.500] result() for ClusterFuture ...
[16:21:00.500] - result already collected: FutureResult
[16:21:00.500] result() for ClusterFuture ... done
[16:21:00.500] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.500] result() for ClusterFuture ... done
[16:21:00.500] result() for ClusterFuture ...
[16:21:00.500] - result already collected: FutureResult
[16:21:00.500] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.501] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.501] Searching for globals...
[16:21:00.503] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.503] Searching for globals ... DONE
[16:21:00.503] Resolving globals: TRUE
[16:21:00.503] Resolving any globals that are futures ...
[16:21:00.503] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.503] Resolving any globals that are futures ... DONE
[16:21:00.504] Resolving futures part of globals (recursively) ...
[16:21:00.504] resolve() on list ...
[16:21:00.504]  recursive: 99
[16:21:00.504]  length: 1
[16:21:00.504]  elements: ‘x’
[16:21:00.504]  length: 0 (resolved future 1)
[16:21:00.505] resolve() on list ... DONE
[16:21:00.505] - globals: [1] ‘x’
[16:21:00.505] Resolving futures part of globals (recursively) ... DONE
[16:21:00.505] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.505] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.505] - globals: [1] ‘x’
[16:21:00.505] 
[16:21:00.506] getGlobalsAndPackages() ... DONE
[16:21:00.506] run() for ‘Future’ ...
[16:21:00.506] - state: ‘created’
[16:21:00.506] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.519] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.519] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.520]   - Field: ‘node’
[16:21:00.520]   - Field: ‘label’
[16:21:00.520]   - Field: ‘local’
[16:21:00.520]   - Field: ‘owner’
[16:21:00.520]   - Field: ‘envir’
[16:21:00.520]   - Field: ‘workers’
[16:21:00.520]   - Field: ‘packages’
[16:21:00.520]   - Field: ‘gc’
[16:21:00.520]   - Field: ‘conditions’
[16:21:00.521]   - Field: ‘persistent’
[16:21:00.521]   - Field: ‘expr’
[16:21:00.521]   - Field: ‘uuid’
[16:21:00.521]   - Field: ‘seed’
[16:21:00.521]   - Field: ‘version’
[16:21:00.521]   - Field: ‘result’
[16:21:00.521]   - Field: ‘asynchronous’
[16:21:00.521]   - Field: ‘calls’
[16:21:00.521]   - Field: ‘globals’
[16:21:00.521]   - Field: ‘stdout’
[16:21:00.521]   - Field: ‘earlySignal’
[16:21:00.522]   - Field: ‘lazy’
[16:21:00.522]   - Field: ‘state’
[16:21:00.522] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.522] - Launch lazy future ...
[16:21:00.522] Packages needed by the future expression (n = 0): <none>
[16:21:00.522] Packages needed by future strategies (n = 0): <none>
[16:21:00.523] {
[16:21:00.523]     {
[16:21:00.523]         {
[16:21:00.523]             ...future.startTime <- base::Sys.time()
[16:21:00.523]             {
[16:21:00.523]                 {
[16:21:00.523]                   {
[16:21:00.523]                     {
[16:21:00.523]                       base::local({
[16:21:00.523]                         has_future <- base::requireNamespace("future", 
[16:21:00.523]                           quietly = TRUE)
[16:21:00.523]                         if (has_future) {
[16:21:00.523]                           ns <- base::getNamespace("future")
[16:21:00.523]                           version <- ns[[".package"]][["version"]]
[16:21:00.523]                           if (is.null(version)) 
[16:21:00.523]                             version <- utils::packageVersion("future")
[16:21:00.523]                         }
[16:21:00.523]                         else {
[16:21:00.523]                           version <- NULL
[16:21:00.523]                         }
[16:21:00.523]                         if (!has_future || version < "1.8.0") {
[16:21:00.523]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.523]                             "", base::R.version$version.string), 
[16:21:00.523]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.523]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.523]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.523]                               "release", "version")], collapse = " "), 
[16:21:00.523]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.523]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.523]                             info)
[16:21:00.523]                           info <- base::paste(info, collapse = "; ")
[16:21:00.523]                           if (!has_future) {
[16:21:00.523]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.523]                               info)
[16:21:00.523]                           }
[16:21:00.523]                           else {
[16:21:00.523]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.523]                               info, version)
[16:21:00.523]                           }
[16:21:00.523]                           base::stop(msg)
[16:21:00.523]                         }
[16:21:00.523]                       })
[16:21:00.523]                     }
[16:21:00.523]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.523]                     base::options(mc.cores = 1L)
[16:21:00.523]                   }
[16:21:00.523]                   ...future.strategy.old <- future::plan("list")
[16:21:00.523]                   options(future.plan = NULL)
[16:21:00.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.523]                 }
[16:21:00.523]                 ...future.workdir <- getwd()
[16:21:00.523]             }
[16:21:00.523]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.523]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.523]         }
[16:21:00.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.523]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.523]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.523]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.523]             base::names(...future.oldOptions))
[16:21:00.523]     }
[16:21:00.523]     if (FALSE) {
[16:21:00.523]     }
[16:21:00.523]     else {
[16:21:00.523]         if (TRUE) {
[16:21:00.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.523]                 open = "w")
[16:21:00.523]         }
[16:21:00.523]         else {
[16:21:00.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.523]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.523]         }
[16:21:00.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.523]             base::sink(type = "output", split = FALSE)
[16:21:00.523]             base::close(...future.stdout)
[16:21:00.523]         }, add = TRUE)
[16:21:00.523]     }
[16:21:00.523]     ...future.frame <- base::sys.nframe()
[16:21:00.523]     ...future.conditions <- base::list()
[16:21:00.523]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.523]     if (FALSE) {
[16:21:00.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.523]     }
[16:21:00.523]     ...future.result <- base::tryCatch({
[16:21:00.523]         base::withCallingHandlers({
[16:21:00.523]             ...future.value <- base::withVisible(base::local({
[16:21:00.523]                 ...future.makeSendCondition <- base::local({
[16:21:00.523]                   sendCondition <- NULL
[16:21:00.523]                   function(frame = 1L) {
[16:21:00.523]                     if (is.function(sendCondition)) 
[16:21:00.523]                       return(sendCondition)
[16:21:00.523]                     ns <- getNamespace("parallel")
[16:21:00.523]                     if (exists("sendData", mode = "function", 
[16:21:00.523]                       envir = ns)) {
[16:21:00.523]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.523]                         envir = ns)
[16:21:00.523]                       envir <- sys.frame(frame)
[16:21:00.523]                       master <- NULL
[16:21:00.523]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.523]                         !identical(envir, emptyenv())) {
[16:21:00.523]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.523]                           inherits = FALSE)) {
[16:21:00.523]                           master <- get("master", mode = "list", 
[16:21:00.523]                             envir = envir, inherits = FALSE)
[16:21:00.523]                           if (inherits(master, c("SOCKnode", 
[16:21:00.523]                             "SOCK0node"))) {
[16:21:00.523]                             sendCondition <<- function(cond) {
[16:21:00.523]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.523]                                 success = TRUE)
[16:21:00.523]                               parallel_sendData(master, data)
[16:21:00.523]                             }
[16:21:00.523]                             return(sendCondition)
[16:21:00.523]                           }
[16:21:00.523]                         }
[16:21:00.523]                         frame <- frame + 1L
[16:21:00.523]                         envir <- sys.frame(frame)
[16:21:00.523]                       }
[16:21:00.523]                     }
[16:21:00.523]                     sendCondition <<- function(cond) NULL
[16:21:00.523]                   }
[16:21:00.523]                 })
[16:21:00.523]                 withCallingHandlers({
[16:21:00.523]                   {
[16:21:00.523]                     x["a"] <- list(1)
[16:21:00.523]                     x
[16:21:00.523]                   }
[16:21:00.523]                 }, immediateCondition = function(cond) {
[16:21:00.523]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.523]                   sendCondition(cond)
[16:21:00.523]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.523]                   {
[16:21:00.523]                     inherits <- base::inherits
[16:21:00.523]                     invokeRestart <- base::invokeRestart
[16:21:00.523]                     is.null <- base::is.null
[16:21:00.523]                     muffled <- FALSE
[16:21:00.523]                     if (inherits(cond, "message")) {
[16:21:00.523]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.523]                       if (muffled) 
[16:21:00.523]                         invokeRestart("muffleMessage")
[16:21:00.523]                     }
[16:21:00.523]                     else if (inherits(cond, "warning")) {
[16:21:00.523]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.523]                       if (muffled) 
[16:21:00.523]                         invokeRestart("muffleWarning")
[16:21:00.523]                     }
[16:21:00.523]                     else if (inherits(cond, "condition")) {
[16:21:00.523]                       if (!is.null(pattern)) {
[16:21:00.523]                         computeRestarts <- base::computeRestarts
[16:21:00.523]                         grepl <- base::grepl
[16:21:00.523]                         restarts <- computeRestarts(cond)
[16:21:00.523]                         for (restart in restarts) {
[16:21:00.523]                           name <- restart$name
[16:21:00.523]                           if (is.null(name)) 
[16:21:00.523]                             next
[16:21:00.523]                           if (!grepl(pattern, name)) 
[16:21:00.523]                             next
[16:21:00.523]                           invokeRestart(restart)
[16:21:00.523]                           muffled <- TRUE
[16:21:00.523]                           break
[16:21:00.523]                         }
[16:21:00.523]                       }
[16:21:00.523]                     }
[16:21:00.523]                     invisible(muffled)
[16:21:00.523]                   }
[16:21:00.523]                   muffleCondition(cond)
[16:21:00.523]                 })
[16:21:00.523]             }))
[16:21:00.523]             future::FutureResult(value = ...future.value$value, 
[16:21:00.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.523]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.523]                     ...future.globalenv.names))
[16:21:00.523]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.523]         }, condition = base::local({
[16:21:00.523]             c <- base::c
[16:21:00.523]             inherits <- base::inherits
[16:21:00.523]             invokeRestart <- base::invokeRestart
[16:21:00.523]             length <- base::length
[16:21:00.523]             list <- base::list
[16:21:00.523]             seq.int <- base::seq.int
[16:21:00.523]             signalCondition <- base::signalCondition
[16:21:00.523]             sys.calls <- base::sys.calls
[16:21:00.523]             `[[` <- base::`[[`
[16:21:00.523]             `+` <- base::`+`
[16:21:00.523]             `<<-` <- base::`<<-`
[16:21:00.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.523]                   3L)]
[16:21:00.523]             }
[16:21:00.523]             function(cond) {
[16:21:00.523]                 is_error <- inherits(cond, "error")
[16:21:00.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.523]                   NULL)
[16:21:00.523]                 if (is_error) {
[16:21:00.523]                   sessionInformation <- function() {
[16:21:00.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.523]                       search = base::search(), system = base::Sys.info())
[16:21:00.523]                   }
[16:21:00.523]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.523]                     cond$call), session = sessionInformation(), 
[16:21:00.523]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.523]                   signalCondition(cond)
[16:21:00.523]                 }
[16:21:00.523]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.523]                 "immediateCondition"))) {
[16:21:00.523]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.523]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.523]                   if (TRUE && !signal) {
[16:21:00.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.523]                     {
[16:21:00.523]                       inherits <- base::inherits
[16:21:00.523]                       invokeRestart <- base::invokeRestart
[16:21:00.523]                       is.null <- base::is.null
[16:21:00.523]                       muffled <- FALSE
[16:21:00.523]                       if (inherits(cond, "message")) {
[16:21:00.523]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.523]                         if (muffled) 
[16:21:00.523]                           invokeRestart("muffleMessage")
[16:21:00.523]                       }
[16:21:00.523]                       else if (inherits(cond, "warning")) {
[16:21:00.523]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.523]                         if (muffled) 
[16:21:00.523]                           invokeRestart("muffleWarning")
[16:21:00.523]                       }
[16:21:00.523]                       else if (inherits(cond, "condition")) {
[16:21:00.523]                         if (!is.null(pattern)) {
[16:21:00.523]                           computeRestarts <- base::computeRestarts
[16:21:00.523]                           grepl <- base::grepl
[16:21:00.523]                           restarts <- computeRestarts(cond)
[16:21:00.523]                           for (restart in restarts) {
[16:21:00.523]                             name <- restart$name
[16:21:00.523]                             if (is.null(name)) 
[16:21:00.523]                               next
[16:21:00.523]                             if (!grepl(pattern, name)) 
[16:21:00.523]                               next
[16:21:00.523]                             invokeRestart(restart)
[16:21:00.523]                             muffled <- TRUE
[16:21:00.523]                             break
[16:21:00.523]                           }
[16:21:00.523]                         }
[16:21:00.523]                       }
[16:21:00.523]                       invisible(muffled)
[16:21:00.523]                     }
[16:21:00.523]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.523]                   }
[16:21:00.523]                 }
[16:21:00.523]                 else {
[16:21:00.523]                   if (TRUE) {
[16:21:00.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.523]                     {
[16:21:00.523]                       inherits <- base::inherits
[16:21:00.523]                       invokeRestart <- base::invokeRestart
[16:21:00.523]                       is.null <- base::is.null
[16:21:00.523]                       muffled <- FALSE
[16:21:00.523]                       if (inherits(cond, "message")) {
[16:21:00.523]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.523]                         if (muffled) 
[16:21:00.523]                           invokeRestart("muffleMessage")
[16:21:00.523]                       }
[16:21:00.523]                       else if (inherits(cond, "warning")) {
[16:21:00.523]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.523]                         if (muffled) 
[16:21:00.523]                           invokeRestart("muffleWarning")
[16:21:00.523]                       }
[16:21:00.523]                       else if (inherits(cond, "condition")) {
[16:21:00.523]                         if (!is.null(pattern)) {
[16:21:00.523]                           computeRestarts <- base::computeRestarts
[16:21:00.523]                           grepl <- base::grepl
[16:21:00.523]                           restarts <- computeRestarts(cond)
[16:21:00.523]                           for (restart in restarts) {
[16:21:00.523]                             name <- restart$name
[16:21:00.523]                             if (is.null(name)) 
[16:21:00.523]                               next
[16:21:00.523]                             if (!grepl(pattern, name)) 
[16:21:00.523]                               next
[16:21:00.523]                             invokeRestart(restart)
[16:21:00.523]                             muffled <- TRUE
[16:21:00.523]                             break
[16:21:00.523]                           }
[16:21:00.523]                         }
[16:21:00.523]                       }
[16:21:00.523]                       invisible(muffled)
[16:21:00.523]                     }
[16:21:00.523]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.523]                   }
[16:21:00.523]                 }
[16:21:00.523]             }
[16:21:00.523]         }))
[16:21:00.523]     }, error = function(ex) {
[16:21:00.523]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.523]                 ...future.rng), started = ...future.startTime, 
[16:21:00.523]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.523]             version = "1.8"), class = "FutureResult")
[16:21:00.523]     }, finally = {
[16:21:00.523]         if (!identical(...future.workdir, getwd())) 
[16:21:00.523]             setwd(...future.workdir)
[16:21:00.523]         {
[16:21:00.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.523]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.523]             }
[16:21:00.523]             base::options(...future.oldOptions)
[16:21:00.523]             if (.Platform$OS.type == "windows") {
[16:21:00.523]                 old_names <- names(...future.oldEnvVars)
[16:21:00.523]                 envs <- base::Sys.getenv()
[16:21:00.523]                 names <- names(envs)
[16:21:00.523]                 common <- intersect(names, old_names)
[16:21:00.523]                 added <- setdiff(names, old_names)
[16:21:00.523]                 removed <- setdiff(old_names, names)
[16:21:00.523]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.523]                   envs[common]]
[16:21:00.523]                 NAMES <- toupper(changed)
[16:21:00.523]                 args <- list()
[16:21:00.523]                 for (kk in seq_along(NAMES)) {
[16:21:00.523]                   name <- changed[[kk]]
[16:21:00.523]                   NAME <- NAMES[[kk]]
[16:21:00.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.523]                     next
[16:21:00.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.523]                 }
[16:21:00.523]                 NAMES <- toupper(added)
[16:21:00.523]                 for (kk in seq_along(NAMES)) {
[16:21:00.523]                   name <- added[[kk]]
[16:21:00.523]                   NAME <- NAMES[[kk]]
[16:21:00.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.523]                     next
[16:21:00.523]                   args[[name]] <- ""
[16:21:00.523]                 }
[16:21:00.523]                 NAMES <- toupper(removed)
[16:21:00.523]                 for (kk in seq_along(NAMES)) {
[16:21:00.523]                   name <- removed[[kk]]
[16:21:00.523]                   NAME <- NAMES[[kk]]
[16:21:00.523]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.523]                     next
[16:21:00.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.523]                 }
[16:21:00.523]                 if (length(args) > 0) 
[16:21:00.523]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.523]             }
[16:21:00.523]             else {
[16:21:00.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.523]             }
[16:21:00.523]             {
[16:21:00.523]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.523]                   0L) {
[16:21:00.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.523]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.523]                   base::options(opts)
[16:21:00.523]                 }
[16:21:00.523]                 {
[16:21:00.523]                   {
[16:21:00.523]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.523]                     NULL
[16:21:00.523]                   }
[16:21:00.523]                   options(future.plan = NULL)
[16:21:00.523]                   if (is.na(NA_character_)) 
[16:21:00.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.523]                     .init = FALSE)
[16:21:00.523]                 }
[16:21:00.523]             }
[16:21:00.523]         }
[16:21:00.523]     })
[16:21:00.523]     if (TRUE) {
[16:21:00.523]         base::sink(type = "output", split = FALSE)
[16:21:00.523]         if (TRUE) {
[16:21:00.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.523]         }
[16:21:00.523]         else {
[16:21:00.523]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.523]         }
[16:21:00.523]         base::close(...future.stdout)
[16:21:00.523]         ...future.stdout <- NULL
[16:21:00.523]     }
[16:21:00.523]     ...future.result$conditions <- ...future.conditions
[16:21:00.523]     ...future.result$finished <- base::Sys.time()
[16:21:00.523]     ...future.result
[16:21:00.523] }
[16:21:00.525] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.525] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.525] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.526] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.526] MultisessionFuture started
[16:21:00.526] - Launch lazy future ... done
[16:21:00.526] run() for ‘MultisessionFuture’ ... done
[16:21:00.526] result() for ClusterFuture ...
[16:21:00.526] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.527] - Validating connection of MultisessionFuture
[16:21:00.527] - received message: FutureResult
[16:21:00.528] - Received FutureResult
[16:21:00.528] - Erased future from FutureRegistry
[16:21:00.528] result() for ClusterFuture ...
[16:21:00.528] - result already collected: FutureResult
[16:21:00.528] result() for ClusterFuture ... done
[16:21:00.528] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.528] result() for ClusterFuture ... done
[16:21:00.528] result() for ClusterFuture ...
[16:21:00.528] - result already collected: FutureResult
[16:21:00.528] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.529] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.529] Searching for globals...
[16:21:00.531] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.531] Searching for globals ... DONE
[16:21:00.531] Resolving globals: TRUE
[16:21:00.531] Resolving any globals that are futures ...
[16:21:00.531] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[16:21:00.532] Resolving any globals that are futures ... DONE
[16:21:00.532] Resolving futures part of globals (recursively) ...
[16:21:00.532] resolve() on list ...
[16:21:00.532]  recursive: 99
[16:21:00.532]  length: 1
[16:21:00.532]  elements: ‘x’
[16:21:00.533]  length: 0 (resolved future 1)
[16:21:00.533] resolve() on list ... DONE
[16:21:00.533] - globals: [1] ‘x’
[16:21:00.533] Resolving futures part of globals (recursively) ... DONE
[16:21:00.533] The total size of the 1 globals is 0 bytes (0 bytes)
[16:21:00.533] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[16:21:00.533] - globals: [1] ‘x’
[16:21:00.534] 
[16:21:00.534] getGlobalsAndPackages() ... DONE
[16:21:00.534] run() for ‘Future’ ...
[16:21:00.534] - state: ‘created’
[16:21:00.534] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.548] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.548] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.548]   - Field: ‘node’
[16:21:00.548]   - Field: ‘label’
[16:21:00.548]   - Field: ‘local’
[16:21:00.548]   - Field: ‘owner’
[16:21:00.548]   - Field: ‘envir’
[16:21:00.548]   - Field: ‘workers’
[16:21:00.548]   - Field: ‘packages’
[16:21:00.549]   - Field: ‘gc’
[16:21:00.549]   - Field: ‘conditions’
[16:21:00.549]   - Field: ‘persistent’
[16:21:00.549]   - Field: ‘expr’
[16:21:00.549]   - Field: ‘uuid’
[16:21:00.549]   - Field: ‘seed’
[16:21:00.549]   - Field: ‘version’
[16:21:00.549]   - Field: ‘result’
[16:21:00.549]   - Field: ‘asynchronous’
[16:21:00.549]   - Field: ‘calls’
[16:21:00.549]   - Field: ‘globals’
[16:21:00.550]   - Field: ‘stdout’
[16:21:00.550]   - Field: ‘earlySignal’
[16:21:00.550]   - Field: ‘lazy’
[16:21:00.550]   - Field: ‘state’
[16:21:00.550] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.550] - Launch lazy future ...
[16:21:00.550] Packages needed by the future expression (n = 0): <none>
[16:21:00.550] Packages needed by future strategies (n = 0): <none>
[16:21:00.551] {
[16:21:00.551]     {
[16:21:00.551]         {
[16:21:00.551]             ...future.startTime <- base::Sys.time()
[16:21:00.551]             {
[16:21:00.551]                 {
[16:21:00.551]                   {
[16:21:00.551]                     {
[16:21:00.551]                       base::local({
[16:21:00.551]                         has_future <- base::requireNamespace("future", 
[16:21:00.551]                           quietly = TRUE)
[16:21:00.551]                         if (has_future) {
[16:21:00.551]                           ns <- base::getNamespace("future")
[16:21:00.551]                           version <- ns[[".package"]][["version"]]
[16:21:00.551]                           if (is.null(version)) 
[16:21:00.551]                             version <- utils::packageVersion("future")
[16:21:00.551]                         }
[16:21:00.551]                         else {
[16:21:00.551]                           version <- NULL
[16:21:00.551]                         }
[16:21:00.551]                         if (!has_future || version < "1.8.0") {
[16:21:00.551]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.551]                             "", base::R.version$version.string), 
[16:21:00.551]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.551]                               "release", "version")], collapse = " "), 
[16:21:00.551]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.551]                             info)
[16:21:00.551]                           info <- base::paste(info, collapse = "; ")
[16:21:00.551]                           if (!has_future) {
[16:21:00.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.551]                               info)
[16:21:00.551]                           }
[16:21:00.551]                           else {
[16:21:00.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.551]                               info, version)
[16:21:00.551]                           }
[16:21:00.551]                           base::stop(msg)
[16:21:00.551]                         }
[16:21:00.551]                       })
[16:21:00.551]                     }
[16:21:00.551]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.551]                     base::options(mc.cores = 1L)
[16:21:00.551]                   }
[16:21:00.551]                   ...future.strategy.old <- future::plan("list")
[16:21:00.551]                   options(future.plan = NULL)
[16:21:00.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.551]                 }
[16:21:00.551]                 ...future.workdir <- getwd()
[16:21:00.551]             }
[16:21:00.551]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.551]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.551]         }
[16:21:00.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.551]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.551]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.551]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.551]             base::names(...future.oldOptions))
[16:21:00.551]     }
[16:21:00.551]     if (FALSE) {
[16:21:00.551]     }
[16:21:00.551]     else {
[16:21:00.551]         if (TRUE) {
[16:21:00.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.551]                 open = "w")
[16:21:00.551]         }
[16:21:00.551]         else {
[16:21:00.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.551]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.551]         }
[16:21:00.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.551]             base::sink(type = "output", split = FALSE)
[16:21:00.551]             base::close(...future.stdout)
[16:21:00.551]         }, add = TRUE)
[16:21:00.551]     }
[16:21:00.551]     ...future.frame <- base::sys.nframe()
[16:21:00.551]     ...future.conditions <- base::list()
[16:21:00.551]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.551]     if (FALSE) {
[16:21:00.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.551]     }
[16:21:00.551]     ...future.result <- base::tryCatch({
[16:21:00.551]         base::withCallingHandlers({
[16:21:00.551]             ...future.value <- base::withVisible(base::local({
[16:21:00.551]                 ...future.makeSendCondition <- base::local({
[16:21:00.551]                   sendCondition <- NULL
[16:21:00.551]                   function(frame = 1L) {
[16:21:00.551]                     if (is.function(sendCondition)) 
[16:21:00.551]                       return(sendCondition)
[16:21:00.551]                     ns <- getNamespace("parallel")
[16:21:00.551]                     if (exists("sendData", mode = "function", 
[16:21:00.551]                       envir = ns)) {
[16:21:00.551]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.551]                         envir = ns)
[16:21:00.551]                       envir <- sys.frame(frame)
[16:21:00.551]                       master <- NULL
[16:21:00.551]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.551]                         !identical(envir, emptyenv())) {
[16:21:00.551]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.551]                           inherits = FALSE)) {
[16:21:00.551]                           master <- get("master", mode = "list", 
[16:21:00.551]                             envir = envir, inherits = FALSE)
[16:21:00.551]                           if (inherits(master, c("SOCKnode", 
[16:21:00.551]                             "SOCK0node"))) {
[16:21:00.551]                             sendCondition <<- function(cond) {
[16:21:00.551]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.551]                                 success = TRUE)
[16:21:00.551]                               parallel_sendData(master, data)
[16:21:00.551]                             }
[16:21:00.551]                             return(sendCondition)
[16:21:00.551]                           }
[16:21:00.551]                         }
[16:21:00.551]                         frame <- frame + 1L
[16:21:00.551]                         envir <- sys.frame(frame)
[16:21:00.551]                       }
[16:21:00.551]                     }
[16:21:00.551]                     sendCondition <<- function(cond) NULL
[16:21:00.551]                   }
[16:21:00.551]                 })
[16:21:00.551]                 withCallingHandlers({
[16:21:00.551]                   {
[16:21:00.551]                     x["a"] <- list(1)
[16:21:00.551]                     x
[16:21:00.551]                   }
[16:21:00.551]                 }, immediateCondition = function(cond) {
[16:21:00.551]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.551]                   sendCondition(cond)
[16:21:00.551]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.551]                   {
[16:21:00.551]                     inherits <- base::inherits
[16:21:00.551]                     invokeRestart <- base::invokeRestart
[16:21:00.551]                     is.null <- base::is.null
[16:21:00.551]                     muffled <- FALSE
[16:21:00.551]                     if (inherits(cond, "message")) {
[16:21:00.551]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.551]                       if (muffled) 
[16:21:00.551]                         invokeRestart("muffleMessage")
[16:21:00.551]                     }
[16:21:00.551]                     else if (inherits(cond, "warning")) {
[16:21:00.551]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.551]                       if (muffled) 
[16:21:00.551]                         invokeRestart("muffleWarning")
[16:21:00.551]                     }
[16:21:00.551]                     else if (inherits(cond, "condition")) {
[16:21:00.551]                       if (!is.null(pattern)) {
[16:21:00.551]                         computeRestarts <- base::computeRestarts
[16:21:00.551]                         grepl <- base::grepl
[16:21:00.551]                         restarts <- computeRestarts(cond)
[16:21:00.551]                         for (restart in restarts) {
[16:21:00.551]                           name <- restart$name
[16:21:00.551]                           if (is.null(name)) 
[16:21:00.551]                             next
[16:21:00.551]                           if (!grepl(pattern, name)) 
[16:21:00.551]                             next
[16:21:00.551]                           invokeRestart(restart)
[16:21:00.551]                           muffled <- TRUE
[16:21:00.551]                           break
[16:21:00.551]                         }
[16:21:00.551]                       }
[16:21:00.551]                     }
[16:21:00.551]                     invisible(muffled)
[16:21:00.551]                   }
[16:21:00.551]                   muffleCondition(cond)
[16:21:00.551]                 })
[16:21:00.551]             }))
[16:21:00.551]             future::FutureResult(value = ...future.value$value, 
[16:21:00.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.551]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.551]                     ...future.globalenv.names))
[16:21:00.551]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.551]         }, condition = base::local({
[16:21:00.551]             c <- base::c
[16:21:00.551]             inherits <- base::inherits
[16:21:00.551]             invokeRestart <- base::invokeRestart
[16:21:00.551]             length <- base::length
[16:21:00.551]             list <- base::list
[16:21:00.551]             seq.int <- base::seq.int
[16:21:00.551]             signalCondition <- base::signalCondition
[16:21:00.551]             sys.calls <- base::sys.calls
[16:21:00.551]             `[[` <- base::`[[`
[16:21:00.551]             `+` <- base::`+`
[16:21:00.551]             `<<-` <- base::`<<-`
[16:21:00.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.551]                   3L)]
[16:21:00.551]             }
[16:21:00.551]             function(cond) {
[16:21:00.551]                 is_error <- inherits(cond, "error")
[16:21:00.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.551]                   NULL)
[16:21:00.551]                 if (is_error) {
[16:21:00.551]                   sessionInformation <- function() {
[16:21:00.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.551]                       search = base::search(), system = base::Sys.info())
[16:21:00.551]                   }
[16:21:00.551]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.551]                     cond$call), session = sessionInformation(), 
[16:21:00.551]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.551]                   signalCondition(cond)
[16:21:00.551]                 }
[16:21:00.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.551]                 "immediateCondition"))) {
[16:21:00.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.551]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.551]                   if (TRUE && !signal) {
[16:21:00.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.551]                     {
[16:21:00.551]                       inherits <- base::inherits
[16:21:00.551]                       invokeRestart <- base::invokeRestart
[16:21:00.551]                       is.null <- base::is.null
[16:21:00.551]                       muffled <- FALSE
[16:21:00.551]                       if (inherits(cond, "message")) {
[16:21:00.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.551]                         if (muffled) 
[16:21:00.551]                           invokeRestart("muffleMessage")
[16:21:00.551]                       }
[16:21:00.551]                       else if (inherits(cond, "warning")) {
[16:21:00.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.551]                         if (muffled) 
[16:21:00.551]                           invokeRestart("muffleWarning")
[16:21:00.551]                       }
[16:21:00.551]                       else if (inherits(cond, "condition")) {
[16:21:00.551]                         if (!is.null(pattern)) {
[16:21:00.551]                           computeRestarts <- base::computeRestarts
[16:21:00.551]                           grepl <- base::grepl
[16:21:00.551]                           restarts <- computeRestarts(cond)
[16:21:00.551]                           for (restart in restarts) {
[16:21:00.551]                             name <- restart$name
[16:21:00.551]                             if (is.null(name)) 
[16:21:00.551]                               next
[16:21:00.551]                             if (!grepl(pattern, name)) 
[16:21:00.551]                               next
[16:21:00.551]                             invokeRestart(restart)
[16:21:00.551]                             muffled <- TRUE
[16:21:00.551]                             break
[16:21:00.551]                           }
[16:21:00.551]                         }
[16:21:00.551]                       }
[16:21:00.551]                       invisible(muffled)
[16:21:00.551]                     }
[16:21:00.551]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.551]                   }
[16:21:00.551]                 }
[16:21:00.551]                 else {
[16:21:00.551]                   if (TRUE) {
[16:21:00.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.551]                     {
[16:21:00.551]                       inherits <- base::inherits
[16:21:00.551]                       invokeRestart <- base::invokeRestart
[16:21:00.551]                       is.null <- base::is.null
[16:21:00.551]                       muffled <- FALSE
[16:21:00.551]                       if (inherits(cond, "message")) {
[16:21:00.551]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.551]                         if (muffled) 
[16:21:00.551]                           invokeRestart("muffleMessage")
[16:21:00.551]                       }
[16:21:00.551]                       else if (inherits(cond, "warning")) {
[16:21:00.551]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.551]                         if (muffled) 
[16:21:00.551]                           invokeRestart("muffleWarning")
[16:21:00.551]                       }
[16:21:00.551]                       else if (inherits(cond, "condition")) {
[16:21:00.551]                         if (!is.null(pattern)) {
[16:21:00.551]                           computeRestarts <- base::computeRestarts
[16:21:00.551]                           grepl <- base::grepl
[16:21:00.551]                           restarts <- computeRestarts(cond)
[16:21:00.551]                           for (restart in restarts) {
[16:21:00.551]                             name <- restart$name
[16:21:00.551]                             if (is.null(name)) 
[16:21:00.551]                               next
[16:21:00.551]                             if (!grepl(pattern, name)) 
[16:21:00.551]                               next
[16:21:00.551]                             invokeRestart(restart)
[16:21:00.551]                             muffled <- TRUE
[16:21:00.551]                             break
[16:21:00.551]                           }
[16:21:00.551]                         }
[16:21:00.551]                       }
[16:21:00.551]                       invisible(muffled)
[16:21:00.551]                     }
[16:21:00.551]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.551]                   }
[16:21:00.551]                 }
[16:21:00.551]             }
[16:21:00.551]         }))
[16:21:00.551]     }, error = function(ex) {
[16:21:00.551]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.551]                 ...future.rng), started = ...future.startTime, 
[16:21:00.551]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.551]             version = "1.8"), class = "FutureResult")
[16:21:00.551]     }, finally = {
[16:21:00.551]         if (!identical(...future.workdir, getwd())) 
[16:21:00.551]             setwd(...future.workdir)
[16:21:00.551]         {
[16:21:00.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.551]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.551]             }
[16:21:00.551]             base::options(...future.oldOptions)
[16:21:00.551]             if (.Platform$OS.type == "windows") {
[16:21:00.551]                 old_names <- names(...future.oldEnvVars)
[16:21:00.551]                 envs <- base::Sys.getenv()
[16:21:00.551]                 names <- names(envs)
[16:21:00.551]                 common <- intersect(names, old_names)
[16:21:00.551]                 added <- setdiff(names, old_names)
[16:21:00.551]                 removed <- setdiff(old_names, names)
[16:21:00.551]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.551]                   envs[common]]
[16:21:00.551]                 NAMES <- toupper(changed)
[16:21:00.551]                 args <- list()
[16:21:00.551]                 for (kk in seq_along(NAMES)) {
[16:21:00.551]                   name <- changed[[kk]]
[16:21:00.551]                   NAME <- NAMES[[kk]]
[16:21:00.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.551]                     next
[16:21:00.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.551]                 }
[16:21:00.551]                 NAMES <- toupper(added)
[16:21:00.551]                 for (kk in seq_along(NAMES)) {
[16:21:00.551]                   name <- added[[kk]]
[16:21:00.551]                   NAME <- NAMES[[kk]]
[16:21:00.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.551]                     next
[16:21:00.551]                   args[[name]] <- ""
[16:21:00.551]                 }
[16:21:00.551]                 NAMES <- toupper(removed)
[16:21:00.551]                 for (kk in seq_along(NAMES)) {
[16:21:00.551]                   name <- removed[[kk]]
[16:21:00.551]                   NAME <- NAMES[[kk]]
[16:21:00.551]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.551]                     next
[16:21:00.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.551]                 }
[16:21:00.551]                 if (length(args) > 0) 
[16:21:00.551]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.551]             }
[16:21:00.551]             else {
[16:21:00.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.551]             }
[16:21:00.551]             {
[16:21:00.551]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.551]                   0L) {
[16:21:00.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.551]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.551]                   base::options(opts)
[16:21:00.551]                 }
[16:21:00.551]                 {
[16:21:00.551]                   {
[16:21:00.551]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.551]                     NULL
[16:21:00.551]                   }
[16:21:00.551]                   options(future.plan = NULL)
[16:21:00.551]                   if (is.na(NA_character_)) 
[16:21:00.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.551]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.551]                     .init = FALSE)
[16:21:00.551]                 }
[16:21:00.551]             }
[16:21:00.551]         }
[16:21:00.551]     })
[16:21:00.551]     if (TRUE) {
[16:21:00.551]         base::sink(type = "output", split = FALSE)
[16:21:00.551]         if (TRUE) {
[16:21:00.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.551]         }
[16:21:00.551]         else {
[16:21:00.551]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.551]         }
[16:21:00.551]         base::close(...future.stdout)
[16:21:00.551]         ...future.stdout <- NULL
[16:21:00.551]     }
[16:21:00.551]     ...future.result$conditions <- ...future.conditions
[16:21:00.551]     ...future.result$finished <- base::Sys.time()
[16:21:00.551]     ...future.result
[16:21:00.551] }
[16:21:00.553] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[16:21:00.553] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.554] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.554] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[16:21:00.554] MultisessionFuture started
[16:21:00.554] - Launch lazy future ... done
[16:21:00.555] run() for ‘MultisessionFuture’ ... done
[16:21:00.555] result() for ClusterFuture ...
[16:21:00.555] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.555] - Validating connection of MultisessionFuture
[16:21:00.556] - received message: FutureResult
[16:21:00.556] - Received FutureResult
[16:21:00.556] - Erased future from FutureRegistry
[16:21:00.556] result() for ClusterFuture ...
[16:21:00.556] - result already collected: FutureResult
[16:21:00.556] result() for ClusterFuture ... done
[16:21:00.556] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.556] result() for ClusterFuture ... done
[16:21:00.557] result() for ClusterFuture ...
[16:21:00.557] - result already collected: FutureResult
[16:21:00.557] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[16:21:00.557] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[16:21:00.557] Searching for globals...
[16:21:00.559] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:21:00.559] Searching for globals ... DONE
[16:21:00.560] Resolving globals: TRUE
[16:21:00.560] Resolving any globals that are futures ...
[16:21:00.560] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[16:21:00.560] Resolving any globals that are futures ... DONE
[16:21:00.560] Resolving futures part of globals (recursively) ...
[16:21:00.560] resolve() on list ...
[16:21:00.561]  recursive: 99
[16:21:00.561]  length: 2
[16:21:00.561]  elements: ‘x’, ‘name’
[16:21:00.561]  length: 1 (resolved future 1)
[16:21:00.561]  length: 0 (resolved future 2)
[16:21:00.561] resolve() on list ... DONE
[16:21:00.561] - globals: [2] ‘x’, ‘name’
[16:21:00.561] Resolving futures part of globals (recursively) ... DONE
[16:21:00.561] The total size of the 2 globals is 112 bytes (112 bytes)
[16:21:00.562] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[16:21:00.562] - globals: [2] ‘x’, ‘name’
[16:21:00.562] 
[16:21:00.562] getGlobalsAndPackages() ... DONE
[16:21:00.562] run() for ‘Future’ ...
[16:21:00.562] - state: ‘created’
[16:21:00.563] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:00.576] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:00.576] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:00.576]   - Field: ‘node’
[16:21:00.576]   - Field: ‘label’
[16:21:00.576]   - Field: ‘local’
[16:21:00.576]   - Field: ‘owner’
[16:21:00.577]   - Field: ‘envir’
[16:21:00.577]   - Field: ‘workers’
[16:21:00.577]   - Field: ‘packages’
[16:21:00.577]   - Field: ‘gc’
[16:21:00.577]   - Field: ‘conditions’
[16:21:00.577]   - Field: ‘persistent’
[16:21:00.577]   - Field: ‘expr’
[16:21:00.577]   - Field: ‘uuid’
[16:21:00.577]   - Field: ‘seed’
[16:21:00.577]   - Field: ‘version’
[16:21:00.577]   - Field: ‘result’
[16:21:00.578]   - Field: ‘asynchronous’
[16:21:00.578]   - Field: ‘calls’
[16:21:00.578]   - Field: ‘globals’
[16:21:00.578]   - Field: ‘stdout’
[16:21:00.578]   - Field: ‘earlySignal’
[16:21:00.578]   - Field: ‘lazy’
[16:21:00.578]   - Field: ‘state’
[16:21:00.578] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:00.578] - Launch lazy future ...
[16:21:00.579] Packages needed by the future expression (n = 0): <none>
[16:21:00.579] Packages needed by future strategies (n = 0): <none>
[16:21:00.579] {
[16:21:00.579]     {
[16:21:00.579]         {
[16:21:00.579]             ...future.startTime <- base::Sys.time()
[16:21:00.579]             {
[16:21:00.579]                 {
[16:21:00.579]                   {
[16:21:00.579]                     {
[16:21:00.579]                       base::local({
[16:21:00.579]                         has_future <- base::requireNamespace("future", 
[16:21:00.579]                           quietly = TRUE)
[16:21:00.579]                         if (has_future) {
[16:21:00.579]                           ns <- base::getNamespace("future")
[16:21:00.579]                           version <- ns[[".package"]][["version"]]
[16:21:00.579]                           if (is.null(version)) 
[16:21:00.579]                             version <- utils::packageVersion("future")
[16:21:00.579]                         }
[16:21:00.579]                         else {
[16:21:00.579]                           version <- NULL
[16:21:00.579]                         }
[16:21:00.579]                         if (!has_future || version < "1.8.0") {
[16:21:00.579]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:00.579]                             "", base::R.version$version.string), 
[16:21:00.579]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:00.579]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:00.579]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:00.579]                               "release", "version")], collapse = " "), 
[16:21:00.579]                             hostname = base::Sys.info()[["nodename"]])
[16:21:00.579]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:00.579]                             info)
[16:21:00.579]                           info <- base::paste(info, collapse = "; ")
[16:21:00.579]                           if (!has_future) {
[16:21:00.579]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:00.579]                               info)
[16:21:00.579]                           }
[16:21:00.579]                           else {
[16:21:00.579]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:00.579]                               info, version)
[16:21:00.579]                           }
[16:21:00.579]                           base::stop(msg)
[16:21:00.579]                         }
[16:21:00.579]                       })
[16:21:00.579]                     }
[16:21:00.579]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:00.579]                     base::options(mc.cores = 1L)
[16:21:00.579]                   }
[16:21:00.579]                   ...future.strategy.old <- future::plan("list")
[16:21:00.579]                   options(future.plan = NULL)
[16:21:00.579]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.579]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:00.579]                 }
[16:21:00.579]                 ...future.workdir <- getwd()
[16:21:00.579]             }
[16:21:00.579]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:00.579]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:00.579]         }
[16:21:00.579]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[16:21:00.579]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:00.579]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[16:21:00.579]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[16:21:00.579]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:00.579]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:00.579]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:00.579]             base::names(...future.oldOptions))
[16:21:00.579]     }
[16:21:00.579]     if (FALSE) {
[16:21:00.579]     }
[16:21:00.579]     else {
[16:21:00.579]         if (TRUE) {
[16:21:00.579]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:00.579]                 open = "w")
[16:21:00.579]         }
[16:21:00.579]         else {
[16:21:00.579]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:00.579]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:00.579]         }
[16:21:00.579]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:00.579]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:00.579]             base::sink(type = "output", split = FALSE)
[16:21:00.579]             base::close(...future.stdout)
[16:21:00.579]         }, add = TRUE)
[16:21:00.579]     }
[16:21:00.579]     ...future.frame <- base::sys.nframe()
[16:21:00.579]     ...future.conditions <- base::list()
[16:21:00.579]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:00.579]     if (FALSE) {
[16:21:00.579]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:00.579]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:00.579]     }
[16:21:00.579]     ...future.result <- base::tryCatch({
[16:21:00.579]         base::withCallingHandlers({
[16:21:00.579]             ...future.value <- base::withVisible(base::local({
[16:21:00.579]                 ...future.makeSendCondition <- base::local({
[16:21:00.579]                   sendCondition <- NULL
[16:21:00.579]                   function(frame = 1L) {
[16:21:00.579]                     if (is.function(sendCondition)) 
[16:21:00.579]                       return(sendCondition)
[16:21:00.579]                     ns <- getNamespace("parallel")
[16:21:00.579]                     if (exists("sendData", mode = "function", 
[16:21:00.579]                       envir = ns)) {
[16:21:00.579]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:00.579]                         envir = ns)
[16:21:00.579]                       envir <- sys.frame(frame)
[16:21:00.579]                       master <- NULL
[16:21:00.579]                       while (!identical(envir, .GlobalEnv) && 
[16:21:00.579]                         !identical(envir, emptyenv())) {
[16:21:00.579]                         if (exists("master", mode = "list", envir = envir, 
[16:21:00.579]                           inherits = FALSE)) {
[16:21:00.579]                           master <- get("master", mode = "list", 
[16:21:00.579]                             envir = envir, inherits = FALSE)
[16:21:00.579]                           if (inherits(master, c("SOCKnode", 
[16:21:00.579]                             "SOCK0node"))) {
[16:21:00.579]                             sendCondition <<- function(cond) {
[16:21:00.579]                               data <- list(type = "VALUE", value = cond, 
[16:21:00.579]                                 success = TRUE)
[16:21:00.579]                               parallel_sendData(master, data)
[16:21:00.579]                             }
[16:21:00.579]                             return(sendCondition)
[16:21:00.579]                           }
[16:21:00.579]                         }
[16:21:00.579]                         frame <- frame + 1L
[16:21:00.579]                         envir <- sys.frame(frame)
[16:21:00.579]                       }
[16:21:00.579]                     }
[16:21:00.579]                     sendCondition <<- function(cond) NULL
[16:21:00.579]                   }
[16:21:00.579]                 })
[16:21:00.579]                 withCallingHandlers({
[16:21:00.579]                   {
[16:21:00.579]                     x[name] <- list(1)
[16:21:00.579]                     x
[16:21:00.579]                   }
[16:21:00.579]                 }, immediateCondition = function(cond) {
[16:21:00.579]                   sendCondition <- ...future.makeSendCondition()
[16:21:00.579]                   sendCondition(cond)
[16:21:00.579]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.579]                   {
[16:21:00.579]                     inherits <- base::inherits
[16:21:00.579]                     invokeRestart <- base::invokeRestart
[16:21:00.579]                     is.null <- base::is.null
[16:21:00.579]                     muffled <- FALSE
[16:21:00.579]                     if (inherits(cond, "message")) {
[16:21:00.579]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:00.579]                       if (muffled) 
[16:21:00.579]                         invokeRestart("muffleMessage")
[16:21:00.579]                     }
[16:21:00.579]                     else if (inherits(cond, "warning")) {
[16:21:00.579]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:00.579]                       if (muffled) 
[16:21:00.579]                         invokeRestart("muffleWarning")
[16:21:00.579]                     }
[16:21:00.579]                     else if (inherits(cond, "condition")) {
[16:21:00.579]                       if (!is.null(pattern)) {
[16:21:00.579]                         computeRestarts <- base::computeRestarts
[16:21:00.579]                         grepl <- base::grepl
[16:21:00.579]                         restarts <- computeRestarts(cond)
[16:21:00.579]                         for (restart in restarts) {
[16:21:00.579]                           name <- restart$name
[16:21:00.579]                           if (is.null(name)) 
[16:21:00.579]                             next
[16:21:00.579]                           if (!grepl(pattern, name)) 
[16:21:00.579]                             next
[16:21:00.579]                           invokeRestart(restart)
[16:21:00.579]                           muffled <- TRUE
[16:21:00.579]                           break
[16:21:00.579]                         }
[16:21:00.579]                       }
[16:21:00.579]                     }
[16:21:00.579]                     invisible(muffled)
[16:21:00.579]                   }
[16:21:00.579]                   muffleCondition(cond)
[16:21:00.579]                 })
[16:21:00.579]             }))
[16:21:00.579]             future::FutureResult(value = ...future.value$value, 
[16:21:00.579]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.579]                   ...future.rng), globalenv = if (FALSE) 
[16:21:00.579]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:00.579]                     ...future.globalenv.names))
[16:21:00.579]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:00.579]         }, condition = base::local({
[16:21:00.579]             c <- base::c
[16:21:00.579]             inherits <- base::inherits
[16:21:00.579]             invokeRestart <- base::invokeRestart
[16:21:00.579]             length <- base::length
[16:21:00.579]             list <- base::list
[16:21:00.579]             seq.int <- base::seq.int
[16:21:00.579]             signalCondition <- base::signalCondition
[16:21:00.579]             sys.calls <- base::sys.calls
[16:21:00.579]             `[[` <- base::`[[`
[16:21:00.579]             `+` <- base::`+`
[16:21:00.579]             `<<-` <- base::`<<-`
[16:21:00.579]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:00.579]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:00.579]                   3L)]
[16:21:00.579]             }
[16:21:00.579]             function(cond) {
[16:21:00.579]                 is_error <- inherits(cond, "error")
[16:21:00.579]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:00.579]                   NULL)
[16:21:00.579]                 if (is_error) {
[16:21:00.579]                   sessionInformation <- function() {
[16:21:00.579]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:00.579]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:00.579]                       search = base::search(), system = base::Sys.info())
[16:21:00.579]                   }
[16:21:00.579]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.579]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:00.579]                     cond$call), session = sessionInformation(), 
[16:21:00.579]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:00.579]                   signalCondition(cond)
[16:21:00.579]                 }
[16:21:00.579]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:00.579]                 "immediateCondition"))) {
[16:21:00.579]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:00.579]                   ...future.conditions[[length(...future.conditions) + 
[16:21:00.579]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:00.579]                   if (TRUE && !signal) {
[16:21:00.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.579]                     {
[16:21:00.579]                       inherits <- base::inherits
[16:21:00.579]                       invokeRestart <- base::invokeRestart
[16:21:00.579]                       is.null <- base::is.null
[16:21:00.579]                       muffled <- FALSE
[16:21:00.579]                       if (inherits(cond, "message")) {
[16:21:00.579]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.579]                         if (muffled) 
[16:21:00.579]                           invokeRestart("muffleMessage")
[16:21:00.579]                       }
[16:21:00.579]                       else if (inherits(cond, "warning")) {
[16:21:00.579]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.579]                         if (muffled) 
[16:21:00.579]                           invokeRestart("muffleWarning")
[16:21:00.579]                       }
[16:21:00.579]                       else if (inherits(cond, "condition")) {
[16:21:00.579]                         if (!is.null(pattern)) {
[16:21:00.579]                           computeRestarts <- base::computeRestarts
[16:21:00.579]                           grepl <- base::grepl
[16:21:00.579]                           restarts <- computeRestarts(cond)
[16:21:00.579]                           for (restart in restarts) {
[16:21:00.579]                             name <- restart$name
[16:21:00.579]                             if (is.null(name)) 
[16:21:00.579]                               next
[16:21:00.579]                             if (!grepl(pattern, name)) 
[16:21:00.579]                               next
[16:21:00.579]                             invokeRestart(restart)
[16:21:00.579]                             muffled <- TRUE
[16:21:00.579]                             break
[16:21:00.579]                           }
[16:21:00.579]                         }
[16:21:00.579]                       }
[16:21:00.579]                       invisible(muffled)
[16:21:00.579]                     }
[16:21:00.579]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.579]                   }
[16:21:00.579]                 }
[16:21:00.579]                 else {
[16:21:00.579]                   if (TRUE) {
[16:21:00.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:00.579]                     {
[16:21:00.579]                       inherits <- base::inherits
[16:21:00.579]                       invokeRestart <- base::invokeRestart
[16:21:00.579]                       is.null <- base::is.null
[16:21:00.579]                       muffled <- FALSE
[16:21:00.579]                       if (inherits(cond, "message")) {
[16:21:00.579]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:00.579]                         if (muffled) 
[16:21:00.579]                           invokeRestart("muffleMessage")
[16:21:00.579]                       }
[16:21:00.579]                       else if (inherits(cond, "warning")) {
[16:21:00.579]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:00.579]                         if (muffled) 
[16:21:00.579]                           invokeRestart("muffleWarning")
[16:21:00.579]                       }
[16:21:00.579]                       else if (inherits(cond, "condition")) {
[16:21:00.579]                         if (!is.null(pattern)) {
[16:21:00.579]                           computeRestarts <- base::computeRestarts
[16:21:00.579]                           grepl <- base::grepl
[16:21:00.579]                           restarts <- computeRestarts(cond)
[16:21:00.579]                           for (restart in restarts) {
[16:21:00.579]                             name <- restart$name
[16:21:00.579]                             if (is.null(name)) 
[16:21:00.579]                               next
[16:21:00.579]                             if (!grepl(pattern, name)) 
[16:21:00.579]                               next
[16:21:00.579]                             invokeRestart(restart)
[16:21:00.579]                             muffled <- TRUE
[16:21:00.579]                             break
[16:21:00.579]                           }
[16:21:00.579]                         }
[16:21:00.579]                       }
[16:21:00.579]                       invisible(muffled)
[16:21:00.579]                     }
[16:21:00.579]                     muffleCondition(cond, pattern = "^muffle")
[16:21:00.579]                   }
[16:21:00.579]                 }
[16:21:00.579]             }
[16:21:00.579]         }))
[16:21:00.579]     }, error = function(ex) {
[16:21:00.579]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:00.579]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:00.579]                 ...future.rng), started = ...future.startTime, 
[16:21:00.579]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:00.579]             version = "1.8"), class = "FutureResult")
[16:21:00.579]     }, finally = {
[16:21:00.579]         if (!identical(...future.workdir, getwd())) 
[16:21:00.579]             setwd(...future.workdir)
[16:21:00.579]         {
[16:21:00.579]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:00.579]                 ...future.oldOptions$nwarnings <- NULL
[16:21:00.579]             }
[16:21:00.579]             base::options(...future.oldOptions)
[16:21:00.579]             if (.Platform$OS.type == "windows") {
[16:21:00.579]                 old_names <- names(...future.oldEnvVars)
[16:21:00.579]                 envs <- base::Sys.getenv()
[16:21:00.579]                 names <- names(envs)
[16:21:00.579]                 common <- intersect(names, old_names)
[16:21:00.579]                 added <- setdiff(names, old_names)
[16:21:00.579]                 removed <- setdiff(old_names, names)
[16:21:00.579]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:00.579]                   envs[common]]
[16:21:00.579]                 NAMES <- toupper(changed)
[16:21:00.579]                 args <- list()
[16:21:00.579]                 for (kk in seq_along(NAMES)) {
[16:21:00.579]                   name <- changed[[kk]]
[16:21:00.579]                   NAME <- NAMES[[kk]]
[16:21:00.579]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.579]                     next
[16:21:00.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.579]                 }
[16:21:00.579]                 NAMES <- toupper(added)
[16:21:00.579]                 for (kk in seq_along(NAMES)) {
[16:21:00.579]                   name <- added[[kk]]
[16:21:00.579]                   NAME <- NAMES[[kk]]
[16:21:00.579]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.579]                     next
[16:21:00.579]                   args[[name]] <- ""
[16:21:00.579]                 }
[16:21:00.579]                 NAMES <- toupper(removed)
[16:21:00.579]                 for (kk in seq_along(NAMES)) {
[16:21:00.579]                   name <- removed[[kk]]
[16:21:00.579]                   NAME <- NAMES[[kk]]
[16:21:00.579]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:00.579]                     next
[16:21:00.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:00.579]                 }
[16:21:00.579]                 if (length(args) > 0) 
[16:21:00.579]                   base::do.call(base::Sys.setenv, args = args)
[16:21:00.579]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:00.579]             }
[16:21:00.579]             else {
[16:21:00.579]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:00.579]             }
[16:21:00.579]             {
[16:21:00.579]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:00.579]                   0L) {
[16:21:00.579]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:00.579]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:00.579]                   base::options(opts)
[16:21:00.579]                 }
[16:21:00.579]                 {
[16:21:00.579]                   {
[16:21:00.579]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:00.579]                     NULL
[16:21:00.579]                   }
[16:21:00.579]                   options(future.plan = NULL)
[16:21:00.579]                   if (is.na(NA_character_)) 
[16:21:00.579]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:00.579]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:00.579]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:00.579]                     .init = FALSE)
[16:21:00.579]                 }
[16:21:00.579]             }
[16:21:00.579]         }
[16:21:00.579]     })
[16:21:00.579]     if (TRUE) {
[16:21:00.579]         base::sink(type = "output", split = FALSE)
[16:21:00.579]         if (TRUE) {
[16:21:00.579]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:00.579]         }
[16:21:00.579]         else {
[16:21:00.579]             ...future.result["stdout"] <- base::list(NULL)
[16:21:00.579]         }
[16:21:00.579]         base::close(...future.stdout)
[16:21:00.579]         ...future.stdout <- NULL
[16:21:00.579]     }
[16:21:00.579]     ...future.result$conditions <- ...future.conditions
[16:21:00.579]     ...future.result$finished <- base::Sys.time()
[16:21:00.579]     ...future.result
[16:21:00.579] }
[16:21:00.582] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[16:21:00.582] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[16:21:00.582] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[16:21:00.582] Exporting ‘name’ (112 bytes) to cluster node #1 ...
[16:21:00.584] Exporting ‘name’ (112 bytes) to cluster node #1 ... DONE
[16:21:00.585] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[16:21:00.585] MultisessionFuture started
[16:21:00.585] - Launch lazy future ... done
[16:21:00.585] run() for ‘MultisessionFuture’ ... done
[16:21:00.585] result() for ClusterFuture ...
[16:21:00.586] receiveMessageFromWorker() for ClusterFuture ...
[16:21:00.586] - Validating connection of MultisessionFuture
[16:21:00.586] - received message: FutureResult
[16:21:00.587] - Received FutureResult
[16:21:00.587] - Erased future from FutureRegistry
[16:21:00.587] result() for ClusterFuture ...
[16:21:00.587] - result already collected: FutureResult
[16:21:00.587] result() for ClusterFuture ... done
[16:21:00.587] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:00.587] result() for ClusterFuture ... done
[16:21:00.587] result() for ClusterFuture ...
[16:21:00.587] - result already collected: FutureResult
[16:21:00.587] result() for ClusterFuture ... done
$a
[1] 1

Testing with 2 cores ... DONE
> 
> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE
> 
> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
> 
> source("incl/end.R")
[16:21:00.588] plan(): Setting new future strategy stack:
[16:21:00.588] List of future strategies:
[16:21:00.588] 1. FutureStrategy:
[16:21:00.588]    - args: function (..., envir = parent.frame())
[16:21:00.588]    - tweaked: FALSE
[16:21:00.588]    - call: future::plan(oplan)
[16:21:00.589] plan(): nbrOfWorkers() = 1
> 
