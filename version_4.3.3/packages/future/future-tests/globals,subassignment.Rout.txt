
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:51.482] plan(): Setting new future strategy stack:
[13:36:51.483] List of future strategies:
[13:36:51.483] 1. sequential:
[13:36:51.483]    - args: function (..., envir = parent.frame())
[13:36:51.483]    - tweaked: FALSE
[13:36:51.483]    - call: future::plan("sequential")
[13:36:51.496] plan(): nbrOfWorkers() = 1
> 
> oopts <- c(oopts, options(
+   future.globals.resolve = TRUE,
+   future.globals.onMissing = "error"
+ ))
> 
> message("*** Globals - subassignments ...")
*** Globals - subassignments ...
> 
> message("*** Globals - subassignments w/ x$a <- value ...")
*** Globals - subassignments w/ x$a <- value ...
> 
> ## Truth:
> x <- x0 <- list()
> y0 <- list(a = 1)
> str(list(x = x, y0 = y0))
List of 2
 $ x : list()
 $ y0:List of 1
  ..$ a: num 1
> 
> y <- local({
+   x$a <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x[["a"]] <- 1
+   x
+ })
> stopifnot(identical(y, y0))
> 
> y <- local({
+   x["a"] <- list(1)
+   x
+ })
> stopifnot(identical(y, y0))
> 
> stopifnot(identical(x, list()))
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("availableCores(): ", availableCores())
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy)
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x$a <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Same with forced lazy evaluation
+     x <- list()
+     y %<-% {
+       x$a <- 1
+       x
+     } %lazy% TRUE
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## 'x' is _not_ a global variable here
+     x <- list()
+     y %<-% {
+       x <- list(b = 2)
+       x$a <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, list(b = 2, a = 1)))
+ 
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x[["a"]] <- 1
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x[["a"]] <- 1
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+     
+     ## Explicit future
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     })
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Explicit future (lazy)
+     x <- list()
+     f <- future({
+       x["a"] <- list(1)
+       x
+     }, lazy = TRUE)
+     rm(list = "x")
+     y <- value(f)
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     y %<-% {
+       x["a"] <- list(1)
+       x
+     }
+     rm(list = "x")
+     print(y)
+     stopifnot(identical(y, y0))
+ 
+     ## Future assignment
+     x <- list()
+     name <- "a"
+     y %<-% {
+       x[name] <- list(1)
+       x
+     }
+     rm(list = c("x", "name"))
+     print(y)
+     stopifnot(identical(y, y0))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
availableCores(): 1
- plan('sequential') ...
[13:36:51.560] plan(): Setting new future strategy stack:
[13:36:51.560] List of future strategies:
[13:36:51.560] 1. sequential:
[13:36:51.560]    - args: function (..., envir = parent.frame())
[13:36:51.560]    - tweaked: FALSE
[13:36:51.560]    - call: plan(strategy)
[13:36:51.570] plan(): nbrOfWorkers() = 1
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.571] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.572] Searching for globals...
[13:36:51.579] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.579] Searching for globals ... DONE
[13:36:51.579] Resolving globals: TRUE
[13:36:51.579] Resolving any globals that are futures ...
[13:36:51.579] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.580] Resolving any globals that are futures ... DONE
[13:36:51.580] Resolving futures part of globals (recursively) ...
[13:36:51.581] resolve() on list ...
[13:36:51.581]  recursive: 99
[13:36:51.581]  length: 1
[13:36:51.581]  elements: ‘x’
[13:36:51.581]  length: 0 (resolved future 1)
[13:36:51.582] resolve() on list ... DONE
[13:36:51.582] - globals: [1] ‘x’
[13:36:51.582] Resolving futures part of globals (recursively) ... DONE
[13:36:51.582] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.583] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.583] - globals: [1] ‘x’
[13:36:51.583] 
[13:36:51.583] getGlobalsAndPackages() ... DONE
[13:36:51.584] run() for ‘Future’ ...
[13:36:51.584] - state: ‘created’
[13:36:51.584] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.584] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.584] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.585]   - Field: ‘label’
[13:36:51.585]   - Field: ‘local’
[13:36:51.585]   - Field: ‘owner’
[13:36:51.585]   - Field: ‘envir’
[13:36:51.585]   - Field: ‘packages’
[13:36:51.585]   - Field: ‘gc’
[13:36:51.585]   - Field: ‘conditions’
[13:36:51.585]   - Field: ‘expr’
[13:36:51.585]   - Field: ‘uuid’
[13:36:51.585]   - Field: ‘seed’
[13:36:51.585]   - Field: ‘version’
[13:36:51.586]   - Field: ‘result’
[13:36:51.586]   - Field: ‘asynchronous’
[13:36:51.586]   - Field: ‘calls’
[13:36:51.586]   - Field: ‘globals’
[13:36:51.586]   - Field: ‘stdout’
[13:36:51.586]   - Field: ‘earlySignal’
[13:36:51.586]   - Field: ‘lazy’
[13:36:51.586]   - Field: ‘state’
[13:36:51.586] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.586] - Launch lazy future ...
[13:36:51.588] Packages needed by the future expression (n = 0): <none>
[13:36:51.589] Packages needed by future strategies (n = 0): <none>
[13:36:51.589] {
[13:36:51.589]     {
[13:36:51.589]         {
[13:36:51.589]             ...future.startTime <- base::Sys.time()
[13:36:51.589]             {
[13:36:51.589]                 {
[13:36:51.589]                   {
[13:36:51.589]                     base::local({
[13:36:51.589]                       has_future <- base::requireNamespace("future", 
[13:36:51.589]                         quietly = TRUE)
[13:36:51.589]                       if (has_future) {
[13:36:51.589]                         ns <- base::getNamespace("future")
[13:36:51.589]                         version <- ns[[".package"]][["version"]]
[13:36:51.589]                         if (is.null(version)) 
[13:36:51.589]                           version <- utils::packageVersion("future")
[13:36:51.589]                       }
[13:36:51.589]                       else {
[13:36:51.589]                         version <- NULL
[13:36:51.589]                       }
[13:36:51.589]                       if (!has_future || version < "1.8.0") {
[13:36:51.589]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.589]                           "", base::R.version$version.string), 
[13:36:51.589]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.589]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.589]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.589]                             "release", "version")], collapse = " "), 
[13:36:51.589]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.589]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.589]                           info)
[13:36:51.589]                         info <- base::paste(info, collapse = "; ")
[13:36:51.589]                         if (!has_future) {
[13:36:51.589]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.589]                             info)
[13:36:51.589]                         }
[13:36:51.589]                         else {
[13:36:51.589]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.589]                             info, version)
[13:36:51.589]                         }
[13:36:51.589]                         base::stop(msg)
[13:36:51.589]                       }
[13:36:51.589]                     })
[13:36:51.589]                   }
[13:36:51.589]                   ...future.strategy.old <- future::plan("list")
[13:36:51.589]                   options(future.plan = NULL)
[13:36:51.589]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.589]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.589]                 }
[13:36:51.589]                 ...future.workdir <- getwd()
[13:36:51.589]             }
[13:36:51.589]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.589]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.589]         }
[13:36:51.589]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.589]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.589]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.589]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.589]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.589]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.589]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.589]             base::names(...future.oldOptions))
[13:36:51.589]     }
[13:36:51.589]     if (FALSE) {
[13:36:51.589]     }
[13:36:51.589]     else {
[13:36:51.589]         if (TRUE) {
[13:36:51.589]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.589]                 open = "w")
[13:36:51.589]         }
[13:36:51.589]         else {
[13:36:51.589]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.589]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.589]         }
[13:36:51.589]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.589]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.589]             base::sink(type = "output", split = FALSE)
[13:36:51.589]             base::close(...future.stdout)
[13:36:51.589]         }, add = TRUE)
[13:36:51.589]     }
[13:36:51.589]     ...future.frame <- base::sys.nframe()
[13:36:51.589]     ...future.conditions <- base::list()
[13:36:51.589]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.589]     if (FALSE) {
[13:36:51.589]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.589]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.589]     }
[13:36:51.589]     ...future.result <- base::tryCatch({
[13:36:51.589]         base::withCallingHandlers({
[13:36:51.589]             ...future.value <- base::withVisible(base::local({
[13:36:51.589]                 x$a <- 1
[13:36:51.589]                 x
[13:36:51.589]             }))
[13:36:51.589]             future::FutureResult(value = ...future.value$value, 
[13:36:51.589]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.589]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.589]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.589]                     ...future.globalenv.names))
[13:36:51.589]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.589]         }, condition = base::local({
[13:36:51.589]             c <- base::c
[13:36:51.589]             inherits <- base::inherits
[13:36:51.589]             invokeRestart <- base::invokeRestart
[13:36:51.589]             length <- base::length
[13:36:51.589]             list <- base::list
[13:36:51.589]             seq.int <- base::seq.int
[13:36:51.589]             signalCondition <- base::signalCondition
[13:36:51.589]             sys.calls <- base::sys.calls
[13:36:51.589]             `[[` <- base::`[[`
[13:36:51.589]             `+` <- base::`+`
[13:36:51.589]             `<<-` <- base::`<<-`
[13:36:51.589]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.589]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.589]                   3L)]
[13:36:51.589]             }
[13:36:51.589]             function(cond) {
[13:36:51.589]                 is_error <- inherits(cond, "error")
[13:36:51.589]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.589]                   NULL)
[13:36:51.589]                 if (is_error) {
[13:36:51.589]                   sessionInformation <- function() {
[13:36:51.589]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.589]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.589]                       search = base::search(), system = base::Sys.info())
[13:36:51.589]                   }
[13:36:51.589]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.589]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.589]                     cond$call), session = sessionInformation(), 
[13:36:51.589]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.589]                   signalCondition(cond)
[13:36:51.589]                 }
[13:36:51.589]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.589]                 "immediateCondition"))) {
[13:36:51.589]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.589]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.589]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.589]                   if (TRUE && !signal) {
[13:36:51.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.589]                     {
[13:36:51.589]                       inherits <- base::inherits
[13:36:51.589]                       invokeRestart <- base::invokeRestart
[13:36:51.589]                       is.null <- base::is.null
[13:36:51.589]                       muffled <- FALSE
[13:36:51.589]                       if (inherits(cond, "message")) {
[13:36:51.589]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.589]                         if (muffled) 
[13:36:51.589]                           invokeRestart("muffleMessage")
[13:36:51.589]                       }
[13:36:51.589]                       else if (inherits(cond, "warning")) {
[13:36:51.589]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.589]                         if (muffled) 
[13:36:51.589]                           invokeRestart("muffleWarning")
[13:36:51.589]                       }
[13:36:51.589]                       else if (inherits(cond, "condition")) {
[13:36:51.589]                         if (!is.null(pattern)) {
[13:36:51.589]                           computeRestarts <- base::computeRestarts
[13:36:51.589]                           grepl <- base::grepl
[13:36:51.589]                           restarts <- computeRestarts(cond)
[13:36:51.589]                           for (restart in restarts) {
[13:36:51.589]                             name <- restart$name
[13:36:51.589]                             if (is.null(name)) 
[13:36:51.589]                               next
[13:36:51.589]                             if (!grepl(pattern, name)) 
[13:36:51.589]                               next
[13:36:51.589]                             invokeRestart(restart)
[13:36:51.589]                             muffled <- TRUE
[13:36:51.589]                             break
[13:36:51.589]                           }
[13:36:51.589]                         }
[13:36:51.589]                       }
[13:36:51.589]                       invisible(muffled)
[13:36:51.589]                     }
[13:36:51.589]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.589]                   }
[13:36:51.589]                 }
[13:36:51.589]                 else {
[13:36:51.589]                   if (TRUE) {
[13:36:51.589]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.589]                     {
[13:36:51.589]                       inherits <- base::inherits
[13:36:51.589]                       invokeRestart <- base::invokeRestart
[13:36:51.589]                       is.null <- base::is.null
[13:36:51.589]                       muffled <- FALSE
[13:36:51.589]                       if (inherits(cond, "message")) {
[13:36:51.589]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.589]                         if (muffled) 
[13:36:51.589]                           invokeRestart("muffleMessage")
[13:36:51.589]                       }
[13:36:51.589]                       else if (inherits(cond, "warning")) {
[13:36:51.589]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.589]                         if (muffled) 
[13:36:51.589]                           invokeRestart("muffleWarning")
[13:36:51.589]                       }
[13:36:51.589]                       else if (inherits(cond, "condition")) {
[13:36:51.589]                         if (!is.null(pattern)) {
[13:36:51.589]                           computeRestarts <- base::computeRestarts
[13:36:51.589]                           grepl <- base::grepl
[13:36:51.589]                           restarts <- computeRestarts(cond)
[13:36:51.589]                           for (restart in restarts) {
[13:36:51.589]                             name <- restart$name
[13:36:51.589]                             if (is.null(name)) 
[13:36:51.589]                               next
[13:36:51.589]                             if (!grepl(pattern, name)) 
[13:36:51.589]                               next
[13:36:51.589]                             invokeRestart(restart)
[13:36:51.589]                             muffled <- TRUE
[13:36:51.589]                             break
[13:36:51.589]                           }
[13:36:51.589]                         }
[13:36:51.589]                       }
[13:36:51.589]                       invisible(muffled)
[13:36:51.589]                     }
[13:36:51.589]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.589]                   }
[13:36:51.589]                 }
[13:36:51.589]             }
[13:36:51.589]         }))
[13:36:51.589]     }, error = function(ex) {
[13:36:51.589]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.589]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.589]                 ...future.rng), started = ...future.startTime, 
[13:36:51.589]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.589]             version = "1.8"), class = "FutureResult")
[13:36:51.589]     }, finally = {
[13:36:51.589]         if (!identical(...future.workdir, getwd())) 
[13:36:51.589]             setwd(...future.workdir)
[13:36:51.589]         {
[13:36:51.589]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.589]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.589]             }
[13:36:51.589]             base::options(...future.oldOptions)
[13:36:51.589]             if (.Platform$OS.type == "windows") {
[13:36:51.589]                 old_names <- names(...future.oldEnvVars)
[13:36:51.589]                 envs <- base::Sys.getenv()
[13:36:51.589]                 names <- names(envs)
[13:36:51.589]                 common <- intersect(names, old_names)
[13:36:51.589]                 added <- setdiff(names, old_names)
[13:36:51.589]                 removed <- setdiff(old_names, names)
[13:36:51.589]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.589]                   envs[common]]
[13:36:51.589]                 NAMES <- toupper(changed)
[13:36:51.589]                 args <- list()
[13:36:51.589]                 for (kk in seq_along(NAMES)) {
[13:36:51.589]                   name <- changed[[kk]]
[13:36:51.589]                   NAME <- NAMES[[kk]]
[13:36:51.589]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.589]                     next
[13:36:51.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.589]                 }
[13:36:51.589]                 NAMES <- toupper(added)
[13:36:51.589]                 for (kk in seq_along(NAMES)) {
[13:36:51.589]                   name <- added[[kk]]
[13:36:51.589]                   NAME <- NAMES[[kk]]
[13:36:51.589]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.589]                     next
[13:36:51.589]                   args[[name]] <- ""
[13:36:51.589]                 }
[13:36:51.589]                 NAMES <- toupper(removed)
[13:36:51.589]                 for (kk in seq_along(NAMES)) {
[13:36:51.589]                   name <- removed[[kk]]
[13:36:51.589]                   NAME <- NAMES[[kk]]
[13:36:51.589]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.589]                     next
[13:36:51.589]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.589]                 }
[13:36:51.589]                 if (length(args) > 0) 
[13:36:51.589]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.589]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.589]             }
[13:36:51.589]             else {
[13:36:51.589]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.589]             }
[13:36:51.589]             {
[13:36:51.589]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.589]                   0L) {
[13:36:51.589]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.589]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.589]                   base::options(opts)
[13:36:51.589]                 }
[13:36:51.589]                 {
[13:36:51.589]                   {
[13:36:51.589]                     NULL
[13:36:51.589]                     RNGkind("Mersenne-Twister")
[13:36:51.589]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.589]                       inherits = FALSE)
[13:36:51.589]                   }
[13:36:51.589]                   options(future.plan = NULL)
[13:36:51.589]                   if (is.na(NA_character_)) 
[13:36:51.589]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.589]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.589]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.589]                     .init = FALSE)
[13:36:51.589]                 }
[13:36:51.589]             }
[13:36:51.589]         }
[13:36:51.589]     })
[13:36:51.589]     if (TRUE) {
[13:36:51.589]         base::sink(type = "output", split = FALSE)
[13:36:51.589]         if (TRUE) {
[13:36:51.589]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.589]         }
[13:36:51.589]         else {
[13:36:51.589]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.589]         }
[13:36:51.589]         base::close(...future.stdout)
[13:36:51.589]         ...future.stdout <- NULL
[13:36:51.589]     }
[13:36:51.589]     ...future.result$conditions <- ...future.conditions
[13:36:51.589]     ...future.result$finished <- base::Sys.time()
[13:36:51.589]     ...future.result
[13:36:51.589] }
[13:36:51.591] assign_globals() ...
[13:36:51.591] List of 1
[13:36:51.591]  $ x: list()
[13:36:51.591]  - attr(*, "where")=List of 1
[13:36:51.591]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.591]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.591]  - attr(*, "resolved")= logi TRUE
[13:36:51.591]  - attr(*, "total_size")= num 0
[13:36:51.591]  - attr(*, "already-done")= logi TRUE
[13:36:51.594] - copied ‘x’ to environment
[13:36:51.594] assign_globals() ... done
[13:36:51.594] plan(): Setting new future strategy stack:
[13:36:51.594] List of future strategies:
[13:36:51.594] 1. sequential:
[13:36:51.594]    - args: function (..., envir = parent.frame())
[13:36:51.594]    - tweaked: FALSE
[13:36:51.594]    - call: NULL
[13:36:51.594] plan(): nbrOfWorkers() = 1
[13:36:51.596] plan(): Setting new future strategy stack:
[13:36:51.596] List of future strategies:
[13:36:51.596] 1. sequential:
[13:36:51.596]    - args: function (..., envir = parent.frame())
[13:36:51.596]    - tweaked: FALSE
[13:36:51.596]    - call: plan(strategy)
[13:36:51.596] plan(): nbrOfWorkers() = 1
[13:36:51.596] SequentialFuture started (and completed)
[13:36:51.597] - Launch lazy future ... done
[13:36:51.597] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.597] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.598] Searching for globals...
[13:36:51.599] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.599] Searching for globals ... DONE
[13:36:51.600] Resolving globals: TRUE
[13:36:51.600] Resolving any globals that are futures ...
[13:36:51.600] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.600] Resolving any globals that are futures ... DONE
[13:36:51.600] Resolving futures part of globals (recursively) ...
[13:36:51.600] resolve() on list ...
[13:36:51.600]  recursive: 99
[13:36:51.601]  length: 1
[13:36:51.601]  elements: ‘x’
[13:36:51.601]  length: 0 (resolved future 1)
[13:36:51.601] resolve() on list ... DONE
[13:36:51.601] - globals: [1] ‘x’
[13:36:51.601] Resolving futures part of globals (recursively) ... DONE
[13:36:51.601] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.601] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.602] - globals: [1] ‘x’
[13:36:51.602] 
[13:36:51.602] getGlobalsAndPackages() ... DONE
[13:36:51.602] run() for ‘Future’ ...
[13:36:51.602] - state: ‘created’
[13:36:51.602] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.602] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.603] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.603]   - Field: ‘label’
[13:36:51.603]   - Field: ‘local’
[13:36:51.603]   - Field: ‘owner’
[13:36:51.603]   - Field: ‘envir’
[13:36:51.603]   - Field: ‘packages’
[13:36:51.603]   - Field: ‘gc’
[13:36:51.603]   - Field: ‘conditions’
[13:36:51.603]   - Field: ‘expr’
[13:36:51.603]   - Field: ‘uuid’
[13:36:51.603]   - Field: ‘seed’
[13:36:51.604]   - Field: ‘version’
[13:36:51.604]   - Field: ‘result’
[13:36:51.604]   - Field: ‘asynchronous’
[13:36:51.604]   - Field: ‘calls’
[13:36:51.604]   - Field: ‘globals’
[13:36:51.604]   - Field: ‘stdout’
[13:36:51.604]   - Field: ‘earlySignal’
[13:36:51.604]   - Field: ‘lazy’
[13:36:51.604]   - Field: ‘state’
[13:36:51.604] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.604] - Launch lazy future ...
[13:36:51.605] Packages needed by the future expression (n = 0): <none>
[13:36:51.605] Packages needed by future strategies (n = 0): <none>
[13:36:51.605] {
[13:36:51.605]     {
[13:36:51.605]         {
[13:36:51.605]             ...future.startTime <- base::Sys.time()
[13:36:51.605]             {
[13:36:51.605]                 {
[13:36:51.605]                   {
[13:36:51.605]                     base::local({
[13:36:51.605]                       has_future <- base::requireNamespace("future", 
[13:36:51.605]                         quietly = TRUE)
[13:36:51.605]                       if (has_future) {
[13:36:51.605]                         ns <- base::getNamespace("future")
[13:36:51.605]                         version <- ns[[".package"]][["version"]]
[13:36:51.605]                         if (is.null(version)) 
[13:36:51.605]                           version <- utils::packageVersion("future")
[13:36:51.605]                       }
[13:36:51.605]                       else {
[13:36:51.605]                         version <- NULL
[13:36:51.605]                       }
[13:36:51.605]                       if (!has_future || version < "1.8.0") {
[13:36:51.605]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.605]                           "", base::R.version$version.string), 
[13:36:51.605]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.605]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.605]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.605]                             "release", "version")], collapse = " "), 
[13:36:51.605]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.605]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.605]                           info)
[13:36:51.605]                         info <- base::paste(info, collapse = "; ")
[13:36:51.605]                         if (!has_future) {
[13:36:51.605]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.605]                             info)
[13:36:51.605]                         }
[13:36:51.605]                         else {
[13:36:51.605]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.605]                             info, version)
[13:36:51.605]                         }
[13:36:51.605]                         base::stop(msg)
[13:36:51.605]                       }
[13:36:51.605]                     })
[13:36:51.605]                   }
[13:36:51.605]                   ...future.strategy.old <- future::plan("list")
[13:36:51.605]                   options(future.plan = NULL)
[13:36:51.605]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.605]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.605]                 }
[13:36:51.605]                 ...future.workdir <- getwd()
[13:36:51.605]             }
[13:36:51.605]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.605]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.605]         }
[13:36:51.605]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.605]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.605]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.605]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.605]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.605]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.605]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.605]             base::names(...future.oldOptions))
[13:36:51.605]     }
[13:36:51.605]     if (FALSE) {
[13:36:51.605]     }
[13:36:51.605]     else {
[13:36:51.605]         if (TRUE) {
[13:36:51.605]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.605]                 open = "w")
[13:36:51.605]         }
[13:36:51.605]         else {
[13:36:51.605]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.605]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.605]         }
[13:36:51.605]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.605]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.605]             base::sink(type = "output", split = FALSE)
[13:36:51.605]             base::close(...future.stdout)
[13:36:51.605]         }, add = TRUE)
[13:36:51.605]     }
[13:36:51.605]     ...future.frame <- base::sys.nframe()
[13:36:51.605]     ...future.conditions <- base::list()
[13:36:51.605]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.605]     if (FALSE) {
[13:36:51.605]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.605]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.605]     }
[13:36:51.605]     ...future.result <- base::tryCatch({
[13:36:51.605]         base::withCallingHandlers({
[13:36:51.605]             ...future.value <- base::withVisible(base::local({
[13:36:51.605]                 x$a <- 1
[13:36:51.605]                 x
[13:36:51.605]             }))
[13:36:51.605]             future::FutureResult(value = ...future.value$value, 
[13:36:51.605]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.605]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.605]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.605]                     ...future.globalenv.names))
[13:36:51.605]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.605]         }, condition = base::local({
[13:36:51.605]             c <- base::c
[13:36:51.605]             inherits <- base::inherits
[13:36:51.605]             invokeRestart <- base::invokeRestart
[13:36:51.605]             length <- base::length
[13:36:51.605]             list <- base::list
[13:36:51.605]             seq.int <- base::seq.int
[13:36:51.605]             signalCondition <- base::signalCondition
[13:36:51.605]             sys.calls <- base::sys.calls
[13:36:51.605]             `[[` <- base::`[[`
[13:36:51.605]             `+` <- base::`+`
[13:36:51.605]             `<<-` <- base::`<<-`
[13:36:51.605]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.605]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.605]                   3L)]
[13:36:51.605]             }
[13:36:51.605]             function(cond) {
[13:36:51.605]                 is_error <- inherits(cond, "error")
[13:36:51.605]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.605]                   NULL)
[13:36:51.605]                 if (is_error) {
[13:36:51.605]                   sessionInformation <- function() {
[13:36:51.605]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.605]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.605]                       search = base::search(), system = base::Sys.info())
[13:36:51.605]                   }
[13:36:51.605]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.605]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.605]                     cond$call), session = sessionInformation(), 
[13:36:51.605]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.605]                   signalCondition(cond)
[13:36:51.605]                 }
[13:36:51.605]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.605]                 "immediateCondition"))) {
[13:36:51.605]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.605]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.605]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.605]                   if (TRUE && !signal) {
[13:36:51.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.605]                     {
[13:36:51.605]                       inherits <- base::inherits
[13:36:51.605]                       invokeRestart <- base::invokeRestart
[13:36:51.605]                       is.null <- base::is.null
[13:36:51.605]                       muffled <- FALSE
[13:36:51.605]                       if (inherits(cond, "message")) {
[13:36:51.605]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.605]                         if (muffled) 
[13:36:51.605]                           invokeRestart("muffleMessage")
[13:36:51.605]                       }
[13:36:51.605]                       else if (inherits(cond, "warning")) {
[13:36:51.605]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.605]                         if (muffled) 
[13:36:51.605]                           invokeRestart("muffleWarning")
[13:36:51.605]                       }
[13:36:51.605]                       else if (inherits(cond, "condition")) {
[13:36:51.605]                         if (!is.null(pattern)) {
[13:36:51.605]                           computeRestarts <- base::computeRestarts
[13:36:51.605]                           grepl <- base::grepl
[13:36:51.605]                           restarts <- computeRestarts(cond)
[13:36:51.605]                           for (restart in restarts) {
[13:36:51.605]                             name <- restart$name
[13:36:51.605]                             if (is.null(name)) 
[13:36:51.605]                               next
[13:36:51.605]                             if (!grepl(pattern, name)) 
[13:36:51.605]                               next
[13:36:51.605]                             invokeRestart(restart)
[13:36:51.605]                             muffled <- TRUE
[13:36:51.605]                             break
[13:36:51.605]                           }
[13:36:51.605]                         }
[13:36:51.605]                       }
[13:36:51.605]                       invisible(muffled)
[13:36:51.605]                     }
[13:36:51.605]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.605]                   }
[13:36:51.605]                 }
[13:36:51.605]                 else {
[13:36:51.605]                   if (TRUE) {
[13:36:51.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.605]                     {
[13:36:51.605]                       inherits <- base::inherits
[13:36:51.605]                       invokeRestart <- base::invokeRestart
[13:36:51.605]                       is.null <- base::is.null
[13:36:51.605]                       muffled <- FALSE
[13:36:51.605]                       if (inherits(cond, "message")) {
[13:36:51.605]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.605]                         if (muffled) 
[13:36:51.605]                           invokeRestart("muffleMessage")
[13:36:51.605]                       }
[13:36:51.605]                       else if (inherits(cond, "warning")) {
[13:36:51.605]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.605]                         if (muffled) 
[13:36:51.605]                           invokeRestart("muffleWarning")
[13:36:51.605]                       }
[13:36:51.605]                       else if (inherits(cond, "condition")) {
[13:36:51.605]                         if (!is.null(pattern)) {
[13:36:51.605]                           computeRestarts <- base::computeRestarts
[13:36:51.605]                           grepl <- base::grepl
[13:36:51.605]                           restarts <- computeRestarts(cond)
[13:36:51.605]                           for (restart in restarts) {
[13:36:51.605]                             name <- restart$name
[13:36:51.605]                             if (is.null(name)) 
[13:36:51.605]                               next
[13:36:51.605]                             if (!grepl(pattern, name)) 
[13:36:51.605]                               next
[13:36:51.605]                             invokeRestart(restart)
[13:36:51.605]                             muffled <- TRUE
[13:36:51.605]                             break
[13:36:51.605]                           }
[13:36:51.605]                         }
[13:36:51.605]                       }
[13:36:51.605]                       invisible(muffled)
[13:36:51.605]                     }
[13:36:51.605]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.605]                   }
[13:36:51.605]                 }
[13:36:51.605]             }
[13:36:51.605]         }))
[13:36:51.605]     }, error = function(ex) {
[13:36:51.605]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.605]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.605]                 ...future.rng), started = ...future.startTime, 
[13:36:51.605]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.605]             version = "1.8"), class = "FutureResult")
[13:36:51.605]     }, finally = {
[13:36:51.605]         if (!identical(...future.workdir, getwd())) 
[13:36:51.605]             setwd(...future.workdir)
[13:36:51.605]         {
[13:36:51.605]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.605]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.605]             }
[13:36:51.605]             base::options(...future.oldOptions)
[13:36:51.605]             if (.Platform$OS.type == "windows") {
[13:36:51.605]                 old_names <- names(...future.oldEnvVars)
[13:36:51.605]                 envs <- base::Sys.getenv()
[13:36:51.605]                 names <- names(envs)
[13:36:51.605]                 common <- intersect(names, old_names)
[13:36:51.605]                 added <- setdiff(names, old_names)
[13:36:51.605]                 removed <- setdiff(old_names, names)
[13:36:51.605]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.605]                   envs[common]]
[13:36:51.605]                 NAMES <- toupper(changed)
[13:36:51.605]                 args <- list()
[13:36:51.605]                 for (kk in seq_along(NAMES)) {
[13:36:51.605]                   name <- changed[[kk]]
[13:36:51.605]                   NAME <- NAMES[[kk]]
[13:36:51.605]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.605]                     next
[13:36:51.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.605]                 }
[13:36:51.605]                 NAMES <- toupper(added)
[13:36:51.605]                 for (kk in seq_along(NAMES)) {
[13:36:51.605]                   name <- added[[kk]]
[13:36:51.605]                   NAME <- NAMES[[kk]]
[13:36:51.605]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.605]                     next
[13:36:51.605]                   args[[name]] <- ""
[13:36:51.605]                 }
[13:36:51.605]                 NAMES <- toupper(removed)
[13:36:51.605]                 for (kk in seq_along(NAMES)) {
[13:36:51.605]                   name <- removed[[kk]]
[13:36:51.605]                   NAME <- NAMES[[kk]]
[13:36:51.605]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.605]                     next
[13:36:51.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.605]                 }
[13:36:51.605]                 if (length(args) > 0) 
[13:36:51.605]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.605]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.605]             }
[13:36:51.605]             else {
[13:36:51.605]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.605]             }
[13:36:51.605]             {
[13:36:51.605]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.605]                   0L) {
[13:36:51.605]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.605]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.605]                   base::options(opts)
[13:36:51.605]                 }
[13:36:51.605]                 {
[13:36:51.605]                   {
[13:36:51.605]                     NULL
[13:36:51.605]                     RNGkind("Mersenne-Twister")
[13:36:51.605]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.605]                       inherits = FALSE)
[13:36:51.605]                   }
[13:36:51.605]                   options(future.plan = NULL)
[13:36:51.605]                   if (is.na(NA_character_)) 
[13:36:51.605]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.605]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.605]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.605]                     .init = FALSE)
[13:36:51.605]                 }
[13:36:51.605]             }
[13:36:51.605]         }
[13:36:51.605]     })
[13:36:51.605]     if (TRUE) {
[13:36:51.605]         base::sink(type = "output", split = FALSE)
[13:36:51.605]         if (TRUE) {
[13:36:51.605]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.605]         }
[13:36:51.605]         else {
[13:36:51.605]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.605]         }
[13:36:51.605]         base::close(...future.stdout)
[13:36:51.605]         ...future.stdout <- NULL
[13:36:51.605]     }
[13:36:51.605]     ...future.result$conditions <- ...future.conditions
[13:36:51.605]     ...future.result$finished <- base::Sys.time()
[13:36:51.605]     ...future.result
[13:36:51.605] }
[13:36:51.607] assign_globals() ...
[13:36:51.607] List of 1
[13:36:51.607]  $ x: list()
[13:36:51.607]  - attr(*, "where")=List of 1
[13:36:51.607]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.607]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.607]  - attr(*, "resolved")= logi TRUE
[13:36:51.607]  - attr(*, "total_size")= num 0
[13:36:51.607]  - attr(*, "already-done")= logi TRUE
[13:36:51.609] - copied ‘x’ to environment
[13:36:51.609] assign_globals() ... done
[13:36:51.609] plan(): Setting new future strategy stack:
[13:36:51.609] List of future strategies:
[13:36:51.609] 1. sequential:
[13:36:51.609]    - args: function (..., envir = parent.frame())
[13:36:51.609]    - tweaked: FALSE
[13:36:51.609]    - call: NULL
[13:36:51.610] plan(): nbrOfWorkers() = 1
[13:36:51.610] plan(): Setting new future strategy stack:
[13:36:51.610] List of future strategies:
[13:36:51.610] 1. sequential:
[13:36:51.610]    - args: function (..., envir = parent.frame())
[13:36:51.610]    - tweaked: FALSE
[13:36:51.610]    - call: plan(strategy)
[13:36:51.611] plan(): nbrOfWorkers() = 1
[13:36:51.611] SequentialFuture started (and completed)
[13:36:51.611] - Launch lazy future ... done
[13:36:51.611] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.612] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.613] Searching for globals...
[13:36:51.614] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.614] Searching for globals ... DONE
[13:36:51.614] Resolving globals: TRUE
[13:36:51.615] Resolving any globals that are futures ...
[13:36:51.615] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.615] Resolving any globals that are futures ... DONE
[13:36:51.615] Resolving futures part of globals (recursively) ...
[13:36:51.615] resolve() on list ...
[13:36:51.615]  recursive: 99
[13:36:51.615]  length: 1
[13:36:51.616]  elements: ‘x’
[13:36:51.616]  length: 0 (resolved future 1)
[13:36:51.616] resolve() on list ... DONE
[13:36:51.616] - globals: [1] ‘x’
[13:36:51.616] Resolving futures part of globals (recursively) ... DONE
[13:36:51.616] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.617] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.618] - globals: [1] ‘x’
[13:36:51.618] 
[13:36:51.618] getGlobalsAndPackages() ... DONE
[13:36:51.618] run() for ‘Future’ ...
[13:36:51.618] - state: ‘created’
[13:36:51.618] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.619] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.619] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.619]   - Field: ‘label’
[13:36:51.619]   - Field: ‘local’
[13:36:51.619]   - Field: ‘owner’
[13:36:51.619]   - Field: ‘envir’
[13:36:51.619]   - Field: ‘packages’
[13:36:51.619]   - Field: ‘gc’
[13:36:51.619]   - Field: ‘conditions’
[13:36:51.619]   - Field: ‘expr’
[13:36:51.619]   - Field: ‘uuid’
[13:36:51.620]   - Field: ‘seed’
[13:36:51.620]   - Field: ‘version’
[13:36:51.620]   - Field: ‘result’
[13:36:51.620]   - Field: ‘asynchronous’
[13:36:51.620]   - Field: ‘calls’
[13:36:51.620]   - Field: ‘globals’
[13:36:51.620]   - Field: ‘stdout’
[13:36:51.620]   - Field: ‘earlySignal’
[13:36:51.620]   - Field: ‘lazy’
[13:36:51.620]   - Field: ‘state’
[13:36:51.620] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.620] - Launch lazy future ...
[13:36:51.621] Packages needed by the future expression (n = 0): <none>
[13:36:51.621] Packages needed by future strategies (n = 0): <none>
[13:36:51.621] {
[13:36:51.621]     {
[13:36:51.621]         {
[13:36:51.621]             ...future.startTime <- base::Sys.time()
[13:36:51.621]             {
[13:36:51.621]                 {
[13:36:51.621]                   {
[13:36:51.621]                     base::local({
[13:36:51.621]                       has_future <- base::requireNamespace("future", 
[13:36:51.621]                         quietly = TRUE)
[13:36:51.621]                       if (has_future) {
[13:36:51.621]                         ns <- base::getNamespace("future")
[13:36:51.621]                         version <- ns[[".package"]][["version"]]
[13:36:51.621]                         if (is.null(version)) 
[13:36:51.621]                           version <- utils::packageVersion("future")
[13:36:51.621]                       }
[13:36:51.621]                       else {
[13:36:51.621]                         version <- NULL
[13:36:51.621]                       }
[13:36:51.621]                       if (!has_future || version < "1.8.0") {
[13:36:51.621]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.621]                           "", base::R.version$version.string), 
[13:36:51.621]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.621]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.621]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.621]                             "release", "version")], collapse = " "), 
[13:36:51.621]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.621]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.621]                           info)
[13:36:51.621]                         info <- base::paste(info, collapse = "; ")
[13:36:51.621]                         if (!has_future) {
[13:36:51.621]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.621]                             info)
[13:36:51.621]                         }
[13:36:51.621]                         else {
[13:36:51.621]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.621]                             info, version)
[13:36:51.621]                         }
[13:36:51.621]                         base::stop(msg)
[13:36:51.621]                       }
[13:36:51.621]                     })
[13:36:51.621]                   }
[13:36:51.621]                   ...future.strategy.old <- future::plan("list")
[13:36:51.621]                   options(future.plan = NULL)
[13:36:51.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.621]                 }
[13:36:51.621]                 ...future.workdir <- getwd()
[13:36:51.621]             }
[13:36:51.621]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.621]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.621]         }
[13:36:51.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.621]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.621]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.621]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.621]             base::names(...future.oldOptions))
[13:36:51.621]     }
[13:36:51.621]     if (FALSE) {
[13:36:51.621]     }
[13:36:51.621]     else {
[13:36:51.621]         if (TRUE) {
[13:36:51.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.621]                 open = "w")
[13:36:51.621]         }
[13:36:51.621]         else {
[13:36:51.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.621]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.621]         }
[13:36:51.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.621]             base::sink(type = "output", split = FALSE)
[13:36:51.621]             base::close(...future.stdout)
[13:36:51.621]         }, add = TRUE)
[13:36:51.621]     }
[13:36:51.621]     ...future.frame <- base::sys.nframe()
[13:36:51.621]     ...future.conditions <- base::list()
[13:36:51.621]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.621]     if (FALSE) {
[13:36:51.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.621]     }
[13:36:51.621]     ...future.result <- base::tryCatch({
[13:36:51.621]         base::withCallingHandlers({
[13:36:51.621]             ...future.value <- base::withVisible(base::local({
[13:36:51.621]                 x$a <- 1
[13:36:51.621]                 x
[13:36:51.621]             }))
[13:36:51.621]             future::FutureResult(value = ...future.value$value, 
[13:36:51.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.621]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.621]                     ...future.globalenv.names))
[13:36:51.621]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.621]         }, condition = base::local({
[13:36:51.621]             c <- base::c
[13:36:51.621]             inherits <- base::inherits
[13:36:51.621]             invokeRestart <- base::invokeRestart
[13:36:51.621]             length <- base::length
[13:36:51.621]             list <- base::list
[13:36:51.621]             seq.int <- base::seq.int
[13:36:51.621]             signalCondition <- base::signalCondition
[13:36:51.621]             sys.calls <- base::sys.calls
[13:36:51.621]             `[[` <- base::`[[`
[13:36:51.621]             `+` <- base::`+`
[13:36:51.621]             `<<-` <- base::`<<-`
[13:36:51.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.621]                   3L)]
[13:36:51.621]             }
[13:36:51.621]             function(cond) {
[13:36:51.621]                 is_error <- inherits(cond, "error")
[13:36:51.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.621]                   NULL)
[13:36:51.621]                 if (is_error) {
[13:36:51.621]                   sessionInformation <- function() {
[13:36:51.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.621]                       search = base::search(), system = base::Sys.info())
[13:36:51.621]                   }
[13:36:51.621]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.621]                     cond$call), session = sessionInformation(), 
[13:36:51.621]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.621]                   signalCondition(cond)
[13:36:51.621]                 }
[13:36:51.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.621]                 "immediateCondition"))) {
[13:36:51.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.621]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.621]                   if (TRUE && !signal) {
[13:36:51.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.621]                     {
[13:36:51.621]                       inherits <- base::inherits
[13:36:51.621]                       invokeRestart <- base::invokeRestart
[13:36:51.621]                       is.null <- base::is.null
[13:36:51.621]                       muffled <- FALSE
[13:36:51.621]                       if (inherits(cond, "message")) {
[13:36:51.621]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.621]                         if (muffled) 
[13:36:51.621]                           invokeRestart("muffleMessage")
[13:36:51.621]                       }
[13:36:51.621]                       else if (inherits(cond, "warning")) {
[13:36:51.621]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.621]                         if (muffled) 
[13:36:51.621]                           invokeRestart("muffleWarning")
[13:36:51.621]                       }
[13:36:51.621]                       else if (inherits(cond, "condition")) {
[13:36:51.621]                         if (!is.null(pattern)) {
[13:36:51.621]                           computeRestarts <- base::computeRestarts
[13:36:51.621]                           grepl <- base::grepl
[13:36:51.621]                           restarts <- computeRestarts(cond)
[13:36:51.621]                           for (restart in restarts) {
[13:36:51.621]                             name <- restart$name
[13:36:51.621]                             if (is.null(name)) 
[13:36:51.621]                               next
[13:36:51.621]                             if (!grepl(pattern, name)) 
[13:36:51.621]                               next
[13:36:51.621]                             invokeRestart(restart)
[13:36:51.621]                             muffled <- TRUE
[13:36:51.621]                             break
[13:36:51.621]                           }
[13:36:51.621]                         }
[13:36:51.621]                       }
[13:36:51.621]                       invisible(muffled)
[13:36:51.621]                     }
[13:36:51.621]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.621]                   }
[13:36:51.621]                 }
[13:36:51.621]                 else {
[13:36:51.621]                   if (TRUE) {
[13:36:51.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.621]                     {
[13:36:51.621]                       inherits <- base::inherits
[13:36:51.621]                       invokeRestart <- base::invokeRestart
[13:36:51.621]                       is.null <- base::is.null
[13:36:51.621]                       muffled <- FALSE
[13:36:51.621]                       if (inherits(cond, "message")) {
[13:36:51.621]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.621]                         if (muffled) 
[13:36:51.621]                           invokeRestart("muffleMessage")
[13:36:51.621]                       }
[13:36:51.621]                       else if (inherits(cond, "warning")) {
[13:36:51.621]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.621]                         if (muffled) 
[13:36:51.621]                           invokeRestart("muffleWarning")
[13:36:51.621]                       }
[13:36:51.621]                       else if (inherits(cond, "condition")) {
[13:36:51.621]                         if (!is.null(pattern)) {
[13:36:51.621]                           computeRestarts <- base::computeRestarts
[13:36:51.621]                           grepl <- base::grepl
[13:36:51.621]                           restarts <- computeRestarts(cond)
[13:36:51.621]                           for (restart in restarts) {
[13:36:51.621]                             name <- restart$name
[13:36:51.621]                             if (is.null(name)) 
[13:36:51.621]                               next
[13:36:51.621]                             if (!grepl(pattern, name)) 
[13:36:51.621]                               next
[13:36:51.621]                             invokeRestart(restart)
[13:36:51.621]                             muffled <- TRUE
[13:36:51.621]                             break
[13:36:51.621]                           }
[13:36:51.621]                         }
[13:36:51.621]                       }
[13:36:51.621]                       invisible(muffled)
[13:36:51.621]                     }
[13:36:51.621]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.621]                   }
[13:36:51.621]                 }
[13:36:51.621]             }
[13:36:51.621]         }))
[13:36:51.621]     }, error = function(ex) {
[13:36:51.621]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.621]                 ...future.rng), started = ...future.startTime, 
[13:36:51.621]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.621]             version = "1.8"), class = "FutureResult")
[13:36:51.621]     }, finally = {
[13:36:51.621]         if (!identical(...future.workdir, getwd())) 
[13:36:51.621]             setwd(...future.workdir)
[13:36:51.621]         {
[13:36:51.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.621]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.621]             }
[13:36:51.621]             base::options(...future.oldOptions)
[13:36:51.621]             if (.Platform$OS.type == "windows") {
[13:36:51.621]                 old_names <- names(...future.oldEnvVars)
[13:36:51.621]                 envs <- base::Sys.getenv()
[13:36:51.621]                 names <- names(envs)
[13:36:51.621]                 common <- intersect(names, old_names)
[13:36:51.621]                 added <- setdiff(names, old_names)
[13:36:51.621]                 removed <- setdiff(old_names, names)
[13:36:51.621]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.621]                   envs[common]]
[13:36:51.621]                 NAMES <- toupper(changed)
[13:36:51.621]                 args <- list()
[13:36:51.621]                 for (kk in seq_along(NAMES)) {
[13:36:51.621]                   name <- changed[[kk]]
[13:36:51.621]                   NAME <- NAMES[[kk]]
[13:36:51.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.621]                     next
[13:36:51.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.621]                 }
[13:36:51.621]                 NAMES <- toupper(added)
[13:36:51.621]                 for (kk in seq_along(NAMES)) {
[13:36:51.621]                   name <- added[[kk]]
[13:36:51.621]                   NAME <- NAMES[[kk]]
[13:36:51.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.621]                     next
[13:36:51.621]                   args[[name]] <- ""
[13:36:51.621]                 }
[13:36:51.621]                 NAMES <- toupper(removed)
[13:36:51.621]                 for (kk in seq_along(NAMES)) {
[13:36:51.621]                   name <- removed[[kk]]
[13:36:51.621]                   NAME <- NAMES[[kk]]
[13:36:51.621]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.621]                     next
[13:36:51.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.621]                 }
[13:36:51.621]                 if (length(args) > 0) 
[13:36:51.621]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.621]             }
[13:36:51.621]             else {
[13:36:51.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.621]             }
[13:36:51.621]             {
[13:36:51.621]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.621]                   0L) {
[13:36:51.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.621]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.621]                   base::options(opts)
[13:36:51.621]                 }
[13:36:51.621]                 {
[13:36:51.621]                   {
[13:36:51.621]                     NULL
[13:36:51.621]                     RNGkind("Mersenne-Twister")
[13:36:51.621]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.621]                       inherits = FALSE)
[13:36:51.621]                   }
[13:36:51.621]                   options(future.plan = NULL)
[13:36:51.621]                   if (is.na(NA_character_)) 
[13:36:51.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.621]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.621]                     .init = FALSE)
[13:36:51.621]                 }
[13:36:51.621]             }
[13:36:51.621]         }
[13:36:51.621]     })
[13:36:51.621]     if (TRUE) {
[13:36:51.621]         base::sink(type = "output", split = FALSE)
[13:36:51.621]         if (TRUE) {
[13:36:51.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.621]         }
[13:36:51.621]         else {
[13:36:51.621]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.621]         }
[13:36:51.621]         base::close(...future.stdout)
[13:36:51.621]         ...future.stdout <- NULL
[13:36:51.621]     }
[13:36:51.621]     ...future.result$conditions <- ...future.conditions
[13:36:51.621]     ...future.result$finished <- base::Sys.time()
[13:36:51.621]     ...future.result
[13:36:51.621] }
[13:36:51.623] assign_globals() ...
[13:36:51.623] List of 1
[13:36:51.623]  $ x: list()
[13:36:51.623]  - attr(*, "where")=List of 1
[13:36:51.623]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.623]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.623]  - attr(*, "resolved")= logi TRUE
[13:36:51.623]  - attr(*, "total_size")= num 0
[13:36:51.623]  - attr(*, "already-done")= logi TRUE
[13:36:51.625] - copied ‘x’ to environment
[13:36:51.625] assign_globals() ... done
[13:36:51.625] plan(): Setting new future strategy stack:
[13:36:51.625] List of future strategies:
[13:36:51.625] 1. sequential:
[13:36:51.625]    - args: function (..., envir = parent.frame())
[13:36:51.625]    - tweaked: FALSE
[13:36:51.625]    - call: NULL
[13:36:51.626] plan(): nbrOfWorkers() = 1
[13:36:51.626] plan(): Setting new future strategy stack:
[13:36:51.626] List of future strategies:
[13:36:51.626] 1. sequential:
[13:36:51.626]    - args: function (..., envir = parent.frame())
[13:36:51.626]    - tweaked: FALSE
[13:36:51.626]    - call: plan(strategy)
[13:36:51.627] plan(): nbrOfWorkers() = 1
[13:36:51.627] SequentialFuture started (and completed)
[13:36:51.627] - Launch lazy future ... done
[13:36:51.627] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.628] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.628] Searching for globals...
[13:36:51.629] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.630] Searching for globals ... DONE
[13:36:51.630] Resolving globals: TRUE
[13:36:51.630] Resolving any globals that are futures ...
[13:36:51.630] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.630] Resolving any globals that are futures ... DONE
[13:36:51.630] Resolving futures part of globals (recursively) ...
[13:36:51.630] resolve() on list ...
[13:36:51.631]  recursive: 99
[13:36:51.631]  length: 1
[13:36:51.631]  elements: ‘x’
[13:36:51.631]  length: 0 (resolved future 1)
[13:36:51.631] resolve() on list ... DONE
[13:36:51.631] - globals: [1] ‘x’
[13:36:51.631] Resolving futures part of globals (recursively) ... DONE
[13:36:51.631] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.632] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.632] - globals: [1] ‘x’
[13:36:51.632] 
[13:36:51.632] getGlobalsAndPackages() ... DONE
[13:36:51.632] run() for ‘Future’ ...
[13:36:51.632] - state: ‘created’
[13:36:51.632] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.632] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.633] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.633]   - Field: ‘label’
[13:36:51.633]   - Field: ‘local’
[13:36:51.633]   - Field: ‘owner’
[13:36:51.633]   - Field: ‘envir’
[13:36:51.633]   - Field: ‘packages’
[13:36:51.633]   - Field: ‘gc’
[13:36:51.633]   - Field: ‘conditions’
[13:36:51.633]   - Field: ‘expr’
[13:36:51.633]   - Field: ‘uuid’
[13:36:51.633]   - Field: ‘seed’
[13:36:51.634]   - Field: ‘version’
[13:36:51.634]   - Field: ‘result’
[13:36:51.634]   - Field: ‘asynchronous’
[13:36:51.634]   - Field: ‘calls’
[13:36:51.634]   - Field: ‘globals’
[13:36:51.634]   - Field: ‘stdout’
[13:36:51.634]   - Field: ‘earlySignal’
[13:36:51.634]   - Field: ‘lazy’
[13:36:51.634]   - Field: ‘state’
[13:36:51.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.634] - Launch lazy future ...
[13:36:51.635] Packages needed by the future expression (n = 0): <none>
[13:36:51.635] Packages needed by future strategies (n = 0): <none>
[13:36:51.635] {
[13:36:51.635]     {
[13:36:51.635]         {
[13:36:51.635]             ...future.startTime <- base::Sys.time()
[13:36:51.635]             {
[13:36:51.635]                 {
[13:36:51.635]                   {
[13:36:51.635]                     base::local({
[13:36:51.635]                       has_future <- base::requireNamespace("future", 
[13:36:51.635]                         quietly = TRUE)
[13:36:51.635]                       if (has_future) {
[13:36:51.635]                         ns <- base::getNamespace("future")
[13:36:51.635]                         version <- ns[[".package"]][["version"]]
[13:36:51.635]                         if (is.null(version)) 
[13:36:51.635]                           version <- utils::packageVersion("future")
[13:36:51.635]                       }
[13:36:51.635]                       else {
[13:36:51.635]                         version <- NULL
[13:36:51.635]                       }
[13:36:51.635]                       if (!has_future || version < "1.8.0") {
[13:36:51.635]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.635]                           "", base::R.version$version.string), 
[13:36:51.635]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.635]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.635]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.635]                             "release", "version")], collapse = " "), 
[13:36:51.635]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.635]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.635]                           info)
[13:36:51.635]                         info <- base::paste(info, collapse = "; ")
[13:36:51.635]                         if (!has_future) {
[13:36:51.635]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.635]                             info)
[13:36:51.635]                         }
[13:36:51.635]                         else {
[13:36:51.635]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.635]                             info, version)
[13:36:51.635]                         }
[13:36:51.635]                         base::stop(msg)
[13:36:51.635]                       }
[13:36:51.635]                     })
[13:36:51.635]                   }
[13:36:51.635]                   ...future.strategy.old <- future::plan("list")
[13:36:51.635]                   options(future.plan = NULL)
[13:36:51.635]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.635]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.635]                 }
[13:36:51.635]                 ...future.workdir <- getwd()
[13:36:51.635]             }
[13:36:51.635]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.635]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.635]         }
[13:36:51.635]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.635]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.635]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.635]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.635]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.635]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.635]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.635]             base::names(...future.oldOptions))
[13:36:51.635]     }
[13:36:51.635]     if (FALSE) {
[13:36:51.635]     }
[13:36:51.635]     else {
[13:36:51.635]         if (TRUE) {
[13:36:51.635]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.635]                 open = "w")
[13:36:51.635]         }
[13:36:51.635]         else {
[13:36:51.635]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.635]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.635]         }
[13:36:51.635]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.635]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.635]             base::sink(type = "output", split = FALSE)
[13:36:51.635]             base::close(...future.stdout)
[13:36:51.635]         }, add = TRUE)
[13:36:51.635]     }
[13:36:51.635]     ...future.frame <- base::sys.nframe()
[13:36:51.635]     ...future.conditions <- base::list()
[13:36:51.635]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.635]     if (FALSE) {
[13:36:51.635]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.635]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.635]     }
[13:36:51.635]     ...future.result <- base::tryCatch({
[13:36:51.635]         base::withCallingHandlers({
[13:36:51.635]             ...future.value <- base::withVisible(base::local({
[13:36:51.635]                 x$a <- 1
[13:36:51.635]                 x
[13:36:51.635]             }))
[13:36:51.635]             future::FutureResult(value = ...future.value$value, 
[13:36:51.635]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.635]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.635]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.635]                     ...future.globalenv.names))
[13:36:51.635]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.635]         }, condition = base::local({
[13:36:51.635]             c <- base::c
[13:36:51.635]             inherits <- base::inherits
[13:36:51.635]             invokeRestart <- base::invokeRestart
[13:36:51.635]             length <- base::length
[13:36:51.635]             list <- base::list
[13:36:51.635]             seq.int <- base::seq.int
[13:36:51.635]             signalCondition <- base::signalCondition
[13:36:51.635]             sys.calls <- base::sys.calls
[13:36:51.635]             `[[` <- base::`[[`
[13:36:51.635]             `+` <- base::`+`
[13:36:51.635]             `<<-` <- base::`<<-`
[13:36:51.635]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.635]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.635]                   3L)]
[13:36:51.635]             }
[13:36:51.635]             function(cond) {
[13:36:51.635]                 is_error <- inherits(cond, "error")
[13:36:51.635]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.635]                   NULL)
[13:36:51.635]                 if (is_error) {
[13:36:51.635]                   sessionInformation <- function() {
[13:36:51.635]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.635]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.635]                       search = base::search(), system = base::Sys.info())
[13:36:51.635]                   }
[13:36:51.635]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.635]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.635]                     cond$call), session = sessionInformation(), 
[13:36:51.635]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.635]                   signalCondition(cond)
[13:36:51.635]                 }
[13:36:51.635]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.635]                 "immediateCondition"))) {
[13:36:51.635]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.635]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.635]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.635]                   if (TRUE && !signal) {
[13:36:51.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.635]                     {
[13:36:51.635]                       inherits <- base::inherits
[13:36:51.635]                       invokeRestart <- base::invokeRestart
[13:36:51.635]                       is.null <- base::is.null
[13:36:51.635]                       muffled <- FALSE
[13:36:51.635]                       if (inherits(cond, "message")) {
[13:36:51.635]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.635]                         if (muffled) 
[13:36:51.635]                           invokeRestart("muffleMessage")
[13:36:51.635]                       }
[13:36:51.635]                       else if (inherits(cond, "warning")) {
[13:36:51.635]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.635]                         if (muffled) 
[13:36:51.635]                           invokeRestart("muffleWarning")
[13:36:51.635]                       }
[13:36:51.635]                       else if (inherits(cond, "condition")) {
[13:36:51.635]                         if (!is.null(pattern)) {
[13:36:51.635]                           computeRestarts <- base::computeRestarts
[13:36:51.635]                           grepl <- base::grepl
[13:36:51.635]                           restarts <- computeRestarts(cond)
[13:36:51.635]                           for (restart in restarts) {
[13:36:51.635]                             name <- restart$name
[13:36:51.635]                             if (is.null(name)) 
[13:36:51.635]                               next
[13:36:51.635]                             if (!grepl(pattern, name)) 
[13:36:51.635]                               next
[13:36:51.635]                             invokeRestart(restart)
[13:36:51.635]                             muffled <- TRUE
[13:36:51.635]                             break
[13:36:51.635]                           }
[13:36:51.635]                         }
[13:36:51.635]                       }
[13:36:51.635]                       invisible(muffled)
[13:36:51.635]                     }
[13:36:51.635]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.635]                   }
[13:36:51.635]                 }
[13:36:51.635]                 else {
[13:36:51.635]                   if (TRUE) {
[13:36:51.635]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.635]                     {
[13:36:51.635]                       inherits <- base::inherits
[13:36:51.635]                       invokeRestart <- base::invokeRestart
[13:36:51.635]                       is.null <- base::is.null
[13:36:51.635]                       muffled <- FALSE
[13:36:51.635]                       if (inherits(cond, "message")) {
[13:36:51.635]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.635]                         if (muffled) 
[13:36:51.635]                           invokeRestart("muffleMessage")
[13:36:51.635]                       }
[13:36:51.635]                       else if (inherits(cond, "warning")) {
[13:36:51.635]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.635]                         if (muffled) 
[13:36:51.635]                           invokeRestart("muffleWarning")
[13:36:51.635]                       }
[13:36:51.635]                       else if (inherits(cond, "condition")) {
[13:36:51.635]                         if (!is.null(pattern)) {
[13:36:51.635]                           computeRestarts <- base::computeRestarts
[13:36:51.635]                           grepl <- base::grepl
[13:36:51.635]                           restarts <- computeRestarts(cond)
[13:36:51.635]                           for (restart in restarts) {
[13:36:51.635]                             name <- restart$name
[13:36:51.635]                             if (is.null(name)) 
[13:36:51.635]                               next
[13:36:51.635]                             if (!grepl(pattern, name)) 
[13:36:51.635]                               next
[13:36:51.635]                             invokeRestart(restart)
[13:36:51.635]                             muffled <- TRUE
[13:36:51.635]                             break
[13:36:51.635]                           }
[13:36:51.635]                         }
[13:36:51.635]                       }
[13:36:51.635]                       invisible(muffled)
[13:36:51.635]                     }
[13:36:51.635]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.635]                   }
[13:36:51.635]                 }
[13:36:51.635]             }
[13:36:51.635]         }))
[13:36:51.635]     }, error = function(ex) {
[13:36:51.635]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.635]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.635]                 ...future.rng), started = ...future.startTime, 
[13:36:51.635]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.635]             version = "1.8"), class = "FutureResult")
[13:36:51.635]     }, finally = {
[13:36:51.635]         if (!identical(...future.workdir, getwd())) 
[13:36:51.635]             setwd(...future.workdir)
[13:36:51.635]         {
[13:36:51.635]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.635]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.635]             }
[13:36:51.635]             base::options(...future.oldOptions)
[13:36:51.635]             if (.Platform$OS.type == "windows") {
[13:36:51.635]                 old_names <- names(...future.oldEnvVars)
[13:36:51.635]                 envs <- base::Sys.getenv()
[13:36:51.635]                 names <- names(envs)
[13:36:51.635]                 common <- intersect(names, old_names)
[13:36:51.635]                 added <- setdiff(names, old_names)
[13:36:51.635]                 removed <- setdiff(old_names, names)
[13:36:51.635]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.635]                   envs[common]]
[13:36:51.635]                 NAMES <- toupper(changed)
[13:36:51.635]                 args <- list()
[13:36:51.635]                 for (kk in seq_along(NAMES)) {
[13:36:51.635]                   name <- changed[[kk]]
[13:36:51.635]                   NAME <- NAMES[[kk]]
[13:36:51.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.635]                     next
[13:36:51.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.635]                 }
[13:36:51.635]                 NAMES <- toupper(added)
[13:36:51.635]                 for (kk in seq_along(NAMES)) {
[13:36:51.635]                   name <- added[[kk]]
[13:36:51.635]                   NAME <- NAMES[[kk]]
[13:36:51.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.635]                     next
[13:36:51.635]                   args[[name]] <- ""
[13:36:51.635]                 }
[13:36:51.635]                 NAMES <- toupper(removed)
[13:36:51.635]                 for (kk in seq_along(NAMES)) {
[13:36:51.635]                   name <- removed[[kk]]
[13:36:51.635]                   NAME <- NAMES[[kk]]
[13:36:51.635]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.635]                     next
[13:36:51.635]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.635]                 }
[13:36:51.635]                 if (length(args) > 0) 
[13:36:51.635]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.635]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.635]             }
[13:36:51.635]             else {
[13:36:51.635]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.635]             }
[13:36:51.635]             {
[13:36:51.635]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.635]                   0L) {
[13:36:51.635]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.635]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.635]                   base::options(opts)
[13:36:51.635]                 }
[13:36:51.635]                 {
[13:36:51.635]                   {
[13:36:51.635]                     NULL
[13:36:51.635]                     RNGkind("Mersenne-Twister")
[13:36:51.635]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.635]                       inherits = FALSE)
[13:36:51.635]                   }
[13:36:51.635]                   options(future.plan = NULL)
[13:36:51.635]                   if (is.na(NA_character_)) 
[13:36:51.635]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.635]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.635]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.635]                     .init = FALSE)
[13:36:51.635]                 }
[13:36:51.635]             }
[13:36:51.635]         }
[13:36:51.635]     })
[13:36:51.635]     if (TRUE) {
[13:36:51.635]         base::sink(type = "output", split = FALSE)
[13:36:51.635]         if (TRUE) {
[13:36:51.635]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.635]         }
[13:36:51.635]         else {
[13:36:51.635]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.635]         }
[13:36:51.635]         base::close(...future.stdout)
[13:36:51.635]         ...future.stdout <- NULL
[13:36:51.635]     }
[13:36:51.635]     ...future.result$conditions <- ...future.conditions
[13:36:51.635]     ...future.result$finished <- base::Sys.time()
[13:36:51.635]     ...future.result
[13:36:51.635] }
[13:36:51.637] assign_globals() ...
[13:36:51.637] List of 1
[13:36:51.637]  $ x: list()
[13:36:51.637]  - attr(*, "where")=List of 1
[13:36:51.637]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.637]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.637]  - attr(*, "resolved")= logi TRUE
[13:36:51.637]  - attr(*, "total_size")= num 0
[13:36:51.637]  - attr(*, "already-done")= logi TRUE
[13:36:51.639] - copied ‘x’ to environment
[13:36:51.639] assign_globals() ... done
[13:36:51.639] plan(): Setting new future strategy stack:
[13:36:51.639] List of future strategies:
[13:36:51.639] 1. sequential:
[13:36:51.639]    - args: function (..., envir = parent.frame())
[13:36:51.639]    - tweaked: FALSE
[13:36:51.639]    - call: NULL
[13:36:51.640] plan(): nbrOfWorkers() = 1
[13:36:51.640] plan(): Setting new future strategy stack:
[13:36:51.640] List of future strategies:
[13:36:51.640] 1. sequential:
[13:36:51.640]    - args: function (..., envir = parent.frame())
[13:36:51.640]    - tweaked: FALSE
[13:36:51.640]    - call: plan(strategy)
[13:36:51.641] plan(): nbrOfWorkers() = 1
[13:36:51.641] SequentialFuture started (and completed)
[13:36:51.641] - Launch lazy future ... done
[13:36:51.641] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.641] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.642] Searching for globals...
[13:36:51.645] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:51.645] Searching for globals ... DONE
[13:36:51.645] Resolving globals: TRUE
[13:36:51.645] Resolving any globals that are futures ...
[13:36:51.645] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:51.645] Resolving any globals that are futures ... DONE
[13:36:51.646] 
[13:36:51.646] 
[13:36:51.646] getGlobalsAndPackages() ... DONE
[13:36:51.646] run() for ‘Future’ ...
[13:36:51.646] - state: ‘created’
[13:36:51.646] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.647] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.647] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.647]   - Field: ‘label’
[13:36:51.647]   - Field: ‘local’
[13:36:51.647]   - Field: ‘owner’
[13:36:51.647]   - Field: ‘envir’
[13:36:51.647]   - Field: ‘packages’
[13:36:51.647]   - Field: ‘gc’
[13:36:51.647]   - Field: ‘conditions’
[13:36:51.647]   - Field: ‘expr’
[13:36:51.647]   - Field: ‘uuid’
[13:36:51.648]   - Field: ‘seed’
[13:36:51.648]   - Field: ‘version’
[13:36:51.648]   - Field: ‘result’
[13:36:51.648]   - Field: ‘asynchronous’
[13:36:51.648]   - Field: ‘calls’
[13:36:51.648]   - Field: ‘globals’
[13:36:51.648]   - Field: ‘stdout’
[13:36:51.648]   - Field: ‘earlySignal’
[13:36:51.648]   - Field: ‘lazy’
[13:36:51.648]   - Field: ‘state’
[13:36:51.648] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.649] - Launch lazy future ...
[13:36:51.649] Packages needed by the future expression (n = 0): <none>
[13:36:51.649] Packages needed by future strategies (n = 0): <none>
[13:36:51.649] {
[13:36:51.649]     {
[13:36:51.649]         {
[13:36:51.649]             ...future.startTime <- base::Sys.time()
[13:36:51.649]             {
[13:36:51.649]                 {
[13:36:51.649]                   {
[13:36:51.649]                     base::local({
[13:36:51.649]                       has_future <- base::requireNamespace("future", 
[13:36:51.649]                         quietly = TRUE)
[13:36:51.649]                       if (has_future) {
[13:36:51.649]                         ns <- base::getNamespace("future")
[13:36:51.649]                         version <- ns[[".package"]][["version"]]
[13:36:51.649]                         if (is.null(version)) 
[13:36:51.649]                           version <- utils::packageVersion("future")
[13:36:51.649]                       }
[13:36:51.649]                       else {
[13:36:51.649]                         version <- NULL
[13:36:51.649]                       }
[13:36:51.649]                       if (!has_future || version < "1.8.0") {
[13:36:51.649]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.649]                           "", base::R.version$version.string), 
[13:36:51.649]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.649]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.649]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.649]                             "release", "version")], collapse = " "), 
[13:36:51.649]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.649]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.649]                           info)
[13:36:51.649]                         info <- base::paste(info, collapse = "; ")
[13:36:51.649]                         if (!has_future) {
[13:36:51.649]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.649]                             info)
[13:36:51.649]                         }
[13:36:51.649]                         else {
[13:36:51.649]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.649]                             info, version)
[13:36:51.649]                         }
[13:36:51.649]                         base::stop(msg)
[13:36:51.649]                       }
[13:36:51.649]                     })
[13:36:51.649]                   }
[13:36:51.649]                   ...future.strategy.old <- future::plan("list")
[13:36:51.649]                   options(future.plan = NULL)
[13:36:51.649]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.649]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.649]                 }
[13:36:51.649]                 ...future.workdir <- getwd()
[13:36:51.649]             }
[13:36:51.649]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.649]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.649]         }
[13:36:51.649]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.649]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.649]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.649]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.649]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.649]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.649]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.649]             base::names(...future.oldOptions))
[13:36:51.649]     }
[13:36:51.649]     if (FALSE) {
[13:36:51.649]     }
[13:36:51.649]     else {
[13:36:51.649]         if (TRUE) {
[13:36:51.649]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.649]                 open = "w")
[13:36:51.649]         }
[13:36:51.649]         else {
[13:36:51.649]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.649]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.649]         }
[13:36:51.649]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.649]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.649]             base::sink(type = "output", split = FALSE)
[13:36:51.649]             base::close(...future.stdout)
[13:36:51.649]         }, add = TRUE)
[13:36:51.649]     }
[13:36:51.649]     ...future.frame <- base::sys.nframe()
[13:36:51.649]     ...future.conditions <- base::list()
[13:36:51.649]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.649]     if (FALSE) {
[13:36:51.649]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.649]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.649]     }
[13:36:51.649]     ...future.result <- base::tryCatch({
[13:36:51.649]         base::withCallingHandlers({
[13:36:51.649]             ...future.value <- base::withVisible(base::local({
[13:36:51.649]                 x <- list(b = 2)
[13:36:51.649]                 x$a <- 1
[13:36:51.649]                 x
[13:36:51.649]             }))
[13:36:51.649]             future::FutureResult(value = ...future.value$value, 
[13:36:51.649]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.649]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.649]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.649]                     ...future.globalenv.names))
[13:36:51.649]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.649]         }, condition = base::local({
[13:36:51.649]             c <- base::c
[13:36:51.649]             inherits <- base::inherits
[13:36:51.649]             invokeRestart <- base::invokeRestart
[13:36:51.649]             length <- base::length
[13:36:51.649]             list <- base::list
[13:36:51.649]             seq.int <- base::seq.int
[13:36:51.649]             signalCondition <- base::signalCondition
[13:36:51.649]             sys.calls <- base::sys.calls
[13:36:51.649]             `[[` <- base::`[[`
[13:36:51.649]             `+` <- base::`+`
[13:36:51.649]             `<<-` <- base::`<<-`
[13:36:51.649]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.649]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.649]                   3L)]
[13:36:51.649]             }
[13:36:51.649]             function(cond) {
[13:36:51.649]                 is_error <- inherits(cond, "error")
[13:36:51.649]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.649]                   NULL)
[13:36:51.649]                 if (is_error) {
[13:36:51.649]                   sessionInformation <- function() {
[13:36:51.649]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.649]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.649]                       search = base::search(), system = base::Sys.info())
[13:36:51.649]                   }
[13:36:51.649]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.649]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.649]                     cond$call), session = sessionInformation(), 
[13:36:51.649]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.649]                   signalCondition(cond)
[13:36:51.649]                 }
[13:36:51.649]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.649]                 "immediateCondition"))) {
[13:36:51.649]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.649]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.649]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.649]                   if (TRUE && !signal) {
[13:36:51.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.649]                     {
[13:36:51.649]                       inherits <- base::inherits
[13:36:51.649]                       invokeRestart <- base::invokeRestart
[13:36:51.649]                       is.null <- base::is.null
[13:36:51.649]                       muffled <- FALSE
[13:36:51.649]                       if (inherits(cond, "message")) {
[13:36:51.649]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.649]                         if (muffled) 
[13:36:51.649]                           invokeRestart("muffleMessage")
[13:36:51.649]                       }
[13:36:51.649]                       else if (inherits(cond, "warning")) {
[13:36:51.649]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.649]                         if (muffled) 
[13:36:51.649]                           invokeRestart("muffleWarning")
[13:36:51.649]                       }
[13:36:51.649]                       else if (inherits(cond, "condition")) {
[13:36:51.649]                         if (!is.null(pattern)) {
[13:36:51.649]                           computeRestarts <- base::computeRestarts
[13:36:51.649]                           grepl <- base::grepl
[13:36:51.649]                           restarts <- computeRestarts(cond)
[13:36:51.649]                           for (restart in restarts) {
[13:36:51.649]                             name <- restart$name
[13:36:51.649]                             if (is.null(name)) 
[13:36:51.649]                               next
[13:36:51.649]                             if (!grepl(pattern, name)) 
[13:36:51.649]                               next
[13:36:51.649]                             invokeRestart(restart)
[13:36:51.649]                             muffled <- TRUE
[13:36:51.649]                             break
[13:36:51.649]                           }
[13:36:51.649]                         }
[13:36:51.649]                       }
[13:36:51.649]                       invisible(muffled)
[13:36:51.649]                     }
[13:36:51.649]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.649]                   }
[13:36:51.649]                 }
[13:36:51.649]                 else {
[13:36:51.649]                   if (TRUE) {
[13:36:51.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.649]                     {
[13:36:51.649]                       inherits <- base::inherits
[13:36:51.649]                       invokeRestart <- base::invokeRestart
[13:36:51.649]                       is.null <- base::is.null
[13:36:51.649]                       muffled <- FALSE
[13:36:51.649]                       if (inherits(cond, "message")) {
[13:36:51.649]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.649]                         if (muffled) 
[13:36:51.649]                           invokeRestart("muffleMessage")
[13:36:51.649]                       }
[13:36:51.649]                       else if (inherits(cond, "warning")) {
[13:36:51.649]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.649]                         if (muffled) 
[13:36:51.649]                           invokeRestart("muffleWarning")
[13:36:51.649]                       }
[13:36:51.649]                       else if (inherits(cond, "condition")) {
[13:36:51.649]                         if (!is.null(pattern)) {
[13:36:51.649]                           computeRestarts <- base::computeRestarts
[13:36:51.649]                           grepl <- base::grepl
[13:36:51.649]                           restarts <- computeRestarts(cond)
[13:36:51.649]                           for (restart in restarts) {
[13:36:51.649]                             name <- restart$name
[13:36:51.649]                             if (is.null(name)) 
[13:36:51.649]                               next
[13:36:51.649]                             if (!grepl(pattern, name)) 
[13:36:51.649]                               next
[13:36:51.649]                             invokeRestart(restart)
[13:36:51.649]                             muffled <- TRUE
[13:36:51.649]                             break
[13:36:51.649]                           }
[13:36:51.649]                         }
[13:36:51.649]                       }
[13:36:51.649]                       invisible(muffled)
[13:36:51.649]                     }
[13:36:51.649]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.649]                   }
[13:36:51.649]                 }
[13:36:51.649]             }
[13:36:51.649]         }))
[13:36:51.649]     }, error = function(ex) {
[13:36:51.649]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.649]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.649]                 ...future.rng), started = ...future.startTime, 
[13:36:51.649]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.649]             version = "1.8"), class = "FutureResult")
[13:36:51.649]     }, finally = {
[13:36:51.649]         if (!identical(...future.workdir, getwd())) 
[13:36:51.649]             setwd(...future.workdir)
[13:36:51.649]         {
[13:36:51.649]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.649]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.649]             }
[13:36:51.649]             base::options(...future.oldOptions)
[13:36:51.649]             if (.Platform$OS.type == "windows") {
[13:36:51.649]                 old_names <- names(...future.oldEnvVars)
[13:36:51.649]                 envs <- base::Sys.getenv()
[13:36:51.649]                 names <- names(envs)
[13:36:51.649]                 common <- intersect(names, old_names)
[13:36:51.649]                 added <- setdiff(names, old_names)
[13:36:51.649]                 removed <- setdiff(old_names, names)
[13:36:51.649]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.649]                   envs[common]]
[13:36:51.649]                 NAMES <- toupper(changed)
[13:36:51.649]                 args <- list()
[13:36:51.649]                 for (kk in seq_along(NAMES)) {
[13:36:51.649]                   name <- changed[[kk]]
[13:36:51.649]                   NAME <- NAMES[[kk]]
[13:36:51.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.649]                     next
[13:36:51.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.649]                 }
[13:36:51.649]                 NAMES <- toupper(added)
[13:36:51.649]                 for (kk in seq_along(NAMES)) {
[13:36:51.649]                   name <- added[[kk]]
[13:36:51.649]                   NAME <- NAMES[[kk]]
[13:36:51.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.649]                     next
[13:36:51.649]                   args[[name]] <- ""
[13:36:51.649]                 }
[13:36:51.649]                 NAMES <- toupper(removed)
[13:36:51.649]                 for (kk in seq_along(NAMES)) {
[13:36:51.649]                   name <- removed[[kk]]
[13:36:51.649]                   NAME <- NAMES[[kk]]
[13:36:51.649]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.649]                     next
[13:36:51.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.649]                 }
[13:36:51.649]                 if (length(args) > 0) 
[13:36:51.649]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.649]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.649]             }
[13:36:51.649]             else {
[13:36:51.649]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.649]             }
[13:36:51.649]             {
[13:36:51.649]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.649]                   0L) {
[13:36:51.649]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.649]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.649]                   base::options(opts)
[13:36:51.649]                 }
[13:36:51.649]                 {
[13:36:51.649]                   {
[13:36:51.649]                     NULL
[13:36:51.649]                     RNGkind("Mersenne-Twister")
[13:36:51.649]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.649]                       inherits = FALSE)
[13:36:51.649]                   }
[13:36:51.649]                   options(future.plan = NULL)
[13:36:51.649]                   if (is.na(NA_character_)) 
[13:36:51.649]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.649]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.649]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.649]                     .init = FALSE)
[13:36:51.649]                 }
[13:36:51.649]             }
[13:36:51.649]         }
[13:36:51.649]     })
[13:36:51.649]     if (TRUE) {
[13:36:51.649]         base::sink(type = "output", split = FALSE)
[13:36:51.649]         if (TRUE) {
[13:36:51.649]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.649]         }
[13:36:51.649]         else {
[13:36:51.649]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.649]         }
[13:36:51.649]         base::close(...future.stdout)
[13:36:51.649]         ...future.stdout <- NULL
[13:36:51.649]     }
[13:36:51.649]     ...future.result$conditions <- ...future.conditions
[13:36:51.649]     ...future.result$finished <- base::Sys.time()
[13:36:51.649]     ...future.result
[13:36:51.649] }
[13:36:51.651] plan(): Setting new future strategy stack:
[13:36:51.651] List of future strategies:
[13:36:51.651] 1. sequential:
[13:36:51.651]    - args: function (..., envir = parent.frame())
[13:36:51.651]    - tweaked: FALSE
[13:36:51.651]    - call: NULL
[13:36:51.651] plan(): nbrOfWorkers() = 1
[13:36:51.652] plan(): Setting new future strategy stack:
[13:36:51.652] List of future strategies:
[13:36:51.652] 1. sequential:
[13:36:51.652]    - args: function (..., envir = parent.frame())
[13:36:51.652]    - tweaked: FALSE
[13:36:51.652]    - call: plan(strategy)
[13:36:51.652] plan(): nbrOfWorkers() = 1
[13:36:51.652] SequentialFuture started (and completed)
[13:36:51.653] - Launch lazy future ... done
[13:36:51.653] run() for ‘SequentialFuture’ ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.653] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.653] Searching for globals...
[13:36:51.655] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.655] Searching for globals ... DONE
[13:36:51.655] Resolving globals: TRUE
[13:36:51.655] Resolving any globals that are futures ...
[13:36:51.655] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.655] Resolving any globals that are futures ... DONE
[13:36:51.656] Resolving futures part of globals (recursively) ...
[13:36:51.656] resolve() on list ...
[13:36:51.656]  recursive: 99
[13:36:51.656]  length: 1
[13:36:51.656]  elements: ‘x’
[13:36:51.656]  length: 0 (resolved future 1)
[13:36:51.656] resolve() on list ... DONE
[13:36:51.656] - globals: [1] ‘x’
[13:36:51.657] Resolving futures part of globals (recursively) ... DONE
[13:36:51.657] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.657] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.657] - globals: [1] ‘x’
[13:36:51.657] 
[13:36:51.657] getGlobalsAndPackages() ... DONE
[13:36:51.657] run() for ‘Future’ ...
[13:36:51.658] - state: ‘created’
[13:36:51.658] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.658] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.658] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.658]   - Field: ‘label’
[13:36:51.658]   - Field: ‘local’
[13:36:51.658]   - Field: ‘owner’
[13:36:51.658]   - Field: ‘envir’
[13:36:51.659]   - Field: ‘packages’
[13:36:51.659]   - Field: ‘gc’
[13:36:51.659]   - Field: ‘conditions’
[13:36:51.659]   - Field: ‘expr’
[13:36:51.659]   - Field: ‘uuid’
[13:36:51.659]   - Field: ‘seed’
[13:36:51.659]   - Field: ‘version’
[13:36:51.659]   - Field: ‘result’
[13:36:51.659]   - Field: ‘asynchronous’
[13:36:51.659]   - Field: ‘calls’
[13:36:51.659]   - Field: ‘globals’
[13:36:51.659]   - Field: ‘stdout’
[13:36:51.660]   - Field: ‘earlySignal’
[13:36:51.660]   - Field: ‘lazy’
[13:36:51.660]   - Field: ‘state’
[13:36:51.660] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.660] - Launch lazy future ...
[13:36:51.660] Packages needed by the future expression (n = 0): <none>
[13:36:51.660] Packages needed by future strategies (n = 0): <none>
[13:36:51.660] {
[13:36:51.660]     {
[13:36:51.660]         {
[13:36:51.660]             ...future.startTime <- base::Sys.time()
[13:36:51.660]             {
[13:36:51.660]                 {
[13:36:51.660]                   {
[13:36:51.660]                     base::local({
[13:36:51.660]                       has_future <- base::requireNamespace("future", 
[13:36:51.660]                         quietly = TRUE)
[13:36:51.660]                       if (has_future) {
[13:36:51.660]                         ns <- base::getNamespace("future")
[13:36:51.660]                         version <- ns[[".package"]][["version"]]
[13:36:51.660]                         if (is.null(version)) 
[13:36:51.660]                           version <- utils::packageVersion("future")
[13:36:51.660]                       }
[13:36:51.660]                       else {
[13:36:51.660]                         version <- NULL
[13:36:51.660]                       }
[13:36:51.660]                       if (!has_future || version < "1.8.0") {
[13:36:51.660]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.660]                           "", base::R.version$version.string), 
[13:36:51.660]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.660]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.660]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.660]                             "release", "version")], collapse = " "), 
[13:36:51.660]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.660]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.660]                           info)
[13:36:51.660]                         info <- base::paste(info, collapse = "; ")
[13:36:51.660]                         if (!has_future) {
[13:36:51.660]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.660]                             info)
[13:36:51.660]                         }
[13:36:51.660]                         else {
[13:36:51.660]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.660]                             info, version)
[13:36:51.660]                         }
[13:36:51.660]                         base::stop(msg)
[13:36:51.660]                       }
[13:36:51.660]                     })
[13:36:51.660]                   }
[13:36:51.660]                   ...future.strategy.old <- future::plan("list")
[13:36:51.660]                   options(future.plan = NULL)
[13:36:51.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.660]                 }
[13:36:51.660]                 ...future.workdir <- getwd()
[13:36:51.660]             }
[13:36:51.660]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.660]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.660]         }
[13:36:51.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.660]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.660]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.660]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.660]             base::names(...future.oldOptions))
[13:36:51.660]     }
[13:36:51.660]     if (FALSE) {
[13:36:51.660]     }
[13:36:51.660]     else {
[13:36:51.660]         if (TRUE) {
[13:36:51.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.660]                 open = "w")
[13:36:51.660]         }
[13:36:51.660]         else {
[13:36:51.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.660]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.660]         }
[13:36:51.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.660]             base::sink(type = "output", split = FALSE)
[13:36:51.660]             base::close(...future.stdout)
[13:36:51.660]         }, add = TRUE)
[13:36:51.660]     }
[13:36:51.660]     ...future.frame <- base::sys.nframe()
[13:36:51.660]     ...future.conditions <- base::list()
[13:36:51.660]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.660]     if (FALSE) {
[13:36:51.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.660]     }
[13:36:51.660]     ...future.result <- base::tryCatch({
[13:36:51.660]         base::withCallingHandlers({
[13:36:51.660]             ...future.value <- base::withVisible(base::local({
[13:36:51.660]                 x[["a"]] <- 1
[13:36:51.660]                 x
[13:36:51.660]             }))
[13:36:51.660]             future::FutureResult(value = ...future.value$value, 
[13:36:51.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.660]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.660]                     ...future.globalenv.names))
[13:36:51.660]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.660]         }, condition = base::local({
[13:36:51.660]             c <- base::c
[13:36:51.660]             inherits <- base::inherits
[13:36:51.660]             invokeRestart <- base::invokeRestart
[13:36:51.660]             length <- base::length
[13:36:51.660]             list <- base::list
[13:36:51.660]             seq.int <- base::seq.int
[13:36:51.660]             signalCondition <- base::signalCondition
[13:36:51.660]             sys.calls <- base::sys.calls
[13:36:51.660]             `[[` <- base::`[[`
[13:36:51.660]             `+` <- base::`+`
[13:36:51.660]             `<<-` <- base::`<<-`
[13:36:51.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.660]                   3L)]
[13:36:51.660]             }
[13:36:51.660]             function(cond) {
[13:36:51.660]                 is_error <- inherits(cond, "error")
[13:36:51.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.660]                   NULL)
[13:36:51.660]                 if (is_error) {
[13:36:51.660]                   sessionInformation <- function() {
[13:36:51.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.660]                       search = base::search(), system = base::Sys.info())
[13:36:51.660]                   }
[13:36:51.660]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.660]                     cond$call), session = sessionInformation(), 
[13:36:51.660]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.660]                   signalCondition(cond)
[13:36:51.660]                 }
[13:36:51.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.660]                 "immediateCondition"))) {
[13:36:51.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.660]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.660]                   if (TRUE && !signal) {
[13:36:51.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.660]                     {
[13:36:51.660]                       inherits <- base::inherits
[13:36:51.660]                       invokeRestart <- base::invokeRestart
[13:36:51.660]                       is.null <- base::is.null
[13:36:51.660]                       muffled <- FALSE
[13:36:51.660]                       if (inherits(cond, "message")) {
[13:36:51.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.660]                         if (muffled) 
[13:36:51.660]                           invokeRestart("muffleMessage")
[13:36:51.660]                       }
[13:36:51.660]                       else if (inherits(cond, "warning")) {
[13:36:51.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.660]                         if (muffled) 
[13:36:51.660]                           invokeRestart("muffleWarning")
[13:36:51.660]                       }
[13:36:51.660]                       else if (inherits(cond, "condition")) {
[13:36:51.660]                         if (!is.null(pattern)) {
[13:36:51.660]                           computeRestarts <- base::computeRestarts
[13:36:51.660]                           grepl <- base::grepl
[13:36:51.660]                           restarts <- computeRestarts(cond)
[13:36:51.660]                           for (restart in restarts) {
[13:36:51.660]                             name <- restart$name
[13:36:51.660]                             if (is.null(name)) 
[13:36:51.660]                               next
[13:36:51.660]                             if (!grepl(pattern, name)) 
[13:36:51.660]                               next
[13:36:51.660]                             invokeRestart(restart)
[13:36:51.660]                             muffled <- TRUE
[13:36:51.660]                             break
[13:36:51.660]                           }
[13:36:51.660]                         }
[13:36:51.660]                       }
[13:36:51.660]                       invisible(muffled)
[13:36:51.660]                     }
[13:36:51.660]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.660]                   }
[13:36:51.660]                 }
[13:36:51.660]                 else {
[13:36:51.660]                   if (TRUE) {
[13:36:51.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.660]                     {
[13:36:51.660]                       inherits <- base::inherits
[13:36:51.660]                       invokeRestart <- base::invokeRestart
[13:36:51.660]                       is.null <- base::is.null
[13:36:51.660]                       muffled <- FALSE
[13:36:51.660]                       if (inherits(cond, "message")) {
[13:36:51.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.660]                         if (muffled) 
[13:36:51.660]                           invokeRestart("muffleMessage")
[13:36:51.660]                       }
[13:36:51.660]                       else if (inherits(cond, "warning")) {
[13:36:51.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.660]                         if (muffled) 
[13:36:51.660]                           invokeRestart("muffleWarning")
[13:36:51.660]                       }
[13:36:51.660]                       else if (inherits(cond, "condition")) {
[13:36:51.660]                         if (!is.null(pattern)) {
[13:36:51.660]                           computeRestarts <- base::computeRestarts
[13:36:51.660]                           grepl <- base::grepl
[13:36:51.660]                           restarts <- computeRestarts(cond)
[13:36:51.660]                           for (restart in restarts) {
[13:36:51.660]                             name <- restart$name
[13:36:51.660]                             if (is.null(name)) 
[13:36:51.660]                               next
[13:36:51.660]                             if (!grepl(pattern, name)) 
[13:36:51.660]                               next
[13:36:51.660]                             invokeRestart(restart)
[13:36:51.660]                             muffled <- TRUE
[13:36:51.660]                             break
[13:36:51.660]                           }
[13:36:51.660]                         }
[13:36:51.660]                       }
[13:36:51.660]                       invisible(muffled)
[13:36:51.660]                     }
[13:36:51.660]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.660]                   }
[13:36:51.660]                 }
[13:36:51.660]             }
[13:36:51.660]         }))
[13:36:51.660]     }, error = function(ex) {
[13:36:51.660]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.660]                 ...future.rng), started = ...future.startTime, 
[13:36:51.660]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.660]             version = "1.8"), class = "FutureResult")
[13:36:51.660]     }, finally = {
[13:36:51.660]         if (!identical(...future.workdir, getwd())) 
[13:36:51.660]             setwd(...future.workdir)
[13:36:51.660]         {
[13:36:51.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.660]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.660]             }
[13:36:51.660]             base::options(...future.oldOptions)
[13:36:51.660]             if (.Platform$OS.type == "windows") {
[13:36:51.660]                 old_names <- names(...future.oldEnvVars)
[13:36:51.660]                 envs <- base::Sys.getenv()
[13:36:51.660]                 names <- names(envs)
[13:36:51.660]                 common <- intersect(names, old_names)
[13:36:51.660]                 added <- setdiff(names, old_names)
[13:36:51.660]                 removed <- setdiff(old_names, names)
[13:36:51.660]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.660]                   envs[common]]
[13:36:51.660]                 NAMES <- toupper(changed)
[13:36:51.660]                 args <- list()
[13:36:51.660]                 for (kk in seq_along(NAMES)) {
[13:36:51.660]                   name <- changed[[kk]]
[13:36:51.660]                   NAME <- NAMES[[kk]]
[13:36:51.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.660]                     next
[13:36:51.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.660]                 }
[13:36:51.660]                 NAMES <- toupper(added)
[13:36:51.660]                 for (kk in seq_along(NAMES)) {
[13:36:51.660]                   name <- added[[kk]]
[13:36:51.660]                   NAME <- NAMES[[kk]]
[13:36:51.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.660]                     next
[13:36:51.660]                   args[[name]] <- ""
[13:36:51.660]                 }
[13:36:51.660]                 NAMES <- toupper(removed)
[13:36:51.660]                 for (kk in seq_along(NAMES)) {
[13:36:51.660]                   name <- removed[[kk]]
[13:36:51.660]                   NAME <- NAMES[[kk]]
[13:36:51.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.660]                     next
[13:36:51.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.660]                 }
[13:36:51.660]                 if (length(args) > 0) 
[13:36:51.660]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.660]             }
[13:36:51.660]             else {
[13:36:51.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.660]             }
[13:36:51.660]             {
[13:36:51.660]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.660]                   0L) {
[13:36:51.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.660]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.660]                   base::options(opts)
[13:36:51.660]                 }
[13:36:51.660]                 {
[13:36:51.660]                   {
[13:36:51.660]                     NULL
[13:36:51.660]                     RNGkind("Mersenne-Twister")
[13:36:51.660]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.660]                       inherits = FALSE)
[13:36:51.660]                   }
[13:36:51.660]                   options(future.plan = NULL)
[13:36:51.660]                   if (is.na(NA_character_)) 
[13:36:51.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.660]                     .init = FALSE)
[13:36:51.660]                 }
[13:36:51.660]             }
[13:36:51.660]         }
[13:36:51.660]     })
[13:36:51.660]     if (TRUE) {
[13:36:51.660]         base::sink(type = "output", split = FALSE)
[13:36:51.660]         if (TRUE) {
[13:36:51.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.660]         }
[13:36:51.660]         else {
[13:36:51.660]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.660]         }
[13:36:51.660]         base::close(...future.stdout)
[13:36:51.660]         ...future.stdout <- NULL
[13:36:51.660]     }
[13:36:51.660]     ...future.result$conditions <- ...future.conditions
[13:36:51.660]     ...future.result$finished <- base::Sys.time()
[13:36:51.660]     ...future.result
[13:36:51.660] }
[13:36:51.662] assign_globals() ...
[13:36:51.662] List of 1
[13:36:51.662]  $ x: list()
[13:36:51.662]  - attr(*, "where")=List of 1
[13:36:51.662]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.662]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.662]  - attr(*, "resolved")= logi TRUE
[13:36:51.662]  - attr(*, "total_size")= num 0
[13:36:51.662]  - attr(*, "already-done")= logi TRUE
[13:36:51.664] - copied ‘x’ to environment
[13:36:51.664] assign_globals() ... done
[13:36:51.665] plan(): Setting new future strategy stack:
[13:36:51.665] List of future strategies:
[13:36:51.665] 1. sequential:
[13:36:51.665]    - args: function (..., envir = parent.frame())
[13:36:51.665]    - tweaked: FALSE
[13:36:51.665]    - call: NULL
[13:36:51.665] plan(): nbrOfWorkers() = 1
[13:36:51.666] plan(): Setting new future strategy stack:
[13:36:51.666] List of future strategies:
[13:36:51.666] 1. sequential:
[13:36:51.666]    - args: function (..., envir = parent.frame())
[13:36:51.666]    - tweaked: FALSE
[13:36:51.666]    - call: plan(strategy)
[13:36:51.666] plan(): nbrOfWorkers() = 1
[13:36:51.666] SequentialFuture started (and completed)
[13:36:51.666] - Launch lazy future ... done
[13:36:51.666] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.667] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.667] Searching for globals...
[13:36:51.669] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.670] Searching for globals ... DONE
[13:36:51.670] Resolving globals: TRUE
[13:36:51.670] Resolving any globals that are futures ...
[13:36:51.670] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.670] Resolving any globals that are futures ... DONE
[13:36:51.670] Resolving futures part of globals (recursively) ...
[13:36:51.671] resolve() on list ...
[13:36:51.671]  recursive: 99
[13:36:51.671]  length: 1
[13:36:51.671]  elements: ‘x’
[13:36:51.671]  length: 0 (resolved future 1)
[13:36:51.671] resolve() on list ... DONE
[13:36:51.671] - globals: [1] ‘x’
[13:36:51.671] Resolving futures part of globals (recursively) ... DONE
[13:36:51.671] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.672] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.672] - globals: [1] ‘x’
[13:36:51.672] 
[13:36:51.672] getGlobalsAndPackages() ... DONE
[13:36:51.672] run() for ‘Future’ ...
[13:36:51.672] - state: ‘created’
[13:36:51.672] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.673] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.673] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.673]   - Field: ‘label’
[13:36:51.673]   - Field: ‘local’
[13:36:51.673]   - Field: ‘owner’
[13:36:51.673]   - Field: ‘envir’
[13:36:51.673]   - Field: ‘packages’
[13:36:51.673]   - Field: ‘gc’
[13:36:51.673]   - Field: ‘conditions’
[13:36:51.673]   - Field: ‘expr’
[13:36:51.673]   - Field: ‘uuid’
[13:36:51.674]   - Field: ‘seed’
[13:36:51.674]   - Field: ‘version’
[13:36:51.674]   - Field: ‘result’
[13:36:51.674]   - Field: ‘asynchronous’
[13:36:51.674]   - Field: ‘calls’
[13:36:51.674]   - Field: ‘globals’
[13:36:51.674]   - Field: ‘stdout’
[13:36:51.674]   - Field: ‘earlySignal’
[13:36:51.674]   - Field: ‘lazy’
[13:36:51.674]   - Field: ‘state’
[13:36:51.674] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.675] - Launch lazy future ...
[13:36:51.675] Packages needed by the future expression (n = 0): <none>
[13:36:51.675] Packages needed by future strategies (n = 0): <none>
[13:36:51.675] {
[13:36:51.675]     {
[13:36:51.675]         {
[13:36:51.675]             ...future.startTime <- base::Sys.time()
[13:36:51.675]             {
[13:36:51.675]                 {
[13:36:51.675]                   {
[13:36:51.675]                     base::local({
[13:36:51.675]                       has_future <- base::requireNamespace("future", 
[13:36:51.675]                         quietly = TRUE)
[13:36:51.675]                       if (has_future) {
[13:36:51.675]                         ns <- base::getNamespace("future")
[13:36:51.675]                         version <- ns[[".package"]][["version"]]
[13:36:51.675]                         if (is.null(version)) 
[13:36:51.675]                           version <- utils::packageVersion("future")
[13:36:51.675]                       }
[13:36:51.675]                       else {
[13:36:51.675]                         version <- NULL
[13:36:51.675]                       }
[13:36:51.675]                       if (!has_future || version < "1.8.0") {
[13:36:51.675]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.675]                           "", base::R.version$version.string), 
[13:36:51.675]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.675]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.675]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.675]                             "release", "version")], collapse = " "), 
[13:36:51.675]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.675]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.675]                           info)
[13:36:51.675]                         info <- base::paste(info, collapse = "; ")
[13:36:51.675]                         if (!has_future) {
[13:36:51.675]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.675]                             info)
[13:36:51.675]                         }
[13:36:51.675]                         else {
[13:36:51.675]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.675]                             info, version)
[13:36:51.675]                         }
[13:36:51.675]                         base::stop(msg)
[13:36:51.675]                       }
[13:36:51.675]                     })
[13:36:51.675]                   }
[13:36:51.675]                   ...future.strategy.old <- future::plan("list")
[13:36:51.675]                   options(future.plan = NULL)
[13:36:51.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.675]                 }
[13:36:51.675]                 ...future.workdir <- getwd()
[13:36:51.675]             }
[13:36:51.675]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.675]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.675]         }
[13:36:51.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.675]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.675]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.675]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.675]             base::names(...future.oldOptions))
[13:36:51.675]     }
[13:36:51.675]     if (FALSE) {
[13:36:51.675]     }
[13:36:51.675]     else {
[13:36:51.675]         if (TRUE) {
[13:36:51.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.675]                 open = "w")
[13:36:51.675]         }
[13:36:51.675]         else {
[13:36:51.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.675]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.675]         }
[13:36:51.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.675]             base::sink(type = "output", split = FALSE)
[13:36:51.675]             base::close(...future.stdout)
[13:36:51.675]         }, add = TRUE)
[13:36:51.675]     }
[13:36:51.675]     ...future.frame <- base::sys.nframe()
[13:36:51.675]     ...future.conditions <- base::list()
[13:36:51.675]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.675]     if (FALSE) {
[13:36:51.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.675]     }
[13:36:51.675]     ...future.result <- base::tryCatch({
[13:36:51.675]         base::withCallingHandlers({
[13:36:51.675]             ...future.value <- base::withVisible(base::local({
[13:36:51.675]                 x[["a"]] <- 1
[13:36:51.675]                 x
[13:36:51.675]             }))
[13:36:51.675]             future::FutureResult(value = ...future.value$value, 
[13:36:51.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.675]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.675]                     ...future.globalenv.names))
[13:36:51.675]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.675]         }, condition = base::local({
[13:36:51.675]             c <- base::c
[13:36:51.675]             inherits <- base::inherits
[13:36:51.675]             invokeRestart <- base::invokeRestart
[13:36:51.675]             length <- base::length
[13:36:51.675]             list <- base::list
[13:36:51.675]             seq.int <- base::seq.int
[13:36:51.675]             signalCondition <- base::signalCondition
[13:36:51.675]             sys.calls <- base::sys.calls
[13:36:51.675]             `[[` <- base::`[[`
[13:36:51.675]             `+` <- base::`+`
[13:36:51.675]             `<<-` <- base::`<<-`
[13:36:51.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.675]                   3L)]
[13:36:51.675]             }
[13:36:51.675]             function(cond) {
[13:36:51.675]                 is_error <- inherits(cond, "error")
[13:36:51.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.675]                   NULL)
[13:36:51.675]                 if (is_error) {
[13:36:51.675]                   sessionInformation <- function() {
[13:36:51.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.675]                       search = base::search(), system = base::Sys.info())
[13:36:51.675]                   }
[13:36:51.675]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.675]                     cond$call), session = sessionInformation(), 
[13:36:51.675]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.675]                   signalCondition(cond)
[13:36:51.675]                 }
[13:36:51.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.675]                 "immediateCondition"))) {
[13:36:51.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.675]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.675]                   if (TRUE && !signal) {
[13:36:51.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.675]                     {
[13:36:51.675]                       inherits <- base::inherits
[13:36:51.675]                       invokeRestart <- base::invokeRestart
[13:36:51.675]                       is.null <- base::is.null
[13:36:51.675]                       muffled <- FALSE
[13:36:51.675]                       if (inherits(cond, "message")) {
[13:36:51.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.675]                         if (muffled) 
[13:36:51.675]                           invokeRestart("muffleMessage")
[13:36:51.675]                       }
[13:36:51.675]                       else if (inherits(cond, "warning")) {
[13:36:51.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.675]                         if (muffled) 
[13:36:51.675]                           invokeRestart("muffleWarning")
[13:36:51.675]                       }
[13:36:51.675]                       else if (inherits(cond, "condition")) {
[13:36:51.675]                         if (!is.null(pattern)) {
[13:36:51.675]                           computeRestarts <- base::computeRestarts
[13:36:51.675]                           grepl <- base::grepl
[13:36:51.675]                           restarts <- computeRestarts(cond)
[13:36:51.675]                           for (restart in restarts) {
[13:36:51.675]                             name <- restart$name
[13:36:51.675]                             if (is.null(name)) 
[13:36:51.675]                               next
[13:36:51.675]                             if (!grepl(pattern, name)) 
[13:36:51.675]                               next
[13:36:51.675]                             invokeRestart(restart)
[13:36:51.675]                             muffled <- TRUE
[13:36:51.675]                             break
[13:36:51.675]                           }
[13:36:51.675]                         }
[13:36:51.675]                       }
[13:36:51.675]                       invisible(muffled)
[13:36:51.675]                     }
[13:36:51.675]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.675]                   }
[13:36:51.675]                 }
[13:36:51.675]                 else {
[13:36:51.675]                   if (TRUE) {
[13:36:51.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.675]                     {
[13:36:51.675]                       inherits <- base::inherits
[13:36:51.675]                       invokeRestart <- base::invokeRestart
[13:36:51.675]                       is.null <- base::is.null
[13:36:51.675]                       muffled <- FALSE
[13:36:51.675]                       if (inherits(cond, "message")) {
[13:36:51.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.675]                         if (muffled) 
[13:36:51.675]                           invokeRestart("muffleMessage")
[13:36:51.675]                       }
[13:36:51.675]                       else if (inherits(cond, "warning")) {
[13:36:51.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.675]                         if (muffled) 
[13:36:51.675]                           invokeRestart("muffleWarning")
[13:36:51.675]                       }
[13:36:51.675]                       else if (inherits(cond, "condition")) {
[13:36:51.675]                         if (!is.null(pattern)) {
[13:36:51.675]                           computeRestarts <- base::computeRestarts
[13:36:51.675]                           grepl <- base::grepl
[13:36:51.675]                           restarts <- computeRestarts(cond)
[13:36:51.675]                           for (restart in restarts) {
[13:36:51.675]                             name <- restart$name
[13:36:51.675]                             if (is.null(name)) 
[13:36:51.675]                               next
[13:36:51.675]                             if (!grepl(pattern, name)) 
[13:36:51.675]                               next
[13:36:51.675]                             invokeRestart(restart)
[13:36:51.675]                             muffled <- TRUE
[13:36:51.675]                             break
[13:36:51.675]                           }
[13:36:51.675]                         }
[13:36:51.675]                       }
[13:36:51.675]                       invisible(muffled)
[13:36:51.675]                     }
[13:36:51.675]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.675]                   }
[13:36:51.675]                 }
[13:36:51.675]             }
[13:36:51.675]         }))
[13:36:51.675]     }, error = function(ex) {
[13:36:51.675]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.675]                 ...future.rng), started = ...future.startTime, 
[13:36:51.675]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.675]             version = "1.8"), class = "FutureResult")
[13:36:51.675]     }, finally = {
[13:36:51.675]         if (!identical(...future.workdir, getwd())) 
[13:36:51.675]             setwd(...future.workdir)
[13:36:51.675]         {
[13:36:51.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.675]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.675]             }
[13:36:51.675]             base::options(...future.oldOptions)
[13:36:51.675]             if (.Platform$OS.type == "windows") {
[13:36:51.675]                 old_names <- names(...future.oldEnvVars)
[13:36:51.675]                 envs <- base::Sys.getenv()
[13:36:51.675]                 names <- names(envs)
[13:36:51.675]                 common <- intersect(names, old_names)
[13:36:51.675]                 added <- setdiff(names, old_names)
[13:36:51.675]                 removed <- setdiff(old_names, names)
[13:36:51.675]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.675]                   envs[common]]
[13:36:51.675]                 NAMES <- toupper(changed)
[13:36:51.675]                 args <- list()
[13:36:51.675]                 for (kk in seq_along(NAMES)) {
[13:36:51.675]                   name <- changed[[kk]]
[13:36:51.675]                   NAME <- NAMES[[kk]]
[13:36:51.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.675]                     next
[13:36:51.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.675]                 }
[13:36:51.675]                 NAMES <- toupper(added)
[13:36:51.675]                 for (kk in seq_along(NAMES)) {
[13:36:51.675]                   name <- added[[kk]]
[13:36:51.675]                   NAME <- NAMES[[kk]]
[13:36:51.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.675]                     next
[13:36:51.675]                   args[[name]] <- ""
[13:36:51.675]                 }
[13:36:51.675]                 NAMES <- toupper(removed)
[13:36:51.675]                 for (kk in seq_along(NAMES)) {
[13:36:51.675]                   name <- removed[[kk]]
[13:36:51.675]                   NAME <- NAMES[[kk]]
[13:36:51.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.675]                     next
[13:36:51.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.675]                 }
[13:36:51.675]                 if (length(args) > 0) 
[13:36:51.675]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.675]             }
[13:36:51.675]             else {
[13:36:51.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.675]             }
[13:36:51.675]             {
[13:36:51.675]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.675]                   0L) {
[13:36:51.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.675]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.675]                   base::options(opts)
[13:36:51.675]                 }
[13:36:51.675]                 {
[13:36:51.675]                   {
[13:36:51.675]                     NULL
[13:36:51.675]                     RNGkind("Mersenne-Twister")
[13:36:51.675]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.675]                       inherits = FALSE)
[13:36:51.675]                   }
[13:36:51.675]                   options(future.plan = NULL)
[13:36:51.675]                   if (is.na(NA_character_)) 
[13:36:51.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.675]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.675]                     .init = FALSE)
[13:36:51.675]                 }
[13:36:51.675]             }
[13:36:51.675]         }
[13:36:51.675]     })
[13:36:51.675]     if (TRUE) {
[13:36:51.675]         base::sink(type = "output", split = FALSE)
[13:36:51.675]         if (TRUE) {
[13:36:51.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.675]         }
[13:36:51.675]         else {
[13:36:51.675]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.675]         }
[13:36:51.675]         base::close(...future.stdout)
[13:36:51.675]         ...future.stdout <- NULL
[13:36:51.675]     }
[13:36:51.675]     ...future.result$conditions <- ...future.conditions
[13:36:51.675]     ...future.result$finished <- base::Sys.time()
[13:36:51.675]     ...future.result
[13:36:51.675] }
[13:36:51.677] assign_globals() ...
[13:36:51.677] List of 1
[13:36:51.677]  $ x: list()
[13:36:51.677]  - attr(*, "where")=List of 1
[13:36:51.677]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.677]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.677]  - attr(*, "resolved")= logi TRUE
[13:36:51.677]  - attr(*, "total_size")= num 0
[13:36:51.677]  - attr(*, "already-done")= logi TRUE
[13:36:51.679] - copied ‘x’ to environment
[13:36:51.679] assign_globals() ... done
[13:36:51.679] plan(): Setting new future strategy stack:
[13:36:51.679] List of future strategies:
[13:36:51.679] 1. sequential:
[13:36:51.679]    - args: function (..., envir = parent.frame())
[13:36:51.679]    - tweaked: FALSE
[13:36:51.679]    - call: NULL
[13:36:51.680] plan(): nbrOfWorkers() = 1
[13:36:51.680] plan(): Setting new future strategy stack:
[13:36:51.680] List of future strategies:
[13:36:51.680] 1. sequential:
[13:36:51.680]    - args: function (..., envir = parent.frame())
[13:36:51.680]    - tweaked: FALSE
[13:36:51.680]    - call: plan(strategy)
[13:36:51.681] plan(): nbrOfWorkers() = 1
[13:36:51.681] SequentialFuture started (and completed)
[13:36:51.681] - Launch lazy future ... done
[13:36:51.681] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.681] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.682] Searching for globals...
[13:36:51.683] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.683] Searching for globals ... DONE
[13:36:51.684] Resolving globals: TRUE
[13:36:51.684] Resolving any globals that are futures ...
[13:36:51.684] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.684] Resolving any globals that are futures ... DONE
[13:36:51.684] Resolving futures part of globals (recursively) ...
[13:36:51.684] resolve() on list ...
[13:36:51.684]  recursive: 99
[13:36:51.685]  length: 1
[13:36:51.685]  elements: ‘x’
[13:36:51.685]  length: 0 (resolved future 1)
[13:36:51.685] resolve() on list ... DONE
[13:36:51.685] - globals: [1] ‘x’
[13:36:51.685] Resolving futures part of globals (recursively) ... DONE
[13:36:51.685] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.685] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.686] - globals: [1] ‘x’
[13:36:51.686] 
[13:36:51.686] getGlobalsAndPackages() ... DONE
[13:36:51.686] run() for ‘Future’ ...
[13:36:51.686] - state: ‘created’
[13:36:51.686] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.686] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.686] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.687]   - Field: ‘label’
[13:36:51.687]   - Field: ‘local’
[13:36:51.687]   - Field: ‘owner’
[13:36:51.687]   - Field: ‘envir’
[13:36:51.687]   - Field: ‘packages’
[13:36:51.687]   - Field: ‘gc’
[13:36:51.687]   - Field: ‘conditions’
[13:36:51.687]   - Field: ‘expr’
[13:36:51.687]   - Field: ‘uuid’
[13:36:51.687]   - Field: ‘seed’
[13:36:51.687]   - Field: ‘version’
[13:36:51.688]   - Field: ‘result’
[13:36:51.688]   - Field: ‘asynchronous’
[13:36:51.688]   - Field: ‘calls’
[13:36:51.688]   - Field: ‘globals’
[13:36:51.688]   - Field: ‘stdout’
[13:36:51.688]   - Field: ‘earlySignal’
[13:36:51.688]   - Field: ‘lazy’
[13:36:51.688]   - Field: ‘state’
[13:36:51.688] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.688] - Launch lazy future ...
[13:36:51.688] Packages needed by the future expression (n = 0): <none>
[13:36:51.689] Packages needed by future strategies (n = 0): <none>
[13:36:51.689] {
[13:36:51.689]     {
[13:36:51.689]         {
[13:36:51.689]             ...future.startTime <- base::Sys.time()
[13:36:51.689]             {
[13:36:51.689]                 {
[13:36:51.689]                   {
[13:36:51.689]                     base::local({
[13:36:51.689]                       has_future <- base::requireNamespace("future", 
[13:36:51.689]                         quietly = TRUE)
[13:36:51.689]                       if (has_future) {
[13:36:51.689]                         ns <- base::getNamespace("future")
[13:36:51.689]                         version <- ns[[".package"]][["version"]]
[13:36:51.689]                         if (is.null(version)) 
[13:36:51.689]                           version <- utils::packageVersion("future")
[13:36:51.689]                       }
[13:36:51.689]                       else {
[13:36:51.689]                         version <- NULL
[13:36:51.689]                       }
[13:36:51.689]                       if (!has_future || version < "1.8.0") {
[13:36:51.689]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.689]                           "", base::R.version$version.string), 
[13:36:51.689]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.689]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.689]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.689]                             "release", "version")], collapse = " "), 
[13:36:51.689]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.689]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.689]                           info)
[13:36:51.689]                         info <- base::paste(info, collapse = "; ")
[13:36:51.689]                         if (!has_future) {
[13:36:51.689]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.689]                             info)
[13:36:51.689]                         }
[13:36:51.689]                         else {
[13:36:51.689]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.689]                             info, version)
[13:36:51.689]                         }
[13:36:51.689]                         base::stop(msg)
[13:36:51.689]                       }
[13:36:51.689]                     })
[13:36:51.689]                   }
[13:36:51.689]                   ...future.strategy.old <- future::plan("list")
[13:36:51.689]                   options(future.plan = NULL)
[13:36:51.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.689]                 }
[13:36:51.689]                 ...future.workdir <- getwd()
[13:36:51.689]             }
[13:36:51.689]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.689]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.689]         }
[13:36:51.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.689]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.689]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.689]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.689]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.689]             base::names(...future.oldOptions))
[13:36:51.689]     }
[13:36:51.689]     if (FALSE) {
[13:36:51.689]     }
[13:36:51.689]     else {
[13:36:51.689]         if (TRUE) {
[13:36:51.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.689]                 open = "w")
[13:36:51.689]         }
[13:36:51.689]         else {
[13:36:51.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.689]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.689]         }
[13:36:51.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.689]             base::sink(type = "output", split = FALSE)
[13:36:51.689]             base::close(...future.stdout)
[13:36:51.689]         }, add = TRUE)
[13:36:51.689]     }
[13:36:51.689]     ...future.frame <- base::sys.nframe()
[13:36:51.689]     ...future.conditions <- base::list()
[13:36:51.689]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.689]     if (FALSE) {
[13:36:51.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.689]     }
[13:36:51.689]     ...future.result <- base::tryCatch({
[13:36:51.689]         base::withCallingHandlers({
[13:36:51.689]             ...future.value <- base::withVisible(base::local({
[13:36:51.689]                 x[["a"]] <- 1
[13:36:51.689]                 x
[13:36:51.689]             }))
[13:36:51.689]             future::FutureResult(value = ...future.value$value, 
[13:36:51.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.689]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.689]                     ...future.globalenv.names))
[13:36:51.689]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.689]         }, condition = base::local({
[13:36:51.689]             c <- base::c
[13:36:51.689]             inherits <- base::inherits
[13:36:51.689]             invokeRestart <- base::invokeRestart
[13:36:51.689]             length <- base::length
[13:36:51.689]             list <- base::list
[13:36:51.689]             seq.int <- base::seq.int
[13:36:51.689]             signalCondition <- base::signalCondition
[13:36:51.689]             sys.calls <- base::sys.calls
[13:36:51.689]             `[[` <- base::`[[`
[13:36:51.689]             `+` <- base::`+`
[13:36:51.689]             `<<-` <- base::`<<-`
[13:36:51.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.689]                   3L)]
[13:36:51.689]             }
[13:36:51.689]             function(cond) {
[13:36:51.689]                 is_error <- inherits(cond, "error")
[13:36:51.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.689]                   NULL)
[13:36:51.689]                 if (is_error) {
[13:36:51.689]                   sessionInformation <- function() {
[13:36:51.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.689]                       search = base::search(), system = base::Sys.info())
[13:36:51.689]                   }
[13:36:51.689]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.689]                     cond$call), session = sessionInformation(), 
[13:36:51.689]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.689]                   signalCondition(cond)
[13:36:51.689]                 }
[13:36:51.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.689]                 "immediateCondition"))) {
[13:36:51.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.689]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.689]                   if (TRUE && !signal) {
[13:36:51.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.689]                     {
[13:36:51.689]                       inherits <- base::inherits
[13:36:51.689]                       invokeRestart <- base::invokeRestart
[13:36:51.689]                       is.null <- base::is.null
[13:36:51.689]                       muffled <- FALSE
[13:36:51.689]                       if (inherits(cond, "message")) {
[13:36:51.689]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.689]                         if (muffled) 
[13:36:51.689]                           invokeRestart("muffleMessage")
[13:36:51.689]                       }
[13:36:51.689]                       else if (inherits(cond, "warning")) {
[13:36:51.689]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.689]                         if (muffled) 
[13:36:51.689]                           invokeRestart("muffleWarning")
[13:36:51.689]                       }
[13:36:51.689]                       else if (inherits(cond, "condition")) {
[13:36:51.689]                         if (!is.null(pattern)) {
[13:36:51.689]                           computeRestarts <- base::computeRestarts
[13:36:51.689]                           grepl <- base::grepl
[13:36:51.689]                           restarts <- computeRestarts(cond)
[13:36:51.689]                           for (restart in restarts) {
[13:36:51.689]                             name <- restart$name
[13:36:51.689]                             if (is.null(name)) 
[13:36:51.689]                               next
[13:36:51.689]                             if (!grepl(pattern, name)) 
[13:36:51.689]                               next
[13:36:51.689]                             invokeRestart(restart)
[13:36:51.689]                             muffled <- TRUE
[13:36:51.689]                             break
[13:36:51.689]                           }
[13:36:51.689]                         }
[13:36:51.689]                       }
[13:36:51.689]                       invisible(muffled)
[13:36:51.689]                     }
[13:36:51.689]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.689]                   }
[13:36:51.689]                 }
[13:36:51.689]                 else {
[13:36:51.689]                   if (TRUE) {
[13:36:51.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.689]                     {
[13:36:51.689]                       inherits <- base::inherits
[13:36:51.689]                       invokeRestart <- base::invokeRestart
[13:36:51.689]                       is.null <- base::is.null
[13:36:51.689]                       muffled <- FALSE
[13:36:51.689]                       if (inherits(cond, "message")) {
[13:36:51.689]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.689]                         if (muffled) 
[13:36:51.689]                           invokeRestart("muffleMessage")
[13:36:51.689]                       }
[13:36:51.689]                       else if (inherits(cond, "warning")) {
[13:36:51.689]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.689]                         if (muffled) 
[13:36:51.689]                           invokeRestart("muffleWarning")
[13:36:51.689]                       }
[13:36:51.689]                       else if (inherits(cond, "condition")) {
[13:36:51.689]                         if (!is.null(pattern)) {
[13:36:51.689]                           computeRestarts <- base::computeRestarts
[13:36:51.689]                           grepl <- base::grepl
[13:36:51.689]                           restarts <- computeRestarts(cond)
[13:36:51.689]                           for (restart in restarts) {
[13:36:51.689]                             name <- restart$name
[13:36:51.689]                             if (is.null(name)) 
[13:36:51.689]                               next
[13:36:51.689]                             if (!grepl(pattern, name)) 
[13:36:51.689]                               next
[13:36:51.689]                             invokeRestart(restart)
[13:36:51.689]                             muffled <- TRUE
[13:36:51.689]                             break
[13:36:51.689]                           }
[13:36:51.689]                         }
[13:36:51.689]                       }
[13:36:51.689]                       invisible(muffled)
[13:36:51.689]                     }
[13:36:51.689]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.689]                   }
[13:36:51.689]                 }
[13:36:51.689]             }
[13:36:51.689]         }))
[13:36:51.689]     }, error = function(ex) {
[13:36:51.689]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.689]                 ...future.rng), started = ...future.startTime, 
[13:36:51.689]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.689]             version = "1.8"), class = "FutureResult")
[13:36:51.689]     }, finally = {
[13:36:51.689]         if (!identical(...future.workdir, getwd())) 
[13:36:51.689]             setwd(...future.workdir)
[13:36:51.689]         {
[13:36:51.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.689]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.689]             }
[13:36:51.689]             base::options(...future.oldOptions)
[13:36:51.689]             if (.Platform$OS.type == "windows") {
[13:36:51.689]                 old_names <- names(...future.oldEnvVars)
[13:36:51.689]                 envs <- base::Sys.getenv()
[13:36:51.689]                 names <- names(envs)
[13:36:51.689]                 common <- intersect(names, old_names)
[13:36:51.689]                 added <- setdiff(names, old_names)
[13:36:51.689]                 removed <- setdiff(old_names, names)
[13:36:51.689]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.689]                   envs[common]]
[13:36:51.689]                 NAMES <- toupper(changed)
[13:36:51.689]                 args <- list()
[13:36:51.689]                 for (kk in seq_along(NAMES)) {
[13:36:51.689]                   name <- changed[[kk]]
[13:36:51.689]                   NAME <- NAMES[[kk]]
[13:36:51.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.689]                     next
[13:36:51.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.689]                 }
[13:36:51.689]                 NAMES <- toupper(added)
[13:36:51.689]                 for (kk in seq_along(NAMES)) {
[13:36:51.689]                   name <- added[[kk]]
[13:36:51.689]                   NAME <- NAMES[[kk]]
[13:36:51.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.689]                     next
[13:36:51.689]                   args[[name]] <- ""
[13:36:51.689]                 }
[13:36:51.689]                 NAMES <- toupper(removed)
[13:36:51.689]                 for (kk in seq_along(NAMES)) {
[13:36:51.689]                   name <- removed[[kk]]
[13:36:51.689]                   NAME <- NAMES[[kk]]
[13:36:51.689]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.689]                     next
[13:36:51.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.689]                 }
[13:36:51.689]                 if (length(args) > 0) 
[13:36:51.689]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.689]             }
[13:36:51.689]             else {
[13:36:51.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.689]             }
[13:36:51.689]             {
[13:36:51.689]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.689]                   0L) {
[13:36:51.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.689]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.689]                   base::options(opts)
[13:36:51.689]                 }
[13:36:51.689]                 {
[13:36:51.689]                   {
[13:36:51.689]                     NULL
[13:36:51.689]                     RNGkind("Mersenne-Twister")
[13:36:51.689]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.689]                       inherits = FALSE)
[13:36:51.689]                   }
[13:36:51.689]                   options(future.plan = NULL)
[13:36:51.689]                   if (is.na(NA_character_)) 
[13:36:51.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.689]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.689]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.689]                     .init = FALSE)
[13:36:51.689]                 }
[13:36:51.689]             }
[13:36:51.689]         }
[13:36:51.689]     })
[13:36:51.689]     if (TRUE) {
[13:36:51.689]         base::sink(type = "output", split = FALSE)
[13:36:51.689]         if (TRUE) {
[13:36:51.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.689]         }
[13:36:51.689]         else {
[13:36:51.689]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.689]         }
[13:36:51.689]         base::close(...future.stdout)
[13:36:51.689]         ...future.stdout <- NULL
[13:36:51.689]     }
[13:36:51.689]     ...future.result$conditions <- ...future.conditions
[13:36:51.689]     ...future.result$finished <- base::Sys.time()
[13:36:51.689]     ...future.result
[13:36:51.689] }
[13:36:51.691] assign_globals() ...
[13:36:51.691] List of 1
[13:36:51.691]  $ x: list()
[13:36:51.691]  - attr(*, "where")=List of 1
[13:36:51.691]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.691]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.691]  - attr(*, "resolved")= logi TRUE
[13:36:51.691]  - attr(*, "total_size")= num 0
[13:36:51.691]  - attr(*, "already-done")= logi TRUE
[13:36:51.694] - copied ‘x’ to environment
[13:36:51.694] assign_globals() ... done
[13:36:51.694] plan(): Setting new future strategy stack:
[13:36:51.694] List of future strategies:
[13:36:51.694] 1. sequential:
[13:36:51.694]    - args: function (..., envir = parent.frame())
[13:36:51.694]    - tweaked: FALSE
[13:36:51.694]    - call: NULL
[13:36:51.695] plan(): nbrOfWorkers() = 1
[13:36:51.695] plan(): Setting new future strategy stack:
[13:36:51.695] List of future strategies:
[13:36:51.695] 1. sequential:
[13:36:51.695]    - args: function (..., envir = parent.frame())
[13:36:51.695]    - tweaked: FALSE
[13:36:51.695]    - call: plan(strategy)
[13:36:51.696] plan(): nbrOfWorkers() = 1
[13:36:51.696] SequentialFuture started (and completed)
[13:36:51.696] - Launch lazy future ... done
[13:36:51.696] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.696] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.696] Searching for globals...
[13:36:51.698] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.698] Searching for globals ... DONE
[13:36:51.699] Resolving globals: TRUE
[13:36:51.699] Resolving any globals that are futures ...
[13:36:51.699] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.699] Resolving any globals that are futures ... DONE
[13:36:51.699] Resolving futures part of globals (recursively) ...
[13:36:51.699] resolve() on list ...
[13:36:51.699]  recursive: 99
[13:36:51.700]  length: 1
[13:36:51.700]  elements: ‘x’
[13:36:51.700]  length: 0 (resolved future 1)
[13:36:51.700] resolve() on list ... DONE
[13:36:51.700] - globals: [1] ‘x’
[13:36:51.700] Resolving futures part of globals (recursively) ... DONE
[13:36:51.700] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.700] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.701] - globals: [1] ‘x’
[13:36:51.701] 
[13:36:51.701] getGlobalsAndPackages() ... DONE
[13:36:51.701] run() for ‘Future’ ...
[13:36:51.701] - state: ‘created’
[13:36:51.701] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.701] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.701] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.702]   - Field: ‘label’
[13:36:51.702]   - Field: ‘local’
[13:36:51.702]   - Field: ‘owner’
[13:36:51.702]   - Field: ‘envir’
[13:36:51.702]   - Field: ‘packages’
[13:36:51.702]   - Field: ‘gc’
[13:36:51.702]   - Field: ‘conditions’
[13:36:51.702]   - Field: ‘expr’
[13:36:51.702]   - Field: ‘uuid’
[13:36:51.702]   - Field: ‘seed’
[13:36:51.703]   - Field: ‘version’
[13:36:51.703]   - Field: ‘result’
[13:36:51.703]   - Field: ‘asynchronous’
[13:36:51.703]   - Field: ‘calls’
[13:36:51.703]   - Field: ‘globals’
[13:36:51.703]   - Field: ‘stdout’
[13:36:51.703]   - Field: ‘earlySignal’
[13:36:51.703]   - Field: ‘lazy’
[13:36:51.703]   - Field: ‘state’
[13:36:51.703] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.703] - Launch lazy future ...
[13:36:51.704] Packages needed by the future expression (n = 0): <none>
[13:36:51.704] Packages needed by future strategies (n = 0): <none>
[13:36:51.704] {
[13:36:51.704]     {
[13:36:51.704]         {
[13:36:51.704]             ...future.startTime <- base::Sys.time()
[13:36:51.704]             {
[13:36:51.704]                 {
[13:36:51.704]                   {
[13:36:51.704]                     base::local({
[13:36:51.704]                       has_future <- base::requireNamespace("future", 
[13:36:51.704]                         quietly = TRUE)
[13:36:51.704]                       if (has_future) {
[13:36:51.704]                         ns <- base::getNamespace("future")
[13:36:51.704]                         version <- ns[[".package"]][["version"]]
[13:36:51.704]                         if (is.null(version)) 
[13:36:51.704]                           version <- utils::packageVersion("future")
[13:36:51.704]                       }
[13:36:51.704]                       else {
[13:36:51.704]                         version <- NULL
[13:36:51.704]                       }
[13:36:51.704]                       if (!has_future || version < "1.8.0") {
[13:36:51.704]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.704]                           "", base::R.version$version.string), 
[13:36:51.704]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.704]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.704]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.704]                             "release", "version")], collapse = " "), 
[13:36:51.704]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.704]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.704]                           info)
[13:36:51.704]                         info <- base::paste(info, collapse = "; ")
[13:36:51.704]                         if (!has_future) {
[13:36:51.704]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.704]                             info)
[13:36:51.704]                         }
[13:36:51.704]                         else {
[13:36:51.704]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.704]                             info, version)
[13:36:51.704]                         }
[13:36:51.704]                         base::stop(msg)
[13:36:51.704]                       }
[13:36:51.704]                     })
[13:36:51.704]                   }
[13:36:51.704]                   ...future.strategy.old <- future::plan("list")
[13:36:51.704]                   options(future.plan = NULL)
[13:36:51.704]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.704]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.704]                 }
[13:36:51.704]                 ...future.workdir <- getwd()
[13:36:51.704]             }
[13:36:51.704]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.704]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.704]         }
[13:36:51.704]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.704]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.704]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.704]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.704]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.704]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.704]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.704]             base::names(...future.oldOptions))
[13:36:51.704]     }
[13:36:51.704]     if (FALSE) {
[13:36:51.704]     }
[13:36:51.704]     else {
[13:36:51.704]         if (TRUE) {
[13:36:51.704]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.704]                 open = "w")
[13:36:51.704]         }
[13:36:51.704]         else {
[13:36:51.704]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.704]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.704]         }
[13:36:51.704]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.704]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.704]             base::sink(type = "output", split = FALSE)
[13:36:51.704]             base::close(...future.stdout)
[13:36:51.704]         }, add = TRUE)
[13:36:51.704]     }
[13:36:51.704]     ...future.frame <- base::sys.nframe()
[13:36:51.704]     ...future.conditions <- base::list()
[13:36:51.704]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.704]     if (FALSE) {
[13:36:51.704]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.704]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.704]     }
[13:36:51.704]     ...future.result <- base::tryCatch({
[13:36:51.704]         base::withCallingHandlers({
[13:36:51.704]             ...future.value <- base::withVisible(base::local({
[13:36:51.704]                 x["a"] <- list(1)
[13:36:51.704]                 x
[13:36:51.704]             }))
[13:36:51.704]             future::FutureResult(value = ...future.value$value, 
[13:36:51.704]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.704]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.704]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.704]                     ...future.globalenv.names))
[13:36:51.704]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.704]         }, condition = base::local({
[13:36:51.704]             c <- base::c
[13:36:51.704]             inherits <- base::inherits
[13:36:51.704]             invokeRestart <- base::invokeRestart
[13:36:51.704]             length <- base::length
[13:36:51.704]             list <- base::list
[13:36:51.704]             seq.int <- base::seq.int
[13:36:51.704]             signalCondition <- base::signalCondition
[13:36:51.704]             sys.calls <- base::sys.calls
[13:36:51.704]             `[[` <- base::`[[`
[13:36:51.704]             `+` <- base::`+`
[13:36:51.704]             `<<-` <- base::`<<-`
[13:36:51.704]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.704]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.704]                   3L)]
[13:36:51.704]             }
[13:36:51.704]             function(cond) {
[13:36:51.704]                 is_error <- inherits(cond, "error")
[13:36:51.704]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.704]                   NULL)
[13:36:51.704]                 if (is_error) {
[13:36:51.704]                   sessionInformation <- function() {
[13:36:51.704]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.704]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.704]                       search = base::search(), system = base::Sys.info())
[13:36:51.704]                   }
[13:36:51.704]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.704]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.704]                     cond$call), session = sessionInformation(), 
[13:36:51.704]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.704]                   signalCondition(cond)
[13:36:51.704]                 }
[13:36:51.704]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.704]                 "immediateCondition"))) {
[13:36:51.704]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.704]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.704]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.704]                   if (TRUE && !signal) {
[13:36:51.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.704]                     {
[13:36:51.704]                       inherits <- base::inherits
[13:36:51.704]                       invokeRestart <- base::invokeRestart
[13:36:51.704]                       is.null <- base::is.null
[13:36:51.704]                       muffled <- FALSE
[13:36:51.704]                       if (inherits(cond, "message")) {
[13:36:51.704]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.704]                         if (muffled) 
[13:36:51.704]                           invokeRestart("muffleMessage")
[13:36:51.704]                       }
[13:36:51.704]                       else if (inherits(cond, "warning")) {
[13:36:51.704]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.704]                         if (muffled) 
[13:36:51.704]                           invokeRestart("muffleWarning")
[13:36:51.704]                       }
[13:36:51.704]                       else if (inherits(cond, "condition")) {
[13:36:51.704]                         if (!is.null(pattern)) {
[13:36:51.704]                           computeRestarts <- base::computeRestarts
[13:36:51.704]                           grepl <- base::grepl
[13:36:51.704]                           restarts <- computeRestarts(cond)
[13:36:51.704]                           for (restart in restarts) {
[13:36:51.704]                             name <- restart$name
[13:36:51.704]                             if (is.null(name)) 
[13:36:51.704]                               next
[13:36:51.704]                             if (!grepl(pattern, name)) 
[13:36:51.704]                               next
[13:36:51.704]                             invokeRestart(restart)
[13:36:51.704]                             muffled <- TRUE
[13:36:51.704]                             break
[13:36:51.704]                           }
[13:36:51.704]                         }
[13:36:51.704]                       }
[13:36:51.704]                       invisible(muffled)
[13:36:51.704]                     }
[13:36:51.704]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.704]                   }
[13:36:51.704]                 }
[13:36:51.704]                 else {
[13:36:51.704]                   if (TRUE) {
[13:36:51.704]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.704]                     {
[13:36:51.704]                       inherits <- base::inherits
[13:36:51.704]                       invokeRestart <- base::invokeRestart
[13:36:51.704]                       is.null <- base::is.null
[13:36:51.704]                       muffled <- FALSE
[13:36:51.704]                       if (inherits(cond, "message")) {
[13:36:51.704]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.704]                         if (muffled) 
[13:36:51.704]                           invokeRestart("muffleMessage")
[13:36:51.704]                       }
[13:36:51.704]                       else if (inherits(cond, "warning")) {
[13:36:51.704]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.704]                         if (muffled) 
[13:36:51.704]                           invokeRestart("muffleWarning")
[13:36:51.704]                       }
[13:36:51.704]                       else if (inherits(cond, "condition")) {
[13:36:51.704]                         if (!is.null(pattern)) {
[13:36:51.704]                           computeRestarts <- base::computeRestarts
[13:36:51.704]                           grepl <- base::grepl
[13:36:51.704]                           restarts <- computeRestarts(cond)
[13:36:51.704]                           for (restart in restarts) {
[13:36:51.704]                             name <- restart$name
[13:36:51.704]                             if (is.null(name)) 
[13:36:51.704]                               next
[13:36:51.704]                             if (!grepl(pattern, name)) 
[13:36:51.704]                               next
[13:36:51.704]                             invokeRestart(restart)
[13:36:51.704]                             muffled <- TRUE
[13:36:51.704]                             break
[13:36:51.704]                           }
[13:36:51.704]                         }
[13:36:51.704]                       }
[13:36:51.704]                       invisible(muffled)
[13:36:51.704]                     }
[13:36:51.704]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.704]                   }
[13:36:51.704]                 }
[13:36:51.704]             }
[13:36:51.704]         }))
[13:36:51.704]     }, error = function(ex) {
[13:36:51.704]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.704]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.704]                 ...future.rng), started = ...future.startTime, 
[13:36:51.704]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.704]             version = "1.8"), class = "FutureResult")
[13:36:51.704]     }, finally = {
[13:36:51.704]         if (!identical(...future.workdir, getwd())) 
[13:36:51.704]             setwd(...future.workdir)
[13:36:51.704]         {
[13:36:51.704]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.704]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.704]             }
[13:36:51.704]             base::options(...future.oldOptions)
[13:36:51.704]             if (.Platform$OS.type == "windows") {
[13:36:51.704]                 old_names <- names(...future.oldEnvVars)
[13:36:51.704]                 envs <- base::Sys.getenv()
[13:36:51.704]                 names <- names(envs)
[13:36:51.704]                 common <- intersect(names, old_names)
[13:36:51.704]                 added <- setdiff(names, old_names)
[13:36:51.704]                 removed <- setdiff(old_names, names)
[13:36:51.704]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.704]                   envs[common]]
[13:36:51.704]                 NAMES <- toupper(changed)
[13:36:51.704]                 args <- list()
[13:36:51.704]                 for (kk in seq_along(NAMES)) {
[13:36:51.704]                   name <- changed[[kk]]
[13:36:51.704]                   NAME <- NAMES[[kk]]
[13:36:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.704]                     next
[13:36:51.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.704]                 }
[13:36:51.704]                 NAMES <- toupper(added)
[13:36:51.704]                 for (kk in seq_along(NAMES)) {
[13:36:51.704]                   name <- added[[kk]]
[13:36:51.704]                   NAME <- NAMES[[kk]]
[13:36:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.704]                     next
[13:36:51.704]                   args[[name]] <- ""
[13:36:51.704]                 }
[13:36:51.704]                 NAMES <- toupper(removed)
[13:36:51.704]                 for (kk in seq_along(NAMES)) {
[13:36:51.704]                   name <- removed[[kk]]
[13:36:51.704]                   NAME <- NAMES[[kk]]
[13:36:51.704]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.704]                     next
[13:36:51.704]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.704]                 }
[13:36:51.704]                 if (length(args) > 0) 
[13:36:51.704]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.704]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.704]             }
[13:36:51.704]             else {
[13:36:51.704]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.704]             }
[13:36:51.704]             {
[13:36:51.704]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.704]                   0L) {
[13:36:51.704]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.704]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.704]                   base::options(opts)
[13:36:51.704]                 }
[13:36:51.704]                 {
[13:36:51.704]                   {
[13:36:51.704]                     NULL
[13:36:51.704]                     RNGkind("Mersenne-Twister")
[13:36:51.704]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.704]                       inherits = FALSE)
[13:36:51.704]                   }
[13:36:51.704]                   options(future.plan = NULL)
[13:36:51.704]                   if (is.na(NA_character_)) 
[13:36:51.704]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.704]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.704]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.704]                     .init = FALSE)
[13:36:51.704]                 }
[13:36:51.704]             }
[13:36:51.704]         }
[13:36:51.704]     })
[13:36:51.704]     if (TRUE) {
[13:36:51.704]         base::sink(type = "output", split = FALSE)
[13:36:51.704]         if (TRUE) {
[13:36:51.704]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.704]         }
[13:36:51.704]         else {
[13:36:51.704]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.704]         }
[13:36:51.704]         base::close(...future.stdout)
[13:36:51.704]         ...future.stdout <- NULL
[13:36:51.704]     }
[13:36:51.704]     ...future.result$conditions <- ...future.conditions
[13:36:51.704]     ...future.result$finished <- base::Sys.time()
[13:36:51.704]     ...future.result
[13:36:51.704] }
[13:36:51.706] assign_globals() ...
[13:36:51.706] List of 1
[13:36:51.706]  $ x: list()
[13:36:51.706]  - attr(*, "where")=List of 1
[13:36:51.706]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.706]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.706]  - attr(*, "resolved")= logi TRUE
[13:36:51.706]  - attr(*, "total_size")= num 0
[13:36:51.706]  - attr(*, "already-done")= logi TRUE
[13:36:51.708] - copied ‘x’ to environment
[13:36:51.708] assign_globals() ... done
[13:36:51.708] plan(): Setting new future strategy stack:
[13:36:51.708] List of future strategies:
[13:36:51.708] 1. sequential:
[13:36:51.708]    - args: function (..., envir = parent.frame())
[13:36:51.708]    - tweaked: FALSE
[13:36:51.708]    - call: NULL
[13:36:51.708] plan(): nbrOfWorkers() = 1
[13:36:51.709] plan(): Setting new future strategy stack:
[13:36:51.709] List of future strategies:
[13:36:51.709] 1. sequential:
[13:36:51.709]    - args: function (..., envir = parent.frame())
[13:36:51.709]    - tweaked: FALSE
[13:36:51.709]    - call: plan(strategy)
[13:36:51.710] plan(): nbrOfWorkers() = 1
[13:36:51.710] SequentialFuture started (and completed)
[13:36:51.710] - Launch lazy future ... done
[13:36:51.710] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.710] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.710] Searching for globals...
[13:36:51.712] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.712] Searching for globals ... DONE
[13:36:51.712] Resolving globals: TRUE
[13:36:51.713] Resolving any globals that are futures ...
[13:36:51.713] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.713] Resolving any globals that are futures ... DONE
[13:36:51.713] Resolving futures part of globals (recursively) ...
[13:36:51.713] resolve() on list ...
[13:36:51.713]  recursive: 99
[13:36:51.713]  length: 1
[13:36:51.714]  elements: ‘x’
[13:36:51.714]  length: 0 (resolved future 1)
[13:36:51.714] resolve() on list ... DONE
[13:36:51.714] - globals: [1] ‘x’
[13:36:51.714] Resolving futures part of globals (recursively) ... DONE
[13:36:51.714] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.714] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.714] - globals: [1] ‘x’
[13:36:51.715] 
[13:36:51.715] getGlobalsAndPackages() ... DONE
[13:36:51.715] run() for ‘Future’ ...
[13:36:51.715] - state: ‘created’
[13:36:51.715] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.715] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.715] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.715]   - Field: ‘label’
[13:36:51.716]   - Field: ‘local’
[13:36:51.716]   - Field: ‘owner’
[13:36:51.716]   - Field: ‘envir’
[13:36:51.716]   - Field: ‘packages’
[13:36:51.717]   - Field: ‘gc’
[13:36:51.717]   - Field: ‘conditions’
[13:36:51.717]   - Field: ‘expr’
[13:36:51.717]   - Field: ‘uuid’
[13:36:51.717]   - Field: ‘seed’
[13:36:51.717]   - Field: ‘version’
[13:36:51.717]   - Field: ‘result’
[13:36:51.717]   - Field: ‘asynchronous’
[13:36:51.717]   - Field: ‘calls’
[13:36:51.718]   - Field: ‘globals’
[13:36:51.718]   - Field: ‘stdout’
[13:36:51.718]   - Field: ‘earlySignal’
[13:36:51.718]   - Field: ‘lazy’
[13:36:51.718]   - Field: ‘state’
[13:36:51.718] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.718] - Launch lazy future ...
[13:36:51.718] Packages needed by the future expression (n = 0): <none>
[13:36:51.718] Packages needed by future strategies (n = 0): <none>
[13:36:51.719] {
[13:36:51.719]     {
[13:36:51.719]         {
[13:36:51.719]             ...future.startTime <- base::Sys.time()
[13:36:51.719]             {
[13:36:51.719]                 {
[13:36:51.719]                   {
[13:36:51.719]                     base::local({
[13:36:51.719]                       has_future <- base::requireNamespace("future", 
[13:36:51.719]                         quietly = TRUE)
[13:36:51.719]                       if (has_future) {
[13:36:51.719]                         ns <- base::getNamespace("future")
[13:36:51.719]                         version <- ns[[".package"]][["version"]]
[13:36:51.719]                         if (is.null(version)) 
[13:36:51.719]                           version <- utils::packageVersion("future")
[13:36:51.719]                       }
[13:36:51.719]                       else {
[13:36:51.719]                         version <- NULL
[13:36:51.719]                       }
[13:36:51.719]                       if (!has_future || version < "1.8.0") {
[13:36:51.719]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.719]                           "", base::R.version$version.string), 
[13:36:51.719]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.719]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.719]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.719]                             "release", "version")], collapse = " "), 
[13:36:51.719]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.719]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.719]                           info)
[13:36:51.719]                         info <- base::paste(info, collapse = "; ")
[13:36:51.719]                         if (!has_future) {
[13:36:51.719]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.719]                             info)
[13:36:51.719]                         }
[13:36:51.719]                         else {
[13:36:51.719]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.719]                             info, version)
[13:36:51.719]                         }
[13:36:51.719]                         base::stop(msg)
[13:36:51.719]                       }
[13:36:51.719]                     })
[13:36:51.719]                   }
[13:36:51.719]                   ...future.strategy.old <- future::plan("list")
[13:36:51.719]                   options(future.plan = NULL)
[13:36:51.719]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.719]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.719]                 }
[13:36:51.719]                 ...future.workdir <- getwd()
[13:36:51.719]             }
[13:36:51.719]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.719]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.719]         }
[13:36:51.719]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.719]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.719]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.719]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.719]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.719]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.719]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.719]             base::names(...future.oldOptions))
[13:36:51.719]     }
[13:36:51.719]     if (FALSE) {
[13:36:51.719]     }
[13:36:51.719]     else {
[13:36:51.719]         if (TRUE) {
[13:36:51.719]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.719]                 open = "w")
[13:36:51.719]         }
[13:36:51.719]         else {
[13:36:51.719]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.719]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.719]         }
[13:36:51.719]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.719]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.719]             base::sink(type = "output", split = FALSE)
[13:36:51.719]             base::close(...future.stdout)
[13:36:51.719]         }, add = TRUE)
[13:36:51.719]     }
[13:36:51.719]     ...future.frame <- base::sys.nframe()
[13:36:51.719]     ...future.conditions <- base::list()
[13:36:51.719]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.719]     if (FALSE) {
[13:36:51.719]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.719]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.719]     }
[13:36:51.719]     ...future.result <- base::tryCatch({
[13:36:51.719]         base::withCallingHandlers({
[13:36:51.719]             ...future.value <- base::withVisible(base::local({
[13:36:51.719]                 x["a"] <- list(1)
[13:36:51.719]                 x
[13:36:51.719]             }))
[13:36:51.719]             future::FutureResult(value = ...future.value$value, 
[13:36:51.719]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.719]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.719]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.719]                     ...future.globalenv.names))
[13:36:51.719]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.719]         }, condition = base::local({
[13:36:51.719]             c <- base::c
[13:36:51.719]             inherits <- base::inherits
[13:36:51.719]             invokeRestart <- base::invokeRestart
[13:36:51.719]             length <- base::length
[13:36:51.719]             list <- base::list
[13:36:51.719]             seq.int <- base::seq.int
[13:36:51.719]             signalCondition <- base::signalCondition
[13:36:51.719]             sys.calls <- base::sys.calls
[13:36:51.719]             `[[` <- base::`[[`
[13:36:51.719]             `+` <- base::`+`
[13:36:51.719]             `<<-` <- base::`<<-`
[13:36:51.719]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.719]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.719]                   3L)]
[13:36:51.719]             }
[13:36:51.719]             function(cond) {
[13:36:51.719]                 is_error <- inherits(cond, "error")
[13:36:51.719]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.719]                   NULL)
[13:36:51.719]                 if (is_error) {
[13:36:51.719]                   sessionInformation <- function() {
[13:36:51.719]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.719]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.719]                       search = base::search(), system = base::Sys.info())
[13:36:51.719]                   }
[13:36:51.719]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.719]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.719]                     cond$call), session = sessionInformation(), 
[13:36:51.719]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.719]                   signalCondition(cond)
[13:36:51.719]                 }
[13:36:51.719]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.719]                 "immediateCondition"))) {
[13:36:51.719]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.719]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.719]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.719]                   if (TRUE && !signal) {
[13:36:51.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.719]                     {
[13:36:51.719]                       inherits <- base::inherits
[13:36:51.719]                       invokeRestart <- base::invokeRestart
[13:36:51.719]                       is.null <- base::is.null
[13:36:51.719]                       muffled <- FALSE
[13:36:51.719]                       if (inherits(cond, "message")) {
[13:36:51.719]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.719]                         if (muffled) 
[13:36:51.719]                           invokeRestart("muffleMessage")
[13:36:51.719]                       }
[13:36:51.719]                       else if (inherits(cond, "warning")) {
[13:36:51.719]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.719]                         if (muffled) 
[13:36:51.719]                           invokeRestart("muffleWarning")
[13:36:51.719]                       }
[13:36:51.719]                       else if (inherits(cond, "condition")) {
[13:36:51.719]                         if (!is.null(pattern)) {
[13:36:51.719]                           computeRestarts <- base::computeRestarts
[13:36:51.719]                           grepl <- base::grepl
[13:36:51.719]                           restarts <- computeRestarts(cond)
[13:36:51.719]                           for (restart in restarts) {
[13:36:51.719]                             name <- restart$name
[13:36:51.719]                             if (is.null(name)) 
[13:36:51.719]                               next
[13:36:51.719]                             if (!grepl(pattern, name)) 
[13:36:51.719]                               next
[13:36:51.719]                             invokeRestart(restart)
[13:36:51.719]                             muffled <- TRUE
[13:36:51.719]                             break
[13:36:51.719]                           }
[13:36:51.719]                         }
[13:36:51.719]                       }
[13:36:51.719]                       invisible(muffled)
[13:36:51.719]                     }
[13:36:51.719]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.719]                   }
[13:36:51.719]                 }
[13:36:51.719]                 else {
[13:36:51.719]                   if (TRUE) {
[13:36:51.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.719]                     {
[13:36:51.719]                       inherits <- base::inherits
[13:36:51.719]                       invokeRestart <- base::invokeRestart
[13:36:51.719]                       is.null <- base::is.null
[13:36:51.719]                       muffled <- FALSE
[13:36:51.719]                       if (inherits(cond, "message")) {
[13:36:51.719]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.719]                         if (muffled) 
[13:36:51.719]                           invokeRestart("muffleMessage")
[13:36:51.719]                       }
[13:36:51.719]                       else if (inherits(cond, "warning")) {
[13:36:51.719]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.719]                         if (muffled) 
[13:36:51.719]                           invokeRestart("muffleWarning")
[13:36:51.719]                       }
[13:36:51.719]                       else if (inherits(cond, "condition")) {
[13:36:51.719]                         if (!is.null(pattern)) {
[13:36:51.719]                           computeRestarts <- base::computeRestarts
[13:36:51.719]                           grepl <- base::grepl
[13:36:51.719]                           restarts <- computeRestarts(cond)
[13:36:51.719]                           for (restart in restarts) {
[13:36:51.719]                             name <- restart$name
[13:36:51.719]                             if (is.null(name)) 
[13:36:51.719]                               next
[13:36:51.719]                             if (!grepl(pattern, name)) 
[13:36:51.719]                               next
[13:36:51.719]                             invokeRestart(restart)
[13:36:51.719]                             muffled <- TRUE
[13:36:51.719]                             break
[13:36:51.719]                           }
[13:36:51.719]                         }
[13:36:51.719]                       }
[13:36:51.719]                       invisible(muffled)
[13:36:51.719]                     }
[13:36:51.719]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.719]                   }
[13:36:51.719]                 }
[13:36:51.719]             }
[13:36:51.719]         }))
[13:36:51.719]     }, error = function(ex) {
[13:36:51.719]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.719]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.719]                 ...future.rng), started = ...future.startTime, 
[13:36:51.719]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.719]             version = "1.8"), class = "FutureResult")
[13:36:51.719]     }, finally = {
[13:36:51.719]         if (!identical(...future.workdir, getwd())) 
[13:36:51.719]             setwd(...future.workdir)
[13:36:51.719]         {
[13:36:51.719]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.719]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.719]             }
[13:36:51.719]             base::options(...future.oldOptions)
[13:36:51.719]             if (.Platform$OS.type == "windows") {
[13:36:51.719]                 old_names <- names(...future.oldEnvVars)
[13:36:51.719]                 envs <- base::Sys.getenv()
[13:36:51.719]                 names <- names(envs)
[13:36:51.719]                 common <- intersect(names, old_names)
[13:36:51.719]                 added <- setdiff(names, old_names)
[13:36:51.719]                 removed <- setdiff(old_names, names)
[13:36:51.719]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.719]                   envs[common]]
[13:36:51.719]                 NAMES <- toupper(changed)
[13:36:51.719]                 args <- list()
[13:36:51.719]                 for (kk in seq_along(NAMES)) {
[13:36:51.719]                   name <- changed[[kk]]
[13:36:51.719]                   NAME <- NAMES[[kk]]
[13:36:51.719]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.719]                     next
[13:36:51.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.719]                 }
[13:36:51.719]                 NAMES <- toupper(added)
[13:36:51.719]                 for (kk in seq_along(NAMES)) {
[13:36:51.719]                   name <- added[[kk]]
[13:36:51.719]                   NAME <- NAMES[[kk]]
[13:36:51.719]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.719]                     next
[13:36:51.719]                   args[[name]] <- ""
[13:36:51.719]                 }
[13:36:51.719]                 NAMES <- toupper(removed)
[13:36:51.719]                 for (kk in seq_along(NAMES)) {
[13:36:51.719]                   name <- removed[[kk]]
[13:36:51.719]                   NAME <- NAMES[[kk]]
[13:36:51.719]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.719]                     next
[13:36:51.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.719]                 }
[13:36:51.719]                 if (length(args) > 0) 
[13:36:51.719]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.719]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.719]             }
[13:36:51.719]             else {
[13:36:51.719]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.719]             }
[13:36:51.719]             {
[13:36:51.719]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.719]                   0L) {
[13:36:51.719]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.719]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.719]                   base::options(opts)
[13:36:51.719]                 }
[13:36:51.719]                 {
[13:36:51.719]                   {
[13:36:51.719]                     NULL
[13:36:51.719]                     RNGkind("Mersenne-Twister")
[13:36:51.719]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.719]                       inherits = FALSE)
[13:36:51.719]                   }
[13:36:51.719]                   options(future.plan = NULL)
[13:36:51.719]                   if (is.na(NA_character_)) 
[13:36:51.719]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.719]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.719]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.719]                     .init = FALSE)
[13:36:51.719]                 }
[13:36:51.719]             }
[13:36:51.719]         }
[13:36:51.719]     })
[13:36:51.719]     if (TRUE) {
[13:36:51.719]         base::sink(type = "output", split = FALSE)
[13:36:51.719]         if (TRUE) {
[13:36:51.719]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.719]         }
[13:36:51.719]         else {
[13:36:51.719]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.719]         }
[13:36:51.719]         base::close(...future.stdout)
[13:36:51.719]         ...future.stdout <- NULL
[13:36:51.719]     }
[13:36:51.719]     ...future.result$conditions <- ...future.conditions
[13:36:51.719]     ...future.result$finished <- base::Sys.time()
[13:36:51.719]     ...future.result
[13:36:51.719] }
[13:36:51.720] assign_globals() ...
[13:36:51.720] List of 1
[13:36:51.720]  $ x: list()
[13:36:51.720]  - attr(*, "where")=List of 1
[13:36:51.720]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.720]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.720]  - attr(*, "resolved")= logi TRUE
[13:36:51.720]  - attr(*, "total_size")= num 0
[13:36:51.720]  - attr(*, "already-done")= logi TRUE
[13:36:51.723] - copied ‘x’ to environment
[13:36:51.723] assign_globals() ... done
[13:36:51.723] plan(): Setting new future strategy stack:
[13:36:51.723] List of future strategies:
[13:36:51.723] 1. sequential:
[13:36:51.723]    - args: function (..., envir = parent.frame())
[13:36:51.723]    - tweaked: FALSE
[13:36:51.723]    - call: NULL
[13:36:51.723] plan(): nbrOfWorkers() = 1
[13:36:51.724] plan(): Setting new future strategy stack:
[13:36:51.724] List of future strategies:
[13:36:51.724] 1. sequential:
[13:36:51.724]    - args: function (..., envir = parent.frame())
[13:36:51.724]    - tweaked: FALSE
[13:36:51.724]    - call: plan(strategy)
[13:36:51.724] plan(): nbrOfWorkers() = 1
[13:36:51.724] SequentialFuture started (and completed)
[13:36:51.725] - Launch lazy future ... done
[13:36:51.725] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.725] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.725] Searching for globals...
[13:36:51.727] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.727] Searching for globals ... DONE
[13:36:51.727] Resolving globals: TRUE
[13:36:51.727] Resolving any globals that are futures ...
[13:36:51.728] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:51.728] Resolving any globals that are futures ... DONE
[13:36:51.728] Resolving futures part of globals (recursively) ...
[13:36:51.728] resolve() on list ...
[13:36:51.728]  recursive: 99
[13:36:51.728]  length: 1
[13:36:51.728]  elements: ‘x’
[13:36:51.729]  length: 0 (resolved future 1)
[13:36:51.729] resolve() on list ... DONE
[13:36:51.729] - globals: [1] ‘x’
[13:36:51.729] Resolving futures part of globals (recursively) ... DONE
[13:36:51.729] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.729] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.729] - globals: [1] ‘x’
[13:36:51.729] 
[13:36:51.730] getGlobalsAndPackages() ... DONE
[13:36:51.730] run() for ‘Future’ ...
[13:36:51.730] - state: ‘created’
[13:36:51.730] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.730] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.730] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.730]   - Field: ‘label’
[13:36:51.731]   - Field: ‘local’
[13:36:51.731]   - Field: ‘owner’
[13:36:51.731]   - Field: ‘envir’
[13:36:51.731]   - Field: ‘packages’
[13:36:51.731]   - Field: ‘gc’
[13:36:51.731]   - Field: ‘conditions’
[13:36:51.731]   - Field: ‘expr’
[13:36:51.731]   - Field: ‘uuid’
[13:36:51.731]   - Field: ‘seed’
[13:36:51.731]   - Field: ‘version’
[13:36:51.731]   - Field: ‘result’
[13:36:51.732]   - Field: ‘asynchronous’
[13:36:51.732]   - Field: ‘calls’
[13:36:51.732]   - Field: ‘globals’
[13:36:51.732]   - Field: ‘stdout’
[13:36:51.732]   - Field: ‘earlySignal’
[13:36:51.732]   - Field: ‘lazy’
[13:36:51.732]   - Field: ‘state’
[13:36:51.732] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.732] - Launch lazy future ...
[13:36:51.732] Packages needed by the future expression (n = 0): <none>
[13:36:51.732] Packages needed by future strategies (n = 0): <none>
[13:36:51.733] {
[13:36:51.733]     {
[13:36:51.733]         {
[13:36:51.733]             ...future.startTime <- base::Sys.time()
[13:36:51.733]             {
[13:36:51.733]                 {
[13:36:51.733]                   {
[13:36:51.733]                     base::local({
[13:36:51.733]                       has_future <- base::requireNamespace("future", 
[13:36:51.733]                         quietly = TRUE)
[13:36:51.733]                       if (has_future) {
[13:36:51.733]                         ns <- base::getNamespace("future")
[13:36:51.733]                         version <- ns[[".package"]][["version"]]
[13:36:51.733]                         if (is.null(version)) 
[13:36:51.733]                           version <- utils::packageVersion("future")
[13:36:51.733]                       }
[13:36:51.733]                       else {
[13:36:51.733]                         version <- NULL
[13:36:51.733]                       }
[13:36:51.733]                       if (!has_future || version < "1.8.0") {
[13:36:51.733]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.733]                           "", base::R.version$version.string), 
[13:36:51.733]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.733]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.733]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.733]                             "release", "version")], collapse = " "), 
[13:36:51.733]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.733]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.733]                           info)
[13:36:51.733]                         info <- base::paste(info, collapse = "; ")
[13:36:51.733]                         if (!has_future) {
[13:36:51.733]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.733]                             info)
[13:36:51.733]                         }
[13:36:51.733]                         else {
[13:36:51.733]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.733]                             info, version)
[13:36:51.733]                         }
[13:36:51.733]                         base::stop(msg)
[13:36:51.733]                       }
[13:36:51.733]                     })
[13:36:51.733]                   }
[13:36:51.733]                   ...future.strategy.old <- future::plan("list")
[13:36:51.733]                   options(future.plan = NULL)
[13:36:51.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.733]                 }
[13:36:51.733]                 ...future.workdir <- getwd()
[13:36:51.733]             }
[13:36:51.733]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.733]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.733]         }
[13:36:51.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.733]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.733]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.733]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.733]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.733]             base::names(...future.oldOptions))
[13:36:51.733]     }
[13:36:51.733]     if (FALSE) {
[13:36:51.733]     }
[13:36:51.733]     else {
[13:36:51.733]         if (TRUE) {
[13:36:51.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.733]                 open = "w")
[13:36:51.733]         }
[13:36:51.733]         else {
[13:36:51.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.733]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.733]         }
[13:36:51.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.733]             base::sink(type = "output", split = FALSE)
[13:36:51.733]             base::close(...future.stdout)
[13:36:51.733]         }, add = TRUE)
[13:36:51.733]     }
[13:36:51.733]     ...future.frame <- base::sys.nframe()
[13:36:51.733]     ...future.conditions <- base::list()
[13:36:51.733]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.733]     if (FALSE) {
[13:36:51.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.733]     }
[13:36:51.733]     ...future.result <- base::tryCatch({
[13:36:51.733]         base::withCallingHandlers({
[13:36:51.733]             ...future.value <- base::withVisible(base::local({
[13:36:51.733]                 x["a"] <- list(1)
[13:36:51.733]                 x
[13:36:51.733]             }))
[13:36:51.733]             future::FutureResult(value = ...future.value$value, 
[13:36:51.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.733]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.733]                     ...future.globalenv.names))
[13:36:51.733]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.733]         }, condition = base::local({
[13:36:51.733]             c <- base::c
[13:36:51.733]             inherits <- base::inherits
[13:36:51.733]             invokeRestart <- base::invokeRestart
[13:36:51.733]             length <- base::length
[13:36:51.733]             list <- base::list
[13:36:51.733]             seq.int <- base::seq.int
[13:36:51.733]             signalCondition <- base::signalCondition
[13:36:51.733]             sys.calls <- base::sys.calls
[13:36:51.733]             `[[` <- base::`[[`
[13:36:51.733]             `+` <- base::`+`
[13:36:51.733]             `<<-` <- base::`<<-`
[13:36:51.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.733]                   3L)]
[13:36:51.733]             }
[13:36:51.733]             function(cond) {
[13:36:51.733]                 is_error <- inherits(cond, "error")
[13:36:51.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.733]                   NULL)
[13:36:51.733]                 if (is_error) {
[13:36:51.733]                   sessionInformation <- function() {
[13:36:51.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.733]                       search = base::search(), system = base::Sys.info())
[13:36:51.733]                   }
[13:36:51.733]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.733]                     cond$call), session = sessionInformation(), 
[13:36:51.733]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.733]                   signalCondition(cond)
[13:36:51.733]                 }
[13:36:51.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.733]                 "immediateCondition"))) {
[13:36:51.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.733]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.733]                   if (TRUE && !signal) {
[13:36:51.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.733]                     {
[13:36:51.733]                       inherits <- base::inherits
[13:36:51.733]                       invokeRestart <- base::invokeRestart
[13:36:51.733]                       is.null <- base::is.null
[13:36:51.733]                       muffled <- FALSE
[13:36:51.733]                       if (inherits(cond, "message")) {
[13:36:51.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.733]                         if (muffled) 
[13:36:51.733]                           invokeRestart("muffleMessage")
[13:36:51.733]                       }
[13:36:51.733]                       else if (inherits(cond, "warning")) {
[13:36:51.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.733]                         if (muffled) 
[13:36:51.733]                           invokeRestart("muffleWarning")
[13:36:51.733]                       }
[13:36:51.733]                       else if (inherits(cond, "condition")) {
[13:36:51.733]                         if (!is.null(pattern)) {
[13:36:51.733]                           computeRestarts <- base::computeRestarts
[13:36:51.733]                           grepl <- base::grepl
[13:36:51.733]                           restarts <- computeRestarts(cond)
[13:36:51.733]                           for (restart in restarts) {
[13:36:51.733]                             name <- restart$name
[13:36:51.733]                             if (is.null(name)) 
[13:36:51.733]                               next
[13:36:51.733]                             if (!grepl(pattern, name)) 
[13:36:51.733]                               next
[13:36:51.733]                             invokeRestart(restart)
[13:36:51.733]                             muffled <- TRUE
[13:36:51.733]                             break
[13:36:51.733]                           }
[13:36:51.733]                         }
[13:36:51.733]                       }
[13:36:51.733]                       invisible(muffled)
[13:36:51.733]                     }
[13:36:51.733]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.733]                   }
[13:36:51.733]                 }
[13:36:51.733]                 else {
[13:36:51.733]                   if (TRUE) {
[13:36:51.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.733]                     {
[13:36:51.733]                       inherits <- base::inherits
[13:36:51.733]                       invokeRestart <- base::invokeRestart
[13:36:51.733]                       is.null <- base::is.null
[13:36:51.733]                       muffled <- FALSE
[13:36:51.733]                       if (inherits(cond, "message")) {
[13:36:51.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.733]                         if (muffled) 
[13:36:51.733]                           invokeRestart("muffleMessage")
[13:36:51.733]                       }
[13:36:51.733]                       else if (inherits(cond, "warning")) {
[13:36:51.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.733]                         if (muffled) 
[13:36:51.733]                           invokeRestart("muffleWarning")
[13:36:51.733]                       }
[13:36:51.733]                       else if (inherits(cond, "condition")) {
[13:36:51.733]                         if (!is.null(pattern)) {
[13:36:51.733]                           computeRestarts <- base::computeRestarts
[13:36:51.733]                           grepl <- base::grepl
[13:36:51.733]                           restarts <- computeRestarts(cond)
[13:36:51.733]                           for (restart in restarts) {
[13:36:51.733]                             name <- restart$name
[13:36:51.733]                             if (is.null(name)) 
[13:36:51.733]                               next
[13:36:51.733]                             if (!grepl(pattern, name)) 
[13:36:51.733]                               next
[13:36:51.733]                             invokeRestart(restart)
[13:36:51.733]                             muffled <- TRUE
[13:36:51.733]                             break
[13:36:51.733]                           }
[13:36:51.733]                         }
[13:36:51.733]                       }
[13:36:51.733]                       invisible(muffled)
[13:36:51.733]                     }
[13:36:51.733]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.733]                   }
[13:36:51.733]                 }
[13:36:51.733]             }
[13:36:51.733]         }))
[13:36:51.733]     }, error = function(ex) {
[13:36:51.733]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.733]                 ...future.rng), started = ...future.startTime, 
[13:36:51.733]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.733]             version = "1.8"), class = "FutureResult")
[13:36:51.733]     }, finally = {
[13:36:51.733]         if (!identical(...future.workdir, getwd())) 
[13:36:51.733]             setwd(...future.workdir)
[13:36:51.733]         {
[13:36:51.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.733]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.733]             }
[13:36:51.733]             base::options(...future.oldOptions)
[13:36:51.733]             if (.Platform$OS.type == "windows") {
[13:36:51.733]                 old_names <- names(...future.oldEnvVars)
[13:36:51.733]                 envs <- base::Sys.getenv()
[13:36:51.733]                 names <- names(envs)
[13:36:51.733]                 common <- intersect(names, old_names)
[13:36:51.733]                 added <- setdiff(names, old_names)
[13:36:51.733]                 removed <- setdiff(old_names, names)
[13:36:51.733]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.733]                   envs[common]]
[13:36:51.733]                 NAMES <- toupper(changed)
[13:36:51.733]                 args <- list()
[13:36:51.733]                 for (kk in seq_along(NAMES)) {
[13:36:51.733]                   name <- changed[[kk]]
[13:36:51.733]                   NAME <- NAMES[[kk]]
[13:36:51.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.733]                     next
[13:36:51.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.733]                 }
[13:36:51.733]                 NAMES <- toupper(added)
[13:36:51.733]                 for (kk in seq_along(NAMES)) {
[13:36:51.733]                   name <- added[[kk]]
[13:36:51.733]                   NAME <- NAMES[[kk]]
[13:36:51.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.733]                     next
[13:36:51.733]                   args[[name]] <- ""
[13:36:51.733]                 }
[13:36:51.733]                 NAMES <- toupper(removed)
[13:36:51.733]                 for (kk in seq_along(NAMES)) {
[13:36:51.733]                   name <- removed[[kk]]
[13:36:51.733]                   NAME <- NAMES[[kk]]
[13:36:51.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.733]                     next
[13:36:51.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.733]                 }
[13:36:51.733]                 if (length(args) > 0) 
[13:36:51.733]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.733]             }
[13:36:51.733]             else {
[13:36:51.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.733]             }
[13:36:51.733]             {
[13:36:51.733]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.733]                   0L) {
[13:36:51.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.733]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.733]                   base::options(opts)
[13:36:51.733]                 }
[13:36:51.733]                 {
[13:36:51.733]                   {
[13:36:51.733]                     NULL
[13:36:51.733]                     RNGkind("Mersenne-Twister")
[13:36:51.733]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.733]                       inherits = FALSE)
[13:36:51.733]                   }
[13:36:51.733]                   options(future.plan = NULL)
[13:36:51.733]                   if (is.na(NA_character_)) 
[13:36:51.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.733]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.733]                     .init = FALSE)
[13:36:51.733]                 }
[13:36:51.733]             }
[13:36:51.733]         }
[13:36:51.733]     })
[13:36:51.733]     if (TRUE) {
[13:36:51.733]         base::sink(type = "output", split = FALSE)
[13:36:51.733]         if (TRUE) {
[13:36:51.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.733]         }
[13:36:51.733]         else {
[13:36:51.733]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.733]         }
[13:36:51.733]         base::close(...future.stdout)
[13:36:51.733]         ...future.stdout <- NULL
[13:36:51.733]     }
[13:36:51.733]     ...future.result$conditions <- ...future.conditions
[13:36:51.733]     ...future.result$finished <- base::Sys.time()
[13:36:51.733]     ...future.result
[13:36:51.733] }
[13:36:51.734] assign_globals() ...
[13:36:51.734] List of 1
[13:36:51.734]  $ x: list()
[13:36:51.734]  - attr(*, "where")=List of 1
[13:36:51.734]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.734]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.734]  - attr(*, "resolved")= logi TRUE
[13:36:51.734]  - attr(*, "total_size")= num 0
[13:36:51.734]  - attr(*, "already-done")= logi TRUE
[13:36:51.737] - copied ‘x’ to environment
[13:36:51.737] assign_globals() ... done
[13:36:51.737] plan(): Setting new future strategy stack:
[13:36:51.737] List of future strategies:
[13:36:51.737] 1. sequential:
[13:36:51.737]    - args: function (..., envir = parent.frame())
[13:36:51.737]    - tweaked: FALSE
[13:36:51.737]    - call: NULL
[13:36:51.737] plan(): nbrOfWorkers() = 1
[13:36:51.738] plan(): Setting new future strategy stack:
[13:36:51.738] List of future strategies:
[13:36:51.738] 1. sequential:
[13:36:51.738]    - args: function (..., envir = parent.frame())
[13:36:51.738]    - tweaked: FALSE
[13:36:51.738]    - call: plan(strategy)
[13:36:51.738] plan(): nbrOfWorkers() = 1
[13:36:51.739] SequentialFuture started (and completed)
[13:36:51.739] - Launch lazy future ... done
[13:36:51.739] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.739] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.739] Searching for globals...
[13:36:51.742] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:51.742] Searching for globals ... DONE
[13:36:51.743] Resolving globals: TRUE
[13:36:51.743] Resolving any globals that are futures ...
[13:36:51.743] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:51.743] Resolving any globals that are futures ... DONE
[13:36:51.743] Resolving futures part of globals (recursively) ...
[13:36:51.743] resolve() on list ...
[13:36:51.744]  recursive: 99
[13:36:51.744]  length: 2
[13:36:51.744]  elements: ‘x’, ‘name’
[13:36:51.744]  length: 1 (resolved future 1)
[13:36:51.744]  length: 0 (resolved future 2)
[13:36:51.744] resolve() on list ... DONE
[13:36:51.744] - globals: [2] ‘x’, ‘name’
[13:36:51.744] Resolving futures part of globals (recursively) ... DONE
[13:36:51.744] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:51.745] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[13:36:51.745] - globals: [2] ‘x’, ‘name’
[13:36:51.745] 
[13:36:51.745] getGlobalsAndPackages() ... DONE
[13:36:51.745] run() for ‘Future’ ...
[13:36:51.745] - state: ‘created’
[13:36:51.745] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:51.746] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:51.746] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:51.746]   - Field: ‘label’
[13:36:51.746]   - Field: ‘local’
[13:36:51.746]   - Field: ‘owner’
[13:36:51.746]   - Field: ‘envir’
[13:36:51.746]   - Field: ‘packages’
[13:36:51.746]   - Field: ‘gc’
[13:36:51.746]   - Field: ‘conditions’
[13:36:51.747]   - Field: ‘expr’
[13:36:51.747]   - Field: ‘uuid’
[13:36:51.747]   - Field: ‘seed’
[13:36:51.747]   - Field: ‘version’
[13:36:51.747]   - Field: ‘result’
[13:36:51.747]   - Field: ‘asynchronous’
[13:36:51.747]   - Field: ‘calls’
[13:36:51.747]   - Field: ‘globals’
[13:36:51.747]   - Field: ‘stdout’
[13:36:51.747]   - Field: ‘earlySignal’
[13:36:51.747]   - Field: ‘lazy’
[13:36:51.747]   - Field: ‘state’
[13:36:51.748] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:51.748] - Launch lazy future ...
[13:36:51.748] Packages needed by the future expression (n = 0): <none>
[13:36:51.748] Packages needed by future strategies (n = 0): <none>
[13:36:51.748] {
[13:36:51.748]     {
[13:36:51.748]         {
[13:36:51.748]             ...future.startTime <- base::Sys.time()
[13:36:51.748]             {
[13:36:51.748]                 {
[13:36:51.748]                   {
[13:36:51.748]                     base::local({
[13:36:51.748]                       has_future <- base::requireNamespace("future", 
[13:36:51.748]                         quietly = TRUE)
[13:36:51.748]                       if (has_future) {
[13:36:51.748]                         ns <- base::getNamespace("future")
[13:36:51.748]                         version <- ns[[".package"]][["version"]]
[13:36:51.748]                         if (is.null(version)) 
[13:36:51.748]                           version <- utils::packageVersion("future")
[13:36:51.748]                       }
[13:36:51.748]                       else {
[13:36:51.748]                         version <- NULL
[13:36:51.748]                       }
[13:36:51.748]                       if (!has_future || version < "1.8.0") {
[13:36:51.748]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.748]                           "", base::R.version$version.string), 
[13:36:51.748]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:51.748]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.748]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.748]                             "release", "version")], collapse = " "), 
[13:36:51.748]                           hostname = base::Sys.info()[["nodename"]])
[13:36:51.748]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.748]                           info)
[13:36:51.748]                         info <- base::paste(info, collapse = "; ")
[13:36:51.748]                         if (!has_future) {
[13:36:51.748]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.748]                             info)
[13:36:51.748]                         }
[13:36:51.748]                         else {
[13:36:51.748]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.748]                             info, version)
[13:36:51.748]                         }
[13:36:51.748]                         base::stop(msg)
[13:36:51.748]                       }
[13:36:51.748]                     })
[13:36:51.748]                   }
[13:36:51.748]                   ...future.strategy.old <- future::plan("list")
[13:36:51.748]                   options(future.plan = NULL)
[13:36:51.748]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.748]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.748]                 }
[13:36:51.748]                 ...future.workdir <- getwd()
[13:36:51.748]             }
[13:36:51.748]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.748]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.748]         }
[13:36:51.748]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.748]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.748]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.748]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.748]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.748]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.748]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.748]             base::names(...future.oldOptions))
[13:36:51.748]     }
[13:36:51.748]     if (FALSE) {
[13:36:51.748]     }
[13:36:51.748]     else {
[13:36:51.748]         if (TRUE) {
[13:36:51.748]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.748]                 open = "w")
[13:36:51.748]         }
[13:36:51.748]         else {
[13:36:51.748]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.748]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.748]         }
[13:36:51.748]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.748]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.748]             base::sink(type = "output", split = FALSE)
[13:36:51.748]             base::close(...future.stdout)
[13:36:51.748]         }, add = TRUE)
[13:36:51.748]     }
[13:36:51.748]     ...future.frame <- base::sys.nframe()
[13:36:51.748]     ...future.conditions <- base::list()
[13:36:51.748]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.748]     if (FALSE) {
[13:36:51.748]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.748]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.748]     }
[13:36:51.748]     ...future.result <- base::tryCatch({
[13:36:51.748]         base::withCallingHandlers({
[13:36:51.748]             ...future.value <- base::withVisible(base::local({
[13:36:51.748]                 x[name] <- list(1)
[13:36:51.748]                 x
[13:36:51.748]             }))
[13:36:51.748]             future::FutureResult(value = ...future.value$value, 
[13:36:51.748]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.748]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.748]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.748]                     ...future.globalenv.names))
[13:36:51.748]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.748]         }, condition = base::local({
[13:36:51.748]             c <- base::c
[13:36:51.748]             inherits <- base::inherits
[13:36:51.748]             invokeRestart <- base::invokeRestart
[13:36:51.748]             length <- base::length
[13:36:51.748]             list <- base::list
[13:36:51.748]             seq.int <- base::seq.int
[13:36:51.748]             signalCondition <- base::signalCondition
[13:36:51.748]             sys.calls <- base::sys.calls
[13:36:51.748]             `[[` <- base::`[[`
[13:36:51.748]             `+` <- base::`+`
[13:36:51.748]             `<<-` <- base::`<<-`
[13:36:51.748]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.748]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.748]                   3L)]
[13:36:51.748]             }
[13:36:51.748]             function(cond) {
[13:36:51.748]                 is_error <- inherits(cond, "error")
[13:36:51.748]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.748]                   NULL)
[13:36:51.748]                 if (is_error) {
[13:36:51.748]                   sessionInformation <- function() {
[13:36:51.748]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.748]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.748]                       search = base::search(), system = base::Sys.info())
[13:36:51.748]                   }
[13:36:51.748]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.748]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.748]                     cond$call), session = sessionInformation(), 
[13:36:51.748]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.748]                   signalCondition(cond)
[13:36:51.748]                 }
[13:36:51.748]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.748]                 "immediateCondition"))) {
[13:36:51.748]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.748]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.748]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.748]                   if (TRUE && !signal) {
[13:36:51.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.748]                     {
[13:36:51.748]                       inherits <- base::inherits
[13:36:51.748]                       invokeRestart <- base::invokeRestart
[13:36:51.748]                       is.null <- base::is.null
[13:36:51.748]                       muffled <- FALSE
[13:36:51.748]                       if (inherits(cond, "message")) {
[13:36:51.748]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.748]                         if (muffled) 
[13:36:51.748]                           invokeRestart("muffleMessage")
[13:36:51.748]                       }
[13:36:51.748]                       else if (inherits(cond, "warning")) {
[13:36:51.748]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.748]                         if (muffled) 
[13:36:51.748]                           invokeRestart("muffleWarning")
[13:36:51.748]                       }
[13:36:51.748]                       else if (inherits(cond, "condition")) {
[13:36:51.748]                         if (!is.null(pattern)) {
[13:36:51.748]                           computeRestarts <- base::computeRestarts
[13:36:51.748]                           grepl <- base::grepl
[13:36:51.748]                           restarts <- computeRestarts(cond)
[13:36:51.748]                           for (restart in restarts) {
[13:36:51.748]                             name <- restart$name
[13:36:51.748]                             if (is.null(name)) 
[13:36:51.748]                               next
[13:36:51.748]                             if (!grepl(pattern, name)) 
[13:36:51.748]                               next
[13:36:51.748]                             invokeRestart(restart)
[13:36:51.748]                             muffled <- TRUE
[13:36:51.748]                             break
[13:36:51.748]                           }
[13:36:51.748]                         }
[13:36:51.748]                       }
[13:36:51.748]                       invisible(muffled)
[13:36:51.748]                     }
[13:36:51.748]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.748]                   }
[13:36:51.748]                 }
[13:36:51.748]                 else {
[13:36:51.748]                   if (TRUE) {
[13:36:51.748]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.748]                     {
[13:36:51.748]                       inherits <- base::inherits
[13:36:51.748]                       invokeRestart <- base::invokeRestart
[13:36:51.748]                       is.null <- base::is.null
[13:36:51.748]                       muffled <- FALSE
[13:36:51.748]                       if (inherits(cond, "message")) {
[13:36:51.748]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.748]                         if (muffled) 
[13:36:51.748]                           invokeRestart("muffleMessage")
[13:36:51.748]                       }
[13:36:51.748]                       else if (inherits(cond, "warning")) {
[13:36:51.748]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.748]                         if (muffled) 
[13:36:51.748]                           invokeRestart("muffleWarning")
[13:36:51.748]                       }
[13:36:51.748]                       else if (inherits(cond, "condition")) {
[13:36:51.748]                         if (!is.null(pattern)) {
[13:36:51.748]                           computeRestarts <- base::computeRestarts
[13:36:51.748]                           grepl <- base::grepl
[13:36:51.748]                           restarts <- computeRestarts(cond)
[13:36:51.748]                           for (restart in restarts) {
[13:36:51.748]                             name <- restart$name
[13:36:51.748]                             if (is.null(name)) 
[13:36:51.748]                               next
[13:36:51.748]                             if (!grepl(pattern, name)) 
[13:36:51.748]                               next
[13:36:51.748]                             invokeRestart(restart)
[13:36:51.748]                             muffled <- TRUE
[13:36:51.748]                             break
[13:36:51.748]                           }
[13:36:51.748]                         }
[13:36:51.748]                       }
[13:36:51.748]                       invisible(muffled)
[13:36:51.748]                     }
[13:36:51.748]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.748]                   }
[13:36:51.748]                 }
[13:36:51.748]             }
[13:36:51.748]         }))
[13:36:51.748]     }, error = function(ex) {
[13:36:51.748]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.748]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.748]                 ...future.rng), started = ...future.startTime, 
[13:36:51.748]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.748]             version = "1.8"), class = "FutureResult")
[13:36:51.748]     }, finally = {
[13:36:51.748]         if (!identical(...future.workdir, getwd())) 
[13:36:51.748]             setwd(...future.workdir)
[13:36:51.748]         {
[13:36:51.748]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.748]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.748]             }
[13:36:51.748]             base::options(...future.oldOptions)
[13:36:51.748]             if (.Platform$OS.type == "windows") {
[13:36:51.748]                 old_names <- names(...future.oldEnvVars)
[13:36:51.748]                 envs <- base::Sys.getenv()
[13:36:51.748]                 names <- names(envs)
[13:36:51.748]                 common <- intersect(names, old_names)
[13:36:51.748]                 added <- setdiff(names, old_names)
[13:36:51.748]                 removed <- setdiff(old_names, names)
[13:36:51.748]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.748]                   envs[common]]
[13:36:51.748]                 NAMES <- toupper(changed)
[13:36:51.748]                 args <- list()
[13:36:51.748]                 for (kk in seq_along(NAMES)) {
[13:36:51.748]                   name <- changed[[kk]]
[13:36:51.748]                   NAME <- NAMES[[kk]]
[13:36:51.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.748]                     next
[13:36:51.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.748]                 }
[13:36:51.748]                 NAMES <- toupper(added)
[13:36:51.748]                 for (kk in seq_along(NAMES)) {
[13:36:51.748]                   name <- added[[kk]]
[13:36:51.748]                   NAME <- NAMES[[kk]]
[13:36:51.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.748]                     next
[13:36:51.748]                   args[[name]] <- ""
[13:36:51.748]                 }
[13:36:51.748]                 NAMES <- toupper(removed)
[13:36:51.748]                 for (kk in seq_along(NAMES)) {
[13:36:51.748]                   name <- removed[[kk]]
[13:36:51.748]                   NAME <- NAMES[[kk]]
[13:36:51.748]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.748]                     next
[13:36:51.748]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.748]                 }
[13:36:51.748]                 if (length(args) > 0) 
[13:36:51.748]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.748]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.748]             }
[13:36:51.748]             else {
[13:36:51.748]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.748]             }
[13:36:51.748]             {
[13:36:51.748]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.748]                   0L) {
[13:36:51.748]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.748]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.748]                   base::options(opts)
[13:36:51.748]                 }
[13:36:51.748]                 {
[13:36:51.748]                   {
[13:36:51.748]                     NULL
[13:36:51.748]                     RNGkind("Mersenne-Twister")
[13:36:51.748]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:51.748]                       inherits = FALSE)
[13:36:51.748]                   }
[13:36:51.748]                   options(future.plan = NULL)
[13:36:51.748]                   if (is.na(NA_character_)) 
[13:36:51.748]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.748]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.748]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.748]                     .init = FALSE)
[13:36:51.748]                 }
[13:36:51.748]             }
[13:36:51.748]         }
[13:36:51.748]     })
[13:36:51.748]     if (TRUE) {
[13:36:51.748]         base::sink(type = "output", split = FALSE)
[13:36:51.748]         if (TRUE) {
[13:36:51.748]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.748]         }
[13:36:51.748]         else {
[13:36:51.748]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.748]         }
[13:36:51.748]         base::close(...future.stdout)
[13:36:51.748]         ...future.stdout <- NULL
[13:36:51.748]     }
[13:36:51.748]     ...future.result$conditions <- ...future.conditions
[13:36:51.748]     ...future.result$finished <- base::Sys.time()
[13:36:51.748]     ...future.result
[13:36:51.748] }
[13:36:51.750] assign_globals() ...
[13:36:51.750] List of 2
[13:36:51.750]  $ x   : list()
[13:36:51.750]  $ name: chr "a"
[13:36:51.750]  - attr(*, "where")=List of 2
[13:36:51.750]   ..$ x   :<environment: R_EmptyEnv> 
[13:36:51.750]   ..$ name:<environment: R_EmptyEnv> 
[13:36:51.750]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.750]  - attr(*, "resolved")= logi TRUE
[13:36:51.750]  - attr(*, "total_size")= num 112
[13:36:51.750]  - attr(*, "already-done")= logi TRUE
[13:36:51.752] - copied ‘x’ to environment
[13:36:51.753] - copied ‘name’ to environment
[13:36:51.753] assign_globals() ... done
[13:36:51.753] plan(): Setting new future strategy stack:
[13:36:51.753] List of future strategies:
[13:36:51.753] 1. sequential:
[13:36:51.753]    - args: function (..., envir = parent.frame())
[13:36:51.753]    - tweaked: FALSE
[13:36:51.753]    - call: NULL
[13:36:51.753] plan(): nbrOfWorkers() = 1
[13:36:51.754] plan(): Setting new future strategy stack:
[13:36:51.754] List of future strategies:
[13:36:51.754] 1. sequential:
[13:36:51.754]    - args: function (..., envir = parent.frame())
[13:36:51.754]    - tweaked: FALSE
[13:36:51.754]    - call: plan(strategy)
[13:36:51.754] plan(): nbrOfWorkers() = 1
[13:36:51.755] SequentialFuture started (and completed)
[13:36:51.755] - Launch lazy future ... done
[13:36:51.755] run() for ‘SequentialFuture’ ... done
$a
[1] 1

Testing with 1 cores ... DONE
Testing with 2 cores ...
availableCores(): 2
- plan('multicore') ...
[13:36:51.764] plan(): Setting new future strategy stack:
[13:36:51.764] List of future strategies:
[13:36:51.764] 1. multicore:
[13:36:51.764]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.764]    - tweaked: FALSE
[13:36:51.764]    - call: plan(strategy)
[13:36:51.767] plan(): nbrOfWorkers() = 2
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.768] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.768] Searching for globals...
[13:36:51.771] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.771] Searching for globals ... DONE
[13:36:51.771] Resolving globals: TRUE
[13:36:51.771] Resolving any globals that are futures ...
[13:36:51.771] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.772] Resolving any globals that are futures ... DONE
[13:36:51.772] Resolving futures part of globals (recursively) ...
[13:36:51.772] resolve() on list ...
[13:36:51.772]  recursive: 99
[13:36:51.772]  length: 1
[13:36:51.772]  elements: ‘x’
[13:36:51.773]  length: 0 (resolved future 1)
[13:36:51.773] resolve() on list ... DONE
[13:36:51.773] - globals: [1] ‘x’
[13:36:51.773] Resolving futures part of globals (recursively) ... DONE
[13:36:51.773] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.773] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.773] - globals: [1] ‘x’
[13:36:51.773] 
[13:36:51.774] getGlobalsAndPackages() ... DONE
[13:36:51.774] run() for ‘Future’ ...
[13:36:51.774] - state: ‘created’
[13:36:51.774] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.777] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.778] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.778]   - Field: ‘label’
[13:36:51.778]   - Field: ‘local’
[13:36:51.778]   - Field: ‘owner’
[13:36:51.778]   - Field: ‘envir’
[13:36:51.778]   - Field: ‘workers’
[13:36:51.778]   - Field: ‘packages’
[13:36:51.778]   - Field: ‘gc’
[13:36:51.778]   - Field: ‘job’
[13:36:51.778]   - Field: ‘conditions’
[13:36:51.779]   - Field: ‘expr’
[13:36:51.779]   - Field: ‘uuid’
[13:36:51.779]   - Field: ‘seed’
[13:36:51.779]   - Field: ‘version’
[13:36:51.779]   - Field: ‘result’
[13:36:51.779]   - Field: ‘asynchronous’
[13:36:51.779]   - Field: ‘calls’
[13:36:51.779]   - Field: ‘globals’
[13:36:51.779]   - Field: ‘stdout’
[13:36:51.779]   - Field: ‘earlySignal’
[13:36:51.779]   - Field: ‘lazy’
[13:36:51.779]   - Field: ‘state’
[13:36:51.780] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.780] - Launch lazy future ...
[13:36:51.781] Packages needed by the future expression (n = 0): <none>
[13:36:51.781] Packages needed by future strategies (n = 0): <none>
[13:36:51.781] {
[13:36:51.781]     {
[13:36:51.781]         {
[13:36:51.781]             ...future.startTime <- base::Sys.time()
[13:36:51.781]             {
[13:36:51.781]                 {
[13:36:51.781]                   {
[13:36:51.781]                     {
[13:36:51.781]                       base::local({
[13:36:51.781]                         has_future <- base::requireNamespace("future", 
[13:36:51.781]                           quietly = TRUE)
[13:36:51.781]                         if (has_future) {
[13:36:51.781]                           ns <- base::getNamespace("future")
[13:36:51.781]                           version <- ns[[".package"]][["version"]]
[13:36:51.781]                           if (is.null(version)) 
[13:36:51.781]                             version <- utils::packageVersion("future")
[13:36:51.781]                         }
[13:36:51.781]                         else {
[13:36:51.781]                           version <- NULL
[13:36:51.781]                         }
[13:36:51.781]                         if (!has_future || version < "1.8.0") {
[13:36:51.781]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.781]                             "", base::R.version$version.string), 
[13:36:51.781]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.781]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.781]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.781]                               "release", "version")], collapse = " "), 
[13:36:51.781]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.781]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.781]                             info)
[13:36:51.781]                           info <- base::paste(info, collapse = "; ")
[13:36:51.781]                           if (!has_future) {
[13:36:51.781]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.781]                               info)
[13:36:51.781]                           }
[13:36:51.781]                           else {
[13:36:51.781]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.781]                               info, version)
[13:36:51.781]                           }
[13:36:51.781]                           base::stop(msg)
[13:36:51.781]                         }
[13:36:51.781]                       })
[13:36:51.781]                     }
[13:36:51.781]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.781]                     base::options(mc.cores = 1L)
[13:36:51.781]                   }
[13:36:51.781]                   ...future.strategy.old <- future::plan("list")
[13:36:51.781]                   options(future.plan = NULL)
[13:36:51.781]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.781]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.781]                 }
[13:36:51.781]                 ...future.workdir <- getwd()
[13:36:51.781]             }
[13:36:51.781]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.781]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.781]         }
[13:36:51.781]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.781]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.781]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.781]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.781]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.781]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.781]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.781]             base::names(...future.oldOptions))
[13:36:51.781]     }
[13:36:51.781]     if (FALSE) {
[13:36:51.781]     }
[13:36:51.781]     else {
[13:36:51.781]         if (TRUE) {
[13:36:51.781]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.781]                 open = "w")
[13:36:51.781]         }
[13:36:51.781]         else {
[13:36:51.781]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.781]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.781]         }
[13:36:51.781]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.781]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.781]             base::sink(type = "output", split = FALSE)
[13:36:51.781]             base::close(...future.stdout)
[13:36:51.781]         }, add = TRUE)
[13:36:51.781]     }
[13:36:51.781]     ...future.frame <- base::sys.nframe()
[13:36:51.781]     ...future.conditions <- base::list()
[13:36:51.781]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.781]     if (FALSE) {
[13:36:51.781]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.781]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.781]     }
[13:36:51.781]     ...future.result <- base::tryCatch({
[13:36:51.781]         base::withCallingHandlers({
[13:36:51.781]             ...future.value <- base::withVisible(base::local({
[13:36:51.781]                 withCallingHandlers({
[13:36:51.781]                   {
[13:36:51.781]                     x$a <- 1
[13:36:51.781]                     x
[13:36:51.781]                   }
[13:36:51.781]                 }, immediateCondition = function(cond) {
[13:36:51.781]                   save_rds <- function (object, pathname, ...) 
[13:36:51.781]                   {
[13:36:51.781]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.781]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.781]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.781]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.781]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.781]                         fi_tmp[["mtime"]])
[13:36:51.781]                     }
[13:36:51.781]                     tryCatch({
[13:36:51.781]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.781]                     }, error = function(ex) {
[13:36:51.781]                       msg <- conditionMessage(ex)
[13:36:51.781]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.781]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.781]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.781]                         fi_tmp[["mtime"]], msg)
[13:36:51.781]                       ex$message <- msg
[13:36:51.781]                       stop(ex)
[13:36:51.781]                     })
[13:36:51.781]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.781]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.781]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.781]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.781]                       fi <- file.info(pathname)
[13:36:51.781]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.781]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.781]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.781]                         fi[["size"]], fi[["mtime"]])
[13:36:51.781]                       stop(msg)
[13:36:51.781]                     }
[13:36:51.781]                     invisible(pathname)
[13:36:51.781]                   }
[13:36:51.781]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.781]                     rootPath = tempdir()) 
[13:36:51.781]                   {
[13:36:51.781]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.781]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.781]                       tmpdir = path, fileext = ".rds")
[13:36:51.781]                     save_rds(obj, file)
[13:36:51.781]                   }
[13:36:51.781]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.781]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.781]                   {
[13:36:51.781]                     inherits <- base::inherits
[13:36:51.781]                     invokeRestart <- base::invokeRestart
[13:36:51.781]                     is.null <- base::is.null
[13:36:51.781]                     muffled <- FALSE
[13:36:51.781]                     if (inherits(cond, "message")) {
[13:36:51.781]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.781]                       if (muffled) 
[13:36:51.781]                         invokeRestart("muffleMessage")
[13:36:51.781]                     }
[13:36:51.781]                     else if (inherits(cond, "warning")) {
[13:36:51.781]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.781]                       if (muffled) 
[13:36:51.781]                         invokeRestart("muffleWarning")
[13:36:51.781]                     }
[13:36:51.781]                     else if (inherits(cond, "condition")) {
[13:36:51.781]                       if (!is.null(pattern)) {
[13:36:51.781]                         computeRestarts <- base::computeRestarts
[13:36:51.781]                         grepl <- base::grepl
[13:36:51.781]                         restarts <- computeRestarts(cond)
[13:36:51.781]                         for (restart in restarts) {
[13:36:51.781]                           name <- restart$name
[13:36:51.781]                           if (is.null(name)) 
[13:36:51.781]                             next
[13:36:51.781]                           if (!grepl(pattern, name)) 
[13:36:51.781]                             next
[13:36:51.781]                           invokeRestart(restart)
[13:36:51.781]                           muffled <- TRUE
[13:36:51.781]                           break
[13:36:51.781]                         }
[13:36:51.781]                       }
[13:36:51.781]                     }
[13:36:51.781]                     invisible(muffled)
[13:36:51.781]                   }
[13:36:51.781]                   muffleCondition(cond)
[13:36:51.781]                 })
[13:36:51.781]             }))
[13:36:51.781]             future::FutureResult(value = ...future.value$value, 
[13:36:51.781]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.781]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.781]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.781]                     ...future.globalenv.names))
[13:36:51.781]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.781]         }, condition = base::local({
[13:36:51.781]             c <- base::c
[13:36:51.781]             inherits <- base::inherits
[13:36:51.781]             invokeRestart <- base::invokeRestart
[13:36:51.781]             length <- base::length
[13:36:51.781]             list <- base::list
[13:36:51.781]             seq.int <- base::seq.int
[13:36:51.781]             signalCondition <- base::signalCondition
[13:36:51.781]             sys.calls <- base::sys.calls
[13:36:51.781]             `[[` <- base::`[[`
[13:36:51.781]             `+` <- base::`+`
[13:36:51.781]             `<<-` <- base::`<<-`
[13:36:51.781]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.781]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.781]                   3L)]
[13:36:51.781]             }
[13:36:51.781]             function(cond) {
[13:36:51.781]                 is_error <- inherits(cond, "error")
[13:36:51.781]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.781]                   NULL)
[13:36:51.781]                 if (is_error) {
[13:36:51.781]                   sessionInformation <- function() {
[13:36:51.781]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.781]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.781]                       search = base::search(), system = base::Sys.info())
[13:36:51.781]                   }
[13:36:51.781]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.781]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.781]                     cond$call), session = sessionInformation(), 
[13:36:51.781]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.781]                   signalCondition(cond)
[13:36:51.781]                 }
[13:36:51.781]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.781]                 "immediateCondition"))) {
[13:36:51.781]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.781]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.781]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.781]                   if (TRUE && !signal) {
[13:36:51.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.781]                     {
[13:36:51.781]                       inherits <- base::inherits
[13:36:51.781]                       invokeRestart <- base::invokeRestart
[13:36:51.781]                       is.null <- base::is.null
[13:36:51.781]                       muffled <- FALSE
[13:36:51.781]                       if (inherits(cond, "message")) {
[13:36:51.781]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.781]                         if (muffled) 
[13:36:51.781]                           invokeRestart("muffleMessage")
[13:36:51.781]                       }
[13:36:51.781]                       else if (inherits(cond, "warning")) {
[13:36:51.781]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.781]                         if (muffled) 
[13:36:51.781]                           invokeRestart("muffleWarning")
[13:36:51.781]                       }
[13:36:51.781]                       else if (inherits(cond, "condition")) {
[13:36:51.781]                         if (!is.null(pattern)) {
[13:36:51.781]                           computeRestarts <- base::computeRestarts
[13:36:51.781]                           grepl <- base::grepl
[13:36:51.781]                           restarts <- computeRestarts(cond)
[13:36:51.781]                           for (restart in restarts) {
[13:36:51.781]                             name <- restart$name
[13:36:51.781]                             if (is.null(name)) 
[13:36:51.781]                               next
[13:36:51.781]                             if (!grepl(pattern, name)) 
[13:36:51.781]                               next
[13:36:51.781]                             invokeRestart(restart)
[13:36:51.781]                             muffled <- TRUE
[13:36:51.781]                             break
[13:36:51.781]                           }
[13:36:51.781]                         }
[13:36:51.781]                       }
[13:36:51.781]                       invisible(muffled)
[13:36:51.781]                     }
[13:36:51.781]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.781]                   }
[13:36:51.781]                 }
[13:36:51.781]                 else {
[13:36:51.781]                   if (TRUE) {
[13:36:51.781]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.781]                     {
[13:36:51.781]                       inherits <- base::inherits
[13:36:51.781]                       invokeRestart <- base::invokeRestart
[13:36:51.781]                       is.null <- base::is.null
[13:36:51.781]                       muffled <- FALSE
[13:36:51.781]                       if (inherits(cond, "message")) {
[13:36:51.781]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.781]                         if (muffled) 
[13:36:51.781]                           invokeRestart("muffleMessage")
[13:36:51.781]                       }
[13:36:51.781]                       else if (inherits(cond, "warning")) {
[13:36:51.781]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.781]                         if (muffled) 
[13:36:51.781]                           invokeRestart("muffleWarning")
[13:36:51.781]                       }
[13:36:51.781]                       else if (inherits(cond, "condition")) {
[13:36:51.781]                         if (!is.null(pattern)) {
[13:36:51.781]                           computeRestarts <- base::computeRestarts
[13:36:51.781]                           grepl <- base::grepl
[13:36:51.781]                           restarts <- computeRestarts(cond)
[13:36:51.781]                           for (restart in restarts) {
[13:36:51.781]                             name <- restart$name
[13:36:51.781]                             if (is.null(name)) 
[13:36:51.781]                               next
[13:36:51.781]                             if (!grepl(pattern, name)) 
[13:36:51.781]                               next
[13:36:51.781]                             invokeRestart(restart)
[13:36:51.781]                             muffled <- TRUE
[13:36:51.781]                             break
[13:36:51.781]                           }
[13:36:51.781]                         }
[13:36:51.781]                       }
[13:36:51.781]                       invisible(muffled)
[13:36:51.781]                     }
[13:36:51.781]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.781]                   }
[13:36:51.781]                 }
[13:36:51.781]             }
[13:36:51.781]         }))
[13:36:51.781]     }, error = function(ex) {
[13:36:51.781]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.781]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.781]                 ...future.rng), started = ...future.startTime, 
[13:36:51.781]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.781]             version = "1.8"), class = "FutureResult")
[13:36:51.781]     }, finally = {
[13:36:51.781]         if (!identical(...future.workdir, getwd())) 
[13:36:51.781]             setwd(...future.workdir)
[13:36:51.781]         {
[13:36:51.781]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.781]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.781]             }
[13:36:51.781]             base::options(...future.oldOptions)
[13:36:51.781]             if (.Platform$OS.type == "windows") {
[13:36:51.781]                 old_names <- names(...future.oldEnvVars)
[13:36:51.781]                 envs <- base::Sys.getenv()
[13:36:51.781]                 names <- names(envs)
[13:36:51.781]                 common <- intersect(names, old_names)
[13:36:51.781]                 added <- setdiff(names, old_names)
[13:36:51.781]                 removed <- setdiff(old_names, names)
[13:36:51.781]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.781]                   envs[common]]
[13:36:51.781]                 NAMES <- toupper(changed)
[13:36:51.781]                 args <- list()
[13:36:51.781]                 for (kk in seq_along(NAMES)) {
[13:36:51.781]                   name <- changed[[kk]]
[13:36:51.781]                   NAME <- NAMES[[kk]]
[13:36:51.781]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.781]                     next
[13:36:51.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.781]                 }
[13:36:51.781]                 NAMES <- toupper(added)
[13:36:51.781]                 for (kk in seq_along(NAMES)) {
[13:36:51.781]                   name <- added[[kk]]
[13:36:51.781]                   NAME <- NAMES[[kk]]
[13:36:51.781]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.781]                     next
[13:36:51.781]                   args[[name]] <- ""
[13:36:51.781]                 }
[13:36:51.781]                 NAMES <- toupper(removed)
[13:36:51.781]                 for (kk in seq_along(NAMES)) {
[13:36:51.781]                   name <- removed[[kk]]
[13:36:51.781]                   NAME <- NAMES[[kk]]
[13:36:51.781]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.781]                     next
[13:36:51.781]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.781]                 }
[13:36:51.781]                 if (length(args) > 0) 
[13:36:51.781]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.781]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.781]             }
[13:36:51.781]             else {
[13:36:51.781]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.781]             }
[13:36:51.781]             {
[13:36:51.781]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.781]                   0L) {
[13:36:51.781]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.781]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.781]                   base::options(opts)
[13:36:51.781]                 }
[13:36:51.781]                 {
[13:36:51.781]                   {
[13:36:51.781]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.781]                     NULL
[13:36:51.781]                   }
[13:36:51.781]                   options(future.plan = NULL)
[13:36:51.781]                   if (is.na(NA_character_)) 
[13:36:51.781]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.781]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.781]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.781]                     .init = FALSE)
[13:36:51.781]                 }
[13:36:51.781]             }
[13:36:51.781]         }
[13:36:51.781]     })
[13:36:51.781]     if (TRUE) {
[13:36:51.781]         base::sink(type = "output", split = FALSE)
[13:36:51.781]         if (TRUE) {
[13:36:51.781]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.781]         }
[13:36:51.781]         else {
[13:36:51.781]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.781]         }
[13:36:51.781]         base::close(...future.stdout)
[13:36:51.781]         ...future.stdout <- NULL
[13:36:51.781]     }
[13:36:51.781]     ...future.result$conditions <- ...future.conditions
[13:36:51.781]     ...future.result$finished <- base::Sys.time()
[13:36:51.781]     ...future.result
[13:36:51.781] }
[13:36:51.783] assign_globals() ...
[13:36:51.783] List of 1
[13:36:51.783]  $ x: list()
[13:36:51.783]  - attr(*, "where")=List of 1
[13:36:51.783]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.783]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.783]  - attr(*, "resolved")= logi TRUE
[13:36:51.783]  - attr(*, "total_size")= num 0
[13:36:51.783]  - attr(*, "already-done")= logi TRUE
[13:36:51.785] - copied ‘x’ to environment
[13:36:51.786] assign_globals() ... done
[13:36:51.786] requestCore(): workers = 2
[13:36:51.789] MulticoreFuture started
[13:36:51.789] - Launch lazy future ... done
[13:36:51.789] run() for ‘MulticoreFuture’ ... done
[13:36:51.789] plan(): Setting new future strategy stack:
[13:36:51.789] List of future strategies:
[13:36:51.789] 1. sequential:
[13:36:51.789]    - args: function (..., envir = parent.frame())
[13:36:51.789]    - tweaked: FALSE
[13:36:51.789]    - call: NULL
[13:36:51.790] result() for MulticoreFuture ...
[13:36:51.790] plan(): nbrOfWorkers() = 1
[13:36:51.792] plan(): Setting new future strategy stack:
[13:36:51.792] List of future strategies:
[13:36:51.792] 1. multicore:
[13:36:51.792]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.792]    - tweaked: FALSE
[13:36:51.792]    - call: plan(strategy)
[13:36:51.797] plan(): nbrOfWorkers() = 2
[13:36:51.802] result() for MulticoreFuture ...
[13:36:51.802] result() for MulticoreFuture ... done
[13:36:51.802] result() for MulticoreFuture ... done
[13:36:51.802] result() for MulticoreFuture ...
[13:36:51.802] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.803] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.803] Searching for globals...
[13:36:51.805] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.806] Searching for globals ... DONE
[13:36:51.806] Resolving globals: TRUE
[13:36:51.806] Resolving any globals that are futures ...
[13:36:51.806] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.806] Resolving any globals that are futures ... DONE
[13:36:51.807] Resolving futures part of globals (recursively) ...
[13:36:51.807] resolve() on list ...
[13:36:51.807]  recursive: 99
[13:36:51.807]  length: 1
[13:36:51.807]  elements: ‘x’
[13:36:51.807]  length: 0 (resolved future 1)
[13:36:51.807] resolve() on list ... DONE
[13:36:51.808] - globals: [1] ‘x’
[13:36:51.808] Resolving futures part of globals (recursively) ... DONE
[13:36:51.808] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.808] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.808] - globals: [1] ‘x’
[13:36:51.809] 
[13:36:51.809] getGlobalsAndPackages() ... DONE
[13:36:51.809] run() for ‘Future’ ...
[13:36:51.809] - state: ‘created’
[13:36:51.809] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.815] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.816] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.816]   - Field: ‘label’
[13:36:51.816]   - Field: ‘local’
[13:36:51.816]   - Field: ‘owner’
[13:36:51.816]   - Field: ‘envir’
[13:36:51.816]   - Field: ‘workers’
[13:36:51.817]   - Field: ‘packages’
[13:36:51.817]   - Field: ‘gc’
[13:36:51.817]   - Field: ‘job’
[13:36:51.817]   - Field: ‘conditions’
[13:36:51.817]   - Field: ‘expr’
[13:36:51.817]   - Field: ‘uuid’
[13:36:51.817]   - Field: ‘seed’
[13:36:51.817]   - Field: ‘version’
[13:36:51.817]   - Field: ‘result’
[13:36:51.818]   - Field: ‘asynchronous’
[13:36:51.818]   - Field: ‘calls’
[13:36:51.818]   - Field: ‘globals’
[13:36:51.818]   - Field: ‘stdout’
[13:36:51.818]   - Field: ‘earlySignal’
[13:36:51.818]   - Field: ‘lazy’
[13:36:51.818]   - Field: ‘state’
[13:36:51.818] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.819] - Launch lazy future ...
[13:36:51.819] Packages needed by the future expression (n = 0): <none>
[13:36:51.819] Packages needed by future strategies (n = 0): <none>
[13:36:51.819] {
[13:36:51.819]     {
[13:36:51.819]         {
[13:36:51.819]             ...future.startTime <- base::Sys.time()
[13:36:51.819]             {
[13:36:51.819]                 {
[13:36:51.819]                   {
[13:36:51.819]                     {
[13:36:51.819]                       base::local({
[13:36:51.819]                         has_future <- base::requireNamespace("future", 
[13:36:51.819]                           quietly = TRUE)
[13:36:51.819]                         if (has_future) {
[13:36:51.819]                           ns <- base::getNamespace("future")
[13:36:51.819]                           version <- ns[[".package"]][["version"]]
[13:36:51.819]                           if (is.null(version)) 
[13:36:51.819]                             version <- utils::packageVersion("future")
[13:36:51.819]                         }
[13:36:51.819]                         else {
[13:36:51.819]                           version <- NULL
[13:36:51.819]                         }
[13:36:51.819]                         if (!has_future || version < "1.8.0") {
[13:36:51.819]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.819]                             "", base::R.version$version.string), 
[13:36:51.819]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.819]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.819]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.819]                               "release", "version")], collapse = " "), 
[13:36:51.819]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.819]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.819]                             info)
[13:36:51.819]                           info <- base::paste(info, collapse = "; ")
[13:36:51.819]                           if (!has_future) {
[13:36:51.819]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.819]                               info)
[13:36:51.819]                           }
[13:36:51.819]                           else {
[13:36:51.819]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.819]                               info, version)
[13:36:51.819]                           }
[13:36:51.819]                           base::stop(msg)
[13:36:51.819]                         }
[13:36:51.819]                       })
[13:36:51.819]                     }
[13:36:51.819]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.819]                     base::options(mc.cores = 1L)
[13:36:51.819]                   }
[13:36:51.819]                   ...future.strategy.old <- future::plan("list")
[13:36:51.819]                   options(future.plan = NULL)
[13:36:51.819]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.819]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.819]                 }
[13:36:51.819]                 ...future.workdir <- getwd()
[13:36:51.819]             }
[13:36:51.819]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.819]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.819]         }
[13:36:51.819]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.819]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.819]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.819]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.819]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.819]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.819]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.819]             base::names(...future.oldOptions))
[13:36:51.819]     }
[13:36:51.819]     if (FALSE) {
[13:36:51.819]     }
[13:36:51.819]     else {
[13:36:51.819]         if (TRUE) {
[13:36:51.819]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.819]                 open = "w")
[13:36:51.819]         }
[13:36:51.819]         else {
[13:36:51.819]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.819]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.819]         }
[13:36:51.819]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.819]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.819]             base::sink(type = "output", split = FALSE)
[13:36:51.819]             base::close(...future.stdout)
[13:36:51.819]         }, add = TRUE)
[13:36:51.819]     }
[13:36:51.819]     ...future.frame <- base::sys.nframe()
[13:36:51.819]     ...future.conditions <- base::list()
[13:36:51.819]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.819]     if (FALSE) {
[13:36:51.819]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.819]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.819]     }
[13:36:51.819]     ...future.result <- base::tryCatch({
[13:36:51.819]         base::withCallingHandlers({
[13:36:51.819]             ...future.value <- base::withVisible(base::local({
[13:36:51.819]                 withCallingHandlers({
[13:36:51.819]                   {
[13:36:51.819]                     x$a <- 1
[13:36:51.819]                     x
[13:36:51.819]                   }
[13:36:51.819]                 }, immediateCondition = function(cond) {
[13:36:51.819]                   save_rds <- function (object, pathname, ...) 
[13:36:51.819]                   {
[13:36:51.819]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.819]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.819]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.819]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.819]                         fi_tmp[["mtime"]])
[13:36:51.819]                     }
[13:36:51.819]                     tryCatch({
[13:36:51.819]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.819]                     }, error = function(ex) {
[13:36:51.819]                       msg <- conditionMessage(ex)
[13:36:51.819]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.819]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.819]                         fi_tmp[["mtime"]], msg)
[13:36:51.819]                       ex$message <- msg
[13:36:51.819]                       stop(ex)
[13:36:51.819]                     })
[13:36:51.819]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.819]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.819]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.819]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.819]                       fi <- file.info(pathname)
[13:36:51.819]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.819]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.819]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.819]                         fi[["size"]], fi[["mtime"]])
[13:36:51.819]                       stop(msg)
[13:36:51.819]                     }
[13:36:51.819]                     invisible(pathname)
[13:36:51.819]                   }
[13:36:51.819]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.819]                     rootPath = tempdir()) 
[13:36:51.819]                   {
[13:36:51.819]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.819]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.819]                       tmpdir = path, fileext = ".rds")
[13:36:51.819]                     save_rds(obj, file)
[13:36:51.819]                   }
[13:36:51.819]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.819]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.819]                   {
[13:36:51.819]                     inherits <- base::inherits
[13:36:51.819]                     invokeRestart <- base::invokeRestart
[13:36:51.819]                     is.null <- base::is.null
[13:36:51.819]                     muffled <- FALSE
[13:36:51.819]                     if (inherits(cond, "message")) {
[13:36:51.819]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.819]                       if (muffled) 
[13:36:51.819]                         invokeRestart("muffleMessage")
[13:36:51.819]                     }
[13:36:51.819]                     else if (inherits(cond, "warning")) {
[13:36:51.819]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.819]                       if (muffled) 
[13:36:51.819]                         invokeRestart("muffleWarning")
[13:36:51.819]                     }
[13:36:51.819]                     else if (inherits(cond, "condition")) {
[13:36:51.819]                       if (!is.null(pattern)) {
[13:36:51.819]                         computeRestarts <- base::computeRestarts
[13:36:51.819]                         grepl <- base::grepl
[13:36:51.819]                         restarts <- computeRestarts(cond)
[13:36:51.819]                         for (restart in restarts) {
[13:36:51.819]                           name <- restart$name
[13:36:51.819]                           if (is.null(name)) 
[13:36:51.819]                             next
[13:36:51.819]                           if (!grepl(pattern, name)) 
[13:36:51.819]                             next
[13:36:51.819]                           invokeRestart(restart)
[13:36:51.819]                           muffled <- TRUE
[13:36:51.819]                           break
[13:36:51.819]                         }
[13:36:51.819]                       }
[13:36:51.819]                     }
[13:36:51.819]                     invisible(muffled)
[13:36:51.819]                   }
[13:36:51.819]                   muffleCondition(cond)
[13:36:51.819]                 })
[13:36:51.819]             }))
[13:36:51.819]             future::FutureResult(value = ...future.value$value, 
[13:36:51.819]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.819]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.819]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.819]                     ...future.globalenv.names))
[13:36:51.819]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.819]         }, condition = base::local({
[13:36:51.819]             c <- base::c
[13:36:51.819]             inherits <- base::inherits
[13:36:51.819]             invokeRestart <- base::invokeRestart
[13:36:51.819]             length <- base::length
[13:36:51.819]             list <- base::list
[13:36:51.819]             seq.int <- base::seq.int
[13:36:51.819]             signalCondition <- base::signalCondition
[13:36:51.819]             sys.calls <- base::sys.calls
[13:36:51.819]             `[[` <- base::`[[`
[13:36:51.819]             `+` <- base::`+`
[13:36:51.819]             `<<-` <- base::`<<-`
[13:36:51.819]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.819]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.819]                   3L)]
[13:36:51.819]             }
[13:36:51.819]             function(cond) {
[13:36:51.819]                 is_error <- inherits(cond, "error")
[13:36:51.819]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.819]                   NULL)
[13:36:51.819]                 if (is_error) {
[13:36:51.819]                   sessionInformation <- function() {
[13:36:51.819]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.819]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.819]                       search = base::search(), system = base::Sys.info())
[13:36:51.819]                   }
[13:36:51.819]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.819]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.819]                     cond$call), session = sessionInformation(), 
[13:36:51.819]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.819]                   signalCondition(cond)
[13:36:51.819]                 }
[13:36:51.819]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.819]                 "immediateCondition"))) {
[13:36:51.819]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.819]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.819]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.819]                   if (TRUE && !signal) {
[13:36:51.819]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.819]                     {
[13:36:51.819]                       inherits <- base::inherits
[13:36:51.819]                       invokeRestart <- base::invokeRestart
[13:36:51.819]                       is.null <- base::is.null
[13:36:51.819]                       muffled <- FALSE
[13:36:51.819]                       if (inherits(cond, "message")) {
[13:36:51.819]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.819]                         if (muffled) 
[13:36:51.819]                           invokeRestart("muffleMessage")
[13:36:51.819]                       }
[13:36:51.819]                       else if (inherits(cond, "warning")) {
[13:36:51.819]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.819]                         if (muffled) 
[13:36:51.819]                           invokeRestart("muffleWarning")
[13:36:51.819]                       }
[13:36:51.819]                       else if (inherits(cond, "condition")) {
[13:36:51.819]                         if (!is.null(pattern)) {
[13:36:51.819]                           computeRestarts <- base::computeRestarts
[13:36:51.819]                           grepl <- base::grepl
[13:36:51.819]                           restarts <- computeRestarts(cond)
[13:36:51.819]                           for (restart in restarts) {
[13:36:51.819]                             name <- restart$name
[13:36:51.819]                             if (is.null(name)) 
[13:36:51.819]                               next
[13:36:51.819]                             if (!grepl(pattern, name)) 
[13:36:51.819]                               next
[13:36:51.819]                             invokeRestart(restart)
[13:36:51.819]                             muffled <- TRUE
[13:36:51.819]                             break
[13:36:51.819]                           }
[13:36:51.819]                         }
[13:36:51.819]                       }
[13:36:51.819]                       invisible(muffled)
[13:36:51.819]                     }
[13:36:51.819]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.819]                   }
[13:36:51.819]                 }
[13:36:51.819]                 else {
[13:36:51.819]                   if (TRUE) {
[13:36:51.819]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.819]                     {
[13:36:51.819]                       inherits <- base::inherits
[13:36:51.819]                       invokeRestart <- base::invokeRestart
[13:36:51.819]                       is.null <- base::is.null
[13:36:51.819]                       muffled <- FALSE
[13:36:51.819]                       if (inherits(cond, "message")) {
[13:36:51.819]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.819]                         if (muffled) 
[13:36:51.819]                           invokeRestart("muffleMessage")
[13:36:51.819]                       }
[13:36:51.819]                       else if (inherits(cond, "warning")) {
[13:36:51.819]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.819]                         if (muffled) 
[13:36:51.819]                           invokeRestart("muffleWarning")
[13:36:51.819]                       }
[13:36:51.819]                       else if (inherits(cond, "condition")) {
[13:36:51.819]                         if (!is.null(pattern)) {
[13:36:51.819]                           computeRestarts <- base::computeRestarts
[13:36:51.819]                           grepl <- base::grepl
[13:36:51.819]                           restarts <- computeRestarts(cond)
[13:36:51.819]                           for (restart in restarts) {
[13:36:51.819]                             name <- restart$name
[13:36:51.819]                             if (is.null(name)) 
[13:36:51.819]                               next
[13:36:51.819]                             if (!grepl(pattern, name)) 
[13:36:51.819]                               next
[13:36:51.819]                             invokeRestart(restart)
[13:36:51.819]                             muffled <- TRUE
[13:36:51.819]                             break
[13:36:51.819]                           }
[13:36:51.819]                         }
[13:36:51.819]                       }
[13:36:51.819]                       invisible(muffled)
[13:36:51.819]                     }
[13:36:51.819]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.819]                   }
[13:36:51.819]                 }
[13:36:51.819]             }
[13:36:51.819]         }))
[13:36:51.819]     }, error = function(ex) {
[13:36:51.819]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.819]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.819]                 ...future.rng), started = ...future.startTime, 
[13:36:51.819]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.819]             version = "1.8"), class = "FutureResult")
[13:36:51.819]     }, finally = {
[13:36:51.819]         if (!identical(...future.workdir, getwd())) 
[13:36:51.819]             setwd(...future.workdir)
[13:36:51.819]         {
[13:36:51.819]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.819]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.819]             }
[13:36:51.819]             base::options(...future.oldOptions)
[13:36:51.819]             if (.Platform$OS.type == "windows") {
[13:36:51.819]                 old_names <- names(...future.oldEnvVars)
[13:36:51.819]                 envs <- base::Sys.getenv()
[13:36:51.819]                 names <- names(envs)
[13:36:51.819]                 common <- intersect(names, old_names)
[13:36:51.819]                 added <- setdiff(names, old_names)
[13:36:51.819]                 removed <- setdiff(old_names, names)
[13:36:51.819]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.819]                   envs[common]]
[13:36:51.819]                 NAMES <- toupper(changed)
[13:36:51.819]                 args <- list()
[13:36:51.819]                 for (kk in seq_along(NAMES)) {
[13:36:51.819]                   name <- changed[[kk]]
[13:36:51.819]                   NAME <- NAMES[[kk]]
[13:36:51.819]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.819]                     next
[13:36:51.819]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.819]                 }
[13:36:51.819]                 NAMES <- toupper(added)
[13:36:51.819]                 for (kk in seq_along(NAMES)) {
[13:36:51.819]                   name <- added[[kk]]
[13:36:51.819]                   NAME <- NAMES[[kk]]
[13:36:51.819]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.819]                     next
[13:36:51.819]                   args[[name]] <- ""
[13:36:51.819]                 }
[13:36:51.819]                 NAMES <- toupper(removed)
[13:36:51.819]                 for (kk in seq_along(NAMES)) {
[13:36:51.819]                   name <- removed[[kk]]
[13:36:51.819]                   NAME <- NAMES[[kk]]
[13:36:51.819]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.819]                     next
[13:36:51.819]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.819]                 }
[13:36:51.819]                 if (length(args) > 0) 
[13:36:51.819]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.819]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.819]             }
[13:36:51.819]             else {
[13:36:51.819]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.819]             }
[13:36:51.819]             {
[13:36:51.819]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.819]                   0L) {
[13:36:51.819]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.819]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.819]                   base::options(opts)
[13:36:51.819]                 }
[13:36:51.819]                 {
[13:36:51.819]                   {
[13:36:51.819]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.819]                     NULL
[13:36:51.819]                   }
[13:36:51.819]                   options(future.plan = NULL)
[13:36:51.819]                   if (is.na(NA_character_)) 
[13:36:51.819]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.819]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.819]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.819]                     .init = FALSE)
[13:36:51.819]                 }
[13:36:51.819]             }
[13:36:51.819]         }
[13:36:51.819]     })
[13:36:51.819]     if (TRUE) {
[13:36:51.819]         base::sink(type = "output", split = FALSE)
[13:36:51.819]         if (TRUE) {
[13:36:51.819]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.819]         }
[13:36:51.819]         else {
[13:36:51.819]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.819]         }
[13:36:51.819]         base::close(...future.stdout)
[13:36:51.819]         ...future.stdout <- NULL
[13:36:51.819]     }
[13:36:51.819]     ...future.result$conditions <- ...future.conditions
[13:36:51.819]     ...future.result$finished <- base::Sys.time()
[13:36:51.819]     ...future.result
[13:36:51.819] }
[13:36:51.822] assign_globals() ...
[13:36:51.822] List of 1
[13:36:51.822]  $ x: list()
[13:36:51.822]  - attr(*, "where")=List of 1
[13:36:51.822]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.822]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.822]  - attr(*, "resolved")= logi TRUE
[13:36:51.822]  - attr(*, "total_size")= num 0
[13:36:51.822]  - attr(*, "already-done")= logi TRUE
[13:36:51.825] - copied ‘x’ to environment
[13:36:51.825] assign_globals() ... done
[13:36:51.825] requestCore(): workers = 2
[13:36:51.827] MulticoreFuture started
[13:36:51.827] - Launch lazy future ... done
[13:36:51.827] run() for ‘MulticoreFuture’ ... done
[13:36:51.827] result() for MulticoreFuture ...
[13:36:51.828] plan(): Setting new future strategy stack:
[13:36:51.828] List of future strategies:
[13:36:51.828] 1. sequential:
[13:36:51.828]    - args: function (..., envir = parent.frame())
[13:36:51.828]    - tweaked: FALSE
[13:36:51.828]    - call: NULL
[13:36:51.829] plan(): nbrOfWorkers() = 1
[13:36:51.831] plan(): Setting new future strategy stack:
[13:36:51.831] List of future strategies:
[13:36:51.831] 1. multicore:
[13:36:51.831]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.831]    - tweaked: FALSE
[13:36:51.831]    - call: plan(strategy)
[13:36:51.836] plan(): nbrOfWorkers() = 2
[13:36:51.837] result() for MulticoreFuture ...
[13:36:51.837] result() for MulticoreFuture ... done
[13:36:51.837] result() for MulticoreFuture ... done
[13:36:51.837] result() for MulticoreFuture ...
[13:36:51.838] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.838] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.839] Searching for globals...
[13:36:51.841] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.841] Searching for globals ... DONE
[13:36:51.841] Resolving globals: TRUE
[13:36:51.841] Resolving any globals that are futures ...
[13:36:51.842] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.842] Resolving any globals that are futures ... DONE
[13:36:51.842] Resolving futures part of globals (recursively) ...
[13:36:51.843] resolve() on list ...
[13:36:51.843]  recursive: 99
[13:36:51.843]  length: 1
[13:36:51.843]  elements: ‘x’
[13:36:51.843]  length: 0 (resolved future 1)
[13:36:51.843] resolve() on list ... DONE
[13:36:51.843] - globals: [1] ‘x’
[13:36:51.843] Resolving futures part of globals (recursively) ... DONE
[13:36:51.844] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.844] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.844] - globals: [1] ‘x’
[13:36:51.844] 
[13:36:51.844] getGlobalsAndPackages() ... DONE
[13:36:51.845] run() for ‘Future’ ...
[13:36:51.845] - state: ‘created’
[13:36:51.845] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.849] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.849] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.849]   - Field: ‘label’
[13:36:51.849]   - Field: ‘local’
[13:36:51.849]   - Field: ‘owner’
[13:36:51.850]   - Field: ‘envir’
[13:36:51.850]   - Field: ‘workers’
[13:36:51.850]   - Field: ‘packages’
[13:36:51.850]   - Field: ‘gc’
[13:36:51.850]   - Field: ‘job’
[13:36:51.850]   - Field: ‘conditions’
[13:36:51.850]   - Field: ‘expr’
[13:36:51.850]   - Field: ‘uuid’
[13:36:51.850]   - Field: ‘seed’
[13:36:51.851]   - Field: ‘version’
[13:36:51.851]   - Field: ‘result’
[13:36:51.851]   - Field: ‘asynchronous’
[13:36:51.851]   - Field: ‘calls’
[13:36:51.851]   - Field: ‘globals’
[13:36:51.851]   - Field: ‘stdout’
[13:36:51.851]   - Field: ‘earlySignal’
[13:36:51.851]   - Field: ‘lazy’
[13:36:51.851]   - Field: ‘state’
[13:36:51.852] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.852] - Launch lazy future ...
[13:36:51.852] Packages needed by the future expression (n = 0): <none>
[13:36:51.852] Packages needed by future strategies (n = 0): <none>
[13:36:51.853] {
[13:36:51.853]     {
[13:36:51.853]         {
[13:36:51.853]             ...future.startTime <- base::Sys.time()
[13:36:51.853]             {
[13:36:51.853]                 {
[13:36:51.853]                   {
[13:36:51.853]                     {
[13:36:51.853]                       base::local({
[13:36:51.853]                         has_future <- base::requireNamespace("future", 
[13:36:51.853]                           quietly = TRUE)
[13:36:51.853]                         if (has_future) {
[13:36:51.853]                           ns <- base::getNamespace("future")
[13:36:51.853]                           version <- ns[[".package"]][["version"]]
[13:36:51.853]                           if (is.null(version)) 
[13:36:51.853]                             version <- utils::packageVersion("future")
[13:36:51.853]                         }
[13:36:51.853]                         else {
[13:36:51.853]                           version <- NULL
[13:36:51.853]                         }
[13:36:51.853]                         if (!has_future || version < "1.8.0") {
[13:36:51.853]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.853]                             "", base::R.version$version.string), 
[13:36:51.853]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.853]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.853]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.853]                               "release", "version")], collapse = " "), 
[13:36:51.853]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.853]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.853]                             info)
[13:36:51.853]                           info <- base::paste(info, collapse = "; ")
[13:36:51.853]                           if (!has_future) {
[13:36:51.853]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.853]                               info)
[13:36:51.853]                           }
[13:36:51.853]                           else {
[13:36:51.853]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.853]                               info, version)
[13:36:51.853]                           }
[13:36:51.853]                           base::stop(msg)
[13:36:51.853]                         }
[13:36:51.853]                       })
[13:36:51.853]                     }
[13:36:51.853]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.853]                     base::options(mc.cores = 1L)
[13:36:51.853]                   }
[13:36:51.853]                   ...future.strategy.old <- future::plan("list")
[13:36:51.853]                   options(future.plan = NULL)
[13:36:51.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.853]                 }
[13:36:51.853]                 ...future.workdir <- getwd()
[13:36:51.853]             }
[13:36:51.853]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.853]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.853]         }
[13:36:51.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.853]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.853]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.853]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.853]             base::names(...future.oldOptions))
[13:36:51.853]     }
[13:36:51.853]     if (FALSE) {
[13:36:51.853]     }
[13:36:51.853]     else {
[13:36:51.853]         if (TRUE) {
[13:36:51.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.853]                 open = "w")
[13:36:51.853]         }
[13:36:51.853]         else {
[13:36:51.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.853]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.853]         }
[13:36:51.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.853]             base::sink(type = "output", split = FALSE)
[13:36:51.853]             base::close(...future.stdout)
[13:36:51.853]         }, add = TRUE)
[13:36:51.853]     }
[13:36:51.853]     ...future.frame <- base::sys.nframe()
[13:36:51.853]     ...future.conditions <- base::list()
[13:36:51.853]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.853]     if (FALSE) {
[13:36:51.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.853]     }
[13:36:51.853]     ...future.result <- base::tryCatch({
[13:36:51.853]         base::withCallingHandlers({
[13:36:51.853]             ...future.value <- base::withVisible(base::local({
[13:36:51.853]                 withCallingHandlers({
[13:36:51.853]                   {
[13:36:51.853]                     x$a <- 1
[13:36:51.853]                     x
[13:36:51.853]                   }
[13:36:51.853]                 }, immediateCondition = function(cond) {
[13:36:51.853]                   save_rds <- function (object, pathname, ...) 
[13:36:51.853]                   {
[13:36:51.853]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.853]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.853]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.853]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.853]                         fi_tmp[["mtime"]])
[13:36:51.853]                     }
[13:36:51.853]                     tryCatch({
[13:36:51.853]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.853]                     }, error = function(ex) {
[13:36:51.853]                       msg <- conditionMessage(ex)
[13:36:51.853]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.853]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.853]                         fi_tmp[["mtime"]], msg)
[13:36:51.853]                       ex$message <- msg
[13:36:51.853]                       stop(ex)
[13:36:51.853]                     })
[13:36:51.853]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.853]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.853]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.853]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.853]                       fi <- file.info(pathname)
[13:36:51.853]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.853]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.853]                         fi[["size"]], fi[["mtime"]])
[13:36:51.853]                       stop(msg)
[13:36:51.853]                     }
[13:36:51.853]                     invisible(pathname)
[13:36:51.853]                   }
[13:36:51.853]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.853]                     rootPath = tempdir()) 
[13:36:51.853]                   {
[13:36:51.853]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.853]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.853]                       tmpdir = path, fileext = ".rds")
[13:36:51.853]                     save_rds(obj, file)
[13:36:51.853]                   }
[13:36:51.853]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.853]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.853]                   {
[13:36:51.853]                     inherits <- base::inherits
[13:36:51.853]                     invokeRestart <- base::invokeRestart
[13:36:51.853]                     is.null <- base::is.null
[13:36:51.853]                     muffled <- FALSE
[13:36:51.853]                     if (inherits(cond, "message")) {
[13:36:51.853]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.853]                       if (muffled) 
[13:36:51.853]                         invokeRestart("muffleMessage")
[13:36:51.853]                     }
[13:36:51.853]                     else if (inherits(cond, "warning")) {
[13:36:51.853]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.853]                       if (muffled) 
[13:36:51.853]                         invokeRestart("muffleWarning")
[13:36:51.853]                     }
[13:36:51.853]                     else if (inherits(cond, "condition")) {
[13:36:51.853]                       if (!is.null(pattern)) {
[13:36:51.853]                         computeRestarts <- base::computeRestarts
[13:36:51.853]                         grepl <- base::grepl
[13:36:51.853]                         restarts <- computeRestarts(cond)
[13:36:51.853]                         for (restart in restarts) {
[13:36:51.853]                           name <- restart$name
[13:36:51.853]                           if (is.null(name)) 
[13:36:51.853]                             next
[13:36:51.853]                           if (!grepl(pattern, name)) 
[13:36:51.853]                             next
[13:36:51.853]                           invokeRestart(restart)
[13:36:51.853]                           muffled <- TRUE
[13:36:51.853]                           break
[13:36:51.853]                         }
[13:36:51.853]                       }
[13:36:51.853]                     }
[13:36:51.853]                     invisible(muffled)
[13:36:51.853]                   }
[13:36:51.853]                   muffleCondition(cond)
[13:36:51.853]                 })
[13:36:51.853]             }))
[13:36:51.853]             future::FutureResult(value = ...future.value$value, 
[13:36:51.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.853]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.853]                     ...future.globalenv.names))
[13:36:51.853]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.853]         }, condition = base::local({
[13:36:51.853]             c <- base::c
[13:36:51.853]             inherits <- base::inherits
[13:36:51.853]             invokeRestart <- base::invokeRestart
[13:36:51.853]             length <- base::length
[13:36:51.853]             list <- base::list
[13:36:51.853]             seq.int <- base::seq.int
[13:36:51.853]             signalCondition <- base::signalCondition
[13:36:51.853]             sys.calls <- base::sys.calls
[13:36:51.853]             `[[` <- base::`[[`
[13:36:51.853]             `+` <- base::`+`
[13:36:51.853]             `<<-` <- base::`<<-`
[13:36:51.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.853]                   3L)]
[13:36:51.853]             }
[13:36:51.853]             function(cond) {
[13:36:51.853]                 is_error <- inherits(cond, "error")
[13:36:51.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.853]                   NULL)
[13:36:51.853]                 if (is_error) {
[13:36:51.853]                   sessionInformation <- function() {
[13:36:51.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.853]                       search = base::search(), system = base::Sys.info())
[13:36:51.853]                   }
[13:36:51.853]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.853]                     cond$call), session = sessionInformation(), 
[13:36:51.853]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.853]                   signalCondition(cond)
[13:36:51.853]                 }
[13:36:51.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.853]                 "immediateCondition"))) {
[13:36:51.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.853]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.853]                   if (TRUE && !signal) {
[13:36:51.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.853]                     {
[13:36:51.853]                       inherits <- base::inherits
[13:36:51.853]                       invokeRestart <- base::invokeRestart
[13:36:51.853]                       is.null <- base::is.null
[13:36:51.853]                       muffled <- FALSE
[13:36:51.853]                       if (inherits(cond, "message")) {
[13:36:51.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.853]                         if (muffled) 
[13:36:51.853]                           invokeRestart("muffleMessage")
[13:36:51.853]                       }
[13:36:51.853]                       else if (inherits(cond, "warning")) {
[13:36:51.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.853]                         if (muffled) 
[13:36:51.853]                           invokeRestart("muffleWarning")
[13:36:51.853]                       }
[13:36:51.853]                       else if (inherits(cond, "condition")) {
[13:36:51.853]                         if (!is.null(pattern)) {
[13:36:51.853]                           computeRestarts <- base::computeRestarts
[13:36:51.853]                           grepl <- base::grepl
[13:36:51.853]                           restarts <- computeRestarts(cond)
[13:36:51.853]                           for (restart in restarts) {
[13:36:51.853]                             name <- restart$name
[13:36:51.853]                             if (is.null(name)) 
[13:36:51.853]                               next
[13:36:51.853]                             if (!grepl(pattern, name)) 
[13:36:51.853]                               next
[13:36:51.853]                             invokeRestart(restart)
[13:36:51.853]                             muffled <- TRUE
[13:36:51.853]                             break
[13:36:51.853]                           }
[13:36:51.853]                         }
[13:36:51.853]                       }
[13:36:51.853]                       invisible(muffled)
[13:36:51.853]                     }
[13:36:51.853]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.853]                   }
[13:36:51.853]                 }
[13:36:51.853]                 else {
[13:36:51.853]                   if (TRUE) {
[13:36:51.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.853]                     {
[13:36:51.853]                       inherits <- base::inherits
[13:36:51.853]                       invokeRestart <- base::invokeRestart
[13:36:51.853]                       is.null <- base::is.null
[13:36:51.853]                       muffled <- FALSE
[13:36:51.853]                       if (inherits(cond, "message")) {
[13:36:51.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.853]                         if (muffled) 
[13:36:51.853]                           invokeRestart("muffleMessage")
[13:36:51.853]                       }
[13:36:51.853]                       else if (inherits(cond, "warning")) {
[13:36:51.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.853]                         if (muffled) 
[13:36:51.853]                           invokeRestart("muffleWarning")
[13:36:51.853]                       }
[13:36:51.853]                       else if (inherits(cond, "condition")) {
[13:36:51.853]                         if (!is.null(pattern)) {
[13:36:51.853]                           computeRestarts <- base::computeRestarts
[13:36:51.853]                           grepl <- base::grepl
[13:36:51.853]                           restarts <- computeRestarts(cond)
[13:36:51.853]                           for (restart in restarts) {
[13:36:51.853]                             name <- restart$name
[13:36:51.853]                             if (is.null(name)) 
[13:36:51.853]                               next
[13:36:51.853]                             if (!grepl(pattern, name)) 
[13:36:51.853]                               next
[13:36:51.853]                             invokeRestart(restart)
[13:36:51.853]                             muffled <- TRUE
[13:36:51.853]                             break
[13:36:51.853]                           }
[13:36:51.853]                         }
[13:36:51.853]                       }
[13:36:51.853]                       invisible(muffled)
[13:36:51.853]                     }
[13:36:51.853]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.853]                   }
[13:36:51.853]                 }
[13:36:51.853]             }
[13:36:51.853]         }))
[13:36:51.853]     }, error = function(ex) {
[13:36:51.853]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.853]                 ...future.rng), started = ...future.startTime, 
[13:36:51.853]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.853]             version = "1.8"), class = "FutureResult")
[13:36:51.853]     }, finally = {
[13:36:51.853]         if (!identical(...future.workdir, getwd())) 
[13:36:51.853]             setwd(...future.workdir)
[13:36:51.853]         {
[13:36:51.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.853]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.853]             }
[13:36:51.853]             base::options(...future.oldOptions)
[13:36:51.853]             if (.Platform$OS.type == "windows") {
[13:36:51.853]                 old_names <- names(...future.oldEnvVars)
[13:36:51.853]                 envs <- base::Sys.getenv()
[13:36:51.853]                 names <- names(envs)
[13:36:51.853]                 common <- intersect(names, old_names)
[13:36:51.853]                 added <- setdiff(names, old_names)
[13:36:51.853]                 removed <- setdiff(old_names, names)
[13:36:51.853]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.853]                   envs[common]]
[13:36:51.853]                 NAMES <- toupper(changed)
[13:36:51.853]                 args <- list()
[13:36:51.853]                 for (kk in seq_along(NAMES)) {
[13:36:51.853]                   name <- changed[[kk]]
[13:36:51.853]                   NAME <- NAMES[[kk]]
[13:36:51.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.853]                     next
[13:36:51.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.853]                 }
[13:36:51.853]                 NAMES <- toupper(added)
[13:36:51.853]                 for (kk in seq_along(NAMES)) {
[13:36:51.853]                   name <- added[[kk]]
[13:36:51.853]                   NAME <- NAMES[[kk]]
[13:36:51.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.853]                     next
[13:36:51.853]                   args[[name]] <- ""
[13:36:51.853]                 }
[13:36:51.853]                 NAMES <- toupper(removed)
[13:36:51.853]                 for (kk in seq_along(NAMES)) {
[13:36:51.853]                   name <- removed[[kk]]
[13:36:51.853]                   NAME <- NAMES[[kk]]
[13:36:51.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.853]                     next
[13:36:51.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.853]                 }
[13:36:51.853]                 if (length(args) > 0) 
[13:36:51.853]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.853]             }
[13:36:51.853]             else {
[13:36:51.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.853]             }
[13:36:51.853]             {
[13:36:51.853]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.853]                   0L) {
[13:36:51.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.853]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.853]                   base::options(opts)
[13:36:51.853]                 }
[13:36:51.853]                 {
[13:36:51.853]                   {
[13:36:51.853]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.853]                     NULL
[13:36:51.853]                   }
[13:36:51.853]                   options(future.plan = NULL)
[13:36:51.853]                   if (is.na(NA_character_)) 
[13:36:51.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.853]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.853]                     .init = FALSE)
[13:36:51.853]                 }
[13:36:51.853]             }
[13:36:51.853]         }
[13:36:51.853]     })
[13:36:51.853]     if (TRUE) {
[13:36:51.853]         base::sink(type = "output", split = FALSE)
[13:36:51.853]         if (TRUE) {
[13:36:51.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.853]         }
[13:36:51.853]         else {
[13:36:51.853]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.853]         }
[13:36:51.853]         base::close(...future.stdout)
[13:36:51.853]         ...future.stdout <- NULL
[13:36:51.853]     }
[13:36:51.853]     ...future.result$conditions <- ...future.conditions
[13:36:51.853]     ...future.result$finished <- base::Sys.time()
[13:36:51.853]     ...future.result
[13:36:51.853] }
[13:36:51.855] assign_globals() ...
[13:36:51.855] List of 1
[13:36:51.855]  $ x: list()
[13:36:51.855]  - attr(*, "where")=List of 1
[13:36:51.855]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.855]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.855]  - attr(*, "resolved")= logi TRUE
[13:36:51.855]  - attr(*, "total_size")= num 0
[13:36:51.855]  - attr(*, "already-done")= logi TRUE
[13:36:51.858] - copied ‘x’ to environment
[13:36:51.858] assign_globals() ... done
[13:36:51.858] requestCore(): workers = 2
[13:36:51.860] MulticoreFuture started
[13:36:51.860] - Launch lazy future ... done
[13:36:51.860] run() for ‘MulticoreFuture’ ... done
[13:36:51.861] result() for MulticoreFuture ...
[13:36:51.861] plan(): Setting new future strategy stack:
[13:36:51.861] List of future strategies:
[13:36:51.861] 1. sequential:
[13:36:51.861]    - args: function (..., envir = parent.frame())
[13:36:51.861]    - tweaked: FALSE
[13:36:51.861]    - call: NULL
[13:36:51.862] plan(): nbrOfWorkers() = 1
[13:36:51.868] plan(): Setting new future strategy stack:
[13:36:51.868] List of future strategies:
[13:36:51.868] 1. multicore:
[13:36:51.868]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.868]    - tweaked: FALSE
[13:36:51.868]    - call: plan(strategy)
[13:36:51.874] plan(): nbrOfWorkers() = 2
[13:36:51.875] result() for MulticoreFuture ...
[13:36:51.877] result() for MulticoreFuture ... done
[13:36:51.877] result() for MulticoreFuture ... done
[13:36:51.878] result() for MulticoreFuture ...
[13:36:51.878] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.879] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.879] Searching for globals...
[13:36:51.882] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.882] Searching for globals ... DONE
[13:36:51.882] Resolving globals: TRUE
[13:36:51.882] Resolving any globals that are futures ...
[13:36:51.882] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:51.882] Resolving any globals that are futures ... DONE
[13:36:51.883] Resolving futures part of globals (recursively) ...
[13:36:51.883] resolve() on list ...
[13:36:51.883]  recursive: 99
[13:36:51.883]  length: 1
[13:36:51.883]  elements: ‘x’
[13:36:51.884]  length: 0 (resolved future 1)
[13:36:51.884] resolve() on list ... DONE
[13:36:51.884] - globals: [1] ‘x’
[13:36:51.884] Resolving futures part of globals (recursively) ... DONE
[13:36:51.884] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.885] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.885] - globals: [1] ‘x’
[13:36:51.885] 
[13:36:51.885] getGlobalsAndPackages() ... DONE
[13:36:51.885] run() for ‘Future’ ...
[13:36:51.885] - state: ‘created’
[13:36:51.886] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.889] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.890] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.890]   - Field: ‘label’
[13:36:51.890]   - Field: ‘local’
[13:36:51.890]   - Field: ‘owner’
[13:36:51.890]   - Field: ‘envir’
[13:36:51.890]   - Field: ‘workers’
[13:36:51.890]   - Field: ‘packages’
[13:36:51.890]   - Field: ‘gc’
[13:36:51.891]   - Field: ‘job’
[13:36:51.891]   - Field: ‘conditions’
[13:36:51.891]   - Field: ‘expr’
[13:36:51.891]   - Field: ‘uuid’
[13:36:51.891]   - Field: ‘seed’
[13:36:51.891]   - Field: ‘version’
[13:36:51.891]   - Field: ‘result’
[13:36:51.891]   - Field: ‘asynchronous’
[13:36:51.891]   - Field: ‘calls’
[13:36:51.892]   - Field: ‘globals’
[13:36:51.892]   - Field: ‘stdout’
[13:36:51.892]   - Field: ‘earlySignal’
[13:36:51.892]   - Field: ‘lazy’
[13:36:51.892]   - Field: ‘state’
[13:36:51.892] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.892] - Launch lazy future ...
[13:36:51.893] Packages needed by the future expression (n = 0): <none>
[13:36:51.893] Packages needed by future strategies (n = 0): <none>
[13:36:51.893] {
[13:36:51.893]     {
[13:36:51.893]         {
[13:36:51.893]             ...future.startTime <- base::Sys.time()
[13:36:51.893]             {
[13:36:51.893]                 {
[13:36:51.893]                   {
[13:36:51.893]                     {
[13:36:51.893]                       base::local({
[13:36:51.893]                         has_future <- base::requireNamespace("future", 
[13:36:51.893]                           quietly = TRUE)
[13:36:51.893]                         if (has_future) {
[13:36:51.893]                           ns <- base::getNamespace("future")
[13:36:51.893]                           version <- ns[[".package"]][["version"]]
[13:36:51.893]                           if (is.null(version)) 
[13:36:51.893]                             version <- utils::packageVersion("future")
[13:36:51.893]                         }
[13:36:51.893]                         else {
[13:36:51.893]                           version <- NULL
[13:36:51.893]                         }
[13:36:51.893]                         if (!has_future || version < "1.8.0") {
[13:36:51.893]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.893]                             "", base::R.version$version.string), 
[13:36:51.893]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.893]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.893]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.893]                               "release", "version")], collapse = " "), 
[13:36:51.893]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.893]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.893]                             info)
[13:36:51.893]                           info <- base::paste(info, collapse = "; ")
[13:36:51.893]                           if (!has_future) {
[13:36:51.893]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.893]                               info)
[13:36:51.893]                           }
[13:36:51.893]                           else {
[13:36:51.893]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.893]                               info, version)
[13:36:51.893]                           }
[13:36:51.893]                           base::stop(msg)
[13:36:51.893]                         }
[13:36:51.893]                       })
[13:36:51.893]                     }
[13:36:51.893]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.893]                     base::options(mc.cores = 1L)
[13:36:51.893]                   }
[13:36:51.893]                   ...future.strategy.old <- future::plan("list")
[13:36:51.893]                   options(future.plan = NULL)
[13:36:51.893]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.893]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.893]                 }
[13:36:51.893]                 ...future.workdir <- getwd()
[13:36:51.893]             }
[13:36:51.893]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.893]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.893]         }
[13:36:51.893]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.893]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.893]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.893]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.893]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.893]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.893]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.893]             base::names(...future.oldOptions))
[13:36:51.893]     }
[13:36:51.893]     if (FALSE) {
[13:36:51.893]     }
[13:36:51.893]     else {
[13:36:51.893]         if (TRUE) {
[13:36:51.893]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.893]                 open = "w")
[13:36:51.893]         }
[13:36:51.893]         else {
[13:36:51.893]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.893]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.893]         }
[13:36:51.893]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.893]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.893]             base::sink(type = "output", split = FALSE)
[13:36:51.893]             base::close(...future.stdout)
[13:36:51.893]         }, add = TRUE)
[13:36:51.893]     }
[13:36:51.893]     ...future.frame <- base::sys.nframe()
[13:36:51.893]     ...future.conditions <- base::list()
[13:36:51.893]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.893]     if (FALSE) {
[13:36:51.893]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.893]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.893]     }
[13:36:51.893]     ...future.result <- base::tryCatch({
[13:36:51.893]         base::withCallingHandlers({
[13:36:51.893]             ...future.value <- base::withVisible(base::local({
[13:36:51.893]                 withCallingHandlers({
[13:36:51.893]                   {
[13:36:51.893]                     x$a <- 1
[13:36:51.893]                     x
[13:36:51.893]                   }
[13:36:51.893]                 }, immediateCondition = function(cond) {
[13:36:51.893]                   save_rds <- function (object, pathname, ...) 
[13:36:51.893]                   {
[13:36:51.893]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.893]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.893]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.893]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.893]                         fi_tmp[["mtime"]])
[13:36:51.893]                     }
[13:36:51.893]                     tryCatch({
[13:36:51.893]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.893]                     }, error = function(ex) {
[13:36:51.893]                       msg <- conditionMessage(ex)
[13:36:51.893]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.893]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.893]                         fi_tmp[["mtime"]], msg)
[13:36:51.893]                       ex$message <- msg
[13:36:51.893]                       stop(ex)
[13:36:51.893]                     })
[13:36:51.893]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.893]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.893]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.893]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.893]                       fi <- file.info(pathname)
[13:36:51.893]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.893]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.893]                         fi[["size"]], fi[["mtime"]])
[13:36:51.893]                       stop(msg)
[13:36:51.893]                     }
[13:36:51.893]                     invisible(pathname)
[13:36:51.893]                   }
[13:36:51.893]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.893]                     rootPath = tempdir()) 
[13:36:51.893]                   {
[13:36:51.893]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.893]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.893]                       tmpdir = path, fileext = ".rds")
[13:36:51.893]                     save_rds(obj, file)
[13:36:51.893]                   }
[13:36:51.893]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.893]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.893]                   {
[13:36:51.893]                     inherits <- base::inherits
[13:36:51.893]                     invokeRestart <- base::invokeRestart
[13:36:51.893]                     is.null <- base::is.null
[13:36:51.893]                     muffled <- FALSE
[13:36:51.893]                     if (inherits(cond, "message")) {
[13:36:51.893]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.893]                       if (muffled) 
[13:36:51.893]                         invokeRestart("muffleMessage")
[13:36:51.893]                     }
[13:36:51.893]                     else if (inherits(cond, "warning")) {
[13:36:51.893]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.893]                       if (muffled) 
[13:36:51.893]                         invokeRestart("muffleWarning")
[13:36:51.893]                     }
[13:36:51.893]                     else if (inherits(cond, "condition")) {
[13:36:51.893]                       if (!is.null(pattern)) {
[13:36:51.893]                         computeRestarts <- base::computeRestarts
[13:36:51.893]                         grepl <- base::grepl
[13:36:51.893]                         restarts <- computeRestarts(cond)
[13:36:51.893]                         for (restart in restarts) {
[13:36:51.893]                           name <- restart$name
[13:36:51.893]                           if (is.null(name)) 
[13:36:51.893]                             next
[13:36:51.893]                           if (!grepl(pattern, name)) 
[13:36:51.893]                             next
[13:36:51.893]                           invokeRestart(restart)
[13:36:51.893]                           muffled <- TRUE
[13:36:51.893]                           break
[13:36:51.893]                         }
[13:36:51.893]                       }
[13:36:51.893]                     }
[13:36:51.893]                     invisible(muffled)
[13:36:51.893]                   }
[13:36:51.893]                   muffleCondition(cond)
[13:36:51.893]                 })
[13:36:51.893]             }))
[13:36:51.893]             future::FutureResult(value = ...future.value$value, 
[13:36:51.893]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.893]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.893]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.893]                     ...future.globalenv.names))
[13:36:51.893]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.893]         }, condition = base::local({
[13:36:51.893]             c <- base::c
[13:36:51.893]             inherits <- base::inherits
[13:36:51.893]             invokeRestart <- base::invokeRestart
[13:36:51.893]             length <- base::length
[13:36:51.893]             list <- base::list
[13:36:51.893]             seq.int <- base::seq.int
[13:36:51.893]             signalCondition <- base::signalCondition
[13:36:51.893]             sys.calls <- base::sys.calls
[13:36:51.893]             `[[` <- base::`[[`
[13:36:51.893]             `+` <- base::`+`
[13:36:51.893]             `<<-` <- base::`<<-`
[13:36:51.893]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.893]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.893]                   3L)]
[13:36:51.893]             }
[13:36:51.893]             function(cond) {
[13:36:51.893]                 is_error <- inherits(cond, "error")
[13:36:51.893]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.893]                   NULL)
[13:36:51.893]                 if (is_error) {
[13:36:51.893]                   sessionInformation <- function() {
[13:36:51.893]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.893]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.893]                       search = base::search(), system = base::Sys.info())
[13:36:51.893]                   }
[13:36:51.893]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.893]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.893]                     cond$call), session = sessionInformation(), 
[13:36:51.893]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.893]                   signalCondition(cond)
[13:36:51.893]                 }
[13:36:51.893]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.893]                 "immediateCondition"))) {
[13:36:51.893]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.893]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.893]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.893]                   if (TRUE && !signal) {
[13:36:51.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.893]                     {
[13:36:51.893]                       inherits <- base::inherits
[13:36:51.893]                       invokeRestart <- base::invokeRestart
[13:36:51.893]                       is.null <- base::is.null
[13:36:51.893]                       muffled <- FALSE
[13:36:51.893]                       if (inherits(cond, "message")) {
[13:36:51.893]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.893]                         if (muffled) 
[13:36:51.893]                           invokeRestart("muffleMessage")
[13:36:51.893]                       }
[13:36:51.893]                       else if (inherits(cond, "warning")) {
[13:36:51.893]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.893]                         if (muffled) 
[13:36:51.893]                           invokeRestart("muffleWarning")
[13:36:51.893]                       }
[13:36:51.893]                       else if (inherits(cond, "condition")) {
[13:36:51.893]                         if (!is.null(pattern)) {
[13:36:51.893]                           computeRestarts <- base::computeRestarts
[13:36:51.893]                           grepl <- base::grepl
[13:36:51.893]                           restarts <- computeRestarts(cond)
[13:36:51.893]                           for (restart in restarts) {
[13:36:51.893]                             name <- restart$name
[13:36:51.893]                             if (is.null(name)) 
[13:36:51.893]                               next
[13:36:51.893]                             if (!grepl(pattern, name)) 
[13:36:51.893]                               next
[13:36:51.893]                             invokeRestart(restart)
[13:36:51.893]                             muffled <- TRUE
[13:36:51.893]                             break
[13:36:51.893]                           }
[13:36:51.893]                         }
[13:36:51.893]                       }
[13:36:51.893]                       invisible(muffled)
[13:36:51.893]                     }
[13:36:51.893]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.893]                   }
[13:36:51.893]                 }
[13:36:51.893]                 else {
[13:36:51.893]                   if (TRUE) {
[13:36:51.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.893]                     {
[13:36:51.893]                       inherits <- base::inherits
[13:36:51.893]                       invokeRestart <- base::invokeRestart
[13:36:51.893]                       is.null <- base::is.null
[13:36:51.893]                       muffled <- FALSE
[13:36:51.893]                       if (inherits(cond, "message")) {
[13:36:51.893]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.893]                         if (muffled) 
[13:36:51.893]                           invokeRestart("muffleMessage")
[13:36:51.893]                       }
[13:36:51.893]                       else if (inherits(cond, "warning")) {
[13:36:51.893]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.893]                         if (muffled) 
[13:36:51.893]                           invokeRestart("muffleWarning")
[13:36:51.893]                       }
[13:36:51.893]                       else if (inherits(cond, "condition")) {
[13:36:51.893]                         if (!is.null(pattern)) {
[13:36:51.893]                           computeRestarts <- base::computeRestarts
[13:36:51.893]                           grepl <- base::grepl
[13:36:51.893]                           restarts <- computeRestarts(cond)
[13:36:51.893]                           for (restart in restarts) {
[13:36:51.893]                             name <- restart$name
[13:36:51.893]                             if (is.null(name)) 
[13:36:51.893]                               next
[13:36:51.893]                             if (!grepl(pattern, name)) 
[13:36:51.893]                               next
[13:36:51.893]                             invokeRestart(restart)
[13:36:51.893]                             muffled <- TRUE
[13:36:51.893]                             break
[13:36:51.893]                           }
[13:36:51.893]                         }
[13:36:51.893]                       }
[13:36:51.893]                       invisible(muffled)
[13:36:51.893]                     }
[13:36:51.893]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.893]                   }
[13:36:51.893]                 }
[13:36:51.893]             }
[13:36:51.893]         }))
[13:36:51.893]     }, error = function(ex) {
[13:36:51.893]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.893]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.893]                 ...future.rng), started = ...future.startTime, 
[13:36:51.893]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.893]             version = "1.8"), class = "FutureResult")
[13:36:51.893]     }, finally = {
[13:36:51.893]         if (!identical(...future.workdir, getwd())) 
[13:36:51.893]             setwd(...future.workdir)
[13:36:51.893]         {
[13:36:51.893]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.893]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.893]             }
[13:36:51.893]             base::options(...future.oldOptions)
[13:36:51.893]             if (.Platform$OS.type == "windows") {
[13:36:51.893]                 old_names <- names(...future.oldEnvVars)
[13:36:51.893]                 envs <- base::Sys.getenv()
[13:36:51.893]                 names <- names(envs)
[13:36:51.893]                 common <- intersect(names, old_names)
[13:36:51.893]                 added <- setdiff(names, old_names)
[13:36:51.893]                 removed <- setdiff(old_names, names)
[13:36:51.893]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.893]                   envs[common]]
[13:36:51.893]                 NAMES <- toupper(changed)
[13:36:51.893]                 args <- list()
[13:36:51.893]                 for (kk in seq_along(NAMES)) {
[13:36:51.893]                   name <- changed[[kk]]
[13:36:51.893]                   NAME <- NAMES[[kk]]
[13:36:51.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.893]                     next
[13:36:51.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.893]                 }
[13:36:51.893]                 NAMES <- toupper(added)
[13:36:51.893]                 for (kk in seq_along(NAMES)) {
[13:36:51.893]                   name <- added[[kk]]
[13:36:51.893]                   NAME <- NAMES[[kk]]
[13:36:51.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.893]                     next
[13:36:51.893]                   args[[name]] <- ""
[13:36:51.893]                 }
[13:36:51.893]                 NAMES <- toupper(removed)
[13:36:51.893]                 for (kk in seq_along(NAMES)) {
[13:36:51.893]                   name <- removed[[kk]]
[13:36:51.893]                   NAME <- NAMES[[kk]]
[13:36:51.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.893]                     next
[13:36:51.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.893]                 }
[13:36:51.893]                 if (length(args) > 0) 
[13:36:51.893]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.893]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.893]             }
[13:36:51.893]             else {
[13:36:51.893]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.893]             }
[13:36:51.893]             {
[13:36:51.893]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.893]                   0L) {
[13:36:51.893]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.893]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.893]                   base::options(opts)
[13:36:51.893]                 }
[13:36:51.893]                 {
[13:36:51.893]                   {
[13:36:51.893]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.893]                     NULL
[13:36:51.893]                   }
[13:36:51.893]                   options(future.plan = NULL)
[13:36:51.893]                   if (is.na(NA_character_)) 
[13:36:51.893]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.893]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.893]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.893]                     .init = FALSE)
[13:36:51.893]                 }
[13:36:51.893]             }
[13:36:51.893]         }
[13:36:51.893]     })
[13:36:51.893]     if (TRUE) {
[13:36:51.893]         base::sink(type = "output", split = FALSE)
[13:36:51.893]         if (TRUE) {
[13:36:51.893]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.893]         }
[13:36:51.893]         else {
[13:36:51.893]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.893]         }
[13:36:51.893]         base::close(...future.stdout)
[13:36:51.893]         ...future.stdout <- NULL
[13:36:51.893]     }
[13:36:51.893]     ...future.result$conditions <- ...future.conditions
[13:36:51.893]     ...future.result$finished <- base::Sys.time()
[13:36:51.893]     ...future.result
[13:36:51.893] }
[13:36:51.895] assign_globals() ...
[13:36:51.896] List of 1
[13:36:51.896]  $ x: list()
[13:36:51.896]  - attr(*, "where")=List of 1
[13:36:51.896]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.896]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.896]  - attr(*, "resolved")= logi TRUE
[13:36:51.896]  - attr(*, "total_size")= num 0
[13:36:51.896]  - attr(*, "already-done")= logi TRUE
[13:36:51.898] - copied ‘x’ to environment
[13:36:51.898] assign_globals() ... done
[13:36:51.899] requestCore(): workers = 2
[13:36:51.900] MulticoreFuture started
[13:36:51.901] - Launch lazy future ... done
[13:36:51.901] run() for ‘MulticoreFuture’ ... done
[13:36:51.901] result() for MulticoreFuture ...
[13:36:51.901] plan(): Setting new future strategy stack:
[13:36:51.902] List of future strategies:
[13:36:51.902] 1. sequential:
[13:36:51.902]    - args: function (..., envir = parent.frame())
[13:36:51.902]    - tweaked: FALSE
[13:36:51.902]    - call: NULL
[13:36:51.903] plan(): nbrOfWorkers() = 1
[13:36:51.904] plan(): Setting new future strategy stack:
[13:36:51.905] List of future strategies:
[13:36:51.905] 1. multicore:
[13:36:51.905]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.905]    - tweaked: FALSE
[13:36:51.905]    - call: plan(strategy)
[13:36:51.909] plan(): nbrOfWorkers() = 2
[13:36:51.910] result() for MulticoreFuture ...
[13:36:51.911] result() for MulticoreFuture ... done
[13:36:51.911] result() for MulticoreFuture ... done
[13:36:51.911] result() for MulticoreFuture ...
[13:36:51.911] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.912] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.912] Searching for globals...
[13:36:51.915] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:51.915] Searching for globals ... DONE
[13:36:51.915] Resolving globals: TRUE
[13:36:51.916] Resolving any globals that are futures ...
[13:36:51.916] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:51.916] Resolving any globals that are futures ... DONE
[13:36:51.916] 
[13:36:51.916] 
[13:36:51.916] getGlobalsAndPackages() ... DONE
[13:36:51.917] run() for ‘Future’ ...
[13:36:51.917] - state: ‘created’
[13:36:51.917] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.921] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.922] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.922]   - Field: ‘label’
[13:36:51.922]   - Field: ‘local’
[13:36:51.922]   - Field: ‘owner’
[13:36:51.922]   - Field: ‘envir’
[13:36:51.922]   - Field: ‘workers’
[13:36:51.924]   - Field: ‘packages’
[13:36:51.924]   - Field: ‘gc’
[13:36:51.925]   - Field: ‘job’
[13:36:51.925]   - Field: ‘conditions’
[13:36:51.925]   - Field: ‘expr’
[13:36:51.925]   - Field: ‘uuid’
[13:36:51.925]   - Field: ‘seed’
[13:36:51.925]   - Field: ‘version’
[13:36:51.925]   - Field: ‘result’
[13:36:51.926]   - Field: ‘asynchronous’
[13:36:51.926]   - Field: ‘calls’
[13:36:51.926]   - Field: ‘globals’
[13:36:51.926]   - Field: ‘stdout’
[13:36:51.926]   - Field: ‘earlySignal’
[13:36:51.926]   - Field: ‘lazy’
[13:36:51.926]   - Field: ‘state’
[13:36:51.927] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.927] - Launch lazy future ...
[13:36:51.927] Packages needed by the future expression (n = 0): <none>
[13:36:51.927] Packages needed by future strategies (n = 0): <none>
[13:36:51.928] {
[13:36:51.928]     {
[13:36:51.928]         {
[13:36:51.928]             ...future.startTime <- base::Sys.time()
[13:36:51.928]             {
[13:36:51.928]                 {
[13:36:51.928]                   {
[13:36:51.928]                     {
[13:36:51.928]                       base::local({
[13:36:51.928]                         has_future <- base::requireNamespace("future", 
[13:36:51.928]                           quietly = TRUE)
[13:36:51.928]                         if (has_future) {
[13:36:51.928]                           ns <- base::getNamespace("future")
[13:36:51.928]                           version <- ns[[".package"]][["version"]]
[13:36:51.928]                           if (is.null(version)) 
[13:36:51.928]                             version <- utils::packageVersion("future")
[13:36:51.928]                         }
[13:36:51.928]                         else {
[13:36:51.928]                           version <- NULL
[13:36:51.928]                         }
[13:36:51.928]                         if (!has_future || version < "1.8.0") {
[13:36:51.928]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.928]                             "", base::R.version$version.string), 
[13:36:51.928]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.928]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.928]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.928]                               "release", "version")], collapse = " "), 
[13:36:51.928]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.928]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.928]                             info)
[13:36:51.928]                           info <- base::paste(info, collapse = "; ")
[13:36:51.928]                           if (!has_future) {
[13:36:51.928]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.928]                               info)
[13:36:51.928]                           }
[13:36:51.928]                           else {
[13:36:51.928]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.928]                               info, version)
[13:36:51.928]                           }
[13:36:51.928]                           base::stop(msg)
[13:36:51.928]                         }
[13:36:51.928]                       })
[13:36:51.928]                     }
[13:36:51.928]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.928]                     base::options(mc.cores = 1L)
[13:36:51.928]                   }
[13:36:51.928]                   ...future.strategy.old <- future::plan("list")
[13:36:51.928]                   options(future.plan = NULL)
[13:36:51.928]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.928]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.928]                 }
[13:36:51.928]                 ...future.workdir <- getwd()
[13:36:51.928]             }
[13:36:51.928]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.928]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.928]         }
[13:36:51.928]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.928]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.928]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.928]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.928]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.928]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.928]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.928]             base::names(...future.oldOptions))
[13:36:51.928]     }
[13:36:51.928]     if (FALSE) {
[13:36:51.928]     }
[13:36:51.928]     else {
[13:36:51.928]         if (TRUE) {
[13:36:51.928]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.928]                 open = "w")
[13:36:51.928]         }
[13:36:51.928]         else {
[13:36:51.928]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.928]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.928]         }
[13:36:51.928]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.928]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.928]             base::sink(type = "output", split = FALSE)
[13:36:51.928]             base::close(...future.stdout)
[13:36:51.928]         }, add = TRUE)
[13:36:51.928]     }
[13:36:51.928]     ...future.frame <- base::sys.nframe()
[13:36:51.928]     ...future.conditions <- base::list()
[13:36:51.928]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.928]     if (FALSE) {
[13:36:51.928]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.928]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.928]     }
[13:36:51.928]     ...future.result <- base::tryCatch({
[13:36:51.928]         base::withCallingHandlers({
[13:36:51.928]             ...future.value <- base::withVisible(base::local({
[13:36:51.928]                 withCallingHandlers({
[13:36:51.928]                   {
[13:36:51.928]                     x <- list(b = 2)
[13:36:51.928]                     x$a <- 1
[13:36:51.928]                     x
[13:36:51.928]                   }
[13:36:51.928]                 }, immediateCondition = function(cond) {
[13:36:51.928]                   save_rds <- function (object, pathname, ...) 
[13:36:51.928]                   {
[13:36:51.928]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.928]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.928]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.928]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.928]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.928]                         fi_tmp[["mtime"]])
[13:36:51.928]                     }
[13:36:51.928]                     tryCatch({
[13:36:51.928]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.928]                     }, error = function(ex) {
[13:36:51.928]                       msg <- conditionMessage(ex)
[13:36:51.928]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.928]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.928]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.928]                         fi_tmp[["mtime"]], msg)
[13:36:51.928]                       ex$message <- msg
[13:36:51.928]                       stop(ex)
[13:36:51.928]                     })
[13:36:51.928]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.928]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.928]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.928]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.928]                       fi <- file.info(pathname)
[13:36:51.928]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.928]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.928]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.928]                         fi[["size"]], fi[["mtime"]])
[13:36:51.928]                       stop(msg)
[13:36:51.928]                     }
[13:36:51.928]                     invisible(pathname)
[13:36:51.928]                   }
[13:36:51.928]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.928]                     rootPath = tempdir()) 
[13:36:51.928]                   {
[13:36:51.928]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.928]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.928]                       tmpdir = path, fileext = ".rds")
[13:36:51.928]                     save_rds(obj, file)
[13:36:51.928]                   }
[13:36:51.928]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.928]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.928]                   {
[13:36:51.928]                     inherits <- base::inherits
[13:36:51.928]                     invokeRestart <- base::invokeRestart
[13:36:51.928]                     is.null <- base::is.null
[13:36:51.928]                     muffled <- FALSE
[13:36:51.928]                     if (inherits(cond, "message")) {
[13:36:51.928]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.928]                       if (muffled) 
[13:36:51.928]                         invokeRestart("muffleMessage")
[13:36:51.928]                     }
[13:36:51.928]                     else if (inherits(cond, "warning")) {
[13:36:51.928]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.928]                       if (muffled) 
[13:36:51.928]                         invokeRestart("muffleWarning")
[13:36:51.928]                     }
[13:36:51.928]                     else if (inherits(cond, "condition")) {
[13:36:51.928]                       if (!is.null(pattern)) {
[13:36:51.928]                         computeRestarts <- base::computeRestarts
[13:36:51.928]                         grepl <- base::grepl
[13:36:51.928]                         restarts <- computeRestarts(cond)
[13:36:51.928]                         for (restart in restarts) {
[13:36:51.928]                           name <- restart$name
[13:36:51.928]                           if (is.null(name)) 
[13:36:51.928]                             next
[13:36:51.928]                           if (!grepl(pattern, name)) 
[13:36:51.928]                             next
[13:36:51.928]                           invokeRestart(restart)
[13:36:51.928]                           muffled <- TRUE
[13:36:51.928]                           break
[13:36:51.928]                         }
[13:36:51.928]                       }
[13:36:51.928]                     }
[13:36:51.928]                     invisible(muffled)
[13:36:51.928]                   }
[13:36:51.928]                   muffleCondition(cond)
[13:36:51.928]                 })
[13:36:51.928]             }))
[13:36:51.928]             future::FutureResult(value = ...future.value$value, 
[13:36:51.928]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.928]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.928]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.928]                     ...future.globalenv.names))
[13:36:51.928]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.928]         }, condition = base::local({
[13:36:51.928]             c <- base::c
[13:36:51.928]             inherits <- base::inherits
[13:36:51.928]             invokeRestart <- base::invokeRestart
[13:36:51.928]             length <- base::length
[13:36:51.928]             list <- base::list
[13:36:51.928]             seq.int <- base::seq.int
[13:36:51.928]             signalCondition <- base::signalCondition
[13:36:51.928]             sys.calls <- base::sys.calls
[13:36:51.928]             `[[` <- base::`[[`
[13:36:51.928]             `+` <- base::`+`
[13:36:51.928]             `<<-` <- base::`<<-`
[13:36:51.928]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.928]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.928]                   3L)]
[13:36:51.928]             }
[13:36:51.928]             function(cond) {
[13:36:51.928]                 is_error <- inherits(cond, "error")
[13:36:51.928]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.928]                   NULL)
[13:36:51.928]                 if (is_error) {
[13:36:51.928]                   sessionInformation <- function() {
[13:36:51.928]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.928]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.928]                       search = base::search(), system = base::Sys.info())
[13:36:51.928]                   }
[13:36:51.928]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.928]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.928]                     cond$call), session = sessionInformation(), 
[13:36:51.928]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.928]                   signalCondition(cond)
[13:36:51.928]                 }
[13:36:51.928]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.928]                 "immediateCondition"))) {
[13:36:51.928]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.928]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.928]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.928]                   if (TRUE && !signal) {
[13:36:51.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.928]                     {
[13:36:51.928]                       inherits <- base::inherits
[13:36:51.928]                       invokeRestart <- base::invokeRestart
[13:36:51.928]                       is.null <- base::is.null
[13:36:51.928]                       muffled <- FALSE
[13:36:51.928]                       if (inherits(cond, "message")) {
[13:36:51.928]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.928]                         if (muffled) 
[13:36:51.928]                           invokeRestart("muffleMessage")
[13:36:51.928]                       }
[13:36:51.928]                       else if (inherits(cond, "warning")) {
[13:36:51.928]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.928]                         if (muffled) 
[13:36:51.928]                           invokeRestart("muffleWarning")
[13:36:51.928]                       }
[13:36:51.928]                       else if (inherits(cond, "condition")) {
[13:36:51.928]                         if (!is.null(pattern)) {
[13:36:51.928]                           computeRestarts <- base::computeRestarts
[13:36:51.928]                           grepl <- base::grepl
[13:36:51.928]                           restarts <- computeRestarts(cond)
[13:36:51.928]                           for (restart in restarts) {
[13:36:51.928]                             name <- restart$name
[13:36:51.928]                             if (is.null(name)) 
[13:36:51.928]                               next
[13:36:51.928]                             if (!grepl(pattern, name)) 
[13:36:51.928]                               next
[13:36:51.928]                             invokeRestart(restart)
[13:36:51.928]                             muffled <- TRUE
[13:36:51.928]                             break
[13:36:51.928]                           }
[13:36:51.928]                         }
[13:36:51.928]                       }
[13:36:51.928]                       invisible(muffled)
[13:36:51.928]                     }
[13:36:51.928]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.928]                   }
[13:36:51.928]                 }
[13:36:51.928]                 else {
[13:36:51.928]                   if (TRUE) {
[13:36:51.928]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.928]                     {
[13:36:51.928]                       inherits <- base::inherits
[13:36:51.928]                       invokeRestart <- base::invokeRestart
[13:36:51.928]                       is.null <- base::is.null
[13:36:51.928]                       muffled <- FALSE
[13:36:51.928]                       if (inherits(cond, "message")) {
[13:36:51.928]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.928]                         if (muffled) 
[13:36:51.928]                           invokeRestart("muffleMessage")
[13:36:51.928]                       }
[13:36:51.928]                       else if (inherits(cond, "warning")) {
[13:36:51.928]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.928]                         if (muffled) 
[13:36:51.928]                           invokeRestart("muffleWarning")
[13:36:51.928]                       }
[13:36:51.928]                       else if (inherits(cond, "condition")) {
[13:36:51.928]                         if (!is.null(pattern)) {
[13:36:51.928]                           computeRestarts <- base::computeRestarts
[13:36:51.928]                           grepl <- base::grepl
[13:36:51.928]                           restarts <- computeRestarts(cond)
[13:36:51.928]                           for (restart in restarts) {
[13:36:51.928]                             name <- restart$name
[13:36:51.928]                             if (is.null(name)) 
[13:36:51.928]                               next
[13:36:51.928]                             if (!grepl(pattern, name)) 
[13:36:51.928]                               next
[13:36:51.928]                             invokeRestart(restart)
[13:36:51.928]                             muffled <- TRUE
[13:36:51.928]                             break
[13:36:51.928]                           }
[13:36:51.928]                         }
[13:36:51.928]                       }
[13:36:51.928]                       invisible(muffled)
[13:36:51.928]                     }
[13:36:51.928]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.928]                   }
[13:36:51.928]                 }
[13:36:51.928]             }
[13:36:51.928]         }))
[13:36:51.928]     }, error = function(ex) {
[13:36:51.928]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.928]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.928]                 ...future.rng), started = ...future.startTime, 
[13:36:51.928]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.928]             version = "1.8"), class = "FutureResult")
[13:36:51.928]     }, finally = {
[13:36:51.928]         if (!identical(...future.workdir, getwd())) 
[13:36:51.928]             setwd(...future.workdir)
[13:36:51.928]         {
[13:36:51.928]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.928]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.928]             }
[13:36:51.928]             base::options(...future.oldOptions)
[13:36:51.928]             if (.Platform$OS.type == "windows") {
[13:36:51.928]                 old_names <- names(...future.oldEnvVars)
[13:36:51.928]                 envs <- base::Sys.getenv()
[13:36:51.928]                 names <- names(envs)
[13:36:51.928]                 common <- intersect(names, old_names)
[13:36:51.928]                 added <- setdiff(names, old_names)
[13:36:51.928]                 removed <- setdiff(old_names, names)
[13:36:51.928]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.928]                   envs[common]]
[13:36:51.928]                 NAMES <- toupper(changed)
[13:36:51.928]                 args <- list()
[13:36:51.928]                 for (kk in seq_along(NAMES)) {
[13:36:51.928]                   name <- changed[[kk]]
[13:36:51.928]                   NAME <- NAMES[[kk]]
[13:36:51.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.928]                     next
[13:36:51.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.928]                 }
[13:36:51.928]                 NAMES <- toupper(added)
[13:36:51.928]                 for (kk in seq_along(NAMES)) {
[13:36:51.928]                   name <- added[[kk]]
[13:36:51.928]                   NAME <- NAMES[[kk]]
[13:36:51.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.928]                     next
[13:36:51.928]                   args[[name]] <- ""
[13:36:51.928]                 }
[13:36:51.928]                 NAMES <- toupper(removed)
[13:36:51.928]                 for (kk in seq_along(NAMES)) {
[13:36:51.928]                   name <- removed[[kk]]
[13:36:51.928]                   NAME <- NAMES[[kk]]
[13:36:51.928]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.928]                     next
[13:36:51.928]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.928]                 }
[13:36:51.928]                 if (length(args) > 0) 
[13:36:51.928]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.928]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.928]             }
[13:36:51.928]             else {
[13:36:51.928]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.928]             }
[13:36:51.928]             {
[13:36:51.928]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.928]                   0L) {
[13:36:51.928]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.928]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.928]                   base::options(opts)
[13:36:51.928]                 }
[13:36:51.928]                 {
[13:36:51.928]                   {
[13:36:51.928]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.928]                     NULL
[13:36:51.928]                   }
[13:36:51.928]                   options(future.plan = NULL)
[13:36:51.928]                   if (is.na(NA_character_)) 
[13:36:51.928]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.928]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.928]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.928]                     .init = FALSE)
[13:36:51.928]                 }
[13:36:51.928]             }
[13:36:51.928]         }
[13:36:51.928]     })
[13:36:51.928]     if (TRUE) {
[13:36:51.928]         base::sink(type = "output", split = FALSE)
[13:36:51.928]         if (TRUE) {
[13:36:51.928]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.928]         }
[13:36:51.928]         else {
[13:36:51.928]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.928]         }
[13:36:51.928]         base::close(...future.stdout)
[13:36:51.928]         ...future.stdout <- NULL
[13:36:51.928]     }
[13:36:51.928]     ...future.result$conditions <- ...future.conditions
[13:36:51.928]     ...future.result$finished <- base::Sys.time()
[13:36:51.928]     ...future.result
[13:36:51.928] }
[13:36:51.930] requestCore(): workers = 2
[13:36:51.932] MulticoreFuture started
[13:36:51.932] - Launch lazy future ... done
[13:36:51.932] run() for ‘MulticoreFuture’ ... done
[13:36:51.933] result() for MulticoreFuture ...
[13:36:51.933] plan(): Setting new future strategy stack:
[13:36:51.933] List of future strategies:
[13:36:51.933] 1. sequential:
[13:36:51.933]    - args: function (..., envir = parent.frame())
[13:36:51.933]    - tweaked: FALSE
[13:36:51.933]    - call: NULL
[13:36:51.934] plan(): nbrOfWorkers() = 1
[13:36:51.936] plan(): Setting new future strategy stack:
[13:36:51.936] List of future strategies:
[13:36:51.936] 1. multicore:
[13:36:51.936]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.936]    - tweaked: FALSE
[13:36:51.936]    - call: plan(strategy)
[13:36:51.941] plan(): nbrOfWorkers() = 2
[13:36:51.942] result() for MulticoreFuture ...
[13:36:51.942] result() for MulticoreFuture ... done
[13:36:51.942] result() for MulticoreFuture ... done
[13:36:51.943] result() for MulticoreFuture ...
[13:36:51.943] result() for MulticoreFuture ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.943] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.943] Searching for globals...
[13:36:51.946] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.946] Searching for globals ... DONE
[13:36:51.946] Resolving globals: TRUE
[13:36:51.947] Resolving any globals that are futures ...
[13:36:51.947] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.947] Resolving any globals that are futures ... DONE
[13:36:51.947] Resolving futures part of globals (recursively) ...
[13:36:51.948] resolve() on list ...
[13:36:51.948]  recursive: 99
[13:36:51.948]  length: 1
[13:36:51.948]  elements: ‘x’
[13:36:51.948]  length: 0 (resolved future 1)
[13:36:51.948] resolve() on list ... DONE
[13:36:51.948] - globals: [1] ‘x’
[13:36:51.948] Resolving futures part of globals (recursively) ... DONE
[13:36:51.949] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.949] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.949] - globals: [1] ‘x’
[13:36:51.949] 
[13:36:51.949] getGlobalsAndPackages() ... DONE
[13:36:51.950] run() for ‘Future’ ...
[13:36:51.950] - state: ‘created’
[13:36:51.950] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.954] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.954] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.954]   - Field: ‘label’
[13:36:51.954]   - Field: ‘local’
[13:36:51.954]   - Field: ‘owner’
[13:36:51.955]   - Field: ‘envir’
[13:36:51.955]   - Field: ‘workers’
[13:36:51.955]   - Field: ‘packages’
[13:36:51.955]   - Field: ‘gc’
[13:36:51.955]   - Field: ‘job’
[13:36:51.955]   - Field: ‘conditions’
[13:36:51.955]   - Field: ‘expr’
[13:36:51.955]   - Field: ‘uuid’
[13:36:51.955]   - Field: ‘seed’
[13:36:51.956]   - Field: ‘version’
[13:36:51.956]   - Field: ‘result’
[13:36:51.956]   - Field: ‘asynchronous’
[13:36:51.956]   - Field: ‘calls’
[13:36:51.956]   - Field: ‘globals’
[13:36:51.956]   - Field: ‘stdout’
[13:36:51.956]   - Field: ‘earlySignal’
[13:36:51.956]   - Field: ‘lazy’
[13:36:51.956]   - Field: ‘state’
[13:36:51.957] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.957] - Launch lazy future ...
[13:36:51.957] Packages needed by the future expression (n = 0): <none>
[13:36:51.957] Packages needed by future strategies (n = 0): <none>
[13:36:51.958] {
[13:36:51.958]     {
[13:36:51.958]         {
[13:36:51.958]             ...future.startTime <- base::Sys.time()
[13:36:51.958]             {
[13:36:51.958]                 {
[13:36:51.958]                   {
[13:36:51.958]                     {
[13:36:51.958]                       base::local({
[13:36:51.958]                         has_future <- base::requireNamespace("future", 
[13:36:51.958]                           quietly = TRUE)
[13:36:51.958]                         if (has_future) {
[13:36:51.958]                           ns <- base::getNamespace("future")
[13:36:51.958]                           version <- ns[[".package"]][["version"]]
[13:36:51.958]                           if (is.null(version)) 
[13:36:51.958]                             version <- utils::packageVersion("future")
[13:36:51.958]                         }
[13:36:51.958]                         else {
[13:36:51.958]                           version <- NULL
[13:36:51.958]                         }
[13:36:51.958]                         if (!has_future || version < "1.8.0") {
[13:36:51.958]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.958]                             "", base::R.version$version.string), 
[13:36:51.958]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.958]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.958]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.958]                               "release", "version")], collapse = " "), 
[13:36:51.958]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.958]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.958]                             info)
[13:36:51.958]                           info <- base::paste(info, collapse = "; ")
[13:36:51.958]                           if (!has_future) {
[13:36:51.958]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.958]                               info)
[13:36:51.958]                           }
[13:36:51.958]                           else {
[13:36:51.958]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.958]                               info, version)
[13:36:51.958]                           }
[13:36:51.958]                           base::stop(msg)
[13:36:51.958]                         }
[13:36:51.958]                       })
[13:36:51.958]                     }
[13:36:51.958]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.958]                     base::options(mc.cores = 1L)
[13:36:51.958]                   }
[13:36:51.958]                   ...future.strategy.old <- future::plan("list")
[13:36:51.958]                   options(future.plan = NULL)
[13:36:51.958]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.958]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.958]                 }
[13:36:51.958]                 ...future.workdir <- getwd()
[13:36:51.958]             }
[13:36:51.958]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.958]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.958]         }
[13:36:51.958]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.958]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.958]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.958]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.958]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.958]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.958]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.958]             base::names(...future.oldOptions))
[13:36:51.958]     }
[13:36:51.958]     if (FALSE) {
[13:36:51.958]     }
[13:36:51.958]     else {
[13:36:51.958]         if (TRUE) {
[13:36:51.958]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.958]                 open = "w")
[13:36:51.958]         }
[13:36:51.958]         else {
[13:36:51.958]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.958]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.958]         }
[13:36:51.958]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.958]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.958]             base::sink(type = "output", split = FALSE)
[13:36:51.958]             base::close(...future.stdout)
[13:36:51.958]         }, add = TRUE)
[13:36:51.958]     }
[13:36:51.958]     ...future.frame <- base::sys.nframe()
[13:36:51.958]     ...future.conditions <- base::list()
[13:36:51.958]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.958]     if (FALSE) {
[13:36:51.958]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.958]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.958]     }
[13:36:51.958]     ...future.result <- base::tryCatch({
[13:36:51.958]         base::withCallingHandlers({
[13:36:51.958]             ...future.value <- base::withVisible(base::local({
[13:36:51.958]                 withCallingHandlers({
[13:36:51.958]                   {
[13:36:51.958]                     x[["a"]] <- 1
[13:36:51.958]                     x
[13:36:51.958]                   }
[13:36:51.958]                 }, immediateCondition = function(cond) {
[13:36:51.958]                   save_rds <- function (object, pathname, ...) 
[13:36:51.958]                   {
[13:36:51.958]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.958]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.958]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.958]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.958]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.958]                         fi_tmp[["mtime"]])
[13:36:51.958]                     }
[13:36:51.958]                     tryCatch({
[13:36:51.958]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.958]                     }, error = function(ex) {
[13:36:51.958]                       msg <- conditionMessage(ex)
[13:36:51.958]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.958]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.958]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.958]                         fi_tmp[["mtime"]], msg)
[13:36:51.958]                       ex$message <- msg
[13:36:51.958]                       stop(ex)
[13:36:51.958]                     })
[13:36:51.958]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.958]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.958]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.958]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.958]                       fi <- file.info(pathname)
[13:36:51.958]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.958]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.958]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.958]                         fi[["size"]], fi[["mtime"]])
[13:36:51.958]                       stop(msg)
[13:36:51.958]                     }
[13:36:51.958]                     invisible(pathname)
[13:36:51.958]                   }
[13:36:51.958]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.958]                     rootPath = tempdir()) 
[13:36:51.958]                   {
[13:36:51.958]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.958]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.958]                       tmpdir = path, fileext = ".rds")
[13:36:51.958]                     save_rds(obj, file)
[13:36:51.958]                   }
[13:36:51.958]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.958]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.958]                   {
[13:36:51.958]                     inherits <- base::inherits
[13:36:51.958]                     invokeRestart <- base::invokeRestart
[13:36:51.958]                     is.null <- base::is.null
[13:36:51.958]                     muffled <- FALSE
[13:36:51.958]                     if (inherits(cond, "message")) {
[13:36:51.958]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.958]                       if (muffled) 
[13:36:51.958]                         invokeRestart("muffleMessage")
[13:36:51.958]                     }
[13:36:51.958]                     else if (inherits(cond, "warning")) {
[13:36:51.958]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.958]                       if (muffled) 
[13:36:51.958]                         invokeRestart("muffleWarning")
[13:36:51.958]                     }
[13:36:51.958]                     else if (inherits(cond, "condition")) {
[13:36:51.958]                       if (!is.null(pattern)) {
[13:36:51.958]                         computeRestarts <- base::computeRestarts
[13:36:51.958]                         grepl <- base::grepl
[13:36:51.958]                         restarts <- computeRestarts(cond)
[13:36:51.958]                         for (restart in restarts) {
[13:36:51.958]                           name <- restart$name
[13:36:51.958]                           if (is.null(name)) 
[13:36:51.958]                             next
[13:36:51.958]                           if (!grepl(pattern, name)) 
[13:36:51.958]                             next
[13:36:51.958]                           invokeRestart(restart)
[13:36:51.958]                           muffled <- TRUE
[13:36:51.958]                           break
[13:36:51.958]                         }
[13:36:51.958]                       }
[13:36:51.958]                     }
[13:36:51.958]                     invisible(muffled)
[13:36:51.958]                   }
[13:36:51.958]                   muffleCondition(cond)
[13:36:51.958]                 })
[13:36:51.958]             }))
[13:36:51.958]             future::FutureResult(value = ...future.value$value, 
[13:36:51.958]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.958]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.958]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.958]                     ...future.globalenv.names))
[13:36:51.958]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.958]         }, condition = base::local({
[13:36:51.958]             c <- base::c
[13:36:51.958]             inherits <- base::inherits
[13:36:51.958]             invokeRestart <- base::invokeRestart
[13:36:51.958]             length <- base::length
[13:36:51.958]             list <- base::list
[13:36:51.958]             seq.int <- base::seq.int
[13:36:51.958]             signalCondition <- base::signalCondition
[13:36:51.958]             sys.calls <- base::sys.calls
[13:36:51.958]             `[[` <- base::`[[`
[13:36:51.958]             `+` <- base::`+`
[13:36:51.958]             `<<-` <- base::`<<-`
[13:36:51.958]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.958]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.958]                   3L)]
[13:36:51.958]             }
[13:36:51.958]             function(cond) {
[13:36:51.958]                 is_error <- inherits(cond, "error")
[13:36:51.958]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.958]                   NULL)
[13:36:51.958]                 if (is_error) {
[13:36:51.958]                   sessionInformation <- function() {
[13:36:51.958]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.958]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.958]                       search = base::search(), system = base::Sys.info())
[13:36:51.958]                   }
[13:36:51.958]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.958]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.958]                     cond$call), session = sessionInformation(), 
[13:36:51.958]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.958]                   signalCondition(cond)
[13:36:51.958]                 }
[13:36:51.958]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.958]                 "immediateCondition"))) {
[13:36:51.958]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.958]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.958]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.958]                   if (TRUE && !signal) {
[13:36:51.958]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.958]                     {
[13:36:51.958]                       inherits <- base::inherits
[13:36:51.958]                       invokeRestart <- base::invokeRestart
[13:36:51.958]                       is.null <- base::is.null
[13:36:51.958]                       muffled <- FALSE
[13:36:51.958]                       if (inherits(cond, "message")) {
[13:36:51.958]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.958]                         if (muffled) 
[13:36:51.958]                           invokeRestart("muffleMessage")
[13:36:51.958]                       }
[13:36:51.958]                       else if (inherits(cond, "warning")) {
[13:36:51.958]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.958]                         if (muffled) 
[13:36:51.958]                           invokeRestart("muffleWarning")
[13:36:51.958]                       }
[13:36:51.958]                       else if (inherits(cond, "condition")) {
[13:36:51.958]                         if (!is.null(pattern)) {
[13:36:51.958]                           computeRestarts <- base::computeRestarts
[13:36:51.958]                           grepl <- base::grepl
[13:36:51.958]                           restarts <- computeRestarts(cond)
[13:36:51.958]                           for (restart in restarts) {
[13:36:51.958]                             name <- restart$name
[13:36:51.958]                             if (is.null(name)) 
[13:36:51.958]                               next
[13:36:51.958]                             if (!grepl(pattern, name)) 
[13:36:51.958]                               next
[13:36:51.958]                             invokeRestart(restart)
[13:36:51.958]                             muffled <- TRUE
[13:36:51.958]                             break
[13:36:51.958]                           }
[13:36:51.958]                         }
[13:36:51.958]                       }
[13:36:51.958]                       invisible(muffled)
[13:36:51.958]                     }
[13:36:51.958]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.958]                   }
[13:36:51.958]                 }
[13:36:51.958]                 else {
[13:36:51.958]                   if (TRUE) {
[13:36:51.958]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.958]                     {
[13:36:51.958]                       inherits <- base::inherits
[13:36:51.958]                       invokeRestart <- base::invokeRestart
[13:36:51.958]                       is.null <- base::is.null
[13:36:51.958]                       muffled <- FALSE
[13:36:51.958]                       if (inherits(cond, "message")) {
[13:36:51.958]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.958]                         if (muffled) 
[13:36:51.958]                           invokeRestart("muffleMessage")
[13:36:51.958]                       }
[13:36:51.958]                       else if (inherits(cond, "warning")) {
[13:36:51.958]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.958]                         if (muffled) 
[13:36:51.958]                           invokeRestart("muffleWarning")
[13:36:51.958]                       }
[13:36:51.958]                       else if (inherits(cond, "condition")) {
[13:36:51.958]                         if (!is.null(pattern)) {
[13:36:51.958]                           computeRestarts <- base::computeRestarts
[13:36:51.958]                           grepl <- base::grepl
[13:36:51.958]                           restarts <- computeRestarts(cond)
[13:36:51.958]                           for (restart in restarts) {
[13:36:51.958]                             name <- restart$name
[13:36:51.958]                             if (is.null(name)) 
[13:36:51.958]                               next
[13:36:51.958]                             if (!grepl(pattern, name)) 
[13:36:51.958]                               next
[13:36:51.958]                             invokeRestart(restart)
[13:36:51.958]                             muffled <- TRUE
[13:36:51.958]                             break
[13:36:51.958]                           }
[13:36:51.958]                         }
[13:36:51.958]                       }
[13:36:51.958]                       invisible(muffled)
[13:36:51.958]                     }
[13:36:51.958]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.958]                   }
[13:36:51.958]                 }
[13:36:51.958]             }
[13:36:51.958]         }))
[13:36:51.958]     }, error = function(ex) {
[13:36:51.958]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.958]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.958]                 ...future.rng), started = ...future.startTime, 
[13:36:51.958]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.958]             version = "1.8"), class = "FutureResult")
[13:36:51.958]     }, finally = {
[13:36:51.958]         if (!identical(...future.workdir, getwd())) 
[13:36:51.958]             setwd(...future.workdir)
[13:36:51.958]         {
[13:36:51.958]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.958]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.958]             }
[13:36:51.958]             base::options(...future.oldOptions)
[13:36:51.958]             if (.Platform$OS.type == "windows") {
[13:36:51.958]                 old_names <- names(...future.oldEnvVars)
[13:36:51.958]                 envs <- base::Sys.getenv()
[13:36:51.958]                 names <- names(envs)
[13:36:51.958]                 common <- intersect(names, old_names)
[13:36:51.958]                 added <- setdiff(names, old_names)
[13:36:51.958]                 removed <- setdiff(old_names, names)
[13:36:51.958]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.958]                   envs[common]]
[13:36:51.958]                 NAMES <- toupper(changed)
[13:36:51.958]                 args <- list()
[13:36:51.958]                 for (kk in seq_along(NAMES)) {
[13:36:51.958]                   name <- changed[[kk]]
[13:36:51.958]                   NAME <- NAMES[[kk]]
[13:36:51.958]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.958]                     next
[13:36:51.958]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.958]                 }
[13:36:51.958]                 NAMES <- toupper(added)
[13:36:51.958]                 for (kk in seq_along(NAMES)) {
[13:36:51.958]                   name <- added[[kk]]
[13:36:51.958]                   NAME <- NAMES[[kk]]
[13:36:51.958]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.958]                     next
[13:36:51.958]                   args[[name]] <- ""
[13:36:51.958]                 }
[13:36:51.958]                 NAMES <- toupper(removed)
[13:36:51.958]                 for (kk in seq_along(NAMES)) {
[13:36:51.958]                   name <- removed[[kk]]
[13:36:51.958]                   NAME <- NAMES[[kk]]
[13:36:51.958]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.958]                     next
[13:36:51.958]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.958]                 }
[13:36:51.958]                 if (length(args) > 0) 
[13:36:51.958]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.958]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.958]             }
[13:36:51.958]             else {
[13:36:51.958]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.958]             }
[13:36:51.958]             {
[13:36:51.958]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.958]                   0L) {
[13:36:51.958]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.958]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.958]                   base::options(opts)
[13:36:51.958]                 }
[13:36:51.958]                 {
[13:36:51.958]                   {
[13:36:51.958]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.958]                     NULL
[13:36:51.958]                   }
[13:36:51.958]                   options(future.plan = NULL)
[13:36:51.958]                   if (is.na(NA_character_)) 
[13:36:51.958]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.958]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.958]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.958]                     .init = FALSE)
[13:36:51.958]                 }
[13:36:51.958]             }
[13:36:51.958]         }
[13:36:51.958]     })
[13:36:51.958]     if (TRUE) {
[13:36:51.958]         base::sink(type = "output", split = FALSE)
[13:36:51.958]         if (TRUE) {
[13:36:51.958]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.958]         }
[13:36:51.958]         else {
[13:36:51.958]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.958]         }
[13:36:51.958]         base::close(...future.stdout)
[13:36:51.958]         ...future.stdout <- NULL
[13:36:51.958]     }
[13:36:51.958]     ...future.result$conditions <- ...future.conditions
[13:36:51.958]     ...future.result$finished <- base::Sys.time()
[13:36:51.958]     ...future.result
[13:36:51.958] }
[13:36:51.960] assign_globals() ...
[13:36:51.960] List of 1
[13:36:51.960]  $ x: list()
[13:36:51.960]  - attr(*, "where")=List of 1
[13:36:51.960]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.960]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.960]  - attr(*, "resolved")= logi TRUE
[13:36:51.960]  - attr(*, "total_size")= num 0
[13:36:51.960]  - attr(*, "already-done")= logi TRUE
[13:36:51.963] - copied ‘x’ to environment
[13:36:51.963] assign_globals() ... done
[13:36:51.964] requestCore(): workers = 2
[13:36:51.965] MulticoreFuture started
[13:36:51.966] - Launch lazy future ... done
[13:36:51.966] run() for ‘MulticoreFuture’ ... done
[13:36:51.966] result() for MulticoreFuture ...
[13:36:51.966] plan(): Setting new future strategy stack:
[13:36:51.967] List of future strategies:
[13:36:51.967] 1. sequential:
[13:36:51.967]    - args: function (..., envir = parent.frame())
[13:36:51.967]    - tweaked: FALSE
[13:36:51.967]    - call: NULL
[13:36:51.968] plan(): nbrOfWorkers() = 1
[13:36:51.969] plan(): Setting new future strategy stack:
[13:36:51.970] List of future strategies:
[13:36:51.970] 1. multicore:
[13:36:51.970]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:51.970]    - tweaked: FALSE
[13:36:51.970]    - call: plan(strategy)
[13:36:51.975] plan(): nbrOfWorkers() = 2
[13:36:51.975] result() for MulticoreFuture ...
[13:36:51.976] result() for MulticoreFuture ... done
[13:36:51.976] result() for MulticoreFuture ... done
[13:36:51.976] result() for MulticoreFuture ...
[13:36:51.976] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:51.976] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:51.977] Searching for globals...
[13:36:51.979] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.979] Searching for globals ... DONE
[13:36:51.979] Resolving globals: TRUE
[13:36:51.980] Resolving any globals that are futures ...
[13:36:51.980] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:51.980] Resolving any globals that are futures ... DONE
[13:36:51.983] Resolving futures part of globals (recursively) ...
[13:36:51.983] resolve() on list ...
[13:36:51.983]  recursive: 99
[13:36:51.984]  length: 1
[13:36:51.984]  elements: ‘x’
[13:36:51.984]  length: 0 (resolved future 1)
[13:36:51.984] resolve() on list ... DONE
[13:36:51.984] - globals: [1] ‘x’
[13:36:51.984] Resolving futures part of globals (recursively) ... DONE
[13:36:51.985] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:51.985] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:51.985] - globals: [1] ‘x’
[13:36:51.985] 
[13:36:51.985] getGlobalsAndPackages() ... DONE
[13:36:51.986] run() for ‘Future’ ...
[13:36:51.986] - state: ‘created’
[13:36:51.986] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:51.990] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:51.990] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:51.990]   - Field: ‘label’
[13:36:51.990]   - Field: ‘local’
[13:36:51.990]   - Field: ‘owner’
[13:36:51.991]   - Field: ‘envir’
[13:36:51.991]   - Field: ‘workers’
[13:36:51.991]   - Field: ‘packages’
[13:36:51.991]   - Field: ‘gc’
[13:36:51.991]   - Field: ‘job’
[13:36:51.991]   - Field: ‘conditions’
[13:36:51.991]   - Field: ‘expr’
[13:36:51.991]   - Field: ‘uuid’
[13:36:51.991]   - Field: ‘seed’
[13:36:51.992]   - Field: ‘version’
[13:36:51.992]   - Field: ‘result’
[13:36:51.992]   - Field: ‘asynchronous’
[13:36:51.992]   - Field: ‘calls’
[13:36:51.992]   - Field: ‘globals’
[13:36:51.992]   - Field: ‘stdout’
[13:36:51.992]   - Field: ‘earlySignal’
[13:36:51.992]   - Field: ‘lazy’
[13:36:51.992]   - Field: ‘state’
[13:36:51.993] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:51.993] - Launch lazy future ...
[13:36:51.993] Packages needed by the future expression (n = 0): <none>
[13:36:51.993] Packages needed by future strategies (n = 0): <none>
[13:36:51.994] {
[13:36:51.994]     {
[13:36:51.994]         {
[13:36:51.994]             ...future.startTime <- base::Sys.time()
[13:36:51.994]             {
[13:36:51.994]                 {
[13:36:51.994]                   {
[13:36:51.994]                     {
[13:36:51.994]                       base::local({
[13:36:51.994]                         has_future <- base::requireNamespace("future", 
[13:36:51.994]                           quietly = TRUE)
[13:36:51.994]                         if (has_future) {
[13:36:51.994]                           ns <- base::getNamespace("future")
[13:36:51.994]                           version <- ns[[".package"]][["version"]]
[13:36:51.994]                           if (is.null(version)) 
[13:36:51.994]                             version <- utils::packageVersion("future")
[13:36:51.994]                         }
[13:36:51.994]                         else {
[13:36:51.994]                           version <- NULL
[13:36:51.994]                         }
[13:36:51.994]                         if (!has_future || version < "1.8.0") {
[13:36:51.994]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:51.994]                             "", base::R.version$version.string), 
[13:36:51.994]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:51.994]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:51.994]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:51.994]                               "release", "version")], collapse = " "), 
[13:36:51.994]                             hostname = base::Sys.info()[["nodename"]])
[13:36:51.994]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:51.994]                             info)
[13:36:51.994]                           info <- base::paste(info, collapse = "; ")
[13:36:51.994]                           if (!has_future) {
[13:36:51.994]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:51.994]                               info)
[13:36:51.994]                           }
[13:36:51.994]                           else {
[13:36:51.994]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:51.994]                               info, version)
[13:36:51.994]                           }
[13:36:51.994]                           base::stop(msg)
[13:36:51.994]                         }
[13:36:51.994]                       })
[13:36:51.994]                     }
[13:36:51.994]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:51.994]                     base::options(mc.cores = 1L)
[13:36:51.994]                   }
[13:36:51.994]                   ...future.strategy.old <- future::plan("list")
[13:36:51.994]                   options(future.plan = NULL)
[13:36:51.994]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.994]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:51.994]                 }
[13:36:51.994]                 ...future.workdir <- getwd()
[13:36:51.994]             }
[13:36:51.994]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:51.994]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:51.994]         }
[13:36:51.994]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:51.994]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:51.994]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:51.994]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:51.994]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:51.994]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:51.994]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:51.994]             base::names(...future.oldOptions))
[13:36:51.994]     }
[13:36:51.994]     if (FALSE) {
[13:36:51.994]     }
[13:36:51.994]     else {
[13:36:51.994]         if (TRUE) {
[13:36:51.994]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:51.994]                 open = "w")
[13:36:51.994]         }
[13:36:51.994]         else {
[13:36:51.994]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:51.994]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:51.994]         }
[13:36:51.994]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:51.994]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:51.994]             base::sink(type = "output", split = FALSE)
[13:36:51.994]             base::close(...future.stdout)
[13:36:51.994]         }, add = TRUE)
[13:36:51.994]     }
[13:36:51.994]     ...future.frame <- base::sys.nframe()
[13:36:51.994]     ...future.conditions <- base::list()
[13:36:51.994]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:51.994]     if (FALSE) {
[13:36:51.994]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:51.994]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:51.994]     }
[13:36:51.994]     ...future.result <- base::tryCatch({
[13:36:51.994]         base::withCallingHandlers({
[13:36:51.994]             ...future.value <- base::withVisible(base::local({
[13:36:51.994]                 withCallingHandlers({
[13:36:51.994]                   {
[13:36:51.994]                     x[["a"]] <- 1
[13:36:51.994]                     x
[13:36:51.994]                   }
[13:36:51.994]                 }, immediateCondition = function(cond) {
[13:36:51.994]                   save_rds <- function (object, pathname, ...) 
[13:36:51.994]                   {
[13:36:51.994]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:51.994]                     if (file_test("-f", pathname_tmp)) {
[13:36:51.994]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.994]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:51.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.994]                         fi_tmp[["mtime"]])
[13:36:51.994]                     }
[13:36:51.994]                     tryCatch({
[13:36:51.994]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:51.994]                     }, error = function(ex) {
[13:36:51.994]                       msg <- conditionMessage(ex)
[13:36:51.994]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.994]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:51.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.994]                         fi_tmp[["mtime"]], msg)
[13:36:51.994]                       ex$message <- msg
[13:36:51.994]                       stop(ex)
[13:36:51.994]                     })
[13:36:51.994]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:51.994]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:51.994]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:51.994]                       fi_tmp <- file.info(pathname_tmp)
[13:36:51.994]                       fi <- file.info(pathname)
[13:36:51.994]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:51.994]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:51.994]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:51.994]                         fi[["size"]], fi[["mtime"]])
[13:36:51.994]                       stop(msg)
[13:36:51.994]                     }
[13:36:51.994]                     invisible(pathname)
[13:36:51.994]                   }
[13:36:51.994]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:51.994]                     rootPath = tempdir()) 
[13:36:51.994]                   {
[13:36:51.994]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:51.994]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:51.994]                       tmpdir = path, fileext = ".rds")
[13:36:51.994]                     save_rds(obj, file)
[13:36:51.994]                   }
[13:36:51.994]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:51.994]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.994]                   {
[13:36:51.994]                     inherits <- base::inherits
[13:36:51.994]                     invokeRestart <- base::invokeRestart
[13:36:51.994]                     is.null <- base::is.null
[13:36:51.994]                     muffled <- FALSE
[13:36:51.994]                     if (inherits(cond, "message")) {
[13:36:51.994]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:51.994]                       if (muffled) 
[13:36:51.994]                         invokeRestart("muffleMessage")
[13:36:51.994]                     }
[13:36:51.994]                     else if (inherits(cond, "warning")) {
[13:36:51.994]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:51.994]                       if (muffled) 
[13:36:51.994]                         invokeRestart("muffleWarning")
[13:36:51.994]                     }
[13:36:51.994]                     else if (inherits(cond, "condition")) {
[13:36:51.994]                       if (!is.null(pattern)) {
[13:36:51.994]                         computeRestarts <- base::computeRestarts
[13:36:51.994]                         grepl <- base::grepl
[13:36:51.994]                         restarts <- computeRestarts(cond)
[13:36:51.994]                         for (restart in restarts) {
[13:36:51.994]                           name <- restart$name
[13:36:51.994]                           if (is.null(name)) 
[13:36:51.994]                             next
[13:36:51.994]                           if (!grepl(pattern, name)) 
[13:36:51.994]                             next
[13:36:51.994]                           invokeRestart(restart)
[13:36:51.994]                           muffled <- TRUE
[13:36:51.994]                           break
[13:36:51.994]                         }
[13:36:51.994]                       }
[13:36:51.994]                     }
[13:36:51.994]                     invisible(muffled)
[13:36:51.994]                   }
[13:36:51.994]                   muffleCondition(cond)
[13:36:51.994]                 })
[13:36:51.994]             }))
[13:36:51.994]             future::FutureResult(value = ...future.value$value, 
[13:36:51.994]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.994]                   ...future.rng), globalenv = if (FALSE) 
[13:36:51.994]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:51.994]                     ...future.globalenv.names))
[13:36:51.994]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:51.994]         }, condition = base::local({
[13:36:51.994]             c <- base::c
[13:36:51.994]             inherits <- base::inherits
[13:36:51.994]             invokeRestart <- base::invokeRestart
[13:36:51.994]             length <- base::length
[13:36:51.994]             list <- base::list
[13:36:51.994]             seq.int <- base::seq.int
[13:36:51.994]             signalCondition <- base::signalCondition
[13:36:51.994]             sys.calls <- base::sys.calls
[13:36:51.994]             `[[` <- base::`[[`
[13:36:51.994]             `+` <- base::`+`
[13:36:51.994]             `<<-` <- base::`<<-`
[13:36:51.994]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:51.994]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:51.994]                   3L)]
[13:36:51.994]             }
[13:36:51.994]             function(cond) {
[13:36:51.994]                 is_error <- inherits(cond, "error")
[13:36:51.994]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:51.994]                   NULL)
[13:36:51.994]                 if (is_error) {
[13:36:51.994]                   sessionInformation <- function() {
[13:36:51.994]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:51.994]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:51.994]                       search = base::search(), system = base::Sys.info())
[13:36:51.994]                   }
[13:36:51.994]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.994]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:51.994]                     cond$call), session = sessionInformation(), 
[13:36:51.994]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:51.994]                   signalCondition(cond)
[13:36:51.994]                 }
[13:36:51.994]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:51.994]                 "immediateCondition"))) {
[13:36:51.994]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:51.994]                   ...future.conditions[[length(...future.conditions) + 
[13:36:51.994]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:51.994]                   if (TRUE && !signal) {
[13:36:51.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.994]                     {
[13:36:51.994]                       inherits <- base::inherits
[13:36:51.994]                       invokeRestart <- base::invokeRestart
[13:36:51.994]                       is.null <- base::is.null
[13:36:51.994]                       muffled <- FALSE
[13:36:51.994]                       if (inherits(cond, "message")) {
[13:36:51.994]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.994]                         if (muffled) 
[13:36:51.994]                           invokeRestart("muffleMessage")
[13:36:51.994]                       }
[13:36:51.994]                       else if (inherits(cond, "warning")) {
[13:36:51.994]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.994]                         if (muffled) 
[13:36:51.994]                           invokeRestart("muffleWarning")
[13:36:51.994]                       }
[13:36:51.994]                       else if (inherits(cond, "condition")) {
[13:36:51.994]                         if (!is.null(pattern)) {
[13:36:51.994]                           computeRestarts <- base::computeRestarts
[13:36:51.994]                           grepl <- base::grepl
[13:36:51.994]                           restarts <- computeRestarts(cond)
[13:36:51.994]                           for (restart in restarts) {
[13:36:51.994]                             name <- restart$name
[13:36:51.994]                             if (is.null(name)) 
[13:36:51.994]                               next
[13:36:51.994]                             if (!grepl(pattern, name)) 
[13:36:51.994]                               next
[13:36:51.994]                             invokeRestart(restart)
[13:36:51.994]                             muffled <- TRUE
[13:36:51.994]                             break
[13:36:51.994]                           }
[13:36:51.994]                         }
[13:36:51.994]                       }
[13:36:51.994]                       invisible(muffled)
[13:36:51.994]                     }
[13:36:51.994]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.994]                   }
[13:36:51.994]                 }
[13:36:51.994]                 else {
[13:36:51.994]                   if (TRUE) {
[13:36:51.994]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:51.994]                     {
[13:36:51.994]                       inherits <- base::inherits
[13:36:51.994]                       invokeRestart <- base::invokeRestart
[13:36:51.994]                       is.null <- base::is.null
[13:36:51.994]                       muffled <- FALSE
[13:36:51.994]                       if (inherits(cond, "message")) {
[13:36:51.994]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:51.994]                         if (muffled) 
[13:36:51.994]                           invokeRestart("muffleMessage")
[13:36:51.994]                       }
[13:36:51.994]                       else if (inherits(cond, "warning")) {
[13:36:51.994]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:51.994]                         if (muffled) 
[13:36:51.994]                           invokeRestart("muffleWarning")
[13:36:51.994]                       }
[13:36:51.994]                       else if (inherits(cond, "condition")) {
[13:36:51.994]                         if (!is.null(pattern)) {
[13:36:51.994]                           computeRestarts <- base::computeRestarts
[13:36:51.994]                           grepl <- base::grepl
[13:36:51.994]                           restarts <- computeRestarts(cond)
[13:36:51.994]                           for (restart in restarts) {
[13:36:51.994]                             name <- restart$name
[13:36:51.994]                             if (is.null(name)) 
[13:36:51.994]                               next
[13:36:51.994]                             if (!grepl(pattern, name)) 
[13:36:51.994]                               next
[13:36:51.994]                             invokeRestart(restart)
[13:36:51.994]                             muffled <- TRUE
[13:36:51.994]                             break
[13:36:51.994]                           }
[13:36:51.994]                         }
[13:36:51.994]                       }
[13:36:51.994]                       invisible(muffled)
[13:36:51.994]                     }
[13:36:51.994]                     muffleCondition(cond, pattern = "^muffle")
[13:36:51.994]                   }
[13:36:51.994]                 }
[13:36:51.994]             }
[13:36:51.994]         }))
[13:36:51.994]     }, error = function(ex) {
[13:36:51.994]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:51.994]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:51.994]                 ...future.rng), started = ...future.startTime, 
[13:36:51.994]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:51.994]             version = "1.8"), class = "FutureResult")
[13:36:51.994]     }, finally = {
[13:36:51.994]         if (!identical(...future.workdir, getwd())) 
[13:36:51.994]             setwd(...future.workdir)
[13:36:51.994]         {
[13:36:51.994]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:51.994]                 ...future.oldOptions$nwarnings <- NULL
[13:36:51.994]             }
[13:36:51.994]             base::options(...future.oldOptions)
[13:36:51.994]             if (.Platform$OS.type == "windows") {
[13:36:51.994]                 old_names <- names(...future.oldEnvVars)
[13:36:51.994]                 envs <- base::Sys.getenv()
[13:36:51.994]                 names <- names(envs)
[13:36:51.994]                 common <- intersect(names, old_names)
[13:36:51.994]                 added <- setdiff(names, old_names)
[13:36:51.994]                 removed <- setdiff(old_names, names)
[13:36:51.994]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:51.994]                   envs[common]]
[13:36:51.994]                 NAMES <- toupper(changed)
[13:36:51.994]                 args <- list()
[13:36:51.994]                 for (kk in seq_along(NAMES)) {
[13:36:51.994]                   name <- changed[[kk]]
[13:36:51.994]                   NAME <- NAMES[[kk]]
[13:36:51.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.994]                     next
[13:36:51.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.994]                 }
[13:36:51.994]                 NAMES <- toupper(added)
[13:36:51.994]                 for (kk in seq_along(NAMES)) {
[13:36:51.994]                   name <- added[[kk]]
[13:36:51.994]                   NAME <- NAMES[[kk]]
[13:36:51.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.994]                     next
[13:36:51.994]                   args[[name]] <- ""
[13:36:51.994]                 }
[13:36:51.994]                 NAMES <- toupper(removed)
[13:36:51.994]                 for (kk in seq_along(NAMES)) {
[13:36:51.994]                   name <- removed[[kk]]
[13:36:51.994]                   NAME <- NAMES[[kk]]
[13:36:51.994]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:51.994]                     next
[13:36:51.994]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:51.994]                 }
[13:36:51.994]                 if (length(args) > 0) 
[13:36:51.994]                   base::do.call(base::Sys.setenv, args = args)
[13:36:51.994]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:51.994]             }
[13:36:51.994]             else {
[13:36:51.994]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:51.994]             }
[13:36:51.994]             {
[13:36:51.994]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:51.994]                   0L) {
[13:36:51.994]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:51.994]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:51.994]                   base::options(opts)
[13:36:51.994]                 }
[13:36:51.994]                 {
[13:36:51.994]                   {
[13:36:51.994]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:51.994]                     NULL
[13:36:51.994]                   }
[13:36:51.994]                   options(future.plan = NULL)
[13:36:51.994]                   if (is.na(NA_character_)) 
[13:36:51.994]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:51.994]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:51.994]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:51.994]                     .init = FALSE)
[13:36:51.994]                 }
[13:36:51.994]             }
[13:36:51.994]         }
[13:36:51.994]     })
[13:36:51.994]     if (TRUE) {
[13:36:51.994]         base::sink(type = "output", split = FALSE)
[13:36:51.994]         if (TRUE) {
[13:36:51.994]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:51.994]         }
[13:36:51.994]         else {
[13:36:51.994]             ...future.result["stdout"] <- base::list(NULL)
[13:36:51.994]         }
[13:36:51.994]         base::close(...future.stdout)
[13:36:51.994]         ...future.stdout <- NULL
[13:36:51.994]     }
[13:36:51.994]     ...future.result$conditions <- ...future.conditions
[13:36:51.994]     ...future.result$finished <- base::Sys.time()
[13:36:51.994]     ...future.result
[13:36:51.994] }
[13:36:51.996] assign_globals() ...
[13:36:51.996] List of 1
[13:36:51.996]  $ x: list()
[13:36:51.996]  - attr(*, "where")=List of 1
[13:36:51.996]   ..$ x:<environment: R_EmptyEnv> 
[13:36:51.996]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:51.996]  - attr(*, "resolved")= logi TRUE
[13:36:51.996]  - attr(*, "total_size")= num 0
[13:36:51.996]  - attr(*, "already-done")= logi TRUE
[13:36:51.999] - copied ‘x’ to environment
[13:36:51.999] assign_globals() ... done
[13:36:51.999] requestCore(): workers = 2
[13:36:52.001] MulticoreFuture started
[13:36:52.001] - Launch lazy future ... done
[13:36:52.001] run() for ‘MulticoreFuture’ ... done
[13:36:52.001] result() for MulticoreFuture ...
[13:36:52.002] plan(): Setting new future strategy stack:
[13:36:52.002] List of future strategies:
[13:36:52.002] 1. sequential:
[13:36:52.002]    - args: function (..., envir = parent.frame())
[13:36:52.002]    - tweaked: FALSE
[13:36:52.002]    - call: NULL
[13:36:52.003] plan(): nbrOfWorkers() = 1
[13:36:52.005] plan(): Setting new future strategy stack:
[13:36:52.005] List of future strategies:
[13:36:52.005] 1. multicore:
[13:36:52.005]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.005]    - tweaked: FALSE
[13:36:52.005]    - call: plan(strategy)
[13:36:52.010] plan(): nbrOfWorkers() = 2
[13:36:52.011] result() for MulticoreFuture ...
[13:36:52.011] result() for MulticoreFuture ... done
[13:36:52.011] result() for MulticoreFuture ... done
[13:36:52.011] result() for MulticoreFuture ...
[13:36:52.011] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.012] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.012] Searching for globals...
[13:36:52.015] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:52.015] Searching for globals ... DONE
[13:36:52.015] Resolving globals: TRUE
[13:36:52.015] Resolving any globals that are futures ...
[13:36:52.015] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:52.016] Resolving any globals that are futures ... DONE
[13:36:52.016] Resolving futures part of globals (recursively) ...
[13:36:52.016] resolve() on list ...
[13:36:52.017]  recursive: 99
[13:36:52.017]  length: 1
[13:36:52.017]  elements: ‘x’
[13:36:52.017]  length: 0 (resolved future 1)
[13:36:52.017] resolve() on list ... DONE
[13:36:52.017] - globals: [1] ‘x’
[13:36:52.017] Resolving futures part of globals (recursively) ... DONE
[13:36:52.017] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.018] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.018] - globals: [1] ‘x’
[13:36:52.018] 
[13:36:52.018] getGlobalsAndPackages() ... DONE
[13:36:52.019] run() for ‘Future’ ...
[13:36:52.019] - state: ‘created’
[13:36:52.019] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.023] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.023] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:52.023]   - Field: ‘label’
[13:36:52.023]   - Field: ‘local’
[13:36:52.023]   - Field: ‘owner’
[13:36:52.023]   - Field: ‘envir’
[13:36:52.023]   - Field: ‘workers’
[13:36:52.024]   - Field: ‘packages’
[13:36:52.024]   - Field: ‘gc’
[13:36:52.024]   - Field: ‘job’
[13:36:52.024]   - Field: ‘conditions’
[13:36:52.024]   - Field: ‘expr’
[13:36:52.024]   - Field: ‘uuid’
[13:36:52.024]   - Field: ‘seed’
[13:36:52.024]   - Field: ‘version’
[13:36:52.024]   - Field: ‘result’
[13:36:52.024]   - Field: ‘asynchronous’
[13:36:52.025]   - Field: ‘calls’
[13:36:52.025]   - Field: ‘globals’
[13:36:52.025]   - Field: ‘stdout’
[13:36:52.025]   - Field: ‘earlySignal’
[13:36:52.025]   - Field: ‘lazy’
[13:36:52.025]   - Field: ‘state’
[13:36:52.025] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:52.025] - Launch lazy future ...
[13:36:52.026] Packages needed by the future expression (n = 0): <none>
[13:36:52.026] Packages needed by future strategies (n = 0): <none>
[13:36:52.026] {
[13:36:52.026]     {
[13:36:52.026]         {
[13:36:52.026]             ...future.startTime <- base::Sys.time()
[13:36:52.026]             {
[13:36:52.026]                 {
[13:36:52.026]                   {
[13:36:52.026]                     {
[13:36:52.026]                       base::local({
[13:36:52.026]                         has_future <- base::requireNamespace("future", 
[13:36:52.026]                           quietly = TRUE)
[13:36:52.026]                         if (has_future) {
[13:36:52.026]                           ns <- base::getNamespace("future")
[13:36:52.026]                           version <- ns[[".package"]][["version"]]
[13:36:52.026]                           if (is.null(version)) 
[13:36:52.026]                             version <- utils::packageVersion("future")
[13:36:52.026]                         }
[13:36:52.026]                         else {
[13:36:52.026]                           version <- NULL
[13:36:52.026]                         }
[13:36:52.026]                         if (!has_future || version < "1.8.0") {
[13:36:52.026]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.026]                             "", base::R.version$version.string), 
[13:36:52.026]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.026]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.026]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.026]                               "release", "version")], collapse = " "), 
[13:36:52.026]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.026]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.026]                             info)
[13:36:52.026]                           info <- base::paste(info, collapse = "; ")
[13:36:52.026]                           if (!has_future) {
[13:36:52.026]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.026]                               info)
[13:36:52.026]                           }
[13:36:52.026]                           else {
[13:36:52.026]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.026]                               info, version)
[13:36:52.026]                           }
[13:36:52.026]                           base::stop(msg)
[13:36:52.026]                         }
[13:36:52.026]                       })
[13:36:52.026]                     }
[13:36:52.026]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.026]                     base::options(mc.cores = 1L)
[13:36:52.026]                   }
[13:36:52.026]                   ...future.strategy.old <- future::plan("list")
[13:36:52.026]                   options(future.plan = NULL)
[13:36:52.026]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.026]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.026]                 }
[13:36:52.026]                 ...future.workdir <- getwd()
[13:36:52.026]             }
[13:36:52.026]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.026]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.026]         }
[13:36:52.026]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.026]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.026]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.026]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.026]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.026]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.026]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.026]             base::names(...future.oldOptions))
[13:36:52.026]     }
[13:36:52.026]     if (FALSE) {
[13:36:52.026]     }
[13:36:52.026]     else {
[13:36:52.026]         if (TRUE) {
[13:36:52.026]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.026]                 open = "w")
[13:36:52.026]         }
[13:36:52.026]         else {
[13:36:52.026]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.026]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.026]         }
[13:36:52.026]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.026]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.026]             base::sink(type = "output", split = FALSE)
[13:36:52.026]             base::close(...future.stdout)
[13:36:52.026]         }, add = TRUE)
[13:36:52.026]     }
[13:36:52.026]     ...future.frame <- base::sys.nframe()
[13:36:52.026]     ...future.conditions <- base::list()
[13:36:52.026]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.026]     if (FALSE) {
[13:36:52.026]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.026]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.026]     }
[13:36:52.026]     ...future.result <- base::tryCatch({
[13:36:52.026]         base::withCallingHandlers({
[13:36:52.026]             ...future.value <- base::withVisible(base::local({
[13:36:52.026]                 withCallingHandlers({
[13:36:52.026]                   {
[13:36:52.026]                     x[["a"]] <- 1
[13:36:52.026]                     x
[13:36:52.026]                   }
[13:36:52.026]                 }, immediateCondition = function(cond) {
[13:36:52.026]                   save_rds <- function (object, pathname, ...) 
[13:36:52.026]                   {
[13:36:52.026]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:52.026]                     if (file_test("-f", pathname_tmp)) {
[13:36:52.026]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.026]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:52.026]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.026]                         fi_tmp[["mtime"]])
[13:36:52.026]                     }
[13:36:52.026]                     tryCatch({
[13:36:52.026]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:52.026]                     }, error = function(ex) {
[13:36:52.026]                       msg <- conditionMessage(ex)
[13:36:52.026]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.026]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:52.026]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.026]                         fi_tmp[["mtime"]], msg)
[13:36:52.026]                       ex$message <- msg
[13:36:52.026]                       stop(ex)
[13:36:52.026]                     })
[13:36:52.026]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:52.026]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:52.026]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:52.026]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.026]                       fi <- file.info(pathname)
[13:36:52.026]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:52.026]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.026]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:52.026]                         fi[["size"]], fi[["mtime"]])
[13:36:52.026]                       stop(msg)
[13:36:52.026]                     }
[13:36:52.026]                     invisible(pathname)
[13:36:52.026]                   }
[13:36:52.026]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:52.026]                     rootPath = tempdir()) 
[13:36:52.026]                   {
[13:36:52.026]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:52.026]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:52.026]                       tmpdir = path, fileext = ".rds")
[13:36:52.026]                     save_rds(obj, file)
[13:36:52.026]                   }
[13:36:52.026]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:52.026]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.026]                   {
[13:36:52.026]                     inherits <- base::inherits
[13:36:52.026]                     invokeRestart <- base::invokeRestart
[13:36:52.026]                     is.null <- base::is.null
[13:36:52.026]                     muffled <- FALSE
[13:36:52.026]                     if (inherits(cond, "message")) {
[13:36:52.026]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.026]                       if (muffled) 
[13:36:52.026]                         invokeRestart("muffleMessage")
[13:36:52.026]                     }
[13:36:52.026]                     else if (inherits(cond, "warning")) {
[13:36:52.026]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.026]                       if (muffled) 
[13:36:52.026]                         invokeRestart("muffleWarning")
[13:36:52.026]                     }
[13:36:52.026]                     else if (inherits(cond, "condition")) {
[13:36:52.026]                       if (!is.null(pattern)) {
[13:36:52.026]                         computeRestarts <- base::computeRestarts
[13:36:52.026]                         grepl <- base::grepl
[13:36:52.026]                         restarts <- computeRestarts(cond)
[13:36:52.026]                         for (restart in restarts) {
[13:36:52.026]                           name <- restart$name
[13:36:52.026]                           if (is.null(name)) 
[13:36:52.026]                             next
[13:36:52.026]                           if (!grepl(pattern, name)) 
[13:36:52.026]                             next
[13:36:52.026]                           invokeRestart(restart)
[13:36:52.026]                           muffled <- TRUE
[13:36:52.026]                           break
[13:36:52.026]                         }
[13:36:52.026]                       }
[13:36:52.026]                     }
[13:36:52.026]                     invisible(muffled)
[13:36:52.026]                   }
[13:36:52.026]                   muffleCondition(cond)
[13:36:52.026]                 })
[13:36:52.026]             }))
[13:36:52.026]             future::FutureResult(value = ...future.value$value, 
[13:36:52.026]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.026]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.026]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.026]                     ...future.globalenv.names))
[13:36:52.026]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.026]         }, condition = base::local({
[13:36:52.026]             c <- base::c
[13:36:52.026]             inherits <- base::inherits
[13:36:52.026]             invokeRestart <- base::invokeRestart
[13:36:52.026]             length <- base::length
[13:36:52.026]             list <- base::list
[13:36:52.026]             seq.int <- base::seq.int
[13:36:52.026]             signalCondition <- base::signalCondition
[13:36:52.026]             sys.calls <- base::sys.calls
[13:36:52.026]             `[[` <- base::`[[`
[13:36:52.026]             `+` <- base::`+`
[13:36:52.026]             `<<-` <- base::`<<-`
[13:36:52.026]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.026]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.026]                   3L)]
[13:36:52.026]             }
[13:36:52.026]             function(cond) {
[13:36:52.026]                 is_error <- inherits(cond, "error")
[13:36:52.026]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.026]                   NULL)
[13:36:52.026]                 if (is_error) {
[13:36:52.026]                   sessionInformation <- function() {
[13:36:52.026]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.026]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.026]                       search = base::search(), system = base::Sys.info())
[13:36:52.026]                   }
[13:36:52.026]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.026]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.026]                     cond$call), session = sessionInformation(), 
[13:36:52.026]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.026]                   signalCondition(cond)
[13:36:52.026]                 }
[13:36:52.026]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.026]                 "immediateCondition"))) {
[13:36:52.026]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.026]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.026]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.026]                   if (TRUE && !signal) {
[13:36:52.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.026]                     {
[13:36:52.026]                       inherits <- base::inherits
[13:36:52.026]                       invokeRestart <- base::invokeRestart
[13:36:52.026]                       is.null <- base::is.null
[13:36:52.026]                       muffled <- FALSE
[13:36:52.026]                       if (inherits(cond, "message")) {
[13:36:52.026]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.026]                         if (muffled) 
[13:36:52.026]                           invokeRestart("muffleMessage")
[13:36:52.026]                       }
[13:36:52.026]                       else if (inherits(cond, "warning")) {
[13:36:52.026]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.026]                         if (muffled) 
[13:36:52.026]                           invokeRestart("muffleWarning")
[13:36:52.026]                       }
[13:36:52.026]                       else if (inherits(cond, "condition")) {
[13:36:52.026]                         if (!is.null(pattern)) {
[13:36:52.026]                           computeRestarts <- base::computeRestarts
[13:36:52.026]                           grepl <- base::grepl
[13:36:52.026]                           restarts <- computeRestarts(cond)
[13:36:52.026]                           for (restart in restarts) {
[13:36:52.026]                             name <- restart$name
[13:36:52.026]                             if (is.null(name)) 
[13:36:52.026]                               next
[13:36:52.026]                             if (!grepl(pattern, name)) 
[13:36:52.026]                               next
[13:36:52.026]                             invokeRestart(restart)
[13:36:52.026]                             muffled <- TRUE
[13:36:52.026]                             break
[13:36:52.026]                           }
[13:36:52.026]                         }
[13:36:52.026]                       }
[13:36:52.026]                       invisible(muffled)
[13:36:52.026]                     }
[13:36:52.026]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.026]                   }
[13:36:52.026]                 }
[13:36:52.026]                 else {
[13:36:52.026]                   if (TRUE) {
[13:36:52.026]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.026]                     {
[13:36:52.026]                       inherits <- base::inherits
[13:36:52.026]                       invokeRestart <- base::invokeRestart
[13:36:52.026]                       is.null <- base::is.null
[13:36:52.026]                       muffled <- FALSE
[13:36:52.026]                       if (inherits(cond, "message")) {
[13:36:52.026]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.026]                         if (muffled) 
[13:36:52.026]                           invokeRestart("muffleMessage")
[13:36:52.026]                       }
[13:36:52.026]                       else if (inherits(cond, "warning")) {
[13:36:52.026]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.026]                         if (muffled) 
[13:36:52.026]                           invokeRestart("muffleWarning")
[13:36:52.026]                       }
[13:36:52.026]                       else if (inherits(cond, "condition")) {
[13:36:52.026]                         if (!is.null(pattern)) {
[13:36:52.026]                           computeRestarts <- base::computeRestarts
[13:36:52.026]                           grepl <- base::grepl
[13:36:52.026]                           restarts <- computeRestarts(cond)
[13:36:52.026]                           for (restart in restarts) {
[13:36:52.026]                             name <- restart$name
[13:36:52.026]                             if (is.null(name)) 
[13:36:52.026]                               next
[13:36:52.026]                             if (!grepl(pattern, name)) 
[13:36:52.026]                               next
[13:36:52.026]                             invokeRestart(restart)
[13:36:52.026]                             muffled <- TRUE
[13:36:52.026]                             break
[13:36:52.026]                           }
[13:36:52.026]                         }
[13:36:52.026]                       }
[13:36:52.026]                       invisible(muffled)
[13:36:52.026]                     }
[13:36:52.026]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.026]                   }
[13:36:52.026]                 }
[13:36:52.026]             }
[13:36:52.026]         }))
[13:36:52.026]     }, error = function(ex) {
[13:36:52.026]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.026]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.026]                 ...future.rng), started = ...future.startTime, 
[13:36:52.026]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.026]             version = "1.8"), class = "FutureResult")
[13:36:52.026]     }, finally = {
[13:36:52.026]         if (!identical(...future.workdir, getwd())) 
[13:36:52.026]             setwd(...future.workdir)
[13:36:52.026]         {
[13:36:52.026]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.026]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.026]             }
[13:36:52.026]             base::options(...future.oldOptions)
[13:36:52.026]             if (.Platform$OS.type == "windows") {
[13:36:52.026]                 old_names <- names(...future.oldEnvVars)
[13:36:52.026]                 envs <- base::Sys.getenv()
[13:36:52.026]                 names <- names(envs)
[13:36:52.026]                 common <- intersect(names, old_names)
[13:36:52.026]                 added <- setdiff(names, old_names)
[13:36:52.026]                 removed <- setdiff(old_names, names)
[13:36:52.026]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.026]                   envs[common]]
[13:36:52.026]                 NAMES <- toupper(changed)
[13:36:52.026]                 args <- list()
[13:36:52.026]                 for (kk in seq_along(NAMES)) {
[13:36:52.026]                   name <- changed[[kk]]
[13:36:52.026]                   NAME <- NAMES[[kk]]
[13:36:52.026]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.026]                     next
[13:36:52.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.026]                 }
[13:36:52.026]                 NAMES <- toupper(added)
[13:36:52.026]                 for (kk in seq_along(NAMES)) {
[13:36:52.026]                   name <- added[[kk]]
[13:36:52.026]                   NAME <- NAMES[[kk]]
[13:36:52.026]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.026]                     next
[13:36:52.026]                   args[[name]] <- ""
[13:36:52.026]                 }
[13:36:52.026]                 NAMES <- toupper(removed)
[13:36:52.026]                 for (kk in seq_along(NAMES)) {
[13:36:52.026]                   name <- removed[[kk]]
[13:36:52.026]                   NAME <- NAMES[[kk]]
[13:36:52.026]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.026]                     next
[13:36:52.026]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.026]                 }
[13:36:52.026]                 if (length(args) > 0) 
[13:36:52.026]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.026]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.026]             }
[13:36:52.026]             else {
[13:36:52.026]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.026]             }
[13:36:52.026]             {
[13:36:52.026]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.026]                   0L) {
[13:36:52.026]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.026]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.026]                   base::options(opts)
[13:36:52.026]                 }
[13:36:52.026]                 {
[13:36:52.026]                   {
[13:36:52.026]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.026]                     NULL
[13:36:52.026]                   }
[13:36:52.026]                   options(future.plan = NULL)
[13:36:52.026]                   if (is.na(NA_character_)) 
[13:36:52.026]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.026]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.026]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.026]                     .init = FALSE)
[13:36:52.026]                 }
[13:36:52.026]             }
[13:36:52.026]         }
[13:36:52.026]     })
[13:36:52.026]     if (TRUE) {
[13:36:52.026]         base::sink(type = "output", split = FALSE)
[13:36:52.026]         if (TRUE) {
[13:36:52.026]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.026]         }
[13:36:52.026]         else {
[13:36:52.026]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.026]         }
[13:36:52.026]         base::close(...future.stdout)
[13:36:52.026]         ...future.stdout <- NULL
[13:36:52.026]     }
[13:36:52.026]     ...future.result$conditions <- ...future.conditions
[13:36:52.026]     ...future.result$finished <- base::Sys.time()
[13:36:52.026]     ...future.result
[13:36:52.026] }
[13:36:52.029] assign_globals() ...
[13:36:52.029] List of 1
[13:36:52.029]  $ x: list()
[13:36:52.029]  - attr(*, "where")=List of 1
[13:36:52.029]   ..$ x:<environment: R_EmptyEnv> 
[13:36:52.029]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:52.029]  - attr(*, "resolved")= logi TRUE
[13:36:52.029]  - attr(*, "total_size")= num 0
[13:36:52.029]  - attr(*, "already-done")= logi TRUE
[13:36:52.035] - copied ‘x’ to environment
[13:36:52.035] assign_globals() ... done
[13:36:52.035] requestCore(): workers = 2
[13:36:52.037] MulticoreFuture started
[13:36:52.037] - Launch lazy future ... done
[13:36:52.037] run() for ‘MulticoreFuture’ ... done
[13:36:52.038] result() for MulticoreFuture ...
[13:36:52.038] plan(): Setting new future strategy stack:
[13:36:52.038] List of future strategies:
[13:36:52.038] 1. sequential:
[13:36:52.038]    - args: function (..., envir = parent.frame())
[13:36:52.038]    - tweaked: FALSE
[13:36:52.038]    - call: NULL
[13:36:52.039] plan(): nbrOfWorkers() = 1
[13:36:52.041] plan(): Setting new future strategy stack:
[13:36:52.041] List of future strategies:
[13:36:52.041] 1. multicore:
[13:36:52.041]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.041]    - tweaked: FALSE
[13:36:52.041]    - call: plan(strategy)
[13:36:52.046] plan(): nbrOfWorkers() = 2
[13:36:52.047] result() for MulticoreFuture ...
[13:36:52.047] result() for MulticoreFuture ... done
[13:36:52.047] result() for MulticoreFuture ... done
[13:36:52.047] result() for MulticoreFuture ...
[13:36:52.047] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.048] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.048] Searching for globals...
[13:36:52.051] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.051] Searching for globals ... DONE
[13:36:52.051] Resolving globals: TRUE
[13:36:52.051] Resolving any globals that are futures ...
[13:36:52.051] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.051] Resolving any globals that are futures ... DONE
[13:36:52.052] Resolving futures part of globals (recursively) ...
[13:36:52.052] resolve() on list ...
[13:36:52.052]  recursive: 99
[13:36:52.052]  length: 1
[13:36:52.053]  elements: ‘x’
[13:36:52.053]  length: 0 (resolved future 1)
[13:36:52.053] resolve() on list ... DONE
[13:36:52.053] - globals: [1] ‘x’
[13:36:52.053] Resolving futures part of globals (recursively) ... DONE
[13:36:52.053] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.054] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.054] - globals: [1] ‘x’
[13:36:52.054] 
[13:36:52.054] getGlobalsAndPackages() ... DONE
[13:36:52.054] run() for ‘Future’ ...
[13:36:52.055] - state: ‘created’
[13:36:52.055] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.059] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.059] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:52.059]   - Field: ‘label’
[13:36:52.059]   - Field: ‘local’
[13:36:52.059]   - Field: ‘owner’
[13:36:52.059]   - Field: ‘envir’
[13:36:52.059]   - Field: ‘workers’
[13:36:52.059]   - Field: ‘packages’
[13:36:52.060]   - Field: ‘gc’
[13:36:52.060]   - Field: ‘job’
[13:36:52.060]   - Field: ‘conditions’
[13:36:52.060]   - Field: ‘expr’
[13:36:52.060]   - Field: ‘uuid’
[13:36:52.060]   - Field: ‘seed’
[13:36:52.060]   - Field: ‘version’
[13:36:52.060]   - Field: ‘result’
[13:36:52.061]   - Field: ‘asynchronous’
[13:36:52.061]   - Field: ‘calls’
[13:36:52.061]   - Field: ‘globals’
[13:36:52.061]   - Field: ‘stdout’
[13:36:52.061]   - Field: ‘earlySignal’
[13:36:52.061]   - Field: ‘lazy’
[13:36:52.061]   - Field: ‘state’
[13:36:52.061] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:52.061] - Launch lazy future ...
[13:36:52.062] Packages needed by the future expression (n = 0): <none>
[13:36:52.062] Packages needed by future strategies (n = 0): <none>
[13:36:52.062] {
[13:36:52.062]     {
[13:36:52.062]         {
[13:36:52.062]             ...future.startTime <- base::Sys.time()
[13:36:52.062]             {
[13:36:52.062]                 {
[13:36:52.062]                   {
[13:36:52.062]                     {
[13:36:52.062]                       base::local({
[13:36:52.062]                         has_future <- base::requireNamespace("future", 
[13:36:52.062]                           quietly = TRUE)
[13:36:52.062]                         if (has_future) {
[13:36:52.062]                           ns <- base::getNamespace("future")
[13:36:52.062]                           version <- ns[[".package"]][["version"]]
[13:36:52.062]                           if (is.null(version)) 
[13:36:52.062]                             version <- utils::packageVersion("future")
[13:36:52.062]                         }
[13:36:52.062]                         else {
[13:36:52.062]                           version <- NULL
[13:36:52.062]                         }
[13:36:52.062]                         if (!has_future || version < "1.8.0") {
[13:36:52.062]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.062]                             "", base::R.version$version.string), 
[13:36:52.062]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.062]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.062]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.062]                               "release", "version")], collapse = " "), 
[13:36:52.062]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.062]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.062]                             info)
[13:36:52.062]                           info <- base::paste(info, collapse = "; ")
[13:36:52.062]                           if (!has_future) {
[13:36:52.062]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.062]                               info)
[13:36:52.062]                           }
[13:36:52.062]                           else {
[13:36:52.062]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.062]                               info, version)
[13:36:52.062]                           }
[13:36:52.062]                           base::stop(msg)
[13:36:52.062]                         }
[13:36:52.062]                       })
[13:36:52.062]                     }
[13:36:52.062]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.062]                     base::options(mc.cores = 1L)
[13:36:52.062]                   }
[13:36:52.062]                   ...future.strategy.old <- future::plan("list")
[13:36:52.062]                   options(future.plan = NULL)
[13:36:52.062]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.062]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.062]                 }
[13:36:52.062]                 ...future.workdir <- getwd()
[13:36:52.062]             }
[13:36:52.062]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.062]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.062]         }
[13:36:52.062]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.062]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.062]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.062]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.062]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.062]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.062]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.062]             base::names(...future.oldOptions))
[13:36:52.062]     }
[13:36:52.062]     if (FALSE) {
[13:36:52.062]     }
[13:36:52.062]     else {
[13:36:52.062]         if (TRUE) {
[13:36:52.062]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.062]                 open = "w")
[13:36:52.062]         }
[13:36:52.062]         else {
[13:36:52.062]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.062]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.062]         }
[13:36:52.062]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.062]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.062]             base::sink(type = "output", split = FALSE)
[13:36:52.062]             base::close(...future.stdout)
[13:36:52.062]         }, add = TRUE)
[13:36:52.062]     }
[13:36:52.062]     ...future.frame <- base::sys.nframe()
[13:36:52.062]     ...future.conditions <- base::list()
[13:36:52.062]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.062]     if (FALSE) {
[13:36:52.062]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.062]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.062]     }
[13:36:52.062]     ...future.result <- base::tryCatch({
[13:36:52.062]         base::withCallingHandlers({
[13:36:52.062]             ...future.value <- base::withVisible(base::local({
[13:36:52.062]                 withCallingHandlers({
[13:36:52.062]                   {
[13:36:52.062]                     x["a"] <- list(1)
[13:36:52.062]                     x
[13:36:52.062]                   }
[13:36:52.062]                 }, immediateCondition = function(cond) {
[13:36:52.062]                   save_rds <- function (object, pathname, ...) 
[13:36:52.062]                   {
[13:36:52.062]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:52.062]                     if (file_test("-f", pathname_tmp)) {
[13:36:52.062]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.062]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:52.062]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.062]                         fi_tmp[["mtime"]])
[13:36:52.062]                     }
[13:36:52.062]                     tryCatch({
[13:36:52.062]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:52.062]                     }, error = function(ex) {
[13:36:52.062]                       msg <- conditionMessage(ex)
[13:36:52.062]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.062]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:52.062]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.062]                         fi_tmp[["mtime"]], msg)
[13:36:52.062]                       ex$message <- msg
[13:36:52.062]                       stop(ex)
[13:36:52.062]                     })
[13:36:52.062]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:52.062]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:52.062]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:52.062]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.062]                       fi <- file.info(pathname)
[13:36:52.062]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:52.062]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.062]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:52.062]                         fi[["size"]], fi[["mtime"]])
[13:36:52.062]                       stop(msg)
[13:36:52.062]                     }
[13:36:52.062]                     invisible(pathname)
[13:36:52.062]                   }
[13:36:52.062]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:52.062]                     rootPath = tempdir()) 
[13:36:52.062]                   {
[13:36:52.062]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:52.062]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:52.062]                       tmpdir = path, fileext = ".rds")
[13:36:52.062]                     save_rds(obj, file)
[13:36:52.062]                   }
[13:36:52.062]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:52.062]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.062]                   {
[13:36:52.062]                     inherits <- base::inherits
[13:36:52.062]                     invokeRestart <- base::invokeRestart
[13:36:52.062]                     is.null <- base::is.null
[13:36:52.062]                     muffled <- FALSE
[13:36:52.062]                     if (inherits(cond, "message")) {
[13:36:52.062]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.062]                       if (muffled) 
[13:36:52.062]                         invokeRestart("muffleMessage")
[13:36:52.062]                     }
[13:36:52.062]                     else if (inherits(cond, "warning")) {
[13:36:52.062]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.062]                       if (muffled) 
[13:36:52.062]                         invokeRestart("muffleWarning")
[13:36:52.062]                     }
[13:36:52.062]                     else if (inherits(cond, "condition")) {
[13:36:52.062]                       if (!is.null(pattern)) {
[13:36:52.062]                         computeRestarts <- base::computeRestarts
[13:36:52.062]                         grepl <- base::grepl
[13:36:52.062]                         restarts <- computeRestarts(cond)
[13:36:52.062]                         for (restart in restarts) {
[13:36:52.062]                           name <- restart$name
[13:36:52.062]                           if (is.null(name)) 
[13:36:52.062]                             next
[13:36:52.062]                           if (!grepl(pattern, name)) 
[13:36:52.062]                             next
[13:36:52.062]                           invokeRestart(restart)
[13:36:52.062]                           muffled <- TRUE
[13:36:52.062]                           break
[13:36:52.062]                         }
[13:36:52.062]                       }
[13:36:52.062]                     }
[13:36:52.062]                     invisible(muffled)
[13:36:52.062]                   }
[13:36:52.062]                   muffleCondition(cond)
[13:36:52.062]                 })
[13:36:52.062]             }))
[13:36:52.062]             future::FutureResult(value = ...future.value$value, 
[13:36:52.062]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.062]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.062]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.062]                     ...future.globalenv.names))
[13:36:52.062]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.062]         }, condition = base::local({
[13:36:52.062]             c <- base::c
[13:36:52.062]             inherits <- base::inherits
[13:36:52.062]             invokeRestart <- base::invokeRestart
[13:36:52.062]             length <- base::length
[13:36:52.062]             list <- base::list
[13:36:52.062]             seq.int <- base::seq.int
[13:36:52.062]             signalCondition <- base::signalCondition
[13:36:52.062]             sys.calls <- base::sys.calls
[13:36:52.062]             `[[` <- base::`[[`
[13:36:52.062]             `+` <- base::`+`
[13:36:52.062]             `<<-` <- base::`<<-`
[13:36:52.062]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.062]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.062]                   3L)]
[13:36:52.062]             }
[13:36:52.062]             function(cond) {
[13:36:52.062]                 is_error <- inherits(cond, "error")
[13:36:52.062]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.062]                   NULL)
[13:36:52.062]                 if (is_error) {
[13:36:52.062]                   sessionInformation <- function() {
[13:36:52.062]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.062]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.062]                       search = base::search(), system = base::Sys.info())
[13:36:52.062]                   }
[13:36:52.062]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.062]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.062]                     cond$call), session = sessionInformation(), 
[13:36:52.062]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.062]                   signalCondition(cond)
[13:36:52.062]                 }
[13:36:52.062]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.062]                 "immediateCondition"))) {
[13:36:52.062]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.062]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.062]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.062]                   if (TRUE && !signal) {
[13:36:52.062]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.062]                     {
[13:36:52.062]                       inherits <- base::inherits
[13:36:52.062]                       invokeRestart <- base::invokeRestart
[13:36:52.062]                       is.null <- base::is.null
[13:36:52.062]                       muffled <- FALSE
[13:36:52.062]                       if (inherits(cond, "message")) {
[13:36:52.062]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.062]                         if (muffled) 
[13:36:52.062]                           invokeRestart("muffleMessage")
[13:36:52.062]                       }
[13:36:52.062]                       else if (inherits(cond, "warning")) {
[13:36:52.062]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.062]                         if (muffled) 
[13:36:52.062]                           invokeRestart("muffleWarning")
[13:36:52.062]                       }
[13:36:52.062]                       else if (inherits(cond, "condition")) {
[13:36:52.062]                         if (!is.null(pattern)) {
[13:36:52.062]                           computeRestarts <- base::computeRestarts
[13:36:52.062]                           grepl <- base::grepl
[13:36:52.062]                           restarts <- computeRestarts(cond)
[13:36:52.062]                           for (restart in restarts) {
[13:36:52.062]                             name <- restart$name
[13:36:52.062]                             if (is.null(name)) 
[13:36:52.062]                               next
[13:36:52.062]                             if (!grepl(pattern, name)) 
[13:36:52.062]                               next
[13:36:52.062]                             invokeRestart(restart)
[13:36:52.062]                             muffled <- TRUE
[13:36:52.062]                             break
[13:36:52.062]                           }
[13:36:52.062]                         }
[13:36:52.062]                       }
[13:36:52.062]                       invisible(muffled)
[13:36:52.062]                     }
[13:36:52.062]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.062]                   }
[13:36:52.062]                 }
[13:36:52.062]                 else {
[13:36:52.062]                   if (TRUE) {
[13:36:52.062]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.062]                     {
[13:36:52.062]                       inherits <- base::inherits
[13:36:52.062]                       invokeRestart <- base::invokeRestart
[13:36:52.062]                       is.null <- base::is.null
[13:36:52.062]                       muffled <- FALSE
[13:36:52.062]                       if (inherits(cond, "message")) {
[13:36:52.062]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.062]                         if (muffled) 
[13:36:52.062]                           invokeRestart("muffleMessage")
[13:36:52.062]                       }
[13:36:52.062]                       else if (inherits(cond, "warning")) {
[13:36:52.062]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.062]                         if (muffled) 
[13:36:52.062]                           invokeRestart("muffleWarning")
[13:36:52.062]                       }
[13:36:52.062]                       else if (inherits(cond, "condition")) {
[13:36:52.062]                         if (!is.null(pattern)) {
[13:36:52.062]                           computeRestarts <- base::computeRestarts
[13:36:52.062]                           grepl <- base::grepl
[13:36:52.062]                           restarts <- computeRestarts(cond)
[13:36:52.062]                           for (restart in restarts) {
[13:36:52.062]                             name <- restart$name
[13:36:52.062]                             if (is.null(name)) 
[13:36:52.062]                               next
[13:36:52.062]                             if (!grepl(pattern, name)) 
[13:36:52.062]                               next
[13:36:52.062]                             invokeRestart(restart)
[13:36:52.062]                             muffled <- TRUE
[13:36:52.062]                             break
[13:36:52.062]                           }
[13:36:52.062]                         }
[13:36:52.062]                       }
[13:36:52.062]                       invisible(muffled)
[13:36:52.062]                     }
[13:36:52.062]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.062]                   }
[13:36:52.062]                 }
[13:36:52.062]             }
[13:36:52.062]         }))
[13:36:52.062]     }, error = function(ex) {
[13:36:52.062]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.062]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.062]                 ...future.rng), started = ...future.startTime, 
[13:36:52.062]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.062]             version = "1.8"), class = "FutureResult")
[13:36:52.062]     }, finally = {
[13:36:52.062]         if (!identical(...future.workdir, getwd())) 
[13:36:52.062]             setwd(...future.workdir)
[13:36:52.062]         {
[13:36:52.062]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.062]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.062]             }
[13:36:52.062]             base::options(...future.oldOptions)
[13:36:52.062]             if (.Platform$OS.type == "windows") {
[13:36:52.062]                 old_names <- names(...future.oldEnvVars)
[13:36:52.062]                 envs <- base::Sys.getenv()
[13:36:52.062]                 names <- names(envs)
[13:36:52.062]                 common <- intersect(names, old_names)
[13:36:52.062]                 added <- setdiff(names, old_names)
[13:36:52.062]                 removed <- setdiff(old_names, names)
[13:36:52.062]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.062]                   envs[common]]
[13:36:52.062]                 NAMES <- toupper(changed)
[13:36:52.062]                 args <- list()
[13:36:52.062]                 for (kk in seq_along(NAMES)) {
[13:36:52.062]                   name <- changed[[kk]]
[13:36:52.062]                   NAME <- NAMES[[kk]]
[13:36:52.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.062]                     next
[13:36:52.062]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.062]                 }
[13:36:52.062]                 NAMES <- toupper(added)
[13:36:52.062]                 for (kk in seq_along(NAMES)) {
[13:36:52.062]                   name <- added[[kk]]
[13:36:52.062]                   NAME <- NAMES[[kk]]
[13:36:52.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.062]                     next
[13:36:52.062]                   args[[name]] <- ""
[13:36:52.062]                 }
[13:36:52.062]                 NAMES <- toupper(removed)
[13:36:52.062]                 for (kk in seq_along(NAMES)) {
[13:36:52.062]                   name <- removed[[kk]]
[13:36:52.062]                   NAME <- NAMES[[kk]]
[13:36:52.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.062]                     next
[13:36:52.062]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.062]                 }
[13:36:52.062]                 if (length(args) > 0) 
[13:36:52.062]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.062]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.062]             }
[13:36:52.062]             else {
[13:36:52.062]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.062]             }
[13:36:52.062]             {
[13:36:52.062]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.062]                   0L) {
[13:36:52.062]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.062]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.062]                   base::options(opts)
[13:36:52.062]                 }
[13:36:52.062]                 {
[13:36:52.062]                   {
[13:36:52.062]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.062]                     NULL
[13:36:52.062]                   }
[13:36:52.062]                   options(future.plan = NULL)
[13:36:52.062]                   if (is.na(NA_character_)) 
[13:36:52.062]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.062]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.062]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.062]                     .init = FALSE)
[13:36:52.062]                 }
[13:36:52.062]             }
[13:36:52.062]         }
[13:36:52.062]     })
[13:36:52.062]     if (TRUE) {
[13:36:52.062]         base::sink(type = "output", split = FALSE)
[13:36:52.062]         if (TRUE) {
[13:36:52.062]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.062]         }
[13:36:52.062]         else {
[13:36:52.062]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.062]         }
[13:36:52.062]         base::close(...future.stdout)
[13:36:52.062]         ...future.stdout <- NULL
[13:36:52.062]     }
[13:36:52.062]     ...future.result$conditions <- ...future.conditions
[13:36:52.062]     ...future.result$finished <- base::Sys.time()
[13:36:52.062]     ...future.result
[13:36:52.062] }
[13:36:52.065] assign_globals() ...
[13:36:52.065] List of 1
[13:36:52.065]  $ x: list()
[13:36:52.065]  - attr(*, "where")=List of 1
[13:36:52.065]   ..$ x:<environment: R_EmptyEnv> 
[13:36:52.065]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:52.065]  - attr(*, "resolved")= logi TRUE
[13:36:52.065]  - attr(*, "total_size")= num 0
[13:36:52.065]  - attr(*, "already-done")= logi TRUE
[13:36:52.068] - copied ‘x’ to environment
[13:36:52.068] assign_globals() ... done
[13:36:52.068] requestCore(): workers = 2
[13:36:52.070] MulticoreFuture started
[13:36:52.070] - Launch lazy future ... done
[13:36:52.071] run() for ‘MulticoreFuture’ ... done
[13:36:52.071] result() for MulticoreFuture ...
[13:36:52.071] plan(): Setting new future strategy stack:
[13:36:52.071] List of future strategies:
[13:36:52.071] 1. sequential:
[13:36:52.071]    - args: function (..., envir = parent.frame())
[13:36:52.071]    - tweaked: FALSE
[13:36:52.071]    - call: NULL
[13:36:52.072] plan(): nbrOfWorkers() = 1
[13:36:52.074] plan(): Setting new future strategy stack:
[13:36:52.074] List of future strategies:
[13:36:52.074] 1. multicore:
[13:36:52.074]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.074]    - tweaked: FALSE
[13:36:52.074]    - call: plan(strategy)
[13:36:52.079] plan(): nbrOfWorkers() = 2
[13:36:52.080] result() for MulticoreFuture ...
[13:36:52.080] result() for MulticoreFuture ... done
[13:36:52.081] result() for MulticoreFuture ... done
[13:36:52.081] result() for MulticoreFuture ...
[13:36:52.081] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.081] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.082] Searching for globals...
[13:36:52.084] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.085] Searching for globals ... DONE
[13:36:52.087] Resolving globals: TRUE
[13:36:52.087] Resolving any globals that are futures ...
[13:36:52.088] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.088] Resolving any globals that are futures ... DONE
[13:36:52.088] Resolving futures part of globals (recursively) ...
[13:36:52.089] resolve() on list ...
[13:36:52.089]  recursive: 99
[13:36:52.089]  length: 1
[13:36:52.089]  elements: ‘x’
[13:36:52.089]  length: 0 (resolved future 1)
[13:36:52.089] resolve() on list ... DONE
[13:36:52.090] - globals: [1] ‘x’
[13:36:52.090] Resolving futures part of globals (recursively) ... DONE
[13:36:52.090] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.090] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.091] - globals: [1] ‘x’
[13:36:52.091] 
[13:36:52.091] getGlobalsAndPackages() ... DONE
[13:36:52.091] run() for ‘Future’ ...
[13:36:52.091] - state: ‘created’
[13:36:52.091] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.095] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.095] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:52.095]   - Field: ‘label’
[13:36:52.096]   - Field: ‘local’
[13:36:52.096]   - Field: ‘owner’
[13:36:52.096]   - Field: ‘envir’
[13:36:52.096]   - Field: ‘workers’
[13:36:52.096]   - Field: ‘packages’
[13:36:52.096]   - Field: ‘gc’
[13:36:52.096]   - Field: ‘job’
[13:36:52.096]   - Field: ‘conditions’
[13:36:52.097]   - Field: ‘expr’
[13:36:52.097]   - Field: ‘uuid’
[13:36:52.097]   - Field: ‘seed’
[13:36:52.097]   - Field: ‘version’
[13:36:52.097]   - Field: ‘result’
[13:36:52.097]   - Field: ‘asynchronous’
[13:36:52.097]   - Field: ‘calls’
[13:36:52.097]   - Field: ‘globals’
[13:36:52.097]   - Field: ‘stdout’
[13:36:52.098]   - Field: ‘earlySignal’
[13:36:52.098]   - Field: ‘lazy’
[13:36:52.098]   - Field: ‘state’
[13:36:52.098] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:52.098] - Launch lazy future ...
[13:36:52.098] Packages needed by the future expression (n = 0): <none>
[13:36:52.098] Packages needed by future strategies (n = 0): <none>
[13:36:52.099] {
[13:36:52.099]     {
[13:36:52.099]         {
[13:36:52.099]             ...future.startTime <- base::Sys.time()
[13:36:52.099]             {
[13:36:52.099]                 {
[13:36:52.099]                   {
[13:36:52.099]                     {
[13:36:52.099]                       base::local({
[13:36:52.099]                         has_future <- base::requireNamespace("future", 
[13:36:52.099]                           quietly = TRUE)
[13:36:52.099]                         if (has_future) {
[13:36:52.099]                           ns <- base::getNamespace("future")
[13:36:52.099]                           version <- ns[[".package"]][["version"]]
[13:36:52.099]                           if (is.null(version)) 
[13:36:52.099]                             version <- utils::packageVersion("future")
[13:36:52.099]                         }
[13:36:52.099]                         else {
[13:36:52.099]                           version <- NULL
[13:36:52.099]                         }
[13:36:52.099]                         if (!has_future || version < "1.8.0") {
[13:36:52.099]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.099]                             "", base::R.version$version.string), 
[13:36:52.099]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.099]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.099]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.099]                               "release", "version")], collapse = " "), 
[13:36:52.099]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.099]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.099]                             info)
[13:36:52.099]                           info <- base::paste(info, collapse = "; ")
[13:36:52.099]                           if (!has_future) {
[13:36:52.099]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.099]                               info)
[13:36:52.099]                           }
[13:36:52.099]                           else {
[13:36:52.099]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.099]                               info, version)
[13:36:52.099]                           }
[13:36:52.099]                           base::stop(msg)
[13:36:52.099]                         }
[13:36:52.099]                       })
[13:36:52.099]                     }
[13:36:52.099]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.099]                     base::options(mc.cores = 1L)
[13:36:52.099]                   }
[13:36:52.099]                   ...future.strategy.old <- future::plan("list")
[13:36:52.099]                   options(future.plan = NULL)
[13:36:52.099]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.099]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.099]                 }
[13:36:52.099]                 ...future.workdir <- getwd()
[13:36:52.099]             }
[13:36:52.099]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.099]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.099]         }
[13:36:52.099]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.099]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.099]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.099]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.099]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.099]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.099]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.099]             base::names(...future.oldOptions))
[13:36:52.099]     }
[13:36:52.099]     if (FALSE) {
[13:36:52.099]     }
[13:36:52.099]     else {
[13:36:52.099]         if (TRUE) {
[13:36:52.099]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.099]                 open = "w")
[13:36:52.099]         }
[13:36:52.099]         else {
[13:36:52.099]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.099]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.099]         }
[13:36:52.099]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.099]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.099]             base::sink(type = "output", split = FALSE)
[13:36:52.099]             base::close(...future.stdout)
[13:36:52.099]         }, add = TRUE)
[13:36:52.099]     }
[13:36:52.099]     ...future.frame <- base::sys.nframe()
[13:36:52.099]     ...future.conditions <- base::list()
[13:36:52.099]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.099]     if (FALSE) {
[13:36:52.099]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.099]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.099]     }
[13:36:52.099]     ...future.result <- base::tryCatch({
[13:36:52.099]         base::withCallingHandlers({
[13:36:52.099]             ...future.value <- base::withVisible(base::local({
[13:36:52.099]                 withCallingHandlers({
[13:36:52.099]                   {
[13:36:52.099]                     x["a"] <- list(1)
[13:36:52.099]                     x
[13:36:52.099]                   }
[13:36:52.099]                 }, immediateCondition = function(cond) {
[13:36:52.099]                   save_rds <- function (object, pathname, ...) 
[13:36:52.099]                   {
[13:36:52.099]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:52.099]                     if (file_test("-f", pathname_tmp)) {
[13:36:52.099]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.099]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:52.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.099]                         fi_tmp[["mtime"]])
[13:36:52.099]                     }
[13:36:52.099]                     tryCatch({
[13:36:52.099]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:52.099]                     }, error = function(ex) {
[13:36:52.099]                       msg <- conditionMessage(ex)
[13:36:52.099]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.099]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:52.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.099]                         fi_tmp[["mtime"]], msg)
[13:36:52.099]                       ex$message <- msg
[13:36:52.099]                       stop(ex)
[13:36:52.099]                     })
[13:36:52.099]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:52.099]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:52.099]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:52.099]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.099]                       fi <- file.info(pathname)
[13:36:52.099]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:52.099]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.099]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:52.099]                         fi[["size"]], fi[["mtime"]])
[13:36:52.099]                       stop(msg)
[13:36:52.099]                     }
[13:36:52.099]                     invisible(pathname)
[13:36:52.099]                   }
[13:36:52.099]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:52.099]                     rootPath = tempdir()) 
[13:36:52.099]                   {
[13:36:52.099]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:52.099]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:52.099]                       tmpdir = path, fileext = ".rds")
[13:36:52.099]                     save_rds(obj, file)
[13:36:52.099]                   }
[13:36:52.099]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:52.099]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.099]                   {
[13:36:52.099]                     inherits <- base::inherits
[13:36:52.099]                     invokeRestart <- base::invokeRestart
[13:36:52.099]                     is.null <- base::is.null
[13:36:52.099]                     muffled <- FALSE
[13:36:52.099]                     if (inherits(cond, "message")) {
[13:36:52.099]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.099]                       if (muffled) 
[13:36:52.099]                         invokeRestart("muffleMessage")
[13:36:52.099]                     }
[13:36:52.099]                     else if (inherits(cond, "warning")) {
[13:36:52.099]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.099]                       if (muffled) 
[13:36:52.099]                         invokeRestart("muffleWarning")
[13:36:52.099]                     }
[13:36:52.099]                     else if (inherits(cond, "condition")) {
[13:36:52.099]                       if (!is.null(pattern)) {
[13:36:52.099]                         computeRestarts <- base::computeRestarts
[13:36:52.099]                         grepl <- base::grepl
[13:36:52.099]                         restarts <- computeRestarts(cond)
[13:36:52.099]                         for (restart in restarts) {
[13:36:52.099]                           name <- restart$name
[13:36:52.099]                           if (is.null(name)) 
[13:36:52.099]                             next
[13:36:52.099]                           if (!grepl(pattern, name)) 
[13:36:52.099]                             next
[13:36:52.099]                           invokeRestart(restart)
[13:36:52.099]                           muffled <- TRUE
[13:36:52.099]                           break
[13:36:52.099]                         }
[13:36:52.099]                       }
[13:36:52.099]                     }
[13:36:52.099]                     invisible(muffled)
[13:36:52.099]                   }
[13:36:52.099]                   muffleCondition(cond)
[13:36:52.099]                 })
[13:36:52.099]             }))
[13:36:52.099]             future::FutureResult(value = ...future.value$value, 
[13:36:52.099]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.099]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.099]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.099]                     ...future.globalenv.names))
[13:36:52.099]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.099]         }, condition = base::local({
[13:36:52.099]             c <- base::c
[13:36:52.099]             inherits <- base::inherits
[13:36:52.099]             invokeRestart <- base::invokeRestart
[13:36:52.099]             length <- base::length
[13:36:52.099]             list <- base::list
[13:36:52.099]             seq.int <- base::seq.int
[13:36:52.099]             signalCondition <- base::signalCondition
[13:36:52.099]             sys.calls <- base::sys.calls
[13:36:52.099]             `[[` <- base::`[[`
[13:36:52.099]             `+` <- base::`+`
[13:36:52.099]             `<<-` <- base::`<<-`
[13:36:52.099]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.099]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.099]                   3L)]
[13:36:52.099]             }
[13:36:52.099]             function(cond) {
[13:36:52.099]                 is_error <- inherits(cond, "error")
[13:36:52.099]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.099]                   NULL)
[13:36:52.099]                 if (is_error) {
[13:36:52.099]                   sessionInformation <- function() {
[13:36:52.099]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.099]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.099]                       search = base::search(), system = base::Sys.info())
[13:36:52.099]                   }
[13:36:52.099]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.099]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.099]                     cond$call), session = sessionInformation(), 
[13:36:52.099]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.099]                   signalCondition(cond)
[13:36:52.099]                 }
[13:36:52.099]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.099]                 "immediateCondition"))) {
[13:36:52.099]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.099]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.099]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.099]                   if (TRUE && !signal) {
[13:36:52.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.099]                     {
[13:36:52.099]                       inherits <- base::inherits
[13:36:52.099]                       invokeRestart <- base::invokeRestart
[13:36:52.099]                       is.null <- base::is.null
[13:36:52.099]                       muffled <- FALSE
[13:36:52.099]                       if (inherits(cond, "message")) {
[13:36:52.099]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.099]                         if (muffled) 
[13:36:52.099]                           invokeRestart("muffleMessage")
[13:36:52.099]                       }
[13:36:52.099]                       else if (inherits(cond, "warning")) {
[13:36:52.099]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.099]                         if (muffled) 
[13:36:52.099]                           invokeRestart("muffleWarning")
[13:36:52.099]                       }
[13:36:52.099]                       else if (inherits(cond, "condition")) {
[13:36:52.099]                         if (!is.null(pattern)) {
[13:36:52.099]                           computeRestarts <- base::computeRestarts
[13:36:52.099]                           grepl <- base::grepl
[13:36:52.099]                           restarts <- computeRestarts(cond)
[13:36:52.099]                           for (restart in restarts) {
[13:36:52.099]                             name <- restart$name
[13:36:52.099]                             if (is.null(name)) 
[13:36:52.099]                               next
[13:36:52.099]                             if (!grepl(pattern, name)) 
[13:36:52.099]                               next
[13:36:52.099]                             invokeRestart(restart)
[13:36:52.099]                             muffled <- TRUE
[13:36:52.099]                             break
[13:36:52.099]                           }
[13:36:52.099]                         }
[13:36:52.099]                       }
[13:36:52.099]                       invisible(muffled)
[13:36:52.099]                     }
[13:36:52.099]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.099]                   }
[13:36:52.099]                 }
[13:36:52.099]                 else {
[13:36:52.099]                   if (TRUE) {
[13:36:52.099]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.099]                     {
[13:36:52.099]                       inherits <- base::inherits
[13:36:52.099]                       invokeRestart <- base::invokeRestart
[13:36:52.099]                       is.null <- base::is.null
[13:36:52.099]                       muffled <- FALSE
[13:36:52.099]                       if (inherits(cond, "message")) {
[13:36:52.099]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.099]                         if (muffled) 
[13:36:52.099]                           invokeRestart("muffleMessage")
[13:36:52.099]                       }
[13:36:52.099]                       else if (inherits(cond, "warning")) {
[13:36:52.099]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.099]                         if (muffled) 
[13:36:52.099]                           invokeRestart("muffleWarning")
[13:36:52.099]                       }
[13:36:52.099]                       else if (inherits(cond, "condition")) {
[13:36:52.099]                         if (!is.null(pattern)) {
[13:36:52.099]                           computeRestarts <- base::computeRestarts
[13:36:52.099]                           grepl <- base::grepl
[13:36:52.099]                           restarts <- computeRestarts(cond)
[13:36:52.099]                           for (restart in restarts) {
[13:36:52.099]                             name <- restart$name
[13:36:52.099]                             if (is.null(name)) 
[13:36:52.099]                               next
[13:36:52.099]                             if (!grepl(pattern, name)) 
[13:36:52.099]                               next
[13:36:52.099]                             invokeRestart(restart)
[13:36:52.099]                             muffled <- TRUE
[13:36:52.099]                             break
[13:36:52.099]                           }
[13:36:52.099]                         }
[13:36:52.099]                       }
[13:36:52.099]                       invisible(muffled)
[13:36:52.099]                     }
[13:36:52.099]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.099]                   }
[13:36:52.099]                 }
[13:36:52.099]             }
[13:36:52.099]         }))
[13:36:52.099]     }, error = function(ex) {
[13:36:52.099]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.099]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.099]                 ...future.rng), started = ...future.startTime, 
[13:36:52.099]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.099]             version = "1.8"), class = "FutureResult")
[13:36:52.099]     }, finally = {
[13:36:52.099]         if (!identical(...future.workdir, getwd())) 
[13:36:52.099]             setwd(...future.workdir)
[13:36:52.099]         {
[13:36:52.099]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.099]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.099]             }
[13:36:52.099]             base::options(...future.oldOptions)
[13:36:52.099]             if (.Platform$OS.type == "windows") {
[13:36:52.099]                 old_names <- names(...future.oldEnvVars)
[13:36:52.099]                 envs <- base::Sys.getenv()
[13:36:52.099]                 names <- names(envs)
[13:36:52.099]                 common <- intersect(names, old_names)
[13:36:52.099]                 added <- setdiff(names, old_names)
[13:36:52.099]                 removed <- setdiff(old_names, names)
[13:36:52.099]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.099]                   envs[common]]
[13:36:52.099]                 NAMES <- toupper(changed)
[13:36:52.099]                 args <- list()
[13:36:52.099]                 for (kk in seq_along(NAMES)) {
[13:36:52.099]                   name <- changed[[kk]]
[13:36:52.099]                   NAME <- NAMES[[kk]]
[13:36:52.099]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.099]                     next
[13:36:52.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.099]                 }
[13:36:52.099]                 NAMES <- toupper(added)
[13:36:52.099]                 for (kk in seq_along(NAMES)) {
[13:36:52.099]                   name <- added[[kk]]
[13:36:52.099]                   NAME <- NAMES[[kk]]
[13:36:52.099]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.099]                     next
[13:36:52.099]                   args[[name]] <- ""
[13:36:52.099]                 }
[13:36:52.099]                 NAMES <- toupper(removed)
[13:36:52.099]                 for (kk in seq_along(NAMES)) {
[13:36:52.099]                   name <- removed[[kk]]
[13:36:52.099]                   NAME <- NAMES[[kk]]
[13:36:52.099]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.099]                     next
[13:36:52.099]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.099]                 }
[13:36:52.099]                 if (length(args) > 0) 
[13:36:52.099]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.099]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.099]             }
[13:36:52.099]             else {
[13:36:52.099]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.099]             }
[13:36:52.099]             {
[13:36:52.099]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.099]                   0L) {
[13:36:52.099]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.099]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.099]                   base::options(opts)
[13:36:52.099]                 }
[13:36:52.099]                 {
[13:36:52.099]                   {
[13:36:52.099]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.099]                     NULL
[13:36:52.099]                   }
[13:36:52.099]                   options(future.plan = NULL)
[13:36:52.099]                   if (is.na(NA_character_)) 
[13:36:52.099]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.099]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.099]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.099]                     .init = FALSE)
[13:36:52.099]                 }
[13:36:52.099]             }
[13:36:52.099]         }
[13:36:52.099]     })
[13:36:52.099]     if (TRUE) {
[13:36:52.099]         base::sink(type = "output", split = FALSE)
[13:36:52.099]         if (TRUE) {
[13:36:52.099]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.099]         }
[13:36:52.099]         else {
[13:36:52.099]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.099]         }
[13:36:52.099]         base::close(...future.stdout)
[13:36:52.099]         ...future.stdout <- NULL
[13:36:52.099]     }
[13:36:52.099]     ...future.result$conditions <- ...future.conditions
[13:36:52.099]     ...future.result$finished <- base::Sys.time()
[13:36:52.099]     ...future.result
[13:36:52.099] }
[13:36:52.101] assign_globals() ...
[13:36:52.101] List of 1
[13:36:52.101]  $ x: list()
[13:36:52.101]  - attr(*, "where")=List of 1
[13:36:52.101]   ..$ x:<environment: R_EmptyEnv> 
[13:36:52.101]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:52.101]  - attr(*, "resolved")= logi TRUE
[13:36:52.101]  - attr(*, "total_size")= num 0
[13:36:52.101]  - attr(*, "already-done")= logi TRUE
[13:36:52.104] - copied ‘x’ to environment
[13:36:52.104] assign_globals() ... done
[13:36:52.104] requestCore(): workers = 2
[13:36:52.106] MulticoreFuture started
[13:36:52.107] - Launch lazy future ... done
[13:36:52.107] run() for ‘MulticoreFuture’ ... done
[13:36:52.107] result() for MulticoreFuture ...
[13:36:52.107] plan(): Setting new future strategy stack:
[13:36:52.108] List of future strategies:
[13:36:52.108] 1. sequential:
[13:36:52.108]    - args: function (..., envir = parent.frame())
[13:36:52.108]    - tweaked: FALSE
[13:36:52.108]    - call: NULL
[13:36:52.109] plan(): nbrOfWorkers() = 1
[13:36:52.111] plan(): Setting new future strategy stack:
[13:36:52.111] List of future strategies:
[13:36:52.111] 1. multicore:
[13:36:52.111]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.111]    - tweaked: FALSE
[13:36:52.111]    - call: plan(strategy)
[13:36:52.116] plan(): nbrOfWorkers() = 2
[13:36:52.117] result() for MulticoreFuture ...
[13:36:52.117] result() for MulticoreFuture ... done
[13:36:52.117] result() for MulticoreFuture ... done
[13:36:52.117] result() for MulticoreFuture ...
[13:36:52.117] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.118] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.119] Searching for globals...
[13:36:52.121] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.122] Searching for globals ... DONE
[13:36:52.122] Resolving globals: TRUE
[13:36:52.122] Resolving any globals that are futures ...
[13:36:52.122] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:52.122] Resolving any globals that are futures ... DONE
[13:36:52.123] Resolving futures part of globals (recursively) ...
[13:36:52.123] resolve() on list ...
[13:36:52.123]  recursive: 99
[13:36:52.123]  length: 1
[13:36:52.123]  elements: ‘x’
[13:36:52.124]  length: 0 (resolved future 1)
[13:36:52.124] resolve() on list ... DONE
[13:36:52.124] - globals: [1] ‘x’
[13:36:52.124] Resolving futures part of globals (recursively) ... DONE
[13:36:52.124] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.124] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.125] - globals: [1] ‘x’
[13:36:52.125] 
[13:36:52.125] getGlobalsAndPackages() ... DONE
[13:36:52.125] run() for ‘Future’ ...
[13:36:52.125] - state: ‘created’
[13:36:52.125] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.130] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.130] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:52.130]   - Field: ‘label’
[13:36:52.130]   - Field: ‘local’
[13:36:52.130]   - Field: ‘owner’
[13:36:52.130]   - Field: ‘envir’
[13:36:52.130]   - Field: ‘workers’
[13:36:52.130]   - Field: ‘packages’
[13:36:52.131]   - Field: ‘gc’
[13:36:52.131]   - Field: ‘job’
[13:36:52.131]   - Field: ‘conditions’
[13:36:52.131]   - Field: ‘expr’
[13:36:52.131]   - Field: ‘uuid’
[13:36:52.131]   - Field: ‘seed’
[13:36:52.131]   - Field: ‘version’
[13:36:52.131]   - Field: ‘result’
[13:36:52.132]   - Field: ‘asynchronous’
[13:36:52.132]   - Field: ‘calls’
[13:36:52.132]   - Field: ‘globals’
[13:36:52.132]   - Field: ‘stdout’
[13:36:52.132]   - Field: ‘earlySignal’
[13:36:52.132]   - Field: ‘lazy’
[13:36:52.132]   - Field: ‘state’
[13:36:52.132] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:52.132] - Launch lazy future ...
[13:36:52.133] Packages needed by the future expression (n = 0): <none>
[13:36:52.133] Packages needed by future strategies (n = 0): <none>
[13:36:52.136] {
[13:36:52.136]     {
[13:36:52.136]         {
[13:36:52.136]             ...future.startTime <- base::Sys.time()
[13:36:52.136]             {
[13:36:52.136]                 {
[13:36:52.136]                   {
[13:36:52.136]                     {
[13:36:52.136]                       base::local({
[13:36:52.136]                         has_future <- base::requireNamespace("future", 
[13:36:52.136]                           quietly = TRUE)
[13:36:52.136]                         if (has_future) {
[13:36:52.136]                           ns <- base::getNamespace("future")
[13:36:52.136]                           version <- ns[[".package"]][["version"]]
[13:36:52.136]                           if (is.null(version)) 
[13:36:52.136]                             version <- utils::packageVersion("future")
[13:36:52.136]                         }
[13:36:52.136]                         else {
[13:36:52.136]                           version <- NULL
[13:36:52.136]                         }
[13:36:52.136]                         if (!has_future || version < "1.8.0") {
[13:36:52.136]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.136]                             "", base::R.version$version.string), 
[13:36:52.136]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.136]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.136]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.136]                               "release", "version")], collapse = " "), 
[13:36:52.136]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.136]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.136]                             info)
[13:36:52.136]                           info <- base::paste(info, collapse = "; ")
[13:36:52.136]                           if (!has_future) {
[13:36:52.136]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.136]                               info)
[13:36:52.136]                           }
[13:36:52.136]                           else {
[13:36:52.136]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.136]                               info, version)
[13:36:52.136]                           }
[13:36:52.136]                           base::stop(msg)
[13:36:52.136]                         }
[13:36:52.136]                       })
[13:36:52.136]                     }
[13:36:52.136]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.136]                     base::options(mc.cores = 1L)
[13:36:52.136]                   }
[13:36:52.136]                   ...future.strategy.old <- future::plan("list")
[13:36:52.136]                   options(future.plan = NULL)
[13:36:52.136]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.136]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.136]                 }
[13:36:52.136]                 ...future.workdir <- getwd()
[13:36:52.136]             }
[13:36:52.136]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.136]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.136]         }
[13:36:52.136]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.136]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.136]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.136]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.136]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.136]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.136]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.136]             base::names(...future.oldOptions))
[13:36:52.136]     }
[13:36:52.136]     if (FALSE) {
[13:36:52.136]     }
[13:36:52.136]     else {
[13:36:52.136]         if (TRUE) {
[13:36:52.136]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.136]                 open = "w")
[13:36:52.136]         }
[13:36:52.136]         else {
[13:36:52.136]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.136]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.136]         }
[13:36:52.136]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.136]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.136]             base::sink(type = "output", split = FALSE)
[13:36:52.136]             base::close(...future.stdout)
[13:36:52.136]         }, add = TRUE)
[13:36:52.136]     }
[13:36:52.136]     ...future.frame <- base::sys.nframe()
[13:36:52.136]     ...future.conditions <- base::list()
[13:36:52.136]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.136]     if (FALSE) {
[13:36:52.136]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.136]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.136]     }
[13:36:52.136]     ...future.result <- base::tryCatch({
[13:36:52.136]         base::withCallingHandlers({
[13:36:52.136]             ...future.value <- base::withVisible(base::local({
[13:36:52.136]                 withCallingHandlers({
[13:36:52.136]                   {
[13:36:52.136]                     x["a"] <- list(1)
[13:36:52.136]                     x
[13:36:52.136]                   }
[13:36:52.136]                 }, immediateCondition = function(cond) {
[13:36:52.136]                   save_rds <- function (object, pathname, ...) 
[13:36:52.136]                   {
[13:36:52.136]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:52.136]                     if (file_test("-f", pathname_tmp)) {
[13:36:52.136]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.136]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:52.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.136]                         fi_tmp[["mtime"]])
[13:36:52.136]                     }
[13:36:52.136]                     tryCatch({
[13:36:52.136]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:52.136]                     }, error = function(ex) {
[13:36:52.136]                       msg <- conditionMessage(ex)
[13:36:52.136]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.136]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:52.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.136]                         fi_tmp[["mtime"]], msg)
[13:36:52.136]                       ex$message <- msg
[13:36:52.136]                       stop(ex)
[13:36:52.136]                     })
[13:36:52.136]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:52.136]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:52.136]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:52.136]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.136]                       fi <- file.info(pathname)
[13:36:52.136]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:52.136]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.136]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:52.136]                         fi[["size"]], fi[["mtime"]])
[13:36:52.136]                       stop(msg)
[13:36:52.136]                     }
[13:36:52.136]                     invisible(pathname)
[13:36:52.136]                   }
[13:36:52.136]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:52.136]                     rootPath = tempdir()) 
[13:36:52.136]                   {
[13:36:52.136]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:52.136]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:52.136]                       tmpdir = path, fileext = ".rds")
[13:36:52.136]                     save_rds(obj, file)
[13:36:52.136]                   }
[13:36:52.136]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:52.136]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.136]                   {
[13:36:52.136]                     inherits <- base::inherits
[13:36:52.136]                     invokeRestart <- base::invokeRestart
[13:36:52.136]                     is.null <- base::is.null
[13:36:52.136]                     muffled <- FALSE
[13:36:52.136]                     if (inherits(cond, "message")) {
[13:36:52.136]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.136]                       if (muffled) 
[13:36:52.136]                         invokeRestart("muffleMessage")
[13:36:52.136]                     }
[13:36:52.136]                     else if (inherits(cond, "warning")) {
[13:36:52.136]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.136]                       if (muffled) 
[13:36:52.136]                         invokeRestart("muffleWarning")
[13:36:52.136]                     }
[13:36:52.136]                     else if (inherits(cond, "condition")) {
[13:36:52.136]                       if (!is.null(pattern)) {
[13:36:52.136]                         computeRestarts <- base::computeRestarts
[13:36:52.136]                         grepl <- base::grepl
[13:36:52.136]                         restarts <- computeRestarts(cond)
[13:36:52.136]                         for (restart in restarts) {
[13:36:52.136]                           name <- restart$name
[13:36:52.136]                           if (is.null(name)) 
[13:36:52.136]                             next
[13:36:52.136]                           if (!grepl(pattern, name)) 
[13:36:52.136]                             next
[13:36:52.136]                           invokeRestart(restart)
[13:36:52.136]                           muffled <- TRUE
[13:36:52.136]                           break
[13:36:52.136]                         }
[13:36:52.136]                       }
[13:36:52.136]                     }
[13:36:52.136]                     invisible(muffled)
[13:36:52.136]                   }
[13:36:52.136]                   muffleCondition(cond)
[13:36:52.136]                 })
[13:36:52.136]             }))
[13:36:52.136]             future::FutureResult(value = ...future.value$value, 
[13:36:52.136]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.136]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.136]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.136]                     ...future.globalenv.names))
[13:36:52.136]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.136]         }, condition = base::local({
[13:36:52.136]             c <- base::c
[13:36:52.136]             inherits <- base::inherits
[13:36:52.136]             invokeRestart <- base::invokeRestart
[13:36:52.136]             length <- base::length
[13:36:52.136]             list <- base::list
[13:36:52.136]             seq.int <- base::seq.int
[13:36:52.136]             signalCondition <- base::signalCondition
[13:36:52.136]             sys.calls <- base::sys.calls
[13:36:52.136]             `[[` <- base::`[[`
[13:36:52.136]             `+` <- base::`+`
[13:36:52.136]             `<<-` <- base::`<<-`
[13:36:52.136]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.136]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.136]                   3L)]
[13:36:52.136]             }
[13:36:52.136]             function(cond) {
[13:36:52.136]                 is_error <- inherits(cond, "error")
[13:36:52.136]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.136]                   NULL)
[13:36:52.136]                 if (is_error) {
[13:36:52.136]                   sessionInformation <- function() {
[13:36:52.136]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.136]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.136]                       search = base::search(), system = base::Sys.info())
[13:36:52.136]                   }
[13:36:52.136]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.136]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.136]                     cond$call), session = sessionInformation(), 
[13:36:52.136]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.136]                   signalCondition(cond)
[13:36:52.136]                 }
[13:36:52.136]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.136]                 "immediateCondition"))) {
[13:36:52.136]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.136]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.136]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.136]                   if (TRUE && !signal) {
[13:36:52.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.136]                     {
[13:36:52.136]                       inherits <- base::inherits
[13:36:52.136]                       invokeRestart <- base::invokeRestart
[13:36:52.136]                       is.null <- base::is.null
[13:36:52.136]                       muffled <- FALSE
[13:36:52.136]                       if (inherits(cond, "message")) {
[13:36:52.136]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.136]                         if (muffled) 
[13:36:52.136]                           invokeRestart("muffleMessage")
[13:36:52.136]                       }
[13:36:52.136]                       else if (inherits(cond, "warning")) {
[13:36:52.136]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.136]                         if (muffled) 
[13:36:52.136]                           invokeRestart("muffleWarning")
[13:36:52.136]                       }
[13:36:52.136]                       else if (inherits(cond, "condition")) {
[13:36:52.136]                         if (!is.null(pattern)) {
[13:36:52.136]                           computeRestarts <- base::computeRestarts
[13:36:52.136]                           grepl <- base::grepl
[13:36:52.136]                           restarts <- computeRestarts(cond)
[13:36:52.136]                           for (restart in restarts) {
[13:36:52.136]                             name <- restart$name
[13:36:52.136]                             if (is.null(name)) 
[13:36:52.136]                               next
[13:36:52.136]                             if (!grepl(pattern, name)) 
[13:36:52.136]                               next
[13:36:52.136]                             invokeRestart(restart)
[13:36:52.136]                             muffled <- TRUE
[13:36:52.136]                             break
[13:36:52.136]                           }
[13:36:52.136]                         }
[13:36:52.136]                       }
[13:36:52.136]                       invisible(muffled)
[13:36:52.136]                     }
[13:36:52.136]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.136]                   }
[13:36:52.136]                 }
[13:36:52.136]                 else {
[13:36:52.136]                   if (TRUE) {
[13:36:52.136]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.136]                     {
[13:36:52.136]                       inherits <- base::inherits
[13:36:52.136]                       invokeRestart <- base::invokeRestart
[13:36:52.136]                       is.null <- base::is.null
[13:36:52.136]                       muffled <- FALSE
[13:36:52.136]                       if (inherits(cond, "message")) {
[13:36:52.136]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.136]                         if (muffled) 
[13:36:52.136]                           invokeRestart("muffleMessage")
[13:36:52.136]                       }
[13:36:52.136]                       else if (inherits(cond, "warning")) {
[13:36:52.136]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.136]                         if (muffled) 
[13:36:52.136]                           invokeRestart("muffleWarning")
[13:36:52.136]                       }
[13:36:52.136]                       else if (inherits(cond, "condition")) {
[13:36:52.136]                         if (!is.null(pattern)) {
[13:36:52.136]                           computeRestarts <- base::computeRestarts
[13:36:52.136]                           grepl <- base::grepl
[13:36:52.136]                           restarts <- computeRestarts(cond)
[13:36:52.136]                           for (restart in restarts) {
[13:36:52.136]                             name <- restart$name
[13:36:52.136]                             if (is.null(name)) 
[13:36:52.136]                               next
[13:36:52.136]                             if (!grepl(pattern, name)) 
[13:36:52.136]                               next
[13:36:52.136]                             invokeRestart(restart)
[13:36:52.136]                             muffled <- TRUE
[13:36:52.136]                             break
[13:36:52.136]                           }
[13:36:52.136]                         }
[13:36:52.136]                       }
[13:36:52.136]                       invisible(muffled)
[13:36:52.136]                     }
[13:36:52.136]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.136]                   }
[13:36:52.136]                 }
[13:36:52.136]             }
[13:36:52.136]         }))
[13:36:52.136]     }, error = function(ex) {
[13:36:52.136]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.136]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.136]                 ...future.rng), started = ...future.startTime, 
[13:36:52.136]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.136]             version = "1.8"), class = "FutureResult")
[13:36:52.136]     }, finally = {
[13:36:52.136]         if (!identical(...future.workdir, getwd())) 
[13:36:52.136]             setwd(...future.workdir)
[13:36:52.136]         {
[13:36:52.136]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.136]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.136]             }
[13:36:52.136]             base::options(...future.oldOptions)
[13:36:52.136]             if (.Platform$OS.type == "windows") {
[13:36:52.136]                 old_names <- names(...future.oldEnvVars)
[13:36:52.136]                 envs <- base::Sys.getenv()
[13:36:52.136]                 names <- names(envs)
[13:36:52.136]                 common <- intersect(names, old_names)
[13:36:52.136]                 added <- setdiff(names, old_names)
[13:36:52.136]                 removed <- setdiff(old_names, names)
[13:36:52.136]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.136]                   envs[common]]
[13:36:52.136]                 NAMES <- toupper(changed)
[13:36:52.136]                 args <- list()
[13:36:52.136]                 for (kk in seq_along(NAMES)) {
[13:36:52.136]                   name <- changed[[kk]]
[13:36:52.136]                   NAME <- NAMES[[kk]]
[13:36:52.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.136]                     next
[13:36:52.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.136]                 }
[13:36:52.136]                 NAMES <- toupper(added)
[13:36:52.136]                 for (kk in seq_along(NAMES)) {
[13:36:52.136]                   name <- added[[kk]]
[13:36:52.136]                   NAME <- NAMES[[kk]]
[13:36:52.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.136]                     next
[13:36:52.136]                   args[[name]] <- ""
[13:36:52.136]                 }
[13:36:52.136]                 NAMES <- toupper(removed)
[13:36:52.136]                 for (kk in seq_along(NAMES)) {
[13:36:52.136]                   name <- removed[[kk]]
[13:36:52.136]                   NAME <- NAMES[[kk]]
[13:36:52.136]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.136]                     next
[13:36:52.136]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.136]                 }
[13:36:52.136]                 if (length(args) > 0) 
[13:36:52.136]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.136]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.136]             }
[13:36:52.136]             else {
[13:36:52.136]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.136]             }
[13:36:52.136]             {
[13:36:52.136]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.136]                   0L) {
[13:36:52.136]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.136]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.136]                   base::options(opts)
[13:36:52.136]                 }
[13:36:52.136]                 {
[13:36:52.136]                   {
[13:36:52.136]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.136]                     NULL
[13:36:52.136]                   }
[13:36:52.136]                   options(future.plan = NULL)
[13:36:52.136]                   if (is.na(NA_character_)) 
[13:36:52.136]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.136]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.136]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.136]                     .init = FALSE)
[13:36:52.136]                 }
[13:36:52.136]             }
[13:36:52.136]         }
[13:36:52.136]     })
[13:36:52.136]     if (TRUE) {
[13:36:52.136]         base::sink(type = "output", split = FALSE)
[13:36:52.136]         if (TRUE) {
[13:36:52.136]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.136]         }
[13:36:52.136]         else {
[13:36:52.136]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.136]         }
[13:36:52.136]         base::close(...future.stdout)
[13:36:52.136]         ...future.stdout <- NULL
[13:36:52.136]     }
[13:36:52.136]     ...future.result$conditions <- ...future.conditions
[13:36:52.136]     ...future.result$finished <- base::Sys.time()
[13:36:52.136]     ...future.result
[13:36:52.136] }
[13:36:52.139] assign_globals() ...
[13:36:52.139] List of 1
[13:36:52.139]  $ x: list()
[13:36:52.139]  - attr(*, "where")=List of 1
[13:36:52.139]   ..$ x:<environment: R_EmptyEnv> 
[13:36:52.139]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:52.139]  - attr(*, "resolved")= logi TRUE
[13:36:52.139]  - attr(*, "total_size")= num 0
[13:36:52.139]  - attr(*, "already-done")= logi TRUE
[13:36:52.142] - copied ‘x’ to environment
[13:36:52.142] assign_globals() ... done
[13:36:52.142] requestCore(): workers = 2
[13:36:52.144] MulticoreFuture started
[13:36:52.144] - Launch lazy future ... done
[13:36:52.145] run() for ‘MulticoreFuture’ ... done
[13:36:52.145] result() for MulticoreFuture ...
[13:36:52.145] plan(): Setting new future strategy stack:
[13:36:52.145] List of future strategies:
[13:36:52.145] 1. sequential:
[13:36:52.145]    - args: function (..., envir = parent.frame())
[13:36:52.145]    - tweaked: FALSE
[13:36:52.145]    - call: NULL
[13:36:52.146] plan(): nbrOfWorkers() = 1
[13:36:52.148] plan(): Setting new future strategy stack:
[13:36:52.148] List of future strategies:
[13:36:52.148] 1. multicore:
[13:36:52.148]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.148]    - tweaked: FALSE
[13:36:52.148]    - call: plan(strategy)
[13:36:52.154] plan(): nbrOfWorkers() = 2
[13:36:52.155] result() for MulticoreFuture ...
[13:36:52.155] result() for MulticoreFuture ... done
[13:36:52.155] result() for MulticoreFuture ... done
[13:36:52.155] result() for MulticoreFuture ...
[13:36:52.155] result() for MulticoreFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.156] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.156] Searching for globals...
[13:36:52.159] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:52.159] Searching for globals ... DONE
[13:36:52.160] Resolving globals: TRUE
[13:36:52.160] Resolving any globals that are futures ...
[13:36:52.160] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:52.160] Resolving any globals that are futures ... DONE
[13:36:52.160] Resolving futures part of globals (recursively) ...
[13:36:52.161] resolve() on list ...
[13:36:52.161]  recursive: 99
[13:36:52.161]  length: 2
[13:36:52.161]  elements: ‘x’, ‘name’
[13:36:52.161]  length: 1 (resolved future 1)
[13:36:52.161]  length: 0 (resolved future 2)
[13:36:52.162] resolve() on list ... DONE
[13:36:52.162] - globals: [2] ‘x’, ‘name’
[13:36:52.162] Resolving futures part of globals (recursively) ... DONE
[13:36:52.162] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:52.163] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[13:36:52.163] - globals: [2] ‘x’, ‘name’
[13:36:52.163] 
[13:36:52.163] getGlobalsAndPackages() ... DONE
[13:36:52.163] run() for ‘Future’ ...
[13:36:52.163] - state: ‘created’
[13:36:52.164] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.168] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.168] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:52.168]   - Field: ‘label’
[13:36:52.168]   - Field: ‘local’
[13:36:52.168]   - Field: ‘owner’
[13:36:52.168]   - Field: ‘envir’
[13:36:52.168]   - Field: ‘workers’
[13:36:52.168]   - Field: ‘packages’
[13:36:52.169]   - Field: ‘gc’
[13:36:52.169]   - Field: ‘job’
[13:36:52.169]   - Field: ‘conditions’
[13:36:52.169]   - Field: ‘expr’
[13:36:52.169]   - Field: ‘uuid’
[13:36:52.169]   - Field: ‘seed’
[13:36:52.169]   - Field: ‘version’
[13:36:52.169]   - Field: ‘result’
[13:36:52.169]   - Field: ‘asynchronous’
[13:36:52.170]   - Field: ‘calls’
[13:36:52.170]   - Field: ‘globals’
[13:36:52.170]   - Field: ‘stdout’
[13:36:52.170]   - Field: ‘earlySignal’
[13:36:52.170]   - Field: ‘lazy’
[13:36:52.170]   - Field: ‘state’
[13:36:52.170] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:52.170] - Launch lazy future ...
[13:36:52.171] Packages needed by the future expression (n = 0): <none>
[13:36:52.171] Packages needed by future strategies (n = 0): <none>
[13:36:52.171] {
[13:36:52.171]     {
[13:36:52.171]         {
[13:36:52.171]             ...future.startTime <- base::Sys.time()
[13:36:52.171]             {
[13:36:52.171]                 {
[13:36:52.171]                   {
[13:36:52.171]                     {
[13:36:52.171]                       base::local({
[13:36:52.171]                         has_future <- base::requireNamespace("future", 
[13:36:52.171]                           quietly = TRUE)
[13:36:52.171]                         if (has_future) {
[13:36:52.171]                           ns <- base::getNamespace("future")
[13:36:52.171]                           version <- ns[[".package"]][["version"]]
[13:36:52.171]                           if (is.null(version)) 
[13:36:52.171]                             version <- utils::packageVersion("future")
[13:36:52.171]                         }
[13:36:52.171]                         else {
[13:36:52.171]                           version <- NULL
[13:36:52.171]                         }
[13:36:52.171]                         if (!has_future || version < "1.8.0") {
[13:36:52.171]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.171]                             "", base::R.version$version.string), 
[13:36:52.171]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.171]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.171]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.171]                               "release", "version")], collapse = " "), 
[13:36:52.171]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.171]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.171]                             info)
[13:36:52.171]                           info <- base::paste(info, collapse = "; ")
[13:36:52.171]                           if (!has_future) {
[13:36:52.171]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.171]                               info)
[13:36:52.171]                           }
[13:36:52.171]                           else {
[13:36:52.171]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.171]                               info, version)
[13:36:52.171]                           }
[13:36:52.171]                           base::stop(msg)
[13:36:52.171]                         }
[13:36:52.171]                       })
[13:36:52.171]                     }
[13:36:52.171]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.171]                     base::options(mc.cores = 1L)
[13:36:52.171]                   }
[13:36:52.171]                   ...future.strategy.old <- future::plan("list")
[13:36:52.171]                   options(future.plan = NULL)
[13:36:52.171]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.171]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.171]                 }
[13:36:52.171]                 ...future.workdir <- getwd()
[13:36:52.171]             }
[13:36:52.171]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.171]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.171]         }
[13:36:52.171]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.171]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.171]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.171]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.171]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.171]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.171]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.171]             base::names(...future.oldOptions))
[13:36:52.171]     }
[13:36:52.171]     if (FALSE) {
[13:36:52.171]     }
[13:36:52.171]     else {
[13:36:52.171]         if (TRUE) {
[13:36:52.171]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.171]                 open = "w")
[13:36:52.171]         }
[13:36:52.171]         else {
[13:36:52.171]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.171]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.171]         }
[13:36:52.171]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.171]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.171]             base::sink(type = "output", split = FALSE)
[13:36:52.171]             base::close(...future.stdout)
[13:36:52.171]         }, add = TRUE)
[13:36:52.171]     }
[13:36:52.171]     ...future.frame <- base::sys.nframe()
[13:36:52.171]     ...future.conditions <- base::list()
[13:36:52.171]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.171]     if (FALSE) {
[13:36:52.171]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.171]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.171]     }
[13:36:52.171]     ...future.result <- base::tryCatch({
[13:36:52.171]         base::withCallingHandlers({
[13:36:52.171]             ...future.value <- base::withVisible(base::local({
[13:36:52.171]                 withCallingHandlers({
[13:36:52.171]                   {
[13:36:52.171]                     x[name] <- list(1)
[13:36:52.171]                     x
[13:36:52.171]                   }
[13:36:52.171]                 }, immediateCondition = function(cond) {
[13:36:52.171]                   save_rds <- function (object, pathname, ...) 
[13:36:52.171]                   {
[13:36:52.171]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:52.171]                     if (file_test("-f", pathname_tmp)) {
[13:36:52.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.171]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:52.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.171]                         fi_tmp[["mtime"]])
[13:36:52.171]                     }
[13:36:52.171]                     tryCatch({
[13:36:52.171]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:52.171]                     }, error = function(ex) {
[13:36:52.171]                       msg <- conditionMessage(ex)
[13:36:52.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.171]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:52.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.171]                         fi_tmp[["mtime"]], msg)
[13:36:52.171]                       ex$message <- msg
[13:36:52.171]                       stop(ex)
[13:36:52.171]                     })
[13:36:52.171]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:52.171]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:52.171]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:52.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:52.171]                       fi <- file.info(pathname)
[13:36:52.171]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:52.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:52.171]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:52.171]                         fi[["size"]], fi[["mtime"]])
[13:36:52.171]                       stop(msg)
[13:36:52.171]                     }
[13:36:52.171]                     invisible(pathname)
[13:36:52.171]                   }
[13:36:52.171]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:52.171]                     rootPath = tempdir()) 
[13:36:52.171]                   {
[13:36:52.171]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:52.171]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:52.171]                       tmpdir = path, fileext = ".rds")
[13:36:52.171]                     save_rds(obj, file)
[13:36:52.171]                   }
[13:36:52.171]                   saveImmediateCondition(cond, path = "/tmp/RtmpWxR5Yy/.future/immediateConditions")
[13:36:52.171]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.171]                   {
[13:36:52.171]                     inherits <- base::inherits
[13:36:52.171]                     invokeRestart <- base::invokeRestart
[13:36:52.171]                     is.null <- base::is.null
[13:36:52.171]                     muffled <- FALSE
[13:36:52.171]                     if (inherits(cond, "message")) {
[13:36:52.171]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.171]                       if (muffled) 
[13:36:52.171]                         invokeRestart("muffleMessage")
[13:36:52.171]                     }
[13:36:52.171]                     else if (inherits(cond, "warning")) {
[13:36:52.171]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.171]                       if (muffled) 
[13:36:52.171]                         invokeRestart("muffleWarning")
[13:36:52.171]                     }
[13:36:52.171]                     else if (inherits(cond, "condition")) {
[13:36:52.171]                       if (!is.null(pattern)) {
[13:36:52.171]                         computeRestarts <- base::computeRestarts
[13:36:52.171]                         grepl <- base::grepl
[13:36:52.171]                         restarts <- computeRestarts(cond)
[13:36:52.171]                         for (restart in restarts) {
[13:36:52.171]                           name <- restart$name
[13:36:52.171]                           if (is.null(name)) 
[13:36:52.171]                             next
[13:36:52.171]                           if (!grepl(pattern, name)) 
[13:36:52.171]                             next
[13:36:52.171]                           invokeRestart(restart)
[13:36:52.171]                           muffled <- TRUE
[13:36:52.171]                           break
[13:36:52.171]                         }
[13:36:52.171]                       }
[13:36:52.171]                     }
[13:36:52.171]                     invisible(muffled)
[13:36:52.171]                   }
[13:36:52.171]                   muffleCondition(cond)
[13:36:52.171]                 })
[13:36:52.171]             }))
[13:36:52.171]             future::FutureResult(value = ...future.value$value, 
[13:36:52.171]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.171]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.171]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.171]                     ...future.globalenv.names))
[13:36:52.171]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.171]         }, condition = base::local({
[13:36:52.171]             c <- base::c
[13:36:52.171]             inherits <- base::inherits
[13:36:52.171]             invokeRestart <- base::invokeRestart
[13:36:52.171]             length <- base::length
[13:36:52.171]             list <- base::list
[13:36:52.171]             seq.int <- base::seq.int
[13:36:52.171]             signalCondition <- base::signalCondition
[13:36:52.171]             sys.calls <- base::sys.calls
[13:36:52.171]             `[[` <- base::`[[`
[13:36:52.171]             `+` <- base::`+`
[13:36:52.171]             `<<-` <- base::`<<-`
[13:36:52.171]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.171]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.171]                   3L)]
[13:36:52.171]             }
[13:36:52.171]             function(cond) {
[13:36:52.171]                 is_error <- inherits(cond, "error")
[13:36:52.171]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.171]                   NULL)
[13:36:52.171]                 if (is_error) {
[13:36:52.171]                   sessionInformation <- function() {
[13:36:52.171]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.171]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.171]                       search = base::search(), system = base::Sys.info())
[13:36:52.171]                   }
[13:36:52.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.171]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.171]                     cond$call), session = sessionInformation(), 
[13:36:52.171]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.171]                   signalCondition(cond)
[13:36:52.171]                 }
[13:36:52.171]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.171]                 "immediateCondition"))) {
[13:36:52.171]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.171]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.171]                   if (TRUE && !signal) {
[13:36:52.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.171]                     {
[13:36:52.171]                       inherits <- base::inherits
[13:36:52.171]                       invokeRestart <- base::invokeRestart
[13:36:52.171]                       is.null <- base::is.null
[13:36:52.171]                       muffled <- FALSE
[13:36:52.171]                       if (inherits(cond, "message")) {
[13:36:52.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.171]                         if (muffled) 
[13:36:52.171]                           invokeRestart("muffleMessage")
[13:36:52.171]                       }
[13:36:52.171]                       else if (inherits(cond, "warning")) {
[13:36:52.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.171]                         if (muffled) 
[13:36:52.171]                           invokeRestart("muffleWarning")
[13:36:52.171]                       }
[13:36:52.171]                       else if (inherits(cond, "condition")) {
[13:36:52.171]                         if (!is.null(pattern)) {
[13:36:52.171]                           computeRestarts <- base::computeRestarts
[13:36:52.171]                           grepl <- base::grepl
[13:36:52.171]                           restarts <- computeRestarts(cond)
[13:36:52.171]                           for (restart in restarts) {
[13:36:52.171]                             name <- restart$name
[13:36:52.171]                             if (is.null(name)) 
[13:36:52.171]                               next
[13:36:52.171]                             if (!grepl(pattern, name)) 
[13:36:52.171]                               next
[13:36:52.171]                             invokeRestart(restart)
[13:36:52.171]                             muffled <- TRUE
[13:36:52.171]                             break
[13:36:52.171]                           }
[13:36:52.171]                         }
[13:36:52.171]                       }
[13:36:52.171]                       invisible(muffled)
[13:36:52.171]                     }
[13:36:52.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.171]                   }
[13:36:52.171]                 }
[13:36:52.171]                 else {
[13:36:52.171]                   if (TRUE) {
[13:36:52.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.171]                     {
[13:36:52.171]                       inherits <- base::inherits
[13:36:52.171]                       invokeRestart <- base::invokeRestart
[13:36:52.171]                       is.null <- base::is.null
[13:36:52.171]                       muffled <- FALSE
[13:36:52.171]                       if (inherits(cond, "message")) {
[13:36:52.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.171]                         if (muffled) 
[13:36:52.171]                           invokeRestart("muffleMessage")
[13:36:52.171]                       }
[13:36:52.171]                       else if (inherits(cond, "warning")) {
[13:36:52.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.171]                         if (muffled) 
[13:36:52.171]                           invokeRestart("muffleWarning")
[13:36:52.171]                       }
[13:36:52.171]                       else if (inherits(cond, "condition")) {
[13:36:52.171]                         if (!is.null(pattern)) {
[13:36:52.171]                           computeRestarts <- base::computeRestarts
[13:36:52.171]                           grepl <- base::grepl
[13:36:52.171]                           restarts <- computeRestarts(cond)
[13:36:52.171]                           for (restart in restarts) {
[13:36:52.171]                             name <- restart$name
[13:36:52.171]                             if (is.null(name)) 
[13:36:52.171]                               next
[13:36:52.171]                             if (!grepl(pattern, name)) 
[13:36:52.171]                               next
[13:36:52.171]                             invokeRestart(restart)
[13:36:52.171]                             muffled <- TRUE
[13:36:52.171]                             break
[13:36:52.171]                           }
[13:36:52.171]                         }
[13:36:52.171]                       }
[13:36:52.171]                       invisible(muffled)
[13:36:52.171]                     }
[13:36:52.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.171]                   }
[13:36:52.171]                 }
[13:36:52.171]             }
[13:36:52.171]         }))
[13:36:52.171]     }, error = function(ex) {
[13:36:52.171]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.171]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.171]                 ...future.rng), started = ...future.startTime, 
[13:36:52.171]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.171]             version = "1.8"), class = "FutureResult")
[13:36:52.171]     }, finally = {
[13:36:52.171]         if (!identical(...future.workdir, getwd())) 
[13:36:52.171]             setwd(...future.workdir)
[13:36:52.171]         {
[13:36:52.171]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.171]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.171]             }
[13:36:52.171]             base::options(...future.oldOptions)
[13:36:52.171]             if (.Platform$OS.type == "windows") {
[13:36:52.171]                 old_names <- names(...future.oldEnvVars)
[13:36:52.171]                 envs <- base::Sys.getenv()
[13:36:52.171]                 names <- names(envs)
[13:36:52.171]                 common <- intersect(names, old_names)
[13:36:52.171]                 added <- setdiff(names, old_names)
[13:36:52.171]                 removed <- setdiff(old_names, names)
[13:36:52.171]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.171]                   envs[common]]
[13:36:52.171]                 NAMES <- toupper(changed)
[13:36:52.171]                 args <- list()
[13:36:52.171]                 for (kk in seq_along(NAMES)) {
[13:36:52.171]                   name <- changed[[kk]]
[13:36:52.171]                   NAME <- NAMES[[kk]]
[13:36:52.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.171]                     next
[13:36:52.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.171]                 }
[13:36:52.171]                 NAMES <- toupper(added)
[13:36:52.171]                 for (kk in seq_along(NAMES)) {
[13:36:52.171]                   name <- added[[kk]]
[13:36:52.171]                   NAME <- NAMES[[kk]]
[13:36:52.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.171]                     next
[13:36:52.171]                   args[[name]] <- ""
[13:36:52.171]                 }
[13:36:52.171]                 NAMES <- toupper(removed)
[13:36:52.171]                 for (kk in seq_along(NAMES)) {
[13:36:52.171]                   name <- removed[[kk]]
[13:36:52.171]                   NAME <- NAMES[[kk]]
[13:36:52.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.171]                     next
[13:36:52.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.171]                 }
[13:36:52.171]                 if (length(args) > 0) 
[13:36:52.171]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.171]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.171]             }
[13:36:52.171]             else {
[13:36:52.171]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.171]             }
[13:36:52.171]             {
[13:36:52.171]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.171]                   0L) {
[13:36:52.171]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.171]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.171]                   base::options(opts)
[13:36:52.171]                 }
[13:36:52.171]                 {
[13:36:52.171]                   {
[13:36:52.171]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.171]                     NULL
[13:36:52.171]                   }
[13:36:52.171]                   options(future.plan = NULL)
[13:36:52.171]                   if (is.na(NA_character_)) 
[13:36:52.171]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.171]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.171]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.171]                     .init = FALSE)
[13:36:52.171]                 }
[13:36:52.171]             }
[13:36:52.171]         }
[13:36:52.171]     })
[13:36:52.171]     if (TRUE) {
[13:36:52.171]         base::sink(type = "output", split = FALSE)
[13:36:52.171]         if (TRUE) {
[13:36:52.171]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.171]         }
[13:36:52.171]         else {
[13:36:52.171]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.171]         }
[13:36:52.171]         base::close(...future.stdout)
[13:36:52.171]         ...future.stdout <- NULL
[13:36:52.171]     }
[13:36:52.171]     ...future.result$conditions <- ...future.conditions
[13:36:52.171]     ...future.result$finished <- base::Sys.time()
[13:36:52.171]     ...future.result
[13:36:52.171] }
[13:36:52.174] assign_globals() ...
[13:36:52.174] List of 2
[13:36:52.174]  $ x   : list()
[13:36:52.174]  $ name: chr "a"
[13:36:52.174]  - attr(*, "where")=List of 2
[13:36:52.174]   ..$ x   :<environment: R_EmptyEnv> 
[13:36:52.174]   ..$ name:<environment: R_EmptyEnv> 
[13:36:52.174]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:52.174]  - attr(*, "resolved")= logi TRUE
[13:36:52.174]  - attr(*, "total_size")= num 112
[13:36:52.174]  - attr(*, "already-done")= logi TRUE
[13:36:52.177] - copied ‘x’ to environment
[13:36:52.178] - copied ‘name’ to environment
[13:36:52.178] assign_globals() ... done
[13:36:52.178] requestCore(): workers = 2
[13:36:52.180] MulticoreFuture started
[13:36:52.180] - Launch lazy future ... done
[13:36:52.180] run() for ‘MulticoreFuture’ ... done
[13:36:52.181] result() for MulticoreFuture ...
[13:36:52.181] plan(): Setting new future strategy stack:
[13:36:52.181] List of future strategies:
[13:36:52.181] 1. sequential:
[13:36:52.181]    - args: function (..., envir = parent.frame())
[13:36:52.181]    - tweaked: FALSE
[13:36:52.181]    - call: NULL
[13:36:52.182] plan(): nbrOfWorkers() = 1
[13:36:52.184] plan(): Setting new future strategy stack:
[13:36:52.184] List of future strategies:
[13:36:52.184] 1. multicore:
[13:36:52.184]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:52.184]    - tweaked: FALSE
[13:36:52.184]    - call: plan(strategy)
[13:36:52.194] plan(): nbrOfWorkers() = 2
[13:36:52.195] result() for MulticoreFuture ...
[13:36:52.195] result() for MulticoreFuture ... done
[13:36:52.195] result() for MulticoreFuture ... done
[13:36:52.195] result() for MulticoreFuture ...
[13:36:52.195] result() for MulticoreFuture ... done
$a
[1] 1

- plan('multisession') ...
[13:36:52.196] plan(): Setting new future strategy stack:
[13:36:52.196] List of future strategies:
[13:36:52.196] 1. multisession:
[13:36:52.196]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:52.196]    - tweaked: FALSE
[13:36:52.196]    - call: plan(strategy)
[13:36:52.197] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:52.197] multisession:
[13:36:52.197] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:52.197] - tweaked: FALSE
[13:36:52.197] - call: plan(strategy)
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.207] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.207] Not searching for globals
[13:36:52.208] - globals: [0] <none>
[13:36:52.208] getGlobalsAndPackages() ... DONE
[13:36:52.208] [local output] makeClusterPSOCK() ...
[13:36:52.252] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:52.253] [local output] Base port: 11703
[13:36:52.253] [local output] Getting setup options for 2 cluster nodes ...
[13:36:52.253] [local output]  - Node 1 of 2 ...
[13:36:52.254] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:52.255] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWxR5Yy/worker.rank=1.parallelly.parent=84681.14ac95920a62d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpWxR5Yy/worker.rank=1.parallelly.parent=84681.14ac95920a62d.pid")'’
[13:36:52.443] - Possible to infer worker's PID: TRUE
[13:36:52.443] [local output] Rscript port: 11703

[13:36:52.444] [local output]  - Node 2 of 2 ...
[13:36:52.444] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:52.445] [local output] Rscript port: 11703

[13:36:52.445] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:52.445] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:52.446] [local output] Setting up PSOCK nodes in parallel
[13:36:52.446] List of 36
[13:36:52.446]  $ worker          : chr "localhost"
[13:36:52.446]   ..- attr(*, "localhost")= logi TRUE
[13:36:52.446]  $ master          : chr "localhost"
[13:36:52.446]  $ port            : int 11703
[13:36:52.446]  $ connectTimeout  : num 120
[13:36:52.446]  $ timeout         : num 2592000
[13:36:52.446]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:52.446]  $ homogeneous     : logi TRUE
[13:36:52.446]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:52.446]  $ rscript_envs    : NULL
[13:36:52.446]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:52.446]  $ rscript_startup : NULL
[13:36:52.446]  $ rscript_sh      : chr "sh"
[13:36:52.446]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:52.446]  $ methods         : logi TRUE
[13:36:52.446]  $ socketOptions   : chr "no-delay"
[13:36:52.446]  $ useXDR          : logi FALSE
[13:36:52.446]  $ outfile         : chr "/dev/null"
[13:36:52.446]  $ renice          : int NA
[13:36:52.446]  $ rshcmd          : NULL
[13:36:52.446]  $ user            : chr(0) 
[13:36:52.446]  $ revtunnel       : logi FALSE
[13:36:52.446]  $ rshlogfile      : NULL
[13:36:52.446]  $ rshopts         : chr(0) 
[13:36:52.446]  $ rank            : int 1
[13:36:52.446]  $ manual          : logi FALSE
[13:36:52.446]  $ dryrun          : logi FALSE
[13:36:52.446]  $ quiet           : logi FALSE
[13:36:52.446]  $ setup_strategy  : chr "parallel"
[13:36:52.446]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:52.446]  $ pidfile         : chr "/tmp/RtmpWxR5Yy/worker.rank=1.parallelly.parent=84681.14ac95920a62d.pid"
[13:36:52.446]  $ rshcmd_label    : NULL
[13:36:52.446]  $ rsh_call        : NULL
[13:36:52.446]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:52.446]  $ localMachine    : logi TRUE
[13:36:52.446]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:52.446]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:52.446]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:52.446]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:52.446]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:52.446]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:52.446]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:52.446]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:52.446]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:52.446]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:52.446]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:52.446]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:52.446]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:52.446]  $ arguments       :List of 28
[13:36:52.446]   ..$ worker          : chr "localhost"
[13:36:52.446]   ..$ master          : NULL
[13:36:52.446]   ..$ port            : int 11703
[13:36:52.446]   ..$ connectTimeout  : num 120
[13:36:52.446]   ..$ timeout         : num 2592000
[13:36:52.446]   ..$ rscript         : NULL
[13:36:52.446]   ..$ homogeneous     : NULL
[13:36:52.446]   ..$ rscript_args    : NULL
[13:36:52.446]   ..$ rscript_envs    : NULL
[13:36:52.446]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:52.446]   ..$ rscript_startup : NULL
[13:36:52.446]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:52.446]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:52.446]   ..$ methods         : logi TRUE
[13:36:52.446]   ..$ socketOptions   : chr "no-delay"
[13:36:52.446]   ..$ useXDR          : logi FALSE
[13:36:52.446]   ..$ outfile         : chr "/dev/null"
[13:36:52.446]   ..$ renice          : int NA
[13:36:52.446]   ..$ rshcmd          : NULL
[13:36:52.446]   ..$ user            : NULL
[13:36:52.446]   ..$ revtunnel       : logi NA
[13:36:52.446]   ..$ rshlogfile      : NULL
[13:36:52.446]   ..$ rshopts         : NULL
[13:36:52.446]   ..$ rank            : int 1
[13:36:52.446]   ..$ manual          : logi FALSE
[13:36:52.446]   ..$ dryrun          : logi FALSE
[13:36:52.446]   ..$ quiet           : logi FALSE
[13:36:52.446]   ..$ setup_strategy  : chr "parallel"
[13:36:52.446]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:52.463] [local output] System call to launch all workers:
[13:36:52.463] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpWxR5Yy/worker.rank=1.parallelly.parent=84681.14ac95920a62d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11703 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:52.463] [local output] Starting PSOCK main server
[13:36:52.469] [local output] Workers launched
[13:36:52.469] [local output] Waiting for workers to connect back
[13:36:52.469]  - [local output] 0 workers out of 2 ready
[13:36:52.714]  - [local output] 0 workers out of 2 ready
[13:36:52.715]  - [local output] 1 workers out of 2 ready
[13:36:52.717]  - [local output] 1 workers out of 2 ready
[13:36:52.717]  - [local output] 2 workers out of 2 ready
[13:36:52.717] [local output] Launching of workers completed
[13:36:52.717] [local output] Collecting session information from workers
[13:36:52.718] [local output]  - Worker #1 of 2
[13:36:52.719] [local output]  - Worker #2 of 2
[13:36:52.719] [local output] makeClusterPSOCK() ... done
[13:36:52.730] Packages needed by the future expression (n = 0): <none>
[13:36:52.730] Packages needed by future strategies (n = 0): <none>
[13:36:52.731] {
[13:36:52.731]     {
[13:36:52.731]         {
[13:36:52.731]             ...future.startTime <- base::Sys.time()
[13:36:52.731]             {
[13:36:52.731]                 {
[13:36:52.731]                   {
[13:36:52.731]                     {
[13:36:52.731]                       base::local({
[13:36:52.731]                         has_future <- base::requireNamespace("future", 
[13:36:52.731]                           quietly = TRUE)
[13:36:52.731]                         if (has_future) {
[13:36:52.731]                           ns <- base::getNamespace("future")
[13:36:52.731]                           version <- ns[[".package"]][["version"]]
[13:36:52.731]                           if (is.null(version)) 
[13:36:52.731]                             version <- utils::packageVersion("future")
[13:36:52.731]                         }
[13:36:52.731]                         else {
[13:36:52.731]                           version <- NULL
[13:36:52.731]                         }
[13:36:52.731]                         if (!has_future || version < "1.8.0") {
[13:36:52.731]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.731]                             "", base::R.version$version.string), 
[13:36:52.731]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.731]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.731]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.731]                               "release", "version")], collapse = " "), 
[13:36:52.731]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.731]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.731]                             info)
[13:36:52.731]                           info <- base::paste(info, collapse = "; ")
[13:36:52.731]                           if (!has_future) {
[13:36:52.731]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.731]                               info)
[13:36:52.731]                           }
[13:36:52.731]                           else {
[13:36:52.731]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.731]                               info, version)
[13:36:52.731]                           }
[13:36:52.731]                           base::stop(msg)
[13:36:52.731]                         }
[13:36:52.731]                       })
[13:36:52.731]                     }
[13:36:52.731]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.731]                     base::options(mc.cores = 1L)
[13:36:52.731]                   }
[13:36:52.731]                   ...future.strategy.old <- future::plan("list")
[13:36:52.731]                   options(future.plan = NULL)
[13:36:52.731]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.731]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.731]                 }
[13:36:52.731]                 ...future.workdir <- getwd()
[13:36:52.731]             }
[13:36:52.731]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.731]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.731]         }
[13:36:52.731]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.731]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.731]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.731]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.731]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.731]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.731]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.731]             base::names(...future.oldOptions))
[13:36:52.731]     }
[13:36:52.731]     if (FALSE) {
[13:36:52.731]     }
[13:36:52.731]     else {
[13:36:52.731]         if (TRUE) {
[13:36:52.731]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.731]                 open = "w")
[13:36:52.731]         }
[13:36:52.731]         else {
[13:36:52.731]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.731]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.731]         }
[13:36:52.731]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.731]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.731]             base::sink(type = "output", split = FALSE)
[13:36:52.731]             base::close(...future.stdout)
[13:36:52.731]         }, add = TRUE)
[13:36:52.731]     }
[13:36:52.731]     ...future.frame <- base::sys.nframe()
[13:36:52.731]     ...future.conditions <- base::list()
[13:36:52.731]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.731]     if (FALSE) {
[13:36:52.731]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.731]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.731]     }
[13:36:52.731]     ...future.result <- base::tryCatch({
[13:36:52.731]         base::withCallingHandlers({
[13:36:52.731]             ...future.value <- base::withVisible(base::local({
[13:36:52.731]                 ...future.makeSendCondition <- base::local({
[13:36:52.731]                   sendCondition <- NULL
[13:36:52.731]                   function(frame = 1L) {
[13:36:52.731]                     if (is.function(sendCondition)) 
[13:36:52.731]                       return(sendCondition)
[13:36:52.731]                     ns <- getNamespace("parallel")
[13:36:52.731]                     if (exists("sendData", mode = "function", 
[13:36:52.731]                       envir = ns)) {
[13:36:52.731]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.731]                         envir = ns)
[13:36:52.731]                       envir <- sys.frame(frame)
[13:36:52.731]                       master <- NULL
[13:36:52.731]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.731]                         !identical(envir, emptyenv())) {
[13:36:52.731]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.731]                           inherits = FALSE)) {
[13:36:52.731]                           master <- get("master", mode = "list", 
[13:36:52.731]                             envir = envir, inherits = FALSE)
[13:36:52.731]                           if (inherits(master, c("SOCKnode", 
[13:36:52.731]                             "SOCK0node"))) {
[13:36:52.731]                             sendCondition <<- function(cond) {
[13:36:52.731]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.731]                                 success = TRUE)
[13:36:52.731]                               parallel_sendData(master, data)
[13:36:52.731]                             }
[13:36:52.731]                             return(sendCondition)
[13:36:52.731]                           }
[13:36:52.731]                         }
[13:36:52.731]                         frame <- frame + 1L
[13:36:52.731]                         envir <- sys.frame(frame)
[13:36:52.731]                       }
[13:36:52.731]                     }
[13:36:52.731]                     sendCondition <<- function(cond) NULL
[13:36:52.731]                   }
[13:36:52.731]                 })
[13:36:52.731]                 withCallingHandlers({
[13:36:52.731]                   NA
[13:36:52.731]                 }, immediateCondition = function(cond) {
[13:36:52.731]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.731]                   sendCondition(cond)
[13:36:52.731]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.731]                   {
[13:36:52.731]                     inherits <- base::inherits
[13:36:52.731]                     invokeRestart <- base::invokeRestart
[13:36:52.731]                     is.null <- base::is.null
[13:36:52.731]                     muffled <- FALSE
[13:36:52.731]                     if (inherits(cond, "message")) {
[13:36:52.731]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.731]                       if (muffled) 
[13:36:52.731]                         invokeRestart("muffleMessage")
[13:36:52.731]                     }
[13:36:52.731]                     else if (inherits(cond, "warning")) {
[13:36:52.731]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.731]                       if (muffled) 
[13:36:52.731]                         invokeRestart("muffleWarning")
[13:36:52.731]                     }
[13:36:52.731]                     else if (inherits(cond, "condition")) {
[13:36:52.731]                       if (!is.null(pattern)) {
[13:36:52.731]                         computeRestarts <- base::computeRestarts
[13:36:52.731]                         grepl <- base::grepl
[13:36:52.731]                         restarts <- computeRestarts(cond)
[13:36:52.731]                         for (restart in restarts) {
[13:36:52.731]                           name <- restart$name
[13:36:52.731]                           if (is.null(name)) 
[13:36:52.731]                             next
[13:36:52.731]                           if (!grepl(pattern, name)) 
[13:36:52.731]                             next
[13:36:52.731]                           invokeRestart(restart)
[13:36:52.731]                           muffled <- TRUE
[13:36:52.731]                           break
[13:36:52.731]                         }
[13:36:52.731]                       }
[13:36:52.731]                     }
[13:36:52.731]                     invisible(muffled)
[13:36:52.731]                   }
[13:36:52.731]                   muffleCondition(cond)
[13:36:52.731]                 })
[13:36:52.731]             }))
[13:36:52.731]             future::FutureResult(value = ...future.value$value, 
[13:36:52.731]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.731]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.731]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.731]                     ...future.globalenv.names))
[13:36:52.731]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.731]         }, condition = base::local({
[13:36:52.731]             c <- base::c
[13:36:52.731]             inherits <- base::inherits
[13:36:52.731]             invokeRestart <- base::invokeRestart
[13:36:52.731]             length <- base::length
[13:36:52.731]             list <- base::list
[13:36:52.731]             seq.int <- base::seq.int
[13:36:52.731]             signalCondition <- base::signalCondition
[13:36:52.731]             sys.calls <- base::sys.calls
[13:36:52.731]             `[[` <- base::`[[`
[13:36:52.731]             `+` <- base::`+`
[13:36:52.731]             `<<-` <- base::`<<-`
[13:36:52.731]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.731]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.731]                   3L)]
[13:36:52.731]             }
[13:36:52.731]             function(cond) {
[13:36:52.731]                 is_error <- inherits(cond, "error")
[13:36:52.731]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.731]                   NULL)
[13:36:52.731]                 if (is_error) {
[13:36:52.731]                   sessionInformation <- function() {
[13:36:52.731]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.731]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.731]                       search = base::search(), system = base::Sys.info())
[13:36:52.731]                   }
[13:36:52.731]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.731]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.731]                     cond$call), session = sessionInformation(), 
[13:36:52.731]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.731]                   signalCondition(cond)
[13:36:52.731]                 }
[13:36:52.731]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.731]                 "immediateCondition"))) {
[13:36:52.731]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.731]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.731]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.731]                   if (TRUE && !signal) {
[13:36:52.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.731]                     {
[13:36:52.731]                       inherits <- base::inherits
[13:36:52.731]                       invokeRestart <- base::invokeRestart
[13:36:52.731]                       is.null <- base::is.null
[13:36:52.731]                       muffled <- FALSE
[13:36:52.731]                       if (inherits(cond, "message")) {
[13:36:52.731]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.731]                         if (muffled) 
[13:36:52.731]                           invokeRestart("muffleMessage")
[13:36:52.731]                       }
[13:36:52.731]                       else if (inherits(cond, "warning")) {
[13:36:52.731]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.731]                         if (muffled) 
[13:36:52.731]                           invokeRestart("muffleWarning")
[13:36:52.731]                       }
[13:36:52.731]                       else if (inherits(cond, "condition")) {
[13:36:52.731]                         if (!is.null(pattern)) {
[13:36:52.731]                           computeRestarts <- base::computeRestarts
[13:36:52.731]                           grepl <- base::grepl
[13:36:52.731]                           restarts <- computeRestarts(cond)
[13:36:52.731]                           for (restart in restarts) {
[13:36:52.731]                             name <- restart$name
[13:36:52.731]                             if (is.null(name)) 
[13:36:52.731]                               next
[13:36:52.731]                             if (!grepl(pattern, name)) 
[13:36:52.731]                               next
[13:36:52.731]                             invokeRestart(restart)
[13:36:52.731]                             muffled <- TRUE
[13:36:52.731]                             break
[13:36:52.731]                           }
[13:36:52.731]                         }
[13:36:52.731]                       }
[13:36:52.731]                       invisible(muffled)
[13:36:52.731]                     }
[13:36:52.731]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.731]                   }
[13:36:52.731]                 }
[13:36:52.731]                 else {
[13:36:52.731]                   if (TRUE) {
[13:36:52.731]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.731]                     {
[13:36:52.731]                       inherits <- base::inherits
[13:36:52.731]                       invokeRestart <- base::invokeRestart
[13:36:52.731]                       is.null <- base::is.null
[13:36:52.731]                       muffled <- FALSE
[13:36:52.731]                       if (inherits(cond, "message")) {
[13:36:52.731]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.731]                         if (muffled) 
[13:36:52.731]                           invokeRestart("muffleMessage")
[13:36:52.731]                       }
[13:36:52.731]                       else if (inherits(cond, "warning")) {
[13:36:52.731]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.731]                         if (muffled) 
[13:36:52.731]                           invokeRestart("muffleWarning")
[13:36:52.731]                       }
[13:36:52.731]                       else if (inherits(cond, "condition")) {
[13:36:52.731]                         if (!is.null(pattern)) {
[13:36:52.731]                           computeRestarts <- base::computeRestarts
[13:36:52.731]                           grepl <- base::grepl
[13:36:52.731]                           restarts <- computeRestarts(cond)
[13:36:52.731]                           for (restart in restarts) {
[13:36:52.731]                             name <- restart$name
[13:36:52.731]                             if (is.null(name)) 
[13:36:52.731]                               next
[13:36:52.731]                             if (!grepl(pattern, name)) 
[13:36:52.731]                               next
[13:36:52.731]                             invokeRestart(restart)
[13:36:52.731]                             muffled <- TRUE
[13:36:52.731]                             break
[13:36:52.731]                           }
[13:36:52.731]                         }
[13:36:52.731]                       }
[13:36:52.731]                       invisible(muffled)
[13:36:52.731]                     }
[13:36:52.731]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.731]                   }
[13:36:52.731]                 }
[13:36:52.731]             }
[13:36:52.731]         }))
[13:36:52.731]     }, error = function(ex) {
[13:36:52.731]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.731]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.731]                 ...future.rng), started = ...future.startTime, 
[13:36:52.731]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.731]             version = "1.8"), class = "FutureResult")
[13:36:52.731]     }, finally = {
[13:36:52.731]         if (!identical(...future.workdir, getwd())) 
[13:36:52.731]             setwd(...future.workdir)
[13:36:52.731]         {
[13:36:52.731]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.731]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.731]             }
[13:36:52.731]             base::options(...future.oldOptions)
[13:36:52.731]             if (.Platform$OS.type == "windows") {
[13:36:52.731]                 old_names <- names(...future.oldEnvVars)
[13:36:52.731]                 envs <- base::Sys.getenv()
[13:36:52.731]                 names <- names(envs)
[13:36:52.731]                 common <- intersect(names, old_names)
[13:36:52.731]                 added <- setdiff(names, old_names)
[13:36:52.731]                 removed <- setdiff(old_names, names)
[13:36:52.731]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.731]                   envs[common]]
[13:36:52.731]                 NAMES <- toupper(changed)
[13:36:52.731]                 args <- list()
[13:36:52.731]                 for (kk in seq_along(NAMES)) {
[13:36:52.731]                   name <- changed[[kk]]
[13:36:52.731]                   NAME <- NAMES[[kk]]
[13:36:52.731]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.731]                     next
[13:36:52.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.731]                 }
[13:36:52.731]                 NAMES <- toupper(added)
[13:36:52.731]                 for (kk in seq_along(NAMES)) {
[13:36:52.731]                   name <- added[[kk]]
[13:36:52.731]                   NAME <- NAMES[[kk]]
[13:36:52.731]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.731]                     next
[13:36:52.731]                   args[[name]] <- ""
[13:36:52.731]                 }
[13:36:52.731]                 NAMES <- toupper(removed)
[13:36:52.731]                 for (kk in seq_along(NAMES)) {
[13:36:52.731]                   name <- removed[[kk]]
[13:36:52.731]                   NAME <- NAMES[[kk]]
[13:36:52.731]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.731]                     next
[13:36:52.731]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.731]                 }
[13:36:52.731]                 if (length(args) > 0) 
[13:36:52.731]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.731]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.731]             }
[13:36:52.731]             else {
[13:36:52.731]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.731]             }
[13:36:52.731]             {
[13:36:52.731]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.731]                   0L) {
[13:36:52.731]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.731]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.731]                   base::options(opts)
[13:36:52.731]                 }
[13:36:52.731]                 {
[13:36:52.731]                   {
[13:36:52.731]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.731]                     NULL
[13:36:52.731]                   }
[13:36:52.731]                   options(future.plan = NULL)
[13:36:52.731]                   if (is.na(NA_character_)) 
[13:36:52.731]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.731]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.731]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.731]                     .init = FALSE)
[13:36:52.731]                 }
[13:36:52.731]             }
[13:36:52.731]         }
[13:36:52.731]     })
[13:36:52.731]     if (TRUE) {
[13:36:52.731]         base::sink(type = "output", split = FALSE)
[13:36:52.731]         if (TRUE) {
[13:36:52.731]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.731]         }
[13:36:52.731]         else {
[13:36:52.731]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.731]         }
[13:36:52.731]         base::close(...future.stdout)
[13:36:52.731]         ...future.stdout <- NULL
[13:36:52.731]     }
[13:36:52.731]     ...future.result$conditions <- ...future.conditions
[13:36:52.731]     ...future.result$finished <- base::Sys.time()
[13:36:52.731]     ...future.result
[13:36:52.731] }
[13:36:52.783] MultisessionFuture started
[13:36:52.784] result() for ClusterFuture ...
[13:36:52.784] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.785] - Validating connection of MultisessionFuture
[13:36:52.817] - received message: FutureResult
[13:36:52.817] - Received FutureResult
[13:36:52.817] - Erased future from FutureRegistry
[13:36:52.817] result() for ClusterFuture ...
[13:36:52.818] - result already collected: FutureResult
[13:36:52.818] result() for ClusterFuture ... done
[13:36:52.818] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.818] result() for ClusterFuture ... done
[13:36:52.818] result() for ClusterFuture ...
[13:36:52.818] - result already collected: FutureResult
[13:36:52.818] result() for ClusterFuture ... done
[13:36:52.818] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:52.822] plan(): nbrOfWorkers() = 2
Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.823] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.823] Searching for globals...
[13:36:52.825] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.826] Searching for globals ... DONE
[13:36:52.826] Resolving globals: TRUE
[13:36:52.826] Resolving any globals that are futures ...
[13:36:52.826] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.826] Resolving any globals that are futures ... DONE
[13:36:52.827] Resolving futures part of globals (recursively) ...
[13:36:52.827] resolve() on list ...
[13:36:52.827]  recursive: 99
[13:36:52.827]  length: 1
[13:36:52.827]  elements: ‘x’
[13:36:52.827]  length: 0 (resolved future 1)
[13:36:52.828] resolve() on list ... DONE
[13:36:52.828] - globals: [1] ‘x’
[13:36:52.828] Resolving futures part of globals (recursively) ... DONE
[13:36:52.828] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.828] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.829] - globals: [1] ‘x’
[13:36:52.829] 
[13:36:52.829] getGlobalsAndPackages() ... DONE
[13:36:52.829] run() for ‘Future’ ...
[13:36:52.829] - state: ‘created’
[13:36:52.829] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.844] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.844] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:52.844]   - Field: ‘node’
[13:36:52.844]   - Field: ‘label’
[13:36:52.844]   - Field: ‘local’
[13:36:52.844]   - Field: ‘owner’
[13:36:52.844]   - Field: ‘envir’
[13:36:52.845]   - Field: ‘workers’
[13:36:52.845]   - Field: ‘packages’
[13:36:52.845]   - Field: ‘gc’
[13:36:52.845]   - Field: ‘conditions’
[13:36:52.845]   - Field: ‘persistent’
[13:36:52.845]   - Field: ‘expr’
[13:36:52.845]   - Field: ‘uuid’
[13:36:52.845]   - Field: ‘seed’
[13:36:52.845]   - Field: ‘version’
[13:36:52.845]   - Field: ‘result’
[13:36:52.846]   - Field: ‘asynchronous’
[13:36:52.846]   - Field: ‘calls’
[13:36:52.846]   - Field: ‘globals’
[13:36:52.846]   - Field: ‘stdout’
[13:36:52.846]   - Field: ‘earlySignal’
[13:36:52.846]   - Field: ‘lazy’
[13:36:52.846]   - Field: ‘state’
[13:36:52.846] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:52.847] - Launch lazy future ...
[13:36:52.847] Packages needed by the future expression (n = 0): <none>
[13:36:52.847] Packages needed by future strategies (n = 0): <none>
[13:36:52.848] {
[13:36:52.848]     {
[13:36:52.848]         {
[13:36:52.848]             ...future.startTime <- base::Sys.time()
[13:36:52.848]             {
[13:36:52.848]                 {
[13:36:52.848]                   {
[13:36:52.848]                     {
[13:36:52.848]                       base::local({
[13:36:52.848]                         has_future <- base::requireNamespace("future", 
[13:36:52.848]                           quietly = TRUE)
[13:36:52.848]                         if (has_future) {
[13:36:52.848]                           ns <- base::getNamespace("future")
[13:36:52.848]                           version <- ns[[".package"]][["version"]]
[13:36:52.848]                           if (is.null(version)) 
[13:36:52.848]                             version <- utils::packageVersion("future")
[13:36:52.848]                         }
[13:36:52.848]                         else {
[13:36:52.848]                           version <- NULL
[13:36:52.848]                         }
[13:36:52.848]                         if (!has_future || version < "1.8.0") {
[13:36:52.848]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.848]                             "", base::R.version$version.string), 
[13:36:52.848]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.848]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.848]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.848]                               "release", "version")], collapse = " "), 
[13:36:52.848]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.848]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.848]                             info)
[13:36:52.848]                           info <- base::paste(info, collapse = "; ")
[13:36:52.848]                           if (!has_future) {
[13:36:52.848]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.848]                               info)
[13:36:52.848]                           }
[13:36:52.848]                           else {
[13:36:52.848]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.848]                               info, version)
[13:36:52.848]                           }
[13:36:52.848]                           base::stop(msg)
[13:36:52.848]                         }
[13:36:52.848]                       })
[13:36:52.848]                     }
[13:36:52.848]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.848]                     base::options(mc.cores = 1L)
[13:36:52.848]                   }
[13:36:52.848]                   ...future.strategy.old <- future::plan("list")
[13:36:52.848]                   options(future.plan = NULL)
[13:36:52.848]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.848]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.848]                 }
[13:36:52.848]                 ...future.workdir <- getwd()
[13:36:52.848]             }
[13:36:52.848]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.848]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.848]         }
[13:36:52.848]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.848]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.848]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.848]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.848]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.848]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.848]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.848]             base::names(...future.oldOptions))
[13:36:52.848]     }
[13:36:52.848]     if (FALSE) {
[13:36:52.848]     }
[13:36:52.848]     else {
[13:36:52.848]         if (TRUE) {
[13:36:52.848]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.848]                 open = "w")
[13:36:52.848]         }
[13:36:52.848]         else {
[13:36:52.848]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.848]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.848]         }
[13:36:52.848]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.848]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.848]             base::sink(type = "output", split = FALSE)
[13:36:52.848]             base::close(...future.stdout)
[13:36:52.848]         }, add = TRUE)
[13:36:52.848]     }
[13:36:52.848]     ...future.frame <- base::sys.nframe()
[13:36:52.848]     ...future.conditions <- base::list()
[13:36:52.848]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.848]     if (FALSE) {
[13:36:52.848]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.848]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.848]     }
[13:36:52.848]     ...future.result <- base::tryCatch({
[13:36:52.848]         base::withCallingHandlers({
[13:36:52.848]             ...future.value <- base::withVisible(base::local({
[13:36:52.848]                 ...future.makeSendCondition <- base::local({
[13:36:52.848]                   sendCondition <- NULL
[13:36:52.848]                   function(frame = 1L) {
[13:36:52.848]                     if (is.function(sendCondition)) 
[13:36:52.848]                       return(sendCondition)
[13:36:52.848]                     ns <- getNamespace("parallel")
[13:36:52.848]                     if (exists("sendData", mode = "function", 
[13:36:52.848]                       envir = ns)) {
[13:36:52.848]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.848]                         envir = ns)
[13:36:52.848]                       envir <- sys.frame(frame)
[13:36:52.848]                       master <- NULL
[13:36:52.848]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.848]                         !identical(envir, emptyenv())) {
[13:36:52.848]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.848]                           inherits = FALSE)) {
[13:36:52.848]                           master <- get("master", mode = "list", 
[13:36:52.848]                             envir = envir, inherits = FALSE)
[13:36:52.848]                           if (inherits(master, c("SOCKnode", 
[13:36:52.848]                             "SOCK0node"))) {
[13:36:52.848]                             sendCondition <<- function(cond) {
[13:36:52.848]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.848]                                 success = TRUE)
[13:36:52.848]                               parallel_sendData(master, data)
[13:36:52.848]                             }
[13:36:52.848]                             return(sendCondition)
[13:36:52.848]                           }
[13:36:52.848]                         }
[13:36:52.848]                         frame <- frame + 1L
[13:36:52.848]                         envir <- sys.frame(frame)
[13:36:52.848]                       }
[13:36:52.848]                     }
[13:36:52.848]                     sendCondition <<- function(cond) NULL
[13:36:52.848]                   }
[13:36:52.848]                 })
[13:36:52.848]                 withCallingHandlers({
[13:36:52.848]                   {
[13:36:52.848]                     x$a <- 1
[13:36:52.848]                     x
[13:36:52.848]                   }
[13:36:52.848]                 }, immediateCondition = function(cond) {
[13:36:52.848]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.848]                   sendCondition(cond)
[13:36:52.848]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.848]                   {
[13:36:52.848]                     inherits <- base::inherits
[13:36:52.848]                     invokeRestart <- base::invokeRestart
[13:36:52.848]                     is.null <- base::is.null
[13:36:52.848]                     muffled <- FALSE
[13:36:52.848]                     if (inherits(cond, "message")) {
[13:36:52.848]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.848]                       if (muffled) 
[13:36:52.848]                         invokeRestart("muffleMessage")
[13:36:52.848]                     }
[13:36:52.848]                     else if (inherits(cond, "warning")) {
[13:36:52.848]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.848]                       if (muffled) 
[13:36:52.848]                         invokeRestart("muffleWarning")
[13:36:52.848]                     }
[13:36:52.848]                     else if (inherits(cond, "condition")) {
[13:36:52.848]                       if (!is.null(pattern)) {
[13:36:52.848]                         computeRestarts <- base::computeRestarts
[13:36:52.848]                         grepl <- base::grepl
[13:36:52.848]                         restarts <- computeRestarts(cond)
[13:36:52.848]                         for (restart in restarts) {
[13:36:52.848]                           name <- restart$name
[13:36:52.848]                           if (is.null(name)) 
[13:36:52.848]                             next
[13:36:52.848]                           if (!grepl(pattern, name)) 
[13:36:52.848]                             next
[13:36:52.848]                           invokeRestart(restart)
[13:36:52.848]                           muffled <- TRUE
[13:36:52.848]                           break
[13:36:52.848]                         }
[13:36:52.848]                       }
[13:36:52.848]                     }
[13:36:52.848]                     invisible(muffled)
[13:36:52.848]                   }
[13:36:52.848]                   muffleCondition(cond)
[13:36:52.848]                 })
[13:36:52.848]             }))
[13:36:52.848]             future::FutureResult(value = ...future.value$value, 
[13:36:52.848]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.848]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.848]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.848]                     ...future.globalenv.names))
[13:36:52.848]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.848]         }, condition = base::local({
[13:36:52.848]             c <- base::c
[13:36:52.848]             inherits <- base::inherits
[13:36:52.848]             invokeRestart <- base::invokeRestart
[13:36:52.848]             length <- base::length
[13:36:52.848]             list <- base::list
[13:36:52.848]             seq.int <- base::seq.int
[13:36:52.848]             signalCondition <- base::signalCondition
[13:36:52.848]             sys.calls <- base::sys.calls
[13:36:52.848]             `[[` <- base::`[[`
[13:36:52.848]             `+` <- base::`+`
[13:36:52.848]             `<<-` <- base::`<<-`
[13:36:52.848]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.848]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.848]                   3L)]
[13:36:52.848]             }
[13:36:52.848]             function(cond) {
[13:36:52.848]                 is_error <- inherits(cond, "error")
[13:36:52.848]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.848]                   NULL)
[13:36:52.848]                 if (is_error) {
[13:36:52.848]                   sessionInformation <- function() {
[13:36:52.848]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.848]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.848]                       search = base::search(), system = base::Sys.info())
[13:36:52.848]                   }
[13:36:52.848]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.848]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.848]                     cond$call), session = sessionInformation(), 
[13:36:52.848]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.848]                   signalCondition(cond)
[13:36:52.848]                 }
[13:36:52.848]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.848]                 "immediateCondition"))) {
[13:36:52.848]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.848]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.848]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.848]                   if (TRUE && !signal) {
[13:36:52.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.848]                     {
[13:36:52.848]                       inherits <- base::inherits
[13:36:52.848]                       invokeRestart <- base::invokeRestart
[13:36:52.848]                       is.null <- base::is.null
[13:36:52.848]                       muffled <- FALSE
[13:36:52.848]                       if (inherits(cond, "message")) {
[13:36:52.848]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.848]                         if (muffled) 
[13:36:52.848]                           invokeRestart("muffleMessage")
[13:36:52.848]                       }
[13:36:52.848]                       else if (inherits(cond, "warning")) {
[13:36:52.848]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.848]                         if (muffled) 
[13:36:52.848]                           invokeRestart("muffleWarning")
[13:36:52.848]                       }
[13:36:52.848]                       else if (inherits(cond, "condition")) {
[13:36:52.848]                         if (!is.null(pattern)) {
[13:36:52.848]                           computeRestarts <- base::computeRestarts
[13:36:52.848]                           grepl <- base::grepl
[13:36:52.848]                           restarts <- computeRestarts(cond)
[13:36:52.848]                           for (restart in restarts) {
[13:36:52.848]                             name <- restart$name
[13:36:52.848]                             if (is.null(name)) 
[13:36:52.848]                               next
[13:36:52.848]                             if (!grepl(pattern, name)) 
[13:36:52.848]                               next
[13:36:52.848]                             invokeRestart(restart)
[13:36:52.848]                             muffled <- TRUE
[13:36:52.848]                             break
[13:36:52.848]                           }
[13:36:52.848]                         }
[13:36:52.848]                       }
[13:36:52.848]                       invisible(muffled)
[13:36:52.848]                     }
[13:36:52.848]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.848]                   }
[13:36:52.848]                 }
[13:36:52.848]                 else {
[13:36:52.848]                   if (TRUE) {
[13:36:52.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.848]                     {
[13:36:52.848]                       inherits <- base::inherits
[13:36:52.848]                       invokeRestart <- base::invokeRestart
[13:36:52.848]                       is.null <- base::is.null
[13:36:52.848]                       muffled <- FALSE
[13:36:52.848]                       if (inherits(cond, "message")) {
[13:36:52.848]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.848]                         if (muffled) 
[13:36:52.848]                           invokeRestart("muffleMessage")
[13:36:52.848]                       }
[13:36:52.848]                       else if (inherits(cond, "warning")) {
[13:36:52.848]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.848]                         if (muffled) 
[13:36:52.848]                           invokeRestart("muffleWarning")
[13:36:52.848]                       }
[13:36:52.848]                       else if (inherits(cond, "condition")) {
[13:36:52.848]                         if (!is.null(pattern)) {
[13:36:52.848]                           computeRestarts <- base::computeRestarts
[13:36:52.848]                           grepl <- base::grepl
[13:36:52.848]                           restarts <- computeRestarts(cond)
[13:36:52.848]                           for (restart in restarts) {
[13:36:52.848]                             name <- restart$name
[13:36:52.848]                             if (is.null(name)) 
[13:36:52.848]                               next
[13:36:52.848]                             if (!grepl(pattern, name)) 
[13:36:52.848]                               next
[13:36:52.848]                             invokeRestart(restart)
[13:36:52.848]                             muffled <- TRUE
[13:36:52.848]                             break
[13:36:52.848]                           }
[13:36:52.848]                         }
[13:36:52.848]                       }
[13:36:52.848]                       invisible(muffled)
[13:36:52.848]                     }
[13:36:52.848]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.848]                   }
[13:36:52.848]                 }
[13:36:52.848]             }
[13:36:52.848]         }))
[13:36:52.848]     }, error = function(ex) {
[13:36:52.848]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.848]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.848]                 ...future.rng), started = ...future.startTime, 
[13:36:52.848]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.848]             version = "1.8"), class = "FutureResult")
[13:36:52.848]     }, finally = {
[13:36:52.848]         if (!identical(...future.workdir, getwd())) 
[13:36:52.848]             setwd(...future.workdir)
[13:36:52.848]         {
[13:36:52.848]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.848]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.848]             }
[13:36:52.848]             base::options(...future.oldOptions)
[13:36:52.848]             if (.Platform$OS.type == "windows") {
[13:36:52.848]                 old_names <- names(...future.oldEnvVars)
[13:36:52.848]                 envs <- base::Sys.getenv()
[13:36:52.848]                 names <- names(envs)
[13:36:52.848]                 common <- intersect(names, old_names)
[13:36:52.848]                 added <- setdiff(names, old_names)
[13:36:52.848]                 removed <- setdiff(old_names, names)
[13:36:52.848]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.848]                   envs[common]]
[13:36:52.848]                 NAMES <- toupper(changed)
[13:36:52.848]                 args <- list()
[13:36:52.848]                 for (kk in seq_along(NAMES)) {
[13:36:52.848]                   name <- changed[[kk]]
[13:36:52.848]                   NAME <- NAMES[[kk]]
[13:36:52.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.848]                     next
[13:36:52.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.848]                 }
[13:36:52.848]                 NAMES <- toupper(added)
[13:36:52.848]                 for (kk in seq_along(NAMES)) {
[13:36:52.848]                   name <- added[[kk]]
[13:36:52.848]                   NAME <- NAMES[[kk]]
[13:36:52.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.848]                     next
[13:36:52.848]                   args[[name]] <- ""
[13:36:52.848]                 }
[13:36:52.848]                 NAMES <- toupper(removed)
[13:36:52.848]                 for (kk in seq_along(NAMES)) {
[13:36:52.848]                   name <- removed[[kk]]
[13:36:52.848]                   NAME <- NAMES[[kk]]
[13:36:52.848]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.848]                     next
[13:36:52.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.848]                 }
[13:36:52.848]                 if (length(args) > 0) 
[13:36:52.848]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.848]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.848]             }
[13:36:52.848]             else {
[13:36:52.848]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.848]             }
[13:36:52.848]             {
[13:36:52.848]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.848]                   0L) {
[13:36:52.848]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.848]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.848]                   base::options(opts)
[13:36:52.848]                 }
[13:36:52.848]                 {
[13:36:52.848]                   {
[13:36:52.848]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.848]                     NULL
[13:36:52.848]                   }
[13:36:52.848]                   options(future.plan = NULL)
[13:36:52.848]                   if (is.na(NA_character_)) 
[13:36:52.848]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.848]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.848]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.848]                     .init = FALSE)
[13:36:52.848]                 }
[13:36:52.848]             }
[13:36:52.848]         }
[13:36:52.848]     })
[13:36:52.848]     if (TRUE) {
[13:36:52.848]         base::sink(type = "output", split = FALSE)
[13:36:52.848]         if (TRUE) {
[13:36:52.848]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.848]         }
[13:36:52.848]         else {
[13:36:52.848]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.848]         }
[13:36:52.848]         base::close(...future.stdout)
[13:36:52.848]         ...future.stdout <- NULL
[13:36:52.848]     }
[13:36:52.848]     ...future.result$conditions <- ...future.conditions
[13:36:52.848]     ...future.result$finished <- base::Sys.time()
[13:36:52.848]     ...future.result
[13:36:52.848] }
[13:36:52.850] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:52.851] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:52.851] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:52.851] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:52.852] MultisessionFuture started
[13:36:52.852] - Launch lazy future ... done
[13:36:52.852] run() for ‘MultisessionFuture’ ... done
[13:36:52.852] result() for ClusterFuture ...
[13:36:52.853] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.853] - Validating connection of MultisessionFuture
[13:36:52.857] - received message: FutureResult
[13:36:52.857] - Received FutureResult
[13:36:52.857] - Erased future from FutureRegistry
[13:36:52.858] result() for ClusterFuture ...
[13:36:52.858] - result already collected: FutureResult
[13:36:52.858] result() for ClusterFuture ... done
[13:36:52.858] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.858] result() for ClusterFuture ... done
[13:36:52.858] result() for ClusterFuture ...
[13:36:52.858] - result already collected: FutureResult
[13:36:52.858] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.859] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.859] Searching for globals...
[13:36:52.861] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.862] Searching for globals ... DONE
[13:36:52.862] Resolving globals: TRUE
[13:36:52.862] Resolving any globals that are futures ...
[13:36:52.862] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.862] Resolving any globals that are futures ... DONE
[13:36:52.863] Resolving futures part of globals (recursively) ...
[13:36:52.863] resolve() on list ...
[13:36:52.863]  recursive: 99
[13:36:52.863]  length: 1
[13:36:52.863]  elements: ‘x’
[13:36:52.863]  length: 0 (resolved future 1)
[13:36:52.863] resolve() on list ... DONE
[13:36:52.864] - globals: [1] ‘x’
[13:36:52.864] Resolving futures part of globals (recursively) ... DONE
[13:36:52.864] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.864] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.864] - globals: [1] ‘x’
[13:36:52.865] 
[13:36:52.865] getGlobalsAndPackages() ... DONE
[13:36:52.865] run() for ‘Future’ ...
[13:36:52.865] - state: ‘created’
[13:36:52.865] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.879] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.880] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:52.880]   - Field: ‘node’
[13:36:52.880]   - Field: ‘label’
[13:36:52.880]   - Field: ‘local’
[13:36:52.880]   - Field: ‘owner’
[13:36:52.880]   - Field: ‘envir’
[13:36:52.880]   - Field: ‘workers’
[13:36:52.880]   - Field: ‘packages’
[13:36:52.880]   - Field: ‘gc’
[13:36:52.881]   - Field: ‘conditions’
[13:36:52.881]   - Field: ‘persistent’
[13:36:52.881]   - Field: ‘expr’
[13:36:52.881]   - Field: ‘uuid’
[13:36:52.881]   - Field: ‘seed’
[13:36:52.881]   - Field: ‘version’
[13:36:52.881]   - Field: ‘result’
[13:36:52.881]   - Field: ‘asynchronous’
[13:36:52.881]   - Field: ‘calls’
[13:36:52.882]   - Field: ‘globals’
[13:36:52.882]   - Field: ‘stdout’
[13:36:52.882]   - Field: ‘earlySignal’
[13:36:52.882]   - Field: ‘lazy’
[13:36:52.882]   - Field: ‘state’
[13:36:52.882] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:52.882] - Launch lazy future ...
[13:36:52.883] Packages needed by the future expression (n = 0): <none>
[13:36:52.883] Packages needed by future strategies (n = 0): <none>
[13:36:52.883] {
[13:36:52.883]     {
[13:36:52.883]         {
[13:36:52.883]             ...future.startTime <- base::Sys.time()
[13:36:52.883]             {
[13:36:52.883]                 {
[13:36:52.883]                   {
[13:36:52.883]                     {
[13:36:52.883]                       base::local({
[13:36:52.883]                         has_future <- base::requireNamespace("future", 
[13:36:52.883]                           quietly = TRUE)
[13:36:52.883]                         if (has_future) {
[13:36:52.883]                           ns <- base::getNamespace("future")
[13:36:52.883]                           version <- ns[[".package"]][["version"]]
[13:36:52.883]                           if (is.null(version)) 
[13:36:52.883]                             version <- utils::packageVersion("future")
[13:36:52.883]                         }
[13:36:52.883]                         else {
[13:36:52.883]                           version <- NULL
[13:36:52.883]                         }
[13:36:52.883]                         if (!has_future || version < "1.8.0") {
[13:36:52.883]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.883]                             "", base::R.version$version.string), 
[13:36:52.883]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.883]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.883]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.883]                               "release", "version")], collapse = " "), 
[13:36:52.883]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.883]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.883]                             info)
[13:36:52.883]                           info <- base::paste(info, collapse = "; ")
[13:36:52.883]                           if (!has_future) {
[13:36:52.883]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.883]                               info)
[13:36:52.883]                           }
[13:36:52.883]                           else {
[13:36:52.883]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.883]                               info, version)
[13:36:52.883]                           }
[13:36:52.883]                           base::stop(msg)
[13:36:52.883]                         }
[13:36:52.883]                       })
[13:36:52.883]                     }
[13:36:52.883]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.883]                     base::options(mc.cores = 1L)
[13:36:52.883]                   }
[13:36:52.883]                   ...future.strategy.old <- future::plan("list")
[13:36:52.883]                   options(future.plan = NULL)
[13:36:52.883]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.883]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.883]                 }
[13:36:52.883]                 ...future.workdir <- getwd()
[13:36:52.883]             }
[13:36:52.883]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.883]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.883]         }
[13:36:52.883]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.883]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.883]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.883]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.883]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.883]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.883]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.883]             base::names(...future.oldOptions))
[13:36:52.883]     }
[13:36:52.883]     if (FALSE) {
[13:36:52.883]     }
[13:36:52.883]     else {
[13:36:52.883]         if (TRUE) {
[13:36:52.883]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.883]                 open = "w")
[13:36:52.883]         }
[13:36:52.883]         else {
[13:36:52.883]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.883]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.883]         }
[13:36:52.883]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.883]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.883]             base::sink(type = "output", split = FALSE)
[13:36:52.883]             base::close(...future.stdout)
[13:36:52.883]         }, add = TRUE)
[13:36:52.883]     }
[13:36:52.883]     ...future.frame <- base::sys.nframe()
[13:36:52.883]     ...future.conditions <- base::list()
[13:36:52.883]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.883]     if (FALSE) {
[13:36:52.883]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.883]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.883]     }
[13:36:52.883]     ...future.result <- base::tryCatch({
[13:36:52.883]         base::withCallingHandlers({
[13:36:52.883]             ...future.value <- base::withVisible(base::local({
[13:36:52.883]                 ...future.makeSendCondition <- base::local({
[13:36:52.883]                   sendCondition <- NULL
[13:36:52.883]                   function(frame = 1L) {
[13:36:52.883]                     if (is.function(sendCondition)) 
[13:36:52.883]                       return(sendCondition)
[13:36:52.883]                     ns <- getNamespace("parallel")
[13:36:52.883]                     if (exists("sendData", mode = "function", 
[13:36:52.883]                       envir = ns)) {
[13:36:52.883]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.883]                         envir = ns)
[13:36:52.883]                       envir <- sys.frame(frame)
[13:36:52.883]                       master <- NULL
[13:36:52.883]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.883]                         !identical(envir, emptyenv())) {
[13:36:52.883]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.883]                           inherits = FALSE)) {
[13:36:52.883]                           master <- get("master", mode = "list", 
[13:36:52.883]                             envir = envir, inherits = FALSE)
[13:36:52.883]                           if (inherits(master, c("SOCKnode", 
[13:36:52.883]                             "SOCK0node"))) {
[13:36:52.883]                             sendCondition <<- function(cond) {
[13:36:52.883]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.883]                                 success = TRUE)
[13:36:52.883]                               parallel_sendData(master, data)
[13:36:52.883]                             }
[13:36:52.883]                             return(sendCondition)
[13:36:52.883]                           }
[13:36:52.883]                         }
[13:36:52.883]                         frame <- frame + 1L
[13:36:52.883]                         envir <- sys.frame(frame)
[13:36:52.883]                       }
[13:36:52.883]                     }
[13:36:52.883]                     sendCondition <<- function(cond) NULL
[13:36:52.883]                   }
[13:36:52.883]                 })
[13:36:52.883]                 withCallingHandlers({
[13:36:52.883]                   {
[13:36:52.883]                     x$a <- 1
[13:36:52.883]                     x
[13:36:52.883]                   }
[13:36:52.883]                 }, immediateCondition = function(cond) {
[13:36:52.883]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.883]                   sendCondition(cond)
[13:36:52.883]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.883]                   {
[13:36:52.883]                     inherits <- base::inherits
[13:36:52.883]                     invokeRestart <- base::invokeRestart
[13:36:52.883]                     is.null <- base::is.null
[13:36:52.883]                     muffled <- FALSE
[13:36:52.883]                     if (inherits(cond, "message")) {
[13:36:52.883]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.883]                       if (muffled) 
[13:36:52.883]                         invokeRestart("muffleMessage")
[13:36:52.883]                     }
[13:36:52.883]                     else if (inherits(cond, "warning")) {
[13:36:52.883]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.883]                       if (muffled) 
[13:36:52.883]                         invokeRestart("muffleWarning")
[13:36:52.883]                     }
[13:36:52.883]                     else if (inherits(cond, "condition")) {
[13:36:52.883]                       if (!is.null(pattern)) {
[13:36:52.883]                         computeRestarts <- base::computeRestarts
[13:36:52.883]                         grepl <- base::grepl
[13:36:52.883]                         restarts <- computeRestarts(cond)
[13:36:52.883]                         for (restart in restarts) {
[13:36:52.883]                           name <- restart$name
[13:36:52.883]                           if (is.null(name)) 
[13:36:52.883]                             next
[13:36:52.883]                           if (!grepl(pattern, name)) 
[13:36:52.883]                             next
[13:36:52.883]                           invokeRestart(restart)
[13:36:52.883]                           muffled <- TRUE
[13:36:52.883]                           break
[13:36:52.883]                         }
[13:36:52.883]                       }
[13:36:52.883]                     }
[13:36:52.883]                     invisible(muffled)
[13:36:52.883]                   }
[13:36:52.883]                   muffleCondition(cond)
[13:36:52.883]                 })
[13:36:52.883]             }))
[13:36:52.883]             future::FutureResult(value = ...future.value$value, 
[13:36:52.883]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.883]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.883]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.883]                     ...future.globalenv.names))
[13:36:52.883]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.883]         }, condition = base::local({
[13:36:52.883]             c <- base::c
[13:36:52.883]             inherits <- base::inherits
[13:36:52.883]             invokeRestart <- base::invokeRestart
[13:36:52.883]             length <- base::length
[13:36:52.883]             list <- base::list
[13:36:52.883]             seq.int <- base::seq.int
[13:36:52.883]             signalCondition <- base::signalCondition
[13:36:52.883]             sys.calls <- base::sys.calls
[13:36:52.883]             `[[` <- base::`[[`
[13:36:52.883]             `+` <- base::`+`
[13:36:52.883]             `<<-` <- base::`<<-`
[13:36:52.883]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.883]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.883]                   3L)]
[13:36:52.883]             }
[13:36:52.883]             function(cond) {
[13:36:52.883]                 is_error <- inherits(cond, "error")
[13:36:52.883]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.883]                   NULL)
[13:36:52.883]                 if (is_error) {
[13:36:52.883]                   sessionInformation <- function() {
[13:36:52.883]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.883]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.883]                       search = base::search(), system = base::Sys.info())
[13:36:52.883]                   }
[13:36:52.883]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.883]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.883]                     cond$call), session = sessionInformation(), 
[13:36:52.883]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.883]                   signalCondition(cond)
[13:36:52.883]                 }
[13:36:52.883]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.883]                 "immediateCondition"))) {
[13:36:52.883]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.883]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.883]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.883]                   if (TRUE && !signal) {
[13:36:52.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.883]                     {
[13:36:52.883]                       inherits <- base::inherits
[13:36:52.883]                       invokeRestart <- base::invokeRestart
[13:36:52.883]                       is.null <- base::is.null
[13:36:52.883]                       muffled <- FALSE
[13:36:52.883]                       if (inherits(cond, "message")) {
[13:36:52.883]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.883]                         if (muffled) 
[13:36:52.883]                           invokeRestart("muffleMessage")
[13:36:52.883]                       }
[13:36:52.883]                       else if (inherits(cond, "warning")) {
[13:36:52.883]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.883]                         if (muffled) 
[13:36:52.883]                           invokeRestart("muffleWarning")
[13:36:52.883]                       }
[13:36:52.883]                       else if (inherits(cond, "condition")) {
[13:36:52.883]                         if (!is.null(pattern)) {
[13:36:52.883]                           computeRestarts <- base::computeRestarts
[13:36:52.883]                           grepl <- base::grepl
[13:36:52.883]                           restarts <- computeRestarts(cond)
[13:36:52.883]                           for (restart in restarts) {
[13:36:52.883]                             name <- restart$name
[13:36:52.883]                             if (is.null(name)) 
[13:36:52.883]                               next
[13:36:52.883]                             if (!grepl(pattern, name)) 
[13:36:52.883]                               next
[13:36:52.883]                             invokeRestart(restart)
[13:36:52.883]                             muffled <- TRUE
[13:36:52.883]                             break
[13:36:52.883]                           }
[13:36:52.883]                         }
[13:36:52.883]                       }
[13:36:52.883]                       invisible(muffled)
[13:36:52.883]                     }
[13:36:52.883]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.883]                   }
[13:36:52.883]                 }
[13:36:52.883]                 else {
[13:36:52.883]                   if (TRUE) {
[13:36:52.883]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.883]                     {
[13:36:52.883]                       inherits <- base::inherits
[13:36:52.883]                       invokeRestart <- base::invokeRestart
[13:36:52.883]                       is.null <- base::is.null
[13:36:52.883]                       muffled <- FALSE
[13:36:52.883]                       if (inherits(cond, "message")) {
[13:36:52.883]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.883]                         if (muffled) 
[13:36:52.883]                           invokeRestart("muffleMessage")
[13:36:52.883]                       }
[13:36:52.883]                       else if (inherits(cond, "warning")) {
[13:36:52.883]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.883]                         if (muffled) 
[13:36:52.883]                           invokeRestart("muffleWarning")
[13:36:52.883]                       }
[13:36:52.883]                       else if (inherits(cond, "condition")) {
[13:36:52.883]                         if (!is.null(pattern)) {
[13:36:52.883]                           computeRestarts <- base::computeRestarts
[13:36:52.883]                           grepl <- base::grepl
[13:36:52.883]                           restarts <- computeRestarts(cond)
[13:36:52.883]                           for (restart in restarts) {
[13:36:52.883]                             name <- restart$name
[13:36:52.883]                             if (is.null(name)) 
[13:36:52.883]                               next
[13:36:52.883]                             if (!grepl(pattern, name)) 
[13:36:52.883]                               next
[13:36:52.883]                             invokeRestart(restart)
[13:36:52.883]                             muffled <- TRUE
[13:36:52.883]                             break
[13:36:52.883]                           }
[13:36:52.883]                         }
[13:36:52.883]                       }
[13:36:52.883]                       invisible(muffled)
[13:36:52.883]                     }
[13:36:52.883]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.883]                   }
[13:36:52.883]                 }
[13:36:52.883]             }
[13:36:52.883]         }))
[13:36:52.883]     }, error = function(ex) {
[13:36:52.883]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.883]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.883]                 ...future.rng), started = ...future.startTime, 
[13:36:52.883]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.883]             version = "1.8"), class = "FutureResult")
[13:36:52.883]     }, finally = {
[13:36:52.883]         if (!identical(...future.workdir, getwd())) 
[13:36:52.883]             setwd(...future.workdir)
[13:36:52.883]         {
[13:36:52.883]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.883]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.883]             }
[13:36:52.883]             base::options(...future.oldOptions)
[13:36:52.883]             if (.Platform$OS.type == "windows") {
[13:36:52.883]                 old_names <- names(...future.oldEnvVars)
[13:36:52.883]                 envs <- base::Sys.getenv()
[13:36:52.883]                 names <- names(envs)
[13:36:52.883]                 common <- intersect(names, old_names)
[13:36:52.883]                 added <- setdiff(names, old_names)
[13:36:52.883]                 removed <- setdiff(old_names, names)
[13:36:52.883]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.883]                   envs[common]]
[13:36:52.883]                 NAMES <- toupper(changed)
[13:36:52.883]                 args <- list()
[13:36:52.883]                 for (kk in seq_along(NAMES)) {
[13:36:52.883]                   name <- changed[[kk]]
[13:36:52.883]                   NAME <- NAMES[[kk]]
[13:36:52.883]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.883]                     next
[13:36:52.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.883]                 }
[13:36:52.883]                 NAMES <- toupper(added)
[13:36:52.883]                 for (kk in seq_along(NAMES)) {
[13:36:52.883]                   name <- added[[kk]]
[13:36:52.883]                   NAME <- NAMES[[kk]]
[13:36:52.883]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.883]                     next
[13:36:52.883]                   args[[name]] <- ""
[13:36:52.883]                 }
[13:36:52.883]                 NAMES <- toupper(removed)
[13:36:52.883]                 for (kk in seq_along(NAMES)) {
[13:36:52.883]                   name <- removed[[kk]]
[13:36:52.883]                   NAME <- NAMES[[kk]]
[13:36:52.883]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.883]                     next
[13:36:52.883]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.883]                 }
[13:36:52.883]                 if (length(args) > 0) 
[13:36:52.883]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.883]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.883]             }
[13:36:52.883]             else {
[13:36:52.883]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.883]             }
[13:36:52.883]             {
[13:36:52.883]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.883]                   0L) {
[13:36:52.883]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.883]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.883]                   base::options(opts)
[13:36:52.883]                 }
[13:36:52.883]                 {
[13:36:52.883]                   {
[13:36:52.883]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.883]                     NULL
[13:36:52.883]                   }
[13:36:52.883]                   options(future.plan = NULL)
[13:36:52.883]                   if (is.na(NA_character_)) 
[13:36:52.883]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.883]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.883]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.883]                     .init = FALSE)
[13:36:52.883]                 }
[13:36:52.883]             }
[13:36:52.883]         }
[13:36:52.883]     })
[13:36:52.883]     if (TRUE) {
[13:36:52.883]         base::sink(type = "output", split = FALSE)
[13:36:52.883]         if (TRUE) {
[13:36:52.883]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.883]         }
[13:36:52.883]         else {
[13:36:52.883]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.883]         }
[13:36:52.883]         base::close(...future.stdout)
[13:36:52.883]         ...future.stdout <- NULL
[13:36:52.883]     }
[13:36:52.883]     ...future.result$conditions <- ...future.conditions
[13:36:52.883]     ...future.result$finished <- base::Sys.time()
[13:36:52.883]     ...future.result
[13:36:52.883] }
[13:36:52.886] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:52.886] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:52.887] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:52.887] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:52.887] MultisessionFuture started
[13:36:52.888] - Launch lazy future ... done
[13:36:52.888] run() for ‘MultisessionFuture’ ... done
[13:36:52.888] result() for ClusterFuture ...
[13:36:52.888] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.888] - Validating connection of MultisessionFuture
[13:36:52.889] - received message: FutureResult
[13:36:52.889] - Received FutureResult
[13:36:52.890] - Erased future from FutureRegistry
[13:36:52.890] result() for ClusterFuture ...
[13:36:52.890] - result already collected: FutureResult
[13:36:52.890] result() for ClusterFuture ... done
[13:36:52.890] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.890] result() for ClusterFuture ... done
[13:36:52.890] result() for ClusterFuture ...
[13:36:52.890] - result already collected: FutureResult
[13:36:52.890] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.891] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.891] Searching for globals...
[13:36:52.894] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.894] Searching for globals ... DONE
[13:36:52.894] Resolving globals: TRUE
[13:36:52.894] Resolving any globals that are futures ...
[13:36:52.894] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.894] Resolving any globals that are futures ... DONE
[13:36:52.895] Resolving futures part of globals (recursively) ...
[13:36:52.895] resolve() on list ...
[13:36:52.895]  recursive: 99
[13:36:52.895]  length: 1
[13:36:52.895]  elements: ‘x’
[13:36:52.895]  length: 0 (resolved future 1)
[13:36:52.896] resolve() on list ... DONE
[13:36:52.896] - globals: [1] ‘x’
[13:36:52.896] Resolving futures part of globals (recursively) ... DONE
[13:36:52.896] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.896] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.896] - globals: [1] ‘x’
[13:36:52.897] 
[13:36:52.897] getGlobalsAndPackages() ... DONE
[13:36:52.897] run() for ‘Future’ ...
[13:36:52.897] - state: ‘created’
[13:36:52.897] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.917] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.917] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:52.917]   - Field: ‘node’
[13:36:52.918]   - Field: ‘label’
[13:36:52.918]   - Field: ‘local’
[13:36:52.918]   - Field: ‘owner’
[13:36:52.918]   - Field: ‘envir’
[13:36:52.918]   - Field: ‘workers’
[13:36:52.918]   - Field: ‘packages’
[13:36:52.918]   - Field: ‘gc’
[13:36:52.918]   - Field: ‘conditions’
[13:36:52.918]   - Field: ‘persistent’
[13:36:52.918]   - Field: ‘expr’
[13:36:52.918]   - Field: ‘uuid’
[13:36:52.919]   - Field: ‘seed’
[13:36:52.919]   - Field: ‘version’
[13:36:52.919]   - Field: ‘result’
[13:36:52.919]   - Field: ‘asynchronous’
[13:36:52.919]   - Field: ‘calls’
[13:36:52.919]   - Field: ‘globals’
[13:36:52.919]   - Field: ‘stdout’
[13:36:52.919]   - Field: ‘earlySignal’
[13:36:52.919]   - Field: ‘lazy’
[13:36:52.919]   - Field: ‘state’
[13:36:52.919] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:52.919] - Launch lazy future ...
[13:36:52.920] Packages needed by the future expression (n = 0): <none>
[13:36:52.920] Packages needed by future strategies (n = 0): <none>
[13:36:52.920] {
[13:36:52.920]     {
[13:36:52.920]         {
[13:36:52.920]             ...future.startTime <- base::Sys.time()
[13:36:52.920]             {
[13:36:52.920]                 {
[13:36:52.920]                   {
[13:36:52.920]                     {
[13:36:52.920]                       base::local({
[13:36:52.920]                         has_future <- base::requireNamespace("future", 
[13:36:52.920]                           quietly = TRUE)
[13:36:52.920]                         if (has_future) {
[13:36:52.920]                           ns <- base::getNamespace("future")
[13:36:52.920]                           version <- ns[[".package"]][["version"]]
[13:36:52.920]                           if (is.null(version)) 
[13:36:52.920]                             version <- utils::packageVersion("future")
[13:36:52.920]                         }
[13:36:52.920]                         else {
[13:36:52.920]                           version <- NULL
[13:36:52.920]                         }
[13:36:52.920]                         if (!has_future || version < "1.8.0") {
[13:36:52.920]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.920]                             "", base::R.version$version.string), 
[13:36:52.920]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.920]                               "release", "version")], collapse = " "), 
[13:36:52.920]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.920]                             info)
[13:36:52.920]                           info <- base::paste(info, collapse = "; ")
[13:36:52.920]                           if (!has_future) {
[13:36:52.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.920]                               info)
[13:36:52.920]                           }
[13:36:52.920]                           else {
[13:36:52.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.920]                               info, version)
[13:36:52.920]                           }
[13:36:52.920]                           base::stop(msg)
[13:36:52.920]                         }
[13:36:52.920]                       })
[13:36:52.920]                     }
[13:36:52.920]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.920]                     base::options(mc.cores = 1L)
[13:36:52.920]                   }
[13:36:52.920]                   ...future.strategy.old <- future::plan("list")
[13:36:52.920]                   options(future.plan = NULL)
[13:36:52.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.920]                 }
[13:36:52.920]                 ...future.workdir <- getwd()
[13:36:52.920]             }
[13:36:52.920]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.920]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.920]         }
[13:36:52.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.920]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.920]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.920]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.920]             base::names(...future.oldOptions))
[13:36:52.920]     }
[13:36:52.920]     if (FALSE) {
[13:36:52.920]     }
[13:36:52.920]     else {
[13:36:52.920]         if (TRUE) {
[13:36:52.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.920]                 open = "w")
[13:36:52.920]         }
[13:36:52.920]         else {
[13:36:52.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.920]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.920]         }
[13:36:52.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.920]             base::sink(type = "output", split = FALSE)
[13:36:52.920]             base::close(...future.stdout)
[13:36:52.920]         }, add = TRUE)
[13:36:52.920]     }
[13:36:52.920]     ...future.frame <- base::sys.nframe()
[13:36:52.920]     ...future.conditions <- base::list()
[13:36:52.920]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.920]     if (FALSE) {
[13:36:52.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.920]     }
[13:36:52.920]     ...future.result <- base::tryCatch({
[13:36:52.920]         base::withCallingHandlers({
[13:36:52.920]             ...future.value <- base::withVisible(base::local({
[13:36:52.920]                 ...future.makeSendCondition <- base::local({
[13:36:52.920]                   sendCondition <- NULL
[13:36:52.920]                   function(frame = 1L) {
[13:36:52.920]                     if (is.function(sendCondition)) 
[13:36:52.920]                       return(sendCondition)
[13:36:52.920]                     ns <- getNamespace("parallel")
[13:36:52.920]                     if (exists("sendData", mode = "function", 
[13:36:52.920]                       envir = ns)) {
[13:36:52.920]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.920]                         envir = ns)
[13:36:52.920]                       envir <- sys.frame(frame)
[13:36:52.920]                       master <- NULL
[13:36:52.920]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.920]                         !identical(envir, emptyenv())) {
[13:36:52.920]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.920]                           inherits = FALSE)) {
[13:36:52.920]                           master <- get("master", mode = "list", 
[13:36:52.920]                             envir = envir, inherits = FALSE)
[13:36:52.920]                           if (inherits(master, c("SOCKnode", 
[13:36:52.920]                             "SOCK0node"))) {
[13:36:52.920]                             sendCondition <<- function(cond) {
[13:36:52.920]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.920]                                 success = TRUE)
[13:36:52.920]                               parallel_sendData(master, data)
[13:36:52.920]                             }
[13:36:52.920]                             return(sendCondition)
[13:36:52.920]                           }
[13:36:52.920]                         }
[13:36:52.920]                         frame <- frame + 1L
[13:36:52.920]                         envir <- sys.frame(frame)
[13:36:52.920]                       }
[13:36:52.920]                     }
[13:36:52.920]                     sendCondition <<- function(cond) NULL
[13:36:52.920]                   }
[13:36:52.920]                 })
[13:36:52.920]                 withCallingHandlers({
[13:36:52.920]                   {
[13:36:52.920]                     x$a <- 1
[13:36:52.920]                     x
[13:36:52.920]                   }
[13:36:52.920]                 }, immediateCondition = function(cond) {
[13:36:52.920]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.920]                   sendCondition(cond)
[13:36:52.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.920]                   {
[13:36:52.920]                     inherits <- base::inherits
[13:36:52.920]                     invokeRestart <- base::invokeRestart
[13:36:52.920]                     is.null <- base::is.null
[13:36:52.920]                     muffled <- FALSE
[13:36:52.920]                     if (inherits(cond, "message")) {
[13:36:52.920]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.920]                       if (muffled) 
[13:36:52.920]                         invokeRestart("muffleMessage")
[13:36:52.920]                     }
[13:36:52.920]                     else if (inherits(cond, "warning")) {
[13:36:52.920]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.920]                       if (muffled) 
[13:36:52.920]                         invokeRestart("muffleWarning")
[13:36:52.920]                     }
[13:36:52.920]                     else if (inherits(cond, "condition")) {
[13:36:52.920]                       if (!is.null(pattern)) {
[13:36:52.920]                         computeRestarts <- base::computeRestarts
[13:36:52.920]                         grepl <- base::grepl
[13:36:52.920]                         restarts <- computeRestarts(cond)
[13:36:52.920]                         for (restart in restarts) {
[13:36:52.920]                           name <- restart$name
[13:36:52.920]                           if (is.null(name)) 
[13:36:52.920]                             next
[13:36:52.920]                           if (!grepl(pattern, name)) 
[13:36:52.920]                             next
[13:36:52.920]                           invokeRestart(restart)
[13:36:52.920]                           muffled <- TRUE
[13:36:52.920]                           break
[13:36:52.920]                         }
[13:36:52.920]                       }
[13:36:52.920]                     }
[13:36:52.920]                     invisible(muffled)
[13:36:52.920]                   }
[13:36:52.920]                   muffleCondition(cond)
[13:36:52.920]                 })
[13:36:52.920]             }))
[13:36:52.920]             future::FutureResult(value = ...future.value$value, 
[13:36:52.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.920]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.920]                     ...future.globalenv.names))
[13:36:52.920]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.920]         }, condition = base::local({
[13:36:52.920]             c <- base::c
[13:36:52.920]             inherits <- base::inherits
[13:36:52.920]             invokeRestart <- base::invokeRestart
[13:36:52.920]             length <- base::length
[13:36:52.920]             list <- base::list
[13:36:52.920]             seq.int <- base::seq.int
[13:36:52.920]             signalCondition <- base::signalCondition
[13:36:52.920]             sys.calls <- base::sys.calls
[13:36:52.920]             `[[` <- base::`[[`
[13:36:52.920]             `+` <- base::`+`
[13:36:52.920]             `<<-` <- base::`<<-`
[13:36:52.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.920]                   3L)]
[13:36:52.920]             }
[13:36:52.920]             function(cond) {
[13:36:52.920]                 is_error <- inherits(cond, "error")
[13:36:52.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.920]                   NULL)
[13:36:52.920]                 if (is_error) {
[13:36:52.920]                   sessionInformation <- function() {
[13:36:52.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.920]                       search = base::search(), system = base::Sys.info())
[13:36:52.920]                   }
[13:36:52.920]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.920]                     cond$call), session = sessionInformation(), 
[13:36:52.920]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.920]                   signalCondition(cond)
[13:36:52.920]                 }
[13:36:52.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.920]                 "immediateCondition"))) {
[13:36:52.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.920]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.920]                   if (TRUE && !signal) {
[13:36:52.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.920]                     {
[13:36:52.920]                       inherits <- base::inherits
[13:36:52.920]                       invokeRestart <- base::invokeRestart
[13:36:52.920]                       is.null <- base::is.null
[13:36:52.920]                       muffled <- FALSE
[13:36:52.920]                       if (inherits(cond, "message")) {
[13:36:52.920]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.920]                         if (muffled) 
[13:36:52.920]                           invokeRestart("muffleMessage")
[13:36:52.920]                       }
[13:36:52.920]                       else if (inherits(cond, "warning")) {
[13:36:52.920]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.920]                         if (muffled) 
[13:36:52.920]                           invokeRestart("muffleWarning")
[13:36:52.920]                       }
[13:36:52.920]                       else if (inherits(cond, "condition")) {
[13:36:52.920]                         if (!is.null(pattern)) {
[13:36:52.920]                           computeRestarts <- base::computeRestarts
[13:36:52.920]                           grepl <- base::grepl
[13:36:52.920]                           restarts <- computeRestarts(cond)
[13:36:52.920]                           for (restart in restarts) {
[13:36:52.920]                             name <- restart$name
[13:36:52.920]                             if (is.null(name)) 
[13:36:52.920]                               next
[13:36:52.920]                             if (!grepl(pattern, name)) 
[13:36:52.920]                               next
[13:36:52.920]                             invokeRestart(restart)
[13:36:52.920]                             muffled <- TRUE
[13:36:52.920]                             break
[13:36:52.920]                           }
[13:36:52.920]                         }
[13:36:52.920]                       }
[13:36:52.920]                       invisible(muffled)
[13:36:52.920]                     }
[13:36:52.920]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.920]                   }
[13:36:52.920]                 }
[13:36:52.920]                 else {
[13:36:52.920]                   if (TRUE) {
[13:36:52.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.920]                     {
[13:36:52.920]                       inherits <- base::inherits
[13:36:52.920]                       invokeRestart <- base::invokeRestart
[13:36:52.920]                       is.null <- base::is.null
[13:36:52.920]                       muffled <- FALSE
[13:36:52.920]                       if (inherits(cond, "message")) {
[13:36:52.920]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.920]                         if (muffled) 
[13:36:52.920]                           invokeRestart("muffleMessage")
[13:36:52.920]                       }
[13:36:52.920]                       else if (inherits(cond, "warning")) {
[13:36:52.920]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.920]                         if (muffled) 
[13:36:52.920]                           invokeRestart("muffleWarning")
[13:36:52.920]                       }
[13:36:52.920]                       else if (inherits(cond, "condition")) {
[13:36:52.920]                         if (!is.null(pattern)) {
[13:36:52.920]                           computeRestarts <- base::computeRestarts
[13:36:52.920]                           grepl <- base::grepl
[13:36:52.920]                           restarts <- computeRestarts(cond)
[13:36:52.920]                           for (restart in restarts) {
[13:36:52.920]                             name <- restart$name
[13:36:52.920]                             if (is.null(name)) 
[13:36:52.920]                               next
[13:36:52.920]                             if (!grepl(pattern, name)) 
[13:36:52.920]                               next
[13:36:52.920]                             invokeRestart(restart)
[13:36:52.920]                             muffled <- TRUE
[13:36:52.920]                             break
[13:36:52.920]                           }
[13:36:52.920]                         }
[13:36:52.920]                       }
[13:36:52.920]                       invisible(muffled)
[13:36:52.920]                     }
[13:36:52.920]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.920]                   }
[13:36:52.920]                 }
[13:36:52.920]             }
[13:36:52.920]         }))
[13:36:52.920]     }, error = function(ex) {
[13:36:52.920]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.920]                 ...future.rng), started = ...future.startTime, 
[13:36:52.920]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.920]             version = "1.8"), class = "FutureResult")
[13:36:52.920]     }, finally = {
[13:36:52.920]         if (!identical(...future.workdir, getwd())) 
[13:36:52.920]             setwd(...future.workdir)
[13:36:52.920]         {
[13:36:52.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.920]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.920]             }
[13:36:52.920]             base::options(...future.oldOptions)
[13:36:52.920]             if (.Platform$OS.type == "windows") {
[13:36:52.920]                 old_names <- names(...future.oldEnvVars)
[13:36:52.920]                 envs <- base::Sys.getenv()
[13:36:52.920]                 names <- names(envs)
[13:36:52.920]                 common <- intersect(names, old_names)
[13:36:52.920]                 added <- setdiff(names, old_names)
[13:36:52.920]                 removed <- setdiff(old_names, names)
[13:36:52.920]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.920]                   envs[common]]
[13:36:52.920]                 NAMES <- toupper(changed)
[13:36:52.920]                 args <- list()
[13:36:52.920]                 for (kk in seq_along(NAMES)) {
[13:36:52.920]                   name <- changed[[kk]]
[13:36:52.920]                   NAME <- NAMES[[kk]]
[13:36:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.920]                     next
[13:36:52.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.920]                 }
[13:36:52.920]                 NAMES <- toupper(added)
[13:36:52.920]                 for (kk in seq_along(NAMES)) {
[13:36:52.920]                   name <- added[[kk]]
[13:36:52.920]                   NAME <- NAMES[[kk]]
[13:36:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.920]                     next
[13:36:52.920]                   args[[name]] <- ""
[13:36:52.920]                 }
[13:36:52.920]                 NAMES <- toupper(removed)
[13:36:52.920]                 for (kk in seq_along(NAMES)) {
[13:36:52.920]                   name <- removed[[kk]]
[13:36:52.920]                   NAME <- NAMES[[kk]]
[13:36:52.920]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.920]                     next
[13:36:52.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.920]                 }
[13:36:52.920]                 if (length(args) > 0) 
[13:36:52.920]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.920]             }
[13:36:52.920]             else {
[13:36:52.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.920]             }
[13:36:52.920]             {
[13:36:52.920]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.920]                   0L) {
[13:36:52.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.920]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.920]                   base::options(opts)
[13:36:52.920]                 }
[13:36:52.920]                 {
[13:36:52.920]                   {
[13:36:52.920]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.920]                     NULL
[13:36:52.920]                   }
[13:36:52.920]                   options(future.plan = NULL)
[13:36:52.920]                   if (is.na(NA_character_)) 
[13:36:52.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.920]                     .init = FALSE)
[13:36:52.920]                 }
[13:36:52.920]             }
[13:36:52.920]         }
[13:36:52.920]     })
[13:36:52.920]     if (TRUE) {
[13:36:52.920]         base::sink(type = "output", split = FALSE)
[13:36:52.920]         if (TRUE) {
[13:36:52.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.920]         }
[13:36:52.920]         else {
[13:36:52.920]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.920]         }
[13:36:52.920]         base::close(...future.stdout)
[13:36:52.920]         ...future.stdout <- NULL
[13:36:52.920]     }
[13:36:52.920]     ...future.result$conditions <- ...future.conditions
[13:36:52.920]     ...future.result$finished <- base::Sys.time()
[13:36:52.920]     ...future.result
[13:36:52.920] }
[13:36:52.923] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:52.923] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:52.923] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:52.923] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:52.924] MultisessionFuture started
[13:36:52.924] - Launch lazy future ... done
[13:36:52.924] run() for ‘MultisessionFuture’ ... done
[13:36:52.924] result() for ClusterFuture ...
[13:36:52.925] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.925] - Validating connection of MultisessionFuture
[13:36:52.926] - received message: FutureResult
[13:36:52.926] - Received FutureResult
[13:36:52.926] - Erased future from FutureRegistry
[13:36:52.926] result() for ClusterFuture ...
[13:36:52.926] - result already collected: FutureResult
[13:36:52.926] result() for ClusterFuture ... done
[13:36:52.927] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.927] result() for ClusterFuture ... done
[13:36:52.927] result() for ClusterFuture ...
[13:36:52.927] - result already collected: FutureResult
[13:36:52.927] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.927] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.927] Searching for globals...
[13:36:52.929] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.929] Searching for globals ... DONE
[13:36:52.929] Resolving globals: TRUE
[13:36:52.930] Resolving any globals that are futures ...
[13:36:52.930] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘$’, ‘$<-’
[13:36:52.930] Resolving any globals that are futures ... DONE
[13:36:52.930] Resolving futures part of globals (recursively) ...
[13:36:52.930] resolve() on list ...
[13:36:52.930]  recursive: 99
[13:36:52.931]  length: 1
[13:36:52.931]  elements: ‘x’
[13:36:52.931]  length: 0 (resolved future 1)
[13:36:52.931] resolve() on list ... DONE
[13:36:52.931] - globals: [1] ‘x’
[13:36:52.931] Resolving futures part of globals (recursively) ... DONE
[13:36:52.931] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.931] The total size of the 1 globals exported for future expression (‘{; x$a <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.932] - globals: [1] ‘x’
[13:36:52.932] 
[13:36:52.932] getGlobalsAndPackages() ... DONE
[13:36:52.932] run() for ‘Future’ ...
[13:36:52.932] - state: ‘created’
[13:36:52.932] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.946] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.946] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:52.946]   - Field: ‘node’
[13:36:52.946]   - Field: ‘label’
[13:36:52.946]   - Field: ‘local’
[13:36:52.946]   - Field: ‘owner’
[13:36:52.946]   - Field: ‘envir’
[13:36:52.947]   - Field: ‘workers’
[13:36:52.947]   - Field: ‘packages’
[13:36:52.947]   - Field: ‘gc’
[13:36:52.947]   - Field: ‘conditions’
[13:36:52.947]   - Field: ‘persistent’
[13:36:52.947]   - Field: ‘expr’
[13:36:52.947]   - Field: ‘uuid’
[13:36:52.947]   - Field: ‘seed’
[13:36:52.947]   - Field: ‘version’
[13:36:52.947]   - Field: ‘result’
[13:36:52.947]   - Field: ‘asynchronous’
[13:36:52.947]   - Field: ‘calls’
[13:36:52.948]   - Field: ‘globals’
[13:36:52.948]   - Field: ‘stdout’
[13:36:52.948]   - Field: ‘earlySignal’
[13:36:52.948]   - Field: ‘lazy’
[13:36:52.948]   - Field: ‘state’
[13:36:52.948] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:52.948] - Launch lazy future ...
[13:36:52.948] Packages needed by the future expression (n = 0): <none>
[13:36:52.948] Packages needed by future strategies (n = 0): <none>
[13:36:52.949] {
[13:36:52.949]     {
[13:36:52.949]         {
[13:36:52.949]             ...future.startTime <- base::Sys.time()
[13:36:52.949]             {
[13:36:52.949]                 {
[13:36:52.949]                   {
[13:36:52.949]                     {
[13:36:52.949]                       base::local({
[13:36:52.949]                         has_future <- base::requireNamespace("future", 
[13:36:52.949]                           quietly = TRUE)
[13:36:52.949]                         if (has_future) {
[13:36:52.949]                           ns <- base::getNamespace("future")
[13:36:52.949]                           version <- ns[[".package"]][["version"]]
[13:36:52.949]                           if (is.null(version)) 
[13:36:52.949]                             version <- utils::packageVersion("future")
[13:36:52.949]                         }
[13:36:52.949]                         else {
[13:36:52.949]                           version <- NULL
[13:36:52.949]                         }
[13:36:52.949]                         if (!has_future || version < "1.8.0") {
[13:36:52.949]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.949]                             "", base::R.version$version.string), 
[13:36:52.949]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.949]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.949]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.949]                               "release", "version")], collapse = " "), 
[13:36:52.949]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.949]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.949]                             info)
[13:36:52.949]                           info <- base::paste(info, collapse = "; ")
[13:36:52.949]                           if (!has_future) {
[13:36:52.949]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.949]                               info)
[13:36:52.949]                           }
[13:36:52.949]                           else {
[13:36:52.949]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.949]                               info, version)
[13:36:52.949]                           }
[13:36:52.949]                           base::stop(msg)
[13:36:52.949]                         }
[13:36:52.949]                       })
[13:36:52.949]                     }
[13:36:52.949]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.949]                     base::options(mc.cores = 1L)
[13:36:52.949]                   }
[13:36:52.949]                   ...future.strategy.old <- future::plan("list")
[13:36:52.949]                   options(future.plan = NULL)
[13:36:52.949]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.949]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.949]                 }
[13:36:52.949]                 ...future.workdir <- getwd()
[13:36:52.949]             }
[13:36:52.949]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.949]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.949]         }
[13:36:52.949]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.949]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.949]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.949]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.949]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.949]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.949]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.949]             base::names(...future.oldOptions))
[13:36:52.949]     }
[13:36:52.949]     if (FALSE) {
[13:36:52.949]     }
[13:36:52.949]     else {
[13:36:52.949]         if (TRUE) {
[13:36:52.949]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.949]                 open = "w")
[13:36:52.949]         }
[13:36:52.949]         else {
[13:36:52.949]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.949]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.949]         }
[13:36:52.949]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.949]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.949]             base::sink(type = "output", split = FALSE)
[13:36:52.949]             base::close(...future.stdout)
[13:36:52.949]         }, add = TRUE)
[13:36:52.949]     }
[13:36:52.949]     ...future.frame <- base::sys.nframe()
[13:36:52.949]     ...future.conditions <- base::list()
[13:36:52.949]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.949]     if (FALSE) {
[13:36:52.949]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.949]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.949]     }
[13:36:52.949]     ...future.result <- base::tryCatch({
[13:36:52.949]         base::withCallingHandlers({
[13:36:52.949]             ...future.value <- base::withVisible(base::local({
[13:36:52.949]                 ...future.makeSendCondition <- base::local({
[13:36:52.949]                   sendCondition <- NULL
[13:36:52.949]                   function(frame = 1L) {
[13:36:52.949]                     if (is.function(sendCondition)) 
[13:36:52.949]                       return(sendCondition)
[13:36:52.949]                     ns <- getNamespace("parallel")
[13:36:52.949]                     if (exists("sendData", mode = "function", 
[13:36:52.949]                       envir = ns)) {
[13:36:52.949]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.949]                         envir = ns)
[13:36:52.949]                       envir <- sys.frame(frame)
[13:36:52.949]                       master <- NULL
[13:36:52.949]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.949]                         !identical(envir, emptyenv())) {
[13:36:52.949]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.949]                           inherits = FALSE)) {
[13:36:52.949]                           master <- get("master", mode = "list", 
[13:36:52.949]                             envir = envir, inherits = FALSE)
[13:36:52.949]                           if (inherits(master, c("SOCKnode", 
[13:36:52.949]                             "SOCK0node"))) {
[13:36:52.949]                             sendCondition <<- function(cond) {
[13:36:52.949]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.949]                                 success = TRUE)
[13:36:52.949]                               parallel_sendData(master, data)
[13:36:52.949]                             }
[13:36:52.949]                             return(sendCondition)
[13:36:52.949]                           }
[13:36:52.949]                         }
[13:36:52.949]                         frame <- frame + 1L
[13:36:52.949]                         envir <- sys.frame(frame)
[13:36:52.949]                       }
[13:36:52.949]                     }
[13:36:52.949]                     sendCondition <<- function(cond) NULL
[13:36:52.949]                   }
[13:36:52.949]                 })
[13:36:52.949]                 withCallingHandlers({
[13:36:52.949]                   {
[13:36:52.949]                     x$a <- 1
[13:36:52.949]                     x
[13:36:52.949]                   }
[13:36:52.949]                 }, immediateCondition = function(cond) {
[13:36:52.949]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.949]                   sendCondition(cond)
[13:36:52.949]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.949]                   {
[13:36:52.949]                     inherits <- base::inherits
[13:36:52.949]                     invokeRestart <- base::invokeRestart
[13:36:52.949]                     is.null <- base::is.null
[13:36:52.949]                     muffled <- FALSE
[13:36:52.949]                     if (inherits(cond, "message")) {
[13:36:52.949]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.949]                       if (muffled) 
[13:36:52.949]                         invokeRestart("muffleMessage")
[13:36:52.949]                     }
[13:36:52.949]                     else if (inherits(cond, "warning")) {
[13:36:52.949]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.949]                       if (muffled) 
[13:36:52.949]                         invokeRestart("muffleWarning")
[13:36:52.949]                     }
[13:36:52.949]                     else if (inherits(cond, "condition")) {
[13:36:52.949]                       if (!is.null(pattern)) {
[13:36:52.949]                         computeRestarts <- base::computeRestarts
[13:36:52.949]                         grepl <- base::grepl
[13:36:52.949]                         restarts <- computeRestarts(cond)
[13:36:52.949]                         for (restart in restarts) {
[13:36:52.949]                           name <- restart$name
[13:36:52.949]                           if (is.null(name)) 
[13:36:52.949]                             next
[13:36:52.949]                           if (!grepl(pattern, name)) 
[13:36:52.949]                             next
[13:36:52.949]                           invokeRestart(restart)
[13:36:52.949]                           muffled <- TRUE
[13:36:52.949]                           break
[13:36:52.949]                         }
[13:36:52.949]                       }
[13:36:52.949]                     }
[13:36:52.949]                     invisible(muffled)
[13:36:52.949]                   }
[13:36:52.949]                   muffleCondition(cond)
[13:36:52.949]                 })
[13:36:52.949]             }))
[13:36:52.949]             future::FutureResult(value = ...future.value$value, 
[13:36:52.949]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.949]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.949]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.949]                     ...future.globalenv.names))
[13:36:52.949]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.949]         }, condition = base::local({
[13:36:52.949]             c <- base::c
[13:36:52.949]             inherits <- base::inherits
[13:36:52.949]             invokeRestart <- base::invokeRestart
[13:36:52.949]             length <- base::length
[13:36:52.949]             list <- base::list
[13:36:52.949]             seq.int <- base::seq.int
[13:36:52.949]             signalCondition <- base::signalCondition
[13:36:52.949]             sys.calls <- base::sys.calls
[13:36:52.949]             `[[` <- base::`[[`
[13:36:52.949]             `+` <- base::`+`
[13:36:52.949]             `<<-` <- base::`<<-`
[13:36:52.949]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.949]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.949]                   3L)]
[13:36:52.949]             }
[13:36:52.949]             function(cond) {
[13:36:52.949]                 is_error <- inherits(cond, "error")
[13:36:52.949]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.949]                   NULL)
[13:36:52.949]                 if (is_error) {
[13:36:52.949]                   sessionInformation <- function() {
[13:36:52.949]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.949]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.949]                       search = base::search(), system = base::Sys.info())
[13:36:52.949]                   }
[13:36:52.949]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.949]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.949]                     cond$call), session = sessionInformation(), 
[13:36:52.949]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.949]                   signalCondition(cond)
[13:36:52.949]                 }
[13:36:52.949]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.949]                 "immediateCondition"))) {
[13:36:52.949]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.949]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.949]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.949]                   if (TRUE && !signal) {
[13:36:52.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.949]                     {
[13:36:52.949]                       inherits <- base::inherits
[13:36:52.949]                       invokeRestart <- base::invokeRestart
[13:36:52.949]                       is.null <- base::is.null
[13:36:52.949]                       muffled <- FALSE
[13:36:52.949]                       if (inherits(cond, "message")) {
[13:36:52.949]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.949]                         if (muffled) 
[13:36:52.949]                           invokeRestart("muffleMessage")
[13:36:52.949]                       }
[13:36:52.949]                       else if (inherits(cond, "warning")) {
[13:36:52.949]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.949]                         if (muffled) 
[13:36:52.949]                           invokeRestart("muffleWarning")
[13:36:52.949]                       }
[13:36:52.949]                       else if (inherits(cond, "condition")) {
[13:36:52.949]                         if (!is.null(pattern)) {
[13:36:52.949]                           computeRestarts <- base::computeRestarts
[13:36:52.949]                           grepl <- base::grepl
[13:36:52.949]                           restarts <- computeRestarts(cond)
[13:36:52.949]                           for (restart in restarts) {
[13:36:52.949]                             name <- restart$name
[13:36:52.949]                             if (is.null(name)) 
[13:36:52.949]                               next
[13:36:52.949]                             if (!grepl(pattern, name)) 
[13:36:52.949]                               next
[13:36:52.949]                             invokeRestart(restart)
[13:36:52.949]                             muffled <- TRUE
[13:36:52.949]                             break
[13:36:52.949]                           }
[13:36:52.949]                         }
[13:36:52.949]                       }
[13:36:52.949]                       invisible(muffled)
[13:36:52.949]                     }
[13:36:52.949]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.949]                   }
[13:36:52.949]                 }
[13:36:52.949]                 else {
[13:36:52.949]                   if (TRUE) {
[13:36:52.949]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.949]                     {
[13:36:52.949]                       inherits <- base::inherits
[13:36:52.949]                       invokeRestart <- base::invokeRestart
[13:36:52.949]                       is.null <- base::is.null
[13:36:52.949]                       muffled <- FALSE
[13:36:52.949]                       if (inherits(cond, "message")) {
[13:36:52.949]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.949]                         if (muffled) 
[13:36:52.949]                           invokeRestart("muffleMessage")
[13:36:52.949]                       }
[13:36:52.949]                       else if (inherits(cond, "warning")) {
[13:36:52.949]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.949]                         if (muffled) 
[13:36:52.949]                           invokeRestart("muffleWarning")
[13:36:52.949]                       }
[13:36:52.949]                       else if (inherits(cond, "condition")) {
[13:36:52.949]                         if (!is.null(pattern)) {
[13:36:52.949]                           computeRestarts <- base::computeRestarts
[13:36:52.949]                           grepl <- base::grepl
[13:36:52.949]                           restarts <- computeRestarts(cond)
[13:36:52.949]                           for (restart in restarts) {
[13:36:52.949]                             name <- restart$name
[13:36:52.949]                             if (is.null(name)) 
[13:36:52.949]                               next
[13:36:52.949]                             if (!grepl(pattern, name)) 
[13:36:52.949]                               next
[13:36:52.949]                             invokeRestart(restart)
[13:36:52.949]                             muffled <- TRUE
[13:36:52.949]                             break
[13:36:52.949]                           }
[13:36:52.949]                         }
[13:36:52.949]                       }
[13:36:52.949]                       invisible(muffled)
[13:36:52.949]                     }
[13:36:52.949]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.949]                   }
[13:36:52.949]                 }
[13:36:52.949]             }
[13:36:52.949]         }))
[13:36:52.949]     }, error = function(ex) {
[13:36:52.949]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.949]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.949]                 ...future.rng), started = ...future.startTime, 
[13:36:52.949]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.949]             version = "1.8"), class = "FutureResult")
[13:36:52.949]     }, finally = {
[13:36:52.949]         if (!identical(...future.workdir, getwd())) 
[13:36:52.949]             setwd(...future.workdir)
[13:36:52.949]         {
[13:36:52.949]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.949]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.949]             }
[13:36:52.949]             base::options(...future.oldOptions)
[13:36:52.949]             if (.Platform$OS.type == "windows") {
[13:36:52.949]                 old_names <- names(...future.oldEnvVars)
[13:36:52.949]                 envs <- base::Sys.getenv()
[13:36:52.949]                 names <- names(envs)
[13:36:52.949]                 common <- intersect(names, old_names)
[13:36:52.949]                 added <- setdiff(names, old_names)
[13:36:52.949]                 removed <- setdiff(old_names, names)
[13:36:52.949]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.949]                   envs[common]]
[13:36:52.949]                 NAMES <- toupper(changed)
[13:36:52.949]                 args <- list()
[13:36:52.949]                 for (kk in seq_along(NAMES)) {
[13:36:52.949]                   name <- changed[[kk]]
[13:36:52.949]                   NAME <- NAMES[[kk]]
[13:36:52.949]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.949]                     next
[13:36:52.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.949]                 }
[13:36:52.949]                 NAMES <- toupper(added)
[13:36:52.949]                 for (kk in seq_along(NAMES)) {
[13:36:52.949]                   name <- added[[kk]]
[13:36:52.949]                   NAME <- NAMES[[kk]]
[13:36:52.949]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.949]                     next
[13:36:52.949]                   args[[name]] <- ""
[13:36:52.949]                 }
[13:36:52.949]                 NAMES <- toupper(removed)
[13:36:52.949]                 for (kk in seq_along(NAMES)) {
[13:36:52.949]                   name <- removed[[kk]]
[13:36:52.949]                   NAME <- NAMES[[kk]]
[13:36:52.949]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.949]                     next
[13:36:52.949]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.949]                 }
[13:36:52.949]                 if (length(args) > 0) 
[13:36:52.949]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.949]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.949]             }
[13:36:52.949]             else {
[13:36:52.949]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.949]             }
[13:36:52.949]             {
[13:36:52.949]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.949]                   0L) {
[13:36:52.949]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.949]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.949]                   base::options(opts)
[13:36:52.949]                 }
[13:36:52.949]                 {
[13:36:52.949]                   {
[13:36:52.949]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.949]                     NULL
[13:36:52.949]                   }
[13:36:52.949]                   options(future.plan = NULL)
[13:36:52.949]                   if (is.na(NA_character_)) 
[13:36:52.949]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.949]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.949]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.949]                     .init = FALSE)
[13:36:52.949]                 }
[13:36:52.949]             }
[13:36:52.949]         }
[13:36:52.949]     })
[13:36:52.949]     if (TRUE) {
[13:36:52.949]         base::sink(type = "output", split = FALSE)
[13:36:52.949]         if (TRUE) {
[13:36:52.949]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.949]         }
[13:36:52.949]         else {
[13:36:52.949]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.949]         }
[13:36:52.949]         base::close(...future.stdout)
[13:36:52.949]         ...future.stdout <- NULL
[13:36:52.949]     }
[13:36:52.949]     ...future.result$conditions <- ...future.conditions
[13:36:52.949]     ...future.result$finished <- base::Sys.time()
[13:36:52.949]     ...future.result
[13:36:52.949] }
[13:36:52.951] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:52.951] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:52.952] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:52.952] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:52.952] MultisessionFuture started
[13:36:52.953] - Launch lazy future ... done
[13:36:52.953] run() for ‘MultisessionFuture’ ... done
[13:36:52.953] result() for ClusterFuture ...
[13:36:52.953] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.953] - Validating connection of MultisessionFuture
[13:36:52.954] - received message: FutureResult
[13:36:52.954] - Received FutureResult
[13:36:52.954] - Erased future from FutureRegistry
[13:36:52.955] result() for ClusterFuture ...
[13:36:52.955] - result already collected: FutureResult
[13:36:52.955] result() for ClusterFuture ... done
[13:36:52.955] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.955] result() for ClusterFuture ... done
[13:36:52.955] result() for ClusterFuture ...
[13:36:52.955] - result already collected: FutureResult
[13:36:52.955] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.956] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.956] Searching for globals...
[13:36:52.958] - globals found: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:52.958] Searching for globals ... DONE
[13:36:52.958] Resolving globals: TRUE
[13:36:52.958] Resolving any globals that are futures ...
[13:36:52.959] - globals: [5] ‘{’, ‘<-’, ‘list’, ‘$’, ‘$<-’
[13:36:52.959] Resolving any globals that are futures ... DONE
[13:36:52.959] 
[13:36:52.959] 
[13:36:52.959] getGlobalsAndPackages() ... DONE
[13:36:52.959] run() for ‘Future’ ...
[13:36:52.960] - state: ‘created’
[13:36:52.960] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:52.973] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:52.973] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:52.973]   - Field: ‘node’
[13:36:52.974]   - Field: ‘label’
[13:36:52.974]   - Field: ‘local’
[13:36:52.974]   - Field: ‘owner’
[13:36:52.974]   - Field: ‘envir’
[13:36:52.974]   - Field: ‘workers’
[13:36:52.974]   - Field: ‘packages’
[13:36:52.974]   - Field: ‘gc’
[13:36:52.974]   - Field: ‘conditions’
[13:36:52.974]   - Field: ‘persistent’
[13:36:52.974]   - Field: ‘expr’
[13:36:52.975]   - Field: ‘uuid’
[13:36:52.975]   - Field: ‘seed’
[13:36:52.975]   - Field: ‘version’
[13:36:52.975]   - Field: ‘result’
[13:36:52.975]   - Field: ‘asynchronous’
[13:36:52.975]   - Field: ‘calls’
[13:36:52.975]   - Field: ‘globals’
[13:36:52.975]   - Field: ‘stdout’
[13:36:52.975]   - Field: ‘earlySignal’
[13:36:52.975]   - Field: ‘lazy’
[13:36:52.975]   - Field: ‘state’
[13:36:52.976] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:52.976] - Launch lazy future ...
[13:36:52.976] Packages needed by the future expression (n = 0): <none>
[13:36:52.976] Packages needed by future strategies (n = 0): <none>
[13:36:52.976] {
[13:36:52.976]     {
[13:36:52.976]         {
[13:36:52.976]             ...future.startTime <- base::Sys.time()
[13:36:52.976]             {
[13:36:52.976]                 {
[13:36:52.976]                   {
[13:36:52.976]                     {
[13:36:52.976]                       base::local({
[13:36:52.976]                         has_future <- base::requireNamespace("future", 
[13:36:52.976]                           quietly = TRUE)
[13:36:52.976]                         if (has_future) {
[13:36:52.976]                           ns <- base::getNamespace("future")
[13:36:52.976]                           version <- ns[[".package"]][["version"]]
[13:36:52.976]                           if (is.null(version)) 
[13:36:52.976]                             version <- utils::packageVersion("future")
[13:36:52.976]                         }
[13:36:52.976]                         else {
[13:36:52.976]                           version <- NULL
[13:36:52.976]                         }
[13:36:52.976]                         if (!has_future || version < "1.8.0") {
[13:36:52.976]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:52.976]                             "", base::R.version$version.string), 
[13:36:52.976]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:52.976]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:52.976]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:52.976]                               "release", "version")], collapse = " "), 
[13:36:52.976]                             hostname = base::Sys.info()[["nodename"]])
[13:36:52.976]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:52.976]                             info)
[13:36:52.976]                           info <- base::paste(info, collapse = "; ")
[13:36:52.976]                           if (!has_future) {
[13:36:52.976]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:52.976]                               info)
[13:36:52.976]                           }
[13:36:52.976]                           else {
[13:36:52.976]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:52.976]                               info, version)
[13:36:52.976]                           }
[13:36:52.976]                           base::stop(msg)
[13:36:52.976]                         }
[13:36:52.976]                       })
[13:36:52.976]                     }
[13:36:52.976]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:52.976]                     base::options(mc.cores = 1L)
[13:36:52.976]                   }
[13:36:52.976]                   ...future.strategy.old <- future::plan("list")
[13:36:52.976]                   options(future.plan = NULL)
[13:36:52.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.976]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:52.976]                 }
[13:36:52.976]                 ...future.workdir <- getwd()
[13:36:52.976]             }
[13:36:52.976]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:52.976]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:52.976]         }
[13:36:52.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:52.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:52.976]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:52.976]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:52.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:52.976]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:52.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:52.976]             base::names(...future.oldOptions))
[13:36:52.976]     }
[13:36:52.976]     if (FALSE) {
[13:36:52.976]     }
[13:36:52.976]     else {
[13:36:52.976]         if (TRUE) {
[13:36:52.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:52.976]                 open = "w")
[13:36:52.976]         }
[13:36:52.976]         else {
[13:36:52.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:52.976]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:52.976]         }
[13:36:52.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:52.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:52.976]             base::sink(type = "output", split = FALSE)
[13:36:52.976]             base::close(...future.stdout)
[13:36:52.976]         }, add = TRUE)
[13:36:52.976]     }
[13:36:52.976]     ...future.frame <- base::sys.nframe()
[13:36:52.976]     ...future.conditions <- base::list()
[13:36:52.976]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:52.976]     if (FALSE) {
[13:36:52.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:52.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:52.976]     }
[13:36:52.976]     ...future.result <- base::tryCatch({
[13:36:52.976]         base::withCallingHandlers({
[13:36:52.976]             ...future.value <- base::withVisible(base::local({
[13:36:52.976]                 ...future.makeSendCondition <- base::local({
[13:36:52.976]                   sendCondition <- NULL
[13:36:52.976]                   function(frame = 1L) {
[13:36:52.976]                     if (is.function(sendCondition)) 
[13:36:52.976]                       return(sendCondition)
[13:36:52.976]                     ns <- getNamespace("parallel")
[13:36:52.976]                     if (exists("sendData", mode = "function", 
[13:36:52.976]                       envir = ns)) {
[13:36:52.976]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:52.976]                         envir = ns)
[13:36:52.976]                       envir <- sys.frame(frame)
[13:36:52.976]                       master <- NULL
[13:36:52.976]                       while (!identical(envir, .GlobalEnv) && 
[13:36:52.976]                         !identical(envir, emptyenv())) {
[13:36:52.976]                         if (exists("master", mode = "list", envir = envir, 
[13:36:52.976]                           inherits = FALSE)) {
[13:36:52.976]                           master <- get("master", mode = "list", 
[13:36:52.976]                             envir = envir, inherits = FALSE)
[13:36:52.976]                           if (inherits(master, c("SOCKnode", 
[13:36:52.976]                             "SOCK0node"))) {
[13:36:52.976]                             sendCondition <<- function(cond) {
[13:36:52.976]                               data <- list(type = "VALUE", value = cond, 
[13:36:52.976]                                 success = TRUE)
[13:36:52.976]                               parallel_sendData(master, data)
[13:36:52.976]                             }
[13:36:52.976]                             return(sendCondition)
[13:36:52.976]                           }
[13:36:52.976]                         }
[13:36:52.976]                         frame <- frame + 1L
[13:36:52.976]                         envir <- sys.frame(frame)
[13:36:52.976]                       }
[13:36:52.976]                     }
[13:36:52.976]                     sendCondition <<- function(cond) NULL
[13:36:52.976]                   }
[13:36:52.976]                 })
[13:36:52.976]                 withCallingHandlers({
[13:36:52.976]                   {
[13:36:52.976]                     x <- list(b = 2)
[13:36:52.976]                     x$a <- 1
[13:36:52.976]                     x
[13:36:52.976]                   }
[13:36:52.976]                 }, immediateCondition = function(cond) {
[13:36:52.976]                   sendCondition <- ...future.makeSendCondition()
[13:36:52.976]                   sendCondition(cond)
[13:36:52.976]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.976]                   {
[13:36:52.976]                     inherits <- base::inherits
[13:36:52.976]                     invokeRestart <- base::invokeRestart
[13:36:52.976]                     is.null <- base::is.null
[13:36:52.976]                     muffled <- FALSE
[13:36:52.976]                     if (inherits(cond, "message")) {
[13:36:52.976]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:52.976]                       if (muffled) 
[13:36:52.976]                         invokeRestart("muffleMessage")
[13:36:52.976]                     }
[13:36:52.976]                     else if (inherits(cond, "warning")) {
[13:36:52.976]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:52.976]                       if (muffled) 
[13:36:52.976]                         invokeRestart("muffleWarning")
[13:36:52.976]                     }
[13:36:52.976]                     else if (inherits(cond, "condition")) {
[13:36:52.976]                       if (!is.null(pattern)) {
[13:36:52.976]                         computeRestarts <- base::computeRestarts
[13:36:52.976]                         grepl <- base::grepl
[13:36:52.976]                         restarts <- computeRestarts(cond)
[13:36:52.976]                         for (restart in restarts) {
[13:36:52.976]                           name <- restart$name
[13:36:52.976]                           if (is.null(name)) 
[13:36:52.976]                             next
[13:36:52.976]                           if (!grepl(pattern, name)) 
[13:36:52.976]                             next
[13:36:52.976]                           invokeRestart(restart)
[13:36:52.976]                           muffled <- TRUE
[13:36:52.976]                           break
[13:36:52.976]                         }
[13:36:52.976]                       }
[13:36:52.976]                     }
[13:36:52.976]                     invisible(muffled)
[13:36:52.976]                   }
[13:36:52.976]                   muffleCondition(cond)
[13:36:52.976]                 })
[13:36:52.976]             }))
[13:36:52.976]             future::FutureResult(value = ...future.value$value, 
[13:36:52.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.976]                   ...future.rng), globalenv = if (FALSE) 
[13:36:52.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:52.976]                     ...future.globalenv.names))
[13:36:52.976]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:52.976]         }, condition = base::local({
[13:36:52.976]             c <- base::c
[13:36:52.976]             inherits <- base::inherits
[13:36:52.976]             invokeRestart <- base::invokeRestart
[13:36:52.976]             length <- base::length
[13:36:52.976]             list <- base::list
[13:36:52.976]             seq.int <- base::seq.int
[13:36:52.976]             signalCondition <- base::signalCondition
[13:36:52.976]             sys.calls <- base::sys.calls
[13:36:52.976]             `[[` <- base::`[[`
[13:36:52.976]             `+` <- base::`+`
[13:36:52.976]             `<<-` <- base::`<<-`
[13:36:52.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:52.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:52.976]                   3L)]
[13:36:52.976]             }
[13:36:52.976]             function(cond) {
[13:36:52.976]                 is_error <- inherits(cond, "error")
[13:36:52.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:52.976]                   NULL)
[13:36:52.976]                 if (is_error) {
[13:36:52.976]                   sessionInformation <- function() {
[13:36:52.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:52.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:52.976]                       search = base::search(), system = base::Sys.info())
[13:36:52.976]                   }
[13:36:52.976]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:52.976]                     cond$call), session = sessionInformation(), 
[13:36:52.976]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:52.976]                   signalCondition(cond)
[13:36:52.976]                 }
[13:36:52.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:52.976]                 "immediateCondition"))) {
[13:36:52.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:52.976]                   ...future.conditions[[length(...future.conditions) + 
[13:36:52.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:52.976]                   if (TRUE && !signal) {
[13:36:52.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.976]                     {
[13:36:52.976]                       inherits <- base::inherits
[13:36:52.976]                       invokeRestart <- base::invokeRestart
[13:36:52.976]                       is.null <- base::is.null
[13:36:52.976]                       muffled <- FALSE
[13:36:52.976]                       if (inherits(cond, "message")) {
[13:36:52.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.976]                         if (muffled) 
[13:36:52.976]                           invokeRestart("muffleMessage")
[13:36:52.976]                       }
[13:36:52.976]                       else if (inherits(cond, "warning")) {
[13:36:52.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.976]                         if (muffled) 
[13:36:52.976]                           invokeRestart("muffleWarning")
[13:36:52.976]                       }
[13:36:52.976]                       else if (inherits(cond, "condition")) {
[13:36:52.976]                         if (!is.null(pattern)) {
[13:36:52.976]                           computeRestarts <- base::computeRestarts
[13:36:52.976]                           grepl <- base::grepl
[13:36:52.976]                           restarts <- computeRestarts(cond)
[13:36:52.976]                           for (restart in restarts) {
[13:36:52.976]                             name <- restart$name
[13:36:52.976]                             if (is.null(name)) 
[13:36:52.976]                               next
[13:36:52.976]                             if (!grepl(pattern, name)) 
[13:36:52.976]                               next
[13:36:52.976]                             invokeRestart(restart)
[13:36:52.976]                             muffled <- TRUE
[13:36:52.976]                             break
[13:36:52.976]                           }
[13:36:52.976]                         }
[13:36:52.976]                       }
[13:36:52.976]                       invisible(muffled)
[13:36:52.976]                     }
[13:36:52.976]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.976]                   }
[13:36:52.976]                 }
[13:36:52.976]                 else {
[13:36:52.976]                   if (TRUE) {
[13:36:52.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:52.976]                     {
[13:36:52.976]                       inherits <- base::inherits
[13:36:52.976]                       invokeRestart <- base::invokeRestart
[13:36:52.976]                       is.null <- base::is.null
[13:36:52.976]                       muffled <- FALSE
[13:36:52.976]                       if (inherits(cond, "message")) {
[13:36:52.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:52.976]                         if (muffled) 
[13:36:52.976]                           invokeRestart("muffleMessage")
[13:36:52.976]                       }
[13:36:52.976]                       else if (inherits(cond, "warning")) {
[13:36:52.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:52.976]                         if (muffled) 
[13:36:52.976]                           invokeRestart("muffleWarning")
[13:36:52.976]                       }
[13:36:52.976]                       else if (inherits(cond, "condition")) {
[13:36:52.976]                         if (!is.null(pattern)) {
[13:36:52.976]                           computeRestarts <- base::computeRestarts
[13:36:52.976]                           grepl <- base::grepl
[13:36:52.976]                           restarts <- computeRestarts(cond)
[13:36:52.976]                           for (restart in restarts) {
[13:36:52.976]                             name <- restart$name
[13:36:52.976]                             if (is.null(name)) 
[13:36:52.976]                               next
[13:36:52.976]                             if (!grepl(pattern, name)) 
[13:36:52.976]                               next
[13:36:52.976]                             invokeRestart(restart)
[13:36:52.976]                             muffled <- TRUE
[13:36:52.976]                             break
[13:36:52.976]                           }
[13:36:52.976]                         }
[13:36:52.976]                       }
[13:36:52.976]                       invisible(muffled)
[13:36:52.976]                     }
[13:36:52.976]                     muffleCondition(cond, pattern = "^muffle")
[13:36:52.976]                   }
[13:36:52.976]                 }
[13:36:52.976]             }
[13:36:52.976]         }))
[13:36:52.976]     }, error = function(ex) {
[13:36:52.976]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:52.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:52.976]                 ...future.rng), started = ...future.startTime, 
[13:36:52.976]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:52.976]             version = "1.8"), class = "FutureResult")
[13:36:52.976]     }, finally = {
[13:36:52.976]         if (!identical(...future.workdir, getwd())) 
[13:36:52.976]             setwd(...future.workdir)
[13:36:52.976]         {
[13:36:52.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:52.976]                 ...future.oldOptions$nwarnings <- NULL
[13:36:52.976]             }
[13:36:52.976]             base::options(...future.oldOptions)
[13:36:52.976]             if (.Platform$OS.type == "windows") {
[13:36:52.976]                 old_names <- names(...future.oldEnvVars)
[13:36:52.976]                 envs <- base::Sys.getenv()
[13:36:52.976]                 names <- names(envs)
[13:36:52.976]                 common <- intersect(names, old_names)
[13:36:52.976]                 added <- setdiff(names, old_names)
[13:36:52.976]                 removed <- setdiff(old_names, names)
[13:36:52.976]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:52.976]                   envs[common]]
[13:36:52.976]                 NAMES <- toupper(changed)
[13:36:52.976]                 args <- list()
[13:36:52.976]                 for (kk in seq_along(NAMES)) {
[13:36:52.976]                   name <- changed[[kk]]
[13:36:52.976]                   NAME <- NAMES[[kk]]
[13:36:52.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.976]                     next
[13:36:52.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.976]                 }
[13:36:52.976]                 NAMES <- toupper(added)
[13:36:52.976]                 for (kk in seq_along(NAMES)) {
[13:36:52.976]                   name <- added[[kk]]
[13:36:52.976]                   NAME <- NAMES[[kk]]
[13:36:52.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.976]                     next
[13:36:52.976]                   args[[name]] <- ""
[13:36:52.976]                 }
[13:36:52.976]                 NAMES <- toupper(removed)
[13:36:52.976]                 for (kk in seq_along(NAMES)) {
[13:36:52.976]                   name <- removed[[kk]]
[13:36:52.976]                   NAME <- NAMES[[kk]]
[13:36:52.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:52.976]                     next
[13:36:52.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:52.976]                 }
[13:36:52.976]                 if (length(args) > 0) 
[13:36:52.976]                   base::do.call(base::Sys.setenv, args = args)
[13:36:52.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:52.976]             }
[13:36:52.976]             else {
[13:36:52.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:52.976]             }
[13:36:52.976]             {
[13:36:52.976]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:52.976]                   0L) {
[13:36:52.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:52.976]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:52.976]                   base::options(opts)
[13:36:52.976]                 }
[13:36:52.976]                 {
[13:36:52.976]                   {
[13:36:52.976]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:52.976]                     NULL
[13:36:52.976]                   }
[13:36:52.976]                   options(future.plan = NULL)
[13:36:52.976]                   if (is.na(NA_character_)) 
[13:36:52.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:52.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:52.976]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:52.976]                     .init = FALSE)
[13:36:52.976]                 }
[13:36:52.976]             }
[13:36:52.976]         }
[13:36:52.976]     })
[13:36:52.976]     if (TRUE) {
[13:36:52.976]         base::sink(type = "output", split = FALSE)
[13:36:52.976]         if (TRUE) {
[13:36:52.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:52.976]         }
[13:36:52.976]         else {
[13:36:52.976]             ...future.result["stdout"] <- base::list(NULL)
[13:36:52.976]         }
[13:36:52.976]         base::close(...future.stdout)
[13:36:52.976]         ...future.stdout <- NULL
[13:36:52.976]     }
[13:36:52.976]     ...future.result$conditions <- ...future.conditions
[13:36:52.976]     ...future.result$finished <- base::Sys.time()
[13:36:52.976]     ...future.result
[13:36:52.976] }
[13:36:52.979] MultisessionFuture started
[13:36:52.979] - Launch lazy future ... done
[13:36:52.979] run() for ‘MultisessionFuture’ ... done
[13:36:52.980] result() for ClusterFuture ...
[13:36:52.980] receiveMessageFromWorker() for ClusterFuture ...
[13:36:52.980] - Validating connection of MultisessionFuture
[13:36:52.981] - received message: FutureResult
[13:36:52.981] - Received FutureResult
[13:36:52.981] - Erased future from FutureRegistry
[13:36:52.981] result() for ClusterFuture ...
[13:36:52.981] - result already collected: FutureResult
[13:36:52.982] result() for ClusterFuture ... done
[13:36:52.982] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:52.982] result() for ClusterFuture ... done
[13:36:52.982] result() for ClusterFuture ...
[13:36:52.982] - result already collected: FutureResult
[13:36:52.982] result() for ClusterFuture ... done
$b
[1] 2

$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:52.982] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:52.983] Searching for globals...
[13:36:52.984] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:52.984] Searching for globals ... DONE
[13:36:52.985] Resolving globals: TRUE
[13:36:52.985] Resolving any globals that are futures ...
[13:36:52.985] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:52.985] Resolving any globals that are futures ... DONE
[13:36:52.985] Resolving futures part of globals (recursively) ...
[13:36:52.985] resolve() on list ...
[13:36:52.986]  recursive: 99
[13:36:52.986]  length: 1
[13:36:52.986]  elements: ‘x’
[13:36:52.986]  length: 0 (resolved future 1)
[13:36:52.986] resolve() on list ... DONE
[13:36:52.986] - globals: [1] ‘x’
[13:36:52.986] Resolving futures part of globals (recursively) ... DONE
[13:36:52.986] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:52.987] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:52.987] - globals: [1] ‘x’
[13:36:52.987] 
[13:36:52.987] getGlobalsAndPackages() ... DONE
[13:36:52.987] run() for ‘Future’ ...
[13:36:52.987] - state: ‘created’
[13:36:52.987] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.001] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.001] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.001]   - Field: ‘node’
[13:36:53.001]   - Field: ‘label’
[13:36:53.001]   - Field: ‘local’
[13:36:53.001]   - Field: ‘owner’
[13:36:53.001]   - Field: ‘envir’
[13:36:53.001]   - Field: ‘workers’
[13:36:53.002]   - Field: ‘packages’
[13:36:53.002]   - Field: ‘gc’
[13:36:53.002]   - Field: ‘conditions’
[13:36:53.002]   - Field: ‘persistent’
[13:36:53.002]   - Field: ‘expr’
[13:36:53.002]   - Field: ‘uuid’
[13:36:53.002]   - Field: ‘seed’
[13:36:53.002]   - Field: ‘version’
[13:36:53.002]   - Field: ‘result’
[13:36:53.002]   - Field: ‘asynchronous’
[13:36:53.003]   - Field: ‘calls’
[13:36:53.003]   - Field: ‘globals’
[13:36:53.003]   - Field: ‘stdout’
[13:36:53.003]   - Field: ‘earlySignal’
[13:36:53.003]   - Field: ‘lazy’
[13:36:53.003]   - Field: ‘state’
[13:36:53.003] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.003] - Launch lazy future ...
[13:36:53.003] Packages needed by the future expression (n = 0): <none>
[13:36:53.004] Packages needed by future strategies (n = 0): <none>
[13:36:53.004] {
[13:36:53.004]     {
[13:36:53.004]         {
[13:36:53.004]             ...future.startTime <- base::Sys.time()
[13:36:53.004]             {
[13:36:53.004]                 {
[13:36:53.004]                   {
[13:36:53.004]                     {
[13:36:53.004]                       base::local({
[13:36:53.004]                         has_future <- base::requireNamespace("future", 
[13:36:53.004]                           quietly = TRUE)
[13:36:53.004]                         if (has_future) {
[13:36:53.004]                           ns <- base::getNamespace("future")
[13:36:53.004]                           version <- ns[[".package"]][["version"]]
[13:36:53.004]                           if (is.null(version)) 
[13:36:53.004]                             version <- utils::packageVersion("future")
[13:36:53.004]                         }
[13:36:53.004]                         else {
[13:36:53.004]                           version <- NULL
[13:36:53.004]                         }
[13:36:53.004]                         if (!has_future || version < "1.8.0") {
[13:36:53.004]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.004]                             "", base::R.version$version.string), 
[13:36:53.004]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.004]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.004]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.004]                               "release", "version")], collapse = " "), 
[13:36:53.004]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.004]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.004]                             info)
[13:36:53.004]                           info <- base::paste(info, collapse = "; ")
[13:36:53.004]                           if (!has_future) {
[13:36:53.004]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.004]                               info)
[13:36:53.004]                           }
[13:36:53.004]                           else {
[13:36:53.004]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.004]                               info, version)
[13:36:53.004]                           }
[13:36:53.004]                           base::stop(msg)
[13:36:53.004]                         }
[13:36:53.004]                       })
[13:36:53.004]                     }
[13:36:53.004]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.004]                     base::options(mc.cores = 1L)
[13:36:53.004]                   }
[13:36:53.004]                   ...future.strategy.old <- future::plan("list")
[13:36:53.004]                   options(future.plan = NULL)
[13:36:53.004]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.004]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.004]                 }
[13:36:53.004]                 ...future.workdir <- getwd()
[13:36:53.004]             }
[13:36:53.004]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.004]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.004]         }
[13:36:53.004]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.004]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.004]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.004]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.004]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.004]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.004]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.004]             base::names(...future.oldOptions))
[13:36:53.004]     }
[13:36:53.004]     if (FALSE) {
[13:36:53.004]     }
[13:36:53.004]     else {
[13:36:53.004]         if (TRUE) {
[13:36:53.004]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.004]                 open = "w")
[13:36:53.004]         }
[13:36:53.004]         else {
[13:36:53.004]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.004]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.004]         }
[13:36:53.004]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.004]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.004]             base::sink(type = "output", split = FALSE)
[13:36:53.004]             base::close(...future.stdout)
[13:36:53.004]         }, add = TRUE)
[13:36:53.004]     }
[13:36:53.004]     ...future.frame <- base::sys.nframe()
[13:36:53.004]     ...future.conditions <- base::list()
[13:36:53.004]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.004]     if (FALSE) {
[13:36:53.004]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.004]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.004]     }
[13:36:53.004]     ...future.result <- base::tryCatch({
[13:36:53.004]         base::withCallingHandlers({
[13:36:53.004]             ...future.value <- base::withVisible(base::local({
[13:36:53.004]                 ...future.makeSendCondition <- base::local({
[13:36:53.004]                   sendCondition <- NULL
[13:36:53.004]                   function(frame = 1L) {
[13:36:53.004]                     if (is.function(sendCondition)) 
[13:36:53.004]                       return(sendCondition)
[13:36:53.004]                     ns <- getNamespace("parallel")
[13:36:53.004]                     if (exists("sendData", mode = "function", 
[13:36:53.004]                       envir = ns)) {
[13:36:53.004]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.004]                         envir = ns)
[13:36:53.004]                       envir <- sys.frame(frame)
[13:36:53.004]                       master <- NULL
[13:36:53.004]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.004]                         !identical(envir, emptyenv())) {
[13:36:53.004]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.004]                           inherits = FALSE)) {
[13:36:53.004]                           master <- get("master", mode = "list", 
[13:36:53.004]                             envir = envir, inherits = FALSE)
[13:36:53.004]                           if (inherits(master, c("SOCKnode", 
[13:36:53.004]                             "SOCK0node"))) {
[13:36:53.004]                             sendCondition <<- function(cond) {
[13:36:53.004]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.004]                                 success = TRUE)
[13:36:53.004]                               parallel_sendData(master, data)
[13:36:53.004]                             }
[13:36:53.004]                             return(sendCondition)
[13:36:53.004]                           }
[13:36:53.004]                         }
[13:36:53.004]                         frame <- frame + 1L
[13:36:53.004]                         envir <- sys.frame(frame)
[13:36:53.004]                       }
[13:36:53.004]                     }
[13:36:53.004]                     sendCondition <<- function(cond) NULL
[13:36:53.004]                   }
[13:36:53.004]                 })
[13:36:53.004]                 withCallingHandlers({
[13:36:53.004]                   {
[13:36:53.004]                     x[["a"]] <- 1
[13:36:53.004]                     x
[13:36:53.004]                   }
[13:36:53.004]                 }, immediateCondition = function(cond) {
[13:36:53.004]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.004]                   sendCondition(cond)
[13:36:53.004]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.004]                   {
[13:36:53.004]                     inherits <- base::inherits
[13:36:53.004]                     invokeRestart <- base::invokeRestart
[13:36:53.004]                     is.null <- base::is.null
[13:36:53.004]                     muffled <- FALSE
[13:36:53.004]                     if (inherits(cond, "message")) {
[13:36:53.004]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.004]                       if (muffled) 
[13:36:53.004]                         invokeRestart("muffleMessage")
[13:36:53.004]                     }
[13:36:53.004]                     else if (inherits(cond, "warning")) {
[13:36:53.004]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.004]                       if (muffled) 
[13:36:53.004]                         invokeRestart("muffleWarning")
[13:36:53.004]                     }
[13:36:53.004]                     else if (inherits(cond, "condition")) {
[13:36:53.004]                       if (!is.null(pattern)) {
[13:36:53.004]                         computeRestarts <- base::computeRestarts
[13:36:53.004]                         grepl <- base::grepl
[13:36:53.004]                         restarts <- computeRestarts(cond)
[13:36:53.004]                         for (restart in restarts) {
[13:36:53.004]                           name <- restart$name
[13:36:53.004]                           if (is.null(name)) 
[13:36:53.004]                             next
[13:36:53.004]                           if (!grepl(pattern, name)) 
[13:36:53.004]                             next
[13:36:53.004]                           invokeRestart(restart)
[13:36:53.004]                           muffled <- TRUE
[13:36:53.004]                           break
[13:36:53.004]                         }
[13:36:53.004]                       }
[13:36:53.004]                     }
[13:36:53.004]                     invisible(muffled)
[13:36:53.004]                   }
[13:36:53.004]                   muffleCondition(cond)
[13:36:53.004]                 })
[13:36:53.004]             }))
[13:36:53.004]             future::FutureResult(value = ...future.value$value, 
[13:36:53.004]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.004]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.004]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.004]                     ...future.globalenv.names))
[13:36:53.004]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.004]         }, condition = base::local({
[13:36:53.004]             c <- base::c
[13:36:53.004]             inherits <- base::inherits
[13:36:53.004]             invokeRestart <- base::invokeRestart
[13:36:53.004]             length <- base::length
[13:36:53.004]             list <- base::list
[13:36:53.004]             seq.int <- base::seq.int
[13:36:53.004]             signalCondition <- base::signalCondition
[13:36:53.004]             sys.calls <- base::sys.calls
[13:36:53.004]             `[[` <- base::`[[`
[13:36:53.004]             `+` <- base::`+`
[13:36:53.004]             `<<-` <- base::`<<-`
[13:36:53.004]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.004]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.004]                   3L)]
[13:36:53.004]             }
[13:36:53.004]             function(cond) {
[13:36:53.004]                 is_error <- inherits(cond, "error")
[13:36:53.004]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.004]                   NULL)
[13:36:53.004]                 if (is_error) {
[13:36:53.004]                   sessionInformation <- function() {
[13:36:53.004]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.004]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.004]                       search = base::search(), system = base::Sys.info())
[13:36:53.004]                   }
[13:36:53.004]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.004]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.004]                     cond$call), session = sessionInformation(), 
[13:36:53.004]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.004]                   signalCondition(cond)
[13:36:53.004]                 }
[13:36:53.004]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.004]                 "immediateCondition"))) {
[13:36:53.004]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.004]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.004]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.004]                   if (TRUE && !signal) {
[13:36:53.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.004]                     {
[13:36:53.004]                       inherits <- base::inherits
[13:36:53.004]                       invokeRestart <- base::invokeRestart
[13:36:53.004]                       is.null <- base::is.null
[13:36:53.004]                       muffled <- FALSE
[13:36:53.004]                       if (inherits(cond, "message")) {
[13:36:53.004]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.004]                         if (muffled) 
[13:36:53.004]                           invokeRestart("muffleMessage")
[13:36:53.004]                       }
[13:36:53.004]                       else if (inherits(cond, "warning")) {
[13:36:53.004]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.004]                         if (muffled) 
[13:36:53.004]                           invokeRestart("muffleWarning")
[13:36:53.004]                       }
[13:36:53.004]                       else if (inherits(cond, "condition")) {
[13:36:53.004]                         if (!is.null(pattern)) {
[13:36:53.004]                           computeRestarts <- base::computeRestarts
[13:36:53.004]                           grepl <- base::grepl
[13:36:53.004]                           restarts <- computeRestarts(cond)
[13:36:53.004]                           for (restart in restarts) {
[13:36:53.004]                             name <- restart$name
[13:36:53.004]                             if (is.null(name)) 
[13:36:53.004]                               next
[13:36:53.004]                             if (!grepl(pattern, name)) 
[13:36:53.004]                               next
[13:36:53.004]                             invokeRestart(restart)
[13:36:53.004]                             muffled <- TRUE
[13:36:53.004]                             break
[13:36:53.004]                           }
[13:36:53.004]                         }
[13:36:53.004]                       }
[13:36:53.004]                       invisible(muffled)
[13:36:53.004]                     }
[13:36:53.004]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.004]                   }
[13:36:53.004]                 }
[13:36:53.004]                 else {
[13:36:53.004]                   if (TRUE) {
[13:36:53.004]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.004]                     {
[13:36:53.004]                       inherits <- base::inherits
[13:36:53.004]                       invokeRestart <- base::invokeRestart
[13:36:53.004]                       is.null <- base::is.null
[13:36:53.004]                       muffled <- FALSE
[13:36:53.004]                       if (inherits(cond, "message")) {
[13:36:53.004]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.004]                         if (muffled) 
[13:36:53.004]                           invokeRestart("muffleMessage")
[13:36:53.004]                       }
[13:36:53.004]                       else if (inherits(cond, "warning")) {
[13:36:53.004]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.004]                         if (muffled) 
[13:36:53.004]                           invokeRestart("muffleWarning")
[13:36:53.004]                       }
[13:36:53.004]                       else if (inherits(cond, "condition")) {
[13:36:53.004]                         if (!is.null(pattern)) {
[13:36:53.004]                           computeRestarts <- base::computeRestarts
[13:36:53.004]                           grepl <- base::grepl
[13:36:53.004]                           restarts <- computeRestarts(cond)
[13:36:53.004]                           for (restart in restarts) {
[13:36:53.004]                             name <- restart$name
[13:36:53.004]                             if (is.null(name)) 
[13:36:53.004]                               next
[13:36:53.004]                             if (!grepl(pattern, name)) 
[13:36:53.004]                               next
[13:36:53.004]                             invokeRestart(restart)
[13:36:53.004]                             muffled <- TRUE
[13:36:53.004]                             break
[13:36:53.004]                           }
[13:36:53.004]                         }
[13:36:53.004]                       }
[13:36:53.004]                       invisible(muffled)
[13:36:53.004]                     }
[13:36:53.004]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.004]                   }
[13:36:53.004]                 }
[13:36:53.004]             }
[13:36:53.004]         }))
[13:36:53.004]     }, error = function(ex) {
[13:36:53.004]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.004]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.004]                 ...future.rng), started = ...future.startTime, 
[13:36:53.004]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.004]             version = "1.8"), class = "FutureResult")
[13:36:53.004]     }, finally = {
[13:36:53.004]         if (!identical(...future.workdir, getwd())) 
[13:36:53.004]             setwd(...future.workdir)
[13:36:53.004]         {
[13:36:53.004]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.004]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.004]             }
[13:36:53.004]             base::options(...future.oldOptions)
[13:36:53.004]             if (.Platform$OS.type == "windows") {
[13:36:53.004]                 old_names <- names(...future.oldEnvVars)
[13:36:53.004]                 envs <- base::Sys.getenv()
[13:36:53.004]                 names <- names(envs)
[13:36:53.004]                 common <- intersect(names, old_names)
[13:36:53.004]                 added <- setdiff(names, old_names)
[13:36:53.004]                 removed <- setdiff(old_names, names)
[13:36:53.004]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.004]                   envs[common]]
[13:36:53.004]                 NAMES <- toupper(changed)
[13:36:53.004]                 args <- list()
[13:36:53.004]                 for (kk in seq_along(NAMES)) {
[13:36:53.004]                   name <- changed[[kk]]
[13:36:53.004]                   NAME <- NAMES[[kk]]
[13:36:53.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.004]                     next
[13:36:53.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.004]                 }
[13:36:53.004]                 NAMES <- toupper(added)
[13:36:53.004]                 for (kk in seq_along(NAMES)) {
[13:36:53.004]                   name <- added[[kk]]
[13:36:53.004]                   NAME <- NAMES[[kk]]
[13:36:53.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.004]                     next
[13:36:53.004]                   args[[name]] <- ""
[13:36:53.004]                 }
[13:36:53.004]                 NAMES <- toupper(removed)
[13:36:53.004]                 for (kk in seq_along(NAMES)) {
[13:36:53.004]                   name <- removed[[kk]]
[13:36:53.004]                   NAME <- NAMES[[kk]]
[13:36:53.004]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.004]                     next
[13:36:53.004]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.004]                 }
[13:36:53.004]                 if (length(args) > 0) 
[13:36:53.004]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.004]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.004]             }
[13:36:53.004]             else {
[13:36:53.004]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.004]             }
[13:36:53.004]             {
[13:36:53.004]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.004]                   0L) {
[13:36:53.004]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.004]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.004]                   base::options(opts)
[13:36:53.004]                 }
[13:36:53.004]                 {
[13:36:53.004]                   {
[13:36:53.004]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.004]                     NULL
[13:36:53.004]                   }
[13:36:53.004]                   options(future.plan = NULL)
[13:36:53.004]                   if (is.na(NA_character_)) 
[13:36:53.004]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.004]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.004]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.004]                     .init = FALSE)
[13:36:53.004]                 }
[13:36:53.004]             }
[13:36:53.004]         }
[13:36:53.004]     })
[13:36:53.004]     if (TRUE) {
[13:36:53.004]         base::sink(type = "output", split = FALSE)
[13:36:53.004]         if (TRUE) {
[13:36:53.004]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.004]         }
[13:36:53.004]         else {
[13:36:53.004]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.004]         }
[13:36:53.004]         base::close(...future.stdout)
[13:36:53.004]         ...future.stdout <- NULL
[13:36:53.004]     }
[13:36:53.004]     ...future.result$conditions <- ...future.conditions
[13:36:53.004]     ...future.result$finished <- base::Sys.time()
[13:36:53.004]     ...future.result
[13:36:53.004] }
[13:36:53.006] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.006] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.007] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.007] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.007] MultisessionFuture started
[13:36:53.008] - Launch lazy future ... done
[13:36:53.008] run() for ‘MultisessionFuture’ ... done
[13:36:53.008] result() for ClusterFuture ...
[13:36:53.008] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.008] - Validating connection of MultisessionFuture
[13:36:53.009] - received message: FutureResult
[13:36:53.009] - Received FutureResult
[13:36:53.010] - Erased future from FutureRegistry
[13:36:53.010] result() for ClusterFuture ...
[13:36:53.010] - result already collected: FutureResult
[13:36:53.010] result() for ClusterFuture ... done
[13:36:53.010] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.010] result() for ClusterFuture ... done
[13:36:53.010] result() for ClusterFuture ...
[13:36:53.010] - result already collected: FutureResult
[13:36:53.010] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.011] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.011] Searching for globals...
[13:36:53.013] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:53.013] Searching for globals ... DONE
[13:36:53.013] Resolving globals: TRUE
[13:36:53.013] Resolving any globals that are futures ...
[13:36:53.013] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:53.013] Resolving any globals that are futures ... DONE
[13:36:53.013] Resolving futures part of globals (recursively) ...
[13:36:53.014] resolve() on list ...
[13:36:53.014]  recursive: 99
[13:36:53.014]  length: 1
[13:36:53.014]  elements: ‘x’
[13:36:53.014]  length: 0 (resolved future 1)
[13:36:53.014] resolve() on list ... DONE
[13:36:53.014] - globals: [1] ‘x’
[13:36:53.014] Resolving futures part of globals (recursively) ... DONE
[13:36:53.015] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:53.015] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:53.015] - globals: [1] ‘x’
[13:36:53.015] 
[13:36:53.015] getGlobalsAndPackages() ... DONE
[13:36:53.015] run() for ‘Future’ ...
[13:36:53.015] - state: ‘created’
[13:36:53.016] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.029] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.029] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.029]   - Field: ‘node’
[13:36:53.029]   - Field: ‘label’
[13:36:53.029]   - Field: ‘local’
[13:36:53.030]   - Field: ‘owner’
[13:36:53.030]   - Field: ‘envir’
[13:36:53.030]   - Field: ‘workers’
[13:36:53.030]   - Field: ‘packages’
[13:36:53.030]   - Field: ‘gc’
[13:36:53.030]   - Field: ‘conditions’
[13:36:53.030]   - Field: ‘persistent’
[13:36:53.030]   - Field: ‘expr’
[13:36:53.030]   - Field: ‘uuid’
[13:36:53.030]   - Field: ‘seed’
[13:36:53.031]   - Field: ‘version’
[13:36:53.031]   - Field: ‘result’
[13:36:53.031]   - Field: ‘asynchronous’
[13:36:53.031]   - Field: ‘calls’
[13:36:53.031]   - Field: ‘globals’
[13:36:53.031]   - Field: ‘stdout’
[13:36:53.031]   - Field: ‘earlySignal’
[13:36:53.031]   - Field: ‘lazy’
[13:36:53.031]   - Field: ‘state’
[13:36:53.031] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.031] - Launch lazy future ...
[13:36:53.032] Packages needed by the future expression (n = 0): <none>
[13:36:53.032] Packages needed by future strategies (n = 0): <none>
[13:36:53.032] {
[13:36:53.032]     {
[13:36:53.032]         {
[13:36:53.032]             ...future.startTime <- base::Sys.time()
[13:36:53.032]             {
[13:36:53.032]                 {
[13:36:53.032]                   {
[13:36:53.032]                     {
[13:36:53.032]                       base::local({
[13:36:53.032]                         has_future <- base::requireNamespace("future", 
[13:36:53.032]                           quietly = TRUE)
[13:36:53.032]                         if (has_future) {
[13:36:53.032]                           ns <- base::getNamespace("future")
[13:36:53.032]                           version <- ns[[".package"]][["version"]]
[13:36:53.032]                           if (is.null(version)) 
[13:36:53.032]                             version <- utils::packageVersion("future")
[13:36:53.032]                         }
[13:36:53.032]                         else {
[13:36:53.032]                           version <- NULL
[13:36:53.032]                         }
[13:36:53.032]                         if (!has_future || version < "1.8.0") {
[13:36:53.032]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.032]                             "", base::R.version$version.string), 
[13:36:53.032]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.032]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.032]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.032]                               "release", "version")], collapse = " "), 
[13:36:53.032]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.032]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.032]                             info)
[13:36:53.032]                           info <- base::paste(info, collapse = "; ")
[13:36:53.032]                           if (!has_future) {
[13:36:53.032]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.032]                               info)
[13:36:53.032]                           }
[13:36:53.032]                           else {
[13:36:53.032]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.032]                               info, version)
[13:36:53.032]                           }
[13:36:53.032]                           base::stop(msg)
[13:36:53.032]                         }
[13:36:53.032]                       })
[13:36:53.032]                     }
[13:36:53.032]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.032]                     base::options(mc.cores = 1L)
[13:36:53.032]                   }
[13:36:53.032]                   ...future.strategy.old <- future::plan("list")
[13:36:53.032]                   options(future.plan = NULL)
[13:36:53.032]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.032]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.032]                 }
[13:36:53.032]                 ...future.workdir <- getwd()
[13:36:53.032]             }
[13:36:53.032]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.032]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.032]         }
[13:36:53.032]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.032]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.032]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.032]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.032]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.032]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.032]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.032]             base::names(...future.oldOptions))
[13:36:53.032]     }
[13:36:53.032]     if (FALSE) {
[13:36:53.032]     }
[13:36:53.032]     else {
[13:36:53.032]         if (TRUE) {
[13:36:53.032]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.032]                 open = "w")
[13:36:53.032]         }
[13:36:53.032]         else {
[13:36:53.032]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.032]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.032]         }
[13:36:53.032]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.032]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.032]             base::sink(type = "output", split = FALSE)
[13:36:53.032]             base::close(...future.stdout)
[13:36:53.032]         }, add = TRUE)
[13:36:53.032]     }
[13:36:53.032]     ...future.frame <- base::sys.nframe()
[13:36:53.032]     ...future.conditions <- base::list()
[13:36:53.032]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.032]     if (FALSE) {
[13:36:53.032]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.032]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.032]     }
[13:36:53.032]     ...future.result <- base::tryCatch({
[13:36:53.032]         base::withCallingHandlers({
[13:36:53.032]             ...future.value <- base::withVisible(base::local({
[13:36:53.032]                 ...future.makeSendCondition <- base::local({
[13:36:53.032]                   sendCondition <- NULL
[13:36:53.032]                   function(frame = 1L) {
[13:36:53.032]                     if (is.function(sendCondition)) 
[13:36:53.032]                       return(sendCondition)
[13:36:53.032]                     ns <- getNamespace("parallel")
[13:36:53.032]                     if (exists("sendData", mode = "function", 
[13:36:53.032]                       envir = ns)) {
[13:36:53.032]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.032]                         envir = ns)
[13:36:53.032]                       envir <- sys.frame(frame)
[13:36:53.032]                       master <- NULL
[13:36:53.032]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.032]                         !identical(envir, emptyenv())) {
[13:36:53.032]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.032]                           inherits = FALSE)) {
[13:36:53.032]                           master <- get("master", mode = "list", 
[13:36:53.032]                             envir = envir, inherits = FALSE)
[13:36:53.032]                           if (inherits(master, c("SOCKnode", 
[13:36:53.032]                             "SOCK0node"))) {
[13:36:53.032]                             sendCondition <<- function(cond) {
[13:36:53.032]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.032]                                 success = TRUE)
[13:36:53.032]                               parallel_sendData(master, data)
[13:36:53.032]                             }
[13:36:53.032]                             return(sendCondition)
[13:36:53.032]                           }
[13:36:53.032]                         }
[13:36:53.032]                         frame <- frame + 1L
[13:36:53.032]                         envir <- sys.frame(frame)
[13:36:53.032]                       }
[13:36:53.032]                     }
[13:36:53.032]                     sendCondition <<- function(cond) NULL
[13:36:53.032]                   }
[13:36:53.032]                 })
[13:36:53.032]                 withCallingHandlers({
[13:36:53.032]                   {
[13:36:53.032]                     x[["a"]] <- 1
[13:36:53.032]                     x
[13:36:53.032]                   }
[13:36:53.032]                 }, immediateCondition = function(cond) {
[13:36:53.032]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.032]                   sendCondition(cond)
[13:36:53.032]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.032]                   {
[13:36:53.032]                     inherits <- base::inherits
[13:36:53.032]                     invokeRestart <- base::invokeRestart
[13:36:53.032]                     is.null <- base::is.null
[13:36:53.032]                     muffled <- FALSE
[13:36:53.032]                     if (inherits(cond, "message")) {
[13:36:53.032]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.032]                       if (muffled) 
[13:36:53.032]                         invokeRestart("muffleMessage")
[13:36:53.032]                     }
[13:36:53.032]                     else if (inherits(cond, "warning")) {
[13:36:53.032]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.032]                       if (muffled) 
[13:36:53.032]                         invokeRestart("muffleWarning")
[13:36:53.032]                     }
[13:36:53.032]                     else if (inherits(cond, "condition")) {
[13:36:53.032]                       if (!is.null(pattern)) {
[13:36:53.032]                         computeRestarts <- base::computeRestarts
[13:36:53.032]                         grepl <- base::grepl
[13:36:53.032]                         restarts <- computeRestarts(cond)
[13:36:53.032]                         for (restart in restarts) {
[13:36:53.032]                           name <- restart$name
[13:36:53.032]                           if (is.null(name)) 
[13:36:53.032]                             next
[13:36:53.032]                           if (!grepl(pattern, name)) 
[13:36:53.032]                             next
[13:36:53.032]                           invokeRestart(restart)
[13:36:53.032]                           muffled <- TRUE
[13:36:53.032]                           break
[13:36:53.032]                         }
[13:36:53.032]                       }
[13:36:53.032]                     }
[13:36:53.032]                     invisible(muffled)
[13:36:53.032]                   }
[13:36:53.032]                   muffleCondition(cond)
[13:36:53.032]                 })
[13:36:53.032]             }))
[13:36:53.032]             future::FutureResult(value = ...future.value$value, 
[13:36:53.032]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.032]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.032]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.032]                     ...future.globalenv.names))
[13:36:53.032]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.032]         }, condition = base::local({
[13:36:53.032]             c <- base::c
[13:36:53.032]             inherits <- base::inherits
[13:36:53.032]             invokeRestart <- base::invokeRestart
[13:36:53.032]             length <- base::length
[13:36:53.032]             list <- base::list
[13:36:53.032]             seq.int <- base::seq.int
[13:36:53.032]             signalCondition <- base::signalCondition
[13:36:53.032]             sys.calls <- base::sys.calls
[13:36:53.032]             `[[` <- base::`[[`
[13:36:53.032]             `+` <- base::`+`
[13:36:53.032]             `<<-` <- base::`<<-`
[13:36:53.032]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.032]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.032]                   3L)]
[13:36:53.032]             }
[13:36:53.032]             function(cond) {
[13:36:53.032]                 is_error <- inherits(cond, "error")
[13:36:53.032]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.032]                   NULL)
[13:36:53.032]                 if (is_error) {
[13:36:53.032]                   sessionInformation <- function() {
[13:36:53.032]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.032]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.032]                       search = base::search(), system = base::Sys.info())
[13:36:53.032]                   }
[13:36:53.032]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.032]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.032]                     cond$call), session = sessionInformation(), 
[13:36:53.032]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.032]                   signalCondition(cond)
[13:36:53.032]                 }
[13:36:53.032]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.032]                 "immediateCondition"))) {
[13:36:53.032]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.032]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.032]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.032]                   if (TRUE && !signal) {
[13:36:53.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.032]                     {
[13:36:53.032]                       inherits <- base::inherits
[13:36:53.032]                       invokeRestart <- base::invokeRestart
[13:36:53.032]                       is.null <- base::is.null
[13:36:53.032]                       muffled <- FALSE
[13:36:53.032]                       if (inherits(cond, "message")) {
[13:36:53.032]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.032]                         if (muffled) 
[13:36:53.032]                           invokeRestart("muffleMessage")
[13:36:53.032]                       }
[13:36:53.032]                       else if (inherits(cond, "warning")) {
[13:36:53.032]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.032]                         if (muffled) 
[13:36:53.032]                           invokeRestart("muffleWarning")
[13:36:53.032]                       }
[13:36:53.032]                       else if (inherits(cond, "condition")) {
[13:36:53.032]                         if (!is.null(pattern)) {
[13:36:53.032]                           computeRestarts <- base::computeRestarts
[13:36:53.032]                           grepl <- base::grepl
[13:36:53.032]                           restarts <- computeRestarts(cond)
[13:36:53.032]                           for (restart in restarts) {
[13:36:53.032]                             name <- restart$name
[13:36:53.032]                             if (is.null(name)) 
[13:36:53.032]                               next
[13:36:53.032]                             if (!grepl(pattern, name)) 
[13:36:53.032]                               next
[13:36:53.032]                             invokeRestart(restart)
[13:36:53.032]                             muffled <- TRUE
[13:36:53.032]                             break
[13:36:53.032]                           }
[13:36:53.032]                         }
[13:36:53.032]                       }
[13:36:53.032]                       invisible(muffled)
[13:36:53.032]                     }
[13:36:53.032]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.032]                   }
[13:36:53.032]                 }
[13:36:53.032]                 else {
[13:36:53.032]                   if (TRUE) {
[13:36:53.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.032]                     {
[13:36:53.032]                       inherits <- base::inherits
[13:36:53.032]                       invokeRestart <- base::invokeRestart
[13:36:53.032]                       is.null <- base::is.null
[13:36:53.032]                       muffled <- FALSE
[13:36:53.032]                       if (inherits(cond, "message")) {
[13:36:53.032]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.032]                         if (muffled) 
[13:36:53.032]                           invokeRestart("muffleMessage")
[13:36:53.032]                       }
[13:36:53.032]                       else if (inherits(cond, "warning")) {
[13:36:53.032]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.032]                         if (muffled) 
[13:36:53.032]                           invokeRestart("muffleWarning")
[13:36:53.032]                       }
[13:36:53.032]                       else if (inherits(cond, "condition")) {
[13:36:53.032]                         if (!is.null(pattern)) {
[13:36:53.032]                           computeRestarts <- base::computeRestarts
[13:36:53.032]                           grepl <- base::grepl
[13:36:53.032]                           restarts <- computeRestarts(cond)
[13:36:53.032]                           for (restart in restarts) {
[13:36:53.032]                             name <- restart$name
[13:36:53.032]                             if (is.null(name)) 
[13:36:53.032]                               next
[13:36:53.032]                             if (!grepl(pattern, name)) 
[13:36:53.032]                               next
[13:36:53.032]                             invokeRestart(restart)
[13:36:53.032]                             muffled <- TRUE
[13:36:53.032]                             break
[13:36:53.032]                           }
[13:36:53.032]                         }
[13:36:53.032]                       }
[13:36:53.032]                       invisible(muffled)
[13:36:53.032]                     }
[13:36:53.032]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.032]                   }
[13:36:53.032]                 }
[13:36:53.032]             }
[13:36:53.032]         }))
[13:36:53.032]     }, error = function(ex) {
[13:36:53.032]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.032]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.032]                 ...future.rng), started = ...future.startTime, 
[13:36:53.032]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.032]             version = "1.8"), class = "FutureResult")
[13:36:53.032]     }, finally = {
[13:36:53.032]         if (!identical(...future.workdir, getwd())) 
[13:36:53.032]             setwd(...future.workdir)
[13:36:53.032]         {
[13:36:53.032]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.032]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.032]             }
[13:36:53.032]             base::options(...future.oldOptions)
[13:36:53.032]             if (.Platform$OS.type == "windows") {
[13:36:53.032]                 old_names <- names(...future.oldEnvVars)
[13:36:53.032]                 envs <- base::Sys.getenv()
[13:36:53.032]                 names <- names(envs)
[13:36:53.032]                 common <- intersect(names, old_names)
[13:36:53.032]                 added <- setdiff(names, old_names)
[13:36:53.032]                 removed <- setdiff(old_names, names)
[13:36:53.032]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.032]                   envs[common]]
[13:36:53.032]                 NAMES <- toupper(changed)
[13:36:53.032]                 args <- list()
[13:36:53.032]                 for (kk in seq_along(NAMES)) {
[13:36:53.032]                   name <- changed[[kk]]
[13:36:53.032]                   NAME <- NAMES[[kk]]
[13:36:53.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.032]                     next
[13:36:53.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.032]                 }
[13:36:53.032]                 NAMES <- toupper(added)
[13:36:53.032]                 for (kk in seq_along(NAMES)) {
[13:36:53.032]                   name <- added[[kk]]
[13:36:53.032]                   NAME <- NAMES[[kk]]
[13:36:53.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.032]                     next
[13:36:53.032]                   args[[name]] <- ""
[13:36:53.032]                 }
[13:36:53.032]                 NAMES <- toupper(removed)
[13:36:53.032]                 for (kk in seq_along(NAMES)) {
[13:36:53.032]                   name <- removed[[kk]]
[13:36:53.032]                   NAME <- NAMES[[kk]]
[13:36:53.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.032]                     next
[13:36:53.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.032]                 }
[13:36:53.032]                 if (length(args) > 0) 
[13:36:53.032]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.032]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.032]             }
[13:36:53.032]             else {
[13:36:53.032]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.032]             }
[13:36:53.032]             {
[13:36:53.032]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.032]                   0L) {
[13:36:53.032]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.032]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.032]                   base::options(opts)
[13:36:53.032]                 }
[13:36:53.032]                 {
[13:36:53.032]                   {
[13:36:53.032]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.032]                     NULL
[13:36:53.032]                   }
[13:36:53.032]                   options(future.plan = NULL)
[13:36:53.032]                   if (is.na(NA_character_)) 
[13:36:53.032]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.032]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.032]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.032]                     .init = FALSE)
[13:36:53.032]                 }
[13:36:53.032]             }
[13:36:53.032]         }
[13:36:53.032]     })
[13:36:53.032]     if (TRUE) {
[13:36:53.032]         base::sink(type = "output", split = FALSE)
[13:36:53.032]         if (TRUE) {
[13:36:53.032]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.032]         }
[13:36:53.032]         else {
[13:36:53.032]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.032]         }
[13:36:53.032]         base::close(...future.stdout)
[13:36:53.032]         ...future.stdout <- NULL
[13:36:53.032]     }
[13:36:53.032]     ...future.result$conditions <- ...future.conditions
[13:36:53.032]     ...future.result$finished <- base::Sys.time()
[13:36:53.032]     ...future.result
[13:36:53.032] }
[13:36:53.035] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.035] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.035] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.035] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.036] MultisessionFuture started
[13:36:53.036] - Launch lazy future ... done
[13:36:53.036] run() for ‘MultisessionFuture’ ... done
[13:36:53.036] result() for ClusterFuture ...
[13:36:53.036] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.037] - Validating connection of MultisessionFuture
[13:36:53.038] - received message: FutureResult
[13:36:53.038] - Received FutureResult
[13:36:53.038] - Erased future from FutureRegistry
[13:36:53.038] result() for ClusterFuture ...
[13:36:53.038] - result already collected: FutureResult
[13:36:53.038] result() for ClusterFuture ... done
[13:36:53.038] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.038] result() for ClusterFuture ... done
[13:36:53.039] result() for ClusterFuture ...
[13:36:53.039] - result already collected: FutureResult
[13:36:53.039] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.039] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.039] Searching for globals...
[13:36:53.042] - globals found: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:53.042] Searching for globals ... DONE
[13:36:53.042] Resolving globals: TRUE
[13:36:53.042] Resolving any globals that are futures ...
[13:36:53.042] - globals: [5] ‘{’, ‘x’, ‘<-’, ‘[[’, ‘[[<-’
[13:36:53.042] Resolving any globals that are futures ... DONE
[13:36:53.043] Resolving futures part of globals (recursively) ...
[13:36:53.043] resolve() on list ...
[13:36:53.043]  recursive: 99
[13:36:53.043]  length: 1
[13:36:53.043]  elements: ‘x’
[13:36:53.045]  length: 0 (resolved future 1)
[13:36:53.046] resolve() on list ... DONE
[13:36:53.046] - globals: [1] ‘x’
[13:36:53.046] Resolving futures part of globals (recursively) ... DONE
[13:36:53.046] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:53.046] The total size of the 1 globals exported for future expression (‘{; x[["a"]] <- 1; x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:53.046] - globals: [1] ‘x’
[13:36:53.046] 
[13:36:53.047] getGlobalsAndPackages() ... DONE
[13:36:53.047] run() for ‘Future’ ...
[13:36:53.047] - state: ‘created’
[13:36:53.047] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.061] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.061] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.061]   - Field: ‘node’
[13:36:53.061]   - Field: ‘label’
[13:36:53.061]   - Field: ‘local’
[13:36:53.061]   - Field: ‘owner’
[13:36:53.061]   - Field: ‘envir’
[13:36:53.061]   - Field: ‘workers’
[13:36:53.062]   - Field: ‘packages’
[13:36:53.062]   - Field: ‘gc’
[13:36:53.062]   - Field: ‘conditions’
[13:36:53.062]   - Field: ‘persistent’
[13:36:53.062]   - Field: ‘expr’
[13:36:53.062]   - Field: ‘uuid’
[13:36:53.062]   - Field: ‘seed’
[13:36:53.062]   - Field: ‘version’
[13:36:53.062]   - Field: ‘result’
[13:36:53.062]   - Field: ‘asynchronous’
[13:36:53.062]   - Field: ‘calls’
[13:36:53.063]   - Field: ‘globals’
[13:36:53.063]   - Field: ‘stdout’
[13:36:53.063]   - Field: ‘earlySignal’
[13:36:53.063]   - Field: ‘lazy’
[13:36:53.063]   - Field: ‘state’
[13:36:53.063] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.063] - Launch lazy future ...
[13:36:53.063] Packages needed by the future expression (n = 0): <none>
[13:36:53.063] Packages needed by future strategies (n = 0): <none>
[13:36:53.064] {
[13:36:53.064]     {
[13:36:53.064]         {
[13:36:53.064]             ...future.startTime <- base::Sys.time()
[13:36:53.064]             {
[13:36:53.064]                 {
[13:36:53.064]                   {
[13:36:53.064]                     {
[13:36:53.064]                       base::local({
[13:36:53.064]                         has_future <- base::requireNamespace("future", 
[13:36:53.064]                           quietly = TRUE)
[13:36:53.064]                         if (has_future) {
[13:36:53.064]                           ns <- base::getNamespace("future")
[13:36:53.064]                           version <- ns[[".package"]][["version"]]
[13:36:53.064]                           if (is.null(version)) 
[13:36:53.064]                             version <- utils::packageVersion("future")
[13:36:53.064]                         }
[13:36:53.064]                         else {
[13:36:53.064]                           version <- NULL
[13:36:53.064]                         }
[13:36:53.064]                         if (!has_future || version < "1.8.0") {
[13:36:53.064]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.064]                             "", base::R.version$version.string), 
[13:36:53.064]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.064]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.064]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.064]                               "release", "version")], collapse = " "), 
[13:36:53.064]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.064]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.064]                             info)
[13:36:53.064]                           info <- base::paste(info, collapse = "; ")
[13:36:53.064]                           if (!has_future) {
[13:36:53.064]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.064]                               info)
[13:36:53.064]                           }
[13:36:53.064]                           else {
[13:36:53.064]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.064]                               info, version)
[13:36:53.064]                           }
[13:36:53.064]                           base::stop(msg)
[13:36:53.064]                         }
[13:36:53.064]                       })
[13:36:53.064]                     }
[13:36:53.064]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.064]                     base::options(mc.cores = 1L)
[13:36:53.064]                   }
[13:36:53.064]                   ...future.strategy.old <- future::plan("list")
[13:36:53.064]                   options(future.plan = NULL)
[13:36:53.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.064]                 }
[13:36:53.064]                 ...future.workdir <- getwd()
[13:36:53.064]             }
[13:36:53.064]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.064]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.064]         }
[13:36:53.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.064]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.064]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.064]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.064]             base::names(...future.oldOptions))
[13:36:53.064]     }
[13:36:53.064]     if (FALSE) {
[13:36:53.064]     }
[13:36:53.064]     else {
[13:36:53.064]         if (TRUE) {
[13:36:53.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.064]                 open = "w")
[13:36:53.064]         }
[13:36:53.064]         else {
[13:36:53.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.064]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.064]         }
[13:36:53.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.064]             base::sink(type = "output", split = FALSE)
[13:36:53.064]             base::close(...future.stdout)
[13:36:53.064]         }, add = TRUE)
[13:36:53.064]     }
[13:36:53.064]     ...future.frame <- base::sys.nframe()
[13:36:53.064]     ...future.conditions <- base::list()
[13:36:53.064]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.064]     if (FALSE) {
[13:36:53.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.064]     }
[13:36:53.064]     ...future.result <- base::tryCatch({
[13:36:53.064]         base::withCallingHandlers({
[13:36:53.064]             ...future.value <- base::withVisible(base::local({
[13:36:53.064]                 ...future.makeSendCondition <- base::local({
[13:36:53.064]                   sendCondition <- NULL
[13:36:53.064]                   function(frame = 1L) {
[13:36:53.064]                     if (is.function(sendCondition)) 
[13:36:53.064]                       return(sendCondition)
[13:36:53.064]                     ns <- getNamespace("parallel")
[13:36:53.064]                     if (exists("sendData", mode = "function", 
[13:36:53.064]                       envir = ns)) {
[13:36:53.064]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.064]                         envir = ns)
[13:36:53.064]                       envir <- sys.frame(frame)
[13:36:53.064]                       master <- NULL
[13:36:53.064]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.064]                         !identical(envir, emptyenv())) {
[13:36:53.064]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.064]                           inherits = FALSE)) {
[13:36:53.064]                           master <- get("master", mode = "list", 
[13:36:53.064]                             envir = envir, inherits = FALSE)
[13:36:53.064]                           if (inherits(master, c("SOCKnode", 
[13:36:53.064]                             "SOCK0node"))) {
[13:36:53.064]                             sendCondition <<- function(cond) {
[13:36:53.064]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.064]                                 success = TRUE)
[13:36:53.064]                               parallel_sendData(master, data)
[13:36:53.064]                             }
[13:36:53.064]                             return(sendCondition)
[13:36:53.064]                           }
[13:36:53.064]                         }
[13:36:53.064]                         frame <- frame + 1L
[13:36:53.064]                         envir <- sys.frame(frame)
[13:36:53.064]                       }
[13:36:53.064]                     }
[13:36:53.064]                     sendCondition <<- function(cond) NULL
[13:36:53.064]                   }
[13:36:53.064]                 })
[13:36:53.064]                 withCallingHandlers({
[13:36:53.064]                   {
[13:36:53.064]                     x[["a"]] <- 1
[13:36:53.064]                     x
[13:36:53.064]                   }
[13:36:53.064]                 }, immediateCondition = function(cond) {
[13:36:53.064]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.064]                   sendCondition(cond)
[13:36:53.064]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.064]                   {
[13:36:53.064]                     inherits <- base::inherits
[13:36:53.064]                     invokeRestart <- base::invokeRestart
[13:36:53.064]                     is.null <- base::is.null
[13:36:53.064]                     muffled <- FALSE
[13:36:53.064]                     if (inherits(cond, "message")) {
[13:36:53.064]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.064]                       if (muffled) 
[13:36:53.064]                         invokeRestart("muffleMessage")
[13:36:53.064]                     }
[13:36:53.064]                     else if (inherits(cond, "warning")) {
[13:36:53.064]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.064]                       if (muffled) 
[13:36:53.064]                         invokeRestart("muffleWarning")
[13:36:53.064]                     }
[13:36:53.064]                     else if (inherits(cond, "condition")) {
[13:36:53.064]                       if (!is.null(pattern)) {
[13:36:53.064]                         computeRestarts <- base::computeRestarts
[13:36:53.064]                         grepl <- base::grepl
[13:36:53.064]                         restarts <- computeRestarts(cond)
[13:36:53.064]                         for (restart in restarts) {
[13:36:53.064]                           name <- restart$name
[13:36:53.064]                           if (is.null(name)) 
[13:36:53.064]                             next
[13:36:53.064]                           if (!grepl(pattern, name)) 
[13:36:53.064]                             next
[13:36:53.064]                           invokeRestart(restart)
[13:36:53.064]                           muffled <- TRUE
[13:36:53.064]                           break
[13:36:53.064]                         }
[13:36:53.064]                       }
[13:36:53.064]                     }
[13:36:53.064]                     invisible(muffled)
[13:36:53.064]                   }
[13:36:53.064]                   muffleCondition(cond)
[13:36:53.064]                 })
[13:36:53.064]             }))
[13:36:53.064]             future::FutureResult(value = ...future.value$value, 
[13:36:53.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.064]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.064]                     ...future.globalenv.names))
[13:36:53.064]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.064]         }, condition = base::local({
[13:36:53.064]             c <- base::c
[13:36:53.064]             inherits <- base::inherits
[13:36:53.064]             invokeRestart <- base::invokeRestart
[13:36:53.064]             length <- base::length
[13:36:53.064]             list <- base::list
[13:36:53.064]             seq.int <- base::seq.int
[13:36:53.064]             signalCondition <- base::signalCondition
[13:36:53.064]             sys.calls <- base::sys.calls
[13:36:53.064]             `[[` <- base::`[[`
[13:36:53.064]             `+` <- base::`+`
[13:36:53.064]             `<<-` <- base::`<<-`
[13:36:53.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.064]                   3L)]
[13:36:53.064]             }
[13:36:53.064]             function(cond) {
[13:36:53.064]                 is_error <- inherits(cond, "error")
[13:36:53.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.064]                   NULL)
[13:36:53.064]                 if (is_error) {
[13:36:53.064]                   sessionInformation <- function() {
[13:36:53.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.064]                       search = base::search(), system = base::Sys.info())
[13:36:53.064]                   }
[13:36:53.064]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.064]                     cond$call), session = sessionInformation(), 
[13:36:53.064]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.064]                   signalCondition(cond)
[13:36:53.064]                 }
[13:36:53.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.064]                 "immediateCondition"))) {
[13:36:53.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.064]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.064]                   if (TRUE && !signal) {
[13:36:53.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.064]                     {
[13:36:53.064]                       inherits <- base::inherits
[13:36:53.064]                       invokeRestart <- base::invokeRestart
[13:36:53.064]                       is.null <- base::is.null
[13:36:53.064]                       muffled <- FALSE
[13:36:53.064]                       if (inherits(cond, "message")) {
[13:36:53.064]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.064]                         if (muffled) 
[13:36:53.064]                           invokeRestart("muffleMessage")
[13:36:53.064]                       }
[13:36:53.064]                       else if (inherits(cond, "warning")) {
[13:36:53.064]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.064]                         if (muffled) 
[13:36:53.064]                           invokeRestart("muffleWarning")
[13:36:53.064]                       }
[13:36:53.064]                       else if (inherits(cond, "condition")) {
[13:36:53.064]                         if (!is.null(pattern)) {
[13:36:53.064]                           computeRestarts <- base::computeRestarts
[13:36:53.064]                           grepl <- base::grepl
[13:36:53.064]                           restarts <- computeRestarts(cond)
[13:36:53.064]                           for (restart in restarts) {
[13:36:53.064]                             name <- restart$name
[13:36:53.064]                             if (is.null(name)) 
[13:36:53.064]                               next
[13:36:53.064]                             if (!grepl(pattern, name)) 
[13:36:53.064]                               next
[13:36:53.064]                             invokeRestart(restart)
[13:36:53.064]                             muffled <- TRUE
[13:36:53.064]                             break
[13:36:53.064]                           }
[13:36:53.064]                         }
[13:36:53.064]                       }
[13:36:53.064]                       invisible(muffled)
[13:36:53.064]                     }
[13:36:53.064]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.064]                   }
[13:36:53.064]                 }
[13:36:53.064]                 else {
[13:36:53.064]                   if (TRUE) {
[13:36:53.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.064]                     {
[13:36:53.064]                       inherits <- base::inherits
[13:36:53.064]                       invokeRestart <- base::invokeRestart
[13:36:53.064]                       is.null <- base::is.null
[13:36:53.064]                       muffled <- FALSE
[13:36:53.064]                       if (inherits(cond, "message")) {
[13:36:53.064]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.064]                         if (muffled) 
[13:36:53.064]                           invokeRestart("muffleMessage")
[13:36:53.064]                       }
[13:36:53.064]                       else if (inherits(cond, "warning")) {
[13:36:53.064]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.064]                         if (muffled) 
[13:36:53.064]                           invokeRestart("muffleWarning")
[13:36:53.064]                       }
[13:36:53.064]                       else if (inherits(cond, "condition")) {
[13:36:53.064]                         if (!is.null(pattern)) {
[13:36:53.064]                           computeRestarts <- base::computeRestarts
[13:36:53.064]                           grepl <- base::grepl
[13:36:53.064]                           restarts <- computeRestarts(cond)
[13:36:53.064]                           for (restart in restarts) {
[13:36:53.064]                             name <- restart$name
[13:36:53.064]                             if (is.null(name)) 
[13:36:53.064]                               next
[13:36:53.064]                             if (!grepl(pattern, name)) 
[13:36:53.064]                               next
[13:36:53.064]                             invokeRestart(restart)
[13:36:53.064]                             muffled <- TRUE
[13:36:53.064]                             break
[13:36:53.064]                           }
[13:36:53.064]                         }
[13:36:53.064]                       }
[13:36:53.064]                       invisible(muffled)
[13:36:53.064]                     }
[13:36:53.064]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.064]                   }
[13:36:53.064]                 }
[13:36:53.064]             }
[13:36:53.064]         }))
[13:36:53.064]     }, error = function(ex) {
[13:36:53.064]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.064]                 ...future.rng), started = ...future.startTime, 
[13:36:53.064]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.064]             version = "1.8"), class = "FutureResult")
[13:36:53.064]     }, finally = {
[13:36:53.064]         if (!identical(...future.workdir, getwd())) 
[13:36:53.064]             setwd(...future.workdir)
[13:36:53.064]         {
[13:36:53.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.064]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.064]             }
[13:36:53.064]             base::options(...future.oldOptions)
[13:36:53.064]             if (.Platform$OS.type == "windows") {
[13:36:53.064]                 old_names <- names(...future.oldEnvVars)
[13:36:53.064]                 envs <- base::Sys.getenv()
[13:36:53.064]                 names <- names(envs)
[13:36:53.064]                 common <- intersect(names, old_names)
[13:36:53.064]                 added <- setdiff(names, old_names)
[13:36:53.064]                 removed <- setdiff(old_names, names)
[13:36:53.064]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.064]                   envs[common]]
[13:36:53.064]                 NAMES <- toupper(changed)
[13:36:53.064]                 args <- list()
[13:36:53.064]                 for (kk in seq_along(NAMES)) {
[13:36:53.064]                   name <- changed[[kk]]
[13:36:53.064]                   NAME <- NAMES[[kk]]
[13:36:53.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.064]                     next
[13:36:53.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.064]                 }
[13:36:53.064]                 NAMES <- toupper(added)
[13:36:53.064]                 for (kk in seq_along(NAMES)) {
[13:36:53.064]                   name <- added[[kk]]
[13:36:53.064]                   NAME <- NAMES[[kk]]
[13:36:53.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.064]                     next
[13:36:53.064]                   args[[name]] <- ""
[13:36:53.064]                 }
[13:36:53.064]                 NAMES <- toupper(removed)
[13:36:53.064]                 for (kk in seq_along(NAMES)) {
[13:36:53.064]                   name <- removed[[kk]]
[13:36:53.064]                   NAME <- NAMES[[kk]]
[13:36:53.064]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.064]                     next
[13:36:53.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.064]                 }
[13:36:53.064]                 if (length(args) > 0) 
[13:36:53.064]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.064]             }
[13:36:53.064]             else {
[13:36:53.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.064]             }
[13:36:53.064]             {
[13:36:53.064]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.064]                   0L) {
[13:36:53.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.064]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.064]                   base::options(opts)
[13:36:53.064]                 }
[13:36:53.064]                 {
[13:36:53.064]                   {
[13:36:53.064]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.064]                     NULL
[13:36:53.064]                   }
[13:36:53.064]                   options(future.plan = NULL)
[13:36:53.064]                   if (is.na(NA_character_)) 
[13:36:53.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.064]                     .init = FALSE)
[13:36:53.064]                 }
[13:36:53.064]             }
[13:36:53.064]         }
[13:36:53.064]     })
[13:36:53.064]     if (TRUE) {
[13:36:53.064]         base::sink(type = "output", split = FALSE)
[13:36:53.064]         if (TRUE) {
[13:36:53.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.064]         }
[13:36:53.064]         else {
[13:36:53.064]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.064]         }
[13:36:53.064]         base::close(...future.stdout)
[13:36:53.064]         ...future.stdout <- NULL
[13:36:53.064]     }
[13:36:53.064]     ...future.result$conditions <- ...future.conditions
[13:36:53.064]     ...future.result$finished <- base::Sys.time()
[13:36:53.064]     ...future.result
[13:36:53.064] }
[13:36:53.066] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.066] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.067] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.067] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.067] MultisessionFuture started
[13:36:53.068] - Launch lazy future ... done
[13:36:53.068] run() for ‘MultisessionFuture’ ... done
[13:36:53.068] result() for ClusterFuture ...
[13:36:53.068] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.068] - Validating connection of MultisessionFuture
[13:36:53.069] - received message: FutureResult
[13:36:53.069] - Received FutureResult
[13:36:53.069] - Erased future from FutureRegistry
[13:36:53.070] result() for ClusterFuture ...
[13:36:53.070] - result already collected: FutureResult
[13:36:53.070] result() for ClusterFuture ... done
[13:36:53.070] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.070] result() for ClusterFuture ... done
[13:36:53.070] result() for ClusterFuture ...
[13:36:53.070] - result already collected: FutureResult
[13:36:53.070] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.070] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.071] Searching for globals...
[13:36:53.072] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.073] Searching for globals ... DONE
[13:36:53.073] Resolving globals: TRUE
[13:36:53.073] Resolving any globals that are futures ...
[13:36:53.073] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.073] Resolving any globals that are futures ... DONE
[13:36:53.073] Resolving futures part of globals (recursively) ...
[13:36:53.074] resolve() on list ...
[13:36:53.074]  recursive: 99
[13:36:53.074]  length: 1
[13:36:53.074]  elements: ‘x’
[13:36:53.074]  length: 0 (resolved future 1)
[13:36:53.074] resolve() on list ... DONE
[13:36:53.074] - globals: [1] ‘x’
[13:36:53.074] Resolving futures part of globals (recursively) ... DONE
[13:36:53.074] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:53.075] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:53.075] - globals: [1] ‘x’
[13:36:53.075] 
[13:36:53.075] getGlobalsAndPackages() ... DONE
[13:36:53.075] run() for ‘Future’ ...
[13:36:53.075] - state: ‘created’
[13:36:53.075] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.089] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.089] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.089]   - Field: ‘node’
[13:36:53.089]   - Field: ‘label’
[13:36:53.089]   - Field: ‘local’
[13:36:53.089]   - Field: ‘owner’
[13:36:53.089]   - Field: ‘envir’
[13:36:53.090]   - Field: ‘workers’
[13:36:53.090]   - Field: ‘packages’
[13:36:53.090]   - Field: ‘gc’
[13:36:53.090]   - Field: ‘conditions’
[13:36:53.090]   - Field: ‘persistent’
[13:36:53.090]   - Field: ‘expr’
[13:36:53.090]   - Field: ‘uuid’
[13:36:53.090]   - Field: ‘seed’
[13:36:53.090]   - Field: ‘version’
[13:36:53.090]   - Field: ‘result’
[13:36:53.090]   - Field: ‘asynchronous’
[13:36:53.091]   - Field: ‘calls’
[13:36:53.091]   - Field: ‘globals’
[13:36:53.091]   - Field: ‘stdout’
[13:36:53.091]   - Field: ‘earlySignal’
[13:36:53.091]   - Field: ‘lazy’
[13:36:53.091]   - Field: ‘state’
[13:36:53.091] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.091] - Launch lazy future ...
[13:36:53.091] Packages needed by the future expression (n = 0): <none>
[13:36:53.092] Packages needed by future strategies (n = 0): <none>
[13:36:53.092] {
[13:36:53.092]     {
[13:36:53.092]         {
[13:36:53.092]             ...future.startTime <- base::Sys.time()
[13:36:53.092]             {
[13:36:53.092]                 {
[13:36:53.092]                   {
[13:36:53.092]                     {
[13:36:53.092]                       base::local({
[13:36:53.092]                         has_future <- base::requireNamespace("future", 
[13:36:53.092]                           quietly = TRUE)
[13:36:53.092]                         if (has_future) {
[13:36:53.092]                           ns <- base::getNamespace("future")
[13:36:53.092]                           version <- ns[[".package"]][["version"]]
[13:36:53.092]                           if (is.null(version)) 
[13:36:53.092]                             version <- utils::packageVersion("future")
[13:36:53.092]                         }
[13:36:53.092]                         else {
[13:36:53.092]                           version <- NULL
[13:36:53.092]                         }
[13:36:53.092]                         if (!has_future || version < "1.8.0") {
[13:36:53.092]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.092]                             "", base::R.version$version.string), 
[13:36:53.092]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.092]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.092]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.092]                               "release", "version")], collapse = " "), 
[13:36:53.092]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.092]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.092]                             info)
[13:36:53.092]                           info <- base::paste(info, collapse = "; ")
[13:36:53.092]                           if (!has_future) {
[13:36:53.092]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.092]                               info)
[13:36:53.092]                           }
[13:36:53.092]                           else {
[13:36:53.092]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.092]                               info, version)
[13:36:53.092]                           }
[13:36:53.092]                           base::stop(msg)
[13:36:53.092]                         }
[13:36:53.092]                       })
[13:36:53.092]                     }
[13:36:53.092]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.092]                     base::options(mc.cores = 1L)
[13:36:53.092]                   }
[13:36:53.092]                   ...future.strategy.old <- future::plan("list")
[13:36:53.092]                   options(future.plan = NULL)
[13:36:53.092]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.092]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.092]                 }
[13:36:53.092]                 ...future.workdir <- getwd()
[13:36:53.092]             }
[13:36:53.092]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.092]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.092]         }
[13:36:53.092]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.092]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.092]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.092]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.092]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.092]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.092]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.092]             base::names(...future.oldOptions))
[13:36:53.092]     }
[13:36:53.092]     if (FALSE) {
[13:36:53.092]     }
[13:36:53.092]     else {
[13:36:53.092]         if (TRUE) {
[13:36:53.092]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.092]                 open = "w")
[13:36:53.092]         }
[13:36:53.092]         else {
[13:36:53.092]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.092]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.092]         }
[13:36:53.092]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.092]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.092]             base::sink(type = "output", split = FALSE)
[13:36:53.092]             base::close(...future.stdout)
[13:36:53.092]         }, add = TRUE)
[13:36:53.092]     }
[13:36:53.092]     ...future.frame <- base::sys.nframe()
[13:36:53.092]     ...future.conditions <- base::list()
[13:36:53.092]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.092]     if (FALSE) {
[13:36:53.092]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.092]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.092]     }
[13:36:53.092]     ...future.result <- base::tryCatch({
[13:36:53.092]         base::withCallingHandlers({
[13:36:53.092]             ...future.value <- base::withVisible(base::local({
[13:36:53.092]                 ...future.makeSendCondition <- base::local({
[13:36:53.092]                   sendCondition <- NULL
[13:36:53.092]                   function(frame = 1L) {
[13:36:53.092]                     if (is.function(sendCondition)) 
[13:36:53.092]                       return(sendCondition)
[13:36:53.092]                     ns <- getNamespace("parallel")
[13:36:53.092]                     if (exists("sendData", mode = "function", 
[13:36:53.092]                       envir = ns)) {
[13:36:53.092]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.092]                         envir = ns)
[13:36:53.092]                       envir <- sys.frame(frame)
[13:36:53.092]                       master <- NULL
[13:36:53.092]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.092]                         !identical(envir, emptyenv())) {
[13:36:53.092]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.092]                           inherits = FALSE)) {
[13:36:53.092]                           master <- get("master", mode = "list", 
[13:36:53.092]                             envir = envir, inherits = FALSE)
[13:36:53.092]                           if (inherits(master, c("SOCKnode", 
[13:36:53.092]                             "SOCK0node"))) {
[13:36:53.092]                             sendCondition <<- function(cond) {
[13:36:53.092]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.092]                                 success = TRUE)
[13:36:53.092]                               parallel_sendData(master, data)
[13:36:53.092]                             }
[13:36:53.092]                             return(sendCondition)
[13:36:53.092]                           }
[13:36:53.092]                         }
[13:36:53.092]                         frame <- frame + 1L
[13:36:53.092]                         envir <- sys.frame(frame)
[13:36:53.092]                       }
[13:36:53.092]                     }
[13:36:53.092]                     sendCondition <<- function(cond) NULL
[13:36:53.092]                   }
[13:36:53.092]                 })
[13:36:53.092]                 withCallingHandlers({
[13:36:53.092]                   {
[13:36:53.092]                     x["a"] <- list(1)
[13:36:53.092]                     x
[13:36:53.092]                   }
[13:36:53.092]                 }, immediateCondition = function(cond) {
[13:36:53.092]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.092]                   sendCondition(cond)
[13:36:53.092]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.092]                   {
[13:36:53.092]                     inherits <- base::inherits
[13:36:53.092]                     invokeRestart <- base::invokeRestart
[13:36:53.092]                     is.null <- base::is.null
[13:36:53.092]                     muffled <- FALSE
[13:36:53.092]                     if (inherits(cond, "message")) {
[13:36:53.092]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.092]                       if (muffled) 
[13:36:53.092]                         invokeRestart("muffleMessage")
[13:36:53.092]                     }
[13:36:53.092]                     else if (inherits(cond, "warning")) {
[13:36:53.092]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.092]                       if (muffled) 
[13:36:53.092]                         invokeRestart("muffleWarning")
[13:36:53.092]                     }
[13:36:53.092]                     else if (inherits(cond, "condition")) {
[13:36:53.092]                       if (!is.null(pattern)) {
[13:36:53.092]                         computeRestarts <- base::computeRestarts
[13:36:53.092]                         grepl <- base::grepl
[13:36:53.092]                         restarts <- computeRestarts(cond)
[13:36:53.092]                         for (restart in restarts) {
[13:36:53.092]                           name <- restart$name
[13:36:53.092]                           if (is.null(name)) 
[13:36:53.092]                             next
[13:36:53.092]                           if (!grepl(pattern, name)) 
[13:36:53.092]                             next
[13:36:53.092]                           invokeRestart(restart)
[13:36:53.092]                           muffled <- TRUE
[13:36:53.092]                           break
[13:36:53.092]                         }
[13:36:53.092]                       }
[13:36:53.092]                     }
[13:36:53.092]                     invisible(muffled)
[13:36:53.092]                   }
[13:36:53.092]                   muffleCondition(cond)
[13:36:53.092]                 })
[13:36:53.092]             }))
[13:36:53.092]             future::FutureResult(value = ...future.value$value, 
[13:36:53.092]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.092]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.092]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.092]                     ...future.globalenv.names))
[13:36:53.092]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.092]         }, condition = base::local({
[13:36:53.092]             c <- base::c
[13:36:53.092]             inherits <- base::inherits
[13:36:53.092]             invokeRestart <- base::invokeRestart
[13:36:53.092]             length <- base::length
[13:36:53.092]             list <- base::list
[13:36:53.092]             seq.int <- base::seq.int
[13:36:53.092]             signalCondition <- base::signalCondition
[13:36:53.092]             sys.calls <- base::sys.calls
[13:36:53.092]             `[[` <- base::`[[`
[13:36:53.092]             `+` <- base::`+`
[13:36:53.092]             `<<-` <- base::`<<-`
[13:36:53.092]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.092]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.092]                   3L)]
[13:36:53.092]             }
[13:36:53.092]             function(cond) {
[13:36:53.092]                 is_error <- inherits(cond, "error")
[13:36:53.092]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.092]                   NULL)
[13:36:53.092]                 if (is_error) {
[13:36:53.092]                   sessionInformation <- function() {
[13:36:53.092]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.092]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.092]                       search = base::search(), system = base::Sys.info())
[13:36:53.092]                   }
[13:36:53.092]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.092]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.092]                     cond$call), session = sessionInformation(), 
[13:36:53.092]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.092]                   signalCondition(cond)
[13:36:53.092]                 }
[13:36:53.092]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.092]                 "immediateCondition"))) {
[13:36:53.092]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.092]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.092]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.092]                   if (TRUE && !signal) {
[13:36:53.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.092]                     {
[13:36:53.092]                       inherits <- base::inherits
[13:36:53.092]                       invokeRestart <- base::invokeRestart
[13:36:53.092]                       is.null <- base::is.null
[13:36:53.092]                       muffled <- FALSE
[13:36:53.092]                       if (inherits(cond, "message")) {
[13:36:53.092]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.092]                         if (muffled) 
[13:36:53.092]                           invokeRestart("muffleMessage")
[13:36:53.092]                       }
[13:36:53.092]                       else if (inherits(cond, "warning")) {
[13:36:53.092]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.092]                         if (muffled) 
[13:36:53.092]                           invokeRestart("muffleWarning")
[13:36:53.092]                       }
[13:36:53.092]                       else if (inherits(cond, "condition")) {
[13:36:53.092]                         if (!is.null(pattern)) {
[13:36:53.092]                           computeRestarts <- base::computeRestarts
[13:36:53.092]                           grepl <- base::grepl
[13:36:53.092]                           restarts <- computeRestarts(cond)
[13:36:53.092]                           for (restart in restarts) {
[13:36:53.092]                             name <- restart$name
[13:36:53.092]                             if (is.null(name)) 
[13:36:53.092]                               next
[13:36:53.092]                             if (!grepl(pattern, name)) 
[13:36:53.092]                               next
[13:36:53.092]                             invokeRestart(restart)
[13:36:53.092]                             muffled <- TRUE
[13:36:53.092]                             break
[13:36:53.092]                           }
[13:36:53.092]                         }
[13:36:53.092]                       }
[13:36:53.092]                       invisible(muffled)
[13:36:53.092]                     }
[13:36:53.092]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.092]                   }
[13:36:53.092]                 }
[13:36:53.092]                 else {
[13:36:53.092]                   if (TRUE) {
[13:36:53.092]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.092]                     {
[13:36:53.092]                       inherits <- base::inherits
[13:36:53.092]                       invokeRestart <- base::invokeRestart
[13:36:53.092]                       is.null <- base::is.null
[13:36:53.092]                       muffled <- FALSE
[13:36:53.092]                       if (inherits(cond, "message")) {
[13:36:53.092]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.092]                         if (muffled) 
[13:36:53.092]                           invokeRestart("muffleMessage")
[13:36:53.092]                       }
[13:36:53.092]                       else if (inherits(cond, "warning")) {
[13:36:53.092]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.092]                         if (muffled) 
[13:36:53.092]                           invokeRestart("muffleWarning")
[13:36:53.092]                       }
[13:36:53.092]                       else if (inherits(cond, "condition")) {
[13:36:53.092]                         if (!is.null(pattern)) {
[13:36:53.092]                           computeRestarts <- base::computeRestarts
[13:36:53.092]                           grepl <- base::grepl
[13:36:53.092]                           restarts <- computeRestarts(cond)
[13:36:53.092]                           for (restart in restarts) {
[13:36:53.092]                             name <- restart$name
[13:36:53.092]                             if (is.null(name)) 
[13:36:53.092]                               next
[13:36:53.092]                             if (!grepl(pattern, name)) 
[13:36:53.092]                               next
[13:36:53.092]                             invokeRestart(restart)
[13:36:53.092]                             muffled <- TRUE
[13:36:53.092]                             break
[13:36:53.092]                           }
[13:36:53.092]                         }
[13:36:53.092]                       }
[13:36:53.092]                       invisible(muffled)
[13:36:53.092]                     }
[13:36:53.092]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.092]                   }
[13:36:53.092]                 }
[13:36:53.092]             }
[13:36:53.092]         }))
[13:36:53.092]     }, error = function(ex) {
[13:36:53.092]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.092]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.092]                 ...future.rng), started = ...future.startTime, 
[13:36:53.092]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.092]             version = "1.8"), class = "FutureResult")
[13:36:53.092]     }, finally = {
[13:36:53.092]         if (!identical(...future.workdir, getwd())) 
[13:36:53.092]             setwd(...future.workdir)
[13:36:53.092]         {
[13:36:53.092]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.092]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.092]             }
[13:36:53.092]             base::options(...future.oldOptions)
[13:36:53.092]             if (.Platform$OS.type == "windows") {
[13:36:53.092]                 old_names <- names(...future.oldEnvVars)
[13:36:53.092]                 envs <- base::Sys.getenv()
[13:36:53.092]                 names <- names(envs)
[13:36:53.092]                 common <- intersect(names, old_names)
[13:36:53.092]                 added <- setdiff(names, old_names)
[13:36:53.092]                 removed <- setdiff(old_names, names)
[13:36:53.092]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.092]                   envs[common]]
[13:36:53.092]                 NAMES <- toupper(changed)
[13:36:53.092]                 args <- list()
[13:36:53.092]                 for (kk in seq_along(NAMES)) {
[13:36:53.092]                   name <- changed[[kk]]
[13:36:53.092]                   NAME <- NAMES[[kk]]
[13:36:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.092]                     next
[13:36:53.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.092]                 }
[13:36:53.092]                 NAMES <- toupper(added)
[13:36:53.092]                 for (kk in seq_along(NAMES)) {
[13:36:53.092]                   name <- added[[kk]]
[13:36:53.092]                   NAME <- NAMES[[kk]]
[13:36:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.092]                     next
[13:36:53.092]                   args[[name]] <- ""
[13:36:53.092]                 }
[13:36:53.092]                 NAMES <- toupper(removed)
[13:36:53.092]                 for (kk in seq_along(NAMES)) {
[13:36:53.092]                   name <- removed[[kk]]
[13:36:53.092]                   NAME <- NAMES[[kk]]
[13:36:53.092]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.092]                     next
[13:36:53.092]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.092]                 }
[13:36:53.092]                 if (length(args) > 0) 
[13:36:53.092]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.092]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.092]             }
[13:36:53.092]             else {
[13:36:53.092]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.092]             }
[13:36:53.092]             {
[13:36:53.092]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.092]                   0L) {
[13:36:53.092]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.092]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.092]                   base::options(opts)
[13:36:53.092]                 }
[13:36:53.092]                 {
[13:36:53.092]                   {
[13:36:53.092]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.092]                     NULL
[13:36:53.092]                   }
[13:36:53.092]                   options(future.plan = NULL)
[13:36:53.092]                   if (is.na(NA_character_)) 
[13:36:53.092]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.092]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.092]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.092]                     .init = FALSE)
[13:36:53.092]                 }
[13:36:53.092]             }
[13:36:53.092]         }
[13:36:53.092]     })
[13:36:53.092]     if (TRUE) {
[13:36:53.092]         base::sink(type = "output", split = FALSE)
[13:36:53.092]         if (TRUE) {
[13:36:53.092]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.092]         }
[13:36:53.092]         else {
[13:36:53.092]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.092]         }
[13:36:53.092]         base::close(...future.stdout)
[13:36:53.092]         ...future.stdout <- NULL
[13:36:53.092]     }
[13:36:53.092]     ...future.result$conditions <- ...future.conditions
[13:36:53.092]     ...future.result$finished <- base::Sys.time()
[13:36:53.092]     ...future.result
[13:36:53.092] }
[13:36:53.094] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.095] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.095] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.095] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.096] MultisessionFuture started
[13:36:53.096] - Launch lazy future ... done
[13:36:53.096] run() for ‘MultisessionFuture’ ... done
[13:36:53.096] result() for ClusterFuture ...
[13:36:53.096] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.096] - Validating connection of MultisessionFuture
[13:36:53.097] - received message: FutureResult
[13:36:53.097] - Received FutureResult
[13:36:53.098] - Erased future from FutureRegistry
[13:36:53.098] result() for ClusterFuture ...
[13:36:53.098] - result already collected: FutureResult
[13:36:53.098] result() for ClusterFuture ... done
[13:36:53.098] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.098] result() for ClusterFuture ... done
[13:36:53.098] result() for ClusterFuture ...
[13:36:53.098] - result already collected: FutureResult
[13:36:53.098] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.099] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.099] Searching for globals...
[13:36:53.101] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.101] Searching for globals ... DONE
[13:36:53.101] Resolving globals: TRUE
[13:36:53.101] Resolving any globals that are futures ...
[13:36:53.101] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.101] Resolving any globals that are futures ... DONE
[13:36:53.102] Resolving futures part of globals (recursively) ...
[13:36:53.102] resolve() on list ...
[13:36:53.102]  recursive: 99
[13:36:53.102]  length: 1
[13:36:53.102]  elements: ‘x’
[13:36:53.102]  length: 0 (resolved future 1)
[13:36:53.102] resolve() on list ... DONE
[13:36:53.102] - globals: [1] ‘x’
[13:36:53.103] Resolving futures part of globals (recursively) ... DONE
[13:36:53.103] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:53.103] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:53.103] - globals: [1] ‘x’
[13:36:53.103] 
[13:36:53.103] getGlobalsAndPackages() ... DONE
[13:36:53.104] run() for ‘Future’ ...
[13:36:53.104] - state: ‘created’
[13:36:53.104] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.117] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.117] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.117]   - Field: ‘node’
[13:36:53.117]   - Field: ‘label’
[13:36:53.117]   - Field: ‘local’
[13:36:53.118]   - Field: ‘owner’
[13:36:53.118]   - Field: ‘envir’
[13:36:53.118]   - Field: ‘workers’
[13:36:53.118]   - Field: ‘packages’
[13:36:53.118]   - Field: ‘gc’
[13:36:53.118]   - Field: ‘conditions’
[13:36:53.118]   - Field: ‘persistent’
[13:36:53.118]   - Field: ‘expr’
[13:36:53.118]   - Field: ‘uuid’
[13:36:53.118]   - Field: ‘seed’
[13:36:53.119]   - Field: ‘version’
[13:36:53.119]   - Field: ‘result’
[13:36:53.119]   - Field: ‘asynchronous’
[13:36:53.119]   - Field: ‘calls’
[13:36:53.119]   - Field: ‘globals’
[13:36:53.119]   - Field: ‘stdout’
[13:36:53.119]   - Field: ‘earlySignal’
[13:36:53.119]   - Field: ‘lazy’
[13:36:53.119]   - Field: ‘state’
[13:36:53.119] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.119] - Launch lazy future ...
[13:36:53.120] Packages needed by the future expression (n = 0): <none>
[13:36:53.120] Packages needed by future strategies (n = 0): <none>
[13:36:53.120] {
[13:36:53.120]     {
[13:36:53.120]         {
[13:36:53.120]             ...future.startTime <- base::Sys.time()
[13:36:53.120]             {
[13:36:53.120]                 {
[13:36:53.120]                   {
[13:36:53.120]                     {
[13:36:53.120]                       base::local({
[13:36:53.120]                         has_future <- base::requireNamespace("future", 
[13:36:53.120]                           quietly = TRUE)
[13:36:53.120]                         if (has_future) {
[13:36:53.120]                           ns <- base::getNamespace("future")
[13:36:53.120]                           version <- ns[[".package"]][["version"]]
[13:36:53.120]                           if (is.null(version)) 
[13:36:53.120]                             version <- utils::packageVersion("future")
[13:36:53.120]                         }
[13:36:53.120]                         else {
[13:36:53.120]                           version <- NULL
[13:36:53.120]                         }
[13:36:53.120]                         if (!has_future || version < "1.8.0") {
[13:36:53.120]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.120]                             "", base::R.version$version.string), 
[13:36:53.120]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.120]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.120]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.120]                               "release", "version")], collapse = " "), 
[13:36:53.120]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.120]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.120]                             info)
[13:36:53.120]                           info <- base::paste(info, collapse = "; ")
[13:36:53.120]                           if (!has_future) {
[13:36:53.120]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.120]                               info)
[13:36:53.120]                           }
[13:36:53.120]                           else {
[13:36:53.120]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.120]                               info, version)
[13:36:53.120]                           }
[13:36:53.120]                           base::stop(msg)
[13:36:53.120]                         }
[13:36:53.120]                       })
[13:36:53.120]                     }
[13:36:53.120]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.120]                     base::options(mc.cores = 1L)
[13:36:53.120]                   }
[13:36:53.120]                   ...future.strategy.old <- future::plan("list")
[13:36:53.120]                   options(future.plan = NULL)
[13:36:53.120]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.120]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.120]                 }
[13:36:53.120]                 ...future.workdir <- getwd()
[13:36:53.120]             }
[13:36:53.120]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.120]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.120]         }
[13:36:53.120]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.120]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.120]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.120]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.120]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.120]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.120]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.120]             base::names(...future.oldOptions))
[13:36:53.120]     }
[13:36:53.120]     if (FALSE) {
[13:36:53.120]     }
[13:36:53.120]     else {
[13:36:53.120]         if (TRUE) {
[13:36:53.120]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.120]                 open = "w")
[13:36:53.120]         }
[13:36:53.120]         else {
[13:36:53.120]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.120]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.120]         }
[13:36:53.120]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.120]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.120]             base::sink(type = "output", split = FALSE)
[13:36:53.120]             base::close(...future.stdout)
[13:36:53.120]         }, add = TRUE)
[13:36:53.120]     }
[13:36:53.120]     ...future.frame <- base::sys.nframe()
[13:36:53.120]     ...future.conditions <- base::list()
[13:36:53.120]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.120]     if (FALSE) {
[13:36:53.120]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.120]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.120]     }
[13:36:53.120]     ...future.result <- base::tryCatch({
[13:36:53.120]         base::withCallingHandlers({
[13:36:53.120]             ...future.value <- base::withVisible(base::local({
[13:36:53.120]                 ...future.makeSendCondition <- base::local({
[13:36:53.120]                   sendCondition <- NULL
[13:36:53.120]                   function(frame = 1L) {
[13:36:53.120]                     if (is.function(sendCondition)) 
[13:36:53.120]                       return(sendCondition)
[13:36:53.120]                     ns <- getNamespace("parallel")
[13:36:53.120]                     if (exists("sendData", mode = "function", 
[13:36:53.120]                       envir = ns)) {
[13:36:53.120]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.120]                         envir = ns)
[13:36:53.120]                       envir <- sys.frame(frame)
[13:36:53.120]                       master <- NULL
[13:36:53.120]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.120]                         !identical(envir, emptyenv())) {
[13:36:53.120]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.120]                           inherits = FALSE)) {
[13:36:53.120]                           master <- get("master", mode = "list", 
[13:36:53.120]                             envir = envir, inherits = FALSE)
[13:36:53.120]                           if (inherits(master, c("SOCKnode", 
[13:36:53.120]                             "SOCK0node"))) {
[13:36:53.120]                             sendCondition <<- function(cond) {
[13:36:53.120]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.120]                                 success = TRUE)
[13:36:53.120]                               parallel_sendData(master, data)
[13:36:53.120]                             }
[13:36:53.120]                             return(sendCondition)
[13:36:53.120]                           }
[13:36:53.120]                         }
[13:36:53.120]                         frame <- frame + 1L
[13:36:53.120]                         envir <- sys.frame(frame)
[13:36:53.120]                       }
[13:36:53.120]                     }
[13:36:53.120]                     sendCondition <<- function(cond) NULL
[13:36:53.120]                   }
[13:36:53.120]                 })
[13:36:53.120]                 withCallingHandlers({
[13:36:53.120]                   {
[13:36:53.120]                     x["a"] <- list(1)
[13:36:53.120]                     x
[13:36:53.120]                   }
[13:36:53.120]                 }, immediateCondition = function(cond) {
[13:36:53.120]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.120]                   sendCondition(cond)
[13:36:53.120]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.120]                   {
[13:36:53.120]                     inherits <- base::inherits
[13:36:53.120]                     invokeRestart <- base::invokeRestart
[13:36:53.120]                     is.null <- base::is.null
[13:36:53.120]                     muffled <- FALSE
[13:36:53.120]                     if (inherits(cond, "message")) {
[13:36:53.120]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.120]                       if (muffled) 
[13:36:53.120]                         invokeRestart("muffleMessage")
[13:36:53.120]                     }
[13:36:53.120]                     else if (inherits(cond, "warning")) {
[13:36:53.120]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.120]                       if (muffled) 
[13:36:53.120]                         invokeRestart("muffleWarning")
[13:36:53.120]                     }
[13:36:53.120]                     else if (inherits(cond, "condition")) {
[13:36:53.120]                       if (!is.null(pattern)) {
[13:36:53.120]                         computeRestarts <- base::computeRestarts
[13:36:53.120]                         grepl <- base::grepl
[13:36:53.120]                         restarts <- computeRestarts(cond)
[13:36:53.120]                         for (restart in restarts) {
[13:36:53.120]                           name <- restart$name
[13:36:53.120]                           if (is.null(name)) 
[13:36:53.120]                             next
[13:36:53.120]                           if (!grepl(pattern, name)) 
[13:36:53.120]                             next
[13:36:53.120]                           invokeRestart(restart)
[13:36:53.120]                           muffled <- TRUE
[13:36:53.120]                           break
[13:36:53.120]                         }
[13:36:53.120]                       }
[13:36:53.120]                     }
[13:36:53.120]                     invisible(muffled)
[13:36:53.120]                   }
[13:36:53.120]                   muffleCondition(cond)
[13:36:53.120]                 })
[13:36:53.120]             }))
[13:36:53.120]             future::FutureResult(value = ...future.value$value, 
[13:36:53.120]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.120]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.120]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.120]                     ...future.globalenv.names))
[13:36:53.120]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.120]         }, condition = base::local({
[13:36:53.120]             c <- base::c
[13:36:53.120]             inherits <- base::inherits
[13:36:53.120]             invokeRestart <- base::invokeRestart
[13:36:53.120]             length <- base::length
[13:36:53.120]             list <- base::list
[13:36:53.120]             seq.int <- base::seq.int
[13:36:53.120]             signalCondition <- base::signalCondition
[13:36:53.120]             sys.calls <- base::sys.calls
[13:36:53.120]             `[[` <- base::`[[`
[13:36:53.120]             `+` <- base::`+`
[13:36:53.120]             `<<-` <- base::`<<-`
[13:36:53.120]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.120]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.120]                   3L)]
[13:36:53.120]             }
[13:36:53.120]             function(cond) {
[13:36:53.120]                 is_error <- inherits(cond, "error")
[13:36:53.120]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.120]                   NULL)
[13:36:53.120]                 if (is_error) {
[13:36:53.120]                   sessionInformation <- function() {
[13:36:53.120]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.120]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.120]                       search = base::search(), system = base::Sys.info())
[13:36:53.120]                   }
[13:36:53.120]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.120]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.120]                     cond$call), session = sessionInformation(), 
[13:36:53.120]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.120]                   signalCondition(cond)
[13:36:53.120]                 }
[13:36:53.120]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.120]                 "immediateCondition"))) {
[13:36:53.120]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.120]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.120]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.120]                   if (TRUE && !signal) {
[13:36:53.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.120]                     {
[13:36:53.120]                       inherits <- base::inherits
[13:36:53.120]                       invokeRestart <- base::invokeRestart
[13:36:53.120]                       is.null <- base::is.null
[13:36:53.120]                       muffled <- FALSE
[13:36:53.120]                       if (inherits(cond, "message")) {
[13:36:53.120]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.120]                         if (muffled) 
[13:36:53.120]                           invokeRestart("muffleMessage")
[13:36:53.120]                       }
[13:36:53.120]                       else if (inherits(cond, "warning")) {
[13:36:53.120]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.120]                         if (muffled) 
[13:36:53.120]                           invokeRestart("muffleWarning")
[13:36:53.120]                       }
[13:36:53.120]                       else if (inherits(cond, "condition")) {
[13:36:53.120]                         if (!is.null(pattern)) {
[13:36:53.120]                           computeRestarts <- base::computeRestarts
[13:36:53.120]                           grepl <- base::grepl
[13:36:53.120]                           restarts <- computeRestarts(cond)
[13:36:53.120]                           for (restart in restarts) {
[13:36:53.120]                             name <- restart$name
[13:36:53.120]                             if (is.null(name)) 
[13:36:53.120]                               next
[13:36:53.120]                             if (!grepl(pattern, name)) 
[13:36:53.120]                               next
[13:36:53.120]                             invokeRestart(restart)
[13:36:53.120]                             muffled <- TRUE
[13:36:53.120]                             break
[13:36:53.120]                           }
[13:36:53.120]                         }
[13:36:53.120]                       }
[13:36:53.120]                       invisible(muffled)
[13:36:53.120]                     }
[13:36:53.120]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.120]                   }
[13:36:53.120]                 }
[13:36:53.120]                 else {
[13:36:53.120]                   if (TRUE) {
[13:36:53.120]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.120]                     {
[13:36:53.120]                       inherits <- base::inherits
[13:36:53.120]                       invokeRestart <- base::invokeRestart
[13:36:53.120]                       is.null <- base::is.null
[13:36:53.120]                       muffled <- FALSE
[13:36:53.120]                       if (inherits(cond, "message")) {
[13:36:53.120]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.120]                         if (muffled) 
[13:36:53.120]                           invokeRestart("muffleMessage")
[13:36:53.120]                       }
[13:36:53.120]                       else if (inherits(cond, "warning")) {
[13:36:53.120]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.120]                         if (muffled) 
[13:36:53.120]                           invokeRestart("muffleWarning")
[13:36:53.120]                       }
[13:36:53.120]                       else if (inherits(cond, "condition")) {
[13:36:53.120]                         if (!is.null(pattern)) {
[13:36:53.120]                           computeRestarts <- base::computeRestarts
[13:36:53.120]                           grepl <- base::grepl
[13:36:53.120]                           restarts <- computeRestarts(cond)
[13:36:53.120]                           for (restart in restarts) {
[13:36:53.120]                             name <- restart$name
[13:36:53.120]                             if (is.null(name)) 
[13:36:53.120]                               next
[13:36:53.120]                             if (!grepl(pattern, name)) 
[13:36:53.120]                               next
[13:36:53.120]                             invokeRestart(restart)
[13:36:53.120]                             muffled <- TRUE
[13:36:53.120]                             break
[13:36:53.120]                           }
[13:36:53.120]                         }
[13:36:53.120]                       }
[13:36:53.120]                       invisible(muffled)
[13:36:53.120]                     }
[13:36:53.120]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.120]                   }
[13:36:53.120]                 }
[13:36:53.120]             }
[13:36:53.120]         }))
[13:36:53.120]     }, error = function(ex) {
[13:36:53.120]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.120]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.120]                 ...future.rng), started = ...future.startTime, 
[13:36:53.120]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.120]             version = "1.8"), class = "FutureResult")
[13:36:53.120]     }, finally = {
[13:36:53.120]         if (!identical(...future.workdir, getwd())) 
[13:36:53.120]             setwd(...future.workdir)
[13:36:53.120]         {
[13:36:53.120]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.120]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.120]             }
[13:36:53.120]             base::options(...future.oldOptions)
[13:36:53.120]             if (.Platform$OS.type == "windows") {
[13:36:53.120]                 old_names <- names(...future.oldEnvVars)
[13:36:53.120]                 envs <- base::Sys.getenv()
[13:36:53.120]                 names <- names(envs)
[13:36:53.120]                 common <- intersect(names, old_names)
[13:36:53.120]                 added <- setdiff(names, old_names)
[13:36:53.120]                 removed <- setdiff(old_names, names)
[13:36:53.120]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.120]                   envs[common]]
[13:36:53.120]                 NAMES <- toupper(changed)
[13:36:53.120]                 args <- list()
[13:36:53.120]                 for (kk in seq_along(NAMES)) {
[13:36:53.120]                   name <- changed[[kk]]
[13:36:53.120]                   NAME <- NAMES[[kk]]
[13:36:53.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.120]                     next
[13:36:53.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.120]                 }
[13:36:53.120]                 NAMES <- toupper(added)
[13:36:53.120]                 for (kk in seq_along(NAMES)) {
[13:36:53.120]                   name <- added[[kk]]
[13:36:53.120]                   NAME <- NAMES[[kk]]
[13:36:53.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.120]                     next
[13:36:53.120]                   args[[name]] <- ""
[13:36:53.120]                 }
[13:36:53.120]                 NAMES <- toupper(removed)
[13:36:53.120]                 for (kk in seq_along(NAMES)) {
[13:36:53.120]                   name <- removed[[kk]]
[13:36:53.120]                   NAME <- NAMES[[kk]]
[13:36:53.120]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.120]                     next
[13:36:53.120]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.120]                 }
[13:36:53.120]                 if (length(args) > 0) 
[13:36:53.120]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.120]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.120]             }
[13:36:53.120]             else {
[13:36:53.120]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.120]             }
[13:36:53.120]             {
[13:36:53.120]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.120]                   0L) {
[13:36:53.120]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.120]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.120]                   base::options(opts)
[13:36:53.120]                 }
[13:36:53.120]                 {
[13:36:53.120]                   {
[13:36:53.120]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.120]                     NULL
[13:36:53.120]                   }
[13:36:53.120]                   options(future.plan = NULL)
[13:36:53.120]                   if (is.na(NA_character_)) 
[13:36:53.120]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.120]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.120]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.120]                     .init = FALSE)
[13:36:53.120]                 }
[13:36:53.120]             }
[13:36:53.120]         }
[13:36:53.120]     })
[13:36:53.120]     if (TRUE) {
[13:36:53.120]         base::sink(type = "output", split = FALSE)
[13:36:53.120]         if (TRUE) {
[13:36:53.120]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.120]         }
[13:36:53.120]         else {
[13:36:53.120]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.120]         }
[13:36:53.120]         base::close(...future.stdout)
[13:36:53.120]         ...future.stdout <- NULL
[13:36:53.120]     }
[13:36:53.120]     ...future.result$conditions <- ...future.conditions
[13:36:53.120]     ...future.result$finished <- base::Sys.time()
[13:36:53.120]     ...future.result
[13:36:53.120] }
[13:36:53.123] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.123] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.123] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.123] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.124] MultisessionFuture started
[13:36:53.124] - Launch lazy future ... done
[13:36:53.124] run() for ‘MultisessionFuture’ ... done
[13:36:53.124] result() for ClusterFuture ...
[13:36:53.124] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.124] - Validating connection of MultisessionFuture
[13:36:53.125] - received message: FutureResult
[13:36:53.125] - Received FutureResult
[13:36:53.125] - Erased future from FutureRegistry
[13:36:53.125] result() for ClusterFuture ...
[13:36:53.126] - result already collected: FutureResult
[13:36:53.126] result() for ClusterFuture ... done
[13:36:53.126] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.126] result() for ClusterFuture ... done
[13:36:53.126] result() for ClusterFuture ...
[13:36:53.126] - result already collected: FutureResult
[13:36:53.126] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.126] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.127] Searching for globals...
[13:36:53.129] - globals found: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.129] Searching for globals ... DONE
[13:36:53.129] Resolving globals: TRUE
[13:36:53.129] Resolving any globals that are futures ...
[13:36:53.129] - globals: [6] ‘{’, ‘x’, ‘<-’, ‘[’, ‘[<-’, ‘list’
[13:36:53.129] Resolving any globals that are futures ... DONE
[13:36:53.129] Resolving futures part of globals (recursively) ...
[13:36:53.130] resolve() on list ...
[13:36:53.130]  recursive: 99
[13:36:53.130]  length: 1
[13:36:53.130]  elements: ‘x’
[13:36:53.130]  length: 0 (resolved future 1)
[13:36:53.130] resolve() on list ... DONE
[13:36:53.130] - globals: [1] ‘x’
[13:36:53.130] Resolving futures part of globals (recursively) ... DONE
[13:36:53.131] The total size of the 1 globals is 0 bytes (0 bytes)
[13:36:53.131] The total size of the 1 globals exported for future expression (‘{; x["a"] <- list(1); x; }’) is 0 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (0 bytes of class ‘list’)
[13:36:53.131] - globals: [1] ‘x’
[13:36:53.131] 
[13:36:53.131] getGlobalsAndPackages() ... DONE
[13:36:53.131] run() for ‘Future’ ...
[13:36:53.131] - state: ‘created’
[13:36:53.132] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.145] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.145] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.145]   - Field: ‘node’
[13:36:53.145]   - Field: ‘label’
[13:36:53.145]   - Field: ‘local’
[13:36:53.145]   - Field: ‘owner’
[13:36:53.145]   - Field: ‘envir’
[13:36:53.146]   - Field: ‘workers’
[13:36:53.146]   - Field: ‘packages’
[13:36:53.146]   - Field: ‘gc’
[13:36:53.146]   - Field: ‘conditions’
[13:36:53.146]   - Field: ‘persistent’
[13:36:53.146]   - Field: ‘expr’
[13:36:53.146]   - Field: ‘uuid’
[13:36:53.146]   - Field: ‘seed’
[13:36:53.146]   - Field: ‘version’
[13:36:53.146]   - Field: ‘result’
[13:36:53.147]   - Field: ‘asynchronous’
[13:36:53.147]   - Field: ‘calls’
[13:36:53.147]   - Field: ‘globals’
[13:36:53.147]   - Field: ‘stdout’
[13:36:53.147]   - Field: ‘earlySignal’
[13:36:53.147]   - Field: ‘lazy’
[13:36:53.147]   - Field: ‘state’
[13:36:53.147] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.147] - Launch lazy future ...
[13:36:53.147] Packages needed by the future expression (n = 0): <none>
[13:36:53.148] Packages needed by future strategies (n = 0): <none>
[13:36:53.148] {
[13:36:53.148]     {
[13:36:53.148]         {
[13:36:53.148]             ...future.startTime <- base::Sys.time()
[13:36:53.148]             {
[13:36:53.148]                 {
[13:36:53.148]                   {
[13:36:53.148]                     {
[13:36:53.148]                       base::local({
[13:36:53.148]                         has_future <- base::requireNamespace("future", 
[13:36:53.148]                           quietly = TRUE)
[13:36:53.148]                         if (has_future) {
[13:36:53.148]                           ns <- base::getNamespace("future")
[13:36:53.148]                           version <- ns[[".package"]][["version"]]
[13:36:53.148]                           if (is.null(version)) 
[13:36:53.148]                             version <- utils::packageVersion("future")
[13:36:53.148]                         }
[13:36:53.148]                         else {
[13:36:53.148]                           version <- NULL
[13:36:53.148]                         }
[13:36:53.148]                         if (!has_future || version < "1.8.0") {
[13:36:53.148]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.148]                             "", base::R.version$version.string), 
[13:36:53.148]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.148]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.148]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.148]                               "release", "version")], collapse = " "), 
[13:36:53.148]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.148]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.148]                             info)
[13:36:53.148]                           info <- base::paste(info, collapse = "; ")
[13:36:53.148]                           if (!has_future) {
[13:36:53.148]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.148]                               info)
[13:36:53.148]                           }
[13:36:53.148]                           else {
[13:36:53.148]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.148]                               info, version)
[13:36:53.148]                           }
[13:36:53.148]                           base::stop(msg)
[13:36:53.148]                         }
[13:36:53.148]                       })
[13:36:53.148]                     }
[13:36:53.148]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.148]                     base::options(mc.cores = 1L)
[13:36:53.148]                   }
[13:36:53.148]                   ...future.strategy.old <- future::plan("list")
[13:36:53.148]                   options(future.plan = NULL)
[13:36:53.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.148]                 }
[13:36:53.148]                 ...future.workdir <- getwd()
[13:36:53.148]             }
[13:36:53.148]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.148]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.148]         }
[13:36:53.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.148]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.148]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.148]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.148]             base::names(...future.oldOptions))
[13:36:53.148]     }
[13:36:53.148]     if (FALSE) {
[13:36:53.148]     }
[13:36:53.148]     else {
[13:36:53.148]         if (TRUE) {
[13:36:53.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.148]                 open = "w")
[13:36:53.148]         }
[13:36:53.148]         else {
[13:36:53.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.148]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.148]         }
[13:36:53.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.148]             base::sink(type = "output", split = FALSE)
[13:36:53.148]             base::close(...future.stdout)
[13:36:53.148]         }, add = TRUE)
[13:36:53.148]     }
[13:36:53.148]     ...future.frame <- base::sys.nframe()
[13:36:53.148]     ...future.conditions <- base::list()
[13:36:53.148]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.148]     if (FALSE) {
[13:36:53.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.148]     }
[13:36:53.148]     ...future.result <- base::tryCatch({
[13:36:53.148]         base::withCallingHandlers({
[13:36:53.148]             ...future.value <- base::withVisible(base::local({
[13:36:53.148]                 ...future.makeSendCondition <- base::local({
[13:36:53.148]                   sendCondition <- NULL
[13:36:53.148]                   function(frame = 1L) {
[13:36:53.148]                     if (is.function(sendCondition)) 
[13:36:53.148]                       return(sendCondition)
[13:36:53.148]                     ns <- getNamespace("parallel")
[13:36:53.148]                     if (exists("sendData", mode = "function", 
[13:36:53.148]                       envir = ns)) {
[13:36:53.148]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.148]                         envir = ns)
[13:36:53.148]                       envir <- sys.frame(frame)
[13:36:53.148]                       master <- NULL
[13:36:53.148]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.148]                         !identical(envir, emptyenv())) {
[13:36:53.148]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.148]                           inherits = FALSE)) {
[13:36:53.148]                           master <- get("master", mode = "list", 
[13:36:53.148]                             envir = envir, inherits = FALSE)
[13:36:53.148]                           if (inherits(master, c("SOCKnode", 
[13:36:53.148]                             "SOCK0node"))) {
[13:36:53.148]                             sendCondition <<- function(cond) {
[13:36:53.148]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.148]                                 success = TRUE)
[13:36:53.148]                               parallel_sendData(master, data)
[13:36:53.148]                             }
[13:36:53.148]                             return(sendCondition)
[13:36:53.148]                           }
[13:36:53.148]                         }
[13:36:53.148]                         frame <- frame + 1L
[13:36:53.148]                         envir <- sys.frame(frame)
[13:36:53.148]                       }
[13:36:53.148]                     }
[13:36:53.148]                     sendCondition <<- function(cond) NULL
[13:36:53.148]                   }
[13:36:53.148]                 })
[13:36:53.148]                 withCallingHandlers({
[13:36:53.148]                   {
[13:36:53.148]                     x["a"] <- list(1)
[13:36:53.148]                     x
[13:36:53.148]                   }
[13:36:53.148]                 }, immediateCondition = function(cond) {
[13:36:53.148]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.148]                   sendCondition(cond)
[13:36:53.148]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.148]                   {
[13:36:53.148]                     inherits <- base::inherits
[13:36:53.148]                     invokeRestart <- base::invokeRestart
[13:36:53.148]                     is.null <- base::is.null
[13:36:53.148]                     muffled <- FALSE
[13:36:53.148]                     if (inherits(cond, "message")) {
[13:36:53.148]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.148]                       if (muffled) 
[13:36:53.148]                         invokeRestart("muffleMessage")
[13:36:53.148]                     }
[13:36:53.148]                     else if (inherits(cond, "warning")) {
[13:36:53.148]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.148]                       if (muffled) 
[13:36:53.148]                         invokeRestart("muffleWarning")
[13:36:53.148]                     }
[13:36:53.148]                     else if (inherits(cond, "condition")) {
[13:36:53.148]                       if (!is.null(pattern)) {
[13:36:53.148]                         computeRestarts <- base::computeRestarts
[13:36:53.148]                         grepl <- base::grepl
[13:36:53.148]                         restarts <- computeRestarts(cond)
[13:36:53.148]                         for (restart in restarts) {
[13:36:53.148]                           name <- restart$name
[13:36:53.148]                           if (is.null(name)) 
[13:36:53.148]                             next
[13:36:53.148]                           if (!grepl(pattern, name)) 
[13:36:53.148]                             next
[13:36:53.148]                           invokeRestart(restart)
[13:36:53.148]                           muffled <- TRUE
[13:36:53.148]                           break
[13:36:53.148]                         }
[13:36:53.148]                       }
[13:36:53.148]                     }
[13:36:53.148]                     invisible(muffled)
[13:36:53.148]                   }
[13:36:53.148]                   muffleCondition(cond)
[13:36:53.148]                 })
[13:36:53.148]             }))
[13:36:53.148]             future::FutureResult(value = ...future.value$value, 
[13:36:53.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.148]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.148]                     ...future.globalenv.names))
[13:36:53.148]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.148]         }, condition = base::local({
[13:36:53.148]             c <- base::c
[13:36:53.148]             inherits <- base::inherits
[13:36:53.148]             invokeRestart <- base::invokeRestart
[13:36:53.148]             length <- base::length
[13:36:53.148]             list <- base::list
[13:36:53.148]             seq.int <- base::seq.int
[13:36:53.148]             signalCondition <- base::signalCondition
[13:36:53.148]             sys.calls <- base::sys.calls
[13:36:53.148]             `[[` <- base::`[[`
[13:36:53.148]             `+` <- base::`+`
[13:36:53.148]             `<<-` <- base::`<<-`
[13:36:53.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.148]                   3L)]
[13:36:53.148]             }
[13:36:53.148]             function(cond) {
[13:36:53.148]                 is_error <- inherits(cond, "error")
[13:36:53.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.148]                   NULL)
[13:36:53.148]                 if (is_error) {
[13:36:53.148]                   sessionInformation <- function() {
[13:36:53.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.148]                       search = base::search(), system = base::Sys.info())
[13:36:53.148]                   }
[13:36:53.148]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.148]                     cond$call), session = sessionInformation(), 
[13:36:53.148]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.148]                   signalCondition(cond)
[13:36:53.148]                 }
[13:36:53.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.148]                 "immediateCondition"))) {
[13:36:53.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.148]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.148]                   if (TRUE && !signal) {
[13:36:53.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.148]                     {
[13:36:53.148]                       inherits <- base::inherits
[13:36:53.148]                       invokeRestart <- base::invokeRestart
[13:36:53.148]                       is.null <- base::is.null
[13:36:53.148]                       muffled <- FALSE
[13:36:53.148]                       if (inherits(cond, "message")) {
[13:36:53.148]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.148]                         if (muffled) 
[13:36:53.148]                           invokeRestart("muffleMessage")
[13:36:53.148]                       }
[13:36:53.148]                       else if (inherits(cond, "warning")) {
[13:36:53.148]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.148]                         if (muffled) 
[13:36:53.148]                           invokeRestart("muffleWarning")
[13:36:53.148]                       }
[13:36:53.148]                       else if (inherits(cond, "condition")) {
[13:36:53.148]                         if (!is.null(pattern)) {
[13:36:53.148]                           computeRestarts <- base::computeRestarts
[13:36:53.148]                           grepl <- base::grepl
[13:36:53.148]                           restarts <- computeRestarts(cond)
[13:36:53.148]                           for (restart in restarts) {
[13:36:53.148]                             name <- restart$name
[13:36:53.148]                             if (is.null(name)) 
[13:36:53.148]                               next
[13:36:53.148]                             if (!grepl(pattern, name)) 
[13:36:53.148]                               next
[13:36:53.148]                             invokeRestart(restart)
[13:36:53.148]                             muffled <- TRUE
[13:36:53.148]                             break
[13:36:53.148]                           }
[13:36:53.148]                         }
[13:36:53.148]                       }
[13:36:53.148]                       invisible(muffled)
[13:36:53.148]                     }
[13:36:53.148]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.148]                   }
[13:36:53.148]                 }
[13:36:53.148]                 else {
[13:36:53.148]                   if (TRUE) {
[13:36:53.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.148]                     {
[13:36:53.148]                       inherits <- base::inherits
[13:36:53.148]                       invokeRestart <- base::invokeRestart
[13:36:53.148]                       is.null <- base::is.null
[13:36:53.148]                       muffled <- FALSE
[13:36:53.148]                       if (inherits(cond, "message")) {
[13:36:53.148]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.148]                         if (muffled) 
[13:36:53.148]                           invokeRestart("muffleMessage")
[13:36:53.148]                       }
[13:36:53.148]                       else if (inherits(cond, "warning")) {
[13:36:53.148]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.148]                         if (muffled) 
[13:36:53.148]                           invokeRestart("muffleWarning")
[13:36:53.148]                       }
[13:36:53.148]                       else if (inherits(cond, "condition")) {
[13:36:53.148]                         if (!is.null(pattern)) {
[13:36:53.148]                           computeRestarts <- base::computeRestarts
[13:36:53.148]                           grepl <- base::grepl
[13:36:53.148]                           restarts <- computeRestarts(cond)
[13:36:53.148]                           for (restart in restarts) {
[13:36:53.148]                             name <- restart$name
[13:36:53.148]                             if (is.null(name)) 
[13:36:53.148]                               next
[13:36:53.148]                             if (!grepl(pattern, name)) 
[13:36:53.148]                               next
[13:36:53.148]                             invokeRestart(restart)
[13:36:53.148]                             muffled <- TRUE
[13:36:53.148]                             break
[13:36:53.148]                           }
[13:36:53.148]                         }
[13:36:53.148]                       }
[13:36:53.148]                       invisible(muffled)
[13:36:53.148]                     }
[13:36:53.148]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.148]                   }
[13:36:53.148]                 }
[13:36:53.148]             }
[13:36:53.148]         }))
[13:36:53.148]     }, error = function(ex) {
[13:36:53.148]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.148]                 ...future.rng), started = ...future.startTime, 
[13:36:53.148]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.148]             version = "1.8"), class = "FutureResult")
[13:36:53.148]     }, finally = {
[13:36:53.148]         if (!identical(...future.workdir, getwd())) 
[13:36:53.148]             setwd(...future.workdir)
[13:36:53.148]         {
[13:36:53.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.148]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.148]             }
[13:36:53.148]             base::options(...future.oldOptions)
[13:36:53.148]             if (.Platform$OS.type == "windows") {
[13:36:53.148]                 old_names <- names(...future.oldEnvVars)
[13:36:53.148]                 envs <- base::Sys.getenv()
[13:36:53.148]                 names <- names(envs)
[13:36:53.148]                 common <- intersect(names, old_names)
[13:36:53.148]                 added <- setdiff(names, old_names)
[13:36:53.148]                 removed <- setdiff(old_names, names)
[13:36:53.148]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.148]                   envs[common]]
[13:36:53.148]                 NAMES <- toupper(changed)
[13:36:53.148]                 args <- list()
[13:36:53.148]                 for (kk in seq_along(NAMES)) {
[13:36:53.148]                   name <- changed[[kk]]
[13:36:53.148]                   NAME <- NAMES[[kk]]
[13:36:53.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.148]                     next
[13:36:53.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.148]                 }
[13:36:53.148]                 NAMES <- toupper(added)
[13:36:53.148]                 for (kk in seq_along(NAMES)) {
[13:36:53.148]                   name <- added[[kk]]
[13:36:53.148]                   NAME <- NAMES[[kk]]
[13:36:53.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.148]                     next
[13:36:53.148]                   args[[name]] <- ""
[13:36:53.148]                 }
[13:36:53.148]                 NAMES <- toupper(removed)
[13:36:53.148]                 for (kk in seq_along(NAMES)) {
[13:36:53.148]                   name <- removed[[kk]]
[13:36:53.148]                   NAME <- NAMES[[kk]]
[13:36:53.148]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.148]                     next
[13:36:53.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.148]                 }
[13:36:53.148]                 if (length(args) > 0) 
[13:36:53.148]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.148]             }
[13:36:53.148]             else {
[13:36:53.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.148]             }
[13:36:53.148]             {
[13:36:53.148]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.148]                   0L) {
[13:36:53.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.148]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.148]                   base::options(opts)
[13:36:53.148]                 }
[13:36:53.148]                 {
[13:36:53.148]                   {
[13:36:53.148]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.148]                     NULL
[13:36:53.148]                   }
[13:36:53.148]                   options(future.plan = NULL)
[13:36:53.148]                   if (is.na(NA_character_)) 
[13:36:53.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.148]                     .init = FALSE)
[13:36:53.148]                 }
[13:36:53.148]             }
[13:36:53.148]         }
[13:36:53.148]     })
[13:36:53.148]     if (TRUE) {
[13:36:53.148]         base::sink(type = "output", split = FALSE)
[13:36:53.148]         if (TRUE) {
[13:36:53.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.148]         }
[13:36:53.148]         else {
[13:36:53.148]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.148]         }
[13:36:53.148]         base::close(...future.stdout)
[13:36:53.148]         ...future.stdout <- NULL
[13:36:53.148]     }
[13:36:53.148]     ...future.result$conditions <- ...future.conditions
[13:36:53.148]     ...future.result$finished <- base::Sys.time()
[13:36:53.148]     ...future.result
[13:36:53.148] }
[13:36:53.150] Exporting 1 global objects (0 bytes) to cluster node #1 ...
[13:36:53.151] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.151] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.151] Exporting 1 global objects (0 bytes) to cluster node #1 ... DONE
[13:36:53.151] MultisessionFuture started
[13:36:53.152] - Launch lazy future ... done
[13:36:53.152] run() for ‘MultisessionFuture’ ... done
[13:36:53.152] result() for ClusterFuture ...
[13:36:53.152] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.152] - Validating connection of MultisessionFuture
[13:36:53.153] - received message: FutureResult
[13:36:53.153] - Received FutureResult
[13:36:53.153] - Erased future from FutureRegistry
[13:36:53.153] result() for ClusterFuture ...
[13:36:53.153] - result already collected: FutureResult
[13:36:53.153] result() for ClusterFuture ... done
[13:36:53.153] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.154] result() for ClusterFuture ... done
[13:36:53.154] result() for ClusterFuture ...
[13:36:53.154] - result already collected: FutureResult
[13:36:53.154] result() for ClusterFuture ... done
$a
[1] 1

Warning: R option ‘future.globals.resolve’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘TRUE’
[13:36:53.154] getGlobalsAndPackages() ...
Warning: R option ‘future.globals.onMissing’ may only be used for troubleshooting. It must not be used in production since it changes how futures are evaluated and there is a great risk that the results cannot be reproduced elsewhere: ‘error’
[13:36:53.154] Searching for globals...
[13:36:53.156] - globals found: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:53.157] Searching for globals ... DONE
[13:36:53.157] Resolving globals: TRUE
[13:36:53.157] Resolving any globals that are futures ...
[13:36:53.157] - globals: [7] ‘{’, ‘x’, ‘<-’, ‘[’, ‘name’, ‘[<-’, ‘list’
[13:36:53.157] Resolving any globals that are futures ... DONE
[13:36:53.157] Resolving futures part of globals (recursively) ...
[13:36:53.157] resolve() on list ...
[13:36:53.158]  recursive: 99
[13:36:53.158]  length: 2
[13:36:53.158]  elements: ‘x’, ‘name’
[13:36:53.158]  length: 1 (resolved future 1)
[13:36:53.158]  length: 0 (resolved future 2)
[13:36:53.158] resolve() on list ... DONE
[13:36:53.158] - globals: [2] ‘x’, ‘name’
[13:36:53.158] Resolving futures part of globals (recursively) ... DONE
[13:36:53.158] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:53.159] The total size of the 2 globals exported for future expression (‘{; x[name] <- list(1); x; }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘name’ (112 bytes of class ‘character’) and ‘x’ (0 bytes of class ‘list’)
[13:36:53.159] - globals: [2] ‘x’, ‘name’
[13:36:53.159] 
[13:36:53.159] getGlobalsAndPackages() ... DONE
[13:36:53.159] run() for ‘Future’ ...
[13:36:53.159] - state: ‘created’
[13:36:53.160] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:53.173] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:53.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:53.173]   - Field: ‘node’
[13:36:53.173]   - Field: ‘label’
[13:36:53.173]   - Field: ‘local’
[13:36:53.173]   - Field: ‘owner’
[13:36:53.173]   - Field: ‘envir’
[13:36:53.173]   - Field: ‘workers’
[13:36:53.174]   - Field: ‘packages’
[13:36:53.174]   - Field: ‘gc’
[13:36:53.174]   - Field: ‘conditions’
[13:36:53.174]   - Field: ‘persistent’
[13:36:53.174]   - Field: ‘expr’
[13:36:53.174]   - Field: ‘uuid’
[13:36:53.174]   - Field: ‘seed’
[13:36:53.174]   - Field: ‘version’
[13:36:53.174]   - Field: ‘result’
[13:36:53.174]   - Field: ‘asynchronous’
[13:36:53.175]   - Field: ‘calls’
[13:36:53.175]   - Field: ‘globals’
[13:36:53.175]   - Field: ‘stdout’
[13:36:53.175]   - Field: ‘earlySignal’
[13:36:53.175]   - Field: ‘lazy’
[13:36:53.175]   - Field: ‘state’
[13:36:53.175] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:53.175] - Launch lazy future ...
[13:36:53.175] Packages needed by the future expression (n = 0): <none>
[13:36:53.175] Packages needed by future strategies (n = 0): <none>
[13:36:53.176] {
[13:36:53.176]     {
[13:36:53.176]         {
[13:36:53.176]             ...future.startTime <- base::Sys.time()
[13:36:53.176]             {
[13:36:53.176]                 {
[13:36:53.176]                   {
[13:36:53.176]                     {
[13:36:53.176]                       base::local({
[13:36:53.176]                         has_future <- base::requireNamespace("future", 
[13:36:53.176]                           quietly = TRUE)
[13:36:53.176]                         if (has_future) {
[13:36:53.176]                           ns <- base::getNamespace("future")
[13:36:53.176]                           version <- ns[[".package"]][["version"]]
[13:36:53.176]                           if (is.null(version)) 
[13:36:53.176]                             version <- utils::packageVersion("future")
[13:36:53.176]                         }
[13:36:53.176]                         else {
[13:36:53.176]                           version <- NULL
[13:36:53.176]                         }
[13:36:53.176]                         if (!has_future || version < "1.8.0") {
[13:36:53.176]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:53.176]                             "", base::R.version$version.string), 
[13:36:53.176]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:53.176]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:53.176]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:53.176]                               "release", "version")], collapse = " "), 
[13:36:53.176]                             hostname = base::Sys.info()[["nodename"]])
[13:36:53.176]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:53.176]                             info)
[13:36:53.176]                           info <- base::paste(info, collapse = "; ")
[13:36:53.176]                           if (!has_future) {
[13:36:53.176]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:53.176]                               info)
[13:36:53.176]                           }
[13:36:53.176]                           else {
[13:36:53.176]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:53.176]                               info, version)
[13:36:53.176]                           }
[13:36:53.176]                           base::stop(msg)
[13:36:53.176]                         }
[13:36:53.176]                       })
[13:36:53.176]                     }
[13:36:53.176]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:53.176]                     base::options(mc.cores = 1L)
[13:36:53.176]                   }
[13:36:53.176]                   ...future.strategy.old <- future::plan("list")
[13:36:53.176]                   options(future.plan = NULL)
[13:36:53.176]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.176]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:53.176]                 }
[13:36:53.176]                 ...future.workdir <- getwd()
[13:36:53.176]             }
[13:36:53.176]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:53.176]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:53.176]         }
[13:36:53.176]         base::options(future.startup.script = FALSE, future.globals.onMissing = "error", 
[13:36:53.176]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:53.176]             future.globals.onMissing = "error", future.globals.onReference = NULL, 
[13:36:53.176]             future.globals.resolve = TRUE, future.resolve.recursive = NULL, 
[13:36:53.176]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:53.176]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:53.176]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:53.176]             base::names(...future.oldOptions))
[13:36:53.176]     }
[13:36:53.176]     if (FALSE) {
[13:36:53.176]     }
[13:36:53.176]     else {
[13:36:53.176]         if (TRUE) {
[13:36:53.176]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:53.176]                 open = "w")
[13:36:53.176]         }
[13:36:53.176]         else {
[13:36:53.176]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:53.176]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:53.176]         }
[13:36:53.176]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:53.176]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:53.176]             base::sink(type = "output", split = FALSE)
[13:36:53.176]             base::close(...future.stdout)
[13:36:53.176]         }, add = TRUE)
[13:36:53.176]     }
[13:36:53.176]     ...future.frame <- base::sys.nframe()
[13:36:53.176]     ...future.conditions <- base::list()
[13:36:53.176]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:53.176]     if (FALSE) {
[13:36:53.176]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:53.176]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:53.176]     }
[13:36:53.176]     ...future.result <- base::tryCatch({
[13:36:53.176]         base::withCallingHandlers({
[13:36:53.176]             ...future.value <- base::withVisible(base::local({
[13:36:53.176]                 ...future.makeSendCondition <- base::local({
[13:36:53.176]                   sendCondition <- NULL
[13:36:53.176]                   function(frame = 1L) {
[13:36:53.176]                     if (is.function(sendCondition)) 
[13:36:53.176]                       return(sendCondition)
[13:36:53.176]                     ns <- getNamespace("parallel")
[13:36:53.176]                     if (exists("sendData", mode = "function", 
[13:36:53.176]                       envir = ns)) {
[13:36:53.176]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:53.176]                         envir = ns)
[13:36:53.176]                       envir <- sys.frame(frame)
[13:36:53.176]                       master <- NULL
[13:36:53.176]                       while (!identical(envir, .GlobalEnv) && 
[13:36:53.176]                         !identical(envir, emptyenv())) {
[13:36:53.176]                         if (exists("master", mode = "list", envir = envir, 
[13:36:53.176]                           inherits = FALSE)) {
[13:36:53.176]                           master <- get("master", mode = "list", 
[13:36:53.176]                             envir = envir, inherits = FALSE)
[13:36:53.176]                           if (inherits(master, c("SOCKnode", 
[13:36:53.176]                             "SOCK0node"))) {
[13:36:53.176]                             sendCondition <<- function(cond) {
[13:36:53.176]                               data <- list(type = "VALUE", value = cond, 
[13:36:53.176]                                 success = TRUE)
[13:36:53.176]                               parallel_sendData(master, data)
[13:36:53.176]                             }
[13:36:53.176]                             return(sendCondition)
[13:36:53.176]                           }
[13:36:53.176]                         }
[13:36:53.176]                         frame <- frame + 1L
[13:36:53.176]                         envir <- sys.frame(frame)
[13:36:53.176]                       }
[13:36:53.176]                     }
[13:36:53.176]                     sendCondition <<- function(cond) NULL
[13:36:53.176]                   }
[13:36:53.176]                 })
[13:36:53.176]                 withCallingHandlers({
[13:36:53.176]                   {
[13:36:53.176]                     x[name] <- list(1)
[13:36:53.176]                     x
[13:36:53.176]                   }
[13:36:53.176]                 }, immediateCondition = function(cond) {
[13:36:53.176]                   sendCondition <- ...future.makeSendCondition()
[13:36:53.176]                   sendCondition(cond)
[13:36:53.176]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.176]                   {
[13:36:53.176]                     inherits <- base::inherits
[13:36:53.176]                     invokeRestart <- base::invokeRestart
[13:36:53.176]                     is.null <- base::is.null
[13:36:53.176]                     muffled <- FALSE
[13:36:53.176]                     if (inherits(cond, "message")) {
[13:36:53.176]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:53.176]                       if (muffled) 
[13:36:53.176]                         invokeRestart("muffleMessage")
[13:36:53.176]                     }
[13:36:53.176]                     else if (inherits(cond, "warning")) {
[13:36:53.176]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:53.176]                       if (muffled) 
[13:36:53.176]                         invokeRestart("muffleWarning")
[13:36:53.176]                     }
[13:36:53.176]                     else if (inherits(cond, "condition")) {
[13:36:53.176]                       if (!is.null(pattern)) {
[13:36:53.176]                         computeRestarts <- base::computeRestarts
[13:36:53.176]                         grepl <- base::grepl
[13:36:53.176]                         restarts <- computeRestarts(cond)
[13:36:53.176]                         for (restart in restarts) {
[13:36:53.176]                           name <- restart$name
[13:36:53.176]                           if (is.null(name)) 
[13:36:53.176]                             next
[13:36:53.176]                           if (!grepl(pattern, name)) 
[13:36:53.176]                             next
[13:36:53.176]                           invokeRestart(restart)
[13:36:53.176]                           muffled <- TRUE
[13:36:53.176]                           break
[13:36:53.176]                         }
[13:36:53.176]                       }
[13:36:53.176]                     }
[13:36:53.176]                     invisible(muffled)
[13:36:53.176]                   }
[13:36:53.176]                   muffleCondition(cond)
[13:36:53.176]                 })
[13:36:53.176]             }))
[13:36:53.176]             future::FutureResult(value = ...future.value$value, 
[13:36:53.176]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.176]                   ...future.rng), globalenv = if (FALSE) 
[13:36:53.176]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:53.176]                     ...future.globalenv.names))
[13:36:53.176]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:53.176]         }, condition = base::local({
[13:36:53.176]             c <- base::c
[13:36:53.176]             inherits <- base::inherits
[13:36:53.176]             invokeRestart <- base::invokeRestart
[13:36:53.176]             length <- base::length
[13:36:53.176]             list <- base::list
[13:36:53.176]             seq.int <- base::seq.int
[13:36:53.176]             signalCondition <- base::signalCondition
[13:36:53.176]             sys.calls <- base::sys.calls
[13:36:53.176]             `[[` <- base::`[[`
[13:36:53.176]             `+` <- base::`+`
[13:36:53.176]             `<<-` <- base::`<<-`
[13:36:53.176]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:53.176]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:53.176]                   3L)]
[13:36:53.176]             }
[13:36:53.176]             function(cond) {
[13:36:53.176]                 is_error <- inherits(cond, "error")
[13:36:53.176]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:53.176]                   NULL)
[13:36:53.176]                 if (is_error) {
[13:36:53.176]                   sessionInformation <- function() {
[13:36:53.176]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:53.176]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:53.176]                       search = base::search(), system = base::Sys.info())
[13:36:53.176]                   }
[13:36:53.176]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.176]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:53.176]                     cond$call), session = sessionInformation(), 
[13:36:53.176]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:53.176]                   signalCondition(cond)
[13:36:53.176]                 }
[13:36:53.176]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:53.176]                 "immediateCondition"))) {
[13:36:53.176]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:53.176]                   ...future.conditions[[length(...future.conditions) + 
[13:36:53.176]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:53.176]                   if (TRUE && !signal) {
[13:36:53.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.176]                     {
[13:36:53.176]                       inherits <- base::inherits
[13:36:53.176]                       invokeRestart <- base::invokeRestart
[13:36:53.176]                       is.null <- base::is.null
[13:36:53.176]                       muffled <- FALSE
[13:36:53.176]                       if (inherits(cond, "message")) {
[13:36:53.176]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.176]                         if (muffled) 
[13:36:53.176]                           invokeRestart("muffleMessage")
[13:36:53.176]                       }
[13:36:53.176]                       else if (inherits(cond, "warning")) {
[13:36:53.176]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.176]                         if (muffled) 
[13:36:53.176]                           invokeRestart("muffleWarning")
[13:36:53.176]                       }
[13:36:53.176]                       else if (inherits(cond, "condition")) {
[13:36:53.176]                         if (!is.null(pattern)) {
[13:36:53.176]                           computeRestarts <- base::computeRestarts
[13:36:53.176]                           grepl <- base::grepl
[13:36:53.176]                           restarts <- computeRestarts(cond)
[13:36:53.176]                           for (restart in restarts) {
[13:36:53.176]                             name <- restart$name
[13:36:53.176]                             if (is.null(name)) 
[13:36:53.176]                               next
[13:36:53.176]                             if (!grepl(pattern, name)) 
[13:36:53.176]                               next
[13:36:53.176]                             invokeRestart(restart)
[13:36:53.176]                             muffled <- TRUE
[13:36:53.176]                             break
[13:36:53.176]                           }
[13:36:53.176]                         }
[13:36:53.176]                       }
[13:36:53.176]                       invisible(muffled)
[13:36:53.176]                     }
[13:36:53.176]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.176]                   }
[13:36:53.176]                 }
[13:36:53.176]                 else {
[13:36:53.176]                   if (TRUE) {
[13:36:53.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:53.176]                     {
[13:36:53.176]                       inherits <- base::inherits
[13:36:53.176]                       invokeRestart <- base::invokeRestart
[13:36:53.176]                       is.null <- base::is.null
[13:36:53.176]                       muffled <- FALSE
[13:36:53.176]                       if (inherits(cond, "message")) {
[13:36:53.176]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:53.176]                         if (muffled) 
[13:36:53.176]                           invokeRestart("muffleMessage")
[13:36:53.176]                       }
[13:36:53.176]                       else if (inherits(cond, "warning")) {
[13:36:53.176]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:53.176]                         if (muffled) 
[13:36:53.176]                           invokeRestart("muffleWarning")
[13:36:53.176]                       }
[13:36:53.176]                       else if (inherits(cond, "condition")) {
[13:36:53.176]                         if (!is.null(pattern)) {
[13:36:53.176]                           computeRestarts <- base::computeRestarts
[13:36:53.176]                           grepl <- base::grepl
[13:36:53.176]                           restarts <- computeRestarts(cond)
[13:36:53.176]                           for (restart in restarts) {
[13:36:53.176]                             name <- restart$name
[13:36:53.176]                             if (is.null(name)) 
[13:36:53.176]                               next
[13:36:53.176]                             if (!grepl(pattern, name)) 
[13:36:53.176]                               next
[13:36:53.176]                             invokeRestart(restart)
[13:36:53.176]                             muffled <- TRUE
[13:36:53.176]                             break
[13:36:53.176]                           }
[13:36:53.176]                         }
[13:36:53.176]                       }
[13:36:53.176]                       invisible(muffled)
[13:36:53.176]                     }
[13:36:53.176]                     muffleCondition(cond, pattern = "^muffle")
[13:36:53.176]                   }
[13:36:53.176]                 }
[13:36:53.176]             }
[13:36:53.176]         }))
[13:36:53.176]     }, error = function(ex) {
[13:36:53.176]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:53.176]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:53.176]                 ...future.rng), started = ...future.startTime, 
[13:36:53.176]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:53.176]             version = "1.8"), class = "FutureResult")
[13:36:53.176]     }, finally = {
[13:36:53.176]         if (!identical(...future.workdir, getwd())) 
[13:36:53.176]             setwd(...future.workdir)
[13:36:53.176]         {
[13:36:53.176]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:53.176]                 ...future.oldOptions$nwarnings <- NULL
[13:36:53.176]             }
[13:36:53.176]             base::options(...future.oldOptions)
[13:36:53.176]             if (.Platform$OS.type == "windows") {
[13:36:53.176]                 old_names <- names(...future.oldEnvVars)
[13:36:53.176]                 envs <- base::Sys.getenv()
[13:36:53.176]                 names <- names(envs)
[13:36:53.176]                 common <- intersect(names, old_names)
[13:36:53.176]                 added <- setdiff(names, old_names)
[13:36:53.176]                 removed <- setdiff(old_names, names)
[13:36:53.176]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:53.176]                   envs[common]]
[13:36:53.176]                 NAMES <- toupper(changed)
[13:36:53.176]                 args <- list()
[13:36:53.176]                 for (kk in seq_along(NAMES)) {
[13:36:53.176]                   name <- changed[[kk]]
[13:36:53.176]                   NAME <- NAMES[[kk]]
[13:36:53.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.176]                     next
[13:36:53.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.176]                 }
[13:36:53.176]                 NAMES <- toupper(added)
[13:36:53.176]                 for (kk in seq_along(NAMES)) {
[13:36:53.176]                   name <- added[[kk]]
[13:36:53.176]                   NAME <- NAMES[[kk]]
[13:36:53.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.176]                     next
[13:36:53.176]                   args[[name]] <- ""
[13:36:53.176]                 }
[13:36:53.176]                 NAMES <- toupper(removed)
[13:36:53.176]                 for (kk in seq_along(NAMES)) {
[13:36:53.176]                   name <- removed[[kk]]
[13:36:53.176]                   NAME <- NAMES[[kk]]
[13:36:53.176]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:53.176]                     next
[13:36:53.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:53.176]                 }
[13:36:53.176]                 if (length(args) > 0) 
[13:36:53.176]                   base::do.call(base::Sys.setenv, args = args)
[13:36:53.176]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:53.176]             }
[13:36:53.176]             else {
[13:36:53.176]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:53.176]             }
[13:36:53.176]             {
[13:36:53.176]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:53.176]                   0L) {
[13:36:53.176]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:53.176]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:53.176]                   base::options(opts)
[13:36:53.176]                 }
[13:36:53.176]                 {
[13:36:53.176]                   {
[13:36:53.176]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:53.176]                     NULL
[13:36:53.176]                   }
[13:36:53.176]                   options(future.plan = NULL)
[13:36:53.176]                   if (is.na(NA_character_)) 
[13:36:53.176]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:53.176]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:53.176]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:53.176]                     .init = FALSE)
[13:36:53.176]                 }
[13:36:53.176]             }
[13:36:53.176]         }
[13:36:53.176]     })
[13:36:53.176]     if (TRUE) {
[13:36:53.176]         base::sink(type = "output", split = FALSE)
[13:36:53.176]         if (TRUE) {
[13:36:53.176]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:53.176]         }
[13:36:53.176]         else {
[13:36:53.176]             ...future.result["stdout"] <- base::list(NULL)
[13:36:53.176]         }
[13:36:53.176]         base::close(...future.stdout)
[13:36:53.176]         ...future.stdout <- NULL
[13:36:53.176]     }
[13:36:53.176]     ...future.result$conditions <- ...future.conditions
[13:36:53.176]     ...future.result$finished <- base::Sys.time()
[13:36:53.176]     ...future.result
[13:36:53.176] }
[13:36:53.178] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:36:53.178] Exporting ‘x’ (0 bytes) to cluster node #1 ...
[13:36:53.179] Exporting ‘x’ (0 bytes) to cluster node #1 ... DONE
[13:36:53.179] Exporting ‘name’ (112 bytes) to cluster node #1 ...
[13:36:53.181] Exporting ‘name’ (112 bytes) to cluster node #1 ... DONE
[13:36:53.181] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:36:53.182] MultisessionFuture started
[13:36:53.182] - Launch lazy future ... done
[13:36:53.182] run() for ‘MultisessionFuture’ ... done
[13:36:53.182] result() for ClusterFuture ...
[13:36:53.182] receiveMessageFromWorker() for ClusterFuture ...
[13:36:53.182] - Validating connection of MultisessionFuture
[13:36:53.183] - received message: FutureResult
[13:36:53.183] - Received FutureResult
[13:36:53.183] - Erased future from FutureRegistry
[13:36:53.183] result() for ClusterFuture ...
[13:36:53.184] - result already collected: FutureResult
[13:36:53.184] result() for ClusterFuture ... done
[13:36:53.184] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:53.184] result() for ClusterFuture ... done
[13:36:53.184] result() for ClusterFuture ...
[13:36:53.184] - result already collected: FutureResult
[13:36:53.184] result() for ClusterFuture ... done
$a
[1] 1

Testing with 2 cores ... DONE
> 
> message("*** Globals - subassignments w/ x$a <- value ... DONE")
*** Globals - subassignments w/ x$a <- value ... DONE
> 
> message("*** Globals - subassignments ... DONE")
*** Globals - subassignments ... DONE
> 
> source("incl/end.R")
[13:36:53.185] plan(): Setting new future strategy stack:
[13:36:53.185] List of future strategies:
[13:36:53.185] 1. FutureStrategy:
[13:36:53.185]    - args: function (..., envir = parent.frame())
[13:36:53.185]    - tweaked: FALSE
[13:36:53.185]    - call: future::plan(oplan)
[13:36:53.186] plan(): nbrOfWorkers() = 1
> 
