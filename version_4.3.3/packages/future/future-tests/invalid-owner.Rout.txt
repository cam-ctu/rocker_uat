
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:21:12.692] plan(): Setting new future strategy stack:
[16:21:12.692] List of future strategies:
[16:21:12.692] 1. sequential:
[16:21:12.692]    - args: function (..., envir = parent.frame())
[16:21:12.692]    - tweaked: FALSE
[16:21:12.692]    - call: future::plan("sequential")
[16:21:12.707] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[16:21:12.720] plan(): Setting new future strategy stack:
[16:21:12.720] List of future strategies:
[16:21:12.720] 1. multisession:
[16:21:12.720]    - args: function (..., workers = 2L, envir = parent.frame())
[16:21:12.720]    - tweaked: TRUE
[16:21:12.720]    - call: plan(multisession, workers = 2L)
[16:21:12.731] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:21:12.731] multisession:
[16:21:12.731] - args: function (..., workers = 2L, envir = parent.frame())
[16:21:12.731] - tweaked: TRUE
[16:21:12.731] - call: plan(multisession, workers = 2L)
[16:21:12.733] getGlobalsAndPackages() ...
[16:21:12.733] Not searching for globals
[16:21:12.733] - globals: [0] <none>
[16:21:12.733] getGlobalsAndPackages() ... DONE
[16:21:12.734] [local output] makeClusterPSOCK() ...
[16:21:12.768] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:21:12.769] [local output] Base port: 11947
[16:21:12.769] [local output] Getting setup options for 2 cluster nodes ...
[16:21:12.770] [local output]  - Node 1 of 2 ...
[16:21:12.770] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:12.771] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpshPbMJ/worker.rank=1.parallelly.parent=84599.14a7718174618.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpshPbMJ/worker.rank=1.parallelly.parent=84599.14a7718174618.pid")'’
[16:21:12.965] - Possible to infer worker's PID: TRUE
[16:21:12.965] [local output] Rscript port: 11947

[16:21:12.965] [local output]  - Node 2 of 2 ...
[16:21:12.966] [local output] localMachine=TRUE => revtunnel=FALSE

[16:21:12.967] [local output] Rscript port: 11947

[16:21:12.967] [local output] Getting setup options for 2 cluster nodes ... done
[16:21:12.967] [local output]  - Parallel setup requested for some PSOCK nodes
[16:21:12.968] [local output] Setting up PSOCK nodes in parallel
[16:21:12.968] List of 36
[16:21:12.968]  $ worker          : chr "localhost"
[16:21:12.968]   ..- attr(*, "localhost")= logi TRUE
[16:21:12.968]  $ master          : chr "localhost"
[16:21:12.968]  $ port            : int 11947
[16:21:12.968]  $ connectTimeout  : num 120
[16:21:12.968]  $ timeout         : num 2592000
[16:21:12.968]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:21:12.968]  $ homogeneous     : logi TRUE
[16:21:12.968]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:21:12.968]  $ rscript_envs    : NULL
[16:21:12.968]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:12.968]  $ rscript_startup : NULL
[16:21:12.968]  $ rscript_sh      : chr "sh"
[16:21:12.968]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:12.968]  $ methods         : logi TRUE
[16:21:12.968]  $ socketOptions   : chr "no-delay"
[16:21:12.968]  $ useXDR          : logi FALSE
[16:21:12.968]  $ outfile         : chr "/dev/null"
[16:21:12.968]  $ renice          : int NA
[16:21:12.968]  $ rshcmd          : NULL
[16:21:12.968]  $ user            : chr(0) 
[16:21:12.968]  $ revtunnel       : logi FALSE
[16:21:12.968]  $ rshlogfile      : NULL
[16:21:12.968]  $ rshopts         : chr(0) 
[16:21:12.968]  $ rank            : int 1
[16:21:12.968]  $ manual          : logi FALSE
[16:21:12.968]  $ dryrun          : logi FALSE
[16:21:12.968]  $ quiet           : logi FALSE
[16:21:12.968]  $ setup_strategy  : chr "parallel"
[16:21:12.968]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:12.968]  $ pidfile         : chr "/tmp/RtmpshPbMJ/worker.rank=1.parallelly.parent=84599.14a7718174618.pid"
[16:21:12.968]  $ rshcmd_label    : NULL
[16:21:12.968]  $ rsh_call        : NULL
[16:21:12.968]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:21:12.968]  $ localMachine    : logi TRUE
[16:21:12.968]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:21:12.968]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:21:12.968]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:21:12.968]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:21:12.968]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:21:12.968]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:21:12.968]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:21:12.968]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:21:12.968]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:21:12.968]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:21:12.968]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:21:12.968]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:21:12.968]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:21:12.968]  $ arguments       :List of 28
[16:21:12.968]   ..$ worker          : chr "localhost"
[16:21:12.968]   ..$ master          : NULL
[16:21:12.968]   ..$ port            : int 11947
[16:21:12.968]   ..$ connectTimeout  : num 120
[16:21:12.968]   ..$ timeout         : num 2592000
[16:21:12.968]   ..$ rscript         : NULL
[16:21:12.968]   ..$ homogeneous     : NULL
[16:21:12.968]   ..$ rscript_args    : NULL
[16:21:12.968]   ..$ rscript_envs    : NULL
[16:21:12.968]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:21:12.968]   ..$ rscript_startup : NULL
[16:21:12.968]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:21:12.968]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:21:12.968]   ..$ methods         : logi TRUE
[16:21:12.968]   ..$ socketOptions   : chr "no-delay"
[16:21:12.968]   ..$ useXDR          : logi FALSE
[16:21:12.968]   ..$ outfile         : chr "/dev/null"
[16:21:12.968]   ..$ renice          : int NA
[16:21:12.968]   ..$ rshcmd          : NULL
[16:21:12.968]   ..$ user            : NULL
[16:21:12.968]   ..$ revtunnel       : logi NA
[16:21:12.968]   ..$ rshlogfile      : NULL
[16:21:12.968]   ..$ rshopts         : NULL
[16:21:12.968]   ..$ rank            : int 1
[16:21:12.968]   ..$ manual          : logi FALSE
[16:21:12.968]   ..$ dryrun          : logi FALSE
[16:21:12.968]   ..$ quiet           : logi FALSE
[16:21:12.968]   ..$ setup_strategy  : chr "parallel"
[16:21:12.968]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:21:12.989] [local output] System call to launch all workers:
[16:21:12.989] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpshPbMJ/worker.rank=1.parallelly.parent=84599.14a7718174618.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11947 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:21:12.989] [local output] Starting PSOCK main server
[16:21:12.996] [local output] Workers launched
[16:21:12.996] [local output] Waiting for workers to connect back
[16:21:12.997]  - [local output] 0 workers out of 2 ready
[16:21:13.253]  - [local output] 0 workers out of 2 ready
[16:21:13.253]  - [local output] 1 workers out of 2 ready
[16:21:13.279]  - [local output] 1 workers out of 2 ready
[16:21:13.279]  - [local output] 2 workers out of 2 ready
[16:21:13.280] [local output] Launching of workers completed
[16:21:13.280] [local output] Collecting session information from workers
[16:21:13.281] [local output]  - Worker #1 of 2
[16:21:13.281] [local output]  - Worker #2 of 2
[16:21:13.281] [local output] makeClusterPSOCK() ... done
[16:21:13.295] Packages needed by the future expression (n = 0): <none>
[16:21:13.295] Packages needed by future strategies (n = 0): <none>
[16:21:13.296] {
[16:21:13.296]     {
[16:21:13.296]         {
[16:21:13.296]             ...future.startTime <- base::Sys.time()
[16:21:13.296]             {
[16:21:13.296]                 {
[16:21:13.296]                   {
[16:21:13.296]                     {
[16:21:13.296]                       base::local({
[16:21:13.296]                         has_future <- base::requireNamespace("future", 
[16:21:13.296]                           quietly = TRUE)
[16:21:13.296]                         if (has_future) {
[16:21:13.296]                           ns <- base::getNamespace("future")
[16:21:13.296]                           version <- ns[[".package"]][["version"]]
[16:21:13.296]                           if (is.null(version)) 
[16:21:13.296]                             version <- utils::packageVersion("future")
[16:21:13.296]                         }
[16:21:13.296]                         else {
[16:21:13.296]                           version <- NULL
[16:21:13.296]                         }
[16:21:13.296]                         if (!has_future || version < "1.8.0") {
[16:21:13.296]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.296]                             "", base::R.version$version.string), 
[16:21:13.296]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.296]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.296]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.296]                               "release", "version")], collapse = " "), 
[16:21:13.296]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.296]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.296]                             info)
[16:21:13.296]                           info <- base::paste(info, collapse = "; ")
[16:21:13.296]                           if (!has_future) {
[16:21:13.296]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.296]                               info)
[16:21:13.296]                           }
[16:21:13.296]                           else {
[16:21:13.296]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.296]                               info, version)
[16:21:13.296]                           }
[16:21:13.296]                           base::stop(msg)
[16:21:13.296]                         }
[16:21:13.296]                       })
[16:21:13.296]                     }
[16:21:13.296]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.296]                     base::options(mc.cores = 1L)
[16:21:13.296]                   }
[16:21:13.296]                   ...future.strategy.old <- future::plan("list")
[16:21:13.296]                   options(future.plan = NULL)
[16:21:13.296]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.296]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.296]                 }
[16:21:13.296]                 ...future.workdir <- getwd()
[16:21:13.296]             }
[16:21:13.296]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.296]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.296]         }
[16:21:13.296]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.296]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.296]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.296]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.296]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.296]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.296]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.296]             base::names(...future.oldOptions))
[16:21:13.296]     }
[16:21:13.296]     if (FALSE) {
[16:21:13.296]     }
[16:21:13.296]     else {
[16:21:13.296]         if (TRUE) {
[16:21:13.296]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.296]                 open = "w")
[16:21:13.296]         }
[16:21:13.296]         else {
[16:21:13.296]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.296]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.296]         }
[16:21:13.296]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.296]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.296]             base::sink(type = "output", split = FALSE)
[16:21:13.296]             base::close(...future.stdout)
[16:21:13.296]         }, add = TRUE)
[16:21:13.296]     }
[16:21:13.296]     ...future.frame <- base::sys.nframe()
[16:21:13.296]     ...future.conditions <- base::list()
[16:21:13.296]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.296]     if (FALSE) {
[16:21:13.296]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.296]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.296]     }
[16:21:13.296]     ...future.result <- base::tryCatch({
[16:21:13.296]         base::withCallingHandlers({
[16:21:13.296]             ...future.value <- base::withVisible(base::local({
[16:21:13.296]                 ...future.makeSendCondition <- base::local({
[16:21:13.296]                   sendCondition <- NULL
[16:21:13.296]                   function(frame = 1L) {
[16:21:13.296]                     if (is.function(sendCondition)) 
[16:21:13.296]                       return(sendCondition)
[16:21:13.296]                     ns <- getNamespace("parallel")
[16:21:13.296]                     if (exists("sendData", mode = "function", 
[16:21:13.296]                       envir = ns)) {
[16:21:13.296]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.296]                         envir = ns)
[16:21:13.296]                       envir <- sys.frame(frame)
[16:21:13.296]                       master <- NULL
[16:21:13.296]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.296]                         !identical(envir, emptyenv())) {
[16:21:13.296]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.296]                           inherits = FALSE)) {
[16:21:13.296]                           master <- get("master", mode = "list", 
[16:21:13.296]                             envir = envir, inherits = FALSE)
[16:21:13.296]                           if (inherits(master, c("SOCKnode", 
[16:21:13.296]                             "SOCK0node"))) {
[16:21:13.296]                             sendCondition <<- function(cond) {
[16:21:13.296]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.296]                                 success = TRUE)
[16:21:13.296]                               parallel_sendData(master, data)
[16:21:13.296]                             }
[16:21:13.296]                             return(sendCondition)
[16:21:13.296]                           }
[16:21:13.296]                         }
[16:21:13.296]                         frame <- frame + 1L
[16:21:13.296]                         envir <- sys.frame(frame)
[16:21:13.296]                       }
[16:21:13.296]                     }
[16:21:13.296]                     sendCondition <<- function(cond) NULL
[16:21:13.296]                   }
[16:21:13.296]                 })
[16:21:13.296]                 withCallingHandlers({
[16:21:13.296]                   NA
[16:21:13.296]                 }, immediateCondition = function(cond) {
[16:21:13.296]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.296]                   sendCondition(cond)
[16:21:13.296]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.296]                   {
[16:21:13.296]                     inherits <- base::inherits
[16:21:13.296]                     invokeRestart <- base::invokeRestart
[16:21:13.296]                     is.null <- base::is.null
[16:21:13.296]                     muffled <- FALSE
[16:21:13.296]                     if (inherits(cond, "message")) {
[16:21:13.296]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.296]                       if (muffled) 
[16:21:13.296]                         invokeRestart("muffleMessage")
[16:21:13.296]                     }
[16:21:13.296]                     else if (inherits(cond, "warning")) {
[16:21:13.296]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.296]                       if (muffled) 
[16:21:13.296]                         invokeRestart("muffleWarning")
[16:21:13.296]                     }
[16:21:13.296]                     else if (inherits(cond, "condition")) {
[16:21:13.296]                       if (!is.null(pattern)) {
[16:21:13.296]                         computeRestarts <- base::computeRestarts
[16:21:13.296]                         grepl <- base::grepl
[16:21:13.296]                         restarts <- computeRestarts(cond)
[16:21:13.296]                         for (restart in restarts) {
[16:21:13.296]                           name <- restart$name
[16:21:13.296]                           if (is.null(name)) 
[16:21:13.296]                             next
[16:21:13.296]                           if (!grepl(pattern, name)) 
[16:21:13.296]                             next
[16:21:13.296]                           invokeRestart(restart)
[16:21:13.296]                           muffled <- TRUE
[16:21:13.296]                           break
[16:21:13.296]                         }
[16:21:13.296]                       }
[16:21:13.296]                     }
[16:21:13.296]                     invisible(muffled)
[16:21:13.296]                   }
[16:21:13.296]                   muffleCondition(cond)
[16:21:13.296]                 })
[16:21:13.296]             }))
[16:21:13.296]             future::FutureResult(value = ...future.value$value, 
[16:21:13.296]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.296]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.296]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.296]                     ...future.globalenv.names))
[16:21:13.296]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.296]         }, condition = base::local({
[16:21:13.296]             c <- base::c
[16:21:13.296]             inherits <- base::inherits
[16:21:13.296]             invokeRestart <- base::invokeRestart
[16:21:13.296]             length <- base::length
[16:21:13.296]             list <- base::list
[16:21:13.296]             seq.int <- base::seq.int
[16:21:13.296]             signalCondition <- base::signalCondition
[16:21:13.296]             sys.calls <- base::sys.calls
[16:21:13.296]             `[[` <- base::`[[`
[16:21:13.296]             `+` <- base::`+`
[16:21:13.296]             `<<-` <- base::`<<-`
[16:21:13.296]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.296]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.296]                   3L)]
[16:21:13.296]             }
[16:21:13.296]             function(cond) {
[16:21:13.296]                 is_error <- inherits(cond, "error")
[16:21:13.296]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.296]                   NULL)
[16:21:13.296]                 if (is_error) {
[16:21:13.296]                   sessionInformation <- function() {
[16:21:13.296]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.296]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.296]                       search = base::search(), system = base::Sys.info())
[16:21:13.296]                   }
[16:21:13.296]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.296]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.296]                     cond$call), session = sessionInformation(), 
[16:21:13.296]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.296]                   signalCondition(cond)
[16:21:13.296]                 }
[16:21:13.296]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.296]                 "immediateCondition"))) {
[16:21:13.296]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.296]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.296]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.296]                   if (TRUE && !signal) {
[16:21:13.296]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.296]                     {
[16:21:13.296]                       inherits <- base::inherits
[16:21:13.296]                       invokeRestart <- base::invokeRestart
[16:21:13.296]                       is.null <- base::is.null
[16:21:13.296]                       muffled <- FALSE
[16:21:13.296]                       if (inherits(cond, "message")) {
[16:21:13.296]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.296]                         if (muffled) 
[16:21:13.296]                           invokeRestart("muffleMessage")
[16:21:13.296]                       }
[16:21:13.296]                       else if (inherits(cond, "warning")) {
[16:21:13.296]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.296]                         if (muffled) 
[16:21:13.296]                           invokeRestart("muffleWarning")
[16:21:13.296]                       }
[16:21:13.296]                       else if (inherits(cond, "condition")) {
[16:21:13.296]                         if (!is.null(pattern)) {
[16:21:13.296]                           computeRestarts <- base::computeRestarts
[16:21:13.296]                           grepl <- base::grepl
[16:21:13.296]                           restarts <- computeRestarts(cond)
[16:21:13.296]                           for (restart in restarts) {
[16:21:13.296]                             name <- restart$name
[16:21:13.296]                             if (is.null(name)) 
[16:21:13.296]                               next
[16:21:13.296]                             if (!grepl(pattern, name)) 
[16:21:13.296]                               next
[16:21:13.296]                             invokeRestart(restart)
[16:21:13.296]                             muffled <- TRUE
[16:21:13.296]                             break
[16:21:13.296]                           }
[16:21:13.296]                         }
[16:21:13.296]                       }
[16:21:13.296]                       invisible(muffled)
[16:21:13.296]                     }
[16:21:13.296]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.296]                   }
[16:21:13.296]                 }
[16:21:13.296]                 else {
[16:21:13.296]                   if (TRUE) {
[16:21:13.296]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.296]                     {
[16:21:13.296]                       inherits <- base::inherits
[16:21:13.296]                       invokeRestart <- base::invokeRestart
[16:21:13.296]                       is.null <- base::is.null
[16:21:13.296]                       muffled <- FALSE
[16:21:13.296]                       if (inherits(cond, "message")) {
[16:21:13.296]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.296]                         if (muffled) 
[16:21:13.296]                           invokeRestart("muffleMessage")
[16:21:13.296]                       }
[16:21:13.296]                       else if (inherits(cond, "warning")) {
[16:21:13.296]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.296]                         if (muffled) 
[16:21:13.296]                           invokeRestart("muffleWarning")
[16:21:13.296]                       }
[16:21:13.296]                       else if (inherits(cond, "condition")) {
[16:21:13.296]                         if (!is.null(pattern)) {
[16:21:13.296]                           computeRestarts <- base::computeRestarts
[16:21:13.296]                           grepl <- base::grepl
[16:21:13.296]                           restarts <- computeRestarts(cond)
[16:21:13.296]                           for (restart in restarts) {
[16:21:13.296]                             name <- restart$name
[16:21:13.296]                             if (is.null(name)) 
[16:21:13.296]                               next
[16:21:13.296]                             if (!grepl(pattern, name)) 
[16:21:13.296]                               next
[16:21:13.296]                             invokeRestart(restart)
[16:21:13.296]                             muffled <- TRUE
[16:21:13.296]                             break
[16:21:13.296]                           }
[16:21:13.296]                         }
[16:21:13.296]                       }
[16:21:13.296]                       invisible(muffled)
[16:21:13.296]                     }
[16:21:13.296]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.296]                   }
[16:21:13.296]                 }
[16:21:13.296]             }
[16:21:13.296]         }))
[16:21:13.296]     }, error = function(ex) {
[16:21:13.296]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.296]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.296]                 ...future.rng), started = ...future.startTime, 
[16:21:13.296]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.296]             version = "1.8"), class = "FutureResult")
[16:21:13.296]     }, finally = {
[16:21:13.296]         if (!identical(...future.workdir, getwd())) 
[16:21:13.296]             setwd(...future.workdir)
[16:21:13.296]         {
[16:21:13.296]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.296]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.296]             }
[16:21:13.296]             base::options(...future.oldOptions)
[16:21:13.296]             if (.Platform$OS.type == "windows") {
[16:21:13.296]                 old_names <- names(...future.oldEnvVars)
[16:21:13.296]                 envs <- base::Sys.getenv()
[16:21:13.296]                 names <- names(envs)
[16:21:13.296]                 common <- intersect(names, old_names)
[16:21:13.296]                 added <- setdiff(names, old_names)
[16:21:13.296]                 removed <- setdiff(old_names, names)
[16:21:13.296]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.296]                   envs[common]]
[16:21:13.296]                 NAMES <- toupper(changed)
[16:21:13.296]                 args <- list()
[16:21:13.296]                 for (kk in seq_along(NAMES)) {
[16:21:13.296]                   name <- changed[[kk]]
[16:21:13.296]                   NAME <- NAMES[[kk]]
[16:21:13.296]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.296]                     next
[16:21:13.296]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.296]                 }
[16:21:13.296]                 NAMES <- toupper(added)
[16:21:13.296]                 for (kk in seq_along(NAMES)) {
[16:21:13.296]                   name <- added[[kk]]
[16:21:13.296]                   NAME <- NAMES[[kk]]
[16:21:13.296]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.296]                     next
[16:21:13.296]                   args[[name]] <- ""
[16:21:13.296]                 }
[16:21:13.296]                 NAMES <- toupper(removed)
[16:21:13.296]                 for (kk in seq_along(NAMES)) {
[16:21:13.296]                   name <- removed[[kk]]
[16:21:13.296]                   NAME <- NAMES[[kk]]
[16:21:13.296]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.296]                     next
[16:21:13.296]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.296]                 }
[16:21:13.296]                 if (length(args) > 0) 
[16:21:13.296]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.296]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.296]             }
[16:21:13.296]             else {
[16:21:13.296]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.296]             }
[16:21:13.296]             {
[16:21:13.296]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.296]                   0L) {
[16:21:13.296]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.296]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.296]                   base::options(opts)
[16:21:13.296]                 }
[16:21:13.296]                 {
[16:21:13.296]                   {
[16:21:13.296]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.296]                     NULL
[16:21:13.296]                   }
[16:21:13.296]                   options(future.plan = NULL)
[16:21:13.296]                   if (is.na(NA_character_)) 
[16:21:13.296]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.296]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.296]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.296]                     .init = FALSE)
[16:21:13.296]                 }
[16:21:13.296]             }
[16:21:13.296]         }
[16:21:13.296]     })
[16:21:13.296]     if (TRUE) {
[16:21:13.296]         base::sink(type = "output", split = FALSE)
[16:21:13.296]         if (TRUE) {
[16:21:13.296]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.296]         }
[16:21:13.296]         else {
[16:21:13.296]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.296]         }
[16:21:13.296]         base::close(...future.stdout)
[16:21:13.296]         ...future.stdout <- NULL
[16:21:13.296]     }
[16:21:13.296]     ...future.result$conditions <- ...future.conditions
[16:21:13.296]     ...future.result$finished <- base::Sys.time()
[16:21:13.296]     ...future.result
[16:21:13.296] }
[16:21:13.350] MultisessionFuture started
[16:21:13.350] result() for ClusterFuture ...
[16:21:13.351] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.351] - Validating connection of MultisessionFuture
[16:21:13.383] - received message: FutureResult
[16:21:13.383] - Received FutureResult
[16:21:13.386] - Erased future from FutureRegistry
[16:21:13.387] result() for ClusterFuture ...
[16:21:13.387] - result already collected: FutureResult
[16:21:13.387] result() for ClusterFuture ... done
[16:21:13.387] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.387] result() for ClusterFuture ... done
[16:21:13.387] result() for ClusterFuture ...
[16:21:13.387] - result already collected: FutureResult
[16:21:13.388] result() for ClusterFuture ... done
[16:21:13.388] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:21:13.388] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 1f51aea7-2843-34b8-e732-01ee48f25949
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[16:21:13.389] getGlobalsAndPackages() ...
[16:21:13.389] Searching for globals...
[16:21:13.397] - globals found: [2] ‘{’, ‘:::’
[16:21:13.397] Searching for globals ... DONE
[16:21:13.397] Resolving globals: FALSE
[16:21:13.398] 
[16:21:13.398] 
[16:21:13.398] getGlobalsAndPackages() ... DONE
[16:21:13.398] run() for ‘Future’ ...
[16:21:13.399] - state: ‘created’
[16:21:13.399] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.410] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.410] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.410]   - Field: ‘node’
[16:21:13.410]   - Field: ‘label’
[16:21:13.410]   - Field: ‘local’
[16:21:13.410]   - Field: ‘owner’
[16:21:13.411]   - Field: ‘envir’
[16:21:13.411]   - Field: ‘workers’
[16:21:13.411]   - Field: ‘packages’
[16:21:13.411]   - Field: ‘gc’
[16:21:13.411]   - Field: ‘conditions’
[16:21:13.411]   - Field: ‘persistent’
[16:21:13.411]   - Field: ‘expr’
[16:21:13.411]   - Field: ‘uuid’
[16:21:13.411]   - Field: ‘seed’
[16:21:13.412]   - Field: ‘version’
[16:21:13.412]   - Field: ‘result’
[16:21:13.412]   - Field: ‘asynchronous’
[16:21:13.412]   - Field: ‘calls’
[16:21:13.412]   - Field: ‘globals’
[16:21:13.412]   - Field: ‘stdout’
[16:21:13.412]   - Field: ‘earlySignal’
[16:21:13.412]   - Field: ‘lazy’
[16:21:13.413]   - Field: ‘state’
[16:21:13.413] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.413] - Launch lazy future ...
[16:21:13.413] Packages needed by the future expression (n = 0): <none>
[16:21:13.413] Packages needed by future strategies (n = 0): <none>
[16:21:13.414] {
[16:21:13.414]     {
[16:21:13.414]         {
[16:21:13.414]             ...future.startTime <- base::Sys.time()
[16:21:13.414]             {
[16:21:13.414]                 {
[16:21:13.414]                   {
[16:21:13.414]                     {
[16:21:13.414]                       base::local({
[16:21:13.414]                         has_future <- base::requireNamespace("future", 
[16:21:13.414]                           quietly = TRUE)
[16:21:13.414]                         if (has_future) {
[16:21:13.414]                           ns <- base::getNamespace("future")
[16:21:13.414]                           version <- ns[[".package"]][["version"]]
[16:21:13.414]                           if (is.null(version)) 
[16:21:13.414]                             version <- utils::packageVersion("future")
[16:21:13.414]                         }
[16:21:13.414]                         else {
[16:21:13.414]                           version <- NULL
[16:21:13.414]                         }
[16:21:13.414]                         if (!has_future || version < "1.8.0") {
[16:21:13.414]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.414]                             "", base::R.version$version.string), 
[16:21:13.414]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.414]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.414]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.414]                               "release", "version")], collapse = " "), 
[16:21:13.414]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.414]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.414]                             info)
[16:21:13.414]                           info <- base::paste(info, collapse = "; ")
[16:21:13.414]                           if (!has_future) {
[16:21:13.414]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.414]                               info)
[16:21:13.414]                           }
[16:21:13.414]                           else {
[16:21:13.414]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.414]                               info, version)
[16:21:13.414]                           }
[16:21:13.414]                           base::stop(msg)
[16:21:13.414]                         }
[16:21:13.414]                       })
[16:21:13.414]                     }
[16:21:13.414]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.414]                     base::options(mc.cores = 1L)
[16:21:13.414]                   }
[16:21:13.414]                   ...future.strategy.old <- future::plan("list")
[16:21:13.414]                   options(future.plan = NULL)
[16:21:13.414]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.414]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.414]                 }
[16:21:13.414]                 ...future.workdir <- getwd()
[16:21:13.414]             }
[16:21:13.414]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.414]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.414]         }
[16:21:13.414]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.414]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.414]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.414]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.414]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.414]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.414]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.414]             base::names(...future.oldOptions))
[16:21:13.414]     }
[16:21:13.414]     if (FALSE) {
[16:21:13.414]     }
[16:21:13.414]     else {
[16:21:13.414]         if (TRUE) {
[16:21:13.414]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.414]                 open = "w")
[16:21:13.414]         }
[16:21:13.414]         else {
[16:21:13.414]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.414]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.414]         }
[16:21:13.414]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.414]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.414]             base::sink(type = "output", split = FALSE)
[16:21:13.414]             base::close(...future.stdout)
[16:21:13.414]         }, add = TRUE)
[16:21:13.414]     }
[16:21:13.414]     ...future.frame <- base::sys.nframe()
[16:21:13.414]     ...future.conditions <- base::list()
[16:21:13.414]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.414]     if (FALSE) {
[16:21:13.414]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.414]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.414]     }
[16:21:13.414]     ...future.result <- base::tryCatch({
[16:21:13.414]         base::withCallingHandlers({
[16:21:13.414]             ...future.value <- base::withVisible(base::local({
[16:21:13.414]                 ...future.makeSendCondition <- base::local({
[16:21:13.414]                   sendCondition <- NULL
[16:21:13.414]                   function(frame = 1L) {
[16:21:13.414]                     if (is.function(sendCondition)) 
[16:21:13.414]                       return(sendCondition)
[16:21:13.414]                     ns <- getNamespace("parallel")
[16:21:13.414]                     if (exists("sendData", mode = "function", 
[16:21:13.414]                       envir = ns)) {
[16:21:13.414]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.414]                         envir = ns)
[16:21:13.414]                       envir <- sys.frame(frame)
[16:21:13.414]                       master <- NULL
[16:21:13.414]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.414]                         !identical(envir, emptyenv())) {
[16:21:13.414]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.414]                           inherits = FALSE)) {
[16:21:13.414]                           master <- get("master", mode = "list", 
[16:21:13.414]                             envir = envir, inherits = FALSE)
[16:21:13.414]                           if (inherits(master, c("SOCKnode", 
[16:21:13.414]                             "SOCK0node"))) {
[16:21:13.414]                             sendCondition <<- function(cond) {
[16:21:13.414]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.414]                                 success = TRUE)
[16:21:13.414]                               parallel_sendData(master, data)
[16:21:13.414]                             }
[16:21:13.414]                             return(sendCondition)
[16:21:13.414]                           }
[16:21:13.414]                         }
[16:21:13.414]                         frame <- frame + 1L
[16:21:13.414]                         envir <- sys.frame(frame)
[16:21:13.414]                       }
[16:21:13.414]                     }
[16:21:13.414]                     sendCondition <<- function(cond) NULL
[16:21:13.414]                   }
[16:21:13.414]                 })
[16:21:13.414]                 withCallingHandlers({
[16:21:13.414]                   {
[16:21:13.414]                     future:::session_uuid(attributes = TRUE)
[16:21:13.414]                   }
[16:21:13.414]                 }, immediateCondition = function(cond) {
[16:21:13.414]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.414]                   sendCondition(cond)
[16:21:13.414]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.414]                   {
[16:21:13.414]                     inherits <- base::inherits
[16:21:13.414]                     invokeRestart <- base::invokeRestart
[16:21:13.414]                     is.null <- base::is.null
[16:21:13.414]                     muffled <- FALSE
[16:21:13.414]                     if (inherits(cond, "message")) {
[16:21:13.414]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.414]                       if (muffled) 
[16:21:13.414]                         invokeRestart("muffleMessage")
[16:21:13.414]                     }
[16:21:13.414]                     else if (inherits(cond, "warning")) {
[16:21:13.414]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.414]                       if (muffled) 
[16:21:13.414]                         invokeRestart("muffleWarning")
[16:21:13.414]                     }
[16:21:13.414]                     else if (inherits(cond, "condition")) {
[16:21:13.414]                       if (!is.null(pattern)) {
[16:21:13.414]                         computeRestarts <- base::computeRestarts
[16:21:13.414]                         grepl <- base::grepl
[16:21:13.414]                         restarts <- computeRestarts(cond)
[16:21:13.414]                         for (restart in restarts) {
[16:21:13.414]                           name <- restart$name
[16:21:13.414]                           if (is.null(name)) 
[16:21:13.414]                             next
[16:21:13.414]                           if (!grepl(pattern, name)) 
[16:21:13.414]                             next
[16:21:13.414]                           invokeRestart(restart)
[16:21:13.414]                           muffled <- TRUE
[16:21:13.414]                           break
[16:21:13.414]                         }
[16:21:13.414]                       }
[16:21:13.414]                     }
[16:21:13.414]                     invisible(muffled)
[16:21:13.414]                   }
[16:21:13.414]                   muffleCondition(cond)
[16:21:13.414]                 })
[16:21:13.414]             }))
[16:21:13.414]             future::FutureResult(value = ...future.value$value, 
[16:21:13.414]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.414]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.414]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.414]                     ...future.globalenv.names))
[16:21:13.414]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.414]         }, condition = base::local({
[16:21:13.414]             c <- base::c
[16:21:13.414]             inherits <- base::inherits
[16:21:13.414]             invokeRestart <- base::invokeRestart
[16:21:13.414]             length <- base::length
[16:21:13.414]             list <- base::list
[16:21:13.414]             seq.int <- base::seq.int
[16:21:13.414]             signalCondition <- base::signalCondition
[16:21:13.414]             sys.calls <- base::sys.calls
[16:21:13.414]             `[[` <- base::`[[`
[16:21:13.414]             `+` <- base::`+`
[16:21:13.414]             `<<-` <- base::`<<-`
[16:21:13.414]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.414]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.414]                   3L)]
[16:21:13.414]             }
[16:21:13.414]             function(cond) {
[16:21:13.414]                 is_error <- inherits(cond, "error")
[16:21:13.414]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.414]                   NULL)
[16:21:13.414]                 if (is_error) {
[16:21:13.414]                   sessionInformation <- function() {
[16:21:13.414]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.414]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.414]                       search = base::search(), system = base::Sys.info())
[16:21:13.414]                   }
[16:21:13.414]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.414]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.414]                     cond$call), session = sessionInformation(), 
[16:21:13.414]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.414]                   signalCondition(cond)
[16:21:13.414]                 }
[16:21:13.414]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.414]                 "immediateCondition"))) {
[16:21:13.414]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.414]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.414]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.414]                   if (TRUE && !signal) {
[16:21:13.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.414]                     {
[16:21:13.414]                       inherits <- base::inherits
[16:21:13.414]                       invokeRestart <- base::invokeRestart
[16:21:13.414]                       is.null <- base::is.null
[16:21:13.414]                       muffled <- FALSE
[16:21:13.414]                       if (inherits(cond, "message")) {
[16:21:13.414]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.414]                         if (muffled) 
[16:21:13.414]                           invokeRestart("muffleMessage")
[16:21:13.414]                       }
[16:21:13.414]                       else if (inherits(cond, "warning")) {
[16:21:13.414]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.414]                         if (muffled) 
[16:21:13.414]                           invokeRestart("muffleWarning")
[16:21:13.414]                       }
[16:21:13.414]                       else if (inherits(cond, "condition")) {
[16:21:13.414]                         if (!is.null(pattern)) {
[16:21:13.414]                           computeRestarts <- base::computeRestarts
[16:21:13.414]                           grepl <- base::grepl
[16:21:13.414]                           restarts <- computeRestarts(cond)
[16:21:13.414]                           for (restart in restarts) {
[16:21:13.414]                             name <- restart$name
[16:21:13.414]                             if (is.null(name)) 
[16:21:13.414]                               next
[16:21:13.414]                             if (!grepl(pattern, name)) 
[16:21:13.414]                               next
[16:21:13.414]                             invokeRestart(restart)
[16:21:13.414]                             muffled <- TRUE
[16:21:13.414]                             break
[16:21:13.414]                           }
[16:21:13.414]                         }
[16:21:13.414]                       }
[16:21:13.414]                       invisible(muffled)
[16:21:13.414]                     }
[16:21:13.414]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.414]                   }
[16:21:13.414]                 }
[16:21:13.414]                 else {
[16:21:13.414]                   if (TRUE) {
[16:21:13.414]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.414]                     {
[16:21:13.414]                       inherits <- base::inherits
[16:21:13.414]                       invokeRestart <- base::invokeRestart
[16:21:13.414]                       is.null <- base::is.null
[16:21:13.414]                       muffled <- FALSE
[16:21:13.414]                       if (inherits(cond, "message")) {
[16:21:13.414]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.414]                         if (muffled) 
[16:21:13.414]                           invokeRestart("muffleMessage")
[16:21:13.414]                       }
[16:21:13.414]                       else if (inherits(cond, "warning")) {
[16:21:13.414]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.414]                         if (muffled) 
[16:21:13.414]                           invokeRestart("muffleWarning")
[16:21:13.414]                       }
[16:21:13.414]                       else if (inherits(cond, "condition")) {
[16:21:13.414]                         if (!is.null(pattern)) {
[16:21:13.414]                           computeRestarts <- base::computeRestarts
[16:21:13.414]                           grepl <- base::grepl
[16:21:13.414]                           restarts <- computeRestarts(cond)
[16:21:13.414]                           for (restart in restarts) {
[16:21:13.414]                             name <- restart$name
[16:21:13.414]                             if (is.null(name)) 
[16:21:13.414]                               next
[16:21:13.414]                             if (!grepl(pattern, name)) 
[16:21:13.414]                               next
[16:21:13.414]                             invokeRestart(restart)
[16:21:13.414]                             muffled <- TRUE
[16:21:13.414]                             break
[16:21:13.414]                           }
[16:21:13.414]                         }
[16:21:13.414]                       }
[16:21:13.414]                       invisible(muffled)
[16:21:13.414]                     }
[16:21:13.414]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.414]                   }
[16:21:13.414]                 }
[16:21:13.414]             }
[16:21:13.414]         }))
[16:21:13.414]     }, error = function(ex) {
[16:21:13.414]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.414]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.414]                 ...future.rng), started = ...future.startTime, 
[16:21:13.414]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.414]             version = "1.8"), class = "FutureResult")
[16:21:13.414]     }, finally = {
[16:21:13.414]         if (!identical(...future.workdir, getwd())) 
[16:21:13.414]             setwd(...future.workdir)
[16:21:13.414]         {
[16:21:13.414]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.414]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.414]             }
[16:21:13.414]             base::options(...future.oldOptions)
[16:21:13.414]             if (.Platform$OS.type == "windows") {
[16:21:13.414]                 old_names <- names(...future.oldEnvVars)
[16:21:13.414]                 envs <- base::Sys.getenv()
[16:21:13.414]                 names <- names(envs)
[16:21:13.414]                 common <- intersect(names, old_names)
[16:21:13.414]                 added <- setdiff(names, old_names)
[16:21:13.414]                 removed <- setdiff(old_names, names)
[16:21:13.414]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.414]                   envs[common]]
[16:21:13.414]                 NAMES <- toupper(changed)
[16:21:13.414]                 args <- list()
[16:21:13.414]                 for (kk in seq_along(NAMES)) {
[16:21:13.414]                   name <- changed[[kk]]
[16:21:13.414]                   NAME <- NAMES[[kk]]
[16:21:13.414]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.414]                     next
[16:21:13.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.414]                 }
[16:21:13.414]                 NAMES <- toupper(added)
[16:21:13.414]                 for (kk in seq_along(NAMES)) {
[16:21:13.414]                   name <- added[[kk]]
[16:21:13.414]                   NAME <- NAMES[[kk]]
[16:21:13.414]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.414]                     next
[16:21:13.414]                   args[[name]] <- ""
[16:21:13.414]                 }
[16:21:13.414]                 NAMES <- toupper(removed)
[16:21:13.414]                 for (kk in seq_along(NAMES)) {
[16:21:13.414]                   name <- removed[[kk]]
[16:21:13.414]                   NAME <- NAMES[[kk]]
[16:21:13.414]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.414]                     next
[16:21:13.414]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.414]                 }
[16:21:13.414]                 if (length(args) > 0) 
[16:21:13.414]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.414]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.414]             }
[16:21:13.414]             else {
[16:21:13.414]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.414]             }
[16:21:13.414]             {
[16:21:13.414]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.414]                   0L) {
[16:21:13.414]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.414]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.414]                   base::options(opts)
[16:21:13.414]                 }
[16:21:13.414]                 {
[16:21:13.414]                   {
[16:21:13.414]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.414]                     NULL
[16:21:13.414]                   }
[16:21:13.414]                   options(future.plan = NULL)
[16:21:13.414]                   if (is.na(NA_character_)) 
[16:21:13.414]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.414]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.414]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.414]                     .init = FALSE)
[16:21:13.414]                 }
[16:21:13.414]             }
[16:21:13.414]         }
[16:21:13.414]     })
[16:21:13.414]     if (TRUE) {
[16:21:13.414]         base::sink(type = "output", split = FALSE)
[16:21:13.414]         if (TRUE) {
[16:21:13.414]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.414]         }
[16:21:13.414]         else {
[16:21:13.414]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.414]         }
[16:21:13.414]         base::close(...future.stdout)
[16:21:13.414]         ...future.stdout <- NULL
[16:21:13.414]     }
[16:21:13.414]     ...future.result$conditions <- ...future.conditions
[16:21:13.414]     ...future.result$finished <- base::Sys.time()
[16:21:13.414]     ...future.result
[16:21:13.414] }
[16:21:13.417] MultisessionFuture started
[16:21:13.417] - Launch lazy future ... done
[16:21:13.417] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[16:21:13.418] result() for ClusterFuture ...
[16:21:13.418] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.418] - Validating connection of MultisessionFuture
[16:21:13.423] - received message: FutureResult
[16:21:13.423] - Received FutureResult
[16:21:13.423] - Erased future from FutureRegistry
[16:21:13.423] result() for ClusterFuture ...
[16:21:13.423] - result already collected: FutureResult
[16:21:13.423] result() for ClusterFuture ... done
[16:21:13.423] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.424] result() for ClusterFuture ... done
[16:21:13.424] result() for ClusterFuture ...
[16:21:13.424] - result already collected: FutureResult
[16:21:13.424] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 8e6bb5ea-dbbf-8549-9dd0-5321f4e1865e
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[16:21:13.424] getGlobalsAndPackages() ...
[16:21:13.424] Searching for globals...
[16:21:13.426] - globals found: [2] ‘{’, ‘:::’
[16:21:13.426] Searching for globals ... DONE
[16:21:13.426] Resolving globals: FALSE
[16:21:13.426] 
[16:21:13.426] 
[16:21:13.426] getGlobalsAndPackages() ... DONE
[16:21:13.427] run() for ‘Future’ ...
[16:21:13.427] - state: ‘created’
[16:21:13.427] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.438] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.438] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.438]   - Field: ‘node’
[16:21:13.439]   - Field: ‘label’
[16:21:13.439]   - Field: ‘local’
[16:21:13.439]   - Field: ‘owner’
[16:21:13.442]   - Field: ‘envir’
[16:21:13.442]   - Field: ‘workers’
[16:21:13.442]   - Field: ‘packages’
[16:21:13.442]   - Field: ‘gc’
[16:21:13.442]   - Field: ‘conditions’
[16:21:13.442]   - Field: ‘persistent’
[16:21:13.442]   - Field: ‘expr’
[16:21:13.442]   - Field: ‘uuid’
[16:21:13.442]   - Field: ‘seed’
[16:21:13.443]   - Field: ‘version’
[16:21:13.443]   - Field: ‘result’
[16:21:13.443]   - Field: ‘asynchronous’
[16:21:13.443]   - Field: ‘calls’
[16:21:13.443]   - Field: ‘globals’
[16:21:13.443]   - Field: ‘stdout’
[16:21:13.443]   - Field: ‘earlySignal’
[16:21:13.443]   - Field: ‘lazy’
[16:21:13.443]   - Field: ‘state’
[16:21:13.443] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.443] - Launch lazy future ...
[16:21:13.444] Packages needed by the future expression (n = 0): <none>
[16:21:13.444] Packages needed by future strategies (n = 0): <none>
[16:21:13.444] {
[16:21:13.444]     {
[16:21:13.444]         {
[16:21:13.444]             ...future.startTime <- base::Sys.time()
[16:21:13.444]             {
[16:21:13.444]                 {
[16:21:13.444]                   {
[16:21:13.444]                     {
[16:21:13.444]                       base::local({
[16:21:13.444]                         has_future <- base::requireNamespace("future", 
[16:21:13.444]                           quietly = TRUE)
[16:21:13.444]                         if (has_future) {
[16:21:13.444]                           ns <- base::getNamespace("future")
[16:21:13.444]                           version <- ns[[".package"]][["version"]]
[16:21:13.444]                           if (is.null(version)) 
[16:21:13.444]                             version <- utils::packageVersion("future")
[16:21:13.444]                         }
[16:21:13.444]                         else {
[16:21:13.444]                           version <- NULL
[16:21:13.444]                         }
[16:21:13.444]                         if (!has_future || version < "1.8.0") {
[16:21:13.444]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.444]                             "", base::R.version$version.string), 
[16:21:13.444]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.444]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.444]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.444]                               "release", "version")], collapse = " "), 
[16:21:13.444]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.444]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.444]                             info)
[16:21:13.444]                           info <- base::paste(info, collapse = "; ")
[16:21:13.444]                           if (!has_future) {
[16:21:13.444]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.444]                               info)
[16:21:13.444]                           }
[16:21:13.444]                           else {
[16:21:13.444]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.444]                               info, version)
[16:21:13.444]                           }
[16:21:13.444]                           base::stop(msg)
[16:21:13.444]                         }
[16:21:13.444]                       })
[16:21:13.444]                     }
[16:21:13.444]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.444]                     base::options(mc.cores = 1L)
[16:21:13.444]                   }
[16:21:13.444]                   ...future.strategy.old <- future::plan("list")
[16:21:13.444]                   options(future.plan = NULL)
[16:21:13.444]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.444]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.444]                 }
[16:21:13.444]                 ...future.workdir <- getwd()
[16:21:13.444]             }
[16:21:13.444]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.444]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.444]         }
[16:21:13.444]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.444]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.444]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.444]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.444]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.444]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.444]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.444]             base::names(...future.oldOptions))
[16:21:13.444]     }
[16:21:13.444]     if (FALSE) {
[16:21:13.444]     }
[16:21:13.444]     else {
[16:21:13.444]         if (TRUE) {
[16:21:13.444]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.444]                 open = "w")
[16:21:13.444]         }
[16:21:13.444]         else {
[16:21:13.444]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.444]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.444]         }
[16:21:13.444]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.444]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.444]             base::sink(type = "output", split = FALSE)
[16:21:13.444]             base::close(...future.stdout)
[16:21:13.444]         }, add = TRUE)
[16:21:13.444]     }
[16:21:13.444]     ...future.frame <- base::sys.nframe()
[16:21:13.444]     ...future.conditions <- base::list()
[16:21:13.444]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.444]     if (FALSE) {
[16:21:13.444]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.444]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.444]     }
[16:21:13.444]     ...future.result <- base::tryCatch({
[16:21:13.444]         base::withCallingHandlers({
[16:21:13.444]             ...future.value <- base::withVisible(base::local({
[16:21:13.444]                 ...future.makeSendCondition <- base::local({
[16:21:13.444]                   sendCondition <- NULL
[16:21:13.444]                   function(frame = 1L) {
[16:21:13.444]                     if (is.function(sendCondition)) 
[16:21:13.444]                       return(sendCondition)
[16:21:13.444]                     ns <- getNamespace("parallel")
[16:21:13.444]                     if (exists("sendData", mode = "function", 
[16:21:13.444]                       envir = ns)) {
[16:21:13.444]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.444]                         envir = ns)
[16:21:13.444]                       envir <- sys.frame(frame)
[16:21:13.444]                       master <- NULL
[16:21:13.444]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.444]                         !identical(envir, emptyenv())) {
[16:21:13.444]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.444]                           inherits = FALSE)) {
[16:21:13.444]                           master <- get("master", mode = "list", 
[16:21:13.444]                             envir = envir, inherits = FALSE)
[16:21:13.444]                           if (inherits(master, c("SOCKnode", 
[16:21:13.444]                             "SOCK0node"))) {
[16:21:13.444]                             sendCondition <<- function(cond) {
[16:21:13.444]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.444]                                 success = TRUE)
[16:21:13.444]                               parallel_sendData(master, data)
[16:21:13.444]                             }
[16:21:13.444]                             return(sendCondition)
[16:21:13.444]                           }
[16:21:13.444]                         }
[16:21:13.444]                         frame <- frame + 1L
[16:21:13.444]                         envir <- sys.frame(frame)
[16:21:13.444]                       }
[16:21:13.444]                     }
[16:21:13.444]                     sendCondition <<- function(cond) NULL
[16:21:13.444]                   }
[16:21:13.444]                 })
[16:21:13.444]                 withCallingHandlers({
[16:21:13.444]                   {
[16:21:13.444]                     future:::session_uuid(attributes = TRUE)
[16:21:13.444]                   }
[16:21:13.444]                 }, immediateCondition = function(cond) {
[16:21:13.444]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.444]                   sendCondition(cond)
[16:21:13.444]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.444]                   {
[16:21:13.444]                     inherits <- base::inherits
[16:21:13.444]                     invokeRestart <- base::invokeRestart
[16:21:13.444]                     is.null <- base::is.null
[16:21:13.444]                     muffled <- FALSE
[16:21:13.444]                     if (inherits(cond, "message")) {
[16:21:13.444]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.444]                       if (muffled) 
[16:21:13.444]                         invokeRestart("muffleMessage")
[16:21:13.444]                     }
[16:21:13.444]                     else if (inherits(cond, "warning")) {
[16:21:13.444]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.444]                       if (muffled) 
[16:21:13.444]                         invokeRestart("muffleWarning")
[16:21:13.444]                     }
[16:21:13.444]                     else if (inherits(cond, "condition")) {
[16:21:13.444]                       if (!is.null(pattern)) {
[16:21:13.444]                         computeRestarts <- base::computeRestarts
[16:21:13.444]                         grepl <- base::grepl
[16:21:13.444]                         restarts <- computeRestarts(cond)
[16:21:13.444]                         for (restart in restarts) {
[16:21:13.444]                           name <- restart$name
[16:21:13.444]                           if (is.null(name)) 
[16:21:13.444]                             next
[16:21:13.444]                           if (!grepl(pattern, name)) 
[16:21:13.444]                             next
[16:21:13.444]                           invokeRestart(restart)
[16:21:13.444]                           muffled <- TRUE
[16:21:13.444]                           break
[16:21:13.444]                         }
[16:21:13.444]                       }
[16:21:13.444]                     }
[16:21:13.444]                     invisible(muffled)
[16:21:13.444]                   }
[16:21:13.444]                   muffleCondition(cond)
[16:21:13.444]                 })
[16:21:13.444]             }))
[16:21:13.444]             future::FutureResult(value = ...future.value$value, 
[16:21:13.444]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.444]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.444]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.444]                     ...future.globalenv.names))
[16:21:13.444]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.444]         }, condition = base::local({
[16:21:13.444]             c <- base::c
[16:21:13.444]             inherits <- base::inherits
[16:21:13.444]             invokeRestart <- base::invokeRestart
[16:21:13.444]             length <- base::length
[16:21:13.444]             list <- base::list
[16:21:13.444]             seq.int <- base::seq.int
[16:21:13.444]             signalCondition <- base::signalCondition
[16:21:13.444]             sys.calls <- base::sys.calls
[16:21:13.444]             `[[` <- base::`[[`
[16:21:13.444]             `+` <- base::`+`
[16:21:13.444]             `<<-` <- base::`<<-`
[16:21:13.444]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.444]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.444]                   3L)]
[16:21:13.444]             }
[16:21:13.444]             function(cond) {
[16:21:13.444]                 is_error <- inherits(cond, "error")
[16:21:13.444]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.444]                   NULL)
[16:21:13.444]                 if (is_error) {
[16:21:13.444]                   sessionInformation <- function() {
[16:21:13.444]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.444]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.444]                       search = base::search(), system = base::Sys.info())
[16:21:13.444]                   }
[16:21:13.444]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.444]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.444]                     cond$call), session = sessionInformation(), 
[16:21:13.444]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.444]                   signalCondition(cond)
[16:21:13.444]                 }
[16:21:13.444]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.444]                 "immediateCondition"))) {
[16:21:13.444]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.444]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.444]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.444]                   if (TRUE && !signal) {
[16:21:13.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.444]                     {
[16:21:13.444]                       inherits <- base::inherits
[16:21:13.444]                       invokeRestart <- base::invokeRestart
[16:21:13.444]                       is.null <- base::is.null
[16:21:13.444]                       muffled <- FALSE
[16:21:13.444]                       if (inherits(cond, "message")) {
[16:21:13.444]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.444]                         if (muffled) 
[16:21:13.444]                           invokeRestart("muffleMessage")
[16:21:13.444]                       }
[16:21:13.444]                       else if (inherits(cond, "warning")) {
[16:21:13.444]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.444]                         if (muffled) 
[16:21:13.444]                           invokeRestart("muffleWarning")
[16:21:13.444]                       }
[16:21:13.444]                       else if (inherits(cond, "condition")) {
[16:21:13.444]                         if (!is.null(pattern)) {
[16:21:13.444]                           computeRestarts <- base::computeRestarts
[16:21:13.444]                           grepl <- base::grepl
[16:21:13.444]                           restarts <- computeRestarts(cond)
[16:21:13.444]                           for (restart in restarts) {
[16:21:13.444]                             name <- restart$name
[16:21:13.444]                             if (is.null(name)) 
[16:21:13.444]                               next
[16:21:13.444]                             if (!grepl(pattern, name)) 
[16:21:13.444]                               next
[16:21:13.444]                             invokeRestart(restart)
[16:21:13.444]                             muffled <- TRUE
[16:21:13.444]                             break
[16:21:13.444]                           }
[16:21:13.444]                         }
[16:21:13.444]                       }
[16:21:13.444]                       invisible(muffled)
[16:21:13.444]                     }
[16:21:13.444]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.444]                   }
[16:21:13.444]                 }
[16:21:13.444]                 else {
[16:21:13.444]                   if (TRUE) {
[16:21:13.444]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.444]                     {
[16:21:13.444]                       inherits <- base::inherits
[16:21:13.444]                       invokeRestart <- base::invokeRestart
[16:21:13.444]                       is.null <- base::is.null
[16:21:13.444]                       muffled <- FALSE
[16:21:13.444]                       if (inherits(cond, "message")) {
[16:21:13.444]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.444]                         if (muffled) 
[16:21:13.444]                           invokeRestart("muffleMessage")
[16:21:13.444]                       }
[16:21:13.444]                       else if (inherits(cond, "warning")) {
[16:21:13.444]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.444]                         if (muffled) 
[16:21:13.444]                           invokeRestart("muffleWarning")
[16:21:13.444]                       }
[16:21:13.444]                       else if (inherits(cond, "condition")) {
[16:21:13.444]                         if (!is.null(pattern)) {
[16:21:13.444]                           computeRestarts <- base::computeRestarts
[16:21:13.444]                           grepl <- base::grepl
[16:21:13.444]                           restarts <- computeRestarts(cond)
[16:21:13.444]                           for (restart in restarts) {
[16:21:13.444]                             name <- restart$name
[16:21:13.444]                             if (is.null(name)) 
[16:21:13.444]                               next
[16:21:13.444]                             if (!grepl(pattern, name)) 
[16:21:13.444]                               next
[16:21:13.444]                             invokeRestart(restart)
[16:21:13.444]                             muffled <- TRUE
[16:21:13.444]                             break
[16:21:13.444]                           }
[16:21:13.444]                         }
[16:21:13.444]                       }
[16:21:13.444]                       invisible(muffled)
[16:21:13.444]                     }
[16:21:13.444]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.444]                   }
[16:21:13.444]                 }
[16:21:13.444]             }
[16:21:13.444]         }))
[16:21:13.444]     }, error = function(ex) {
[16:21:13.444]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.444]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.444]                 ...future.rng), started = ...future.startTime, 
[16:21:13.444]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.444]             version = "1.8"), class = "FutureResult")
[16:21:13.444]     }, finally = {
[16:21:13.444]         if (!identical(...future.workdir, getwd())) 
[16:21:13.444]             setwd(...future.workdir)
[16:21:13.444]         {
[16:21:13.444]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.444]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.444]             }
[16:21:13.444]             base::options(...future.oldOptions)
[16:21:13.444]             if (.Platform$OS.type == "windows") {
[16:21:13.444]                 old_names <- names(...future.oldEnvVars)
[16:21:13.444]                 envs <- base::Sys.getenv()
[16:21:13.444]                 names <- names(envs)
[16:21:13.444]                 common <- intersect(names, old_names)
[16:21:13.444]                 added <- setdiff(names, old_names)
[16:21:13.444]                 removed <- setdiff(old_names, names)
[16:21:13.444]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.444]                   envs[common]]
[16:21:13.444]                 NAMES <- toupper(changed)
[16:21:13.444]                 args <- list()
[16:21:13.444]                 for (kk in seq_along(NAMES)) {
[16:21:13.444]                   name <- changed[[kk]]
[16:21:13.444]                   NAME <- NAMES[[kk]]
[16:21:13.444]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.444]                     next
[16:21:13.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.444]                 }
[16:21:13.444]                 NAMES <- toupper(added)
[16:21:13.444]                 for (kk in seq_along(NAMES)) {
[16:21:13.444]                   name <- added[[kk]]
[16:21:13.444]                   NAME <- NAMES[[kk]]
[16:21:13.444]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.444]                     next
[16:21:13.444]                   args[[name]] <- ""
[16:21:13.444]                 }
[16:21:13.444]                 NAMES <- toupper(removed)
[16:21:13.444]                 for (kk in seq_along(NAMES)) {
[16:21:13.444]                   name <- removed[[kk]]
[16:21:13.444]                   NAME <- NAMES[[kk]]
[16:21:13.444]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.444]                     next
[16:21:13.444]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.444]                 }
[16:21:13.444]                 if (length(args) > 0) 
[16:21:13.444]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.444]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.444]             }
[16:21:13.444]             else {
[16:21:13.444]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.444]             }
[16:21:13.444]             {
[16:21:13.444]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.444]                   0L) {
[16:21:13.444]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.444]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.444]                   base::options(opts)
[16:21:13.444]                 }
[16:21:13.444]                 {
[16:21:13.444]                   {
[16:21:13.444]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.444]                     NULL
[16:21:13.444]                   }
[16:21:13.444]                   options(future.plan = NULL)
[16:21:13.444]                   if (is.na(NA_character_)) 
[16:21:13.444]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.444]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.444]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.444]                     .init = FALSE)
[16:21:13.444]                 }
[16:21:13.444]             }
[16:21:13.444]         }
[16:21:13.444]     })
[16:21:13.444]     if (TRUE) {
[16:21:13.444]         base::sink(type = "output", split = FALSE)
[16:21:13.444]         if (TRUE) {
[16:21:13.444]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.444]         }
[16:21:13.444]         else {
[16:21:13.444]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.444]         }
[16:21:13.444]         base::close(...future.stdout)
[16:21:13.444]         ...future.stdout <- NULL
[16:21:13.444]     }
[16:21:13.444]     ...future.result$conditions <- ...future.conditions
[16:21:13.444]     ...future.result$finished <- base::Sys.time()
[16:21:13.444]     ...future.result
[16:21:13.444] }
[16:21:13.447] MultisessionFuture started
[16:21:13.447] - Launch lazy future ... done
[16:21:13.447] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[16:21:13.448] result() for ClusterFuture ...
[16:21:13.448] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.448] - Validating connection of MultisessionFuture
[16:21:13.449] - received message: FutureResult
[16:21:13.449] - Received FutureResult
[16:21:13.449] - Erased future from FutureRegistry
[16:21:13.449] result() for ClusterFuture ...
[16:21:13.449] - result already collected: FutureResult
[16:21:13.450] result() for ClusterFuture ... done
[16:21:13.450] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.450] result() for ClusterFuture ... done
[16:21:13.450] result() for ClusterFuture ...
[16:21:13.450] - result already collected: FutureResult
[16:21:13.450] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 8e6bb5ea-dbbf-8549-9dd0-5321f4e1865e
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[16:21:13.450] getGlobalsAndPackages() ...
[16:21:13.450] Searching for globals...
[16:21:13.451] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:21:13.451] Searching for globals ... DONE
[16:21:13.451] Resolving globals: FALSE
[16:21:13.454] The total size of the 1 globals is 1.56 MiB (1637576 bytes)
[16:21:13.455] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:21:13.455] - globals: [1] ‘f1’
[16:21:13.455] 
[16:21:13.455] getGlobalsAndPackages() ... DONE
[16:21:13.455] run() for ‘Future’ ...
[16:21:13.455] - state: ‘created’
[16:21:13.455] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.466] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.466] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.466]   - Field: ‘node’
[16:21:13.466]   - Field: ‘label’
[16:21:13.466]   - Field: ‘local’
[16:21:13.466]   - Field: ‘owner’
[16:21:13.467]   - Field: ‘envir’
[16:21:13.467]   - Field: ‘workers’
[16:21:13.467]   - Field: ‘packages’
[16:21:13.467]   - Field: ‘gc’
[16:21:13.467]   - Field: ‘conditions’
[16:21:13.467]   - Field: ‘persistent’
[16:21:13.467]   - Field: ‘expr’
[16:21:13.467]   - Field: ‘uuid’
[16:21:13.467]   - Field: ‘seed’
[16:21:13.467]   - Field: ‘version’
[16:21:13.467]   - Field: ‘result’
[16:21:13.467]   - Field: ‘asynchronous’
[16:21:13.468]   - Field: ‘calls’
[16:21:13.468]   - Field: ‘globals’
[16:21:13.468]   - Field: ‘stdout’
[16:21:13.468]   - Field: ‘earlySignal’
[16:21:13.468]   - Field: ‘lazy’
[16:21:13.468]   - Field: ‘state’
[16:21:13.468] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.468] - Launch lazy future ...
[16:21:13.468] Packages needed by the future expression (n = 0): <none>
[16:21:13.469] Packages needed by future strategies (n = 0): <none>
[16:21:13.469] {
[16:21:13.469]     {
[16:21:13.469]         {
[16:21:13.469]             ...future.startTime <- base::Sys.time()
[16:21:13.469]             {
[16:21:13.469]                 {
[16:21:13.469]                   {
[16:21:13.469]                     {
[16:21:13.469]                       base::local({
[16:21:13.469]                         has_future <- base::requireNamespace("future", 
[16:21:13.469]                           quietly = TRUE)
[16:21:13.469]                         if (has_future) {
[16:21:13.469]                           ns <- base::getNamespace("future")
[16:21:13.469]                           version <- ns[[".package"]][["version"]]
[16:21:13.469]                           if (is.null(version)) 
[16:21:13.469]                             version <- utils::packageVersion("future")
[16:21:13.469]                         }
[16:21:13.469]                         else {
[16:21:13.469]                           version <- NULL
[16:21:13.469]                         }
[16:21:13.469]                         if (!has_future || version < "1.8.0") {
[16:21:13.469]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.469]                             "", base::R.version$version.string), 
[16:21:13.469]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.469]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.469]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.469]                               "release", "version")], collapse = " "), 
[16:21:13.469]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.469]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.469]                             info)
[16:21:13.469]                           info <- base::paste(info, collapse = "; ")
[16:21:13.469]                           if (!has_future) {
[16:21:13.469]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.469]                               info)
[16:21:13.469]                           }
[16:21:13.469]                           else {
[16:21:13.469]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.469]                               info, version)
[16:21:13.469]                           }
[16:21:13.469]                           base::stop(msg)
[16:21:13.469]                         }
[16:21:13.469]                       })
[16:21:13.469]                     }
[16:21:13.469]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.469]                     base::options(mc.cores = 1L)
[16:21:13.469]                   }
[16:21:13.469]                   ...future.strategy.old <- future::plan("list")
[16:21:13.469]                   options(future.plan = NULL)
[16:21:13.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.469]                 }
[16:21:13.469]                 ...future.workdir <- getwd()
[16:21:13.469]             }
[16:21:13.469]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.469]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.469]         }
[16:21:13.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.469]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.469]             base::names(...future.oldOptions))
[16:21:13.469]     }
[16:21:13.469]     if (FALSE) {
[16:21:13.469]     }
[16:21:13.469]     else {
[16:21:13.469]         if (TRUE) {
[16:21:13.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.469]                 open = "w")
[16:21:13.469]         }
[16:21:13.469]         else {
[16:21:13.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.469]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.469]         }
[16:21:13.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.469]             base::sink(type = "output", split = FALSE)
[16:21:13.469]             base::close(...future.stdout)
[16:21:13.469]         }, add = TRUE)
[16:21:13.469]     }
[16:21:13.469]     ...future.frame <- base::sys.nframe()
[16:21:13.469]     ...future.conditions <- base::list()
[16:21:13.469]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.469]     if (FALSE) {
[16:21:13.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.469]     }
[16:21:13.469]     ...future.result <- base::tryCatch({
[16:21:13.469]         base::withCallingHandlers({
[16:21:13.469]             ...future.value <- base::withVisible(base::local({
[16:21:13.469]                 ...future.makeSendCondition <- base::local({
[16:21:13.469]                   sendCondition <- NULL
[16:21:13.469]                   function(frame = 1L) {
[16:21:13.469]                     if (is.function(sendCondition)) 
[16:21:13.469]                       return(sendCondition)
[16:21:13.469]                     ns <- getNamespace("parallel")
[16:21:13.469]                     if (exists("sendData", mode = "function", 
[16:21:13.469]                       envir = ns)) {
[16:21:13.469]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.469]                         envir = ns)
[16:21:13.469]                       envir <- sys.frame(frame)
[16:21:13.469]                       master <- NULL
[16:21:13.469]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.469]                         !identical(envir, emptyenv())) {
[16:21:13.469]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.469]                           inherits = FALSE)) {
[16:21:13.469]                           master <- get("master", mode = "list", 
[16:21:13.469]                             envir = envir, inherits = FALSE)
[16:21:13.469]                           if (inherits(master, c("SOCKnode", 
[16:21:13.469]                             "SOCK0node"))) {
[16:21:13.469]                             sendCondition <<- function(cond) {
[16:21:13.469]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.469]                                 success = TRUE)
[16:21:13.469]                               parallel_sendData(master, data)
[16:21:13.469]                             }
[16:21:13.469]                             return(sendCondition)
[16:21:13.469]                           }
[16:21:13.469]                         }
[16:21:13.469]                         frame <- frame + 1L
[16:21:13.469]                         envir <- sys.frame(frame)
[16:21:13.469]                       }
[16:21:13.469]                     }
[16:21:13.469]                     sendCondition <<- function(cond) NULL
[16:21:13.469]                   }
[16:21:13.469]                 })
[16:21:13.469]                 withCallingHandlers({
[16:21:13.469]                   {
[16:21:13.469]                     f1$owner
[16:21:13.469]                   }
[16:21:13.469]                 }, immediateCondition = function(cond) {
[16:21:13.469]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.469]                   sendCondition(cond)
[16:21:13.469]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.469]                   {
[16:21:13.469]                     inherits <- base::inherits
[16:21:13.469]                     invokeRestart <- base::invokeRestart
[16:21:13.469]                     is.null <- base::is.null
[16:21:13.469]                     muffled <- FALSE
[16:21:13.469]                     if (inherits(cond, "message")) {
[16:21:13.469]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.469]                       if (muffled) 
[16:21:13.469]                         invokeRestart("muffleMessage")
[16:21:13.469]                     }
[16:21:13.469]                     else if (inherits(cond, "warning")) {
[16:21:13.469]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.469]                       if (muffled) 
[16:21:13.469]                         invokeRestart("muffleWarning")
[16:21:13.469]                     }
[16:21:13.469]                     else if (inherits(cond, "condition")) {
[16:21:13.469]                       if (!is.null(pattern)) {
[16:21:13.469]                         computeRestarts <- base::computeRestarts
[16:21:13.469]                         grepl <- base::grepl
[16:21:13.469]                         restarts <- computeRestarts(cond)
[16:21:13.469]                         for (restart in restarts) {
[16:21:13.469]                           name <- restart$name
[16:21:13.469]                           if (is.null(name)) 
[16:21:13.469]                             next
[16:21:13.469]                           if (!grepl(pattern, name)) 
[16:21:13.469]                             next
[16:21:13.469]                           invokeRestart(restart)
[16:21:13.469]                           muffled <- TRUE
[16:21:13.469]                           break
[16:21:13.469]                         }
[16:21:13.469]                       }
[16:21:13.469]                     }
[16:21:13.469]                     invisible(muffled)
[16:21:13.469]                   }
[16:21:13.469]                   muffleCondition(cond)
[16:21:13.469]                 })
[16:21:13.469]             }))
[16:21:13.469]             future::FutureResult(value = ...future.value$value, 
[16:21:13.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.469]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.469]                     ...future.globalenv.names))
[16:21:13.469]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.469]         }, condition = base::local({
[16:21:13.469]             c <- base::c
[16:21:13.469]             inherits <- base::inherits
[16:21:13.469]             invokeRestart <- base::invokeRestart
[16:21:13.469]             length <- base::length
[16:21:13.469]             list <- base::list
[16:21:13.469]             seq.int <- base::seq.int
[16:21:13.469]             signalCondition <- base::signalCondition
[16:21:13.469]             sys.calls <- base::sys.calls
[16:21:13.469]             `[[` <- base::`[[`
[16:21:13.469]             `+` <- base::`+`
[16:21:13.469]             `<<-` <- base::`<<-`
[16:21:13.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.469]                   3L)]
[16:21:13.469]             }
[16:21:13.469]             function(cond) {
[16:21:13.469]                 is_error <- inherits(cond, "error")
[16:21:13.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.469]                   NULL)
[16:21:13.469]                 if (is_error) {
[16:21:13.469]                   sessionInformation <- function() {
[16:21:13.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.469]                       search = base::search(), system = base::Sys.info())
[16:21:13.469]                   }
[16:21:13.469]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.469]                     cond$call), session = sessionInformation(), 
[16:21:13.469]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.469]                   signalCondition(cond)
[16:21:13.469]                 }
[16:21:13.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.469]                 "immediateCondition"))) {
[16:21:13.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.469]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.469]                   if (TRUE && !signal) {
[16:21:13.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.469]                     {
[16:21:13.469]                       inherits <- base::inherits
[16:21:13.469]                       invokeRestart <- base::invokeRestart
[16:21:13.469]                       is.null <- base::is.null
[16:21:13.469]                       muffled <- FALSE
[16:21:13.469]                       if (inherits(cond, "message")) {
[16:21:13.469]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.469]                         if (muffled) 
[16:21:13.469]                           invokeRestart("muffleMessage")
[16:21:13.469]                       }
[16:21:13.469]                       else if (inherits(cond, "warning")) {
[16:21:13.469]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.469]                         if (muffled) 
[16:21:13.469]                           invokeRestart("muffleWarning")
[16:21:13.469]                       }
[16:21:13.469]                       else if (inherits(cond, "condition")) {
[16:21:13.469]                         if (!is.null(pattern)) {
[16:21:13.469]                           computeRestarts <- base::computeRestarts
[16:21:13.469]                           grepl <- base::grepl
[16:21:13.469]                           restarts <- computeRestarts(cond)
[16:21:13.469]                           for (restart in restarts) {
[16:21:13.469]                             name <- restart$name
[16:21:13.469]                             if (is.null(name)) 
[16:21:13.469]                               next
[16:21:13.469]                             if (!grepl(pattern, name)) 
[16:21:13.469]                               next
[16:21:13.469]                             invokeRestart(restart)
[16:21:13.469]                             muffled <- TRUE
[16:21:13.469]                             break
[16:21:13.469]                           }
[16:21:13.469]                         }
[16:21:13.469]                       }
[16:21:13.469]                       invisible(muffled)
[16:21:13.469]                     }
[16:21:13.469]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.469]                   }
[16:21:13.469]                 }
[16:21:13.469]                 else {
[16:21:13.469]                   if (TRUE) {
[16:21:13.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.469]                     {
[16:21:13.469]                       inherits <- base::inherits
[16:21:13.469]                       invokeRestart <- base::invokeRestart
[16:21:13.469]                       is.null <- base::is.null
[16:21:13.469]                       muffled <- FALSE
[16:21:13.469]                       if (inherits(cond, "message")) {
[16:21:13.469]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.469]                         if (muffled) 
[16:21:13.469]                           invokeRestart("muffleMessage")
[16:21:13.469]                       }
[16:21:13.469]                       else if (inherits(cond, "warning")) {
[16:21:13.469]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.469]                         if (muffled) 
[16:21:13.469]                           invokeRestart("muffleWarning")
[16:21:13.469]                       }
[16:21:13.469]                       else if (inherits(cond, "condition")) {
[16:21:13.469]                         if (!is.null(pattern)) {
[16:21:13.469]                           computeRestarts <- base::computeRestarts
[16:21:13.469]                           grepl <- base::grepl
[16:21:13.469]                           restarts <- computeRestarts(cond)
[16:21:13.469]                           for (restart in restarts) {
[16:21:13.469]                             name <- restart$name
[16:21:13.469]                             if (is.null(name)) 
[16:21:13.469]                               next
[16:21:13.469]                             if (!grepl(pattern, name)) 
[16:21:13.469]                               next
[16:21:13.469]                             invokeRestart(restart)
[16:21:13.469]                             muffled <- TRUE
[16:21:13.469]                             break
[16:21:13.469]                           }
[16:21:13.469]                         }
[16:21:13.469]                       }
[16:21:13.469]                       invisible(muffled)
[16:21:13.469]                     }
[16:21:13.469]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.469]                   }
[16:21:13.469]                 }
[16:21:13.469]             }
[16:21:13.469]         }))
[16:21:13.469]     }, error = function(ex) {
[16:21:13.469]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.469]                 ...future.rng), started = ...future.startTime, 
[16:21:13.469]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.469]             version = "1.8"), class = "FutureResult")
[16:21:13.469]     }, finally = {
[16:21:13.469]         if (!identical(...future.workdir, getwd())) 
[16:21:13.469]             setwd(...future.workdir)
[16:21:13.469]         {
[16:21:13.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.469]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.469]             }
[16:21:13.469]             base::options(...future.oldOptions)
[16:21:13.469]             if (.Platform$OS.type == "windows") {
[16:21:13.469]                 old_names <- names(...future.oldEnvVars)
[16:21:13.469]                 envs <- base::Sys.getenv()
[16:21:13.469]                 names <- names(envs)
[16:21:13.469]                 common <- intersect(names, old_names)
[16:21:13.469]                 added <- setdiff(names, old_names)
[16:21:13.469]                 removed <- setdiff(old_names, names)
[16:21:13.469]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.469]                   envs[common]]
[16:21:13.469]                 NAMES <- toupper(changed)
[16:21:13.469]                 args <- list()
[16:21:13.469]                 for (kk in seq_along(NAMES)) {
[16:21:13.469]                   name <- changed[[kk]]
[16:21:13.469]                   NAME <- NAMES[[kk]]
[16:21:13.469]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.469]                     next
[16:21:13.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.469]                 }
[16:21:13.469]                 NAMES <- toupper(added)
[16:21:13.469]                 for (kk in seq_along(NAMES)) {
[16:21:13.469]                   name <- added[[kk]]
[16:21:13.469]                   NAME <- NAMES[[kk]]
[16:21:13.469]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.469]                     next
[16:21:13.469]                   args[[name]] <- ""
[16:21:13.469]                 }
[16:21:13.469]                 NAMES <- toupper(removed)
[16:21:13.469]                 for (kk in seq_along(NAMES)) {
[16:21:13.469]                   name <- removed[[kk]]
[16:21:13.469]                   NAME <- NAMES[[kk]]
[16:21:13.469]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.469]                     next
[16:21:13.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.469]                 }
[16:21:13.469]                 if (length(args) > 0) 
[16:21:13.469]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.469]             }
[16:21:13.469]             else {
[16:21:13.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.469]             }
[16:21:13.469]             {
[16:21:13.469]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.469]                   0L) {
[16:21:13.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.469]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.469]                   base::options(opts)
[16:21:13.469]                 }
[16:21:13.469]                 {
[16:21:13.469]                   {
[16:21:13.469]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.469]                     NULL
[16:21:13.469]                   }
[16:21:13.469]                   options(future.plan = NULL)
[16:21:13.469]                   if (is.na(NA_character_)) 
[16:21:13.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.469]                     .init = FALSE)
[16:21:13.469]                 }
[16:21:13.469]             }
[16:21:13.469]         }
[16:21:13.469]     })
[16:21:13.469]     if (TRUE) {
[16:21:13.469]         base::sink(type = "output", split = FALSE)
[16:21:13.469]         if (TRUE) {
[16:21:13.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.469]         }
[16:21:13.469]         else {
[16:21:13.469]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.469]         }
[16:21:13.469]         base::close(...future.stdout)
[16:21:13.469]         ...future.stdout <- NULL
[16:21:13.469]     }
[16:21:13.469]     ...future.result$conditions <- ...future.conditions
[16:21:13.469]     ...future.result$finished <- base::Sys.time()
[16:21:13.469]     ...future.result
[16:21:13.469] }
[16:21:13.472] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[16:21:13.473] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[16:21:13.525] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[16:21:13.525] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[16:21:13.525] MultisessionFuture started
[16:21:13.525] - Launch lazy future ... done
[16:21:13.525] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[16:21:13.526] result() for ClusterFuture ...
[16:21:13.526] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.526] - Validating connection of MultisessionFuture
[16:21:13.570] - received message: FutureResult
[16:21:13.570] - Received FutureResult
[16:21:13.570] - Erased future from FutureRegistry
[16:21:13.570] result() for ClusterFuture ...
[16:21:13.571] - result already collected: FutureResult
[16:21:13.571] result() for ClusterFuture ... done
[16:21:13.571] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.571] result() for ClusterFuture ... done
[16:21:13.571] result() for ClusterFuture ...
[16:21:13.571] - result already collected: FutureResult
[16:21:13.571] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 1f51aea7-2843-34b8-e732-01ee48f25949
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[16:21:13.571] getGlobalsAndPackages() ...
[16:21:13.571] Searching for globals...
[16:21:13.572] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:21:13.573] Searching for globals ... DONE
[16:21:13.573] Resolving globals: FALSE
[16:21:13.575] The total size of the 1 globals is 1.56 MiB (1640512 bytes)
[16:21:13.575] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:21:13.575] - globals: [1] ‘f1’
[16:21:13.575] 
[16:21:13.575] getGlobalsAndPackages() ... DONE
[16:21:13.576] run() for ‘Future’ ...
[16:21:13.576] - state: ‘created’
[16:21:13.576] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.586] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.587] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.587]   - Field: ‘node’
[16:21:13.587]   - Field: ‘label’
[16:21:13.587]   - Field: ‘local’
[16:21:13.587]   - Field: ‘owner’
[16:21:13.587]   - Field: ‘envir’
[16:21:13.587]   - Field: ‘workers’
[16:21:13.587]   - Field: ‘packages’
[16:21:13.587]   - Field: ‘gc’
[16:21:13.587]   - Field: ‘conditions’
[16:21:13.588]   - Field: ‘persistent’
[16:21:13.588]   - Field: ‘expr’
[16:21:13.588]   - Field: ‘uuid’
[16:21:13.588]   - Field: ‘seed’
[16:21:13.588]   - Field: ‘version’
[16:21:13.588]   - Field: ‘result’
[16:21:13.588]   - Field: ‘asynchronous’
[16:21:13.588]   - Field: ‘calls’
[16:21:13.588]   - Field: ‘globals’
[16:21:13.588]   - Field: ‘stdout’
[16:21:13.589]   - Field: ‘earlySignal’
[16:21:13.589]   - Field: ‘lazy’
[16:21:13.589]   - Field: ‘state’
[16:21:13.589] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.589] - Launch lazy future ...
[16:21:13.589] Packages needed by the future expression (n = 0): <none>
[16:21:13.589] Packages needed by future strategies (n = 0): <none>
[16:21:13.590] {
[16:21:13.590]     {
[16:21:13.590]         {
[16:21:13.590]             ...future.startTime <- base::Sys.time()
[16:21:13.590]             {
[16:21:13.590]                 {
[16:21:13.590]                   {
[16:21:13.590]                     {
[16:21:13.590]                       base::local({
[16:21:13.590]                         has_future <- base::requireNamespace("future", 
[16:21:13.590]                           quietly = TRUE)
[16:21:13.590]                         if (has_future) {
[16:21:13.590]                           ns <- base::getNamespace("future")
[16:21:13.590]                           version <- ns[[".package"]][["version"]]
[16:21:13.590]                           if (is.null(version)) 
[16:21:13.590]                             version <- utils::packageVersion("future")
[16:21:13.590]                         }
[16:21:13.590]                         else {
[16:21:13.590]                           version <- NULL
[16:21:13.590]                         }
[16:21:13.590]                         if (!has_future || version < "1.8.0") {
[16:21:13.590]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.590]                             "", base::R.version$version.string), 
[16:21:13.590]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.590]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.590]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.590]                               "release", "version")], collapse = " "), 
[16:21:13.590]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.590]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.590]                             info)
[16:21:13.590]                           info <- base::paste(info, collapse = "; ")
[16:21:13.590]                           if (!has_future) {
[16:21:13.590]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.590]                               info)
[16:21:13.590]                           }
[16:21:13.590]                           else {
[16:21:13.590]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.590]                               info, version)
[16:21:13.590]                           }
[16:21:13.590]                           base::stop(msg)
[16:21:13.590]                         }
[16:21:13.590]                       })
[16:21:13.590]                     }
[16:21:13.590]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.590]                     base::options(mc.cores = 1L)
[16:21:13.590]                   }
[16:21:13.590]                   ...future.strategy.old <- future::plan("list")
[16:21:13.590]                   options(future.plan = NULL)
[16:21:13.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.590]                 }
[16:21:13.590]                 ...future.workdir <- getwd()
[16:21:13.590]             }
[16:21:13.590]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.590]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.590]         }
[16:21:13.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.590]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.590]             base::names(...future.oldOptions))
[16:21:13.590]     }
[16:21:13.590]     if (FALSE) {
[16:21:13.590]     }
[16:21:13.590]     else {
[16:21:13.590]         if (TRUE) {
[16:21:13.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.590]                 open = "w")
[16:21:13.590]         }
[16:21:13.590]         else {
[16:21:13.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.590]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.590]         }
[16:21:13.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.590]             base::sink(type = "output", split = FALSE)
[16:21:13.590]             base::close(...future.stdout)
[16:21:13.590]         }, add = TRUE)
[16:21:13.590]     }
[16:21:13.590]     ...future.frame <- base::sys.nframe()
[16:21:13.590]     ...future.conditions <- base::list()
[16:21:13.590]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.590]     if (FALSE) {
[16:21:13.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.590]     }
[16:21:13.590]     ...future.result <- base::tryCatch({
[16:21:13.590]         base::withCallingHandlers({
[16:21:13.590]             ...future.value <- base::withVisible(base::local({
[16:21:13.590]                 ...future.makeSendCondition <- base::local({
[16:21:13.590]                   sendCondition <- NULL
[16:21:13.590]                   function(frame = 1L) {
[16:21:13.590]                     if (is.function(sendCondition)) 
[16:21:13.590]                       return(sendCondition)
[16:21:13.590]                     ns <- getNamespace("parallel")
[16:21:13.590]                     if (exists("sendData", mode = "function", 
[16:21:13.590]                       envir = ns)) {
[16:21:13.590]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.590]                         envir = ns)
[16:21:13.590]                       envir <- sys.frame(frame)
[16:21:13.590]                       master <- NULL
[16:21:13.590]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.590]                         !identical(envir, emptyenv())) {
[16:21:13.590]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.590]                           inherits = FALSE)) {
[16:21:13.590]                           master <- get("master", mode = "list", 
[16:21:13.590]                             envir = envir, inherits = FALSE)
[16:21:13.590]                           if (inherits(master, c("SOCKnode", 
[16:21:13.590]                             "SOCK0node"))) {
[16:21:13.590]                             sendCondition <<- function(cond) {
[16:21:13.590]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.590]                                 success = TRUE)
[16:21:13.590]                               parallel_sendData(master, data)
[16:21:13.590]                             }
[16:21:13.590]                             return(sendCondition)
[16:21:13.590]                           }
[16:21:13.590]                         }
[16:21:13.590]                         frame <- frame + 1L
[16:21:13.590]                         envir <- sys.frame(frame)
[16:21:13.590]                       }
[16:21:13.590]                     }
[16:21:13.590]                     sendCondition <<- function(cond) NULL
[16:21:13.590]                   }
[16:21:13.590]                 })
[16:21:13.590]                 withCallingHandlers({
[16:21:13.590]                   {
[16:21:13.590]                     f1$owner
[16:21:13.590]                   }
[16:21:13.590]                 }, immediateCondition = function(cond) {
[16:21:13.590]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.590]                   sendCondition(cond)
[16:21:13.590]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.590]                   {
[16:21:13.590]                     inherits <- base::inherits
[16:21:13.590]                     invokeRestart <- base::invokeRestart
[16:21:13.590]                     is.null <- base::is.null
[16:21:13.590]                     muffled <- FALSE
[16:21:13.590]                     if (inherits(cond, "message")) {
[16:21:13.590]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.590]                       if (muffled) 
[16:21:13.590]                         invokeRestart("muffleMessage")
[16:21:13.590]                     }
[16:21:13.590]                     else if (inherits(cond, "warning")) {
[16:21:13.590]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.590]                       if (muffled) 
[16:21:13.590]                         invokeRestart("muffleWarning")
[16:21:13.590]                     }
[16:21:13.590]                     else if (inherits(cond, "condition")) {
[16:21:13.590]                       if (!is.null(pattern)) {
[16:21:13.590]                         computeRestarts <- base::computeRestarts
[16:21:13.590]                         grepl <- base::grepl
[16:21:13.590]                         restarts <- computeRestarts(cond)
[16:21:13.590]                         for (restart in restarts) {
[16:21:13.590]                           name <- restart$name
[16:21:13.590]                           if (is.null(name)) 
[16:21:13.590]                             next
[16:21:13.590]                           if (!grepl(pattern, name)) 
[16:21:13.590]                             next
[16:21:13.590]                           invokeRestart(restart)
[16:21:13.590]                           muffled <- TRUE
[16:21:13.590]                           break
[16:21:13.590]                         }
[16:21:13.590]                       }
[16:21:13.590]                     }
[16:21:13.590]                     invisible(muffled)
[16:21:13.590]                   }
[16:21:13.590]                   muffleCondition(cond)
[16:21:13.590]                 })
[16:21:13.590]             }))
[16:21:13.590]             future::FutureResult(value = ...future.value$value, 
[16:21:13.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.590]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.590]                     ...future.globalenv.names))
[16:21:13.590]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.590]         }, condition = base::local({
[16:21:13.590]             c <- base::c
[16:21:13.590]             inherits <- base::inherits
[16:21:13.590]             invokeRestart <- base::invokeRestart
[16:21:13.590]             length <- base::length
[16:21:13.590]             list <- base::list
[16:21:13.590]             seq.int <- base::seq.int
[16:21:13.590]             signalCondition <- base::signalCondition
[16:21:13.590]             sys.calls <- base::sys.calls
[16:21:13.590]             `[[` <- base::`[[`
[16:21:13.590]             `+` <- base::`+`
[16:21:13.590]             `<<-` <- base::`<<-`
[16:21:13.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.590]                   3L)]
[16:21:13.590]             }
[16:21:13.590]             function(cond) {
[16:21:13.590]                 is_error <- inherits(cond, "error")
[16:21:13.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.590]                   NULL)
[16:21:13.590]                 if (is_error) {
[16:21:13.590]                   sessionInformation <- function() {
[16:21:13.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.590]                       search = base::search(), system = base::Sys.info())
[16:21:13.590]                   }
[16:21:13.590]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.590]                     cond$call), session = sessionInformation(), 
[16:21:13.590]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.590]                   signalCondition(cond)
[16:21:13.590]                 }
[16:21:13.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.590]                 "immediateCondition"))) {
[16:21:13.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.590]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.590]                   if (TRUE && !signal) {
[16:21:13.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.590]                     {
[16:21:13.590]                       inherits <- base::inherits
[16:21:13.590]                       invokeRestart <- base::invokeRestart
[16:21:13.590]                       is.null <- base::is.null
[16:21:13.590]                       muffled <- FALSE
[16:21:13.590]                       if (inherits(cond, "message")) {
[16:21:13.590]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.590]                         if (muffled) 
[16:21:13.590]                           invokeRestart("muffleMessage")
[16:21:13.590]                       }
[16:21:13.590]                       else if (inherits(cond, "warning")) {
[16:21:13.590]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.590]                         if (muffled) 
[16:21:13.590]                           invokeRestart("muffleWarning")
[16:21:13.590]                       }
[16:21:13.590]                       else if (inherits(cond, "condition")) {
[16:21:13.590]                         if (!is.null(pattern)) {
[16:21:13.590]                           computeRestarts <- base::computeRestarts
[16:21:13.590]                           grepl <- base::grepl
[16:21:13.590]                           restarts <- computeRestarts(cond)
[16:21:13.590]                           for (restart in restarts) {
[16:21:13.590]                             name <- restart$name
[16:21:13.590]                             if (is.null(name)) 
[16:21:13.590]                               next
[16:21:13.590]                             if (!grepl(pattern, name)) 
[16:21:13.590]                               next
[16:21:13.590]                             invokeRestart(restart)
[16:21:13.590]                             muffled <- TRUE
[16:21:13.590]                             break
[16:21:13.590]                           }
[16:21:13.590]                         }
[16:21:13.590]                       }
[16:21:13.590]                       invisible(muffled)
[16:21:13.590]                     }
[16:21:13.590]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.590]                   }
[16:21:13.590]                 }
[16:21:13.590]                 else {
[16:21:13.590]                   if (TRUE) {
[16:21:13.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.590]                     {
[16:21:13.590]                       inherits <- base::inherits
[16:21:13.590]                       invokeRestart <- base::invokeRestart
[16:21:13.590]                       is.null <- base::is.null
[16:21:13.590]                       muffled <- FALSE
[16:21:13.590]                       if (inherits(cond, "message")) {
[16:21:13.590]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.590]                         if (muffled) 
[16:21:13.590]                           invokeRestart("muffleMessage")
[16:21:13.590]                       }
[16:21:13.590]                       else if (inherits(cond, "warning")) {
[16:21:13.590]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.590]                         if (muffled) 
[16:21:13.590]                           invokeRestart("muffleWarning")
[16:21:13.590]                       }
[16:21:13.590]                       else if (inherits(cond, "condition")) {
[16:21:13.590]                         if (!is.null(pattern)) {
[16:21:13.590]                           computeRestarts <- base::computeRestarts
[16:21:13.590]                           grepl <- base::grepl
[16:21:13.590]                           restarts <- computeRestarts(cond)
[16:21:13.590]                           for (restart in restarts) {
[16:21:13.590]                             name <- restart$name
[16:21:13.590]                             if (is.null(name)) 
[16:21:13.590]                               next
[16:21:13.590]                             if (!grepl(pattern, name)) 
[16:21:13.590]                               next
[16:21:13.590]                             invokeRestart(restart)
[16:21:13.590]                             muffled <- TRUE
[16:21:13.590]                             break
[16:21:13.590]                           }
[16:21:13.590]                         }
[16:21:13.590]                       }
[16:21:13.590]                       invisible(muffled)
[16:21:13.590]                     }
[16:21:13.590]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.590]                   }
[16:21:13.590]                 }
[16:21:13.590]             }
[16:21:13.590]         }))
[16:21:13.590]     }, error = function(ex) {
[16:21:13.590]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.590]                 ...future.rng), started = ...future.startTime, 
[16:21:13.590]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.590]             version = "1.8"), class = "FutureResult")
[16:21:13.590]     }, finally = {
[16:21:13.590]         if (!identical(...future.workdir, getwd())) 
[16:21:13.590]             setwd(...future.workdir)
[16:21:13.590]         {
[16:21:13.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.590]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.590]             }
[16:21:13.590]             base::options(...future.oldOptions)
[16:21:13.590]             if (.Platform$OS.type == "windows") {
[16:21:13.590]                 old_names <- names(...future.oldEnvVars)
[16:21:13.590]                 envs <- base::Sys.getenv()
[16:21:13.590]                 names <- names(envs)
[16:21:13.590]                 common <- intersect(names, old_names)
[16:21:13.590]                 added <- setdiff(names, old_names)
[16:21:13.590]                 removed <- setdiff(old_names, names)
[16:21:13.590]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.590]                   envs[common]]
[16:21:13.590]                 NAMES <- toupper(changed)
[16:21:13.590]                 args <- list()
[16:21:13.590]                 for (kk in seq_along(NAMES)) {
[16:21:13.590]                   name <- changed[[kk]]
[16:21:13.590]                   NAME <- NAMES[[kk]]
[16:21:13.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.590]                     next
[16:21:13.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.590]                 }
[16:21:13.590]                 NAMES <- toupper(added)
[16:21:13.590]                 for (kk in seq_along(NAMES)) {
[16:21:13.590]                   name <- added[[kk]]
[16:21:13.590]                   NAME <- NAMES[[kk]]
[16:21:13.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.590]                     next
[16:21:13.590]                   args[[name]] <- ""
[16:21:13.590]                 }
[16:21:13.590]                 NAMES <- toupper(removed)
[16:21:13.590]                 for (kk in seq_along(NAMES)) {
[16:21:13.590]                   name <- removed[[kk]]
[16:21:13.590]                   NAME <- NAMES[[kk]]
[16:21:13.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.590]                     next
[16:21:13.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.590]                 }
[16:21:13.590]                 if (length(args) > 0) 
[16:21:13.590]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.590]             }
[16:21:13.590]             else {
[16:21:13.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.590]             }
[16:21:13.590]             {
[16:21:13.590]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.590]                   0L) {
[16:21:13.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.590]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.590]                   base::options(opts)
[16:21:13.590]                 }
[16:21:13.590]                 {
[16:21:13.590]                   {
[16:21:13.590]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.590]                     NULL
[16:21:13.590]                   }
[16:21:13.590]                   options(future.plan = NULL)
[16:21:13.590]                   if (is.na(NA_character_)) 
[16:21:13.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.590]                     .init = FALSE)
[16:21:13.590]                 }
[16:21:13.590]             }
[16:21:13.590]         }
[16:21:13.590]     })
[16:21:13.590]     if (TRUE) {
[16:21:13.590]         base::sink(type = "output", split = FALSE)
[16:21:13.590]         if (TRUE) {
[16:21:13.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.590]         }
[16:21:13.590]         else {
[16:21:13.590]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.590]         }
[16:21:13.590]         base::close(...future.stdout)
[16:21:13.590]         ...future.stdout <- NULL
[16:21:13.590]     }
[16:21:13.590]     ...future.result$conditions <- ...future.conditions
[16:21:13.590]     ...future.result$finished <- base::Sys.time()
[16:21:13.590]     ...future.result
[16:21:13.590] }
[16:21:13.592] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[16:21:13.594] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[16:21:13.644] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[16:21:13.645] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[16:21:13.645] MultisessionFuture started
[16:21:13.645] - Launch lazy future ... done
[16:21:13.645] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[16:21:13.645] result() for ClusterFuture ...
[16:21:13.646] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.646] - Validating connection of MultisessionFuture
[16:21:13.690] - received message: FutureResult
[16:21:13.690] - Received FutureResult
[16:21:13.691] - Erased future from FutureRegistry
[16:21:13.691] result() for ClusterFuture ...
[16:21:13.691] - result already collected: FutureResult
[16:21:13.691] result() for ClusterFuture ... done
[16:21:13.691] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.691] result() for ClusterFuture ... done
[16:21:13.691] result() for ClusterFuture ...
[16:21:13.691] - result already collected: FutureResult
[16:21:13.691] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 1f51aea7-2843-34b8-e732-01ee48f25949
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[16:21:13.692] getGlobalsAndPackages() ...
[16:21:13.692] Searching for globals...
[16:21:13.693] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[16:21:13.693] Searching for globals ... DONE
[16:21:13.694] Resolving globals: FALSE
[16:21:13.696] The total size of the 1 globals is 1.57 MiB (1643448 bytes)
[16:21:13.696] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[16:21:13.696] - globals: [1] ‘f1’
[16:21:13.697] 
[16:21:13.697] getGlobalsAndPackages() ... DONE
[16:21:13.697] run() for ‘Future’ ...
[16:21:13.697] - state: ‘created’
[16:21:13.697] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.708] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.708] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.708]   - Field: ‘node’
[16:21:13.708]   - Field: ‘label’
[16:21:13.708]   - Field: ‘local’
[16:21:13.708]   - Field: ‘owner’
[16:21:13.709]   - Field: ‘envir’
[16:21:13.709]   - Field: ‘workers’
[16:21:13.709]   - Field: ‘packages’
[16:21:13.709]   - Field: ‘gc’
[16:21:13.709]   - Field: ‘conditions’
[16:21:13.709]   - Field: ‘persistent’
[16:21:13.709]   - Field: ‘expr’
[16:21:13.709]   - Field: ‘uuid’
[16:21:13.709]   - Field: ‘seed’
[16:21:13.709]   - Field: ‘version’
[16:21:13.709]   - Field: ‘result’
[16:21:13.710]   - Field: ‘asynchronous’
[16:21:13.710]   - Field: ‘calls’
[16:21:13.710]   - Field: ‘globals’
[16:21:13.710]   - Field: ‘stdout’
[16:21:13.710]   - Field: ‘earlySignal’
[16:21:13.710]   - Field: ‘lazy’
[16:21:13.710]   - Field: ‘state’
[16:21:13.710] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.710] - Launch lazy future ...
[16:21:13.711] Packages needed by the future expression (n = 0): <none>
[16:21:13.711] Packages needed by future strategies (n = 0): <none>
[16:21:13.711] {
[16:21:13.711]     {
[16:21:13.711]         {
[16:21:13.711]             ...future.startTime <- base::Sys.time()
[16:21:13.711]             {
[16:21:13.711]                 {
[16:21:13.711]                   {
[16:21:13.711]                     {
[16:21:13.711]                       base::local({
[16:21:13.711]                         has_future <- base::requireNamespace("future", 
[16:21:13.711]                           quietly = TRUE)
[16:21:13.711]                         if (has_future) {
[16:21:13.711]                           ns <- base::getNamespace("future")
[16:21:13.711]                           version <- ns[[".package"]][["version"]]
[16:21:13.711]                           if (is.null(version)) 
[16:21:13.711]                             version <- utils::packageVersion("future")
[16:21:13.711]                         }
[16:21:13.711]                         else {
[16:21:13.711]                           version <- NULL
[16:21:13.711]                         }
[16:21:13.711]                         if (!has_future || version < "1.8.0") {
[16:21:13.711]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.711]                             "", base::R.version$version.string), 
[16:21:13.711]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.711]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.711]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.711]                               "release", "version")], collapse = " "), 
[16:21:13.711]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.711]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.711]                             info)
[16:21:13.711]                           info <- base::paste(info, collapse = "; ")
[16:21:13.711]                           if (!has_future) {
[16:21:13.711]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.711]                               info)
[16:21:13.711]                           }
[16:21:13.711]                           else {
[16:21:13.711]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.711]                               info, version)
[16:21:13.711]                           }
[16:21:13.711]                           base::stop(msg)
[16:21:13.711]                         }
[16:21:13.711]                       })
[16:21:13.711]                     }
[16:21:13.711]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.711]                     base::options(mc.cores = 1L)
[16:21:13.711]                   }
[16:21:13.711]                   ...future.strategy.old <- future::plan("list")
[16:21:13.711]                   options(future.plan = NULL)
[16:21:13.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.711]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.711]                 }
[16:21:13.711]                 ...future.workdir <- getwd()
[16:21:13.711]             }
[16:21:13.711]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.711]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.711]         }
[16:21:13.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.711]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.711]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.711]             base::names(...future.oldOptions))
[16:21:13.711]     }
[16:21:13.711]     if (FALSE) {
[16:21:13.711]     }
[16:21:13.711]     else {
[16:21:13.711]         if (TRUE) {
[16:21:13.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.711]                 open = "w")
[16:21:13.711]         }
[16:21:13.711]         else {
[16:21:13.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.711]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.711]         }
[16:21:13.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.711]             base::sink(type = "output", split = FALSE)
[16:21:13.711]             base::close(...future.stdout)
[16:21:13.711]         }, add = TRUE)
[16:21:13.711]     }
[16:21:13.711]     ...future.frame <- base::sys.nframe()
[16:21:13.711]     ...future.conditions <- base::list()
[16:21:13.711]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.711]     if (FALSE) {
[16:21:13.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.711]     }
[16:21:13.711]     ...future.result <- base::tryCatch({
[16:21:13.711]         base::withCallingHandlers({
[16:21:13.711]             ...future.value <- base::withVisible(base::local({
[16:21:13.711]                 ...future.makeSendCondition <- base::local({
[16:21:13.711]                   sendCondition <- NULL
[16:21:13.711]                   function(frame = 1L) {
[16:21:13.711]                     if (is.function(sendCondition)) 
[16:21:13.711]                       return(sendCondition)
[16:21:13.711]                     ns <- getNamespace("parallel")
[16:21:13.711]                     if (exists("sendData", mode = "function", 
[16:21:13.711]                       envir = ns)) {
[16:21:13.711]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.711]                         envir = ns)
[16:21:13.711]                       envir <- sys.frame(frame)
[16:21:13.711]                       master <- NULL
[16:21:13.711]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.711]                         !identical(envir, emptyenv())) {
[16:21:13.711]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.711]                           inherits = FALSE)) {
[16:21:13.711]                           master <- get("master", mode = "list", 
[16:21:13.711]                             envir = envir, inherits = FALSE)
[16:21:13.711]                           if (inherits(master, c("SOCKnode", 
[16:21:13.711]                             "SOCK0node"))) {
[16:21:13.711]                             sendCondition <<- function(cond) {
[16:21:13.711]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.711]                                 success = TRUE)
[16:21:13.711]                               parallel_sendData(master, data)
[16:21:13.711]                             }
[16:21:13.711]                             return(sendCondition)
[16:21:13.711]                           }
[16:21:13.711]                         }
[16:21:13.711]                         frame <- frame + 1L
[16:21:13.711]                         envir <- sys.frame(frame)
[16:21:13.711]                       }
[16:21:13.711]                     }
[16:21:13.711]                     sendCondition <<- function(cond) NULL
[16:21:13.711]                   }
[16:21:13.711]                 })
[16:21:13.711]                 withCallingHandlers({
[16:21:13.711]                   {
[16:21:13.711]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[16:21:13.711]                     "not-owner"
[16:21:13.711]                   }
[16:21:13.711]                 }, immediateCondition = function(cond) {
[16:21:13.711]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.711]                   sendCondition(cond)
[16:21:13.711]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.711]                   {
[16:21:13.711]                     inherits <- base::inherits
[16:21:13.711]                     invokeRestart <- base::invokeRestart
[16:21:13.711]                     is.null <- base::is.null
[16:21:13.711]                     muffled <- FALSE
[16:21:13.711]                     if (inherits(cond, "message")) {
[16:21:13.711]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.711]                       if (muffled) 
[16:21:13.711]                         invokeRestart("muffleMessage")
[16:21:13.711]                     }
[16:21:13.711]                     else if (inherits(cond, "warning")) {
[16:21:13.711]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.711]                       if (muffled) 
[16:21:13.711]                         invokeRestart("muffleWarning")
[16:21:13.711]                     }
[16:21:13.711]                     else if (inherits(cond, "condition")) {
[16:21:13.711]                       if (!is.null(pattern)) {
[16:21:13.711]                         computeRestarts <- base::computeRestarts
[16:21:13.711]                         grepl <- base::grepl
[16:21:13.711]                         restarts <- computeRestarts(cond)
[16:21:13.711]                         for (restart in restarts) {
[16:21:13.711]                           name <- restart$name
[16:21:13.711]                           if (is.null(name)) 
[16:21:13.711]                             next
[16:21:13.711]                           if (!grepl(pattern, name)) 
[16:21:13.711]                             next
[16:21:13.711]                           invokeRestart(restart)
[16:21:13.711]                           muffled <- TRUE
[16:21:13.711]                           break
[16:21:13.711]                         }
[16:21:13.711]                       }
[16:21:13.711]                     }
[16:21:13.711]                     invisible(muffled)
[16:21:13.711]                   }
[16:21:13.711]                   muffleCondition(cond)
[16:21:13.711]                 })
[16:21:13.711]             }))
[16:21:13.711]             future::FutureResult(value = ...future.value$value, 
[16:21:13.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.711]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.711]                     ...future.globalenv.names))
[16:21:13.711]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.711]         }, condition = base::local({
[16:21:13.711]             c <- base::c
[16:21:13.711]             inherits <- base::inherits
[16:21:13.711]             invokeRestart <- base::invokeRestart
[16:21:13.711]             length <- base::length
[16:21:13.711]             list <- base::list
[16:21:13.711]             seq.int <- base::seq.int
[16:21:13.711]             signalCondition <- base::signalCondition
[16:21:13.711]             sys.calls <- base::sys.calls
[16:21:13.711]             `[[` <- base::`[[`
[16:21:13.711]             `+` <- base::`+`
[16:21:13.711]             `<<-` <- base::`<<-`
[16:21:13.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.711]                   3L)]
[16:21:13.711]             }
[16:21:13.711]             function(cond) {
[16:21:13.711]                 is_error <- inherits(cond, "error")
[16:21:13.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.711]                   NULL)
[16:21:13.711]                 if (is_error) {
[16:21:13.711]                   sessionInformation <- function() {
[16:21:13.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.711]                       search = base::search(), system = base::Sys.info())
[16:21:13.711]                   }
[16:21:13.711]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.711]                     cond$call), session = sessionInformation(), 
[16:21:13.711]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.711]                   signalCondition(cond)
[16:21:13.711]                 }
[16:21:13.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.711]                 "immediateCondition"))) {
[16:21:13.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.711]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.711]                   if (TRUE && !signal) {
[16:21:13.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.711]                     {
[16:21:13.711]                       inherits <- base::inherits
[16:21:13.711]                       invokeRestart <- base::invokeRestart
[16:21:13.711]                       is.null <- base::is.null
[16:21:13.711]                       muffled <- FALSE
[16:21:13.711]                       if (inherits(cond, "message")) {
[16:21:13.711]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.711]                         if (muffled) 
[16:21:13.711]                           invokeRestart("muffleMessage")
[16:21:13.711]                       }
[16:21:13.711]                       else if (inherits(cond, "warning")) {
[16:21:13.711]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.711]                         if (muffled) 
[16:21:13.711]                           invokeRestart("muffleWarning")
[16:21:13.711]                       }
[16:21:13.711]                       else if (inherits(cond, "condition")) {
[16:21:13.711]                         if (!is.null(pattern)) {
[16:21:13.711]                           computeRestarts <- base::computeRestarts
[16:21:13.711]                           grepl <- base::grepl
[16:21:13.711]                           restarts <- computeRestarts(cond)
[16:21:13.711]                           for (restart in restarts) {
[16:21:13.711]                             name <- restart$name
[16:21:13.711]                             if (is.null(name)) 
[16:21:13.711]                               next
[16:21:13.711]                             if (!grepl(pattern, name)) 
[16:21:13.711]                               next
[16:21:13.711]                             invokeRestart(restart)
[16:21:13.711]                             muffled <- TRUE
[16:21:13.711]                             break
[16:21:13.711]                           }
[16:21:13.711]                         }
[16:21:13.711]                       }
[16:21:13.711]                       invisible(muffled)
[16:21:13.711]                     }
[16:21:13.711]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.711]                   }
[16:21:13.711]                 }
[16:21:13.711]                 else {
[16:21:13.711]                   if (TRUE) {
[16:21:13.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.711]                     {
[16:21:13.711]                       inherits <- base::inherits
[16:21:13.711]                       invokeRestart <- base::invokeRestart
[16:21:13.711]                       is.null <- base::is.null
[16:21:13.711]                       muffled <- FALSE
[16:21:13.711]                       if (inherits(cond, "message")) {
[16:21:13.711]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.711]                         if (muffled) 
[16:21:13.711]                           invokeRestart("muffleMessage")
[16:21:13.711]                       }
[16:21:13.711]                       else if (inherits(cond, "warning")) {
[16:21:13.711]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.711]                         if (muffled) 
[16:21:13.711]                           invokeRestart("muffleWarning")
[16:21:13.711]                       }
[16:21:13.711]                       else if (inherits(cond, "condition")) {
[16:21:13.711]                         if (!is.null(pattern)) {
[16:21:13.711]                           computeRestarts <- base::computeRestarts
[16:21:13.711]                           grepl <- base::grepl
[16:21:13.711]                           restarts <- computeRestarts(cond)
[16:21:13.711]                           for (restart in restarts) {
[16:21:13.711]                             name <- restart$name
[16:21:13.711]                             if (is.null(name)) 
[16:21:13.711]                               next
[16:21:13.711]                             if (!grepl(pattern, name)) 
[16:21:13.711]                               next
[16:21:13.711]                             invokeRestart(restart)
[16:21:13.711]                             muffled <- TRUE
[16:21:13.711]                             break
[16:21:13.711]                           }
[16:21:13.711]                         }
[16:21:13.711]                       }
[16:21:13.711]                       invisible(muffled)
[16:21:13.711]                     }
[16:21:13.711]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.711]                   }
[16:21:13.711]                 }
[16:21:13.711]             }
[16:21:13.711]         }))
[16:21:13.711]     }, error = function(ex) {
[16:21:13.711]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.711]                 ...future.rng), started = ...future.startTime, 
[16:21:13.711]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.711]             version = "1.8"), class = "FutureResult")
[16:21:13.711]     }, finally = {
[16:21:13.711]         if (!identical(...future.workdir, getwd())) 
[16:21:13.711]             setwd(...future.workdir)
[16:21:13.711]         {
[16:21:13.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.711]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.711]             }
[16:21:13.711]             base::options(...future.oldOptions)
[16:21:13.711]             if (.Platform$OS.type == "windows") {
[16:21:13.711]                 old_names <- names(...future.oldEnvVars)
[16:21:13.711]                 envs <- base::Sys.getenv()
[16:21:13.711]                 names <- names(envs)
[16:21:13.711]                 common <- intersect(names, old_names)
[16:21:13.711]                 added <- setdiff(names, old_names)
[16:21:13.711]                 removed <- setdiff(old_names, names)
[16:21:13.711]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.711]                   envs[common]]
[16:21:13.711]                 NAMES <- toupper(changed)
[16:21:13.711]                 args <- list()
[16:21:13.711]                 for (kk in seq_along(NAMES)) {
[16:21:13.711]                   name <- changed[[kk]]
[16:21:13.711]                   NAME <- NAMES[[kk]]
[16:21:13.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.711]                     next
[16:21:13.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.711]                 }
[16:21:13.711]                 NAMES <- toupper(added)
[16:21:13.711]                 for (kk in seq_along(NAMES)) {
[16:21:13.711]                   name <- added[[kk]]
[16:21:13.711]                   NAME <- NAMES[[kk]]
[16:21:13.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.711]                     next
[16:21:13.711]                   args[[name]] <- ""
[16:21:13.711]                 }
[16:21:13.711]                 NAMES <- toupper(removed)
[16:21:13.711]                 for (kk in seq_along(NAMES)) {
[16:21:13.711]                   name <- removed[[kk]]
[16:21:13.711]                   NAME <- NAMES[[kk]]
[16:21:13.711]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.711]                     next
[16:21:13.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.711]                 }
[16:21:13.711]                 if (length(args) > 0) 
[16:21:13.711]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.711]             }
[16:21:13.711]             else {
[16:21:13.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.711]             }
[16:21:13.711]             {
[16:21:13.711]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.711]                   0L) {
[16:21:13.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.711]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.711]                   base::options(opts)
[16:21:13.711]                 }
[16:21:13.711]                 {
[16:21:13.711]                   {
[16:21:13.711]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.711]                     NULL
[16:21:13.711]                   }
[16:21:13.711]                   options(future.plan = NULL)
[16:21:13.711]                   if (is.na(NA_character_)) 
[16:21:13.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.711]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.711]                     .init = FALSE)
[16:21:13.711]                 }
[16:21:13.711]             }
[16:21:13.711]         }
[16:21:13.711]     })
[16:21:13.711]     if (TRUE) {
[16:21:13.711]         base::sink(type = "output", split = FALSE)
[16:21:13.711]         if (TRUE) {
[16:21:13.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.711]         }
[16:21:13.711]         else {
[16:21:13.711]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.711]         }
[16:21:13.711]         base::close(...future.stdout)
[16:21:13.711]         ...future.stdout <- NULL
[16:21:13.711]     }
[16:21:13.711]     ...future.result$conditions <- ...future.conditions
[16:21:13.711]     ...future.result$finished <- base::Sys.time()
[16:21:13.711]     ...future.result
[16:21:13.711] }
[16:21:13.714] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[16:21:13.718] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[16:21:13.769] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[16:21:13.769] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[16:21:13.770] MultisessionFuture started
[16:21:13.770] - Launch lazy future ... done
[16:21:13.770] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[16:21:13.770] result() for ClusterFuture ...
[16:21:13.770] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.770] - Validating connection of MultisessionFuture
[16:21:13.814] - received message: FutureResult
[16:21:13.815] - Received FutureResult
[16:21:13.815] - Erased future from FutureRegistry
[16:21:13.815] result() for ClusterFuture ...
[16:21:13.815] - result already collected: FutureResult
[16:21:13.815] result() for ClusterFuture ... done
[16:21:13.815] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:13.815] result() for ClusterFuture ... done
[16:21:13.815] result() for ClusterFuture ...
[16:21:13.815] - result already collected: FutureResult
[16:21:13.816] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[16:21:13.816] getGlobalsAndPackages() ...
[16:21:13.816] Searching for globals...
[16:21:13.817] - globals found: [1] ‘{’
[16:21:13.817] Searching for globals ... DONE
[16:21:13.817] Resolving globals: FALSE
[16:21:13.817] 
[16:21:13.817] 
[16:21:13.817] getGlobalsAndPackages() ... DONE
[16:21:13.818] run() for ‘Future’ ...
[16:21:13.818] - state: ‘created’
[16:21:13.818] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.828] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.828] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.828]   - Field: ‘node’
[16:21:13.829]   - Field: ‘label’
[16:21:13.829]   - Field: ‘local’
[16:21:13.829]   - Field: ‘owner’
[16:21:13.829]   - Field: ‘envir’
[16:21:13.829]   - Field: ‘workers’
[16:21:13.829]   - Field: ‘packages’
[16:21:13.829]   - Field: ‘gc’
[16:21:13.829]   - Field: ‘conditions’
[16:21:13.829]   - Field: ‘persistent’
[16:21:13.829]   - Field: ‘expr’
[16:21:13.829]   - Field: ‘uuid’
[16:21:13.830]   - Field: ‘seed’
[16:21:13.830]   - Field: ‘version’
[16:21:13.830]   - Field: ‘result’
[16:21:13.830]   - Field: ‘asynchronous’
[16:21:13.830]   - Field: ‘calls’
[16:21:13.830]   - Field: ‘globals’
[16:21:13.830]   - Field: ‘stdout’
[16:21:13.830]   - Field: ‘earlySignal’
[16:21:13.830]   - Field: ‘lazy’
[16:21:13.830]   - Field: ‘state’
[16:21:13.830] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.831] - Launch lazy future ...
[16:21:13.831] Packages needed by the future expression (n = 0): <none>
[16:21:13.831] Packages needed by future strategies (n = 0): <none>
[16:21:13.831] {
[16:21:13.831]     {
[16:21:13.831]         {
[16:21:13.831]             ...future.startTime <- base::Sys.time()
[16:21:13.831]             {
[16:21:13.831]                 {
[16:21:13.831]                   {
[16:21:13.831]                     {
[16:21:13.831]                       base::local({
[16:21:13.831]                         has_future <- base::requireNamespace("future", 
[16:21:13.831]                           quietly = TRUE)
[16:21:13.831]                         if (has_future) {
[16:21:13.831]                           ns <- base::getNamespace("future")
[16:21:13.831]                           version <- ns[[".package"]][["version"]]
[16:21:13.831]                           if (is.null(version)) 
[16:21:13.831]                             version <- utils::packageVersion("future")
[16:21:13.831]                         }
[16:21:13.831]                         else {
[16:21:13.831]                           version <- NULL
[16:21:13.831]                         }
[16:21:13.831]                         if (!has_future || version < "1.8.0") {
[16:21:13.831]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.831]                             "", base::R.version$version.string), 
[16:21:13.831]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:13.831]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:13.831]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.831]                               "release", "version")], collapse = " "), 
[16:21:13.831]                             hostname = base::Sys.info()[["nodename"]])
[16:21:13.831]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.831]                             info)
[16:21:13.831]                           info <- base::paste(info, collapse = "; ")
[16:21:13.831]                           if (!has_future) {
[16:21:13.831]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.831]                               info)
[16:21:13.831]                           }
[16:21:13.831]                           else {
[16:21:13.831]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.831]                               info, version)
[16:21:13.831]                           }
[16:21:13.831]                           base::stop(msg)
[16:21:13.831]                         }
[16:21:13.831]                       })
[16:21:13.831]                     }
[16:21:13.831]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.831]                     base::options(mc.cores = 1L)
[16:21:13.831]                   }
[16:21:13.831]                   ...future.strategy.old <- future::plan("list")
[16:21:13.831]                   options(future.plan = NULL)
[16:21:13.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.831]                 }
[16:21:13.831]                 ...future.workdir <- getwd()
[16:21:13.831]             }
[16:21:13.831]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.831]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.831]         }
[16:21:13.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.831]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.831]             base::names(...future.oldOptions))
[16:21:13.831]     }
[16:21:13.831]     if (FALSE) {
[16:21:13.831]     }
[16:21:13.831]     else {
[16:21:13.831]         if (TRUE) {
[16:21:13.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.831]                 open = "w")
[16:21:13.831]         }
[16:21:13.831]         else {
[16:21:13.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.831]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.831]         }
[16:21:13.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.831]             base::sink(type = "output", split = FALSE)
[16:21:13.831]             base::close(...future.stdout)
[16:21:13.831]         }, add = TRUE)
[16:21:13.831]     }
[16:21:13.831]     ...future.frame <- base::sys.nframe()
[16:21:13.831]     ...future.conditions <- base::list()
[16:21:13.831]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.831]     if (FALSE) {
[16:21:13.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.831]     }
[16:21:13.831]     ...future.result <- base::tryCatch({
[16:21:13.831]         base::withCallingHandlers({
[16:21:13.831]             ...future.value <- base::withVisible(base::local({
[16:21:13.831]                 ...future.makeSendCondition <- base::local({
[16:21:13.831]                   sendCondition <- NULL
[16:21:13.831]                   function(frame = 1L) {
[16:21:13.831]                     if (is.function(sendCondition)) 
[16:21:13.831]                       return(sendCondition)
[16:21:13.831]                     ns <- getNamespace("parallel")
[16:21:13.831]                     if (exists("sendData", mode = "function", 
[16:21:13.831]                       envir = ns)) {
[16:21:13.831]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.831]                         envir = ns)
[16:21:13.831]                       envir <- sys.frame(frame)
[16:21:13.831]                       master <- NULL
[16:21:13.831]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.831]                         !identical(envir, emptyenv())) {
[16:21:13.831]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.831]                           inherits = FALSE)) {
[16:21:13.831]                           master <- get("master", mode = "list", 
[16:21:13.831]                             envir = envir, inherits = FALSE)
[16:21:13.831]                           if (inherits(master, c("SOCKnode", 
[16:21:13.831]                             "SOCK0node"))) {
[16:21:13.831]                             sendCondition <<- function(cond) {
[16:21:13.831]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.831]                                 success = TRUE)
[16:21:13.831]                               parallel_sendData(master, data)
[16:21:13.831]                             }
[16:21:13.831]                             return(sendCondition)
[16:21:13.831]                           }
[16:21:13.831]                         }
[16:21:13.831]                         frame <- frame + 1L
[16:21:13.831]                         envir <- sys.frame(frame)
[16:21:13.831]                       }
[16:21:13.831]                     }
[16:21:13.831]                     sendCondition <<- function(cond) NULL
[16:21:13.831]                   }
[16:21:13.831]                 })
[16:21:13.831]                 withCallingHandlers({
[16:21:13.831]                   {
[16:21:13.831]                     42L
[16:21:13.831]                   }
[16:21:13.831]                 }, immediateCondition = function(cond) {
[16:21:13.831]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.831]                   sendCondition(cond)
[16:21:13.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.831]                   {
[16:21:13.831]                     inherits <- base::inherits
[16:21:13.831]                     invokeRestart <- base::invokeRestart
[16:21:13.831]                     is.null <- base::is.null
[16:21:13.831]                     muffled <- FALSE
[16:21:13.831]                     if (inherits(cond, "message")) {
[16:21:13.831]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.831]                       if (muffled) 
[16:21:13.831]                         invokeRestart("muffleMessage")
[16:21:13.831]                     }
[16:21:13.831]                     else if (inherits(cond, "warning")) {
[16:21:13.831]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.831]                       if (muffled) 
[16:21:13.831]                         invokeRestart("muffleWarning")
[16:21:13.831]                     }
[16:21:13.831]                     else if (inherits(cond, "condition")) {
[16:21:13.831]                       if (!is.null(pattern)) {
[16:21:13.831]                         computeRestarts <- base::computeRestarts
[16:21:13.831]                         grepl <- base::grepl
[16:21:13.831]                         restarts <- computeRestarts(cond)
[16:21:13.831]                         for (restart in restarts) {
[16:21:13.831]                           name <- restart$name
[16:21:13.831]                           if (is.null(name)) 
[16:21:13.831]                             next
[16:21:13.831]                           if (!grepl(pattern, name)) 
[16:21:13.831]                             next
[16:21:13.831]                           invokeRestart(restart)
[16:21:13.831]                           muffled <- TRUE
[16:21:13.831]                           break
[16:21:13.831]                         }
[16:21:13.831]                       }
[16:21:13.831]                     }
[16:21:13.831]                     invisible(muffled)
[16:21:13.831]                   }
[16:21:13.831]                   muffleCondition(cond)
[16:21:13.831]                 })
[16:21:13.831]             }))
[16:21:13.831]             future::FutureResult(value = ...future.value$value, 
[16:21:13.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.831]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.831]                     ...future.globalenv.names))
[16:21:13.831]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.831]         }, condition = base::local({
[16:21:13.831]             c <- base::c
[16:21:13.831]             inherits <- base::inherits
[16:21:13.831]             invokeRestart <- base::invokeRestart
[16:21:13.831]             length <- base::length
[16:21:13.831]             list <- base::list
[16:21:13.831]             seq.int <- base::seq.int
[16:21:13.831]             signalCondition <- base::signalCondition
[16:21:13.831]             sys.calls <- base::sys.calls
[16:21:13.831]             `[[` <- base::`[[`
[16:21:13.831]             `+` <- base::`+`
[16:21:13.831]             `<<-` <- base::`<<-`
[16:21:13.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.831]                   3L)]
[16:21:13.831]             }
[16:21:13.831]             function(cond) {
[16:21:13.831]                 is_error <- inherits(cond, "error")
[16:21:13.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.831]                   NULL)
[16:21:13.831]                 if (is_error) {
[16:21:13.831]                   sessionInformation <- function() {
[16:21:13.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.831]                       search = base::search(), system = base::Sys.info())
[16:21:13.831]                   }
[16:21:13.831]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.831]                     cond$call), session = sessionInformation(), 
[16:21:13.831]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.831]                   signalCondition(cond)
[16:21:13.831]                 }
[16:21:13.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.831]                 "immediateCondition"))) {
[16:21:13.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.831]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.831]                   if (TRUE && !signal) {
[16:21:13.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.831]                     {
[16:21:13.831]                       inherits <- base::inherits
[16:21:13.831]                       invokeRestart <- base::invokeRestart
[16:21:13.831]                       is.null <- base::is.null
[16:21:13.831]                       muffled <- FALSE
[16:21:13.831]                       if (inherits(cond, "message")) {
[16:21:13.831]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.831]                         if (muffled) 
[16:21:13.831]                           invokeRestart("muffleMessage")
[16:21:13.831]                       }
[16:21:13.831]                       else if (inherits(cond, "warning")) {
[16:21:13.831]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.831]                         if (muffled) 
[16:21:13.831]                           invokeRestart("muffleWarning")
[16:21:13.831]                       }
[16:21:13.831]                       else if (inherits(cond, "condition")) {
[16:21:13.831]                         if (!is.null(pattern)) {
[16:21:13.831]                           computeRestarts <- base::computeRestarts
[16:21:13.831]                           grepl <- base::grepl
[16:21:13.831]                           restarts <- computeRestarts(cond)
[16:21:13.831]                           for (restart in restarts) {
[16:21:13.831]                             name <- restart$name
[16:21:13.831]                             if (is.null(name)) 
[16:21:13.831]                               next
[16:21:13.831]                             if (!grepl(pattern, name)) 
[16:21:13.831]                               next
[16:21:13.831]                             invokeRestart(restart)
[16:21:13.831]                             muffled <- TRUE
[16:21:13.831]                             break
[16:21:13.831]                           }
[16:21:13.831]                         }
[16:21:13.831]                       }
[16:21:13.831]                       invisible(muffled)
[16:21:13.831]                     }
[16:21:13.831]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.831]                   }
[16:21:13.831]                 }
[16:21:13.831]                 else {
[16:21:13.831]                   if (TRUE) {
[16:21:13.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.831]                     {
[16:21:13.831]                       inherits <- base::inherits
[16:21:13.831]                       invokeRestart <- base::invokeRestart
[16:21:13.831]                       is.null <- base::is.null
[16:21:13.831]                       muffled <- FALSE
[16:21:13.831]                       if (inherits(cond, "message")) {
[16:21:13.831]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.831]                         if (muffled) 
[16:21:13.831]                           invokeRestart("muffleMessage")
[16:21:13.831]                       }
[16:21:13.831]                       else if (inherits(cond, "warning")) {
[16:21:13.831]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.831]                         if (muffled) 
[16:21:13.831]                           invokeRestart("muffleWarning")
[16:21:13.831]                       }
[16:21:13.831]                       else if (inherits(cond, "condition")) {
[16:21:13.831]                         if (!is.null(pattern)) {
[16:21:13.831]                           computeRestarts <- base::computeRestarts
[16:21:13.831]                           grepl <- base::grepl
[16:21:13.831]                           restarts <- computeRestarts(cond)
[16:21:13.831]                           for (restart in restarts) {
[16:21:13.831]                             name <- restart$name
[16:21:13.831]                             if (is.null(name)) 
[16:21:13.831]                               next
[16:21:13.831]                             if (!grepl(pattern, name)) 
[16:21:13.831]                               next
[16:21:13.831]                             invokeRestart(restart)
[16:21:13.831]                             muffled <- TRUE
[16:21:13.831]                             break
[16:21:13.831]                           }
[16:21:13.831]                         }
[16:21:13.831]                       }
[16:21:13.831]                       invisible(muffled)
[16:21:13.831]                     }
[16:21:13.831]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.831]                   }
[16:21:13.831]                 }
[16:21:13.831]             }
[16:21:13.831]         }))
[16:21:13.831]     }, error = function(ex) {
[16:21:13.831]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.831]                 ...future.rng), started = ...future.startTime, 
[16:21:13.831]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.831]             version = "1.8"), class = "FutureResult")
[16:21:13.831]     }, finally = {
[16:21:13.831]         if (!identical(...future.workdir, getwd())) 
[16:21:13.831]             setwd(...future.workdir)
[16:21:13.831]         {
[16:21:13.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.831]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.831]             }
[16:21:13.831]             base::options(...future.oldOptions)
[16:21:13.831]             if (.Platform$OS.type == "windows") {
[16:21:13.831]                 old_names <- names(...future.oldEnvVars)
[16:21:13.831]                 envs <- base::Sys.getenv()
[16:21:13.831]                 names <- names(envs)
[16:21:13.831]                 common <- intersect(names, old_names)
[16:21:13.831]                 added <- setdiff(names, old_names)
[16:21:13.831]                 removed <- setdiff(old_names, names)
[16:21:13.831]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.831]                   envs[common]]
[16:21:13.831]                 NAMES <- toupper(changed)
[16:21:13.831]                 args <- list()
[16:21:13.831]                 for (kk in seq_along(NAMES)) {
[16:21:13.831]                   name <- changed[[kk]]
[16:21:13.831]                   NAME <- NAMES[[kk]]
[16:21:13.831]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.831]                     next
[16:21:13.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.831]                 }
[16:21:13.831]                 NAMES <- toupper(added)
[16:21:13.831]                 for (kk in seq_along(NAMES)) {
[16:21:13.831]                   name <- added[[kk]]
[16:21:13.831]                   NAME <- NAMES[[kk]]
[16:21:13.831]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.831]                     next
[16:21:13.831]                   args[[name]] <- ""
[16:21:13.831]                 }
[16:21:13.831]                 NAMES <- toupper(removed)
[16:21:13.831]                 for (kk in seq_along(NAMES)) {
[16:21:13.831]                   name <- removed[[kk]]
[16:21:13.831]                   NAME <- NAMES[[kk]]
[16:21:13.831]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.831]                     next
[16:21:13.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.831]                 }
[16:21:13.831]                 if (length(args) > 0) 
[16:21:13.831]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.831]             }
[16:21:13.831]             else {
[16:21:13.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.831]             }
[16:21:13.831]             {
[16:21:13.831]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.831]                   0L) {
[16:21:13.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.831]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.831]                   base::options(opts)
[16:21:13.831]                 }
[16:21:13.831]                 {
[16:21:13.831]                   {
[16:21:13.831]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.831]                     NULL
[16:21:13.831]                   }
[16:21:13.831]                   options(future.plan = NULL)
[16:21:13.831]                   if (is.na(NA_character_)) 
[16:21:13.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.831]                     .init = FALSE)
[16:21:13.831]                 }
[16:21:13.831]             }
[16:21:13.831]         }
[16:21:13.831]     })
[16:21:13.831]     if (TRUE) {
[16:21:13.831]         base::sink(type = "output", split = FALSE)
[16:21:13.831]         if (TRUE) {
[16:21:13.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.831]         }
[16:21:13.831]         else {
[16:21:13.831]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.831]         }
[16:21:13.831]         base::close(...future.stdout)
[16:21:13.831]         ...future.stdout <- NULL
[16:21:13.831]     }
[16:21:13.831]     ...future.result$conditions <- ...future.conditions
[16:21:13.831]     ...future.result$finished <- base::Sys.time()
[16:21:13.831]     ...future.result
[16:21:13.831] }
[16:21:13.834] MultisessionFuture started
[16:21:13.834] - Launch lazy future ... done
[16:21:13.834] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[16:21:13.835] getGlobalsAndPackages() ...
[16:21:13.835] Searching for globals...
[16:21:13.836] - globals found: [3] ‘{’, ‘value’, ‘f1’
[16:21:13.836] Searching for globals ... DONE
[16:21:13.836] Resolving globals: FALSE
[16:21:13.838] The total size of the 1 globals is 1.56 MiB (1635600 bytes)
[16:21:13.839] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:21:13.839] - globals: [1] ‘f1’
[16:21:13.839] - packages: [1] ‘future’
[16:21:13.839] getGlobalsAndPackages() ... DONE
[16:21:13.839] run() for ‘Future’ ...
[16:21:13.839] - state: ‘created’
[16:21:13.839] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:21:13.850] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:13.850] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:21:13.850]   - Field: ‘node’
[16:21:13.850]   - Field: ‘label’
[16:21:13.850]   - Field: ‘local’
[16:21:13.850]   - Field: ‘owner’
[16:21:13.850]   - Field: ‘envir’
[16:21:13.850]   - Field: ‘workers’
[16:21:13.850]   - Field: ‘packages’
[16:21:13.850]   - Field: ‘gc’
[16:21:13.851]   - Field: ‘conditions’
[16:21:13.851]   - Field: ‘persistent’
[16:21:13.851]   - Field: ‘expr’
[16:21:13.851]   - Field: ‘uuid’
[16:21:13.851]   - Field: ‘seed’
[16:21:13.851]   - Field: ‘version’
[16:21:13.851]   - Field: ‘result’
[16:21:13.851]   - Field: ‘asynchronous’
[16:21:13.851]   - Field: ‘calls’
[16:21:13.851]   - Field: ‘globals’
[16:21:13.851]   - Field: ‘stdout’
[16:21:13.851]   - Field: ‘earlySignal’
[16:21:13.852]   - Field: ‘lazy’
[16:21:13.852]   - Field: ‘state’
[16:21:13.852] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:21:13.852] - Launch lazy future ...
[16:21:13.852] Packages needed by the future expression (n = 1): ‘future’
[16:21:13.852] Packages needed by future strategies (n = 0): <none>
[16:21:13.853] {
[16:21:13.853]     {
[16:21:13.853]         {
[16:21:13.853]             ...future.startTime <- base::Sys.time()
[16:21:13.853]             {
[16:21:13.853]                 {
[16:21:13.853]                   {
[16:21:13.853]                     {
[16:21:13.853]                       {
[16:21:13.853]                         base::local({
[16:21:13.853]                           has_future <- base::requireNamespace("future", 
[16:21:13.853]                             quietly = TRUE)
[16:21:13.853]                           if (has_future) {
[16:21:13.853]                             ns <- base::getNamespace("future")
[16:21:13.853]                             version <- ns[[".package"]][["version"]]
[16:21:13.853]                             if (is.null(version)) 
[16:21:13.853]                               version <- utils::packageVersion("future")
[16:21:13.853]                           }
[16:21:13.853]                           else {
[16:21:13.853]                             version <- NULL
[16:21:13.853]                           }
[16:21:13.853]                           if (!has_future || version < "1.8.0") {
[16:21:13.853]                             info <- base::c(r_version = base::gsub("R version ", 
[16:21:13.853]                               "", base::R.version$version.string), 
[16:21:13.853]                               platform = base::sprintf("%s (%s-bit)", 
[16:21:13.853]                                 base::R.version$platform, 8 * 
[16:21:13.853]                                   base::.Machine$sizeof.pointer), 
[16:21:13.853]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:13.853]                                 "release", "version")], collapse = " "), 
[16:21:13.853]                               hostname = base::Sys.info()[["nodename"]])
[16:21:13.853]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:21:13.853]                               info)
[16:21:13.853]                             info <- base::paste(info, collapse = "; ")
[16:21:13.853]                             if (!has_future) {
[16:21:13.853]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:13.853]                                 info)
[16:21:13.853]                             }
[16:21:13.853]                             else {
[16:21:13.853]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:13.853]                                 info, version)
[16:21:13.853]                             }
[16:21:13.853]                             base::stop(msg)
[16:21:13.853]                           }
[16:21:13.853]                         })
[16:21:13.853]                       }
[16:21:13.853]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:13.853]                       base::options(mc.cores = 1L)
[16:21:13.853]                     }
[16:21:13.853]                     base::local({
[16:21:13.853]                       for (pkg in "future") {
[16:21:13.853]                         base::loadNamespace(pkg)
[16:21:13.853]                         base::library(pkg, character.only = TRUE)
[16:21:13.853]                       }
[16:21:13.853]                     })
[16:21:13.853]                   }
[16:21:13.853]                   ...future.strategy.old <- future::plan("list")
[16:21:13.853]                   options(future.plan = NULL)
[16:21:13.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:13.853]                 }
[16:21:13.853]                 ...future.workdir <- getwd()
[16:21:13.853]             }
[16:21:13.853]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:13.853]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:13.853]         }
[16:21:13.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:13.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:13.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:13.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:13.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:13.853]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:13.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:13.853]             base::names(...future.oldOptions))
[16:21:13.853]     }
[16:21:13.853]     if (FALSE) {
[16:21:13.853]     }
[16:21:13.853]     else {
[16:21:13.853]         if (TRUE) {
[16:21:13.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:13.853]                 open = "w")
[16:21:13.853]         }
[16:21:13.853]         else {
[16:21:13.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:13.853]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:13.853]         }
[16:21:13.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:13.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:13.853]             base::sink(type = "output", split = FALSE)
[16:21:13.853]             base::close(...future.stdout)
[16:21:13.853]         }, add = TRUE)
[16:21:13.853]     }
[16:21:13.853]     ...future.frame <- base::sys.nframe()
[16:21:13.853]     ...future.conditions <- base::list()
[16:21:13.853]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:13.853]     if (FALSE) {
[16:21:13.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:13.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:13.853]     }
[16:21:13.853]     ...future.result <- base::tryCatch({
[16:21:13.853]         base::withCallingHandlers({
[16:21:13.853]             ...future.value <- base::withVisible(base::local({
[16:21:13.853]                 ...future.makeSendCondition <- base::local({
[16:21:13.853]                   sendCondition <- NULL
[16:21:13.853]                   function(frame = 1L) {
[16:21:13.853]                     if (is.function(sendCondition)) 
[16:21:13.853]                       return(sendCondition)
[16:21:13.853]                     ns <- getNamespace("parallel")
[16:21:13.853]                     if (exists("sendData", mode = "function", 
[16:21:13.853]                       envir = ns)) {
[16:21:13.853]                       parallel_sendData <- get("sendData", mode = "function", 
[16:21:13.853]                         envir = ns)
[16:21:13.853]                       envir <- sys.frame(frame)
[16:21:13.853]                       master <- NULL
[16:21:13.853]                       while (!identical(envir, .GlobalEnv) && 
[16:21:13.853]                         !identical(envir, emptyenv())) {
[16:21:13.853]                         if (exists("master", mode = "list", envir = envir, 
[16:21:13.853]                           inherits = FALSE)) {
[16:21:13.853]                           master <- get("master", mode = "list", 
[16:21:13.853]                             envir = envir, inherits = FALSE)
[16:21:13.853]                           if (inherits(master, c("SOCKnode", 
[16:21:13.853]                             "SOCK0node"))) {
[16:21:13.853]                             sendCondition <<- function(cond) {
[16:21:13.853]                               data <- list(type = "VALUE", value = cond, 
[16:21:13.853]                                 success = TRUE)
[16:21:13.853]                               parallel_sendData(master, data)
[16:21:13.853]                             }
[16:21:13.853]                             return(sendCondition)
[16:21:13.853]                           }
[16:21:13.853]                         }
[16:21:13.853]                         frame <- frame + 1L
[16:21:13.853]                         envir <- sys.frame(frame)
[16:21:13.853]                       }
[16:21:13.853]                     }
[16:21:13.853]                     sendCondition <<- function(cond) NULL
[16:21:13.853]                   }
[16:21:13.853]                 })
[16:21:13.853]                 withCallingHandlers({
[16:21:13.853]                   {
[16:21:13.853]                     value(f1)
[16:21:13.853]                   }
[16:21:13.853]                 }, immediateCondition = function(cond) {
[16:21:13.853]                   sendCondition <- ...future.makeSendCondition()
[16:21:13.853]                   sendCondition(cond)
[16:21:13.853]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.853]                   {
[16:21:13.853]                     inherits <- base::inherits
[16:21:13.853]                     invokeRestart <- base::invokeRestart
[16:21:13.853]                     is.null <- base::is.null
[16:21:13.853]                     muffled <- FALSE
[16:21:13.853]                     if (inherits(cond, "message")) {
[16:21:13.853]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:13.853]                       if (muffled) 
[16:21:13.853]                         invokeRestart("muffleMessage")
[16:21:13.853]                     }
[16:21:13.853]                     else if (inherits(cond, "warning")) {
[16:21:13.853]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:13.853]                       if (muffled) 
[16:21:13.853]                         invokeRestart("muffleWarning")
[16:21:13.853]                     }
[16:21:13.853]                     else if (inherits(cond, "condition")) {
[16:21:13.853]                       if (!is.null(pattern)) {
[16:21:13.853]                         computeRestarts <- base::computeRestarts
[16:21:13.853]                         grepl <- base::grepl
[16:21:13.853]                         restarts <- computeRestarts(cond)
[16:21:13.853]                         for (restart in restarts) {
[16:21:13.853]                           name <- restart$name
[16:21:13.853]                           if (is.null(name)) 
[16:21:13.853]                             next
[16:21:13.853]                           if (!grepl(pattern, name)) 
[16:21:13.853]                             next
[16:21:13.853]                           invokeRestart(restart)
[16:21:13.853]                           muffled <- TRUE
[16:21:13.853]                           break
[16:21:13.853]                         }
[16:21:13.853]                       }
[16:21:13.853]                     }
[16:21:13.853]                     invisible(muffled)
[16:21:13.853]                   }
[16:21:13.853]                   muffleCondition(cond)
[16:21:13.853]                 })
[16:21:13.853]             }))
[16:21:13.853]             future::FutureResult(value = ...future.value$value, 
[16:21:13.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.853]                   ...future.rng), globalenv = if (FALSE) 
[16:21:13.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:13.853]                     ...future.globalenv.names))
[16:21:13.853]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:13.853]         }, condition = base::local({
[16:21:13.853]             c <- base::c
[16:21:13.853]             inherits <- base::inherits
[16:21:13.853]             invokeRestart <- base::invokeRestart
[16:21:13.853]             length <- base::length
[16:21:13.853]             list <- base::list
[16:21:13.853]             seq.int <- base::seq.int
[16:21:13.853]             signalCondition <- base::signalCondition
[16:21:13.853]             sys.calls <- base::sys.calls
[16:21:13.853]             `[[` <- base::`[[`
[16:21:13.853]             `+` <- base::`+`
[16:21:13.853]             `<<-` <- base::`<<-`
[16:21:13.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:13.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:13.853]                   3L)]
[16:21:13.853]             }
[16:21:13.853]             function(cond) {
[16:21:13.853]                 is_error <- inherits(cond, "error")
[16:21:13.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:13.853]                   NULL)
[16:21:13.853]                 if (is_error) {
[16:21:13.853]                   sessionInformation <- function() {
[16:21:13.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:13.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:13.853]                       search = base::search(), system = base::Sys.info())
[16:21:13.853]                   }
[16:21:13.853]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:13.853]                     cond$call), session = sessionInformation(), 
[16:21:13.853]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:13.853]                   signalCondition(cond)
[16:21:13.853]                 }
[16:21:13.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:13.853]                 "immediateCondition"))) {
[16:21:13.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:13.853]                   ...future.conditions[[length(...future.conditions) + 
[16:21:13.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:13.853]                   if (TRUE && !signal) {
[16:21:13.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.853]                     {
[16:21:13.853]                       inherits <- base::inherits
[16:21:13.853]                       invokeRestart <- base::invokeRestart
[16:21:13.853]                       is.null <- base::is.null
[16:21:13.853]                       muffled <- FALSE
[16:21:13.853]                       if (inherits(cond, "message")) {
[16:21:13.853]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.853]                         if (muffled) 
[16:21:13.853]                           invokeRestart("muffleMessage")
[16:21:13.853]                       }
[16:21:13.853]                       else if (inherits(cond, "warning")) {
[16:21:13.853]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.853]                         if (muffled) 
[16:21:13.853]                           invokeRestart("muffleWarning")
[16:21:13.853]                       }
[16:21:13.853]                       else if (inherits(cond, "condition")) {
[16:21:13.853]                         if (!is.null(pattern)) {
[16:21:13.853]                           computeRestarts <- base::computeRestarts
[16:21:13.853]                           grepl <- base::grepl
[16:21:13.853]                           restarts <- computeRestarts(cond)
[16:21:13.853]                           for (restart in restarts) {
[16:21:13.853]                             name <- restart$name
[16:21:13.853]                             if (is.null(name)) 
[16:21:13.853]                               next
[16:21:13.853]                             if (!grepl(pattern, name)) 
[16:21:13.853]                               next
[16:21:13.853]                             invokeRestart(restart)
[16:21:13.853]                             muffled <- TRUE
[16:21:13.853]                             break
[16:21:13.853]                           }
[16:21:13.853]                         }
[16:21:13.853]                       }
[16:21:13.853]                       invisible(muffled)
[16:21:13.853]                     }
[16:21:13.853]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.853]                   }
[16:21:13.853]                 }
[16:21:13.853]                 else {
[16:21:13.853]                   if (TRUE) {
[16:21:13.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:13.853]                     {
[16:21:13.853]                       inherits <- base::inherits
[16:21:13.853]                       invokeRestart <- base::invokeRestart
[16:21:13.853]                       is.null <- base::is.null
[16:21:13.853]                       muffled <- FALSE
[16:21:13.853]                       if (inherits(cond, "message")) {
[16:21:13.853]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:13.853]                         if (muffled) 
[16:21:13.853]                           invokeRestart("muffleMessage")
[16:21:13.853]                       }
[16:21:13.853]                       else if (inherits(cond, "warning")) {
[16:21:13.853]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:13.853]                         if (muffled) 
[16:21:13.853]                           invokeRestart("muffleWarning")
[16:21:13.853]                       }
[16:21:13.853]                       else if (inherits(cond, "condition")) {
[16:21:13.853]                         if (!is.null(pattern)) {
[16:21:13.853]                           computeRestarts <- base::computeRestarts
[16:21:13.853]                           grepl <- base::grepl
[16:21:13.853]                           restarts <- computeRestarts(cond)
[16:21:13.853]                           for (restart in restarts) {
[16:21:13.853]                             name <- restart$name
[16:21:13.853]                             if (is.null(name)) 
[16:21:13.853]                               next
[16:21:13.853]                             if (!grepl(pattern, name)) 
[16:21:13.853]                               next
[16:21:13.853]                             invokeRestart(restart)
[16:21:13.853]                             muffled <- TRUE
[16:21:13.853]                             break
[16:21:13.853]                           }
[16:21:13.853]                         }
[16:21:13.853]                       }
[16:21:13.853]                       invisible(muffled)
[16:21:13.853]                     }
[16:21:13.853]                     muffleCondition(cond, pattern = "^muffle")
[16:21:13.853]                   }
[16:21:13.853]                 }
[16:21:13.853]             }
[16:21:13.853]         }))
[16:21:13.853]     }, error = function(ex) {
[16:21:13.853]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:13.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:13.853]                 ...future.rng), started = ...future.startTime, 
[16:21:13.853]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:13.853]             version = "1.8"), class = "FutureResult")
[16:21:13.853]     }, finally = {
[16:21:13.853]         if (!identical(...future.workdir, getwd())) 
[16:21:13.853]             setwd(...future.workdir)
[16:21:13.853]         {
[16:21:13.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:13.853]                 ...future.oldOptions$nwarnings <- NULL
[16:21:13.853]             }
[16:21:13.853]             base::options(...future.oldOptions)
[16:21:13.853]             if (.Platform$OS.type == "windows") {
[16:21:13.853]                 old_names <- names(...future.oldEnvVars)
[16:21:13.853]                 envs <- base::Sys.getenv()
[16:21:13.853]                 names <- names(envs)
[16:21:13.853]                 common <- intersect(names, old_names)
[16:21:13.853]                 added <- setdiff(names, old_names)
[16:21:13.853]                 removed <- setdiff(old_names, names)
[16:21:13.853]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:13.853]                   envs[common]]
[16:21:13.853]                 NAMES <- toupper(changed)
[16:21:13.853]                 args <- list()
[16:21:13.853]                 for (kk in seq_along(NAMES)) {
[16:21:13.853]                   name <- changed[[kk]]
[16:21:13.853]                   NAME <- NAMES[[kk]]
[16:21:13.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.853]                     next
[16:21:13.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.853]                 }
[16:21:13.853]                 NAMES <- toupper(added)
[16:21:13.853]                 for (kk in seq_along(NAMES)) {
[16:21:13.853]                   name <- added[[kk]]
[16:21:13.853]                   NAME <- NAMES[[kk]]
[16:21:13.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.853]                     next
[16:21:13.853]                   args[[name]] <- ""
[16:21:13.853]                 }
[16:21:13.853]                 NAMES <- toupper(removed)
[16:21:13.853]                 for (kk in seq_along(NAMES)) {
[16:21:13.853]                   name <- removed[[kk]]
[16:21:13.853]                   NAME <- NAMES[[kk]]
[16:21:13.853]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:13.853]                     next
[16:21:13.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:13.853]                 }
[16:21:13.853]                 if (length(args) > 0) 
[16:21:13.853]                   base::do.call(base::Sys.setenv, args = args)
[16:21:13.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:13.853]             }
[16:21:13.853]             else {
[16:21:13.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:13.853]             }
[16:21:13.853]             {
[16:21:13.853]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:13.853]                   0L) {
[16:21:13.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:13.853]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:13.853]                   base::options(opts)
[16:21:13.853]                 }
[16:21:13.853]                 {
[16:21:13.853]                   {
[16:21:13.853]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:13.853]                     NULL
[16:21:13.853]                   }
[16:21:13.853]                   options(future.plan = NULL)
[16:21:13.853]                   if (is.na(NA_character_)) 
[16:21:13.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:13.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:13.853]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:13.853]                     .init = FALSE)
[16:21:13.853]                 }
[16:21:13.853]             }
[16:21:13.853]         }
[16:21:13.853]     })
[16:21:13.853]     if (TRUE) {
[16:21:13.853]         base::sink(type = "output", split = FALSE)
[16:21:13.853]         if (TRUE) {
[16:21:13.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:13.853]         }
[16:21:13.853]         else {
[16:21:13.853]             ...future.result["stdout"] <- base::list(NULL)
[16:21:13.853]         }
[16:21:13.853]         base::close(...future.stdout)
[16:21:13.853]         ...future.stdout <- NULL
[16:21:13.853]     }
[16:21:13.853]     ...future.result$conditions <- ...future.conditions
[16:21:13.853]     ...future.result$finished <- base::Sys.time()
[16:21:13.853]     ...future.result
[16:21:13.853] }
[16:21:13.905] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[16:21:13.907] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[16:21:13.961] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[16:21:13.961] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[16:21:13.962] MultisessionFuture started
[16:21:13.962] - Launch lazy future ... done
[16:21:13.962] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1f51aea7-2843-34b8-e732-01ee48f25949
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[16:21:13.979] result() for ClusterFuture ...
[16:21:13.979] receiveMessageFromWorker() for ClusterFuture ...
[16:21:13.979] - Validating connection of MultisessionFuture
[16:21:14.057] - received message: FutureResult
[16:21:14.058] - Received FutureResult
[16:21:14.058] - Erased future from FutureRegistry
[16:21:14.058] result() for ClusterFuture ...
[16:21:14.058] - result already collected: FutureResult
[16:21:14.058] result() for ClusterFuture ... done
[16:21:14.058] signalConditions() ...
[16:21:14.058]  - include = ‘immediateCondition’
[16:21:14.058]  - exclude = 
[16:21:14.059]  - resignal = FALSE
[16:21:14.059]  - Number of conditions: 1
[16:21:14.059] signalConditions() ... done
[16:21:14.059] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:14.059] result() for ClusterFuture ... done
[16:21:14.059] result() for ClusterFuture ...
[16:21:14.059] - result already collected: FutureResult
[16:21:14.059] result() for ClusterFuture ... done
[16:21:14.059] signalConditions() ...
[16:21:14.059]  - include = ‘immediateCondition’
[16:21:14.059]  - exclude = 
[16:21:14.060]  - resignal = FALSE
[16:21:14.060]  - Number of conditions: 1
[16:21:14.060] signalConditions() ... done
[16:21:14.060] Future state: ‘finished’
[16:21:14.060] result() for ClusterFuture ...
[16:21:14.060] - result already collected: FutureResult
[16:21:14.060] result() for ClusterFuture ... done
[16:21:14.060] signalConditions() ...
[16:21:14.060]  - include = ‘condition’
[16:21:14.060]  - exclude = ‘immediateCondition’
[16:21:14.061]  - resignal = TRUE
[16:21:14.061]  - Number of conditions: 1
[16:21:14.061]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[16:21:14.061] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (1f51aea7-2843-34b8-e732-01ee48f25949; pid 84599 on b478068843b5) that created it, not by any other R processes (3d70318d-f55a-9708-0545-3cb5244eedf8; pid 84652 on b478068843b5): {; 42L; }>


Future UUID: 4937898d-9ad7-02fd-7569-21f0c6daf9b0


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 1f51aea7-2843-34b8-e732-01ee48f25949
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[16:21:14.062] result() for ClusterFuture ...
[16:21:14.062] receiveMessageFromWorker() for ClusterFuture ...
[16:21:14.062] - Validating connection of MultisessionFuture
[16:21:14.062] - received message: FutureResult
[16:21:14.062] - Received FutureResult
[16:21:14.063] - Erased future from FutureRegistry
[16:21:14.063] result() for ClusterFuture ...
[16:21:14.063] - result already collected: FutureResult
[16:21:14.063] result() for ClusterFuture ... done
[16:21:14.063] receiveMessageFromWorker() for ClusterFuture ... done
[16:21:14.063] result() for ClusterFuture ... done
[16:21:14.063] result() for ClusterFuture ...
[16:21:14.063] - result already collected: FutureResult
[16:21:14.063] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[16:21:14.064] plan(): Setting new future strategy stack:
[16:21:14.064] List of future strategies:
[16:21:14.064] 1. FutureStrategy:
[16:21:14.064]    - args: function (..., envir = parent.frame())
[16:21:14.064]    - tweaked: FALSE
[16:21:14.064]    - call: future::plan(oplan)
[16:21:14.065] plan(): nbrOfWorkers() = 1
> 
