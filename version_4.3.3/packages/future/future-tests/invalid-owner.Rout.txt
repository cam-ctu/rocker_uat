
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:37:05.008] plan(): Setting new future strategy stack:
[13:37:05.008] List of future strategies:
[13:37:05.008] 1. sequential:
[13:37:05.008]    - args: function (..., envir = parent.frame())
[13:37:05.008]    - tweaked: FALSE
[13:37:05.008]    - call: future::plan("sequential")
[13:37:05.022] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[13:37:05.034] plan(): Setting new future strategy stack:
[13:37:05.034] List of future strategies:
[13:37:05.034] 1. multisession:
[13:37:05.034]    - args: function (..., workers = 2L, envir = parent.frame())
[13:37:05.034]    - tweaked: TRUE
[13:37:05.034]    - call: plan(multisession, workers = 2L)
[13:37:05.044] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:05.044] multisession:
[13:37:05.044] - args: function (..., workers = 2L, envir = parent.frame())
[13:37:05.044] - tweaked: TRUE
[13:37:05.044] - call: plan(multisession, workers = 2L)
[13:37:05.046] getGlobalsAndPackages() ...
[13:37:05.046] Not searching for globals
[13:37:05.046] - globals: [0] <none>
[13:37:05.046] getGlobalsAndPackages() ... DONE
[13:37:05.047] [local output] makeClusterPSOCK() ...
[13:37:05.079] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:05.080] [local output] Base port: 11988
[13:37:05.080] [local output] Getting setup options for 2 cluster nodes ...
[13:37:05.080] [local output]  - Node 1 of 2 ...
[13:37:05.081] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:05.082] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpiVCdht/worker.rank=1.parallelly.parent=85700.14ec473c2e60b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpiVCdht/worker.rank=1.parallelly.parent=85700.14ec473c2e60b.pid")'’
[13:37:05.269] - Possible to infer worker's PID: TRUE
[13:37:05.269] [local output] Rscript port: 11988

[13:37:05.270] [local output]  - Node 2 of 2 ...
[13:37:05.270] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:05.271] [local output] Rscript port: 11988

[13:37:05.271] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:05.271] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:05.272] [local output] Setting up PSOCK nodes in parallel
[13:37:05.272] List of 36
[13:37:05.272]  $ worker          : chr "localhost"
[13:37:05.272]   ..- attr(*, "localhost")= logi TRUE
[13:37:05.272]  $ master          : chr "localhost"
[13:37:05.272]  $ port            : int 11988
[13:37:05.272]  $ connectTimeout  : num 120
[13:37:05.272]  $ timeout         : num 2592000
[13:37:05.272]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:05.272]  $ homogeneous     : logi TRUE
[13:37:05.272]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:05.272]  $ rscript_envs    : NULL
[13:37:05.272]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:05.272]  $ rscript_startup : NULL
[13:37:05.272]  $ rscript_sh      : chr "sh"
[13:37:05.272]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:05.272]  $ methods         : logi TRUE
[13:37:05.272]  $ socketOptions   : chr "no-delay"
[13:37:05.272]  $ useXDR          : logi FALSE
[13:37:05.272]  $ outfile         : chr "/dev/null"
[13:37:05.272]  $ renice          : int NA
[13:37:05.272]  $ rshcmd          : NULL
[13:37:05.272]  $ user            : chr(0) 
[13:37:05.272]  $ revtunnel       : logi FALSE
[13:37:05.272]  $ rshlogfile      : NULL
[13:37:05.272]  $ rshopts         : chr(0) 
[13:37:05.272]  $ rank            : int 1
[13:37:05.272]  $ manual          : logi FALSE
[13:37:05.272]  $ dryrun          : logi FALSE
[13:37:05.272]  $ quiet           : logi FALSE
[13:37:05.272]  $ setup_strategy  : chr "parallel"
[13:37:05.272]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:05.272]  $ pidfile         : chr "/tmp/RtmpiVCdht/worker.rank=1.parallelly.parent=85700.14ec473c2e60b.pid"
[13:37:05.272]  $ rshcmd_label    : NULL
[13:37:05.272]  $ rsh_call        : NULL
[13:37:05.272]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:05.272]  $ localMachine    : logi TRUE
[13:37:05.272]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:05.272]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:05.272]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:05.272]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:05.272]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:05.272]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:05.272]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:05.272]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:05.272]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:05.272]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:05.272]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:05.272]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:05.272]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:05.272]  $ arguments       :List of 28
[13:37:05.272]   ..$ worker          : chr "localhost"
[13:37:05.272]   ..$ master          : NULL
[13:37:05.272]   ..$ port            : int 11988
[13:37:05.272]   ..$ connectTimeout  : num 120
[13:37:05.272]   ..$ timeout         : num 2592000
[13:37:05.272]   ..$ rscript         : NULL
[13:37:05.272]   ..$ homogeneous     : NULL
[13:37:05.272]   ..$ rscript_args    : NULL
[13:37:05.272]   ..$ rscript_envs    : NULL
[13:37:05.272]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:05.272]   ..$ rscript_startup : NULL
[13:37:05.272]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:05.272]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:05.272]   ..$ methods         : logi TRUE
[13:37:05.272]   ..$ socketOptions   : chr "no-delay"
[13:37:05.272]   ..$ useXDR          : logi FALSE
[13:37:05.272]   ..$ outfile         : chr "/dev/null"
[13:37:05.272]   ..$ renice          : int NA
[13:37:05.272]   ..$ rshcmd          : NULL
[13:37:05.272]   ..$ user            : NULL
[13:37:05.272]   ..$ revtunnel       : logi NA
[13:37:05.272]   ..$ rshlogfile      : NULL
[13:37:05.272]   ..$ rshopts         : NULL
[13:37:05.272]   ..$ rank            : int 1
[13:37:05.272]   ..$ manual          : logi FALSE
[13:37:05.272]   ..$ dryrun          : logi FALSE
[13:37:05.272]   ..$ quiet           : logi FALSE
[13:37:05.272]   ..$ setup_strategy  : chr "parallel"
[13:37:05.272]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:05.291] [local output] System call to launch all workers:
[13:37:05.291] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpiVCdht/worker.rank=1.parallelly.parent=85700.14ec473c2e60b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11988 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:05.291] [local output] Starting PSOCK main server
[13:37:05.296] [local output] Workers launched
[13:37:05.297] [local output] Waiting for workers to connect back
[13:37:05.297]  - [local output] 0 workers out of 2 ready
[13:37:05.533]  - [local output] 0 workers out of 2 ready
[13:37:05.534]  - [local output] 1 workers out of 2 ready
[13:37:05.546]  - [local output] 1 workers out of 2 ready
[13:37:05.547]  - [local output] 2 workers out of 2 ready
[13:37:05.547] [local output] Launching of workers completed
[13:37:05.547] [local output] Collecting session information from workers
[13:37:05.548] [local output]  - Worker #1 of 2
[13:37:05.548] [local output]  - Worker #2 of 2
[13:37:05.548] [local output] makeClusterPSOCK() ... done
[13:37:05.562] Packages needed by the future expression (n = 0): <none>
[13:37:05.562] Packages needed by future strategies (n = 0): <none>
[13:37:05.563] {
[13:37:05.563]     {
[13:37:05.563]         {
[13:37:05.563]             ...future.startTime <- base::Sys.time()
[13:37:05.563]             {
[13:37:05.563]                 {
[13:37:05.563]                   {
[13:37:05.563]                     {
[13:37:05.563]                       base::local({
[13:37:05.563]                         has_future <- base::requireNamespace("future", 
[13:37:05.563]                           quietly = TRUE)
[13:37:05.563]                         if (has_future) {
[13:37:05.563]                           ns <- base::getNamespace("future")
[13:37:05.563]                           version <- ns[[".package"]][["version"]]
[13:37:05.563]                           if (is.null(version)) 
[13:37:05.563]                             version <- utils::packageVersion("future")
[13:37:05.563]                         }
[13:37:05.563]                         else {
[13:37:05.563]                           version <- NULL
[13:37:05.563]                         }
[13:37:05.563]                         if (!has_future || version < "1.8.0") {
[13:37:05.563]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.563]                             "", base::R.version$version.string), 
[13:37:05.563]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.563]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.563]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.563]                               "release", "version")], collapse = " "), 
[13:37:05.563]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.563]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.563]                             info)
[13:37:05.563]                           info <- base::paste(info, collapse = "; ")
[13:37:05.563]                           if (!has_future) {
[13:37:05.563]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.563]                               info)
[13:37:05.563]                           }
[13:37:05.563]                           else {
[13:37:05.563]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.563]                               info, version)
[13:37:05.563]                           }
[13:37:05.563]                           base::stop(msg)
[13:37:05.563]                         }
[13:37:05.563]                       })
[13:37:05.563]                     }
[13:37:05.563]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.563]                     base::options(mc.cores = 1L)
[13:37:05.563]                   }
[13:37:05.563]                   ...future.strategy.old <- future::plan("list")
[13:37:05.563]                   options(future.plan = NULL)
[13:37:05.563]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.563]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.563]                 }
[13:37:05.563]                 ...future.workdir <- getwd()
[13:37:05.563]             }
[13:37:05.563]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.563]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.563]         }
[13:37:05.563]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.563]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.563]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.563]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.563]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.563]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.563]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.563]             base::names(...future.oldOptions))
[13:37:05.563]     }
[13:37:05.563]     if (FALSE) {
[13:37:05.563]     }
[13:37:05.563]     else {
[13:37:05.563]         if (TRUE) {
[13:37:05.563]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.563]                 open = "w")
[13:37:05.563]         }
[13:37:05.563]         else {
[13:37:05.563]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.563]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.563]         }
[13:37:05.563]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.563]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.563]             base::sink(type = "output", split = FALSE)
[13:37:05.563]             base::close(...future.stdout)
[13:37:05.563]         }, add = TRUE)
[13:37:05.563]     }
[13:37:05.563]     ...future.frame <- base::sys.nframe()
[13:37:05.563]     ...future.conditions <- base::list()
[13:37:05.563]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.563]     if (FALSE) {
[13:37:05.563]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.563]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.563]     }
[13:37:05.563]     ...future.result <- base::tryCatch({
[13:37:05.563]         base::withCallingHandlers({
[13:37:05.563]             ...future.value <- base::withVisible(base::local({
[13:37:05.563]                 ...future.makeSendCondition <- base::local({
[13:37:05.563]                   sendCondition <- NULL
[13:37:05.563]                   function(frame = 1L) {
[13:37:05.563]                     if (is.function(sendCondition)) 
[13:37:05.563]                       return(sendCondition)
[13:37:05.563]                     ns <- getNamespace("parallel")
[13:37:05.563]                     if (exists("sendData", mode = "function", 
[13:37:05.563]                       envir = ns)) {
[13:37:05.563]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.563]                         envir = ns)
[13:37:05.563]                       envir <- sys.frame(frame)
[13:37:05.563]                       master <- NULL
[13:37:05.563]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.563]                         !identical(envir, emptyenv())) {
[13:37:05.563]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.563]                           inherits = FALSE)) {
[13:37:05.563]                           master <- get("master", mode = "list", 
[13:37:05.563]                             envir = envir, inherits = FALSE)
[13:37:05.563]                           if (inherits(master, c("SOCKnode", 
[13:37:05.563]                             "SOCK0node"))) {
[13:37:05.563]                             sendCondition <<- function(cond) {
[13:37:05.563]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.563]                                 success = TRUE)
[13:37:05.563]                               parallel_sendData(master, data)
[13:37:05.563]                             }
[13:37:05.563]                             return(sendCondition)
[13:37:05.563]                           }
[13:37:05.563]                         }
[13:37:05.563]                         frame <- frame + 1L
[13:37:05.563]                         envir <- sys.frame(frame)
[13:37:05.563]                       }
[13:37:05.563]                     }
[13:37:05.563]                     sendCondition <<- function(cond) NULL
[13:37:05.563]                   }
[13:37:05.563]                 })
[13:37:05.563]                 withCallingHandlers({
[13:37:05.563]                   NA
[13:37:05.563]                 }, immediateCondition = function(cond) {
[13:37:05.563]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.563]                   sendCondition(cond)
[13:37:05.563]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.563]                   {
[13:37:05.563]                     inherits <- base::inherits
[13:37:05.563]                     invokeRestart <- base::invokeRestart
[13:37:05.563]                     is.null <- base::is.null
[13:37:05.563]                     muffled <- FALSE
[13:37:05.563]                     if (inherits(cond, "message")) {
[13:37:05.563]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.563]                       if (muffled) 
[13:37:05.563]                         invokeRestart("muffleMessage")
[13:37:05.563]                     }
[13:37:05.563]                     else if (inherits(cond, "warning")) {
[13:37:05.563]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.563]                       if (muffled) 
[13:37:05.563]                         invokeRestart("muffleWarning")
[13:37:05.563]                     }
[13:37:05.563]                     else if (inherits(cond, "condition")) {
[13:37:05.563]                       if (!is.null(pattern)) {
[13:37:05.563]                         computeRestarts <- base::computeRestarts
[13:37:05.563]                         grepl <- base::grepl
[13:37:05.563]                         restarts <- computeRestarts(cond)
[13:37:05.563]                         for (restart in restarts) {
[13:37:05.563]                           name <- restart$name
[13:37:05.563]                           if (is.null(name)) 
[13:37:05.563]                             next
[13:37:05.563]                           if (!grepl(pattern, name)) 
[13:37:05.563]                             next
[13:37:05.563]                           invokeRestart(restart)
[13:37:05.563]                           muffled <- TRUE
[13:37:05.563]                           break
[13:37:05.563]                         }
[13:37:05.563]                       }
[13:37:05.563]                     }
[13:37:05.563]                     invisible(muffled)
[13:37:05.563]                   }
[13:37:05.563]                   muffleCondition(cond)
[13:37:05.563]                 })
[13:37:05.563]             }))
[13:37:05.563]             future::FutureResult(value = ...future.value$value, 
[13:37:05.563]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.563]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.563]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.563]                     ...future.globalenv.names))
[13:37:05.563]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.563]         }, condition = base::local({
[13:37:05.563]             c <- base::c
[13:37:05.563]             inherits <- base::inherits
[13:37:05.563]             invokeRestart <- base::invokeRestart
[13:37:05.563]             length <- base::length
[13:37:05.563]             list <- base::list
[13:37:05.563]             seq.int <- base::seq.int
[13:37:05.563]             signalCondition <- base::signalCondition
[13:37:05.563]             sys.calls <- base::sys.calls
[13:37:05.563]             `[[` <- base::`[[`
[13:37:05.563]             `+` <- base::`+`
[13:37:05.563]             `<<-` <- base::`<<-`
[13:37:05.563]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.563]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.563]                   3L)]
[13:37:05.563]             }
[13:37:05.563]             function(cond) {
[13:37:05.563]                 is_error <- inherits(cond, "error")
[13:37:05.563]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.563]                   NULL)
[13:37:05.563]                 if (is_error) {
[13:37:05.563]                   sessionInformation <- function() {
[13:37:05.563]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.563]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.563]                       search = base::search(), system = base::Sys.info())
[13:37:05.563]                   }
[13:37:05.563]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.563]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.563]                     cond$call), session = sessionInformation(), 
[13:37:05.563]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.563]                   signalCondition(cond)
[13:37:05.563]                 }
[13:37:05.563]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.563]                 "immediateCondition"))) {
[13:37:05.563]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.563]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.563]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.563]                   if (TRUE && !signal) {
[13:37:05.563]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.563]                     {
[13:37:05.563]                       inherits <- base::inherits
[13:37:05.563]                       invokeRestart <- base::invokeRestart
[13:37:05.563]                       is.null <- base::is.null
[13:37:05.563]                       muffled <- FALSE
[13:37:05.563]                       if (inherits(cond, "message")) {
[13:37:05.563]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.563]                         if (muffled) 
[13:37:05.563]                           invokeRestart("muffleMessage")
[13:37:05.563]                       }
[13:37:05.563]                       else if (inherits(cond, "warning")) {
[13:37:05.563]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.563]                         if (muffled) 
[13:37:05.563]                           invokeRestart("muffleWarning")
[13:37:05.563]                       }
[13:37:05.563]                       else if (inherits(cond, "condition")) {
[13:37:05.563]                         if (!is.null(pattern)) {
[13:37:05.563]                           computeRestarts <- base::computeRestarts
[13:37:05.563]                           grepl <- base::grepl
[13:37:05.563]                           restarts <- computeRestarts(cond)
[13:37:05.563]                           for (restart in restarts) {
[13:37:05.563]                             name <- restart$name
[13:37:05.563]                             if (is.null(name)) 
[13:37:05.563]                               next
[13:37:05.563]                             if (!grepl(pattern, name)) 
[13:37:05.563]                               next
[13:37:05.563]                             invokeRestart(restart)
[13:37:05.563]                             muffled <- TRUE
[13:37:05.563]                             break
[13:37:05.563]                           }
[13:37:05.563]                         }
[13:37:05.563]                       }
[13:37:05.563]                       invisible(muffled)
[13:37:05.563]                     }
[13:37:05.563]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.563]                   }
[13:37:05.563]                 }
[13:37:05.563]                 else {
[13:37:05.563]                   if (TRUE) {
[13:37:05.563]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.563]                     {
[13:37:05.563]                       inherits <- base::inherits
[13:37:05.563]                       invokeRestart <- base::invokeRestart
[13:37:05.563]                       is.null <- base::is.null
[13:37:05.563]                       muffled <- FALSE
[13:37:05.563]                       if (inherits(cond, "message")) {
[13:37:05.563]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.563]                         if (muffled) 
[13:37:05.563]                           invokeRestart("muffleMessage")
[13:37:05.563]                       }
[13:37:05.563]                       else if (inherits(cond, "warning")) {
[13:37:05.563]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.563]                         if (muffled) 
[13:37:05.563]                           invokeRestart("muffleWarning")
[13:37:05.563]                       }
[13:37:05.563]                       else if (inherits(cond, "condition")) {
[13:37:05.563]                         if (!is.null(pattern)) {
[13:37:05.563]                           computeRestarts <- base::computeRestarts
[13:37:05.563]                           grepl <- base::grepl
[13:37:05.563]                           restarts <- computeRestarts(cond)
[13:37:05.563]                           for (restart in restarts) {
[13:37:05.563]                             name <- restart$name
[13:37:05.563]                             if (is.null(name)) 
[13:37:05.563]                               next
[13:37:05.563]                             if (!grepl(pattern, name)) 
[13:37:05.563]                               next
[13:37:05.563]                             invokeRestart(restart)
[13:37:05.563]                             muffled <- TRUE
[13:37:05.563]                             break
[13:37:05.563]                           }
[13:37:05.563]                         }
[13:37:05.563]                       }
[13:37:05.563]                       invisible(muffled)
[13:37:05.563]                     }
[13:37:05.563]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.563]                   }
[13:37:05.563]                 }
[13:37:05.563]             }
[13:37:05.563]         }))
[13:37:05.563]     }, error = function(ex) {
[13:37:05.563]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.563]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.563]                 ...future.rng), started = ...future.startTime, 
[13:37:05.563]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.563]             version = "1.8"), class = "FutureResult")
[13:37:05.563]     }, finally = {
[13:37:05.563]         if (!identical(...future.workdir, getwd())) 
[13:37:05.563]             setwd(...future.workdir)
[13:37:05.563]         {
[13:37:05.563]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.563]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.563]             }
[13:37:05.563]             base::options(...future.oldOptions)
[13:37:05.563]             if (.Platform$OS.type == "windows") {
[13:37:05.563]                 old_names <- names(...future.oldEnvVars)
[13:37:05.563]                 envs <- base::Sys.getenv()
[13:37:05.563]                 names <- names(envs)
[13:37:05.563]                 common <- intersect(names, old_names)
[13:37:05.563]                 added <- setdiff(names, old_names)
[13:37:05.563]                 removed <- setdiff(old_names, names)
[13:37:05.563]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.563]                   envs[common]]
[13:37:05.563]                 NAMES <- toupper(changed)
[13:37:05.563]                 args <- list()
[13:37:05.563]                 for (kk in seq_along(NAMES)) {
[13:37:05.563]                   name <- changed[[kk]]
[13:37:05.563]                   NAME <- NAMES[[kk]]
[13:37:05.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.563]                     next
[13:37:05.563]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.563]                 }
[13:37:05.563]                 NAMES <- toupper(added)
[13:37:05.563]                 for (kk in seq_along(NAMES)) {
[13:37:05.563]                   name <- added[[kk]]
[13:37:05.563]                   NAME <- NAMES[[kk]]
[13:37:05.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.563]                     next
[13:37:05.563]                   args[[name]] <- ""
[13:37:05.563]                 }
[13:37:05.563]                 NAMES <- toupper(removed)
[13:37:05.563]                 for (kk in seq_along(NAMES)) {
[13:37:05.563]                   name <- removed[[kk]]
[13:37:05.563]                   NAME <- NAMES[[kk]]
[13:37:05.563]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.563]                     next
[13:37:05.563]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.563]                 }
[13:37:05.563]                 if (length(args) > 0) 
[13:37:05.563]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.563]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.563]             }
[13:37:05.563]             else {
[13:37:05.563]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.563]             }
[13:37:05.563]             {
[13:37:05.563]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.563]                   0L) {
[13:37:05.563]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.563]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.563]                   base::options(opts)
[13:37:05.563]                 }
[13:37:05.563]                 {
[13:37:05.563]                   {
[13:37:05.563]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.563]                     NULL
[13:37:05.563]                   }
[13:37:05.563]                   options(future.plan = NULL)
[13:37:05.563]                   if (is.na(NA_character_)) 
[13:37:05.563]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.563]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.563]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.563]                     .init = FALSE)
[13:37:05.563]                 }
[13:37:05.563]             }
[13:37:05.563]         }
[13:37:05.563]     })
[13:37:05.563]     if (TRUE) {
[13:37:05.563]         base::sink(type = "output", split = FALSE)
[13:37:05.563]         if (TRUE) {
[13:37:05.563]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.563]         }
[13:37:05.563]         else {
[13:37:05.563]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.563]         }
[13:37:05.563]         base::close(...future.stdout)
[13:37:05.563]         ...future.stdout <- NULL
[13:37:05.563]     }
[13:37:05.563]     ...future.result$conditions <- ...future.conditions
[13:37:05.563]     ...future.result$finished <- base::Sys.time()
[13:37:05.563]     ...future.result
[13:37:05.563] }
[13:37:05.616] MultisessionFuture started
[13:37:05.616] result() for ClusterFuture ...
[13:37:05.617] receiveMessageFromWorker() for ClusterFuture ...
[13:37:05.617] - Validating connection of MultisessionFuture
[13:37:05.649] - received message: FutureResult
[13:37:05.649] - Received FutureResult
[13:37:05.652] - Erased future from FutureRegistry
[13:37:05.652] result() for ClusterFuture ...
[13:37:05.653] - result already collected: FutureResult
[13:37:05.653] result() for ClusterFuture ... done
[13:37:05.653] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:05.653] result() for ClusterFuture ... done
[13:37:05.653] result() for ClusterFuture ...
[13:37:05.653] - result already collected: FutureResult
[13:37:05.653] result() for ClusterFuture ... done
[13:37:05.653] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:05.654] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 522583be-85ec-ddaf-5357-ae528484b6c8
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[13:37:05.654] getGlobalsAndPackages() ...
[13:37:05.654] Searching for globals...
[13:37:05.662] - globals found: [2] ‘{’, ‘:::’
[13:37:05.663] Searching for globals ... DONE
[13:37:05.663] Resolving globals: FALSE
[13:37:05.663] 
[13:37:05.664] 
[13:37:05.664] getGlobalsAndPackages() ... DONE
[13:37:05.664] run() for ‘Future’ ...
[13:37:05.664] - state: ‘created’
[13:37:05.664] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:05.676] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:05.676] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:05.676]   - Field: ‘node’
[13:37:05.676]   - Field: ‘label’
[13:37:05.676]   - Field: ‘local’
[13:37:05.676]   - Field: ‘owner’
[13:37:05.676]   - Field: ‘envir’
[13:37:05.676]   - Field: ‘workers’
[13:37:05.676]   - Field: ‘packages’
[13:37:05.677]   - Field: ‘gc’
[13:37:05.677]   - Field: ‘conditions’
[13:37:05.677]   - Field: ‘persistent’
[13:37:05.677]   - Field: ‘expr’
[13:37:05.677]   - Field: ‘uuid’
[13:37:05.677]   - Field: ‘seed’
[13:37:05.677]   - Field: ‘version’
[13:37:05.677]   - Field: ‘result’
[13:37:05.678]   - Field: ‘asynchronous’
[13:37:05.678]   - Field: ‘calls’
[13:37:05.678]   - Field: ‘globals’
[13:37:05.678]   - Field: ‘stdout’
[13:37:05.678]   - Field: ‘earlySignal’
[13:37:05.678]   - Field: ‘lazy’
[13:37:05.678]   - Field: ‘state’
[13:37:05.678] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:05.678] - Launch lazy future ...
[13:37:05.679] Packages needed by the future expression (n = 0): <none>
[13:37:05.679] Packages needed by future strategies (n = 0): <none>
[13:37:05.679] {
[13:37:05.679]     {
[13:37:05.679]         {
[13:37:05.679]             ...future.startTime <- base::Sys.time()
[13:37:05.679]             {
[13:37:05.679]                 {
[13:37:05.679]                   {
[13:37:05.679]                     {
[13:37:05.679]                       base::local({
[13:37:05.679]                         has_future <- base::requireNamespace("future", 
[13:37:05.679]                           quietly = TRUE)
[13:37:05.679]                         if (has_future) {
[13:37:05.679]                           ns <- base::getNamespace("future")
[13:37:05.679]                           version <- ns[[".package"]][["version"]]
[13:37:05.679]                           if (is.null(version)) 
[13:37:05.679]                             version <- utils::packageVersion("future")
[13:37:05.679]                         }
[13:37:05.679]                         else {
[13:37:05.679]                           version <- NULL
[13:37:05.679]                         }
[13:37:05.679]                         if (!has_future || version < "1.8.0") {
[13:37:05.679]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.679]                             "", base::R.version$version.string), 
[13:37:05.679]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.679]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.679]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.679]                               "release", "version")], collapse = " "), 
[13:37:05.679]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.679]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.679]                             info)
[13:37:05.679]                           info <- base::paste(info, collapse = "; ")
[13:37:05.679]                           if (!has_future) {
[13:37:05.679]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.679]                               info)
[13:37:05.679]                           }
[13:37:05.679]                           else {
[13:37:05.679]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.679]                               info, version)
[13:37:05.679]                           }
[13:37:05.679]                           base::stop(msg)
[13:37:05.679]                         }
[13:37:05.679]                       })
[13:37:05.679]                     }
[13:37:05.679]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.679]                     base::options(mc.cores = 1L)
[13:37:05.679]                   }
[13:37:05.679]                   ...future.strategy.old <- future::plan("list")
[13:37:05.679]                   options(future.plan = NULL)
[13:37:05.679]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.679]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.679]                 }
[13:37:05.679]                 ...future.workdir <- getwd()
[13:37:05.679]             }
[13:37:05.679]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.679]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.679]         }
[13:37:05.679]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.679]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.679]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.679]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.679]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.679]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.679]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.679]             base::names(...future.oldOptions))
[13:37:05.679]     }
[13:37:05.679]     if (FALSE) {
[13:37:05.679]     }
[13:37:05.679]     else {
[13:37:05.679]         if (TRUE) {
[13:37:05.679]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.679]                 open = "w")
[13:37:05.679]         }
[13:37:05.679]         else {
[13:37:05.679]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.679]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.679]         }
[13:37:05.679]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.679]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.679]             base::sink(type = "output", split = FALSE)
[13:37:05.679]             base::close(...future.stdout)
[13:37:05.679]         }, add = TRUE)
[13:37:05.679]     }
[13:37:05.679]     ...future.frame <- base::sys.nframe()
[13:37:05.679]     ...future.conditions <- base::list()
[13:37:05.679]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.679]     if (FALSE) {
[13:37:05.679]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.679]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.679]     }
[13:37:05.679]     ...future.result <- base::tryCatch({
[13:37:05.679]         base::withCallingHandlers({
[13:37:05.679]             ...future.value <- base::withVisible(base::local({
[13:37:05.679]                 ...future.makeSendCondition <- base::local({
[13:37:05.679]                   sendCondition <- NULL
[13:37:05.679]                   function(frame = 1L) {
[13:37:05.679]                     if (is.function(sendCondition)) 
[13:37:05.679]                       return(sendCondition)
[13:37:05.679]                     ns <- getNamespace("parallel")
[13:37:05.679]                     if (exists("sendData", mode = "function", 
[13:37:05.679]                       envir = ns)) {
[13:37:05.679]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.679]                         envir = ns)
[13:37:05.679]                       envir <- sys.frame(frame)
[13:37:05.679]                       master <- NULL
[13:37:05.679]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.679]                         !identical(envir, emptyenv())) {
[13:37:05.679]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.679]                           inherits = FALSE)) {
[13:37:05.679]                           master <- get("master", mode = "list", 
[13:37:05.679]                             envir = envir, inherits = FALSE)
[13:37:05.679]                           if (inherits(master, c("SOCKnode", 
[13:37:05.679]                             "SOCK0node"))) {
[13:37:05.679]                             sendCondition <<- function(cond) {
[13:37:05.679]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.679]                                 success = TRUE)
[13:37:05.679]                               parallel_sendData(master, data)
[13:37:05.679]                             }
[13:37:05.679]                             return(sendCondition)
[13:37:05.679]                           }
[13:37:05.679]                         }
[13:37:05.679]                         frame <- frame + 1L
[13:37:05.679]                         envir <- sys.frame(frame)
[13:37:05.679]                       }
[13:37:05.679]                     }
[13:37:05.679]                     sendCondition <<- function(cond) NULL
[13:37:05.679]                   }
[13:37:05.679]                 })
[13:37:05.679]                 withCallingHandlers({
[13:37:05.679]                   {
[13:37:05.679]                     future:::session_uuid(attributes = TRUE)
[13:37:05.679]                   }
[13:37:05.679]                 }, immediateCondition = function(cond) {
[13:37:05.679]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.679]                   sendCondition(cond)
[13:37:05.679]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.679]                   {
[13:37:05.679]                     inherits <- base::inherits
[13:37:05.679]                     invokeRestart <- base::invokeRestart
[13:37:05.679]                     is.null <- base::is.null
[13:37:05.679]                     muffled <- FALSE
[13:37:05.679]                     if (inherits(cond, "message")) {
[13:37:05.679]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.679]                       if (muffled) 
[13:37:05.679]                         invokeRestart("muffleMessage")
[13:37:05.679]                     }
[13:37:05.679]                     else if (inherits(cond, "warning")) {
[13:37:05.679]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.679]                       if (muffled) 
[13:37:05.679]                         invokeRestart("muffleWarning")
[13:37:05.679]                     }
[13:37:05.679]                     else if (inherits(cond, "condition")) {
[13:37:05.679]                       if (!is.null(pattern)) {
[13:37:05.679]                         computeRestarts <- base::computeRestarts
[13:37:05.679]                         grepl <- base::grepl
[13:37:05.679]                         restarts <- computeRestarts(cond)
[13:37:05.679]                         for (restart in restarts) {
[13:37:05.679]                           name <- restart$name
[13:37:05.679]                           if (is.null(name)) 
[13:37:05.679]                             next
[13:37:05.679]                           if (!grepl(pattern, name)) 
[13:37:05.679]                             next
[13:37:05.679]                           invokeRestart(restart)
[13:37:05.679]                           muffled <- TRUE
[13:37:05.679]                           break
[13:37:05.679]                         }
[13:37:05.679]                       }
[13:37:05.679]                     }
[13:37:05.679]                     invisible(muffled)
[13:37:05.679]                   }
[13:37:05.679]                   muffleCondition(cond)
[13:37:05.679]                 })
[13:37:05.679]             }))
[13:37:05.679]             future::FutureResult(value = ...future.value$value, 
[13:37:05.679]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.679]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.679]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.679]                     ...future.globalenv.names))
[13:37:05.679]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.679]         }, condition = base::local({
[13:37:05.679]             c <- base::c
[13:37:05.679]             inherits <- base::inherits
[13:37:05.679]             invokeRestart <- base::invokeRestart
[13:37:05.679]             length <- base::length
[13:37:05.679]             list <- base::list
[13:37:05.679]             seq.int <- base::seq.int
[13:37:05.679]             signalCondition <- base::signalCondition
[13:37:05.679]             sys.calls <- base::sys.calls
[13:37:05.679]             `[[` <- base::`[[`
[13:37:05.679]             `+` <- base::`+`
[13:37:05.679]             `<<-` <- base::`<<-`
[13:37:05.679]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.679]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.679]                   3L)]
[13:37:05.679]             }
[13:37:05.679]             function(cond) {
[13:37:05.679]                 is_error <- inherits(cond, "error")
[13:37:05.679]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.679]                   NULL)
[13:37:05.679]                 if (is_error) {
[13:37:05.679]                   sessionInformation <- function() {
[13:37:05.679]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.679]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.679]                       search = base::search(), system = base::Sys.info())
[13:37:05.679]                   }
[13:37:05.679]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.679]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.679]                     cond$call), session = sessionInformation(), 
[13:37:05.679]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.679]                   signalCondition(cond)
[13:37:05.679]                 }
[13:37:05.679]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.679]                 "immediateCondition"))) {
[13:37:05.679]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.679]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.679]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.679]                   if (TRUE && !signal) {
[13:37:05.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.679]                     {
[13:37:05.679]                       inherits <- base::inherits
[13:37:05.679]                       invokeRestart <- base::invokeRestart
[13:37:05.679]                       is.null <- base::is.null
[13:37:05.679]                       muffled <- FALSE
[13:37:05.679]                       if (inherits(cond, "message")) {
[13:37:05.679]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.679]                         if (muffled) 
[13:37:05.679]                           invokeRestart("muffleMessage")
[13:37:05.679]                       }
[13:37:05.679]                       else if (inherits(cond, "warning")) {
[13:37:05.679]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.679]                         if (muffled) 
[13:37:05.679]                           invokeRestart("muffleWarning")
[13:37:05.679]                       }
[13:37:05.679]                       else if (inherits(cond, "condition")) {
[13:37:05.679]                         if (!is.null(pattern)) {
[13:37:05.679]                           computeRestarts <- base::computeRestarts
[13:37:05.679]                           grepl <- base::grepl
[13:37:05.679]                           restarts <- computeRestarts(cond)
[13:37:05.679]                           for (restart in restarts) {
[13:37:05.679]                             name <- restart$name
[13:37:05.679]                             if (is.null(name)) 
[13:37:05.679]                               next
[13:37:05.679]                             if (!grepl(pattern, name)) 
[13:37:05.679]                               next
[13:37:05.679]                             invokeRestart(restart)
[13:37:05.679]                             muffled <- TRUE
[13:37:05.679]                             break
[13:37:05.679]                           }
[13:37:05.679]                         }
[13:37:05.679]                       }
[13:37:05.679]                       invisible(muffled)
[13:37:05.679]                     }
[13:37:05.679]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.679]                   }
[13:37:05.679]                 }
[13:37:05.679]                 else {
[13:37:05.679]                   if (TRUE) {
[13:37:05.679]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.679]                     {
[13:37:05.679]                       inherits <- base::inherits
[13:37:05.679]                       invokeRestart <- base::invokeRestart
[13:37:05.679]                       is.null <- base::is.null
[13:37:05.679]                       muffled <- FALSE
[13:37:05.679]                       if (inherits(cond, "message")) {
[13:37:05.679]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.679]                         if (muffled) 
[13:37:05.679]                           invokeRestart("muffleMessage")
[13:37:05.679]                       }
[13:37:05.679]                       else if (inherits(cond, "warning")) {
[13:37:05.679]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.679]                         if (muffled) 
[13:37:05.679]                           invokeRestart("muffleWarning")
[13:37:05.679]                       }
[13:37:05.679]                       else if (inherits(cond, "condition")) {
[13:37:05.679]                         if (!is.null(pattern)) {
[13:37:05.679]                           computeRestarts <- base::computeRestarts
[13:37:05.679]                           grepl <- base::grepl
[13:37:05.679]                           restarts <- computeRestarts(cond)
[13:37:05.679]                           for (restart in restarts) {
[13:37:05.679]                             name <- restart$name
[13:37:05.679]                             if (is.null(name)) 
[13:37:05.679]                               next
[13:37:05.679]                             if (!grepl(pattern, name)) 
[13:37:05.679]                               next
[13:37:05.679]                             invokeRestart(restart)
[13:37:05.679]                             muffled <- TRUE
[13:37:05.679]                             break
[13:37:05.679]                           }
[13:37:05.679]                         }
[13:37:05.679]                       }
[13:37:05.679]                       invisible(muffled)
[13:37:05.679]                     }
[13:37:05.679]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.679]                   }
[13:37:05.679]                 }
[13:37:05.679]             }
[13:37:05.679]         }))
[13:37:05.679]     }, error = function(ex) {
[13:37:05.679]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.679]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.679]                 ...future.rng), started = ...future.startTime, 
[13:37:05.679]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.679]             version = "1.8"), class = "FutureResult")
[13:37:05.679]     }, finally = {
[13:37:05.679]         if (!identical(...future.workdir, getwd())) 
[13:37:05.679]             setwd(...future.workdir)
[13:37:05.679]         {
[13:37:05.679]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.679]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.679]             }
[13:37:05.679]             base::options(...future.oldOptions)
[13:37:05.679]             if (.Platform$OS.type == "windows") {
[13:37:05.679]                 old_names <- names(...future.oldEnvVars)
[13:37:05.679]                 envs <- base::Sys.getenv()
[13:37:05.679]                 names <- names(envs)
[13:37:05.679]                 common <- intersect(names, old_names)
[13:37:05.679]                 added <- setdiff(names, old_names)
[13:37:05.679]                 removed <- setdiff(old_names, names)
[13:37:05.679]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.679]                   envs[common]]
[13:37:05.679]                 NAMES <- toupper(changed)
[13:37:05.679]                 args <- list()
[13:37:05.679]                 for (kk in seq_along(NAMES)) {
[13:37:05.679]                   name <- changed[[kk]]
[13:37:05.679]                   NAME <- NAMES[[kk]]
[13:37:05.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.679]                     next
[13:37:05.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.679]                 }
[13:37:05.679]                 NAMES <- toupper(added)
[13:37:05.679]                 for (kk in seq_along(NAMES)) {
[13:37:05.679]                   name <- added[[kk]]
[13:37:05.679]                   NAME <- NAMES[[kk]]
[13:37:05.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.679]                     next
[13:37:05.679]                   args[[name]] <- ""
[13:37:05.679]                 }
[13:37:05.679]                 NAMES <- toupper(removed)
[13:37:05.679]                 for (kk in seq_along(NAMES)) {
[13:37:05.679]                   name <- removed[[kk]]
[13:37:05.679]                   NAME <- NAMES[[kk]]
[13:37:05.679]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.679]                     next
[13:37:05.679]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.679]                 }
[13:37:05.679]                 if (length(args) > 0) 
[13:37:05.679]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.679]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.679]             }
[13:37:05.679]             else {
[13:37:05.679]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.679]             }
[13:37:05.679]             {
[13:37:05.679]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.679]                   0L) {
[13:37:05.679]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.679]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.679]                   base::options(opts)
[13:37:05.679]                 }
[13:37:05.679]                 {
[13:37:05.679]                   {
[13:37:05.679]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.679]                     NULL
[13:37:05.679]                   }
[13:37:05.679]                   options(future.plan = NULL)
[13:37:05.679]                   if (is.na(NA_character_)) 
[13:37:05.679]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.679]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.679]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.679]                     .init = FALSE)
[13:37:05.679]                 }
[13:37:05.679]             }
[13:37:05.679]         }
[13:37:05.679]     })
[13:37:05.679]     if (TRUE) {
[13:37:05.679]         base::sink(type = "output", split = FALSE)
[13:37:05.679]         if (TRUE) {
[13:37:05.679]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.679]         }
[13:37:05.679]         else {
[13:37:05.679]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.679]         }
[13:37:05.679]         base::close(...future.stdout)
[13:37:05.679]         ...future.stdout <- NULL
[13:37:05.679]     }
[13:37:05.679]     ...future.result$conditions <- ...future.conditions
[13:37:05.679]     ...future.result$finished <- base::Sys.time()
[13:37:05.679]     ...future.result
[13:37:05.679] }
[13:37:05.683] MultisessionFuture started
[13:37:05.683] - Launch lazy future ... done
[13:37:05.683] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[13:37:05.683] result() for ClusterFuture ...
[13:37:05.683] receiveMessageFromWorker() for ClusterFuture ...
[13:37:05.683] - Validating connection of MultisessionFuture
[13:37:05.687] - received message: FutureResult
[13:37:05.687] - Received FutureResult
[13:37:05.688] - Erased future from FutureRegistry
[13:37:05.688] result() for ClusterFuture ...
[13:37:05.688] - result already collected: FutureResult
[13:37:05.688] result() for ClusterFuture ... done
[13:37:05.688] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:05.688] result() for ClusterFuture ... done
[13:37:05.688] result() for ClusterFuture ...
[13:37:05.688] - result already collected: FutureResult
[13:37:05.688] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: b39df9df-5801-a873-c92d-59777470a383
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[13:37:05.689] getGlobalsAndPackages() ...
[13:37:05.689] Searching for globals...
[13:37:05.690] - globals found: [2] ‘{’, ‘:::’
[13:37:05.690] Searching for globals ... DONE
[13:37:05.690] Resolving globals: FALSE
[13:37:05.691] 
[13:37:05.691] 
[13:37:05.691] getGlobalsAndPackages() ... DONE
[13:37:05.691] run() for ‘Future’ ...
[13:37:05.691] - state: ‘created’
[13:37:05.691] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:05.702] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:05.702] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:05.703]   - Field: ‘node’
[13:37:05.703]   - Field: ‘label’
[13:37:05.703]   - Field: ‘local’
[13:37:05.703]   - Field: ‘owner’
[13:37:05.706]   - Field: ‘envir’
[13:37:05.706]   - Field: ‘workers’
[13:37:05.706]   - Field: ‘packages’
[13:37:05.706]   - Field: ‘gc’
[13:37:05.706]   - Field: ‘conditions’
[13:37:05.706]   - Field: ‘persistent’
[13:37:05.706]   - Field: ‘expr’
[13:37:05.707]   - Field: ‘uuid’
[13:37:05.707]   - Field: ‘seed’
[13:37:05.707]   - Field: ‘version’
[13:37:05.707]   - Field: ‘result’
[13:37:05.707]   - Field: ‘asynchronous’
[13:37:05.707]   - Field: ‘calls’
[13:37:05.707]   - Field: ‘globals’
[13:37:05.707]   - Field: ‘stdout’
[13:37:05.707]   - Field: ‘earlySignal’
[13:37:05.707]   - Field: ‘lazy’
[13:37:05.707]   - Field: ‘state’
[13:37:05.708] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:05.708] - Launch lazy future ...
[13:37:05.708] Packages needed by the future expression (n = 0): <none>
[13:37:05.708] Packages needed by future strategies (n = 0): <none>
[13:37:05.708] {
[13:37:05.708]     {
[13:37:05.708]         {
[13:37:05.708]             ...future.startTime <- base::Sys.time()
[13:37:05.708]             {
[13:37:05.708]                 {
[13:37:05.708]                   {
[13:37:05.708]                     {
[13:37:05.708]                       base::local({
[13:37:05.708]                         has_future <- base::requireNamespace("future", 
[13:37:05.708]                           quietly = TRUE)
[13:37:05.708]                         if (has_future) {
[13:37:05.708]                           ns <- base::getNamespace("future")
[13:37:05.708]                           version <- ns[[".package"]][["version"]]
[13:37:05.708]                           if (is.null(version)) 
[13:37:05.708]                             version <- utils::packageVersion("future")
[13:37:05.708]                         }
[13:37:05.708]                         else {
[13:37:05.708]                           version <- NULL
[13:37:05.708]                         }
[13:37:05.708]                         if (!has_future || version < "1.8.0") {
[13:37:05.708]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.708]                             "", base::R.version$version.string), 
[13:37:05.708]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.708]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.708]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.708]                               "release", "version")], collapse = " "), 
[13:37:05.708]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.708]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.708]                             info)
[13:37:05.708]                           info <- base::paste(info, collapse = "; ")
[13:37:05.708]                           if (!has_future) {
[13:37:05.708]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.708]                               info)
[13:37:05.708]                           }
[13:37:05.708]                           else {
[13:37:05.708]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.708]                               info, version)
[13:37:05.708]                           }
[13:37:05.708]                           base::stop(msg)
[13:37:05.708]                         }
[13:37:05.708]                       })
[13:37:05.708]                     }
[13:37:05.708]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.708]                     base::options(mc.cores = 1L)
[13:37:05.708]                   }
[13:37:05.708]                   ...future.strategy.old <- future::plan("list")
[13:37:05.708]                   options(future.plan = NULL)
[13:37:05.708]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.708]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.708]                 }
[13:37:05.708]                 ...future.workdir <- getwd()
[13:37:05.708]             }
[13:37:05.708]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.708]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.708]         }
[13:37:05.708]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.708]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.708]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.708]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.708]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.708]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.708]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.708]             base::names(...future.oldOptions))
[13:37:05.708]     }
[13:37:05.708]     if (FALSE) {
[13:37:05.708]     }
[13:37:05.708]     else {
[13:37:05.708]         if (TRUE) {
[13:37:05.708]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.708]                 open = "w")
[13:37:05.708]         }
[13:37:05.708]         else {
[13:37:05.708]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.708]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.708]         }
[13:37:05.708]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.708]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.708]             base::sink(type = "output", split = FALSE)
[13:37:05.708]             base::close(...future.stdout)
[13:37:05.708]         }, add = TRUE)
[13:37:05.708]     }
[13:37:05.708]     ...future.frame <- base::sys.nframe()
[13:37:05.708]     ...future.conditions <- base::list()
[13:37:05.708]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.708]     if (FALSE) {
[13:37:05.708]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.708]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.708]     }
[13:37:05.708]     ...future.result <- base::tryCatch({
[13:37:05.708]         base::withCallingHandlers({
[13:37:05.708]             ...future.value <- base::withVisible(base::local({
[13:37:05.708]                 ...future.makeSendCondition <- base::local({
[13:37:05.708]                   sendCondition <- NULL
[13:37:05.708]                   function(frame = 1L) {
[13:37:05.708]                     if (is.function(sendCondition)) 
[13:37:05.708]                       return(sendCondition)
[13:37:05.708]                     ns <- getNamespace("parallel")
[13:37:05.708]                     if (exists("sendData", mode = "function", 
[13:37:05.708]                       envir = ns)) {
[13:37:05.708]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.708]                         envir = ns)
[13:37:05.708]                       envir <- sys.frame(frame)
[13:37:05.708]                       master <- NULL
[13:37:05.708]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.708]                         !identical(envir, emptyenv())) {
[13:37:05.708]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.708]                           inherits = FALSE)) {
[13:37:05.708]                           master <- get("master", mode = "list", 
[13:37:05.708]                             envir = envir, inherits = FALSE)
[13:37:05.708]                           if (inherits(master, c("SOCKnode", 
[13:37:05.708]                             "SOCK0node"))) {
[13:37:05.708]                             sendCondition <<- function(cond) {
[13:37:05.708]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.708]                                 success = TRUE)
[13:37:05.708]                               parallel_sendData(master, data)
[13:37:05.708]                             }
[13:37:05.708]                             return(sendCondition)
[13:37:05.708]                           }
[13:37:05.708]                         }
[13:37:05.708]                         frame <- frame + 1L
[13:37:05.708]                         envir <- sys.frame(frame)
[13:37:05.708]                       }
[13:37:05.708]                     }
[13:37:05.708]                     sendCondition <<- function(cond) NULL
[13:37:05.708]                   }
[13:37:05.708]                 })
[13:37:05.708]                 withCallingHandlers({
[13:37:05.708]                   {
[13:37:05.708]                     future:::session_uuid(attributes = TRUE)
[13:37:05.708]                   }
[13:37:05.708]                 }, immediateCondition = function(cond) {
[13:37:05.708]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.708]                   sendCondition(cond)
[13:37:05.708]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.708]                   {
[13:37:05.708]                     inherits <- base::inherits
[13:37:05.708]                     invokeRestart <- base::invokeRestart
[13:37:05.708]                     is.null <- base::is.null
[13:37:05.708]                     muffled <- FALSE
[13:37:05.708]                     if (inherits(cond, "message")) {
[13:37:05.708]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.708]                       if (muffled) 
[13:37:05.708]                         invokeRestart("muffleMessage")
[13:37:05.708]                     }
[13:37:05.708]                     else if (inherits(cond, "warning")) {
[13:37:05.708]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.708]                       if (muffled) 
[13:37:05.708]                         invokeRestart("muffleWarning")
[13:37:05.708]                     }
[13:37:05.708]                     else if (inherits(cond, "condition")) {
[13:37:05.708]                       if (!is.null(pattern)) {
[13:37:05.708]                         computeRestarts <- base::computeRestarts
[13:37:05.708]                         grepl <- base::grepl
[13:37:05.708]                         restarts <- computeRestarts(cond)
[13:37:05.708]                         for (restart in restarts) {
[13:37:05.708]                           name <- restart$name
[13:37:05.708]                           if (is.null(name)) 
[13:37:05.708]                             next
[13:37:05.708]                           if (!grepl(pattern, name)) 
[13:37:05.708]                             next
[13:37:05.708]                           invokeRestart(restart)
[13:37:05.708]                           muffled <- TRUE
[13:37:05.708]                           break
[13:37:05.708]                         }
[13:37:05.708]                       }
[13:37:05.708]                     }
[13:37:05.708]                     invisible(muffled)
[13:37:05.708]                   }
[13:37:05.708]                   muffleCondition(cond)
[13:37:05.708]                 })
[13:37:05.708]             }))
[13:37:05.708]             future::FutureResult(value = ...future.value$value, 
[13:37:05.708]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.708]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.708]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.708]                     ...future.globalenv.names))
[13:37:05.708]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.708]         }, condition = base::local({
[13:37:05.708]             c <- base::c
[13:37:05.708]             inherits <- base::inherits
[13:37:05.708]             invokeRestart <- base::invokeRestart
[13:37:05.708]             length <- base::length
[13:37:05.708]             list <- base::list
[13:37:05.708]             seq.int <- base::seq.int
[13:37:05.708]             signalCondition <- base::signalCondition
[13:37:05.708]             sys.calls <- base::sys.calls
[13:37:05.708]             `[[` <- base::`[[`
[13:37:05.708]             `+` <- base::`+`
[13:37:05.708]             `<<-` <- base::`<<-`
[13:37:05.708]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.708]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.708]                   3L)]
[13:37:05.708]             }
[13:37:05.708]             function(cond) {
[13:37:05.708]                 is_error <- inherits(cond, "error")
[13:37:05.708]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.708]                   NULL)
[13:37:05.708]                 if (is_error) {
[13:37:05.708]                   sessionInformation <- function() {
[13:37:05.708]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.708]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.708]                       search = base::search(), system = base::Sys.info())
[13:37:05.708]                   }
[13:37:05.708]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.708]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.708]                     cond$call), session = sessionInformation(), 
[13:37:05.708]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.708]                   signalCondition(cond)
[13:37:05.708]                 }
[13:37:05.708]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.708]                 "immediateCondition"))) {
[13:37:05.708]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.708]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.708]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.708]                   if (TRUE && !signal) {
[13:37:05.708]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.708]                     {
[13:37:05.708]                       inherits <- base::inherits
[13:37:05.708]                       invokeRestart <- base::invokeRestart
[13:37:05.708]                       is.null <- base::is.null
[13:37:05.708]                       muffled <- FALSE
[13:37:05.708]                       if (inherits(cond, "message")) {
[13:37:05.708]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.708]                         if (muffled) 
[13:37:05.708]                           invokeRestart("muffleMessage")
[13:37:05.708]                       }
[13:37:05.708]                       else if (inherits(cond, "warning")) {
[13:37:05.708]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.708]                         if (muffled) 
[13:37:05.708]                           invokeRestart("muffleWarning")
[13:37:05.708]                       }
[13:37:05.708]                       else if (inherits(cond, "condition")) {
[13:37:05.708]                         if (!is.null(pattern)) {
[13:37:05.708]                           computeRestarts <- base::computeRestarts
[13:37:05.708]                           grepl <- base::grepl
[13:37:05.708]                           restarts <- computeRestarts(cond)
[13:37:05.708]                           for (restart in restarts) {
[13:37:05.708]                             name <- restart$name
[13:37:05.708]                             if (is.null(name)) 
[13:37:05.708]                               next
[13:37:05.708]                             if (!grepl(pattern, name)) 
[13:37:05.708]                               next
[13:37:05.708]                             invokeRestart(restart)
[13:37:05.708]                             muffled <- TRUE
[13:37:05.708]                             break
[13:37:05.708]                           }
[13:37:05.708]                         }
[13:37:05.708]                       }
[13:37:05.708]                       invisible(muffled)
[13:37:05.708]                     }
[13:37:05.708]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.708]                   }
[13:37:05.708]                 }
[13:37:05.708]                 else {
[13:37:05.708]                   if (TRUE) {
[13:37:05.708]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.708]                     {
[13:37:05.708]                       inherits <- base::inherits
[13:37:05.708]                       invokeRestart <- base::invokeRestart
[13:37:05.708]                       is.null <- base::is.null
[13:37:05.708]                       muffled <- FALSE
[13:37:05.708]                       if (inherits(cond, "message")) {
[13:37:05.708]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.708]                         if (muffled) 
[13:37:05.708]                           invokeRestart("muffleMessage")
[13:37:05.708]                       }
[13:37:05.708]                       else if (inherits(cond, "warning")) {
[13:37:05.708]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.708]                         if (muffled) 
[13:37:05.708]                           invokeRestart("muffleWarning")
[13:37:05.708]                       }
[13:37:05.708]                       else if (inherits(cond, "condition")) {
[13:37:05.708]                         if (!is.null(pattern)) {
[13:37:05.708]                           computeRestarts <- base::computeRestarts
[13:37:05.708]                           grepl <- base::grepl
[13:37:05.708]                           restarts <- computeRestarts(cond)
[13:37:05.708]                           for (restart in restarts) {
[13:37:05.708]                             name <- restart$name
[13:37:05.708]                             if (is.null(name)) 
[13:37:05.708]                               next
[13:37:05.708]                             if (!grepl(pattern, name)) 
[13:37:05.708]                               next
[13:37:05.708]                             invokeRestart(restart)
[13:37:05.708]                             muffled <- TRUE
[13:37:05.708]                             break
[13:37:05.708]                           }
[13:37:05.708]                         }
[13:37:05.708]                       }
[13:37:05.708]                       invisible(muffled)
[13:37:05.708]                     }
[13:37:05.708]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.708]                   }
[13:37:05.708]                 }
[13:37:05.708]             }
[13:37:05.708]         }))
[13:37:05.708]     }, error = function(ex) {
[13:37:05.708]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.708]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.708]                 ...future.rng), started = ...future.startTime, 
[13:37:05.708]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.708]             version = "1.8"), class = "FutureResult")
[13:37:05.708]     }, finally = {
[13:37:05.708]         if (!identical(...future.workdir, getwd())) 
[13:37:05.708]             setwd(...future.workdir)
[13:37:05.708]         {
[13:37:05.708]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.708]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.708]             }
[13:37:05.708]             base::options(...future.oldOptions)
[13:37:05.708]             if (.Platform$OS.type == "windows") {
[13:37:05.708]                 old_names <- names(...future.oldEnvVars)
[13:37:05.708]                 envs <- base::Sys.getenv()
[13:37:05.708]                 names <- names(envs)
[13:37:05.708]                 common <- intersect(names, old_names)
[13:37:05.708]                 added <- setdiff(names, old_names)
[13:37:05.708]                 removed <- setdiff(old_names, names)
[13:37:05.708]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.708]                   envs[common]]
[13:37:05.708]                 NAMES <- toupper(changed)
[13:37:05.708]                 args <- list()
[13:37:05.708]                 for (kk in seq_along(NAMES)) {
[13:37:05.708]                   name <- changed[[kk]]
[13:37:05.708]                   NAME <- NAMES[[kk]]
[13:37:05.708]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.708]                     next
[13:37:05.708]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.708]                 }
[13:37:05.708]                 NAMES <- toupper(added)
[13:37:05.708]                 for (kk in seq_along(NAMES)) {
[13:37:05.708]                   name <- added[[kk]]
[13:37:05.708]                   NAME <- NAMES[[kk]]
[13:37:05.708]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.708]                     next
[13:37:05.708]                   args[[name]] <- ""
[13:37:05.708]                 }
[13:37:05.708]                 NAMES <- toupper(removed)
[13:37:05.708]                 for (kk in seq_along(NAMES)) {
[13:37:05.708]                   name <- removed[[kk]]
[13:37:05.708]                   NAME <- NAMES[[kk]]
[13:37:05.708]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.708]                     next
[13:37:05.708]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.708]                 }
[13:37:05.708]                 if (length(args) > 0) 
[13:37:05.708]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.708]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.708]             }
[13:37:05.708]             else {
[13:37:05.708]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.708]             }
[13:37:05.708]             {
[13:37:05.708]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.708]                   0L) {
[13:37:05.708]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.708]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.708]                   base::options(opts)
[13:37:05.708]                 }
[13:37:05.708]                 {
[13:37:05.708]                   {
[13:37:05.708]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.708]                     NULL
[13:37:05.708]                   }
[13:37:05.708]                   options(future.plan = NULL)
[13:37:05.708]                   if (is.na(NA_character_)) 
[13:37:05.708]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.708]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.708]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.708]                     .init = FALSE)
[13:37:05.708]                 }
[13:37:05.708]             }
[13:37:05.708]         }
[13:37:05.708]     })
[13:37:05.708]     if (TRUE) {
[13:37:05.708]         base::sink(type = "output", split = FALSE)
[13:37:05.708]         if (TRUE) {
[13:37:05.708]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.708]         }
[13:37:05.708]         else {
[13:37:05.708]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.708]         }
[13:37:05.708]         base::close(...future.stdout)
[13:37:05.708]         ...future.stdout <- NULL
[13:37:05.708]     }
[13:37:05.708]     ...future.result$conditions <- ...future.conditions
[13:37:05.708]     ...future.result$finished <- base::Sys.time()
[13:37:05.708]     ...future.result
[13:37:05.708] }
[13:37:05.711] MultisessionFuture started
[13:37:05.711] - Launch lazy future ... done
[13:37:05.711] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[13:37:05.712] result() for ClusterFuture ...
[13:37:05.712] receiveMessageFromWorker() for ClusterFuture ...
[13:37:05.712] - Validating connection of MultisessionFuture
[13:37:05.713] - received message: FutureResult
[13:37:05.713] - Received FutureResult
[13:37:05.713] - Erased future from FutureRegistry
[13:37:05.713] result() for ClusterFuture ...
[13:37:05.713] - result already collected: FutureResult
[13:37:05.713] result() for ClusterFuture ... done
[13:37:05.713] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:05.713] result() for ClusterFuture ... done
[13:37:05.713] result() for ClusterFuture ...
[13:37:05.714] - result already collected: FutureResult
[13:37:05.714] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: b39df9df-5801-a873-c92d-59777470a383
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[13:37:05.714] getGlobalsAndPackages() ...
[13:37:05.714] Searching for globals...
[13:37:05.715] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:37:05.715] Searching for globals ... DONE
[13:37:05.715] Resolving globals: FALSE
[13:37:05.718] The total size of the 1 globals is 1.56 MiB (1637576 bytes)
[13:37:05.718] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:37:05.718] - globals: [1] ‘f1’
[13:37:05.719] 
[13:37:05.719] getGlobalsAndPackages() ... DONE
[13:37:05.719] run() for ‘Future’ ...
[13:37:05.719] - state: ‘created’
[13:37:05.719] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:05.729] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:05.730] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:05.730]   - Field: ‘node’
[13:37:05.730]   - Field: ‘label’
[13:37:05.730]   - Field: ‘local’
[13:37:05.730]   - Field: ‘owner’
[13:37:05.730]   - Field: ‘envir’
[13:37:05.730]   - Field: ‘workers’
[13:37:05.730]   - Field: ‘packages’
[13:37:05.730]   - Field: ‘gc’
[13:37:05.730]   - Field: ‘conditions’
[13:37:05.731]   - Field: ‘persistent’
[13:37:05.731]   - Field: ‘expr’
[13:37:05.731]   - Field: ‘uuid’
[13:37:05.731]   - Field: ‘seed’
[13:37:05.731]   - Field: ‘version’
[13:37:05.731]   - Field: ‘result’
[13:37:05.731]   - Field: ‘asynchronous’
[13:37:05.731]   - Field: ‘calls’
[13:37:05.731]   - Field: ‘globals’
[13:37:05.731]   - Field: ‘stdout’
[13:37:05.731]   - Field: ‘earlySignal’
[13:37:05.732]   - Field: ‘lazy’
[13:37:05.732]   - Field: ‘state’
[13:37:05.732] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:05.732] - Launch lazy future ...
[13:37:05.732] Packages needed by the future expression (n = 0): <none>
[13:37:05.732] Packages needed by future strategies (n = 0): <none>
[13:37:05.733] {
[13:37:05.733]     {
[13:37:05.733]         {
[13:37:05.733]             ...future.startTime <- base::Sys.time()
[13:37:05.733]             {
[13:37:05.733]                 {
[13:37:05.733]                   {
[13:37:05.733]                     {
[13:37:05.733]                       base::local({
[13:37:05.733]                         has_future <- base::requireNamespace("future", 
[13:37:05.733]                           quietly = TRUE)
[13:37:05.733]                         if (has_future) {
[13:37:05.733]                           ns <- base::getNamespace("future")
[13:37:05.733]                           version <- ns[[".package"]][["version"]]
[13:37:05.733]                           if (is.null(version)) 
[13:37:05.733]                             version <- utils::packageVersion("future")
[13:37:05.733]                         }
[13:37:05.733]                         else {
[13:37:05.733]                           version <- NULL
[13:37:05.733]                         }
[13:37:05.733]                         if (!has_future || version < "1.8.0") {
[13:37:05.733]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.733]                             "", base::R.version$version.string), 
[13:37:05.733]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.733]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.733]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.733]                               "release", "version")], collapse = " "), 
[13:37:05.733]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.733]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.733]                             info)
[13:37:05.733]                           info <- base::paste(info, collapse = "; ")
[13:37:05.733]                           if (!has_future) {
[13:37:05.733]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.733]                               info)
[13:37:05.733]                           }
[13:37:05.733]                           else {
[13:37:05.733]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.733]                               info, version)
[13:37:05.733]                           }
[13:37:05.733]                           base::stop(msg)
[13:37:05.733]                         }
[13:37:05.733]                       })
[13:37:05.733]                     }
[13:37:05.733]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.733]                     base::options(mc.cores = 1L)
[13:37:05.733]                   }
[13:37:05.733]                   ...future.strategy.old <- future::plan("list")
[13:37:05.733]                   options(future.plan = NULL)
[13:37:05.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.733]                 }
[13:37:05.733]                 ...future.workdir <- getwd()
[13:37:05.733]             }
[13:37:05.733]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.733]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.733]         }
[13:37:05.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.733]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.733]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.733]             base::names(...future.oldOptions))
[13:37:05.733]     }
[13:37:05.733]     if (FALSE) {
[13:37:05.733]     }
[13:37:05.733]     else {
[13:37:05.733]         if (TRUE) {
[13:37:05.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.733]                 open = "w")
[13:37:05.733]         }
[13:37:05.733]         else {
[13:37:05.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.733]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.733]         }
[13:37:05.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.733]             base::sink(type = "output", split = FALSE)
[13:37:05.733]             base::close(...future.stdout)
[13:37:05.733]         }, add = TRUE)
[13:37:05.733]     }
[13:37:05.733]     ...future.frame <- base::sys.nframe()
[13:37:05.733]     ...future.conditions <- base::list()
[13:37:05.733]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.733]     if (FALSE) {
[13:37:05.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.733]     }
[13:37:05.733]     ...future.result <- base::tryCatch({
[13:37:05.733]         base::withCallingHandlers({
[13:37:05.733]             ...future.value <- base::withVisible(base::local({
[13:37:05.733]                 ...future.makeSendCondition <- base::local({
[13:37:05.733]                   sendCondition <- NULL
[13:37:05.733]                   function(frame = 1L) {
[13:37:05.733]                     if (is.function(sendCondition)) 
[13:37:05.733]                       return(sendCondition)
[13:37:05.733]                     ns <- getNamespace("parallel")
[13:37:05.733]                     if (exists("sendData", mode = "function", 
[13:37:05.733]                       envir = ns)) {
[13:37:05.733]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.733]                         envir = ns)
[13:37:05.733]                       envir <- sys.frame(frame)
[13:37:05.733]                       master <- NULL
[13:37:05.733]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.733]                         !identical(envir, emptyenv())) {
[13:37:05.733]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.733]                           inherits = FALSE)) {
[13:37:05.733]                           master <- get("master", mode = "list", 
[13:37:05.733]                             envir = envir, inherits = FALSE)
[13:37:05.733]                           if (inherits(master, c("SOCKnode", 
[13:37:05.733]                             "SOCK0node"))) {
[13:37:05.733]                             sendCondition <<- function(cond) {
[13:37:05.733]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.733]                                 success = TRUE)
[13:37:05.733]                               parallel_sendData(master, data)
[13:37:05.733]                             }
[13:37:05.733]                             return(sendCondition)
[13:37:05.733]                           }
[13:37:05.733]                         }
[13:37:05.733]                         frame <- frame + 1L
[13:37:05.733]                         envir <- sys.frame(frame)
[13:37:05.733]                       }
[13:37:05.733]                     }
[13:37:05.733]                     sendCondition <<- function(cond) NULL
[13:37:05.733]                   }
[13:37:05.733]                 })
[13:37:05.733]                 withCallingHandlers({
[13:37:05.733]                   {
[13:37:05.733]                     f1$owner
[13:37:05.733]                   }
[13:37:05.733]                 }, immediateCondition = function(cond) {
[13:37:05.733]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.733]                   sendCondition(cond)
[13:37:05.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.733]                   {
[13:37:05.733]                     inherits <- base::inherits
[13:37:05.733]                     invokeRestart <- base::invokeRestart
[13:37:05.733]                     is.null <- base::is.null
[13:37:05.733]                     muffled <- FALSE
[13:37:05.733]                     if (inherits(cond, "message")) {
[13:37:05.733]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.733]                       if (muffled) 
[13:37:05.733]                         invokeRestart("muffleMessage")
[13:37:05.733]                     }
[13:37:05.733]                     else if (inherits(cond, "warning")) {
[13:37:05.733]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.733]                       if (muffled) 
[13:37:05.733]                         invokeRestart("muffleWarning")
[13:37:05.733]                     }
[13:37:05.733]                     else if (inherits(cond, "condition")) {
[13:37:05.733]                       if (!is.null(pattern)) {
[13:37:05.733]                         computeRestarts <- base::computeRestarts
[13:37:05.733]                         grepl <- base::grepl
[13:37:05.733]                         restarts <- computeRestarts(cond)
[13:37:05.733]                         for (restart in restarts) {
[13:37:05.733]                           name <- restart$name
[13:37:05.733]                           if (is.null(name)) 
[13:37:05.733]                             next
[13:37:05.733]                           if (!grepl(pattern, name)) 
[13:37:05.733]                             next
[13:37:05.733]                           invokeRestart(restart)
[13:37:05.733]                           muffled <- TRUE
[13:37:05.733]                           break
[13:37:05.733]                         }
[13:37:05.733]                       }
[13:37:05.733]                     }
[13:37:05.733]                     invisible(muffled)
[13:37:05.733]                   }
[13:37:05.733]                   muffleCondition(cond)
[13:37:05.733]                 })
[13:37:05.733]             }))
[13:37:05.733]             future::FutureResult(value = ...future.value$value, 
[13:37:05.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.733]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.733]                     ...future.globalenv.names))
[13:37:05.733]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.733]         }, condition = base::local({
[13:37:05.733]             c <- base::c
[13:37:05.733]             inherits <- base::inherits
[13:37:05.733]             invokeRestart <- base::invokeRestart
[13:37:05.733]             length <- base::length
[13:37:05.733]             list <- base::list
[13:37:05.733]             seq.int <- base::seq.int
[13:37:05.733]             signalCondition <- base::signalCondition
[13:37:05.733]             sys.calls <- base::sys.calls
[13:37:05.733]             `[[` <- base::`[[`
[13:37:05.733]             `+` <- base::`+`
[13:37:05.733]             `<<-` <- base::`<<-`
[13:37:05.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.733]                   3L)]
[13:37:05.733]             }
[13:37:05.733]             function(cond) {
[13:37:05.733]                 is_error <- inherits(cond, "error")
[13:37:05.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.733]                   NULL)
[13:37:05.733]                 if (is_error) {
[13:37:05.733]                   sessionInformation <- function() {
[13:37:05.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.733]                       search = base::search(), system = base::Sys.info())
[13:37:05.733]                   }
[13:37:05.733]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.733]                     cond$call), session = sessionInformation(), 
[13:37:05.733]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.733]                   signalCondition(cond)
[13:37:05.733]                 }
[13:37:05.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.733]                 "immediateCondition"))) {
[13:37:05.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.733]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.733]                   if (TRUE && !signal) {
[13:37:05.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.733]                     {
[13:37:05.733]                       inherits <- base::inherits
[13:37:05.733]                       invokeRestart <- base::invokeRestart
[13:37:05.733]                       is.null <- base::is.null
[13:37:05.733]                       muffled <- FALSE
[13:37:05.733]                       if (inherits(cond, "message")) {
[13:37:05.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.733]                         if (muffled) 
[13:37:05.733]                           invokeRestart("muffleMessage")
[13:37:05.733]                       }
[13:37:05.733]                       else if (inherits(cond, "warning")) {
[13:37:05.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.733]                         if (muffled) 
[13:37:05.733]                           invokeRestart("muffleWarning")
[13:37:05.733]                       }
[13:37:05.733]                       else if (inherits(cond, "condition")) {
[13:37:05.733]                         if (!is.null(pattern)) {
[13:37:05.733]                           computeRestarts <- base::computeRestarts
[13:37:05.733]                           grepl <- base::grepl
[13:37:05.733]                           restarts <- computeRestarts(cond)
[13:37:05.733]                           for (restart in restarts) {
[13:37:05.733]                             name <- restart$name
[13:37:05.733]                             if (is.null(name)) 
[13:37:05.733]                               next
[13:37:05.733]                             if (!grepl(pattern, name)) 
[13:37:05.733]                               next
[13:37:05.733]                             invokeRestart(restart)
[13:37:05.733]                             muffled <- TRUE
[13:37:05.733]                             break
[13:37:05.733]                           }
[13:37:05.733]                         }
[13:37:05.733]                       }
[13:37:05.733]                       invisible(muffled)
[13:37:05.733]                     }
[13:37:05.733]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.733]                   }
[13:37:05.733]                 }
[13:37:05.733]                 else {
[13:37:05.733]                   if (TRUE) {
[13:37:05.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.733]                     {
[13:37:05.733]                       inherits <- base::inherits
[13:37:05.733]                       invokeRestart <- base::invokeRestart
[13:37:05.733]                       is.null <- base::is.null
[13:37:05.733]                       muffled <- FALSE
[13:37:05.733]                       if (inherits(cond, "message")) {
[13:37:05.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.733]                         if (muffled) 
[13:37:05.733]                           invokeRestart("muffleMessage")
[13:37:05.733]                       }
[13:37:05.733]                       else if (inherits(cond, "warning")) {
[13:37:05.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.733]                         if (muffled) 
[13:37:05.733]                           invokeRestart("muffleWarning")
[13:37:05.733]                       }
[13:37:05.733]                       else if (inherits(cond, "condition")) {
[13:37:05.733]                         if (!is.null(pattern)) {
[13:37:05.733]                           computeRestarts <- base::computeRestarts
[13:37:05.733]                           grepl <- base::grepl
[13:37:05.733]                           restarts <- computeRestarts(cond)
[13:37:05.733]                           for (restart in restarts) {
[13:37:05.733]                             name <- restart$name
[13:37:05.733]                             if (is.null(name)) 
[13:37:05.733]                               next
[13:37:05.733]                             if (!grepl(pattern, name)) 
[13:37:05.733]                               next
[13:37:05.733]                             invokeRestart(restart)
[13:37:05.733]                             muffled <- TRUE
[13:37:05.733]                             break
[13:37:05.733]                           }
[13:37:05.733]                         }
[13:37:05.733]                       }
[13:37:05.733]                       invisible(muffled)
[13:37:05.733]                     }
[13:37:05.733]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.733]                   }
[13:37:05.733]                 }
[13:37:05.733]             }
[13:37:05.733]         }))
[13:37:05.733]     }, error = function(ex) {
[13:37:05.733]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.733]                 ...future.rng), started = ...future.startTime, 
[13:37:05.733]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.733]             version = "1.8"), class = "FutureResult")
[13:37:05.733]     }, finally = {
[13:37:05.733]         if (!identical(...future.workdir, getwd())) 
[13:37:05.733]             setwd(...future.workdir)
[13:37:05.733]         {
[13:37:05.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.733]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.733]             }
[13:37:05.733]             base::options(...future.oldOptions)
[13:37:05.733]             if (.Platform$OS.type == "windows") {
[13:37:05.733]                 old_names <- names(...future.oldEnvVars)
[13:37:05.733]                 envs <- base::Sys.getenv()
[13:37:05.733]                 names <- names(envs)
[13:37:05.733]                 common <- intersect(names, old_names)
[13:37:05.733]                 added <- setdiff(names, old_names)
[13:37:05.733]                 removed <- setdiff(old_names, names)
[13:37:05.733]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.733]                   envs[common]]
[13:37:05.733]                 NAMES <- toupper(changed)
[13:37:05.733]                 args <- list()
[13:37:05.733]                 for (kk in seq_along(NAMES)) {
[13:37:05.733]                   name <- changed[[kk]]
[13:37:05.733]                   NAME <- NAMES[[kk]]
[13:37:05.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.733]                     next
[13:37:05.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.733]                 }
[13:37:05.733]                 NAMES <- toupper(added)
[13:37:05.733]                 for (kk in seq_along(NAMES)) {
[13:37:05.733]                   name <- added[[kk]]
[13:37:05.733]                   NAME <- NAMES[[kk]]
[13:37:05.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.733]                     next
[13:37:05.733]                   args[[name]] <- ""
[13:37:05.733]                 }
[13:37:05.733]                 NAMES <- toupper(removed)
[13:37:05.733]                 for (kk in seq_along(NAMES)) {
[13:37:05.733]                   name <- removed[[kk]]
[13:37:05.733]                   NAME <- NAMES[[kk]]
[13:37:05.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.733]                     next
[13:37:05.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.733]                 }
[13:37:05.733]                 if (length(args) > 0) 
[13:37:05.733]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.733]             }
[13:37:05.733]             else {
[13:37:05.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.733]             }
[13:37:05.733]             {
[13:37:05.733]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.733]                   0L) {
[13:37:05.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.733]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.733]                   base::options(opts)
[13:37:05.733]                 }
[13:37:05.733]                 {
[13:37:05.733]                   {
[13:37:05.733]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.733]                     NULL
[13:37:05.733]                   }
[13:37:05.733]                   options(future.plan = NULL)
[13:37:05.733]                   if (is.na(NA_character_)) 
[13:37:05.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.733]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.733]                     .init = FALSE)
[13:37:05.733]                 }
[13:37:05.733]             }
[13:37:05.733]         }
[13:37:05.733]     })
[13:37:05.733]     if (TRUE) {
[13:37:05.733]         base::sink(type = "output", split = FALSE)
[13:37:05.733]         if (TRUE) {
[13:37:05.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.733]         }
[13:37:05.733]         else {
[13:37:05.733]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.733]         }
[13:37:05.733]         base::close(...future.stdout)
[13:37:05.733]         ...future.stdout <- NULL
[13:37:05.733]     }
[13:37:05.733]     ...future.result$conditions <- ...future.conditions
[13:37:05.733]     ...future.result$finished <- base::Sys.time()
[13:37:05.733]     ...future.result
[13:37:05.733] }
[13:37:05.735] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[13:37:05.737] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[13:37:05.790] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[13:37:05.791] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[13:37:05.791] MultisessionFuture started
[13:37:05.791] - Launch lazy future ... done
[13:37:05.791] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[13:37:05.792] result() for ClusterFuture ...
[13:37:05.792] receiveMessageFromWorker() for ClusterFuture ...
[13:37:05.792] - Validating connection of MultisessionFuture
[13:37:05.836] - received message: FutureResult
[13:37:05.836] - Received FutureResult
[13:37:05.836] - Erased future from FutureRegistry
[13:37:05.836] result() for ClusterFuture ...
[13:37:05.837] - result already collected: FutureResult
[13:37:05.837] result() for ClusterFuture ... done
[13:37:05.837] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:05.837] result() for ClusterFuture ... done
[13:37:05.837] result() for ClusterFuture ...
[13:37:05.837] - result already collected: FutureResult
[13:37:05.837] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 522583be-85ec-ddaf-5357-ae528484b6c8
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[13:37:05.837] getGlobalsAndPackages() ...
[13:37:05.838] Searching for globals...
[13:37:05.838] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:37:05.839] Searching for globals ... DONE
[13:37:05.839] Resolving globals: FALSE
[13:37:05.841] The total size of the 1 globals is 1.56 MiB (1640512 bytes)
[13:37:05.841] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:37:05.841] - globals: [1] ‘f1’
[13:37:05.841] 
[13:37:05.842] getGlobalsAndPackages() ... DONE
[13:37:05.842] run() for ‘Future’ ...
[13:37:05.842] - state: ‘created’
[13:37:05.842] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:05.853] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:05.853] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:05.853]   - Field: ‘node’
[13:37:05.853]   - Field: ‘label’
[13:37:05.853]   - Field: ‘local’
[13:37:05.853]   - Field: ‘owner’
[13:37:05.853]   - Field: ‘envir’
[13:37:05.853]   - Field: ‘workers’
[13:37:05.853]   - Field: ‘packages’
[13:37:05.853]   - Field: ‘gc’
[13:37:05.854]   - Field: ‘conditions’
[13:37:05.854]   - Field: ‘persistent’
[13:37:05.854]   - Field: ‘expr’
[13:37:05.854]   - Field: ‘uuid’
[13:37:05.854]   - Field: ‘seed’
[13:37:05.854]   - Field: ‘version’
[13:37:05.854]   - Field: ‘result’
[13:37:05.854]   - Field: ‘asynchronous’
[13:37:05.854]   - Field: ‘calls’
[13:37:05.854]   - Field: ‘globals’
[13:37:05.854]   - Field: ‘stdout’
[13:37:05.855]   - Field: ‘earlySignal’
[13:37:05.855]   - Field: ‘lazy’
[13:37:05.855]   - Field: ‘state’
[13:37:05.855] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:05.855] - Launch lazy future ...
[13:37:05.855] Packages needed by the future expression (n = 0): <none>
[13:37:05.855] Packages needed by future strategies (n = 0): <none>
[13:37:05.856] {
[13:37:05.856]     {
[13:37:05.856]         {
[13:37:05.856]             ...future.startTime <- base::Sys.time()
[13:37:05.856]             {
[13:37:05.856]                 {
[13:37:05.856]                   {
[13:37:05.856]                     {
[13:37:05.856]                       base::local({
[13:37:05.856]                         has_future <- base::requireNamespace("future", 
[13:37:05.856]                           quietly = TRUE)
[13:37:05.856]                         if (has_future) {
[13:37:05.856]                           ns <- base::getNamespace("future")
[13:37:05.856]                           version <- ns[[".package"]][["version"]]
[13:37:05.856]                           if (is.null(version)) 
[13:37:05.856]                             version <- utils::packageVersion("future")
[13:37:05.856]                         }
[13:37:05.856]                         else {
[13:37:05.856]                           version <- NULL
[13:37:05.856]                         }
[13:37:05.856]                         if (!has_future || version < "1.8.0") {
[13:37:05.856]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.856]                             "", base::R.version$version.string), 
[13:37:05.856]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.856]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.856]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.856]                               "release", "version")], collapse = " "), 
[13:37:05.856]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.856]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.856]                             info)
[13:37:05.856]                           info <- base::paste(info, collapse = "; ")
[13:37:05.856]                           if (!has_future) {
[13:37:05.856]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.856]                               info)
[13:37:05.856]                           }
[13:37:05.856]                           else {
[13:37:05.856]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.856]                               info, version)
[13:37:05.856]                           }
[13:37:05.856]                           base::stop(msg)
[13:37:05.856]                         }
[13:37:05.856]                       })
[13:37:05.856]                     }
[13:37:05.856]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.856]                     base::options(mc.cores = 1L)
[13:37:05.856]                   }
[13:37:05.856]                   ...future.strategy.old <- future::plan("list")
[13:37:05.856]                   options(future.plan = NULL)
[13:37:05.856]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.856]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.856]                 }
[13:37:05.856]                 ...future.workdir <- getwd()
[13:37:05.856]             }
[13:37:05.856]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.856]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.856]         }
[13:37:05.856]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.856]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.856]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.856]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.856]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.856]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.856]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.856]             base::names(...future.oldOptions))
[13:37:05.856]     }
[13:37:05.856]     if (FALSE) {
[13:37:05.856]     }
[13:37:05.856]     else {
[13:37:05.856]         if (TRUE) {
[13:37:05.856]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.856]                 open = "w")
[13:37:05.856]         }
[13:37:05.856]         else {
[13:37:05.856]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.856]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.856]         }
[13:37:05.856]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.856]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.856]             base::sink(type = "output", split = FALSE)
[13:37:05.856]             base::close(...future.stdout)
[13:37:05.856]         }, add = TRUE)
[13:37:05.856]     }
[13:37:05.856]     ...future.frame <- base::sys.nframe()
[13:37:05.856]     ...future.conditions <- base::list()
[13:37:05.856]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.856]     if (FALSE) {
[13:37:05.856]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.856]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.856]     }
[13:37:05.856]     ...future.result <- base::tryCatch({
[13:37:05.856]         base::withCallingHandlers({
[13:37:05.856]             ...future.value <- base::withVisible(base::local({
[13:37:05.856]                 ...future.makeSendCondition <- base::local({
[13:37:05.856]                   sendCondition <- NULL
[13:37:05.856]                   function(frame = 1L) {
[13:37:05.856]                     if (is.function(sendCondition)) 
[13:37:05.856]                       return(sendCondition)
[13:37:05.856]                     ns <- getNamespace("parallel")
[13:37:05.856]                     if (exists("sendData", mode = "function", 
[13:37:05.856]                       envir = ns)) {
[13:37:05.856]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.856]                         envir = ns)
[13:37:05.856]                       envir <- sys.frame(frame)
[13:37:05.856]                       master <- NULL
[13:37:05.856]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.856]                         !identical(envir, emptyenv())) {
[13:37:05.856]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.856]                           inherits = FALSE)) {
[13:37:05.856]                           master <- get("master", mode = "list", 
[13:37:05.856]                             envir = envir, inherits = FALSE)
[13:37:05.856]                           if (inherits(master, c("SOCKnode", 
[13:37:05.856]                             "SOCK0node"))) {
[13:37:05.856]                             sendCondition <<- function(cond) {
[13:37:05.856]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.856]                                 success = TRUE)
[13:37:05.856]                               parallel_sendData(master, data)
[13:37:05.856]                             }
[13:37:05.856]                             return(sendCondition)
[13:37:05.856]                           }
[13:37:05.856]                         }
[13:37:05.856]                         frame <- frame + 1L
[13:37:05.856]                         envir <- sys.frame(frame)
[13:37:05.856]                       }
[13:37:05.856]                     }
[13:37:05.856]                     sendCondition <<- function(cond) NULL
[13:37:05.856]                   }
[13:37:05.856]                 })
[13:37:05.856]                 withCallingHandlers({
[13:37:05.856]                   {
[13:37:05.856]                     f1$owner
[13:37:05.856]                   }
[13:37:05.856]                 }, immediateCondition = function(cond) {
[13:37:05.856]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.856]                   sendCondition(cond)
[13:37:05.856]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.856]                   {
[13:37:05.856]                     inherits <- base::inherits
[13:37:05.856]                     invokeRestart <- base::invokeRestart
[13:37:05.856]                     is.null <- base::is.null
[13:37:05.856]                     muffled <- FALSE
[13:37:05.856]                     if (inherits(cond, "message")) {
[13:37:05.856]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.856]                       if (muffled) 
[13:37:05.856]                         invokeRestart("muffleMessage")
[13:37:05.856]                     }
[13:37:05.856]                     else if (inherits(cond, "warning")) {
[13:37:05.856]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.856]                       if (muffled) 
[13:37:05.856]                         invokeRestart("muffleWarning")
[13:37:05.856]                     }
[13:37:05.856]                     else if (inherits(cond, "condition")) {
[13:37:05.856]                       if (!is.null(pattern)) {
[13:37:05.856]                         computeRestarts <- base::computeRestarts
[13:37:05.856]                         grepl <- base::grepl
[13:37:05.856]                         restarts <- computeRestarts(cond)
[13:37:05.856]                         for (restart in restarts) {
[13:37:05.856]                           name <- restart$name
[13:37:05.856]                           if (is.null(name)) 
[13:37:05.856]                             next
[13:37:05.856]                           if (!grepl(pattern, name)) 
[13:37:05.856]                             next
[13:37:05.856]                           invokeRestart(restart)
[13:37:05.856]                           muffled <- TRUE
[13:37:05.856]                           break
[13:37:05.856]                         }
[13:37:05.856]                       }
[13:37:05.856]                     }
[13:37:05.856]                     invisible(muffled)
[13:37:05.856]                   }
[13:37:05.856]                   muffleCondition(cond)
[13:37:05.856]                 })
[13:37:05.856]             }))
[13:37:05.856]             future::FutureResult(value = ...future.value$value, 
[13:37:05.856]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.856]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.856]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.856]                     ...future.globalenv.names))
[13:37:05.856]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.856]         }, condition = base::local({
[13:37:05.856]             c <- base::c
[13:37:05.856]             inherits <- base::inherits
[13:37:05.856]             invokeRestart <- base::invokeRestart
[13:37:05.856]             length <- base::length
[13:37:05.856]             list <- base::list
[13:37:05.856]             seq.int <- base::seq.int
[13:37:05.856]             signalCondition <- base::signalCondition
[13:37:05.856]             sys.calls <- base::sys.calls
[13:37:05.856]             `[[` <- base::`[[`
[13:37:05.856]             `+` <- base::`+`
[13:37:05.856]             `<<-` <- base::`<<-`
[13:37:05.856]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.856]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.856]                   3L)]
[13:37:05.856]             }
[13:37:05.856]             function(cond) {
[13:37:05.856]                 is_error <- inherits(cond, "error")
[13:37:05.856]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.856]                   NULL)
[13:37:05.856]                 if (is_error) {
[13:37:05.856]                   sessionInformation <- function() {
[13:37:05.856]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.856]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.856]                       search = base::search(), system = base::Sys.info())
[13:37:05.856]                   }
[13:37:05.856]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.856]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.856]                     cond$call), session = sessionInformation(), 
[13:37:05.856]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.856]                   signalCondition(cond)
[13:37:05.856]                 }
[13:37:05.856]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.856]                 "immediateCondition"))) {
[13:37:05.856]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.856]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.856]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.856]                   if (TRUE && !signal) {
[13:37:05.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.856]                     {
[13:37:05.856]                       inherits <- base::inherits
[13:37:05.856]                       invokeRestart <- base::invokeRestart
[13:37:05.856]                       is.null <- base::is.null
[13:37:05.856]                       muffled <- FALSE
[13:37:05.856]                       if (inherits(cond, "message")) {
[13:37:05.856]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.856]                         if (muffled) 
[13:37:05.856]                           invokeRestart("muffleMessage")
[13:37:05.856]                       }
[13:37:05.856]                       else if (inherits(cond, "warning")) {
[13:37:05.856]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.856]                         if (muffled) 
[13:37:05.856]                           invokeRestart("muffleWarning")
[13:37:05.856]                       }
[13:37:05.856]                       else if (inherits(cond, "condition")) {
[13:37:05.856]                         if (!is.null(pattern)) {
[13:37:05.856]                           computeRestarts <- base::computeRestarts
[13:37:05.856]                           grepl <- base::grepl
[13:37:05.856]                           restarts <- computeRestarts(cond)
[13:37:05.856]                           for (restart in restarts) {
[13:37:05.856]                             name <- restart$name
[13:37:05.856]                             if (is.null(name)) 
[13:37:05.856]                               next
[13:37:05.856]                             if (!grepl(pattern, name)) 
[13:37:05.856]                               next
[13:37:05.856]                             invokeRestart(restart)
[13:37:05.856]                             muffled <- TRUE
[13:37:05.856]                             break
[13:37:05.856]                           }
[13:37:05.856]                         }
[13:37:05.856]                       }
[13:37:05.856]                       invisible(muffled)
[13:37:05.856]                     }
[13:37:05.856]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.856]                   }
[13:37:05.856]                 }
[13:37:05.856]                 else {
[13:37:05.856]                   if (TRUE) {
[13:37:05.856]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.856]                     {
[13:37:05.856]                       inherits <- base::inherits
[13:37:05.856]                       invokeRestart <- base::invokeRestart
[13:37:05.856]                       is.null <- base::is.null
[13:37:05.856]                       muffled <- FALSE
[13:37:05.856]                       if (inherits(cond, "message")) {
[13:37:05.856]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.856]                         if (muffled) 
[13:37:05.856]                           invokeRestart("muffleMessage")
[13:37:05.856]                       }
[13:37:05.856]                       else if (inherits(cond, "warning")) {
[13:37:05.856]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.856]                         if (muffled) 
[13:37:05.856]                           invokeRestart("muffleWarning")
[13:37:05.856]                       }
[13:37:05.856]                       else if (inherits(cond, "condition")) {
[13:37:05.856]                         if (!is.null(pattern)) {
[13:37:05.856]                           computeRestarts <- base::computeRestarts
[13:37:05.856]                           grepl <- base::grepl
[13:37:05.856]                           restarts <- computeRestarts(cond)
[13:37:05.856]                           for (restart in restarts) {
[13:37:05.856]                             name <- restart$name
[13:37:05.856]                             if (is.null(name)) 
[13:37:05.856]                               next
[13:37:05.856]                             if (!grepl(pattern, name)) 
[13:37:05.856]                               next
[13:37:05.856]                             invokeRestart(restart)
[13:37:05.856]                             muffled <- TRUE
[13:37:05.856]                             break
[13:37:05.856]                           }
[13:37:05.856]                         }
[13:37:05.856]                       }
[13:37:05.856]                       invisible(muffled)
[13:37:05.856]                     }
[13:37:05.856]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.856]                   }
[13:37:05.856]                 }
[13:37:05.856]             }
[13:37:05.856]         }))
[13:37:05.856]     }, error = function(ex) {
[13:37:05.856]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.856]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.856]                 ...future.rng), started = ...future.startTime, 
[13:37:05.856]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.856]             version = "1.8"), class = "FutureResult")
[13:37:05.856]     }, finally = {
[13:37:05.856]         if (!identical(...future.workdir, getwd())) 
[13:37:05.856]             setwd(...future.workdir)
[13:37:05.856]         {
[13:37:05.856]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.856]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.856]             }
[13:37:05.856]             base::options(...future.oldOptions)
[13:37:05.856]             if (.Platform$OS.type == "windows") {
[13:37:05.856]                 old_names <- names(...future.oldEnvVars)
[13:37:05.856]                 envs <- base::Sys.getenv()
[13:37:05.856]                 names <- names(envs)
[13:37:05.856]                 common <- intersect(names, old_names)
[13:37:05.856]                 added <- setdiff(names, old_names)
[13:37:05.856]                 removed <- setdiff(old_names, names)
[13:37:05.856]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.856]                   envs[common]]
[13:37:05.856]                 NAMES <- toupper(changed)
[13:37:05.856]                 args <- list()
[13:37:05.856]                 for (kk in seq_along(NAMES)) {
[13:37:05.856]                   name <- changed[[kk]]
[13:37:05.856]                   NAME <- NAMES[[kk]]
[13:37:05.856]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.856]                     next
[13:37:05.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.856]                 }
[13:37:05.856]                 NAMES <- toupper(added)
[13:37:05.856]                 for (kk in seq_along(NAMES)) {
[13:37:05.856]                   name <- added[[kk]]
[13:37:05.856]                   NAME <- NAMES[[kk]]
[13:37:05.856]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.856]                     next
[13:37:05.856]                   args[[name]] <- ""
[13:37:05.856]                 }
[13:37:05.856]                 NAMES <- toupper(removed)
[13:37:05.856]                 for (kk in seq_along(NAMES)) {
[13:37:05.856]                   name <- removed[[kk]]
[13:37:05.856]                   NAME <- NAMES[[kk]]
[13:37:05.856]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.856]                     next
[13:37:05.856]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.856]                 }
[13:37:05.856]                 if (length(args) > 0) 
[13:37:05.856]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.856]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.856]             }
[13:37:05.856]             else {
[13:37:05.856]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.856]             }
[13:37:05.856]             {
[13:37:05.856]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.856]                   0L) {
[13:37:05.856]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.856]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.856]                   base::options(opts)
[13:37:05.856]                 }
[13:37:05.856]                 {
[13:37:05.856]                   {
[13:37:05.856]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.856]                     NULL
[13:37:05.856]                   }
[13:37:05.856]                   options(future.plan = NULL)
[13:37:05.856]                   if (is.na(NA_character_)) 
[13:37:05.856]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.856]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.856]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.856]                     .init = FALSE)
[13:37:05.856]                 }
[13:37:05.856]             }
[13:37:05.856]         }
[13:37:05.856]     })
[13:37:05.856]     if (TRUE) {
[13:37:05.856]         base::sink(type = "output", split = FALSE)
[13:37:05.856]         if (TRUE) {
[13:37:05.856]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.856]         }
[13:37:05.856]         else {
[13:37:05.856]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.856]         }
[13:37:05.856]         base::close(...future.stdout)
[13:37:05.856]         ...future.stdout <- NULL
[13:37:05.856]     }
[13:37:05.856]     ...future.result$conditions <- ...future.conditions
[13:37:05.856]     ...future.result$finished <- base::Sys.time()
[13:37:05.856]     ...future.result
[13:37:05.856] }
[13:37:05.858] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[13:37:05.860] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[13:37:05.910] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[13:37:05.911] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[13:37:05.911] MultisessionFuture started
[13:37:05.911] - Launch lazy future ... done
[13:37:05.911] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[13:37:05.912] result() for ClusterFuture ...
[13:37:05.912] receiveMessageFromWorker() for ClusterFuture ...
[13:37:05.912] - Validating connection of MultisessionFuture
[13:37:05.956] - received message: FutureResult
[13:37:05.956] - Received FutureResult
[13:37:05.956] - Erased future from FutureRegistry
[13:37:05.956] result() for ClusterFuture ...
[13:37:05.956] - result already collected: FutureResult
[13:37:05.957] result() for ClusterFuture ... done
[13:37:05.957] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:05.957] result() for ClusterFuture ... done
[13:37:05.957] result() for ClusterFuture ...
[13:37:05.957] - result already collected: FutureResult
[13:37:05.957] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 522583be-85ec-ddaf-5357-ae528484b6c8
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[13:37:05.957] getGlobalsAndPackages() ...
[13:37:05.957] Searching for globals...
[13:37:05.959] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[13:37:05.959] Searching for globals ... DONE
[13:37:05.959] Resolving globals: FALSE
[13:37:05.961] The total size of the 1 globals is 1.57 MiB (1643448 bytes)
[13:37:05.962] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[13:37:05.962] - globals: [1] ‘f1’
[13:37:05.962] 
[13:37:05.962] getGlobalsAndPackages() ... DONE
[13:37:05.962] run() for ‘Future’ ...
[13:37:05.962] - state: ‘created’
[13:37:05.962] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:05.973] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:05.973] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:05.973]   - Field: ‘node’
[13:37:05.973]   - Field: ‘label’
[13:37:05.973]   - Field: ‘local’
[13:37:05.973]   - Field: ‘owner’
[13:37:05.974]   - Field: ‘envir’
[13:37:05.974]   - Field: ‘workers’
[13:37:05.974]   - Field: ‘packages’
[13:37:05.974]   - Field: ‘gc’
[13:37:05.974]   - Field: ‘conditions’
[13:37:05.974]   - Field: ‘persistent’
[13:37:05.974]   - Field: ‘expr’
[13:37:05.974]   - Field: ‘uuid’
[13:37:05.974]   - Field: ‘seed’
[13:37:05.974]   - Field: ‘version’
[13:37:05.974]   - Field: ‘result’
[13:37:05.975]   - Field: ‘asynchronous’
[13:37:05.975]   - Field: ‘calls’
[13:37:05.975]   - Field: ‘globals’
[13:37:05.975]   - Field: ‘stdout’
[13:37:05.975]   - Field: ‘earlySignal’
[13:37:05.975]   - Field: ‘lazy’
[13:37:05.975]   - Field: ‘state’
[13:37:05.975] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:05.975] - Launch lazy future ...
[13:37:05.975] Packages needed by the future expression (n = 0): <none>
[13:37:05.976] Packages needed by future strategies (n = 0): <none>
[13:37:05.976] {
[13:37:05.976]     {
[13:37:05.976]         {
[13:37:05.976]             ...future.startTime <- base::Sys.time()
[13:37:05.976]             {
[13:37:05.976]                 {
[13:37:05.976]                   {
[13:37:05.976]                     {
[13:37:05.976]                       base::local({
[13:37:05.976]                         has_future <- base::requireNamespace("future", 
[13:37:05.976]                           quietly = TRUE)
[13:37:05.976]                         if (has_future) {
[13:37:05.976]                           ns <- base::getNamespace("future")
[13:37:05.976]                           version <- ns[[".package"]][["version"]]
[13:37:05.976]                           if (is.null(version)) 
[13:37:05.976]                             version <- utils::packageVersion("future")
[13:37:05.976]                         }
[13:37:05.976]                         else {
[13:37:05.976]                           version <- NULL
[13:37:05.976]                         }
[13:37:05.976]                         if (!has_future || version < "1.8.0") {
[13:37:05.976]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:05.976]                             "", base::R.version$version.string), 
[13:37:05.976]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:05.976]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:05.976]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:05.976]                               "release", "version")], collapse = " "), 
[13:37:05.976]                             hostname = base::Sys.info()[["nodename"]])
[13:37:05.976]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:05.976]                             info)
[13:37:05.976]                           info <- base::paste(info, collapse = "; ")
[13:37:05.976]                           if (!has_future) {
[13:37:05.976]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:05.976]                               info)
[13:37:05.976]                           }
[13:37:05.976]                           else {
[13:37:05.976]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:05.976]                               info, version)
[13:37:05.976]                           }
[13:37:05.976]                           base::stop(msg)
[13:37:05.976]                         }
[13:37:05.976]                       })
[13:37:05.976]                     }
[13:37:05.976]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:05.976]                     base::options(mc.cores = 1L)
[13:37:05.976]                   }
[13:37:05.976]                   ...future.strategy.old <- future::plan("list")
[13:37:05.976]                   options(future.plan = NULL)
[13:37:05.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.976]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:05.976]                 }
[13:37:05.976]                 ...future.workdir <- getwd()
[13:37:05.976]             }
[13:37:05.976]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:05.976]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:05.976]         }
[13:37:05.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:05.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:05.976]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:05.976]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:05.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:05.976]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:05.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:05.976]             base::names(...future.oldOptions))
[13:37:05.976]     }
[13:37:05.976]     if (FALSE) {
[13:37:05.976]     }
[13:37:05.976]     else {
[13:37:05.976]         if (TRUE) {
[13:37:05.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:05.976]                 open = "w")
[13:37:05.976]         }
[13:37:05.976]         else {
[13:37:05.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:05.976]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:05.976]         }
[13:37:05.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:05.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:05.976]             base::sink(type = "output", split = FALSE)
[13:37:05.976]             base::close(...future.stdout)
[13:37:05.976]         }, add = TRUE)
[13:37:05.976]     }
[13:37:05.976]     ...future.frame <- base::sys.nframe()
[13:37:05.976]     ...future.conditions <- base::list()
[13:37:05.976]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:05.976]     if (FALSE) {
[13:37:05.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:05.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:05.976]     }
[13:37:05.976]     ...future.result <- base::tryCatch({
[13:37:05.976]         base::withCallingHandlers({
[13:37:05.976]             ...future.value <- base::withVisible(base::local({
[13:37:05.976]                 ...future.makeSendCondition <- base::local({
[13:37:05.976]                   sendCondition <- NULL
[13:37:05.976]                   function(frame = 1L) {
[13:37:05.976]                     if (is.function(sendCondition)) 
[13:37:05.976]                       return(sendCondition)
[13:37:05.976]                     ns <- getNamespace("parallel")
[13:37:05.976]                     if (exists("sendData", mode = "function", 
[13:37:05.976]                       envir = ns)) {
[13:37:05.976]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:05.976]                         envir = ns)
[13:37:05.976]                       envir <- sys.frame(frame)
[13:37:05.976]                       master <- NULL
[13:37:05.976]                       while (!identical(envir, .GlobalEnv) && 
[13:37:05.976]                         !identical(envir, emptyenv())) {
[13:37:05.976]                         if (exists("master", mode = "list", envir = envir, 
[13:37:05.976]                           inherits = FALSE)) {
[13:37:05.976]                           master <- get("master", mode = "list", 
[13:37:05.976]                             envir = envir, inherits = FALSE)
[13:37:05.976]                           if (inherits(master, c("SOCKnode", 
[13:37:05.976]                             "SOCK0node"))) {
[13:37:05.976]                             sendCondition <<- function(cond) {
[13:37:05.976]                               data <- list(type = "VALUE", value = cond, 
[13:37:05.976]                                 success = TRUE)
[13:37:05.976]                               parallel_sendData(master, data)
[13:37:05.976]                             }
[13:37:05.976]                             return(sendCondition)
[13:37:05.976]                           }
[13:37:05.976]                         }
[13:37:05.976]                         frame <- frame + 1L
[13:37:05.976]                         envir <- sys.frame(frame)
[13:37:05.976]                       }
[13:37:05.976]                     }
[13:37:05.976]                     sendCondition <<- function(cond) NULL
[13:37:05.976]                   }
[13:37:05.976]                 })
[13:37:05.976]                 withCallingHandlers({
[13:37:05.976]                   {
[13:37:05.976]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[13:37:05.976]                     "not-owner"
[13:37:05.976]                   }
[13:37:05.976]                 }, immediateCondition = function(cond) {
[13:37:05.976]                   sendCondition <- ...future.makeSendCondition()
[13:37:05.976]                   sendCondition(cond)
[13:37:05.976]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.976]                   {
[13:37:05.976]                     inherits <- base::inherits
[13:37:05.976]                     invokeRestart <- base::invokeRestart
[13:37:05.976]                     is.null <- base::is.null
[13:37:05.976]                     muffled <- FALSE
[13:37:05.976]                     if (inherits(cond, "message")) {
[13:37:05.976]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:05.976]                       if (muffled) 
[13:37:05.976]                         invokeRestart("muffleMessage")
[13:37:05.976]                     }
[13:37:05.976]                     else if (inherits(cond, "warning")) {
[13:37:05.976]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:05.976]                       if (muffled) 
[13:37:05.976]                         invokeRestart("muffleWarning")
[13:37:05.976]                     }
[13:37:05.976]                     else if (inherits(cond, "condition")) {
[13:37:05.976]                       if (!is.null(pattern)) {
[13:37:05.976]                         computeRestarts <- base::computeRestarts
[13:37:05.976]                         grepl <- base::grepl
[13:37:05.976]                         restarts <- computeRestarts(cond)
[13:37:05.976]                         for (restart in restarts) {
[13:37:05.976]                           name <- restart$name
[13:37:05.976]                           if (is.null(name)) 
[13:37:05.976]                             next
[13:37:05.976]                           if (!grepl(pattern, name)) 
[13:37:05.976]                             next
[13:37:05.976]                           invokeRestart(restart)
[13:37:05.976]                           muffled <- TRUE
[13:37:05.976]                           break
[13:37:05.976]                         }
[13:37:05.976]                       }
[13:37:05.976]                     }
[13:37:05.976]                     invisible(muffled)
[13:37:05.976]                   }
[13:37:05.976]                   muffleCondition(cond)
[13:37:05.976]                 })
[13:37:05.976]             }))
[13:37:05.976]             future::FutureResult(value = ...future.value$value, 
[13:37:05.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.976]                   ...future.rng), globalenv = if (FALSE) 
[13:37:05.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:05.976]                     ...future.globalenv.names))
[13:37:05.976]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:05.976]         }, condition = base::local({
[13:37:05.976]             c <- base::c
[13:37:05.976]             inherits <- base::inherits
[13:37:05.976]             invokeRestart <- base::invokeRestart
[13:37:05.976]             length <- base::length
[13:37:05.976]             list <- base::list
[13:37:05.976]             seq.int <- base::seq.int
[13:37:05.976]             signalCondition <- base::signalCondition
[13:37:05.976]             sys.calls <- base::sys.calls
[13:37:05.976]             `[[` <- base::`[[`
[13:37:05.976]             `+` <- base::`+`
[13:37:05.976]             `<<-` <- base::`<<-`
[13:37:05.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:05.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:05.976]                   3L)]
[13:37:05.976]             }
[13:37:05.976]             function(cond) {
[13:37:05.976]                 is_error <- inherits(cond, "error")
[13:37:05.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:05.976]                   NULL)
[13:37:05.976]                 if (is_error) {
[13:37:05.976]                   sessionInformation <- function() {
[13:37:05.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:05.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:05.976]                       search = base::search(), system = base::Sys.info())
[13:37:05.976]                   }
[13:37:05.976]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:05.976]                     cond$call), session = sessionInformation(), 
[13:37:05.976]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:05.976]                   signalCondition(cond)
[13:37:05.976]                 }
[13:37:05.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:05.976]                 "immediateCondition"))) {
[13:37:05.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:05.976]                   ...future.conditions[[length(...future.conditions) + 
[13:37:05.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:05.976]                   if (TRUE && !signal) {
[13:37:05.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.976]                     {
[13:37:05.976]                       inherits <- base::inherits
[13:37:05.976]                       invokeRestart <- base::invokeRestart
[13:37:05.976]                       is.null <- base::is.null
[13:37:05.976]                       muffled <- FALSE
[13:37:05.976]                       if (inherits(cond, "message")) {
[13:37:05.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.976]                         if (muffled) 
[13:37:05.976]                           invokeRestart("muffleMessage")
[13:37:05.976]                       }
[13:37:05.976]                       else if (inherits(cond, "warning")) {
[13:37:05.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.976]                         if (muffled) 
[13:37:05.976]                           invokeRestart("muffleWarning")
[13:37:05.976]                       }
[13:37:05.976]                       else if (inherits(cond, "condition")) {
[13:37:05.976]                         if (!is.null(pattern)) {
[13:37:05.976]                           computeRestarts <- base::computeRestarts
[13:37:05.976]                           grepl <- base::grepl
[13:37:05.976]                           restarts <- computeRestarts(cond)
[13:37:05.976]                           for (restart in restarts) {
[13:37:05.976]                             name <- restart$name
[13:37:05.976]                             if (is.null(name)) 
[13:37:05.976]                               next
[13:37:05.976]                             if (!grepl(pattern, name)) 
[13:37:05.976]                               next
[13:37:05.976]                             invokeRestart(restart)
[13:37:05.976]                             muffled <- TRUE
[13:37:05.976]                             break
[13:37:05.976]                           }
[13:37:05.976]                         }
[13:37:05.976]                       }
[13:37:05.976]                       invisible(muffled)
[13:37:05.976]                     }
[13:37:05.976]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.976]                   }
[13:37:05.976]                 }
[13:37:05.976]                 else {
[13:37:05.976]                   if (TRUE) {
[13:37:05.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:05.976]                     {
[13:37:05.976]                       inherits <- base::inherits
[13:37:05.976]                       invokeRestart <- base::invokeRestart
[13:37:05.976]                       is.null <- base::is.null
[13:37:05.976]                       muffled <- FALSE
[13:37:05.976]                       if (inherits(cond, "message")) {
[13:37:05.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:05.976]                         if (muffled) 
[13:37:05.976]                           invokeRestart("muffleMessage")
[13:37:05.976]                       }
[13:37:05.976]                       else if (inherits(cond, "warning")) {
[13:37:05.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:05.976]                         if (muffled) 
[13:37:05.976]                           invokeRestart("muffleWarning")
[13:37:05.976]                       }
[13:37:05.976]                       else if (inherits(cond, "condition")) {
[13:37:05.976]                         if (!is.null(pattern)) {
[13:37:05.976]                           computeRestarts <- base::computeRestarts
[13:37:05.976]                           grepl <- base::grepl
[13:37:05.976]                           restarts <- computeRestarts(cond)
[13:37:05.976]                           for (restart in restarts) {
[13:37:05.976]                             name <- restart$name
[13:37:05.976]                             if (is.null(name)) 
[13:37:05.976]                               next
[13:37:05.976]                             if (!grepl(pattern, name)) 
[13:37:05.976]                               next
[13:37:05.976]                             invokeRestart(restart)
[13:37:05.976]                             muffled <- TRUE
[13:37:05.976]                             break
[13:37:05.976]                           }
[13:37:05.976]                         }
[13:37:05.976]                       }
[13:37:05.976]                       invisible(muffled)
[13:37:05.976]                     }
[13:37:05.976]                     muffleCondition(cond, pattern = "^muffle")
[13:37:05.976]                   }
[13:37:05.976]                 }
[13:37:05.976]             }
[13:37:05.976]         }))
[13:37:05.976]     }, error = function(ex) {
[13:37:05.976]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:05.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:05.976]                 ...future.rng), started = ...future.startTime, 
[13:37:05.976]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:05.976]             version = "1.8"), class = "FutureResult")
[13:37:05.976]     }, finally = {
[13:37:05.976]         if (!identical(...future.workdir, getwd())) 
[13:37:05.976]             setwd(...future.workdir)
[13:37:05.976]         {
[13:37:05.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:05.976]                 ...future.oldOptions$nwarnings <- NULL
[13:37:05.976]             }
[13:37:05.976]             base::options(...future.oldOptions)
[13:37:05.976]             if (.Platform$OS.type == "windows") {
[13:37:05.976]                 old_names <- names(...future.oldEnvVars)
[13:37:05.976]                 envs <- base::Sys.getenv()
[13:37:05.976]                 names <- names(envs)
[13:37:05.976]                 common <- intersect(names, old_names)
[13:37:05.976]                 added <- setdiff(names, old_names)
[13:37:05.976]                 removed <- setdiff(old_names, names)
[13:37:05.976]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:05.976]                   envs[common]]
[13:37:05.976]                 NAMES <- toupper(changed)
[13:37:05.976]                 args <- list()
[13:37:05.976]                 for (kk in seq_along(NAMES)) {
[13:37:05.976]                   name <- changed[[kk]]
[13:37:05.976]                   NAME <- NAMES[[kk]]
[13:37:05.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.976]                     next
[13:37:05.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.976]                 }
[13:37:05.976]                 NAMES <- toupper(added)
[13:37:05.976]                 for (kk in seq_along(NAMES)) {
[13:37:05.976]                   name <- added[[kk]]
[13:37:05.976]                   NAME <- NAMES[[kk]]
[13:37:05.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.976]                     next
[13:37:05.976]                   args[[name]] <- ""
[13:37:05.976]                 }
[13:37:05.976]                 NAMES <- toupper(removed)
[13:37:05.976]                 for (kk in seq_along(NAMES)) {
[13:37:05.976]                   name <- removed[[kk]]
[13:37:05.976]                   NAME <- NAMES[[kk]]
[13:37:05.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:05.976]                     next
[13:37:05.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:05.976]                 }
[13:37:05.976]                 if (length(args) > 0) 
[13:37:05.976]                   base::do.call(base::Sys.setenv, args = args)
[13:37:05.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:05.976]             }
[13:37:05.976]             else {
[13:37:05.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:05.976]             }
[13:37:05.976]             {
[13:37:05.976]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:05.976]                   0L) {
[13:37:05.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:05.976]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:05.976]                   base::options(opts)
[13:37:05.976]                 }
[13:37:05.976]                 {
[13:37:05.976]                   {
[13:37:05.976]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:05.976]                     NULL
[13:37:05.976]                   }
[13:37:05.976]                   options(future.plan = NULL)
[13:37:05.976]                   if (is.na(NA_character_)) 
[13:37:05.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:05.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:05.976]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:05.976]                     .init = FALSE)
[13:37:05.976]                 }
[13:37:05.976]             }
[13:37:05.976]         }
[13:37:05.976]     })
[13:37:05.976]     if (TRUE) {
[13:37:05.976]         base::sink(type = "output", split = FALSE)
[13:37:05.976]         if (TRUE) {
[13:37:05.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:05.976]         }
[13:37:05.976]         else {
[13:37:05.976]             ...future.result["stdout"] <- base::list(NULL)
[13:37:05.976]         }
[13:37:05.976]         base::close(...future.stdout)
[13:37:05.976]         ...future.stdout <- NULL
[13:37:05.976]     }
[13:37:05.976]     ...future.result$conditions <- ...future.conditions
[13:37:05.976]     ...future.result$finished <- base::Sys.time()
[13:37:05.976]     ...future.result
[13:37:05.976] }
[13:37:05.978] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[13:37:05.983] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[13:37:06.035] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[13:37:06.035] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[13:37:06.035] MultisessionFuture started
[13:37:06.035] - Launch lazy future ... done
[13:37:06.036] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[13:37:06.036] result() for ClusterFuture ...
[13:37:06.036] receiveMessageFromWorker() for ClusterFuture ...
[13:37:06.036] - Validating connection of MultisessionFuture
[13:37:06.080] - received message: FutureResult
[13:37:06.080] - Received FutureResult
[13:37:06.080] - Erased future from FutureRegistry
[13:37:06.080] result() for ClusterFuture ...
[13:37:06.080] - result already collected: FutureResult
[13:37:06.081] result() for ClusterFuture ... done
[13:37:06.081] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:06.081] result() for ClusterFuture ... done
[13:37:06.081] result() for ClusterFuture ...
[13:37:06.081] - result already collected: FutureResult
[13:37:06.081] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[13:37:06.082] getGlobalsAndPackages() ...
[13:37:06.082] Searching for globals...
[13:37:06.082] - globals found: [1] ‘{’
[13:37:06.082] Searching for globals ... DONE
[13:37:06.082] Resolving globals: FALSE
[13:37:06.083] 
[13:37:06.083] 
[13:37:06.083] getGlobalsAndPackages() ... DONE
[13:37:06.083] run() for ‘Future’ ...
[13:37:06.083] - state: ‘created’
[13:37:06.083] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:06.093] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:06.094] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:06.094]   - Field: ‘node’
[13:37:06.094]   - Field: ‘label’
[13:37:06.094]   - Field: ‘local’
[13:37:06.094]   - Field: ‘owner’
[13:37:06.094]   - Field: ‘envir’
[13:37:06.094]   - Field: ‘workers’
[13:37:06.094]   - Field: ‘packages’
[13:37:06.094]   - Field: ‘gc’
[13:37:06.094]   - Field: ‘conditions’
[13:37:06.095]   - Field: ‘persistent’
[13:37:06.095]   - Field: ‘expr’
[13:37:06.095]   - Field: ‘uuid’
[13:37:06.095]   - Field: ‘seed’
[13:37:06.095]   - Field: ‘version’
[13:37:06.095]   - Field: ‘result’
[13:37:06.095]   - Field: ‘asynchronous’
[13:37:06.095]   - Field: ‘calls’
[13:37:06.095]   - Field: ‘globals’
[13:37:06.095]   - Field: ‘stdout’
[13:37:06.095]   - Field: ‘earlySignal’
[13:37:06.096]   - Field: ‘lazy’
[13:37:06.096]   - Field: ‘state’
[13:37:06.096] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:06.096] - Launch lazy future ...
[13:37:06.096] Packages needed by the future expression (n = 0): <none>
[13:37:06.096] Packages needed by future strategies (n = 0): <none>
[13:37:06.097] {
[13:37:06.097]     {
[13:37:06.097]         {
[13:37:06.097]             ...future.startTime <- base::Sys.time()
[13:37:06.097]             {
[13:37:06.097]                 {
[13:37:06.097]                   {
[13:37:06.097]                     {
[13:37:06.097]                       base::local({
[13:37:06.097]                         has_future <- base::requireNamespace("future", 
[13:37:06.097]                           quietly = TRUE)
[13:37:06.097]                         if (has_future) {
[13:37:06.097]                           ns <- base::getNamespace("future")
[13:37:06.097]                           version <- ns[[".package"]][["version"]]
[13:37:06.097]                           if (is.null(version)) 
[13:37:06.097]                             version <- utils::packageVersion("future")
[13:37:06.097]                         }
[13:37:06.097]                         else {
[13:37:06.097]                           version <- NULL
[13:37:06.097]                         }
[13:37:06.097]                         if (!has_future || version < "1.8.0") {
[13:37:06.097]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:06.097]                             "", base::R.version$version.string), 
[13:37:06.097]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:06.097]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:06.097]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:06.097]                               "release", "version")], collapse = " "), 
[13:37:06.097]                             hostname = base::Sys.info()[["nodename"]])
[13:37:06.097]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:06.097]                             info)
[13:37:06.097]                           info <- base::paste(info, collapse = "; ")
[13:37:06.097]                           if (!has_future) {
[13:37:06.097]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:06.097]                               info)
[13:37:06.097]                           }
[13:37:06.097]                           else {
[13:37:06.097]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:06.097]                               info, version)
[13:37:06.097]                           }
[13:37:06.097]                           base::stop(msg)
[13:37:06.097]                         }
[13:37:06.097]                       })
[13:37:06.097]                     }
[13:37:06.097]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:06.097]                     base::options(mc.cores = 1L)
[13:37:06.097]                   }
[13:37:06.097]                   ...future.strategy.old <- future::plan("list")
[13:37:06.097]                   options(future.plan = NULL)
[13:37:06.097]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:06.097]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:06.097]                 }
[13:37:06.097]                 ...future.workdir <- getwd()
[13:37:06.097]             }
[13:37:06.097]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:06.097]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:06.097]         }
[13:37:06.097]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:06.097]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:06.097]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:06.097]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:06.097]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:06.097]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:06.097]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:06.097]             base::names(...future.oldOptions))
[13:37:06.097]     }
[13:37:06.097]     if (FALSE) {
[13:37:06.097]     }
[13:37:06.097]     else {
[13:37:06.097]         if (TRUE) {
[13:37:06.097]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:06.097]                 open = "w")
[13:37:06.097]         }
[13:37:06.097]         else {
[13:37:06.097]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:06.097]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:06.097]         }
[13:37:06.097]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:06.097]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:06.097]             base::sink(type = "output", split = FALSE)
[13:37:06.097]             base::close(...future.stdout)
[13:37:06.097]         }, add = TRUE)
[13:37:06.097]     }
[13:37:06.097]     ...future.frame <- base::sys.nframe()
[13:37:06.097]     ...future.conditions <- base::list()
[13:37:06.097]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:06.097]     if (FALSE) {
[13:37:06.097]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:06.097]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:06.097]     }
[13:37:06.097]     ...future.result <- base::tryCatch({
[13:37:06.097]         base::withCallingHandlers({
[13:37:06.097]             ...future.value <- base::withVisible(base::local({
[13:37:06.097]                 ...future.makeSendCondition <- base::local({
[13:37:06.097]                   sendCondition <- NULL
[13:37:06.097]                   function(frame = 1L) {
[13:37:06.097]                     if (is.function(sendCondition)) 
[13:37:06.097]                       return(sendCondition)
[13:37:06.097]                     ns <- getNamespace("parallel")
[13:37:06.097]                     if (exists("sendData", mode = "function", 
[13:37:06.097]                       envir = ns)) {
[13:37:06.097]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:06.097]                         envir = ns)
[13:37:06.097]                       envir <- sys.frame(frame)
[13:37:06.097]                       master <- NULL
[13:37:06.097]                       while (!identical(envir, .GlobalEnv) && 
[13:37:06.097]                         !identical(envir, emptyenv())) {
[13:37:06.097]                         if (exists("master", mode = "list", envir = envir, 
[13:37:06.097]                           inherits = FALSE)) {
[13:37:06.097]                           master <- get("master", mode = "list", 
[13:37:06.097]                             envir = envir, inherits = FALSE)
[13:37:06.097]                           if (inherits(master, c("SOCKnode", 
[13:37:06.097]                             "SOCK0node"))) {
[13:37:06.097]                             sendCondition <<- function(cond) {
[13:37:06.097]                               data <- list(type = "VALUE", value = cond, 
[13:37:06.097]                                 success = TRUE)
[13:37:06.097]                               parallel_sendData(master, data)
[13:37:06.097]                             }
[13:37:06.097]                             return(sendCondition)
[13:37:06.097]                           }
[13:37:06.097]                         }
[13:37:06.097]                         frame <- frame + 1L
[13:37:06.097]                         envir <- sys.frame(frame)
[13:37:06.097]                       }
[13:37:06.097]                     }
[13:37:06.097]                     sendCondition <<- function(cond) NULL
[13:37:06.097]                   }
[13:37:06.097]                 })
[13:37:06.097]                 withCallingHandlers({
[13:37:06.097]                   {
[13:37:06.097]                     42L
[13:37:06.097]                   }
[13:37:06.097]                 }, immediateCondition = function(cond) {
[13:37:06.097]                   sendCondition <- ...future.makeSendCondition()
[13:37:06.097]                   sendCondition(cond)
[13:37:06.097]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.097]                   {
[13:37:06.097]                     inherits <- base::inherits
[13:37:06.097]                     invokeRestart <- base::invokeRestart
[13:37:06.097]                     is.null <- base::is.null
[13:37:06.097]                     muffled <- FALSE
[13:37:06.097]                     if (inherits(cond, "message")) {
[13:37:06.097]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:06.097]                       if (muffled) 
[13:37:06.097]                         invokeRestart("muffleMessage")
[13:37:06.097]                     }
[13:37:06.097]                     else if (inherits(cond, "warning")) {
[13:37:06.097]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:06.097]                       if (muffled) 
[13:37:06.097]                         invokeRestart("muffleWarning")
[13:37:06.097]                     }
[13:37:06.097]                     else if (inherits(cond, "condition")) {
[13:37:06.097]                       if (!is.null(pattern)) {
[13:37:06.097]                         computeRestarts <- base::computeRestarts
[13:37:06.097]                         grepl <- base::grepl
[13:37:06.097]                         restarts <- computeRestarts(cond)
[13:37:06.097]                         for (restart in restarts) {
[13:37:06.097]                           name <- restart$name
[13:37:06.097]                           if (is.null(name)) 
[13:37:06.097]                             next
[13:37:06.097]                           if (!grepl(pattern, name)) 
[13:37:06.097]                             next
[13:37:06.097]                           invokeRestart(restart)
[13:37:06.097]                           muffled <- TRUE
[13:37:06.097]                           break
[13:37:06.097]                         }
[13:37:06.097]                       }
[13:37:06.097]                     }
[13:37:06.097]                     invisible(muffled)
[13:37:06.097]                   }
[13:37:06.097]                   muffleCondition(cond)
[13:37:06.097]                 })
[13:37:06.097]             }))
[13:37:06.097]             future::FutureResult(value = ...future.value$value, 
[13:37:06.097]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:06.097]                   ...future.rng), globalenv = if (FALSE) 
[13:37:06.097]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:06.097]                     ...future.globalenv.names))
[13:37:06.097]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:06.097]         }, condition = base::local({
[13:37:06.097]             c <- base::c
[13:37:06.097]             inherits <- base::inherits
[13:37:06.097]             invokeRestart <- base::invokeRestart
[13:37:06.097]             length <- base::length
[13:37:06.097]             list <- base::list
[13:37:06.097]             seq.int <- base::seq.int
[13:37:06.097]             signalCondition <- base::signalCondition
[13:37:06.097]             sys.calls <- base::sys.calls
[13:37:06.097]             `[[` <- base::`[[`
[13:37:06.097]             `+` <- base::`+`
[13:37:06.097]             `<<-` <- base::`<<-`
[13:37:06.097]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:06.097]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:06.097]                   3L)]
[13:37:06.097]             }
[13:37:06.097]             function(cond) {
[13:37:06.097]                 is_error <- inherits(cond, "error")
[13:37:06.097]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:06.097]                   NULL)
[13:37:06.097]                 if (is_error) {
[13:37:06.097]                   sessionInformation <- function() {
[13:37:06.097]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:06.097]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:06.097]                       search = base::search(), system = base::Sys.info())
[13:37:06.097]                   }
[13:37:06.097]                   ...future.conditions[[length(...future.conditions) + 
[13:37:06.097]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:06.097]                     cond$call), session = sessionInformation(), 
[13:37:06.097]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:06.097]                   signalCondition(cond)
[13:37:06.097]                 }
[13:37:06.097]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:06.097]                 "immediateCondition"))) {
[13:37:06.097]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:06.097]                   ...future.conditions[[length(...future.conditions) + 
[13:37:06.097]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:06.097]                   if (TRUE && !signal) {
[13:37:06.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.097]                     {
[13:37:06.097]                       inherits <- base::inherits
[13:37:06.097]                       invokeRestart <- base::invokeRestart
[13:37:06.097]                       is.null <- base::is.null
[13:37:06.097]                       muffled <- FALSE
[13:37:06.097]                       if (inherits(cond, "message")) {
[13:37:06.097]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:06.097]                         if (muffled) 
[13:37:06.097]                           invokeRestart("muffleMessage")
[13:37:06.097]                       }
[13:37:06.097]                       else if (inherits(cond, "warning")) {
[13:37:06.097]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:06.097]                         if (muffled) 
[13:37:06.097]                           invokeRestart("muffleWarning")
[13:37:06.097]                       }
[13:37:06.097]                       else if (inherits(cond, "condition")) {
[13:37:06.097]                         if (!is.null(pattern)) {
[13:37:06.097]                           computeRestarts <- base::computeRestarts
[13:37:06.097]                           grepl <- base::grepl
[13:37:06.097]                           restarts <- computeRestarts(cond)
[13:37:06.097]                           for (restart in restarts) {
[13:37:06.097]                             name <- restart$name
[13:37:06.097]                             if (is.null(name)) 
[13:37:06.097]                               next
[13:37:06.097]                             if (!grepl(pattern, name)) 
[13:37:06.097]                               next
[13:37:06.097]                             invokeRestart(restart)
[13:37:06.097]                             muffled <- TRUE
[13:37:06.097]                             break
[13:37:06.097]                           }
[13:37:06.097]                         }
[13:37:06.097]                       }
[13:37:06.097]                       invisible(muffled)
[13:37:06.097]                     }
[13:37:06.097]                     muffleCondition(cond, pattern = "^muffle")
[13:37:06.097]                   }
[13:37:06.097]                 }
[13:37:06.097]                 else {
[13:37:06.097]                   if (TRUE) {
[13:37:06.097]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.097]                     {
[13:37:06.097]                       inherits <- base::inherits
[13:37:06.097]                       invokeRestart <- base::invokeRestart
[13:37:06.097]                       is.null <- base::is.null
[13:37:06.097]                       muffled <- FALSE
[13:37:06.097]                       if (inherits(cond, "message")) {
[13:37:06.097]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:06.097]                         if (muffled) 
[13:37:06.097]                           invokeRestart("muffleMessage")
[13:37:06.097]                       }
[13:37:06.097]                       else if (inherits(cond, "warning")) {
[13:37:06.097]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:06.097]                         if (muffled) 
[13:37:06.097]                           invokeRestart("muffleWarning")
[13:37:06.097]                       }
[13:37:06.097]                       else if (inherits(cond, "condition")) {
[13:37:06.097]                         if (!is.null(pattern)) {
[13:37:06.097]                           computeRestarts <- base::computeRestarts
[13:37:06.097]                           grepl <- base::grepl
[13:37:06.097]                           restarts <- computeRestarts(cond)
[13:37:06.097]                           for (restart in restarts) {
[13:37:06.097]                             name <- restart$name
[13:37:06.097]                             if (is.null(name)) 
[13:37:06.097]                               next
[13:37:06.097]                             if (!grepl(pattern, name)) 
[13:37:06.097]                               next
[13:37:06.097]                             invokeRestart(restart)
[13:37:06.097]                             muffled <- TRUE
[13:37:06.097]                             break
[13:37:06.097]                           }
[13:37:06.097]                         }
[13:37:06.097]                       }
[13:37:06.097]                       invisible(muffled)
[13:37:06.097]                     }
[13:37:06.097]                     muffleCondition(cond, pattern = "^muffle")
[13:37:06.097]                   }
[13:37:06.097]                 }
[13:37:06.097]             }
[13:37:06.097]         }))
[13:37:06.097]     }, error = function(ex) {
[13:37:06.097]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:06.097]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:06.097]                 ...future.rng), started = ...future.startTime, 
[13:37:06.097]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:06.097]             version = "1.8"), class = "FutureResult")
[13:37:06.097]     }, finally = {
[13:37:06.097]         if (!identical(...future.workdir, getwd())) 
[13:37:06.097]             setwd(...future.workdir)
[13:37:06.097]         {
[13:37:06.097]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:06.097]                 ...future.oldOptions$nwarnings <- NULL
[13:37:06.097]             }
[13:37:06.097]             base::options(...future.oldOptions)
[13:37:06.097]             if (.Platform$OS.type == "windows") {
[13:37:06.097]                 old_names <- names(...future.oldEnvVars)
[13:37:06.097]                 envs <- base::Sys.getenv()
[13:37:06.097]                 names <- names(envs)
[13:37:06.097]                 common <- intersect(names, old_names)
[13:37:06.097]                 added <- setdiff(names, old_names)
[13:37:06.097]                 removed <- setdiff(old_names, names)
[13:37:06.097]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:06.097]                   envs[common]]
[13:37:06.097]                 NAMES <- toupper(changed)
[13:37:06.097]                 args <- list()
[13:37:06.097]                 for (kk in seq_along(NAMES)) {
[13:37:06.097]                   name <- changed[[kk]]
[13:37:06.097]                   NAME <- NAMES[[kk]]
[13:37:06.097]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.097]                     next
[13:37:06.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:06.097]                 }
[13:37:06.097]                 NAMES <- toupper(added)
[13:37:06.097]                 for (kk in seq_along(NAMES)) {
[13:37:06.097]                   name <- added[[kk]]
[13:37:06.097]                   NAME <- NAMES[[kk]]
[13:37:06.097]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.097]                     next
[13:37:06.097]                   args[[name]] <- ""
[13:37:06.097]                 }
[13:37:06.097]                 NAMES <- toupper(removed)
[13:37:06.097]                 for (kk in seq_along(NAMES)) {
[13:37:06.097]                   name <- removed[[kk]]
[13:37:06.097]                   NAME <- NAMES[[kk]]
[13:37:06.097]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.097]                     next
[13:37:06.097]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:06.097]                 }
[13:37:06.097]                 if (length(args) > 0) 
[13:37:06.097]                   base::do.call(base::Sys.setenv, args = args)
[13:37:06.097]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:06.097]             }
[13:37:06.097]             else {
[13:37:06.097]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:06.097]             }
[13:37:06.097]             {
[13:37:06.097]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:06.097]                   0L) {
[13:37:06.097]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:06.097]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:06.097]                   base::options(opts)
[13:37:06.097]                 }
[13:37:06.097]                 {
[13:37:06.097]                   {
[13:37:06.097]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:06.097]                     NULL
[13:37:06.097]                   }
[13:37:06.097]                   options(future.plan = NULL)
[13:37:06.097]                   if (is.na(NA_character_)) 
[13:37:06.097]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:06.097]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:06.097]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:06.097]                     .init = FALSE)
[13:37:06.097]                 }
[13:37:06.097]             }
[13:37:06.097]         }
[13:37:06.097]     })
[13:37:06.097]     if (TRUE) {
[13:37:06.097]         base::sink(type = "output", split = FALSE)
[13:37:06.097]         if (TRUE) {
[13:37:06.097]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:06.097]         }
[13:37:06.097]         else {
[13:37:06.097]             ...future.result["stdout"] <- base::list(NULL)
[13:37:06.097]         }
[13:37:06.097]         base::close(...future.stdout)
[13:37:06.097]         ...future.stdout <- NULL
[13:37:06.097]     }
[13:37:06.097]     ...future.result$conditions <- ...future.conditions
[13:37:06.097]     ...future.result$finished <- base::Sys.time()
[13:37:06.097]     ...future.result
[13:37:06.097] }
[13:37:06.099] MultisessionFuture started
[13:37:06.099] - Launch lazy future ... done
[13:37:06.100] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[13:37:06.100] getGlobalsAndPackages() ...
[13:37:06.100] Searching for globals...
[13:37:06.101] - globals found: [3] ‘{’, ‘value’, ‘f1’
[13:37:06.101] Searching for globals ... DONE
[13:37:06.101] Resolving globals: FALSE
[13:37:06.103] The total size of the 1 globals is 1.56 MiB (1635600 bytes)
[13:37:06.103] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:37:06.104] - globals: [1] ‘f1’
[13:37:06.104] - packages: [1] ‘future’
[13:37:06.104] getGlobalsAndPackages() ... DONE
[13:37:06.104] run() for ‘Future’ ...
[13:37:06.104] - state: ‘created’
[13:37:06.104] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:06.114] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:06.115] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:06.115]   - Field: ‘node’
[13:37:06.115]   - Field: ‘label’
[13:37:06.115]   - Field: ‘local’
[13:37:06.115]   - Field: ‘owner’
[13:37:06.115]   - Field: ‘envir’
[13:37:06.115]   - Field: ‘workers’
[13:37:06.115]   - Field: ‘packages’
[13:37:06.115]   - Field: ‘gc’
[13:37:06.115]   - Field: ‘conditions’
[13:37:06.115]   - Field: ‘persistent’
[13:37:06.116]   - Field: ‘expr’
[13:37:06.116]   - Field: ‘uuid’
[13:37:06.116]   - Field: ‘seed’
[13:37:06.116]   - Field: ‘version’
[13:37:06.116]   - Field: ‘result’
[13:37:06.116]   - Field: ‘asynchronous’
[13:37:06.116]   - Field: ‘calls’
[13:37:06.116]   - Field: ‘globals’
[13:37:06.116]   - Field: ‘stdout’
[13:37:06.116]   - Field: ‘earlySignal’
[13:37:06.116]   - Field: ‘lazy’
[13:37:06.117]   - Field: ‘state’
[13:37:06.117] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:06.117] - Launch lazy future ...
[13:37:06.117] Packages needed by the future expression (n = 1): ‘future’
[13:37:06.117] Packages needed by future strategies (n = 0): <none>
[13:37:06.118] {
[13:37:06.118]     {
[13:37:06.118]         {
[13:37:06.118]             ...future.startTime <- base::Sys.time()
[13:37:06.118]             {
[13:37:06.118]                 {
[13:37:06.118]                   {
[13:37:06.118]                     {
[13:37:06.118]                       {
[13:37:06.118]                         base::local({
[13:37:06.118]                           has_future <- base::requireNamespace("future", 
[13:37:06.118]                             quietly = TRUE)
[13:37:06.118]                           if (has_future) {
[13:37:06.118]                             ns <- base::getNamespace("future")
[13:37:06.118]                             version <- ns[[".package"]][["version"]]
[13:37:06.118]                             if (is.null(version)) 
[13:37:06.118]                               version <- utils::packageVersion("future")
[13:37:06.118]                           }
[13:37:06.118]                           else {
[13:37:06.118]                             version <- NULL
[13:37:06.118]                           }
[13:37:06.118]                           if (!has_future || version < "1.8.0") {
[13:37:06.118]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:06.118]                               "", base::R.version$version.string), 
[13:37:06.118]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:06.118]                                 base::R.version$platform, 8 * 
[13:37:06.118]                                   base::.Machine$sizeof.pointer), 
[13:37:06.118]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:06.118]                                 "release", "version")], collapse = " "), 
[13:37:06.118]                               hostname = base::Sys.info()[["nodename"]])
[13:37:06.118]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:06.118]                               info)
[13:37:06.118]                             info <- base::paste(info, collapse = "; ")
[13:37:06.118]                             if (!has_future) {
[13:37:06.118]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:06.118]                                 info)
[13:37:06.118]                             }
[13:37:06.118]                             else {
[13:37:06.118]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:06.118]                                 info, version)
[13:37:06.118]                             }
[13:37:06.118]                             base::stop(msg)
[13:37:06.118]                           }
[13:37:06.118]                         })
[13:37:06.118]                       }
[13:37:06.118]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:06.118]                       base::options(mc.cores = 1L)
[13:37:06.118]                     }
[13:37:06.118]                     base::local({
[13:37:06.118]                       for (pkg in "future") {
[13:37:06.118]                         base::loadNamespace(pkg)
[13:37:06.118]                         base::library(pkg, character.only = TRUE)
[13:37:06.118]                       }
[13:37:06.118]                     })
[13:37:06.118]                   }
[13:37:06.118]                   ...future.strategy.old <- future::plan("list")
[13:37:06.118]                   options(future.plan = NULL)
[13:37:06.118]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:06.118]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:06.118]                 }
[13:37:06.118]                 ...future.workdir <- getwd()
[13:37:06.118]             }
[13:37:06.118]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:06.118]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:06.118]         }
[13:37:06.118]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:06.118]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:06.118]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:06.118]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:06.118]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:06.118]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:06.118]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:06.118]             base::names(...future.oldOptions))
[13:37:06.118]     }
[13:37:06.118]     if (FALSE) {
[13:37:06.118]     }
[13:37:06.118]     else {
[13:37:06.118]         if (TRUE) {
[13:37:06.118]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:06.118]                 open = "w")
[13:37:06.118]         }
[13:37:06.118]         else {
[13:37:06.118]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:06.118]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:06.118]         }
[13:37:06.118]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:06.118]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:06.118]             base::sink(type = "output", split = FALSE)
[13:37:06.118]             base::close(...future.stdout)
[13:37:06.118]         }, add = TRUE)
[13:37:06.118]     }
[13:37:06.118]     ...future.frame <- base::sys.nframe()
[13:37:06.118]     ...future.conditions <- base::list()
[13:37:06.118]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:06.118]     if (FALSE) {
[13:37:06.118]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:06.118]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:06.118]     }
[13:37:06.118]     ...future.result <- base::tryCatch({
[13:37:06.118]         base::withCallingHandlers({
[13:37:06.118]             ...future.value <- base::withVisible(base::local({
[13:37:06.118]                 ...future.makeSendCondition <- base::local({
[13:37:06.118]                   sendCondition <- NULL
[13:37:06.118]                   function(frame = 1L) {
[13:37:06.118]                     if (is.function(sendCondition)) 
[13:37:06.118]                       return(sendCondition)
[13:37:06.118]                     ns <- getNamespace("parallel")
[13:37:06.118]                     if (exists("sendData", mode = "function", 
[13:37:06.118]                       envir = ns)) {
[13:37:06.118]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:06.118]                         envir = ns)
[13:37:06.118]                       envir <- sys.frame(frame)
[13:37:06.118]                       master <- NULL
[13:37:06.118]                       while (!identical(envir, .GlobalEnv) && 
[13:37:06.118]                         !identical(envir, emptyenv())) {
[13:37:06.118]                         if (exists("master", mode = "list", envir = envir, 
[13:37:06.118]                           inherits = FALSE)) {
[13:37:06.118]                           master <- get("master", mode = "list", 
[13:37:06.118]                             envir = envir, inherits = FALSE)
[13:37:06.118]                           if (inherits(master, c("SOCKnode", 
[13:37:06.118]                             "SOCK0node"))) {
[13:37:06.118]                             sendCondition <<- function(cond) {
[13:37:06.118]                               data <- list(type = "VALUE", value = cond, 
[13:37:06.118]                                 success = TRUE)
[13:37:06.118]                               parallel_sendData(master, data)
[13:37:06.118]                             }
[13:37:06.118]                             return(sendCondition)
[13:37:06.118]                           }
[13:37:06.118]                         }
[13:37:06.118]                         frame <- frame + 1L
[13:37:06.118]                         envir <- sys.frame(frame)
[13:37:06.118]                       }
[13:37:06.118]                     }
[13:37:06.118]                     sendCondition <<- function(cond) NULL
[13:37:06.118]                   }
[13:37:06.118]                 })
[13:37:06.118]                 withCallingHandlers({
[13:37:06.118]                   {
[13:37:06.118]                     value(f1)
[13:37:06.118]                   }
[13:37:06.118]                 }, immediateCondition = function(cond) {
[13:37:06.118]                   sendCondition <- ...future.makeSendCondition()
[13:37:06.118]                   sendCondition(cond)
[13:37:06.118]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.118]                   {
[13:37:06.118]                     inherits <- base::inherits
[13:37:06.118]                     invokeRestart <- base::invokeRestart
[13:37:06.118]                     is.null <- base::is.null
[13:37:06.118]                     muffled <- FALSE
[13:37:06.118]                     if (inherits(cond, "message")) {
[13:37:06.118]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:06.118]                       if (muffled) 
[13:37:06.118]                         invokeRestart("muffleMessage")
[13:37:06.118]                     }
[13:37:06.118]                     else if (inherits(cond, "warning")) {
[13:37:06.118]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:06.118]                       if (muffled) 
[13:37:06.118]                         invokeRestart("muffleWarning")
[13:37:06.118]                     }
[13:37:06.118]                     else if (inherits(cond, "condition")) {
[13:37:06.118]                       if (!is.null(pattern)) {
[13:37:06.118]                         computeRestarts <- base::computeRestarts
[13:37:06.118]                         grepl <- base::grepl
[13:37:06.118]                         restarts <- computeRestarts(cond)
[13:37:06.118]                         for (restart in restarts) {
[13:37:06.118]                           name <- restart$name
[13:37:06.118]                           if (is.null(name)) 
[13:37:06.118]                             next
[13:37:06.118]                           if (!grepl(pattern, name)) 
[13:37:06.118]                             next
[13:37:06.118]                           invokeRestart(restart)
[13:37:06.118]                           muffled <- TRUE
[13:37:06.118]                           break
[13:37:06.118]                         }
[13:37:06.118]                       }
[13:37:06.118]                     }
[13:37:06.118]                     invisible(muffled)
[13:37:06.118]                   }
[13:37:06.118]                   muffleCondition(cond)
[13:37:06.118]                 })
[13:37:06.118]             }))
[13:37:06.118]             future::FutureResult(value = ...future.value$value, 
[13:37:06.118]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:06.118]                   ...future.rng), globalenv = if (FALSE) 
[13:37:06.118]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:06.118]                     ...future.globalenv.names))
[13:37:06.118]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:06.118]         }, condition = base::local({
[13:37:06.118]             c <- base::c
[13:37:06.118]             inherits <- base::inherits
[13:37:06.118]             invokeRestart <- base::invokeRestart
[13:37:06.118]             length <- base::length
[13:37:06.118]             list <- base::list
[13:37:06.118]             seq.int <- base::seq.int
[13:37:06.118]             signalCondition <- base::signalCondition
[13:37:06.118]             sys.calls <- base::sys.calls
[13:37:06.118]             `[[` <- base::`[[`
[13:37:06.118]             `+` <- base::`+`
[13:37:06.118]             `<<-` <- base::`<<-`
[13:37:06.118]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:06.118]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:06.118]                   3L)]
[13:37:06.118]             }
[13:37:06.118]             function(cond) {
[13:37:06.118]                 is_error <- inherits(cond, "error")
[13:37:06.118]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:06.118]                   NULL)
[13:37:06.118]                 if (is_error) {
[13:37:06.118]                   sessionInformation <- function() {
[13:37:06.118]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:06.118]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:06.118]                       search = base::search(), system = base::Sys.info())
[13:37:06.118]                   }
[13:37:06.118]                   ...future.conditions[[length(...future.conditions) + 
[13:37:06.118]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:06.118]                     cond$call), session = sessionInformation(), 
[13:37:06.118]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:06.118]                   signalCondition(cond)
[13:37:06.118]                 }
[13:37:06.118]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:06.118]                 "immediateCondition"))) {
[13:37:06.118]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:06.118]                   ...future.conditions[[length(...future.conditions) + 
[13:37:06.118]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:06.118]                   if (TRUE && !signal) {
[13:37:06.118]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.118]                     {
[13:37:06.118]                       inherits <- base::inherits
[13:37:06.118]                       invokeRestart <- base::invokeRestart
[13:37:06.118]                       is.null <- base::is.null
[13:37:06.118]                       muffled <- FALSE
[13:37:06.118]                       if (inherits(cond, "message")) {
[13:37:06.118]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:06.118]                         if (muffled) 
[13:37:06.118]                           invokeRestart("muffleMessage")
[13:37:06.118]                       }
[13:37:06.118]                       else if (inherits(cond, "warning")) {
[13:37:06.118]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:06.118]                         if (muffled) 
[13:37:06.118]                           invokeRestart("muffleWarning")
[13:37:06.118]                       }
[13:37:06.118]                       else if (inherits(cond, "condition")) {
[13:37:06.118]                         if (!is.null(pattern)) {
[13:37:06.118]                           computeRestarts <- base::computeRestarts
[13:37:06.118]                           grepl <- base::grepl
[13:37:06.118]                           restarts <- computeRestarts(cond)
[13:37:06.118]                           for (restart in restarts) {
[13:37:06.118]                             name <- restart$name
[13:37:06.118]                             if (is.null(name)) 
[13:37:06.118]                               next
[13:37:06.118]                             if (!grepl(pattern, name)) 
[13:37:06.118]                               next
[13:37:06.118]                             invokeRestart(restart)
[13:37:06.118]                             muffled <- TRUE
[13:37:06.118]                             break
[13:37:06.118]                           }
[13:37:06.118]                         }
[13:37:06.118]                       }
[13:37:06.118]                       invisible(muffled)
[13:37:06.118]                     }
[13:37:06.118]                     muffleCondition(cond, pattern = "^muffle")
[13:37:06.118]                   }
[13:37:06.118]                 }
[13:37:06.118]                 else {
[13:37:06.118]                   if (TRUE) {
[13:37:06.118]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:06.118]                     {
[13:37:06.118]                       inherits <- base::inherits
[13:37:06.118]                       invokeRestart <- base::invokeRestart
[13:37:06.118]                       is.null <- base::is.null
[13:37:06.118]                       muffled <- FALSE
[13:37:06.118]                       if (inherits(cond, "message")) {
[13:37:06.118]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:06.118]                         if (muffled) 
[13:37:06.118]                           invokeRestart("muffleMessage")
[13:37:06.118]                       }
[13:37:06.118]                       else if (inherits(cond, "warning")) {
[13:37:06.118]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:06.118]                         if (muffled) 
[13:37:06.118]                           invokeRestart("muffleWarning")
[13:37:06.118]                       }
[13:37:06.118]                       else if (inherits(cond, "condition")) {
[13:37:06.118]                         if (!is.null(pattern)) {
[13:37:06.118]                           computeRestarts <- base::computeRestarts
[13:37:06.118]                           grepl <- base::grepl
[13:37:06.118]                           restarts <- computeRestarts(cond)
[13:37:06.118]                           for (restart in restarts) {
[13:37:06.118]                             name <- restart$name
[13:37:06.118]                             if (is.null(name)) 
[13:37:06.118]                               next
[13:37:06.118]                             if (!grepl(pattern, name)) 
[13:37:06.118]                               next
[13:37:06.118]                             invokeRestart(restart)
[13:37:06.118]                             muffled <- TRUE
[13:37:06.118]                             break
[13:37:06.118]                           }
[13:37:06.118]                         }
[13:37:06.118]                       }
[13:37:06.118]                       invisible(muffled)
[13:37:06.118]                     }
[13:37:06.118]                     muffleCondition(cond, pattern = "^muffle")
[13:37:06.118]                   }
[13:37:06.118]                 }
[13:37:06.118]             }
[13:37:06.118]         }))
[13:37:06.118]     }, error = function(ex) {
[13:37:06.118]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:06.118]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:06.118]                 ...future.rng), started = ...future.startTime, 
[13:37:06.118]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:06.118]             version = "1.8"), class = "FutureResult")
[13:37:06.118]     }, finally = {
[13:37:06.118]         if (!identical(...future.workdir, getwd())) 
[13:37:06.118]             setwd(...future.workdir)
[13:37:06.118]         {
[13:37:06.118]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:06.118]                 ...future.oldOptions$nwarnings <- NULL
[13:37:06.118]             }
[13:37:06.118]             base::options(...future.oldOptions)
[13:37:06.118]             if (.Platform$OS.type == "windows") {
[13:37:06.118]                 old_names <- names(...future.oldEnvVars)
[13:37:06.118]                 envs <- base::Sys.getenv()
[13:37:06.118]                 names <- names(envs)
[13:37:06.118]                 common <- intersect(names, old_names)
[13:37:06.118]                 added <- setdiff(names, old_names)
[13:37:06.118]                 removed <- setdiff(old_names, names)
[13:37:06.118]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:06.118]                   envs[common]]
[13:37:06.118]                 NAMES <- toupper(changed)
[13:37:06.118]                 args <- list()
[13:37:06.118]                 for (kk in seq_along(NAMES)) {
[13:37:06.118]                   name <- changed[[kk]]
[13:37:06.118]                   NAME <- NAMES[[kk]]
[13:37:06.118]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.118]                     next
[13:37:06.118]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:06.118]                 }
[13:37:06.118]                 NAMES <- toupper(added)
[13:37:06.118]                 for (kk in seq_along(NAMES)) {
[13:37:06.118]                   name <- added[[kk]]
[13:37:06.118]                   NAME <- NAMES[[kk]]
[13:37:06.118]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.118]                     next
[13:37:06.118]                   args[[name]] <- ""
[13:37:06.118]                 }
[13:37:06.118]                 NAMES <- toupper(removed)
[13:37:06.118]                 for (kk in seq_along(NAMES)) {
[13:37:06.118]                   name <- removed[[kk]]
[13:37:06.118]                   NAME <- NAMES[[kk]]
[13:37:06.118]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:06.118]                     next
[13:37:06.118]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:06.118]                 }
[13:37:06.118]                 if (length(args) > 0) 
[13:37:06.118]                   base::do.call(base::Sys.setenv, args = args)
[13:37:06.118]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:06.118]             }
[13:37:06.118]             else {
[13:37:06.118]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:06.118]             }
[13:37:06.118]             {
[13:37:06.118]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:06.118]                   0L) {
[13:37:06.118]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:06.118]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:06.118]                   base::options(opts)
[13:37:06.118]                 }
[13:37:06.118]                 {
[13:37:06.118]                   {
[13:37:06.118]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:06.118]                     NULL
[13:37:06.118]                   }
[13:37:06.118]                   options(future.plan = NULL)
[13:37:06.118]                   if (is.na(NA_character_)) 
[13:37:06.118]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:06.118]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:06.118]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:06.118]                     .init = FALSE)
[13:37:06.118]                 }
[13:37:06.118]             }
[13:37:06.118]         }
[13:37:06.118]     })
[13:37:06.118]     if (TRUE) {
[13:37:06.118]         base::sink(type = "output", split = FALSE)
[13:37:06.118]         if (TRUE) {
[13:37:06.118]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:06.118]         }
[13:37:06.118]         else {
[13:37:06.118]             ...future.result["stdout"] <- base::list(NULL)
[13:37:06.118]         }
[13:37:06.118]         base::close(...future.stdout)
[13:37:06.118]         ...future.stdout <- NULL
[13:37:06.118]     }
[13:37:06.118]     ...future.result$conditions <- ...future.conditions
[13:37:06.118]     ...future.result$finished <- base::Sys.time()
[13:37:06.118]     ...future.result
[13:37:06.118] }
[13:37:06.171] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[13:37:06.173] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[13:37:06.227] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[13:37:06.227] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[13:37:06.227] MultisessionFuture started
[13:37:06.228] - Launch lazy future ... done
[13:37:06.228] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 522583be-85ec-ddaf-5357-ae528484b6c8
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[13:37:06.245] result() for ClusterFuture ...
[13:37:06.245] receiveMessageFromWorker() for ClusterFuture ...
[13:37:06.245] - Validating connection of MultisessionFuture
[13:37:06.323] - received message: FutureResult
[13:37:06.324] - Received FutureResult
[13:37:06.324] - Erased future from FutureRegistry
[13:37:06.324] result() for ClusterFuture ...
[13:37:06.324] - result already collected: FutureResult
[13:37:06.324] result() for ClusterFuture ... done
[13:37:06.324] signalConditions() ...
[13:37:06.324]  - include = ‘immediateCondition’
[13:37:06.324]  - exclude = 
[13:37:06.324]  - resignal = FALSE
[13:37:06.325]  - Number of conditions: 1
[13:37:06.325] signalConditions() ... done
[13:37:06.325] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:06.325] result() for ClusterFuture ... done
[13:37:06.325] result() for ClusterFuture ...
[13:37:06.325] - result already collected: FutureResult
[13:37:06.325] result() for ClusterFuture ... done
[13:37:06.325] signalConditions() ...
[13:37:06.325]  - include = ‘immediateCondition’
[13:37:06.325]  - exclude = 
[13:37:06.325]  - resignal = FALSE
[13:37:06.325]  - Number of conditions: 1
[13:37:06.326] signalConditions() ... done
[13:37:06.326] Future state: ‘finished’
[13:37:06.326] result() for ClusterFuture ...
[13:37:06.326] - result already collected: FutureResult
[13:37:06.326] result() for ClusterFuture ... done
[13:37:06.326] signalConditions() ...
[13:37:06.326]  - include = ‘condition’
[13:37:06.326]  - exclude = ‘immediateCondition’
[13:37:06.326]  - resignal = TRUE
[13:37:06.326]  - Number of conditions: 1
[13:37:06.327]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[13:37:06.327] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (522583be-85ec-ddaf-5357-ae528484b6c8; pid 85700 on 57e9b94e809f) that created it, not by any other R processes (324ef278-15ac-394d-edf8-a2c190ef7007; pid 85753 on 57e9b94e809f): {; 42L; }>


Future UUID: de655f52-e771-f59b-a919-baac3125efa3


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 522583be-85ec-ddaf-5357-ae528484b6c8
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[13:37:06.328] result() for ClusterFuture ...
[13:37:06.328] receiveMessageFromWorker() for ClusterFuture ...
[13:37:06.328] - Validating connection of MultisessionFuture
[13:37:06.328] - received message: FutureResult
[13:37:06.328] - Received FutureResult
[13:37:06.328] - Erased future from FutureRegistry
[13:37:06.328] result() for ClusterFuture ...
[13:37:06.328] - result already collected: FutureResult
[13:37:06.329] result() for ClusterFuture ... done
[13:37:06.329] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:06.329] result() for ClusterFuture ... done
[13:37:06.329] result() for ClusterFuture ...
[13:37:06.329] - result already collected: FutureResult
[13:37:06.329] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[13:37:06.330] plan(): Setting new future strategy stack:
[13:37:06.330] List of future strategies:
[13:37:06.330] 1. FutureStrategy:
[13:37:06.330]    - args: function (..., envir = parent.frame())
[13:37:06.330]    - tweaked: FALSE
[13:37:06.330]    - call: future::plan(oplan)
[13:37:06.331] plan(): nbrOfWorkers() = 1
> 
