
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:33:21.249] plan(): Setting new future strategy stack:
[10:33:21.249] List of future strategies:
[10:33:21.249] 1. sequential:
[10:33:21.249]    - args: function (..., envir = parent.frame())
[10:33:21.249]    - tweaked: FALSE
[10:33:21.249]    - call: future::plan("sequential")
[10:33:21.263] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[10:33:21.276] plan(): Setting new future strategy stack:
[10:33:21.277] List of future strategies:
[10:33:21.277] 1. multisession:
[10:33:21.277]    - args: function (..., workers = 2L, envir = parent.frame())
[10:33:21.277]    - tweaked: TRUE
[10:33:21.277]    - call: plan(multisession, workers = 2L)
[10:33:21.287] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:33:21.288] multisession:
[10:33:21.288] - args: function (..., workers = 2L, envir = parent.frame())
[10:33:21.288] - tweaked: TRUE
[10:33:21.288] - call: plan(multisession, workers = 2L)
[10:33:21.289] getGlobalsAndPackages() ...
[10:33:21.289] Not searching for globals
[10:33:21.290] - globals: [0] <none>
[10:33:21.290] getGlobalsAndPackages() ... DONE
[10:33:21.290] [local output] makeClusterPSOCK() ...
[10:33:21.323] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:33:21.324] [local output] Base port: 11464
[10:33:21.324] [local output] Getting setup options for 2 cluster nodes ...
[10:33:21.324] [local output]  - Node 1 of 2 ...
[10:33:21.325] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:21.325] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphRGZ1V/worker.rank=1.parallelly.parent=84862.14b7e46615fb7.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmphRGZ1V/worker.rank=1.parallelly.parent=84862.14b7e46615fb7.pid")'’
[10:33:21.514] - Possible to infer worker's PID: TRUE
[10:33:21.514] [local output] Rscript port: 11464

[10:33:21.514] [local output]  - Node 2 of 2 ...
[10:33:21.515] [local output] localMachine=TRUE => revtunnel=FALSE

[10:33:21.515] [local output] Rscript port: 11464

[10:33:21.516] [local output] Getting setup options for 2 cluster nodes ... done
[10:33:21.516] [local output]  - Parallel setup requested for some PSOCK nodes
[10:33:21.516] [local output] Setting up PSOCK nodes in parallel
[10:33:21.516] List of 36
[10:33:21.516]  $ worker          : chr "localhost"
[10:33:21.516]   ..- attr(*, "localhost")= logi TRUE
[10:33:21.516]  $ master          : chr "localhost"
[10:33:21.516]  $ port            : int 11464
[10:33:21.516]  $ connectTimeout  : num 120
[10:33:21.516]  $ timeout         : num 2592000
[10:33:21.516]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:33:21.516]  $ homogeneous     : logi TRUE
[10:33:21.516]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:33:21.516]  $ rscript_envs    : NULL
[10:33:21.516]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:21.516]  $ rscript_startup : NULL
[10:33:21.516]  $ rscript_sh      : chr "sh"
[10:33:21.516]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:21.516]  $ methods         : logi TRUE
[10:33:21.516]  $ socketOptions   : chr "no-delay"
[10:33:21.516]  $ useXDR          : logi FALSE
[10:33:21.516]  $ outfile         : chr "/dev/null"
[10:33:21.516]  $ renice          : int NA
[10:33:21.516]  $ rshcmd          : NULL
[10:33:21.516]  $ user            : chr(0) 
[10:33:21.516]  $ revtunnel       : logi FALSE
[10:33:21.516]  $ rshlogfile      : NULL
[10:33:21.516]  $ rshopts         : chr(0) 
[10:33:21.516]  $ rank            : int 1
[10:33:21.516]  $ manual          : logi FALSE
[10:33:21.516]  $ dryrun          : logi FALSE
[10:33:21.516]  $ quiet           : logi FALSE
[10:33:21.516]  $ setup_strategy  : chr "parallel"
[10:33:21.516]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:21.516]  $ pidfile         : chr "/tmp/RtmphRGZ1V/worker.rank=1.parallelly.parent=84862.14b7e46615fb7.pid"
[10:33:21.516]  $ rshcmd_label    : NULL
[10:33:21.516]  $ rsh_call        : NULL
[10:33:21.516]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:33:21.516]  $ localMachine    : logi TRUE
[10:33:21.516]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:33:21.516]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:33:21.516]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:33:21.516]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:33:21.516]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:33:21.516]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:33:21.516]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:33:21.516]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:33:21.516]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:33:21.516]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:33:21.516]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:33:21.516]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:33:21.516]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:33:21.516]  $ arguments       :List of 28
[10:33:21.516]   ..$ worker          : chr "localhost"
[10:33:21.516]   ..$ master          : NULL
[10:33:21.516]   ..$ port            : int 11464
[10:33:21.516]   ..$ connectTimeout  : num 120
[10:33:21.516]   ..$ timeout         : num 2592000
[10:33:21.516]   ..$ rscript         : NULL
[10:33:21.516]   ..$ homogeneous     : NULL
[10:33:21.516]   ..$ rscript_args    : NULL
[10:33:21.516]   ..$ rscript_envs    : NULL
[10:33:21.516]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:33:21.516]   ..$ rscript_startup : NULL
[10:33:21.516]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:33:21.516]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:33:21.516]   ..$ methods         : logi TRUE
[10:33:21.516]   ..$ socketOptions   : chr "no-delay"
[10:33:21.516]   ..$ useXDR          : logi FALSE
[10:33:21.516]   ..$ outfile         : chr "/dev/null"
[10:33:21.516]   ..$ renice          : int NA
[10:33:21.516]   ..$ rshcmd          : NULL
[10:33:21.516]   ..$ user            : NULL
[10:33:21.516]   ..$ revtunnel       : logi NA
[10:33:21.516]   ..$ rshlogfile      : NULL
[10:33:21.516]   ..$ rshopts         : NULL
[10:33:21.516]   ..$ rank            : int 1
[10:33:21.516]   ..$ manual          : logi FALSE
[10:33:21.516]   ..$ dryrun          : logi FALSE
[10:33:21.516]   ..$ quiet           : logi FALSE
[10:33:21.516]   ..$ setup_strategy  : chr "parallel"
[10:33:21.516]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:33:21.535] [local output] System call to launch all workers:
[10:33:21.535] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmphRGZ1V/worker.rank=1.parallelly.parent=84862.14b7e46615fb7.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11464 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:33:21.535] [local output] Starting PSOCK main server
[10:33:21.541] [local output] Workers launched
[10:33:21.541] [local output] Waiting for workers to connect back
[10:33:21.542]  - [local output] 0 workers out of 2 ready
[10:33:21.785]  - [local output] 0 workers out of 2 ready
[10:33:21.785]  - [local output] 1 workers out of 2 ready
[10:33:21.791]  - [local output] 1 workers out of 2 ready
[10:33:21.792]  - [local output] 2 workers out of 2 ready
[10:33:21.792] [local output] Launching of workers completed
[10:33:21.792] [local output] Collecting session information from workers
[10:33:21.793] [local output]  - Worker #1 of 2
[10:33:21.794] [local output]  - Worker #2 of 2
[10:33:21.794] [local output] makeClusterPSOCK() ... done
[10:33:21.807] Packages needed by the future expression (n = 0): <none>
[10:33:21.807] Packages needed by future strategies (n = 0): <none>
[10:33:21.808] {
[10:33:21.808]     {
[10:33:21.808]         {
[10:33:21.808]             ...future.startTime <- base::Sys.time()
[10:33:21.808]             {
[10:33:21.808]                 {
[10:33:21.808]                   {
[10:33:21.808]                     {
[10:33:21.808]                       base::local({
[10:33:21.808]                         has_future <- base::requireNamespace("future", 
[10:33:21.808]                           quietly = TRUE)
[10:33:21.808]                         if (has_future) {
[10:33:21.808]                           ns <- base::getNamespace("future")
[10:33:21.808]                           version <- ns[[".package"]][["version"]]
[10:33:21.808]                           if (is.null(version)) 
[10:33:21.808]                             version <- utils::packageVersion("future")
[10:33:21.808]                         }
[10:33:21.808]                         else {
[10:33:21.808]                           version <- NULL
[10:33:21.808]                         }
[10:33:21.808]                         if (!has_future || version < "1.8.0") {
[10:33:21.808]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:21.808]                             "", base::R.version$version.string), 
[10:33:21.808]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:21.808]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:21.808]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:21.808]                               "release", "version")], collapse = " "), 
[10:33:21.808]                             hostname = base::Sys.info()[["nodename"]])
[10:33:21.808]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:21.808]                             info)
[10:33:21.808]                           info <- base::paste(info, collapse = "; ")
[10:33:21.808]                           if (!has_future) {
[10:33:21.808]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:21.808]                               info)
[10:33:21.808]                           }
[10:33:21.808]                           else {
[10:33:21.808]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:21.808]                               info, version)
[10:33:21.808]                           }
[10:33:21.808]                           base::stop(msg)
[10:33:21.808]                         }
[10:33:21.808]                       })
[10:33:21.808]                     }
[10:33:21.808]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:21.808]                     base::options(mc.cores = 1L)
[10:33:21.808]                   }
[10:33:21.808]                   ...future.strategy.old <- future::plan("list")
[10:33:21.808]                   options(future.plan = NULL)
[10:33:21.808]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.808]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:21.808]                 }
[10:33:21.808]                 ...future.workdir <- getwd()
[10:33:21.808]             }
[10:33:21.808]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:21.808]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:21.808]         }
[10:33:21.808]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:21.808]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:21.808]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:21.808]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:21.808]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:21.808]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:21.808]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:21.808]             base::names(...future.oldOptions))
[10:33:21.808]     }
[10:33:21.808]     if (FALSE) {
[10:33:21.808]     }
[10:33:21.808]     else {
[10:33:21.808]         if (TRUE) {
[10:33:21.808]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:21.808]                 open = "w")
[10:33:21.808]         }
[10:33:21.808]         else {
[10:33:21.808]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:21.808]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:21.808]         }
[10:33:21.808]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:21.808]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:21.808]             base::sink(type = "output", split = FALSE)
[10:33:21.808]             base::close(...future.stdout)
[10:33:21.808]         }, add = TRUE)
[10:33:21.808]     }
[10:33:21.808]     ...future.frame <- base::sys.nframe()
[10:33:21.808]     ...future.conditions <- base::list()
[10:33:21.808]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:21.808]     if (FALSE) {
[10:33:21.808]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:21.808]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:21.808]     }
[10:33:21.808]     ...future.result <- base::tryCatch({
[10:33:21.808]         base::withCallingHandlers({
[10:33:21.808]             ...future.value <- base::withVisible(base::local({
[10:33:21.808]                 ...future.makeSendCondition <- base::local({
[10:33:21.808]                   sendCondition <- NULL
[10:33:21.808]                   function(frame = 1L) {
[10:33:21.808]                     if (is.function(sendCondition)) 
[10:33:21.808]                       return(sendCondition)
[10:33:21.808]                     ns <- getNamespace("parallel")
[10:33:21.808]                     if (exists("sendData", mode = "function", 
[10:33:21.808]                       envir = ns)) {
[10:33:21.808]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:21.808]                         envir = ns)
[10:33:21.808]                       envir <- sys.frame(frame)
[10:33:21.808]                       master <- NULL
[10:33:21.808]                       while (!identical(envir, .GlobalEnv) && 
[10:33:21.808]                         !identical(envir, emptyenv())) {
[10:33:21.808]                         if (exists("master", mode = "list", envir = envir, 
[10:33:21.808]                           inherits = FALSE)) {
[10:33:21.808]                           master <- get("master", mode = "list", 
[10:33:21.808]                             envir = envir, inherits = FALSE)
[10:33:21.808]                           if (inherits(master, c("SOCKnode", 
[10:33:21.808]                             "SOCK0node"))) {
[10:33:21.808]                             sendCondition <<- function(cond) {
[10:33:21.808]                               data <- list(type = "VALUE", value = cond, 
[10:33:21.808]                                 success = TRUE)
[10:33:21.808]                               parallel_sendData(master, data)
[10:33:21.808]                             }
[10:33:21.808]                             return(sendCondition)
[10:33:21.808]                           }
[10:33:21.808]                         }
[10:33:21.808]                         frame <- frame + 1L
[10:33:21.808]                         envir <- sys.frame(frame)
[10:33:21.808]                       }
[10:33:21.808]                     }
[10:33:21.808]                     sendCondition <<- function(cond) NULL
[10:33:21.808]                   }
[10:33:21.808]                 })
[10:33:21.808]                 withCallingHandlers({
[10:33:21.808]                   NA
[10:33:21.808]                 }, immediateCondition = function(cond) {
[10:33:21.808]                   sendCondition <- ...future.makeSendCondition()
[10:33:21.808]                   sendCondition(cond)
[10:33:21.808]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.808]                   {
[10:33:21.808]                     inherits <- base::inherits
[10:33:21.808]                     invokeRestart <- base::invokeRestart
[10:33:21.808]                     is.null <- base::is.null
[10:33:21.808]                     muffled <- FALSE
[10:33:21.808]                     if (inherits(cond, "message")) {
[10:33:21.808]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:21.808]                       if (muffled) 
[10:33:21.808]                         invokeRestart("muffleMessage")
[10:33:21.808]                     }
[10:33:21.808]                     else if (inherits(cond, "warning")) {
[10:33:21.808]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:21.808]                       if (muffled) 
[10:33:21.808]                         invokeRestart("muffleWarning")
[10:33:21.808]                     }
[10:33:21.808]                     else if (inherits(cond, "condition")) {
[10:33:21.808]                       if (!is.null(pattern)) {
[10:33:21.808]                         computeRestarts <- base::computeRestarts
[10:33:21.808]                         grepl <- base::grepl
[10:33:21.808]                         restarts <- computeRestarts(cond)
[10:33:21.808]                         for (restart in restarts) {
[10:33:21.808]                           name <- restart$name
[10:33:21.808]                           if (is.null(name)) 
[10:33:21.808]                             next
[10:33:21.808]                           if (!grepl(pattern, name)) 
[10:33:21.808]                             next
[10:33:21.808]                           invokeRestart(restart)
[10:33:21.808]                           muffled <- TRUE
[10:33:21.808]                           break
[10:33:21.808]                         }
[10:33:21.808]                       }
[10:33:21.808]                     }
[10:33:21.808]                     invisible(muffled)
[10:33:21.808]                   }
[10:33:21.808]                   muffleCondition(cond)
[10:33:21.808]                 })
[10:33:21.808]             }))
[10:33:21.808]             future::FutureResult(value = ...future.value$value, 
[10:33:21.808]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.808]                   ...future.rng), globalenv = if (FALSE) 
[10:33:21.808]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:21.808]                     ...future.globalenv.names))
[10:33:21.808]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:21.808]         }, condition = base::local({
[10:33:21.808]             c <- base::c
[10:33:21.808]             inherits <- base::inherits
[10:33:21.808]             invokeRestart <- base::invokeRestart
[10:33:21.808]             length <- base::length
[10:33:21.808]             list <- base::list
[10:33:21.808]             seq.int <- base::seq.int
[10:33:21.808]             signalCondition <- base::signalCondition
[10:33:21.808]             sys.calls <- base::sys.calls
[10:33:21.808]             `[[` <- base::`[[`
[10:33:21.808]             `+` <- base::`+`
[10:33:21.808]             `<<-` <- base::`<<-`
[10:33:21.808]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:21.808]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:21.808]                   3L)]
[10:33:21.808]             }
[10:33:21.808]             function(cond) {
[10:33:21.808]                 is_error <- inherits(cond, "error")
[10:33:21.808]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:21.808]                   NULL)
[10:33:21.808]                 if (is_error) {
[10:33:21.808]                   sessionInformation <- function() {
[10:33:21.808]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:21.808]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:21.808]                       search = base::search(), system = base::Sys.info())
[10:33:21.808]                   }
[10:33:21.808]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.808]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:21.808]                     cond$call), session = sessionInformation(), 
[10:33:21.808]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:21.808]                   signalCondition(cond)
[10:33:21.808]                 }
[10:33:21.808]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:21.808]                 "immediateCondition"))) {
[10:33:21.808]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:21.808]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.808]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:21.808]                   if (TRUE && !signal) {
[10:33:21.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.808]                     {
[10:33:21.808]                       inherits <- base::inherits
[10:33:21.808]                       invokeRestart <- base::invokeRestart
[10:33:21.808]                       is.null <- base::is.null
[10:33:21.808]                       muffled <- FALSE
[10:33:21.808]                       if (inherits(cond, "message")) {
[10:33:21.808]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.808]                         if (muffled) 
[10:33:21.808]                           invokeRestart("muffleMessage")
[10:33:21.808]                       }
[10:33:21.808]                       else if (inherits(cond, "warning")) {
[10:33:21.808]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.808]                         if (muffled) 
[10:33:21.808]                           invokeRestart("muffleWarning")
[10:33:21.808]                       }
[10:33:21.808]                       else if (inherits(cond, "condition")) {
[10:33:21.808]                         if (!is.null(pattern)) {
[10:33:21.808]                           computeRestarts <- base::computeRestarts
[10:33:21.808]                           grepl <- base::grepl
[10:33:21.808]                           restarts <- computeRestarts(cond)
[10:33:21.808]                           for (restart in restarts) {
[10:33:21.808]                             name <- restart$name
[10:33:21.808]                             if (is.null(name)) 
[10:33:21.808]                               next
[10:33:21.808]                             if (!grepl(pattern, name)) 
[10:33:21.808]                               next
[10:33:21.808]                             invokeRestart(restart)
[10:33:21.808]                             muffled <- TRUE
[10:33:21.808]                             break
[10:33:21.808]                           }
[10:33:21.808]                         }
[10:33:21.808]                       }
[10:33:21.808]                       invisible(muffled)
[10:33:21.808]                     }
[10:33:21.808]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.808]                   }
[10:33:21.808]                 }
[10:33:21.808]                 else {
[10:33:21.808]                   if (TRUE) {
[10:33:21.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.808]                     {
[10:33:21.808]                       inherits <- base::inherits
[10:33:21.808]                       invokeRestart <- base::invokeRestart
[10:33:21.808]                       is.null <- base::is.null
[10:33:21.808]                       muffled <- FALSE
[10:33:21.808]                       if (inherits(cond, "message")) {
[10:33:21.808]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.808]                         if (muffled) 
[10:33:21.808]                           invokeRestart("muffleMessage")
[10:33:21.808]                       }
[10:33:21.808]                       else if (inherits(cond, "warning")) {
[10:33:21.808]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.808]                         if (muffled) 
[10:33:21.808]                           invokeRestart("muffleWarning")
[10:33:21.808]                       }
[10:33:21.808]                       else if (inherits(cond, "condition")) {
[10:33:21.808]                         if (!is.null(pattern)) {
[10:33:21.808]                           computeRestarts <- base::computeRestarts
[10:33:21.808]                           grepl <- base::grepl
[10:33:21.808]                           restarts <- computeRestarts(cond)
[10:33:21.808]                           for (restart in restarts) {
[10:33:21.808]                             name <- restart$name
[10:33:21.808]                             if (is.null(name)) 
[10:33:21.808]                               next
[10:33:21.808]                             if (!grepl(pattern, name)) 
[10:33:21.808]                               next
[10:33:21.808]                             invokeRestart(restart)
[10:33:21.808]                             muffled <- TRUE
[10:33:21.808]                             break
[10:33:21.808]                           }
[10:33:21.808]                         }
[10:33:21.808]                       }
[10:33:21.808]                       invisible(muffled)
[10:33:21.808]                     }
[10:33:21.808]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.808]                   }
[10:33:21.808]                 }
[10:33:21.808]             }
[10:33:21.808]         }))
[10:33:21.808]     }, error = function(ex) {
[10:33:21.808]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:21.808]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.808]                 ...future.rng), started = ...future.startTime, 
[10:33:21.808]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:21.808]             version = "1.8"), class = "FutureResult")
[10:33:21.808]     }, finally = {
[10:33:21.808]         if (!identical(...future.workdir, getwd())) 
[10:33:21.808]             setwd(...future.workdir)
[10:33:21.808]         {
[10:33:21.808]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:21.808]                 ...future.oldOptions$nwarnings <- NULL
[10:33:21.808]             }
[10:33:21.808]             base::options(...future.oldOptions)
[10:33:21.808]             if (.Platform$OS.type == "windows") {
[10:33:21.808]                 old_names <- names(...future.oldEnvVars)
[10:33:21.808]                 envs <- base::Sys.getenv()
[10:33:21.808]                 names <- names(envs)
[10:33:21.808]                 common <- intersect(names, old_names)
[10:33:21.808]                 added <- setdiff(names, old_names)
[10:33:21.808]                 removed <- setdiff(old_names, names)
[10:33:21.808]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:21.808]                   envs[common]]
[10:33:21.808]                 NAMES <- toupper(changed)
[10:33:21.808]                 args <- list()
[10:33:21.808]                 for (kk in seq_along(NAMES)) {
[10:33:21.808]                   name <- changed[[kk]]
[10:33:21.808]                   NAME <- NAMES[[kk]]
[10:33:21.808]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.808]                     next
[10:33:21.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.808]                 }
[10:33:21.808]                 NAMES <- toupper(added)
[10:33:21.808]                 for (kk in seq_along(NAMES)) {
[10:33:21.808]                   name <- added[[kk]]
[10:33:21.808]                   NAME <- NAMES[[kk]]
[10:33:21.808]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.808]                     next
[10:33:21.808]                   args[[name]] <- ""
[10:33:21.808]                 }
[10:33:21.808]                 NAMES <- toupper(removed)
[10:33:21.808]                 for (kk in seq_along(NAMES)) {
[10:33:21.808]                   name <- removed[[kk]]
[10:33:21.808]                   NAME <- NAMES[[kk]]
[10:33:21.808]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.808]                     next
[10:33:21.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.808]                 }
[10:33:21.808]                 if (length(args) > 0) 
[10:33:21.808]                   base::do.call(base::Sys.setenv, args = args)
[10:33:21.808]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:21.808]             }
[10:33:21.808]             else {
[10:33:21.808]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:21.808]             }
[10:33:21.808]             {
[10:33:21.808]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:21.808]                   0L) {
[10:33:21.808]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:21.808]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:21.808]                   base::options(opts)
[10:33:21.808]                 }
[10:33:21.808]                 {
[10:33:21.808]                   {
[10:33:21.808]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:21.808]                     NULL
[10:33:21.808]                   }
[10:33:21.808]                   options(future.plan = NULL)
[10:33:21.808]                   if (is.na(NA_character_)) 
[10:33:21.808]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.808]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:21.808]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:21.808]                     .init = FALSE)
[10:33:21.808]                 }
[10:33:21.808]             }
[10:33:21.808]         }
[10:33:21.808]     })
[10:33:21.808]     if (TRUE) {
[10:33:21.808]         base::sink(type = "output", split = FALSE)
[10:33:21.808]         if (TRUE) {
[10:33:21.808]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:21.808]         }
[10:33:21.808]         else {
[10:33:21.808]             ...future.result["stdout"] <- base::list(NULL)
[10:33:21.808]         }
[10:33:21.808]         base::close(...future.stdout)
[10:33:21.808]         ...future.stdout <- NULL
[10:33:21.808]     }
[10:33:21.808]     ...future.result$conditions <- ...future.conditions
[10:33:21.808]     ...future.result$finished <- base::Sys.time()
[10:33:21.808]     ...future.result
[10:33:21.808] }
[10:33:21.869] MultisessionFuture started
[10:33:21.869] result() for ClusterFuture ...
[10:33:21.870] receiveMessageFromWorker() for ClusterFuture ...
[10:33:21.870] - Validating connection of MultisessionFuture
[10:33:21.905] - received message: FutureResult
[10:33:21.906] - Received FutureResult
[10:33:21.908] - Erased future from FutureRegistry
[10:33:21.909] result() for ClusterFuture ...
[10:33:21.909] - result already collected: FutureResult
[10:33:21.909] result() for ClusterFuture ... done
[10:33:21.909] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:21.909] result() for ClusterFuture ... done
[10:33:21.909] result() for ClusterFuture ...
[10:33:21.910] - result already collected: FutureResult
[10:33:21.910] result() for ClusterFuture ... done
[10:33:21.910] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:33:21.910] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 0f4531d3-011c-b377-6e01-51eb2087ff5b
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[10:33:21.911] getGlobalsAndPackages() ...
[10:33:21.911] Searching for globals...
[10:33:21.919] - globals found: [2] ‘{’, ‘:::’
[10:33:21.919] Searching for globals ... DONE
[10:33:21.919] Resolving globals: FALSE
[10:33:21.920] 
[10:33:21.920] 
[10:33:21.920] getGlobalsAndPackages() ... DONE
[10:33:21.920] run() for ‘Future’ ...
[10:33:21.921] - state: ‘created’
[10:33:21.921] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:21.932] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:21.932] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:21.932]   - Field: ‘node’
[10:33:21.932]   - Field: ‘label’
[10:33:21.932]   - Field: ‘local’
[10:33:21.932]   - Field: ‘owner’
[10:33:21.932]   - Field: ‘envir’
[10:33:21.933]   - Field: ‘workers’
[10:33:21.933]   - Field: ‘packages’
[10:33:21.933]   - Field: ‘gc’
[10:33:21.933]   - Field: ‘conditions’
[10:33:21.933]   - Field: ‘persistent’
[10:33:21.933]   - Field: ‘expr’
[10:33:21.933]   - Field: ‘uuid’
[10:33:21.933]   - Field: ‘seed’
[10:33:21.933]   - Field: ‘version’
[10:33:21.934]   - Field: ‘result’
[10:33:21.934]   - Field: ‘asynchronous’
[10:33:21.934]   - Field: ‘calls’
[10:33:21.934]   - Field: ‘globals’
[10:33:21.934]   - Field: ‘stdout’
[10:33:21.934]   - Field: ‘earlySignal’
[10:33:21.934]   - Field: ‘lazy’
[10:33:21.934]   - Field: ‘state’
[10:33:21.935] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:21.935] - Launch lazy future ...
[10:33:21.935] Packages needed by the future expression (n = 0): <none>
[10:33:21.935] Packages needed by future strategies (n = 0): <none>
[10:33:21.936] {
[10:33:21.936]     {
[10:33:21.936]         {
[10:33:21.936]             ...future.startTime <- base::Sys.time()
[10:33:21.936]             {
[10:33:21.936]                 {
[10:33:21.936]                   {
[10:33:21.936]                     {
[10:33:21.936]                       base::local({
[10:33:21.936]                         has_future <- base::requireNamespace("future", 
[10:33:21.936]                           quietly = TRUE)
[10:33:21.936]                         if (has_future) {
[10:33:21.936]                           ns <- base::getNamespace("future")
[10:33:21.936]                           version <- ns[[".package"]][["version"]]
[10:33:21.936]                           if (is.null(version)) 
[10:33:21.936]                             version <- utils::packageVersion("future")
[10:33:21.936]                         }
[10:33:21.936]                         else {
[10:33:21.936]                           version <- NULL
[10:33:21.936]                         }
[10:33:21.936]                         if (!has_future || version < "1.8.0") {
[10:33:21.936]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:21.936]                             "", base::R.version$version.string), 
[10:33:21.936]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:21.936]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:21.936]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:21.936]                               "release", "version")], collapse = " "), 
[10:33:21.936]                             hostname = base::Sys.info()[["nodename"]])
[10:33:21.936]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:21.936]                             info)
[10:33:21.936]                           info <- base::paste(info, collapse = "; ")
[10:33:21.936]                           if (!has_future) {
[10:33:21.936]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:21.936]                               info)
[10:33:21.936]                           }
[10:33:21.936]                           else {
[10:33:21.936]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:21.936]                               info, version)
[10:33:21.936]                           }
[10:33:21.936]                           base::stop(msg)
[10:33:21.936]                         }
[10:33:21.936]                       })
[10:33:21.936]                     }
[10:33:21.936]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:21.936]                     base::options(mc.cores = 1L)
[10:33:21.936]                   }
[10:33:21.936]                   ...future.strategy.old <- future::plan("list")
[10:33:21.936]                   options(future.plan = NULL)
[10:33:21.936]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.936]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:21.936]                 }
[10:33:21.936]                 ...future.workdir <- getwd()
[10:33:21.936]             }
[10:33:21.936]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:21.936]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:21.936]         }
[10:33:21.936]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:21.936]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:21.936]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:21.936]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:21.936]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:21.936]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:21.936]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:21.936]             base::names(...future.oldOptions))
[10:33:21.936]     }
[10:33:21.936]     if (FALSE) {
[10:33:21.936]     }
[10:33:21.936]     else {
[10:33:21.936]         if (TRUE) {
[10:33:21.936]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:21.936]                 open = "w")
[10:33:21.936]         }
[10:33:21.936]         else {
[10:33:21.936]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:21.936]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:21.936]         }
[10:33:21.936]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:21.936]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:21.936]             base::sink(type = "output", split = FALSE)
[10:33:21.936]             base::close(...future.stdout)
[10:33:21.936]         }, add = TRUE)
[10:33:21.936]     }
[10:33:21.936]     ...future.frame <- base::sys.nframe()
[10:33:21.936]     ...future.conditions <- base::list()
[10:33:21.936]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:21.936]     if (FALSE) {
[10:33:21.936]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:21.936]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:21.936]     }
[10:33:21.936]     ...future.result <- base::tryCatch({
[10:33:21.936]         base::withCallingHandlers({
[10:33:21.936]             ...future.value <- base::withVisible(base::local({
[10:33:21.936]                 ...future.makeSendCondition <- base::local({
[10:33:21.936]                   sendCondition <- NULL
[10:33:21.936]                   function(frame = 1L) {
[10:33:21.936]                     if (is.function(sendCondition)) 
[10:33:21.936]                       return(sendCondition)
[10:33:21.936]                     ns <- getNamespace("parallel")
[10:33:21.936]                     if (exists("sendData", mode = "function", 
[10:33:21.936]                       envir = ns)) {
[10:33:21.936]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:21.936]                         envir = ns)
[10:33:21.936]                       envir <- sys.frame(frame)
[10:33:21.936]                       master <- NULL
[10:33:21.936]                       while (!identical(envir, .GlobalEnv) && 
[10:33:21.936]                         !identical(envir, emptyenv())) {
[10:33:21.936]                         if (exists("master", mode = "list", envir = envir, 
[10:33:21.936]                           inherits = FALSE)) {
[10:33:21.936]                           master <- get("master", mode = "list", 
[10:33:21.936]                             envir = envir, inherits = FALSE)
[10:33:21.936]                           if (inherits(master, c("SOCKnode", 
[10:33:21.936]                             "SOCK0node"))) {
[10:33:21.936]                             sendCondition <<- function(cond) {
[10:33:21.936]                               data <- list(type = "VALUE", value = cond, 
[10:33:21.936]                                 success = TRUE)
[10:33:21.936]                               parallel_sendData(master, data)
[10:33:21.936]                             }
[10:33:21.936]                             return(sendCondition)
[10:33:21.936]                           }
[10:33:21.936]                         }
[10:33:21.936]                         frame <- frame + 1L
[10:33:21.936]                         envir <- sys.frame(frame)
[10:33:21.936]                       }
[10:33:21.936]                     }
[10:33:21.936]                     sendCondition <<- function(cond) NULL
[10:33:21.936]                   }
[10:33:21.936]                 })
[10:33:21.936]                 withCallingHandlers({
[10:33:21.936]                   {
[10:33:21.936]                     future:::session_uuid(attributes = TRUE)
[10:33:21.936]                   }
[10:33:21.936]                 }, immediateCondition = function(cond) {
[10:33:21.936]                   sendCondition <- ...future.makeSendCondition()
[10:33:21.936]                   sendCondition(cond)
[10:33:21.936]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.936]                   {
[10:33:21.936]                     inherits <- base::inherits
[10:33:21.936]                     invokeRestart <- base::invokeRestart
[10:33:21.936]                     is.null <- base::is.null
[10:33:21.936]                     muffled <- FALSE
[10:33:21.936]                     if (inherits(cond, "message")) {
[10:33:21.936]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:21.936]                       if (muffled) 
[10:33:21.936]                         invokeRestart("muffleMessage")
[10:33:21.936]                     }
[10:33:21.936]                     else if (inherits(cond, "warning")) {
[10:33:21.936]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:21.936]                       if (muffled) 
[10:33:21.936]                         invokeRestart("muffleWarning")
[10:33:21.936]                     }
[10:33:21.936]                     else if (inherits(cond, "condition")) {
[10:33:21.936]                       if (!is.null(pattern)) {
[10:33:21.936]                         computeRestarts <- base::computeRestarts
[10:33:21.936]                         grepl <- base::grepl
[10:33:21.936]                         restarts <- computeRestarts(cond)
[10:33:21.936]                         for (restart in restarts) {
[10:33:21.936]                           name <- restart$name
[10:33:21.936]                           if (is.null(name)) 
[10:33:21.936]                             next
[10:33:21.936]                           if (!grepl(pattern, name)) 
[10:33:21.936]                             next
[10:33:21.936]                           invokeRestart(restart)
[10:33:21.936]                           muffled <- TRUE
[10:33:21.936]                           break
[10:33:21.936]                         }
[10:33:21.936]                       }
[10:33:21.936]                     }
[10:33:21.936]                     invisible(muffled)
[10:33:21.936]                   }
[10:33:21.936]                   muffleCondition(cond)
[10:33:21.936]                 })
[10:33:21.936]             }))
[10:33:21.936]             future::FutureResult(value = ...future.value$value, 
[10:33:21.936]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.936]                   ...future.rng), globalenv = if (FALSE) 
[10:33:21.936]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:21.936]                     ...future.globalenv.names))
[10:33:21.936]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:21.936]         }, condition = base::local({
[10:33:21.936]             c <- base::c
[10:33:21.936]             inherits <- base::inherits
[10:33:21.936]             invokeRestart <- base::invokeRestart
[10:33:21.936]             length <- base::length
[10:33:21.936]             list <- base::list
[10:33:21.936]             seq.int <- base::seq.int
[10:33:21.936]             signalCondition <- base::signalCondition
[10:33:21.936]             sys.calls <- base::sys.calls
[10:33:21.936]             `[[` <- base::`[[`
[10:33:21.936]             `+` <- base::`+`
[10:33:21.936]             `<<-` <- base::`<<-`
[10:33:21.936]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:21.936]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:21.936]                   3L)]
[10:33:21.936]             }
[10:33:21.936]             function(cond) {
[10:33:21.936]                 is_error <- inherits(cond, "error")
[10:33:21.936]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:21.936]                   NULL)
[10:33:21.936]                 if (is_error) {
[10:33:21.936]                   sessionInformation <- function() {
[10:33:21.936]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:21.936]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:21.936]                       search = base::search(), system = base::Sys.info())
[10:33:21.936]                   }
[10:33:21.936]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.936]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:21.936]                     cond$call), session = sessionInformation(), 
[10:33:21.936]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:21.936]                   signalCondition(cond)
[10:33:21.936]                 }
[10:33:21.936]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:21.936]                 "immediateCondition"))) {
[10:33:21.936]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:21.936]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.936]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:21.936]                   if (TRUE && !signal) {
[10:33:21.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.936]                     {
[10:33:21.936]                       inherits <- base::inherits
[10:33:21.936]                       invokeRestart <- base::invokeRestart
[10:33:21.936]                       is.null <- base::is.null
[10:33:21.936]                       muffled <- FALSE
[10:33:21.936]                       if (inherits(cond, "message")) {
[10:33:21.936]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.936]                         if (muffled) 
[10:33:21.936]                           invokeRestart("muffleMessage")
[10:33:21.936]                       }
[10:33:21.936]                       else if (inherits(cond, "warning")) {
[10:33:21.936]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.936]                         if (muffled) 
[10:33:21.936]                           invokeRestart("muffleWarning")
[10:33:21.936]                       }
[10:33:21.936]                       else if (inherits(cond, "condition")) {
[10:33:21.936]                         if (!is.null(pattern)) {
[10:33:21.936]                           computeRestarts <- base::computeRestarts
[10:33:21.936]                           grepl <- base::grepl
[10:33:21.936]                           restarts <- computeRestarts(cond)
[10:33:21.936]                           for (restart in restarts) {
[10:33:21.936]                             name <- restart$name
[10:33:21.936]                             if (is.null(name)) 
[10:33:21.936]                               next
[10:33:21.936]                             if (!grepl(pattern, name)) 
[10:33:21.936]                               next
[10:33:21.936]                             invokeRestart(restart)
[10:33:21.936]                             muffled <- TRUE
[10:33:21.936]                             break
[10:33:21.936]                           }
[10:33:21.936]                         }
[10:33:21.936]                       }
[10:33:21.936]                       invisible(muffled)
[10:33:21.936]                     }
[10:33:21.936]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.936]                   }
[10:33:21.936]                 }
[10:33:21.936]                 else {
[10:33:21.936]                   if (TRUE) {
[10:33:21.936]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.936]                     {
[10:33:21.936]                       inherits <- base::inherits
[10:33:21.936]                       invokeRestart <- base::invokeRestart
[10:33:21.936]                       is.null <- base::is.null
[10:33:21.936]                       muffled <- FALSE
[10:33:21.936]                       if (inherits(cond, "message")) {
[10:33:21.936]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.936]                         if (muffled) 
[10:33:21.936]                           invokeRestart("muffleMessage")
[10:33:21.936]                       }
[10:33:21.936]                       else if (inherits(cond, "warning")) {
[10:33:21.936]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.936]                         if (muffled) 
[10:33:21.936]                           invokeRestart("muffleWarning")
[10:33:21.936]                       }
[10:33:21.936]                       else if (inherits(cond, "condition")) {
[10:33:21.936]                         if (!is.null(pattern)) {
[10:33:21.936]                           computeRestarts <- base::computeRestarts
[10:33:21.936]                           grepl <- base::grepl
[10:33:21.936]                           restarts <- computeRestarts(cond)
[10:33:21.936]                           for (restart in restarts) {
[10:33:21.936]                             name <- restart$name
[10:33:21.936]                             if (is.null(name)) 
[10:33:21.936]                               next
[10:33:21.936]                             if (!grepl(pattern, name)) 
[10:33:21.936]                               next
[10:33:21.936]                             invokeRestart(restart)
[10:33:21.936]                             muffled <- TRUE
[10:33:21.936]                             break
[10:33:21.936]                           }
[10:33:21.936]                         }
[10:33:21.936]                       }
[10:33:21.936]                       invisible(muffled)
[10:33:21.936]                     }
[10:33:21.936]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.936]                   }
[10:33:21.936]                 }
[10:33:21.936]             }
[10:33:21.936]         }))
[10:33:21.936]     }, error = function(ex) {
[10:33:21.936]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:21.936]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.936]                 ...future.rng), started = ...future.startTime, 
[10:33:21.936]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:21.936]             version = "1.8"), class = "FutureResult")
[10:33:21.936]     }, finally = {
[10:33:21.936]         if (!identical(...future.workdir, getwd())) 
[10:33:21.936]             setwd(...future.workdir)
[10:33:21.936]         {
[10:33:21.936]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:21.936]                 ...future.oldOptions$nwarnings <- NULL
[10:33:21.936]             }
[10:33:21.936]             base::options(...future.oldOptions)
[10:33:21.936]             if (.Platform$OS.type == "windows") {
[10:33:21.936]                 old_names <- names(...future.oldEnvVars)
[10:33:21.936]                 envs <- base::Sys.getenv()
[10:33:21.936]                 names <- names(envs)
[10:33:21.936]                 common <- intersect(names, old_names)
[10:33:21.936]                 added <- setdiff(names, old_names)
[10:33:21.936]                 removed <- setdiff(old_names, names)
[10:33:21.936]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:21.936]                   envs[common]]
[10:33:21.936]                 NAMES <- toupper(changed)
[10:33:21.936]                 args <- list()
[10:33:21.936]                 for (kk in seq_along(NAMES)) {
[10:33:21.936]                   name <- changed[[kk]]
[10:33:21.936]                   NAME <- NAMES[[kk]]
[10:33:21.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.936]                     next
[10:33:21.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.936]                 }
[10:33:21.936]                 NAMES <- toupper(added)
[10:33:21.936]                 for (kk in seq_along(NAMES)) {
[10:33:21.936]                   name <- added[[kk]]
[10:33:21.936]                   NAME <- NAMES[[kk]]
[10:33:21.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.936]                     next
[10:33:21.936]                   args[[name]] <- ""
[10:33:21.936]                 }
[10:33:21.936]                 NAMES <- toupper(removed)
[10:33:21.936]                 for (kk in seq_along(NAMES)) {
[10:33:21.936]                   name <- removed[[kk]]
[10:33:21.936]                   NAME <- NAMES[[kk]]
[10:33:21.936]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.936]                     next
[10:33:21.936]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.936]                 }
[10:33:21.936]                 if (length(args) > 0) 
[10:33:21.936]                   base::do.call(base::Sys.setenv, args = args)
[10:33:21.936]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:21.936]             }
[10:33:21.936]             else {
[10:33:21.936]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:21.936]             }
[10:33:21.936]             {
[10:33:21.936]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:21.936]                   0L) {
[10:33:21.936]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:21.936]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:21.936]                   base::options(opts)
[10:33:21.936]                 }
[10:33:21.936]                 {
[10:33:21.936]                   {
[10:33:21.936]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:21.936]                     NULL
[10:33:21.936]                   }
[10:33:21.936]                   options(future.plan = NULL)
[10:33:21.936]                   if (is.na(NA_character_)) 
[10:33:21.936]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.936]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:21.936]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:21.936]                     .init = FALSE)
[10:33:21.936]                 }
[10:33:21.936]             }
[10:33:21.936]         }
[10:33:21.936]     })
[10:33:21.936]     if (TRUE) {
[10:33:21.936]         base::sink(type = "output", split = FALSE)
[10:33:21.936]         if (TRUE) {
[10:33:21.936]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:21.936]         }
[10:33:21.936]         else {
[10:33:21.936]             ...future.result["stdout"] <- base::list(NULL)
[10:33:21.936]         }
[10:33:21.936]         base::close(...future.stdout)
[10:33:21.936]         ...future.stdout <- NULL
[10:33:21.936]     }
[10:33:21.936]     ...future.result$conditions <- ...future.conditions
[10:33:21.936]     ...future.result$finished <- base::Sys.time()
[10:33:21.936]     ...future.result
[10:33:21.936] }
[10:33:21.939] MultisessionFuture started
[10:33:21.939] - Launch lazy future ... done
[10:33:21.939] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[10:33:21.939] result() for ClusterFuture ...
[10:33:21.939] receiveMessageFromWorker() for ClusterFuture ...
[10:33:21.940] - Validating connection of MultisessionFuture
[10:33:21.944] - received message: FutureResult
[10:33:21.944] - Received FutureResult
[10:33:21.944] - Erased future from FutureRegistry
[10:33:21.944] result() for ClusterFuture ...
[10:33:21.944] - result already collected: FutureResult
[10:33:21.945] result() for ClusterFuture ... done
[10:33:21.945] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:21.945] result() for ClusterFuture ... done
[10:33:21.945] result() for ClusterFuture ...
[10:33:21.945] - result already collected: FutureResult
[10:33:21.945] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 4c823a0b-97af-fc72-9c4d-a3fa985e9281
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[10:33:21.946] getGlobalsAndPackages() ...
[10:33:21.946] Searching for globals...
[10:33:21.947] - globals found: [2] ‘{’, ‘:::’
[10:33:21.947] Searching for globals ... DONE
[10:33:21.947] Resolving globals: FALSE
[10:33:21.947] 
[10:33:21.947] 
[10:33:21.948] getGlobalsAndPackages() ... DONE
[10:33:21.948] run() for ‘Future’ ...
[10:33:21.948] - state: ‘created’
[10:33:21.948] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:21.959] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:21.959] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:21.959]   - Field: ‘node’
[10:33:21.959]   - Field: ‘label’
[10:33:21.959]   - Field: ‘local’
[10:33:21.959]   - Field: ‘owner’
[10:33:21.962]   - Field: ‘envir’
[10:33:21.962]   - Field: ‘workers’
[10:33:21.963]   - Field: ‘packages’
[10:33:21.963]   - Field: ‘gc’
[10:33:21.963]   - Field: ‘conditions’
[10:33:21.963]   - Field: ‘persistent’
[10:33:21.963]   - Field: ‘expr’
[10:33:21.963]   - Field: ‘uuid’
[10:33:21.963]   - Field: ‘seed’
[10:33:21.963]   - Field: ‘version’
[10:33:21.963]   - Field: ‘result’
[10:33:21.963]   - Field: ‘asynchronous’
[10:33:21.963]   - Field: ‘calls’
[10:33:21.964]   - Field: ‘globals’
[10:33:21.964]   - Field: ‘stdout’
[10:33:21.964]   - Field: ‘earlySignal’
[10:33:21.964]   - Field: ‘lazy’
[10:33:21.964]   - Field: ‘state’
[10:33:21.964] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:21.964] - Launch lazy future ...
[10:33:21.964] Packages needed by the future expression (n = 0): <none>
[10:33:21.964] Packages needed by future strategies (n = 0): <none>
[10:33:21.965] {
[10:33:21.965]     {
[10:33:21.965]         {
[10:33:21.965]             ...future.startTime <- base::Sys.time()
[10:33:21.965]             {
[10:33:21.965]                 {
[10:33:21.965]                   {
[10:33:21.965]                     {
[10:33:21.965]                       base::local({
[10:33:21.965]                         has_future <- base::requireNamespace("future", 
[10:33:21.965]                           quietly = TRUE)
[10:33:21.965]                         if (has_future) {
[10:33:21.965]                           ns <- base::getNamespace("future")
[10:33:21.965]                           version <- ns[[".package"]][["version"]]
[10:33:21.965]                           if (is.null(version)) 
[10:33:21.965]                             version <- utils::packageVersion("future")
[10:33:21.965]                         }
[10:33:21.965]                         else {
[10:33:21.965]                           version <- NULL
[10:33:21.965]                         }
[10:33:21.965]                         if (!has_future || version < "1.8.0") {
[10:33:21.965]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:21.965]                             "", base::R.version$version.string), 
[10:33:21.965]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:21.965]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:21.965]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:21.965]                               "release", "version")], collapse = " "), 
[10:33:21.965]                             hostname = base::Sys.info()[["nodename"]])
[10:33:21.965]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:21.965]                             info)
[10:33:21.965]                           info <- base::paste(info, collapse = "; ")
[10:33:21.965]                           if (!has_future) {
[10:33:21.965]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:21.965]                               info)
[10:33:21.965]                           }
[10:33:21.965]                           else {
[10:33:21.965]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:21.965]                               info, version)
[10:33:21.965]                           }
[10:33:21.965]                           base::stop(msg)
[10:33:21.965]                         }
[10:33:21.965]                       })
[10:33:21.965]                     }
[10:33:21.965]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:21.965]                     base::options(mc.cores = 1L)
[10:33:21.965]                   }
[10:33:21.965]                   ...future.strategy.old <- future::plan("list")
[10:33:21.965]                   options(future.plan = NULL)
[10:33:21.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:21.965]                 }
[10:33:21.965]                 ...future.workdir <- getwd()
[10:33:21.965]             }
[10:33:21.965]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:21.965]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:21.965]         }
[10:33:21.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:21.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:21.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:21.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:21.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:21.965]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:21.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:21.965]             base::names(...future.oldOptions))
[10:33:21.965]     }
[10:33:21.965]     if (FALSE) {
[10:33:21.965]     }
[10:33:21.965]     else {
[10:33:21.965]         if (TRUE) {
[10:33:21.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:21.965]                 open = "w")
[10:33:21.965]         }
[10:33:21.965]         else {
[10:33:21.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:21.965]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:21.965]         }
[10:33:21.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:21.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:21.965]             base::sink(type = "output", split = FALSE)
[10:33:21.965]             base::close(...future.stdout)
[10:33:21.965]         }, add = TRUE)
[10:33:21.965]     }
[10:33:21.965]     ...future.frame <- base::sys.nframe()
[10:33:21.965]     ...future.conditions <- base::list()
[10:33:21.965]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:21.965]     if (FALSE) {
[10:33:21.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:21.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:21.965]     }
[10:33:21.965]     ...future.result <- base::tryCatch({
[10:33:21.965]         base::withCallingHandlers({
[10:33:21.965]             ...future.value <- base::withVisible(base::local({
[10:33:21.965]                 ...future.makeSendCondition <- base::local({
[10:33:21.965]                   sendCondition <- NULL
[10:33:21.965]                   function(frame = 1L) {
[10:33:21.965]                     if (is.function(sendCondition)) 
[10:33:21.965]                       return(sendCondition)
[10:33:21.965]                     ns <- getNamespace("parallel")
[10:33:21.965]                     if (exists("sendData", mode = "function", 
[10:33:21.965]                       envir = ns)) {
[10:33:21.965]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:21.965]                         envir = ns)
[10:33:21.965]                       envir <- sys.frame(frame)
[10:33:21.965]                       master <- NULL
[10:33:21.965]                       while (!identical(envir, .GlobalEnv) && 
[10:33:21.965]                         !identical(envir, emptyenv())) {
[10:33:21.965]                         if (exists("master", mode = "list", envir = envir, 
[10:33:21.965]                           inherits = FALSE)) {
[10:33:21.965]                           master <- get("master", mode = "list", 
[10:33:21.965]                             envir = envir, inherits = FALSE)
[10:33:21.965]                           if (inherits(master, c("SOCKnode", 
[10:33:21.965]                             "SOCK0node"))) {
[10:33:21.965]                             sendCondition <<- function(cond) {
[10:33:21.965]                               data <- list(type = "VALUE", value = cond, 
[10:33:21.965]                                 success = TRUE)
[10:33:21.965]                               parallel_sendData(master, data)
[10:33:21.965]                             }
[10:33:21.965]                             return(sendCondition)
[10:33:21.965]                           }
[10:33:21.965]                         }
[10:33:21.965]                         frame <- frame + 1L
[10:33:21.965]                         envir <- sys.frame(frame)
[10:33:21.965]                       }
[10:33:21.965]                     }
[10:33:21.965]                     sendCondition <<- function(cond) NULL
[10:33:21.965]                   }
[10:33:21.965]                 })
[10:33:21.965]                 withCallingHandlers({
[10:33:21.965]                   {
[10:33:21.965]                     future:::session_uuid(attributes = TRUE)
[10:33:21.965]                   }
[10:33:21.965]                 }, immediateCondition = function(cond) {
[10:33:21.965]                   sendCondition <- ...future.makeSendCondition()
[10:33:21.965]                   sendCondition(cond)
[10:33:21.965]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.965]                   {
[10:33:21.965]                     inherits <- base::inherits
[10:33:21.965]                     invokeRestart <- base::invokeRestart
[10:33:21.965]                     is.null <- base::is.null
[10:33:21.965]                     muffled <- FALSE
[10:33:21.965]                     if (inherits(cond, "message")) {
[10:33:21.965]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:21.965]                       if (muffled) 
[10:33:21.965]                         invokeRestart("muffleMessage")
[10:33:21.965]                     }
[10:33:21.965]                     else if (inherits(cond, "warning")) {
[10:33:21.965]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:21.965]                       if (muffled) 
[10:33:21.965]                         invokeRestart("muffleWarning")
[10:33:21.965]                     }
[10:33:21.965]                     else if (inherits(cond, "condition")) {
[10:33:21.965]                       if (!is.null(pattern)) {
[10:33:21.965]                         computeRestarts <- base::computeRestarts
[10:33:21.965]                         grepl <- base::grepl
[10:33:21.965]                         restarts <- computeRestarts(cond)
[10:33:21.965]                         for (restart in restarts) {
[10:33:21.965]                           name <- restart$name
[10:33:21.965]                           if (is.null(name)) 
[10:33:21.965]                             next
[10:33:21.965]                           if (!grepl(pattern, name)) 
[10:33:21.965]                             next
[10:33:21.965]                           invokeRestart(restart)
[10:33:21.965]                           muffled <- TRUE
[10:33:21.965]                           break
[10:33:21.965]                         }
[10:33:21.965]                       }
[10:33:21.965]                     }
[10:33:21.965]                     invisible(muffled)
[10:33:21.965]                   }
[10:33:21.965]                   muffleCondition(cond)
[10:33:21.965]                 })
[10:33:21.965]             }))
[10:33:21.965]             future::FutureResult(value = ...future.value$value, 
[10:33:21.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.965]                   ...future.rng), globalenv = if (FALSE) 
[10:33:21.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:21.965]                     ...future.globalenv.names))
[10:33:21.965]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:21.965]         }, condition = base::local({
[10:33:21.965]             c <- base::c
[10:33:21.965]             inherits <- base::inherits
[10:33:21.965]             invokeRestart <- base::invokeRestart
[10:33:21.965]             length <- base::length
[10:33:21.965]             list <- base::list
[10:33:21.965]             seq.int <- base::seq.int
[10:33:21.965]             signalCondition <- base::signalCondition
[10:33:21.965]             sys.calls <- base::sys.calls
[10:33:21.965]             `[[` <- base::`[[`
[10:33:21.965]             `+` <- base::`+`
[10:33:21.965]             `<<-` <- base::`<<-`
[10:33:21.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:21.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:21.965]                   3L)]
[10:33:21.965]             }
[10:33:21.965]             function(cond) {
[10:33:21.965]                 is_error <- inherits(cond, "error")
[10:33:21.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:21.965]                   NULL)
[10:33:21.965]                 if (is_error) {
[10:33:21.965]                   sessionInformation <- function() {
[10:33:21.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:21.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:21.965]                       search = base::search(), system = base::Sys.info())
[10:33:21.965]                   }
[10:33:21.965]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:21.965]                     cond$call), session = sessionInformation(), 
[10:33:21.965]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:21.965]                   signalCondition(cond)
[10:33:21.965]                 }
[10:33:21.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:21.965]                 "immediateCondition"))) {
[10:33:21.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:21.965]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:21.965]                   if (TRUE && !signal) {
[10:33:21.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.965]                     {
[10:33:21.965]                       inherits <- base::inherits
[10:33:21.965]                       invokeRestart <- base::invokeRestart
[10:33:21.965]                       is.null <- base::is.null
[10:33:21.965]                       muffled <- FALSE
[10:33:21.965]                       if (inherits(cond, "message")) {
[10:33:21.965]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.965]                         if (muffled) 
[10:33:21.965]                           invokeRestart("muffleMessage")
[10:33:21.965]                       }
[10:33:21.965]                       else if (inherits(cond, "warning")) {
[10:33:21.965]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.965]                         if (muffled) 
[10:33:21.965]                           invokeRestart("muffleWarning")
[10:33:21.965]                       }
[10:33:21.965]                       else if (inherits(cond, "condition")) {
[10:33:21.965]                         if (!is.null(pattern)) {
[10:33:21.965]                           computeRestarts <- base::computeRestarts
[10:33:21.965]                           grepl <- base::grepl
[10:33:21.965]                           restarts <- computeRestarts(cond)
[10:33:21.965]                           for (restart in restarts) {
[10:33:21.965]                             name <- restart$name
[10:33:21.965]                             if (is.null(name)) 
[10:33:21.965]                               next
[10:33:21.965]                             if (!grepl(pattern, name)) 
[10:33:21.965]                               next
[10:33:21.965]                             invokeRestart(restart)
[10:33:21.965]                             muffled <- TRUE
[10:33:21.965]                             break
[10:33:21.965]                           }
[10:33:21.965]                         }
[10:33:21.965]                       }
[10:33:21.965]                       invisible(muffled)
[10:33:21.965]                     }
[10:33:21.965]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.965]                   }
[10:33:21.965]                 }
[10:33:21.965]                 else {
[10:33:21.965]                   if (TRUE) {
[10:33:21.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.965]                     {
[10:33:21.965]                       inherits <- base::inherits
[10:33:21.965]                       invokeRestart <- base::invokeRestart
[10:33:21.965]                       is.null <- base::is.null
[10:33:21.965]                       muffled <- FALSE
[10:33:21.965]                       if (inherits(cond, "message")) {
[10:33:21.965]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.965]                         if (muffled) 
[10:33:21.965]                           invokeRestart("muffleMessage")
[10:33:21.965]                       }
[10:33:21.965]                       else if (inherits(cond, "warning")) {
[10:33:21.965]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.965]                         if (muffled) 
[10:33:21.965]                           invokeRestart("muffleWarning")
[10:33:21.965]                       }
[10:33:21.965]                       else if (inherits(cond, "condition")) {
[10:33:21.965]                         if (!is.null(pattern)) {
[10:33:21.965]                           computeRestarts <- base::computeRestarts
[10:33:21.965]                           grepl <- base::grepl
[10:33:21.965]                           restarts <- computeRestarts(cond)
[10:33:21.965]                           for (restart in restarts) {
[10:33:21.965]                             name <- restart$name
[10:33:21.965]                             if (is.null(name)) 
[10:33:21.965]                               next
[10:33:21.965]                             if (!grepl(pattern, name)) 
[10:33:21.965]                               next
[10:33:21.965]                             invokeRestart(restart)
[10:33:21.965]                             muffled <- TRUE
[10:33:21.965]                             break
[10:33:21.965]                           }
[10:33:21.965]                         }
[10:33:21.965]                       }
[10:33:21.965]                       invisible(muffled)
[10:33:21.965]                     }
[10:33:21.965]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.965]                   }
[10:33:21.965]                 }
[10:33:21.965]             }
[10:33:21.965]         }))
[10:33:21.965]     }, error = function(ex) {
[10:33:21.965]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:21.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.965]                 ...future.rng), started = ...future.startTime, 
[10:33:21.965]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:21.965]             version = "1.8"), class = "FutureResult")
[10:33:21.965]     }, finally = {
[10:33:21.965]         if (!identical(...future.workdir, getwd())) 
[10:33:21.965]             setwd(...future.workdir)
[10:33:21.965]         {
[10:33:21.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:21.965]                 ...future.oldOptions$nwarnings <- NULL
[10:33:21.965]             }
[10:33:21.965]             base::options(...future.oldOptions)
[10:33:21.965]             if (.Platform$OS.type == "windows") {
[10:33:21.965]                 old_names <- names(...future.oldEnvVars)
[10:33:21.965]                 envs <- base::Sys.getenv()
[10:33:21.965]                 names <- names(envs)
[10:33:21.965]                 common <- intersect(names, old_names)
[10:33:21.965]                 added <- setdiff(names, old_names)
[10:33:21.965]                 removed <- setdiff(old_names, names)
[10:33:21.965]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:21.965]                   envs[common]]
[10:33:21.965]                 NAMES <- toupper(changed)
[10:33:21.965]                 args <- list()
[10:33:21.965]                 for (kk in seq_along(NAMES)) {
[10:33:21.965]                   name <- changed[[kk]]
[10:33:21.965]                   NAME <- NAMES[[kk]]
[10:33:21.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.965]                     next
[10:33:21.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.965]                 }
[10:33:21.965]                 NAMES <- toupper(added)
[10:33:21.965]                 for (kk in seq_along(NAMES)) {
[10:33:21.965]                   name <- added[[kk]]
[10:33:21.965]                   NAME <- NAMES[[kk]]
[10:33:21.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.965]                     next
[10:33:21.965]                   args[[name]] <- ""
[10:33:21.965]                 }
[10:33:21.965]                 NAMES <- toupper(removed)
[10:33:21.965]                 for (kk in seq_along(NAMES)) {
[10:33:21.965]                   name <- removed[[kk]]
[10:33:21.965]                   NAME <- NAMES[[kk]]
[10:33:21.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.965]                     next
[10:33:21.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.965]                 }
[10:33:21.965]                 if (length(args) > 0) 
[10:33:21.965]                   base::do.call(base::Sys.setenv, args = args)
[10:33:21.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:21.965]             }
[10:33:21.965]             else {
[10:33:21.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:21.965]             }
[10:33:21.965]             {
[10:33:21.965]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:21.965]                   0L) {
[10:33:21.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:21.965]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:21.965]                   base::options(opts)
[10:33:21.965]                 }
[10:33:21.965]                 {
[10:33:21.965]                   {
[10:33:21.965]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:21.965]                     NULL
[10:33:21.965]                   }
[10:33:21.965]                   options(future.plan = NULL)
[10:33:21.965]                   if (is.na(NA_character_)) 
[10:33:21.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:21.965]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:21.965]                     .init = FALSE)
[10:33:21.965]                 }
[10:33:21.965]             }
[10:33:21.965]         }
[10:33:21.965]     })
[10:33:21.965]     if (TRUE) {
[10:33:21.965]         base::sink(type = "output", split = FALSE)
[10:33:21.965]         if (TRUE) {
[10:33:21.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:21.965]         }
[10:33:21.965]         else {
[10:33:21.965]             ...future.result["stdout"] <- base::list(NULL)
[10:33:21.965]         }
[10:33:21.965]         base::close(...future.stdout)
[10:33:21.965]         ...future.stdout <- NULL
[10:33:21.965]     }
[10:33:21.965]     ...future.result$conditions <- ...future.conditions
[10:33:21.965]     ...future.result$finished <- base::Sys.time()
[10:33:21.965]     ...future.result
[10:33:21.965] }
[10:33:21.968] MultisessionFuture started
[10:33:21.968] - Launch lazy future ... done
[10:33:21.968] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[10:33:21.968] result() for ClusterFuture ...
[10:33:21.968] receiveMessageFromWorker() for ClusterFuture ...
[10:33:21.968] - Validating connection of MultisessionFuture
[10:33:21.969] - received message: FutureResult
[10:33:21.969] - Received FutureResult
[10:33:21.969] - Erased future from FutureRegistry
[10:33:21.969] result() for ClusterFuture ...
[10:33:21.970] - result already collected: FutureResult
[10:33:21.970] result() for ClusterFuture ... done
[10:33:21.970] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:21.970] result() for ClusterFuture ... done
[10:33:21.970] result() for ClusterFuture ...
[10:33:21.970] - result already collected: FutureResult
[10:33:21.970] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 4c823a0b-97af-fc72-9c4d-a3fa985e9281
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[10:33:21.970] getGlobalsAndPackages() ...
[10:33:21.970] Searching for globals...
[10:33:21.971] - globals found: [3] ‘{’, ‘$’, ‘f1’
[10:33:21.971] Searching for globals ... DONE
[10:33:21.971] Resolving globals: FALSE
[10:33:21.974] The total size of the 1 globals is 1.56 MiB (1637576 bytes)
[10:33:21.975] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:33:21.975] - globals: [1] ‘f1’
[10:33:21.975] 
[10:33:21.975] getGlobalsAndPackages() ... DONE
[10:33:21.975] run() for ‘Future’ ...
[10:33:21.975] - state: ‘created’
[10:33:21.975] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:21.986] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:21.986] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:21.986]   - Field: ‘node’
[10:33:21.986]   - Field: ‘label’
[10:33:21.986]   - Field: ‘local’
[10:33:21.986]   - Field: ‘owner’
[10:33:21.986]   - Field: ‘envir’
[10:33:21.986]   - Field: ‘workers’
[10:33:21.987]   - Field: ‘packages’
[10:33:21.987]   - Field: ‘gc’
[10:33:21.987]   - Field: ‘conditions’
[10:33:21.987]   - Field: ‘persistent’
[10:33:21.987]   - Field: ‘expr’
[10:33:21.987]   - Field: ‘uuid’
[10:33:21.987]   - Field: ‘seed’
[10:33:21.987]   - Field: ‘version’
[10:33:21.987]   - Field: ‘result’
[10:33:21.987]   - Field: ‘asynchronous’
[10:33:21.987]   - Field: ‘calls’
[10:33:21.988]   - Field: ‘globals’
[10:33:21.988]   - Field: ‘stdout’
[10:33:21.988]   - Field: ‘earlySignal’
[10:33:21.988]   - Field: ‘lazy’
[10:33:21.988]   - Field: ‘state’
[10:33:21.988] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:21.988] - Launch lazy future ...
[10:33:21.988] Packages needed by the future expression (n = 0): <none>
[10:33:21.988] Packages needed by future strategies (n = 0): <none>
[10:33:21.989] {
[10:33:21.989]     {
[10:33:21.989]         {
[10:33:21.989]             ...future.startTime <- base::Sys.time()
[10:33:21.989]             {
[10:33:21.989]                 {
[10:33:21.989]                   {
[10:33:21.989]                     {
[10:33:21.989]                       base::local({
[10:33:21.989]                         has_future <- base::requireNamespace("future", 
[10:33:21.989]                           quietly = TRUE)
[10:33:21.989]                         if (has_future) {
[10:33:21.989]                           ns <- base::getNamespace("future")
[10:33:21.989]                           version <- ns[[".package"]][["version"]]
[10:33:21.989]                           if (is.null(version)) 
[10:33:21.989]                             version <- utils::packageVersion("future")
[10:33:21.989]                         }
[10:33:21.989]                         else {
[10:33:21.989]                           version <- NULL
[10:33:21.989]                         }
[10:33:21.989]                         if (!has_future || version < "1.8.0") {
[10:33:21.989]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:21.989]                             "", base::R.version$version.string), 
[10:33:21.989]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:21.989]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:21.989]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:21.989]                               "release", "version")], collapse = " "), 
[10:33:21.989]                             hostname = base::Sys.info()[["nodename"]])
[10:33:21.989]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:21.989]                             info)
[10:33:21.989]                           info <- base::paste(info, collapse = "; ")
[10:33:21.989]                           if (!has_future) {
[10:33:21.989]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:21.989]                               info)
[10:33:21.989]                           }
[10:33:21.989]                           else {
[10:33:21.989]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:21.989]                               info, version)
[10:33:21.989]                           }
[10:33:21.989]                           base::stop(msg)
[10:33:21.989]                         }
[10:33:21.989]                       })
[10:33:21.989]                     }
[10:33:21.989]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:21.989]                     base::options(mc.cores = 1L)
[10:33:21.989]                   }
[10:33:21.989]                   ...future.strategy.old <- future::plan("list")
[10:33:21.989]                   options(future.plan = NULL)
[10:33:21.989]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.989]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:21.989]                 }
[10:33:21.989]                 ...future.workdir <- getwd()
[10:33:21.989]             }
[10:33:21.989]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:21.989]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:21.989]         }
[10:33:21.989]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:21.989]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:21.989]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:21.989]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:21.989]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:21.989]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:21.989]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:21.989]             base::names(...future.oldOptions))
[10:33:21.989]     }
[10:33:21.989]     if (FALSE) {
[10:33:21.989]     }
[10:33:21.989]     else {
[10:33:21.989]         if (TRUE) {
[10:33:21.989]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:21.989]                 open = "w")
[10:33:21.989]         }
[10:33:21.989]         else {
[10:33:21.989]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:21.989]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:21.989]         }
[10:33:21.989]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:21.989]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:21.989]             base::sink(type = "output", split = FALSE)
[10:33:21.989]             base::close(...future.stdout)
[10:33:21.989]         }, add = TRUE)
[10:33:21.989]     }
[10:33:21.989]     ...future.frame <- base::sys.nframe()
[10:33:21.989]     ...future.conditions <- base::list()
[10:33:21.989]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:21.989]     if (FALSE) {
[10:33:21.989]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:21.989]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:21.989]     }
[10:33:21.989]     ...future.result <- base::tryCatch({
[10:33:21.989]         base::withCallingHandlers({
[10:33:21.989]             ...future.value <- base::withVisible(base::local({
[10:33:21.989]                 ...future.makeSendCondition <- base::local({
[10:33:21.989]                   sendCondition <- NULL
[10:33:21.989]                   function(frame = 1L) {
[10:33:21.989]                     if (is.function(sendCondition)) 
[10:33:21.989]                       return(sendCondition)
[10:33:21.989]                     ns <- getNamespace("parallel")
[10:33:21.989]                     if (exists("sendData", mode = "function", 
[10:33:21.989]                       envir = ns)) {
[10:33:21.989]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:21.989]                         envir = ns)
[10:33:21.989]                       envir <- sys.frame(frame)
[10:33:21.989]                       master <- NULL
[10:33:21.989]                       while (!identical(envir, .GlobalEnv) && 
[10:33:21.989]                         !identical(envir, emptyenv())) {
[10:33:21.989]                         if (exists("master", mode = "list", envir = envir, 
[10:33:21.989]                           inherits = FALSE)) {
[10:33:21.989]                           master <- get("master", mode = "list", 
[10:33:21.989]                             envir = envir, inherits = FALSE)
[10:33:21.989]                           if (inherits(master, c("SOCKnode", 
[10:33:21.989]                             "SOCK0node"))) {
[10:33:21.989]                             sendCondition <<- function(cond) {
[10:33:21.989]                               data <- list(type = "VALUE", value = cond, 
[10:33:21.989]                                 success = TRUE)
[10:33:21.989]                               parallel_sendData(master, data)
[10:33:21.989]                             }
[10:33:21.989]                             return(sendCondition)
[10:33:21.989]                           }
[10:33:21.989]                         }
[10:33:21.989]                         frame <- frame + 1L
[10:33:21.989]                         envir <- sys.frame(frame)
[10:33:21.989]                       }
[10:33:21.989]                     }
[10:33:21.989]                     sendCondition <<- function(cond) NULL
[10:33:21.989]                   }
[10:33:21.989]                 })
[10:33:21.989]                 withCallingHandlers({
[10:33:21.989]                   {
[10:33:21.989]                     f1$owner
[10:33:21.989]                   }
[10:33:21.989]                 }, immediateCondition = function(cond) {
[10:33:21.989]                   sendCondition <- ...future.makeSendCondition()
[10:33:21.989]                   sendCondition(cond)
[10:33:21.989]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.989]                   {
[10:33:21.989]                     inherits <- base::inherits
[10:33:21.989]                     invokeRestart <- base::invokeRestart
[10:33:21.989]                     is.null <- base::is.null
[10:33:21.989]                     muffled <- FALSE
[10:33:21.989]                     if (inherits(cond, "message")) {
[10:33:21.989]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:21.989]                       if (muffled) 
[10:33:21.989]                         invokeRestart("muffleMessage")
[10:33:21.989]                     }
[10:33:21.989]                     else if (inherits(cond, "warning")) {
[10:33:21.989]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:21.989]                       if (muffled) 
[10:33:21.989]                         invokeRestart("muffleWarning")
[10:33:21.989]                     }
[10:33:21.989]                     else if (inherits(cond, "condition")) {
[10:33:21.989]                       if (!is.null(pattern)) {
[10:33:21.989]                         computeRestarts <- base::computeRestarts
[10:33:21.989]                         grepl <- base::grepl
[10:33:21.989]                         restarts <- computeRestarts(cond)
[10:33:21.989]                         for (restart in restarts) {
[10:33:21.989]                           name <- restart$name
[10:33:21.989]                           if (is.null(name)) 
[10:33:21.989]                             next
[10:33:21.989]                           if (!grepl(pattern, name)) 
[10:33:21.989]                             next
[10:33:21.989]                           invokeRestart(restart)
[10:33:21.989]                           muffled <- TRUE
[10:33:21.989]                           break
[10:33:21.989]                         }
[10:33:21.989]                       }
[10:33:21.989]                     }
[10:33:21.989]                     invisible(muffled)
[10:33:21.989]                   }
[10:33:21.989]                   muffleCondition(cond)
[10:33:21.989]                 })
[10:33:21.989]             }))
[10:33:21.989]             future::FutureResult(value = ...future.value$value, 
[10:33:21.989]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.989]                   ...future.rng), globalenv = if (FALSE) 
[10:33:21.989]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:21.989]                     ...future.globalenv.names))
[10:33:21.989]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:21.989]         }, condition = base::local({
[10:33:21.989]             c <- base::c
[10:33:21.989]             inherits <- base::inherits
[10:33:21.989]             invokeRestart <- base::invokeRestart
[10:33:21.989]             length <- base::length
[10:33:21.989]             list <- base::list
[10:33:21.989]             seq.int <- base::seq.int
[10:33:21.989]             signalCondition <- base::signalCondition
[10:33:21.989]             sys.calls <- base::sys.calls
[10:33:21.989]             `[[` <- base::`[[`
[10:33:21.989]             `+` <- base::`+`
[10:33:21.989]             `<<-` <- base::`<<-`
[10:33:21.989]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:21.989]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:21.989]                   3L)]
[10:33:21.989]             }
[10:33:21.989]             function(cond) {
[10:33:21.989]                 is_error <- inherits(cond, "error")
[10:33:21.989]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:21.989]                   NULL)
[10:33:21.989]                 if (is_error) {
[10:33:21.989]                   sessionInformation <- function() {
[10:33:21.989]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:21.989]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:21.989]                       search = base::search(), system = base::Sys.info())
[10:33:21.989]                   }
[10:33:21.989]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.989]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:21.989]                     cond$call), session = sessionInformation(), 
[10:33:21.989]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:21.989]                   signalCondition(cond)
[10:33:21.989]                 }
[10:33:21.989]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:21.989]                 "immediateCondition"))) {
[10:33:21.989]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:21.989]                   ...future.conditions[[length(...future.conditions) + 
[10:33:21.989]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:21.989]                   if (TRUE && !signal) {
[10:33:21.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.989]                     {
[10:33:21.989]                       inherits <- base::inherits
[10:33:21.989]                       invokeRestart <- base::invokeRestart
[10:33:21.989]                       is.null <- base::is.null
[10:33:21.989]                       muffled <- FALSE
[10:33:21.989]                       if (inherits(cond, "message")) {
[10:33:21.989]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.989]                         if (muffled) 
[10:33:21.989]                           invokeRestart("muffleMessage")
[10:33:21.989]                       }
[10:33:21.989]                       else if (inherits(cond, "warning")) {
[10:33:21.989]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.989]                         if (muffled) 
[10:33:21.989]                           invokeRestart("muffleWarning")
[10:33:21.989]                       }
[10:33:21.989]                       else if (inherits(cond, "condition")) {
[10:33:21.989]                         if (!is.null(pattern)) {
[10:33:21.989]                           computeRestarts <- base::computeRestarts
[10:33:21.989]                           grepl <- base::grepl
[10:33:21.989]                           restarts <- computeRestarts(cond)
[10:33:21.989]                           for (restart in restarts) {
[10:33:21.989]                             name <- restart$name
[10:33:21.989]                             if (is.null(name)) 
[10:33:21.989]                               next
[10:33:21.989]                             if (!grepl(pattern, name)) 
[10:33:21.989]                               next
[10:33:21.989]                             invokeRestart(restart)
[10:33:21.989]                             muffled <- TRUE
[10:33:21.989]                             break
[10:33:21.989]                           }
[10:33:21.989]                         }
[10:33:21.989]                       }
[10:33:21.989]                       invisible(muffled)
[10:33:21.989]                     }
[10:33:21.989]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.989]                   }
[10:33:21.989]                 }
[10:33:21.989]                 else {
[10:33:21.989]                   if (TRUE) {
[10:33:21.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:21.989]                     {
[10:33:21.989]                       inherits <- base::inherits
[10:33:21.989]                       invokeRestart <- base::invokeRestart
[10:33:21.989]                       is.null <- base::is.null
[10:33:21.989]                       muffled <- FALSE
[10:33:21.989]                       if (inherits(cond, "message")) {
[10:33:21.989]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:21.989]                         if (muffled) 
[10:33:21.989]                           invokeRestart("muffleMessage")
[10:33:21.989]                       }
[10:33:21.989]                       else if (inherits(cond, "warning")) {
[10:33:21.989]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:21.989]                         if (muffled) 
[10:33:21.989]                           invokeRestart("muffleWarning")
[10:33:21.989]                       }
[10:33:21.989]                       else if (inherits(cond, "condition")) {
[10:33:21.989]                         if (!is.null(pattern)) {
[10:33:21.989]                           computeRestarts <- base::computeRestarts
[10:33:21.989]                           grepl <- base::grepl
[10:33:21.989]                           restarts <- computeRestarts(cond)
[10:33:21.989]                           for (restart in restarts) {
[10:33:21.989]                             name <- restart$name
[10:33:21.989]                             if (is.null(name)) 
[10:33:21.989]                               next
[10:33:21.989]                             if (!grepl(pattern, name)) 
[10:33:21.989]                               next
[10:33:21.989]                             invokeRestart(restart)
[10:33:21.989]                             muffled <- TRUE
[10:33:21.989]                             break
[10:33:21.989]                           }
[10:33:21.989]                         }
[10:33:21.989]                       }
[10:33:21.989]                       invisible(muffled)
[10:33:21.989]                     }
[10:33:21.989]                     muffleCondition(cond, pattern = "^muffle")
[10:33:21.989]                   }
[10:33:21.989]                 }
[10:33:21.989]             }
[10:33:21.989]         }))
[10:33:21.989]     }, error = function(ex) {
[10:33:21.989]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:21.989]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:21.989]                 ...future.rng), started = ...future.startTime, 
[10:33:21.989]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:21.989]             version = "1.8"), class = "FutureResult")
[10:33:21.989]     }, finally = {
[10:33:21.989]         if (!identical(...future.workdir, getwd())) 
[10:33:21.989]             setwd(...future.workdir)
[10:33:21.989]         {
[10:33:21.989]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:21.989]                 ...future.oldOptions$nwarnings <- NULL
[10:33:21.989]             }
[10:33:21.989]             base::options(...future.oldOptions)
[10:33:21.989]             if (.Platform$OS.type == "windows") {
[10:33:21.989]                 old_names <- names(...future.oldEnvVars)
[10:33:21.989]                 envs <- base::Sys.getenv()
[10:33:21.989]                 names <- names(envs)
[10:33:21.989]                 common <- intersect(names, old_names)
[10:33:21.989]                 added <- setdiff(names, old_names)
[10:33:21.989]                 removed <- setdiff(old_names, names)
[10:33:21.989]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:21.989]                   envs[common]]
[10:33:21.989]                 NAMES <- toupper(changed)
[10:33:21.989]                 args <- list()
[10:33:21.989]                 for (kk in seq_along(NAMES)) {
[10:33:21.989]                   name <- changed[[kk]]
[10:33:21.989]                   NAME <- NAMES[[kk]]
[10:33:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.989]                     next
[10:33:21.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.989]                 }
[10:33:21.989]                 NAMES <- toupper(added)
[10:33:21.989]                 for (kk in seq_along(NAMES)) {
[10:33:21.989]                   name <- added[[kk]]
[10:33:21.989]                   NAME <- NAMES[[kk]]
[10:33:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.989]                     next
[10:33:21.989]                   args[[name]] <- ""
[10:33:21.989]                 }
[10:33:21.989]                 NAMES <- toupper(removed)
[10:33:21.989]                 for (kk in seq_along(NAMES)) {
[10:33:21.989]                   name <- removed[[kk]]
[10:33:21.989]                   NAME <- NAMES[[kk]]
[10:33:21.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:21.989]                     next
[10:33:21.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:21.989]                 }
[10:33:21.989]                 if (length(args) > 0) 
[10:33:21.989]                   base::do.call(base::Sys.setenv, args = args)
[10:33:21.989]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:21.989]             }
[10:33:21.989]             else {
[10:33:21.989]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:21.989]             }
[10:33:21.989]             {
[10:33:21.989]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:21.989]                   0L) {
[10:33:21.989]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:21.989]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:21.989]                   base::options(opts)
[10:33:21.989]                 }
[10:33:21.989]                 {
[10:33:21.989]                   {
[10:33:21.989]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:21.989]                     NULL
[10:33:21.989]                   }
[10:33:21.989]                   options(future.plan = NULL)
[10:33:21.989]                   if (is.na(NA_character_)) 
[10:33:21.989]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:21.989]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:21.989]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:21.989]                     .init = FALSE)
[10:33:21.989]                 }
[10:33:21.989]             }
[10:33:21.989]         }
[10:33:21.989]     })
[10:33:21.989]     if (TRUE) {
[10:33:21.989]         base::sink(type = "output", split = FALSE)
[10:33:21.989]         if (TRUE) {
[10:33:21.989]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:21.989]         }
[10:33:21.989]         else {
[10:33:21.989]             ...future.result["stdout"] <- base::list(NULL)
[10:33:21.989]         }
[10:33:21.989]         base::close(...future.stdout)
[10:33:21.989]         ...future.stdout <- NULL
[10:33:21.989]     }
[10:33:21.989]     ...future.result$conditions <- ...future.conditions
[10:33:21.989]     ...future.result$finished <- base::Sys.time()
[10:33:21.989]     ...future.result
[10:33:21.989] }
[10:33:21.991] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[10:33:21.993] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[10:33:22.045] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[10:33:22.045] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[10:33:22.046] MultisessionFuture started
[10:33:22.046] - Launch lazy future ... done
[10:33:22.046] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[10:33:22.046] result() for ClusterFuture ...
[10:33:22.046] receiveMessageFromWorker() for ClusterFuture ...
[10:33:22.046] - Validating connection of MultisessionFuture
[10:33:22.091] - received message: FutureResult
[10:33:22.091] - Received FutureResult
[10:33:22.091] - Erased future from FutureRegistry
[10:33:22.091] result() for ClusterFuture ...
[10:33:22.091] - result already collected: FutureResult
[10:33:22.091] result() for ClusterFuture ... done
[10:33:22.091] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:22.092] result() for ClusterFuture ... done
[10:33:22.092] result() for ClusterFuture ...
[10:33:22.092] - result already collected: FutureResult
[10:33:22.092] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 0f4531d3-011c-b377-6e01-51eb2087ff5b
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[10:33:22.092] getGlobalsAndPackages() ...
[10:33:22.092] Searching for globals...
[10:33:22.093] - globals found: [3] ‘{’, ‘$’, ‘f1’
[10:33:22.093] Searching for globals ... DONE
[10:33:22.093] Resolving globals: FALSE
[10:33:22.096] The total size of the 1 globals is 1.56 MiB (1640512 bytes)
[10:33:22.096] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:33:22.096] - globals: [1] ‘f1’
[10:33:22.096] 
[10:33:22.096] getGlobalsAndPackages() ... DONE
[10:33:22.097] run() for ‘Future’ ...
[10:33:22.097] - state: ‘created’
[10:33:22.097] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:22.108] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:22.108] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:22.108]   - Field: ‘node’
[10:33:22.108]   - Field: ‘label’
[10:33:22.108]   - Field: ‘local’
[10:33:22.108]   - Field: ‘owner’
[10:33:22.108]   - Field: ‘envir’
[10:33:22.108]   - Field: ‘workers’
[10:33:22.108]   - Field: ‘packages’
[10:33:22.109]   - Field: ‘gc’
[10:33:22.109]   - Field: ‘conditions’
[10:33:22.109]   - Field: ‘persistent’
[10:33:22.109]   - Field: ‘expr’
[10:33:22.109]   - Field: ‘uuid’
[10:33:22.109]   - Field: ‘seed’
[10:33:22.109]   - Field: ‘version’
[10:33:22.109]   - Field: ‘result’
[10:33:22.109]   - Field: ‘asynchronous’
[10:33:22.109]   - Field: ‘calls’
[10:33:22.109]   - Field: ‘globals’
[10:33:22.110]   - Field: ‘stdout’
[10:33:22.110]   - Field: ‘earlySignal’
[10:33:22.110]   - Field: ‘lazy’
[10:33:22.110]   - Field: ‘state’
[10:33:22.110] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:22.110] - Launch lazy future ...
[10:33:22.110] Packages needed by the future expression (n = 0): <none>
[10:33:22.110] Packages needed by future strategies (n = 0): <none>
[10:33:22.111] {
[10:33:22.111]     {
[10:33:22.111]         {
[10:33:22.111]             ...future.startTime <- base::Sys.time()
[10:33:22.111]             {
[10:33:22.111]                 {
[10:33:22.111]                   {
[10:33:22.111]                     {
[10:33:22.111]                       base::local({
[10:33:22.111]                         has_future <- base::requireNamespace("future", 
[10:33:22.111]                           quietly = TRUE)
[10:33:22.111]                         if (has_future) {
[10:33:22.111]                           ns <- base::getNamespace("future")
[10:33:22.111]                           version <- ns[[".package"]][["version"]]
[10:33:22.111]                           if (is.null(version)) 
[10:33:22.111]                             version <- utils::packageVersion("future")
[10:33:22.111]                         }
[10:33:22.111]                         else {
[10:33:22.111]                           version <- NULL
[10:33:22.111]                         }
[10:33:22.111]                         if (!has_future || version < "1.8.0") {
[10:33:22.111]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:22.111]                             "", base::R.version$version.string), 
[10:33:22.111]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:22.111]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:22.111]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:22.111]                               "release", "version")], collapse = " "), 
[10:33:22.111]                             hostname = base::Sys.info()[["nodename"]])
[10:33:22.111]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:22.111]                             info)
[10:33:22.111]                           info <- base::paste(info, collapse = "; ")
[10:33:22.111]                           if (!has_future) {
[10:33:22.111]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:22.111]                               info)
[10:33:22.111]                           }
[10:33:22.111]                           else {
[10:33:22.111]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:22.111]                               info, version)
[10:33:22.111]                           }
[10:33:22.111]                           base::stop(msg)
[10:33:22.111]                         }
[10:33:22.111]                       })
[10:33:22.111]                     }
[10:33:22.111]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:22.111]                     base::options(mc.cores = 1L)
[10:33:22.111]                   }
[10:33:22.111]                   ...future.strategy.old <- future::plan("list")
[10:33:22.111]                   options(future.plan = NULL)
[10:33:22.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.111]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:22.111]                 }
[10:33:22.111]                 ...future.workdir <- getwd()
[10:33:22.111]             }
[10:33:22.111]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:22.111]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:22.111]         }
[10:33:22.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:22.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:22.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:22.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:22.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:22.111]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:22.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:22.111]             base::names(...future.oldOptions))
[10:33:22.111]     }
[10:33:22.111]     if (FALSE) {
[10:33:22.111]     }
[10:33:22.111]     else {
[10:33:22.111]         if (TRUE) {
[10:33:22.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:22.111]                 open = "w")
[10:33:22.111]         }
[10:33:22.111]         else {
[10:33:22.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:22.111]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:22.111]         }
[10:33:22.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:22.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:22.111]             base::sink(type = "output", split = FALSE)
[10:33:22.111]             base::close(...future.stdout)
[10:33:22.111]         }, add = TRUE)
[10:33:22.111]     }
[10:33:22.111]     ...future.frame <- base::sys.nframe()
[10:33:22.111]     ...future.conditions <- base::list()
[10:33:22.111]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:22.111]     if (FALSE) {
[10:33:22.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:22.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:22.111]     }
[10:33:22.111]     ...future.result <- base::tryCatch({
[10:33:22.111]         base::withCallingHandlers({
[10:33:22.111]             ...future.value <- base::withVisible(base::local({
[10:33:22.111]                 ...future.makeSendCondition <- base::local({
[10:33:22.111]                   sendCondition <- NULL
[10:33:22.111]                   function(frame = 1L) {
[10:33:22.111]                     if (is.function(sendCondition)) 
[10:33:22.111]                       return(sendCondition)
[10:33:22.111]                     ns <- getNamespace("parallel")
[10:33:22.111]                     if (exists("sendData", mode = "function", 
[10:33:22.111]                       envir = ns)) {
[10:33:22.111]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:22.111]                         envir = ns)
[10:33:22.111]                       envir <- sys.frame(frame)
[10:33:22.111]                       master <- NULL
[10:33:22.111]                       while (!identical(envir, .GlobalEnv) && 
[10:33:22.111]                         !identical(envir, emptyenv())) {
[10:33:22.111]                         if (exists("master", mode = "list", envir = envir, 
[10:33:22.111]                           inherits = FALSE)) {
[10:33:22.111]                           master <- get("master", mode = "list", 
[10:33:22.111]                             envir = envir, inherits = FALSE)
[10:33:22.111]                           if (inherits(master, c("SOCKnode", 
[10:33:22.111]                             "SOCK0node"))) {
[10:33:22.111]                             sendCondition <<- function(cond) {
[10:33:22.111]                               data <- list(type = "VALUE", value = cond, 
[10:33:22.111]                                 success = TRUE)
[10:33:22.111]                               parallel_sendData(master, data)
[10:33:22.111]                             }
[10:33:22.111]                             return(sendCondition)
[10:33:22.111]                           }
[10:33:22.111]                         }
[10:33:22.111]                         frame <- frame + 1L
[10:33:22.111]                         envir <- sys.frame(frame)
[10:33:22.111]                       }
[10:33:22.111]                     }
[10:33:22.111]                     sendCondition <<- function(cond) NULL
[10:33:22.111]                   }
[10:33:22.111]                 })
[10:33:22.111]                 withCallingHandlers({
[10:33:22.111]                   {
[10:33:22.111]                     f1$owner
[10:33:22.111]                   }
[10:33:22.111]                 }, immediateCondition = function(cond) {
[10:33:22.111]                   sendCondition <- ...future.makeSendCondition()
[10:33:22.111]                   sendCondition(cond)
[10:33:22.111]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.111]                   {
[10:33:22.111]                     inherits <- base::inherits
[10:33:22.111]                     invokeRestart <- base::invokeRestart
[10:33:22.111]                     is.null <- base::is.null
[10:33:22.111]                     muffled <- FALSE
[10:33:22.111]                     if (inherits(cond, "message")) {
[10:33:22.111]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:22.111]                       if (muffled) 
[10:33:22.111]                         invokeRestart("muffleMessage")
[10:33:22.111]                     }
[10:33:22.111]                     else if (inherits(cond, "warning")) {
[10:33:22.111]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:22.111]                       if (muffled) 
[10:33:22.111]                         invokeRestart("muffleWarning")
[10:33:22.111]                     }
[10:33:22.111]                     else if (inherits(cond, "condition")) {
[10:33:22.111]                       if (!is.null(pattern)) {
[10:33:22.111]                         computeRestarts <- base::computeRestarts
[10:33:22.111]                         grepl <- base::grepl
[10:33:22.111]                         restarts <- computeRestarts(cond)
[10:33:22.111]                         for (restart in restarts) {
[10:33:22.111]                           name <- restart$name
[10:33:22.111]                           if (is.null(name)) 
[10:33:22.111]                             next
[10:33:22.111]                           if (!grepl(pattern, name)) 
[10:33:22.111]                             next
[10:33:22.111]                           invokeRestart(restart)
[10:33:22.111]                           muffled <- TRUE
[10:33:22.111]                           break
[10:33:22.111]                         }
[10:33:22.111]                       }
[10:33:22.111]                     }
[10:33:22.111]                     invisible(muffled)
[10:33:22.111]                   }
[10:33:22.111]                   muffleCondition(cond)
[10:33:22.111]                 })
[10:33:22.111]             }))
[10:33:22.111]             future::FutureResult(value = ...future.value$value, 
[10:33:22.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.111]                   ...future.rng), globalenv = if (FALSE) 
[10:33:22.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:22.111]                     ...future.globalenv.names))
[10:33:22.111]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:22.111]         }, condition = base::local({
[10:33:22.111]             c <- base::c
[10:33:22.111]             inherits <- base::inherits
[10:33:22.111]             invokeRestart <- base::invokeRestart
[10:33:22.111]             length <- base::length
[10:33:22.111]             list <- base::list
[10:33:22.111]             seq.int <- base::seq.int
[10:33:22.111]             signalCondition <- base::signalCondition
[10:33:22.111]             sys.calls <- base::sys.calls
[10:33:22.111]             `[[` <- base::`[[`
[10:33:22.111]             `+` <- base::`+`
[10:33:22.111]             `<<-` <- base::`<<-`
[10:33:22.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:22.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:22.111]                   3L)]
[10:33:22.111]             }
[10:33:22.111]             function(cond) {
[10:33:22.111]                 is_error <- inherits(cond, "error")
[10:33:22.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:22.111]                   NULL)
[10:33:22.111]                 if (is_error) {
[10:33:22.111]                   sessionInformation <- function() {
[10:33:22.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:22.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:22.111]                       search = base::search(), system = base::Sys.info())
[10:33:22.111]                   }
[10:33:22.111]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:22.111]                     cond$call), session = sessionInformation(), 
[10:33:22.111]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:22.111]                   signalCondition(cond)
[10:33:22.111]                 }
[10:33:22.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:22.111]                 "immediateCondition"))) {
[10:33:22.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:22.111]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:22.111]                   if (TRUE && !signal) {
[10:33:22.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.111]                     {
[10:33:22.111]                       inherits <- base::inherits
[10:33:22.111]                       invokeRestart <- base::invokeRestart
[10:33:22.111]                       is.null <- base::is.null
[10:33:22.111]                       muffled <- FALSE
[10:33:22.111]                       if (inherits(cond, "message")) {
[10:33:22.111]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.111]                         if (muffled) 
[10:33:22.111]                           invokeRestart("muffleMessage")
[10:33:22.111]                       }
[10:33:22.111]                       else if (inherits(cond, "warning")) {
[10:33:22.111]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.111]                         if (muffled) 
[10:33:22.111]                           invokeRestart("muffleWarning")
[10:33:22.111]                       }
[10:33:22.111]                       else if (inherits(cond, "condition")) {
[10:33:22.111]                         if (!is.null(pattern)) {
[10:33:22.111]                           computeRestarts <- base::computeRestarts
[10:33:22.111]                           grepl <- base::grepl
[10:33:22.111]                           restarts <- computeRestarts(cond)
[10:33:22.111]                           for (restart in restarts) {
[10:33:22.111]                             name <- restart$name
[10:33:22.111]                             if (is.null(name)) 
[10:33:22.111]                               next
[10:33:22.111]                             if (!grepl(pattern, name)) 
[10:33:22.111]                               next
[10:33:22.111]                             invokeRestart(restart)
[10:33:22.111]                             muffled <- TRUE
[10:33:22.111]                             break
[10:33:22.111]                           }
[10:33:22.111]                         }
[10:33:22.111]                       }
[10:33:22.111]                       invisible(muffled)
[10:33:22.111]                     }
[10:33:22.111]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.111]                   }
[10:33:22.111]                 }
[10:33:22.111]                 else {
[10:33:22.111]                   if (TRUE) {
[10:33:22.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.111]                     {
[10:33:22.111]                       inherits <- base::inherits
[10:33:22.111]                       invokeRestart <- base::invokeRestart
[10:33:22.111]                       is.null <- base::is.null
[10:33:22.111]                       muffled <- FALSE
[10:33:22.111]                       if (inherits(cond, "message")) {
[10:33:22.111]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.111]                         if (muffled) 
[10:33:22.111]                           invokeRestart("muffleMessage")
[10:33:22.111]                       }
[10:33:22.111]                       else if (inherits(cond, "warning")) {
[10:33:22.111]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.111]                         if (muffled) 
[10:33:22.111]                           invokeRestart("muffleWarning")
[10:33:22.111]                       }
[10:33:22.111]                       else if (inherits(cond, "condition")) {
[10:33:22.111]                         if (!is.null(pattern)) {
[10:33:22.111]                           computeRestarts <- base::computeRestarts
[10:33:22.111]                           grepl <- base::grepl
[10:33:22.111]                           restarts <- computeRestarts(cond)
[10:33:22.111]                           for (restart in restarts) {
[10:33:22.111]                             name <- restart$name
[10:33:22.111]                             if (is.null(name)) 
[10:33:22.111]                               next
[10:33:22.111]                             if (!grepl(pattern, name)) 
[10:33:22.111]                               next
[10:33:22.111]                             invokeRestart(restart)
[10:33:22.111]                             muffled <- TRUE
[10:33:22.111]                             break
[10:33:22.111]                           }
[10:33:22.111]                         }
[10:33:22.111]                       }
[10:33:22.111]                       invisible(muffled)
[10:33:22.111]                     }
[10:33:22.111]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.111]                   }
[10:33:22.111]                 }
[10:33:22.111]             }
[10:33:22.111]         }))
[10:33:22.111]     }, error = function(ex) {
[10:33:22.111]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:22.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.111]                 ...future.rng), started = ...future.startTime, 
[10:33:22.111]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:22.111]             version = "1.8"), class = "FutureResult")
[10:33:22.111]     }, finally = {
[10:33:22.111]         if (!identical(...future.workdir, getwd())) 
[10:33:22.111]             setwd(...future.workdir)
[10:33:22.111]         {
[10:33:22.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:22.111]                 ...future.oldOptions$nwarnings <- NULL
[10:33:22.111]             }
[10:33:22.111]             base::options(...future.oldOptions)
[10:33:22.111]             if (.Platform$OS.type == "windows") {
[10:33:22.111]                 old_names <- names(...future.oldEnvVars)
[10:33:22.111]                 envs <- base::Sys.getenv()
[10:33:22.111]                 names <- names(envs)
[10:33:22.111]                 common <- intersect(names, old_names)
[10:33:22.111]                 added <- setdiff(names, old_names)
[10:33:22.111]                 removed <- setdiff(old_names, names)
[10:33:22.111]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:22.111]                   envs[common]]
[10:33:22.111]                 NAMES <- toupper(changed)
[10:33:22.111]                 args <- list()
[10:33:22.111]                 for (kk in seq_along(NAMES)) {
[10:33:22.111]                   name <- changed[[kk]]
[10:33:22.111]                   NAME <- NAMES[[kk]]
[10:33:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.111]                     next
[10:33:22.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.111]                 }
[10:33:22.111]                 NAMES <- toupper(added)
[10:33:22.111]                 for (kk in seq_along(NAMES)) {
[10:33:22.111]                   name <- added[[kk]]
[10:33:22.111]                   NAME <- NAMES[[kk]]
[10:33:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.111]                     next
[10:33:22.111]                   args[[name]] <- ""
[10:33:22.111]                 }
[10:33:22.111]                 NAMES <- toupper(removed)
[10:33:22.111]                 for (kk in seq_along(NAMES)) {
[10:33:22.111]                   name <- removed[[kk]]
[10:33:22.111]                   NAME <- NAMES[[kk]]
[10:33:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.111]                     next
[10:33:22.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.111]                 }
[10:33:22.111]                 if (length(args) > 0) 
[10:33:22.111]                   base::do.call(base::Sys.setenv, args = args)
[10:33:22.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:22.111]             }
[10:33:22.111]             else {
[10:33:22.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:22.111]             }
[10:33:22.111]             {
[10:33:22.111]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:22.111]                   0L) {
[10:33:22.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:22.111]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:22.111]                   base::options(opts)
[10:33:22.111]                 }
[10:33:22.111]                 {
[10:33:22.111]                   {
[10:33:22.111]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:22.111]                     NULL
[10:33:22.111]                   }
[10:33:22.111]                   options(future.plan = NULL)
[10:33:22.111]                   if (is.na(NA_character_)) 
[10:33:22.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:22.111]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:22.111]                     .init = FALSE)
[10:33:22.111]                 }
[10:33:22.111]             }
[10:33:22.111]         }
[10:33:22.111]     })
[10:33:22.111]     if (TRUE) {
[10:33:22.111]         base::sink(type = "output", split = FALSE)
[10:33:22.111]         if (TRUE) {
[10:33:22.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:22.111]         }
[10:33:22.111]         else {
[10:33:22.111]             ...future.result["stdout"] <- base::list(NULL)
[10:33:22.111]         }
[10:33:22.111]         base::close(...future.stdout)
[10:33:22.111]         ...future.stdout <- NULL
[10:33:22.111]     }
[10:33:22.111]     ...future.result$conditions <- ...future.conditions
[10:33:22.111]     ...future.result$finished <- base::Sys.time()
[10:33:22.111]     ...future.result
[10:33:22.111] }
[10:33:22.113] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[10:33:22.115] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[10:33:22.165] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[10:33:22.165] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[10:33:22.166] MultisessionFuture started
[10:33:22.166] - Launch lazy future ... done
[10:33:22.166] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[10:33:22.166] result() for ClusterFuture ...
[10:33:22.167] receiveMessageFromWorker() for ClusterFuture ...
[10:33:22.167] - Validating connection of MultisessionFuture
[10:33:22.211] - received message: FutureResult
[10:33:22.211] - Received FutureResult
[10:33:22.211] - Erased future from FutureRegistry
[10:33:22.211] result() for ClusterFuture ...
[10:33:22.211] - result already collected: FutureResult
[10:33:22.211] result() for ClusterFuture ... done
[10:33:22.212] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:22.212] result() for ClusterFuture ... done
[10:33:22.212] result() for ClusterFuture ...
[10:33:22.212] - result already collected: FutureResult
[10:33:22.212] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 0f4531d3-011c-b377-6e01-51eb2087ff5b
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[10:33:22.212] getGlobalsAndPackages() ...
[10:33:22.212] Searching for globals...
[10:33:22.214] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[10:33:22.214] Searching for globals ... DONE
[10:33:22.214] Resolving globals: FALSE
[10:33:22.216] The total size of the 1 globals is 1.57 MiB (1643448 bytes)
[10:33:22.217] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.57 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.57 MiB of class ‘environment’)
[10:33:22.217] - globals: [1] ‘f1’
[10:33:22.217] 
[10:33:22.217] getGlobalsAndPackages() ... DONE
[10:33:22.217] run() for ‘Future’ ...
[10:33:22.217] - state: ‘created’
[10:33:22.218] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:22.228] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:22.228] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:22.228]   - Field: ‘node’
[10:33:22.228]   - Field: ‘label’
[10:33:22.228]   - Field: ‘local’
[10:33:22.229]   - Field: ‘owner’
[10:33:22.229]   - Field: ‘envir’
[10:33:22.229]   - Field: ‘workers’
[10:33:22.229]   - Field: ‘packages’
[10:33:22.229]   - Field: ‘gc’
[10:33:22.229]   - Field: ‘conditions’
[10:33:22.229]   - Field: ‘persistent’
[10:33:22.229]   - Field: ‘expr’
[10:33:22.229]   - Field: ‘uuid’
[10:33:22.229]   - Field: ‘seed’
[10:33:22.229]   - Field: ‘version’
[10:33:22.230]   - Field: ‘result’
[10:33:22.230]   - Field: ‘asynchronous’
[10:33:22.230]   - Field: ‘calls’
[10:33:22.230]   - Field: ‘globals’
[10:33:22.230]   - Field: ‘stdout’
[10:33:22.230]   - Field: ‘earlySignal’
[10:33:22.230]   - Field: ‘lazy’
[10:33:22.230]   - Field: ‘state’
[10:33:22.230] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:22.230] - Launch lazy future ...
[10:33:22.231] Packages needed by the future expression (n = 0): <none>
[10:33:22.231] Packages needed by future strategies (n = 0): <none>
[10:33:22.231] {
[10:33:22.231]     {
[10:33:22.231]         {
[10:33:22.231]             ...future.startTime <- base::Sys.time()
[10:33:22.231]             {
[10:33:22.231]                 {
[10:33:22.231]                   {
[10:33:22.231]                     {
[10:33:22.231]                       base::local({
[10:33:22.231]                         has_future <- base::requireNamespace("future", 
[10:33:22.231]                           quietly = TRUE)
[10:33:22.231]                         if (has_future) {
[10:33:22.231]                           ns <- base::getNamespace("future")
[10:33:22.231]                           version <- ns[[".package"]][["version"]]
[10:33:22.231]                           if (is.null(version)) 
[10:33:22.231]                             version <- utils::packageVersion("future")
[10:33:22.231]                         }
[10:33:22.231]                         else {
[10:33:22.231]                           version <- NULL
[10:33:22.231]                         }
[10:33:22.231]                         if (!has_future || version < "1.8.0") {
[10:33:22.231]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:22.231]                             "", base::R.version$version.string), 
[10:33:22.231]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:22.231]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:22.231]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:22.231]                               "release", "version")], collapse = " "), 
[10:33:22.231]                             hostname = base::Sys.info()[["nodename"]])
[10:33:22.231]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:22.231]                             info)
[10:33:22.231]                           info <- base::paste(info, collapse = "; ")
[10:33:22.231]                           if (!has_future) {
[10:33:22.231]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:22.231]                               info)
[10:33:22.231]                           }
[10:33:22.231]                           else {
[10:33:22.231]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:22.231]                               info, version)
[10:33:22.231]                           }
[10:33:22.231]                           base::stop(msg)
[10:33:22.231]                         }
[10:33:22.231]                       })
[10:33:22.231]                     }
[10:33:22.231]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:22.231]                     base::options(mc.cores = 1L)
[10:33:22.231]                   }
[10:33:22.231]                   ...future.strategy.old <- future::plan("list")
[10:33:22.231]                   options(future.plan = NULL)
[10:33:22.231]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.231]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:22.231]                 }
[10:33:22.231]                 ...future.workdir <- getwd()
[10:33:22.231]             }
[10:33:22.231]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:22.231]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:22.231]         }
[10:33:22.231]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:22.231]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:22.231]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:22.231]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:22.231]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:22.231]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:22.231]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:22.231]             base::names(...future.oldOptions))
[10:33:22.231]     }
[10:33:22.231]     if (FALSE) {
[10:33:22.231]     }
[10:33:22.231]     else {
[10:33:22.231]         if (TRUE) {
[10:33:22.231]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:22.231]                 open = "w")
[10:33:22.231]         }
[10:33:22.231]         else {
[10:33:22.231]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:22.231]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:22.231]         }
[10:33:22.231]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:22.231]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:22.231]             base::sink(type = "output", split = FALSE)
[10:33:22.231]             base::close(...future.stdout)
[10:33:22.231]         }, add = TRUE)
[10:33:22.231]     }
[10:33:22.231]     ...future.frame <- base::sys.nframe()
[10:33:22.231]     ...future.conditions <- base::list()
[10:33:22.231]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:22.231]     if (FALSE) {
[10:33:22.231]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:22.231]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:22.231]     }
[10:33:22.231]     ...future.result <- base::tryCatch({
[10:33:22.231]         base::withCallingHandlers({
[10:33:22.231]             ...future.value <- base::withVisible(base::local({
[10:33:22.231]                 ...future.makeSendCondition <- base::local({
[10:33:22.231]                   sendCondition <- NULL
[10:33:22.231]                   function(frame = 1L) {
[10:33:22.231]                     if (is.function(sendCondition)) 
[10:33:22.231]                       return(sendCondition)
[10:33:22.231]                     ns <- getNamespace("parallel")
[10:33:22.231]                     if (exists("sendData", mode = "function", 
[10:33:22.231]                       envir = ns)) {
[10:33:22.231]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:22.231]                         envir = ns)
[10:33:22.231]                       envir <- sys.frame(frame)
[10:33:22.231]                       master <- NULL
[10:33:22.231]                       while (!identical(envir, .GlobalEnv) && 
[10:33:22.231]                         !identical(envir, emptyenv())) {
[10:33:22.231]                         if (exists("master", mode = "list", envir = envir, 
[10:33:22.231]                           inherits = FALSE)) {
[10:33:22.231]                           master <- get("master", mode = "list", 
[10:33:22.231]                             envir = envir, inherits = FALSE)
[10:33:22.231]                           if (inherits(master, c("SOCKnode", 
[10:33:22.231]                             "SOCK0node"))) {
[10:33:22.231]                             sendCondition <<- function(cond) {
[10:33:22.231]                               data <- list(type = "VALUE", value = cond, 
[10:33:22.231]                                 success = TRUE)
[10:33:22.231]                               parallel_sendData(master, data)
[10:33:22.231]                             }
[10:33:22.231]                             return(sendCondition)
[10:33:22.231]                           }
[10:33:22.231]                         }
[10:33:22.231]                         frame <- frame + 1L
[10:33:22.231]                         envir <- sys.frame(frame)
[10:33:22.231]                       }
[10:33:22.231]                     }
[10:33:22.231]                     sendCondition <<- function(cond) NULL
[10:33:22.231]                   }
[10:33:22.231]                 })
[10:33:22.231]                 withCallingHandlers({
[10:33:22.231]                   {
[10:33:22.231]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[10:33:22.231]                     "not-owner"
[10:33:22.231]                   }
[10:33:22.231]                 }, immediateCondition = function(cond) {
[10:33:22.231]                   sendCondition <- ...future.makeSendCondition()
[10:33:22.231]                   sendCondition(cond)
[10:33:22.231]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.231]                   {
[10:33:22.231]                     inherits <- base::inherits
[10:33:22.231]                     invokeRestart <- base::invokeRestart
[10:33:22.231]                     is.null <- base::is.null
[10:33:22.231]                     muffled <- FALSE
[10:33:22.231]                     if (inherits(cond, "message")) {
[10:33:22.231]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:22.231]                       if (muffled) 
[10:33:22.231]                         invokeRestart("muffleMessage")
[10:33:22.231]                     }
[10:33:22.231]                     else if (inherits(cond, "warning")) {
[10:33:22.231]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:22.231]                       if (muffled) 
[10:33:22.231]                         invokeRestart("muffleWarning")
[10:33:22.231]                     }
[10:33:22.231]                     else if (inherits(cond, "condition")) {
[10:33:22.231]                       if (!is.null(pattern)) {
[10:33:22.231]                         computeRestarts <- base::computeRestarts
[10:33:22.231]                         grepl <- base::grepl
[10:33:22.231]                         restarts <- computeRestarts(cond)
[10:33:22.231]                         for (restart in restarts) {
[10:33:22.231]                           name <- restart$name
[10:33:22.231]                           if (is.null(name)) 
[10:33:22.231]                             next
[10:33:22.231]                           if (!grepl(pattern, name)) 
[10:33:22.231]                             next
[10:33:22.231]                           invokeRestart(restart)
[10:33:22.231]                           muffled <- TRUE
[10:33:22.231]                           break
[10:33:22.231]                         }
[10:33:22.231]                       }
[10:33:22.231]                     }
[10:33:22.231]                     invisible(muffled)
[10:33:22.231]                   }
[10:33:22.231]                   muffleCondition(cond)
[10:33:22.231]                 })
[10:33:22.231]             }))
[10:33:22.231]             future::FutureResult(value = ...future.value$value, 
[10:33:22.231]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.231]                   ...future.rng), globalenv = if (FALSE) 
[10:33:22.231]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:22.231]                     ...future.globalenv.names))
[10:33:22.231]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:22.231]         }, condition = base::local({
[10:33:22.231]             c <- base::c
[10:33:22.231]             inherits <- base::inherits
[10:33:22.231]             invokeRestart <- base::invokeRestart
[10:33:22.231]             length <- base::length
[10:33:22.231]             list <- base::list
[10:33:22.231]             seq.int <- base::seq.int
[10:33:22.231]             signalCondition <- base::signalCondition
[10:33:22.231]             sys.calls <- base::sys.calls
[10:33:22.231]             `[[` <- base::`[[`
[10:33:22.231]             `+` <- base::`+`
[10:33:22.231]             `<<-` <- base::`<<-`
[10:33:22.231]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:22.231]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:22.231]                   3L)]
[10:33:22.231]             }
[10:33:22.231]             function(cond) {
[10:33:22.231]                 is_error <- inherits(cond, "error")
[10:33:22.231]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:22.231]                   NULL)
[10:33:22.231]                 if (is_error) {
[10:33:22.231]                   sessionInformation <- function() {
[10:33:22.231]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:22.231]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:22.231]                       search = base::search(), system = base::Sys.info())
[10:33:22.231]                   }
[10:33:22.231]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.231]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:22.231]                     cond$call), session = sessionInformation(), 
[10:33:22.231]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:22.231]                   signalCondition(cond)
[10:33:22.231]                 }
[10:33:22.231]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:22.231]                 "immediateCondition"))) {
[10:33:22.231]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:22.231]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.231]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:22.231]                   if (TRUE && !signal) {
[10:33:22.231]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.231]                     {
[10:33:22.231]                       inherits <- base::inherits
[10:33:22.231]                       invokeRestart <- base::invokeRestart
[10:33:22.231]                       is.null <- base::is.null
[10:33:22.231]                       muffled <- FALSE
[10:33:22.231]                       if (inherits(cond, "message")) {
[10:33:22.231]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.231]                         if (muffled) 
[10:33:22.231]                           invokeRestart("muffleMessage")
[10:33:22.231]                       }
[10:33:22.231]                       else if (inherits(cond, "warning")) {
[10:33:22.231]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.231]                         if (muffled) 
[10:33:22.231]                           invokeRestart("muffleWarning")
[10:33:22.231]                       }
[10:33:22.231]                       else if (inherits(cond, "condition")) {
[10:33:22.231]                         if (!is.null(pattern)) {
[10:33:22.231]                           computeRestarts <- base::computeRestarts
[10:33:22.231]                           grepl <- base::grepl
[10:33:22.231]                           restarts <- computeRestarts(cond)
[10:33:22.231]                           for (restart in restarts) {
[10:33:22.231]                             name <- restart$name
[10:33:22.231]                             if (is.null(name)) 
[10:33:22.231]                               next
[10:33:22.231]                             if (!grepl(pattern, name)) 
[10:33:22.231]                               next
[10:33:22.231]                             invokeRestart(restart)
[10:33:22.231]                             muffled <- TRUE
[10:33:22.231]                             break
[10:33:22.231]                           }
[10:33:22.231]                         }
[10:33:22.231]                       }
[10:33:22.231]                       invisible(muffled)
[10:33:22.231]                     }
[10:33:22.231]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.231]                   }
[10:33:22.231]                 }
[10:33:22.231]                 else {
[10:33:22.231]                   if (TRUE) {
[10:33:22.231]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.231]                     {
[10:33:22.231]                       inherits <- base::inherits
[10:33:22.231]                       invokeRestart <- base::invokeRestart
[10:33:22.231]                       is.null <- base::is.null
[10:33:22.231]                       muffled <- FALSE
[10:33:22.231]                       if (inherits(cond, "message")) {
[10:33:22.231]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.231]                         if (muffled) 
[10:33:22.231]                           invokeRestart("muffleMessage")
[10:33:22.231]                       }
[10:33:22.231]                       else if (inherits(cond, "warning")) {
[10:33:22.231]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.231]                         if (muffled) 
[10:33:22.231]                           invokeRestart("muffleWarning")
[10:33:22.231]                       }
[10:33:22.231]                       else if (inherits(cond, "condition")) {
[10:33:22.231]                         if (!is.null(pattern)) {
[10:33:22.231]                           computeRestarts <- base::computeRestarts
[10:33:22.231]                           grepl <- base::grepl
[10:33:22.231]                           restarts <- computeRestarts(cond)
[10:33:22.231]                           for (restart in restarts) {
[10:33:22.231]                             name <- restart$name
[10:33:22.231]                             if (is.null(name)) 
[10:33:22.231]                               next
[10:33:22.231]                             if (!grepl(pattern, name)) 
[10:33:22.231]                               next
[10:33:22.231]                             invokeRestart(restart)
[10:33:22.231]                             muffled <- TRUE
[10:33:22.231]                             break
[10:33:22.231]                           }
[10:33:22.231]                         }
[10:33:22.231]                       }
[10:33:22.231]                       invisible(muffled)
[10:33:22.231]                     }
[10:33:22.231]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.231]                   }
[10:33:22.231]                 }
[10:33:22.231]             }
[10:33:22.231]         }))
[10:33:22.231]     }, error = function(ex) {
[10:33:22.231]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:22.231]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.231]                 ...future.rng), started = ...future.startTime, 
[10:33:22.231]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:22.231]             version = "1.8"), class = "FutureResult")
[10:33:22.231]     }, finally = {
[10:33:22.231]         if (!identical(...future.workdir, getwd())) 
[10:33:22.231]             setwd(...future.workdir)
[10:33:22.231]         {
[10:33:22.231]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:22.231]                 ...future.oldOptions$nwarnings <- NULL
[10:33:22.231]             }
[10:33:22.231]             base::options(...future.oldOptions)
[10:33:22.231]             if (.Platform$OS.type == "windows") {
[10:33:22.231]                 old_names <- names(...future.oldEnvVars)
[10:33:22.231]                 envs <- base::Sys.getenv()
[10:33:22.231]                 names <- names(envs)
[10:33:22.231]                 common <- intersect(names, old_names)
[10:33:22.231]                 added <- setdiff(names, old_names)
[10:33:22.231]                 removed <- setdiff(old_names, names)
[10:33:22.231]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:22.231]                   envs[common]]
[10:33:22.231]                 NAMES <- toupper(changed)
[10:33:22.231]                 args <- list()
[10:33:22.231]                 for (kk in seq_along(NAMES)) {
[10:33:22.231]                   name <- changed[[kk]]
[10:33:22.231]                   NAME <- NAMES[[kk]]
[10:33:22.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.231]                     next
[10:33:22.231]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.231]                 }
[10:33:22.231]                 NAMES <- toupper(added)
[10:33:22.231]                 for (kk in seq_along(NAMES)) {
[10:33:22.231]                   name <- added[[kk]]
[10:33:22.231]                   NAME <- NAMES[[kk]]
[10:33:22.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.231]                     next
[10:33:22.231]                   args[[name]] <- ""
[10:33:22.231]                 }
[10:33:22.231]                 NAMES <- toupper(removed)
[10:33:22.231]                 for (kk in seq_along(NAMES)) {
[10:33:22.231]                   name <- removed[[kk]]
[10:33:22.231]                   NAME <- NAMES[[kk]]
[10:33:22.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.231]                     next
[10:33:22.231]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.231]                 }
[10:33:22.231]                 if (length(args) > 0) 
[10:33:22.231]                   base::do.call(base::Sys.setenv, args = args)
[10:33:22.231]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:22.231]             }
[10:33:22.231]             else {
[10:33:22.231]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:22.231]             }
[10:33:22.231]             {
[10:33:22.231]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:22.231]                   0L) {
[10:33:22.231]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:22.231]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:22.231]                   base::options(opts)
[10:33:22.231]                 }
[10:33:22.231]                 {
[10:33:22.231]                   {
[10:33:22.231]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:22.231]                     NULL
[10:33:22.231]                   }
[10:33:22.231]                   options(future.plan = NULL)
[10:33:22.231]                   if (is.na(NA_character_)) 
[10:33:22.231]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.231]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:22.231]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:22.231]                     .init = FALSE)
[10:33:22.231]                 }
[10:33:22.231]             }
[10:33:22.231]         }
[10:33:22.231]     })
[10:33:22.231]     if (TRUE) {
[10:33:22.231]         base::sink(type = "output", split = FALSE)
[10:33:22.231]         if (TRUE) {
[10:33:22.231]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:22.231]         }
[10:33:22.231]         else {
[10:33:22.231]             ...future.result["stdout"] <- base::list(NULL)
[10:33:22.231]         }
[10:33:22.231]         base::close(...future.stdout)
[10:33:22.231]         ...future.stdout <- NULL
[10:33:22.231]     }
[10:33:22.231]     ...future.result$conditions <- ...future.conditions
[10:33:22.231]     ...future.result$finished <- base::Sys.time()
[10:33:22.231]     ...future.result
[10:33:22.231] }
[10:33:22.234] Exporting 1 global objects (1.57 MiB) to cluster node #1 ...
[10:33:22.237] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ...
[10:33:22.289] Exporting ‘f1’ (1.57 MiB) to cluster node #1 ... DONE
[10:33:22.289] Exporting 1 global objects (1.57 MiB) to cluster node #1 ... DONE
[10:33:22.290] MultisessionFuture started
[10:33:22.290] - Launch lazy future ... done
[10:33:22.290] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[10:33:22.290] result() for ClusterFuture ...
[10:33:22.291] receiveMessageFromWorker() for ClusterFuture ...
[10:33:22.291] - Validating connection of MultisessionFuture
[10:33:22.335] - received message: FutureResult
[10:33:22.335] - Received FutureResult
[10:33:22.335] - Erased future from FutureRegistry
[10:33:22.335] result() for ClusterFuture ...
[10:33:22.335] - result already collected: FutureResult
[10:33:22.335] result() for ClusterFuture ... done
[10:33:22.335] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:22.336] result() for ClusterFuture ... done
[10:33:22.336] result() for ClusterFuture ...
[10:33:22.336] - result already collected: FutureResult
[10:33:22.336] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[10:33:22.336] getGlobalsAndPackages() ...
[10:33:22.336] Searching for globals...
[10:33:22.337] - globals found: [1] ‘{’
[10:33:22.337] Searching for globals ... DONE
[10:33:22.337] Resolving globals: FALSE
[10:33:22.338] 
[10:33:22.338] 
[10:33:22.338] getGlobalsAndPackages() ... DONE
[10:33:22.338] run() for ‘Future’ ...
[10:33:22.338] - state: ‘created’
[10:33:22.338] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:22.349] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:22.349] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:22.349]   - Field: ‘node’
[10:33:22.349]   - Field: ‘label’
[10:33:22.349]   - Field: ‘local’
[10:33:22.349]   - Field: ‘owner’
[10:33:22.349]   - Field: ‘envir’
[10:33:22.349]   - Field: ‘workers’
[10:33:22.349]   - Field: ‘packages’
[10:33:22.350]   - Field: ‘gc’
[10:33:22.350]   - Field: ‘conditions’
[10:33:22.350]   - Field: ‘persistent’
[10:33:22.350]   - Field: ‘expr’
[10:33:22.350]   - Field: ‘uuid’
[10:33:22.350]   - Field: ‘seed’
[10:33:22.350]   - Field: ‘version’
[10:33:22.350]   - Field: ‘result’
[10:33:22.350]   - Field: ‘asynchronous’
[10:33:22.350]   - Field: ‘calls’
[10:33:22.350]   - Field: ‘globals’
[10:33:22.351]   - Field: ‘stdout’
[10:33:22.351]   - Field: ‘earlySignal’
[10:33:22.351]   - Field: ‘lazy’
[10:33:22.351]   - Field: ‘state’
[10:33:22.351] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:22.351] - Launch lazy future ...
[10:33:22.351] Packages needed by the future expression (n = 0): <none>
[10:33:22.351] Packages needed by future strategies (n = 0): <none>
[10:33:22.352] {
[10:33:22.352]     {
[10:33:22.352]         {
[10:33:22.352]             ...future.startTime <- base::Sys.time()
[10:33:22.352]             {
[10:33:22.352]                 {
[10:33:22.352]                   {
[10:33:22.352]                     {
[10:33:22.352]                       base::local({
[10:33:22.352]                         has_future <- base::requireNamespace("future", 
[10:33:22.352]                           quietly = TRUE)
[10:33:22.352]                         if (has_future) {
[10:33:22.352]                           ns <- base::getNamespace("future")
[10:33:22.352]                           version <- ns[[".package"]][["version"]]
[10:33:22.352]                           if (is.null(version)) 
[10:33:22.352]                             version <- utils::packageVersion("future")
[10:33:22.352]                         }
[10:33:22.352]                         else {
[10:33:22.352]                           version <- NULL
[10:33:22.352]                         }
[10:33:22.352]                         if (!has_future || version < "1.8.0") {
[10:33:22.352]                           info <- base::c(r_version = base::gsub("R version ", 
[10:33:22.352]                             "", base::R.version$version.string), 
[10:33:22.352]                             platform = base::sprintf("%s (%s-bit)", 
[10:33:22.352]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:33:22.352]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:22.352]                               "release", "version")], collapse = " "), 
[10:33:22.352]                             hostname = base::Sys.info()[["nodename"]])
[10:33:22.352]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:33:22.352]                             info)
[10:33:22.352]                           info <- base::paste(info, collapse = "; ")
[10:33:22.352]                           if (!has_future) {
[10:33:22.352]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:22.352]                               info)
[10:33:22.352]                           }
[10:33:22.352]                           else {
[10:33:22.352]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:22.352]                               info, version)
[10:33:22.352]                           }
[10:33:22.352]                           base::stop(msg)
[10:33:22.352]                         }
[10:33:22.352]                       })
[10:33:22.352]                     }
[10:33:22.352]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:22.352]                     base::options(mc.cores = 1L)
[10:33:22.352]                   }
[10:33:22.352]                   ...future.strategy.old <- future::plan("list")
[10:33:22.352]                   options(future.plan = NULL)
[10:33:22.352]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.352]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:22.352]                 }
[10:33:22.352]                 ...future.workdir <- getwd()
[10:33:22.352]             }
[10:33:22.352]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:22.352]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:22.352]         }
[10:33:22.352]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:22.352]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:22.352]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:22.352]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:22.352]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:22.352]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:22.352]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:22.352]             base::names(...future.oldOptions))
[10:33:22.352]     }
[10:33:22.352]     if (FALSE) {
[10:33:22.352]     }
[10:33:22.352]     else {
[10:33:22.352]         if (TRUE) {
[10:33:22.352]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:22.352]                 open = "w")
[10:33:22.352]         }
[10:33:22.352]         else {
[10:33:22.352]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:22.352]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:22.352]         }
[10:33:22.352]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:22.352]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:22.352]             base::sink(type = "output", split = FALSE)
[10:33:22.352]             base::close(...future.stdout)
[10:33:22.352]         }, add = TRUE)
[10:33:22.352]     }
[10:33:22.352]     ...future.frame <- base::sys.nframe()
[10:33:22.352]     ...future.conditions <- base::list()
[10:33:22.352]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:22.352]     if (FALSE) {
[10:33:22.352]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:22.352]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:22.352]     }
[10:33:22.352]     ...future.result <- base::tryCatch({
[10:33:22.352]         base::withCallingHandlers({
[10:33:22.352]             ...future.value <- base::withVisible(base::local({
[10:33:22.352]                 ...future.makeSendCondition <- base::local({
[10:33:22.352]                   sendCondition <- NULL
[10:33:22.352]                   function(frame = 1L) {
[10:33:22.352]                     if (is.function(sendCondition)) 
[10:33:22.352]                       return(sendCondition)
[10:33:22.352]                     ns <- getNamespace("parallel")
[10:33:22.352]                     if (exists("sendData", mode = "function", 
[10:33:22.352]                       envir = ns)) {
[10:33:22.352]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:22.352]                         envir = ns)
[10:33:22.352]                       envir <- sys.frame(frame)
[10:33:22.352]                       master <- NULL
[10:33:22.352]                       while (!identical(envir, .GlobalEnv) && 
[10:33:22.352]                         !identical(envir, emptyenv())) {
[10:33:22.352]                         if (exists("master", mode = "list", envir = envir, 
[10:33:22.352]                           inherits = FALSE)) {
[10:33:22.352]                           master <- get("master", mode = "list", 
[10:33:22.352]                             envir = envir, inherits = FALSE)
[10:33:22.352]                           if (inherits(master, c("SOCKnode", 
[10:33:22.352]                             "SOCK0node"))) {
[10:33:22.352]                             sendCondition <<- function(cond) {
[10:33:22.352]                               data <- list(type = "VALUE", value = cond, 
[10:33:22.352]                                 success = TRUE)
[10:33:22.352]                               parallel_sendData(master, data)
[10:33:22.352]                             }
[10:33:22.352]                             return(sendCondition)
[10:33:22.352]                           }
[10:33:22.352]                         }
[10:33:22.352]                         frame <- frame + 1L
[10:33:22.352]                         envir <- sys.frame(frame)
[10:33:22.352]                       }
[10:33:22.352]                     }
[10:33:22.352]                     sendCondition <<- function(cond) NULL
[10:33:22.352]                   }
[10:33:22.352]                 })
[10:33:22.352]                 withCallingHandlers({
[10:33:22.352]                   {
[10:33:22.352]                     42L
[10:33:22.352]                   }
[10:33:22.352]                 }, immediateCondition = function(cond) {
[10:33:22.352]                   sendCondition <- ...future.makeSendCondition()
[10:33:22.352]                   sendCondition(cond)
[10:33:22.352]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.352]                   {
[10:33:22.352]                     inherits <- base::inherits
[10:33:22.352]                     invokeRestart <- base::invokeRestart
[10:33:22.352]                     is.null <- base::is.null
[10:33:22.352]                     muffled <- FALSE
[10:33:22.352]                     if (inherits(cond, "message")) {
[10:33:22.352]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:22.352]                       if (muffled) 
[10:33:22.352]                         invokeRestart("muffleMessage")
[10:33:22.352]                     }
[10:33:22.352]                     else if (inherits(cond, "warning")) {
[10:33:22.352]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:22.352]                       if (muffled) 
[10:33:22.352]                         invokeRestart("muffleWarning")
[10:33:22.352]                     }
[10:33:22.352]                     else if (inherits(cond, "condition")) {
[10:33:22.352]                       if (!is.null(pattern)) {
[10:33:22.352]                         computeRestarts <- base::computeRestarts
[10:33:22.352]                         grepl <- base::grepl
[10:33:22.352]                         restarts <- computeRestarts(cond)
[10:33:22.352]                         for (restart in restarts) {
[10:33:22.352]                           name <- restart$name
[10:33:22.352]                           if (is.null(name)) 
[10:33:22.352]                             next
[10:33:22.352]                           if (!grepl(pattern, name)) 
[10:33:22.352]                             next
[10:33:22.352]                           invokeRestart(restart)
[10:33:22.352]                           muffled <- TRUE
[10:33:22.352]                           break
[10:33:22.352]                         }
[10:33:22.352]                       }
[10:33:22.352]                     }
[10:33:22.352]                     invisible(muffled)
[10:33:22.352]                   }
[10:33:22.352]                   muffleCondition(cond)
[10:33:22.352]                 })
[10:33:22.352]             }))
[10:33:22.352]             future::FutureResult(value = ...future.value$value, 
[10:33:22.352]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.352]                   ...future.rng), globalenv = if (FALSE) 
[10:33:22.352]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:22.352]                     ...future.globalenv.names))
[10:33:22.352]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:22.352]         }, condition = base::local({
[10:33:22.352]             c <- base::c
[10:33:22.352]             inherits <- base::inherits
[10:33:22.352]             invokeRestart <- base::invokeRestart
[10:33:22.352]             length <- base::length
[10:33:22.352]             list <- base::list
[10:33:22.352]             seq.int <- base::seq.int
[10:33:22.352]             signalCondition <- base::signalCondition
[10:33:22.352]             sys.calls <- base::sys.calls
[10:33:22.352]             `[[` <- base::`[[`
[10:33:22.352]             `+` <- base::`+`
[10:33:22.352]             `<<-` <- base::`<<-`
[10:33:22.352]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:22.352]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:22.352]                   3L)]
[10:33:22.352]             }
[10:33:22.352]             function(cond) {
[10:33:22.352]                 is_error <- inherits(cond, "error")
[10:33:22.352]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:22.352]                   NULL)
[10:33:22.352]                 if (is_error) {
[10:33:22.352]                   sessionInformation <- function() {
[10:33:22.352]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:22.352]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:22.352]                       search = base::search(), system = base::Sys.info())
[10:33:22.352]                   }
[10:33:22.352]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.352]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:22.352]                     cond$call), session = sessionInformation(), 
[10:33:22.352]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:22.352]                   signalCondition(cond)
[10:33:22.352]                 }
[10:33:22.352]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:22.352]                 "immediateCondition"))) {
[10:33:22.352]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:22.352]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.352]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:22.352]                   if (TRUE && !signal) {
[10:33:22.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.352]                     {
[10:33:22.352]                       inherits <- base::inherits
[10:33:22.352]                       invokeRestart <- base::invokeRestart
[10:33:22.352]                       is.null <- base::is.null
[10:33:22.352]                       muffled <- FALSE
[10:33:22.352]                       if (inherits(cond, "message")) {
[10:33:22.352]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.352]                         if (muffled) 
[10:33:22.352]                           invokeRestart("muffleMessage")
[10:33:22.352]                       }
[10:33:22.352]                       else if (inherits(cond, "warning")) {
[10:33:22.352]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.352]                         if (muffled) 
[10:33:22.352]                           invokeRestart("muffleWarning")
[10:33:22.352]                       }
[10:33:22.352]                       else if (inherits(cond, "condition")) {
[10:33:22.352]                         if (!is.null(pattern)) {
[10:33:22.352]                           computeRestarts <- base::computeRestarts
[10:33:22.352]                           grepl <- base::grepl
[10:33:22.352]                           restarts <- computeRestarts(cond)
[10:33:22.352]                           for (restart in restarts) {
[10:33:22.352]                             name <- restart$name
[10:33:22.352]                             if (is.null(name)) 
[10:33:22.352]                               next
[10:33:22.352]                             if (!grepl(pattern, name)) 
[10:33:22.352]                               next
[10:33:22.352]                             invokeRestart(restart)
[10:33:22.352]                             muffled <- TRUE
[10:33:22.352]                             break
[10:33:22.352]                           }
[10:33:22.352]                         }
[10:33:22.352]                       }
[10:33:22.352]                       invisible(muffled)
[10:33:22.352]                     }
[10:33:22.352]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.352]                   }
[10:33:22.352]                 }
[10:33:22.352]                 else {
[10:33:22.352]                   if (TRUE) {
[10:33:22.352]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.352]                     {
[10:33:22.352]                       inherits <- base::inherits
[10:33:22.352]                       invokeRestart <- base::invokeRestart
[10:33:22.352]                       is.null <- base::is.null
[10:33:22.352]                       muffled <- FALSE
[10:33:22.352]                       if (inherits(cond, "message")) {
[10:33:22.352]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.352]                         if (muffled) 
[10:33:22.352]                           invokeRestart("muffleMessage")
[10:33:22.352]                       }
[10:33:22.352]                       else if (inherits(cond, "warning")) {
[10:33:22.352]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.352]                         if (muffled) 
[10:33:22.352]                           invokeRestart("muffleWarning")
[10:33:22.352]                       }
[10:33:22.352]                       else if (inherits(cond, "condition")) {
[10:33:22.352]                         if (!is.null(pattern)) {
[10:33:22.352]                           computeRestarts <- base::computeRestarts
[10:33:22.352]                           grepl <- base::grepl
[10:33:22.352]                           restarts <- computeRestarts(cond)
[10:33:22.352]                           for (restart in restarts) {
[10:33:22.352]                             name <- restart$name
[10:33:22.352]                             if (is.null(name)) 
[10:33:22.352]                               next
[10:33:22.352]                             if (!grepl(pattern, name)) 
[10:33:22.352]                               next
[10:33:22.352]                             invokeRestart(restart)
[10:33:22.352]                             muffled <- TRUE
[10:33:22.352]                             break
[10:33:22.352]                           }
[10:33:22.352]                         }
[10:33:22.352]                       }
[10:33:22.352]                       invisible(muffled)
[10:33:22.352]                     }
[10:33:22.352]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.352]                   }
[10:33:22.352]                 }
[10:33:22.352]             }
[10:33:22.352]         }))
[10:33:22.352]     }, error = function(ex) {
[10:33:22.352]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:22.352]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.352]                 ...future.rng), started = ...future.startTime, 
[10:33:22.352]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:22.352]             version = "1.8"), class = "FutureResult")
[10:33:22.352]     }, finally = {
[10:33:22.352]         if (!identical(...future.workdir, getwd())) 
[10:33:22.352]             setwd(...future.workdir)
[10:33:22.352]         {
[10:33:22.352]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:22.352]                 ...future.oldOptions$nwarnings <- NULL
[10:33:22.352]             }
[10:33:22.352]             base::options(...future.oldOptions)
[10:33:22.352]             if (.Platform$OS.type == "windows") {
[10:33:22.352]                 old_names <- names(...future.oldEnvVars)
[10:33:22.352]                 envs <- base::Sys.getenv()
[10:33:22.352]                 names <- names(envs)
[10:33:22.352]                 common <- intersect(names, old_names)
[10:33:22.352]                 added <- setdiff(names, old_names)
[10:33:22.352]                 removed <- setdiff(old_names, names)
[10:33:22.352]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:22.352]                   envs[common]]
[10:33:22.352]                 NAMES <- toupper(changed)
[10:33:22.352]                 args <- list()
[10:33:22.352]                 for (kk in seq_along(NAMES)) {
[10:33:22.352]                   name <- changed[[kk]]
[10:33:22.352]                   NAME <- NAMES[[kk]]
[10:33:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.352]                     next
[10:33:22.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.352]                 }
[10:33:22.352]                 NAMES <- toupper(added)
[10:33:22.352]                 for (kk in seq_along(NAMES)) {
[10:33:22.352]                   name <- added[[kk]]
[10:33:22.352]                   NAME <- NAMES[[kk]]
[10:33:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.352]                     next
[10:33:22.352]                   args[[name]] <- ""
[10:33:22.352]                 }
[10:33:22.352]                 NAMES <- toupper(removed)
[10:33:22.352]                 for (kk in seq_along(NAMES)) {
[10:33:22.352]                   name <- removed[[kk]]
[10:33:22.352]                   NAME <- NAMES[[kk]]
[10:33:22.352]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.352]                     next
[10:33:22.352]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.352]                 }
[10:33:22.352]                 if (length(args) > 0) 
[10:33:22.352]                   base::do.call(base::Sys.setenv, args = args)
[10:33:22.352]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:22.352]             }
[10:33:22.352]             else {
[10:33:22.352]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:22.352]             }
[10:33:22.352]             {
[10:33:22.352]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:22.352]                   0L) {
[10:33:22.352]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:22.352]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:22.352]                   base::options(opts)
[10:33:22.352]                 }
[10:33:22.352]                 {
[10:33:22.352]                   {
[10:33:22.352]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:22.352]                     NULL
[10:33:22.352]                   }
[10:33:22.352]                   options(future.plan = NULL)
[10:33:22.352]                   if (is.na(NA_character_)) 
[10:33:22.352]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.352]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:22.352]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:22.352]                     .init = FALSE)
[10:33:22.352]                 }
[10:33:22.352]             }
[10:33:22.352]         }
[10:33:22.352]     })
[10:33:22.352]     if (TRUE) {
[10:33:22.352]         base::sink(type = "output", split = FALSE)
[10:33:22.352]         if (TRUE) {
[10:33:22.352]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:22.352]         }
[10:33:22.352]         else {
[10:33:22.352]             ...future.result["stdout"] <- base::list(NULL)
[10:33:22.352]         }
[10:33:22.352]         base::close(...future.stdout)
[10:33:22.352]         ...future.stdout <- NULL
[10:33:22.352]     }
[10:33:22.352]     ...future.result$conditions <- ...future.conditions
[10:33:22.352]     ...future.result$finished <- base::Sys.time()
[10:33:22.352]     ...future.result
[10:33:22.352] }
[10:33:22.355] MultisessionFuture started
[10:33:22.355] - Launch lazy future ... done
[10:33:22.355] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[10:33:22.355] getGlobalsAndPackages() ...
[10:33:22.356] Searching for globals...
[10:33:22.356] - globals found: [3] ‘{’, ‘value’, ‘f1’
[10:33:22.357] Searching for globals ... DONE
[10:33:22.357] Resolving globals: FALSE
[10:33:22.359] The total size of the 1 globals is 1.56 MiB (1635600 bytes)
[10:33:22.359] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:33:22.359] - globals: [1] ‘f1’
[10:33:22.359] - packages: [1] ‘future’
[10:33:22.359] getGlobalsAndPackages() ... DONE
[10:33:22.360] run() for ‘Future’ ...
[10:33:22.360] - state: ‘created’
[10:33:22.360] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:33:22.370] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:33:22.370] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:33:22.371]   - Field: ‘node’
[10:33:22.371]   - Field: ‘label’
[10:33:22.371]   - Field: ‘local’
[10:33:22.371]   - Field: ‘owner’
[10:33:22.371]   - Field: ‘envir’
[10:33:22.371]   - Field: ‘workers’
[10:33:22.371]   - Field: ‘packages’
[10:33:22.371]   - Field: ‘gc’
[10:33:22.371]   - Field: ‘conditions’
[10:33:22.371]   - Field: ‘persistent’
[10:33:22.371]   - Field: ‘expr’
[10:33:22.372]   - Field: ‘uuid’
[10:33:22.372]   - Field: ‘seed’
[10:33:22.372]   - Field: ‘version’
[10:33:22.372]   - Field: ‘result’
[10:33:22.372]   - Field: ‘asynchronous’
[10:33:22.372]   - Field: ‘calls’
[10:33:22.372]   - Field: ‘globals’
[10:33:22.372]   - Field: ‘stdout’
[10:33:22.372]   - Field: ‘earlySignal’
[10:33:22.372]   - Field: ‘lazy’
[10:33:22.372]   - Field: ‘state’
[10:33:22.373] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:33:22.373] - Launch lazy future ...
[10:33:22.373] Packages needed by the future expression (n = 1): ‘future’
[10:33:22.373] Packages needed by future strategies (n = 0): <none>
[10:33:22.374] {
[10:33:22.374]     {
[10:33:22.374]         {
[10:33:22.374]             ...future.startTime <- base::Sys.time()
[10:33:22.374]             {
[10:33:22.374]                 {
[10:33:22.374]                   {
[10:33:22.374]                     {
[10:33:22.374]                       {
[10:33:22.374]                         base::local({
[10:33:22.374]                           has_future <- base::requireNamespace("future", 
[10:33:22.374]                             quietly = TRUE)
[10:33:22.374]                           if (has_future) {
[10:33:22.374]                             ns <- base::getNamespace("future")
[10:33:22.374]                             version <- ns[[".package"]][["version"]]
[10:33:22.374]                             if (is.null(version)) 
[10:33:22.374]                               version <- utils::packageVersion("future")
[10:33:22.374]                           }
[10:33:22.374]                           else {
[10:33:22.374]                             version <- NULL
[10:33:22.374]                           }
[10:33:22.374]                           if (!has_future || version < "1.8.0") {
[10:33:22.374]                             info <- base::c(r_version = base::gsub("R version ", 
[10:33:22.374]                               "", base::R.version$version.string), 
[10:33:22.374]                               platform = base::sprintf("%s (%s-bit)", 
[10:33:22.374]                                 base::R.version$platform, 8 * 
[10:33:22.374]                                   base::.Machine$sizeof.pointer), 
[10:33:22.374]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:33:22.374]                                 "release", "version")], collapse = " "), 
[10:33:22.374]                               hostname = base::Sys.info()[["nodename"]])
[10:33:22.374]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:33:22.374]                               info)
[10:33:22.374]                             info <- base::paste(info, collapse = "; ")
[10:33:22.374]                             if (!has_future) {
[10:33:22.374]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:33:22.374]                                 info)
[10:33:22.374]                             }
[10:33:22.374]                             else {
[10:33:22.374]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:33:22.374]                                 info, version)
[10:33:22.374]                             }
[10:33:22.374]                             base::stop(msg)
[10:33:22.374]                           }
[10:33:22.374]                         })
[10:33:22.374]                       }
[10:33:22.374]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:33:22.374]                       base::options(mc.cores = 1L)
[10:33:22.374]                     }
[10:33:22.374]                     base::local({
[10:33:22.374]                       for (pkg in "future") {
[10:33:22.374]                         base::loadNamespace(pkg)
[10:33:22.374]                         base::library(pkg, character.only = TRUE)
[10:33:22.374]                       }
[10:33:22.374]                     })
[10:33:22.374]                   }
[10:33:22.374]                   ...future.strategy.old <- future::plan("list")
[10:33:22.374]                   options(future.plan = NULL)
[10:33:22.374]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.374]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:33:22.374]                 }
[10:33:22.374]                 ...future.workdir <- getwd()
[10:33:22.374]             }
[10:33:22.374]             ...future.oldOptions <- base::as.list(base::.Options)
[10:33:22.374]             ...future.oldEnvVars <- base::Sys.getenv()
[10:33:22.374]         }
[10:33:22.374]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:33:22.374]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:33:22.374]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:33:22.374]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:33:22.374]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:33:22.374]             future.stdout.windows.reencode = NULL, width = 80L)
[10:33:22.374]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:33:22.374]             base::names(...future.oldOptions))
[10:33:22.374]     }
[10:33:22.374]     if (FALSE) {
[10:33:22.374]     }
[10:33:22.374]     else {
[10:33:22.374]         if (TRUE) {
[10:33:22.374]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:33:22.374]                 open = "w")
[10:33:22.374]         }
[10:33:22.374]         else {
[10:33:22.374]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:33:22.374]                 windows = "NUL", "/dev/null"), open = "w")
[10:33:22.374]         }
[10:33:22.374]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:33:22.374]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:33:22.374]             base::sink(type = "output", split = FALSE)
[10:33:22.374]             base::close(...future.stdout)
[10:33:22.374]         }, add = TRUE)
[10:33:22.374]     }
[10:33:22.374]     ...future.frame <- base::sys.nframe()
[10:33:22.374]     ...future.conditions <- base::list()
[10:33:22.374]     ...future.rng <- base::globalenv()$.Random.seed
[10:33:22.374]     if (FALSE) {
[10:33:22.374]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:33:22.374]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:33:22.374]     }
[10:33:22.374]     ...future.result <- base::tryCatch({
[10:33:22.374]         base::withCallingHandlers({
[10:33:22.374]             ...future.value <- base::withVisible(base::local({
[10:33:22.374]                 ...future.makeSendCondition <- base::local({
[10:33:22.374]                   sendCondition <- NULL
[10:33:22.374]                   function(frame = 1L) {
[10:33:22.374]                     if (is.function(sendCondition)) 
[10:33:22.374]                       return(sendCondition)
[10:33:22.374]                     ns <- getNamespace("parallel")
[10:33:22.374]                     if (exists("sendData", mode = "function", 
[10:33:22.374]                       envir = ns)) {
[10:33:22.374]                       parallel_sendData <- get("sendData", mode = "function", 
[10:33:22.374]                         envir = ns)
[10:33:22.374]                       envir <- sys.frame(frame)
[10:33:22.374]                       master <- NULL
[10:33:22.374]                       while (!identical(envir, .GlobalEnv) && 
[10:33:22.374]                         !identical(envir, emptyenv())) {
[10:33:22.374]                         if (exists("master", mode = "list", envir = envir, 
[10:33:22.374]                           inherits = FALSE)) {
[10:33:22.374]                           master <- get("master", mode = "list", 
[10:33:22.374]                             envir = envir, inherits = FALSE)
[10:33:22.374]                           if (inherits(master, c("SOCKnode", 
[10:33:22.374]                             "SOCK0node"))) {
[10:33:22.374]                             sendCondition <<- function(cond) {
[10:33:22.374]                               data <- list(type = "VALUE", value = cond, 
[10:33:22.374]                                 success = TRUE)
[10:33:22.374]                               parallel_sendData(master, data)
[10:33:22.374]                             }
[10:33:22.374]                             return(sendCondition)
[10:33:22.374]                           }
[10:33:22.374]                         }
[10:33:22.374]                         frame <- frame + 1L
[10:33:22.374]                         envir <- sys.frame(frame)
[10:33:22.374]                       }
[10:33:22.374]                     }
[10:33:22.374]                     sendCondition <<- function(cond) NULL
[10:33:22.374]                   }
[10:33:22.374]                 })
[10:33:22.374]                 withCallingHandlers({
[10:33:22.374]                   {
[10:33:22.374]                     value(f1)
[10:33:22.374]                   }
[10:33:22.374]                 }, immediateCondition = function(cond) {
[10:33:22.374]                   sendCondition <- ...future.makeSendCondition()
[10:33:22.374]                   sendCondition(cond)
[10:33:22.374]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.374]                   {
[10:33:22.374]                     inherits <- base::inherits
[10:33:22.374]                     invokeRestart <- base::invokeRestart
[10:33:22.374]                     is.null <- base::is.null
[10:33:22.374]                     muffled <- FALSE
[10:33:22.374]                     if (inherits(cond, "message")) {
[10:33:22.374]                       muffled <- grepl(pattern, "muffleMessage")
[10:33:22.374]                       if (muffled) 
[10:33:22.374]                         invokeRestart("muffleMessage")
[10:33:22.374]                     }
[10:33:22.374]                     else if (inherits(cond, "warning")) {
[10:33:22.374]                       muffled <- grepl(pattern, "muffleWarning")
[10:33:22.374]                       if (muffled) 
[10:33:22.374]                         invokeRestart("muffleWarning")
[10:33:22.374]                     }
[10:33:22.374]                     else if (inherits(cond, "condition")) {
[10:33:22.374]                       if (!is.null(pattern)) {
[10:33:22.374]                         computeRestarts <- base::computeRestarts
[10:33:22.374]                         grepl <- base::grepl
[10:33:22.374]                         restarts <- computeRestarts(cond)
[10:33:22.374]                         for (restart in restarts) {
[10:33:22.374]                           name <- restart$name
[10:33:22.374]                           if (is.null(name)) 
[10:33:22.374]                             next
[10:33:22.374]                           if (!grepl(pattern, name)) 
[10:33:22.374]                             next
[10:33:22.374]                           invokeRestart(restart)
[10:33:22.374]                           muffled <- TRUE
[10:33:22.374]                           break
[10:33:22.374]                         }
[10:33:22.374]                       }
[10:33:22.374]                     }
[10:33:22.374]                     invisible(muffled)
[10:33:22.374]                   }
[10:33:22.374]                   muffleCondition(cond)
[10:33:22.374]                 })
[10:33:22.374]             }))
[10:33:22.374]             future::FutureResult(value = ...future.value$value, 
[10:33:22.374]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.374]                   ...future.rng), globalenv = if (FALSE) 
[10:33:22.374]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:33:22.374]                     ...future.globalenv.names))
[10:33:22.374]                 else NULL, started = ...future.startTime, version = "1.8")
[10:33:22.374]         }, condition = base::local({
[10:33:22.374]             c <- base::c
[10:33:22.374]             inherits <- base::inherits
[10:33:22.374]             invokeRestart <- base::invokeRestart
[10:33:22.374]             length <- base::length
[10:33:22.374]             list <- base::list
[10:33:22.374]             seq.int <- base::seq.int
[10:33:22.374]             signalCondition <- base::signalCondition
[10:33:22.374]             sys.calls <- base::sys.calls
[10:33:22.374]             `[[` <- base::`[[`
[10:33:22.374]             `+` <- base::`+`
[10:33:22.374]             `<<-` <- base::`<<-`
[10:33:22.374]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:33:22.374]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:33:22.374]                   3L)]
[10:33:22.374]             }
[10:33:22.374]             function(cond) {
[10:33:22.374]                 is_error <- inherits(cond, "error")
[10:33:22.374]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:33:22.374]                   NULL)
[10:33:22.374]                 if (is_error) {
[10:33:22.374]                   sessionInformation <- function() {
[10:33:22.374]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:33:22.374]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:33:22.374]                       search = base::search(), system = base::Sys.info())
[10:33:22.374]                   }
[10:33:22.374]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.374]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:33:22.374]                     cond$call), session = sessionInformation(), 
[10:33:22.374]                     timestamp = base::Sys.time(), signaled = 0L)
[10:33:22.374]                   signalCondition(cond)
[10:33:22.374]                 }
[10:33:22.374]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:33:22.374]                 "immediateCondition"))) {
[10:33:22.374]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:33:22.374]                   ...future.conditions[[length(...future.conditions) + 
[10:33:22.374]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:33:22.374]                   if (TRUE && !signal) {
[10:33:22.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.374]                     {
[10:33:22.374]                       inherits <- base::inherits
[10:33:22.374]                       invokeRestart <- base::invokeRestart
[10:33:22.374]                       is.null <- base::is.null
[10:33:22.374]                       muffled <- FALSE
[10:33:22.374]                       if (inherits(cond, "message")) {
[10:33:22.374]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.374]                         if (muffled) 
[10:33:22.374]                           invokeRestart("muffleMessage")
[10:33:22.374]                       }
[10:33:22.374]                       else if (inherits(cond, "warning")) {
[10:33:22.374]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.374]                         if (muffled) 
[10:33:22.374]                           invokeRestart("muffleWarning")
[10:33:22.374]                       }
[10:33:22.374]                       else if (inherits(cond, "condition")) {
[10:33:22.374]                         if (!is.null(pattern)) {
[10:33:22.374]                           computeRestarts <- base::computeRestarts
[10:33:22.374]                           grepl <- base::grepl
[10:33:22.374]                           restarts <- computeRestarts(cond)
[10:33:22.374]                           for (restart in restarts) {
[10:33:22.374]                             name <- restart$name
[10:33:22.374]                             if (is.null(name)) 
[10:33:22.374]                               next
[10:33:22.374]                             if (!grepl(pattern, name)) 
[10:33:22.374]                               next
[10:33:22.374]                             invokeRestart(restart)
[10:33:22.374]                             muffled <- TRUE
[10:33:22.374]                             break
[10:33:22.374]                           }
[10:33:22.374]                         }
[10:33:22.374]                       }
[10:33:22.374]                       invisible(muffled)
[10:33:22.374]                     }
[10:33:22.374]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.374]                   }
[10:33:22.374]                 }
[10:33:22.374]                 else {
[10:33:22.374]                   if (TRUE) {
[10:33:22.374]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:33:22.374]                     {
[10:33:22.374]                       inherits <- base::inherits
[10:33:22.374]                       invokeRestart <- base::invokeRestart
[10:33:22.374]                       is.null <- base::is.null
[10:33:22.374]                       muffled <- FALSE
[10:33:22.374]                       if (inherits(cond, "message")) {
[10:33:22.374]                         muffled <- grepl(pattern, "muffleMessage")
[10:33:22.374]                         if (muffled) 
[10:33:22.374]                           invokeRestart("muffleMessage")
[10:33:22.374]                       }
[10:33:22.374]                       else if (inherits(cond, "warning")) {
[10:33:22.374]                         muffled <- grepl(pattern, "muffleWarning")
[10:33:22.374]                         if (muffled) 
[10:33:22.374]                           invokeRestart("muffleWarning")
[10:33:22.374]                       }
[10:33:22.374]                       else if (inherits(cond, "condition")) {
[10:33:22.374]                         if (!is.null(pattern)) {
[10:33:22.374]                           computeRestarts <- base::computeRestarts
[10:33:22.374]                           grepl <- base::grepl
[10:33:22.374]                           restarts <- computeRestarts(cond)
[10:33:22.374]                           for (restart in restarts) {
[10:33:22.374]                             name <- restart$name
[10:33:22.374]                             if (is.null(name)) 
[10:33:22.374]                               next
[10:33:22.374]                             if (!grepl(pattern, name)) 
[10:33:22.374]                               next
[10:33:22.374]                             invokeRestart(restart)
[10:33:22.374]                             muffled <- TRUE
[10:33:22.374]                             break
[10:33:22.374]                           }
[10:33:22.374]                         }
[10:33:22.374]                       }
[10:33:22.374]                       invisible(muffled)
[10:33:22.374]                     }
[10:33:22.374]                     muffleCondition(cond, pattern = "^muffle")
[10:33:22.374]                   }
[10:33:22.374]                 }
[10:33:22.374]             }
[10:33:22.374]         }))
[10:33:22.374]     }, error = function(ex) {
[10:33:22.374]         base::structure(base::list(value = NULL, visible = NULL, 
[10:33:22.374]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:33:22.374]                 ...future.rng), started = ...future.startTime, 
[10:33:22.374]             finished = Sys.time(), session_uuid = NA_character_, 
[10:33:22.374]             version = "1.8"), class = "FutureResult")
[10:33:22.374]     }, finally = {
[10:33:22.374]         if (!identical(...future.workdir, getwd())) 
[10:33:22.374]             setwd(...future.workdir)
[10:33:22.374]         {
[10:33:22.374]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:33:22.374]                 ...future.oldOptions$nwarnings <- NULL
[10:33:22.374]             }
[10:33:22.374]             base::options(...future.oldOptions)
[10:33:22.374]             if (.Platform$OS.type == "windows") {
[10:33:22.374]                 old_names <- names(...future.oldEnvVars)
[10:33:22.374]                 envs <- base::Sys.getenv()
[10:33:22.374]                 names <- names(envs)
[10:33:22.374]                 common <- intersect(names, old_names)
[10:33:22.374]                 added <- setdiff(names, old_names)
[10:33:22.374]                 removed <- setdiff(old_names, names)
[10:33:22.374]                 changed <- common[...future.oldEnvVars[common] != 
[10:33:22.374]                   envs[common]]
[10:33:22.374]                 NAMES <- toupper(changed)
[10:33:22.374]                 args <- list()
[10:33:22.374]                 for (kk in seq_along(NAMES)) {
[10:33:22.374]                   name <- changed[[kk]]
[10:33:22.374]                   NAME <- NAMES[[kk]]
[10:33:22.374]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.374]                     next
[10:33:22.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.374]                 }
[10:33:22.374]                 NAMES <- toupper(added)
[10:33:22.374]                 for (kk in seq_along(NAMES)) {
[10:33:22.374]                   name <- added[[kk]]
[10:33:22.374]                   NAME <- NAMES[[kk]]
[10:33:22.374]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.374]                     next
[10:33:22.374]                   args[[name]] <- ""
[10:33:22.374]                 }
[10:33:22.374]                 NAMES <- toupper(removed)
[10:33:22.374]                 for (kk in seq_along(NAMES)) {
[10:33:22.374]                   name <- removed[[kk]]
[10:33:22.374]                   NAME <- NAMES[[kk]]
[10:33:22.374]                   if (name != NAME && is.element(NAME, old_names)) 
[10:33:22.374]                     next
[10:33:22.374]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:33:22.374]                 }
[10:33:22.374]                 if (length(args) > 0) 
[10:33:22.374]                   base::do.call(base::Sys.setenv, args = args)
[10:33:22.374]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:33:22.374]             }
[10:33:22.374]             else {
[10:33:22.374]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:33:22.374]             }
[10:33:22.374]             {
[10:33:22.374]                 if (base::length(...future.futureOptionsAdded) > 
[10:33:22.374]                   0L) {
[10:33:22.374]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:33:22.374]                   base::names(opts) <- ...future.futureOptionsAdded
[10:33:22.374]                   base::options(opts)
[10:33:22.374]                 }
[10:33:22.374]                 {
[10:33:22.374]                   {
[10:33:22.374]                     base::options(mc.cores = ...future.mc.cores.old)
[10:33:22.374]                     NULL
[10:33:22.374]                   }
[10:33:22.374]                   options(future.plan = NULL)
[10:33:22.374]                   if (is.na(NA_character_)) 
[10:33:22.374]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:33:22.374]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:33:22.374]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:33:22.374]                     .init = FALSE)
[10:33:22.374]                 }
[10:33:22.374]             }
[10:33:22.374]         }
[10:33:22.374]     })
[10:33:22.374]     if (TRUE) {
[10:33:22.374]         base::sink(type = "output", split = FALSE)
[10:33:22.374]         if (TRUE) {
[10:33:22.374]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:33:22.374]         }
[10:33:22.374]         else {
[10:33:22.374]             ...future.result["stdout"] <- base::list(NULL)
[10:33:22.374]         }
[10:33:22.374]         base::close(...future.stdout)
[10:33:22.374]         ...future.stdout <- NULL
[10:33:22.374]     }
[10:33:22.374]     ...future.result$conditions <- ...future.conditions
[10:33:22.374]     ...future.result$finished <- base::Sys.time()
[10:33:22.374]     ...future.result
[10:33:22.374] }
[10:33:22.426] Exporting 1 global objects (1.56 MiB) to cluster node #2 ...
[10:33:22.428] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ...
[10:33:22.440] Exporting ‘f1’ (1.56 MiB) to cluster node #2 ... DONE
[10:33:22.440] Exporting 1 global objects (1.56 MiB) to cluster node #2 ... DONE
[10:33:22.440] MultisessionFuture started
[10:33:22.440] - Launch lazy future ... done
[10:33:22.440] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.56 MiB (MultisessionFuture ‘f1’ of 1.56 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0f4531d3-011c-b377-6e01-51eb2087ff5b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[10:33:22.457] result() for ClusterFuture ...
[10:33:22.458] receiveMessageFromWorker() for ClusterFuture ...
[10:33:22.458] - Validating connection of MultisessionFuture
[10:33:22.534] - received message: FutureResult
[10:33:22.534] - Received FutureResult
[10:33:22.535] - Erased future from FutureRegistry
[10:33:22.535] result() for ClusterFuture ...
[10:33:22.535] - result already collected: FutureResult
[10:33:22.535] result() for ClusterFuture ... done
[10:33:22.535] signalConditions() ...
[10:33:22.535]  - include = ‘immediateCondition’
[10:33:22.535]  - exclude = 
[10:33:22.535]  - resignal = FALSE
[10:33:22.535]  - Number of conditions: 1
[10:33:22.535] signalConditions() ... done
[10:33:22.536] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:22.536] result() for ClusterFuture ... done
[10:33:22.536] result() for ClusterFuture ...
[10:33:22.536] - result already collected: FutureResult
[10:33:22.536] result() for ClusterFuture ... done
[10:33:22.536] signalConditions() ...
[10:33:22.536]  - include = ‘immediateCondition’
[10:33:22.536]  - exclude = 
[10:33:22.536]  - resignal = FALSE
[10:33:22.536]  - Number of conditions: 1
[10:33:22.536] signalConditions() ... done
[10:33:22.537] Future state: ‘finished’
[10:33:22.537] result() for ClusterFuture ...
[10:33:22.537] - result already collected: FutureResult
[10:33:22.537] result() for ClusterFuture ... done
[10:33:22.537] signalConditions() ...
[10:33:22.537]  - include = ‘condition’
[10:33:22.537]  - exclude = ‘immediateCondition’
[10:33:22.537]  - resignal = TRUE
[10:33:22.537]  - Number of conditions: 1
[10:33:22.537]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[10:33:22.538] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (0f4531d3-011c-b377-6e01-51eb2087ff5b; pid 84862 on c3bfbccbe859) that created it, not by any other R processes (1ee054af-6e10-6356-62c1-6bc034005ecf; pid 84916 on c3bfbccbe859): {; 42L; }>


Future UUID: 477a9c06-fc04-0e7f-9bbc-327e4eb008d4


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0f4531d3-011c-b377-6e01-51eb2087ff5b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[10:33:22.539] result() for ClusterFuture ...
[10:33:22.539] receiveMessageFromWorker() for ClusterFuture ...
[10:33:22.539] - Validating connection of MultisessionFuture
[10:33:22.539] - received message: FutureResult
[10:33:22.539] - Received FutureResult
[10:33:22.539] - Erased future from FutureRegistry
[10:33:22.539] result() for ClusterFuture ...
[10:33:22.539] - result already collected: FutureResult
[10:33:22.539] result() for ClusterFuture ... done
[10:33:22.540] receiveMessageFromWorker() for ClusterFuture ... done
[10:33:22.540] result() for ClusterFuture ... done
[10:33:22.540] result() for ClusterFuture ...
[10:33:22.540] - result already collected: FutureResult
[10:33:22.540] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[10:33:22.541] plan(): Setting new future strategy stack:
[10:33:22.541] List of future strategies:
[10:33:22.541] 1. FutureStrategy:
[10:33:22.541]    - args: function (..., envir = parent.frame())
[10:33:22.541]    - tweaked: FALSE
[10:33:22.541]    - call: future::plan(oplan)
[10:33:22.542] plan(): nbrOfWorkers() = 1
> 
