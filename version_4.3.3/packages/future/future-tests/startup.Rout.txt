
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:34:42.075] plan(): Setting new future strategy stack:
[10:34:42.076] List of future strategies:
[10:34:42.076] 1. sequential:
[10:34:42.076]    - args: function (..., envir = parent.frame())
[10:34:42.076]    - tweaked: FALSE
[10:34:42.076]    - call: future::plan("sequential")
[10:34:42.089] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[10:34:42.100] plan(): Setting new future strategy stack:
[10:34:42.100] List of future strategies:
[10:34:42.100] 1. sequential:
[10:34:42.100]    - args: function (..., envir = parent.frame())
[10:34:42.100]    - tweaked: FALSE
[10:34:42.100]    - call: NULL
[10:34:42.110] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[10:34:42.117] plan(): Setting new future strategy stack:
[10:34:42.117] List of future strategies:
[10:34:42.117] 1. sequential:
[10:34:42.117]    - args: function (..., envir = parent.frame())
[10:34:42.117]    - tweaked: FALSE
[10:34:42.117]    - call: NULL
[10:34:42.117] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:34:42.118] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.118] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.119] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.120] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.121] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.121] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.121] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.121] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.121] R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.121] Coercing from character to numeric: ‘0.01’
[10:34:42.121] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[10:34:42.122] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.122] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:42.122] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.122] Setting plan('default')
[10:34:42.123] plan(): Setting new future strategy stack:
[10:34:42.123] List of future strategies:
[10:34:42.123] 1. sequential:
[10:34:42.123]    - args: function (..., envir = parent.frame())
[10:34:42.123]    - tweaked: FALSE
[10:34:42.123]    - call: NULL
[10:34:42.123] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:34:42.123] plan(): Setting new future strategy stack:
[10:34:42.123] List of future strategies:
[10:34:42.123] 1. sequential:
[10:34:42.123]    - args: function (..., envir = parent.frame())
[10:34:42.123]    - tweaked: FALSE
[10:34:42.123]    - call: NULL
[10:34:42.124] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[10:34:42.125] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.125] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.125] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.126] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.127] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.129] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.130] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:42.130] R command-line argument: -p 1
[10:34:42.130]  => options(future.plan = sequential)
[10:34:42.130] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.130] Setting plan('default')
[10:34:42.130] plan(): Setting new future strategy stack:
[10:34:42.130] List of future strategies:
[10:34:42.130] 1. sequential:
[10:34:42.130]    - args: function (..., envir = parent.frame())
[10:34:42.130]    - tweaked: FALSE
[10:34:42.130]    - call: NULL
[10:34:42.131] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[10:34:42.131] plan(): Setting new future strategy stack:
[10:34:42.131] List of future strategies:
[10:34:42.131] 1. sequential:
[10:34:42.131]    - args: function (..., envir = parent.frame())
[10:34:42.131]    - tweaked: FALSE
[10:34:42.131]    - call: NULL
[10:34:42.131] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[10:34:42.132] plan(): Setting new future strategy stack:
[10:34:42.132] List of future strategies:
[10:34:42.132] 1. sequential:
[10:34:42.132]    - args: function (..., envir = parent.frame())
[10:34:42.132]    - tweaked: FALSE
[10:34:42.132]    - call: NULL
[10:34:42.132] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[10:34:42.133] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.133] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.133] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.133] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.133] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.133] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.134] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.135] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.136] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:42.136] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.136] Setting plan('default')
[10:34:42.136] plan(): Setting new future strategy stack:
[10:34:42.137] List of future strategies:
[10:34:42.137] 1. sequential:
[10:34:42.137]    - args: function (..., envir = parent.frame())
[10:34:42.137]    - tweaked: FALSE
[10:34:42.137]    - call: NULL
[10:34:42.137] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[10:34:42.137] plan(): Setting new future strategy stack:
[10:34:42.137] List of future strategies:
[10:34:42.137] 1. sequential:
[10:34:42.137]    - args: function (..., envir = parent.frame())
[10:34:42.137]    - tweaked: FALSE
[10:34:42.137]    - call: NULL
[10:34:42.138] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[10:34:42.138] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.139] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.139] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.140] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.141] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.142] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.142] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.142] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:42.142] R command-line argument: -p 2
[10:34:42.142]  => options(future.plan = tweak(multisession, workers = 2))
[10:34:42.145] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.145] Setting plan('default')
[10:34:42.145] plan(): Setting new future strategy stack:
[10:34:42.145] List of future strategies:
[10:34:42.145] 1. multisession:
[10:34:42.145]    - args: function (..., workers = 2L, envir = parent.frame())
[10:34:42.145]    - tweaked: TRUE
[10:34:42.145]    - call: NULL
[10:34:42.145] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[10:34:42.146] plan(): Setting new future strategy stack:
[10:34:42.146] List of future strategies:
[10:34:42.146] 1. multisession:
[10:34:42.146]    - args: function (..., workers = 2L, envir = parent.frame())
[10:34:42.146]    - tweaked: TRUE
[10:34:42.146]    - call: NULL
[10:34:42.146] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:42.146] multisession:
[10:34:42.146] - args: function (..., workers = 2L, envir = parent.frame())
[10:34:42.146] - tweaked: TRUE
[10:34:42.146] - call: NULL
[10:34:42.148] getGlobalsAndPackages() ...
[10:34:42.148] Not searching for globals
[10:34:42.148] - globals: [0] <none>
[10:34:42.148] getGlobalsAndPackages() ... DONE
[10:34:42.149] [local output] makeClusterPSOCK() ...
[10:34:42.180] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:34:42.181] [local output] Base port: 11990
[10:34:42.181] [local output] Getting setup options for 2 cluster nodes ...
[10:34:42.181] [local output]  - Node 1 of 2 ...
[10:34:42.181] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:42.182] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9325c10d1f.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9325c10d1f.pid")'’
[10:34:42.371] - Possible to infer worker's PID: TRUE
[10:34:42.371] [local output] Rscript port: 11990

[10:34:42.371] [local output]  - Node 2 of 2 ...
[10:34:42.372] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:42.372] [local output] Rscript port: 11990

[10:34:42.373] [local output] Getting setup options for 2 cluster nodes ... done
[10:34:42.373] [local output]  - Parallel setup requested for some PSOCK nodes
[10:34:42.373] [local output] Setting up PSOCK nodes in parallel
[10:34:42.374] List of 36
[10:34:42.374]  $ worker          : chr "localhost"
[10:34:42.374]   ..- attr(*, "localhost")= logi TRUE
[10:34:42.374]  $ master          : chr "localhost"
[10:34:42.374]  $ port            : int 11990
[10:34:42.374]  $ connectTimeout  : num 120
[10:34:42.374]  $ timeout         : num 2592000
[10:34:42.374]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:34:42.374]  $ homogeneous     : logi TRUE
[10:34:42.374]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:34:42.374]  $ rscript_envs    : NULL
[10:34:42.374]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:42.374]  $ rscript_startup : NULL
[10:34:42.374]  $ rscript_sh      : chr "sh"
[10:34:42.374]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:42.374]  $ methods         : logi TRUE
[10:34:42.374]  $ socketOptions   : chr "no-delay"
[10:34:42.374]  $ useXDR          : logi FALSE
[10:34:42.374]  $ outfile         : chr "/dev/null"
[10:34:42.374]  $ renice          : int NA
[10:34:42.374]  $ rshcmd          : NULL
[10:34:42.374]  $ user            : chr(0) 
[10:34:42.374]  $ revtunnel       : logi FALSE
[10:34:42.374]  $ rshlogfile      : NULL
[10:34:42.374]  $ rshopts         : chr(0) 
[10:34:42.374]  $ rank            : int 1
[10:34:42.374]  $ manual          : logi FALSE
[10:34:42.374]  $ dryrun          : logi FALSE
[10:34:42.374]  $ quiet           : logi FALSE
[10:34:42.374]  $ setup_strategy  : chr "parallel"
[10:34:42.374]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:42.374]  $ pidfile         : chr "/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9325c10d1f.pid"
[10:34:42.374]  $ rshcmd_label    : NULL
[10:34:42.374]  $ rsh_call        : NULL
[10:34:42.374]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:42.374]  $ localMachine    : logi TRUE
[10:34:42.374]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:34:42.374]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:34:42.374]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:34:42.374]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:34:42.374]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:34:42.374]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:34:42.374]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:34:42.374]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:34:42.374]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:34:42.374]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:34:42.374]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:34:42.374]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:34:42.374]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:34:42.374]  $ arguments       :List of 28
[10:34:42.374]   ..$ worker          : chr "localhost"
[10:34:42.374]   ..$ master          : NULL
[10:34:42.374]   ..$ port            : int 11990
[10:34:42.374]   ..$ connectTimeout  : num 120
[10:34:42.374]   ..$ timeout         : num 2592000
[10:34:42.374]   ..$ rscript         : NULL
[10:34:42.374]   ..$ homogeneous     : NULL
[10:34:42.374]   ..$ rscript_args    : NULL
[10:34:42.374]   ..$ rscript_envs    : NULL
[10:34:42.374]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:42.374]   ..$ rscript_startup : NULL
[10:34:42.374]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:34:42.374]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:42.374]   ..$ methods         : logi TRUE
[10:34:42.374]   ..$ socketOptions   : chr "no-delay"
[10:34:42.374]   ..$ useXDR          : logi FALSE
[10:34:42.374]   ..$ outfile         : chr "/dev/null"
[10:34:42.374]   ..$ renice          : int NA
[10:34:42.374]   ..$ rshcmd          : NULL
[10:34:42.374]   ..$ user            : NULL
[10:34:42.374]   ..$ revtunnel       : logi NA
[10:34:42.374]   ..$ rshlogfile      : NULL
[10:34:42.374]   ..$ rshopts         : NULL
[10:34:42.374]   ..$ rank            : int 1
[10:34:42.374]   ..$ manual          : logi FALSE
[10:34:42.374]   ..$ dryrun          : logi FALSE
[10:34:42.374]   ..$ quiet           : logi FALSE
[10:34:42.374]   ..$ setup_strategy  : chr "parallel"
[10:34:42.374]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:34:42.390] [local output] System call to launch all workers:
[10:34:42.390] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9325c10d1f.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11990 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:34:42.391] [local output] Starting PSOCK main server
[10:34:42.396] [local output] Workers launched
[10:34:42.396] [local output] Waiting for workers to connect back
[10:34:42.396]  - [local output] 0 workers out of 2 ready
[10:34:42.641]  - [local output] 0 workers out of 2 ready
[10:34:42.642]  - [local output] 1 workers out of 2 ready
[10:34:42.647]  - [local output] 1 workers out of 2 ready
[10:34:42.647]  - [local output] 2 workers out of 2 ready
[10:34:42.647] [local output] Launching of workers completed
[10:34:42.647] [local output] Collecting session information from workers
[10:34:42.648] [local output]  - Worker #1 of 2
[10:34:42.649] [local output]  - Worker #2 of 2
[10:34:42.649] [local output] makeClusterPSOCK() ... done
[10:34:42.661] Packages needed by the future expression (n = 0): <none>
[10:34:42.662] Packages needed by future strategies (n = 0): <none>
[10:34:42.662] {
[10:34:42.662]     {
[10:34:42.662]         {
[10:34:42.662]             ...future.startTime <- base::Sys.time()
[10:34:42.662]             {
[10:34:42.662]                 {
[10:34:42.662]                   {
[10:34:42.662]                     {
[10:34:42.662]                       base::local({
[10:34:42.662]                         has_future <- base::requireNamespace("future", 
[10:34:42.662]                           quietly = TRUE)
[10:34:42.662]                         if (has_future) {
[10:34:42.662]                           ns <- base::getNamespace("future")
[10:34:42.662]                           version <- ns[[".package"]][["version"]]
[10:34:42.662]                           if (is.null(version)) 
[10:34:42.662]                             version <- utils::packageVersion("future")
[10:34:42.662]                         }
[10:34:42.662]                         else {
[10:34:42.662]                           version <- NULL
[10:34:42.662]                         }
[10:34:42.662]                         if (!has_future || version < "1.8.0") {
[10:34:42.662]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:42.662]                             "", base::R.version$version.string), 
[10:34:42.662]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:42.662]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:42.662]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:42.662]                               "release", "version")], collapse = " "), 
[10:34:42.662]                             hostname = base::Sys.info()[["nodename"]])
[10:34:42.662]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:42.662]                             info)
[10:34:42.662]                           info <- base::paste(info, collapse = "; ")
[10:34:42.662]                           if (!has_future) {
[10:34:42.662]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:42.662]                               info)
[10:34:42.662]                           }
[10:34:42.662]                           else {
[10:34:42.662]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:42.662]                               info, version)
[10:34:42.662]                           }
[10:34:42.662]                           base::stop(msg)
[10:34:42.662]                         }
[10:34:42.662]                       })
[10:34:42.662]                     }
[10:34:42.662]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:42.662]                     base::options(mc.cores = 1L)
[10:34:42.662]                   }
[10:34:42.662]                   ...future.strategy.old <- future::plan("list")
[10:34:42.662]                   options(future.plan = NULL)
[10:34:42.662]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:42.662]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:42.662]                 }
[10:34:42.662]                 ...future.workdir <- getwd()
[10:34:42.662]             }
[10:34:42.662]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:42.662]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:42.662]         }
[10:34:42.662]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:42.662]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:42.662]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:42.662]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:42.662]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:42.662]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:42.662]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:42.662]             base::names(...future.oldOptions))
[10:34:42.662]     }
[10:34:42.662]     if (FALSE) {
[10:34:42.662]     }
[10:34:42.662]     else {
[10:34:42.662]         if (TRUE) {
[10:34:42.662]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:42.662]                 open = "w")
[10:34:42.662]         }
[10:34:42.662]         else {
[10:34:42.662]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:42.662]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:42.662]         }
[10:34:42.662]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:42.662]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:42.662]             base::sink(type = "output", split = FALSE)
[10:34:42.662]             base::close(...future.stdout)
[10:34:42.662]         }, add = TRUE)
[10:34:42.662]     }
[10:34:42.662]     ...future.frame <- base::sys.nframe()
[10:34:42.662]     ...future.conditions <- base::list()
[10:34:42.662]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:42.662]     if (FALSE) {
[10:34:42.662]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:42.662]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:42.662]     }
[10:34:42.662]     ...future.result <- base::tryCatch({
[10:34:42.662]         base::withCallingHandlers({
[10:34:42.662]             ...future.value <- base::withVisible(base::local({
[10:34:42.662]                 ...future.makeSendCondition <- base::local({
[10:34:42.662]                   sendCondition <- NULL
[10:34:42.662]                   function(frame = 1L) {
[10:34:42.662]                     if (is.function(sendCondition)) 
[10:34:42.662]                       return(sendCondition)
[10:34:42.662]                     ns <- getNamespace("parallel")
[10:34:42.662]                     if (exists("sendData", mode = "function", 
[10:34:42.662]                       envir = ns)) {
[10:34:42.662]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:42.662]                         envir = ns)
[10:34:42.662]                       envir <- sys.frame(frame)
[10:34:42.662]                       master <- NULL
[10:34:42.662]                       while (!identical(envir, .GlobalEnv) && 
[10:34:42.662]                         !identical(envir, emptyenv())) {
[10:34:42.662]                         if (exists("master", mode = "list", envir = envir, 
[10:34:42.662]                           inherits = FALSE)) {
[10:34:42.662]                           master <- get("master", mode = "list", 
[10:34:42.662]                             envir = envir, inherits = FALSE)
[10:34:42.662]                           if (inherits(master, c("SOCKnode", 
[10:34:42.662]                             "SOCK0node"))) {
[10:34:42.662]                             sendCondition <<- function(cond) {
[10:34:42.662]                               data <- list(type = "VALUE", value = cond, 
[10:34:42.662]                                 success = TRUE)
[10:34:42.662]                               parallel_sendData(master, data)
[10:34:42.662]                             }
[10:34:42.662]                             return(sendCondition)
[10:34:42.662]                           }
[10:34:42.662]                         }
[10:34:42.662]                         frame <- frame + 1L
[10:34:42.662]                         envir <- sys.frame(frame)
[10:34:42.662]                       }
[10:34:42.662]                     }
[10:34:42.662]                     sendCondition <<- function(cond) NULL
[10:34:42.662]                   }
[10:34:42.662]                 })
[10:34:42.662]                 withCallingHandlers({
[10:34:42.662]                   NA
[10:34:42.662]                 }, immediateCondition = function(cond) {
[10:34:42.662]                   sendCondition <- ...future.makeSendCondition()
[10:34:42.662]                   sendCondition(cond)
[10:34:42.662]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:42.662]                   {
[10:34:42.662]                     inherits <- base::inherits
[10:34:42.662]                     invokeRestart <- base::invokeRestart
[10:34:42.662]                     is.null <- base::is.null
[10:34:42.662]                     muffled <- FALSE
[10:34:42.662]                     if (inherits(cond, "message")) {
[10:34:42.662]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:42.662]                       if (muffled) 
[10:34:42.662]                         invokeRestart("muffleMessage")
[10:34:42.662]                     }
[10:34:42.662]                     else if (inherits(cond, "warning")) {
[10:34:42.662]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:42.662]                       if (muffled) 
[10:34:42.662]                         invokeRestart("muffleWarning")
[10:34:42.662]                     }
[10:34:42.662]                     else if (inherits(cond, "condition")) {
[10:34:42.662]                       if (!is.null(pattern)) {
[10:34:42.662]                         computeRestarts <- base::computeRestarts
[10:34:42.662]                         grepl <- base::grepl
[10:34:42.662]                         restarts <- computeRestarts(cond)
[10:34:42.662]                         for (restart in restarts) {
[10:34:42.662]                           name <- restart$name
[10:34:42.662]                           if (is.null(name)) 
[10:34:42.662]                             next
[10:34:42.662]                           if (!grepl(pattern, name)) 
[10:34:42.662]                             next
[10:34:42.662]                           invokeRestart(restart)
[10:34:42.662]                           muffled <- TRUE
[10:34:42.662]                           break
[10:34:42.662]                         }
[10:34:42.662]                       }
[10:34:42.662]                     }
[10:34:42.662]                     invisible(muffled)
[10:34:42.662]                   }
[10:34:42.662]                   muffleCondition(cond)
[10:34:42.662]                 })
[10:34:42.662]             }))
[10:34:42.662]             future::FutureResult(value = ...future.value$value, 
[10:34:42.662]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:42.662]                   ...future.rng), globalenv = if (FALSE) 
[10:34:42.662]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:42.662]                     ...future.globalenv.names))
[10:34:42.662]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:42.662]         }, condition = base::local({
[10:34:42.662]             c <- base::c
[10:34:42.662]             inherits <- base::inherits
[10:34:42.662]             invokeRestart <- base::invokeRestart
[10:34:42.662]             length <- base::length
[10:34:42.662]             list <- base::list
[10:34:42.662]             seq.int <- base::seq.int
[10:34:42.662]             signalCondition <- base::signalCondition
[10:34:42.662]             sys.calls <- base::sys.calls
[10:34:42.662]             `[[` <- base::`[[`
[10:34:42.662]             `+` <- base::`+`
[10:34:42.662]             `<<-` <- base::`<<-`
[10:34:42.662]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:42.662]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:42.662]                   3L)]
[10:34:42.662]             }
[10:34:42.662]             function(cond) {
[10:34:42.662]                 is_error <- inherits(cond, "error")
[10:34:42.662]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:42.662]                   NULL)
[10:34:42.662]                 if (is_error) {
[10:34:42.662]                   sessionInformation <- function() {
[10:34:42.662]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:42.662]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:42.662]                       search = base::search(), system = base::Sys.info())
[10:34:42.662]                   }
[10:34:42.662]                   ...future.conditions[[length(...future.conditions) + 
[10:34:42.662]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:42.662]                     cond$call), session = sessionInformation(), 
[10:34:42.662]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:42.662]                   signalCondition(cond)
[10:34:42.662]                 }
[10:34:42.662]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:42.662]                 "immediateCondition"))) {
[10:34:42.662]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:42.662]                   ...future.conditions[[length(...future.conditions) + 
[10:34:42.662]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:42.662]                   if (TRUE && !signal) {
[10:34:42.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:42.662]                     {
[10:34:42.662]                       inherits <- base::inherits
[10:34:42.662]                       invokeRestart <- base::invokeRestart
[10:34:42.662]                       is.null <- base::is.null
[10:34:42.662]                       muffled <- FALSE
[10:34:42.662]                       if (inherits(cond, "message")) {
[10:34:42.662]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:42.662]                         if (muffled) 
[10:34:42.662]                           invokeRestart("muffleMessage")
[10:34:42.662]                       }
[10:34:42.662]                       else if (inherits(cond, "warning")) {
[10:34:42.662]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:42.662]                         if (muffled) 
[10:34:42.662]                           invokeRestart("muffleWarning")
[10:34:42.662]                       }
[10:34:42.662]                       else if (inherits(cond, "condition")) {
[10:34:42.662]                         if (!is.null(pattern)) {
[10:34:42.662]                           computeRestarts <- base::computeRestarts
[10:34:42.662]                           grepl <- base::grepl
[10:34:42.662]                           restarts <- computeRestarts(cond)
[10:34:42.662]                           for (restart in restarts) {
[10:34:42.662]                             name <- restart$name
[10:34:42.662]                             if (is.null(name)) 
[10:34:42.662]                               next
[10:34:42.662]                             if (!grepl(pattern, name)) 
[10:34:42.662]                               next
[10:34:42.662]                             invokeRestart(restart)
[10:34:42.662]                             muffled <- TRUE
[10:34:42.662]                             break
[10:34:42.662]                           }
[10:34:42.662]                         }
[10:34:42.662]                       }
[10:34:42.662]                       invisible(muffled)
[10:34:42.662]                     }
[10:34:42.662]                     muffleCondition(cond, pattern = "^muffle")
[10:34:42.662]                   }
[10:34:42.662]                 }
[10:34:42.662]                 else {
[10:34:42.662]                   if (TRUE) {
[10:34:42.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:42.662]                     {
[10:34:42.662]                       inherits <- base::inherits
[10:34:42.662]                       invokeRestart <- base::invokeRestart
[10:34:42.662]                       is.null <- base::is.null
[10:34:42.662]                       muffled <- FALSE
[10:34:42.662]                       if (inherits(cond, "message")) {
[10:34:42.662]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:42.662]                         if (muffled) 
[10:34:42.662]                           invokeRestart("muffleMessage")
[10:34:42.662]                       }
[10:34:42.662]                       else if (inherits(cond, "warning")) {
[10:34:42.662]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:42.662]                         if (muffled) 
[10:34:42.662]                           invokeRestart("muffleWarning")
[10:34:42.662]                       }
[10:34:42.662]                       else if (inherits(cond, "condition")) {
[10:34:42.662]                         if (!is.null(pattern)) {
[10:34:42.662]                           computeRestarts <- base::computeRestarts
[10:34:42.662]                           grepl <- base::grepl
[10:34:42.662]                           restarts <- computeRestarts(cond)
[10:34:42.662]                           for (restart in restarts) {
[10:34:42.662]                             name <- restart$name
[10:34:42.662]                             if (is.null(name)) 
[10:34:42.662]                               next
[10:34:42.662]                             if (!grepl(pattern, name)) 
[10:34:42.662]                               next
[10:34:42.662]                             invokeRestart(restart)
[10:34:42.662]                             muffled <- TRUE
[10:34:42.662]                             break
[10:34:42.662]                           }
[10:34:42.662]                         }
[10:34:42.662]                       }
[10:34:42.662]                       invisible(muffled)
[10:34:42.662]                     }
[10:34:42.662]                     muffleCondition(cond, pattern = "^muffle")
[10:34:42.662]                   }
[10:34:42.662]                 }
[10:34:42.662]             }
[10:34:42.662]         }))
[10:34:42.662]     }, error = function(ex) {
[10:34:42.662]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:42.662]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:42.662]                 ...future.rng), started = ...future.startTime, 
[10:34:42.662]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:42.662]             version = "1.8"), class = "FutureResult")
[10:34:42.662]     }, finally = {
[10:34:42.662]         if (!identical(...future.workdir, getwd())) 
[10:34:42.662]             setwd(...future.workdir)
[10:34:42.662]         {
[10:34:42.662]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:42.662]                 ...future.oldOptions$nwarnings <- NULL
[10:34:42.662]             }
[10:34:42.662]             base::options(...future.oldOptions)
[10:34:42.662]             if (.Platform$OS.type == "windows") {
[10:34:42.662]                 old_names <- names(...future.oldEnvVars)
[10:34:42.662]                 envs <- base::Sys.getenv()
[10:34:42.662]                 names <- names(envs)
[10:34:42.662]                 common <- intersect(names, old_names)
[10:34:42.662]                 added <- setdiff(names, old_names)
[10:34:42.662]                 removed <- setdiff(old_names, names)
[10:34:42.662]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:42.662]                   envs[common]]
[10:34:42.662]                 NAMES <- toupper(changed)
[10:34:42.662]                 args <- list()
[10:34:42.662]                 for (kk in seq_along(NAMES)) {
[10:34:42.662]                   name <- changed[[kk]]
[10:34:42.662]                   NAME <- NAMES[[kk]]
[10:34:42.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:42.662]                     next
[10:34:42.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:42.662]                 }
[10:34:42.662]                 NAMES <- toupper(added)
[10:34:42.662]                 for (kk in seq_along(NAMES)) {
[10:34:42.662]                   name <- added[[kk]]
[10:34:42.662]                   NAME <- NAMES[[kk]]
[10:34:42.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:42.662]                     next
[10:34:42.662]                   args[[name]] <- ""
[10:34:42.662]                 }
[10:34:42.662]                 NAMES <- toupper(removed)
[10:34:42.662]                 for (kk in seq_along(NAMES)) {
[10:34:42.662]                   name <- removed[[kk]]
[10:34:42.662]                   NAME <- NAMES[[kk]]
[10:34:42.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:42.662]                     next
[10:34:42.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:42.662]                 }
[10:34:42.662]                 if (length(args) > 0) 
[10:34:42.662]                   base::do.call(base::Sys.setenv, args = args)
[10:34:42.662]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:42.662]             }
[10:34:42.662]             else {
[10:34:42.662]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:42.662]             }
[10:34:42.662]             {
[10:34:42.662]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:42.662]                   0L) {
[10:34:42.662]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:42.662]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:42.662]                   base::options(opts)
[10:34:42.662]                 }
[10:34:42.662]                 {
[10:34:42.662]                   {
[10:34:42.662]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:42.662]                     NULL
[10:34:42.662]                   }
[10:34:42.662]                   options(future.plan = function (..., workers = 2L, 
[10:34:42.662]                     envir = parent.frame()) 
[10:34:42.662]                   strategy(..., workers = workers, envir = envir))
[10:34:42.662]                   if (is.na(NA_character_)) 
[10:34:42.662]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:42.662]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:42.662]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:42.662]                     .init = FALSE)
[10:34:42.662]                 }
[10:34:42.662]             }
[10:34:42.662]         }
[10:34:42.662]     })
[10:34:42.662]     if (TRUE) {
[10:34:42.662]         base::sink(type = "output", split = FALSE)
[10:34:42.662]         if (TRUE) {
[10:34:42.662]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:42.662]         }
[10:34:42.662]         else {
[10:34:42.662]             ...future.result["stdout"] <- base::list(NULL)
[10:34:42.662]         }
[10:34:42.662]         base::close(...future.stdout)
[10:34:42.662]         ...future.stdout <- NULL
[10:34:42.662]     }
[10:34:42.662]     ...future.result$conditions <- ...future.conditions
[10:34:42.662]     ...future.result$finished <- base::Sys.time()
[10:34:42.662]     ...future.result
[10:34:42.662] }
[10:34:42.715] MultisessionFuture started
[10:34:42.715] result() for ClusterFuture ...
[10:34:42.716] receiveMessageFromWorker() for ClusterFuture ...
[10:34:42.716] - Validating connection of MultisessionFuture
[10:34:42.749] - received message: FutureResult
[10:34:42.749] - Received FutureResult
[10:34:42.751] - Erased future from FutureRegistry
[10:34:42.752] result() for ClusterFuture ...
[10:34:42.752] - result already collected: FutureResult
[10:34:42.752] result() for ClusterFuture ... done
[10:34:42.752] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:42.752] result() for ClusterFuture ... done
[10:34:42.752] result() for ClusterFuture ...
[10:34:42.752] - result already collected: FutureResult
[10:34:42.753] result() for ClusterFuture ... done
[10:34:42.753] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:42.753] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[10:34:42.754] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.754] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.754] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.755] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.756] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.757] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.758] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[10:34:42.759] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.759] Setting plan('default')
[10:34:42.759] plan(): Setting new future strategy stack:
[10:34:42.759] List of future strategies:
[10:34:42.759] 1. sequential:
[10:34:42.759]    - args: function (..., envir = parent.frame())
[10:34:42.759]    - tweaked: FALSE
[10:34:42.759]    - call: NULL
[10:34:42.760] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:34:42.761] plan(): Setting new future strategy stack:
[10:34:42.761] List of future strategies:
[10:34:42.761] 1. sequential:
[10:34:42.761]    - args: function (..., envir = parent.frame())
[10:34:42.761]    - tweaked: FALSE
[10:34:42.761]    - call: NULL
[10:34:42.761] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[10:34:42.763] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.763] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.763] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.764] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.764] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.764] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.764] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.765] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.766] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.766] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.766] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.766] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.766] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.767] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.767] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.767] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.767] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.767] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.768] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.768] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.768] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.768] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.768] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.769] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.769] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.769] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.769] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[10:34:42.770] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.770] Setting plan('default')
[10:34:42.770] plan(): Setting new future strategy stack:
[10:34:42.770] List of future strategies:
[10:34:42.770] 1. sequential:
[10:34:42.770]    - args: function (..., envir = parent.frame())
[10:34:42.770]    - tweaked: FALSE
[10:34:42.770]    - call: NULL
[10:34:42.771] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:34:42.771] plan(): Setting new future strategy stack:
[10:34:42.772] List of future strategies:
[10:34:42.772] 1. sequential:
[10:34:42.772]    - args: function (..., envir = parent.frame())
[10:34:42.772]    - tweaked: FALSE
[10:34:42.772]    - call: NULL
[10:34:42.772] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[10:34:42.773] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.773] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.773] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.774] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.774] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.774] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.774] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.774] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.775] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.775] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.775] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.775] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.775] Environment variable ‘R_FUTURE_PLAN’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.776] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.777] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.777] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.777] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.777] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.777] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.778] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.778] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.778] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.778] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.778] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.779] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.779] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.779] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[10:34:42.780] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.780] Setting plan('default')
[10:34:42.780] plan(): Setting new future strategy stack:
[10:34:42.780] List of future strategies:
[10:34:42.780] 1. sequential:
[10:34:42.780]    - args: function (..., envir = parent.frame())
[10:34:42.780]    - tweaked: FALSE
[10:34:42.780]    - call: NULL
[10:34:42.781] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[10:34:42.781] plan(): Setting new future strategy stack:
[10:34:42.781] List of future strategies:
[10:34:42.781] 1. sequential:
[10:34:42.781]    - args: function (..., envir = parent.frame())
[10:34:42.781]    - tweaked: FALSE
[10:34:42.781]    - call: NULL
[10:34:42.782] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:34:42.783] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:42.783] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:42.783] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:42.783] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:42.783] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:42.783] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:42.784] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:42.784] R_FUTURE_PLAN=‘multisession’
[10:34:42.785] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[10:34:42.785] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:42.785] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:42.785] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:42.785] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:42.785] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:42.785] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:42.786] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:42.787] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:42.787] Option 'future.plan' = ‘multisession’
[10:34:42.787] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:42.788] Setting plan('default')
[10:34:42.788] plan(): Setting new future strategy stack:
[10:34:42.788] List of future strategies:
[10:34:42.788] 1. multisession:
[10:34:42.788]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:42.788]    - tweaked: FALSE
[10:34:42.788]    - call: plan("default", .init = FALSE)
[10:34:42.792] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:34:42.792] plan(): Setting new future strategy stack:
[10:34:42.792] List of future strategies:
[10:34:42.792] 1. multisession:
[10:34:42.792]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:42.792]    - tweaked: FALSE
[10:34:42.792]    - call: plan("default")
[10:34:42.795] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:42.795] multisession:
[10:34:42.795] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:42.795] - tweaked: FALSE
[10:34:42.795] - call: plan("default")
[10:34:42.798] getGlobalsAndPackages() ...
[10:34:42.798] Not searching for globals
[10:34:42.798] - globals: [0] <none>
[10:34:42.798] getGlobalsAndPackages() ... DONE
[10:34:42.799] [local output] makeClusterPSOCK() ...
[10:34:42.802] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:34:42.803] [local output] Base port: 11274
[10:34:42.803] [local output] Getting setup options for 2 cluster nodes ...
[10:34:42.803] [local output]  - Node 1 of 2 ...
[10:34:42.803] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:42.804] [local output] Rscript port: 11274

[10:34:42.804] [local output]  - Node 2 of 2 ...
[10:34:42.804] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:42.805] [local output] Rscript port: 11274

[10:34:42.805] [local output] Getting setup options for 2 cluster nodes ... done
[10:34:42.805] [local output]  - Parallel setup requested for some PSOCK nodes
[10:34:42.805] [local output] Setting up PSOCK nodes in parallel
[10:34:42.805] List of 36
[10:34:42.805]  $ worker          : chr "localhost"
[10:34:42.805]   ..- attr(*, "localhost")= logi TRUE
[10:34:42.805]  $ master          : chr "localhost"
[10:34:42.805]  $ port            : int 11274
[10:34:42.805]  $ connectTimeout  : num 120
[10:34:42.805]  $ timeout         : num 2592000
[10:34:42.805]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:34:42.805]  $ homogeneous     : logi TRUE
[10:34:42.805]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:34:42.805]  $ rscript_envs    : NULL
[10:34:42.805]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:42.805]  $ rscript_startup : NULL
[10:34:42.805]  $ rscript_sh      : chr "sh"
[10:34:42.805]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:42.805]  $ methods         : logi TRUE
[10:34:42.805]  $ socketOptions   : chr "no-delay"
[10:34:42.805]  $ useXDR          : logi FALSE
[10:34:42.805]  $ outfile         : chr "/dev/null"
[10:34:42.805]  $ renice          : int NA
[10:34:42.805]  $ rshcmd          : NULL
[10:34:42.805]  $ user            : chr(0) 
[10:34:42.805]  $ revtunnel       : logi FALSE
[10:34:42.805]  $ rshlogfile      : NULL
[10:34:42.805]  $ rshopts         : chr(0) 
[10:34:42.805]  $ rank            : int 1
[10:34:42.805]  $ manual          : logi FALSE
[10:34:42.805]  $ dryrun          : logi FALSE
[10:34:42.805]  $ quiet           : logi FALSE
[10:34:42.805]  $ setup_strategy  : chr "parallel"
[10:34:42.805]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:42.805]  $ pidfile         : chr "/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9323a44fc8.pid"
[10:34:42.805]  $ rshcmd_label    : NULL
[10:34:42.805]  $ rsh_call        : NULL
[10:34:42.805]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:42.805]  $ localMachine    : logi TRUE
[10:34:42.805]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:34:42.805]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:34:42.805]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:34:42.805]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:34:42.805]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:34:42.805]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:34:42.805]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:34:42.805]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:34:42.805]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:34:42.805]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:34:42.805]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:34:42.805]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:34:42.805]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:34:42.805]  $ arguments       :List of 28
[10:34:42.805]   ..$ worker          : chr "localhost"
[10:34:42.805]   ..$ master          : NULL
[10:34:42.805]   ..$ port            : int 11274
[10:34:42.805]   ..$ connectTimeout  : num 120
[10:34:42.805]   ..$ timeout         : num 2592000
[10:34:42.805]   ..$ rscript         : NULL
[10:34:42.805]   ..$ homogeneous     : NULL
[10:34:42.805]   ..$ rscript_args    : NULL
[10:34:42.805]   ..$ rscript_envs    : NULL
[10:34:42.805]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:42.805]   ..$ rscript_startup : NULL
[10:34:42.805]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:34:42.805]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:42.805]   ..$ methods         : logi TRUE
[10:34:42.805]   ..$ socketOptions   : chr "no-delay"
[10:34:42.805]   ..$ useXDR          : logi FALSE
[10:34:42.805]   ..$ outfile         : chr "/dev/null"
[10:34:42.805]   ..$ renice          : int NA
[10:34:42.805]   ..$ rshcmd          : NULL
[10:34:42.805]   ..$ user            : NULL
[10:34:42.805]   ..$ revtunnel       : logi NA
[10:34:42.805]   ..$ rshlogfile      : NULL
[10:34:42.805]   ..$ rshopts         : NULL
[10:34:42.805]   ..$ rank            : int 1
[10:34:42.805]   ..$ manual          : logi FALSE
[10:34:42.805]   ..$ dryrun          : logi FALSE
[10:34:42.805]   ..$ quiet           : logi FALSE
[10:34:42.805]   ..$ setup_strategy  : chr "parallel"
[10:34:42.805]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:34:42.822] [local output] System call to launch all workers:
[10:34:42.822] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e9323a44fc8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11274 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:34:42.822] [local output] Starting PSOCK main server
[10:34:42.824] [local output] Workers launched
[10:34:42.824] [local output] Waiting for workers to connect back
[10:34:42.824]  - [local output] 0 workers out of 2 ready
[10:34:43.090]  - [local output] 0 workers out of 2 ready
[10:34:43.090]  - [local output] 1 workers out of 2 ready
[10:34:43.090]  - [local output] 2 workers out of 2 ready
[10:34:43.091] [local output] Launching of workers completed
[10:34:43.091] [local output] Collecting session information from workers
[10:34:43.091] [local output]  - Worker #1 of 2
[10:34:43.092] [local output]  - Worker #2 of 2
[10:34:43.092] [local output] makeClusterPSOCK() ... done
[10:34:43.104] Packages needed by the future expression (n = 0): <none>
[10:34:43.104] Packages needed by future strategies (n = 0): <none>
[10:34:43.105] {
[10:34:43.105]     {
[10:34:43.105]         {
[10:34:43.105]             ...future.startTime <- base::Sys.time()
[10:34:43.105]             {
[10:34:43.105]                 {
[10:34:43.105]                   {
[10:34:43.105]                     {
[10:34:43.105]                       base::local({
[10:34:43.105]                         has_future <- base::requireNamespace("future", 
[10:34:43.105]                           quietly = TRUE)
[10:34:43.105]                         if (has_future) {
[10:34:43.105]                           ns <- base::getNamespace("future")
[10:34:43.105]                           version <- ns[[".package"]][["version"]]
[10:34:43.105]                           if (is.null(version)) 
[10:34:43.105]                             version <- utils::packageVersion("future")
[10:34:43.105]                         }
[10:34:43.105]                         else {
[10:34:43.105]                           version <- NULL
[10:34:43.105]                         }
[10:34:43.105]                         if (!has_future || version < "1.8.0") {
[10:34:43.105]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:43.105]                             "", base::R.version$version.string), 
[10:34:43.105]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:43.105]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:43.105]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:43.105]                               "release", "version")], collapse = " "), 
[10:34:43.105]                             hostname = base::Sys.info()[["nodename"]])
[10:34:43.105]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:43.105]                             info)
[10:34:43.105]                           info <- base::paste(info, collapse = "; ")
[10:34:43.105]                           if (!has_future) {
[10:34:43.105]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:43.105]                               info)
[10:34:43.105]                           }
[10:34:43.105]                           else {
[10:34:43.105]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:43.105]                               info, version)
[10:34:43.105]                           }
[10:34:43.105]                           base::stop(msg)
[10:34:43.105]                         }
[10:34:43.105]                       })
[10:34:43.105]                     }
[10:34:43.105]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:43.105]                     base::options(mc.cores = 1L)
[10:34:43.105]                   }
[10:34:43.105]                   ...future.strategy.old <- future::plan("list")
[10:34:43.105]                   options(future.plan = NULL)
[10:34:43.105]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.105]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:43.105]                 }
[10:34:43.105]                 ...future.workdir <- getwd()
[10:34:43.105]             }
[10:34:43.105]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:43.105]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:43.105]         }
[10:34:43.105]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:43.105]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:43.105]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:43.105]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:43.105]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:43.105]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:43.105]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:43.105]             base::names(...future.oldOptions))
[10:34:43.105]     }
[10:34:43.105]     if (FALSE) {
[10:34:43.105]     }
[10:34:43.105]     else {
[10:34:43.105]         if (TRUE) {
[10:34:43.105]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:43.105]                 open = "w")
[10:34:43.105]         }
[10:34:43.105]         else {
[10:34:43.105]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:43.105]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:43.105]         }
[10:34:43.105]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:43.105]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:43.105]             base::sink(type = "output", split = FALSE)
[10:34:43.105]             base::close(...future.stdout)
[10:34:43.105]         }, add = TRUE)
[10:34:43.105]     }
[10:34:43.105]     ...future.frame <- base::sys.nframe()
[10:34:43.105]     ...future.conditions <- base::list()
[10:34:43.105]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:43.105]     if (FALSE) {
[10:34:43.105]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:43.105]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:43.105]     }
[10:34:43.105]     ...future.result <- base::tryCatch({
[10:34:43.105]         base::withCallingHandlers({
[10:34:43.105]             ...future.value <- base::withVisible(base::local({
[10:34:43.105]                 ...future.makeSendCondition <- base::local({
[10:34:43.105]                   sendCondition <- NULL
[10:34:43.105]                   function(frame = 1L) {
[10:34:43.105]                     if (is.function(sendCondition)) 
[10:34:43.105]                       return(sendCondition)
[10:34:43.105]                     ns <- getNamespace("parallel")
[10:34:43.105]                     if (exists("sendData", mode = "function", 
[10:34:43.105]                       envir = ns)) {
[10:34:43.105]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:43.105]                         envir = ns)
[10:34:43.105]                       envir <- sys.frame(frame)
[10:34:43.105]                       master <- NULL
[10:34:43.105]                       while (!identical(envir, .GlobalEnv) && 
[10:34:43.105]                         !identical(envir, emptyenv())) {
[10:34:43.105]                         if (exists("master", mode = "list", envir = envir, 
[10:34:43.105]                           inherits = FALSE)) {
[10:34:43.105]                           master <- get("master", mode = "list", 
[10:34:43.105]                             envir = envir, inherits = FALSE)
[10:34:43.105]                           if (inherits(master, c("SOCKnode", 
[10:34:43.105]                             "SOCK0node"))) {
[10:34:43.105]                             sendCondition <<- function(cond) {
[10:34:43.105]                               data <- list(type = "VALUE", value = cond, 
[10:34:43.105]                                 success = TRUE)
[10:34:43.105]                               parallel_sendData(master, data)
[10:34:43.105]                             }
[10:34:43.105]                             return(sendCondition)
[10:34:43.105]                           }
[10:34:43.105]                         }
[10:34:43.105]                         frame <- frame + 1L
[10:34:43.105]                         envir <- sys.frame(frame)
[10:34:43.105]                       }
[10:34:43.105]                     }
[10:34:43.105]                     sendCondition <<- function(cond) NULL
[10:34:43.105]                   }
[10:34:43.105]                 })
[10:34:43.105]                 withCallingHandlers({
[10:34:43.105]                   NA
[10:34:43.105]                 }, immediateCondition = function(cond) {
[10:34:43.105]                   sendCondition <- ...future.makeSendCondition()
[10:34:43.105]                   sendCondition(cond)
[10:34:43.105]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.105]                   {
[10:34:43.105]                     inherits <- base::inherits
[10:34:43.105]                     invokeRestart <- base::invokeRestart
[10:34:43.105]                     is.null <- base::is.null
[10:34:43.105]                     muffled <- FALSE
[10:34:43.105]                     if (inherits(cond, "message")) {
[10:34:43.105]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:43.105]                       if (muffled) 
[10:34:43.105]                         invokeRestart("muffleMessage")
[10:34:43.105]                     }
[10:34:43.105]                     else if (inherits(cond, "warning")) {
[10:34:43.105]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:43.105]                       if (muffled) 
[10:34:43.105]                         invokeRestart("muffleWarning")
[10:34:43.105]                     }
[10:34:43.105]                     else if (inherits(cond, "condition")) {
[10:34:43.105]                       if (!is.null(pattern)) {
[10:34:43.105]                         computeRestarts <- base::computeRestarts
[10:34:43.105]                         grepl <- base::grepl
[10:34:43.105]                         restarts <- computeRestarts(cond)
[10:34:43.105]                         for (restart in restarts) {
[10:34:43.105]                           name <- restart$name
[10:34:43.105]                           if (is.null(name)) 
[10:34:43.105]                             next
[10:34:43.105]                           if (!grepl(pattern, name)) 
[10:34:43.105]                             next
[10:34:43.105]                           invokeRestart(restart)
[10:34:43.105]                           muffled <- TRUE
[10:34:43.105]                           break
[10:34:43.105]                         }
[10:34:43.105]                       }
[10:34:43.105]                     }
[10:34:43.105]                     invisible(muffled)
[10:34:43.105]                   }
[10:34:43.105]                   muffleCondition(cond)
[10:34:43.105]                 })
[10:34:43.105]             }))
[10:34:43.105]             future::FutureResult(value = ...future.value$value, 
[10:34:43.105]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.105]                   ...future.rng), globalenv = if (FALSE) 
[10:34:43.105]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:43.105]                     ...future.globalenv.names))
[10:34:43.105]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:43.105]         }, condition = base::local({
[10:34:43.105]             c <- base::c
[10:34:43.105]             inherits <- base::inherits
[10:34:43.105]             invokeRestart <- base::invokeRestart
[10:34:43.105]             length <- base::length
[10:34:43.105]             list <- base::list
[10:34:43.105]             seq.int <- base::seq.int
[10:34:43.105]             signalCondition <- base::signalCondition
[10:34:43.105]             sys.calls <- base::sys.calls
[10:34:43.105]             `[[` <- base::`[[`
[10:34:43.105]             `+` <- base::`+`
[10:34:43.105]             `<<-` <- base::`<<-`
[10:34:43.105]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:43.105]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:43.105]                   3L)]
[10:34:43.105]             }
[10:34:43.105]             function(cond) {
[10:34:43.105]                 is_error <- inherits(cond, "error")
[10:34:43.105]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:43.105]                   NULL)
[10:34:43.105]                 if (is_error) {
[10:34:43.105]                   sessionInformation <- function() {
[10:34:43.105]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:43.105]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:43.105]                       search = base::search(), system = base::Sys.info())
[10:34:43.105]                   }
[10:34:43.105]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.105]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:43.105]                     cond$call), session = sessionInformation(), 
[10:34:43.105]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:43.105]                   signalCondition(cond)
[10:34:43.105]                 }
[10:34:43.105]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:43.105]                 "immediateCondition"))) {
[10:34:43.105]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:43.105]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.105]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:43.105]                   if (TRUE && !signal) {
[10:34:43.105]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.105]                     {
[10:34:43.105]                       inherits <- base::inherits
[10:34:43.105]                       invokeRestart <- base::invokeRestart
[10:34:43.105]                       is.null <- base::is.null
[10:34:43.105]                       muffled <- FALSE
[10:34:43.105]                       if (inherits(cond, "message")) {
[10:34:43.105]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.105]                         if (muffled) 
[10:34:43.105]                           invokeRestart("muffleMessage")
[10:34:43.105]                       }
[10:34:43.105]                       else if (inherits(cond, "warning")) {
[10:34:43.105]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.105]                         if (muffled) 
[10:34:43.105]                           invokeRestart("muffleWarning")
[10:34:43.105]                       }
[10:34:43.105]                       else if (inherits(cond, "condition")) {
[10:34:43.105]                         if (!is.null(pattern)) {
[10:34:43.105]                           computeRestarts <- base::computeRestarts
[10:34:43.105]                           grepl <- base::grepl
[10:34:43.105]                           restarts <- computeRestarts(cond)
[10:34:43.105]                           for (restart in restarts) {
[10:34:43.105]                             name <- restart$name
[10:34:43.105]                             if (is.null(name)) 
[10:34:43.105]                               next
[10:34:43.105]                             if (!grepl(pattern, name)) 
[10:34:43.105]                               next
[10:34:43.105]                             invokeRestart(restart)
[10:34:43.105]                             muffled <- TRUE
[10:34:43.105]                             break
[10:34:43.105]                           }
[10:34:43.105]                         }
[10:34:43.105]                       }
[10:34:43.105]                       invisible(muffled)
[10:34:43.105]                     }
[10:34:43.105]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.105]                   }
[10:34:43.105]                 }
[10:34:43.105]                 else {
[10:34:43.105]                   if (TRUE) {
[10:34:43.105]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.105]                     {
[10:34:43.105]                       inherits <- base::inherits
[10:34:43.105]                       invokeRestart <- base::invokeRestart
[10:34:43.105]                       is.null <- base::is.null
[10:34:43.105]                       muffled <- FALSE
[10:34:43.105]                       if (inherits(cond, "message")) {
[10:34:43.105]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.105]                         if (muffled) 
[10:34:43.105]                           invokeRestart("muffleMessage")
[10:34:43.105]                       }
[10:34:43.105]                       else if (inherits(cond, "warning")) {
[10:34:43.105]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.105]                         if (muffled) 
[10:34:43.105]                           invokeRestart("muffleWarning")
[10:34:43.105]                       }
[10:34:43.105]                       else if (inherits(cond, "condition")) {
[10:34:43.105]                         if (!is.null(pattern)) {
[10:34:43.105]                           computeRestarts <- base::computeRestarts
[10:34:43.105]                           grepl <- base::grepl
[10:34:43.105]                           restarts <- computeRestarts(cond)
[10:34:43.105]                           for (restart in restarts) {
[10:34:43.105]                             name <- restart$name
[10:34:43.105]                             if (is.null(name)) 
[10:34:43.105]                               next
[10:34:43.105]                             if (!grepl(pattern, name)) 
[10:34:43.105]                               next
[10:34:43.105]                             invokeRestart(restart)
[10:34:43.105]                             muffled <- TRUE
[10:34:43.105]                             break
[10:34:43.105]                           }
[10:34:43.105]                         }
[10:34:43.105]                       }
[10:34:43.105]                       invisible(muffled)
[10:34:43.105]                     }
[10:34:43.105]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.105]                   }
[10:34:43.105]                 }
[10:34:43.105]             }
[10:34:43.105]         }))
[10:34:43.105]     }, error = function(ex) {
[10:34:43.105]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:43.105]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.105]                 ...future.rng), started = ...future.startTime, 
[10:34:43.105]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:43.105]             version = "1.8"), class = "FutureResult")
[10:34:43.105]     }, finally = {
[10:34:43.105]         if (!identical(...future.workdir, getwd())) 
[10:34:43.105]             setwd(...future.workdir)
[10:34:43.105]         {
[10:34:43.105]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:43.105]                 ...future.oldOptions$nwarnings <- NULL
[10:34:43.105]             }
[10:34:43.105]             base::options(...future.oldOptions)
[10:34:43.105]             if (.Platform$OS.type == "windows") {
[10:34:43.105]                 old_names <- names(...future.oldEnvVars)
[10:34:43.105]                 envs <- base::Sys.getenv()
[10:34:43.105]                 names <- names(envs)
[10:34:43.105]                 common <- intersect(names, old_names)
[10:34:43.105]                 added <- setdiff(names, old_names)
[10:34:43.105]                 removed <- setdiff(old_names, names)
[10:34:43.105]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:43.105]                   envs[common]]
[10:34:43.105]                 NAMES <- toupper(changed)
[10:34:43.105]                 args <- list()
[10:34:43.105]                 for (kk in seq_along(NAMES)) {
[10:34:43.105]                   name <- changed[[kk]]
[10:34:43.105]                   NAME <- NAMES[[kk]]
[10:34:43.105]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.105]                     next
[10:34:43.105]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.105]                 }
[10:34:43.105]                 NAMES <- toupper(added)
[10:34:43.105]                 for (kk in seq_along(NAMES)) {
[10:34:43.105]                   name <- added[[kk]]
[10:34:43.105]                   NAME <- NAMES[[kk]]
[10:34:43.105]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.105]                     next
[10:34:43.105]                   args[[name]] <- ""
[10:34:43.105]                 }
[10:34:43.105]                 NAMES <- toupper(removed)
[10:34:43.105]                 for (kk in seq_along(NAMES)) {
[10:34:43.105]                   name <- removed[[kk]]
[10:34:43.105]                   NAME <- NAMES[[kk]]
[10:34:43.105]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.105]                     next
[10:34:43.105]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.105]                 }
[10:34:43.105]                 if (length(args) > 0) 
[10:34:43.105]                   base::do.call(base::Sys.setenv, args = args)
[10:34:43.105]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:43.105]             }
[10:34:43.105]             else {
[10:34:43.105]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:43.105]             }
[10:34:43.105]             {
[10:34:43.105]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:43.105]                   0L) {
[10:34:43.105]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:43.105]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:43.105]                   base::options(opts)
[10:34:43.105]                 }
[10:34:43.105]                 {
[10:34:43.105]                   {
[10:34:43.105]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:43.105]                     NULL
[10:34:43.105]                   }
[10:34:43.105]                   options(future.plan = "multisession")
[10:34:43.105]                   if (is.na("multisession")) 
[10:34:43.105]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.105]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[10:34:43.105]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:43.105]                     .init = FALSE)
[10:34:43.105]                 }
[10:34:43.105]             }
[10:34:43.105]         }
[10:34:43.105]     })
[10:34:43.105]     if (TRUE) {
[10:34:43.105]         base::sink(type = "output", split = FALSE)
[10:34:43.105]         if (TRUE) {
[10:34:43.105]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:43.105]         }
[10:34:43.105]         else {
[10:34:43.105]             ...future.result["stdout"] <- base::list(NULL)
[10:34:43.105]         }
[10:34:43.105]         base::close(...future.stdout)
[10:34:43.105]         ...future.stdout <- NULL
[10:34:43.105]     }
[10:34:43.105]     ...future.result$conditions <- ...future.conditions
[10:34:43.105]     ...future.result$finished <- base::Sys.time()
[10:34:43.105]     ...future.result
[10:34:43.105] }
[10:34:43.165] MultisessionFuture started
[10:34:43.165] result() for ClusterFuture ...
[10:34:43.165] receiveMessageFromWorker() for ClusterFuture ...
[10:34:43.165] - Validating connection of MultisessionFuture
[10:34:43.204] - received message: FutureResult
[10:34:43.204] - Received FutureResult
[10:34:43.204] - Erased future from FutureRegistry
[10:34:43.205] result() for ClusterFuture ...
[10:34:43.205] - result already collected: FutureResult
[10:34:43.205] result() for ClusterFuture ... done
[10:34:43.205] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:43.205] result() for ClusterFuture ... done
[10:34:43.205] result() for ClusterFuture ...
[10:34:43.205] - result already collected: FutureResult
[10:34:43.205] result() for ClusterFuture ... done
[10:34:43.205] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:43.209] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[10:34:43.210] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:43.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:43.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:43.210] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:43.210] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:43.210] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:43.210] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:43.211] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:43.212] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:43.213] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:43.213] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:43.213] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:43.213] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:43.213] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:43.213] Option 'future.plan' = ‘multisession’
[10:34:43.213] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:43.213] Setting plan('default')
[10:34:43.214] plan(): Setting new future strategy stack:
[10:34:43.214] List of future strategies:
[10:34:43.214] 1. multisession:
[10:34:43.214]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.214]    - tweaked: FALSE
[10:34:43.214]    - call: plan("default", .init = FALSE)
[10:34:43.218] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:34:43.218] plan(): Setting new future strategy stack:
[10:34:43.218] List of future strategies:
[10:34:43.218] 1. multisession:
[10:34:43.218]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.218]    - tweaked: FALSE
[10:34:43.218]    - call: plan("default")
[10:34:43.219] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:43.219] multisession:
[10:34:43.219] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.219] - tweaked: FALSE
[10:34:43.219] - call: plan("default")
[10:34:43.222] getGlobalsAndPackages() ...
[10:34:43.222] Not searching for globals
[10:34:43.222] - globals: [0] <none>
[10:34:43.223] getGlobalsAndPackages() ... DONE
[10:34:43.223] [local output] makeClusterPSOCK() ...
[10:34:43.226] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:34:43.227] [local output] Base port: 11598
[10:34:43.227] [local output] Getting setup options for 2 cluster nodes ...
[10:34:43.227] [local output]  - Node 1 of 2 ...
[10:34:43.227] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:43.228] [local output] Rscript port: 11598

[10:34:43.228] [local output]  - Node 2 of 2 ...
[10:34:43.228] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:43.229] [local output] Rscript port: 11598

[10:34:43.229] [local output] Getting setup options for 2 cluster nodes ... done
[10:34:43.229] [local output]  - Parallel setup requested for some PSOCK nodes
[10:34:43.230] [local output] Setting up PSOCK nodes in parallel
[10:34:43.230] List of 36
[10:34:43.230]  $ worker          : chr "localhost"
[10:34:43.230]   ..- attr(*, "localhost")= logi TRUE
[10:34:43.230]  $ master          : chr "localhost"
[10:34:43.230]  $ port            : int 11598
[10:34:43.230]  $ connectTimeout  : num 120
[10:34:43.230]  $ timeout         : num 2592000
[10:34:43.230]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:34:43.230]  $ homogeneous     : logi TRUE
[10:34:43.230]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:34:43.230]  $ rscript_envs    : NULL
[10:34:43.230]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:43.230]  $ rscript_startup : NULL
[10:34:43.230]  $ rscript_sh      : chr "sh"
[10:34:43.230]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:43.230]  $ methods         : logi TRUE
[10:34:43.230]  $ socketOptions   : chr "no-delay"
[10:34:43.230]  $ useXDR          : logi FALSE
[10:34:43.230]  $ outfile         : chr "/dev/null"
[10:34:43.230]  $ renice          : int NA
[10:34:43.230]  $ rshcmd          : NULL
[10:34:43.230]  $ user            : chr(0) 
[10:34:43.230]  $ revtunnel       : logi FALSE
[10:34:43.230]  $ rshlogfile      : NULL
[10:34:43.230]  $ rshopts         : chr(0) 
[10:34:43.230]  $ rank            : int 1
[10:34:43.230]  $ manual          : logi FALSE
[10:34:43.230]  $ dryrun          : logi FALSE
[10:34:43.230]  $ quiet           : logi FALSE
[10:34:43.230]  $ setup_strategy  : chr "parallel"
[10:34:43.230]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:43.230]  $ pidfile         : chr "/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e935bdfb8fa.pid"
[10:34:43.230]  $ rshcmd_label    : NULL
[10:34:43.230]  $ rsh_call        : NULL
[10:34:43.230]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:43.230]  $ localMachine    : logi TRUE
[10:34:43.230]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:34:43.230]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:34:43.230]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:34:43.230]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:34:43.230]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:34:43.230]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:34:43.230]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:34:43.230]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:34:43.230]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:34:43.230]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:34:43.230]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:34:43.230]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:34:43.230]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:34:43.230]  $ arguments       :List of 28
[10:34:43.230]   ..$ worker          : chr "localhost"
[10:34:43.230]   ..$ master          : NULL
[10:34:43.230]   ..$ port            : int 11598
[10:34:43.230]   ..$ connectTimeout  : num 120
[10:34:43.230]   ..$ timeout         : num 2592000
[10:34:43.230]   ..$ rscript         : NULL
[10:34:43.230]   ..$ homogeneous     : NULL
[10:34:43.230]   ..$ rscript_args    : NULL
[10:34:43.230]   ..$ rscript_envs    : NULL
[10:34:43.230]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:43.230]   ..$ rscript_startup : NULL
[10:34:43.230]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:34:43.230]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:43.230]   ..$ methods         : logi TRUE
[10:34:43.230]   ..$ socketOptions   : chr "no-delay"
[10:34:43.230]   ..$ useXDR          : logi FALSE
[10:34:43.230]   ..$ outfile         : chr "/dev/null"
[10:34:43.230]   ..$ renice          : int NA
[10:34:43.230]   ..$ rshcmd          : NULL
[10:34:43.230]   ..$ user            : NULL
[10:34:43.230]   ..$ revtunnel       : logi NA
[10:34:43.230]   ..$ rshlogfile      : NULL
[10:34:43.230]   ..$ rshopts         : NULL
[10:34:43.230]   ..$ rank            : int 1
[10:34:43.230]   ..$ manual          : logi FALSE
[10:34:43.230]   ..$ dryrun          : logi FALSE
[10:34:43.230]   ..$ quiet           : logi FALSE
[10:34:43.230]   ..$ setup_strategy  : chr "parallel"
[10:34:43.230]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:34:43.250] [local output] System call to launch all workers:
[10:34:43.250] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpctIQli/worker.rank=1.parallelly.parent=89747.15e935bdfb8fa.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11598 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:34:43.250] [local output] Starting PSOCK main server
[10:34:43.252] [local output] Workers launched
[10:34:43.252] [local output] Waiting for workers to connect back
[10:34:43.252]  - [local output] 0 workers out of 2 ready
[10:34:43.517]  - [local output] 0 workers out of 2 ready
[10:34:43.518]  - [local output] 1 workers out of 2 ready
[10:34:43.538]  - [local output] 1 workers out of 2 ready
[10:34:43.538]  - [local output] 2 workers out of 2 ready
[10:34:43.538] [local output] Launching of workers completed
[10:34:43.538] [local output] Collecting session information from workers
[10:34:43.539] [local output]  - Worker #1 of 2
[10:34:43.540] [local output]  - Worker #2 of 2
[10:34:43.540] [local output] makeClusterPSOCK() ... done
[10:34:43.550] Packages needed by the future expression (n = 0): <none>
[10:34:43.551] Packages needed by future strategies (n = 0): <none>
[10:34:43.551] {
[10:34:43.551]     {
[10:34:43.551]         {
[10:34:43.551]             ...future.startTime <- base::Sys.time()
[10:34:43.551]             {
[10:34:43.551]                 {
[10:34:43.551]                   {
[10:34:43.551]                     {
[10:34:43.551]                       base::local({
[10:34:43.551]                         has_future <- base::requireNamespace("future", 
[10:34:43.551]                           quietly = TRUE)
[10:34:43.551]                         if (has_future) {
[10:34:43.551]                           ns <- base::getNamespace("future")
[10:34:43.551]                           version <- ns[[".package"]][["version"]]
[10:34:43.551]                           if (is.null(version)) 
[10:34:43.551]                             version <- utils::packageVersion("future")
[10:34:43.551]                         }
[10:34:43.551]                         else {
[10:34:43.551]                           version <- NULL
[10:34:43.551]                         }
[10:34:43.551]                         if (!has_future || version < "1.8.0") {
[10:34:43.551]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:43.551]                             "", base::R.version$version.string), 
[10:34:43.551]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:43.551]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:43.551]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:43.551]                               "release", "version")], collapse = " "), 
[10:34:43.551]                             hostname = base::Sys.info()[["nodename"]])
[10:34:43.551]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:43.551]                             info)
[10:34:43.551]                           info <- base::paste(info, collapse = "; ")
[10:34:43.551]                           if (!has_future) {
[10:34:43.551]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:43.551]                               info)
[10:34:43.551]                           }
[10:34:43.551]                           else {
[10:34:43.551]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:43.551]                               info, version)
[10:34:43.551]                           }
[10:34:43.551]                           base::stop(msg)
[10:34:43.551]                         }
[10:34:43.551]                       })
[10:34:43.551]                     }
[10:34:43.551]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:43.551]                     base::options(mc.cores = 1L)
[10:34:43.551]                   }
[10:34:43.551]                   ...future.strategy.old <- future::plan("list")
[10:34:43.551]                   options(future.plan = NULL)
[10:34:43.551]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.551]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:43.551]                 }
[10:34:43.551]                 ...future.workdir <- getwd()
[10:34:43.551]             }
[10:34:43.551]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:43.551]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:43.551]         }
[10:34:43.551]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:43.551]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:43.551]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:43.551]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:43.551]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:43.551]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:43.551]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:43.551]             base::names(...future.oldOptions))
[10:34:43.551]     }
[10:34:43.551]     if (FALSE) {
[10:34:43.551]     }
[10:34:43.551]     else {
[10:34:43.551]         if (TRUE) {
[10:34:43.551]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:43.551]                 open = "w")
[10:34:43.551]         }
[10:34:43.551]         else {
[10:34:43.551]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:43.551]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:43.551]         }
[10:34:43.551]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:43.551]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:43.551]             base::sink(type = "output", split = FALSE)
[10:34:43.551]             base::close(...future.stdout)
[10:34:43.551]         }, add = TRUE)
[10:34:43.551]     }
[10:34:43.551]     ...future.frame <- base::sys.nframe()
[10:34:43.551]     ...future.conditions <- base::list()
[10:34:43.551]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:43.551]     if (FALSE) {
[10:34:43.551]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:43.551]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:43.551]     }
[10:34:43.551]     ...future.result <- base::tryCatch({
[10:34:43.551]         base::withCallingHandlers({
[10:34:43.551]             ...future.value <- base::withVisible(base::local({
[10:34:43.551]                 ...future.makeSendCondition <- base::local({
[10:34:43.551]                   sendCondition <- NULL
[10:34:43.551]                   function(frame = 1L) {
[10:34:43.551]                     if (is.function(sendCondition)) 
[10:34:43.551]                       return(sendCondition)
[10:34:43.551]                     ns <- getNamespace("parallel")
[10:34:43.551]                     if (exists("sendData", mode = "function", 
[10:34:43.551]                       envir = ns)) {
[10:34:43.551]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:43.551]                         envir = ns)
[10:34:43.551]                       envir <- sys.frame(frame)
[10:34:43.551]                       master <- NULL
[10:34:43.551]                       while (!identical(envir, .GlobalEnv) && 
[10:34:43.551]                         !identical(envir, emptyenv())) {
[10:34:43.551]                         if (exists("master", mode = "list", envir = envir, 
[10:34:43.551]                           inherits = FALSE)) {
[10:34:43.551]                           master <- get("master", mode = "list", 
[10:34:43.551]                             envir = envir, inherits = FALSE)
[10:34:43.551]                           if (inherits(master, c("SOCKnode", 
[10:34:43.551]                             "SOCK0node"))) {
[10:34:43.551]                             sendCondition <<- function(cond) {
[10:34:43.551]                               data <- list(type = "VALUE", value = cond, 
[10:34:43.551]                                 success = TRUE)
[10:34:43.551]                               parallel_sendData(master, data)
[10:34:43.551]                             }
[10:34:43.551]                             return(sendCondition)
[10:34:43.551]                           }
[10:34:43.551]                         }
[10:34:43.551]                         frame <- frame + 1L
[10:34:43.551]                         envir <- sys.frame(frame)
[10:34:43.551]                       }
[10:34:43.551]                     }
[10:34:43.551]                     sendCondition <<- function(cond) NULL
[10:34:43.551]                   }
[10:34:43.551]                 })
[10:34:43.551]                 withCallingHandlers({
[10:34:43.551]                   NA
[10:34:43.551]                 }, immediateCondition = function(cond) {
[10:34:43.551]                   sendCondition <- ...future.makeSendCondition()
[10:34:43.551]                   sendCondition(cond)
[10:34:43.551]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.551]                   {
[10:34:43.551]                     inherits <- base::inherits
[10:34:43.551]                     invokeRestart <- base::invokeRestart
[10:34:43.551]                     is.null <- base::is.null
[10:34:43.551]                     muffled <- FALSE
[10:34:43.551]                     if (inherits(cond, "message")) {
[10:34:43.551]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:43.551]                       if (muffled) 
[10:34:43.551]                         invokeRestart("muffleMessage")
[10:34:43.551]                     }
[10:34:43.551]                     else if (inherits(cond, "warning")) {
[10:34:43.551]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:43.551]                       if (muffled) 
[10:34:43.551]                         invokeRestart("muffleWarning")
[10:34:43.551]                     }
[10:34:43.551]                     else if (inherits(cond, "condition")) {
[10:34:43.551]                       if (!is.null(pattern)) {
[10:34:43.551]                         computeRestarts <- base::computeRestarts
[10:34:43.551]                         grepl <- base::grepl
[10:34:43.551]                         restarts <- computeRestarts(cond)
[10:34:43.551]                         for (restart in restarts) {
[10:34:43.551]                           name <- restart$name
[10:34:43.551]                           if (is.null(name)) 
[10:34:43.551]                             next
[10:34:43.551]                           if (!grepl(pattern, name)) 
[10:34:43.551]                             next
[10:34:43.551]                           invokeRestart(restart)
[10:34:43.551]                           muffled <- TRUE
[10:34:43.551]                           break
[10:34:43.551]                         }
[10:34:43.551]                       }
[10:34:43.551]                     }
[10:34:43.551]                     invisible(muffled)
[10:34:43.551]                   }
[10:34:43.551]                   muffleCondition(cond)
[10:34:43.551]                 })
[10:34:43.551]             }))
[10:34:43.551]             future::FutureResult(value = ...future.value$value, 
[10:34:43.551]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.551]                   ...future.rng), globalenv = if (FALSE) 
[10:34:43.551]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:43.551]                     ...future.globalenv.names))
[10:34:43.551]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:43.551]         }, condition = base::local({
[10:34:43.551]             c <- base::c
[10:34:43.551]             inherits <- base::inherits
[10:34:43.551]             invokeRestart <- base::invokeRestart
[10:34:43.551]             length <- base::length
[10:34:43.551]             list <- base::list
[10:34:43.551]             seq.int <- base::seq.int
[10:34:43.551]             signalCondition <- base::signalCondition
[10:34:43.551]             sys.calls <- base::sys.calls
[10:34:43.551]             `[[` <- base::`[[`
[10:34:43.551]             `+` <- base::`+`
[10:34:43.551]             `<<-` <- base::`<<-`
[10:34:43.551]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:43.551]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:43.551]                   3L)]
[10:34:43.551]             }
[10:34:43.551]             function(cond) {
[10:34:43.551]                 is_error <- inherits(cond, "error")
[10:34:43.551]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:43.551]                   NULL)
[10:34:43.551]                 if (is_error) {
[10:34:43.551]                   sessionInformation <- function() {
[10:34:43.551]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:43.551]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:43.551]                       search = base::search(), system = base::Sys.info())
[10:34:43.551]                   }
[10:34:43.551]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.551]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:43.551]                     cond$call), session = sessionInformation(), 
[10:34:43.551]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:43.551]                   signalCondition(cond)
[10:34:43.551]                 }
[10:34:43.551]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:43.551]                 "immediateCondition"))) {
[10:34:43.551]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:43.551]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.551]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:43.551]                   if (TRUE && !signal) {
[10:34:43.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.551]                     {
[10:34:43.551]                       inherits <- base::inherits
[10:34:43.551]                       invokeRestart <- base::invokeRestart
[10:34:43.551]                       is.null <- base::is.null
[10:34:43.551]                       muffled <- FALSE
[10:34:43.551]                       if (inherits(cond, "message")) {
[10:34:43.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.551]                         if (muffled) 
[10:34:43.551]                           invokeRestart("muffleMessage")
[10:34:43.551]                       }
[10:34:43.551]                       else if (inherits(cond, "warning")) {
[10:34:43.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.551]                         if (muffled) 
[10:34:43.551]                           invokeRestart("muffleWarning")
[10:34:43.551]                       }
[10:34:43.551]                       else if (inherits(cond, "condition")) {
[10:34:43.551]                         if (!is.null(pattern)) {
[10:34:43.551]                           computeRestarts <- base::computeRestarts
[10:34:43.551]                           grepl <- base::grepl
[10:34:43.551]                           restarts <- computeRestarts(cond)
[10:34:43.551]                           for (restart in restarts) {
[10:34:43.551]                             name <- restart$name
[10:34:43.551]                             if (is.null(name)) 
[10:34:43.551]                               next
[10:34:43.551]                             if (!grepl(pattern, name)) 
[10:34:43.551]                               next
[10:34:43.551]                             invokeRestart(restart)
[10:34:43.551]                             muffled <- TRUE
[10:34:43.551]                             break
[10:34:43.551]                           }
[10:34:43.551]                         }
[10:34:43.551]                       }
[10:34:43.551]                       invisible(muffled)
[10:34:43.551]                     }
[10:34:43.551]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.551]                   }
[10:34:43.551]                 }
[10:34:43.551]                 else {
[10:34:43.551]                   if (TRUE) {
[10:34:43.551]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.551]                     {
[10:34:43.551]                       inherits <- base::inherits
[10:34:43.551]                       invokeRestart <- base::invokeRestart
[10:34:43.551]                       is.null <- base::is.null
[10:34:43.551]                       muffled <- FALSE
[10:34:43.551]                       if (inherits(cond, "message")) {
[10:34:43.551]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.551]                         if (muffled) 
[10:34:43.551]                           invokeRestart("muffleMessage")
[10:34:43.551]                       }
[10:34:43.551]                       else if (inherits(cond, "warning")) {
[10:34:43.551]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.551]                         if (muffled) 
[10:34:43.551]                           invokeRestart("muffleWarning")
[10:34:43.551]                       }
[10:34:43.551]                       else if (inherits(cond, "condition")) {
[10:34:43.551]                         if (!is.null(pattern)) {
[10:34:43.551]                           computeRestarts <- base::computeRestarts
[10:34:43.551]                           grepl <- base::grepl
[10:34:43.551]                           restarts <- computeRestarts(cond)
[10:34:43.551]                           for (restart in restarts) {
[10:34:43.551]                             name <- restart$name
[10:34:43.551]                             if (is.null(name)) 
[10:34:43.551]                               next
[10:34:43.551]                             if (!grepl(pattern, name)) 
[10:34:43.551]                               next
[10:34:43.551]                             invokeRestart(restart)
[10:34:43.551]                             muffled <- TRUE
[10:34:43.551]                             break
[10:34:43.551]                           }
[10:34:43.551]                         }
[10:34:43.551]                       }
[10:34:43.551]                       invisible(muffled)
[10:34:43.551]                     }
[10:34:43.551]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.551]                   }
[10:34:43.551]                 }
[10:34:43.551]             }
[10:34:43.551]         }))
[10:34:43.551]     }, error = function(ex) {
[10:34:43.551]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:43.551]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.551]                 ...future.rng), started = ...future.startTime, 
[10:34:43.551]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:43.551]             version = "1.8"), class = "FutureResult")
[10:34:43.551]     }, finally = {
[10:34:43.551]         if (!identical(...future.workdir, getwd())) 
[10:34:43.551]             setwd(...future.workdir)
[10:34:43.551]         {
[10:34:43.551]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:43.551]                 ...future.oldOptions$nwarnings <- NULL
[10:34:43.551]             }
[10:34:43.551]             base::options(...future.oldOptions)
[10:34:43.551]             if (.Platform$OS.type == "windows") {
[10:34:43.551]                 old_names <- names(...future.oldEnvVars)
[10:34:43.551]                 envs <- base::Sys.getenv()
[10:34:43.551]                 names <- names(envs)
[10:34:43.551]                 common <- intersect(names, old_names)
[10:34:43.551]                 added <- setdiff(names, old_names)
[10:34:43.551]                 removed <- setdiff(old_names, names)
[10:34:43.551]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:43.551]                   envs[common]]
[10:34:43.551]                 NAMES <- toupper(changed)
[10:34:43.551]                 args <- list()
[10:34:43.551]                 for (kk in seq_along(NAMES)) {
[10:34:43.551]                   name <- changed[[kk]]
[10:34:43.551]                   NAME <- NAMES[[kk]]
[10:34:43.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.551]                     next
[10:34:43.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.551]                 }
[10:34:43.551]                 NAMES <- toupper(added)
[10:34:43.551]                 for (kk in seq_along(NAMES)) {
[10:34:43.551]                   name <- added[[kk]]
[10:34:43.551]                   NAME <- NAMES[[kk]]
[10:34:43.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.551]                     next
[10:34:43.551]                   args[[name]] <- ""
[10:34:43.551]                 }
[10:34:43.551]                 NAMES <- toupper(removed)
[10:34:43.551]                 for (kk in seq_along(NAMES)) {
[10:34:43.551]                   name <- removed[[kk]]
[10:34:43.551]                   NAME <- NAMES[[kk]]
[10:34:43.551]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.551]                     next
[10:34:43.551]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.551]                 }
[10:34:43.551]                 if (length(args) > 0) 
[10:34:43.551]                   base::do.call(base::Sys.setenv, args = args)
[10:34:43.551]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:43.551]             }
[10:34:43.551]             else {
[10:34:43.551]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:43.551]             }
[10:34:43.551]             {
[10:34:43.551]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:43.551]                   0L) {
[10:34:43.551]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:43.551]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:43.551]                   base::options(opts)
[10:34:43.551]                 }
[10:34:43.551]                 {
[10:34:43.551]                   {
[10:34:43.551]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:43.551]                     NULL
[10:34:43.551]                   }
[10:34:43.551]                   options(future.plan = "multisession")
[10:34:43.551]                   if (is.na("")) 
[10:34:43.551]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.551]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:34:43.551]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:43.551]                     .init = FALSE)
[10:34:43.551]                 }
[10:34:43.551]             }
[10:34:43.551]         }
[10:34:43.551]     })
[10:34:43.551]     if (TRUE) {
[10:34:43.551]         base::sink(type = "output", split = FALSE)
[10:34:43.551]         if (TRUE) {
[10:34:43.551]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:43.551]         }
[10:34:43.551]         else {
[10:34:43.551]             ...future.result["stdout"] <- base::list(NULL)
[10:34:43.551]         }
[10:34:43.551]         base::close(...future.stdout)
[10:34:43.551]         ...future.stdout <- NULL
[10:34:43.551]     }
[10:34:43.551]     ...future.result$conditions <- ...future.conditions
[10:34:43.551]     ...future.result$finished <- base::Sys.time()
[10:34:43.551]     ...future.result
[10:34:43.551] }
[10:34:43.604] MultisessionFuture started
[10:34:43.605] result() for ClusterFuture ...
[10:34:43.605] receiveMessageFromWorker() for ClusterFuture ...
[10:34:43.605] - Validating connection of MultisessionFuture
[10:34:43.638] - received message: FutureResult
[10:34:43.638] - Received FutureResult
[10:34:43.638] - Erased future from FutureRegistry
[10:34:43.638] result() for ClusterFuture ...
[10:34:43.638] - result already collected: FutureResult
[10:34:43.638] result() for ClusterFuture ... done
[10:34:43.638] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:43.639] result() for ClusterFuture ... done
[10:34:43.639] result() for ClusterFuture ...
[10:34:43.639] - result already collected: FutureResult
[10:34:43.639] result() for ClusterFuture ... done
[10:34:43.639] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:43.643] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[10:34:43.644] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:43.644] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:43.644] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:43.645] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:43.645] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:43.645] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:43.645] R_FUTURE_PLAN=‘multisession’
[10:34:43.645] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[10:34:43.645] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:43.645] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:43.645] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:43.646] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:43.647] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:43.647] Option 'future.plan' = ‘multisession’
[10:34:43.648] R command-line argument: -p 1
[10:34:43.648]  => 'future.plan' already set.
[10:34:43.648] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:43.648] Setting plan('default')
[10:34:43.648] plan(): Setting new future strategy stack:
[10:34:43.648] List of future strategies:
[10:34:43.648] 1. multisession:
[10:34:43.648]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.648]    - tweaked: FALSE
[10:34:43.648]    - call: plan("default", .init = FALSE)
[10:34:43.653] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:34:43.653] plan(): Setting new future strategy stack:
[10:34:43.654] List of future strategies:
[10:34:43.654] 1. multisession:
[10:34:43.654]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.654]    - tweaked: FALSE
[10:34:43.654]    - call: plan("default")
[10:34:43.654] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:43.654] multisession:
[10:34:43.654] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.654] - tweaked: FALSE
[10:34:43.654] - call: plan("default")
[10:34:43.659] getGlobalsAndPackages() ...
[10:34:43.659] Not searching for globals
[10:34:43.660] - globals: [0] <none>
[10:34:43.660] getGlobalsAndPackages() ... DONE
[10:34:43.661] Packages needed by the future expression (n = 0): <none>
[10:34:43.661] Packages needed by future strategies (n = 0): <none>
[10:34:43.662] {
[10:34:43.662]     {
[10:34:43.662]         {
[10:34:43.662]             ...future.startTime <- base::Sys.time()
[10:34:43.662]             {
[10:34:43.662]                 {
[10:34:43.662]                   {
[10:34:43.662]                     base::local({
[10:34:43.662]                       has_future <- base::requireNamespace("future", 
[10:34:43.662]                         quietly = TRUE)
[10:34:43.662]                       if (has_future) {
[10:34:43.662]                         ns <- base::getNamespace("future")
[10:34:43.662]                         version <- ns[[".package"]][["version"]]
[10:34:43.662]                         if (is.null(version)) 
[10:34:43.662]                           version <- utils::packageVersion("future")
[10:34:43.662]                       }
[10:34:43.662]                       else {
[10:34:43.662]                         version <- NULL
[10:34:43.662]                       }
[10:34:43.662]                       if (!has_future || version < "1.8.0") {
[10:34:43.662]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:43.662]                           "", base::R.version$version.string), 
[10:34:43.662]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:43.662]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:43.662]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:43.662]                             "release", "version")], collapse = " "), 
[10:34:43.662]                           hostname = base::Sys.info()[["nodename"]])
[10:34:43.662]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:43.662]                           info)
[10:34:43.662]                         info <- base::paste(info, collapse = "; ")
[10:34:43.662]                         if (!has_future) {
[10:34:43.662]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:43.662]                             info)
[10:34:43.662]                         }
[10:34:43.662]                         else {
[10:34:43.662]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:43.662]                             info, version)
[10:34:43.662]                         }
[10:34:43.662]                         base::stop(msg)
[10:34:43.662]                       }
[10:34:43.662]                     })
[10:34:43.662]                   }
[10:34:43.662]                   ...future.strategy.old <- future::plan("list")
[10:34:43.662]                   options(future.plan = NULL)
[10:34:43.662]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.662]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:43.662]                 }
[10:34:43.662]                 ...future.workdir <- getwd()
[10:34:43.662]             }
[10:34:43.662]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:43.662]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:43.662]         }
[10:34:43.662]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:43.662]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:43.662]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:43.662]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:43.662]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:43.662]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:43.662]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:43.662]             base::names(...future.oldOptions))
[10:34:43.662]     }
[10:34:43.662]     if (FALSE) {
[10:34:43.662]     }
[10:34:43.662]     else {
[10:34:43.662]         if (TRUE) {
[10:34:43.662]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:43.662]                 open = "w")
[10:34:43.662]         }
[10:34:43.662]         else {
[10:34:43.662]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:43.662]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:43.662]         }
[10:34:43.662]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:43.662]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:43.662]             base::sink(type = "output", split = FALSE)
[10:34:43.662]             base::close(...future.stdout)
[10:34:43.662]         }, add = TRUE)
[10:34:43.662]     }
[10:34:43.662]     ...future.frame <- base::sys.nframe()
[10:34:43.662]     ...future.conditions <- base::list()
[10:34:43.662]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:43.662]     if (FALSE) {
[10:34:43.662]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:43.662]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:43.662]     }
[10:34:43.662]     ...future.result <- base::tryCatch({
[10:34:43.662]         base::withCallingHandlers({
[10:34:43.662]             ...future.value <- base::withVisible(base::local(NA))
[10:34:43.662]             future::FutureResult(value = ...future.value$value, 
[10:34:43.662]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.662]                   ...future.rng), globalenv = if (FALSE) 
[10:34:43.662]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:43.662]                     ...future.globalenv.names))
[10:34:43.662]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:43.662]         }, condition = base::local({
[10:34:43.662]             c <- base::c
[10:34:43.662]             inherits <- base::inherits
[10:34:43.662]             invokeRestart <- base::invokeRestart
[10:34:43.662]             length <- base::length
[10:34:43.662]             list <- base::list
[10:34:43.662]             seq.int <- base::seq.int
[10:34:43.662]             signalCondition <- base::signalCondition
[10:34:43.662]             sys.calls <- base::sys.calls
[10:34:43.662]             `[[` <- base::`[[`
[10:34:43.662]             `+` <- base::`+`
[10:34:43.662]             `<<-` <- base::`<<-`
[10:34:43.662]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:43.662]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:43.662]                   3L)]
[10:34:43.662]             }
[10:34:43.662]             function(cond) {
[10:34:43.662]                 is_error <- inherits(cond, "error")
[10:34:43.662]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:43.662]                   NULL)
[10:34:43.662]                 if (is_error) {
[10:34:43.662]                   sessionInformation <- function() {
[10:34:43.662]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:43.662]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:43.662]                       search = base::search(), system = base::Sys.info())
[10:34:43.662]                   }
[10:34:43.662]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.662]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:43.662]                     cond$call), session = sessionInformation(), 
[10:34:43.662]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:43.662]                   signalCondition(cond)
[10:34:43.662]                 }
[10:34:43.662]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:43.662]                 "immediateCondition"))) {
[10:34:43.662]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:43.662]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.662]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:43.662]                   if (TRUE && !signal) {
[10:34:43.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.662]                     {
[10:34:43.662]                       inherits <- base::inherits
[10:34:43.662]                       invokeRestart <- base::invokeRestart
[10:34:43.662]                       is.null <- base::is.null
[10:34:43.662]                       muffled <- FALSE
[10:34:43.662]                       if (inherits(cond, "message")) {
[10:34:43.662]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.662]                         if (muffled) 
[10:34:43.662]                           invokeRestart("muffleMessage")
[10:34:43.662]                       }
[10:34:43.662]                       else if (inherits(cond, "warning")) {
[10:34:43.662]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.662]                         if (muffled) 
[10:34:43.662]                           invokeRestart("muffleWarning")
[10:34:43.662]                       }
[10:34:43.662]                       else if (inherits(cond, "condition")) {
[10:34:43.662]                         if (!is.null(pattern)) {
[10:34:43.662]                           computeRestarts <- base::computeRestarts
[10:34:43.662]                           grepl <- base::grepl
[10:34:43.662]                           restarts <- computeRestarts(cond)
[10:34:43.662]                           for (restart in restarts) {
[10:34:43.662]                             name <- restart$name
[10:34:43.662]                             if (is.null(name)) 
[10:34:43.662]                               next
[10:34:43.662]                             if (!grepl(pattern, name)) 
[10:34:43.662]                               next
[10:34:43.662]                             invokeRestart(restart)
[10:34:43.662]                             muffled <- TRUE
[10:34:43.662]                             break
[10:34:43.662]                           }
[10:34:43.662]                         }
[10:34:43.662]                       }
[10:34:43.662]                       invisible(muffled)
[10:34:43.662]                     }
[10:34:43.662]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.662]                   }
[10:34:43.662]                 }
[10:34:43.662]                 else {
[10:34:43.662]                   if (TRUE) {
[10:34:43.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.662]                     {
[10:34:43.662]                       inherits <- base::inherits
[10:34:43.662]                       invokeRestart <- base::invokeRestart
[10:34:43.662]                       is.null <- base::is.null
[10:34:43.662]                       muffled <- FALSE
[10:34:43.662]                       if (inherits(cond, "message")) {
[10:34:43.662]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.662]                         if (muffled) 
[10:34:43.662]                           invokeRestart("muffleMessage")
[10:34:43.662]                       }
[10:34:43.662]                       else if (inherits(cond, "warning")) {
[10:34:43.662]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.662]                         if (muffled) 
[10:34:43.662]                           invokeRestart("muffleWarning")
[10:34:43.662]                       }
[10:34:43.662]                       else if (inherits(cond, "condition")) {
[10:34:43.662]                         if (!is.null(pattern)) {
[10:34:43.662]                           computeRestarts <- base::computeRestarts
[10:34:43.662]                           grepl <- base::grepl
[10:34:43.662]                           restarts <- computeRestarts(cond)
[10:34:43.662]                           for (restart in restarts) {
[10:34:43.662]                             name <- restart$name
[10:34:43.662]                             if (is.null(name)) 
[10:34:43.662]                               next
[10:34:43.662]                             if (!grepl(pattern, name)) 
[10:34:43.662]                               next
[10:34:43.662]                             invokeRestart(restart)
[10:34:43.662]                             muffled <- TRUE
[10:34:43.662]                             break
[10:34:43.662]                           }
[10:34:43.662]                         }
[10:34:43.662]                       }
[10:34:43.662]                       invisible(muffled)
[10:34:43.662]                     }
[10:34:43.662]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.662]                   }
[10:34:43.662]                 }
[10:34:43.662]             }
[10:34:43.662]         }))
[10:34:43.662]     }, error = function(ex) {
[10:34:43.662]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:43.662]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.662]                 ...future.rng), started = ...future.startTime, 
[10:34:43.662]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:43.662]             version = "1.8"), class = "FutureResult")
[10:34:43.662]     }, finally = {
[10:34:43.662]         if (!identical(...future.workdir, getwd())) 
[10:34:43.662]             setwd(...future.workdir)
[10:34:43.662]         {
[10:34:43.662]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:43.662]                 ...future.oldOptions$nwarnings <- NULL
[10:34:43.662]             }
[10:34:43.662]             base::options(...future.oldOptions)
[10:34:43.662]             if (.Platform$OS.type == "windows") {
[10:34:43.662]                 old_names <- names(...future.oldEnvVars)
[10:34:43.662]                 envs <- base::Sys.getenv()
[10:34:43.662]                 names <- names(envs)
[10:34:43.662]                 common <- intersect(names, old_names)
[10:34:43.662]                 added <- setdiff(names, old_names)
[10:34:43.662]                 removed <- setdiff(old_names, names)
[10:34:43.662]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:43.662]                   envs[common]]
[10:34:43.662]                 NAMES <- toupper(changed)
[10:34:43.662]                 args <- list()
[10:34:43.662]                 for (kk in seq_along(NAMES)) {
[10:34:43.662]                   name <- changed[[kk]]
[10:34:43.662]                   NAME <- NAMES[[kk]]
[10:34:43.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.662]                     next
[10:34:43.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.662]                 }
[10:34:43.662]                 NAMES <- toupper(added)
[10:34:43.662]                 for (kk in seq_along(NAMES)) {
[10:34:43.662]                   name <- added[[kk]]
[10:34:43.662]                   NAME <- NAMES[[kk]]
[10:34:43.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.662]                     next
[10:34:43.662]                   args[[name]] <- ""
[10:34:43.662]                 }
[10:34:43.662]                 NAMES <- toupper(removed)
[10:34:43.662]                 for (kk in seq_along(NAMES)) {
[10:34:43.662]                   name <- removed[[kk]]
[10:34:43.662]                   NAME <- NAMES[[kk]]
[10:34:43.662]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.662]                     next
[10:34:43.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.662]                 }
[10:34:43.662]                 if (length(args) > 0) 
[10:34:43.662]                   base::do.call(base::Sys.setenv, args = args)
[10:34:43.662]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:43.662]             }
[10:34:43.662]             else {
[10:34:43.662]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:43.662]             }
[10:34:43.662]             {
[10:34:43.662]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:43.662]                   0L) {
[10:34:43.662]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:43.662]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:43.662]                   base::options(opts)
[10:34:43.662]                 }
[10:34:43.662]                 {
[10:34:43.662]                   {
[10:34:43.662]                     NULL
[10:34:43.662]                     RNGkind("Mersenne-Twister")
[10:34:43.662]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:43.662]                       inherits = FALSE)
[10:34:43.662]                   }
[10:34:43.662]                   options(future.plan = "multisession")
[10:34:43.662]                   if (is.na("multisession")) 
[10:34:43.662]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.662]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[10:34:43.662]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:43.662]                     .init = FALSE)
[10:34:43.662]                 }
[10:34:43.662]             }
[10:34:43.662]         }
[10:34:43.662]     })
[10:34:43.662]     if (TRUE) {
[10:34:43.662]         base::sink(type = "output", split = FALSE)
[10:34:43.662]         if (TRUE) {
[10:34:43.662]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:43.662]         }
[10:34:43.662]         else {
[10:34:43.662]             ...future.result["stdout"] <- base::list(NULL)
[10:34:43.662]         }
[10:34:43.662]         base::close(...future.stdout)
[10:34:43.662]         ...future.stdout <- NULL
[10:34:43.662]     }
[10:34:43.662]     ...future.result$conditions <- ...future.conditions
[10:34:43.662]     ...future.result$finished <- base::Sys.time()
[10:34:43.662]     ...future.result
[10:34:43.662] }
[10:34:43.665] plan(): Setting new future strategy stack:
[10:34:43.665] List of future strategies:
[10:34:43.665] 1. sequential:
[10:34:43.665]    - args: function (..., envir = parent.frame())
[10:34:43.665]    - tweaked: FALSE
[10:34:43.665]    - call: NULL
[10:34:43.665] plan(): nbrOfWorkers() = 1
[10:34:43.667] plan(): Setting new future strategy stack:
[10:34:43.667] List of future strategies:
[10:34:43.667] 1. multisession:
[10:34:43.667]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.667]    - tweaked: FALSE
[10:34:43.667]    - call: plan("default")
[10:34:43.671] plan(): nbrOfWorkers() = 1
[10:34:43.671] SequentialFuture started (and completed)
[10:34:43.671] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:43.675] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[10:34:43.676] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:43.676] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:43.676] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:43.676] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:43.676] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:43.676] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:43.677] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:43.678] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:43.679] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:43.679] Option 'future.plan' = ‘multisession’
[10:34:43.680] R command-line argument: -p 1
[10:34:43.680]  => 'future.plan' already set.
[10:34:43.680] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:43.680] Setting plan('default')
[10:34:43.680] plan(): Setting new future strategy stack:
[10:34:43.680] List of future strategies:
[10:34:43.680] 1. multisession:
[10:34:43.680]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.680]    - tweaked: FALSE
[10:34:43.680]    - call: plan("default", .init = FALSE)
[10:34:43.683] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:34:43.684] plan(): Setting new future strategy stack:
[10:34:43.684] List of future strategies:
[10:34:43.684] 1. multisession:
[10:34:43.684]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.684]    - tweaked: FALSE
[10:34:43.684]    - call: plan("default")
[10:34:43.684] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:43.684] multisession:
[10:34:43.684] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.684] - tweaked: FALSE
[10:34:43.684] - call: plan("default")
[10:34:43.688] getGlobalsAndPackages() ...
[10:34:43.688] Not searching for globals
[10:34:43.688] - globals: [0] <none>
[10:34:43.688] getGlobalsAndPackages() ... DONE
[10:34:43.688] Packages needed by the future expression (n = 0): <none>
[10:34:43.688] Packages needed by future strategies (n = 0): <none>
[10:34:43.689] {
[10:34:43.689]     {
[10:34:43.689]         {
[10:34:43.689]             ...future.startTime <- base::Sys.time()
[10:34:43.689]             {
[10:34:43.689]                 {
[10:34:43.689]                   {
[10:34:43.689]                     base::local({
[10:34:43.689]                       has_future <- base::requireNamespace("future", 
[10:34:43.689]                         quietly = TRUE)
[10:34:43.689]                       if (has_future) {
[10:34:43.689]                         ns <- base::getNamespace("future")
[10:34:43.689]                         version <- ns[[".package"]][["version"]]
[10:34:43.689]                         if (is.null(version)) 
[10:34:43.689]                           version <- utils::packageVersion("future")
[10:34:43.689]                       }
[10:34:43.689]                       else {
[10:34:43.689]                         version <- NULL
[10:34:43.689]                       }
[10:34:43.689]                       if (!has_future || version < "1.8.0") {
[10:34:43.689]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:43.689]                           "", base::R.version$version.string), 
[10:34:43.689]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:43.689]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:43.689]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:43.689]                             "release", "version")], collapse = " "), 
[10:34:43.689]                           hostname = base::Sys.info()[["nodename"]])
[10:34:43.689]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:43.689]                           info)
[10:34:43.689]                         info <- base::paste(info, collapse = "; ")
[10:34:43.689]                         if (!has_future) {
[10:34:43.689]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:43.689]                             info)
[10:34:43.689]                         }
[10:34:43.689]                         else {
[10:34:43.689]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:43.689]                             info, version)
[10:34:43.689]                         }
[10:34:43.689]                         base::stop(msg)
[10:34:43.689]                       }
[10:34:43.689]                     })
[10:34:43.689]                   }
[10:34:43.689]                   ...future.strategy.old <- future::plan("list")
[10:34:43.689]                   options(future.plan = NULL)
[10:34:43.689]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.689]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:43.689]                 }
[10:34:43.689]                 ...future.workdir <- getwd()
[10:34:43.689]             }
[10:34:43.689]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:43.689]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:43.689]         }
[10:34:43.689]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:43.689]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:43.689]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:43.689]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:43.689]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:43.689]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:43.689]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:43.689]             base::names(...future.oldOptions))
[10:34:43.689]     }
[10:34:43.689]     if (FALSE) {
[10:34:43.689]     }
[10:34:43.689]     else {
[10:34:43.689]         if (TRUE) {
[10:34:43.689]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:43.689]                 open = "w")
[10:34:43.689]         }
[10:34:43.689]         else {
[10:34:43.689]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:43.689]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:43.689]         }
[10:34:43.689]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:43.689]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:43.689]             base::sink(type = "output", split = FALSE)
[10:34:43.689]             base::close(...future.stdout)
[10:34:43.689]         }, add = TRUE)
[10:34:43.689]     }
[10:34:43.689]     ...future.frame <- base::sys.nframe()
[10:34:43.689]     ...future.conditions <- base::list()
[10:34:43.689]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:43.689]     if (FALSE) {
[10:34:43.689]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:43.689]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:43.689]     }
[10:34:43.689]     ...future.result <- base::tryCatch({
[10:34:43.689]         base::withCallingHandlers({
[10:34:43.689]             ...future.value <- base::withVisible(base::local(NA))
[10:34:43.689]             future::FutureResult(value = ...future.value$value, 
[10:34:43.689]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.689]                   ...future.rng), globalenv = if (FALSE) 
[10:34:43.689]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:43.689]                     ...future.globalenv.names))
[10:34:43.689]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:43.689]         }, condition = base::local({
[10:34:43.689]             c <- base::c
[10:34:43.689]             inherits <- base::inherits
[10:34:43.689]             invokeRestart <- base::invokeRestart
[10:34:43.689]             length <- base::length
[10:34:43.689]             list <- base::list
[10:34:43.689]             seq.int <- base::seq.int
[10:34:43.689]             signalCondition <- base::signalCondition
[10:34:43.689]             sys.calls <- base::sys.calls
[10:34:43.689]             `[[` <- base::`[[`
[10:34:43.689]             `+` <- base::`+`
[10:34:43.689]             `<<-` <- base::`<<-`
[10:34:43.689]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:43.689]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:43.689]                   3L)]
[10:34:43.689]             }
[10:34:43.689]             function(cond) {
[10:34:43.689]                 is_error <- inherits(cond, "error")
[10:34:43.689]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:43.689]                   NULL)
[10:34:43.689]                 if (is_error) {
[10:34:43.689]                   sessionInformation <- function() {
[10:34:43.689]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:43.689]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:43.689]                       search = base::search(), system = base::Sys.info())
[10:34:43.689]                   }
[10:34:43.689]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.689]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:43.689]                     cond$call), session = sessionInformation(), 
[10:34:43.689]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:43.689]                   signalCondition(cond)
[10:34:43.689]                 }
[10:34:43.689]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:43.689]                 "immediateCondition"))) {
[10:34:43.689]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:43.689]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.689]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:43.689]                   if (TRUE && !signal) {
[10:34:43.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.689]                     {
[10:34:43.689]                       inherits <- base::inherits
[10:34:43.689]                       invokeRestart <- base::invokeRestart
[10:34:43.689]                       is.null <- base::is.null
[10:34:43.689]                       muffled <- FALSE
[10:34:43.689]                       if (inherits(cond, "message")) {
[10:34:43.689]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.689]                         if (muffled) 
[10:34:43.689]                           invokeRestart("muffleMessage")
[10:34:43.689]                       }
[10:34:43.689]                       else if (inherits(cond, "warning")) {
[10:34:43.689]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.689]                         if (muffled) 
[10:34:43.689]                           invokeRestart("muffleWarning")
[10:34:43.689]                       }
[10:34:43.689]                       else if (inherits(cond, "condition")) {
[10:34:43.689]                         if (!is.null(pattern)) {
[10:34:43.689]                           computeRestarts <- base::computeRestarts
[10:34:43.689]                           grepl <- base::grepl
[10:34:43.689]                           restarts <- computeRestarts(cond)
[10:34:43.689]                           for (restart in restarts) {
[10:34:43.689]                             name <- restart$name
[10:34:43.689]                             if (is.null(name)) 
[10:34:43.689]                               next
[10:34:43.689]                             if (!grepl(pattern, name)) 
[10:34:43.689]                               next
[10:34:43.689]                             invokeRestart(restart)
[10:34:43.689]                             muffled <- TRUE
[10:34:43.689]                             break
[10:34:43.689]                           }
[10:34:43.689]                         }
[10:34:43.689]                       }
[10:34:43.689]                       invisible(muffled)
[10:34:43.689]                     }
[10:34:43.689]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.689]                   }
[10:34:43.689]                 }
[10:34:43.689]                 else {
[10:34:43.689]                   if (TRUE) {
[10:34:43.689]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.689]                     {
[10:34:43.689]                       inherits <- base::inherits
[10:34:43.689]                       invokeRestart <- base::invokeRestart
[10:34:43.689]                       is.null <- base::is.null
[10:34:43.689]                       muffled <- FALSE
[10:34:43.689]                       if (inherits(cond, "message")) {
[10:34:43.689]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.689]                         if (muffled) 
[10:34:43.689]                           invokeRestart("muffleMessage")
[10:34:43.689]                       }
[10:34:43.689]                       else if (inherits(cond, "warning")) {
[10:34:43.689]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.689]                         if (muffled) 
[10:34:43.689]                           invokeRestart("muffleWarning")
[10:34:43.689]                       }
[10:34:43.689]                       else if (inherits(cond, "condition")) {
[10:34:43.689]                         if (!is.null(pattern)) {
[10:34:43.689]                           computeRestarts <- base::computeRestarts
[10:34:43.689]                           grepl <- base::grepl
[10:34:43.689]                           restarts <- computeRestarts(cond)
[10:34:43.689]                           for (restart in restarts) {
[10:34:43.689]                             name <- restart$name
[10:34:43.689]                             if (is.null(name)) 
[10:34:43.689]                               next
[10:34:43.689]                             if (!grepl(pattern, name)) 
[10:34:43.689]                               next
[10:34:43.689]                             invokeRestart(restart)
[10:34:43.689]                             muffled <- TRUE
[10:34:43.689]                             break
[10:34:43.689]                           }
[10:34:43.689]                         }
[10:34:43.689]                       }
[10:34:43.689]                       invisible(muffled)
[10:34:43.689]                     }
[10:34:43.689]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.689]                   }
[10:34:43.689]                 }
[10:34:43.689]             }
[10:34:43.689]         }))
[10:34:43.689]     }, error = function(ex) {
[10:34:43.689]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:43.689]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.689]                 ...future.rng), started = ...future.startTime, 
[10:34:43.689]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:43.689]             version = "1.8"), class = "FutureResult")
[10:34:43.689]     }, finally = {
[10:34:43.689]         if (!identical(...future.workdir, getwd())) 
[10:34:43.689]             setwd(...future.workdir)
[10:34:43.689]         {
[10:34:43.689]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:43.689]                 ...future.oldOptions$nwarnings <- NULL
[10:34:43.689]             }
[10:34:43.689]             base::options(...future.oldOptions)
[10:34:43.689]             if (.Platform$OS.type == "windows") {
[10:34:43.689]                 old_names <- names(...future.oldEnvVars)
[10:34:43.689]                 envs <- base::Sys.getenv()
[10:34:43.689]                 names <- names(envs)
[10:34:43.689]                 common <- intersect(names, old_names)
[10:34:43.689]                 added <- setdiff(names, old_names)
[10:34:43.689]                 removed <- setdiff(old_names, names)
[10:34:43.689]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:43.689]                   envs[common]]
[10:34:43.689]                 NAMES <- toupper(changed)
[10:34:43.689]                 args <- list()
[10:34:43.689]                 for (kk in seq_along(NAMES)) {
[10:34:43.689]                   name <- changed[[kk]]
[10:34:43.689]                   NAME <- NAMES[[kk]]
[10:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.689]                     next
[10:34:43.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.689]                 }
[10:34:43.689]                 NAMES <- toupper(added)
[10:34:43.689]                 for (kk in seq_along(NAMES)) {
[10:34:43.689]                   name <- added[[kk]]
[10:34:43.689]                   NAME <- NAMES[[kk]]
[10:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.689]                     next
[10:34:43.689]                   args[[name]] <- ""
[10:34:43.689]                 }
[10:34:43.689]                 NAMES <- toupper(removed)
[10:34:43.689]                 for (kk in seq_along(NAMES)) {
[10:34:43.689]                   name <- removed[[kk]]
[10:34:43.689]                   NAME <- NAMES[[kk]]
[10:34:43.689]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.689]                     next
[10:34:43.689]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.689]                 }
[10:34:43.689]                 if (length(args) > 0) 
[10:34:43.689]                   base::do.call(base::Sys.setenv, args = args)
[10:34:43.689]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:43.689]             }
[10:34:43.689]             else {
[10:34:43.689]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:43.689]             }
[10:34:43.689]             {
[10:34:43.689]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:43.689]                   0L) {
[10:34:43.689]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:43.689]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:43.689]                   base::options(opts)
[10:34:43.689]                 }
[10:34:43.689]                 {
[10:34:43.689]                   {
[10:34:43.689]                     NULL
[10:34:43.689]                     RNGkind("Mersenne-Twister")
[10:34:43.689]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:43.689]                       inherits = FALSE)
[10:34:43.689]                   }
[10:34:43.689]                   options(future.plan = "multisession")
[10:34:43.689]                   if (is.na("")) 
[10:34:43.689]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.689]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:34:43.689]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:43.689]                     .init = FALSE)
[10:34:43.689]                 }
[10:34:43.689]             }
[10:34:43.689]         }
[10:34:43.689]     })
[10:34:43.689]     if (TRUE) {
[10:34:43.689]         base::sink(type = "output", split = FALSE)
[10:34:43.689]         if (TRUE) {
[10:34:43.689]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:43.689]         }
[10:34:43.689]         else {
[10:34:43.689]             ...future.result["stdout"] <- base::list(NULL)
[10:34:43.689]         }
[10:34:43.689]         base::close(...future.stdout)
[10:34:43.689]         ...future.stdout <- NULL
[10:34:43.689]     }
[10:34:43.689]     ...future.result$conditions <- ...future.conditions
[10:34:43.689]     ...future.result$finished <- base::Sys.time()
[10:34:43.689]     ...future.result
[10:34:43.689] }
[10:34:43.691] plan(): Setting new future strategy stack:
[10:34:43.691] List of future strategies:
[10:34:43.691] 1. sequential:
[10:34:43.691]    - args: function (..., envir = parent.frame())
[10:34:43.691]    - tweaked: FALSE
[10:34:43.691]    - call: NULL
[10:34:43.691] plan(): nbrOfWorkers() = 1
[10:34:43.692] plan(): Setting new future strategy stack:
[10:34:43.692] List of future strategies:
[10:34:43.692] 1. multisession:
[10:34:43.692]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.692]    - tweaked: FALSE
[10:34:43.692]    - call: plan("default")
[10:34:43.695] plan(): nbrOfWorkers() = 1
[10:34:43.695] SequentialFuture started (and completed)
[10:34:43.696] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:43.699] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[10:34:43.700] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[10:34:43.700] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[10:34:43.700] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[10:34:43.700] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[10:34:43.700] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[10:34:43.700] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[10:34:43.700] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[10:34:43.701] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[10:34:43.702] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[10:34:43.703] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[10:34:43.703] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[10:34:43.703] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[10:34:43.703] Environment variable ‘R_FUTURE_JOURNAL’ not set
[10:34:43.703] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[10:34:43.703] Option 'future.plan' of type ‘function’
[10:34:43.703] R command-line argument: -p 1
[10:34:43.704]  => 'future.plan' already set.
[10:34:43.704] R process uuid: 6a2fe691-5d3a-22c3-ea95-246ac60c357a
[10:34:43.704] Setting plan('default')
[10:34:43.704] plan(): Setting new future strategy stack:
[10:34:43.704] List of future strategies:
[10:34:43.704] 1. multisession:
[10:34:43.704]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.704]    - tweaked: FALSE
[10:34:43.704]    - call: NULL
[10:34:43.707] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[10:34:43.707] plan(): Setting new future strategy stack:
[10:34:43.708] List of future strategies:
[10:34:43.708] 1. multisession:
[10:34:43.708]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.708]    - tweaked: FALSE
[10:34:43.708]    - call: NULL
[10:34:43.708] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:43.708] multisession:
[10:34:43.708] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.708] - tweaked: FALSE
[10:34:43.708] - call: NULL
[10:34:43.711] getGlobalsAndPackages() ...
[10:34:43.711] Not searching for globals
[10:34:43.711] - globals: [0] <none>
[10:34:43.712] getGlobalsAndPackages() ... DONE
[10:34:43.712] Packages needed by the future expression (n = 0): <none>
[10:34:43.712] Packages needed by future strategies (n = 0): <none>
[10:34:43.712] {
[10:34:43.712]     {
[10:34:43.712]         {
[10:34:43.712]             ...future.startTime <- base::Sys.time()
[10:34:43.712]             {
[10:34:43.712]                 {
[10:34:43.712]                   {
[10:34:43.712]                     base::local({
[10:34:43.712]                       has_future <- base::requireNamespace("future", 
[10:34:43.712]                         quietly = TRUE)
[10:34:43.712]                       if (has_future) {
[10:34:43.712]                         ns <- base::getNamespace("future")
[10:34:43.712]                         version <- ns[[".package"]][["version"]]
[10:34:43.712]                         if (is.null(version)) 
[10:34:43.712]                           version <- utils::packageVersion("future")
[10:34:43.712]                       }
[10:34:43.712]                       else {
[10:34:43.712]                         version <- NULL
[10:34:43.712]                       }
[10:34:43.712]                       if (!has_future || version < "1.8.0") {
[10:34:43.712]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:43.712]                           "", base::R.version$version.string), 
[10:34:43.712]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:43.712]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:43.712]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:43.712]                             "release", "version")], collapse = " "), 
[10:34:43.712]                           hostname = base::Sys.info()[["nodename"]])
[10:34:43.712]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:43.712]                           info)
[10:34:43.712]                         info <- base::paste(info, collapse = "; ")
[10:34:43.712]                         if (!has_future) {
[10:34:43.712]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:43.712]                             info)
[10:34:43.712]                         }
[10:34:43.712]                         else {
[10:34:43.712]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:43.712]                             info, version)
[10:34:43.712]                         }
[10:34:43.712]                         base::stop(msg)
[10:34:43.712]                       }
[10:34:43.712]                     })
[10:34:43.712]                   }
[10:34:43.712]                   ...future.strategy.old <- future::plan("list")
[10:34:43.712]                   options(future.plan = NULL)
[10:34:43.712]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.712]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:43.712]                 }
[10:34:43.712]                 ...future.workdir <- getwd()
[10:34:43.712]             }
[10:34:43.712]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:43.712]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:43.712]         }
[10:34:43.712]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:43.712]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:43.712]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:43.712]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:43.712]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:43.712]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:43.712]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:43.712]             base::names(...future.oldOptions))
[10:34:43.712]     }
[10:34:43.712]     if (FALSE) {
[10:34:43.712]     }
[10:34:43.712]     else {
[10:34:43.712]         if (TRUE) {
[10:34:43.712]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:43.712]                 open = "w")
[10:34:43.712]         }
[10:34:43.712]         else {
[10:34:43.712]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:43.712]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:43.712]         }
[10:34:43.712]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:43.712]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:43.712]             base::sink(type = "output", split = FALSE)
[10:34:43.712]             base::close(...future.stdout)
[10:34:43.712]         }, add = TRUE)
[10:34:43.712]     }
[10:34:43.712]     ...future.frame <- base::sys.nframe()
[10:34:43.712]     ...future.conditions <- base::list()
[10:34:43.712]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:43.712]     if (FALSE) {
[10:34:43.712]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:43.712]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:43.712]     }
[10:34:43.712]     ...future.result <- base::tryCatch({
[10:34:43.712]         base::withCallingHandlers({
[10:34:43.712]             ...future.value <- base::withVisible(base::local(NA))
[10:34:43.712]             future::FutureResult(value = ...future.value$value, 
[10:34:43.712]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.712]                   ...future.rng), globalenv = if (FALSE) 
[10:34:43.712]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:43.712]                     ...future.globalenv.names))
[10:34:43.712]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:43.712]         }, condition = base::local({
[10:34:43.712]             c <- base::c
[10:34:43.712]             inherits <- base::inherits
[10:34:43.712]             invokeRestart <- base::invokeRestart
[10:34:43.712]             length <- base::length
[10:34:43.712]             list <- base::list
[10:34:43.712]             seq.int <- base::seq.int
[10:34:43.712]             signalCondition <- base::signalCondition
[10:34:43.712]             sys.calls <- base::sys.calls
[10:34:43.712]             `[[` <- base::`[[`
[10:34:43.712]             `+` <- base::`+`
[10:34:43.712]             `<<-` <- base::`<<-`
[10:34:43.712]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:43.712]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:43.712]                   3L)]
[10:34:43.712]             }
[10:34:43.712]             function(cond) {
[10:34:43.712]                 is_error <- inherits(cond, "error")
[10:34:43.712]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:43.712]                   NULL)
[10:34:43.712]                 if (is_error) {
[10:34:43.712]                   sessionInformation <- function() {
[10:34:43.712]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:43.712]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:43.712]                       search = base::search(), system = base::Sys.info())
[10:34:43.712]                   }
[10:34:43.712]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.712]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:43.712]                     cond$call), session = sessionInformation(), 
[10:34:43.712]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:43.712]                   signalCondition(cond)
[10:34:43.712]                 }
[10:34:43.712]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:43.712]                 "immediateCondition"))) {
[10:34:43.712]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:43.712]                   ...future.conditions[[length(...future.conditions) + 
[10:34:43.712]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:43.712]                   if (TRUE && !signal) {
[10:34:43.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.712]                     {
[10:34:43.712]                       inherits <- base::inherits
[10:34:43.712]                       invokeRestart <- base::invokeRestart
[10:34:43.712]                       is.null <- base::is.null
[10:34:43.712]                       muffled <- FALSE
[10:34:43.712]                       if (inherits(cond, "message")) {
[10:34:43.712]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.712]                         if (muffled) 
[10:34:43.712]                           invokeRestart("muffleMessage")
[10:34:43.712]                       }
[10:34:43.712]                       else if (inherits(cond, "warning")) {
[10:34:43.712]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.712]                         if (muffled) 
[10:34:43.712]                           invokeRestart("muffleWarning")
[10:34:43.712]                       }
[10:34:43.712]                       else if (inherits(cond, "condition")) {
[10:34:43.712]                         if (!is.null(pattern)) {
[10:34:43.712]                           computeRestarts <- base::computeRestarts
[10:34:43.712]                           grepl <- base::grepl
[10:34:43.712]                           restarts <- computeRestarts(cond)
[10:34:43.712]                           for (restart in restarts) {
[10:34:43.712]                             name <- restart$name
[10:34:43.712]                             if (is.null(name)) 
[10:34:43.712]                               next
[10:34:43.712]                             if (!grepl(pattern, name)) 
[10:34:43.712]                               next
[10:34:43.712]                             invokeRestart(restart)
[10:34:43.712]                             muffled <- TRUE
[10:34:43.712]                             break
[10:34:43.712]                           }
[10:34:43.712]                         }
[10:34:43.712]                       }
[10:34:43.712]                       invisible(muffled)
[10:34:43.712]                     }
[10:34:43.712]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.712]                   }
[10:34:43.712]                 }
[10:34:43.712]                 else {
[10:34:43.712]                   if (TRUE) {
[10:34:43.712]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:43.712]                     {
[10:34:43.712]                       inherits <- base::inherits
[10:34:43.712]                       invokeRestart <- base::invokeRestart
[10:34:43.712]                       is.null <- base::is.null
[10:34:43.712]                       muffled <- FALSE
[10:34:43.712]                       if (inherits(cond, "message")) {
[10:34:43.712]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:43.712]                         if (muffled) 
[10:34:43.712]                           invokeRestart("muffleMessage")
[10:34:43.712]                       }
[10:34:43.712]                       else if (inherits(cond, "warning")) {
[10:34:43.712]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:43.712]                         if (muffled) 
[10:34:43.712]                           invokeRestart("muffleWarning")
[10:34:43.712]                       }
[10:34:43.712]                       else if (inherits(cond, "condition")) {
[10:34:43.712]                         if (!is.null(pattern)) {
[10:34:43.712]                           computeRestarts <- base::computeRestarts
[10:34:43.712]                           grepl <- base::grepl
[10:34:43.712]                           restarts <- computeRestarts(cond)
[10:34:43.712]                           for (restart in restarts) {
[10:34:43.712]                             name <- restart$name
[10:34:43.712]                             if (is.null(name)) 
[10:34:43.712]                               next
[10:34:43.712]                             if (!grepl(pattern, name)) 
[10:34:43.712]                               next
[10:34:43.712]                             invokeRestart(restart)
[10:34:43.712]                             muffled <- TRUE
[10:34:43.712]                             break
[10:34:43.712]                           }
[10:34:43.712]                         }
[10:34:43.712]                       }
[10:34:43.712]                       invisible(muffled)
[10:34:43.712]                     }
[10:34:43.712]                     muffleCondition(cond, pattern = "^muffle")
[10:34:43.712]                   }
[10:34:43.712]                 }
[10:34:43.712]             }
[10:34:43.712]         }))
[10:34:43.712]     }, error = function(ex) {
[10:34:43.712]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:43.712]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:43.712]                 ...future.rng), started = ...future.startTime, 
[10:34:43.712]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:43.712]             version = "1.8"), class = "FutureResult")
[10:34:43.712]     }, finally = {
[10:34:43.712]         if (!identical(...future.workdir, getwd())) 
[10:34:43.712]             setwd(...future.workdir)
[10:34:43.712]         {
[10:34:43.712]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:43.712]                 ...future.oldOptions$nwarnings <- NULL
[10:34:43.712]             }
[10:34:43.712]             base::options(...future.oldOptions)
[10:34:43.712]             if (.Platform$OS.type == "windows") {
[10:34:43.712]                 old_names <- names(...future.oldEnvVars)
[10:34:43.712]                 envs <- base::Sys.getenv()
[10:34:43.712]                 names <- names(envs)
[10:34:43.712]                 common <- intersect(names, old_names)
[10:34:43.712]                 added <- setdiff(names, old_names)
[10:34:43.712]                 removed <- setdiff(old_names, names)
[10:34:43.712]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:43.712]                   envs[common]]
[10:34:43.712]                 NAMES <- toupper(changed)
[10:34:43.712]                 args <- list()
[10:34:43.712]                 for (kk in seq_along(NAMES)) {
[10:34:43.712]                   name <- changed[[kk]]
[10:34:43.712]                   NAME <- NAMES[[kk]]
[10:34:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.712]                     next
[10:34:43.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.712]                 }
[10:34:43.712]                 NAMES <- toupper(added)
[10:34:43.712]                 for (kk in seq_along(NAMES)) {
[10:34:43.712]                   name <- added[[kk]]
[10:34:43.712]                   NAME <- NAMES[[kk]]
[10:34:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.712]                     next
[10:34:43.712]                   args[[name]] <- ""
[10:34:43.712]                 }
[10:34:43.712]                 NAMES <- toupper(removed)
[10:34:43.712]                 for (kk in seq_along(NAMES)) {
[10:34:43.712]                   name <- removed[[kk]]
[10:34:43.712]                   NAME <- NAMES[[kk]]
[10:34:43.712]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:43.712]                     next
[10:34:43.712]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:43.712]                 }
[10:34:43.712]                 if (length(args) > 0) 
[10:34:43.712]                   base::do.call(base::Sys.setenv, args = args)
[10:34:43.712]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:43.712]             }
[10:34:43.712]             else {
[10:34:43.712]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:43.712]             }
[10:34:43.712]             {
[10:34:43.712]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:43.712]                   0L) {
[10:34:43.712]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:43.712]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:43.712]                   base::options(opts)
[10:34:43.712]                 }
[10:34:43.712]                 {
[10:34:43.712]                   {
[10:34:43.712]                     NULL
[10:34:43.712]                     RNGkind("Mersenne-Twister")
[10:34:43.712]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:43.712]                       inherits = FALSE)
[10:34:43.712]                   }
[10:34:43.712]                   options(future.plan = function (..., workers = availableCores(), 
[10:34:43.712]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:34:43.712]                     envir = parent.frame()) 
[10:34:43.712]                   {
[10:34:43.712]                     if (is.function(workers)) 
[10:34:43.712]                       workers <- workers()
[10:34:43.712]                     workers <- structure(as.integer(workers), 
[10:34:43.712]                       class = class(workers))
[10:34:43.712]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:34:43.712]                       workers >= 1)
[10:34:43.712]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:34:43.712]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:34:43.712]                     }
[10:34:43.712]                     future <- MultisessionFuture(..., workers = workers, 
[10:34:43.712]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:34:43.712]                       envir = envir)
[10:34:43.712]                     if (!future$lazy) 
[10:34:43.712]                       future <- run(future)
[10:34:43.712]                     invisible(future)
[10:34:43.712]                   })
[10:34:43.712]                   if (is.na("")) 
[10:34:43.712]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:43.712]                   else Sys.setenv(R_FUTURE_PLAN = "")
[10:34:43.712]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:43.712]                     .init = FALSE)
[10:34:43.712]                 }
[10:34:43.712]             }
[10:34:43.712]         }
[10:34:43.712]     })
[10:34:43.712]     if (TRUE) {
[10:34:43.712]         base::sink(type = "output", split = FALSE)
[10:34:43.712]         if (TRUE) {
[10:34:43.712]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:43.712]         }
[10:34:43.712]         else {
[10:34:43.712]             ...future.result["stdout"] <- base::list(NULL)
[10:34:43.712]         }
[10:34:43.712]         base::close(...future.stdout)
[10:34:43.712]         ...future.stdout <- NULL
[10:34:43.712]     }
[10:34:43.712]     ...future.result$conditions <- ...future.conditions
[10:34:43.712]     ...future.result$finished <- base::Sys.time()
[10:34:43.712]     ...future.result
[10:34:43.712] }
[10:34:43.714] plan(): Setting new future strategy stack:
[10:34:43.715] List of future strategies:
[10:34:43.715] 1. sequential:
[10:34:43.715]    - args: function (..., envir = parent.frame())
[10:34:43.715]    - tweaked: FALSE
[10:34:43.715]    - call: NULL
[10:34:43.715] plan(): nbrOfWorkers() = 1
[10:34:43.716] plan(): Setting new future strategy stack:
[10:34:43.716] List of future strategies:
[10:34:43.716] 1. multisession:
[10:34:43.716]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:43.716]    - tweaked: FALSE
[10:34:43.716]    - call: NULL
[10:34:43.719] plan(): nbrOfWorkers() = 1
[10:34:43.719] SequentialFuture started (and completed)
[10:34:43.719] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:43.723] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[10:34:43.725] Option 'future.startup.script': TRUE
[10:34:43.725] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:34:43.725] Future startup scripts found: <none>
[10:34:43.726] Option 'future.startup.script': TRUE
[10:34:43.726] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:34:43.726] Future startup scripts found: <none>
[10:34:43.726] Option 'future.startup.script': TRUE
[10:34:43.726] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:34:43.726] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[10:34:43.727] Option 'future.startup.script': TRUE
[10:34:43.728] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:34:43.729] Future startup scripts found: ‘.future.R’
[10:34:43.729] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[10:34:43.730] plan(): Setting new future strategy stack:
[10:34:43.730] List of future strategies:
[10:34:43.730] 1. FutureStrategy:
[10:34:43.730]    - args: function (..., envir = parent.frame())
[10:34:43.730]    - tweaked: FALSE
[10:34:43.730]    - call: future::plan(oplan)
[10:34:43.730] plan(): nbrOfWorkers() = 1
> 
