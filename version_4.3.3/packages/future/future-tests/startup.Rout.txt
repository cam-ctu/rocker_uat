
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:22:34.070] plan(): Setting new future strategy stack:
[16:22:34.071] List of future strategies:
[16:22:34.071] 1. sequential:
[16:22:34.071]    - args: function (..., envir = parent.frame())
[16:22:34.071]    - tweaked: FALSE
[16:22:34.071]    - call: future::plan("sequential")
[16:22:34.084] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[16:22:34.094] plan(): Setting new future strategy stack:
[16:22:34.094] List of future strategies:
[16:22:34.094] 1. sequential:
[16:22:34.094]    - args: function (..., envir = parent.frame())
[16:22:34.094]    - tweaked: FALSE
[16:22:34.094]    - call: NULL
[16:22:34.104] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[16:22:34.111] plan(): Setting new future strategy stack:
[16:22:34.111] List of future strategies:
[16:22:34.111] 1. sequential:
[16:22:34.111]    - args: function (..., envir = parent.frame())
[16:22:34.111]    - tweaked: FALSE
[16:22:34.111]    - call: NULL
[16:22:34.111] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:22:34.112] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.112] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.112] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.112] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.112] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.112] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.113] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.114] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.115] R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.115] Coercing from character to numeric: ‘0.01’
[16:22:34.115] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[16:22:34.115] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.115] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.115] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.115] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.115] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.116] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.116] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:34.116] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.116] Setting plan('default')
[16:22:34.116] plan(): Setting new future strategy stack:
[16:22:34.116] List of future strategies:
[16:22:34.116] 1. sequential:
[16:22:34.116]    - args: function (..., envir = parent.frame())
[16:22:34.116]    - tweaked: FALSE
[16:22:34.116]    - call: NULL
[16:22:34.116] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:22:34.117] plan(): Setting new future strategy stack:
[16:22:34.117] List of future strategies:
[16:22:34.117] 1. sequential:
[16:22:34.117]    - args: function (..., envir = parent.frame())
[16:22:34.117]    - tweaked: FALSE
[16:22:34.117]    - call: NULL
[16:22:34.117] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:22:34.118] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.118] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.118] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.118] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.119] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.120] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.121] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.122] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.122] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.122] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.122] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.122] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.123] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.123] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.123] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:34.123] R command-line argument: -p 1
[16:22:34.123]  => options(future.plan = sequential)
[16:22:34.123] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.123] Setting plan('default')
[16:22:34.123] plan(): Setting new future strategy stack:
[16:22:34.124] List of future strategies:
[16:22:34.124] 1. sequential:
[16:22:34.124]    - args: function (..., envir = parent.frame())
[16:22:34.124]    - tweaked: FALSE
[16:22:34.124]    - call: NULL
[16:22:34.124] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:22:34.124] plan(): Setting new future strategy stack:
[16:22:34.124] List of future strategies:
[16:22:34.124] 1. sequential:
[16:22:34.124]    - args: function (..., envir = parent.frame())
[16:22:34.124]    - tweaked: FALSE
[16:22:34.124]    - call: NULL
[16:22:34.125] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[16:22:34.125] plan(): Setting new future strategy stack:
[16:22:34.125] List of future strategies:
[16:22:34.125] 1. sequential:
[16:22:34.125]    - args: function (..., envir = parent.frame())
[16:22:34.125]    - tweaked: FALSE
[16:22:34.125]    - call: NULL
[16:22:34.125] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[16:22:34.126] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.126] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.126] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.126] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.127] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.128] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.129] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:34.129] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.130] Setting plan('default')
[16:22:34.130] plan(): Setting new future strategy stack:
[16:22:34.130] List of future strategies:
[16:22:34.130] 1. sequential:
[16:22:34.130]    - args: function (..., envir = parent.frame())
[16:22:34.130]    - tweaked: FALSE
[16:22:34.130]    - call: NULL
[16:22:34.130] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[16:22:34.130] plan(): Setting new future strategy stack:
[16:22:34.130] List of future strategies:
[16:22:34.130] 1. sequential:
[16:22:34.130]    - args: function (..., envir = parent.frame())
[16:22:34.130]    - tweaked: FALSE
[16:22:34.130]    - call: NULL
[16:22:34.131] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[16:22:34.132] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.132] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.132] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.133] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.134] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.135] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.135] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.135] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:34.135] R command-line argument: -p 2
[16:22:34.135]  => options(future.plan = tweak(multisession, workers = 2))
[16:22:34.138] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.138] Setting plan('default')
[16:22:34.138] plan(): Setting new future strategy stack:
[16:22:34.138] List of future strategies:
[16:22:34.138] 1. multisession:
[16:22:34.138]    - args: function (..., workers = 2L, envir = parent.frame())
[16:22:34.138]    - tweaked: TRUE
[16:22:34.138]    - call: NULL
[16:22:34.138] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[16:22:34.139] plan(): Setting new future strategy stack:
[16:22:34.139] List of future strategies:
[16:22:34.139] 1. multisession:
[16:22:34.139]    - args: function (..., workers = 2L, envir = parent.frame())
[16:22:34.139]    - tweaked: TRUE
[16:22:34.139]    - call: NULL
[16:22:34.139] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:34.139] multisession:
[16:22:34.139] - args: function (..., workers = 2L, envir = parent.frame())
[16:22:34.139] - tweaked: TRUE
[16:22:34.139] - call: NULL
[16:22:34.141] getGlobalsAndPackages() ...
[16:22:34.141] Not searching for globals
[16:22:34.141] - globals: [0] <none>
[16:22:34.141] getGlobalsAndPackages() ... DONE
[16:22:34.142] [local output] makeClusterPSOCK() ...
[16:22:34.173] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:22:34.174] [local output] Base port: 11913
[16:22:34.174] [local output] Getting setup options for 2 cluster nodes ...
[16:22:34.174] [local output]  - Node 1 of 2 ...
[16:22:34.175] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:34.175] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c49eb0eb0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c49eb0eb0.pid")'’
[16:22:34.362] - Possible to infer worker's PID: TRUE
[16:22:34.362] [local output] Rscript port: 11913

[16:22:34.363] [local output]  - Node 2 of 2 ...
[16:22:34.363] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:34.364] [local output] Rscript port: 11913

[16:22:34.364] [local output] Getting setup options for 2 cluster nodes ... done
[16:22:34.364] [local output]  - Parallel setup requested for some PSOCK nodes
[16:22:34.365] [local output] Setting up PSOCK nodes in parallel
[16:22:34.365] List of 36
[16:22:34.365]  $ worker          : chr "localhost"
[16:22:34.365]   ..- attr(*, "localhost")= logi TRUE
[16:22:34.365]  $ master          : chr "localhost"
[16:22:34.365]  $ port            : int 11913
[16:22:34.365]  $ connectTimeout  : num 120
[16:22:34.365]  $ timeout         : num 2592000
[16:22:34.365]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:22:34.365]  $ homogeneous     : logi TRUE
[16:22:34.365]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:22:34.365]  $ rscript_envs    : NULL
[16:22:34.365]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:34.365]  $ rscript_startup : NULL
[16:22:34.365]  $ rscript_sh      : chr "sh"
[16:22:34.365]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:34.365]  $ methods         : logi TRUE
[16:22:34.365]  $ socketOptions   : chr "no-delay"
[16:22:34.365]  $ useXDR          : logi FALSE
[16:22:34.365]  $ outfile         : chr "/dev/null"
[16:22:34.365]  $ renice          : int NA
[16:22:34.365]  $ rshcmd          : NULL
[16:22:34.365]  $ user            : chr(0) 
[16:22:34.365]  $ revtunnel       : logi FALSE
[16:22:34.365]  $ rshlogfile      : NULL
[16:22:34.365]  $ rshopts         : chr(0) 
[16:22:34.365]  $ rank            : int 1
[16:22:34.365]  $ manual          : logi FALSE
[16:22:34.365]  $ dryrun          : logi FALSE
[16:22:34.365]  $ quiet           : logi FALSE
[16:22:34.365]  $ setup_strategy  : chr "parallel"
[16:22:34.365]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:34.365]  $ pidfile         : chr "/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c49eb0eb0.pid"
[16:22:34.365]  $ rshcmd_label    : NULL
[16:22:34.365]  $ rsh_call        : NULL
[16:22:34.365]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:34.365]  $ localMachine    : logi TRUE
[16:22:34.365]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:22:34.365]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:22:34.365]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:22:34.365]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:22:34.365]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:22:34.365]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:22:34.365]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:22:34.365]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:22:34.365]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:22:34.365]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:22:34.365]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:22:34.365]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:22:34.365]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:22:34.365]  $ arguments       :List of 28
[16:22:34.365]   ..$ worker          : chr "localhost"
[16:22:34.365]   ..$ master          : NULL
[16:22:34.365]   ..$ port            : int 11913
[16:22:34.365]   ..$ connectTimeout  : num 120
[16:22:34.365]   ..$ timeout         : num 2592000
[16:22:34.365]   ..$ rscript         : NULL
[16:22:34.365]   ..$ homogeneous     : NULL
[16:22:34.365]   ..$ rscript_args    : NULL
[16:22:34.365]   ..$ rscript_envs    : NULL
[16:22:34.365]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:34.365]   ..$ rscript_startup : NULL
[16:22:34.365]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:22:34.365]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:34.365]   ..$ methods         : logi TRUE
[16:22:34.365]   ..$ socketOptions   : chr "no-delay"
[16:22:34.365]   ..$ useXDR          : logi FALSE
[16:22:34.365]   ..$ outfile         : chr "/dev/null"
[16:22:34.365]   ..$ renice          : int NA
[16:22:34.365]   ..$ rshcmd          : NULL
[16:22:34.365]   ..$ user            : NULL
[16:22:34.365]   ..$ revtunnel       : logi NA
[16:22:34.365]   ..$ rshlogfile      : NULL
[16:22:34.365]   ..$ rshopts         : NULL
[16:22:34.365]   ..$ rank            : int 1
[16:22:34.365]   ..$ manual          : logi FALSE
[16:22:34.365]   ..$ dryrun          : logi FALSE
[16:22:34.365]   ..$ quiet           : logi FALSE
[16:22:34.365]   ..$ setup_strategy  : chr "parallel"
[16:22:34.365]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:22:34.381] [local output] System call to launch all workers:
[16:22:34.382] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c49eb0eb0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11913 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:22:34.382] [local output] Starting PSOCK main server
[16:22:34.387] [local output] Workers launched
[16:22:34.388] [local output] Waiting for workers to connect back
[16:22:34.388]  - [local output] 0 workers out of 2 ready
[16:22:34.627]  - [local output] 0 workers out of 2 ready
[16:22:34.628]  - [local output] 1 workers out of 2 ready
[16:22:34.638]  - [local output] 1 workers out of 2 ready
[16:22:34.639]  - [local output] 2 workers out of 2 ready
[16:22:34.639] [local output] Launching of workers completed
[16:22:34.639] [local output] Collecting session information from workers
[16:22:34.640] [local output]  - Worker #1 of 2
[16:22:34.641] [local output]  - Worker #2 of 2
[16:22:34.641] [local output] makeClusterPSOCK() ... done
[16:22:34.653] Packages needed by the future expression (n = 0): <none>
[16:22:34.653] Packages needed by future strategies (n = 0): <none>
[16:22:34.654] {
[16:22:34.654]     {
[16:22:34.654]         {
[16:22:34.654]             ...future.startTime <- base::Sys.time()
[16:22:34.654]             {
[16:22:34.654]                 {
[16:22:34.654]                   {
[16:22:34.654]                     {
[16:22:34.654]                       base::local({
[16:22:34.654]                         has_future <- base::requireNamespace("future", 
[16:22:34.654]                           quietly = TRUE)
[16:22:34.654]                         if (has_future) {
[16:22:34.654]                           ns <- base::getNamespace("future")
[16:22:34.654]                           version <- ns[[".package"]][["version"]]
[16:22:34.654]                           if (is.null(version)) 
[16:22:34.654]                             version <- utils::packageVersion("future")
[16:22:34.654]                         }
[16:22:34.654]                         else {
[16:22:34.654]                           version <- NULL
[16:22:34.654]                         }
[16:22:34.654]                         if (!has_future || version < "1.8.0") {
[16:22:34.654]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:34.654]                             "", base::R.version$version.string), 
[16:22:34.654]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:34.654]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:34.654]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:34.654]                               "release", "version")], collapse = " "), 
[16:22:34.654]                             hostname = base::Sys.info()[["nodename"]])
[16:22:34.654]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:34.654]                             info)
[16:22:34.654]                           info <- base::paste(info, collapse = "; ")
[16:22:34.654]                           if (!has_future) {
[16:22:34.654]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:34.654]                               info)
[16:22:34.654]                           }
[16:22:34.654]                           else {
[16:22:34.654]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:34.654]                               info, version)
[16:22:34.654]                           }
[16:22:34.654]                           base::stop(msg)
[16:22:34.654]                         }
[16:22:34.654]                       })
[16:22:34.654]                     }
[16:22:34.654]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:34.654]                     base::options(mc.cores = 1L)
[16:22:34.654]                   }
[16:22:34.654]                   ...future.strategy.old <- future::plan("list")
[16:22:34.654]                   options(future.plan = NULL)
[16:22:34.654]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:34.654]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:34.654]                 }
[16:22:34.654]                 ...future.workdir <- getwd()
[16:22:34.654]             }
[16:22:34.654]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:34.654]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:34.654]         }
[16:22:34.654]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:34.654]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:34.654]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:34.654]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:34.654]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:34.654]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:34.654]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:34.654]             base::names(...future.oldOptions))
[16:22:34.654]     }
[16:22:34.654]     if (FALSE) {
[16:22:34.654]     }
[16:22:34.654]     else {
[16:22:34.654]         if (TRUE) {
[16:22:34.654]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:34.654]                 open = "w")
[16:22:34.654]         }
[16:22:34.654]         else {
[16:22:34.654]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:34.654]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:34.654]         }
[16:22:34.654]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:34.654]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:34.654]             base::sink(type = "output", split = FALSE)
[16:22:34.654]             base::close(...future.stdout)
[16:22:34.654]         }, add = TRUE)
[16:22:34.654]     }
[16:22:34.654]     ...future.frame <- base::sys.nframe()
[16:22:34.654]     ...future.conditions <- base::list()
[16:22:34.654]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:34.654]     if (FALSE) {
[16:22:34.654]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:34.654]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:34.654]     }
[16:22:34.654]     ...future.result <- base::tryCatch({
[16:22:34.654]         base::withCallingHandlers({
[16:22:34.654]             ...future.value <- base::withVisible(base::local({
[16:22:34.654]                 ...future.makeSendCondition <- base::local({
[16:22:34.654]                   sendCondition <- NULL
[16:22:34.654]                   function(frame = 1L) {
[16:22:34.654]                     if (is.function(sendCondition)) 
[16:22:34.654]                       return(sendCondition)
[16:22:34.654]                     ns <- getNamespace("parallel")
[16:22:34.654]                     if (exists("sendData", mode = "function", 
[16:22:34.654]                       envir = ns)) {
[16:22:34.654]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:34.654]                         envir = ns)
[16:22:34.654]                       envir <- sys.frame(frame)
[16:22:34.654]                       master <- NULL
[16:22:34.654]                       while (!identical(envir, .GlobalEnv) && 
[16:22:34.654]                         !identical(envir, emptyenv())) {
[16:22:34.654]                         if (exists("master", mode = "list", envir = envir, 
[16:22:34.654]                           inherits = FALSE)) {
[16:22:34.654]                           master <- get("master", mode = "list", 
[16:22:34.654]                             envir = envir, inherits = FALSE)
[16:22:34.654]                           if (inherits(master, c("SOCKnode", 
[16:22:34.654]                             "SOCK0node"))) {
[16:22:34.654]                             sendCondition <<- function(cond) {
[16:22:34.654]                               data <- list(type = "VALUE", value = cond, 
[16:22:34.654]                                 success = TRUE)
[16:22:34.654]                               parallel_sendData(master, data)
[16:22:34.654]                             }
[16:22:34.654]                             return(sendCondition)
[16:22:34.654]                           }
[16:22:34.654]                         }
[16:22:34.654]                         frame <- frame + 1L
[16:22:34.654]                         envir <- sys.frame(frame)
[16:22:34.654]                       }
[16:22:34.654]                     }
[16:22:34.654]                     sendCondition <<- function(cond) NULL
[16:22:34.654]                   }
[16:22:34.654]                 })
[16:22:34.654]                 withCallingHandlers({
[16:22:34.654]                   NA
[16:22:34.654]                 }, immediateCondition = function(cond) {
[16:22:34.654]                   sendCondition <- ...future.makeSendCondition()
[16:22:34.654]                   sendCondition(cond)
[16:22:34.654]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:34.654]                   {
[16:22:34.654]                     inherits <- base::inherits
[16:22:34.654]                     invokeRestart <- base::invokeRestart
[16:22:34.654]                     is.null <- base::is.null
[16:22:34.654]                     muffled <- FALSE
[16:22:34.654]                     if (inherits(cond, "message")) {
[16:22:34.654]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:34.654]                       if (muffled) 
[16:22:34.654]                         invokeRestart("muffleMessage")
[16:22:34.654]                     }
[16:22:34.654]                     else if (inherits(cond, "warning")) {
[16:22:34.654]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:34.654]                       if (muffled) 
[16:22:34.654]                         invokeRestart("muffleWarning")
[16:22:34.654]                     }
[16:22:34.654]                     else if (inherits(cond, "condition")) {
[16:22:34.654]                       if (!is.null(pattern)) {
[16:22:34.654]                         computeRestarts <- base::computeRestarts
[16:22:34.654]                         grepl <- base::grepl
[16:22:34.654]                         restarts <- computeRestarts(cond)
[16:22:34.654]                         for (restart in restarts) {
[16:22:34.654]                           name <- restart$name
[16:22:34.654]                           if (is.null(name)) 
[16:22:34.654]                             next
[16:22:34.654]                           if (!grepl(pattern, name)) 
[16:22:34.654]                             next
[16:22:34.654]                           invokeRestart(restart)
[16:22:34.654]                           muffled <- TRUE
[16:22:34.654]                           break
[16:22:34.654]                         }
[16:22:34.654]                       }
[16:22:34.654]                     }
[16:22:34.654]                     invisible(muffled)
[16:22:34.654]                   }
[16:22:34.654]                   muffleCondition(cond)
[16:22:34.654]                 })
[16:22:34.654]             }))
[16:22:34.654]             future::FutureResult(value = ...future.value$value, 
[16:22:34.654]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:34.654]                   ...future.rng), globalenv = if (FALSE) 
[16:22:34.654]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:34.654]                     ...future.globalenv.names))
[16:22:34.654]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:34.654]         }, condition = base::local({
[16:22:34.654]             c <- base::c
[16:22:34.654]             inherits <- base::inherits
[16:22:34.654]             invokeRestart <- base::invokeRestart
[16:22:34.654]             length <- base::length
[16:22:34.654]             list <- base::list
[16:22:34.654]             seq.int <- base::seq.int
[16:22:34.654]             signalCondition <- base::signalCondition
[16:22:34.654]             sys.calls <- base::sys.calls
[16:22:34.654]             `[[` <- base::`[[`
[16:22:34.654]             `+` <- base::`+`
[16:22:34.654]             `<<-` <- base::`<<-`
[16:22:34.654]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:34.654]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:34.654]                   3L)]
[16:22:34.654]             }
[16:22:34.654]             function(cond) {
[16:22:34.654]                 is_error <- inherits(cond, "error")
[16:22:34.654]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:34.654]                   NULL)
[16:22:34.654]                 if (is_error) {
[16:22:34.654]                   sessionInformation <- function() {
[16:22:34.654]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:34.654]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:34.654]                       search = base::search(), system = base::Sys.info())
[16:22:34.654]                   }
[16:22:34.654]                   ...future.conditions[[length(...future.conditions) + 
[16:22:34.654]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:34.654]                     cond$call), session = sessionInformation(), 
[16:22:34.654]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:34.654]                   signalCondition(cond)
[16:22:34.654]                 }
[16:22:34.654]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:34.654]                 "immediateCondition"))) {
[16:22:34.654]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:34.654]                   ...future.conditions[[length(...future.conditions) + 
[16:22:34.654]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:34.654]                   if (TRUE && !signal) {
[16:22:34.654]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:34.654]                     {
[16:22:34.654]                       inherits <- base::inherits
[16:22:34.654]                       invokeRestart <- base::invokeRestart
[16:22:34.654]                       is.null <- base::is.null
[16:22:34.654]                       muffled <- FALSE
[16:22:34.654]                       if (inherits(cond, "message")) {
[16:22:34.654]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:34.654]                         if (muffled) 
[16:22:34.654]                           invokeRestart("muffleMessage")
[16:22:34.654]                       }
[16:22:34.654]                       else if (inherits(cond, "warning")) {
[16:22:34.654]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:34.654]                         if (muffled) 
[16:22:34.654]                           invokeRestart("muffleWarning")
[16:22:34.654]                       }
[16:22:34.654]                       else if (inherits(cond, "condition")) {
[16:22:34.654]                         if (!is.null(pattern)) {
[16:22:34.654]                           computeRestarts <- base::computeRestarts
[16:22:34.654]                           grepl <- base::grepl
[16:22:34.654]                           restarts <- computeRestarts(cond)
[16:22:34.654]                           for (restart in restarts) {
[16:22:34.654]                             name <- restart$name
[16:22:34.654]                             if (is.null(name)) 
[16:22:34.654]                               next
[16:22:34.654]                             if (!grepl(pattern, name)) 
[16:22:34.654]                               next
[16:22:34.654]                             invokeRestart(restart)
[16:22:34.654]                             muffled <- TRUE
[16:22:34.654]                             break
[16:22:34.654]                           }
[16:22:34.654]                         }
[16:22:34.654]                       }
[16:22:34.654]                       invisible(muffled)
[16:22:34.654]                     }
[16:22:34.654]                     muffleCondition(cond, pattern = "^muffle")
[16:22:34.654]                   }
[16:22:34.654]                 }
[16:22:34.654]                 else {
[16:22:34.654]                   if (TRUE) {
[16:22:34.654]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:34.654]                     {
[16:22:34.654]                       inherits <- base::inherits
[16:22:34.654]                       invokeRestart <- base::invokeRestart
[16:22:34.654]                       is.null <- base::is.null
[16:22:34.654]                       muffled <- FALSE
[16:22:34.654]                       if (inherits(cond, "message")) {
[16:22:34.654]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:34.654]                         if (muffled) 
[16:22:34.654]                           invokeRestart("muffleMessage")
[16:22:34.654]                       }
[16:22:34.654]                       else if (inherits(cond, "warning")) {
[16:22:34.654]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:34.654]                         if (muffled) 
[16:22:34.654]                           invokeRestart("muffleWarning")
[16:22:34.654]                       }
[16:22:34.654]                       else if (inherits(cond, "condition")) {
[16:22:34.654]                         if (!is.null(pattern)) {
[16:22:34.654]                           computeRestarts <- base::computeRestarts
[16:22:34.654]                           grepl <- base::grepl
[16:22:34.654]                           restarts <- computeRestarts(cond)
[16:22:34.654]                           for (restart in restarts) {
[16:22:34.654]                             name <- restart$name
[16:22:34.654]                             if (is.null(name)) 
[16:22:34.654]                               next
[16:22:34.654]                             if (!grepl(pattern, name)) 
[16:22:34.654]                               next
[16:22:34.654]                             invokeRestart(restart)
[16:22:34.654]                             muffled <- TRUE
[16:22:34.654]                             break
[16:22:34.654]                           }
[16:22:34.654]                         }
[16:22:34.654]                       }
[16:22:34.654]                       invisible(muffled)
[16:22:34.654]                     }
[16:22:34.654]                     muffleCondition(cond, pattern = "^muffle")
[16:22:34.654]                   }
[16:22:34.654]                 }
[16:22:34.654]             }
[16:22:34.654]         }))
[16:22:34.654]     }, error = function(ex) {
[16:22:34.654]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:34.654]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:34.654]                 ...future.rng), started = ...future.startTime, 
[16:22:34.654]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:34.654]             version = "1.8"), class = "FutureResult")
[16:22:34.654]     }, finally = {
[16:22:34.654]         if (!identical(...future.workdir, getwd())) 
[16:22:34.654]             setwd(...future.workdir)
[16:22:34.654]         {
[16:22:34.654]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:34.654]                 ...future.oldOptions$nwarnings <- NULL
[16:22:34.654]             }
[16:22:34.654]             base::options(...future.oldOptions)
[16:22:34.654]             if (.Platform$OS.type == "windows") {
[16:22:34.654]                 old_names <- names(...future.oldEnvVars)
[16:22:34.654]                 envs <- base::Sys.getenv()
[16:22:34.654]                 names <- names(envs)
[16:22:34.654]                 common <- intersect(names, old_names)
[16:22:34.654]                 added <- setdiff(names, old_names)
[16:22:34.654]                 removed <- setdiff(old_names, names)
[16:22:34.654]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:34.654]                   envs[common]]
[16:22:34.654]                 NAMES <- toupper(changed)
[16:22:34.654]                 args <- list()
[16:22:34.654]                 for (kk in seq_along(NAMES)) {
[16:22:34.654]                   name <- changed[[kk]]
[16:22:34.654]                   NAME <- NAMES[[kk]]
[16:22:34.654]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:34.654]                     next
[16:22:34.654]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:34.654]                 }
[16:22:34.654]                 NAMES <- toupper(added)
[16:22:34.654]                 for (kk in seq_along(NAMES)) {
[16:22:34.654]                   name <- added[[kk]]
[16:22:34.654]                   NAME <- NAMES[[kk]]
[16:22:34.654]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:34.654]                     next
[16:22:34.654]                   args[[name]] <- ""
[16:22:34.654]                 }
[16:22:34.654]                 NAMES <- toupper(removed)
[16:22:34.654]                 for (kk in seq_along(NAMES)) {
[16:22:34.654]                   name <- removed[[kk]]
[16:22:34.654]                   NAME <- NAMES[[kk]]
[16:22:34.654]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:34.654]                     next
[16:22:34.654]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:34.654]                 }
[16:22:34.654]                 if (length(args) > 0) 
[16:22:34.654]                   base::do.call(base::Sys.setenv, args = args)
[16:22:34.654]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:34.654]             }
[16:22:34.654]             else {
[16:22:34.654]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:34.654]             }
[16:22:34.654]             {
[16:22:34.654]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:34.654]                   0L) {
[16:22:34.654]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:34.654]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:34.654]                   base::options(opts)
[16:22:34.654]                 }
[16:22:34.654]                 {
[16:22:34.654]                   {
[16:22:34.654]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:34.654]                     NULL
[16:22:34.654]                   }
[16:22:34.654]                   options(future.plan = function (..., workers = 2L, 
[16:22:34.654]                     envir = parent.frame()) 
[16:22:34.654]                   strategy(..., workers = workers, envir = envir))
[16:22:34.654]                   if (is.na(NA_character_)) 
[16:22:34.654]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:34.654]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:34.654]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:34.654]                     .init = FALSE)
[16:22:34.654]                 }
[16:22:34.654]             }
[16:22:34.654]         }
[16:22:34.654]     })
[16:22:34.654]     if (TRUE) {
[16:22:34.654]         base::sink(type = "output", split = FALSE)
[16:22:34.654]         if (TRUE) {
[16:22:34.654]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:34.654]         }
[16:22:34.654]         else {
[16:22:34.654]             ...future.result["stdout"] <- base::list(NULL)
[16:22:34.654]         }
[16:22:34.654]         base::close(...future.stdout)
[16:22:34.654]         ...future.stdout <- NULL
[16:22:34.654]     }
[16:22:34.654]     ...future.result$conditions <- ...future.conditions
[16:22:34.654]     ...future.result$finished <- base::Sys.time()
[16:22:34.654]     ...future.result
[16:22:34.654] }
[16:22:34.707] MultisessionFuture started
[16:22:34.708] result() for ClusterFuture ...
[16:22:34.708] receiveMessageFromWorker() for ClusterFuture ...
[16:22:34.709] - Validating connection of MultisessionFuture
[16:22:34.741] - received message: FutureResult
[16:22:34.741] - Received FutureResult
[16:22:34.744] - Erased future from FutureRegistry
[16:22:34.744] result() for ClusterFuture ...
[16:22:34.744] - result already collected: FutureResult
[16:22:34.744] result() for ClusterFuture ... done
[16:22:34.744] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:34.745] result() for ClusterFuture ... done
[16:22:34.745] result() for ClusterFuture ...
[16:22:34.745] - result already collected: FutureResult
[16:22:34.745] result() for ClusterFuture ... done
[16:22:34.745] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:34.745] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[16:22:34.746] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.747] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.747] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.748] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.749] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.750] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.751] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.751] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.751] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[16:22:34.751] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.751] Setting plan('default')
[16:22:34.752] plan(): Setting new future strategy stack:
[16:22:34.752] List of future strategies:
[16:22:34.752] 1. sequential:
[16:22:34.752]    - args: function (..., envir = parent.frame())
[16:22:34.752]    - tweaked: FALSE
[16:22:34.752]    - call: NULL
[16:22:34.753] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:22:34.753] plan(): Setting new future strategy stack:
[16:22:34.753] List of future strategies:
[16:22:34.753] 1. sequential:
[16:22:34.753]    - args: function (..., envir = parent.frame())
[16:22:34.753]    - tweaked: FALSE
[16:22:34.753]    - call: NULL
[16:22:34.754] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[16:22:34.756] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.756] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.756] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.756] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.756] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.757] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.757] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.757] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.757] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.757] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.758] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.758] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.758] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.758] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.758] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.759] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.759] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.759] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.759] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.759] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.760] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.760] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.760] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.761] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.761] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.761] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.761] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.761] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.762] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.762] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.762] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.762] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[16:22:34.763] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.763] Setting plan('default')
[16:22:34.764] plan(): Setting new future strategy stack:
[16:22:34.764] List of future strategies:
[16:22:34.764] 1. sequential:
[16:22:34.764]    - args: function (..., envir = parent.frame())
[16:22:34.764]    - tweaked: FALSE
[16:22:34.764]    - call: NULL
[16:22:34.764] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:22:34.765] plan(): Setting new future strategy stack:
[16:22:34.765] List of future strategies:
[16:22:34.765] 1. sequential:
[16:22:34.765]    - args: function (..., envir = parent.frame())
[16:22:34.765]    - tweaked: FALSE
[16:22:34.765]    - call: NULL
[16:22:34.766] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[16:22:34.767] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.768] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.768] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.768] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.768] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.768] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.769] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.769] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.769] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.769] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.769] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_PLAN’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.770] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.771] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.771] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.771] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.771] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.771] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.772] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.773] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.773] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.773] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[16:22:34.773] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.774] Setting plan('default')
[16:22:34.774] plan(): Setting new future strategy stack:
[16:22:34.774] List of future strategies:
[16:22:34.774] 1. sequential:
[16:22:34.774]    - args: function (..., envir = parent.frame())
[16:22:34.774]    - tweaked: FALSE
[16:22:34.774]    - call: NULL
[16:22:34.774] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[16:22:34.775] plan(): Setting new future strategy stack:
[16:22:34.775] List of future strategies:
[16:22:34.775] 1. sequential:
[16:22:34.775]    - args: function (..., envir = parent.frame())
[16:22:34.775]    - tweaked: FALSE
[16:22:34.775]    - call: NULL
[16:22:34.775] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:22:34.776] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:34.776] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:34.776] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:34.777] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:34.778] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:34.778] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:34.778] R_FUTURE_PLAN=‘multisession’
[16:22:34.778] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:22:34.778] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:34.778] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:34.778] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:34.779] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:34.780] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:34.781] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:34.781] Option 'future.plan' = ‘multisession’
[16:22:34.781] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:34.781] Setting plan('default')
[16:22:34.781] plan(): Setting new future strategy stack:
[16:22:34.781] List of future strategies:
[16:22:34.781] 1. multisession:
[16:22:34.781]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:34.781]    - tweaked: FALSE
[16:22:34.781]    - call: plan("default", .init = FALSE)
[16:22:34.785] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:22:34.786] plan(): Setting new future strategy stack:
[16:22:34.786] List of future strategies:
[16:22:34.786] 1. multisession:
[16:22:34.786]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:34.786]    - tweaked: FALSE
[16:22:34.786]    - call: plan("default")
[16:22:34.788] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:34.788] multisession:
[16:22:34.788] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:34.788] - tweaked: FALSE
[16:22:34.788] - call: plan("default")
[16:22:34.792] getGlobalsAndPackages() ...
[16:22:34.792] Not searching for globals
[16:22:34.792] - globals: [0] <none>
[16:22:34.792] getGlobalsAndPackages() ... DONE
[16:22:34.792] [local output] makeClusterPSOCK() ...
[16:22:34.795] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:22:34.796] [local output] Base port: 11130
[16:22:34.796] [local output] Getting setup options for 2 cluster nodes ...
[16:22:34.796] [local output]  - Node 1 of 2 ...
[16:22:34.796] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:34.797] [local output] Rscript port: 11130

[16:22:34.797] [local output]  - Node 2 of 2 ...
[16:22:34.798] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:34.798] [local output] Rscript port: 11130

[16:22:34.798] [local output] Getting setup options for 2 cluster nodes ... done
[16:22:34.798] [local output]  - Parallel setup requested for some PSOCK nodes
[16:22:34.799] [local output] Setting up PSOCK nodes in parallel
[16:22:34.799] List of 36
[16:22:34.799]  $ worker          : chr "localhost"
[16:22:34.799]   ..- attr(*, "localhost")= logi TRUE
[16:22:34.799]  $ master          : chr "localhost"
[16:22:34.799]  $ port            : int 11130
[16:22:34.799]  $ connectTimeout  : num 120
[16:22:34.799]  $ timeout         : num 2592000
[16:22:34.799]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:22:34.799]  $ homogeneous     : logi TRUE
[16:22:34.799]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:22:34.799]  $ rscript_envs    : NULL
[16:22:34.799]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:34.799]  $ rscript_startup : NULL
[16:22:34.799]  $ rscript_sh      : chr "sh"
[16:22:34.799]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:34.799]  $ methods         : logi TRUE
[16:22:34.799]  $ socketOptions   : chr "no-delay"
[16:22:34.799]  $ useXDR          : logi FALSE
[16:22:34.799]  $ outfile         : chr "/dev/null"
[16:22:34.799]  $ renice          : int NA
[16:22:34.799]  $ rshcmd          : NULL
[16:22:34.799]  $ user            : chr(0) 
[16:22:34.799]  $ revtunnel       : logi FALSE
[16:22:34.799]  $ rshlogfile      : NULL
[16:22:34.799]  $ rshopts         : chr(0) 
[16:22:34.799]  $ rank            : int 1
[16:22:34.799]  $ manual          : logi FALSE
[16:22:34.799]  $ dryrun          : logi FALSE
[16:22:34.799]  $ quiet           : logi FALSE
[16:22:34.799]  $ setup_strategy  : chr "parallel"
[16:22:34.799]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:34.799]  $ pidfile         : chr "/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c7563d7ec.pid"
[16:22:34.799]  $ rshcmd_label    : NULL
[16:22:34.799]  $ rsh_call        : NULL
[16:22:34.799]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:34.799]  $ localMachine    : logi TRUE
[16:22:34.799]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:22:34.799]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:22:34.799]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:22:34.799]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:22:34.799]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:22:34.799]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:22:34.799]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:22:34.799]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:22:34.799]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:22:34.799]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:22:34.799]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:22:34.799]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:22:34.799]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:22:34.799]  $ arguments       :List of 28
[16:22:34.799]   ..$ worker          : chr "localhost"
[16:22:34.799]   ..$ master          : NULL
[16:22:34.799]   ..$ port            : int 11130
[16:22:34.799]   ..$ connectTimeout  : num 120
[16:22:34.799]   ..$ timeout         : num 2592000
[16:22:34.799]   ..$ rscript         : NULL
[16:22:34.799]   ..$ homogeneous     : NULL
[16:22:34.799]   ..$ rscript_args    : NULL
[16:22:34.799]   ..$ rscript_envs    : NULL
[16:22:34.799]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:34.799]   ..$ rscript_startup : NULL
[16:22:34.799]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:22:34.799]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:34.799]   ..$ methods         : logi TRUE
[16:22:34.799]   ..$ socketOptions   : chr "no-delay"
[16:22:34.799]   ..$ useXDR          : logi FALSE
[16:22:34.799]   ..$ outfile         : chr "/dev/null"
[16:22:34.799]   ..$ renice          : int NA
[16:22:34.799]   ..$ rshcmd          : NULL
[16:22:34.799]   ..$ user            : NULL
[16:22:34.799]   ..$ revtunnel       : logi NA
[16:22:34.799]   ..$ rshlogfile      : NULL
[16:22:34.799]   ..$ rshopts         : NULL
[16:22:34.799]   ..$ rank            : int 1
[16:22:34.799]   ..$ manual          : logi FALSE
[16:22:34.799]   ..$ dryrun          : logi FALSE
[16:22:34.799]   ..$ quiet           : logi FALSE
[16:22:34.799]   ..$ setup_strategy  : chr "parallel"
[16:22:34.799]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:22:34.815] [local output] System call to launch all workers:
[16:22:34.815] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c7563d7ec.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11130 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:22:34.815] [local output] Starting PSOCK main server
[16:22:34.816] [local output] Workers launched
[16:22:34.817] [local output] Waiting for workers to connect back
[16:22:34.817]  - [local output] 0 workers out of 2 ready
[16:22:35.055]  - [local output] 0 workers out of 2 ready
[16:22:35.056]  - [local output] 1 workers out of 2 ready
[16:22:35.064]  - [local output] 1 workers out of 2 ready
[16:22:35.064]  - [local output] 2 workers out of 2 ready
[16:22:35.064] [local output] Launching of workers completed
[16:22:35.064] [local output] Collecting session information from workers
[16:22:35.065] [local output]  - Worker #1 of 2
[16:22:35.066] [local output]  - Worker #2 of 2
[16:22:35.066] [local output] makeClusterPSOCK() ... done
[16:22:35.078] Packages needed by the future expression (n = 0): <none>
[16:22:35.078] Packages needed by future strategies (n = 0): <none>
[16:22:35.079] {
[16:22:35.079]     {
[16:22:35.079]         {
[16:22:35.079]             ...future.startTime <- base::Sys.time()
[16:22:35.079]             {
[16:22:35.079]                 {
[16:22:35.079]                   {
[16:22:35.079]                     {
[16:22:35.079]                       base::local({
[16:22:35.079]                         has_future <- base::requireNamespace("future", 
[16:22:35.079]                           quietly = TRUE)
[16:22:35.079]                         if (has_future) {
[16:22:35.079]                           ns <- base::getNamespace("future")
[16:22:35.079]                           version <- ns[[".package"]][["version"]]
[16:22:35.079]                           if (is.null(version)) 
[16:22:35.079]                             version <- utils::packageVersion("future")
[16:22:35.079]                         }
[16:22:35.079]                         else {
[16:22:35.079]                           version <- NULL
[16:22:35.079]                         }
[16:22:35.079]                         if (!has_future || version < "1.8.0") {
[16:22:35.079]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:35.079]                             "", base::R.version$version.string), 
[16:22:35.079]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:35.079]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:35.079]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:35.079]                               "release", "version")], collapse = " "), 
[16:22:35.079]                             hostname = base::Sys.info()[["nodename"]])
[16:22:35.079]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:35.079]                             info)
[16:22:35.079]                           info <- base::paste(info, collapse = "; ")
[16:22:35.079]                           if (!has_future) {
[16:22:35.079]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:35.079]                               info)
[16:22:35.079]                           }
[16:22:35.079]                           else {
[16:22:35.079]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:35.079]                               info, version)
[16:22:35.079]                           }
[16:22:35.079]                           base::stop(msg)
[16:22:35.079]                         }
[16:22:35.079]                       })
[16:22:35.079]                     }
[16:22:35.079]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:35.079]                     base::options(mc.cores = 1L)
[16:22:35.079]                   }
[16:22:35.079]                   ...future.strategy.old <- future::plan("list")
[16:22:35.079]                   options(future.plan = NULL)
[16:22:35.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:35.079]                 }
[16:22:35.079]                 ...future.workdir <- getwd()
[16:22:35.079]             }
[16:22:35.079]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:35.079]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:35.079]         }
[16:22:35.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:35.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:35.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:35.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:35.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:35.079]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:35.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:35.079]             base::names(...future.oldOptions))
[16:22:35.079]     }
[16:22:35.079]     if (FALSE) {
[16:22:35.079]     }
[16:22:35.079]     else {
[16:22:35.079]         if (TRUE) {
[16:22:35.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:35.079]                 open = "w")
[16:22:35.079]         }
[16:22:35.079]         else {
[16:22:35.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:35.079]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:35.079]         }
[16:22:35.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:35.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:35.079]             base::sink(type = "output", split = FALSE)
[16:22:35.079]             base::close(...future.stdout)
[16:22:35.079]         }, add = TRUE)
[16:22:35.079]     }
[16:22:35.079]     ...future.frame <- base::sys.nframe()
[16:22:35.079]     ...future.conditions <- base::list()
[16:22:35.079]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:35.079]     if (FALSE) {
[16:22:35.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:35.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:35.079]     }
[16:22:35.079]     ...future.result <- base::tryCatch({
[16:22:35.079]         base::withCallingHandlers({
[16:22:35.079]             ...future.value <- base::withVisible(base::local({
[16:22:35.079]                 ...future.makeSendCondition <- base::local({
[16:22:35.079]                   sendCondition <- NULL
[16:22:35.079]                   function(frame = 1L) {
[16:22:35.079]                     if (is.function(sendCondition)) 
[16:22:35.079]                       return(sendCondition)
[16:22:35.079]                     ns <- getNamespace("parallel")
[16:22:35.079]                     if (exists("sendData", mode = "function", 
[16:22:35.079]                       envir = ns)) {
[16:22:35.079]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:35.079]                         envir = ns)
[16:22:35.079]                       envir <- sys.frame(frame)
[16:22:35.079]                       master <- NULL
[16:22:35.079]                       while (!identical(envir, .GlobalEnv) && 
[16:22:35.079]                         !identical(envir, emptyenv())) {
[16:22:35.079]                         if (exists("master", mode = "list", envir = envir, 
[16:22:35.079]                           inherits = FALSE)) {
[16:22:35.079]                           master <- get("master", mode = "list", 
[16:22:35.079]                             envir = envir, inherits = FALSE)
[16:22:35.079]                           if (inherits(master, c("SOCKnode", 
[16:22:35.079]                             "SOCK0node"))) {
[16:22:35.079]                             sendCondition <<- function(cond) {
[16:22:35.079]                               data <- list(type = "VALUE", value = cond, 
[16:22:35.079]                                 success = TRUE)
[16:22:35.079]                               parallel_sendData(master, data)
[16:22:35.079]                             }
[16:22:35.079]                             return(sendCondition)
[16:22:35.079]                           }
[16:22:35.079]                         }
[16:22:35.079]                         frame <- frame + 1L
[16:22:35.079]                         envir <- sys.frame(frame)
[16:22:35.079]                       }
[16:22:35.079]                     }
[16:22:35.079]                     sendCondition <<- function(cond) NULL
[16:22:35.079]                   }
[16:22:35.079]                 })
[16:22:35.079]                 withCallingHandlers({
[16:22:35.079]                   NA
[16:22:35.079]                 }, immediateCondition = function(cond) {
[16:22:35.079]                   sendCondition <- ...future.makeSendCondition()
[16:22:35.079]                   sendCondition(cond)
[16:22:35.079]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.079]                   {
[16:22:35.079]                     inherits <- base::inherits
[16:22:35.079]                     invokeRestart <- base::invokeRestart
[16:22:35.079]                     is.null <- base::is.null
[16:22:35.079]                     muffled <- FALSE
[16:22:35.079]                     if (inherits(cond, "message")) {
[16:22:35.079]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:35.079]                       if (muffled) 
[16:22:35.079]                         invokeRestart("muffleMessage")
[16:22:35.079]                     }
[16:22:35.079]                     else if (inherits(cond, "warning")) {
[16:22:35.079]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:35.079]                       if (muffled) 
[16:22:35.079]                         invokeRestart("muffleWarning")
[16:22:35.079]                     }
[16:22:35.079]                     else if (inherits(cond, "condition")) {
[16:22:35.079]                       if (!is.null(pattern)) {
[16:22:35.079]                         computeRestarts <- base::computeRestarts
[16:22:35.079]                         grepl <- base::grepl
[16:22:35.079]                         restarts <- computeRestarts(cond)
[16:22:35.079]                         for (restart in restarts) {
[16:22:35.079]                           name <- restart$name
[16:22:35.079]                           if (is.null(name)) 
[16:22:35.079]                             next
[16:22:35.079]                           if (!grepl(pattern, name)) 
[16:22:35.079]                             next
[16:22:35.079]                           invokeRestart(restart)
[16:22:35.079]                           muffled <- TRUE
[16:22:35.079]                           break
[16:22:35.079]                         }
[16:22:35.079]                       }
[16:22:35.079]                     }
[16:22:35.079]                     invisible(muffled)
[16:22:35.079]                   }
[16:22:35.079]                   muffleCondition(cond)
[16:22:35.079]                 })
[16:22:35.079]             }))
[16:22:35.079]             future::FutureResult(value = ...future.value$value, 
[16:22:35.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.079]                   ...future.rng), globalenv = if (FALSE) 
[16:22:35.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:35.079]                     ...future.globalenv.names))
[16:22:35.079]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:35.079]         }, condition = base::local({
[16:22:35.079]             c <- base::c
[16:22:35.079]             inherits <- base::inherits
[16:22:35.079]             invokeRestart <- base::invokeRestart
[16:22:35.079]             length <- base::length
[16:22:35.079]             list <- base::list
[16:22:35.079]             seq.int <- base::seq.int
[16:22:35.079]             signalCondition <- base::signalCondition
[16:22:35.079]             sys.calls <- base::sys.calls
[16:22:35.079]             `[[` <- base::`[[`
[16:22:35.079]             `+` <- base::`+`
[16:22:35.079]             `<<-` <- base::`<<-`
[16:22:35.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:35.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:35.079]                   3L)]
[16:22:35.079]             }
[16:22:35.079]             function(cond) {
[16:22:35.079]                 is_error <- inherits(cond, "error")
[16:22:35.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:35.079]                   NULL)
[16:22:35.079]                 if (is_error) {
[16:22:35.079]                   sessionInformation <- function() {
[16:22:35.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:35.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:35.079]                       search = base::search(), system = base::Sys.info())
[16:22:35.079]                   }
[16:22:35.079]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:35.079]                     cond$call), session = sessionInformation(), 
[16:22:35.079]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:35.079]                   signalCondition(cond)
[16:22:35.079]                 }
[16:22:35.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:35.079]                 "immediateCondition"))) {
[16:22:35.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:35.079]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:35.079]                   if (TRUE && !signal) {
[16:22:35.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.079]                     {
[16:22:35.079]                       inherits <- base::inherits
[16:22:35.079]                       invokeRestart <- base::invokeRestart
[16:22:35.079]                       is.null <- base::is.null
[16:22:35.079]                       muffled <- FALSE
[16:22:35.079]                       if (inherits(cond, "message")) {
[16:22:35.079]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.079]                         if (muffled) 
[16:22:35.079]                           invokeRestart("muffleMessage")
[16:22:35.079]                       }
[16:22:35.079]                       else if (inherits(cond, "warning")) {
[16:22:35.079]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.079]                         if (muffled) 
[16:22:35.079]                           invokeRestart("muffleWarning")
[16:22:35.079]                       }
[16:22:35.079]                       else if (inherits(cond, "condition")) {
[16:22:35.079]                         if (!is.null(pattern)) {
[16:22:35.079]                           computeRestarts <- base::computeRestarts
[16:22:35.079]                           grepl <- base::grepl
[16:22:35.079]                           restarts <- computeRestarts(cond)
[16:22:35.079]                           for (restart in restarts) {
[16:22:35.079]                             name <- restart$name
[16:22:35.079]                             if (is.null(name)) 
[16:22:35.079]                               next
[16:22:35.079]                             if (!grepl(pattern, name)) 
[16:22:35.079]                               next
[16:22:35.079]                             invokeRestart(restart)
[16:22:35.079]                             muffled <- TRUE
[16:22:35.079]                             break
[16:22:35.079]                           }
[16:22:35.079]                         }
[16:22:35.079]                       }
[16:22:35.079]                       invisible(muffled)
[16:22:35.079]                     }
[16:22:35.079]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.079]                   }
[16:22:35.079]                 }
[16:22:35.079]                 else {
[16:22:35.079]                   if (TRUE) {
[16:22:35.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.079]                     {
[16:22:35.079]                       inherits <- base::inherits
[16:22:35.079]                       invokeRestart <- base::invokeRestart
[16:22:35.079]                       is.null <- base::is.null
[16:22:35.079]                       muffled <- FALSE
[16:22:35.079]                       if (inherits(cond, "message")) {
[16:22:35.079]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.079]                         if (muffled) 
[16:22:35.079]                           invokeRestart("muffleMessage")
[16:22:35.079]                       }
[16:22:35.079]                       else if (inherits(cond, "warning")) {
[16:22:35.079]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.079]                         if (muffled) 
[16:22:35.079]                           invokeRestart("muffleWarning")
[16:22:35.079]                       }
[16:22:35.079]                       else if (inherits(cond, "condition")) {
[16:22:35.079]                         if (!is.null(pattern)) {
[16:22:35.079]                           computeRestarts <- base::computeRestarts
[16:22:35.079]                           grepl <- base::grepl
[16:22:35.079]                           restarts <- computeRestarts(cond)
[16:22:35.079]                           for (restart in restarts) {
[16:22:35.079]                             name <- restart$name
[16:22:35.079]                             if (is.null(name)) 
[16:22:35.079]                               next
[16:22:35.079]                             if (!grepl(pattern, name)) 
[16:22:35.079]                               next
[16:22:35.079]                             invokeRestart(restart)
[16:22:35.079]                             muffled <- TRUE
[16:22:35.079]                             break
[16:22:35.079]                           }
[16:22:35.079]                         }
[16:22:35.079]                       }
[16:22:35.079]                       invisible(muffled)
[16:22:35.079]                     }
[16:22:35.079]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.079]                   }
[16:22:35.079]                 }
[16:22:35.079]             }
[16:22:35.079]         }))
[16:22:35.079]     }, error = function(ex) {
[16:22:35.079]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:35.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.079]                 ...future.rng), started = ...future.startTime, 
[16:22:35.079]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:35.079]             version = "1.8"), class = "FutureResult")
[16:22:35.079]     }, finally = {
[16:22:35.079]         if (!identical(...future.workdir, getwd())) 
[16:22:35.079]             setwd(...future.workdir)
[16:22:35.079]         {
[16:22:35.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:35.079]                 ...future.oldOptions$nwarnings <- NULL
[16:22:35.079]             }
[16:22:35.079]             base::options(...future.oldOptions)
[16:22:35.079]             if (.Platform$OS.type == "windows") {
[16:22:35.079]                 old_names <- names(...future.oldEnvVars)
[16:22:35.079]                 envs <- base::Sys.getenv()
[16:22:35.079]                 names <- names(envs)
[16:22:35.079]                 common <- intersect(names, old_names)
[16:22:35.079]                 added <- setdiff(names, old_names)
[16:22:35.079]                 removed <- setdiff(old_names, names)
[16:22:35.079]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:35.079]                   envs[common]]
[16:22:35.079]                 NAMES <- toupper(changed)
[16:22:35.079]                 args <- list()
[16:22:35.079]                 for (kk in seq_along(NAMES)) {
[16:22:35.079]                   name <- changed[[kk]]
[16:22:35.079]                   NAME <- NAMES[[kk]]
[16:22:35.079]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.079]                     next
[16:22:35.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.079]                 }
[16:22:35.079]                 NAMES <- toupper(added)
[16:22:35.079]                 for (kk in seq_along(NAMES)) {
[16:22:35.079]                   name <- added[[kk]]
[16:22:35.079]                   NAME <- NAMES[[kk]]
[16:22:35.079]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.079]                     next
[16:22:35.079]                   args[[name]] <- ""
[16:22:35.079]                 }
[16:22:35.079]                 NAMES <- toupper(removed)
[16:22:35.079]                 for (kk in seq_along(NAMES)) {
[16:22:35.079]                   name <- removed[[kk]]
[16:22:35.079]                   NAME <- NAMES[[kk]]
[16:22:35.079]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.079]                     next
[16:22:35.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.079]                 }
[16:22:35.079]                 if (length(args) > 0) 
[16:22:35.079]                   base::do.call(base::Sys.setenv, args = args)
[16:22:35.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:35.079]             }
[16:22:35.079]             else {
[16:22:35.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:35.079]             }
[16:22:35.079]             {
[16:22:35.079]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:35.079]                   0L) {
[16:22:35.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:35.079]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:35.079]                   base::options(opts)
[16:22:35.079]                 }
[16:22:35.079]                 {
[16:22:35.079]                   {
[16:22:35.079]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:35.079]                     NULL
[16:22:35.079]                   }
[16:22:35.079]                   options(future.plan = "multisession")
[16:22:35.079]                   if (is.na("multisession")) 
[16:22:35.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.079]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:22:35.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:35.079]                     .init = FALSE)
[16:22:35.079]                 }
[16:22:35.079]             }
[16:22:35.079]         }
[16:22:35.079]     })
[16:22:35.079]     if (TRUE) {
[16:22:35.079]         base::sink(type = "output", split = FALSE)
[16:22:35.079]         if (TRUE) {
[16:22:35.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:35.079]         }
[16:22:35.079]         else {
[16:22:35.079]             ...future.result["stdout"] <- base::list(NULL)
[16:22:35.079]         }
[16:22:35.079]         base::close(...future.stdout)
[16:22:35.079]         ...future.stdout <- NULL
[16:22:35.079]     }
[16:22:35.079]     ...future.result$conditions <- ...future.conditions
[16:22:35.079]     ...future.result$finished <- base::Sys.time()
[16:22:35.079]     ...future.result
[16:22:35.079] }
[16:22:35.139] MultisessionFuture started
[16:22:35.139] result() for ClusterFuture ...
[16:22:35.139] receiveMessageFromWorker() for ClusterFuture ...
[16:22:35.139] - Validating connection of MultisessionFuture
[16:22:35.178] - received message: FutureResult
[16:22:35.178] - Received FutureResult
[16:22:35.179] - Erased future from FutureRegistry
[16:22:35.179] result() for ClusterFuture ...
[16:22:35.179] - result already collected: FutureResult
[16:22:35.179] result() for ClusterFuture ... done
[16:22:35.179] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:35.179] result() for ClusterFuture ... done
[16:22:35.179] result() for ClusterFuture ...
[16:22:35.179] - result already collected: FutureResult
[16:22:35.179] result() for ClusterFuture ... done
[16:22:35.179] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:35.183] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[16:22:35.184] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:35.184] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:35.184] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:35.184] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:35.184] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:35.184] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:35.185] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:35.186] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:35.187] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:35.187] Option 'future.plan' = ‘multisession’
[16:22:35.187] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:35.187] Setting plan('default')
[16:22:35.188] plan(): Setting new future strategy stack:
[16:22:35.188] List of future strategies:
[16:22:35.188] 1. multisession:
[16:22:35.188]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.188]    - tweaked: FALSE
[16:22:35.188]    - call: plan("default", .init = FALSE)
[16:22:35.193] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:22:35.193] plan(): Setting new future strategy stack:
[16:22:35.193] List of future strategies:
[16:22:35.193] 1. multisession:
[16:22:35.193]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.193]    - tweaked: FALSE
[16:22:35.193]    - call: plan("default")
[16:22:35.194] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:35.194] multisession:
[16:22:35.194] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.194] - tweaked: FALSE
[16:22:35.194] - call: plan("default")
[16:22:35.199] getGlobalsAndPackages() ...
[16:22:35.199] Not searching for globals
[16:22:35.199] - globals: [0] <none>
[16:22:35.199] getGlobalsAndPackages() ... DONE
[16:22:35.200] [local output] makeClusterPSOCK() ...
[16:22:35.204] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:22:35.205] [local output] Base port: 11920
[16:22:35.205] [local output] Getting setup options for 2 cluster nodes ...
[16:22:35.205] [local output]  - Node 1 of 2 ...
[16:22:35.205] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:35.206] [local output] Rscript port: 11920

[16:22:35.206] [local output]  - Node 2 of 2 ...
[16:22:35.207] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:35.207] [local output] Rscript port: 11920

[16:22:35.208] [local output] Getting setup options for 2 cluster nodes ... done
[16:22:35.208] [local output]  - Parallel setup requested for some PSOCK nodes
[16:22:35.208] [local output] Setting up PSOCK nodes in parallel
[16:22:35.208] List of 36
[16:22:35.208]  $ worker          : chr "localhost"
[16:22:35.208]   ..- attr(*, "localhost")= logi TRUE
[16:22:35.208]  $ master          : chr "localhost"
[16:22:35.208]  $ port            : int 11920
[16:22:35.208]  $ connectTimeout  : num 120
[16:22:35.208]  $ timeout         : num 2592000
[16:22:35.208]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:22:35.208]  $ homogeneous     : logi TRUE
[16:22:35.208]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:22:35.208]  $ rscript_envs    : NULL
[16:22:35.208]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:35.208]  $ rscript_startup : NULL
[16:22:35.208]  $ rscript_sh      : chr "sh"
[16:22:35.208]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:35.208]  $ methods         : logi TRUE
[16:22:35.208]  $ socketOptions   : chr "no-delay"
[16:22:35.208]  $ useXDR          : logi FALSE
[16:22:35.208]  $ outfile         : chr "/dev/null"
[16:22:35.208]  $ renice          : int NA
[16:22:35.208]  $ rshcmd          : NULL
[16:22:35.208]  $ user            : chr(0) 
[16:22:35.208]  $ revtunnel       : logi FALSE
[16:22:35.208]  $ rshlogfile      : NULL
[16:22:35.208]  $ rshopts         : chr(0) 
[16:22:35.208]  $ rank            : int 1
[16:22:35.208]  $ manual          : logi FALSE
[16:22:35.208]  $ dryrun          : logi FALSE
[16:22:35.208]  $ quiet           : logi FALSE
[16:22:35.208]  $ setup_strategy  : chr "parallel"
[16:22:35.208]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:35.208]  $ pidfile         : chr "/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c131a3565.pid"
[16:22:35.208]  $ rshcmd_label    : NULL
[16:22:35.208]  $ rsh_call        : NULL
[16:22:35.208]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:35.208]  $ localMachine    : logi TRUE
[16:22:35.208]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:22:35.208]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:22:35.208]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:22:35.208]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:22:35.208]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:22:35.208]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:22:35.208]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:22:35.208]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:22:35.208]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:22:35.208]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:22:35.208]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:22:35.208]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:22:35.208]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:22:35.208]  $ arguments       :List of 28
[16:22:35.208]   ..$ worker          : chr "localhost"
[16:22:35.208]   ..$ master          : NULL
[16:22:35.208]   ..$ port            : int 11920
[16:22:35.208]   ..$ connectTimeout  : num 120
[16:22:35.208]   ..$ timeout         : num 2592000
[16:22:35.208]   ..$ rscript         : NULL
[16:22:35.208]   ..$ homogeneous     : NULL
[16:22:35.208]   ..$ rscript_args    : NULL
[16:22:35.208]   ..$ rscript_envs    : NULL
[16:22:35.208]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:35.208]   ..$ rscript_startup : NULL
[16:22:35.208]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:22:35.208]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:35.208]   ..$ methods         : logi TRUE
[16:22:35.208]   ..$ socketOptions   : chr "no-delay"
[16:22:35.208]   ..$ useXDR          : logi FALSE
[16:22:35.208]   ..$ outfile         : chr "/dev/null"
[16:22:35.208]   ..$ renice          : int NA
[16:22:35.208]   ..$ rshcmd          : NULL
[16:22:35.208]   ..$ user            : NULL
[16:22:35.208]   ..$ revtunnel       : logi NA
[16:22:35.208]   ..$ rshlogfile      : NULL
[16:22:35.208]   ..$ rshopts         : NULL
[16:22:35.208]   ..$ rank            : int 1
[16:22:35.208]   ..$ manual          : logi FALSE
[16:22:35.208]   ..$ dryrun          : logi FALSE
[16:22:35.208]   ..$ quiet           : logi FALSE
[16:22:35.208]   ..$ setup_strategy  : chr "parallel"
[16:22:35.208]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:22:35.226] [local output] System call to launch all workers:
[16:22:35.226] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ647i8/worker.rank=1.parallelly.parent=89484.15d8c131a3565.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11920 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:22:35.227] [local output] Starting PSOCK main server
[16:22:35.228] [local output] Workers launched
[16:22:35.228] [local output] Waiting for workers to connect back
[16:22:35.228]  - [local output] 0 workers out of 2 ready
[16:22:35.512]  - [local output] 0 workers out of 2 ready
[16:22:35.512]  - [local output] 1 workers out of 2 ready
[16:22:35.519]  - [local output] 1 workers out of 2 ready
[16:22:35.519]  - [local output] 2 workers out of 2 ready
[16:22:35.519] [local output] Launching of workers completed
[16:22:35.520] [local output] Collecting session information from workers
[16:22:35.520] [local output]  - Worker #1 of 2
[16:22:35.521] [local output]  - Worker #2 of 2
[16:22:35.521] [local output] makeClusterPSOCK() ... done
[16:22:35.531] Packages needed by the future expression (n = 0): <none>
[16:22:35.532] Packages needed by future strategies (n = 0): <none>
[16:22:35.532] {
[16:22:35.532]     {
[16:22:35.532]         {
[16:22:35.532]             ...future.startTime <- base::Sys.time()
[16:22:35.532]             {
[16:22:35.532]                 {
[16:22:35.532]                   {
[16:22:35.532]                     {
[16:22:35.532]                       base::local({
[16:22:35.532]                         has_future <- base::requireNamespace("future", 
[16:22:35.532]                           quietly = TRUE)
[16:22:35.532]                         if (has_future) {
[16:22:35.532]                           ns <- base::getNamespace("future")
[16:22:35.532]                           version <- ns[[".package"]][["version"]]
[16:22:35.532]                           if (is.null(version)) 
[16:22:35.532]                             version <- utils::packageVersion("future")
[16:22:35.532]                         }
[16:22:35.532]                         else {
[16:22:35.532]                           version <- NULL
[16:22:35.532]                         }
[16:22:35.532]                         if (!has_future || version < "1.8.0") {
[16:22:35.532]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:35.532]                             "", base::R.version$version.string), 
[16:22:35.532]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:35.532]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:35.532]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:35.532]                               "release", "version")], collapse = " "), 
[16:22:35.532]                             hostname = base::Sys.info()[["nodename"]])
[16:22:35.532]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:35.532]                             info)
[16:22:35.532]                           info <- base::paste(info, collapse = "; ")
[16:22:35.532]                           if (!has_future) {
[16:22:35.532]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:35.532]                               info)
[16:22:35.532]                           }
[16:22:35.532]                           else {
[16:22:35.532]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:35.532]                               info, version)
[16:22:35.532]                           }
[16:22:35.532]                           base::stop(msg)
[16:22:35.532]                         }
[16:22:35.532]                       })
[16:22:35.532]                     }
[16:22:35.532]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:35.532]                     base::options(mc.cores = 1L)
[16:22:35.532]                   }
[16:22:35.532]                   ...future.strategy.old <- future::plan("list")
[16:22:35.532]                   options(future.plan = NULL)
[16:22:35.532]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.532]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:35.532]                 }
[16:22:35.532]                 ...future.workdir <- getwd()
[16:22:35.532]             }
[16:22:35.532]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:35.532]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:35.532]         }
[16:22:35.532]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:35.532]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:35.532]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:35.532]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:35.532]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:35.532]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:35.532]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:35.532]             base::names(...future.oldOptions))
[16:22:35.532]     }
[16:22:35.532]     if (FALSE) {
[16:22:35.532]     }
[16:22:35.532]     else {
[16:22:35.532]         if (TRUE) {
[16:22:35.532]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:35.532]                 open = "w")
[16:22:35.532]         }
[16:22:35.532]         else {
[16:22:35.532]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:35.532]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:35.532]         }
[16:22:35.532]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:35.532]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:35.532]             base::sink(type = "output", split = FALSE)
[16:22:35.532]             base::close(...future.stdout)
[16:22:35.532]         }, add = TRUE)
[16:22:35.532]     }
[16:22:35.532]     ...future.frame <- base::sys.nframe()
[16:22:35.532]     ...future.conditions <- base::list()
[16:22:35.532]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:35.532]     if (FALSE) {
[16:22:35.532]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:35.532]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:35.532]     }
[16:22:35.532]     ...future.result <- base::tryCatch({
[16:22:35.532]         base::withCallingHandlers({
[16:22:35.532]             ...future.value <- base::withVisible(base::local({
[16:22:35.532]                 ...future.makeSendCondition <- base::local({
[16:22:35.532]                   sendCondition <- NULL
[16:22:35.532]                   function(frame = 1L) {
[16:22:35.532]                     if (is.function(sendCondition)) 
[16:22:35.532]                       return(sendCondition)
[16:22:35.532]                     ns <- getNamespace("parallel")
[16:22:35.532]                     if (exists("sendData", mode = "function", 
[16:22:35.532]                       envir = ns)) {
[16:22:35.532]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:35.532]                         envir = ns)
[16:22:35.532]                       envir <- sys.frame(frame)
[16:22:35.532]                       master <- NULL
[16:22:35.532]                       while (!identical(envir, .GlobalEnv) && 
[16:22:35.532]                         !identical(envir, emptyenv())) {
[16:22:35.532]                         if (exists("master", mode = "list", envir = envir, 
[16:22:35.532]                           inherits = FALSE)) {
[16:22:35.532]                           master <- get("master", mode = "list", 
[16:22:35.532]                             envir = envir, inherits = FALSE)
[16:22:35.532]                           if (inherits(master, c("SOCKnode", 
[16:22:35.532]                             "SOCK0node"))) {
[16:22:35.532]                             sendCondition <<- function(cond) {
[16:22:35.532]                               data <- list(type = "VALUE", value = cond, 
[16:22:35.532]                                 success = TRUE)
[16:22:35.532]                               parallel_sendData(master, data)
[16:22:35.532]                             }
[16:22:35.532]                             return(sendCondition)
[16:22:35.532]                           }
[16:22:35.532]                         }
[16:22:35.532]                         frame <- frame + 1L
[16:22:35.532]                         envir <- sys.frame(frame)
[16:22:35.532]                       }
[16:22:35.532]                     }
[16:22:35.532]                     sendCondition <<- function(cond) NULL
[16:22:35.532]                   }
[16:22:35.532]                 })
[16:22:35.532]                 withCallingHandlers({
[16:22:35.532]                   NA
[16:22:35.532]                 }, immediateCondition = function(cond) {
[16:22:35.532]                   sendCondition <- ...future.makeSendCondition()
[16:22:35.532]                   sendCondition(cond)
[16:22:35.532]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.532]                   {
[16:22:35.532]                     inherits <- base::inherits
[16:22:35.532]                     invokeRestart <- base::invokeRestart
[16:22:35.532]                     is.null <- base::is.null
[16:22:35.532]                     muffled <- FALSE
[16:22:35.532]                     if (inherits(cond, "message")) {
[16:22:35.532]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:35.532]                       if (muffled) 
[16:22:35.532]                         invokeRestart("muffleMessage")
[16:22:35.532]                     }
[16:22:35.532]                     else if (inherits(cond, "warning")) {
[16:22:35.532]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:35.532]                       if (muffled) 
[16:22:35.532]                         invokeRestart("muffleWarning")
[16:22:35.532]                     }
[16:22:35.532]                     else if (inherits(cond, "condition")) {
[16:22:35.532]                       if (!is.null(pattern)) {
[16:22:35.532]                         computeRestarts <- base::computeRestarts
[16:22:35.532]                         grepl <- base::grepl
[16:22:35.532]                         restarts <- computeRestarts(cond)
[16:22:35.532]                         for (restart in restarts) {
[16:22:35.532]                           name <- restart$name
[16:22:35.532]                           if (is.null(name)) 
[16:22:35.532]                             next
[16:22:35.532]                           if (!grepl(pattern, name)) 
[16:22:35.532]                             next
[16:22:35.532]                           invokeRestart(restart)
[16:22:35.532]                           muffled <- TRUE
[16:22:35.532]                           break
[16:22:35.532]                         }
[16:22:35.532]                       }
[16:22:35.532]                     }
[16:22:35.532]                     invisible(muffled)
[16:22:35.532]                   }
[16:22:35.532]                   muffleCondition(cond)
[16:22:35.532]                 })
[16:22:35.532]             }))
[16:22:35.532]             future::FutureResult(value = ...future.value$value, 
[16:22:35.532]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.532]                   ...future.rng), globalenv = if (FALSE) 
[16:22:35.532]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:35.532]                     ...future.globalenv.names))
[16:22:35.532]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:35.532]         }, condition = base::local({
[16:22:35.532]             c <- base::c
[16:22:35.532]             inherits <- base::inherits
[16:22:35.532]             invokeRestart <- base::invokeRestart
[16:22:35.532]             length <- base::length
[16:22:35.532]             list <- base::list
[16:22:35.532]             seq.int <- base::seq.int
[16:22:35.532]             signalCondition <- base::signalCondition
[16:22:35.532]             sys.calls <- base::sys.calls
[16:22:35.532]             `[[` <- base::`[[`
[16:22:35.532]             `+` <- base::`+`
[16:22:35.532]             `<<-` <- base::`<<-`
[16:22:35.532]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:35.532]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:35.532]                   3L)]
[16:22:35.532]             }
[16:22:35.532]             function(cond) {
[16:22:35.532]                 is_error <- inherits(cond, "error")
[16:22:35.532]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:35.532]                   NULL)
[16:22:35.532]                 if (is_error) {
[16:22:35.532]                   sessionInformation <- function() {
[16:22:35.532]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:35.532]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:35.532]                       search = base::search(), system = base::Sys.info())
[16:22:35.532]                   }
[16:22:35.532]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.532]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:35.532]                     cond$call), session = sessionInformation(), 
[16:22:35.532]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:35.532]                   signalCondition(cond)
[16:22:35.532]                 }
[16:22:35.532]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:35.532]                 "immediateCondition"))) {
[16:22:35.532]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:35.532]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.532]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:35.532]                   if (TRUE && !signal) {
[16:22:35.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.532]                     {
[16:22:35.532]                       inherits <- base::inherits
[16:22:35.532]                       invokeRestart <- base::invokeRestart
[16:22:35.532]                       is.null <- base::is.null
[16:22:35.532]                       muffled <- FALSE
[16:22:35.532]                       if (inherits(cond, "message")) {
[16:22:35.532]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.532]                         if (muffled) 
[16:22:35.532]                           invokeRestart("muffleMessage")
[16:22:35.532]                       }
[16:22:35.532]                       else if (inherits(cond, "warning")) {
[16:22:35.532]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.532]                         if (muffled) 
[16:22:35.532]                           invokeRestart("muffleWarning")
[16:22:35.532]                       }
[16:22:35.532]                       else if (inherits(cond, "condition")) {
[16:22:35.532]                         if (!is.null(pattern)) {
[16:22:35.532]                           computeRestarts <- base::computeRestarts
[16:22:35.532]                           grepl <- base::grepl
[16:22:35.532]                           restarts <- computeRestarts(cond)
[16:22:35.532]                           for (restart in restarts) {
[16:22:35.532]                             name <- restart$name
[16:22:35.532]                             if (is.null(name)) 
[16:22:35.532]                               next
[16:22:35.532]                             if (!grepl(pattern, name)) 
[16:22:35.532]                               next
[16:22:35.532]                             invokeRestart(restart)
[16:22:35.532]                             muffled <- TRUE
[16:22:35.532]                             break
[16:22:35.532]                           }
[16:22:35.532]                         }
[16:22:35.532]                       }
[16:22:35.532]                       invisible(muffled)
[16:22:35.532]                     }
[16:22:35.532]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.532]                   }
[16:22:35.532]                 }
[16:22:35.532]                 else {
[16:22:35.532]                   if (TRUE) {
[16:22:35.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.532]                     {
[16:22:35.532]                       inherits <- base::inherits
[16:22:35.532]                       invokeRestart <- base::invokeRestart
[16:22:35.532]                       is.null <- base::is.null
[16:22:35.532]                       muffled <- FALSE
[16:22:35.532]                       if (inherits(cond, "message")) {
[16:22:35.532]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.532]                         if (muffled) 
[16:22:35.532]                           invokeRestart("muffleMessage")
[16:22:35.532]                       }
[16:22:35.532]                       else if (inherits(cond, "warning")) {
[16:22:35.532]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.532]                         if (muffled) 
[16:22:35.532]                           invokeRestart("muffleWarning")
[16:22:35.532]                       }
[16:22:35.532]                       else if (inherits(cond, "condition")) {
[16:22:35.532]                         if (!is.null(pattern)) {
[16:22:35.532]                           computeRestarts <- base::computeRestarts
[16:22:35.532]                           grepl <- base::grepl
[16:22:35.532]                           restarts <- computeRestarts(cond)
[16:22:35.532]                           for (restart in restarts) {
[16:22:35.532]                             name <- restart$name
[16:22:35.532]                             if (is.null(name)) 
[16:22:35.532]                               next
[16:22:35.532]                             if (!grepl(pattern, name)) 
[16:22:35.532]                               next
[16:22:35.532]                             invokeRestart(restart)
[16:22:35.532]                             muffled <- TRUE
[16:22:35.532]                             break
[16:22:35.532]                           }
[16:22:35.532]                         }
[16:22:35.532]                       }
[16:22:35.532]                       invisible(muffled)
[16:22:35.532]                     }
[16:22:35.532]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.532]                   }
[16:22:35.532]                 }
[16:22:35.532]             }
[16:22:35.532]         }))
[16:22:35.532]     }, error = function(ex) {
[16:22:35.532]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:35.532]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.532]                 ...future.rng), started = ...future.startTime, 
[16:22:35.532]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:35.532]             version = "1.8"), class = "FutureResult")
[16:22:35.532]     }, finally = {
[16:22:35.532]         if (!identical(...future.workdir, getwd())) 
[16:22:35.532]             setwd(...future.workdir)
[16:22:35.532]         {
[16:22:35.532]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:35.532]                 ...future.oldOptions$nwarnings <- NULL
[16:22:35.532]             }
[16:22:35.532]             base::options(...future.oldOptions)
[16:22:35.532]             if (.Platform$OS.type == "windows") {
[16:22:35.532]                 old_names <- names(...future.oldEnvVars)
[16:22:35.532]                 envs <- base::Sys.getenv()
[16:22:35.532]                 names <- names(envs)
[16:22:35.532]                 common <- intersect(names, old_names)
[16:22:35.532]                 added <- setdiff(names, old_names)
[16:22:35.532]                 removed <- setdiff(old_names, names)
[16:22:35.532]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:35.532]                   envs[common]]
[16:22:35.532]                 NAMES <- toupper(changed)
[16:22:35.532]                 args <- list()
[16:22:35.532]                 for (kk in seq_along(NAMES)) {
[16:22:35.532]                   name <- changed[[kk]]
[16:22:35.532]                   NAME <- NAMES[[kk]]
[16:22:35.532]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.532]                     next
[16:22:35.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.532]                 }
[16:22:35.532]                 NAMES <- toupper(added)
[16:22:35.532]                 for (kk in seq_along(NAMES)) {
[16:22:35.532]                   name <- added[[kk]]
[16:22:35.532]                   NAME <- NAMES[[kk]]
[16:22:35.532]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.532]                     next
[16:22:35.532]                   args[[name]] <- ""
[16:22:35.532]                 }
[16:22:35.532]                 NAMES <- toupper(removed)
[16:22:35.532]                 for (kk in seq_along(NAMES)) {
[16:22:35.532]                   name <- removed[[kk]]
[16:22:35.532]                   NAME <- NAMES[[kk]]
[16:22:35.532]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.532]                     next
[16:22:35.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.532]                 }
[16:22:35.532]                 if (length(args) > 0) 
[16:22:35.532]                   base::do.call(base::Sys.setenv, args = args)
[16:22:35.532]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:35.532]             }
[16:22:35.532]             else {
[16:22:35.532]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:35.532]             }
[16:22:35.532]             {
[16:22:35.532]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:35.532]                   0L) {
[16:22:35.532]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:35.532]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:35.532]                   base::options(opts)
[16:22:35.532]                 }
[16:22:35.532]                 {
[16:22:35.532]                   {
[16:22:35.532]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:35.532]                     NULL
[16:22:35.532]                   }
[16:22:35.532]                   options(future.plan = "multisession")
[16:22:35.532]                   if (is.na("")) 
[16:22:35.532]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.532]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:22:35.532]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:35.532]                     .init = FALSE)
[16:22:35.532]                 }
[16:22:35.532]             }
[16:22:35.532]         }
[16:22:35.532]     })
[16:22:35.532]     if (TRUE) {
[16:22:35.532]         base::sink(type = "output", split = FALSE)
[16:22:35.532]         if (TRUE) {
[16:22:35.532]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:35.532]         }
[16:22:35.532]         else {
[16:22:35.532]             ...future.result["stdout"] <- base::list(NULL)
[16:22:35.532]         }
[16:22:35.532]         base::close(...future.stdout)
[16:22:35.532]         ...future.stdout <- NULL
[16:22:35.532]     }
[16:22:35.532]     ...future.result$conditions <- ...future.conditions
[16:22:35.532]     ...future.result$finished <- base::Sys.time()
[16:22:35.532]     ...future.result
[16:22:35.532] }
[16:22:35.585] MultisessionFuture started
[16:22:35.585] result() for ClusterFuture ...
[16:22:35.585] receiveMessageFromWorker() for ClusterFuture ...
[16:22:35.585] - Validating connection of MultisessionFuture
[16:22:35.618] - received message: FutureResult
[16:22:35.618] - Received FutureResult
[16:22:35.618] - Erased future from FutureRegistry
[16:22:35.618] result() for ClusterFuture ...
[16:22:35.618] - result already collected: FutureResult
[16:22:35.618] result() for ClusterFuture ... done
[16:22:35.619] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:35.619] result() for ClusterFuture ... done
[16:22:35.619] result() for ClusterFuture ...
[16:22:35.619] - result already collected: FutureResult
[16:22:35.619] result() for ClusterFuture ... done
[16:22:35.619] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:35.623] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[16:22:35.624] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:35.624] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:35.624] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:35.624] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:35.624] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:35.624] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:35.624] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:35.625] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:35.625] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:35.625] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:35.625] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:35.625] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:35.625] R_FUTURE_PLAN=‘multisession’
[16:22:35.625] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[16:22:35.625] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:35.626] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:35.627] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:35.627] Option 'future.plan' = ‘multisession’
[16:22:35.628] R command-line argument: -p 1
[16:22:35.628]  => 'future.plan' already set.
[16:22:35.628] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:35.628] Setting plan('default')
[16:22:35.628] plan(): Setting new future strategy stack:
[16:22:35.628] List of future strategies:
[16:22:35.628] 1. multisession:
[16:22:35.628]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.628]    - tweaked: FALSE
[16:22:35.628]    - call: plan("default", .init = FALSE)
[16:22:35.633] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:22:35.633] plan(): Setting new future strategy stack:
[16:22:35.633] List of future strategies:
[16:22:35.633] 1. multisession:
[16:22:35.633]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.633]    - tweaked: FALSE
[16:22:35.633]    - call: plan("default")
[16:22:35.633] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:35.634] multisession:
[16:22:35.634] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.634] - tweaked: FALSE
[16:22:35.634] - call: plan("default")
[16:22:35.637] getGlobalsAndPackages() ...
[16:22:35.637] Not searching for globals
[16:22:35.637] - globals: [0] <none>
[16:22:35.637] getGlobalsAndPackages() ... DONE
[16:22:35.638] Packages needed by the future expression (n = 0): <none>
[16:22:35.638] Packages needed by future strategies (n = 0): <none>
[16:22:35.639] {
[16:22:35.639]     {
[16:22:35.639]         {
[16:22:35.639]             ...future.startTime <- base::Sys.time()
[16:22:35.639]             {
[16:22:35.639]                 {
[16:22:35.639]                   {
[16:22:35.639]                     base::local({
[16:22:35.639]                       has_future <- base::requireNamespace("future", 
[16:22:35.639]                         quietly = TRUE)
[16:22:35.639]                       if (has_future) {
[16:22:35.639]                         ns <- base::getNamespace("future")
[16:22:35.639]                         version <- ns[[".package"]][["version"]]
[16:22:35.639]                         if (is.null(version)) 
[16:22:35.639]                           version <- utils::packageVersion("future")
[16:22:35.639]                       }
[16:22:35.639]                       else {
[16:22:35.639]                         version <- NULL
[16:22:35.639]                       }
[16:22:35.639]                       if (!has_future || version < "1.8.0") {
[16:22:35.639]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:35.639]                           "", base::R.version$version.string), 
[16:22:35.639]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:35.639]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:35.639]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:35.639]                             "release", "version")], collapse = " "), 
[16:22:35.639]                           hostname = base::Sys.info()[["nodename"]])
[16:22:35.639]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:35.639]                           info)
[16:22:35.639]                         info <- base::paste(info, collapse = "; ")
[16:22:35.639]                         if (!has_future) {
[16:22:35.639]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:35.639]                             info)
[16:22:35.639]                         }
[16:22:35.639]                         else {
[16:22:35.639]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:35.639]                             info, version)
[16:22:35.639]                         }
[16:22:35.639]                         base::stop(msg)
[16:22:35.639]                       }
[16:22:35.639]                     })
[16:22:35.639]                   }
[16:22:35.639]                   ...future.strategy.old <- future::plan("list")
[16:22:35.639]                   options(future.plan = NULL)
[16:22:35.639]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.639]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:35.639]                 }
[16:22:35.639]                 ...future.workdir <- getwd()
[16:22:35.639]             }
[16:22:35.639]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:35.639]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:35.639]         }
[16:22:35.639]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:35.639]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:35.639]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:35.639]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:35.639]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:35.639]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:35.639]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:35.639]             base::names(...future.oldOptions))
[16:22:35.639]     }
[16:22:35.639]     if (FALSE) {
[16:22:35.639]     }
[16:22:35.639]     else {
[16:22:35.639]         if (TRUE) {
[16:22:35.639]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:35.639]                 open = "w")
[16:22:35.639]         }
[16:22:35.639]         else {
[16:22:35.639]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:35.639]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:35.639]         }
[16:22:35.639]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:35.639]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:35.639]             base::sink(type = "output", split = FALSE)
[16:22:35.639]             base::close(...future.stdout)
[16:22:35.639]         }, add = TRUE)
[16:22:35.639]     }
[16:22:35.639]     ...future.frame <- base::sys.nframe()
[16:22:35.639]     ...future.conditions <- base::list()
[16:22:35.639]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:35.639]     if (FALSE) {
[16:22:35.639]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:35.639]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:35.639]     }
[16:22:35.639]     ...future.result <- base::tryCatch({
[16:22:35.639]         base::withCallingHandlers({
[16:22:35.639]             ...future.value <- base::withVisible(base::local(NA))
[16:22:35.639]             future::FutureResult(value = ...future.value$value, 
[16:22:35.639]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.639]                   ...future.rng), globalenv = if (FALSE) 
[16:22:35.639]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:35.639]                     ...future.globalenv.names))
[16:22:35.639]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:35.639]         }, condition = base::local({
[16:22:35.639]             c <- base::c
[16:22:35.639]             inherits <- base::inherits
[16:22:35.639]             invokeRestart <- base::invokeRestart
[16:22:35.639]             length <- base::length
[16:22:35.639]             list <- base::list
[16:22:35.639]             seq.int <- base::seq.int
[16:22:35.639]             signalCondition <- base::signalCondition
[16:22:35.639]             sys.calls <- base::sys.calls
[16:22:35.639]             `[[` <- base::`[[`
[16:22:35.639]             `+` <- base::`+`
[16:22:35.639]             `<<-` <- base::`<<-`
[16:22:35.639]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:35.639]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:35.639]                   3L)]
[16:22:35.639]             }
[16:22:35.639]             function(cond) {
[16:22:35.639]                 is_error <- inherits(cond, "error")
[16:22:35.639]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:35.639]                   NULL)
[16:22:35.639]                 if (is_error) {
[16:22:35.639]                   sessionInformation <- function() {
[16:22:35.639]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:35.639]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:35.639]                       search = base::search(), system = base::Sys.info())
[16:22:35.639]                   }
[16:22:35.639]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.639]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:35.639]                     cond$call), session = sessionInformation(), 
[16:22:35.639]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:35.639]                   signalCondition(cond)
[16:22:35.639]                 }
[16:22:35.639]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:35.639]                 "immediateCondition"))) {
[16:22:35.639]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:35.639]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.639]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:35.639]                   if (TRUE && !signal) {
[16:22:35.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.639]                     {
[16:22:35.639]                       inherits <- base::inherits
[16:22:35.639]                       invokeRestart <- base::invokeRestart
[16:22:35.639]                       is.null <- base::is.null
[16:22:35.639]                       muffled <- FALSE
[16:22:35.639]                       if (inherits(cond, "message")) {
[16:22:35.639]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.639]                         if (muffled) 
[16:22:35.639]                           invokeRestart("muffleMessage")
[16:22:35.639]                       }
[16:22:35.639]                       else if (inherits(cond, "warning")) {
[16:22:35.639]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.639]                         if (muffled) 
[16:22:35.639]                           invokeRestart("muffleWarning")
[16:22:35.639]                       }
[16:22:35.639]                       else if (inherits(cond, "condition")) {
[16:22:35.639]                         if (!is.null(pattern)) {
[16:22:35.639]                           computeRestarts <- base::computeRestarts
[16:22:35.639]                           grepl <- base::grepl
[16:22:35.639]                           restarts <- computeRestarts(cond)
[16:22:35.639]                           for (restart in restarts) {
[16:22:35.639]                             name <- restart$name
[16:22:35.639]                             if (is.null(name)) 
[16:22:35.639]                               next
[16:22:35.639]                             if (!grepl(pattern, name)) 
[16:22:35.639]                               next
[16:22:35.639]                             invokeRestart(restart)
[16:22:35.639]                             muffled <- TRUE
[16:22:35.639]                             break
[16:22:35.639]                           }
[16:22:35.639]                         }
[16:22:35.639]                       }
[16:22:35.639]                       invisible(muffled)
[16:22:35.639]                     }
[16:22:35.639]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.639]                   }
[16:22:35.639]                 }
[16:22:35.639]                 else {
[16:22:35.639]                   if (TRUE) {
[16:22:35.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.639]                     {
[16:22:35.639]                       inherits <- base::inherits
[16:22:35.639]                       invokeRestart <- base::invokeRestart
[16:22:35.639]                       is.null <- base::is.null
[16:22:35.639]                       muffled <- FALSE
[16:22:35.639]                       if (inherits(cond, "message")) {
[16:22:35.639]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.639]                         if (muffled) 
[16:22:35.639]                           invokeRestart("muffleMessage")
[16:22:35.639]                       }
[16:22:35.639]                       else if (inherits(cond, "warning")) {
[16:22:35.639]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.639]                         if (muffled) 
[16:22:35.639]                           invokeRestart("muffleWarning")
[16:22:35.639]                       }
[16:22:35.639]                       else if (inherits(cond, "condition")) {
[16:22:35.639]                         if (!is.null(pattern)) {
[16:22:35.639]                           computeRestarts <- base::computeRestarts
[16:22:35.639]                           grepl <- base::grepl
[16:22:35.639]                           restarts <- computeRestarts(cond)
[16:22:35.639]                           for (restart in restarts) {
[16:22:35.639]                             name <- restart$name
[16:22:35.639]                             if (is.null(name)) 
[16:22:35.639]                               next
[16:22:35.639]                             if (!grepl(pattern, name)) 
[16:22:35.639]                               next
[16:22:35.639]                             invokeRestart(restart)
[16:22:35.639]                             muffled <- TRUE
[16:22:35.639]                             break
[16:22:35.639]                           }
[16:22:35.639]                         }
[16:22:35.639]                       }
[16:22:35.639]                       invisible(muffled)
[16:22:35.639]                     }
[16:22:35.639]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.639]                   }
[16:22:35.639]                 }
[16:22:35.639]             }
[16:22:35.639]         }))
[16:22:35.639]     }, error = function(ex) {
[16:22:35.639]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:35.639]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.639]                 ...future.rng), started = ...future.startTime, 
[16:22:35.639]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:35.639]             version = "1.8"), class = "FutureResult")
[16:22:35.639]     }, finally = {
[16:22:35.639]         if (!identical(...future.workdir, getwd())) 
[16:22:35.639]             setwd(...future.workdir)
[16:22:35.639]         {
[16:22:35.639]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:35.639]                 ...future.oldOptions$nwarnings <- NULL
[16:22:35.639]             }
[16:22:35.639]             base::options(...future.oldOptions)
[16:22:35.639]             if (.Platform$OS.type == "windows") {
[16:22:35.639]                 old_names <- names(...future.oldEnvVars)
[16:22:35.639]                 envs <- base::Sys.getenv()
[16:22:35.639]                 names <- names(envs)
[16:22:35.639]                 common <- intersect(names, old_names)
[16:22:35.639]                 added <- setdiff(names, old_names)
[16:22:35.639]                 removed <- setdiff(old_names, names)
[16:22:35.639]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:35.639]                   envs[common]]
[16:22:35.639]                 NAMES <- toupper(changed)
[16:22:35.639]                 args <- list()
[16:22:35.639]                 for (kk in seq_along(NAMES)) {
[16:22:35.639]                   name <- changed[[kk]]
[16:22:35.639]                   NAME <- NAMES[[kk]]
[16:22:35.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.639]                     next
[16:22:35.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.639]                 }
[16:22:35.639]                 NAMES <- toupper(added)
[16:22:35.639]                 for (kk in seq_along(NAMES)) {
[16:22:35.639]                   name <- added[[kk]]
[16:22:35.639]                   NAME <- NAMES[[kk]]
[16:22:35.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.639]                     next
[16:22:35.639]                   args[[name]] <- ""
[16:22:35.639]                 }
[16:22:35.639]                 NAMES <- toupper(removed)
[16:22:35.639]                 for (kk in seq_along(NAMES)) {
[16:22:35.639]                   name <- removed[[kk]]
[16:22:35.639]                   NAME <- NAMES[[kk]]
[16:22:35.639]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.639]                     next
[16:22:35.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.639]                 }
[16:22:35.639]                 if (length(args) > 0) 
[16:22:35.639]                   base::do.call(base::Sys.setenv, args = args)
[16:22:35.639]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:35.639]             }
[16:22:35.639]             else {
[16:22:35.639]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:35.639]             }
[16:22:35.639]             {
[16:22:35.639]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:35.639]                   0L) {
[16:22:35.639]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:35.639]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:35.639]                   base::options(opts)
[16:22:35.639]                 }
[16:22:35.639]                 {
[16:22:35.639]                   {
[16:22:35.639]                     NULL
[16:22:35.639]                     RNGkind("Mersenne-Twister")
[16:22:35.639]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:35.639]                       inherits = FALSE)
[16:22:35.639]                   }
[16:22:35.639]                   options(future.plan = "multisession")
[16:22:35.639]                   if (is.na("multisession")) 
[16:22:35.639]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.639]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[16:22:35.639]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:35.639]                     .init = FALSE)
[16:22:35.639]                 }
[16:22:35.639]             }
[16:22:35.639]         }
[16:22:35.639]     })
[16:22:35.639]     if (TRUE) {
[16:22:35.639]         base::sink(type = "output", split = FALSE)
[16:22:35.639]         if (TRUE) {
[16:22:35.639]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:35.639]         }
[16:22:35.639]         else {
[16:22:35.639]             ...future.result["stdout"] <- base::list(NULL)
[16:22:35.639]         }
[16:22:35.639]         base::close(...future.stdout)
[16:22:35.639]         ...future.stdout <- NULL
[16:22:35.639]     }
[16:22:35.639]     ...future.result$conditions <- ...future.conditions
[16:22:35.639]     ...future.result$finished <- base::Sys.time()
[16:22:35.639]     ...future.result
[16:22:35.639] }
[16:22:35.641] plan(): Setting new future strategy stack:
[16:22:35.641] List of future strategies:
[16:22:35.641] 1. sequential:
[16:22:35.641]    - args: function (..., envir = parent.frame())
[16:22:35.641]    - tweaked: FALSE
[16:22:35.641]    - call: NULL
[16:22:35.641] plan(): nbrOfWorkers() = 1
[16:22:35.642] plan(): Setting new future strategy stack:
[16:22:35.642] List of future strategies:
[16:22:35.642] 1. multisession:
[16:22:35.642]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.642]    - tweaked: FALSE
[16:22:35.642]    - call: plan("default")
[16:22:35.646] plan(): nbrOfWorkers() = 1
[16:22:35.646] SequentialFuture started (and completed)
[16:22:35.647] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:35.650] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:22:35.651] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:35.651] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:35.652] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:35.653] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:35.654] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:35.655] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:35.655] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:35.655] Option 'future.plan' = ‘multisession’
[16:22:35.655] R command-line argument: -p 1
[16:22:35.655]  => 'future.plan' already set.
[16:22:35.655] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:35.655] Setting plan('default')
[16:22:35.656] plan(): Setting new future strategy stack:
[16:22:35.656] List of future strategies:
[16:22:35.656] 1. multisession:
[16:22:35.656]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.656]    - tweaked: FALSE
[16:22:35.656]    - call: plan("default", .init = FALSE)
[16:22:35.659] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:22:35.659] plan(): Setting new future strategy stack:
[16:22:35.660] List of future strategies:
[16:22:35.660] 1. multisession:
[16:22:35.660]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.660]    - tweaked: FALSE
[16:22:35.660]    - call: plan("default")
[16:22:35.660] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:35.660] multisession:
[16:22:35.660] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.660] - tweaked: FALSE
[16:22:35.660] - call: plan("default")
[16:22:35.663] getGlobalsAndPackages() ...
[16:22:35.663] Not searching for globals
[16:22:35.664] - globals: [0] <none>
[16:22:35.664] getGlobalsAndPackages() ... DONE
[16:22:35.664] Packages needed by the future expression (n = 0): <none>
[16:22:35.664] Packages needed by future strategies (n = 0): <none>
[16:22:35.665] {
[16:22:35.665]     {
[16:22:35.665]         {
[16:22:35.665]             ...future.startTime <- base::Sys.time()
[16:22:35.665]             {
[16:22:35.665]                 {
[16:22:35.665]                   {
[16:22:35.665]                     base::local({
[16:22:35.665]                       has_future <- base::requireNamespace("future", 
[16:22:35.665]                         quietly = TRUE)
[16:22:35.665]                       if (has_future) {
[16:22:35.665]                         ns <- base::getNamespace("future")
[16:22:35.665]                         version <- ns[[".package"]][["version"]]
[16:22:35.665]                         if (is.null(version)) 
[16:22:35.665]                           version <- utils::packageVersion("future")
[16:22:35.665]                       }
[16:22:35.665]                       else {
[16:22:35.665]                         version <- NULL
[16:22:35.665]                       }
[16:22:35.665]                       if (!has_future || version < "1.8.0") {
[16:22:35.665]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:35.665]                           "", base::R.version$version.string), 
[16:22:35.665]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:35.665]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:35.665]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:35.665]                             "release", "version")], collapse = " "), 
[16:22:35.665]                           hostname = base::Sys.info()[["nodename"]])
[16:22:35.665]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:35.665]                           info)
[16:22:35.665]                         info <- base::paste(info, collapse = "; ")
[16:22:35.665]                         if (!has_future) {
[16:22:35.665]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:35.665]                             info)
[16:22:35.665]                         }
[16:22:35.665]                         else {
[16:22:35.665]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:35.665]                             info, version)
[16:22:35.665]                         }
[16:22:35.665]                         base::stop(msg)
[16:22:35.665]                       }
[16:22:35.665]                     })
[16:22:35.665]                   }
[16:22:35.665]                   ...future.strategy.old <- future::plan("list")
[16:22:35.665]                   options(future.plan = NULL)
[16:22:35.665]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.665]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:35.665]                 }
[16:22:35.665]                 ...future.workdir <- getwd()
[16:22:35.665]             }
[16:22:35.665]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:35.665]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:35.665]         }
[16:22:35.665]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:35.665]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:35.665]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:35.665]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:35.665]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:35.665]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:35.665]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:35.665]             base::names(...future.oldOptions))
[16:22:35.665]     }
[16:22:35.665]     if (FALSE) {
[16:22:35.665]     }
[16:22:35.665]     else {
[16:22:35.665]         if (TRUE) {
[16:22:35.665]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:35.665]                 open = "w")
[16:22:35.665]         }
[16:22:35.665]         else {
[16:22:35.665]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:35.665]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:35.665]         }
[16:22:35.665]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:35.665]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:35.665]             base::sink(type = "output", split = FALSE)
[16:22:35.665]             base::close(...future.stdout)
[16:22:35.665]         }, add = TRUE)
[16:22:35.665]     }
[16:22:35.665]     ...future.frame <- base::sys.nframe()
[16:22:35.665]     ...future.conditions <- base::list()
[16:22:35.665]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:35.665]     if (FALSE) {
[16:22:35.665]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:35.665]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:35.665]     }
[16:22:35.665]     ...future.result <- base::tryCatch({
[16:22:35.665]         base::withCallingHandlers({
[16:22:35.665]             ...future.value <- base::withVisible(base::local(NA))
[16:22:35.665]             future::FutureResult(value = ...future.value$value, 
[16:22:35.665]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.665]                   ...future.rng), globalenv = if (FALSE) 
[16:22:35.665]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:35.665]                     ...future.globalenv.names))
[16:22:35.665]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:35.665]         }, condition = base::local({
[16:22:35.665]             c <- base::c
[16:22:35.665]             inherits <- base::inherits
[16:22:35.665]             invokeRestart <- base::invokeRestart
[16:22:35.665]             length <- base::length
[16:22:35.665]             list <- base::list
[16:22:35.665]             seq.int <- base::seq.int
[16:22:35.665]             signalCondition <- base::signalCondition
[16:22:35.665]             sys.calls <- base::sys.calls
[16:22:35.665]             `[[` <- base::`[[`
[16:22:35.665]             `+` <- base::`+`
[16:22:35.665]             `<<-` <- base::`<<-`
[16:22:35.665]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:35.665]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:35.665]                   3L)]
[16:22:35.665]             }
[16:22:35.665]             function(cond) {
[16:22:35.665]                 is_error <- inherits(cond, "error")
[16:22:35.665]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:35.665]                   NULL)
[16:22:35.665]                 if (is_error) {
[16:22:35.665]                   sessionInformation <- function() {
[16:22:35.665]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:35.665]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:35.665]                       search = base::search(), system = base::Sys.info())
[16:22:35.665]                   }
[16:22:35.665]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.665]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:35.665]                     cond$call), session = sessionInformation(), 
[16:22:35.665]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:35.665]                   signalCondition(cond)
[16:22:35.665]                 }
[16:22:35.665]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:35.665]                 "immediateCondition"))) {
[16:22:35.665]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:35.665]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.665]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:35.665]                   if (TRUE && !signal) {
[16:22:35.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.665]                     {
[16:22:35.665]                       inherits <- base::inherits
[16:22:35.665]                       invokeRestart <- base::invokeRestart
[16:22:35.665]                       is.null <- base::is.null
[16:22:35.665]                       muffled <- FALSE
[16:22:35.665]                       if (inherits(cond, "message")) {
[16:22:35.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.665]                         if (muffled) 
[16:22:35.665]                           invokeRestart("muffleMessage")
[16:22:35.665]                       }
[16:22:35.665]                       else if (inherits(cond, "warning")) {
[16:22:35.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.665]                         if (muffled) 
[16:22:35.665]                           invokeRestart("muffleWarning")
[16:22:35.665]                       }
[16:22:35.665]                       else if (inherits(cond, "condition")) {
[16:22:35.665]                         if (!is.null(pattern)) {
[16:22:35.665]                           computeRestarts <- base::computeRestarts
[16:22:35.665]                           grepl <- base::grepl
[16:22:35.665]                           restarts <- computeRestarts(cond)
[16:22:35.665]                           for (restart in restarts) {
[16:22:35.665]                             name <- restart$name
[16:22:35.665]                             if (is.null(name)) 
[16:22:35.665]                               next
[16:22:35.665]                             if (!grepl(pattern, name)) 
[16:22:35.665]                               next
[16:22:35.665]                             invokeRestart(restart)
[16:22:35.665]                             muffled <- TRUE
[16:22:35.665]                             break
[16:22:35.665]                           }
[16:22:35.665]                         }
[16:22:35.665]                       }
[16:22:35.665]                       invisible(muffled)
[16:22:35.665]                     }
[16:22:35.665]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.665]                   }
[16:22:35.665]                 }
[16:22:35.665]                 else {
[16:22:35.665]                   if (TRUE) {
[16:22:35.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.665]                     {
[16:22:35.665]                       inherits <- base::inherits
[16:22:35.665]                       invokeRestart <- base::invokeRestart
[16:22:35.665]                       is.null <- base::is.null
[16:22:35.665]                       muffled <- FALSE
[16:22:35.665]                       if (inherits(cond, "message")) {
[16:22:35.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.665]                         if (muffled) 
[16:22:35.665]                           invokeRestart("muffleMessage")
[16:22:35.665]                       }
[16:22:35.665]                       else if (inherits(cond, "warning")) {
[16:22:35.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.665]                         if (muffled) 
[16:22:35.665]                           invokeRestart("muffleWarning")
[16:22:35.665]                       }
[16:22:35.665]                       else if (inherits(cond, "condition")) {
[16:22:35.665]                         if (!is.null(pattern)) {
[16:22:35.665]                           computeRestarts <- base::computeRestarts
[16:22:35.665]                           grepl <- base::grepl
[16:22:35.665]                           restarts <- computeRestarts(cond)
[16:22:35.665]                           for (restart in restarts) {
[16:22:35.665]                             name <- restart$name
[16:22:35.665]                             if (is.null(name)) 
[16:22:35.665]                               next
[16:22:35.665]                             if (!grepl(pattern, name)) 
[16:22:35.665]                               next
[16:22:35.665]                             invokeRestart(restart)
[16:22:35.665]                             muffled <- TRUE
[16:22:35.665]                             break
[16:22:35.665]                           }
[16:22:35.665]                         }
[16:22:35.665]                       }
[16:22:35.665]                       invisible(muffled)
[16:22:35.665]                     }
[16:22:35.665]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.665]                   }
[16:22:35.665]                 }
[16:22:35.665]             }
[16:22:35.665]         }))
[16:22:35.665]     }, error = function(ex) {
[16:22:35.665]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:35.665]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.665]                 ...future.rng), started = ...future.startTime, 
[16:22:35.665]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:35.665]             version = "1.8"), class = "FutureResult")
[16:22:35.665]     }, finally = {
[16:22:35.665]         if (!identical(...future.workdir, getwd())) 
[16:22:35.665]             setwd(...future.workdir)
[16:22:35.665]         {
[16:22:35.665]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:35.665]                 ...future.oldOptions$nwarnings <- NULL
[16:22:35.665]             }
[16:22:35.665]             base::options(...future.oldOptions)
[16:22:35.665]             if (.Platform$OS.type == "windows") {
[16:22:35.665]                 old_names <- names(...future.oldEnvVars)
[16:22:35.665]                 envs <- base::Sys.getenv()
[16:22:35.665]                 names <- names(envs)
[16:22:35.665]                 common <- intersect(names, old_names)
[16:22:35.665]                 added <- setdiff(names, old_names)
[16:22:35.665]                 removed <- setdiff(old_names, names)
[16:22:35.665]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:35.665]                   envs[common]]
[16:22:35.665]                 NAMES <- toupper(changed)
[16:22:35.665]                 args <- list()
[16:22:35.665]                 for (kk in seq_along(NAMES)) {
[16:22:35.665]                   name <- changed[[kk]]
[16:22:35.665]                   NAME <- NAMES[[kk]]
[16:22:35.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.665]                     next
[16:22:35.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.665]                 }
[16:22:35.665]                 NAMES <- toupper(added)
[16:22:35.665]                 for (kk in seq_along(NAMES)) {
[16:22:35.665]                   name <- added[[kk]]
[16:22:35.665]                   NAME <- NAMES[[kk]]
[16:22:35.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.665]                     next
[16:22:35.665]                   args[[name]] <- ""
[16:22:35.665]                 }
[16:22:35.665]                 NAMES <- toupper(removed)
[16:22:35.665]                 for (kk in seq_along(NAMES)) {
[16:22:35.665]                   name <- removed[[kk]]
[16:22:35.665]                   NAME <- NAMES[[kk]]
[16:22:35.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.665]                     next
[16:22:35.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.665]                 }
[16:22:35.665]                 if (length(args) > 0) 
[16:22:35.665]                   base::do.call(base::Sys.setenv, args = args)
[16:22:35.665]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:35.665]             }
[16:22:35.665]             else {
[16:22:35.665]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:35.665]             }
[16:22:35.665]             {
[16:22:35.665]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:35.665]                   0L) {
[16:22:35.665]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:35.665]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:35.665]                   base::options(opts)
[16:22:35.665]                 }
[16:22:35.665]                 {
[16:22:35.665]                   {
[16:22:35.665]                     NULL
[16:22:35.665]                     RNGkind("Mersenne-Twister")
[16:22:35.665]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:35.665]                       inherits = FALSE)
[16:22:35.665]                   }
[16:22:35.665]                   options(future.plan = "multisession")
[16:22:35.665]                   if (is.na("")) 
[16:22:35.665]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.665]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:22:35.665]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:35.665]                     .init = FALSE)
[16:22:35.665]                 }
[16:22:35.665]             }
[16:22:35.665]         }
[16:22:35.665]     })
[16:22:35.665]     if (TRUE) {
[16:22:35.665]         base::sink(type = "output", split = FALSE)
[16:22:35.665]         if (TRUE) {
[16:22:35.665]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:35.665]         }
[16:22:35.665]         else {
[16:22:35.665]             ...future.result["stdout"] <- base::list(NULL)
[16:22:35.665]         }
[16:22:35.665]         base::close(...future.stdout)
[16:22:35.665]         ...future.stdout <- NULL
[16:22:35.665]     }
[16:22:35.665]     ...future.result$conditions <- ...future.conditions
[16:22:35.665]     ...future.result$finished <- base::Sys.time()
[16:22:35.665]     ...future.result
[16:22:35.665] }
[16:22:35.666] plan(): Setting new future strategy stack:
[16:22:35.666] List of future strategies:
[16:22:35.666] 1. sequential:
[16:22:35.666]    - args: function (..., envir = parent.frame())
[16:22:35.666]    - tweaked: FALSE
[16:22:35.666]    - call: NULL
[16:22:35.667] plan(): nbrOfWorkers() = 1
[16:22:35.667] plan(): Setting new future strategy stack:
[16:22:35.668] List of future strategies:
[16:22:35.668] 1. multisession:
[16:22:35.668]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.668]    - tweaked: FALSE
[16:22:35.668]    - call: plan("default")
[16:22:35.671] plan(): nbrOfWorkers() = 1
[16:22:35.671] SequentialFuture started (and completed)
[16:22:35.671] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:35.675] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[16:22:35.675] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[16:22:35.676] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[16:22:35.676] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[16:22:35.677] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[16:22:35.678] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[16:22:35.679] Environment variable ‘R_FUTURE_JOURNAL’ not set
[16:22:35.679] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[16:22:35.679] Option 'future.plan' of type ‘function’
[16:22:35.679] R command-line argument: -p 1
[16:22:35.679]  => 'future.plan' already set.
[16:22:35.679] R process uuid: 0344bc17-3aa1-da34-f1f0-cb599ea7f131
[16:22:35.679] Setting plan('default')
[16:22:35.679] plan(): Setting new future strategy stack:
[16:22:35.680] List of future strategies:
[16:22:35.680] 1. multisession:
[16:22:35.680]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.680]    - tweaked: FALSE
[16:22:35.680]    - call: NULL
[16:22:35.683] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[16:22:35.683] plan(): Setting new future strategy stack:
[16:22:35.683] List of future strategies:
[16:22:35.683] 1. multisession:
[16:22:35.683]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.683]    - tweaked: FALSE
[16:22:35.683]    - call: NULL
[16:22:35.684] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:35.684] multisession:
[16:22:35.684] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.684] - tweaked: FALSE
[16:22:35.684] - call: NULL
[16:22:35.687] getGlobalsAndPackages() ...
[16:22:35.687] Not searching for globals
[16:22:35.687] - globals: [0] <none>
[16:22:35.688] getGlobalsAndPackages() ... DONE
[16:22:35.688] Packages needed by the future expression (n = 0): <none>
[16:22:35.688] Packages needed by future strategies (n = 0): <none>
[16:22:35.688] {
[16:22:35.688]     {
[16:22:35.688]         {
[16:22:35.688]             ...future.startTime <- base::Sys.time()
[16:22:35.688]             {
[16:22:35.688]                 {
[16:22:35.688]                   {
[16:22:35.688]                     base::local({
[16:22:35.688]                       has_future <- base::requireNamespace("future", 
[16:22:35.688]                         quietly = TRUE)
[16:22:35.688]                       if (has_future) {
[16:22:35.688]                         ns <- base::getNamespace("future")
[16:22:35.688]                         version <- ns[[".package"]][["version"]]
[16:22:35.688]                         if (is.null(version)) 
[16:22:35.688]                           version <- utils::packageVersion("future")
[16:22:35.688]                       }
[16:22:35.688]                       else {
[16:22:35.688]                         version <- NULL
[16:22:35.688]                       }
[16:22:35.688]                       if (!has_future || version < "1.8.0") {
[16:22:35.688]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:35.688]                           "", base::R.version$version.string), 
[16:22:35.688]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:35.688]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:35.688]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:35.688]                             "release", "version")], collapse = " "), 
[16:22:35.688]                           hostname = base::Sys.info()[["nodename"]])
[16:22:35.688]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:35.688]                           info)
[16:22:35.688]                         info <- base::paste(info, collapse = "; ")
[16:22:35.688]                         if (!has_future) {
[16:22:35.688]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:35.688]                             info)
[16:22:35.688]                         }
[16:22:35.688]                         else {
[16:22:35.688]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:35.688]                             info, version)
[16:22:35.688]                         }
[16:22:35.688]                         base::stop(msg)
[16:22:35.688]                       }
[16:22:35.688]                     })
[16:22:35.688]                   }
[16:22:35.688]                   ...future.strategy.old <- future::plan("list")
[16:22:35.688]                   options(future.plan = NULL)
[16:22:35.688]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.688]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:35.688]                 }
[16:22:35.688]                 ...future.workdir <- getwd()
[16:22:35.688]             }
[16:22:35.688]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:35.688]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:35.688]         }
[16:22:35.688]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:35.688]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:35.688]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:35.688]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:35.688]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:35.688]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:35.688]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:35.688]             base::names(...future.oldOptions))
[16:22:35.688]     }
[16:22:35.688]     if (FALSE) {
[16:22:35.688]     }
[16:22:35.688]     else {
[16:22:35.688]         if (TRUE) {
[16:22:35.688]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:35.688]                 open = "w")
[16:22:35.688]         }
[16:22:35.688]         else {
[16:22:35.688]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:35.688]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:35.688]         }
[16:22:35.688]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:35.688]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:35.688]             base::sink(type = "output", split = FALSE)
[16:22:35.688]             base::close(...future.stdout)
[16:22:35.688]         }, add = TRUE)
[16:22:35.688]     }
[16:22:35.688]     ...future.frame <- base::sys.nframe()
[16:22:35.688]     ...future.conditions <- base::list()
[16:22:35.688]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:35.688]     if (FALSE) {
[16:22:35.688]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:35.688]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:35.688]     }
[16:22:35.688]     ...future.result <- base::tryCatch({
[16:22:35.688]         base::withCallingHandlers({
[16:22:35.688]             ...future.value <- base::withVisible(base::local(NA))
[16:22:35.688]             future::FutureResult(value = ...future.value$value, 
[16:22:35.688]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.688]                   ...future.rng), globalenv = if (FALSE) 
[16:22:35.688]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:35.688]                     ...future.globalenv.names))
[16:22:35.688]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:35.688]         }, condition = base::local({
[16:22:35.688]             c <- base::c
[16:22:35.688]             inherits <- base::inherits
[16:22:35.688]             invokeRestart <- base::invokeRestart
[16:22:35.688]             length <- base::length
[16:22:35.688]             list <- base::list
[16:22:35.688]             seq.int <- base::seq.int
[16:22:35.688]             signalCondition <- base::signalCondition
[16:22:35.688]             sys.calls <- base::sys.calls
[16:22:35.688]             `[[` <- base::`[[`
[16:22:35.688]             `+` <- base::`+`
[16:22:35.688]             `<<-` <- base::`<<-`
[16:22:35.688]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:35.688]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:35.688]                   3L)]
[16:22:35.688]             }
[16:22:35.688]             function(cond) {
[16:22:35.688]                 is_error <- inherits(cond, "error")
[16:22:35.688]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:35.688]                   NULL)
[16:22:35.688]                 if (is_error) {
[16:22:35.688]                   sessionInformation <- function() {
[16:22:35.688]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:35.688]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:35.688]                       search = base::search(), system = base::Sys.info())
[16:22:35.688]                   }
[16:22:35.688]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.688]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:35.688]                     cond$call), session = sessionInformation(), 
[16:22:35.688]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:35.688]                   signalCondition(cond)
[16:22:35.688]                 }
[16:22:35.688]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:35.688]                 "immediateCondition"))) {
[16:22:35.688]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:35.688]                   ...future.conditions[[length(...future.conditions) + 
[16:22:35.688]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:35.688]                   if (TRUE && !signal) {
[16:22:35.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.688]                     {
[16:22:35.688]                       inherits <- base::inherits
[16:22:35.688]                       invokeRestart <- base::invokeRestart
[16:22:35.688]                       is.null <- base::is.null
[16:22:35.688]                       muffled <- FALSE
[16:22:35.688]                       if (inherits(cond, "message")) {
[16:22:35.688]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.688]                         if (muffled) 
[16:22:35.688]                           invokeRestart("muffleMessage")
[16:22:35.688]                       }
[16:22:35.688]                       else if (inherits(cond, "warning")) {
[16:22:35.688]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.688]                         if (muffled) 
[16:22:35.688]                           invokeRestart("muffleWarning")
[16:22:35.688]                       }
[16:22:35.688]                       else if (inherits(cond, "condition")) {
[16:22:35.688]                         if (!is.null(pattern)) {
[16:22:35.688]                           computeRestarts <- base::computeRestarts
[16:22:35.688]                           grepl <- base::grepl
[16:22:35.688]                           restarts <- computeRestarts(cond)
[16:22:35.688]                           for (restart in restarts) {
[16:22:35.688]                             name <- restart$name
[16:22:35.688]                             if (is.null(name)) 
[16:22:35.688]                               next
[16:22:35.688]                             if (!grepl(pattern, name)) 
[16:22:35.688]                               next
[16:22:35.688]                             invokeRestart(restart)
[16:22:35.688]                             muffled <- TRUE
[16:22:35.688]                             break
[16:22:35.688]                           }
[16:22:35.688]                         }
[16:22:35.688]                       }
[16:22:35.688]                       invisible(muffled)
[16:22:35.688]                     }
[16:22:35.688]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.688]                   }
[16:22:35.688]                 }
[16:22:35.688]                 else {
[16:22:35.688]                   if (TRUE) {
[16:22:35.688]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:35.688]                     {
[16:22:35.688]                       inherits <- base::inherits
[16:22:35.688]                       invokeRestart <- base::invokeRestart
[16:22:35.688]                       is.null <- base::is.null
[16:22:35.688]                       muffled <- FALSE
[16:22:35.688]                       if (inherits(cond, "message")) {
[16:22:35.688]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:35.688]                         if (muffled) 
[16:22:35.688]                           invokeRestart("muffleMessage")
[16:22:35.688]                       }
[16:22:35.688]                       else if (inherits(cond, "warning")) {
[16:22:35.688]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:35.688]                         if (muffled) 
[16:22:35.688]                           invokeRestart("muffleWarning")
[16:22:35.688]                       }
[16:22:35.688]                       else if (inherits(cond, "condition")) {
[16:22:35.688]                         if (!is.null(pattern)) {
[16:22:35.688]                           computeRestarts <- base::computeRestarts
[16:22:35.688]                           grepl <- base::grepl
[16:22:35.688]                           restarts <- computeRestarts(cond)
[16:22:35.688]                           for (restart in restarts) {
[16:22:35.688]                             name <- restart$name
[16:22:35.688]                             if (is.null(name)) 
[16:22:35.688]                               next
[16:22:35.688]                             if (!grepl(pattern, name)) 
[16:22:35.688]                               next
[16:22:35.688]                             invokeRestart(restart)
[16:22:35.688]                             muffled <- TRUE
[16:22:35.688]                             break
[16:22:35.688]                           }
[16:22:35.688]                         }
[16:22:35.688]                       }
[16:22:35.688]                       invisible(muffled)
[16:22:35.688]                     }
[16:22:35.688]                     muffleCondition(cond, pattern = "^muffle")
[16:22:35.688]                   }
[16:22:35.688]                 }
[16:22:35.688]             }
[16:22:35.688]         }))
[16:22:35.688]     }, error = function(ex) {
[16:22:35.688]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:35.688]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:35.688]                 ...future.rng), started = ...future.startTime, 
[16:22:35.688]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:35.688]             version = "1.8"), class = "FutureResult")
[16:22:35.688]     }, finally = {
[16:22:35.688]         if (!identical(...future.workdir, getwd())) 
[16:22:35.688]             setwd(...future.workdir)
[16:22:35.688]         {
[16:22:35.688]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:35.688]                 ...future.oldOptions$nwarnings <- NULL
[16:22:35.688]             }
[16:22:35.688]             base::options(...future.oldOptions)
[16:22:35.688]             if (.Platform$OS.type == "windows") {
[16:22:35.688]                 old_names <- names(...future.oldEnvVars)
[16:22:35.688]                 envs <- base::Sys.getenv()
[16:22:35.688]                 names <- names(envs)
[16:22:35.688]                 common <- intersect(names, old_names)
[16:22:35.688]                 added <- setdiff(names, old_names)
[16:22:35.688]                 removed <- setdiff(old_names, names)
[16:22:35.688]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:35.688]                   envs[common]]
[16:22:35.688]                 NAMES <- toupper(changed)
[16:22:35.688]                 args <- list()
[16:22:35.688]                 for (kk in seq_along(NAMES)) {
[16:22:35.688]                   name <- changed[[kk]]
[16:22:35.688]                   NAME <- NAMES[[kk]]
[16:22:35.688]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.688]                     next
[16:22:35.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.688]                 }
[16:22:35.688]                 NAMES <- toupper(added)
[16:22:35.688]                 for (kk in seq_along(NAMES)) {
[16:22:35.688]                   name <- added[[kk]]
[16:22:35.688]                   NAME <- NAMES[[kk]]
[16:22:35.688]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.688]                     next
[16:22:35.688]                   args[[name]] <- ""
[16:22:35.688]                 }
[16:22:35.688]                 NAMES <- toupper(removed)
[16:22:35.688]                 for (kk in seq_along(NAMES)) {
[16:22:35.688]                   name <- removed[[kk]]
[16:22:35.688]                   NAME <- NAMES[[kk]]
[16:22:35.688]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:35.688]                     next
[16:22:35.688]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:35.688]                 }
[16:22:35.688]                 if (length(args) > 0) 
[16:22:35.688]                   base::do.call(base::Sys.setenv, args = args)
[16:22:35.688]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:35.688]             }
[16:22:35.688]             else {
[16:22:35.688]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:35.688]             }
[16:22:35.688]             {
[16:22:35.688]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:35.688]                   0L) {
[16:22:35.688]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:35.688]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:35.688]                   base::options(opts)
[16:22:35.688]                 }
[16:22:35.688]                 {
[16:22:35.688]                   {
[16:22:35.688]                     NULL
[16:22:35.688]                     RNGkind("Mersenne-Twister")
[16:22:35.688]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:35.688]                       inherits = FALSE)
[16:22:35.688]                   }
[16:22:35.688]                   options(future.plan = function (..., workers = availableCores(), 
[16:22:35.688]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:22:35.688]                     envir = parent.frame()) 
[16:22:35.688]                   {
[16:22:35.688]                     if (is.function(workers)) 
[16:22:35.688]                       workers <- workers()
[16:22:35.688]                     workers <- structure(as.integer(workers), 
[16:22:35.688]                       class = class(workers))
[16:22:35.688]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:22:35.688]                       workers >= 1)
[16:22:35.688]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:22:35.688]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:22:35.688]                     }
[16:22:35.688]                     future <- MultisessionFuture(..., workers = workers, 
[16:22:35.688]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:22:35.688]                       envir = envir)
[16:22:35.688]                     if (!future$lazy) 
[16:22:35.688]                       future <- run(future)
[16:22:35.688]                     invisible(future)
[16:22:35.688]                   })
[16:22:35.688]                   if (is.na("")) 
[16:22:35.688]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:35.688]                   else Sys.setenv(R_FUTURE_PLAN = "")
[16:22:35.688]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:35.688]                     .init = FALSE)
[16:22:35.688]                 }
[16:22:35.688]             }
[16:22:35.688]         }
[16:22:35.688]     })
[16:22:35.688]     if (TRUE) {
[16:22:35.688]         base::sink(type = "output", split = FALSE)
[16:22:35.688]         if (TRUE) {
[16:22:35.688]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:35.688]         }
[16:22:35.688]         else {
[16:22:35.688]             ...future.result["stdout"] <- base::list(NULL)
[16:22:35.688]         }
[16:22:35.688]         base::close(...future.stdout)
[16:22:35.688]         ...future.stdout <- NULL
[16:22:35.688]     }
[16:22:35.688]     ...future.result$conditions <- ...future.conditions
[16:22:35.688]     ...future.result$finished <- base::Sys.time()
[16:22:35.688]     ...future.result
[16:22:35.688] }
[16:22:35.691] plan(): Setting new future strategy stack:
[16:22:35.691] List of future strategies:
[16:22:35.691] 1. sequential:
[16:22:35.691]    - args: function (..., envir = parent.frame())
[16:22:35.691]    - tweaked: FALSE
[16:22:35.691]    - call: NULL
[16:22:35.691] plan(): nbrOfWorkers() = 1
[16:22:35.692] plan(): Setting new future strategy stack:
[16:22:35.692] List of future strategies:
[16:22:35.692] 1. multisession:
[16:22:35.692]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:35.692]    - tweaked: FALSE
[16:22:35.692]    - call: NULL
[16:22:35.695] plan(): nbrOfWorkers() = 1
[16:22:35.696] SequentialFuture started (and completed)
[16:22:35.696] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:35.699] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[16:22:35.702] Option 'future.startup.script': TRUE
[16:22:35.702] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:22:35.702] Future startup scripts found: <none>
[16:22:35.702] Option 'future.startup.script': TRUE
[16:22:35.702] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:22:35.702] Future startup scripts found: <none>
[16:22:35.702] Option 'future.startup.script': TRUE
[16:22:35.702] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:22:35.703] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[16:22:35.705] Option 'future.startup.script': TRUE
[16:22:35.705] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[16:22:35.706] Future startup scripts found: ‘.future.R’
[16:22:35.706] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[16:22:35.707] plan(): Setting new future strategy stack:
[16:22:35.707] List of future strategies:
[16:22:35.707] 1. FutureStrategy:
[16:22:35.707]    - args: function (..., envir = parent.frame())
[16:22:35.707]    - tweaked: FALSE
[16:22:35.707]    - call: future::plan(oplan)
[16:22:35.707] plan(): nbrOfWorkers() = 1
> 
