
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:38:26.496] plan(): Setting new future strategy stack:
[13:38:26.497] List of future strategies:
[13:38:26.497] 1. sequential:
[13:38:26.497]    - args: function (..., envir = parent.frame())
[13:38:26.497]    - tweaked: FALSE
[13:38:26.497]    - call: future::plan("sequential")
[13:38:26.510] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[13:38:26.521] plan(): Setting new future strategy stack:
[13:38:26.521] List of future strategies:
[13:38:26.521] 1. sequential:
[13:38:26.521]    - args: function (..., envir = parent.frame())
[13:38:26.521]    - tweaked: FALSE
[13:38:26.521]    - call: NULL
[13:38:26.531] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[13:38:26.538] plan(): Setting new future strategy stack:
[13:38:26.538] List of future strategies:
[13:38:26.538] 1. sequential:
[13:38:26.538]    - args: function (..., envir = parent.frame())
[13:38:26.538]    - tweaked: FALSE
[13:38:26.538]    - call: NULL
[13:38:26.538] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:38:26.539] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:26.539] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:26.539] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:26.539] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:26.540] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:26.541] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:26.542] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:26.542] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:26.542] R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:26.542] Coercing from character to numeric: ‘0.01’
[13:38:26.542] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[13:38:26.542] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:26.543] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:26.543] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:26.543] Setting plan('default')
[13:38:26.543] plan(): Setting new future strategy stack:
[13:38:26.543] List of future strategies:
[13:38:26.543] 1. sequential:
[13:38:26.543]    - args: function (..., envir = parent.frame())
[13:38:26.543]    - tweaked: FALSE
[13:38:26.543]    - call: NULL
[13:38:26.544] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:38:26.544] plan(): Setting new future strategy stack:
[13:38:26.544] List of future strategies:
[13:38:26.544] 1. sequential:
[13:38:26.544]    - args: function (..., envir = parent.frame())
[13:38:26.544]    - tweaked: FALSE
[13:38:26.544]    - call: NULL
[13:38:26.545] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:38:26.545] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:26.546] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:26.546] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:26.547] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:26.548] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:26.548] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:26.548] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:26.548] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:26.548] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:26.550] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:26.551] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:26.551] R command-line argument: -p 1
[13:38:26.551]  => options(future.plan = sequential)
[13:38:26.551] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:26.551] Setting plan('default')
[13:38:26.551] plan(): Setting new future strategy stack:
[13:38:26.551] List of future strategies:
[13:38:26.551] 1. sequential:
[13:38:26.551]    - args: function (..., envir = parent.frame())
[13:38:26.551]    - tweaked: FALSE
[13:38:26.551]    - call: NULL
[13:38:26.552] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:38:26.552] plan(): Setting new future strategy stack:
[13:38:26.552] List of future strategies:
[13:38:26.552] 1. sequential:
[13:38:26.552]    - args: function (..., envir = parent.frame())
[13:38:26.552]    - tweaked: FALSE
[13:38:26.552]    - call: NULL
[13:38:26.552] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[13:38:26.553] plan(): Setting new future strategy stack:
[13:38:26.553] List of future strategies:
[13:38:26.553] 1. sequential:
[13:38:26.553]    - args: function (..., envir = parent.frame())
[13:38:26.553]    - tweaked: FALSE
[13:38:26.553]    - call: NULL
[13:38:26.553] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[13:38:26.554] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:26.554] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:26.554] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:26.554] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:26.554] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:26.554] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:26.555] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:26.556] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:26.557] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:26.557] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:26.557] Setting plan('default')
[13:38:26.557] plan(): Setting new future strategy stack:
[13:38:26.558] List of future strategies:
[13:38:26.558] 1. sequential:
[13:38:26.558]    - args: function (..., envir = parent.frame())
[13:38:26.558]    - tweaked: FALSE
[13:38:26.558]    - call: NULL
[13:38:26.558] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[13:38:26.558] plan(): Setting new future strategy stack:
[13:38:26.558] List of future strategies:
[13:38:26.558] 1. sequential:
[13:38:26.558]    - args: function (..., envir = parent.frame())
[13:38:26.558]    - tweaked: FALSE
[13:38:26.558]    - call: NULL
[13:38:26.559] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[13:38:26.560] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:26.560] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:26.560] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:26.561] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:26.562] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:26.563] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:26.563] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:26.563] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:26.563] R command-line argument: -p 2
[13:38:26.563]  => options(future.plan = tweak(multisession, workers = 2))
[13:38:26.566] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:26.566] Setting plan('default')
[13:38:26.566] plan(): Setting new future strategy stack:
[13:38:26.566] List of future strategies:
[13:38:26.566] 1. multisession:
[13:38:26.566]    - args: function (..., workers = 2L, envir = parent.frame())
[13:38:26.566]    - tweaked: TRUE
[13:38:26.566]    - call: NULL
[13:38:26.566] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[13:38:26.567] plan(): Setting new future strategy stack:
[13:38:26.567] List of future strategies:
[13:38:26.567] 1. multisession:
[13:38:26.567]    - args: function (..., workers = 2L, envir = parent.frame())
[13:38:26.567]    - tweaked: TRUE
[13:38:26.567]    - call: NULL
[13:38:26.567] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:26.567] multisession:
[13:38:26.567] - args: function (..., workers = 2L, envir = parent.frame())
[13:38:26.567] - tweaked: TRUE
[13:38:26.567] - call: NULL
[13:38:26.569] getGlobalsAndPackages() ...
[13:38:26.569] Not searching for globals
[13:38:26.569] - globals: [0] <none>
[13:38:26.569] getGlobalsAndPackages() ... DONE
[13:38:26.570] [local output] makeClusterPSOCK() ...
[13:38:26.601] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:38:26.602] [local output] Base port: 11117
[13:38:26.602] [local output] Getting setup options for 2 cluster nodes ...
[13:38:26.602] [local output]  - Node 1 of 2 ...
[13:38:26.603] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:26.604] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d9c33bc1b.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d9c33bc1b.pid")'’
[13:38:26.795] - Possible to infer worker's PID: TRUE
[13:38:26.796] [local output] Rscript port: 11117

[13:38:26.796] [local output]  - Node 2 of 2 ...
[13:38:26.796] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:26.797] [local output] Rscript port: 11117

[13:38:26.797] [local output] Getting setup options for 2 cluster nodes ... done
[13:38:26.797] [local output]  - Parallel setup requested for some PSOCK nodes
[13:38:26.798] [local output] Setting up PSOCK nodes in parallel
[13:38:26.798] List of 36
[13:38:26.798]  $ worker          : chr "localhost"
[13:38:26.798]   ..- attr(*, "localhost")= logi TRUE
[13:38:26.798]  $ master          : chr "localhost"
[13:38:26.798]  $ port            : int 11117
[13:38:26.798]  $ connectTimeout  : num 120
[13:38:26.798]  $ timeout         : num 2592000
[13:38:26.798]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:38:26.798]  $ homogeneous     : logi TRUE
[13:38:26.798]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:38:26.798]  $ rscript_envs    : NULL
[13:38:26.798]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:26.798]  $ rscript_startup : NULL
[13:38:26.798]  $ rscript_sh      : chr "sh"
[13:38:26.798]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:26.798]  $ methods         : logi TRUE
[13:38:26.798]  $ socketOptions   : chr "no-delay"
[13:38:26.798]  $ useXDR          : logi FALSE
[13:38:26.798]  $ outfile         : chr "/dev/null"
[13:38:26.798]  $ renice          : int NA
[13:38:26.798]  $ rshcmd          : NULL
[13:38:26.798]  $ user            : chr(0) 
[13:38:26.798]  $ revtunnel       : logi FALSE
[13:38:26.798]  $ rshlogfile      : NULL
[13:38:26.798]  $ rshopts         : chr(0) 
[13:38:26.798]  $ rank            : int 1
[13:38:26.798]  $ manual          : logi FALSE
[13:38:26.798]  $ dryrun          : logi FALSE
[13:38:26.798]  $ quiet           : logi FALSE
[13:38:26.798]  $ setup_strategy  : chr "parallel"
[13:38:26.798]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:26.798]  $ pidfile         : chr "/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d9c33bc1b.pid"
[13:38:26.798]  $ rshcmd_label    : NULL
[13:38:26.798]  $ rsh_call        : NULL
[13:38:26.798]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:26.798]  $ localMachine    : logi TRUE
[13:38:26.798]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:38:26.798]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:38:26.798]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:38:26.798]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:38:26.798]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:38:26.798]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:38:26.798]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:38:26.798]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:38:26.798]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:38:26.798]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:38:26.798]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:38:26.798]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:38:26.798]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:38:26.798]  $ arguments       :List of 28
[13:38:26.798]   ..$ worker          : chr "localhost"
[13:38:26.798]   ..$ master          : NULL
[13:38:26.798]   ..$ port            : int 11117
[13:38:26.798]   ..$ connectTimeout  : num 120
[13:38:26.798]   ..$ timeout         : num 2592000
[13:38:26.798]   ..$ rscript         : NULL
[13:38:26.798]   ..$ homogeneous     : NULL
[13:38:26.798]   ..$ rscript_args    : NULL
[13:38:26.798]   ..$ rscript_envs    : NULL
[13:38:26.798]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:26.798]   ..$ rscript_startup : NULL
[13:38:26.798]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:38:26.798]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:26.798]   ..$ methods         : logi TRUE
[13:38:26.798]   ..$ socketOptions   : chr "no-delay"
[13:38:26.798]   ..$ useXDR          : logi FALSE
[13:38:26.798]   ..$ outfile         : chr "/dev/null"
[13:38:26.798]   ..$ renice          : int NA
[13:38:26.798]   ..$ rshcmd          : NULL
[13:38:26.798]   ..$ user            : NULL
[13:38:26.798]   ..$ revtunnel       : logi NA
[13:38:26.798]   ..$ rshlogfile      : NULL
[13:38:26.798]   ..$ rshopts         : NULL
[13:38:26.798]   ..$ rank            : int 1
[13:38:26.798]   ..$ manual          : logi FALSE
[13:38:26.798]   ..$ dryrun          : logi FALSE
[13:38:26.798]   ..$ quiet           : logi FALSE
[13:38:26.798]   ..$ setup_strategy  : chr "parallel"
[13:38:26.798]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:38:26.815] [local output] System call to launch all workers:
[13:38:26.815] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d9c33bc1b.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11117 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:38:26.815] [local output] Starting PSOCK main server
[13:38:26.821] [local output] Workers launched
[13:38:26.821] [local output] Waiting for workers to connect back
[13:38:26.821]  - [local output] 0 workers out of 2 ready
[13:38:27.066]  - [local output] 0 workers out of 2 ready
[13:38:27.066]  - [local output] 1 workers out of 2 ready
[13:38:27.074]  - [local output] 1 workers out of 2 ready
[13:38:27.074]  - [local output] 2 workers out of 2 ready
[13:38:27.074] [local output] Launching of workers completed
[13:38:27.074] [local output] Collecting session information from workers
[13:38:27.075] [local output]  - Worker #1 of 2
[13:38:27.076] [local output]  - Worker #2 of 2
[13:38:27.076] [local output] makeClusterPSOCK() ... done
[13:38:27.088] Packages needed by the future expression (n = 0): <none>
[13:38:27.089] Packages needed by future strategies (n = 0): <none>
[13:38:27.089] {
[13:38:27.089]     {
[13:38:27.089]         {
[13:38:27.089]             ...future.startTime <- base::Sys.time()
[13:38:27.089]             {
[13:38:27.089]                 {
[13:38:27.089]                   {
[13:38:27.089]                     {
[13:38:27.089]                       base::local({
[13:38:27.089]                         has_future <- base::requireNamespace("future", 
[13:38:27.089]                           quietly = TRUE)
[13:38:27.089]                         if (has_future) {
[13:38:27.089]                           ns <- base::getNamespace("future")
[13:38:27.089]                           version <- ns[[".package"]][["version"]]
[13:38:27.089]                           if (is.null(version)) 
[13:38:27.089]                             version <- utils::packageVersion("future")
[13:38:27.089]                         }
[13:38:27.089]                         else {
[13:38:27.089]                           version <- NULL
[13:38:27.089]                         }
[13:38:27.089]                         if (!has_future || version < "1.8.0") {
[13:38:27.089]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:27.089]                             "", base::R.version$version.string), 
[13:38:27.089]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:27.089]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:27.089]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:27.089]                               "release", "version")], collapse = " "), 
[13:38:27.089]                             hostname = base::Sys.info()[["nodename"]])
[13:38:27.089]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:27.089]                             info)
[13:38:27.089]                           info <- base::paste(info, collapse = "; ")
[13:38:27.089]                           if (!has_future) {
[13:38:27.089]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:27.089]                               info)
[13:38:27.089]                           }
[13:38:27.089]                           else {
[13:38:27.089]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:27.089]                               info, version)
[13:38:27.089]                           }
[13:38:27.089]                           base::stop(msg)
[13:38:27.089]                         }
[13:38:27.089]                       })
[13:38:27.089]                     }
[13:38:27.089]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:27.089]                     base::options(mc.cores = 1L)
[13:38:27.089]                   }
[13:38:27.089]                   ...future.strategy.old <- future::plan("list")
[13:38:27.089]                   options(future.plan = NULL)
[13:38:27.089]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.089]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:27.089]                 }
[13:38:27.089]                 ...future.workdir <- getwd()
[13:38:27.089]             }
[13:38:27.089]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:27.089]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:27.089]         }
[13:38:27.089]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:27.089]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:27.089]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:27.089]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:27.089]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:27.089]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:27.089]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:27.089]             base::names(...future.oldOptions))
[13:38:27.089]     }
[13:38:27.089]     if (FALSE) {
[13:38:27.089]     }
[13:38:27.089]     else {
[13:38:27.089]         if (TRUE) {
[13:38:27.089]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:27.089]                 open = "w")
[13:38:27.089]         }
[13:38:27.089]         else {
[13:38:27.089]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:27.089]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:27.089]         }
[13:38:27.089]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:27.089]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:27.089]             base::sink(type = "output", split = FALSE)
[13:38:27.089]             base::close(...future.stdout)
[13:38:27.089]         }, add = TRUE)
[13:38:27.089]     }
[13:38:27.089]     ...future.frame <- base::sys.nframe()
[13:38:27.089]     ...future.conditions <- base::list()
[13:38:27.089]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:27.089]     if (FALSE) {
[13:38:27.089]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:27.089]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:27.089]     }
[13:38:27.089]     ...future.result <- base::tryCatch({
[13:38:27.089]         base::withCallingHandlers({
[13:38:27.089]             ...future.value <- base::withVisible(base::local({
[13:38:27.089]                 ...future.makeSendCondition <- base::local({
[13:38:27.089]                   sendCondition <- NULL
[13:38:27.089]                   function(frame = 1L) {
[13:38:27.089]                     if (is.function(sendCondition)) 
[13:38:27.089]                       return(sendCondition)
[13:38:27.089]                     ns <- getNamespace("parallel")
[13:38:27.089]                     if (exists("sendData", mode = "function", 
[13:38:27.089]                       envir = ns)) {
[13:38:27.089]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:27.089]                         envir = ns)
[13:38:27.089]                       envir <- sys.frame(frame)
[13:38:27.089]                       master <- NULL
[13:38:27.089]                       while (!identical(envir, .GlobalEnv) && 
[13:38:27.089]                         !identical(envir, emptyenv())) {
[13:38:27.089]                         if (exists("master", mode = "list", envir = envir, 
[13:38:27.089]                           inherits = FALSE)) {
[13:38:27.089]                           master <- get("master", mode = "list", 
[13:38:27.089]                             envir = envir, inherits = FALSE)
[13:38:27.089]                           if (inherits(master, c("SOCKnode", 
[13:38:27.089]                             "SOCK0node"))) {
[13:38:27.089]                             sendCondition <<- function(cond) {
[13:38:27.089]                               data <- list(type = "VALUE", value = cond, 
[13:38:27.089]                                 success = TRUE)
[13:38:27.089]                               parallel_sendData(master, data)
[13:38:27.089]                             }
[13:38:27.089]                             return(sendCondition)
[13:38:27.089]                           }
[13:38:27.089]                         }
[13:38:27.089]                         frame <- frame + 1L
[13:38:27.089]                         envir <- sys.frame(frame)
[13:38:27.089]                       }
[13:38:27.089]                     }
[13:38:27.089]                     sendCondition <<- function(cond) NULL
[13:38:27.089]                   }
[13:38:27.089]                 })
[13:38:27.089]                 withCallingHandlers({
[13:38:27.089]                   NA
[13:38:27.089]                 }, immediateCondition = function(cond) {
[13:38:27.089]                   sendCondition <- ...future.makeSendCondition()
[13:38:27.089]                   sendCondition(cond)
[13:38:27.089]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.089]                   {
[13:38:27.089]                     inherits <- base::inherits
[13:38:27.089]                     invokeRestart <- base::invokeRestart
[13:38:27.089]                     is.null <- base::is.null
[13:38:27.089]                     muffled <- FALSE
[13:38:27.089]                     if (inherits(cond, "message")) {
[13:38:27.089]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:27.089]                       if (muffled) 
[13:38:27.089]                         invokeRestart("muffleMessage")
[13:38:27.089]                     }
[13:38:27.089]                     else if (inherits(cond, "warning")) {
[13:38:27.089]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:27.089]                       if (muffled) 
[13:38:27.089]                         invokeRestart("muffleWarning")
[13:38:27.089]                     }
[13:38:27.089]                     else if (inherits(cond, "condition")) {
[13:38:27.089]                       if (!is.null(pattern)) {
[13:38:27.089]                         computeRestarts <- base::computeRestarts
[13:38:27.089]                         grepl <- base::grepl
[13:38:27.089]                         restarts <- computeRestarts(cond)
[13:38:27.089]                         for (restart in restarts) {
[13:38:27.089]                           name <- restart$name
[13:38:27.089]                           if (is.null(name)) 
[13:38:27.089]                             next
[13:38:27.089]                           if (!grepl(pattern, name)) 
[13:38:27.089]                             next
[13:38:27.089]                           invokeRestart(restart)
[13:38:27.089]                           muffled <- TRUE
[13:38:27.089]                           break
[13:38:27.089]                         }
[13:38:27.089]                       }
[13:38:27.089]                     }
[13:38:27.089]                     invisible(muffled)
[13:38:27.089]                   }
[13:38:27.089]                   muffleCondition(cond)
[13:38:27.089]                 })
[13:38:27.089]             }))
[13:38:27.089]             future::FutureResult(value = ...future.value$value, 
[13:38:27.089]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.089]                   ...future.rng), globalenv = if (FALSE) 
[13:38:27.089]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:27.089]                     ...future.globalenv.names))
[13:38:27.089]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:27.089]         }, condition = base::local({
[13:38:27.089]             c <- base::c
[13:38:27.089]             inherits <- base::inherits
[13:38:27.089]             invokeRestart <- base::invokeRestart
[13:38:27.089]             length <- base::length
[13:38:27.089]             list <- base::list
[13:38:27.089]             seq.int <- base::seq.int
[13:38:27.089]             signalCondition <- base::signalCondition
[13:38:27.089]             sys.calls <- base::sys.calls
[13:38:27.089]             `[[` <- base::`[[`
[13:38:27.089]             `+` <- base::`+`
[13:38:27.089]             `<<-` <- base::`<<-`
[13:38:27.089]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:27.089]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:27.089]                   3L)]
[13:38:27.089]             }
[13:38:27.089]             function(cond) {
[13:38:27.089]                 is_error <- inherits(cond, "error")
[13:38:27.089]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:27.089]                   NULL)
[13:38:27.089]                 if (is_error) {
[13:38:27.089]                   sessionInformation <- function() {
[13:38:27.089]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:27.089]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:27.089]                       search = base::search(), system = base::Sys.info())
[13:38:27.089]                   }
[13:38:27.089]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.089]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:27.089]                     cond$call), session = sessionInformation(), 
[13:38:27.089]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:27.089]                   signalCondition(cond)
[13:38:27.089]                 }
[13:38:27.089]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:27.089]                 "immediateCondition"))) {
[13:38:27.089]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:27.089]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.089]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:27.089]                   if (TRUE && !signal) {
[13:38:27.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.089]                     {
[13:38:27.089]                       inherits <- base::inherits
[13:38:27.089]                       invokeRestart <- base::invokeRestart
[13:38:27.089]                       is.null <- base::is.null
[13:38:27.089]                       muffled <- FALSE
[13:38:27.089]                       if (inherits(cond, "message")) {
[13:38:27.089]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.089]                         if (muffled) 
[13:38:27.089]                           invokeRestart("muffleMessage")
[13:38:27.089]                       }
[13:38:27.089]                       else if (inherits(cond, "warning")) {
[13:38:27.089]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.089]                         if (muffled) 
[13:38:27.089]                           invokeRestart("muffleWarning")
[13:38:27.089]                       }
[13:38:27.089]                       else if (inherits(cond, "condition")) {
[13:38:27.089]                         if (!is.null(pattern)) {
[13:38:27.089]                           computeRestarts <- base::computeRestarts
[13:38:27.089]                           grepl <- base::grepl
[13:38:27.089]                           restarts <- computeRestarts(cond)
[13:38:27.089]                           for (restart in restarts) {
[13:38:27.089]                             name <- restart$name
[13:38:27.089]                             if (is.null(name)) 
[13:38:27.089]                               next
[13:38:27.089]                             if (!grepl(pattern, name)) 
[13:38:27.089]                               next
[13:38:27.089]                             invokeRestart(restart)
[13:38:27.089]                             muffled <- TRUE
[13:38:27.089]                             break
[13:38:27.089]                           }
[13:38:27.089]                         }
[13:38:27.089]                       }
[13:38:27.089]                       invisible(muffled)
[13:38:27.089]                     }
[13:38:27.089]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.089]                   }
[13:38:27.089]                 }
[13:38:27.089]                 else {
[13:38:27.089]                   if (TRUE) {
[13:38:27.089]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.089]                     {
[13:38:27.089]                       inherits <- base::inherits
[13:38:27.089]                       invokeRestart <- base::invokeRestart
[13:38:27.089]                       is.null <- base::is.null
[13:38:27.089]                       muffled <- FALSE
[13:38:27.089]                       if (inherits(cond, "message")) {
[13:38:27.089]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.089]                         if (muffled) 
[13:38:27.089]                           invokeRestart("muffleMessage")
[13:38:27.089]                       }
[13:38:27.089]                       else if (inherits(cond, "warning")) {
[13:38:27.089]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.089]                         if (muffled) 
[13:38:27.089]                           invokeRestart("muffleWarning")
[13:38:27.089]                       }
[13:38:27.089]                       else if (inherits(cond, "condition")) {
[13:38:27.089]                         if (!is.null(pattern)) {
[13:38:27.089]                           computeRestarts <- base::computeRestarts
[13:38:27.089]                           grepl <- base::grepl
[13:38:27.089]                           restarts <- computeRestarts(cond)
[13:38:27.089]                           for (restart in restarts) {
[13:38:27.089]                             name <- restart$name
[13:38:27.089]                             if (is.null(name)) 
[13:38:27.089]                               next
[13:38:27.089]                             if (!grepl(pattern, name)) 
[13:38:27.089]                               next
[13:38:27.089]                             invokeRestart(restart)
[13:38:27.089]                             muffled <- TRUE
[13:38:27.089]                             break
[13:38:27.089]                           }
[13:38:27.089]                         }
[13:38:27.089]                       }
[13:38:27.089]                       invisible(muffled)
[13:38:27.089]                     }
[13:38:27.089]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.089]                   }
[13:38:27.089]                 }
[13:38:27.089]             }
[13:38:27.089]         }))
[13:38:27.089]     }, error = function(ex) {
[13:38:27.089]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:27.089]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.089]                 ...future.rng), started = ...future.startTime, 
[13:38:27.089]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:27.089]             version = "1.8"), class = "FutureResult")
[13:38:27.089]     }, finally = {
[13:38:27.089]         if (!identical(...future.workdir, getwd())) 
[13:38:27.089]             setwd(...future.workdir)
[13:38:27.089]         {
[13:38:27.089]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:27.089]                 ...future.oldOptions$nwarnings <- NULL
[13:38:27.089]             }
[13:38:27.089]             base::options(...future.oldOptions)
[13:38:27.089]             if (.Platform$OS.type == "windows") {
[13:38:27.089]                 old_names <- names(...future.oldEnvVars)
[13:38:27.089]                 envs <- base::Sys.getenv()
[13:38:27.089]                 names <- names(envs)
[13:38:27.089]                 common <- intersect(names, old_names)
[13:38:27.089]                 added <- setdiff(names, old_names)
[13:38:27.089]                 removed <- setdiff(old_names, names)
[13:38:27.089]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:27.089]                   envs[common]]
[13:38:27.089]                 NAMES <- toupper(changed)
[13:38:27.089]                 args <- list()
[13:38:27.089]                 for (kk in seq_along(NAMES)) {
[13:38:27.089]                   name <- changed[[kk]]
[13:38:27.089]                   NAME <- NAMES[[kk]]
[13:38:27.089]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.089]                     next
[13:38:27.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.089]                 }
[13:38:27.089]                 NAMES <- toupper(added)
[13:38:27.089]                 for (kk in seq_along(NAMES)) {
[13:38:27.089]                   name <- added[[kk]]
[13:38:27.089]                   NAME <- NAMES[[kk]]
[13:38:27.089]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.089]                     next
[13:38:27.089]                   args[[name]] <- ""
[13:38:27.089]                 }
[13:38:27.089]                 NAMES <- toupper(removed)
[13:38:27.089]                 for (kk in seq_along(NAMES)) {
[13:38:27.089]                   name <- removed[[kk]]
[13:38:27.089]                   NAME <- NAMES[[kk]]
[13:38:27.089]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.089]                     next
[13:38:27.089]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.089]                 }
[13:38:27.089]                 if (length(args) > 0) 
[13:38:27.089]                   base::do.call(base::Sys.setenv, args = args)
[13:38:27.089]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:27.089]             }
[13:38:27.089]             else {
[13:38:27.089]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:27.089]             }
[13:38:27.089]             {
[13:38:27.089]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:27.089]                   0L) {
[13:38:27.089]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:27.089]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:27.089]                   base::options(opts)
[13:38:27.089]                 }
[13:38:27.089]                 {
[13:38:27.089]                   {
[13:38:27.089]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:27.089]                     NULL
[13:38:27.089]                   }
[13:38:27.089]                   options(future.plan = function (..., workers = 2L, 
[13:38:27.089]                     envir = parent.frame()) 
[13:38:27.089]                   strategy(..., workers = workers, envir = envir))
[13:38:27.089]                   if (is.na(NA_character_)) 
[13:38:27.089]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.089]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:27.089]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:27.089]                     .init = FALSE)
[13:38:27.089]                 }
[13:38:27.089]             }
[13:38:27.089]         }
[13:38:27.089]     })
[13:38:27.089]     if (TRUE) {
[13:38:27.089]         base::sink(type = "output", split = FALSE)
[13:38:27.089]         if (TRUE) {
[13:38:27.089]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:27.089]         }
[13:38:27.089]         else {
[13:38:27.089]             ...future.result["stdout"] <- base::list(NULL)
[13:38:27.089]         }
[13:38:27.089]         base::close(...future.stdout)
[13:38:27.089]         ...future.stdout <- NULL
[13:38:27.089]     }
[13:38:27.089]     ...future.result$conditions <- ...future.conditions
[13:38:27.089]     ...future.result$finished <- base::Sys.time()
[13:38:27.089]     ...future.result
[13:38:27.089] }
[13:38:27.144] MultisessionFuture started
[13:38:27.145] result() for ClusterFuture ...
[13:38:27.146] receiveMessageFromWorker() for ClusterFuture ...
[13:38:27.146] - Validating connection of MultisessionFuture
[13:38:27.179] - received message: FutureResult
[13:38:27.179] - Received FutureResult
[13:38:27.182] - Erased future from FutureRegistry
[13:38:27.182] result() for ClusterFuture ...
[13:38:27.182] - result already collected: FutureResult
[13:38:27.183] result() for ClusterFuture ... done
[13:38:27.183] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:27.183] result() for ClusterFuture ... done
[13:38:27.183] result() for ClusterFuture ...
[13:38:27.183] - result already collected: FutureResult
[13:38:27.183] result() for ClusterFuture ... done
[13:38:27.183] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:27.184] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[13:38:27.185] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:27.185] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:27.185] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:27.185] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:27.185] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:27.185] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:27.186] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:27.187] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:27.188] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:27.189] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:27.189] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:27.189] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:27.189] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[13:38:27.189] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:27.190] Setting plan('default')
[13:38:27.190] plan(): Setting new future strategy stack:
[13:38:27.190] List of future strategies:
[13:38:27.190] 1. sequential:
[13:38:27.190]    - args: function (..., envir = parent.frame())
[13:38:27.190]    - tweaked: FALSE
[13:38:27.190]    - call: NULL
[13:38:27.191] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:38:27.191] plan(): Setting new future strategy stack:
[13:38:27.191] List of future strategies:
[13:38:27.191] 1. sequential:
[13:38:27.191]    - args: function (..., envir = parent.frame())
[13:38:27.191]    - tweaked: FALSE
[13:38:27.191]    - call: NULL
[13:38:27.192] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[13:38:27.194] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:27.194] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:27.194] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:27.194] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:27.194] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:27.195] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:27.196] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:27.197] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:27.198] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[13:38:27.199] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:27.199] Setting plan('default')
[13:38:27.199] plan(): Setting new future strategy stack:
[13:38:27.199] List of future strategies:
[13:38:27.199] 1. sequential:
[13:38:27.199]    - args: function (..., envir = parent.frame())
[13:38:27.199]    - tweaked: FALSE
[13:38:27.199]    - call: NULL
[13:38:27.200] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:38:27.200] plan(): Setting new future strategy stack:
[13:38:27.200] List of future strategies:
[13:38:27.200] 1. sequential:
[13:38:27.200]    - args: function (..., envir = parent.frame())
[13:38:27.200]    - tweaked: FALSE
[13:38:27.200]    - call: NULL
[13:38:27.201] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[13:38:27.202] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:27.202] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:27.202] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:27.202] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:27.203] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_PLAN’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:27.204] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:27.205] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:27.206] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[13:38:27.207] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:27.207] Setting plan('default')
[13:38:27.207] plan(): Setting new future strategy stack:
[13:38:27.207] List of future strategies:
[13:38:27.207] 1. sequential:
[13:38:27.207]    - args: function (..., envir = parent.frame())
[13:38:27.207]    - tweaked: FALSE
[13:38:27.207]    - call: NULL
[13:38:27.208] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[13:38:27.208] plan(): Setting new future strategy stack:
[13:38:27.208] List of future strategies:
[13:38:27.208] 1. sequential:
[13:38:27.208]    - args: function (..., envir = parent.frame())
[13:38:27.208]    - tweaked: FALSE
[13:38:27.208]    - call: NULL
[13:38:27.209] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:38:27.210] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:27.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:27.210] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:27.210] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:27.210] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:27.211] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:27.212] R_FUTURE_PLAN=‘multisession’
[13:38:27.212] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:38:27.212] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:27.212] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:27.212] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:27.212] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:27.212] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:27.213] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:27.214] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:27.215] Option 'future.plan' = ‘multisession’
[13:38:27.215] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:27.215] Setting plan('default')
[13:38:27.215] plan(): Setting new future strategy stack:
[13:38:27.215] List of future strategies:
[13:38:27.215] 1. multisession:
[13:38:27.215]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.215]    - tweaked: FALSE
[13:38:27.215]    - call: plan("default", .init = FALSE)
[13:38:27.219] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:38:27.220] plan(): Setting new future strategy stack:
[13:38:27.220] List of future strategies:
[13:38:27.220] 1. multisession:
[13:38:27.220]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.220]    - tweaked: FALSE
[13:38:27.220]    - call: plan("default")
[13:38:27.223] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:27.223] multisession:
[13:38:27.223] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.223] - tweaked: FALSE
[13:38:27.223] - call: plan("default")
[13:38:27.226] getGlobalsAndPackages() ...
[13:38:27.226] Not searching for globals
[13:38:27.226] - globals: [0] <none>
[13:38:27.226] getGlobalsAndPackages() ... DONE
[13:38:27.227] [local output] makeClusterPSOCK() ...
[13:38:27.230] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:38:27.230] [local output] Base port: 11089
[13:38:27.230] [local output] Getting setup options for 2 cluster nodes ...
[13:38:27.230] [local output]  - Node 1 of 2 ...
[13:38:27.231] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:27.231] [local output] Rscript port: 11089

[13:38:27.232] [local output]  - Node 2 of 2 ...
[13:38:27.232] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:27.232] [local output] Rscript port: 11089

[13:38:27.233] [local output] Getting setup options for 2 cluster nodes ... done
[13:38:27.233] [local output]  - Parallel setup requested for some PSOCK nodes
[13:38:27.233] [local output] Setting up PSOCK nodes in parallel
[13:38:27.233] List of 36
[13:38:27.233]  $ worker          : chr "localhost"
[13:38:27.233]   ..- attr(*, "localhost")= logi TRUE
[13:38:27.233]  $ master          : chr "localhost"
[13:38:27.233]  $ port            : int 11089
[13:38:27.233]  $ connectTimeout  : num 120
[13:38:27.233]  $ timeout         : num 2592000
[13:38:27.233]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:38:27.233]  $ homogeneous     : logi TRUE
[13:38:27.233]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:38:27.233]  $ rscript_envs    : NULL
[13:38:27.233]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:27.233]  $ rscript_startup : NULL
[13:38:27.233]  $ rscript_sh      : chr "sh"
[13:38:27.233]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:27.233]  $ methods         : logi TRUE
[13:38:27.233]  $ socketOptions   : chr "no-delay"
[13:38:27.233]  $ useXDR          : logi FALSE
[13:38:27.233]  $ outfile         : chr "/dev/null"
[13:38:27.233]  $ renice          : int NA
[13:38:27.233]  $ rshcmd          : NULL
[13:38:27.233]  $ user            : chr(0) 
[13:38:27.233]  $ revtunnel       : logi FALSE
[13:38:27.233]  $ rshlogfile      : NULL
[13:38:27.233]  $ rshopts         : chr(0) 
[13:38:27.233]  $ rank            : int 1
[13:38:27.233]  $ manual          : logi FALSE
[13:38:27.233]  $ dryrun          : logi FALSE
[13:38:27.233]  $ quiet           : logi FALSE
[13:38:27.233]  $ setup_strategy  : chr "parallel"
[13:38:27.233]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:27.233]  $ pidfile         : chr "/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d94d220c1a.pid"
[13:38:27.233]  $ rshcmd_label    : NULL
[13:38:27.233]  $ rsh_call        : NULL
[13:38:27.233]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:27.233]  $ localMachine    : logi TRUE
[13:38:27.233]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:38:27.233]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:38:27.233]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:38:27.233]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:38:27.233]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:38:27.233]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:38:27.233]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:38:27.233]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:38:27.233]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:38:27.233]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:38:27.233]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:38:27.233]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:38:27.233]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:38:27.233]  $ arguments       :List of 28
[13:38:27.233]   ..$ worker          : chr "localhost"
[13:38:27.233]   ..$ master          : NULL
[13:38:27.233]   ..$ port            : int 11089
[13:38:27.233]   ..$ connectTimeout  : num 120
[13:38:27.233]   ..$ timeout         : num 2592000
[13:38:27.233]   ..$ rscript         : NULL
[13:38:27.233]   ..$ homogeneous     : NULL
[13:38:27.233]   ..$ rscript_args    : NULL
[13:38:27.233]   ..$ rscript_envs    : NULL
[13:38:27.233]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:27.233]   ..$ rscript_startup : NULL
[13:38:27.233]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:38:27.233]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:27.233]   ..$ methods         : logi TRUE
[13:38:27.233]   ..$ socketOptions   : chr "no-delay"
[13:38:27.233]   ..$ useXDR          : logi FALSE
[13:38:27.233]   ..$ outfile         : chr "/dev/null"
[13:38:27.233]   ..$ renice          : int NA
[13:38:27.233]   ..$ rshcmd          : NULL
[13:38:27.233]   ..$ user            : NULL
[13:38:27.233]   ..$ revtunnel       : logi NA
[13:38:27.233]   ..$ rshlogfile      : NULL
[13:38:27.233]   ..$ rshopts         : NULL
[13:38:27.233]   ..$ rank            : int 1
[13:38:27.233]   ..$ manual          : logi FALSE
[13:38:27.233]   ..$ dryrun          : logi FALSE
[13:38:27.233]   ..$ quiet           : logi FALSE
[13:38:27.233]   ..$ setup_strategy  : chr "parallel"
[13:38:27.233]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:38:27.250] [local output] System call to launch all workers:
[13:38:27.250] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d94d220c1a.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11089 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:38:27.250] [local output] Starting PSOCK main server
[13:38:27.251] [local output] Workers launched
[13:38:27.251] [local output] Waiting for workers to connect back
[13:38:27.252]  - [local output] 0 workers out of 2 ready
[13:38:27.488]  - [local output] 0 workers out of 2 ready
[13:38:27.489]  - [local output] 1 workers out of 2 ready
[13:38:27.498]  - [local output] 1 workers out of 2 ready
[13:38:27.498]  - [local output] 2 workers out of 2 ready
[13:38:27.498] [local output] Launching of workers completed
[13:38:27.498] [local output] Collecting session information from workers
[13:38:27.499] [local output]  - Worker #1 of 2
[13:38:27.500] [local output]  - Worker #2 of 2
[13:38:27.500] [local output] makeClusterPSOCK() ... done
[13:38:27.512] Packages needed by the future expression (n = 0): <none>
[13:38:27.512] Packages needed by future strategies (n = 0): <none>
[13:38:27.513] {
[13:38:27.513]     {
[13:38:27.513]         {
[13:38:27.513]             ...future.startTime <- base::Sys.time()
[13:38:27.513]             {
[13:38:27.513]                 {
[13:38:27.513]                   {
[13:38:27.513]                     {
[13:38:27.513]                       base::local({
[13:38:27.513]                         has_future <- base::requireNamespace("future", 
[13:38:27.513]                           quietly = TRUE)
[13:38:27.513]                         if (has_future) {
[13:38:27.513]                           ns <- base::getNamespace("future")
[13:38:27.513]                           version <- ns[[".package"]][["version"]]
[13:38:27.513]                           if (is.null(version)) 
[13:38:27.513]                             version <- utils::packageVersion("future")
[13:38:27.513]                         }
[13:38:27.513]                         else {
[13:38:27.513]                           version <- NULL
[13:38:27.513]                         }
[13:38:27.513]                         if (!has_future || version < "1.8.0") {
[13:38:27.513]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:27.513]                             "", base::R.version$version.string), 
[13:38:27.513]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:27.513]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:27.513]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:27.513]                               "release", "version")], collapse = " "), 
[13:38:27.513]                             hostname = base::Sys.info()[["nodename"]])
[13:38:27.513]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:27.513]                             info)
[13:38:27.513]                           info <- base::paste(info, collapse = "; ")
[13:38:27.513]                           if (!has_future) {
[13:38:27.513]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:27.513]                               info)
[13:38:27.513]                           }
[13:38:27.513]                           else {
[13:38:27.513]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:27.513]                               info, version)
[13:38:27.513]                           }
[13:38:27.513]                           base::stop(msg)
[13:38:27.513]                         }
[13:38:27.513]                       })
[13:38:27.513]                     }
[13:38:27.513]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:27.513]                     base::options(mc.cores = 1L)
[13:38:27.513]                   }
[13:38:27.513]                   ...future.strategy.old <- future::plan("list")
[13:38:27.513]                   options(future.plan = NULL)
[13:38:27.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:27.513]                 }
[13:38:27.513]                 ...future.workdir <- getwd()
[13:38:27.513]             }
[13:38:27.513]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:27.513]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:27.513]         }
[13:38:27.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:27.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:27.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:27.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:27.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:27.513]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:27.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:27.513]             base::names(...future.oldOptions))
[13:38:27.513]     }
[13:38:27.513]     if (FALSE) {
[13:38:27.513]     }
[13:38:27.513]     else {
[13:38:27.513]         if (TRUE) {
[13:38:27.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:27.513]                 open = "w")
[13:38:27.513]         }
[13:38:27.513]         else {
[13:38:27.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:27.513]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:27.513]         }
[13:38:27.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:27.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:27.513]             base::sink(type = "output", split = FALSE)
[13:38:27.513]             base::close(...future.stdout)
[13:38:27.513]         }, add = TRUE)
[13:38:27.513]     }
[13:38:27.513]     ...future.frame <- base::sys.nframe()
[13:38:27.513]     ...future.conditions <- base::list()
[13:38:27.513]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:27.513]     if (FALSE) {
[13:38:27.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:27.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:27.513]     }
[13:38:27.513]     ...future.result <- base::tryCatch({
[13:38:27.513]         base::withCallingHandlers({
[13:38:27.513]             ...future.value <- base::withVisible(base::local({
[13:38:27.513]                 ...future.makeSendCondition <- base::local({
[13:38:27.513]                   sendCondition <- NULL
[13:38:27.513]                   function(frame = 1L) {
[13:38:27.513]                     if (is.function(sendCondition)) 
[13:38:27.513]                       return(sendCondition)
[13:38:27.513]                     ns <- getNamespace("parallel")
[13:38:27.513]                     if (exists("sendData", mode = "function", 
[13:38:27.513]                       envir = ns)) {
[13:38:27.513]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:27.513]                         envir = ns)
[13:38:27.513]                       envir <- sys.frame(frame)
[13:38:27.513]                       master <- NULL
[13:38:27.513]                       while (!identical(envir, .GlobalEnv) && 
[13:38:27.513]                         !identical(envir, emptyenv())) {
[13:38:27.513]                         if (exists("master", mode = "list", envir = envir, 
[13:38:27.513]                           inherits = FALSE)) {
[13:38:27.513]                           master <- get("master", mode = "list", 
[13:38:27.513]                             envir = envir, inherits = FALSE)
[13:38:27.513]                           if (inherits(master, c("SOCKnode", 
[13:38:27.513]                             "SOCK0node"))) {
[13:38:27.513]                             sendCondition <<- function(cond) {
[13:38:27.513]                               data <- list(type = "VALUE", value = cond, 
[13:38:27.513]                                 success = TRUE)
[13:38:27.513]                               parallel_sendData(master, data)
[13:38:27.513]                             }
[13:38:27.513]                             return(sendCondition)
[13:38:27.513]                           }
[13:38:27.513]                         }
[13:38:27.513]                         frame <- frame + 1L
[13:38:27.513]                         envir <- sys.frame(frame)
[13:38:27.513]                       }
[13:38:27.513]                     }
[13:38:27.513]                     sendCondition <<- function(cond) NULL
[13:38:27.513]                   }
[13:38:27.513]                 })
[13:38:27.513]                 withCallingHandlers({
[13:38:27.513]                   NA
[13:38:27.513]                 }, immediateCondition = function(cond) {
[13:38:27.513]                   sendCondition <- ...future.makeSendCondition()
[13:38:27.513]                   sendCondition(cond)
[13:38:27.513]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.513]                   {
[13:38:27.513]                     inherits <- base::inherits
[13:38:27.513]                     invokeRestart <- base::invokeRestart
[13:38:27.513]                     is.null <- base::is.null
[13:38:27.513]                     muffled <- FALSE
[13:38:27.513]                     if (inherits(cond, "message")) {
[13:38:27.513]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:27.513]                       if (muffled) 
[13:38:27.513]                         invokeRestart("muffleMessage")
[13:38:27.513]                     }
[13:38:27.513]                     else if (inherits(cond, "warning")) {
[13:38:27.513]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:27.513]                       if (muffled) 
[13:38:27.513]                         invokeRestart("muffleWarning")
[13:38:27.513]                     }
[13:38:27.513]                     else if (inherits(cond, "condition")) {
[13:38:27.513]                       if (!is.null(pattern)) {
[13:38:27.513]                         computeRestarts <- base::computeRestarts
[13:38:27.513]                         grepl <- base::grepl
[13:38:27.513]                         restarts <- computeRestarts(cond)
[13:38:27.513]                         for (restart in restarts) {
[13:38:27.513]                           name <- restart$name
[13:38:27.513]                           if (is.null(name)) 
[13:38:27.513]                             next
[13:38:27.513]                           if (!grepl(pattern, name)) 
[13:38:27.513]                             next
[13:38:27.513]                           invokeRestart(restart)
[13:38:27.513]                           muffled <- TRUE
[13:38:27.513]                           break
[13:38:27.513]                         }
[13:38:27.513]                       }
[13:38:27.513]                     }
[13:38:27.513]                     invisible(muffled)
[13:38:27.513]                   }
[13:38:27.513]                   muffleCondition(cond)
[13:38:27.513]                 })
[13:38:27.513]             }))
[13:38:27.513]             future::FutureResult(value = ...future.value$value, 
[13:38:27.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.513]                   ...future.rng), globalenv = if (FALSE) 
[13:38:27.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:27.513]                     ...future.globalenv.names))
[13:38:27.513]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:27.513]         }, condition = base::local({
[13:38:27.513]             c <- base::c
[13:38:27.513]             inherits <- base::inherits
[13:38:27.513]             invokeRestart <- base::invokeRestart
[13:38:27.513]             length <- base::length
[13:38:27.513]             list <- base::list
[13:38:27.513]             seq.int <- base::seq.int
[13:38:27.513]             signalCondition <- base::signalCondition
[13:38:27.513]             sys.calls <- base::sys.calls
[13:38:27.513]             `[[` <- base::`[[`
[13:38:27.513]             `+` <- base::`+`
[13:38:27.513]             `<<-` <- base::`<<-`
[13:38:27.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:27.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:27.513]                   3L)]
[13:38:27.513]             }
[13:38:27.513]             function(cond) {
[13:38:27.513]                 is_error <- inherits(cond, "error")
[13:38:27.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:27.513]                   NULL)
[13:38:27.513]                 if (is_error) {
[13:38:27.513]                   sessionInformation <- function() {
[13:38:27.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:27.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:27.513]                       search = base::search(), system = base::Sys.info())
[13:38:27.513]                   }
[13:38:27.513]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:27.513]                     cond$call), session = sessionInformation(), 
[13:38:27.513]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:27.513]                   signalCondition(cond)
[13:38:27.513]                 }
[13:38:27.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:27.513]                 "immediateCondition"))) {
[13:38:27.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:27.513]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:27.513]                   if (TRUE && !signal) {
[13:38:27.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.513]                     {
[13:38:27.513]                       inherits <- base::inherits
[13:38:27.513]                       invokeRestart <- base::invokeRestart
[13:38:27.513]                       is.null <- base::is.null
[13:38:27.513]                       muffled <- FALSE
[13:38:27.513]                       if (inherits(cond, "message")) {
[13:38:27.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.513]                         if (muffled) 
[13:38:27.513]                           invokeRestart("muffleMessage")
[13:38:27.513]                       }
[13:38:27.513]                       else if (inherits(cond, "warning")) {
[13:38:27.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.513]                         if (muffled) 
[13:38:27.513]                           invokeRestart("muffleWarning")
[13:38:27.513]                       }
[13:38:27.513]                       else if (inherits(cond, "condition")) {
[13:38:27.513]                         if (!is.null(pattern)) {
[13:38:27.513]                           computeRestarts <- base::computeRestarts
[13:38:27.513]                           grepl <- base::grepl
[13:38:27.513]                           restarts <- computeRestarts(cond)
[13:38:27.513]                           for (restart in restarts) {
[13:38:27.513]                             name <- restart$name
[13:38:27.513]                             if (is.null(name)) 
[13:38:27.513]                               next
[13:38:27.513]                             if (!grepl(pattern, name)) 
[13:38:27.513]                               next
[13:38:27.513]                             invokeRestart(restart)
[13:38:27.513]                             muffled <- TRUE
[13:38:27.513]                             break
[13:38:27.513]                           }
[13:38:27.513]                         }
[13:38:27.513]                       }
[13:38:27.513]                       invisible(muffled)
[13:38:27.513]                     }
[13:38:27.513]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.513]                   }
[13:38:27.513]                 }
[13:38:27.513]                 else {
[13:38:27.513]                   if (TRUE) {
[13:38:27.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.513]                     {
[13:38:27.513]                       inherits <- base::inherits
[13:38:27.513]                       invokeRestart <- base::invokeRestart
[13:38:27.513]                       is.null <- base::is.null
[13:38:27.513]                       muffled <- FALSE
[13:38:27.513]                       if (inherits(cond, "message")) {
[13:38:27.513]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.513]                         if (muffled) 
[13:38:27.513]                           invokeRestart("muffleMessage")
[13:38:27.513]                       }
[13:38:27.513]                       else if (inherits(cond, "warning")) {
[13:38:27.513]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.513]                         if (muffled) 
[13:38:27.513]                           invokeRestart("muffleWarning")
[13:38:27.513]                       }
[13:38:27.513]                       else if (inherits(cond, "condition")) {
[13:38:27.513]                         if (!is.null(pattern)) {
[13:38:27.513]                           computeRestarts <- base::computeRestarts
[13:38:27.513]                           grepl <- base::grepl
[13:38:27.513]                           restarts <- computeRestarts(cond)
[13:38:27.513]                           for (restart in restarts) {
[13:38:27.513]                             name <- restart$name
[13:38:27.513]                             if (is.null(name)) 
[13:38:27.513]                               next
[13:38:27.513]                             if (!grepl(pattern, name)) 
[13:38:27.513]                               next
[13:38:27.513]                             invokeRestart(restart)
[13:38:27.513]                             muffled <- TRUE
[13:38:27.513]                             break
[13:38:27.513]                           }
[13:38:27.513]                         }
[13:38:27.513]                       }
[13:38:27.513]                       invisible(muffled)
[13:38:27.513]                     }
[13:38:27.513]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.513]                   }
[13:38:27.513]                 }
[13:38:27.513]             }
[13:38:27.513]         }))
[13:38:27.513]     }, error = function(ex) {
[13:38:27.513]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:27.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.513]                 ...future.rng), started = ...future.startTime, 
[13:38:27.513]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:27.513]             version = "1.8"), class = "FutureResult")
[13:38:27.513]     }, finally = {
[13:38:27.513]         if (!identical(...future.workdir, getwd())) 
[13:38:27.513]             setwd(...future.workdir)
[13:38:27.513]         {
[13:38:27.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:27.513]                 ...future.oldOptions$nwarnings <- NULL
[13:38:27.513]             }
[13:38:27.513]             base::options(...future.oldOptions)
[13:38:27.513]             if (.Platform$OS.type == "windows") {
[13:38:27.513]                 old_names <- names(...future.oldEnvVars)
[13:38:27.513]                 envs <- base::Sys.getenv()
[13:38:27.513]                 names <- names(envs)
[13:38:27.513]                 common <- intersect(names, old_names)
[13:38:27.513]                 added <- setdiff(names, old_names)
[13:38:27.513]                 removed <- setdiff(old_names, names)
[13:38:27.513]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:27.513]                   envs[common]]
[13:38:27.513]                 NAMES <- toupper(changed)
[13:38:27.513]                 args <- list()
[13:38:27.513]                 for (kk in seq_along(NAMES)) {
[13:38:27.513]                   name <- changed[[kk]]
[13:38:27.513]                   NAME <- NAMES[[kk]]
[13:38:27.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.513]                     next
[13:38:27.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.513]                 }
[13:38:27.513]                 NAMES <- toupper(added)
[13:38:27.513]                 for (kk in seq_along(NAMES)) {
[13:38:27.513]                   name <- added[[kk]]
[13:38:27.513]                   NAME <- NAMES[[kk]]
[13:38:27.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.513]                     next
[13:38:27.513]                   args[[name]] <- ""
[13:38:27.513]                 }
[13:38:27.513]                 NAMES <- toupper(removed)
[13:38:27.513]                 for (kk in seq_along(NAMES)) {
[13:38:27.513]                   name <- removed[[kk]]
[13:38:27.513]                   NAME <- NAMES[[kk]]
[13:38:27.513]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.513]                     next
[13:38:27.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.513]                 }
[13:38:27.513]                 if (length(args) > 0) 
[13:38:27.513]                   base::do.call(base::Sys.setenv, args = args)
[13:38:27.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:27.513]             }
[13:38:27.513]             else {
[13:38:27.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:27.513]             }
[13:38:27.513]             {
[13:38:27.513]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:27.513]                   0L) {
[13:38:27.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:27.513]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:27.513]                   base::options(opts)
[13:38:27.513]                 }
[13:38:27.513]                 {
[13:38:27.513]                   {
[13:38:27.513]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:27.513]                     NULL
[13:38:27.513]                   }
[13:38:27.513]                   options(future.plan = "multisession")
[13:38:27.513]                   if (is.na("multisession")) 
[13:38:27.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.513]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:38:27.513]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:27.513]                     .init = FALSE)
[13:38:27.513]                 }
[13:38:27.513]             }
[13:38:27.513]         }
[13:38:27.513]     })
[13:38:27.513]     if (TRUE) {
[13:38:27.513]         base::sink(type = "output", split = FALSE)
[13:38:27.513]         if (TRUE) {
[13:38:27.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:27.513]         }
[13:38:27.513]         else {
[13:38:27.513]             ...future.result["stdout"] <- base::list(NULL)
[13:38:27.513]         }
[13:38:27.513]         base::close(...future.stdout)
[13:38:27.513]         ...future.stdout <- NULL
[13:38:27.513]     }
[13:38:27.513]     ...future.result$conditions <- ...future.conditions
[13:38:27.513]     ...future.result$finished <- base::Sys.time()
[13:38:27.513]     ...future.result
[13:38:27.513] }
[13:38:27.573] MultisessionFuture started
[13:38:27.573] result() for ClusterFuture ...
[13:38:27.573] receiveMessageFromWorker() for ClusterFuture ...
[13:38:27.573] - Validating connection of MultisessionFuture
[13:38:27.613] - received message: FutureResult
[13:38:27.613] - Received FutureResult
[13:38:27.613] - Erased future from FutureRegistry
[13:38:27.613] result() for ClusterFuture ...
[13:38:27.614] - result already collected: FutureResult
[13:38:27.614] result() for ClusterFuture ... done
[13:38:27.614] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:27.614] result() for ClusterFuture ... done
[13:38:27.614] result() for ClusterFuture ...
[13:38:27.614] - result already collected: FutureResult
[13:38:27.614] result() for ClusterFuture ... done
[13:38:27.614] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:27.618] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[13:38:27.619] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:27.619] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:27.619] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:27.619] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:27.619] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:27.619] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:27.619] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:27.620] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:27.621] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:27.622] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:27.622] Option 'future.plan' = ‘multisession’
[13:38:27.622] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:27.622] Setting plan('default')
[13:38:27.623] plan(): Setting new future strategy stack:
[13:38:27.623] List of future strategies:
[13:38:27.623] 1. multisession:
[13:38:27.623]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.623]    - tweaked: FALSE
[13:38:27.623]    - call: plan("default", .init = FALSE)
[13:38:27.627] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:38:27.628] plan(): Setting new future strategy stack:
[13:38:27.628] List of future strategies:
[13:38:27.628] 1. multisession:
[13:38:27.628]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.628]    - tweaked: FALSE
[13:38:27.628]    - call: plan("default")
[13:38:27.629] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:27.629] multisession:
[13:38:27.629] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:27.629] - tweaked: FALSE
[13:38:27.629] - call: plan("default")
[13:38:27.633] getGlobalsAndPackages() ...
[13:38:27.633] Not searching for globals
[13:38:27.633] - globals: [0] <none>
[13:38:27.633] getGlobalsAndPackages() ... DONE
[13:38:27.634] [local output] makeClusterPSOCK() ...
[13:38:27.637] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:38:27.638] [local output] Base port: 11842
[13:38:27.638] [local output] Getting setup options for 2 cluster nodes ...
[13:38:27.638] [local output]  - Node 1 of 2 ...
[13:38:27.639] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:27.639] [local output] Rscript port: 11842

[13:38:27.640] [local output]  - Node 2 of 2 ...
[13:38:27.640] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:27.641] [local output] Rscript port: 11842

[13:38:27.641] [local output] Getting setup options for 2 cluster nodes ... done
[13:38:27.641] [local output]  - Parallel setup requested for some PSOCK nodes
[13:38:27.641] [local output] Setting up PSOCK nodes in parallel
[13:38:27.641] List of 36
[13:38:27.641]  $ worker          : chr "localhost"
[13:38:27.641]   ..- attr(*, "localhost")= logi TRUE
[13:38:27.641]  $ master          : chr "localhost"
[13:38:27.641]  $ port            : int 11842
[13:38:27.641]  $ connectTimeout  : num 120
[13:38:27.641]  $ timeout         : num 2592000
[13:38:27.641]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:38:27.641]  $ homogeneous     : logi TRUE
[13:38:27.641]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:38:27.641]  $ rscript_envs    : NULL
[13:38:27.641]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:27.641]  $ rscript_startup : NULL
[13:38:27.641]  $ rscript_sh      : chr "sh"
[13:38:27.641]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:27.641]  $ methods         : logi TRUE
[13:38:27.641]  $ socketOptions   : chr "no-delay"
[13:38:27.641]  $ useXDR          : logi FALSE
[13:38:27.641]  $ outfile         : chr "/dev/null"
[13:38:27.641]  $ renice          : int NA
[13:38:27.641]  $ rshcmd          : NULL
[13:38:27.641]  $ user            : chr(0) 
[13:38:27.641]  $ revtunnel       : logi FALSE
[13:38:27.641]  $ rshlogfile      : NULL
[13:38:27.641]  $ rshopts         : chr(0) 
[13:38:27.641]  $ rank            : int 1
[13:38:27.641]  $ manual          : logi FALSE
[13:38:27.641]  $ dryrun          : logi FALSE
[13:38:27.641]  $ quiet           : logi FALSE
[13:38:27.641]  $ setup_strategy  : chr "parallel"
[13:38:27.641]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:27.641]  $ pidfile         : chr "/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d945d12c4e.pid"
[13:38:27.641]  $ rshcmd_label    : NULL
[13:38:27.641]  $ rsh_call        : NULL
[13:38:27.641]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:27.641]  $ localMachine    : logi TRUE
[13:38:27.641]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:38:27.641]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:38:27.641]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:38:27.641]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:38:27.641]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:38:27.641]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:38:27.641]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:38:27.641]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:38:27.641]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:38:27.641]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:38:27.641]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:38:27.641]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:38:27.641]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:38:27.641]  $ arguments       :List of 28
[13:38:27.641]   ..$ worker          : chr "localhost"
[13:38:27.641]   ..$ master          : NULL
[13:38:27.641]   ..$ port            : int 11842
[13:38:27.641]   ..$ connectTimeout  : num 120
[13:38:27.641]   ..$ timeout         : num 2592000
[13:38:27.641]   ..$ rscript         : NULL
[13:38:27.641]   ..$ homogeneous     : NULL
[13:38:27.641]   ..$ rscript_args    : NULL
[13:38:27.641]   ..$ rscript_envs    : NULL
[13:38:27.641]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:27.641]   ..$ rscript_startup : NULL
[13:38:27.641]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:38:27.641]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:27.641]   ..$ methods         : logi TRUE
[13:38:27.641]   ..$ socketOptions   : chr "no-delay"
[13:38:27.641]   ..$ useXDR          : logi FALSE
[13:38:27.641]   ..$ outfile         : chr "/dev/null"
[13:38:27.641]   ..$ renice          : int NA
[13:38:27.641]   ..$ rshcmd          : NULL
[13:38:27.641]   ..$ user            : NULL
[13:38:27.641]   ..$ revtunnel       : logi NA
[13:38:27.641]   ..$ rshlogfile      : NULL
[13:38:27.641]   ..$ rshopts         : NULL
[13:38:27.641]   ..$ rank            : int 1
[13:38:27.641]   ..$ manual          : logi FALSE
[13:38:27.641]   ..$ dryrun          : logi FALSE
[13:38:27.641]   ..$ quiet           : logi FALSE
[13:38:27.641]   ..$ setup_strategy  : chr "parallel"
[13:38:27.641]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:38:27.660] [local output] System call to launch all workers:
[13:38:27.660] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP1w5c1/worker.rank=1.parallelly.parent=90585.161d945d12c4e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11842 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:38:27.660] [local output] Starting PSOCK main server
[13:38:27.662] [local output] Workers launched
[13:38:27.662] [local output] Waiting for workers to connect back
[13:38:27.662]  - [local output] 0 workers out of 2 ready
[13:38:27.904]  - [local output] 0 workers out of 2 ready
[13:38:27.904]  - [local output] 1 workers out of 2 ready
[13:38:27.905]  - [local output] 1 workers out of 2 ready
[13:38:27.906]  - [local output] 2 workers out of 2 ready
[13:38:27.906] [local output] Launching of workers completed
[13:38:27.906] [local output] Collecting session information from workers
[13:38:27.906] [local output]  - Worker #1 of 2
[13:38:27.907] [local output]  - Worker #2 of 2
[13:38:27.907] [local output] makeClusterPSOCK() ... done
[13:38:27.918] Packages needed by the future expression (n = 0): <none>
[13:38:27.918] Packages needed by future strategies (n = 0): <none>
[13:38:27.918] {
[13:38:27.918]     {
[13:38:27.918]         {
[13:38:27.918]             ...future.startTime <- base::Sys.time()
[13:38:27.918]             {
[13:38:27.918]                 {
[13:38:27.918]                   {
[13:38:27.918]                     {
[13:38:27.918]                       base::local({
[13:38:27.918]                         has_future <- base::requireNamespace("future", 
[13:38:27.918]                           quietly = TRUE)
[13:38:27.918]                         if (has_future) {
[13:38:27.918]                           ns <- base::getNamespace("future")
[13:38:27.918]                           version <- ns[[".package"]][["version"]]
[13:38:27.918]                           if (is.null(version)) 
[13:38:27.918]                             version <- utils::packageVersion("future")
[13:38:27.918]                         }
[13:38:27.918]                         else {
[13:38:27.918]                           version <- NULL
[13:38:27.918]                         }
[13:38:27.918]                         if (!has_future || version < "1.8.0") {
[13:38:27.918]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:27.918]                             "", base::R.version$version.string), 
[13:38:27.918]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:27.918]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:27.918]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:27.918]                               "release", "version")], collapse = " "), 
[13:38:27.918]                             hostname = base::Sys.info()[["nodename"]])
[13:38:27.918]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:27.918]                             info)
[13:38:27.918]                           info <- base::paste(info, collapse = "; ")
[13:38:27.918]                           if (!has_future) {
[13:38:27.918]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:27.918]                               info)
[13:38:27.918]                           }
[13:38:27.918]                           else {
[13:38:27.918]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:27.918]                               info, version)
[13:38:27.918]                           }
[13:38:27.918]                           base::stop(msg)
[13:38:27.918]                         }
[13:38:27.918]                       })
[13:38:27.918]                     }
[13:38:27.918]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:27.918]                     base::options(mc.cores = 1L)
[13:38:27.918]                   }
[13:38:27.918]                   ...future.strategy.old <- future::plan("list")
[13:38:27.918]                   options(future.plan = NULL)
[13:38:27.918]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.918]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:27.918]                 }
[13:38:27.918]                 ...future.workdir <- getwd()
[13:38:27.918]             }
[13:38:27.918]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:27.918]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:27.918]         }
[13:38:27.918]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:27.918]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:27.918]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:27.918]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:27.918]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:27.918]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:27.918]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:27.918]             base::names(...future.oldOptions))
[13:38:27.918]     }
[13:38:27.918]     if (FALSE) {
[13:38:27.918]     }
[13:38:27.918]     else {
[13:38:27.918]         if (TRUE) {
[13:38:27.918]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:27.918]                 open = "w")
[13:38:27.918]         }
[13:38:27.918]         else {
[13:38:27.918]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:27.918]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:27.918]         }
[13:38:27.918]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:27.918]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:27.918]             base::sink(type = "output", split = FALSE)
[13:38:27.918]             base::close(...future.stdout)
[13:38:27.918]         }, add = TRUE)
[13:38:27.918]     }
[13:38:27.918]     ...future.frame <- base::sys.nframe()
[13:38:27.918]     ...future.conditions <- base::list()
[13:38:27.918]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:27.918]     if (FALSE) {
[13:38:27.918]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:27.918]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:27.918]     }
[13:38:27.918]     ...future.result <- base::tryCatch({
[13:38:27.918]         base::withCallingHandlers({
[13:38:27.918]             ...future.value <- base::withVisible(base::local({
[13:38:27.918]                 ...future.makeSendCondition <- base::local({
[13:38:27.918]                   sendCondition <- NULL
[13:38:27.918]                   function(frame = 1L) {
[13:38:27.918]                     if (is.function(sendCondition)) 
[13:38:27.918]                       return(sendCondition)
[13:38:27.918]                     ns <- getNamespace("parallel")
[13:38:27.918]                     if (exists("sendData", mode = "function", 
[13:38:27.918]                       envir = ns)) {
[13:38:27.918]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:27.918]                         envir = ns)
[13:38:27.918]                       envir <- sys.frame(frame)
[13:38:27.918]                       master <- NULL
[13:38:27.918]                       while (!identical(envir, .GlobalEnv) && 
[13:38:27.918]                         !identical(envir, emptyenv())) {
[13:38:27.918]                         if (exists("master", mode = "list", envir = envir, 
[13:38:27.918]                           inherits = FALSE)) {
[13:38:27.918]                           master <- get("master", mode = "list", 
[13:38:27.918]                             envir = envir, inherits = FALSE)
[13:38:27.918]                           if (inherits(master, c("SOCKnode", 
[13:38:27.918]                             "SOCK0node"))) {
[13:38:27.918]                             sendCondition <<- function(cond) {
[13:38:27.918]                               data <- list(type = "VALUE", value = cond, 
[13:38:27.918]                                 success = TRUE)
[13:38:27.918]                               parallel_sendData(master, data)
[13:38:27.918]                             }
[13:38:27.918]                             return(sendCondition)
[13:38:27.918]                           }
[13:38:27.918]                         }
[13:38:27.918]                         frame <- frame + 1L
[13:38:27.918]                         envir <- sys.frame(frame)
[13:38:27.918]                       }
[13:38:27.918]                     }
[13:38:27.918]                     sendCondition <<- function(cond) NULL
[13:38:27.918]                   }
[13:38:27.918]                 })
[13:38:27.918]                 withCallingHandlers({
[13:38:27.918]                   NA
[13:38:27.918]                 }, immediateCondition = function(cond) {
[13:38:27.918]                   sendCondition <- ...future.makeSendCondition()
[13:38:27.918]                   sendCondition(cond)
[13:38:27.918]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.918]                   {
[13:38:27.918]                     inherits <- base::inherits
[13:38:27.918]                     invokeRestart <- base::invokeRestart
[13:38:27.918]                     is.null <- base::is.null
[13:38:27.918]                     muffled <- FALSE
[13:38:27.918]                     if (inherits(cond, "message")) {
[13:38:27.918]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:27.918]                       if (muffled) 
[13:38:27.918]                         invokeRestart("muffleMessage")
[13:38:27.918]                     }
[13:38:27.918]                     else if (inherits(cond, "warning")) {
[13:38:27.918]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:27.918]                       if (muffled) 
[13:38:27.918]                         invokeRestart("muffleWarning")
[13:38:27.918]                     }
[13:38:27.918]                     else if (inherits(cond, "condition")) {
[13:38:27.918]                       if (!is.null(pattern)) {
[13:38:27.918]                         computeRestarts <- base::computeRestarts
[13:38:27.918]                         grepl <- base::grepl
[13:38:27.918]                         restarts <- computeRestarts(cond)
[13:38:27.918]                         for (restart in restarts) {
[13:38:27.918]                           name <- restart$name
[13:38:27.918]                           if (is.null(name)) 
[13:38:27.918]                             next
[13:38:27.918]                           if (!grepl(pattern, name)) 
[13:38:27.918]                             next
[13:38:27.918]                           invokeRestart(restart)
[13:38:27.918]                           muffled <- TRUE
[13:38:27.918]                           break
[13:38:27.918]                         }
[13:38:27.918]                       }
[13:38:27.918]                     }
[13:38:27.918]                     invisible(muffled)
[13:38:27.918]                   }
[13:38:27.918]                   muffleCondition(cond)
[13:38:27.918]                 })
[13:38:27.918]             }))
[13:38:27.918]             future::FutureResult(value = ...future.value$value, 
[13:38:27.918]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.918]                   ...future.rng), globalenv = if (FALSE) 
[13:38:27.918]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:27.918]                     ...future.globalenv.names))
[13:38:27.918]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:27.918]         }, condition = base::local({
[13:38:27.918]             c <- base::c
[13:38:27.918]             inherits <- base::inherits
[13:38:27.918]             invokeRestart <- base::invokeRestart
[13:38:27.918]             length <- base::length
[13:38:27.918]             list <- base::list
[13:38:27.918]             seq.int <- base::seq.int
[13:38:27.918]             signalCondition <- base::signalCondition
[13:38:27.918]             sys.calls <- base::sys.calls
[13:38:27.918]             `[[` <- base::`[[`
[13:38:27.918]             `+` <- base::`+`
[13:38:27.918]             `<<-` <- base::`<<-`
[13:38:27.918]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:27.918]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:27.918]                   3L)]
[13:38:27.918]             }
[13:38:27.918]             function(cond) {
[13:38:27.918]                 is_error <- inherits(cond, "error")
[13:38:27.918]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:27.918]                   NULL)
[13:38:27.918]                 if (is_error) {
[13:38:27.918]                   sessionInformation <- function() {
[13:38:27.918]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:27.918]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:27.918]                       search = base::search(), system = base::Sys.info())
[13:38:27.918]                   }
[13:38:27.918]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.918]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:27.918]                     cond$call), session = sessionInformation(), 
[13:38:27.918]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:27.918]                   signalCondition(cond)
[13:38:27.918]                 }
[13:38:27.918]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:27.918]                 "immediateCondition"))) {
[13:38:27.918]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:27.918]                   ...future.conditions[[length(...future.conditions) + 
[13:38:27.918]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:27.918]                   if (TRUE && !signal) {
[13:38:27.918]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.918]                     {
[13:38:27.918]                       inherits <- base::inherits
[13:38:27.918]                       invokeRestart <- base::invokeRestart
[13:38:27.918]                       is.null <- base::is.null
[13:38:27.918]                       muffled <- FALSE
[13:38:27.918]                       if (inherits(cond, "message")) {
[13:38:27.918]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.918]                         if (muffled) 
[13:38:27.918]                           invokeRestart("muffleMessage")
[13:38:27.918]                       }
[13:38:27.918]                       else if (inherits(cond, "warning")) {
[13:38:27.918]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.918]                         if (muffled) 
[13:38:27.918]                           invokeRestart("muffleWarning")
[13:38:27.918]                       }
[13:38:27.918]                       else if (inherits(cond, "condition")) {
[13:38:27.918]                         if (!is.null(pattern)) {
[13:38:27.918]                           computeRestarts <- base::computeRestarts
[13:38:27.918]                           grepl <- base::grepl
[13:38:27.918]                           restarts <- computeRestarts(cond)
[13:38:27.918]                           for (restart in restarts) {
[13:38:27.918]                             name <- restart$name
[13:38:27.918]                             if (is.null(name)) 
[13:38:27.918]                               next
[13:38:27.918]                             if (!grepl(pattern, name)) 
[13:38:27.918]                               next
[13:38:27.918]                             invokeRestart(restart)
[13:38:27.918]                             muffled <- TRUE
[13:38:27.918]                             break
[13:38:27.918]                           }
[13:38:27.918]                         }
[13:38:27.918]                       }
[13:38:27.918]                       invisible(muffled)
[13:38:27.918]                     }
[13:38:27.918]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.918]                   }
[13:38:27.918]                 }
[13:38:27.918]                 else {
[13:38:27.918]                   if (TRUE) {
[13:38:27.918]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:27.918]                     {
[13:38:27.918]                       inherits <- base::inherits
[13:38:27.918]                       invokeRestart <- base::invokeRestart
[13:38:27.918]                       is.null <- base::is.null
[13:38:27.918]                       muffled <- FALSE
[13:38:27.918]                       if (inherits(cond, "message")) {
[13:38:27.918]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:27.918]                         if (muffled) 
[13:38:27.918]                           invokeRestart("muffleMessage")
[13:38:27.918]                       }
[13:38:27.918]                       else if (inherits(cond, "warning")) {
[13:38:27.918]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:27.918]                         if (muffled) 
[13:38:27.918]                           invokeRestart("muffleWarning")
[13:38:27.918]                       }
[13:38:27.918]                       else if (inherits(cond, "condition")) {
[13:38:27.918]                         if (!is.null(pattern)) {
[13:38:27.918]                           computeRestarts <- base::computeRestarts
[13:38:27.918]                           grepl <- base::grepl
[13:38:27.918]                           restarts <- computeRestarts(cond)
[13:38:27.918]                           for (restart in restarts) {
[13:38:27.918]                             name <- restart$name
[13:38:27.918]                             if (is.null(name)) 
[13:38:27.918]                               next
[13:38:27.918]                             if (!grepl(pattern, name)) 
[13:38:27.918]                               next
[13:38:27.918]                             invokeRestart(restart)
[13:38:27.918]                             muffled <- TRUE
[13:38:27.918]                             break
[13:38:27.918]                           }
[13:38:27.918]                         }
[13:38:27.918]                       }
[13:38:27.918]                       invisible(muffled)
[13:38:27.918]                     }
[13:38:27.918]                     muffleCondition(cond, pattern = "^muffle")
[13:38:27.918]                   }
[13:38:27.918]                 }
[13:38:27.918]             }
[13:38:27.918]         }))
[13:38:27.918]     }, error = function(ex) {
[13:38:27.918]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:27.918]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:27.918]                 ...future.rng), started = ...future.startTime, 
[13:38:27.918]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:27.918]             version = "1.8"), class = "FutureResult")
[13:38:27.918]     }, finally = {
[13:38:27.918]         if (!identical(...future.workdir, getwd())) 
[13:38:27.918]             setwd(...future.workdir)
[13:38:27.918]         {
[13:38:27.918]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:27.918]                 ...future.oldOptions$nwarnings <- NULL
[13:38:27.918]             }
[13:38:27.918]             base::options(...future.oldOptions)
[13:38:27.918]             if (.Platform$OS.type == "windows") {
[13:38:27.918]                 old_names <- names(...future.oldEnvVars)
[13:38:27.918]                 envs <- base::Sys.getenv()
[13:38:27.918]                 names <- names(envs)
[13:38:27.918]                 common <- intersect(names, old_names)
[13:38:27.918]                 added <- setdiff(names, old_names)
[13:38:27.918]                 removed <- setdiff(old_names, names)
[13:38:27.918]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:27.918]                   envs[common]]
[13:38:27.918]                 NAMES <- toupper(changed)
[13:38:27.918]                 args <- list()
[13:38:27.918]                 for (kk in seq_along(NAMES)) {
[13:38:27.918]                   name <- changed[[kk]]
[13:38:27.918]                   NAME <- NAMES[[kk]]
[13:38:27.918]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.918]                     next
[13:38:27.918]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.918]                 }
[13:38:27.918]                 NAMES <- toupper(added)
[13:38:27.918]                 for (kk in seq_along(NAMES)) {
[13:38:27.918]                   name <- added[[kk]]
[13:38:27.918]                   NAME <- NAMES[[kk]]
[13:38:27.918]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.918]                     next
[13:38:27.918]                   args[[name]] <- ""
[13:38:27.918]                 }
[13:38:27.918]                 NAMES <- toupper(removed)
[13:38:27.918]                 for (kk in seq_along(NAMES)) {
[13:38:27.918]                   name <- removed[[kk]]
[13:38:27.918]                   NAME <- NAMES[[kk]]
[13:38:27.918]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:27.918]                     next
[13:38:27.918]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:27.918]                 }
[13:38:27.918]                 if (length(args) > 0) 
[13:38:27.918]                   base::do.call(base::Sys.setenv, args = args)
[13:38:27.918]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:27.918]             }
[13:38:27.918]             else {
[13:38:27.918]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:27.918]             }
[13:38:27.918]             {
[13:38:27.918]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:27.918]                   0L) {
[13:38:27.918]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:27.918]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:27.918]                   base::options(opts)
[13:38:27.918]                 }
[13:38:27.918]                 {
[13:38:27.918]                   {
[13:38:27.918]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:27.918]                     NULL
[13:38:27.918]                   }
[13:38:27.918]                   options(future.plan = "multisession")
[13:38:27.918]                   if (is.na("")) 
[13:38:27.918]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:27.918]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:38:27.918]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:27.918]                     .init = FALSE)
[13:38:27.918]                 }
[13:38:27.918]             }
[13:38:27.918]         }
[13:38:27.918]     })
[13:38:27.918]     if (TRUE) {
[13:38:27.918]         base::sink(type = "output", split = FALSE)
[13:38:27.918]         if (TRUE) {
[13:38:27.918]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:27.918]         }
[13:38:27.918]         else {
[13:38:27.918]             ...future.result["stdout"] <- base::list(NULL)
[13:38:27.918]         }
[13:38:27.918]         base::close(...future.stdout)
[13:38:27.918]         ...future.stdout <- NULL
[13:38:27.918]     }
[13:38:27.918]     ...future.result$conditions <- ...future.conditions
[13:38:27.918]     ...future.result$finished <- base::Sys.time()
[13:38:27.918]     ...future.result
[13:38:27.918] }
[13:38:27.971] MultisessionFuture started
[13:38:27.971] result() for ClusterFuture ...
[13:38:27.971] receiveMessageFromWorker() for ClusterFuture ...
[13:38:27.971] - Validating connection of MultisessionFuture
[13:38:28.003] - received message: FutureResult
[13:38:28.004] - Received FutureResult
[13:38:28.004] - Erased future from FutureRegistry
[13:38:28.004] result() for ClusterFuture ...
[13:38:28.004] - result already collected: FutureResult
[13:38:28.004] result() for ClusterFuture ... done
[13:38:28.004] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:28.004] result() for ClusterFuture ... done
[13:38:28.004] result() for ClusterFuture ...
[13:38:28.005] - result already collected: FutureResult
[13:38:28.005] result() for ClusterFuture ... done
[13:38:28.005] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:28.009] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[13:38:28.010] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:28.010] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:28.010] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:28.011] R_FUTURE_PLAN=‘multisession’
[13:38:28.011] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[13:38:28.011] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:28.011] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:28.012] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:28.013] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:28.013] Option 'future.plan' = ‘multisession’
[13:38:28.014] R command-line argument: -p 1
[13:38:28.014]  => 'future.plan' already set.
[13:38:28.014] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:28.014] Setting plan('default')
[13:38:28.014] plan(): Setting new future strategy stack:
[13:38:28.014] List of future strategies:
[13:38:28.014] 1. multisession:
[13:38:28.014]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.014]    - tweaked: FALSE
[13:38:28.014]    - call: plan("default", .init = FALSE)
[13:38:28.019] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:38:28.020] plan(): Setting new future strategy stack:
[13:38:28.020] List of future strategies:
[13:38:28.020] 1. multisession:
[13:38:28.020]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.020]    - tweaked: FALSE
[13:38:28.020]    - call: plan("default")
[13:38:28.020] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:28.021] multisession:
[13:38:28.021] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.021] - tweaked: FALSE
[13:38:28.021] - call: plan("default")
[13:38:28.026] getGlobalsAndPackages() ...
[13:38:28.026] Not searching for globals
[13:38:28.026] - globals: [0] <none>
[13:38:28.026] getGlobalsAndPackages() ... DONE
[13:38:28.027] Packages needed by the future expression (n = 0): <none>
[13:38:28.027] Packages needed by future strategies (n = 0): <none>
[13:38:28.028] {
[13:38:28.028]     {
[13:38:28.028]         {
[13:38:28.028]             ...future.startTime <- base::Sys.time()
[13:38:28.028]             {
[13:38:28.028]                 {
[13:38:28.028]                   {
[13:38:28.028]                     base::local({
[13:38:28.028]                       has_future <- base::requireNamespace("future", 
[13:38:28.028]                         quietly = TRUE)
[13:38:28.028]                       if (has_future) {
[13:38:28.028]                         ns <- base::getNamespace("future")
[13:38:28.028]                         version <- ns[[".package"]][["version"]]
[13:38:28.028]                         if (is.null(version)) 
[13:38:28.028]                           version <- utils::packageVersion("future")
[13:38:28.028]                       }
[13:38:28.028]                       else {
[13:38:28.028]                         version <- NULL
[13:38:28.028]                       }
[13:38:28.028]                       if (!has_future || version < "1.8.0") {
[13:38:28.028]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.028]                           "", base::R.version$version.string), 
[13:38:28.028]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.028]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.028]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.028]                             "release", "version")], collapse = " "), 
[13:38:28.028]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.028]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.028]                           info)
[13:38:28.028]                         info <- base::paste(info, collapse = "; ")
[13:38:28.028]                         if (!has_future) {
[13:38:28.028]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.028]                             info)
[13:38:28.028]                         }
[13:38:28.028]                         else {
[13:38:28.028]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.028]                             info, version)
[13:38:28.028]                         }
[13:38:28.028]                         base::stop(msg)
[13:38:28.028]                       }
[13:38:28.028]                     })
[13:38:28.028]                   }
[13:38:28.028]                   ...future.strategy.old <- future::plan("list")
[13:38:28.028]                   options(future.plan = NULL)
[13:38:28.028]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.028]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.028]                 }
[13:38:28.028]                 ...future.workdir <- getwd()
[13:38:28.028]             }
[13:38:28.028]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.028]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.028]         }
[13:38:28.028]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.028]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.028]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.028]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.028]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.028]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.028]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.028]             base::names(...future.oldOptions))
[13:38:28.028]     }
[13:38:28.028]     if (FALSE) {
[13:38:28.028]     }
[13:38:28.028]     else {
[13:38:28.028]         if (TRUE) {
[13:38:28.028]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.028]                 open = "w")
[13:38:28.028]         }
[13:38:28.028]         else {
[13:38:28.028]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.028]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.028]         }
[13:38:28.028]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.028]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.028]             base::sink(type = "output", split = FALSE)
[13:38:28.028]             base::close(...future.stdout)
[13:38:28.028]         }, add = TRUE)
[13:38:28.028]     }
[13:38:28.028]     ...future.frame <- base::sys.nframe()
[13:38:28.028]     ...future.conditions <- base::list()
[13:38:28.028]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.028]     if (FALSE) {
[13:38:28.028]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.028]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.028]     }
[13:38:28.028]     ...future.result <- base::tryCatch({
[13:38:28.028]         base::withCallingHandlers({
[13:38:28.028]             ...future.value <- base::withVisible(base::local(NA))
[13:38:28.028]             future::FutureResult(value = ...future.value$value, 
[13:38:28.028]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.028]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.028]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.028]                     ...future.globalenv.names))
[13:38:28.028]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.028]         }, condition = base::local({
[13:38:28.028]             c <- base::c
[13:38:28.028]             inherits <- base::inherits
[13:38:28.028]             invokeRestart <- base::invokeRestart
[13:38:28.028]             length <- base::length
[13:38:28.028]             list <- base::list
[13:38:28.028]             seq.int <- base::seq.int
[13:38:28.028]             signalCondition <- base::signalCondition
[13:38:28.028]             sys.calls <- base::sys.calls
[13:38:28.028]             `[[` <- base::`[[`
[13:38:28.028]             `+` <- base::`+`
[13:38:28.028]             `<<-` <- base::`<<-`
[13:38:28.028]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.028]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.028]                   3L)]
[13:38:28.028]             }
[13:38:28.028]             function(cond) {
[13:38:28.028]                 is_error <- inherits(cond, "error")
[13:38:28.028]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.028]                   NULL)
[13:38:28.028]                 if (is_error) {
[13:38:28.028]                   sessionInformation <- function() {
[13:38:28.028]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.028]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.028]                       search = base::search(), system = base::Sys.info())
[13:38:28.028]                   }
[13:38:28.028]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.028]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.028]                     cond$call), session = sessionInformation(), 
[13:38:28.028]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.028]                   signalCondition(cond)
[13:38:28.028]                 }
[13:38:28.028]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.028]                 "immediateCondition"))) {
[13:38:28.028]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.028]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.028]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.028]                   if (TRUE && !signal) {
[13:38:28.028]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.028]                     {
[13:38:28.028]                       inherits <- base::inherits
[13:38:28.028]                       invokeRestart <- base::invokeRestart
[13:38:28.028]                       is.null <- base::is.null
[13:38:28.028]                       muffled <- FALSE
[13:38:28.028]                       if (inherits(cond, "message")) {
[13:38:28.028]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.028]                         if (muffled) 
[13:38:28.028]                           invokeRestart("muffleMessage")
[13:38:28.028]                       }
[13:38:28.028]                       else if (inherits(cond, "warning")) {
[13:38:28.028]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.028]                         if (muffled) 
[13:38:28.028]                           invokeRestart("muffleWarning")
[13:38:28.028]                       }
[13:38:28.028]                       else if (inherits(cond, "condition")) {
[13:38:28.028]                         if (!is.null(pattern)) {
[13:38:28.028]                           computeRestarts <- base::computeRestarts
[13:38:28.028]                           grepl <- base::grepl
[13:38:28.028]                           restarts <- computeRestarts(cond)
[13:38:28.028]                           for (restart in restarts) {
[13:38:28.028]                             name <- restart$name
[13:38:28.028]                             if (is.null(name)) 
[13:38:28.028]                               next
[13:38:28.028]                             if (!grepl(pattern, name)) 
[13:38:28.028]                               next
[13:38:28.028]                             invokeRestart(restart)
[13:38:28.028]                             muffled <- TRUE
[13:38:28.028]                             break
[13:38:28.028]                           }
[13:38:28.028]                         }
[13:38:28.028]                       }
[13:38:28.028]                       invisible(muffled)
[13:38:28.028]                     }
[13:38:28.028]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.028]                   }
[13:38:28.028]                 }
[13:38:28.028]                 else {
[13:38:28.028]                   if (TRUE) {
[13:38:28.028]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.028]                     {
[13:38:28.028]                       inherits <- base::inherits
[13:38:28.028]                       invokeRestart <- base::invokeRestart
[13:38:28.028]                       is.null <- base::is.null
[13:38:28.028]                       muffled <- FALSE
[13:38:28.028]                       if (inherits(cond, "message")) {
[13:38:28.028]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.028]                         if (muffled) 
[13:38:28.028]                           invokeRestart("muffleMessage")
[13:38:28.028]                       }
[13:38:28.028]                       else if (inherits(cond, "warning")) {
[13:38:28.028]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.028]                         if (muffled) 
[13:38:28.028]                           invokeRestart("muffleWarning")
[13:38:28.028]                       }
[13:38:28.028]                       else if (inherits(cond, "condition")) {
[13:38:28.028]                         if (!is.null(pattern)) {
[13:38:28.028]                           computeRestarts <- base::computeRestarts
[13:38:28.028]                           grepl <- base::grepl
[13:38:28.028]                           restarts <- computeRestarts(cond)
[13:38:28.028]                           for (restart in restarts) {
[13:38:28.028]                             name <- restart$name
[13:38:28.028]                             if (is.null(name)) 
[13:38:28.028]                               next
[13:38:28.028]                             if (!grepl(pattern, name)) 
[13:38:28.028]                               next
[13:38:28.028]                             invokeRestart(restart)
[13:38:28.028]                             muffled <- TRUE
[13:38:28.028]                             break
[13:38:28.028]                           }
[13:38:28.028]                         }
[13:38:28.028]                       }
[13:38:28.028]                       invisible(muffled)
[13:38:28.028]                     }
[13:38:28.028]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.028]                   }
[13:38:28.028]                 }
[13:38:28.028]             }
[13:38:28.028]         }))
[13:38:28.028]     }, error = function(ex) {
[13:38:28.028]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.028]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.028]                 ...future.rng), started = ...future.startTime, 
[13:38:28.028]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.028]             version = "1.8"), class = "FutureResult")
[13:38:28.028]     }, finally = {
[13:38:28.028]         if (!identical(...future.workdir, getwd())) 
[13:38:28.028]             setwd(...future.workdir)
[13:38:28.028]         {
[13:38:28.028]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.028]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.028]             }
[13:38:28.028]             base::options(...future.oldOptions)
[13:38:28.028]             if (.Platform$OS.type == "windows") {
[13:38:28.028]                 old_names <- names(...future.oldEnvVars)
[13:38:28.028]                 envs <- base::Sys.getenv()
[13:38:28.028]                 names <- names(envs)
[13:38:28.028]                 common <- intersect(names, old_names)
[13:38:28.028]                 added <- setdiff(names, old_names)
[13:38:28.028]                 removed <- setdiff(old_names, names)
[13:38:28.028]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.028]                   envs[common]]
[13:38:28.028]                 NAMES <- toupper(changed)
[13:38:28.028]                 args <- list()
[13:38:28.028]                 for (kk in seq_along(NAMES)) {
[13:38:28.028]                   name <- changed[[kk]]
[13:38:28.028]                   NAME <- NAMES[[kk]]
[13:38:28.028]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.028]                     next
[13:38:28.028]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.028]                 }
[13:38:28.028]                 NAMES <- toupper(added)
[13:38:28.028]                 for (kk in seq_along(NAMES)) {
[13:38:28.028]                   name <- added[[kk]]
[13:38:28.028]                   NAME <- NAMES[[kk]]
[13:38:28.028]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.028]                     next
[13:38:28.028]                   args[[name]] <- ""
[13:38:28.028]                 }
[13:38:28.028]                 NAMES <- toupper(removed)
[13:38:28.028]                 for (kk in seq_along(NAMES)) {
[13:38:28.028]                   name <- removed[[kk]]
[13:38:28.028]                   NAME <- NAMES[[kk]]
[13:38:28.028]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.028]                     next
[13:38:28.028]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.028]                 }
[13:38:28.028]                 if (length(args) > 0) 
[13:38:28.028]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.028]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.028]             }
[13:38:28.028]             else {
[13:38:28.028]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.028]             }
[13:38:28.028]             {
[13:38:28.028]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.028]                   0L) {
[13:38:28.028]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.028]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.028]                   base::options(opts)
[13:38:28.028]                 }
[13:38:28.028]                 {
[13:38:28.028]                   {
[13:38:28.028]                     NULL
[13:38:28.028]                     RNGkind("Mersenne-Twister")
[13:38:28.028]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.028]                       inherits = FALSE)
[13:38:28.028]                   }
[13:38:28.028]                   options(future.plan = "multisession")
[13:38:28.028]                   if (is.na("multisession")) 
[13:38:28.028]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.028]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[13:38:28.028]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.028]                     .init = FALSE)
[13:38:28.028]                 }
[13:38:28.028]             }
[13:38:28.028]         }
[13:38:28.028]     })
[13:38:28.028]     if (TRUE) {
[13:38:28.028]         base::sink(type = "output", split = FALSE)
[13:38:28.028]         if (TRUE) {
[13:38:28.028]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.028]         }
[13:38:28.028]         else {
[13:38:28.028]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.028]         }
[13:38:28.028]         base::close(...future.stdout)
[13:38:28.028]         ...future.stdout <- NULL
[13:38:28.028]     }
[13:38:28.028]     ...future.result$conditions <- ...future.conditions
[13:38:28.028]     ...future.result$finished <- base::Sys.time()
[13:38:28.028]     ...future.result
[13:38:28.028] }
[13:38:28.031] plan(): Setting new future strategy stack:
[13:38:28.031] List of future strategies:
[13:38:28.031] 1. sequential:
[13:38:28.031]    - args: function (..., envir = parent.frame())
[13:38:28.031]    - tweaked: FALSE
[13:38:28.031]    - call: NULL
[13:38:28.032] plan(): nbrOfWorkers() = 1
[13:38:28.033] plan(): Setting new future strategy stack:
[13:38:28.033] List of future strategies:
[13:38:28.033] 1. multisession:
[13:38:28.033]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.033]    - tweaked: FALSE
[13:38:28.033]    - call: plan("default")
[13:38:28.037] plan(): nbrOfWorkers() = 1
[13:38:28.037] SequentialFuture started (and completed)
[13:38:28.037] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:28.041] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:38:28.042] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:28.042] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:28.042] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:28.043] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:28.044] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:28.045] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:28.046] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:28.046] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:28.046] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:28.046] Option 'future.plan' = ‘multisession’
[13:38:28.046] R command-line argument: -p 1
[13:38:28.046]  => 'future.plan' already set.
[13:38:28.046] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:28.047] Setting plan('default')
[13:38:28.047] plan(): Setting new future strategy stack:
[13:38:28.047] List of future strategies:
[13:38:28.047] 1. multisession:
[13:38:28.047]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.047]    - tweaked: FALSE
[13:38:28.047]    - call: plan("default", .init = FALSE)
[13:38:28.050] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:38:28.051] plan(): Setting new future strategy stack:
[13:38:28.051] List of future strategies:
[13:38:28.051] 1. multisession:
[13:38:28.051]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.051]    - tweaked: FALSE
[13:38:28.051]    - call: plan("default")
[13:38:28.051] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:28.051] multisession:
[13:38:28.051] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.051] - tweaked: FALSE
[13:38:28.051] - call: plan("default")
[13:38:28.054] getGlobalsAndPackages() ...
[13:38:28.054] Not searching for globals
[13:38:28.055] - globals: [0] <none>
[13:38:28.055] getGlobalsAndPackages() ... DONE
[13:38:28.055] Packages needed by the future expression (n = 0): <none>
[13:38:28.055] Packages needed by future strategies (n = 0): <none>
[13:38:28.056] {
[13:38:28.056]     {
[13:38:28.056]         {
[13:38:28.056]             ...future.startTime <- base::Sys.time()
[13:38:28.056]             {
[13:38:28.056]                 {
[13:38:28.056]                   {
[13:38:28.056]                     base::local({
[13:38:28.056]                       has_future <- base::requireNamespace("future", 
[13:38:28.056]                         quietly = TRUE)
[13:38:28.056]                       if (has_future) {
[13:38:28.056]                         ns <- base::getNamespace("future")
[13:38:28.056]                         version <- ns[[".package"]][["version"]]
[13:38:28.056]                         if (is.null(version)) 
[13:38:28.056]                           version <- utils::packageVersion("future")
[13:38:28.056]                       }
[13:38:28.056]                       else {
[13:38:28.056]                         version <- NULL
[13:38:28.056]                       }
[13:38:28.056]                       if (!has_future || version < "1.8.0") {
[13:38:28.056]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.056]                           "", base::R.version$version.string), 
[13:38:28.056]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.056]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.056]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.056]                             "release", "version")], collapse = " "), 
[13:38:28.056]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.056]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.056]                           info)
[13:38:28.056]                         info <- base::paste(info, collapse = "; ")
[13:38:28.056]                         if (!has_future) {
[13:38:28.056]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.056]                             info)
[13:38:28.056]                         }
[13:38:28.056]                         else {
[13:38:28.056]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.056]                             info, version)
[13:38:28.056]                         }
[13:38:28.056]                         base::stop(msg)
[13:38:28.056]                       }
[13:38:28.056]                     })
[13:38:28.056]                   }
[13:38:28.056]                   ...future.strategy.old <- future::plan("list")
[13:38:28.056]                   options(future.plan = NULL)
[13:38:28.056]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.056]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.056]                 }
[13:38:28.056]                 ...future.workdir <- getwd()
[13:38:28.056]             }
[13:38:28.056]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.056]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.056]         }
[13:38:28.056]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.056]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.056]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.056]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.056]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.056]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.056]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.056]             base::names(...future.oldOptions))
[13:38:28.056]     }
[13:38:28.056]     if (FALSE) {
[13:38:28.056]     }
[13:38:28.056]     else {
[13:38:28.056]         if (TRUE) {
[13:38:28.056]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.056]                 open = "w")
[13:38:28.056]         }
[13:38:28.056]         else {
[13:38:28.056]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.056]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.056]         }
[13:38:28.056]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.056]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.056]             base::sink(type = "output", split = FALSE)
[13:38:28.056]             base::close(...future.stdout)
[13:38:28.056]         }, add = TRUE)
[13:38:28.056]     }
[13:38:28.056]     ...future.frame <- base::sys.nframe()
[13:38:28.056]     ...future.conditions <- base::list()
[13:38:28.056]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.056]     if (FALSE) {
[13:38:28.056]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.056]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.056]     }
[13:38:28.056]     ...future.result <- base::tryCatch({
[13:38:28.056]         base::withCallingHandlers({
[13:38:28.056]             ...future.value <- base::withVisible(base::local(NA))
[13:38:28.056]             future::FutureResult(value = ...future.value$value, 
[13:38:28.056]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.056]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.056]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.056]                     ...future.globalenv.names))
[13:38:28.056]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.056]         }, condition = base::local({
[13:38:28.056]             c <- base::c
[13:38:28.056]             inherits <- base::inherits
[13:38:28.056]             invokeRestart <- base::invokeRestart
[13:38:28.056]             length <- base::length
[13:38:28.056]             list <- base::list
[13:38:28.056]             seq.int <- base::seq.int
[13:38:28.056]             signalCondition <- base::signalCondition
[13:38:28.056]             sys.calls <- base::sys.calls
[13:38:28.056]             `[[` <- base::`[[`
[13:38:28.056]             `+` <- base::`+`
[13:38:28.056]             `<<-` <- base::`<<-`
[13:38:28.056]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.056]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.056]                   3L)]
[13:38:28.056]             }
[13:38:28.056]             function(cond) {
[13:38:28.056]                 is_error <- inherits(cond, "error")
[13:38:28.056]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.056]                   NULL)
[13:38:28.056]                 if (is_error) {
[13:38:28.056]                   sessionInformation <- function() {
[13:38:28.056]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.056]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.056]                       search = base::search(), system = base::Sys.info())
[13:38:28.056]                   }
[13:38:28.056]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.056]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.056]                     cond$call), session = sessionInformation(), 
[13:38:28.056]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.056]                   signalCondition(cond)
[13:38:28.056]                 }
[13:38:28.056]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.056]                 "immediateCondition"))) {
[13:38:28.056]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.056]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.056]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.056]                   if (TRUE && !signal) {
[13:38:28.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.056]                     {
[13:38:28.056]                       inherits <- base::inherits
[13:38:28.056]                       invokeRestart <- base::invokeRestart
[13:38:28.056]                       is.null <- base::is.null
[13:38:28.056]                       muffled <- FALSE
[13:38:28.056]                       if (inherits(cond, "message")) {
[13:38:28.056]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.056]                         if (muffled) 
[13:38:28.056]                           invokeRestart("muffleMessage")
[13:38:28.056]                       }
[13:38:28.056]                       else if (inherits(cond, "warning")) {
[13:38:28.056]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.056]                         if (muffled) 
[13:38:28.056]                           invokeRestart("muffleWarning")
[13:38:28.056]                       }
[13:38:28.056]                       else if (inherits(cond, "condition")) {
[13:38:28.056]                         if (!is.null(pattern)) {
[13:38:28.056]                           computeRestarts <- base::computeRestarts
[13:38:28.056]                           grepl <- base::grepl
[13:38:28.056]                           restarts <- computeRestarts(cond)
[13:38:28.056]                           for (restart in restarts) {
[13:38:28.056]                             name <- restart$name
[13:38:28.056]                             if (is.null(name)) 
[13:38:28.056]                               next
[13:38:28.056]                             if (!grepl(pattern, name)) 
[13:38:28.056]                               next
[13:38:28.056]                             invokeRestart(restart)
[13:38:28.056]                             muffled <- TRUE
[13:38:28.056]                             break
[13:38:28.056]                           }
[13:38:28.056]                         }
[13:38:28.056]                       }
[13:38:28.056]                       invisible(muffled)
[13:38:28.056]                     }
[13:38:28.056]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.056]                   }
[13:38:28.056]                 }
[13:38:28.056]                 else {
[13:38:28.056]                   if (TRUE) {
[13:38:28.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.056]                     {
[13:38:28.056]                       inherits <- base::inherits
[13:38:28.056]                       invokeRestart <- base::invokeRestart
[13:38:28.056]                       is.null <- base::is.null
[13:38:28.056]                       muffled <- FALSE
[13:38:28.056]                       if (inherits(cond, "message")) {
[13:38:28.056]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.056]                         if (muffled) 
[13:38:28.056]                           invokeRestart("muffleMessage")
[13:38:28.056]                       }
[13:38:28.056]                       else if (inherits(cond, "warning")) {
[13:38:28.056]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.056]                         if (muffled) 
[13:38:28.056]                           invokeRestart("muffleWarning")
[13:38:28.056]                       }
[13:38:28.056]                       else if (inherits(cond, "condition")) {
[13:38:28.056]                         if (!is.null(pattern)) {
[13:38:28.056]                           computeRestarts <- base::computeRestarts
[13:38:28.056]                           grepl <- base::grepl
[13:38:28.056]                           restarts <- computeRestarts(cond)
[13:38:28.056]                           for (restart in restarts) {
[13:38:28.056]                             name <- restart$name
[13:38:28.056]                             if (is.null(name)) 
[13:38:28.056]                               next
[13:38:28.056]                             if (!grepl(pattern, name)) 
[13:38:28.056]                               next
[13:38:28.056]                             invokeRestart(restart)
[13:38:28.056]                             muffled <- TRUE
[13:38:28.056]                             break
[13:38:28.056]                           }
[13:38:28.056]                         }
[13:38:28.056]                       }
[13:38:28.056]                       invisible(muffled)
[13:38:28.056]                     }
[13:38:28.056]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.056]                   }
[13:38:28.056]                 }
[13:38:28.056]             }
[13:38:28.056]         }))
[13:38:28.056]     }, error = function(ex) {
[13:38:28.056]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.056]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.056]                 ...future.rng), started = ...future.startTime, 
[13:38:28.056]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.056]             version = "1.8"), class = "FutureResult")
[13:38:28.056]     }, finally = {
[13:38:28.056]         if (!identical(...future.workdir, getwd())) 
[13:38:28.056]             setwd(...future.workdir)
[13:38:28.056]         {
[13:38:28.056]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.056]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.056]             }
[13:38:28.056]             base::options(...future.oldOptions)
[13:38:28.056]             if (.Platform$OS.type == "windows") {
[13:38:28.056]                 old_names <- names(...future.oldEnvVars)
[13:38:28.056]                 envs <- base::Sys.getenv()
[13:38:28.056]                 names <- names(envs)
[13:38:28.056]                 common <- intersect(names, old_names)
[13:38:28.056]                 added <- setdiff(names, old_names)
[13:38:28.056]                 removed <- setdiff(old_names, names)
[13:38:28.056]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.056]                   envs[common]]
[13:38:28.056]                 NAMES <- toupper(changed)
[13:38:28.056]                 args <- list()
[13:38:28.056]                 for (kk in seq_along(NAMES)) {
[13:38:28.056]                   name <- changed[[kk]]
[13:38:28.056]                   NAME <- NAMES[[kk]]
[13:38:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.056]                     next
[13:38:28.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.056]                 }
[13:38:28.056]                 NAMES <- toupper(added)
[13:38:28.056]                 for (kk in seq_along(NAMES)) {
[13:38:28.056]                   name <- added[[kk]]
[13:38:28.056]                   NAME <- NAMES[[kk]]
[13:38:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.056]                     next
[13:38:28.056]                   args[[name]] <- ""
[13:38:28.056]                 }
[13:38:28.056]                 NAMES <- toupper(removed)
[13:38:28.056]                 for (kk in seq_along(NAMES)) {
[13:38:28.056]                   name <- removed[[kk]]
[13:38:28.056]                   NAME <- NAMES[[kk]]
[13:38:28.056]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.056]                     next
[13:38:28.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.056]                 }
[13:38:28.056]                 if (length(args) > 0) 
[13:38:28.056]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.056]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.056]             }
[13:38:28.056]             else {
[13:38:28.056]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.056]             }
[13:38:28.056]             {
[13:38:28.056]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.056]                   0L) {
[13:38:28.056]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.056]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.056]                   base::options(opts)
[13:38:28.056]                 }
[13:38:28.056]                 {
[13:38:28.056]                   {
[13:38:28.056]                     NULL
[13:38:28.056]                     RNGkind("Mersenne-Twister")
[13:38:28.056]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.056]                       inherits = FALSE)
[13:38:28.056]                   }
[13:38:28.056]                   options(future.plan = "multisession")
[13:38:28.056]                   if (is.na("")) 
[13:38:28.056]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.056]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:38:28.056]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.056]                     .init = FALSE)
[13:38:28.056]                 }
[13:38:28.056]             }
[13:38:28.056]         }
[13:38:28.056]     })
[13:38:28.056]     if (TRUE) {
[13:38:28.056]         base::sink(type = "output", split = FALSE)
[13:38:28.056]         if (TRUE) {
[13:38:28.056]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.056]         }
[13:38:28.056]         else {
[13:38:28.056]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.056]         }
[13:38:28.056]         base::close(...future.stdout)
[13:38:28.056]         ...future.stdout <- NULL
[13:38:28.056]     }
[13:38:28.056]     ...future.result$conditions <- ...future.conditions
[13:38:28.056]     ...future.result$finished <- base::Sys.time()
[13:38:28.056]     ...future.result
[13:38:28.056] }
[13:38:28.057] plan(): Setting new future strategy stack:
[13:38:28.057] List of future strategies:
[13:38:28.057] 1. sequential:
[13:38:28.057]    - args: function (..., envir = parent.frame())
[13:38:28.057]    - tweaked: FALSE
[13:38:28.057]    - call: NULL
[13:38:28.058] plan(): nbrOfWorkers() = 1
[13:38:28.058] plan(): Setting new future strategy stack:
[13:38:28.059] List of future strategies:
[13:38:28.059] 1. multisession:
[13:38:28.059]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.059]    - tweaked: FALSE
[13:38:28.059]    - call: plan("default")
[13:38:28.062] plan(): nbrOfWorkers() = 1
[13:38:28.062] SequentialFuture started (and completed)
[13:38:28.062] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:28.065] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[13:38:28.066] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[13:38:28.066] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[13:38:28.066] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[13:38:28.066] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[13:38:28.067] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[13:38:28.068] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_JOURNAL’ not set
[13:38:28.069] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[13:38:28.069] Option 'future.plan' of type ‘function’
[13:38:28.070] R command-line argument: -p 1
[13:38:28.070]  => 'future.plan' already set.
[13:38:28.070] R process uuid: d41b5880-e3b0-45ef-47be-f29ea719d7b7
[13:38:28.070] Setting plan('default')
[13:38:28.070] plan(): Setting new future strategy stack:
[13:38:28.070] List of future strategies:
[13:38:28.070] 1. multisession:
[13:38:28.070]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.070]    - tweaked: FALSE
[13:38:28.070]    - call: NULL
[13:38:28.073] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[13:38:28.074] plan(): Setting new future strategy stack:
[13:38:28.074] List of future strategies:
[13:38:28.074] 1. multisession:
[13:38:28.074]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.074]    - tweaked: FALSE
[13:38:28.074]    - call: NULL
[13:38:28.074] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:28.074] multisession:
[13:38:28.074] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.074] - tweaked: FALSE
[13:38:28.074] - call: NULL
[13:38:28.077] getGlobalsAndPackages() ...
[13:38:28.078] Not searching for globals
[13:38:28.078] - globals: [0] <none>
[13:38:28.078] getGlobalsAndPackages() ... DONE
[13:38:28.078] Packages needed by the future expression (n = 0): <none>
[13:38:28.078] Packages needed by future strategies (n = 0): <none>
[13:38:28.079] {
[13:38:28.079]     {
[13:38:28.079]         {
[13:38:28.079]             ...future.startTime <- base::Sys.time()
[13:38:28.079]             {
[13:38:28.079]                 {
[13:38:28.079]                   {
[13:38:28.079]                     base::local({
[13:38:28.079]                       has_future <- base::requireNamespace("future", 
[13:38:28.079]                         quietly = TRUE)
[13:38:28.079]                       if (has_future) {
[13:38:28.079]                         ns <- base::getNamespace("future")
[13:38:28.079]                         version <- ns[[".package"]][["version"]]
[13:38:28.079]                         if (is.null(version)) 
[13:38:28.079]                           version <- utils::packageVersion("future")
[13:38:28.079]                       }
[13:38:28.079]                       else {
[13:38:28.079]                         version <- NULL
[13:38:28.079]                       }
[13:38:28.079]                       if (!has_future || version < "1.8.0") {
[13:38:28.079]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.079]                           "", base::R.version$version.string), 
[13:38:28.079]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.079]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.079]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.079]                             "release", "version")], collapse = " "), 
[13:38:28.079]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.079]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.079]                           info)
[13:38:28.079]                         info <- base::paste(info, collapse = "; ")
[13:38:28.079]                         if (!has_future) {
[13:38:28.079]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.079]                             info)
[13:38:28.079]                         }
[13:38:28.079]                         else {
[13:38:28.079]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.079]                             info, version)
[13:38:28.079]                         }
[13:38:28.079]                         base::stop(msg)
[13:38:28.079]                       }
[13:38:28.079]                     })
[13:38:28.079]                   }
[13:38:28.079]                   ...future.strategy.old <- future::plan("list")
[13:38:28.079]                   options(future.plan = NULL)
[13:38:28.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.079]                 }
[13:38:28.079]                 ...future.workdir <- getwd()
[13:38:28.079]             }
[13:38:28.079]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.079]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.079]         }
[13:38:28.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.079]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.079]             base::names(...future.oldOptions))
[13:38:28.079]     }
[13:38:28.079]     if (FALSE) {
[13:38:28.079]     }
[13:38:28.079]     else {
[13:38:28.079]         if (TRUE) {
[13:38:28.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.079]                 open = "w")
[13:38:28.079]         }
[13:38:28.079]         else {
[13:38:28.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.079]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.079]         }
[13:38:28.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.079]             base::sink(type = "output", split = FALSE)
[13:38:28.079]             base::close(...future.stdout)
[13:38:28.079]         }, add = TRUE)
[13:38:28.079]     }
[13:38:28.079]     ...future.frame <- base::sys.nframe()
[13:38:28.079]     ...future.conditions <- base::list()
[13:38:28.079]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.079]     if (FALSE) {
[13:38:28.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.079]     }
[13:38:28.079]     ...future.result <- base::tryCatch({
[13:38:28.079]         base::withCallingHandlers({
[13:38:28.079]             ...future.value <- base::withVisible(base::local(NA))
[13:38:28.079]             future::FutureResult(value = ...future.value$value, 
[13:38:28.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.079]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.079]                     ...future.globalenv.names))
[13:38:28.079]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.079]         }, condition = base::local({
[13:38:28.079]             c <- base::c
[13:38:28.079]             inherits <- base::inherits
[13:38:28.079]             invokeRestart <- base::invokeRestart
[13:38:28.079]             length <- base::length
[13:38:28.079]             list <- base::list
[13:38:28.079]             seq.int <- base::seq.int
[13:38:28.079]             signalCondition <- base::signalCondition
[13:38:28.079]             sys.calls <- base::sys.calls
[13:38:28.079]             `[[` <- base::`[[`
[13:38:28.079]             `+` <- base::`+`
[13:38:28.079]             `<<-` <- base::`<<-`
[13:38:28.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.079]                   3L)]
[13:38:28.079]             }
[13:38:28.079]             function(cond) {
[13:38:28.079]                 is_error <- inherits(cond, "error")
[13:38:28.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.079]                   NULL)
[13:38:28.079]                 if (is_error) {
[13:38:28.079]                   sessionInformation <- function() {
[13:38:28.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.079]                       search = base::search(), system = base::Sys.info())
[13:38:28.079]                   }
[13:38:28.079]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.079]                     cond$call), session = sessionInformation(), 
[13:38:28.079]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.079]                   signalCondition(cond)
[13:38:28.079]                 }
[13:38:28.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.079]                 "immediateCondition"))) {
[13:38:28.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.079]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.079]                   if (TRUE && !signal) {
[13:38:28.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.079]                     {
[13:38:28.079]                       inherits <- base::inherits
[13:38:28.079]                       invokeRestart <- base::invokeRestart
[13:38:28.079]                       is.null <- base::is.null
[13:38:28.079]                       muffled <- FALSE
[13:38:28.079]                       if (inherits(cond, "message")) {
[13:38:28.079]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.079]                         if (muffled) 
[13:38:28.079]                           invokeRestart("muffleMessage")
[13:38:28.079]                       }
[13:38:28.079]                       else if (inherits(cond, "warning")) {
[13:38:28.079]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.079]                         if (muffled) 
[13:38:28.079]                           invokeRestart("muffleWarning")
[13:38:28.079]                       }
[13:38:28.079]                       else if (inherits(cond, "condition")) {
[13:38:28.079]                         if (!is.null(pattern)) {
[13:38:28.079]                           computeRestarts <- base::computeRestarts
[13:38:28.079]                           grepl <- base::grepl
[13:38:28.079]                           restarts <- computeRestarts(cond)
[13:38:28.079]                           for (restart in restarts) {
[13:38:28.079]                             name <- restart$name
[13:38:28.079]                             if (is.null(name)) 
[13:38:28.079]                               next
[13:38:28.079]                             if (!grepl(pattern, name)) 
[13:38:28.079]                               next
[13:38:28.079]                             invokeRestart(restart)
[13:38:28.079]                             muffled <- TRUE
[13:38:28.079]                             break
[13:38:28.079]                           }
[13:38:28.079]                         }
[13:38:28.079]                       }
[13:38:28.079]                       invisible(muffled)
[13:38:28.079]                     }
[13:38:28.079]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.079]                   }
[13:38:28.079]                 }
[13:38:28.079]                 else {
[13:38:28.079]                   if (TRUE) {
[13:38:28.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.079]                     {
[13:38:28.079]                       inherits <- base::inherits
[13:38:28.079]                       invokeRestart <- base::invokeRestart
[13:38:28.079]                       is.null <- base::is.null
[13:38:28.079]                       muffled <- FALSE
[13:38:28.079]                       if (inherits(cond, "message")) {
[13:38:28.079]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.079]                         if (muffled) 
[13:38:28.079]                           invokeRestart("muffleMessage")
[13:38:28.079]                       }
[13:38:28.079]                       else if (inherits(cond, "warning")) {
[13:38:28.079]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.079]                         if (muffled) 
[13:38:28.079]                           invokeRestart("muffleWarning")
[13:38:28.079]                       }
[13:38:28.079]                       else if (inherits(cond, "condition")) {
[13:38:28.079]                         if (!is.null(pattern)) {
[13:38:28.079]                           computeRestarts <- base::computeRestarts
[13:38:28.079]                           grepl <- base::grepl
[13:38:28.079]                           restarts <- computeRestarts(cond)
[13:38:28.079]                           for (restart in restarts) {
[13:38:28.079]                             name <- restart$name
[13:38:28.079]                             if (is.null(name)) 
[13:38:28.079]                               next
[13:38:28.079]                             if (!grepl(pattern, name)) 
[13:38:28.079]                               next
[13:38:28.079]                             invokeRestart(restart)
[13:38:28.079]                             muffled <- TRUE
[13:38:28.079]                             break
[13:38:28.079]                           }
[13:38:28.079]                         }
[13:38:28.079]                       }
[13:38:28.079]                       invisible(muffled)
[13:38:28.079]                     }
[13:38:28.079]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.079]                   }
[13:38:28.079]                 }
[13:38:28.079]             }
[13:38:28.079]         }))
[13:38:28.079]     }, error = function(ex) {
[13:38:28.079]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.079]                 ...future.rng), started = ...future.startTime, 
[13:38:28.079]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.079]             version = "1.8"), class = "FutureResult")
[13:38:28.079]     }, finally = {
[13:38:28.079]         if (!identical(...future.workdir, getwd())) 
[13:38:28.079]             setwd(...future.workdir)
[13:38:28.079]         {
[13:38:28.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.079]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.079]             }
[13:38:28.079]             base::options(...future.oldOptions)
[13:38:28.079]             if (.Platform$OS.type == "windows") {
[13:38:28.079]                 old_names <- names(...future.oldEnvVars)
[13:38:28.079]                 envs <- base::Sys.getenv()
[13:38:28.079]                 names <- names(envs)
[13:38:28.079]                 common <- intersect(names, old_names)
[13:38:28.079]                 added <- setdiff(names, old_names)
[13:38:28.079]                 removed <- setdiff(old_names, names)
[13:38:28.079]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.079]                   envs[common]]
[13:38:28.079]                 NAMES <- toupper(changed)
[13:38:28.079]                 args <- list()
[13:38:28.079]                 for (kk in seq_along(NAMES)) {
[13:38:28.079]                   name <- changed[[kk]]
[13:38:28.079]                   NAME <- NAMES[[kk]]
[13:38:28.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.079]                     next
[13:38:28.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.079]                 }
[13:38:28.079]                 NAMES <- toupper(added)
[13:38:28.079]                 for (kk in seq_along(NAMES)) {
[13:38:28.079]                   name <- added[[kk]]
[13:38:28.079]                   NAME <- NAMES[[kk]]
[13:38:28.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.079]                     next
[13:38:28.079]                   args[[name]] <- ""
[13:38:28.079]                 }
[13:38:28.079]                 NAMES <- toupper(removed)
[13:38:28.079]                 for (kk in seq_along(NAMES)) {
[13:38:28.079]                   name <- removed[[kk]]
[13:38:28.079]                   NAME <- NAMES[[kk]]
[13:38:28.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.079]                     next
[13:38:28.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.079]                 }
[13:38:28.079]                 if (length(args) > 0) 
[13:38:28.079]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.079]             }
[13:38:28.079]             else {
[13:38:28.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.079]             }
[13:38:28.079]             {
[13:38:28.079]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.079]                   0L) {
[13:38:28.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.079]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.079]                   base::options(opts)
[13:38:28.079]                 }
[13:38:28.079]                 {
[13:38:28.079]                   {
[13:38:28.079]                     NULL
[13:38:28.079]                     RNGkind("Mersenne-Twister")
[13:38:28.079]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.079]                       inherits = FALSE)
[13:38:28.079]                   }
[13:38:28.079]                   options(future.plan = function (..., workers = availableCores(), 
[13:38:28.079]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:38:28.079]                     envir = parent.frame()) 
[13:38:28.079]                   {
[13:38:28.079]                     if (is.function(workers)) 
[13:38:28.079]                       workers <- workers()
[13:38:28.079]                     workers <- structure(as.integer(workers), 
[13:38:28.079]                       class = class(workers))
[13:38:28.079]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:38:28.079]                       workers >= 1)
[13:38:28.079]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:38:28.079]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:38:28.079]                     }
[13:38:28.079]                     future <- MultisessionFuture(..., workers = workers, 
[13:38:28.079]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:38:28.079]                       envir = envir)
[13:38:28.079]                     if (!future$lazy) 
[13:38:28.079]                       future <- run(future)
[13:38:28.079]                     invisible(future)
[13:38:28.079]                   })
[13:38:28.079]                   if (is.na("")) 
[13:38:28.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.079]                   else Sys.setenv(R_FUTURE_PLAN = "")
[13:38:28.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.079]                     .init = FALSE)
[13:38:28.079]                 }
[13:38:28.079]             }
[13:38:28.079]         }
[13:38:28.079]     })
[13:38:28.079]     if (TRUE) {
[13:38:28.079]         base::sink(type = "output", split = FALSE)
[13:38:28.079]         if (TRUE) {
[13:38:28.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.079]         }
[13:38:28.079]         else {
[13:38:28.079]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.079]         }
[13:38:28.079]         base::close(...future.stdout)
[13:38:28.079]         ...future.stdout <- NULL
[13:38:28.079]     }
[13:38:28.079]     ...future.result$conditions <- ...future.conditions
[13:38:28.079]     ...future.result$finished <- base::Sys.time()
[13:38:28.079]     ...future.result
[13:38:28.079] }
[13:38:28.081] plan(): Setting new future strategy stack:
[13:38:28.081] List of future strategies:
[13:38:28.081] 1. sequential:
[13:38:28.081]    - args: function (..., envir = parent.frame())
[13:38:28.081]    - tweaked: FALSE
[13:38:28.081]    - call: NULL
[13:38:28.081] plan(): nbrOfWorkers() = 1
[13:38:28.082] plan(): Setting new future strategy stack:
[13:38:28.082] List of future strategies:
[13:38:28.082] 1. multisession:
[13:38:28.082]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.082]    - tweaked: FALSE
[13:38:28.082]    - call: NULL
[13:38:28.085] plan(): nbrOfWorkers() = 1
[13:38:28.085] SequentialFuture started (and completed)
[13:38:28.086] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:28.089] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[13:38:28.092] Option 'future.startup.script': TRUE
[13:38:28.092] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:38:28.092] Future startup scripts found: <none>
[13:38:28.092] Option 'future.startup.script': TRUE
[13:38:28.092] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:38:28.092] Future startup scripts found: <none>
[13:38:28.092] Option 'future.startup.script': TRUE
[13:38:28.092] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:38:28.092] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[13:38:28.095] Option 'future.startup.script': TRUE
[13:38:28.095] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[13:38:28.095] Future startup scripts found: ‘.future.R’
[13:38:28.096] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[13:38:28.097] plan(): Setting new future strategy stack:
[13:38:28.097] List of future strategies:
[13:38:28.097] 1. FutureStrategy:
[13:38:28.097]    - args: function (..., envir = parent.frame())
[13:38:28.097]    - tweaked: FALSE
[13:38:28.097]    - call: future::plan(oplan)
[13:38:28.097] plan(): nbrOfWorkers() = 1
> 
