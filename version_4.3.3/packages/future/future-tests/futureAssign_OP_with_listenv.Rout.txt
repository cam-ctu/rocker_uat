
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:25.024] plan(): Setting new future strategy stack:
[13:36:25.025] List of future strategies:
[13:36:25.025] 1. sequential:
[13:36:25.025]    - args: function (..., envir = parent.frame())
[13:36:25.025]    - tweaked: FALSE
[13:36:25.025]    - call: future::plan("sequential")
[13:36:25.038] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:36:25.053] getGlobalsAndPackages() ...
[13:36:25.053] Searching for globals...
[13:36:25.056] - globals found: [1] ‘{’
[13:36:25.056] Searching for globals ... DONE
[13:36:25.056] Resolving globals: FALSE
[13:36:25.057] 
[13:36:25.057] 
[13:36:25.057] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[13:36:25.058] getGlobalsAndPackages() ...
[13:36:25.058] Searching for globals...
[13:36:25.058] - globals found: [1] ‘{’
[13:36:25.058] Searching for globals ... DONE
[13:36:25.059] Resolving globals: FALSE
[13:36:25.059] 
[13:36:25.059] 
[13:36:25.059] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[13:36:25.059] getGlobalsAndPackages() ...
[13:36:25.060] Searching for globals...
[13:36:25.060] - globals found: [1] ‘{’
[13:36:25.060] Searching for globals ... DONE
[13:36:25.060] Resolving globals: FALSE
[13:36:25.061] 
[13:36:25.061] 
[13:36:25.061] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[13:36:25.061] getGlobalsAndPackages() ...
[13:36:25.062] Searching for globals...
[13:36:25.062] - globals found: [1] ‘{’
[13:36:25.062] Searching for globals ... DONE
[13:36:25.062] Resolving globals: FALSE
[13:36:25.063] 
[13:36:25.063] 
[13:36:25.063] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[13:36:25.064] run() for ‘Future’ ...
[13:36:25.064] - state: ‘created’
[13:36:25.064] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.064] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.064] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.065]   - Field: ‘label’
[13:36:25.065]   - Field: ‘local’
[13:36:25.065]   - Field: ‘owner’
[13:36:25.065]   - Field: ‘envir’
[13:36:25.065]   - Field: ‘packages’
[13:36:25.065]   - Field: ‘gc’
[13:36:25.065]   - Field: ‘conditions’
[13:36:25.065]   - Field: ‘expr’
[13:36:25.065]   - Field: ‘uuid’
[13:36:25.065]   - Field: ‘seed’
[13:36:25.065]   - Field: ‘version’
[13:36:25.066]   - Field: ‘result’
[13:36:25.066]   - Field: ‘asynchronous’
[13:36:25.066]   - Field: ‘calls’
[13:36:25.066]   - Field: ‘globals’
[13:36:25.066]   - Field: ‘stdout’
[13:36:25.066]   - Field: ‘earlySignal’
[13:36:25.066]   - Field: ‘lazy’
[13:36:25.066]   - Field: ‘state’
[13:36:25.066] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.066] - Launch lazy future ...
[13:36:25.067] Packages needed by the future expression (n = 0): <none>
[13:36:25.067] Packages needed by future strategies (n = 0): <none>
[13:36:25.068] {
[13:36:25.068]     {
[13:36:25.068]         {
[13:36:25.068]             ...future.startTime <- base::Sys.time()
[13:36:25.068]             {
[13:36:25.068]                 {
[13:36:25.068]                   {
[13:36:25.068]                     base::local({
[13:36:25.068]                       has_future <- base::requireNamespace("future", 
[13:36:25.068]                         quietly = TRUE)
[13:36:25.068]                       if (has_future) {
[13:36:25.068]                         ns <- base::getNamespace("future")
[13:36:25.068]                         version <- ns[[".package"]][["version"]]
[13:36:25.068]                         if (is.null(version)) 
[13:36:25.068]                           version <- utils::packageVersion("future")
[13:36:25.068]                       }
[13:36:25.068]                       else {
[13:36:25.068]                         version <- NULL
[13:36:25.068]                       }
[13:36:25.068]                       if (!has_future || version < "1.8.0") {
[13:36:25.068]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.068]                           "", base::R.version$version.string), 
[13:36:25.068]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.068]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.068]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.068]                             "release", "version")], collapse = " "), 
[13:36:25.068]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.068]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.068]                           info)
[13:36:25.068]                         info <- base::paste(info, collapse = "; ")
[13:36:25.068]                         if (!has_future) {
[13:36:25.068]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.068]                             info)
[13:36:25.068]                         }
[13:36:25.068]                         else {
[13:36:25.068]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.068]                             info, version)
[13:36:25.068]                         }
[13:36:25.068]                         base::stop(msg)
[13:36:25.068]                       }
[13:36:25.068]                     })
[13:36:25.068]                   }
[13:36:25.068]                   ...future.strategy.old <- future::plan("list")
[13:36:25.068]                   options(future.plan = NULL)
[13:36:25.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.068]                 }
[13:36:25.068]                 ...future.workdir <- getwd()
[13:36:25.068]             }
[13:36:25.068]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.068]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.068]         }
[13:36:25.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.068]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.068]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.068]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.068]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.068]             base::names(...future.oldOptions))
[13:36:25.068]     }
[13:36:25.068]     if (FALSE) {
[13:36:25.068]     }
[13:36:25.068]     else {
[13:36:25.068]         if (TRUE) {
[13:36:25.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.068]                 open = "w")
[13:36:25.068]         }
[13:36:25.068]         else {
[13:36:25.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.068]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.068]         }
[13:36:25.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.068]             base::sink(type = "output", split = FALSE)
[13:36:25.068]             base::close(...future.stdout)
[13:36:25.068]         }, add = TRUE)
[13:36:25.068]     }
[13:36:25.068]     ...future.frame <- base::sys.nframe()
[13:36:25.068]     ...future.conditions <- base::list()
[13:36:25.068]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.068]     if (FALSE) {
[13:36:25.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.068]     }
[13:36:25.068]     ...future.result <- base::tryCatch({
[13:36:25.068]         base::withCallingHandlers({
[13:36:25.068]             ...future.value <- base::withVisible(base::local({
[13:36:25.068]                 2
[13:36:25.068]             }))
[13:36:25.068]             future::FutureResult(value = ...future.value$value, 
[13:36:25.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.068]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.068]                     ...future.globalenv.names))
[13:36:25.068]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.068]         }, condition = base::local({
[13:36:25.068]             c <- base::c
[13:36:25.068]             inherits <- base::inherits
[13:36:25.068]             invokeRestart <- base::invokeRestart
[13:36:25.068]             length <- base::length
[13:36:25.068]             list <- base::list
[13:36:25.068]             seq.int <- base::seq.int
[13:36:25.068]             signalCondition <- base::signalCondition
[13:36:25.068]             sys.calls <- base::sys.calls
[13:36:25.068]             `[[` <- base::`[[`
[13:36:25.068]             `+` <- base::`+`
[13:36:25.068]             `<<-` <- base::`<<-`
[13:36:25.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.068]                   3L)]
[13:36:25.068]             }
[13:36:25.068]             function(cond) {
[13:36:25.068]                 is_error <- inherits(cond, "error")
[13:36:25.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.068]                   NULL)
[13:36:25.068]                 if (is_error) {
[13:36:25.068]                   sessionInformation <- function() {
[13:36:25.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.068]                       search = base::search(), system = base::Sys.info())
[13:36:25.068]                   }
[13:36:25.068]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.068]                     cond$call), session = sessionInformation(), 
[13:36:25.068]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.068]                   signalCondition(cond)
[13:36:25.068]                 }
[13:36:25.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.068]                 "immediateCondition"))) {
[13:36:25.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.068]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.068]                   if (TRUE && !signal) {
[13:36:25.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.068]                     {
[13:36:25.068]                       inherits <- base::inherits
[13:36:25.068]                       invokeRestart <- base::invokeRestart
[13:36:25.068]                       is.null <- base::is.null
[13:36:25.068]                       muffled <- FALSE
[13:36:25.068]                       if (inherits(cond, "message")) {
[13:36:25.068]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.068]                         if (muffled) 
[13:36:25.068]                           invokeRestart("muffleMessage")
[13:36:25.068]                       }
[13:36:25.068]                       else if (inherits(cond, "warning")) {
[13:36:25.068]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.068]                         if (muffled) 
[13:36:25.068]                           invokeRestart("muffleWarning")
[13:36:25.068]                       }
[13:36:25.068]                       else if (inherits(cond, "condition")) {
[13:36:25.068]                         if (!is.null(pattern)) {
[13:36:25.068]                           computeRestarts <- base::computeRestarts
[13:36:25.068]                           grepl <- base::grepl
[13:36:25.068]                           restarts <- computeRestarts(cond)
[13:36:25.068]                           for (restart in restarts) {
[13:36:25.068]                             name <- restart$name
[13:36:25.068]                             if (is.null(name)) 
[13:36:25.068]                               next
[13:36:25.068]                             if (!grepl(pattern, name)) 
[13:36:25.068]                               next
[13:36:25.068]                             invokeRestart(restart)
[13:36:25.068]                             muffled <- TRUE
[13:36:25.068]                             break
[13:36:25.068]                           }
[13:36:25.068]                         }
[13:36:25.068]                       }
[13:36:25.068]                       invisible(muffled)
[13:36:25.068]                     }
[13:36:25.068]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.068]                   }
[13:36:25.068]                 }
[13:36:25.068]                 else {
[13:36:25.068]                   if (TRUE) {
[13:36:25.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.068]                     {
[13:36:25.068]                       inherits <- base::inherits
[13:36:25.068]                       invokeRestart <- base::invokeRestart
[13:36:25.068]                       is.null <- base::is.null
[13:36:25.068]                       muffled <- FALSE
[13:36:25.068]                       if (inherits(cond, "message")) {
[13:36:25.068]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.068]                         if (muffled) 
[13:36:25.068]                           invokeRestart("muffleMessage")
[13:36:25.068]                       }
[13:36:25.068]                       else if (inherits(cond, "warning")) {
[13:36:25.068]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.068]                         if (muffled) 
[13:36:25.068]                           invokeRestart("muffleWarning")
[13:36:25.068]                       }
[13:36:25.068]                       else if (inherits(cond, "condition")) {
[13:36:25.068]                         if (!is.null(pattern)) {
[13:36:25.068]                           computeRestarts <- base::computeRestarts
[13:36:25.068]                           grepl <- base::grepl
[13:36:25.068]                           restarts <- computeRestarts(cond)
[13:36:25.068]                           for (restart in restarts) {
[13:36:25.068]                             name <- restart$name
[13:36:25.068]                             if (is.null(name)) 
[13:36:25.068]                               next
[13:36:25.068]                             if (!grepl(pattern, name)) 
[13:36:25.068]                               next
[13:36:25.068]                             invokeRestart(restart)
[13:36:25.068]                             muffled <- TRUE
[13:36:25.068]                             break
[13:36:25.068]                           }
[13:36:25.068]                         }
[13:36:25.068]                       }
[13:36:25.068]                       invisible(muffled)
[13:36:25.068]                     }
[13:36:25.068]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.068]                   }
[13:36:25.068]                 }
[13:36:25.068]             }
[13:36:25.068]         }))
[13:36:25.068]     }, error = function(ex) {
[13:36:25.068]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.068]                 ...future.rng), started = ...future.startTime, 
[13:36:25.068]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.068]             version = "1.8"), class = "FutureResult")
[13:36:25.068]     }, finally = {
[13:36:25.068]         if (!identical(...future.workdir, getwd())) 
[13:36:25.068]             setwd(...future.workdir)
[13:36:25.068]         {
[13:36:25.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.068]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.068]             }
[13:36:25.068]             base::options(...future.oldOptions)
[13:36:25.068]             if (.Platform$OS.type == "windows") {
[13:36:25.068]                 old_names <- names(...future.oldEnvVars)
[13:36:25.068]                 envs <- base::Sys.getenv()
[13:36:25.068]                 names <- names(envs)
[13:36:25.068]                 common <- intersect(names, old_names)
[13:36:25.068]                 added <- setdiff(names, old_names)
[13:36:25.068]                 removed <- setdiff(old_names, names)
[13:36:25.068]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.068]                   envs[common]]
[13:36:25.068]                 NAMES <- toupper(changed)
[13:36:25.068]                 args <- list()
[13:36:25.068]                 for (kk in seq_along(NAMES)) {
[13:36:25.068]                   name <- changed[[kk]]
[13:36:25.068]                   NAME <- NAMES[[kk]]
[13:36:25.068]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.068]                     next
[13:36:25.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.068]                 }
[13:36:25.068]                 NAMES <- toupper(added)
[13:36:25.068]                 for (kk in seq_along(NAMES)) {
[13:36:25.068]                   name <- added[[kk]]
[13:36:25.068]                   NAME <- NAMES[[kk]]
[13:36:25.068]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.068]                     next
[13:36:25.068]                   args[[name]] <- ""
[13:36:25.068]                 }
[13:36:25.068]                 NAMES <- toupper(removed)
[13:36:25.068]                 for (kk in seq_along(NAMES)) {
[13:36:25.068]                   name <- removed[[kk]]
[13:36:25.068]                   NAME <- NAMES[[kk]]
[13:36:25.068]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.068]                     next
[13:36:25.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.068]                 }
[13:36:25.068]                 if (length(args) > 0) 
[13:36:25.068]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.068]             }
[13:36:25.068]             else {
[13:36:25.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.068]             }
[13:36:25.068]             {
[13:36:25.068]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.068]                   0L) {
[13:36:25.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.068]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.068]                   base::options(opts)
[13:36:25.068]                 }
[13:36:25.068]                 {
[13:36:25.068]                   {
[13:36:25.068]                     NULL
[13:36:25.068]                     RNGkind("Mersenne-Twister")
[13:36:25.068]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.068]                       inherits = FALSE)
[13:36:25.068]                   }
[13:36:25.068]                   options(future.plan = NULL)
[13:36:25.068]                   if (is.na(NA_character_)) 
[13:36:25.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.068]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.068]                     .init = FALSE)
[13:36:25.068]                 }
[13:36:25.068]             }
[13:36:25.068]         }
[13:36:25.068]     })
[13:36:25.068]     if (TRUE) {
[13:36:25.068]         base::sink(type = "output", split = FALSE)
[13:36:25.068]         if (TRUE) {
[13:36:25.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.068]         }
[13:36:25.068]         else {
[13:36:25.068]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.068]         }
[13:36:25.068]         base::close(...future.stdout)
[13:36:25.068]         ...future.stdout <- NULL
[13:36:25.068]     }
[13:36:25.068]     ...future.result$conditions <- ...future.conditions
[13:36:25.068]     ...future.result$finished <- base::Sys.time()
[13:36:25.068]     ...future.result
[13:36:25.068] }
[13:36:25.070] plan(): Setting new future strategy stack:
[13:36:25.070] List of future strategies:
[13:36:25.070] 1. sequential:
[13:36:25.070]    - args: function (..., envir = parent.frame())
[13:36:25.070]    - tweaked: FALSE
[13:36:25.070]    - call: NULL
[13:36:25.070] plan(): nbrOfWorkers() = 1
[13:36:25.072] plan(): Setting new future strategy stack:
[13:36:25.072] List of future strategies:
[13:36:25.072] 1. sequential:
[13:36:25.072]    - args: function (..., envir = parent.frame())
[13:36:25.072]    - tweaked: FALSE
[13:36:25.072]    - call: future::plan("sequential")
[13:36:25.072] plan(): nbrOfWorkers() = 1
[13:36:25.072] SequentialFuture started (and completed)
[13:36:25.073] - Launch lazy future ... done
[13:36:25.073] run() for ‘SequentialFuture’ ... done
[13:36:25.073] run() for ‘Future’ ...
[13:36:25.073] - state: ‘created’
[13:36:25.073] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.073] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.073] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.074]   - Field: ‘label’
[13:36:25.074]   - Field: ‘local’
[13:36:25.074]   - Field: ‘owner’
[13:36:25.074]   - Field: ‘envir’
[13:36:25.074]   - Field: ‘packages’
[13:36:25.074]   - Field: ‘gc’
[13:36:25.074]   - Field: ‘conditions’
[13:36:25.074]   - Field: ‘expr’
[13:36:25.074]   - Field: ‘uuid’
[13:36:25.074]   - Field: ‘seed’
[13:36:25.075]   - Field: ‘version’
[13:36:25.075]   - Field: ‘result’
[13:36:25.075]   - Field: ‘asynchronous’
[13:36:25.075]   - Field: ‘calls’
[13:36:25.075]   - Field: ‘globals’
[13:36:25.075]   - Field: ‘stdout’
[13:36:25.075]   - Field: ‘earlySignal’
[13:36:25.075]   - Field: ‘lazy’
[13:36:25.075]   - Field: ‘state’
[13:36:25.075] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.075] - Launch lazy future ...
[13:36:25.076] Packages needed by the future expression (n = 0): <none>
[13:36:25.076] Packages needed by future strategies (n = 0): <none>
[13:36:25.076] {
[13:36:25.076]     {
[13:36:25.076]         {
[13:36:25.076]             ...future.startTime <- base::Sys.time()
[13:36:25.076]             {
[13:36:25.076]                 {
[13:36:25.076]                   {
[13:36:25.076]                     base::local({
[13:36:25.076]                       has_future <- base::requireNamespace("future", 
[13:36:25.076]                         quietly = TRUE)
[13:36:25.076]                       if (has_future) {
[13:36:25.076]                         ns <- base::getNamespace("future")
[13:36:25.076]                         version <- ns[[".package"]][["version"]]
[13:36:25.076]                         if (is.null(version)) 
[13:36:25.076]                           version <- utils::packageVersion("future")
[13:36:25.076]                       }
[13:36:25.076]                       else {
[13:36:25.076]                         version <- NULL
[13:36:25.076]                       }
[13:36:25.076]                       if (!has_future || version < "1.8.0") {
[13:36:25.076]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.076]                           "", base::R.version$version.string), 
[13:36:25.076]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.076]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.076]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.076]                             "release", "version")], collapse = " "), 
[13:36:25.076]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.076]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.076]                           info)
[13:36:25.076]                         info <- base::paste(info, collapse = "; ")
[13:36:25.076]                         if (!has_future) {
[13:36:25.076]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.076]                             info)
[13:36:25.076]                         }
[13:36:25.076]                         else {
[13:36:25.076]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.076]                             info, version)
[13:36:25.076]                         }
[13:36:25.076]                         base::stop(msg)
[13:36:25.076]                       }
[13:36:25.076]                     })
[13:36:25.076]                   }
[13:36:25.076]                   ...future.strategy.old <- future::plan("list")
[13:36:25.076]                   options(future.plan = NULL)
[13:36:25.076]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.076]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.076]                 }
[13:36:25.076]                 ...future.workdir <- getwd()
[13:36:25.076]             }
[13:36:25.076]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.076]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.076]         }
[13:36:25.076]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.076]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.076]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.076]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.076]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.076]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.076]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.076]             base::names(...future.oldOptions))
[13:36:25.076]     }
[13:36:25.076]     if (FALSE) {
[13:36:25.076]     }
[13:36:25.076]     else {
[13:36:25.076]         if (TRUE) {
[13:36:25.076]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.076]                 open = "w")
[13:36:25.076]         }
[13:36:25.076]         else {
[13:36:25.076]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.076]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.076]         }
[13:36:25.076]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.076]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.076]             base::sink(type = "output", split = FALSE)
[13:36:25.076]             base::close(...future.stdout)
[13:36:25.076]         }, add = TRUE)
[13:36:25.076]     }
[13:36:25.076]     ...future.frame <- base::sys.nframe()
[13:36:25.076]     ...future.conditions <- base::list()
[13:36:25.076]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.076]     if (FALSE) {
[13:36:25.076]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.076]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.076]     }
[13:36:25.076]     ...future.result <- base::tryCatch({
[13:36:25.076]         base::withCallingHandlers({
[13:36:25.076]             ...future.value <- base::withVisible(base::local({
[13:36:25.076]                 "async!"
[13:36:25.076]             }))
[13:36:25.076]             future::FutureResult(value = ...future.value$value, 
[13:36:25.076]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.076]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.076]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.076]                     ...future.globalenv.names))
[13:36:25.076]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.076]         }, condition = base::local({
[13:36:25.076]             c <- base::c
[13:36:25.076]             inherits <- base::inherits
[13:36:25.076]             invokeRestart <- base::invokeRestart
[13:36:25.076]             length <- base::length
[13:36:25.076]             list <- base::list
[13:36:25.076]             seq.int <- base::seq.int
[13:36:25.076]             signalCondition <- base::signalCondition
[13:36:25.076]             sys.calls <- base::sys.calls
[13:36:25.076]             `[[` <- base::`[[`
[13:36:25.076]             `+` <- base::`+`
[13:36:25.076]             `<<-` <- base::`<<-`
[13:36:25.076]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.076]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.076]                   3L)]
[13:36:25.076]             }
[13:36:25.076]             function(cond) {
[13:36:25.076]                 is_error <- inherits(cond, "error")
[13:36:25.076]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.076]                   NULL)
[13:36:25.076]                 if (is_error) {
[13:36:25.076]                   sessionInformation <- function() {
[13:36:25.076]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.076]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.076]                       search = base::search(), system = base::Sys.info())
[13:36:25.076]                   }
[13:36:25.076]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.076]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.076]                     cond$call), session = sessionInformation(), 
[13:36:25.076]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.076]                   signalCondition(cond)
[13:36:25.076]                 }
[13:36:25.076]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.076]                 "immediateCondition"))) {
[13:36:25.076]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.076]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.076]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.076]                   if (TRUE && !signal) {
[13:36:25.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.076]                     {
[13:36:25.076]                       inherits <- base::inherits
[13:36:25.076]                       invokeRestart <- base::invokeRestart
[13:36:25.076]                       is.null <- base::is.null
[13:36:25.076]                       muffled <- FALSE
[13:36:25.076]                       if (inherits(cond, "message")) {
[13:36:25.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.076]                         if (muffled) 
[13:36:25.076]                           invokeRestart("muffleMessage")
[13:36:25.076]                       }
[13:36:25.076]                       else if (inherits(cond, "warning")) {
[13:36:25.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.076]                         if (muffled) 
[13:36:25.076]                           invokeRestart("muffleWarning")
[13:36:25.076]                       }
[13:36:25.076]                       else if (inherits(cond, "condition")) {
[13:36:25.076]                         if (!is.null(pattern)) {
[13:36:25.076]                           computeRestarts <- base::computeRestarts
[13:36:25.076]                           grepl <- base::grepl
[13:36:25.076]                           restarts <- computeRestarts(cond)
[13:36:25.076]                           for (restart in restarts) {
[13:36:25.076]                             name <- restart$name
[13:36:25.076]                             if (is.null(name)) 
[13:36:25.076]                               next
[13:36:25.076]                             if (!grepl(pattern, name)) 
[13:36:25.076]                               next
[13:36:25.076]                             invokeRestart(restart)
[13:36:25.076]                             muffled <- TRUE
[13:36:25.076]                             break
[13:36:25.076]                           }
[13:36:25.076]                         }
[13:36:25.076]                       }
[13:36:25.076]                       invisible(muffled)
[13:36:25.076]                     }
[13:36:25.076]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.076]                   }
[13:36:25.076]                 }
[13:36:25.076]                 else {
[13:36:25.076]                   if (TRUE) {
[13:36:25.076]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.076]                     {
[13:36:25.076]                       inherits <- base::inherits
[13:36:25.076]                       invokeRestart <- base::invokeRestart
[13:36:25.076]                       is.null <- base::is.null
[13:36:25.076]                       muffled <- FALSE
[13:36:25.076]                       if (inherits(cond, "message")) {
[13:36:25.076]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.076]                         if (muffled) 
[13:36:25.076]                           invokeRestart("muffleMessage")
[13:36:25.076]                       }
[13:36:25.076]                       else if (inherits(cond, "warning")) {
[13:36:25.076]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.076]                         if (muffled) 
[13:36:25.076]                           invokeRestart("muffleWarning")
[13:36:25.076]                       }
[13:36:25.076]                       else if (inherits(cond, "condition")) {
[13:36:25.076]                         if (!is.null(pattern)) {
[13:36:25.076]                           computeRestarts <- base::computeRestarts
[13:36:25.076]                           grepl <- base::grepl
[13:36:25.076]                           restarts <- computeRestarts(cond)
[13:36:25.076]                           for (restart in restarts) {
[13:36:25.076]                             name <- restart$name
[13:36:25.076]                             if (is.null(name)) 
[13:36:25.076]                               next
[13:36:25.076]                             if (!grepl(pattern, name)) 
[13:36:25.076]                               next
[13:36:25.076]                             invokeRestart(restart)
[13:36:25.076]                             muffled <- TRUE
[13:36:25.076]                             break
[13:36:25.076]                           }
[13:36:25.076]                         }
[13:36:25.076]                       }
[13:36:25.076]                       invisible(muffled)
[13:36:25.076]                     }
[13:36:25.076]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.076]                   }
[13:36:25.076]                 }
[13:36:25.076]             }
[13:36:25.076]         }))
[13:36:25.076]     }, error = function(ex) {
[13:36:25.076]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.076]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.076]                 ...future.rng), started = ...future.startTime, 
[13:36:25.076]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.076]             version = "1.8"), class = "FutureResult")
[13:36:25.076]     }, finally = {
[13:36:25.076]         if (!identical(...future.workdir, getwd())) 
[13:36:25.076]             setwd(...future.workdir)
[13:36:25.076]         {
[13:36:25.076]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.076]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.076]             }
[13:36:25.076]             base::options(...future.oldOptions)
[13:36:25.076]             if (.Platform$OS.type == "windows") {
[13:36:25.076]                 old_names <- names(...future.oldEnvVars)
[13:36:25.076]                 envs <- base::Sys.getenv()
[13:36:25.076]                 names <- names(envs)
[13:36:25.076]                 common <- intersect(names, old_names)
[13:36:25.076]                 added <- setdiff(names, old_names)
[13:36:25.076]                 removed <- setdiff(old_names, names)
[13:36:25.076]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.076]                   envs[common]]
[13:36:25.076]                 NAMES <- toupper(changed)
[13:36:25.076]                 args <- list()
[13:36:25.076]                 for (kk in seq_along(NAMES)) {
[13:36:25.076]                   name <- changed[[kk]]
[13:36:25.076]                   NAME <- NAMES[[kk]]
[13:36:25.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.076]                     next
[13:36:25.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.076]                 }
[13:36:25.076]                 NAMES <- toupper(added)
[13:36:25.076]                 for (kk in seq_along(NAMES)) {
[13:36:25.076]                   name <- added[[kk]]
[13:36:25.076]                   NAME <- NAMES[[kk]]
[13:36:25.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.076]                     next
[13:36:25.076]                   args[[name]] <- ""
[13:36:25.076]                 }
[13:36:25.076]                 NAMES <- toupper(removed)
[13:36:25.076]                 for (kk in seq_along(NAMES)) {
[13:36:25.076]                   name <- removed[[kk]]
[13:36:25.076]                   NAME <- NAMES[[kk]]
[13:36:25.076]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.076]                     next
[13:36:25.076]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.076]                 }
[13:36:25.076]                 if (length(args) > 0) 
[13:36:25.076]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.076]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.076]             }
[13:36:25.076]             else {
[13:36:25.076]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.076]             }
[13:36:25.076]             {
[13:36:25.076]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.076]                   0L) {
[13:36:25.076]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.076]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.076]                   base::options(opts)
[13:36:25.076]                 }
[13:36:25.076]                 {
[13:36:25.076]                   {
[13:36:25.076]                     NULL
[13:36:25.076]                     RNGkind("Mersenne-Twister")
[13:36:25.076]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.076]                       inherits = FALSE)
[13:36:25.076]                   }
[13:36:25.076]                   options(future.plan = NULL)
[13:36:25.076]                   if (is.na(NA_character_)) 
[13:36:25.076]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.076]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.076]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.076]                     .init = FALSE)
[13:36:25.076]                 }
[13:36:25.076]             }
[13:36:25.076]         }
[13:36:25.076]     })
[13:36:25.076]     if (TRUE) {
[13:36:25.076]         base::sink(type = "output", split = FALSE)
[13:36:25.076]         if (TRUE) {
[13:36:25.076]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.076]         }
[13:36:25.076]         else {
[13:36:25.076]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.076]         }
[13:36:25.076]         base::close(...future.stdout)
[13:36:25.076]         ...future.stdout <- NULL
[13:36:25.076]     }
[13:36:25.076]     ...future.result$conditions <- ...future.conditions
[13:36:25.076]     ...future.result$finished <- base::Sys.time()
[13:36:25.076]     ...future.result
[13:36:25.076] }
[13:36:25.078] plan(): Setting new future strategy stack:
[13:36:25.078] List of future strategies:
[13:36:25.078] 1. sequential:
[13:36:25.078]    - args: function (..., envir = parent.frame())
[13:36:25.078]    - tweaked: FALSE
[13:36:25.078]    - call: NULL
[13:36:25.078] plan(): nbrOfWorkers() = 1
[13:36:25.079] plan(): Setting new future strategy stack:
[13:36:25.079] List of future strategies:
[13:36:25.079] 1. sequential:
[13:36:25.079]    - args: function (..., envir = parent.frame())
[13:36:25.079]    - tweaked: FALSE
[13:36:25.079]    - call: future::plan("sequential")
[13:36:25.079] plan(): nbrOfWorkers() = 1
[13:36:25.079] SequentialFuture started (and completed)
[13:36:25.080] - Launch lazy future ... done
[13:36:25.080] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[13:36:25.084] getGlobalsAndPackages() ...
[13:36:25.084] Searching for globals...
[13:36:25.085] - globals found: [1] ‘{’
[13:36:25.085] Searching for globals ... DONE
[13:36:25.085] Resolving globals: FALSE
[13:36:25.085] 
[13:36:25.085] 
[13:36:25.085] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[13:36:25.088] getGlobalsAndPackages() ...
[13:36:25.088] Searching for globals...
[13:36:25.089] - globals found: [1] ‘{’
[13:36:25.089] Searching for globals ... DONE
[13:36:25.089] Resolving globals: FALSE
[13:36:25.090] 
[13:36:25.090] 
[13:36:25.090] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[13:36:25.090] run() for ‘Future’ ...
[13:36:25.091] - state: ‘created’
[13:36:25.091] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.091] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.091] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.091]   - Field: ‘label’
[13:36:25.091]   - Field: ‘local’
[13:36:25.091]   - Field: ‘owner’
[13:36:25.091]   - Field: ‘envir’
[13:36:25.092]   - Field: ‘packages’
[13:36:25.092]   - Field: ‘gc’
[13:36:25.092]   - Field: ‘conditions’
[13:36:25.092]   - Field: ‘expr’
[13:36:25.092]   - Field: ‘uuid’
[13:36:25.092]   - Field: ‘seed’
[13:36:25.092]   - Field: ‘version’
[13:36:25.092]   - Field: ‘result’
[13:36:25.092]   - Field: ‘asynchronous’
[13:36:25.092]   - Field: ‘calls’
[13:36:25.092]   - Field: ‘globals’
[13:36:25.092]   - Field: ‘stdout’
[13:36:25.093]   - Field: ‘earlySignal’
[13:36:25.093]   - Field: ‘lazy’
[13:36:25.093]   - Field: ‘state’
[13:36:25.093] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.093] - Launch lazy future ...
[13:36:25.093] Packages needed by the future expression (n = 0): <none>
[13:36:25.093] Packages needed by future strategies (n = 0): <none>
[13:36:25.094] {
[13:36:25.094]     {
[13:36:25.094]         {
[13:36:25.094]             ...future.startTime <- base::Sys.time()
[13:36:25.094]             {
[13:36:25.094]                 {
[13:36:25.094]                   {
[13:36:25.094]                     base::local({
[13:36:25.094]                       has_future <- base::requireNamespace("future", 
[13:36:25.094]                         quietly = TRUE)
[13:36:25.094]                       if (has_future) {
[13:36:25.094]                         ns <- base::getNamespace("future")
[13:36:25.094]                         version <- ns[[".package"]][["version"]]
[13:36:25.094]                         if (is.null(version)) 
[13:36:25.094]                           version <- utils::packageVersion("future")
[13:36:25.094]                       }
[13:36:25.094]                       else {
[13:36:25.094]                         version <- NULL
[13:36:25.094]                       }
[13:36:25.094]                       if (!has_future || version < "1.8.0") {
[13:36:25.094]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.094]                           "", base::R.version$version.string), 
[13:36:25.094]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.094]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.094]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.094]                             "release", "version")], collapse = " "), 
[13:36:25.094]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.094]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.094]                           info)
[13:36:25.094]                         info <- base::paste(info, collapse = "; ")
[13:36:25.094]                         if (!has_future) {
[13:36:25.094]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.094]                             info)
[13:36:25.094]                         }
[13:36:25.094]                         else {
[13:36:25.094]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.094]                             info, version)
[13:36:25.094]                         }
[13:36:25.094]                         base::stop(msg)
[13:36:25.094]                       }
[13:36:25.094]                     })
[13:36:25.094]                   }
[13:36:25.094]                   ...future.strategy.old <- future::plan("list")
[13:36:25.094]                   options(future.plan = NULL)
[13:36:25.094]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.094]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.094]                 }
[13:36:25.094]                 ...future.workdir <- getwd()
[13:36:25.094]             }
[13:36:25.094]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.094]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.094]         }
[13:36:25.094]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.094]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.094]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.094]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.094]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.094]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.094]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.094]             base::names(...future.oldOptions))
[13:36:25.094]     }
[13:36:25.094]     if (FALSE) {
[13:36:25.094]     }
[13:36:25.094]     else {
[13:36:25.094]         if (TRUE) {
[13:36:25.094]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.094]                 open = "w")
[13:36:25.094]         }
[13:36:25.094]         else {
[13:36:25.094]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.094]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.094]         }
[13:36:25.094]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.094]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.094]             base::sink(type = "output", split = FALSE)
[13:36:25.094]             base::close(...future.stdout)
[13:36:25.094]         }, add = TRUE)
[13:36:25.094]     }
[13:36:25.094]     ...future.frame <- base::sys.nframe()
[13:36:25.094]     ...future.conditions <- base::list()
[13:36:25.094]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.094]     if (FALSE) {
[13:36:25.094]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.094]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.094]     }
[13:36:25.094]     ...future.result <- base::tryCatch({
[13:36:25.094]         base::withCallingHandlers({
[13:36:25.094]             ...future.value <- base::withVisible(base::local({
[13:36:25.094]                 1
[13:36:25.094]             }))
[13:36:25.094]             future::FutureResult(value = ...future.value$value, 
[13:36:25.094]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.094]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.094]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.094]                     ...future.globalenv.names))
[13:36:25.094]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.094]         }, condition = base::local({
[13:36:25.094]             c <- base::c
[13:36:25.094]             inherits <- base::inherits
[13:36:25.094]             invokeRestart <- base::invokeRestart
[13:36:25.094]             length <- base::length
[13:36:25.094]             list <- base::list
[13:36:25.094]             seq.int <- base::seq.int
[13:36:25.094]             signalCondition <- base::signalCondition
[13:36:25.094]             sys.calls <- base::sys.calls
[13:36:25.094]             `[[` <- base::`[[`
[13:36:25.094]             `+` <- base::`+`
[13:36:25.094]             `<<-` <- base::`<<-`
[13:36:25.094]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.094]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.094]                   3L)]
[13:36:25.094]             }
[13:36:25.094]             function(cond) {
[13:36:25.094]                 is_error <- inherits(cond, "error")
[13:36:25.094]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.094]                   NULL)
[13:36:25.094]                 if (is_error) {
[13:36:25.094]                   sessionInformation <- function() {
[13:36:25.094]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.094]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.094]                       search = base::search(), system = base::Sys.info())
[13:36:25.094]                   }
[13:36:25.094]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.094]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.094]                     cond$call), session = sessionInformation(), 
[13:36:25.094]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.094]                   signalCondition(cond)
[13:36:25.094]                 }
[13:36:25.094]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.094]                 "immediateCondition"))) {
[13:36:25.094]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.094]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.094]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.094]                   if (TRUE && !signal) {
[13:36:25.094]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.094]                     {
[13:36:25.094]                       inherits <- base::inherits
[13:36:25.094]                       invokeRestart <- base::invokeRestart
[13:36:25.094]                       is.null <- base::is.null
[13:36:25.094]                       muffled <- FALSE
[13:36:25.094]                       if (inherits(cond, "message")) {
[13:36:25.094]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.094]                         if (muffled) 
[13:36:25.094]                           invokeRestart("muffleMessage")
[13:36:25.094]                       }
[13:36:25.094]                       else if (inherits(cond, "warning")) {
[13:36:25.094]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.094]                         if (muffled) 
[13:36:25.094]                           invokeRestart("muffleWarning")
[13:36:25.094]                       }
[13:36:25.094]                       else if (inherits(cond, "condition")) {
[13:36:25.094]                         if (!is.null(pattern)) {
[13:36:25.094]                           computeRestarts <- base::computeRestarts
[13:36:25.094]                           grepl <- base::grepl
[13:36:25.094]                           restarts <- computeRestarts(cond)
[13:36:25.094]                           for (restart in restarts) {
[13:36:25.094]                             name <- restart$name
[13:36:25.094]                             if (is.null(name)) 
[13:36:25.094]                               next
[13:36:25.094]                             if (!grepl(pattern, name)) 
[13:36:25.094]                               next
[13:36:25.094]                             invokeRestart(restart)
[13:36:25.094]                             muffled <- TRUE
[13:36:25.094]                             break
[13:36:25.094]                           }
[13:36:25.094]                         }
[13:36:25.094]                       }
[13:36:25.094]                       invisible(muffled)
[13:36:25.094]                     }
[13:36:25.094]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.094]                   }
[13:36:25.094]                 }
[13:36:25.094]                 else {
[13:36:25.094]                   if (TRUE) {
[13:36:25.094]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.094]                     {
[13:36:25.094]                       inherits <- base::inherits
[13:36:25.094]                       invokeRestart <- base::invokeRestart
[13:36:25.094]                       is.null <- base::is.null
[13:36:25.094]                       muffled <- FALSE
[13:36:25.094]                       if (inherits(cond, "message")) {
[13:36:25.094]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.094]                         if (muffled) 
[13:36:25.094]                           invokeRestart("muffleMessage")
[13:36:25.094]                       }
[13:36:25.094]                       else if (inherits(cond, "warning")) {
[13:36:25.094]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.094]                         if (muffled) 
[13:36:25.094]                           invokeRestart("muffleWarning")
[13:36:25.094]                       }
[13:36:25.094]                       else if (inherits(cond, "condition")) {
[13:36:25.094]                         if (!is.null(pattern)) {
[13:36:25.094]                           computeRestarts <- base::computeRestarts
[13:36:25.094]                           grepl <- base::grepl
[13:36:25.094]                           restarts <- computeRestarts(cond)
[13:36:25.094]                           for (restart in restarts) {
[13:36:25.094]                             name <- restart$name
[13:36:25.094]                             if (is.null(name)) 
[13:36:25.094]                               next
[13:36:25.094]                             if (!grepl(pattern, name)) 
[13:36:25.094]                               next
[13:36:25.094]                             invokeRestart(restart)
[13:36:25.094]                             muffled <- TRUE
[13:36:25.094]                             break
[13:36:25.094]                           }
[13:36:25.094]                         }
[13:36:25.094]                       }
[13:36:25.094]                       invisible(muffled)
[13:36:25.094]                     }
[13:36:25.094]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.094]                   }
[13:36:25.094]                 }
[13:36:25.094]             }
[13:36:25.094]         }))
[13:36:25.094]     }, error = function(ex) {
[13:36:25.094]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.094]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.094]                 ...future.rng), started = ...future.startTime, 
[13:36:25.094]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.094]             version = "1.8"), class = "FutureResult")
[13:36:25.094]     }, finally = {
[13:36:25.094]         if (!identical(...future.workdir, getwd())) 
[13:36:25.094]             setwd(...future.workdir)
[13:36:25.094]         {
[13:36:25.094]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.094]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.094]             }
[13:36:25.094]             base::options(...future.oldOptions)
[13:36:25.094]             if (.Platform$OS.type == "windows") {
[13:36:25.094]                 old_names <- names(...future.oldEnvVars)
[13:36:25.094]                 envs <- base::Sys.getenv()
[13:36:25.094]                 names <- names(envs)
[13:36:25.094]                 common <- intersect(names, old_names)
[13:36:25.094]                 added <- setdiff(names, old_names)
[13:36:25.094]                 removed <- setdiff(old_names, names)
[13:36:25.094]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.094]                   envs[common]]
[13:36:25.094]                 NAMES <- toupper(changed)
[13:36:25.094]                 args <- list()
[13:36:25.094]                 for (kk in seq_along(NAMES)) {
[13:36:25.094]                   name <- changed[[kk]]
[13:36:25.094]                   NAME <- NAMES[[kk]]
[13:36:25.094]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.094]                     next
[13:36:25.094]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.094]                 }
[13:36:25.094]                 NAMES <- toupper(added)
[13:36:25.094]                 for (kk in seq_along(NAMES)) {
[13:36:25.094]                   name <- added[[kk]]
[13:36:25.094]                   NAME <- NAMES[[kk]]
[13:36:25.094]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.094]                     next
[13:36:25.094]                   args[[name]] <- ""
[13:36:25.094]                 }
[13:36:25.094]                 NAMES <- toupper(removed)
[13:36:25.094]                 for (kk in seq_along(NAMES)) {
[13:36:25.094]                   name <- removed[[kk]]
[13:36:25.094]                   NAME <- NAMES[[kk]]
[13:36:25.094]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.094]                     next
[13:36:25.094]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.094]                 }
[13:36:25.094]                 if (length(args) > 0) 
[13:36:25.094]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.094]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.094]             }
[13:36:25.094]             else {
[13:36:25.094]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.094]             }
[13:36:25.094]             {
[13:36:25.094]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.094]                   0L) {
[13:36:25.094]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.094]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.094]                   base::options(opts)
[13:36:25.094]                 }
[13:36:25.094]                 {
[13:36:25.094]                   {
[13:36:25.094]                     NULL
[13:36:25.094]                     RNGkind("Mersenne-Twister")
[13:36:25.094]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.094]                       inherits = FALSE)
[13:36:25.094]                   }
[13:36:25.094]                   options(future.plan = NULL)
[13:36:25.094]                   if (is.na(NA_character_)) 
[13:36:25.094]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.094]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.094]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.094]                     .init = FALSE)
[13:36:25.094]                 }
[13:36:25.094]             }
[13:36:25.094]         }
[13:36:25.094]     })
[13:36:25.094]     if (TRUE) {
[13:36:25.094]         base::sink(type = "output", split = FALSE)
[13:36:25.094]         if (TRUE) {
[13:36:25.094]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.094]         }
[13:36:25.094]         else {
[13:36:25.094]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.094]         }
[13:36:25.094]         base::close(...future.stdout)
[13:36:25.094]         ...future.stdout <- NULL
[13:36:25.094]     }
[13:36:25.094]     ...future.result$conditions <- ...future.conditions
[13:36:25.094]     ...future.result$finished <- base::Sys.time()
[13:36:25.094]     ...future.result
[13:36:25.094] }
[13:36:25.095] plan(): Setting new future strategy stack:
[13:36:25.095] List of future strategies:
[13:36:25.095] 1. sequential:
[13:36:25.095]    - args: function (..., envir = parent.frame())
[13:36:25.095]    - tweaked: FALSE
[13:36:25.095]    - call: NULL
[13:36:25.096] plan(): nbrOfWorkers() = 1
[13:36:25.096] plan(): Setting new future strategy stack:
[13:36:25.096] List of future strategies:
[13:36:25.096] 1. sequential:
[13:36:25.096]    - args: function (..., envir = parent.frame())
[13:36:25.096]    - tweaked: FALSE
[13:36:25.096]    - call: future::plan("sequential")
[13:36:25.097] plan(): nbrOfWorkers() = 1
[13:36:25.097] SequentialFuture started (and completed)
[13:36:25.097] - Launch lazy future ... done
[13:36:25.097] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[13:36:25.097] run() for ‘Future’ ...
[13:36:25.097] - state: ‘created’
[13:36:25.098] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.098] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.098] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.098]   - Field: ‘label’
[13:36:25.098]   - Field: ‘local’
[13:36:25.098]   - Field: ‘owner’
[13:36:25.098]   - Field: ‘envir’
[13:36:25.098]   - Field: ‘packages’
[13:36:25.099]   - Field: ‘gc’
[13:36:25.099]   - Field: ‘conditions’
[13:36:25.099]   - Field: ‘expr’
[13:36:25.099]   - Field: ‘uuid’
[13:36:25.099]   - Field: ‘seed’
[13:36:25.099]   - Field: ‘version’
[13:36:25.099]   - Field: ‘result’
[13:36:25.099]   - Field: ‘asynchronous’
[13:36:25.099]   - Field: ‘calls’
[13:36:25.099]   - Field: ‘globals’
[13:36:25.099]   - Field: ‘stdout’
[13:36:25.100]   - Field: ‘earlySignal’
[13:36:25.100]   - Field: ‘lazy’
[13:36:25.100]   - Field: ‘state’
[13:36:25.100] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.100] - Launch lazy future ...
[13:36:25.100] Packages needed by the future expression (n = 0): <none>
[13:36:25.100] Packages needed by future strategies (n = 0): <none>
[13:36:25.100] {
[13:36:25.100]     {
[13:36:25.100]         {
[13:36:25.100]             ...future.startTime <- base::Sys.time()
[13:36:25.100]             {
[13:36:25.100]                 {
[13:36:25.100]                   {
[13:36:25.100]                     base::local({
[13:36:25.100]                       has_future <- base::requireNamespace("future", 
[13:36:25.100]                         quietly = TRUE)
[13:36:25.100]                       if (has_future) {
[13:36:25.100]                         ns <- base::getNamespace("future")
[13:36:25.100]                         version <- ns[[".package"]][["version"]]
[13:36:25.100]                         if (is.null(version)) 
[13:36:25.100]                           version <- utils::packageVersion("future")
[13:36:25.100]                       }
[13:36:25.100]                       else {
[13:36:25.100]                         version <- NULL
[13:36:25.100]                       }
[13:36:25.100]                       if (!has_future || version < "1.8.0") {
[13:36:25.100]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.100]                           "", base::R.version$version.string), 
[13:36:25.100]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.100]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.100]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.100]                             "release", "version")], collapse = " "), 
[13:36:25.100]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.100]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.100]                           info)
[13:36:25.100]                         info <- base::paste(info, collapse = "; ")
[13:36:25.100]                         if (!has_future) {
[13:36:25.100]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.100]                             info)
[13:36:25.100]                         }
[13:36:25.100]                         else {
[13:36:25.100]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.100]                             info, version)
[13:36:25.100]                         }
[13:36:25.100]                         base::stop(msg)
[13:36:25.100]                       }
[13:36:25.100]                     })
[13:36:25.100]                   }
[13:36:25.100]                   ...future.strategy.old <- future::plan("list")
[13:36:25.100]                   options(future.plan = NULL)
[13:36:25.100]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.100]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.100]                 }
[13:36:25.100]                 ...future.workdir <- getwd()
[13:36:25.100]             }
[13:36:25.100]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.100]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.100]         }
[13:36:25.100]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.100]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.100]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.100]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.100]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.100]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.100]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.100]             base::names(...future.oldOptions))
[13:36:25.100]     }
[13:36:25.100]     if (FALSE) {
[13:36:25.100]     }
[13:36:25.100]     else {
[13:36:25.100]         if (TRUE) {
[13:36:25.100]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.100]                 open = "w")
[13:36:25.100]         }
[13:36:25.100]         else {
[13:36:25.100]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.100]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.100]         }
[13:36:25.100]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.100]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.100]             base::sink(type = "output", split = FALSE)
[13:36:25.100]             base::close(...future.stdout)
[13:36:25.100]         }, add = TRUE)
[13:36:25.100]     }
[13:36:25.100]     ...future.frame <- base::sys.nframe()
[13:36:25.100]     ...future.conditions <- base::list()
[13:36:25.100]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.100]     if (FALSE) {
[13:36:25.100]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.100]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.100]     }
[13:36:25.100]     ...future.result <- base::tryCatch({
[13:36:25.100]         base::withCallingHandlers({
[13:36:25.100]             ...future.value <- base::withVisible(base::local({
[13:36:25.100]                 2
[13:36:25.100]             }))
[13:36:25.100]             future::FutureResult(value = ...future.value$value, 
[13:36:25.100]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.100]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.100]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.100]                     ...future.globalenv.names))
[13:36:25.100]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.100]         }, condition = base::local({
[13:36:25.100]             c <- base::c
[13:36:25.100]             inherits <- base::inherits
[13:36:25.100]             invokeRestart <- base::invokeRestart
[13:36:25.100]             length <- base::length
[13:36:25.100]             list <- base::list
[13:36:25.100]             seq.int <- base::seq.int
[13:36:25.100]             signalCondition <- base::signalCondition
[13:36:25.100]             sys.calls <- base::sys.calls
[13:36:25.100]             `[[` <- base::`[[`
[13:36:25.100]             `+` <- base::`+`
[13:36:25.100]             `<<-` <- base::`<<-`
[13:36:25.100]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.100]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.100]                   3L)]
[13:36:25.100]             }
[13:36:25.100]             function(cond) {
[13:36:25.100]                 is_error <- inherits(cond, "error")
[13:36:25.100]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.100]                   NULL)
[13:36:25.100]                 if (is_error) {
[13:36:25.100]                   sessionInformation <- function() {
[13:36:25.100]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.100]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.100]                       search = base::search(), system = base::Sys.info())
[13:36:25.100]                   }
[13:36:25.100]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.100]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.100]                     cond$call), session = sessionInformation(), 
[13:36:25.100]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.100]                   signalCondition(cond)
[13:36:25.100]                 }
[13:36:25.100]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.100]                 "immediateCondition"))) {
[13:36:25.100]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.100]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.100]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.100]                   if (TRUE && !signal) {
[13:36:25.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.100]                     {
[13:36:25.100]                       inherits <- base::inherits
[13:36:25.100]                       invokeRestart <- base::invokeRestart
[13:36:25.100]                       is.null <- base::is.null
[13:36:25.100]                       muffled <- FALSE
[13:36:25.100]                       if (inherits(cond, "message")) {
[13:36:25.100]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.100]                         if (muffled) 
[13:36:25.100]                           invokeRestart("muffleMessage")
[13:36:25.100]                       }
[13:36:25.100]                       else if (inherits(cond, "warning")) {
[13:36:25.100]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.100]                         if (muffled) 
[13:36:25.100]                           invokeRestart("muffleWarning")
[13:36:25.100]                       }
[13:36:25.100]                       else if (inherits(cond, "condition")) {
[13:36:25.100]                         if (!is.null(pattern)) {
[13:36:25.100]                           computeRestarts <- base::computeRestarts
[13:36:25.100]                           grepl <- base::grepl
[13:36:25.100]                           restarts <- computeRestarts(cond)
[13:36:25.100]                           for (restart in restarts) {
[13:36:25.100]                             name <- restart$name
[13:36:25.100]                             if (is.null(name)) 
[13:36:25.100]                               next
[13:36:25.100]                             if (!grepl(pattern, name)) 
[13:36:25.100]                               next
[13:36:25.100]                             invokeRestart(restart)
[13:36:25.100]                             muffled <- TRUE
[13:36:25.100]                             break
[13:36:25.100]                           }
[13:36:25.100]                         }
[13:36:25.100]                       }
[13:36:25.100]                       invisible(muffled)
[13:36:25.100]                     }
[13:36:25.100]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.100]                   }
[13:36:25.100]                 }
[13:36:25.100]                 else {
[13:36:25.100]                   if (TRUE) {
[13:36:25.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.100]                     {
[13:36:25.100]                       inherits <- base::inherits
[13:36:25.100]                       invokeRestart <- base::invokeRestart
[13:36:25.100]                       is.null <- base::is.null
[13:36:25.100]                       muffled <- FALSE
[13:36:25.100]                       if (inherits(cond, "message")) {
[13:36:25.100]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.100]                         if (muffled) 
[13:36:25.100]                           invokeRestart("muffleMessage")
[13:36:25.100]                       }
[13:36:25.100]                       else if (inherits(cond, "warning")) {
[13:36:25.100]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.100]                         if (muffled) 
[13:36:25.100]                           invokeRestart("muffleWarning")
[13:36:25.100]                       }
[13:36:25.100]                       else if (inherits(cond, "condition")) {
[13:36:25.100]                         if (!is.null(pattern)) {
[13:36:25.100]                           computeRestarts <- base::computeRestarts
[13:36:25.100]                           grepl <- base::grepl
[13:36:25.100]                           restarts <- computeRestarts(cond)
[13:36:25.100]                           for (restart in restarts) {
[13:36:25.100]                             name <- restart$name
[13:36:25.100]                             if (is.null(name)) 
[13:36:25.100]                               next
[13:36:25.100]                             if (!grepl(pattern, name)) 
[13:36:25.100]                               next
[13:36:25.100]                             invokeRestart(restart)
[13:36:25.100]                             muffled <- TRUE
[13:36:25.100]                             break
[13:36:25.100]                           }
[13:36:25.100]                         }
[13:36:25.100]                       }
[13:36:25.100]                       invisible(muffled)
[13:36:25.100]                     }
[13:36:25.100]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.100]                   }
[13:36:25.100]                 }
[13:36:25.100]             }
[13:36:25.100]         }))
[13:36:25.100]     }, error = function(ex) {
[13:36:25.100]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.100]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.100]                 ...future.rng), started = ...future.startTime, 
[13:36:25.100]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.100]             version = "1.8"), class = "FutureResult")
[13:36:25.100]     }, finally = {
[13:36:25.100]         if (!identical(...future.workdir, getwd())) 
[13:36:25.100]             setwd(...future.workdir)
[13:36:25.100]         {
[13:36:25.100]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.100]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.100]             }
[13:36:25.100]             base::options(...future.oldOptions)
[13:36:25.100]             if (.Platform$OS.type == "windows") {
[13:36:25.100]                 old_names <- names(...future.oldEnvVars)
[13:36:25.100]                 envs <- base::Sys.getenv()
[13:36:25.100]                 names <- names(envs)
[13:36:25.100]                 common <- intersect(names, old_names)
[13:36:25.100]                 added <- setdiff(names, old_names)
[13:36:25.100]                 removed <- setdiff(old_names, names)
[13:36:25.100]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.100]                   envs[common]]
[13:36:25.100]                 NAMES <- toupper(changed)
[13:36:25.100]                 args <- list()
[13:36:25.100]                 for (kk in seq_along(NAMES)) {
[13:36:25.100]                   name <- changed[[kk]]
[13:36:25.100]                   NAME <- NAMES[[kk]]
[13:36:25.100]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.100]                     next
[13:36:25.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.100]                 }
[13:36:25.100]                 NAMES <- toupper(added)
[13:36:25.100]                 for (kk in seq_along(NAMES)) {
[13:36:25.100]                   name <- added[[kk]]
[13:36:25.100]                   NAME <- NAMES[[kk]]
[13:36:25.100]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.100]                     next
[13:36:25.100]                   args[[name]] <- ""
[13:36:25.100]                 }
[13:36:25.100]                 NAMES <- toupper(removed)
[13:36:25.100]                 for (kk in seq_along(NAMES)) {
[13:36:25.100]                   name <- removed[[kk]]
[13:36:25.100]                   NAME <- NAMES[[kk]]
[13:36:25.100]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.100]                     next
[13:36:25.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.100]                 }
[13:36:25.100]                 if (length(args) > 0) 
[13:36:25.100]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.100]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.100]             }
[13:36:25.100]             else {
[13:36:25.100]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.100]             }
[13:36:25.100]             {
[13:36:25.100]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.100]                   0L) {
[13:36:25.100]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.100]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.100]                   base::options(opts)
[13:36:25.100]                 }
[13:36:25.100]                 {
[13:36:25.100]                   {
[13:36:25.100]                     NULL
[13:36:25.100]                     RNGkind("Mersenne-Twister")
[13:36:25.100]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.100]                       inherits = FALSE)
[13:36:25.100]                   }
[13:36:25.100]                   options(future.plan = NULL)
[13:36:25.100]                   if (is.na(NA_character_)) 
[13:36:25.100]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.100]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.100]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.100]                     .init = FALSE)
[13:36:25.100]                 }
[13:36:25.100]             }
[13:36:25.100]         }
[13:36:25.100]     })
[13:36:25.100]     if (TRUE) {
[13:36:25.100]         base::sink(type = "output", split = FALSE)
[13:36:25.100]         if (TRUE) {
[13:36:25.100]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.100]         }
[13:36:25.100]         else {
[13:36:25.100]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.100]         }
[13:36:25.100]         base::close(...future.stdout)
[13:36:25.100]         ...future.stdout <- NULL
[13:36:25.100]     }
[13:36:25.100]     ...future.result$conditions <- ...future.conditions
[13:36:25.100]     ...future.result$finished <- base::Sys.time()
[13:36:25.100]     ...future.result
[13:36:25.100] }
[13:36:25.102] plan(): Setting new future strategy stack:
[13:36:25.102] List of future strategies:
[13:36:25.102] 1. sequential:
[13:36:25.102]    - args: function (..., envir = parent.frame())
[13:36:25.102]    - tweaked: FALSE
[13:36:25.102]    - call: NULL
[13:36:25.103] plan(): nbrOfWorkers() = 1
[13:36:25.103] plan(): Setting new future strategy stack:
[13:36:25.103] List of future strategies:
[13:36:25.103] 1. sequential:
[13:36:25.103]    - args: function (..., envir = parent.frame())
[13:36:25.103]    - tweaked: FALSE
[13:36:25.103]    - call: future::plan("sequential")
[13:36:25.104] plan(): nbrOfWorkers() = 1
[13:36:25.104] SequentialFuture started (and completed)
[13:36:25.104] - Launch lazy future ... done
[13:36:25.104] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[13:36:25.109] getGlobalsAndPackages() ...
[13:36:25.109] Searching for globals...
[13:36:25.111] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.111] Searching for globals ... DONE
[13:36:25.111] Resolving globals: FALSE
[13:36:25.112] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.113] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.113] - globals: [2] ‘rr’, ‘cc’
[13:36:25.113] 
[13:36:25.113] getGlobalsAndPackages() ... DONE
[13:36:25.113] getGlobalsAndPackages() ...
[13:36:25.113] Searching for globals...
[13:36:25.114] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.114] Searching for globals ... DONE
[13:36:25.114] Resolving globals: FALSE
[13:36:25.115] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.115] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.115] - globals: [2] ‘rr’, ‘cc’
[13:36:25.115] 
[13:36:25.115] getGlobalsAndPackages() ... DONE
[13:36:25.117] getGlobalsAndPackages() ...
[13:36:25.117] Searching for globals...
[13:36:25.117] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.118] Searching for globals ... DONE
[13:36:25.118] Resolving globals: FALSE
[13:36:25.118] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.118] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.118] - globals: [2] ‘rr’, ‘cc’
[13:36:25.119] 
[13:36:25.119] getGlobalsAndPackages() ... DONE
[13:36:25.119] getGlobalsAndPackages() ...
[13:36:25.119] Searching for globals...
[13:36:25.120] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.120] Searching for globals ... DONE
[13:36:25.120] Resolving globals: FALSE
[13:36:25.120] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.121] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.121] - globals: [2] ‘rr’, ‘cc’
[13:36:25.121] 
[13:36:25.121] getGlobalsAndPackages() ... DONE
[13:36:25.121] getGlobalsAndPackages() ...
[13:36:25.122] Searching for globals...
[13:36:25.122] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.122] Searching for globals ... DONE
[13:36:25.122] Resolving globals: FALSE
[13:36:25.123] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.123] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.123] - globals: [2] ‘rr’, ‘cc’
[13:36:25.123] 
[13:36:25.123] getGlobalsAndPackages() ... DONE
[13:36:25.124] getGlobalsAndPackages() ...
[13:36:25.124] Searching for globals...
[13:36:25.124] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[13:36:25.124] Searching for globals ... DONE
[13:36:25.125] Resolving globals: FALSE
[13:36:25.125] The total size of the 2 globals is 112 bytes (112 bytes)
[13:36:25.125] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[13:36:25.125] - globals: [2] ‘rr’, ‘cc’
[13:36:25.125] 
[13:36:25.126] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[13:36:25.126] run() for ‘Future’ ...
[13:36:25.126] - state: ‘created’
[13:36:25.126] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.126] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.126] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.127]   - Field: ‘label’
[13:36:25.127]   - Field: ‘local’
[13:36:25.127]   - Field: ‘owner’
[13:36:25.127]   - Field: ‘envir’
[13:36:25.127]   - Field: ‘packages’
[13:36:25.127]   - Field: ‘gc’
[13:36:25.127]   - Field: ‘conditions’
[13:36:25.127]   - Field: ‘expr’
[13:36:25.127]   - Field: ‘uuid’
[13:36:25.127]   - Field: ‘seed’
[13:36:25.127]   - Field: ‘version’
[13:36:25.127]   - Field: ‘result’
[13:36:25.128]   - Field: ‘asynchronous’
[13:36:25.128]   - Field: ‘calls’
[13:36:25.128]   - Field: ‘globals’
[13:36:25.128]   - Field: ‘stdout’
[13:36:25.128]   - Field: ‘earlySignal’
[13:36:25.128]   - Field: ‘lazy’
[13:36:25.128]   - Field: ‘state’
[13:36:25.128] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.128] - Launch lazy future ...
[13:36:25.128] Packages needed by the future expression (n = 0): <none>
[13:36:25.129] Packages needed by future strategies (n = 0): <none>
[13:36:25.129] {
[13:36:25.129]     {
[13:36:25.129]         {
[13:36:25.129]             ...future.startTime <- base::Sys.time()
[13:36:25.129]             {
[13:36:25.129]                 {
[13:36:25.129]                   {
[13:36:25.129]                     base::local({
[13:36:25.129]                       has_future <- base::requireNamespace("future", 
[13:36:25.129]                         quietly = TRUE)
[13:36:25.129]                       if (has_future) {
[13:36:25.129]                         ns <- base::getNamespace("future")
[13:36:25.129]                         version <- ns[[".package"]][["version"]]
[13:36:25.129]                         if (is.null(version)) 
[13:36:25.129]                           version <- utils::packageVersion("future")
[13:36:25.129]                       }
[13:36:25.129]                       else {
[13:36:25.129]                         version <- NULL
[13:36:25.129]                       }
[13:36:25.129]                       if (!has_future || version < "1.8.0") {
[13:36:25.129]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.129]                           "", base::R.version$version.string), 
[13:36:25.129]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.129]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.129]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.129]                             "release", "version")], collapse = " "), 
[13:36:25.129]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.129]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.129]                           info)
[13:36:25.129]                         info <- base::paste(info, collapse = "; ")
[13:36:25.129]                         if (!has_future) {
[13:36:25.129]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.129]                             info)
[13:36:25.129]                         }
[13:36:25.129]                         else {
[13:36:25.129]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.129]                             info, version)
[13:36:25.129]                         }
[13:36:25.129]                         base::stop(msg)
[13:36:25.129]                       }
[13:36:25.129]                     })
[13:36:25.129]                   }
[13:36:25.129]                   ...future.strategy.old <- future::plan("list")
[13:36:25.129]                   options(future.plan = NULL)
[13:36:25.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.129]                 }
[13:36:25.129]                 ...future.workdir <- getwd()
[13:36:25.129]             }
[13:36:25.129]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.129]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.129]         }
[13:36:25.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.129]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.129]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.129]             base::names(...future.oldOptions))
[13:36:25.129]     }
[13:36:25.129]     if (FALSE) {
[13:36:25.129]     }
[13:36:25.129]     else {
[13:36:25.129]         if (TRUE) {
[13:36:25.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.129]                 open = "w")
[13:36:25.129]         }
[13:36:25.129]         else {
[13:36:25.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.129]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.129]         }
[13:36:25.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.129]             base::sink(type = "output", split = FALSE)
[13:36:25.129]             base::close(...future.stdout)
[13:36:25.129]         }, add = TRUE)
[13:36:25.129]     }
[13:36:25.129]     ...future.frame <- base::sys.nframe()
[13:36:25.129]     ...future.conditions <- base::list()
[13:36:25.129]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.129]     if (FALSE) {
[13:36:25.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.129]     }
[13:36:25.129]     ...future.result <- base::tryCatch({
[13:36:25.129]         base::withCallingHandlers({
[13:36:25.129]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.129]                 rr, cc)))
[13:36:25.129]             future::FutureResult(value = ...future.value$value, 
[13:36:25.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.129]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.129]                     ...future.globalenv.names))
[13:36:25.129]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.129]         }, condition = base::local({
[13:36:25.129]             c <- base::c
[13:36:25.129]             inherits <- base::inherits
[13:36:25.129]             invokeRestart <- base::invokeRestart
[13:36:25.129]             length <- base::length
[13:36:25.129]             list <- base::list
[13:36:25.129]             seq.int <- base::seq.int
[13:36:25.129]             signalCondition <- base::signalCondition
[13:36:25.129]             sys.calls <- base::sys.calls
[13:36:25.129]             `[[` <- base::`[[`
[13:36:25.129]             `+` <- base::`+`
[13:36:25.129]             `<<-` <- base::`<<-`
[13:36:25.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.129]                   3L)]
[13:36:25.129]             }
[13:36:25.129]             function(cond) {
[13:36:25.129]                 is_error <- inherits(cond, "error")
[13:36:25.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.129]                   NULL)
[13:36:25.129]                 if (is_error) {
[13:36:25.129]                   sessionInformation <- function() {
[13:36:25.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.129]                       search = base::search(), system = base::Sys.info())
[13:36:25.129]                   }
[13:36:25.129]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.129]                     cond$call), session = sessionInformation(), 
[13:36:25.129]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.129]                   signalCondition(cond)
[13:36:25.129]                 }
[13:36:25.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.129]                 "immediateCondition"))) {
[13:36:25.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.129]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.129]                   if (TRUE && !signal) {
[13:36:25.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.129]                     {
[13:36:25.129]                       inherits <- base::inherits
[13:36:25.129]                       invokeRestart <- base::invokeRestart
[13:36:25.129]                       is.null <- base::is.null
[13:36:25.129]                       muffled <- FALSE
[13:36:25.129]                       if (inherits(cond, "message")) {
[13:36:25.129]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.129]                         if (muffled) 
[13:36:25.129]                           invokeRestart("muffleMessage")
[13:36:25.129]                       }
[13:36:25.129]                       else if (inherits(cond, "warning")) {
[13:36:25.129]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.129]                         if (muffled) 
[13:36:25.129]                           invokeRestart("muffleWarning")
[13:36:25.129]                       }
[13:36:25.129]                       else if (inherits(cond, "condition")) {
[13:36:25.129]                         if (!is.null(pattern)) {
[13:36:25.129]                           computeRestarts <- base::computeRestarts
[13:36:25.129]                           grepl <- base::grepl
[13:36:25.129]                           restarts <- computeRestarts(cond)
[13:36:25.129]                           for (restart in restarts) {
[13:36:25.129]                             name <- restart$name
[13:36:25.129]                             if (is.null(name)) 
[13:36:25.129]                               next
[13:36:25.129]                             if (!grepl(pattern, name)) 
[13:36:25.129]                               next
[13:36:25.129]                             invokeRestart(restart)
[13:36:25.129]                             muffled <- TRUE
[13:36:25.129]                             break
[13:36:25.129]                           }
[13:36:25.129]                         }
[13:36:25.129]                       }
[13:36:25.129]                       invisible(muffled)
[13:36:25.129]                     }
[13:36:25.129]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.129]                   }
[13:36:25.129]                 }
[13:36:25.129]                 else {
[13:36:25.129]                   if (TRUE) {
[13:36:25.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.129]                     {
[13:36:25.129]                       inherits <- base::inherits
[13:36:25.129]                       invokeRestart <- base::invokeRestart
[13:36:25.129]                       is.null <- base::is.null
[13:36:25.129]                       muffled <- FALSE
[13:36:25.129]                       if (inherits(cond, "message")) {
[13:36:25.129]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.129]                         if (muffled) 
[13:36:25.129]                           invokeRestart("muffleMessage")
[13:36:25.129]                       }
[13:36:25.129]                       else if (inherits(cond, "warning")) {
[13:36:25.129]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.129]                         if (muffled) 
[13:36:25.129]                           invokeRestart("muffleWarning")
[13:36:25.129]                       }
[13:36:25.129]                       else if (inherits(cond, "condition")) {
[13:36:25.129]                         if (!is.null(pattern)) {
[13:36:25.129]                           computeRestarts <- base::computeRestarts
[13:36:25.129]                           grepl <- base::grepl
[13:36:25.129]                           restarts <- computeRestarts(cond)
[13:36:25.129]                           for (restart in restarts) {
[13:36:25.129]                             name <- restart$name
[13:36:25.129]                             if (is.null(name)) 
[13:36:25.129]                               next
[13:36:25.129]                             if (!grepl(pattern, name)) 
[13:36:25.129]                               next
[13:36:25.129]                             invokeRestart(restart)
[13:36:25.129]                             muffled <- TRUE
[13:36:25.129]                             break
[13:36:25.129]                           }
[13:36:25.129]                         }
[13:36:25.129]                       }
[13:36:25.129]                       invisible(muffled)
[13:36:25.129]                     }
[13:36:25.129]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.129]                   }
[13:36:25.129]                 }
[13:36:25.129]             }
[13:36:25.129]         }))
[13:36:25.129]     }, error = function(ex) {
[13:36:25.129]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.129]                 ...future.rng), started = ...future.startTime, 
[13:36:25.129]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.129]             version = "1.8"), class = "FutureResult")
[13:36:25.129]     }, finally = {
[13:36:25.129]         if (!identical(...future.workdir, getwd())) 
[13:36:25.129]             setwd(...future.workdir)
[13:36:25.129]         {
[13:36:25.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.129]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.129]             }
[13:36:25.129]             base::options(...future.oldOptions)
[13:36:25.129]             if (.Platform$OS.type == "windows") {
[13:36:25.129]                 old_names <- names(...future.oldEnvVars)
[13:36:25.129]                 envs <- base::Sys.getenv()
[13:36:25.129]                 names <- names(envs)
[13:36:25.129]                 common <- intersect(names, old_names)
[13:36:25.129]                 added <- setdiff(names, old_names)
[13:36:25.129]                 removed <- setdiff(old_names, names)
[13:36:25.129]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.129]                   envs[common]]
[13:36:25.129]                 NAMES <- toupper(changed)
[13:36:25.129]                 args <- list()
[13:36:25.129]                 for (kk in seq_along(NAMES)) {
[13:36:25.129]                   name <- changed[[kk]]
[13:36:25.129]                   NAME <- NAMES[[kk]]
[13:36:25.129]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.129]                     next
[13:36:25.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.129]                 }
[13:36:25.129]                 NAMES <- toupper(added)
[13:36:25.129]                 for (kk in seq_along(NAMES)) {
[13:36:25.129]                   name <- added[[kk]]
[13:36:25.129]                   NAME <- NAMES[[kk]]
[13:36:25.129]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.129]                     next
[13:36:25.129]                   args[[name]] <- ""
[13:36:25.129]                 }
[13:36:25.129]                 NAMES <- toupper(removed)
[13:36:25.129]                 for (kk in seq_along(NAMES)) {
[13:36:25.129]                   name <- removed[[kk]]
[13:36:25.129]                   NAME <- NAMES[[kk]]
[13:36:25.129]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.129]                     next
[13:36:25.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.129]                 }
[13:36:25.129]                 if (length(args) > 0) 
[13:36:25.129]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.129]             }
[13:36:25.129]             else {
[13:36:25.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.129]             }
[13:36:25.129]             {
[13:36:25.129]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.129]                   0L) {
[13:36:25.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.129]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.129]                   base::options(opts)
[13:36:25.129]                 }
[13:36:25.129]                 {
[13:36:25.129]                   {
[13:36:25.129]                     NULL
[13:36:25.129]                     RNGkind("Mersenne-Twister")
[13:36:25.129]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.129]                       inherits = FALSE)
[13:36:25.129]                   }
[13:36:25.129]                   options(future.plan = NULL)
[13:36:25.129]                   if (is.na(NA_character_)) 
[13:36:25.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.129]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.129]                     .init = FALSE)
[13:36:25.129]                 }
[13:36:25.129]             }
[13:36:25.129]         }
[13:36:25.129]     })
[13:36:25.129]     if (TRUE) {
[13:36:25.129]         base::sink(type = "output", split = FALSE)
[13:36:25.129]         if (TRUE) {
[13:36:25.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.129]         }
[13:36:25.129]         else {
[13:36:25.129]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.129]         }
[13:36:25.129]         base::close(...future.stdout)
[13:36:25.129]         ...future.stdout <- NULL
[13:36:25.129]     }
[13:36:25.129]     ...future.result$conditions <- ...future.conditions
[13:36:25.129]     ...future.result$finished <- base::Sys.time()
[13:36:25.129]     ...future.result
[13:36:25.129] }
[13:36:25.131] assign_globals() ...
[13:36:25.131] List of 2
[13:36:25.131]  $ rr: int 1
[13:36:25.131]  $ cc: int 1
[13:36:25.131]  - attr(*, "where")=List of 2
[13:36:25.131]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.131]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.131]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.131]  - attr(*, "resolved")= logi FALSE
[13:36:25.131]  - attr(*, "total_size")= num 112
[13:36:25.131]  - attr(*, "already-done")= logi TRUE
[13:36:25.134] - copied ‘rr’ to environment
[13:36:25.134] - copied ‘cc’ to environment
[13:36:25.134] assign_globals() ... done
[13:36:25.134] plan(): Setting new future strategy stack:
[13:36:25.134] List of future strategies:
[13:36:25.134] 1. sequential:
[13:36:25.134]    - args: function (..., envir = parent.frame())
[13:36:25.134]    - tweaked: FALSE
[13:36:25.134]    - call: NULL
[13:36:25.134] plan(): nbrOfWorkers() = 1
[13:36:25.135] plan(): Setting new future strategy stack:
[13:36:25.135] List of future strategies:
[13:36:25.135] 1. sequential:
[13:36:25.135]    - args: function (..., envir = parent.frame())
[13:36:25.135]    - tweaked: FALSE
[13:36:25.135]    - call: future::plan("sequential")
[13:36:25.136] plan(): nbrOfWorkers() = 1
[13:36:25.136] SequentialFuture started (and completed)
[13:36:25.136] - Launch lazy future ... done
[13:36:25.136] run() for ‘SequentialFuture’ ... done
[13:36:25.136] run() for ‘Future’ ...
[13:36:25.136] - state: ‘created’
[13:36:25.136] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.137] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.137] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.137]   - Field: ‘label’
[13:36:25.137]   - Field: ‘local’
[13:36:25.137]   - Field: ‘owner’
[13:36:25.137]   - Field: ‘envir’
[13:36:25.137]   - Field: ‘packages’
[13:36:25.137]   - Field: ‘gc’
[13:36:25.137]   - Field: ‘conditions’
[13:36:25.137]   - Field: ‘expr’
[13:36:25.138]   - Field: ‘uuid’
[13:36:25.138]   - Field: ‘seed’
[13:36:25.138]   - Field: ‘version’
[13:36:25.138]   - Field: ‘result’
[13:36:25.138]   - Field: ‘asynchronous’
[13:36:25.138]   - Field: ‘calls’
[13:36:25.138]   - Field: ‘globals’
[13:36:25.138]   - Field: ‘stdout’
[13:36:25.138]   - Field: ‘earlySignal’
[13:36:25.138]   - Field: ‘lazy’
[13:36:25.138]   - Field: ‘state’
[13:36:25.139] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.139] - Launch lazy future ...
[13:36:25.139] Packages needed by the future expression (n = 0): <none>
[13:36:25.139] Packages needed by future strategies (n = 0): <none>
[13:36:25.139] {
[13:36:25.139]     {
[13:36:25.139]         {
[13:36:25.139]             ...future.startTime <- base::Sys.time()
[13:36:25.139]             {
[13:36:25.139]                 {
[13:36:25.139]                   {
[13:36:25.139]                     base::local({
[13:36:25.139]                       has_future <- base::requireNamespace("future", 
[13:36:25.139]                         quietly = TRUE)
[13:36:25.139]                       if (has_future) {
[13:36:25.139]                         ns <- base::getNamespace("future")
[13:36:25.139]                         version <- ns[[".package"]][["version"]]
[13:36:25.139]                         if (is.null(version)) 
[13:36:25.139]                           version <- utils::packageVersion("future")
[13:36:25.139]                       }
[13:36:25.139]                       else {
[13:36:25.139]                         version <- NULL
[13:36:25.139]                       }
[13:36:25.139]                       if (!has_future || version < "1.8.0") {
[13:36:25.139]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.139]                           "", base::R.version$version.string), 
[13:36:25.139]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.139]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.139]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.139]                             "release", "version")], collapse = " "), 
[13:36:25.139]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.139]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.139]                           info)
[13:36:25.139]                         info <- base::paste(info, collapse = "; ")
[13:36:25.139]                         if (!has_future) {
[13:36:25.139]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.139]                             info)
[13:36:25.139]                         }
[13:36:25.139]                         else {
[13:36:25.139]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.139]                             info, version)
[13:36:25.139]                         }
[13:36:25.139]                         base::stop(msg)
[13:36:25.139]                       }
[13:36:25.139]                     })
[13:36:25.139]                   }
[13:36:25.139]                   ...future.strategy.old <- future::plan("list")
[13:36:25.139]                   options(future.plan = NULL)
[13:36:25.139]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.139]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.139]                 }
[13:36:25.139]                 ...future.workdir <- getwd()
[13:36:25.139]             }
[13:36:25.139]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.139]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.139]         }
[13:36:25.139]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.139]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.139]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.139]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.139]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.139]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.139]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.139]             base::names(...future.oldOptions))
[13:36:25.139]     }
[13:36:25.139]     if (FALSE) {
[13:36:25.139]     }
[13:36:25.139]     else {
[13:36:25.139]         if (TRUE) {
[13:36:25.139]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.139]                 open = "w")
[13:36:25.139]         }
[13:36:25.139]         else {
[13:36:25.139]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.139]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.139]         }
[13:36:25.139]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.139]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.139]             base::sink(type = "output", split = FALSE)
[13:36:25.139]             base::close(...future.stdout)
[13:36:25.139]         }, add = TRUE)
[13:36:25.139]     }
[13:36:25.139]     ...future.frame <- base::sys.nframe()
[13:36:25.139]     ...future.conditions <- base::list()
[13:36:25.139]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.139]     if (FALSE) {
[13:36:25.139]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.139]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.139]     }
[13:36:25.139]     ...future.result <- base::tryCatch({
[13:36:25.139]         base::withCallingHandlers({
[13:36:25.139]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.139]                 rr, cc)))
[13:36:25.139]             future::FutureResult(value = ...future.value$value, 
[13:36:25.139]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.139]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.139]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.139]                     ...future.globalenv.names))
[13:36:25.139]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.139]         }, condition = base::local({
[13:36:25.139]             c <- base::c
[13:36:25.139]             inherits <- base::inherits
[13:36:25.139]             invokeRestart <- base::invokeRestart
[13:36:25.139]             length <- base::length
[13:36:25.139]             list <- base::list
[13:36:25.139]             seq.int <- base::seq.int
[13:36:25.139]             signalCondition <- base::signalCondition
[13:36:25.139]             sys.calls <- base::sys.calls
[13:36:25.139]             `[[` <- base::`[[`
[13:36:25.139]             `+` <- base::`+`
[13:36:25.139]             `<<-` <- base::`<<-`
[13:36:25.139]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.139]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.139]                   3L)]
[13:36:25.139]             }
[13:36:25.139]             function(cond) {
[13:36:25.139]                 is_error <- inherits(cond, "error")
[13:36:25.139]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.139]                   NULL)
[13:36:25.139]                 if (is_error) {
[13:36:25.139]                   sessionInformation <- function() {
[13:36:25.139]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.139]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.139]                       search = base::search(), system = base::Sys.info())
[13:36:25.139]                   }
[13:36:25.139]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.139]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.139]                     cond$call), session = sessionInformation(), 
[13:36:25.139]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.139]                   signalCondition(cond)
[13:36:25.139]                 }
[13:36:25.139]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.139]                 "immediateCondition"))) {
[13:36:25.139]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.139]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.139]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.139]                   if (TRUE && !signal) {
[13:36:25.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.139]                     {
[13:36:25.139]                       inherits <- base::inherits
[13:36:25.139]                       invokeRestart <- base::invokeRestart
[13:36:25.139]                       is.null <- base::is.null
[13:36:25.139]                       muffled <- FALSE
[13:36:25.139]                       if (inherits(cond, "message")) {
[13:36:25.139]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.139]                         if (muffled) 
[13:36:25.139]                           invokeRestart("muffleMessage")
[13:36:25.139]                       }
[13:36:25.139]                       else if (inherits(cond, "warning")) {
[13:36:25.139]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.139]                         if (muffled) 
[13:36:25.139]                           invokeRestart("muffleWarning")
[13:36:25.139]                       }
[13:36:25.139]                       else if (inherits(cond, "condition")) {
[13:36:25.139]                         if (!is.null(pattern)) {
[13:36:25.139]                           computeRestarts <- base::computeRestarts
[13:36:25.139]                           grepl <- base::grepl
[13:36:25.139]                           restarts <- computeRestarts(cond)
[13:36:25.139]                           for (restart in restarts) {
[13:36:25.139]                             name <- restart$name
[13:36:25.139]                             if (is.null(name)) 
[13:36:25.139]                               next
[13:36:25.139]                             if (!grepl(pattern, name)) 
[13:36:25.139]                               next
[13:36:25.139]                             invokeRestart(restart)
[13:36:25.139]                             muffled <- TRUE
[13:36:25.139]                             break
[13:36:25.139]                           }
[13:36:25.139]                         }
[13:36:25.139]                       }
[13:36:25.139]                       invisible(muffled)
[13:36:25.139]                     }
[13:36:25.139]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.139]                   }
[13:36:25.139]                 }
[13:36:25.139]                 else {
[13:36:25.139]                   if (TRUE) {
[13:36:25.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.139]                     {
[13:36:25.139]                       inherits <- base::inherits
[13:36:25.139]                       invokeRestart <- base::invokeRestart
[13:36:25.139]                       is.null <- base::is.null
[13:36:25.139]                       muffled <- FALSE
[13:36:25.139]                       if (inherits(cond, "message")) {
[13:36:25.139]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.139]                         if (muffled) 
[13:36:25.139]                           invokeRestart("muffleMessage")
[13:36:25.139]                       }
[13:36:25.139]                       else if (inherits(cond, "warning")) {
[13:36:25.139]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.139]                         if (muffled) 
[13:36:25.139]                           invokeRestart("muffleWarning")
[13:36:25.139]                       }
[13:36:25.139]                       else if (inherits(cond, "condition")) {
[13:36:25.139]                         if (!is.null(pattern)) {
[13:36:25.139]                           computeRestarts <- base::computeRestarts
[13:36:25.139]                           grepl <- base::grepl
[13:36:25.139]                           restarts <- computeRestarts(cond)
[13:36:25.139]                           for (restart in restarts) {
[13:36:25.139]                             name <- restart$name
[13:36:25.139]                             if (is.null(name)) 
[13:36:25.139]                               next
[13:36:25.139]                             if (!grepl(pattern, name)) 
[13:36:25.139]                               next
[13:36:25.139]                             invokeRestart(restart)
[13:36:25.139]                             muffled <- TRUE
[13:36:25.139]                             break
[13:36:25.139]                           }
[13:36:25.139]                         }
[13:36:25.139]                       }
[13:36:25.139]                       invisible(muffled)
[13:36:25.139]                     }
[13:36:25.139]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.139]                   }
[13:36:25.139]                 }
[13:36:25.139]             }
[13:36:25.139]         }))
[13:36:25.139]     }, error = function(ex) {
[13:36:25.139]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.139]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.139]                 ...future.rng), started = ...future.startTime, 
[13:36:25.139]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.139]             version = "1.8"), class = "FutureResult")
[13:36:25.139]     }, finally = {
[13:36:25.139]         if (!identical(...future.workdir, getwd())) 
[13:36:25.139]             setwd(...future.workdir)
[13:36:25.139]         {
[13:36:25.139]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.139]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.139]             }
[13:36:25.139]             base::options(...future.oldOptions)
[13:36:25.139]             if (.Platform$OS.type == "windows") {
[13:36:25.139]                 old_names <- names(...future.oldEnvVars)
[13:36:25.139]                 envs <- base::Sys.getenv()
[13:36:25.139]                 names <- names(envs)
[13:36:25.139]                 common <- intersect(names, old_names)
[13:36:25.139]                 added <- setdiff(names, old_names)
[13:36:25.139]                 removed <- setdiff(old_names, names)
[13:36:25.139]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.139]                   envs[common]]
[13:36:25.139]                 NAMES <- toupper(changed)
[13:36:25.139]                 args <- list()
[13:36:25.139]                 for (kk in seq_along(NAMES)) {
[13:36:25.139]                   name <- changed[[kk]]
[13:36:25.139]                   NAME <- NAMES[[kk]]
[13:36:25.139]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.139]                     next
[13:36:25.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.139]                 }
[13:36:25.139]                 NAMES <- toupper(added)
[13:36:25.139]                 for (kk in seq_along(NAMES)) {
[13:36:25.139]                   name <- added[[kk]]
[13:36:25.139]                   NAME <- NAMES[[kk]]
[13:36:25.139]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.139]                     next
[13:36:25.139]                   args[[name]] <- ""
[13:36:25.139]                 }
[13:36:25.139]                 NAMES <- toupper(removed)
[13:36:25.139]                 for (kk in seq_along(NAMES)) {
[13:36:25.139]                   name <- removed[[kk]]
[13:36:25.139]                   NAME <- NAMES[[kk]]
[13:36:25.139]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.139]                     next
[13:36:25.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.139]                 }
[13:36:25.139]                 if (length(args) > 0) 
[13:36:25.139]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.139]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.139]             }
[13:36:25.139]             else {
[13:36:25.139]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.139]             }
[13:36:25.139]             {
[13:36:25.139]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.139]                   0L) {
[13:36:25.139]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.139]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.139]                   base::options(opts)
[13:36:25.139]                 }
[13:36:25.139]                 {
[13:36:25.139]                   {
[13:36:25.139]                     NULL
[13:36:25.139]                     RNGkind("Mersenne-Twister")
[13:36:25.139]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.139]                       inherits = FALSE)
[13:36:25.139]                   }
[13:36:25.139]                   options(future.plan = NULL)
[13:36:25.139]                   if (is.na(NA_character_)) 
[13:36:25.139]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.139]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.139]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.139]                     .init = FALSE)
[13:36:25.139]                 }
[13:36:25.139]             }
[13:36:25.139]         }
[13:36:25.139]     })
[13:36:25.139]     if (TRUE) {
[13:36:25.139]         base::sink(type = "output", split = FALSE)
[13:36:25.139]         if (TRUE) {
[13:36:25.139]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.139]         }
[13:36:25.139]         else {
[13:36:25.139]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.139]         }
[13:36:25.139]         base::close(...future.stdout)
[13:36:25.139]         ...future.stdout <- NULL
[13:36:25.139]     }
[13:36:25.139]     ...future.result$conditions <- ...future.conditions
[13:36:25.139]     ...future.result$finished <- base::Sys.time()
[13:36:25.139]     ...future.result
[13:36:25.139] }
[13:36:25.141] assign_globals() ...
[13:36:25.141] List of 2
[13:36:25.141]  $ rr: int 2
[13:36:25.141]  $ cc: int 1
[13:36:25.141]  - attr(*, "where")=List of 2
[13:36:25.141]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.141]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.141]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.141]  - attr(*, "resolved")= logi FALSE
[13:36:25.141]  - attr(*, "total_size")= num 112
[13:36:25.141]  - attr(*, "already-done")= logi TRUE
[13:36:25.145] - copied ‘rr’ to environment
[13:36:25.145] - copied ‘cc’ to environment
[13:36:25.145] assign_globals() ... done
[13:36:25.145] plan(): Setting new future strategy stack:
[13:36:25.145] List of future strategies:
[13:36:25.145] 1. sequential:
[13:36:25.145]    - args: function (..., envir = parent.frame())
[13:36:25.145]    - tweaked: FALSE
[13:36:25.145]    - call: NULL
[13:36:25.146] plan(): nbrOfWorkers() = 1
[13:36:25.146] plan(): Setting new future strategy stack:
[13:36:25.147] List of future strategies:
[13:36:25.147] 1. sequential:
[13:36:25.147]    - args: function (..., envir = parent.frame())
[13:36:25.147]    - tweaked: FALSE
[13:36:25.147]    - call: future::plan("sequential")
[13:36:25.147] plan(): nbrOfWorkers() = 1
[13:36:25.147] SequentialFuture started (and completed)
[13:36:25.147] - Launch lazy future ... done
[13:36:25.147] run() for ‘SequentialFuture’ ... done
[13:36:25.147] run() for ‘Future’ ...
[13:36:25.147] - state: ‘created’
[13:36:25.148] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.148] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.148] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.148]   - Field: ‘label’
[13:36:25.148]   - Field: ‘local’
[13:36:25.148]   - Field: ‘owner’
[13:36:25.148]   - Field: ‘envir’
[13:36:25.148]   - Field: ‘packages’
[13:36:25.149]   - Field: ‘gc’
[13:36:25.149]   - Field: ‘conditions’
[13:36:25.149]   - Field: ‘expr’
[13:36:25.149]   - Field: ‘uuid’
[13:36:25.149]   - Field: ‘seed’
[13:36:25.149]   - Field: ‘version’
[13:36:25.149]   - Field: ‘result’
[13:36:25.149]   - Field: ‘asynchronous’
[13:36:25.149]   - Field: ‘calls’
[13:36:25.149]   - Field: ‘globals’
[13:36:25.149]   - Field: ‘stdout’
[13:36:25.150]   - Field: ‘earlySignal’
[13:36:25.150]   - Field: ‘lazy’
[13:36:25.150]   - Field: ‘state’
[13:36:25.150] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.150] - Launch lazy future ...
[13:36:25.150] Packages needed by the future expression (n = 0): <none>
[13:36:25.150] Packages needed by future strategies (n = 0): <none>
[13:36:25.151] {
[13:36:25.151]     {
[13:36:25.151]         {
[13:36:25.151]             ...future.startTime <- base::Sys.time()
[13:36:25.151]             {
[13:36:25.151]                 {
[13:36:25.151]                   {
[13:36:25.151]                     base::local({
[13:36:25.151]                       has_future <- base::requireNamespace("future", 
[13:36:25.151]                         quietly = TRUE)
[13:36:25.151]                       if (has_future) {
[13:36:25.151]                         ns <- base::getNamespace("future")
[13:36:25.151]                         version <- ns[[".package"]][["version"]]
[13:36:25.151]                         if (is.null(version)) 
[13:36:25.151]                           version <- utils::packageVersion("future")
[13:36:25.151]                       }
[13:36:25.151]                       else {
[13:36:25.151]                         version <- NULL
[13:36:25.151]                       }
[13:36:25.151]                       if (!has_future || version < "1.8.0") {
[13:36:25.151]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.151]                           "", base::R.version$version.string), 
[13:36:25.151]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.151]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.151]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.151]                             "release", "version")], collapse = " "), 
[13:36:25.151]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.151]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.151]                           info)
[13:36:25.151]                         info <- base::paste(info, collapse = "; ")
[13:36:25.151]                         if (!has_future) {
[13:36:25.151]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.151]                             info)
[13:36:25.151]                         }
[13:36:25.151]                         else {
[13:36:25.151]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.151]                             info, version)
[13:36:25.151]                         }
[13:36:25.151]                         base::stop(msg)
[13:36:25.151]                       }
[13:36:25.151]                     })
[13:36:25.151]                   }
[13:36:25.151]                   ...future.strategy.old <- future::plan("list")
[13:36:25.151]                   options(future.plan = NULL)
[13:36:25.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.151]                 }
[13:36:25.151]                 ...future.workdir <- getwd()
[13:36:25.151]             }
[13:36:25.151]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.151]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.151]         }
[13:36:25.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.151]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.151]             base::names(...future.oldOptions))
[13:36:25.151]     }
[13:36:25.151]     if (FALSE) {
[13:36:25.151]     }
[13:36:25.151]     else {
[13:36:25.151]         if (TRUE) {
[13:36:25.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.151]                 open = "w")
[13:36:25.151]         }
[13:36:25.151]         else {
[13:36:25.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.151]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.151]         }
[13:36:25.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.151]             base::sink(type = "output", split = FALSE)
[13:36:25.151]             base::close(...future.stdout)
[13:36:25.151]         }, add = TRUE)
[13:36:25.151]     }
[13:36:25.151]     ...future.frame <- base::sys.nframe()
[13:36:25.151]     ...future.conditions <- base::list()
[13:36:25.151]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.151]     if (FALSE) {
[13:36:25.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.151]     }
[13:36:25.151]     ...future.result <- base::tryCatch({
[13:36:25.151]         base::withCallingHandlers({
[13:36:25.151]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.151]                 rr, cc)))
[13:36:25.151]             future::FutureResult(value = ...future.value$value, 
[13:36:25.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.151]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.151]                     ...future.globalenv.names))
[13:36:25.151]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.151]         }, condition = base::local({
[13:36:25.151]             c <- base::c
[13:36:25.151]             inherits <- base::inherits
[13:36:25.151]             invokeRestart <- base::invokeRestart
[13:36:25.151]             length <- base::length
[13:36:25.151]             list <- base::list
[13:36:25.151]             seq.int <- base::seq.int
[13:36:25.151]             signalCondition <- base::signalCondition
[13:36:25.151]             sys.calls <- base::sys.calls
[13:36:25.151]             `[[` <- base::`[[`
[13:36:25.151]             `+` <- base::`+`
[13:36:25.151]             `<<-` <- base::`<<-`
[13:36:25.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.151]                   3L)]
[13:36:25.151]             }
[13:36:25.151]             function(cond) {
[13:36:25.151]                 is_error <- inherits(cond, "error")
[13:36:25.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.151]                   NULL)
[13:36:25.151]                 if (is_error) {
[13:36:25.151]                   sessionInformation <- function() {
[13:36:25.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.151]                       search = base::search(), system = base::Sys.info())
[13:36:25.151]                   }
[13:36:25.151]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.151]                     cond$call), session = sessionInformation(), 
[13:36:25.151]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.151]                   signalCondition(cond)
[13:36:25.151]                 }
[13:36:25.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.151]                 "immediateCondition"))) {
[13:36:25.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.151]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.151]                   if (TRUE && !signal) {
[13:36:25.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.151]                     {
[13:36:25.151]                       inherits <- base::inherits
[13:36:25.151]                       invokeRestart <- base::invokeRestart
[13:36:25.151]                       is.null <- base::is.null
[13:36:25.151]                       muffled <- FALSE
[13:36:25.151]                       if (inherits(cond, "message")) {
[13:36:25.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.151]                         if (muffled) 
[13:36:25.151]                           invokeRestart("muffleMessage")
[13:36:25.151]                       }
[13:36:25.151]                       else if (inherits(cond, "warning")) {
[13:36:25.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.151]                         if (muffled) 
[13:36:25.151]                           invokeRestart("muffleWarning")
[13:36:25.151]                       }
[13:36:25.151]                       else if (inherits(cond, "condition")) {
[13:36:25.151]                         if (!is.null(pattern)) {
[13:36:25.151]                           computeRestarts <- base::computeRestarts
[13:36:25.151]                           grepl <- base::grepl
[13:36:25.151]                           restarts <- computeRestarts(cond)
[13:36:25.151]                           for (restart in restarts) {
[13:36:25.151]                             name <- restart$name
[13:36:25.151]                             if (is.null(name)) 
[13:36:25.151]                               next
[13:36:25.151]                             if (!grepl(pattern, name)) 
[13:36:25.151]                               next
[13:36:25.151]                             invokeRestart(restart)
[13:36:25.151]                             muffled <- TRUE
[13:36:25.151]                             break
[13:36:25.151]                           }
[13:36:25.151]                         }
[13:36:25.151]                       }
[13:36:25.151]                       invisible(muffled)
[13:36:25.151]                     }
[13:36:25.151]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.151]                   }
[13:36:25.151]                 }
[13:36:25.151]                 else {
[13:36:25.151]                   if (TRUE) {
[13:36:25.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.151]                     {
[13:36:25.151]                       inherits <- base::inherits
[13:36:25.151]                       invokeRestart <- base::invokeRestart
[13:36:25.151]                       is.null <- base::is.null
[13:36:25.151]                       muffled <- FALSE
[13:36:25.151]                       if (inherits(cond, "message")) {
[13:36:25.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.151]                         if (muffled) 
[13:36:25.151]                           invokeRestart("muffleMessage")
[13:36:25.151]                       }
[13:36:25.151]                       else if (inherits(cond, "warning")) {
[13:36:25.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.151]                         if (muffled) 
[13:36:25.151]                           invokeRestart("muffleWarning")
[13:36:25.151]                       }
[13:36:25.151]                       else if (inherits(cond, "condition")) {
[13:36:25.151]                         if (!is.null(pattern)) {
[13:36:25.151]                           computeRestarts <- base::computeRestarts
[13:36:25.151]                           grepl <- base::grepl
[13:36:25.151]                           restarts <- computeRestarts(cond)
[13:36:25.151]                           for (restart in restarts) {
[13:36:25.151]                             name <- restart$name
[13:36:25.151]                             if (is.null(name)) 
[13:36:25.151]                               next
[13:36:25.151]                             if (!grepl(pattern, name)) 
[13:36:25.151]                               next
[13:36:25.151]                             invokeRestart(restart)
[13:36:25.151]                             muffled <- TRUE
[13:36:25.151]                             break
[13:36:25.151]                           }
[13:36:25.151]                         }
[13:36:25.151]                       }
[13:36:25.151]                       invisible(muffled)
[13:36:25.151]                     }
[13:36:25.151]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.151]                   }
[13:36:25.151]                 }
[13:36:25.151]             }
[13:36:25.151]         }))
[13:36:25.151]     }, error = function(ex) {
[13:36:25.151]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.151]                 ...future.rng), started = ...future.startTime, 
[13:36:25.151]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.151]             version = "1.8"), class = "FutureResult")
[13:36:25.151]     }, finally = {
[13:36:25.151]         if (!identical(...future.workdir, getwd())) 
[13:36:25.151]             setwd(...future.workdir)
[13:36:25.151]         {
[13:36:25.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.151]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.151]             }
[13:36:25.151]             base::options(...future.oldOptions)
[13:36:25.151]             if (.Platform$OS.type == "windows") {
[13:36:25.151]                 old_names <- names(...future.oldEnvVars)
[13:36:25.151]                 envs <- base::Sys.getenv()
[13:36:25.151]                 names <- names(envs)
[13:36:25.151]                 common <- intersect(names, old_names)
[13:36:25.151]                 added <- setdiff(names, old_names)
[13:36:25.151]                 removed <- setdiff(old_names, names)
[13:36:25.151]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.151]                   envs[common]]
[13:36:25.151]                 NAMES <- toupper(changed)
[13:36:25.151]                 args <- list()
[13:36:25.151]                 for (kk in seq_along(NAMES)) {
[13:36:25.151]                   name <- changed[[kk]]
[13:36:25.151]                   NAME <- NAMES[[kk]]
[13:36:25.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.151]                     next
[13:36:25.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.151]                 }
[13:36:25.151]                 NAMES <- toupper(added)
[13:36:25.151]                 for (kk in seq_along(NAMES)) {
[13:36:25.151]                   name <- added[[kk]]
[13:36:25.151]                   NAME <- NAMES[[kk]]
[13:36:25.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.151]                     next
[13:36:25.151]                   args[[name]] <- ""
[13:36:25.151]                 }
[13:36:25.151]                 NAMES <- toupper(removed)
[13:36:25.151]                 for (kk in seq_along(NAMES)) {
[13:36:25.151]                   name <- removed[[kk]]
[13:36:25.151]                   NAME <- NAMES[[kk]]
[13:36:25.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.151]                     next
[13:36:25.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.151]                 }
[13:36:25.151]                 if (length(args) > 0) 
[13:36:25.151]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.151]             }
[13:36:25.151]             else {
[13:36:25.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.151]             }
[13:36:25.151]             {
[13:36:25.151]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.151]                   0L) {
[13:36:25.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.151]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.151]                   base::options(opts)
[13:36:25.151]                 }
[13:36:25.151]                 {
[13:36:25.151]                   {
[13:36:25.151]                     NULL
[13:36:25.151]                     RNGkind("Mersenne-Twister")
[13:36:25.151]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.151]                       inherits = FALSE)
[13:36:25.151]                   }
[13:36:25.151]                   options(future.plan = NULL)
[13:36:25.151]                   if (is.na(NA_character_)) 
[13:36:25.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.151]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.151]                     .init = FALSE)
[13:36:25.151]                 }
[13:36:25.151]             }
[13:36:25.151]         }
[13:36:25.151]     })
[13:36:25.151]     if (TRUE) {
[13:36:25.151]         base::sink(type = "output", split = FALSE)
[13:36:25.151]         if (TRUE) {
[13:36:25.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.151]         }
[13:36:25.151]         else {
[13:36:25.151]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.151]         }
[13:36:25.151]         base::close(...future.stdout)
[13:36:25.151]         ...future.stdout <- NULL
[13:36:25.151]     }
[13:36:25.151]     ...future.result$conditions <- ...future.conditions
[13:36:25.151]     ...future.result$finished <- base::Sys.time()
[13:36:25.151]     ...future.result
[13:36:25.151] }
[13:36:25.152] assign_globals() ...
[13:36:25.152] List of 2
[13:36:25.152]  $ rr: int 3
[13:36:25.152]  $ cc: int 1
[13:36:25.152]  - attr(*, "where")=List of 2
[13:36:25.152]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.152]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.152]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.152]  - attr(*, "resolved")= logi FALSE
[13:36:25.152]  - attr(*, "total_size")= num 112
[13:36:25.152]  - attr(*, "already-done")= logi TRUE
[13:36:25.155] - copied ‘rr’ to environment
[13:36:25.155] - copied ‘cc’ to environment
[13:36:25.155] assign_globals() ... done
[13:36:25.155] plan(): Setting new future strategy stack:
[13:36:25.155] List of future strategies:
[13:36:25.155] 1. sequential:
[13:36:25.155]    - args: function (..., envir = parent.frame())
[13:36:25.155]    - tweaked: FALSE
[13:36:25.155]    - call: NULL
[13:36:25.156] plan(): nbrOfWorkers() = 1
[13:36:25.156] plan(): Setting new future strategy stack:
[13:36:25.156] List of future strategies:
[13:36:25.156] 1. sequential:
[13:36:25.156]    - args: function (..., envir = parent.frame())
[13:36:25.156]    - tweaked: FALSE
[13:36:25.156]    - call: future::plan("sequential")
[13:36:25.157] plan(): nbrOfWorkers() = 1
[13:36:25.157] SequentialFuture started (and completed)
[13:36:25.157] - Launch lazy future ... done
[13:36:25.157] run() for ‘SequentialFuture’ ... done
[13:36:25.157] run() for ‘Future’ ...
[13:36:25.157] - state: ‘created’
[13:36:25.158] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.158] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.158] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.158]   - Field: ‘label’
[13:36:25.158]   - Field: ‘local’
[13:36:25.158]   - Field: ‘owner’
[13:36:25.158]   - Field: ‘envir’
[13:36:25.158]   - Field: ‘packages’
[13:36:25.159]   - Field: ‘gc’
[13:36:25.159]   - Field: ‘conditions’
[13:36:25.159]   - Field: ‘expr’
[13:36:25.159]   - Field: ‘uuid’
[13:36:25.159]   - Field: ‘seed’
[13:36:25.159]   - Field: ‘version’
[13:36:25.159]   - Field: ‘result’
[13:36:25.159]   - Field: ‘asynchronous’
[13:36:25.159]   - Field: ‘calls’
[13:36:25.159]   - Field: ‘globals’
[13:36:25.159]   - Field: ‘stdout’
[13:36:25.159]   - Field: ‘earlySignal’
[13:36:25.160]   - Field: ‘lazy’
[13:36:25.160]   - Field: ‘state’
[13:36:25.160] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.160] - Launch lazy future ...
[13:36:25.160] Packages needed by the future expression (n = 0): <none>
[13:36:25.160] Packages needed by future strategies (n = 0): <none>
[13:36:25.160] {
[13:36:25.160]     {
[13:36:25.160]         {
[13:36:25.160]             ...future.startTime <- base::Sys.time()
[13:36:25.160]             {
[13:36:25.160]                 {
[13:36:25.160]                   {
[13:36:25.160]                     base::local({
[13:36:25.160]                       has_future <- base::requireNamespace("future", 
[13:36:25.160]                         quietly = TRUE)
[13:36:25.160]                       if (has_future) {
[13:36:25.160]                         ns <- base::getNamespace("future")
[13:36:25.160]                         version <- ns[[".package"]][["version"]]
[13:36:25.160]                         if (is.null(version)) 
[13:36:25.160]                           version <- utils::packageVersion("future")
[13:36:25.160]                       }
[13:36:25.160]                       else {
[13:36:25.160]                         version <- NULL
[13:36:25.160]                       }
[13:36:25.160]                       if (!has_future || version < "1.8.0") {
[13:36:25.160]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.160]                           "", base::R.version$version.string), 
[13:36:25.160]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.160]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.160]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.160]                             "release", "version")], collapse = " "), 
[13:36:25.160]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.160]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.160]                           info)
[13:36:25.160]                         info <- base::paste(info, collapse = "; ")
[13:36:25.160]                         if (!has_future) {
[13:36:25.160]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.160]                             info)
[13:36:25.160]                         }
[13:36:25.160]                         else {
[13:36:25.160]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.160]                             info, version)
[13:36:25.160]                         }
[13:36:25.160]                         base::stop(msg)
[13:36:25.160]                       }
[13:36:25.160]                     })
[13:36:25.160]                   }
[13:36:25.160]                   ...future.strategy.old <- future::plan("list")
[13:36:25.160]                   options(future.plan = NULL)
[13:36:25.160]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.160]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.160]                 }
[13:36:25.160]                 ...future.workdir <- getwd()
[13:36:25.160]             }
[13:36:25.160]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.160]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.160]         }
[13:36:25.160]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.160]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.160]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.160]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.160]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.160]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.160]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.160]             base::names(...future.oldOptions))
[13:36:25.160]     }
[13:36:25.160]     if (FALSE) {
[13:36:25.160]     }
[13:36:25.160]     else {
[13:36:25.160]         if (TRUE) {
[13:36:25.160]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.160]                 open = "w")
[13:36:25.160]         }
[13:36:25.160]         else {
[13:36:25.160]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.160]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.160]         }
[13:36:25.160]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.160]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.160]             base::sink(type = "output", split = FALSE)
[13:36:25.160]             base::close(...future.stdout)
[13:36:25.160]         }, add = TRUE)
[13:36:25.160]     }
[13:36:25.160]     ...future.frame <- base::sys.nframe()
[13:36:25.160]     ...future.conditions <- base::list()
[13:36:25.160]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.160]     if (FALSE) {
[13:36:25.160]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.160]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.160]     }
[13:36:25.160]     ...future.result <- base::tryCatch({
[13:36:25.160]         base::withCallingHandlers({
[13:36:25.160]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.160]                 rr, cc)))
[13:36:25.160]             future::FutureResult(value = ...future.value$value, 
[13:36:25.160]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.160]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.160]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.160]                     ...future.globalenv.names))
[13:36:25.160]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.160]         }, condition = base::local({
[13:36:25.160]             c <- base::c
[13:36:25.160]             inherits <- base::inherits
[13:36:25.160]             invokeRestart <- base::invokeRestart
[13:36:25.160]             length <- base::length
[13:36:25.160]             list <- base::list
[13:36:25.160]             seq.int <- base::seq.int
[13:36:25.160]             signalCondition <- base::signalCondition
[13:36:25.160]             sys.calls <- base::sys.calls
[13:36:25.160]             `[[` <- base::`[[`
[13:36:25.160]             `+` <- base::`+`
[13:36:25.160]             `<<-` <- base::`<<-`
[13:36:25.160]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.160]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.160]                   3L)]
[13:36:25.160]             }
[13:36:25.160]             function(cond) {
[13:36:25.160]                 is_error <- inherits(cond, "error")
[13:36:25.160]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.160]                   NULL)
[13:36:25.160]                 if (is_error) {
[13:36:25.160]                   sessionInformation <- function() {
[13:36:25.160]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.160]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.160]                       search = base::search(), system = base::Sys.info())
[13:36:25.160]                   }
[13:36:25.160]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.160]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.160]                     cond$call), session = sessionInformation(), 
[13:36:25.160]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.160]                   signalCondition(cond)
[13:36:25.160]                 }
[13:36:25.160]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.160]                 "immediateCondition"))) {
[13:36:25.160]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.160]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.160]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.160]                   if (TRUE && !signal) {
[13:36:25.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.160]                     {
[13:36:25.160]                       inherits <- base::inherits
[13:36:25.160]                       invokeRestart <- base::invokeRestart
[13:36:25.160]                       is.null <- base::is.null
[13:36:25.160]                       muffled <- FALSE
[13:36:25.160]                       if (inherits(cond, "message")) {
[13:36:25.160]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.160]                         if (muffled) 
[13:36:25.160]                           invokeRestart("muffleMessage")
[13:36:25.160]                       }
[13:36:25.160]                       else if (inherits(cond, "warning")) {
[13:36:25.160]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.160]                         if (muffled) 
[13:36:25.160]                           invokeRestart("muffleWarning")
[13:36:25.160]                       }
[13:36:25.160]                       else if (inherits(cond, "condition")) {
[13:36:25.160]                         if (!is.null(pattern)) {
[13:36:25.160]                           computeRestarts <- base::computeRestarts
[13:36:25.160]                           grepl <- base::grepl
[13:36:25.160]                           restarts <- computeRestarts(cond)
[13:36:25.160]                           for (restart in restarts) {
[13:36:25.160]                             name <- restart$name
[13:36:25.160]                             if (is.null(name)) 
[13:36:25.160]                               next
[13:36:25.160]                             if (!grepl(pattern, name)) 
[13:36:25.160]                               next
[13:36:25.160]                             invokeRestart(restart)
[13:36:25.160]                             muffled <- TRUE
[13:36:25.160]                             break
[13:36:25.160]                           }
[13:36:25.160]                         }
[13:36:25.160]                       }
[13:36:25.160]                       invisible(muffled)
[13:36:25.160]                     }
[13:36:25.160]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.160]                   }
[13:36:25.160]                 }
[13:36:25.160]                 else {
[13:36:25.160]                   if (TRUE) {
[13:36:25.160]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.160]                     {
[13:36:25.160]                       inherits <- base::inherits
[13:36:25.160]                       invokeRestart <- base::invokeRestart
[13:36:25.160]                       is.null <- base::is.null
[13:36:25.160]                       muffled <- FALSE
[13:36:25.160]                       if (inherits(cond, "message")) {
[13:36:25.160]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.160]                         if (muffled) 
[13:36:25.160]                           invokeRestart("muffleMessage")
[13:36:25.160]                       }
[13:36:25.160]                       else if (inherits(cond, "warning")) {
[13:36:25.160]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.160]                         if (muffled) 
[13:36:25.160]                           invokeRestart("muffleWarning")
[13:36:25.160]                       }
[13:36:25.160]                       else if (inherits(cond, "condition")) {
[13:36:25.160]                         if (!is.null(pattern)) {
[13:36:25.160]                           computeRestarts <- base::computeRestarts
[13:36:25.160]                           grepl <- base::grepl
[13:36:25.160]                           restarts <- computeRestarts(cond)
[13:36:25.160]                           for (restart in restarts) {
[13:36:25.160]                             name <- restart$name
[13:36:25.160]                             if (is.null(name)) 
[13:36:25.160]                               next
[13:36:25.160]                             if (!grepl(pattern, name)) 
[13:36:25.160]                               next
[13:36:25.160]                             invokeRestart(restart)
[13:36:25.160]                             muffled <- TRUE
[13:36:25.160]                             break
[13:36:25.160]                           }
[13:36:25.160]                         }
[13:36:25.160]                       }
[13:36:25.160]                       invisible(muffled)
[13:36:25.160]                     }
[13:36:25.160]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.160]                   }
[13:36:25.160]                 }
[13:36:25.160]             }
[13:36:25.160]         }))
[13:36:25.160]     }, error = function(ex) {
[13:36:25.160]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.160]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.160]                 ...future.rng), started = ...future.startTime, 
[13:36:25.160]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.160]             version = "1.8"), class = "FutureResult")
[13:36:25.160]     }, finally = {
[13:36:25.160]         if (!identical(...future.workdir, getwd())) 
[13:36:25.160]             setwd(...future.workdir)
[13:36:25.160]         {
[13:36:25.160]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.160]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.160]             }
[13:36:25.160]             base::options(...future.oldOptions)
[13:36:25.160]             if (.Platform$OS.type == "windows") {
[13:36:25.160]                 old_names <- names(...future.oldEnvVars)
[13:36:25.160]                 envs <- base::Sys.getenv()
[13:36:25.160]                 names <- names(envs)
[13:36:25.160]                 common <- intersect(names, old_names)
[13:36:25.160]                 added <- setdiff(names, old_names)
[13:36:25.160]                 removed <- setdiff(old_names, names)
[13:36:25.160]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.160]                   envs[common]]
[13:36:25.160]                 NAMES <- toupper(changed)
[13:36:25.160]                 args <- list()
[13:36:25.160]                 for (kk in seq_along(NAMES)) {
[13:36:25.160]                   name <- changed[[kk]]
[13:36:25.160]                   NAME <- NAMES[[kk]]
[13:36:25.160]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.160]                     next
[13:36:25.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.160]                 }
[13:36:25.160]                 NAMES <- toupper(added)
[13:36:25.160]                 for (kk in seq_along(NAMES)) {
[13:36:25.160]                   name <- added[[kk]]
[13:36:25.160]                   NAME <- NAMES[[kk]]
[13:36:25.160]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.160]                     next
[13:36:25.160]                   args[[name]] <- ""
[13:36:25.160]                 }
[13:36:25.160]                 NAMES <- toupper(removed)
[13:36:25.160]                 for (kk in seq_along(NAMES)) {
[13:36:25.160]                   name <- removed[[kk]]
[13:36:25.160]                   NAME <- NAMES[[kk]]
[13:36:25.160]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.160]                     next
[13:36:25.160]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.160]                 }
[13:36:25.160]                 if (length(args) > 0) 
[13:36:25.160]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.160]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.160]             }
[13:36:25.160]             else {
[13:36:25.160]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.160]             }
[13:36:25.160]             {
[13:36:25.160]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.160]                   0L) {
[13:36:25.160]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.160]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.160]                   base::options(opts)
[13:36:25.160]                 }
[13:36:25.160]                 {
[13:36:25.160]                   {
[13:36:25.160]                     NULL
[13:36:25.160]                     RNGkind("Mersenne-Twister")
[13:36:25.160]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.160]                       inherits = FALSE)
[13:36:25.160]                   }
[13:36:25.160]                   options(future.plan = NULL)
[13:36:25.160]                   if (is.na(NA_character_)) 
[13:36:25.160]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.160]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.160]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.160]                     .init = FALSE)
[13:36:25.160]                 }
[13:36:25.160]             }
[13:36:25.160]         }
[13:36:25.160]     })
[13:36:25.160]     if (TRUE) {
[13:36:25.160]         base::sink(type = "output", split = FALSE)
[13:36:25.160]         if (TRUE) {
[13:36:25.160]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.160]         }
[13:36:25.160]         else {
[13:36:25.160]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.160]         }
[13:36:25.160]         base::close(...future.stdout)
[13:36:25.160]         ...future.stdout <- NULL
[13:36:25.160]     }
[13:36:25.160]     ...future.result$conditions <- ...future.conditions
[13:36:25.160]     ...future.result$finished <- base::Sys.time()
[13:36:25.160]     ...future.result
[13:36:25.160] }
[13:36:25.162] assign_globals() ...
[13:36:25.162] List of 2
[13:36:25.162]  $ rr: int 1
[13:36:25.162]  $ cc: int 2
[13:36:25.162]  - attr(*, "where")=List of 2
[13:36:25.162]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.162]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.162]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.162]  - attr(*, "resolved")= logi FALSE
[13:36:25.162]  - attr(*, "total_size")= num 112
[13:36:25.162]  - attr(*, "already-done")= logi TRUE
[13:36:25.165] - copied ‘rr’ to environment
[13:36:25.165] - copied ‘cc’ to environment
[13:36:25.165] assign_globals() ... done
[13:36:25.165] plan(): Setting new future strategy stack:
[13:36:25.165] List of future strategies:
[13:36:25.165] 1. sequential:
[13:36:25.165]    - args: function (..., envir = parent.frame())
[13:36:25.165]    - tweaked: FALSE
[13:36:25.165]    - call: NULL
[13:36:25.166] plan(): nbrOfWorkers() = 1
[13:36:25.166] plan(): Setting new future strategy stack:
[13:36:25.166] List of future strategies:
[13:36:25.166] 1. sequential:
[13:36:25.166]    - args: function (..., envir = parent.frame())
[13:36:25.166]    - tweaked: FALSE
[13:36:25.166]    - call: future::plan("sequential")
[13:36:25.167] plan(): nbrOfWorkers() = 1
[13:36:25.167] SequentialFuture started (and completed)
[13:36:25.167] - Launch lazy future ... done
[13:36:25.167] run() for ‘SequentialFuture’ ... done
[13:36:25.167] run() for ‘Future’ ...
[13:36:25.167] - state: ‘created’
[13:36:25.168] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.168] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.168] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.168]   - Field: ‘label’
[13:36:25.168]   - Field: ‘local’
[13:36:25.168]   - Field: ‘owner’
[13:36:25.168]   - Field: ‘envir’
[13:36:25.168]   - Field: ‘packages’
[13:36:25.168]   - Field: ‘gc’
[13:36:25.169]   - Field: ‘conditions’
[13:36:25.169]   - Field: ‘expr’
[13:36:25.169]   - Field: ‘uuid’
[13:36:25.169]   - Field: ‘seed’
[13:36:25.169]   - Field: ‘version’
[13:36:25.169]   - Field: ‘result’
[13:36:25.169]   - Field: ‘asynchronous’
[13:36:25.169]   - Field: ‘calls’
[13:36:25.169]   - Field: ‘globals’
[13:36:25.169]   - Field: ‘stdout’
[13:36:25.169]   - Field: ‘earlySignal’
[13:36:25.170]   - Field: ‘lazy’
[13:36:25.171]   - Field: ‘state’
[13:36:25.171] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.171] - Launch lazy future ...
[13:36:25.171] Packages needed by the future expression (n = 0): <none>
[13:36:25.171] Packages needed by future strategies (n = 0): <none>
[13:36:25.171] {
[13:36:25.171]     {
[13:36:25.171]         {
[13:36:25.171]             ...future.startTime <- base::Sys.time()
[13:36:25.171]             {
[13:36:25.171]                 {
[13:36:25.171]                   {
[13:36:25.171]                     base::local({
[13:36:25.171]                       has_future <- base::requireNamespace("future", 
[13:36:25.171]                         quietly = TRUE)
[13:36:25.171]                       if (has_future) {
[13:36:25.171]                         ns <- base::getNamespace("future")
[13:36:25.171]                         version <- ns[[".package"]][["version"]]
[13:36:25.171]                         if (is.null(version)) 
[13:36:25.171]                           version <- utils::packageVersion("future")
[13:36:25.171]                       }
[13:36:25.171]                       else {
[13:36:25.171]                         version <- NULL
[13:36:25.171]                       }
[13:36:25.171]                       if (!has_future || version < "1.8.0") {
[13:36:25.171]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.171]                           "", base::R.version$version.string), 
[13:36:25.171]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.171]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.171]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.171]                             "release", "version")], collapse = " "), 
[13:36:25.171]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.171]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.171]                           info)
[13:36:25.171]                         info <- base::paste(info, collapse = "; ")
[13:36:25.171]                         if (!has_future) {
[13:36:25.171]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.171]                             info)
[13:36:25.171]                         }
[13:36:25.171]                         else {
[13:36:25.171]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.171]                             info, version)
[13:36:25.171]                         }
[13:36:25.171]                         base::stop(msg)
[13:36:25.171]                       }
[13:36:25.171]                     })
[13:36:25.171]                   }
[13:36:25.171]                   ...future.strategy.old <- future::plan("list")
[13:36:25.171]                   options(future.plan = NULL)
[13:36:25.171]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.171]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.171]                 }
[13:36:25.171]                 ...future.workdir <- getwd()
[13:36:25.171]             }
[13:36:25.171]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.171]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.171]         }
[13:36:25.171]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.171]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.171]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.171]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.171]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.171]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.171]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.171]             base::names(...future.oldOptions))
[13:36:25.171]     }
[13:36:25.171]     if (FALSE) {
[13:36:25.171]     }
[13:36:25.171]     else {
[13:36:25.171]         if (TRUE) {
[13:36:25.171]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.171]                 open = "w")
[13:36:25.171]         }
[13:36:25.171]         else {
[13:36:25.171]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.171]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.171]         }
[13:36:25.171]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.171]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.171]             base::sink(type = "output", split = FALSE)
[13:36:25.171]             base::close(...future.stdout)
[13:36:25.171]         }, add = TRUE)
[13:36:25.171]     }
[13:36:25.171]     ...future.frame <- base::sys.nframe()
[13:36:25.171]     ...future.conditions <- base::list()
[13:36:25.171]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.171]     if (FALSE) {
[13:36:25.171]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.171]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.171]     }
[13:36:25.171]     ...future.result <- base::tryCatch({
[13:36:25.171]         base::withCallingHandlers({
[13:36:25.171]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.171]                 rr, cc)))
[13:36:25.171]             future::FutureResult(value = ...future.value$value, 
[13:36:25.171]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.171]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.171]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.171]                     ...future.globalenv.names))
[13:36:25.171]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.171]         }, condition = base::local({
[13:36:25.171]             c <- base::c
[13:36:25.171]             inherits <- base::inherits
[13:36:25.171]             invokeRestart <- base::invokeRestart
[13:36:25.171]             length <- base::length
[13:36:25.171]             list <- base::list
[13:36:25.171]             seq.int <- base::seq.int
[13:36:25.171]             signalCondition <- base::signalCondition
[13:36:25.171]             sys.calls <- base::sys.calls
[13:36:25.171]             `[[` <- base::`[[`
[13:36:25.171]             `+` <- base::`+`
[13:36:25.171]             `<<-` <- base::`<<-`
[13:36:25.171]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.171]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.171]                   3L)]
[13:36:25.171]             }
[13:36:25.171]             function(cond) {
[13:36:25.171]                 is_error <- inherits(cond, "error")
[13:36:25.171]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.171]                   NULL)
[13:36:25.171]                 if (is_error) {
[13:36:25.171]                   sessionInformation <- function() {
[13:36:25.171]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.171]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.171]                       search = base::search(), system = base::Sys.info())
[13:36:25.171]                   }
[13:36:25.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.171]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.171]                     cond$call), session = sessionInformation(), 
[13:36:25.171]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.171]                   signalCondition(cond)
[13:36:25.171]                 }
[13:36:25.171]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.171]                 "immediateCondition"))) {
[13:36:25.171]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.171]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.171]                   if (TRUE && !signal) {
[13:36:25.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.171]                     {
[13:36:25.171]                       inherits <- base::inherits
[13:36:25.171]                       invokeRestart <- base::invokeRestart
[13:36:25.171]                       is.null <- base::is.null
[13:36:25.171]                       muffled <- FALSE
[13:36:25.171]                       if (inherits(cond, "message")) {
[13:36:25.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.171]                         if (muffled) 
[13:36:25.171]                           invokeRestart("muffleMessage")
[13:36:25.171]                       }
[13:36:25.171]                       else if (inherits(cond, "warning")) {
[13:36:25.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.171]                         if (muffled) 
[13:36:25.171]                           invokeRestart("muffleWarning")
[13:36:25.171]                       }
[13:36:25.171]                       else if (inherits(cond, "condition")) {
[13:36:25.171]                         if (!is.null(pattern)) {
[13:36:25.171]                           computeRestarts <- base::computeRestarts
[13:36:25.171]                           grepl <- base::grepl
[13:36:25.171]                           restarts <- computeRestarts(cond)
[13:36:25.171]                           for (restart in restarts) {
[13:36:25.171]                             name <- restart$name
[13:36:25.171]                             if (is.null(name)) 
[13:36:25.171]                               next
[13:36:25.171]                             if (!grepl(pattern, name)) 
[13:36:25.171]                               next
[13:36:25.171]                             invokeRestart(restart)
[13:36:25.171]                             muffled <- TRUE
[13:36:25.171]                             break
[13:36:25.171]                           }
[13:36:25.171]                         }
[13:36:25.171]                       }
[13:36:25.171]                       invisible(muffled)
[13:36:25.171]                     }
[13:36:25.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.171]                   }
[13:36:25.171]                 }
[13:36:25.171]                 else {
[13:36:25.171]                   if (TRUE) {
[13:36:25.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.171]                     {
[13:36:25.171]                       inherits <- base::inherits
[13:36:25.171]                       invokeRestart <- base::invokeRestart
[13:36:25.171]                       is.null <- base::is.null
[13:36:25.171]                       muffled <- FALSE
[13:36:25.171]                       if (inherits(cond, "message")) {
[13:36:25.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.171]                         if (muffled) 
[13:36:25.171]                           invokeRestart("muffleMessage")
[13:36:25.171]                       }
[13:36:25.171]                       else if (inherits(cond, "warning")) {
[13:36:25.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.171]                         if (muffled) 
[13:36:25.171]                           invokeRestart("muffleWarning")
[13:36:25.171]                       }
[13:36:25.171]                       else if (inherits(cond, "condition")) {
[13:36:25.171]                         if (!is.null(pattern)) {
[13:36:25.171]                           computeRestarts <- base::computeRestarts
[13:36:25.171]                           grepl <- base::grepl
[13:36:25.171]                           restarts <- computeRestarts(cond)
[13:36:25.171]                           for (restart in restarts) {
[13:36:25.171]                             name <- restart$name
[13:36:25.171]                             if (is.null(name)) 
[13:36:25.171]                               next
[13:36:25.171]                             if (!grepl(pattern, name)) 
[13:36:25.171]                               next
[13:36:25.171]                             invokeRestart(restart)
[13:36:25.171]                             muffled <- TRUE
[13:36:25.171]                             break
[13:36:25.171]                           }
[13:36:25.171]                         }
[13:36:25.171]                       }
[13:36:25.171]                       invisible(muffled)
[13:36:25.171]                     }
[13:36:25.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.171]                   }
[13:36:25.171]                 }
[13:36:25.171]             }
[13:36:25.171]         }))
[13:36:25.171]     }, error = function(ex) {
[13:36:25.171]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.171]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.171]                 ...future.rng), started = ...future.startTime, 
[13:36:25.171]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.171]             version = "1.8"), class = "FutureResult")
[13:36:25.171]     }, finally = {
[13:36:25.171]         if (!identical(...future.workdir, getwd())) 
[13:36:25.171]             setwd(...future.workdir)
[13:36:25.171]         {
[13:36:25.171]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.171]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.171]             }
[13:36:25.171]             base::options(...future.oldOptions)
[13:36:25.171]             if (.Platform$OS.type == "windows") {
[13:36:25.171]                 old_names <- names(...future.oldEnvVars)
[13:36:25.171]                 envs <- base::Sys.getenv()
[13:36:25.171]                 names <- names(envs)
[13:36:25.171]                 common <- intersect(names, old_names)
[13:36:25.171]                 added <- setdiff(names, old_names)
[13:36:25.171]                 removed <- setdiff(old_names, names)
[13:36:25.171]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.171]                   envs[common]]
[13:36:25.171]                 NAMES <- toupper(changed)
[13:36:25.171]                 args <- list()
[13:36:25.171]                 for (kk in seq_along(NAMES)) {
[13:36:25.171]                   name <- changed[[kk]]
[13:36:25.171]                   NAME <- NAMES[[kk]]
[13:36:25.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.171]                     next
[13:36:25.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.171]                 }
[13:36:25.171]                 NAMES <- toupper(added)
[13:36:25.171]                 for (kk in seq_along(NAMES)) {
[13:36:25.171]                   name <- added[[kk]]
[13:36:25.171]                   NAME <- NAMES[[kk]]
[13:36:25.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.171]                     next
[13:36:25.171]                   args[[name]] <- ""
[13:36:25.171]                 }
[13:36:25.171]                 NAMES <- toupper(removed)
[13:36:25.171]                 for (kk in seq_along(NAMES)) {
[13:36:25.171]                   name <- removed[[kk]]
[13:36:25.171]                   NAME <- NAMES[[kk]]
[13:36:25.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.171]                     next
[13:36:25.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.171]                 }
[13:36:25.171]                 if (length(args) > 0) 
[13:36:25.171]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.171]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.171]             }
[13:36:25.171]             else {
[13:36:25.171]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.171]             }
[13:36:25.171]             {
[13:36:25.171]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.171]                   0L) {
[13:36:25.171]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.171]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.171]                   base::options(opts)
[13:36:25.171]                 }
[13:36:25.171]                 {
[13:36:25.171]                   {
[13:36:25.171]                     NULL
[13:36:25.171]                     RNGkind("Mersenne-Twister")
[13:36:25.171]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.171]                       inherits = FALSE)
[13:36:25.171]                   }
[13:36:25.171]                   options(future.plan = NULL)
[13:36:25.171]                   if (is.na(NA_character_)) 
[13:36:25.171]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.171]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.171]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.171]                     .init = FALSE)
[13:36:25.171]                 }
[13:36:25.171]             }
[13:36:25.171]         }
[13:36:25.171]     })
[13:36:25.171]     if (TRUE) {
[13:36:25.171]         base::sink(type = "output", split = FALSE)
[13:36:25.171]         if (TRUE) {
[13:36:25.171]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.171]         }
[13:36:25.171]         else {
[13:36:25.171]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.171]         }
[13:36:25.171]         base::close(...future.stdout)
[13:36:25.171]         ...future.stdout <- NULL
[13:36:25.171]     }
[13:36:25.171]     ...future.result$conditions <- ...future.conditions
[13:36:25.171]     ...future.result$finished <- base::Sys.time()
[13:36:25.171]     ...future.result
[13:36:25.171] }
[13:36:25.173] assign_globals() ...
[13:36:25.173] List of 2
[13:36:25.173]  $ rr: int 2
[13:36:25.173]  $ cc: int 2
[13:36:25.173]  - attr(*, "where")=List of 2
[13:36:25.173]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.173]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.173]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.173]  - attr(*, "resolved")= logi FALSE
[13:36:25.173]  - attr(*, "total_size")= num 112
[13:36:25.173]  - attr(*, "already-done")= logi TRUE
[13:36:25.176] - copied ‘rr’ to environment
[13:36:25.176] - copied ‘cc’ to environment
[13:36:25.176] assign_globals() ... done
[13:36:25.176] plan(): Setting new future strategy stack:
[13:36:25.176] List of future strategies:
[13:36:25.176] 1. sequential:
[13:36:25.176]    - args: function (..., envir = parent.frame())
[13:36:25.176]    - tweaked: FALSE
[13:36:25.176]    - call: NULL
[13:36:25.177] plan(): nbrOfWorkers() = 1
[13:36:25.177] plan(): Setting new future strategy stack:
[13:36:25.178] List of future strategies:
[13:36:25.178] 1. sequential:
[13:36:25.178]    - args: function (..., envir = parent.frame())
[13:36:25.178]    - tweaked: FALSE
[13:36:25.178]    - call: future::plan("sequential")
[13:36:25.178] plan(): nbrOfWorkers() = 1
[13:36:25.178] SequentialFuture started (and completed)
[13:36:25.178] - Launch lazy future ... done
[13:36:25.178] run() for ‘SequentialFuture’ ... done
[13:36:25.178] run() for ‘Future’ ...
[13:36:25.179] - state: ‘created’
[13:36:25.179] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:25.179] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:25.179] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:25.179]   - Field: ‘label’
[13:36:25.179]   - Field: ‘local’
[13:36:25.179]   - Field: ‘owner’
[13:36:25.179]   - Field: ‘envir’
[13:36:25.179]   - Field: ‘packages’
[13:36:25.180]   - Field: ‘gc’
[13:36:25.180]   - Field: ‘conditions’
[13:36:25.180]   - Field: ‘expr’
[13:36:25.180]   - Field: ‘uuid’
[13:36:25.180]   - Field: ‘seed’
[13:36:25.180]   - Field: ‘version’
[13:36:25.180]   - Field: ‘result’
[13:36:25.180]   - Field: ‘asynchronous’
[13:36:25.180]   - Field: ‘calls’
[13:36:25.180]   - Field: ‘globals’
[13:36:25.180]   - Field: ‘stdout’
[13:36:25.181]   - Field: ‘earlySignal’
[13:36:25.181]   - Field: ‘lazy’
[13:36:25.181]   - Field: ‘state’
[13:36:25.181] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:25.181] - Launch lazy future ...
[13:36:25.181] Packages needed by the future expression (n = 0): <none>
[13:36:25.181] Packages needed by future strategies (n = 0): <none>
[13:36:25.182] {
[13:36:25.182]     {
[13:36:25.182]         {
[13:36:25.182]             ...future.startTime <- base::Sys.time()
[13:36:25.182]             {
[13:36:25.182]                 {
[13:36:25.182]                   {
[13:36:25.182]                     base::local({
[13:36:25.182]                       has_future <- base::requireNamespace("future", 
[13:36:25.182]                         quietly = TRUE)
[13:36:25.182]                       if (has_future) {
[13:36:25.182]                         ns <- base::getNamespace("future")
[13:36:25.182]                         version <- ns[[".package"]][["version"]]
[13:36:25.182]                         if (is.null(version)) 
[13:36:25.182]                           version <- utils::packageVersion("future")
[13:36:25.182]                       }
[13:36:25.182]                       else {
[13:36:25.182]                         version <- NULL
[13:36:25.182]                       }
[13:36:25.182]                       if (!has_future || version < "1.8.0") {
[13:36:25.182]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:25.182]                           "", base::R.version$version.string), 
[13:36:25.182]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:25.182]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:25.182]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:25.182]                             "release", "version")], collapse = " "), 
[13:36:25.182]                           hostname = base::Sys.info()[["nodename"]])
[13:36:25.182]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:25.182]                           info)
[13:36:25.182]                         info <- base::paste(info, collapse = "; ")
[13:36:25.182]                         if (!has_future) {
[13:36:25.182]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:25.182]                             info)
[13:36:25.182]                         }
[13:36:25.182]                         else {
[13:36:25.182]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:25.182]                             info, version)
[13:36:25.182]                         }
[13:36:25.182]                         base::stop(msg)
[13:36:25.182]                       }
[13:36:25.182]                     })
[13:36:25.182]                   }
[13:36:25.182]                   ...future.strategy.old <- future::plan("list")
[13:36:25.182]                   options(future.plan = NULL)
[13:36:25.182]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.182]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:25.182]                 }
[13:36:25.182]                 ...future.workdir <- getwd()
[13:36:25.182]             }
[13:36:25.182]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:25.182]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:25.182]         }
[13:36:25.182]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:25.182]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:25.182]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:25.182]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:25.182]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:25.182]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:25.182]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:25.182]             base::names(...future.oldOptions))
[13:36:25.182]     }
[13:36:25.182]     if (FALSE) {
[13:36:25.182]     }
[13:36:25.182]     else {
[13:36:25.182]         if (TRUE) {
[13:36:25.182]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:25.182]                 open = "w")
[13:36:25.182]         }
[13:36:25.182]         else {
[13:36:25.182]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:25.182]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:25.182]         }
[13:36:25.182]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:25.182]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:25.182]             base::sink(type = "output", split = FALSE)
[13:36:25.182]             base::close(...future.stdout)
[13:36:25.182]         }, add = TRUE)
[13:36:25.182]     }
[13:36:25.182]     ...future.frame <- base::sys.nframe()
[13:36:25.182]     ...future.conditions <- base::list()
[13:36:25.182]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:25.182]     if (FALSE) {
[13:36:25.182]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:25.182]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:25.182]     }
[13:36:25.182]     ...future.result <- base::tryCatch({
[13:36:25.182]         base::withCallingHandlers({
[13:36:25.182]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[13:36:25.182]                 rr, cc)))
[13:36:25.182]             future::FutureResult(value = ...future.value$value, 
[13:36:25.182]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.182]                   ...future.rng), globalenv = if (FALSE) 
[13:36:25.182]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:25.182]                     ...future.globalenv.names))
[13:36:25.182]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:25.182]         }, condition = base::local({
[13:36:25.182]             c <- base::c
[13:36:25.182]             inherits <- base::inherits
[13:36:25.182]             invokeRestart <- base::invokeRestart
[13:36:25.182]             length <- base::length
[13:36:25.182]             list <- base::list
[13:36:25.182]             seq.int <- base::seq.int
[13:36:25.182]             signalCondition <- base::signalCondition
[13:36:25.182]             sys.calls <- base::sys.calls
[13:36:25.182]             `[[` <- base::`[[`
[13:36:25.182]             `+` <- base::`+`
[13:36:25.182]             `<<-` <- base::`<<-`
[13:36:25.182]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:25.182]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:25.182]                   3L)]
[13:36:25.182]             }
[13:36:25.182]             function(cond) {
[13:36:25.182]                 is_error <- inherits(cond, "error")
[13:36:25.182]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:25.182]                   NULL)
[13:36:25.182]                 if (is_error) {
[13:36:25.182]                   sessionInformation <- function() {
[13:36:25.182]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:25.182]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:25.182]                       search = base::search(), system = base::Sys.info())
[13:36:25.182]                   }
[13:36:25.182]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.182]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:25.182]                     cond$call), session = sessionInformation(), 
[13:36:25.182]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:25.182]                   signalCondition(cond)
[13:36:25.182]                 }
[13:36:25.182]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:25.182]                 "immediateCondition"))) {
[13:36:25.182]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:25.182]                   ...future.conditions[[length(...future.conditions) + 
[13:36:25.182]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:25.182]                   if (TRUE && !signal) {
[13:36:25.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.182]                     {
[13:36:25.182]                       inherits <- base::inherits
[13:36:25.182]                       invokeRestart <- base::invokeRestart
[13:36:25.182]                       is.null <- base::is.null
[13:36:25.182]                       muffled <- FALSE
[13:36:25.182]                       if (inherits(cond, "message")) {
[13:36:25.182]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.182]                         if (muffled) 
[13:36:25.182]                           invokeRestart("muffleMessage")
[13:36:25.182]                       }
[13:36:25.182]                       else if (inherits(cond, "warning")) {
[13:36:25.182]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.182]                         if (muffled) 
[13:36:25.182]                           invokeRestart("muffleWarning")
[13:36:25.182]                       }
[13:36:25.182]                       else if (inherits(cond, "condition")) {
[13:36:25.182]                         if (!is.null(pattern)) {
[13:36:25.182]                           computeRestarts <- base::computeRestarts
[13:36:25.182]                           grepl <- base::grepl
[13:36:25.182]                           restarts <- computeRestarts(cond)
[13:36:25.182]                           for (restart in restarts) {
[13:36:25.182]                             name <- restart$name
[13:36:25.182]                             if (is.null(name)) 
[13:36:25.182]                               next
[13:36:25.182]                             if (!grepl(pattern, name)) 
[13:36:25.182]                               next
[13:36:25.182]                             invokeRestart(restart)
[13:36:25.182]                             muffled <- TRUE
[13:36:25.182]                             break
[13:36:25.182]                           }
[13:36:25.182]                         }
[13:36:25.182]                       }
[13:36:25.182]                       invisible(muffled)
[13:36:25.182]                     }
[13:36:25.182]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.182]                   }
[13:36:25.182]                 }
[13:36:25.182]                 else {
[13:36:25.182]                   if (TRUE) {
[13:36:25.182]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:25.182]                     {
[13:36:25.182]                       inherits <- base::inherits
[13:36:25.182]                       invokeRestart <- base::invokeRestart
[13:36:25.182]                       is.null <- base::is.null
[13:36:25.182]                       muffled <- FALSE
[13:36:25.182]                       if (inherits(cond, "message")) {
[13:36:25.182]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:25.182]                         if (muffled) 
[13:36:25.182]                           invokeRestart("muffleMessage")
[13:36:25.182]                       }
[13:36:25.182]                       else if (inherits(cond, "warning")) {
[13:36:25.182]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:25.182]                         if (muffled) 
[13:36:25.182]                           invokeRestart("muffleWarning")
[13:36:25.182]                       }
[13:36:25.182]                       else if (inherits(cond, "condition")) {
[13:36:25.182]                         if (!is.null(pattern)) {
[13:36:25.182]                           computeRestarts <- base::computeRestarts
[13:36:25.182]                           grepl <- base::grepl
[13:36:25.182]                           restarts <- computeRestarts(cond)
[13:36:25.182]                           for (restart in restarts) {
[13:36:25.182]                             name <- restart$name
[13:36:25.182]                             if (is.null(name)) 
[13:36:25.182]                               next
[13:36:25.182]                             if (!grepl(pattern, name)) 
[13:36:25.182]                               next
[13:36:25.182]                             invokeRestart(restart)
[13:36:25.182]                             muffled <- TRUE
[13:36:25.182]                             break
[13:36:25.182]                           }
[13:36:25.182]                         }
[13:36:25.182]                       }
[13:36:25.182]                       invisible(muffled)
[13:36:25.182]                     }
[13:36:25.182]                     muffleCondition(cond, pattern = "^muffle")
[13:36:25.182]                   }
[13:36:25.182]                 }
[13:36:25.182]             }
[13:36:25.182]         }))
[13:36:25.182]     }, error = function(ex) {
[13:36:25.182]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:25.182]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:25.182]                 ...future.rng), started = ...future.startTime, 
[13:36:25.182]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:25.182]             version = "1.8"), class = "FutureResult")
[13:36:25.182]     }, finally = {
[13:36:25.182]         if (!identical(...future.workdir, getwd())) 
[13:36:25.182]             setwd(...future.workdir)
[13:36:25.182]         {
[13:36:25.182]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:25.182]                 ...future.oldOptions$nwarnings <- NULL
[13:36:25.182]             }
[13:36:25.182]             base::options(...future.oldOptions)
[13:36:25.182]             if (.Platform$OS.type == "windows") {
[13:36:25.182]                 old_names <- names(...future.oldEnvVars)
[13:36:25.182]                 envs <- base::Sys.getenv()
[13:36:25.182]                 names <- names(envs)
[13:36:25.182]                 common <- intersect(names, old_names)
[13:36:25.182]                 added <- setdiff(names, old_names)
[13:36:25.182]                 removed <- setdiff(old_names, names)
[13:36:25.182]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:25.182]                   envs[common]]
[13:36:25.182]                 NAMES <- toupper(changed)
[13:36:25.182]                 args <- list()
[13:36:25.182]                 for (kk in seq_along(NAMES)) {
[13:36:25.182]                   name <- changed[[kk]]
[13:36:25.182]                   NAME <- NAMES[[kk]]
[13:36:25.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.182]                     next
[13:36:25.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.182]                 }
[13:36:25.182]                 NAMES <- toupper(added)
[13:36:25.182]                 for (kk in seq_along(NAMES)) {
[13:36:25.182]                   name <- added[[kk]]
[13:36:25.182]                   NAME <- NAMES[[kk]]
[13:36:25.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.182]                     next
[13:36:25.182]                   args[[name]] <- ""
[13:36:25.182]                 }
[13:36:25.182]                 NAMES <- toupper(removed)
[13:36:25.182]                 for (kk in seq_along(NAMES)) {
[13:36:25.182]                   name <- removed[[kk]]
[13:36:25.182]                   NAME <- NAMES[[kk]]
[13:36:25.182]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:25.182]                     next
[13:36:25.182]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:25.182]                 }
[13:36:25.182]                 if (length(args) > 0) 
[13:36:25.182]                   base::do.call(base::Sys.setenv, args = args)
[13:36:25.182]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:25.182]             }
[13:36:25.182]             else {
[13:36:25.182]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:25.182]             }
[13:36:25.182]             {
[13:36:25.182]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:25.182]                   0L) {
[13:36:25.182]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:25.182]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:25.182]                   base::options(opts)
[13:36:25.182]                 }
[13:36:25.182]                 {
[13:36:25.182]                   {
[13:36:25.182]                     NULL
[13:36:25.182]                     RNGkind("Mersenne-Twister")
[13:36:25.182]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:25.182]                       inherits = FALSE)
[13:36:25.182]                   }
[13:36:25.182]                   options(future.plan = NULL)
[13:36:25.182]                   if (is.na(NA_character_)) 
[13:36:25.182]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:25.182]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:25.182]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:25.182]                     .init = FALSE)
[13:36:25.182]                 }
[13:36:25.182]             }
[13:36:25.182]         }
[13:36:25.182]     })
[13:36:25.182]     if (TRUE) {
[13:36:25.182]         base::sink(type = "output", split = FALSE)
[13:36:25.182]         if (TRUE) {
[13:36:25.182]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:25.182]         }
[13:36:25.182]         else {
[13:36:25.182]             ...future.result["stdout"] <- base::list(NULL)
[13:36:25.182]         }
[13:36:25.182]         base::close(...future.stdout)
[13:36:25.182]         ...future.stdout <- NULL
[13:36:25.182]     }
[13:36:25.182]     ...future.result$conditions <- ...future.conditions
[13:36:25.182]     ...future.result$finished <- base::Sys.time()
[13:36:25.182]     ...future.result
[13:36:25.182] }
[13:36:25.183] assign_globals() ...
[13:36:25.183] List of 2
[13:36:25.183]  $ rr: int 3
[13:36:25.183]  $ cc: int 2
[13:36:25.183]  - attr(*, "where")=List of 2
[13:36:25.183]   ..$ rr:<environment: R_EmptyEnv> 
[13:36:25.183]   ..$ cc:<environment: R_EmptyEnv> 
[13:36:25.183]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:36:25.183]  - attr(*, "resolved")= logi FALSE
[13:36:25.183]  - attr(*, "total_size")= num 112
[13:36:25.183]  - attr(*, "already-done")= logi TRUE
[13:36:25.186] - copied ‘rr’ to environment
[13:36:25.186] - copied ‘cc’ to environment
[13:36:25.186] assign_globals() ... done
[13:36:25.186] plan(): Setting new future strategy stack:
[13:36:25.186] List of future strategies:
[13:36:25.186] 1. sequential:
[13:36:25.186]    - args: function (..., envir = parent.frame())
[13:36:25.186]    - tweaked: FALSE
[13:36:25.186]    - call: NULL
[13:36:25.187] plan(): nbrOfWorkers() = 1
[13:36:25.187] plan(): Setting new future strategy stack:
[13:36:25.187] List of future strategies:
[13:36:25.187] 1. sequential:
[13:36:25.187]    - args: function (..., envir = parent.frame())
[13:36:25.187]    - tweaked: FALSE
[13:36:25.187]    - call: future::plan("sequential")
[13:36:25.188] plan(): nbrOfWorkers() = 1
[13:36:25.188] SequentialFuture started (and completed)
[13:36:25.188] - Launch lazy future ... done
[13:36:25.188] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[13:36:25.189] plan(): Setting new future strategy stack:
[13:36:25.189] List of future strategies:
[13:36:25.189] 1. FutureStrategy:
[13:36:25.189]    - args: function (..., envir = parent.frame())
[13:36:25.189]    - tweaked: FALSE
[13:36:25.189]    - call: future::plan(oplan)
[13:36:25.200] plan(): nbrOfWorkers() = 1
> 
