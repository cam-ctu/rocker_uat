
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:41.247] plan(): Setting new future strategy stack:
[10:32:41.248] List of future strategies:
[10:32:41.248] 1. sequential:
[10:32:41.248]    - args: function (..., envir = parent.frame())
[10:32:41.248]    - tweaked: FALSE
[10:32:41.248]    - call: future::plan("sequential")
[10:32:41.262] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[10:32:41.276] getGlobalsAndPackages() ...
[10:32:41.276] Searching for globals...
[10:32:41.280] - globals found: [1] ‘{’
[10:32:41.280] Searching for globals ... DONE
[10:32:41.280] Resolving globals: FALSE
[10:32:41.280] 
[10:32:41.281] 
[10:32:41.281] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[10:32:41.281] getGlobalsAndPackages() ...
[10:32:41.282] Searching for globals...
[10:32:41.282] - globals found: [1] ‘{’
[10:32:41.282] Searching for globals ... DONE
[10:32:41.282] Resolving globals: FALSE
[10:32:41.283] 
[10:32:41.283] 
[10:32:41.283] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[10:32:41.283] getGlobalsAndPackages() ...
[10:32:41.283] Searching for globals...
[10:32:41.284] - globals found: [1] ‘{’
[10:32:41.284] Searching for globals ... DONE
[10:32:41.284] Resolving globals: FALSE
[10:32:41.284] 
[10:32:41.284] 
[10:32:41.285] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[10:32:41.285] getGlobalsAndPackages() ...
[10:32:41.286] Searching for globals...
[10:32:41.286] - globals found: [1] ‘{’
[10:32:41.286] Searching for globals ... DONE
[10:32:41.286] Resolving globals: FALSE
[10:32:41.286] 
[10:32:41.287] 
[10:32:41.287] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[10:32:41.288] run() for ‘Future’ ...
[10:32:41.288] - state: ‘created’
[10:32:41.288] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.288] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.288] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.288]   - Field: ‘label’
[10:32:41.289]   - Field: ‘local’
[10:32:41.289]   - Field: ‘owner’
[10:32:41.289]   - Field: ‘envir’
[10:32:41.289]   - Field: ‘packages’
[10:32:41.289]   - Field: ‘gc’
[10:32:41.289]   - Field: ‘conditions’
[10:32:41.289]   - Field: ‘expr’
[10:32:41.289]   - Field: ‘uuid’
[10:32:41.289]   - Field: ‘seed’
[10:32:41.289]   - Field: ‘version’
[10:32:41.289]   - Field: ‘result’
[10:32:41.290]   - Field: ‘asynchronous’
[10:32:41.290]   - Field: ‘calls’
[10:32:41.290]   - Field: ‘globals’
[10:32:41.290]   - Field: ‘stdout’
[10:32:41.290]   - Field: ‘earlySignal’
[10:32:41.290]   - Field: ‘lazy’
[10:32:41.290]   - Field: ‘state’
[10:32:41.290] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.290] - Launch lazy future ...
[10:32:41.291] Packages needed by the future expression (n = 0): <none>
[10:32:41.291] Packages needed by future strategies (n = 0): <none>
[10:32:41.292] {
[10:32:41.292]     {
[10:32:41.292]         {
[10:32:41.292]             ...future.startTime <- base::Sys.time()
[10:32:41.292]             {
[10:32:41.292]                 {
[10:32:41.292]                   {
[10:32:41.292]                     base::local({
[10:32:41.292]                       has_future <- base::requireNamespace("future", 
[10:32:41.292]                         quietly = TRUE)
[10:32:41.292]                       if (has_future) {
[10:32:41.292]                         ns <- base::getNamespace("future")
[10:32:41.292]                         version <- ns[[".package"]][["version"]]
[10:32:41.292]                         if (is.null(version)) 
[10:32:41.292]                           version <- utils::packageVersion("future")
[10:32:41.292]                       }
[10:32:41.292]                       else {
[10:32:41.292]                         version <- NULL
[10:32:41.292]                       }
[10:32:41.292]                       if (!has_future || version < "1.8.0") {
[10:32:41.292]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.292]                           "", base::R.version$version.string), 
[10:32:41.292]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.292]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.292]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.292]                             "release", "version")], collapse = " "), 
[10:32:41.292]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.292]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.292]                           info)
[10:32:41.292]                         info <- base::paste(info, collapse = "; ")
[10:32:41.292]                         if (!has_future) {
[10:32:41.292]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.292]                             info)
[10:32:41.292]                         }
[10:32:41.292]                         else {
[10:32:41.292]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.292]                             info, version)
[10:32:41.292]                         }
[10:32:41.292]                         base::stop(msg)
[10:32:41.292]                       }
[10:32:41.292]                     })
[10:32:41.292]                   }
[10:32:41.292]                   ...future.strategy.old <- future::plan("list")
[10:32:41.292]                   options(future.plan = NULL)
[10:32:41.292]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.292]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.292]                 }
[10:32:41.292]                 ...future.workdir <- getwd()
[10:32:41.292]             }
[10:32:41.292]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.292]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.292]         }
[10:32:41.292]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.292]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.292]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.292]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.292]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.292]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.292]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.292]             base::names(...future.oldOptions))
[10:32:41.292]     }
[10:32:41.292]     if (FALSE) {
[10:32:41.292]     }
[10:32:41.292]     else {
[10:32:41.292]         if (TRUE) {
[10:32:41.292]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.292]                 open = "w")
[10:32:41.292]         }
[10:32:41.292]         else {
[10:32:41.292]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.292]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.292]         }
[10:32:41.292]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.292]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.292]             base::sink(type = "output", split = FALSE)
[10:32:41.292]             base::close(...future.stdout)
[10:32:41.292]         }, add = TRUE)
[10:32:41.292]     }
[10:32:41.292]     ...future.frame <- base::sys.nframe()
[10:32:41.292]     ...future.conditions <- base::list()
[10:32:41.292]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.292]     if (FALSE) {
[10:32:41.292]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.292]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.292]     }
[10:32:41.292]     ...future.result <- base::tryCatch({
[10:32:41.292]         base::withCallingHandlers({
[10:32:41.292]             ...future.value <- base::withVisible(base::local({
[10:32:41.292]                 2
[10:32:41.292]             }))
[10:32:41.292]             future::FutureResult(value = ...future.value$value, 
[10:32:41.292]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.292]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.292]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.292]                     ...future.globalenv.names))
[10:32:41.292]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.292]         }, condition = base::local({
[10:32:41.292]             c <- base::c
[10:32:41.292]             inherits <- base::inherits
[10:32:41.292]             invokeRestart <- base::invokeRestart
[10:32:41.292]             length <- base::length
[10:32:41.292]             list <- base::list
[10:32:41.292]             seq.int <- base::seq.int
[10:32:41.292]             signalCondition <- base::signalCondition
[10:32:41.292]             sys.calls <- base::sys.calls
[10:32:41.292]             `[[` <- base::`[[`
[10:32:41.292]             `+` <- base::`+`
[10:32:41.292]             `<<-` <- base::`<<-`
[10:32:41.292]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.292]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.292]                   3L)]
[10:32:41.292]             }
[10:32:41.292]             function(cond) {
[10:32:41.292]                 is_error <- inherits(cond, "error")
[10:32:41.292]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.292]                   NULL)
[10:32:41.292]                 if (is_error) {
[10:32:41.292]                   sessionInformation <- function() {
[10:32:41.292]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.292]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.292]                       search = base::search(), system = base::Sys.info())
[10:32:41.292]                   }
[10:32:41.292]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.292]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.292]                     cond$call), session = sessionInformation(), 
[10:32:41.292]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.292]                   signalCondition(cond)
[10:32:41.292]                 }
[10:32:41.292]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.292]                 "immediateCondition"))) {
[10:32:41.292]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.292]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.292]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.292]                   if (TRUE && !signal) {
[10:32:41.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.292]                     {
[10:32:41.292]                       inherits <- base::inherits
[10:32:41.292]                       invokeRestart <- base::invokeRestart
[10:32:41.292]                       is.null <- base::is.null
[10:32:41.292]                       muffled <- FALSE
[10:32:41.292]                       if (inherits(cond, "message")) {
[10:32:41.292]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.292]                         if (muffled) 
[10:32:41.292]                           invokeRestart("muffleMessage")
[10:32:41.292]                       }
[10:32:41.292]                       else if (inherits(cond, "warning")) {
[10:32:41.292]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.292]                         if (muffled) 
[10:32:41.292]                           invokeRestart("muffleWarning")
[10:32:41.292]                       }
[10:32:41.292]                       else if (inherits(cond, "condition")) {
[10:32:41.292]                         if (!is.null(pattern)) {
[10:32:41.292]                           computeRestarts <- base::computeRestarts
[10:32:41.292]                           grepl <- base::grepl
[10:32:41.292]                           restarts <- computeRestarts(cond)
[10:32:41.292]                           for (restart in restarts) {
[10:32:41.292]                             name <- restart$name
[10:32:41.292]                             if (is.null(name)) 
[10:32:41.292]                               next
[10:32:41.292]                             if (!grepl(pattern, name)) 
[10:32:41.292]                               next
[10:32:41.292]                             invokeRestart(restart)
[10:32:41.292]                             muffled <- TRUE
[10:32:41.292]                             break
[10:32:41.292]                           }
[10:32:41.292]                         }
[10:32:41.292]                       }
[10:32:41.292]                       invisible(muffled)
[10:32:41.292]                     }
[10:32:41.292]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.292]                   }
[10:32:41.292]                 }
[10:32:41.292]                 else {
[10:32:41.292]                   if (TRUE) {
[10:32:41.292]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.292]                     {
[10:32:41.292]                       inherits <- base::inherits
[10:32:41.292]                       invokeRestart <- base::invokeRestart
[10:32:41.292]                       is.null <- base::is.null
[10:32:41.292]                       muffled <- FALSE
[10:32:41.292]                       if (inherits(cond, "message")) {
[10:32:41.292]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.292]                         if (muffled) 
[10:32:41.292]                           invokeRestart("muffleMessage")
[10:32:41.292]                       }
[10:32:41.292]                       else if (inherits(cond, "warning")) {
[10:32:41.292]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.292]                         if (muffled) 
[10:32:41.292]                           invokeRestart("muffleWarning")
[10:32:41.292]                       }
[10:32:41.292]                       else if (inherits(cond, "condition")) {
[10:32:41.292]                         if (!is.null(pattern)) {
[10:32:41.292]                           computeRestarts <- base::computeRestarts
[10:32:41.292]                           grepl <- base::grepl
[10:32:41.292]                           restarts <- computeRestarts(cond)
[10:32:41.292]                           for (restart in restarts) {
[10:32:41.292]                             name <- restart$name
[10:32:41.292]                             if (is.null(name)) 
[10:32:41.292]                               next
[10:32:41.292]                             if (!grepl(pattern, name)) 
[10:32:41.292]                               next
[10:32:41.292]                             invokeRestart(restart)
[10:32:41.292]                             muffled <- TRUE
[10:32:41.292]                             break
[10:32:41.292]                           }
[10:32:41.292]                         }
[10:32:41.292]                       }
[10:32:41.292]                       invisible(muffled)
[10:32:41.292]                     }
[10:32:41.292]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.292]                   }
[10:32:41.292]                 }
[10:32:41.292]             }
[10:32:41.292]         }))
[10:32:41.292]     }, error = function(ex) {
[10:32:41.292]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.292]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.292]                 ...future.rng), started = ...future.startTime, 
[10:32:41.292]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.292]             version = "1.8"), class = "FutureResult")
[10:32:41.292]     }, finally = {
[10:32:41.292]         if (!identical(...future.workdir, getwd())) 
[10:32:41.292]             setwd(...future.workdir)
[10:32:41.292]         {
[10:32:41.292]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.292]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.292]             }
[10:32:41.292]             base::options(...future.oldOptions)
[10:32:41.292]             if (.Platform$OS.type == "windows") {
[10:32:41.292]                 old_names <- names(...future.oldEnvVars)
[10:32:41.292]                 envs <- base::Sys.getenv()
[10:32:41.292]                 names <- names(envs)
[10:32:41.292]                 common <- intersect(names, old_names)
[10:32:41.292]                 added <- setdiff(names, old_names)
[10:32:41.292]                 removed <- setdiff(old_names, names)
[10:32:41.292]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.292]                   envs[common]]
[10:32:41.292]                 NAMES <- toupper(changed)
[10:32:41.292]                 args <- list()
[10:32:41.292]                 for (kk in seq_along(NAMES)) {
[10:32:41.292]                   name <- changed[[kk]]
[10:32:41.292]                   NAME <- NAMES[[kk]]
[10:32:41.292]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.292]                     next
[10:32:41.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.292]                 }
[10:32:41.292]                 NAMES <- toupper(added)
[10:32:41.292]                 for (kk in seq_along(NAMES)) {
[10:32:41.292]                   name <- added[[kk]]
[10:32:41.292]                   NAME <- NAMES[[kk]]
[10:32:41.292]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.292]                     next
[10:32:41.292]                   args[[name]] <- ""
[10:32:41.292]                 }
[10:32:41.292]                 NAMES <- toupper(removed)
[10:32:41.292]                 for (kk in seq_along(NAMES)) {
[10:32:41.292]                   name <- removed[[kk]]
[10:32:41.292]                   NAME <- NAMES[[kk]]
[10:32:41.292]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.292]                     next
[10:32:41.292]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.292]                 }
[10:32:41.292]                 if (length(args) > 0) 
[10:32:41.292]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.292]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.292]             }
[10:32:41.292]             else {
[10:32:41.292]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.292]             }
[10:32:41.292]             {
[10:32:41.292]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.292]                   0L) {
[10:32:41.292]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.292]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.292]                   base::options(opts)
[10:32:41.292]                 }
[10:32:41.292]                 {
[10:32:41.292]                   {
[10:32:41.292]                     NULL
[10:32:41.292]                     RNGkind("Mersenne-Twister")
[10:32:41.292]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.292]                       inherits = FALSE)
[10:32:41.292]                   }
[10:32:41.292]                   options(future.plan = NULL)
[10:32:41.292]                   if (is.na(NA_character_)) 
[10:32:41.292]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.292]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.292]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.292]                     .init = FALSE)
[10:32:41.292]                 }
[10:32:41.292]             }
[10:32:41.292]         }
[10:32:41.292]     })
[10:32:41.292]     if (TRUE) {
[10:32:41.292]         base::sink(type = "output", split = FALSE)
[10:32:41.292]         if (TRUE) {
[10:32:41.292]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.292]         }
[10:32:41.292]         else {
[10:32:41.292]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.292]         }
[10:32:41.292]         base::close(...future.stdout)
[10:32:41.292]         ...future.stdout <- NULL
[10:32:41.292]     }
[10:32:41.292]     ...future.result$conditions <- ...future.conditions
[10:32:41.292]     ...future.result$finished <- base::Sys.time()
[10:32:41.292]     ...future.result
[10:32:41.292] }
[10:32:41.294] plan(): Setting new future strategy stack:
[10:32:41.294] List of future strategies:
[10:32:41.294] 1. sequential:
[10:32:41.294]    - args: function (..., envir = parent.frame())
[10:32:41.294]    - tweaked: FALSE
[10:32:41.294]    - call: NULL
[10:32:41.294] plan(): nbrOfWorkers() = 1
[10:32:41.295] plan(): Setting new future strategy stack:
[10:32:41.296] List of future strategies:
[10:32:41.296] 1. sequential:
[10:32:41.296]    - args: function (..., envir = parent.frame())
[10:32:41.296]    - tweaked: FALSE
[10:32:41.296]    - call: future::plan("sequential")
[10:32:41.296] plan(): nbrOfWorkers() = 1
[10:32:41.296] SequentialFuture started (and completed)
[10:32:41.297] - Launch lazy future ... done
[10:32:41.297] run() for ‘SequentialFuture’ ... done
[10:32:41.297] run() for ‘Future’ ...
[10:32:41.297] - state: ‘created’
[10:32:41.297] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.297] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.298] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.298]   - Field: ‘label’
[10:32:41.298]   - Field: ‘local’
[10:32:41.298]   - Field: ‘owner’
[10:32:41.298]   - Field: ‘envir’
[10:32:41.298]   - Field: ‘packages’
[10:32:41.298]   - Field: ‘gc’
[10:32:41.298]   - Field: ‘conditions’
[10:32:41.298]   - Field: ‘expr’
[10:32:41.298]   - Field: ‘uuid’
[10:32:41.298]   - Field: ‘seed’
[10:32:41.299]   - Field: ‘version’
[10:32:41.299]   - Field: ‘result’
[10:32:41.299]   - Field: ‘asynchronous’
[10:32:41.299]   - Field: ‘calls’
[10:32:41.299]   - Field: ‘globals’
[10:32:41.299]   - Field: ‘stdout’
[10:32:41.299]   - Field: ‘earlySignal’
[10:32:41.299]   - Field: ‘lazy’
[10:32:41.299]   - Field: ‘state’
[10:32:41.299] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.299] - Launch lazy future ...
[10:32:41.300] Packages needed by the future expression (n = 0): <none>
[10:32:41.300] Packages needed by future strategies (n = 0): <none>
[10:32:41.300] {
[10:32:41.300]     {
[10:32:41.300]         {
[10:32:41.300]             ...future.startTime <- base::Sys.time()
[10:32:41.300]             {
[10:32:41.300]                 {
[10:32:41.300]                   {
[10:32:41.300]                     base::local({
[10:32:41.300]                       has_future <- base::requireNamespace("future", 
[10:32:41.300]                         quietly = TRUE)
[10:32:41.300]                       if (has_future) {
[10:32:41.300]                         ns <- base::getNamespace("future")
[10:32:41.300]                         version <- ns[[".package"]][["version"]]
[10:32:41.300]                         if (is.null(version)) 
[10:32:41.300]                           version <- utils::packageVersion("future")
[10:32:41.300]                       }
[10:32:41.300]                       else {
[10:32:41.300]                         version <- NULL
[10:32:41.300]                       }
[10:32:41.300]                       if (!has_future || version < "1.8.0") {
[10:32:41.300]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.300]                           "", base::R.version$version.string), 
[10:32:41.300]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.300]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.300]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.300]                             "release", "version")], collapse = " "), 
[10:32:41.300]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.300]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.300]                           info)
[10:32:41.300]                         info <- base::paste(info, collapse = "; ")
[10:32:41.300]                         if (!has_future) {
[10:32:41.300]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.300]                             info)
[10:32:41.300]                         }
[10:32:41.300]                         else {
[10:32:41.300]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.300]                             info, version)
[10:32:41.300]                         }
[10:32:41.300]                         base::stop(msg)
[10:32:41.300]                       }
[10:32:41.300]                     })
[10:32:41.300]                   }
[10:32:41.300]                   ...future.strategy.old <- future::plan("list")
[10:32:41.300]                   options(future.plan = NULL)
[10:32:41.300]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.300]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.300]                 }
[10:32:41.300]                 ...future.workdir <- getwd()
[10:32:41.300]             }
[10:32:41.300]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.300]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.300]         }
[10:32:41.300]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.300]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.300]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.300]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.300]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.300]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.300]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.300]             base::names(...future.oldOptions))
[10:32:41.300]     }
[10:32:41.300]     if (FALSE) {
[10:32:41.300]     }
[10:32:41.300]     else {
[10:32:41.300]         if (TRUE) {
[10:32:41.300]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.300]                 open = "w")
[10:32:41.300]         }
[10:32:41.300]         else {
[10:32:41.300]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.300]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.300]         }
[10:32:41.300]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.300]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.300]             base::sink(type = "output", split = FALSE)
[10:32:41.300]             base::close(...future.stdout)
[10:32:41.300]         }, add = TRUE)
[10:32:41.300]     }
[10:32:41.300]     ...future.frame <- base::sys.nframe()
[10:32:41.300]     ...future.conditions <- base::list()
[10:32:41.300]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.300]     if (FALSE) {
[10:32:41.300]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.300]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.300]     }
[10:32:41.300]     ...future.result <- base::tryCatch({
[10:32:41.300]         base::withCallingHandlers({
[10:32:41.300]             ...future.value <- base::withVisible(base::local({
[10:32:41.300]                 "async!"
[10:32:41.300]             }))
[10:32:41.300]             future::FutureResult(value = ...future.value$value, 
[10:32:41.300]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.300]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.300]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.300]                     ...future.globalenv.names))
[10:32:41.300]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.300]         }, condition = base::local({
[10:32:41.300]             c <- base::c
[10:32:41.300]             inherits <- base::inherits
[10:32:41.300]             invokeRestart <- base::invokeRestart
[10:32:41.300]             length <- base::length
[10:32:41.300]             list <- base::list
[10:32:41.300]             seq.int <- base::seq.int
[10:32:41.300]             signalCondition <- base::signalCondition
[10:32:41.300]             sys.calls <- base::sys.calls
[10:32:41.300]             `[[` <- base::`[[`
[10:32:41.300]             `+` <- base::`+`
[10:32:41.300]             `<<-` <- base::`<<-`
[10:32:41.300]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.300]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.300]                   3L)]
[10:32:41.300]             }
[10:32:41.300]             function(cond) {
[10:32:41.300]                 is_error <- inherits(cond, "error")
[10:32:41.300]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.300]                   NULL)
[10:32:41.300]                 if (is_error) {
[10:32:41.300]                   sessionInformation <- function() {
[10:32:41.300]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.300]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.300]                       search = base::search(), system = base::Sys.info())
[10:32:41.300]                   }
[10:32:41.300]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.300]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.300]                     cond$call), session = sessionInformation(), 
[10:32:41.300]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.300]                   signalCondition(cond)
[10:32:41.300]                 }
[10:32:41.300]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.300]                 "immediateCondition"))) {
[10:32:41.300]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.300]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.300]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.300]                   if (TRUE && !signal) {
[10:32:41.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.300]                     {
[10:32:41.300]                       inherits <- base::inherits
[10:32:41.300]                       invokeRestart <- base::invokeRestart
[10:32:41.300]                       is.null <- base::is.null
[10:32:41.300]                       muffled <- FALSE
[10:32:41.300]                       if (inherits(cond, "message")) {
[10:32:41.300]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.300]                         if (muffled) 
[10:32:41.300]                           invokeRestart("muffleMessage")
[10:32:41.300]                       }
[10:32:41.300]                       else if (inherits(cond, "warning")) {
[10:32:41.300]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.300]                         if (muffled) 
[10:32:41.300]                           invokeRestart("muffleWarning")
[10:32:41.300]                       }
[10:32:41.300]                       else if (inherits(cond, "condition")) {
[10:32:41.300]                         if (!is.null(pattern)) {
[10:32:41.300]                           computeRestarts <- base::computeRestarts
[10:32:41.300]                           grepl <- base::grepl
[10:32:41.300]                           restarts <- computeRestarts(cond)
[10:32:41.300]                           for (restart in restarts) {
[10:32:41.300]                             name <- restart$name
[10:32:41.300]                             if (is.null(name)) 
[10:32:41.300]                               next
[10:32:41.300]                             if (!grepl(pattern, name)) 
[10:32:41.300]                               next
[10:32:41.300]                             invokeRestart(restart)
[10:32:41.300]                             muffled <- TRUE
[10:32:41.300]                             break
[10:32:41.300]                           }
[10:32:41.300]                         }
[10:32:41.300]                       }
[10:32:41.300]                       invisible(muffled)
[10:32:41.300]                     }
[10:32:41.300]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.300]                   }
[10:32:41.300]                 }
[10:32:41.300]                 else {
[10:32:41.300]                   if (TRUE) {
[10:32:41.300]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.300]                     {
[10:32:41.300]                       inherits <- base::inherits
[10:32:41.300]                       invokeRestart <- base::invokeRestart
[10:32:41.300]                       is.null <- base::is.null
[10:32:41.300]                       muffled <- FALSE
[10:32:41.300]                       if (inherits(cond, "message")) {
[10:32:41.300]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.300]                         if (muffled) 
[10:32:41.300]                           invokeRestart("muffleMessage")
[10:32:41.300]                       }
[10:32:41.300]                       else if (inherits(cond, "warning")) {
[10:32:41.300]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.300]                         if (muffled) 
[10:32:41.300]                           invokeRestart("muffleWarning")
[10:32:41.300]                       }
[10:32:41.300]                       else if (inherits(cond, "condition")) {
[10:32:41.300]                         if (!is.null(pattern)) {
[10:32:41.300]                           computeRestarts <- base::computeRestarts
[10:32:41.300]                           grepl <- base::grepl
[10:32:41.300]                           restarts <- computeRestarts(cond)
[10:32:41.300]                           for (restart in restarts) {
[10:32:41.300]                             name <- restart$name
[10:32:41.300]                             if (is.null(name)) 
[10:32:41.300]                               next
[10:32:41.300]                             if (!grepl(pattern, name)) 
[10:32:41.300]                               next
[10:32:41.300]                             invokeRestart(restart)
[10:32:41.300]                             muffled <- TRUE
[10:32:41.300]                             break
[10:32:41.300]                           }
[10:32:41.300]                         }
[10:32:41.300]                       }
[10:32:41.300]                       invisible(muffled)
[10:32:41.300]                     }
[10:32:41.300]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.300]                   }
[10:32:41.300]                 }
[10:32:41.300]             }
[10:32:41.300]         }))
[10:32:41.300]     }, error = function(ex) {
[10:32:41.300]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.300]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.300]                 ...future.rng), started = ...future.startTime, 
[10:32:41.300]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.300]             version = "1.8"), class = "FutureResult")
[10:32:41.300]     }, finally = {
[10:32:41.300]         if (!identical(...future.workdir, getwd())) 
[10:32:41.300]             setwd(...future.workdir)
[10:32:41.300]         {
[10:32:41.300]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.300]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.300]             }
[10:32:41.300]             base::options(...future.oldOptions)
[10:32:41.300]             if (.Platform$OS.type == "windows") {
[10:32:41.300]                 old_names <- names(...future.oldEnvVars)
[10:32:41.300]                 envs <- base::Sys.getenv()
[10:32:41.300]                 names <- names(envs)
[10:32:41.300]                 common <- intersect(names, old_names)
[10:32:41.300]                 added <- setdiff(names, old_names)
[10:32:41.300]                 removed <- setdiff(old_names, names)
[10:32:41.300]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.300]                   envs[common]]
[10:32:41.300]                 NAMES <- toupper(changed)
[10:32:41.300]                 args <- list()
[10:32:41.300]                 for (kk in seq_along(NAMES)) {
[10:32:41.300]                   name <- changed[[kk]]
[10:32:41.300]                   NAME <- NAMES[[kk]]
[10:32:41.300]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.300]                     next
[10:32:41.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.300]                 }
[10:32:41.300]                 NAMES <- toupper(added)
[10:32:41.300]                 for (kk in seq_along(NAMES)) {
[10:32:41.300]                   name <- added[[kk]]
[10:32:41.300]                   NAME <- NAMES[[kk]]
[10:32:41.300]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.300]                     next
[10:32:41.300]                   args[[name]] <- ""
[10:32:41.300]                 }
[10:32:41.300]                 NAMES <- toupper(removed)
[10:32:41.300]                 for (kk in seq_along(NAMES)) {
[10:32:41.300]                   name <- removed[[kk]]
[10:32:41.300]                   NAME <- NAMES[[kk]]
[10:32:41.300]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.300]                     next
[10:32:41.300]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.300]                 }
[10:32:41.300]                 if (length(args) > 0) 
[10:32:41.300]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.300]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.300]             }
[10:32:41.300]             else {
[10:32:41.300]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.300]             }
[10:32:41.300]             {
[10:32:41.300]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.300]                   0L) {
[10:32:41.300]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.300]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.300]                   base::options(opts)
[10:32:41.300]                 }
[10:32:41.300]                 {
[10:32:41.300]                   {
[10:32:41.300]                     NULL
[10:32:41.300]                     RNGkind("Mersenne-Twister")
[10:32:41.300]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.300]                       inherits = FALSE)
[10:32:41.300]                   }
[10:32:41.300]                   options(future.plan = NULL)
[10:32:41.300]                   if (is.na(NA_character_)) 
[10:32:41.300]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.300]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.300]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.300]                     .init = FALSE)
[10:32:41.300]                 }
[10:32:41.300]             }
[10:32:41.300]         }
[10:32:41.300]     })
[10:32:41.300]     if (TRUE) {
[10:32:41.300]         base::sink(type = "output", split = FALSE)
[10:32:41.300]         if (TRUE) {
[10:32:41.300]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.300]         }
[10:32:41.300]         else {
[10:32:41.300]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.300]         }
[10:32:41.300]         base::close(...future.stdout)
[10:32:41.300]         ...future.stdout <- NULL
[10:32:41.300]     }
[10:32:41.300]     ...future.result$conditions <- ...future.conditions
[10:32:41.300]     ...future.result$finished <- base::Sys.time()
[10:32:41.300]     ...future.result
[10:32:41.300] }
[10:32:41.302] plan(): Setting new future strategy stack:
[10:32:41.302] List of future strategies:
[10:32:41.302] 1. sequential:
[10:32:41.302]    - args: function (..., envir = parent.frame())
[10:32:41.302]    - tweaked: FALSE
[10:32:41.302]    - call: NULL
[10:32:41.302] plan(): nbrOfWorkers() = 1
[10:32:41.303] plan(): Setting new future strategy stack:
[10:32:41.303] List of future strategies:
[10:32:41.303] 1. sequential:
[10:32:41.303]    - args: function (..., envir = parent.frame())
[10:32:41.303]    - tweaked: FALSE
[10:32:41.303]    - call: future::plan("sequential")
[10:32:41.303] plan(): nbrOfWorkers() = 1
[10:32:41.303] SequentialFuture started (and completed)
[10:32:41.304] - Launch lazy future ... done
[10:32:41.304] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[10:32:41.308] getGlobalsAndPackages() ...
[10:32:41.308] Searching for globals...
[10:32:41.309] - globals found: [1] ‘{’
[10:32:41.309] Searching for globals ... DONE
[10:32:41.309] Resolving globals: FALSE
[10:32:41.309] 
[10:32:41.309] 
[10:32:41.310] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[10:32:41.313] getGlobalsAndPackages() ...
[10:32:41.313] Searching for globals...
[10:32:41.313] - globals found: [1] ‘{’
[10:32:41.313] Searching for globals ... DONE
[10:32:41.314] Resolving globals: FALSE
[10:32:41.314] 
[10:32:41.314] 
[10:32:41.314] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[10:32:41.315] run() for ‘Future’ ...
[10:32:41.315] - state: ‘created’
[10:32:41.315] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.315] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.315] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.315]   - Field: ‘label’
[10:32:41.316]   - Field: ‘local’
[10:32:41.316]   - Field: ‘owner’
[10:32:41.316]   - Field: ‘envir’
[10:32:41.316]   - Field: ‘packages’
[10:32:41.316]   - Field: ‘gc’
[10:32:41.316]   - Field: ‘conditions’
[10:32:41.316]   - Field: ‘expr’
[10:32:41.316]   - Field: ‘uuid’
[10:32:41.316]   - Field: ‘seed’
[10:32:41.316]   - Field: ‘version’
[10:32:41.316]   - Field: ‘result’
[10:32:41.317]   - Field: ‘asynchronous’
[10:32:41.317]   - Field: ‘calls’
[10:32:41.317]   - Field: ‘globals’
[10:32:41.317]   - Field: ‘stdout’
[10:32:41.317]   - Field: ‘earlySignal’
[10:32:41.317]   - Field: ‘lazy’
[10:32:41.317]   - Field: ‘state’
[10:32:41.317] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.317] - Launch lazy future ...
[10:32:41.317] Packages needed by the future expression (n = 0): <none>
[10:32:41.318] Packages needed by future strategies (n = 0): <none>
[10:32:41.318] {
[10:32:41.318]     {
[10:32:41.318]         {
[10:32:41.318]             ...future.startTime <- base::Sys.time()
[10:32:41.318]             {
[10:32:41.318]                 {
[10:32:41.318]                   {
[10:32:41.318]                     base::local({
[10:32:41.318]                       has_future <- base::requireNamespace("future", 
[10:32:41.318]                         quietly = TRUE)
[10:32:41.318]                       if (has_future) {
[10:32:41.318]                         ns <- base::getNamespace("future")
[10:32:41.318]                         version <- ns[[".package"]][["version"]]
[10:32:41.318]                         if (is.null(version)) 
[10:32:41.318]                           version <- utils::packageVersion("future")
[10:32:41.318]                       }
[10:32:41.318]                       else {
[10:32:41.318]                         version <- NULL
[10:32:41.318]                       }
[10:32:41.318]                       if (!has_future || version < "1.8.0") {
[10:32:41.318]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.318]                           "", base::R.version$version.string), 
[10:32:41.318]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.318]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.318]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.318]                             "release", "version")], collapse = " "), 
[10:32:41.318]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.318]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.318]                           info)
[10:32:41.318]                         info <- base::paste(info, collapse = "; ")
[10:32:41.318]                         if (!has_future) {
[10:32:41.318]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.318]                             info)
[10:32:41.318]                         }
[10:32:41.318]                         else {
[10:32:41.318]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.318]                             info, version)
[10:32:41.318]                         }
[10:32:41.318]                         base::stop(msg)
[10:32:41.318]                       }
[10:32:41.318]                     })
[10:32:41.318]                   }
[10:32:41.318]                   ...future.strategy.old <- future::plan("list")
[10:32:41.318]                   options(future.plan = NULL)
[10:32:41.318]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.318]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.318]                 }
[10:32:41.318]                 ...future.workdir <- getwd()
[10:32:41.318]             }
[10:32:41.318]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.318]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.318]         }
[10:32:41.318]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.318]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.318]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.318]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.318]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.318]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.318]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.318]             base::names(...future.oldOptions))
[10:32:41.318]     }
[10:32:41.318]     if (FALSE) {
[10:32:41.318]     }
[10:32:41.318]     else {
[10:32:41.318]         if (TRUE) {
[10:32:41.318]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.318]                 open = "w")
[10:32:41.318]         }
[10:32:41.318]         else {
[10:32:41.318]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.318]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.318]         }
[10:32:41.318]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.318]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.318]             base::sink(type = "output", split = FALSE)
[10:32:41.318]             base::close(...future.stdout)
[10:32:41.318]         }, add = TRUE)
[10:32:41.318]     }
[10:32:41.318]     ...future.frame <- base::sys.nframe()
[10:32:41.318]     ...future.conditions <- base::list()
[10:32:41.318]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.318]     if (FALSE) {
[10:32:41.318]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.318]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.318]     }
[10:32:41.318]     ...future.result <- base::tryCatch({
[10:32:41.318]         base::withCallingHandlers({
[10:32:41.318]             ...future.value <- base::withVisible(base::local({
[10:32:41.318]                 1
[10:32:41.318]             }))
[10:32:41.318]             future::FutureResult(value = ...future.value$value, 
[10:32:41.318]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.318]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.318]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.318]                     ...future.globalenv.names))
[10:32:41.318]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.318]         }, condition = base::local({
[10:32:41.318]             c <- base::c
[10:32:41.318]             inherits <- base::inherits
[10:32:41.318]             invokeRestart <- base::invokeRestart
[10:32:41.318]             length <- base::length
[10:32:41.318]             list <- base::list
[10:32:41.318]             seq.int <- base::seq.int
[10:32:41.318]             signalCondition <- base::signalCondition
[10:32:41.318]             sys.calls <- base::sys.calls
[10:32:41.318]             `[[` <- base::`[[`
[10:32:41.318]             `+` <- base::`+`
[10:32:41.318]             `<<-` <- base::`<<-`
[10:32:41.318]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.318]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.318]                   3L)]
[10:32:41.318]             }
[10:32:41.318]             function(cond) {
[10:32:41.318]                 is_error <- inherits(cond, "error")
[10:32:41.318]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.318]                   NULL)
[10:32:41.318]                 if (is_error) {
[10:32:41.318]                   sessionInformation <- function() {
[10:32:41.318]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.318]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.318]                       search = base::search(), system = base::Sys.info())
[10:32:41.318]                   }
[10:32:41.318]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.318]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.318]                     cond$call), session = sessionInformation(), 
[10:32:41.318]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.318]                   signalCondition(cond)
[10:32:41.318]                 }
[10:32:41.318]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.318]                 "immediateCondition"))) {
[10:32:41.318]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.318]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.318]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.318]                   if (TRUE && !signal) {
[10:32:41.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.318]                     {
[10:32:41.318]                       inherits <- base::inherits
[10:32:41.318]                       invokeRestart <- base::invokeRestart
[10:32:41.318]                       is.null <- base::is.null
[10:32:41.318]                       muffled <- FALSE
[10:32:41.318]                       if (inherits(cond, "message")) {
[10:32:41.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.318]                         if (muffled) 
[10:32:41.318]                           invokeRestart("muffleMessage")
[10:32:41.318]                       }
[10:32:41.318]                       else if (inherits(cond, "warning")) {
[10:32:41.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.318]                         if (muffled) 
[10:32:41.318]                           invokeRestart("muffleWarning")
[10:32:41.318]                       }
[10:32:41.318]                       else if (inherits(cond, "condition")) {
[10:32:41.318]                         if (!is.null(pattern)) {
[10:32:41.318]                           computeRestarts <- base::computeRestarts
[10:32:41.318]                           grepl <- base::grepl
[10:32:41.318]                           restarts <- computeRestarts(cond)
[10:32:41.318]                           for (restart in restarts) {
[10:32:41.318]                             name <- restart$name
[10:32:41.318]                             if (is.null(name)) 
[10:32:41.318]                               next
[10:32:41.318]                             if (!grepl(pattern, name)) 
[10:32:41.318]                               next
[10:32:41.318]                             invokeRestart(restart)
[10:32:41.318]                             muffled <- TRUE
[10:32:41.318]                             break
[10:32:41.318]                           }
[10:32:41.318]                         }
[10:32:41.318]                       }
[10:32:41.318]                       invisible(muffled)
[10:32:41.318]                     }
[10:32:41.318]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.318]                   }
[10:32:41.318]                 }
[10:32:41.318]                 else {
[10:32:41.318]                   if (TRUE) {
[10:32:41.318]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.318]                     {
[10:32:41.318]                       inherits <- base::inherits
[10:32:41.318]                       invokeRestart <- base::invokeRestart
[10:32:41.318]                       is.null <- base::is.null
[10:32:41.318]                       muffled <- FALSE
[10:32:41.318]                       if (inherits(cond, "message")) {
[10:32:41.318]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.318]                         if (muffled) 
[10:32:41.318]                           invokeRestart("muffleMessage")
[10:32:41.318]                       }
[10:32:41.318]                       else if (inherits(cond, "warning")) {
[10:32:41.318]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.318]                         if (muffled) 
[10:32:41.318]                           invokeRestart("muffleWarning")
[10:32:41.318]                       }
[10:32:41.318]                       else if (inherits(cond, "condition")) {
[10:32:41.318]                         if (!is.null(pattern)) {
[10:32:41.318]                           computeRestarts <- base::computeRestarts
[10:32:41.318]                           grepl <- base::grepl
[10:32:41.318]                           restarts <- computeRestarts(cond)
[10:32:41.318]                           for (restart in restarts) {
[10:32:41.318]                             name <- restart$name
[10:32:41.318]                             if (is.null(name)) 
[10:32:41.318]                               next
[10:32:41.318]                             if (!grepl(pattern, name)) 
[10:32:41.318]                               next
[10:32:41.318]                             invokeRestart(restart)
[10:32:41.318]                             muffled <- TRUE
[10:32:41.318]                             break
[10:32:41.318]                           }
[10:32:41.318]                         }
[10:32:41.318]                       }
[10:32:41.318]                       invisible(muffled)
[10:32:41.318]                     }
[10:32:41.318]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.318]                   }
[10:32:41.318]                 }
[10:32:41.318]             }
[10:32:41.318]         }))
[10:32:41.318]     }, error = function(ex) {
[10:32:41.318]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.318]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.318]                 ...future.rng), started = ...future.startTime, 
[10:32:41.318]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.318]             version = "1.8"), class = "FutureResult")
[10:32:41.318]     }, finally = {
[10:32:41.318]         if (!identical(...future.workdir, getwd())) 
[10:32:41.318]             setwd(...future.workdir)
[10:32:41.318]         {
[10:32:41.318]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.318]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.318]             }
[10:32:41.318]             base::options(...future.oldOptions)
[10:32:41.318]             if (.Platform$OS.type == "windows") {
[10:32:41.318]                 old_names <- names(...future.oldEnvVars)
[10:32:41.318]                 envs <- base::Sys.getenv()
[10:32:41.318]                 names <- names(envs)
[10:32:41.318]                 common <- intersect(names, old_names)
[10:32:41.318]                 added <- setdiff(names, old_names)
[10:32:41.318]                 removed <- setdiff(old_names, names)
[10:32:41.318]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.318]                   envs[common]]
[10:32:41.318]                 NAMES <- toupper(changed)
[10:32:41.318]                 args <- list()
[10:32:41.318]                 for (kk in seq_along(NAMES)) {
[10:32:41.318]                   name <- changed[[kk]]
[10:32:41.318]                   NAME <- NAMES[[kk]]
[10:32:41.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.318]                     next
[10:32:41.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.318]                 }
[10:32:41.318]                 NAMES <- toupper(added)
[10:32:41.318]                 for (kk in seq_along(NAMES)) {
[10:32:41.318]                   name <- added[[kk]]
[10:32:41.318]                   NAME <- NAMES[[kk]]
[10:32:41.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.318]                     next
[10:32:41.318]                   args[[name]] <- ""
[10:32:41.318]                 }
[10:32:41.318]                 NAMES <- toupper(removed)
[10:32:41.318]                 for (kk in seq_along(NAMES)) {
[10:32:41.318]                   name <- removed[[kk]]
[10:32:41.318]                   NAME <- NAMES[[kk]]
[10:32:41.318]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.318]                     next
[10:32:41.318]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.318]                 }
[10:32:41.318]                 if (length(args) > 0) 
[10:32:41.318]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.318]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.318]             }
[10:32:41.318]             else {
[10:32:41.318]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.318]             }
[10:32:41.318]             {
[10:32:41.318]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.318]                   0L) {
[10:32:41.318]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.318]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.318]                   base::options(opts)
[10:32:41.318]                 }
[10:32:41.318]                 {
[10:32:41.318]                   {
[10:32:41.318]                     NULL
[10:32:41.318]                     RNGkind("Mersenne-Twister")
[10:32:41.318]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.318]                       inherits = FALSE)
[10:32:41.318]                   }
[10:32:41.318]                   options(future.plan = NULL)
[10:32:41.318]                   if (is.na(NA_character_)) 
[10:32:41.318]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.318]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.318]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.318]                     .init = FALSE)
[10:32:41.318]                 }
[10:32:41.318]             }
[10:32:41.318]         }
[10:32:41.318]     })
[10:32:41.318]     if (TRUE) {
[10:32:41.318]         base::sink(type = "output", split = FALSE)
[10:32:41.318]         if (TRUE) {
[10:32:41.318]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.318]         }
[10:32:41.318]         else {
[10:32:41.318]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.318]         }
[10:32:41.318]         base::close(...future.stdout)
[10:32:41.318]         ...future.stdout <- NULL
[10:32:41.318]     }
[10:32:41.318]     ...future.result$conditions <- ...future.conditions
[10:32:41.318]     ...future.result$finished <- base::Sys.time()
[10:32:41.318]     ...future.result
[10:32:41.318] }
[10:32:41.320] plan(): Setting new future strategy stack:
[10:32:41.320] List of future strategies:
[10:32:41.320] 1. sequential:
[10:32:41.320]    - args: function (..., envir = parent.frame())
[10:32:41.320]    - tweaked: FALSE
[10:32:41.320]    - call: NULL
[10:32:41.320] plan(): nbrOfWorkers() = 1
[10:32:41.321] plan(): Setting new future strategy stack:
[10:32:41.321] List of future strategies:
[10:32:41.321] 1. sequential:
[10:32:41.321]    - args: function (..., envir = parent.frame())
[10:32:41.321]    - tweaked: FALSE
[10:32:41.321]    - call: future::plan("sequential")
[10:32:41.321] plan(): nbrOfWorkers() = 1
[10:32:41.321] SequentialFuture started (and completed)
[10:32:41.321] - Launch lazy future ... done
[10:32:41.322] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[10:32:41.322] run() for ‘Future’ ...
[10:32:41.322] - state: ‘created’
[10:32:41.322] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.322] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.322] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.323]   - Field: ‘label’
[10:32:41.323]   - Field: ‘local’
[10:32:41.323]   - Field: ‘owner’
[10:32:41.323]   - Field: ‘envir’
[10:32:41.323]   - Field: ‘packages’
[10:32:41.323]   - Field: ‘gc’
[10:32:41.323]   - Field: ‘conditions’
[10:32:41.323]   - Field: ‘expr’
[10:32:41.323]   - Field: ‘uuid’
[10:32:41.323]   - Field: ‘seed’
[10:32:41.324]   - Field: ‘version’
[10:32:41.324]   - Field: ‘result’
[10:32:41.324]   - Field: ‘asynchronous’
[10:32:41.324]   - Field: ‘calls’
[10:32:41.324]   - Field: ‘globals’
[10:32:41.324]   - Field: ‘stdout’
[10:32:41.324]   - Field: ‘earlySignal’
[10:32:41.324]   - Field: ‘lazy’
[10:32:41.324]   - Field: ‘state’
[10:32:41.324] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.324] - Launch lazy future ...
[10:32:41.325] Packages needed by the future expression (n = 0): <none>
[10:32:41.325] Packages needed by future strategies (n = 0): <none>
[10:32:41.325] {
[10:32:41.325]     {
[10:32:41.325]         {
[10:32:41.325]             ...future.startTime <- base::Sys.time()
[10:32:41.325]             {
[10:32:41.325]                 {
[10:32:41.325]                   {
[10:32:41.325]                     base::local({
[10:32:41.325]                       has_future <- base::requireNamespace("future", 
[10:32:41.325]                         quietly = TRUE)
[10:32:41.325]                       if (has_future) {
[10:32:41.325]                         ns <- base::getNamespace("future")
[10:32:41.325]                         version <- ns[[".package"]][["version"]]
[10:32:41.325]                         if (is.null(version)) 
[10:32:41.325]                           version <- utils::packageVersion("future")
[10:32:41.325]                       }
[10:32:41.325]                       else {
[10:32:41.325]                         version <- NULL
[10:32:41.325]                       }
[10:32:41.325]                       if (!has_future || version < "1.8.0") {
[10:32:41.325]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.325]                           "", base::R.version$version.string), 
[10:32:41.325]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.325]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.325]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.325]                             "release", "version")], collapse = " "), 
[10:32:41.325]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.325]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.325]                           info)
[10:32:41.325]                         info <- base::paste(info, collapse = "; ")
[10:32:41.325]                         if (!has_future) {
[10:32:41.325]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.325]                             info)
[10:32:41.325]                         }
[10:32:41.325]                         else {
[10:32:41.325]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.325]                             info, version)
[10:32:41.325]                         }
[10:32:41.325]                         base::stop(msg)
[10:32:41.325]                       }
[10:32:41.325]                     })
[10:32:41.325]                   }
[10:32:41.325]                   ...future.strategy.old <- future::plan("list")
[10:32:41.325]                   options(future.plan = NULL)
[10:32:41.325]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.325]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.325]                 }
[10:32:41.325]                 ...future.workdir <- getwd()
[10:32:41.325]             }
[10:32:41.325]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.325]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.325]         }
[10:32:41.325]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.325]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.325]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.325]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.325]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.325]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.325]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.325]             base::names(...future.oldOptions))
[10:32:41.325]     }
[10:32:41.325]     if (FALSE) {
[10:32:41.325]     }
[10:32:41.325]     else {
[10:32:41.325]         if (TRUE) {
[10:32:41.325]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.325]                 open = "w")
[10:32:41.325]         }
[10:32:41.325]         else {
[10:32:41.325]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.325]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.325]         }
[10:32:41.325]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.325]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.325]             base::sink(type = "output", split = FALSE)
[10:32:41.325]             base::close(...future.stdout)
[10:32:41.325]         }, add = TRUE)
[10:32:41.325]     }
[10:32:41.325]     ...future.frame <- base::sys.nframe()
[10:32:41.325]     ...future.conditions <- base::list()
[10:32:41.325]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.325]     if (FALSE) {
[10:32:41.325]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.325]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.325]     }
[10:32:41.325]     ...future.result <- base::tryCatch({
[10:32:41.325]         base::withCallingHandlers({
[10:32:41.325]             ...future.value <- base::withVisible(base::local({
[10:32:41.325]                 2
[10:32:41.325]             }))
[10:32:41.325]             future::FutureResult(value = ...future.value$value, 
[10:32:41.325]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.325]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.325]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.325]                     ...future.globalenv.names))
[10:32:41.325]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.325]         }, condition = base::local({
[10:32:41.325]             c <- base::c
[10:32:41.325]             inherits <- base::inherits
[10:32:41.325]             invokeRestart <- base::invokeRestart
[10:32:41.325]             length <- base::length
[10:32:41.325]             list <- base::list
[10:32:41.325]             seq.int <- base::seq.int
[10:32:41.325]             signalCondition <- base::signalCondition
[10:32:41.325]             sys.calls <- base::sys.calls
[10:32:41.325]             `[[` <- base::`[[`
[10:32:41.325]             `+` <- base::`+`
[10:32:41.325]             `<<-` <- base::`<<-`
[10:32:41.325]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.325]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.325]                   3L)]
[10:32:41.325]             }
[10:32:41.325]             function(cond) {
[10:32:41.325]                 is_error <- inherits(cond, "error")
[10:32:41.325]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.325]                   NULL)
[10:32:41.325]                 if (is_error) {
[10:32:41.325]                   sessionInformation <- function() {
[10:32:41.325]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.325]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.325]                       search = base::search(), system = base::Sys.info())
[10:32:41.325]                   }
[10:32:41.325]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.325]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.325]                     cond$call), session = sessionInformation(), 
[10:32:41.325]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.325]                   signalCondition(cond)
[10:32:41.325]                 }
[10:32:41.325]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.325]                 "immediateCondition"))) {
[10:32:41.325]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.325]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.325]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.325]                   if (TRUE && !signal) {
[10:32:41.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.325]                     {
[10:32:41.325]                       inherits <- base::inherits
[10:32:41.325]                       invokeRestart <- base::invokeRestart
[10:32:41.325]                       is.null <- base::is.null
[10:32:41.325]                       muffled <- FALSE
[10:32:41.325]                       if (inherits(cond, "message")) {
[10:32:41.325]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.325]                         if (muffled) 
[10:32:41.325]                           invokeRestart("muffleMessage")
[10:32:41.325]                       }
[10:32:41.325]                       else if (inherits(cond, "warning")) {
[10:32:41.325]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.325]                         if (muffled) 
[10:32:41.325]                           invokeRestart("muffleWarning")
[10:32:41.325]                       }
[10:32:41.325]                       else if (inherits(cond, "condition")) {
[10:32:41.325]                         if (!is.null(pattern)) {
[10:32:41.325]                           computeRestarts <- base::computeRestarts
[10:32:41.325]                           grepl <- base::grepl
[10:32:41.325]                           restarts <- computeRestarts(cond)
[10:32:41.325]                           for (restart in restarts) {
[10:32:41.325]                             name <- restart$name
[10:32:41.325]                             if (is.null(name)) 
[10:32:41.325]                               next
[10:32:41.325]                             if (!grepl(pattern, name)) 
[10:32:41.325]                               next
[10:32:41.325]                             invokeRestart(restart)
[10:32:41.325]                             muffled <- TRUE
[10:32:41.325]                             break
[10:32:41.325]                           }
[10:32:41.325]                         }
[10:32:41.325]                       }
[10:32:41.325]                       invisible(muffled)
[10:32:41.325]                     }
[10:32:41.325]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.325]                   }
[10:32:41.325]                 }
[10:32:41.325]                 else {
[10:32:41.325]                   if (TRUE) {
[10:32:41.325]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.325]                     {
[10:32:41.325]                       inherits <- base::inherits
[10:32:41.325]                       invokeRestart <- base::invokeRestart
[10:32:41.325]                       is.null <- base::is.null
[10:32:41.325]                       muffled <- FALSE
[10:32:41.325]                       if (inherits(cond, "message")) {
[10:32:41.325]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.325]                         if (muffled) 
[10:32:41.325]                           invokeRestart("muffleMessage")
[10:32:41.325]                       }
[10:32:41.325]                       else if (inherits(cond, "warning")) {
[10:32:41.325]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.325]                         if (muffled) 
[10:32:41.325]                           invokeRestart("muffleWarning")
[10:32:41.325]                       }
[10:32:41.325]                       else if (inherits(cond, "condition")) {
[10:32:41.325]                         if (!is.null(pattern)) {
[10:32:41.325]                           computeRestarts <- base::computeRestarts
[10:32:41.325]                           grepl <- base::grepl
[10:32:41.325]                           restarts <- computeRestarts(cond)
[10:32:41.325]                           for (restart in restarts) {
[10:32:41.325]                             name <- restart$name
[10:32:41.325]                             if (is.null(name)) 
[10:32:41.325]                               next
[10:32:41.325]                             if (!grepl(pattern, name)) 
[10:32:41.325]                               next
[10:32:41.325]                             invokeRestart(restart)
[10:32:41.325]                             muffled <- TRUE
[10:32:41.325]                             break
[10:32:41.325]                           }
[10:32:41.325]                         }
[10:32:41.325]                       }
[10:32:41.325]                       invisible(muffled)
[10:32:41.325]                     }
[10:32:41.325]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.325]                   }
[10:32:41.325]                 }
[10:32:41.325]             }
[10:32:41.325]         }))
[10:32:41.325]     }, error = function(ex) {
[10:32:41.325]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.325]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.325]                 ...future.rng), started = ...future.startTime, 
[10:32:41.325]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.325]             version = "1.8"), class = "FutureResult")
[10:32:41.325]     }, finally = {
[10:32:41.325]         if (!identical(...future.workdir, getwd())) 
[10:32:41.325]             setwd(...future.workdir)
[10:32:41.325]         {
[10:32:41.325]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.325]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.325]             }
[10:32:41.325]             base::options(...future.oldOptions)
[10:32:41.325]             if (.Platform$OS.type == "windows") {
[10:32:41.325]                 old_names <- names(...future.oldEnvVars)
[10:32:41.325]                 envs <- base::Sys.getenv()
[10:32:41.325]                 names <- names(envs)
[10:32:41.325]                 common <- intersect(names, old_names)
[10:32:41.325]                 added <- setdiff(names, old_names)
[10:32:41.325]                 removed <- setdiff(old_names, names)
[10:32:41.325]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.325]                   envs[common]]
[10:32:41.325]                 NAMES <- toupper(changed)
[10:32:41.325]                 args <- list()
[10:32:41.325]                 for (kk in seq_along(NAMES)) {
[10:32:41.325]                   name <- changed[[kk]]
[10:32:41.325]                   NAME <- NAMES[[kk]]
[10:32:41.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.325]                     next
[10:32:41.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.325]                 }
[10:32:41.325]                 NAMES <- toupper(added)
[10:32:41.325]                 for (kk in seq_along(NAMES)) {
[10:32:41.325]                   name <- added[[kk]]
[10:32:41.325]                   NAME <- NAMES[[kk]]
[10:32:41.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.325]                     next
[10:32:41.325]                   args[[name]] <- ""
[10:32:41.325]                 }
[10:32:41.325]                 NAMES <- toupper(removed)
[10:32:41.325]                 for (kk in seq_along(NAMES)) {
[10:32:41.325]                   name <- removed[[kk]]
[10:32:41.325]                   NAME <- NAMES[[kk]]
[10:32:41.325]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.325]                     next
[10:32:41.325]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.325]                 }
[10:32:41.325]                 if (length(args) > 0) 
[10:32:41.325]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.325]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.325]             }
[10:32:41.325]             else {
[10:32:41.325]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.325]             }
[10:32:41.325]             {
[10:32:41.325]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.325]                   0L) {
[10:32:41.325]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.325]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.325]                   base::options(opts)
[10:32:41.325]                 }
[10:32:41.325]                 {
[10:32:41.325]                   {
[10:32:41.325]                     NULL
[10:32:41.325]                     RNGkind("Mersenne-Twister")
[10:32:41.325]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.325]                       inherits = FALSE)
[10:32:41.325]                   }
[10:32:41.325]                   options(future.plan = NULL)
[10:32:41.325]                   if (is.na(NA_character_)) 
[10:32:41.325]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.325]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.325]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.325]                     .init = FALSE)
[10:32:41.325]                 }
[10:32:41.325]             }
[10:32:41.325]         }
[10:32:41.325]     })
[10:32:41.325]     if (TRUE) {
[10:32:41.325]         base::sink(type = "output", split = FALSE)
[10:32:41.325]         if (TRUE) {
[10:32:41.325]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.325]         }
[10:32:41.325]         else {
[10:32:41.325]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.325]         }
[10:32:41.325]         base::close(...future.stdout)
[10:32:41.325]         ...future.stdout <- NULL
[10:32:41.325]     }
[10:32:41.325]     ...future.result$conditions <- ...future.conditions
[10:32:41.325]     ...future.result$finished <- base::Sys.time()
[10:32:41.325]     ...future.result
[10:32:41.325] }
[10:32:41.327] plan(): Setting new future strategy stack:
[10:32:41.327] List of future strategies:
[10:32:41.327] 1. sequential:
[10:32:41.327]    - args: function (..., envir = parent.frame())
[10:32:41.327]    - tweaked: FALSE
[10:32:41.327]    - call: NULL
[10:32:41.327] plan(): nbrOfWorkers() = 1
[10:32:41.328] plan(): Setting new future strategy stack:
[10:32:41.328] List of future strategies:
[10:32:41.328] 1. sequential:
[10:32:41.328]    - args: function (..., envir = parent.frame())
[10:32:41.328]    - tweaked: FALSE
[10:32:41.328]    - call: future::plan("sequential")
[10:32:41.328] plan(): nbrOfWorkers() = 1
[10:32:41.328] SequentialFuture started (and completed)
[10:32:41.329] - Launch lazy future ... done
[10:32:41.329] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[10:32:41.334] getGlobalsAndPackages() ...
[10:32:41.334] Searching for globals...
[10:32:41.336] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.336] Searching for globals ... DONE
[10:32:41.336] Resolving globals: FALSE
[10:32:41.337] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.337] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.337] - globals: [2] ‘rr’, ‘cc’
[10:32:41.338] 
[10:32:41.338] getGlobalsAndPackages() ... DONE
[10:32:41.338] getGlobalsAndPackages() ...
[10:32:41.338] Searching for globals...
[10:32:41.339] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.339] Searching for globals ... DONE
[10:32:41.339] Resolving globals: FALSE
[10:32:41.339] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.340] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.340] - globals: [2] ‘rr’, ‘cc’
[10:32:41.340] 
[10:32:41.340] getGlobalsAndPackages() ... DONE
[10:32:41.342] getGlobalsAndPackages() ...
[10:32:41.342] Searching for globals...
[10:32:41.342] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.342] Searching for globals ... DONE
[10:32:41.343] Resolving globals: FALSE
[10:32:41.343] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.343] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.343] - globals: [2] ‘rr’, ‘cc’
[10:32:41.343] 
[10:32:41.344] getGlobalsAndPackages() ... DONE
[10:32:41.344] getGlobalsAndPackages() ...
[10:32:41.344] Searching for globals...
[10:32:41.345] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.345] Searching for globals ... DONE
[10:32:41.345] Resolving globals: FALSE
[10:32:41.345] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.346] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.346] - globals: [2] ‘rr’, ‘cc’
[10:32:41.346] 
[10:32:41.346] getGlobalsAndPackages() ... DONE
[10:32:41.346] getGlobalsAndPackages() ...
[10:32:41.347] Searching for globals...
[10:32:41.347] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.347] Searching for globals ... DONE
[10:32:41.347] Resolving globals: FALSE
[10:32:41.348] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.348] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.348] - globals: [2] ‘rr’, ‘cc’
[10:32:41.348] 
[10:32:41.348] getGlobalsAndPackages() ... DONE
[10:32:41.349] getGlobalsAndPackages() ...
[10:32:41.349] Searching for globals...
[10:32:41.349] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[10:32:41.349] Searching for globals ... DONE
[10:32:41.350] Resolving globals: FALSE
[10:32:41.350] The total size of the 2 globals is 112 bytes (112 bytes)
[10:32:41.350] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[10:32:41.350] - globals: [2] ‘rr’, ‘cc’
[10:32:41.350] 
[10:32:41.351] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[10:32:41.351] run() for ‘Future’ ...
[10:32:41.351] - state: ‘created’
[10:32:41.351] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.351] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.351] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.352]   - Field: ‘label’
[10:32:41.352]   - Field: ‘local’
[10:32:41.352]   - Field: ‘owner’
[10:32:41.352]   - Field: ‘envir’
[10:32:41.352]   - Field: ‘packages’
[10:32:41.352]   - Field: ‘gc’
[10:32:41.352]   - Field: ‘conditions’
[10:32:41.352]   - Field: ‘expr’
[10:32:41.352]   - Field: ‘uuid’
[10:32:41.352]   - Field: ‘seed’
[10:32:41.352]   - Field: ‘version’
[10:32:41.353]   - Field: ‘result’
[10:32:41.353]   - Field: ‘asynchronous’
[10:32:41.353]   - Field: ‘calls’
[10:32:41.353]   - Field: ‘globals’
[10:32:41.353]   - Field: ‘stdout’
[10:32:41.353]   - Field: ‘earlySignal’
[10:32:41.353]   - Field: ‘lazy’
[10:32:41.353]   - Field: ‘state’
[10:32:41.353] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.353] - Launch lazy future ...
[10:32:41.353] Packages needed by the future expression (n = 0): <none>
[10:32:41.354] Packages needed by future strategies (n = 0): <none>
[10:32:41.354] {
[10:32:41.354]     {
[10:32:41.354]         {
[10:32:41.354]             ...future.startTime <- base::Sys.time()
[10:32:41.354]             {
[10:32:41.354]                 {
[10:32:41.354]                   {
[10:32:41.354]                     base::local({
[10:32:41.354]                       has_future <- base::requireNamespace("future", 
[10:32:41.354]                         quietly = TRUE)
[10:32:41.354]                       if (has_future) {
[10:32:41.354]                         ns <- base::getNamespace("future")
[10:32:41.354]                         version <- ns[[".package"]][["version"]]
[10:32:41.354]                         if (is.null(version)) 
[10:32:41.354]                           version <- utils::packageVersion("future")
[10:32:41.354]                       }
[10:32:41.354]                       else {
[10:32:41.354]                         version <- NULL
[10:32:41.354]                       }
[10:32:41.354]                       if (!has_future || version < "1.8.0") {
[10:32:41.354]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.354]                           "", base::R.version$version.string), 
[10:32:41.354]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.354]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.354]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.354]                             "release", "version")], collapse = " "), 
[10:32:41.354]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.354]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.354]                           info)
[10:32:41.354]                         info <- base::paste(info, collapse = "; ")
[10:32:41.354]                         if (!has_future) {
[10:32:41.354]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.354]                             info)
[10:32:41.354]                         }
[10:32:41.354]                         else {
[10:32:41.354]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.354]                             info, version)
[10:32:41.354]                         }
[10:32:41.354]                         base::stop(msg)
[10:32:41.354]                       }
[10:32:41.354]                     })
[10:32:41.354]                   }
[10:32:41.354]                   ...future.strategy.old <- future::plan("list")
[10:32:41.354]                   options(future.plan = NULL)
[10:32:41.354]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.354]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.354]                 }
[10:32:41.354]                 ...future.workdir <- getwd()
[10:32:41.354]             }
[10:32:41.354]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.354]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.354]         }
[10:32:41.354]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.354]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.354]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.354]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.354]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.354]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.354]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.354]             base::names(...future.oldOptions))
[10:32:41.354]     }
[10:32:41.354]     if (FALSE) {
[10:32:41.354]     }
[10:32:41.354]     else {
[10:32:41.354]         if (TRUE) {
[10:32:41.354]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.354]                 open = "w")
[10:32:41.354]         }
[10:32:41.354]         else {
[10:32:41.354]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.354]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.354]         }
[10:32:41.354]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.354]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.354]             base::sink(type = "output", split = FALSE)
[10:32:41.354]             base::close(...future.stdout)
[10:32:41.354]         }, add = TRUE)
[10:32:41.354]     }
[10:32:41.354]     ...future.frame <- base::sys.nframe()
[10:32:41.354]     ...future.conditions <- base::list()
[10:32:41.354]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.354]     if (FALSE) {
[10:32:41.354]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.354]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.354]     }
[10:32:41.354]     ...future.result <- base::tryCatch({
[10:32:41.354]         base::withCallingHandlers({
[10:32:41.354]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.354]                 rr, cc)))
[10:32:41.354]             future::FutureResult(value = ...future.value$value, 
[10:32:41.354]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.354]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.354]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.354]                     ...future.globalenv.names))
[10:32:41.354]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.354]         }, condition = base::local({
[10:32:41.354]             c <- base::c
[10:32:41.354]             inherits <- base::inherits
[10:32:41.354]             invokeRestart <- base::invokeRestart
[10:32:41.354]             length <- base::length
[10:32:41.354]             list <- base::list
[10:32:41.354]             seq.int <- base::seq.int
[10:32:41.354]             signalCondition <- base::signalCondition
[10:32:41.354]             sys.calls <- base::sys.calls
[10:32:41.354]             `[[` <- base::`[[`
[10:32:41.354]             `+` <- base::`+`
[10:32:41.354]             `<<-` <- base::`<<-`
[10:32:41.354]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.354]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.354]                   3L)]
[10:32:41.354]             }
[10:32:41.354]             function(cond) {
[10:32:41.354]                 is_error <- inherits(cond, "error")
[10:32:41.354]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.354]                   NULL)
[10:32:41.354]                 if (is_error) {
[10:32:41.354]                   sessionInformation <- function() {
[10:32:41.354]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.354]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.354]                       search = base::search(), system = base::Sys.info())
[10:32:41.354]                   }
[10:32:41.354]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.354]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.354]                     cond$call), session = sessionInformation(), 
[10:32:41.354]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.354]                   signalCondition(cond)
[10:32:41.354]                 }
[10:32:41.354]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.354]                 "immediateCondition"))) {
[10:32:41.354]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.354]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.354]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.354]                   if (TRUE && !signal) {
[10:32:41.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.354]                     {
[10:32:41.354]                       inherits <- base::inherits
[10:32:41.354]                       invokeRestart <- base::invokeRestart
[10:32:41.354]                       is.null <- base::is.null
[10:32:41.354]                       muffled <- FALSE
[10:32:41.354]                       if (inherits(cond, "message")) {
[10:32:41.354]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.354]                         if (muffled) 
[10:32:41.354]                           invokeRestart("muffleMessage")
[10:32:41.354]                       }
[10:32:41.354]                       else if (inherits(cond, "warning")) {
[10:32:41.354]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.354]                         if (muffled) 
[10:32:41.354]                           invokeRestart("muffleWarning")
[10:32:41.354]                       }
[10:32:41.354]                       else if (inherits(cond, "condition")) {
[10:32:41.354]                         if (!is.null(pattern)) {
[10:32:41.354]                           computeRestarts <- base::computeRestarts
[10:32:41.354]                           grepl <- base::grepl
[10:32:41.354]                           restarts <- computeRestarts(cond)
[10:32:41.354]                           for (restart in restarts) {
[10:32:41.354]                             name <- restart$name
[10:32:41.354]                             if (is.null(name)) 
[10:32:41.354]                               next
[10:32:41.354]                             if (!grepl(pattern, name)) 
[10:32:41.354]                               next
[10:32:41.354]                             invokeRestart(restart)
[10:32:41.354]                             muffled <- TRUE
[10:32:41.354]                             break
[10:32:41.354]                           }
[10:32:41.354]                         }
[10:32:41.354]                       }
[10:32:41.354]                       invisible(muffled)
[10:32:41.354]                     }
[10:32:41.354]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.354]                   }
[10:32:41.354]                 }
[10:32:41.354]                 else {
[10:32:41.354]                   if (TRUE) {
[10:32:41.354]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.354]                     {
[10:32:41.354]                       inherits <- base::inherits
[10:32:41.354]                       invokeRestart <- base::invokeRestart
[10:32:41.354]                       is.null <- base::is.null
[10:32:41.354]                       muffled <- FALSE
[10:32:41.354]                       if (inherits(cond, "message")) {
[10:32:41.354]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.354]                         if (muffled) 
[10:32:41.354]                           invokeRestart("muffleMessage")
[10:32:41.354]                       }
[10:32:41.354]                       else if (inherits(cond, "warning")) {
[10:32:41.354]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.354]                         if (muffled) 
[10:32:41.354]                           invokeRestart("muffleWarning")
[10:32:41.354]                       }
[10:32:41.354]                       else if (inherits(cond, "condition")) {
[10:32:41.354]                         if (!is.null(pattern)) {
[10:32:41.354]                           computeRestarts <- base::computeRestarts
[10:32:41.354]                           grepl <- base::grepl
[10:32:41.354]                           restarts <- computeRestarts(cond)
[10:32:41.354]                           for (restart in restarts) {
[10:32:41.354]                             name <- restart$name
[10:32:41.354]                             if (is.null(name)) 
[10:32:41.354]                               next
[10:32:41.354]                             if (!grepl(pattern, name)) 
[10:32:41.354]                               next
[10:32:41.354]                             invokeRestart(restart)
[10:32:41.354]                             muffled <- TRUE
[10:32:41.354]                             break
[10:32:41.354]                           }
[10:32:41.354]                         }
[10:32:41.354]                       }
[10:32:41.354]                       invisible(muffled)
[10:32:41.354]                     }
[10:32:41.354]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.354]                   }
[10:32:41.354]                 }
[10:32:41.354]             }
[10:32:41.354]         }))
[10:32:41.354]     }, error = function(ex) {
[10:32:41.354]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.354]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.354]                 ...future.rng), started = ...future.startTime, 
[10:32:41.354]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.354]             version = "1.8"), class = "FutureResult")
[10:32:41.354]     }, finally = {
[10:32:41.354]         if (!identical(...future.workdir, getwd())) 
[10:32:41.354]             setwd(...future.workdir)
[10:32:41.354]         {
[10:32:41.354]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.354]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.354]             }
[10:32:41.354]             base::options(...future.oldOptions)
[10:32:41.354]             if (.Platform$OS.type == "windows") {
[10:32:41.354]                 old_names <- names(...future.oldEnvVars)
[10:32:41.354]                 envs <- base::Sys.getenv()
[10:32:41.354]                 names <- names(envs)
[10:32:41.354]                 common <- intersect(names, old_names)
[10:32:41.354]                 added <- setdiff(names, old_names)
[10:32:41.354]                 removed <- setdiff(old_names, names)
[10:32:41.354]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.354]                   envs[common]]
[10:32:41.354]                 NAMES <- toupper(changed)
[10:32:41.354]                 args <- list()
[10:32:41.354]                 for (kk in seq_along(NAMES)) {
[10:32:41.354]                   name <- changed[[kk]]
[10:32:41.354]                   NAME <- NAMES[[kk]]
[10:32:41.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.354]                     next
[10:32:41.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.354]                 }
[10:32:41.354]                 NAMES <- toupper(added)
[10:32:41.354]                 for (kk in seq_along(NAMES)) {
[10:32:41.354]                   name <- added[[kk]]
[10:32:41.354]                   NAME <- NAMES[[kk]]
[10:32:41.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.354]                     next
[10:32:41.354]                   args[[name]] <- ""
[10:32:41.354]                 }
[10:32:41.354]                 NAMES <- toupper(removed)
[10:32:41.354]                 for (kk in seq_along(NAMES)) {
[10:32:41.354]                   name <- removed[[kk]]
[10:32:41.354]                   NAME <- NAMES[[kk]]
[10:32:41.354]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.354]                     next
[10:32:41.354]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.354]                 }
[10:32:41.354]                 if (length(args) > 0) 
[10:32:41.354]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.354]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.354]             }
[10:32:41.354]             else {
[10:32:41.354]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.354]             }
[10:32:41.354]             {
[10:32:41.354]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.354]                   0L) {
[10:32:41.354]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.354]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.354]                   base::options(opts)
[10:32:41.354]                 }
[10:32:41.354]                 {
[10:32:41.354]                   {
[10:32:41.354]                     NULL
[10:32:41.354]                     RNGkind("Mersenne-Twister")
[10:32:41.354]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.354]                       inherits = FALSE)
[10:32:41.354]                   }
[10:32:41.354]                   options(future.plan = NULL)
[10:32:41.354]                   if (is.na(NA_character_)) 
[10:32:41.354]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.354]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.354]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.354]                     .init = FALSE)
[10:32:41.354]                 }
[10:32:41.354]             }
[10:32:41.354]         }
[10:32:41.354]     })
[10:32:41.354]     if (TRUE) {
[10:32:41.354]         base::sink(type = "output", split = FALSE)
[10:32:41.354]         if (TRUE) {
[10:32:41.354]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.354]         }
[10:32:41.354]         else {
[10:32:41.354]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.354]         }
[10:32:41.354]         base::close(...future.stdout)
[10:32:41.354]         ...future.stdout <- NULL
[10:32:41.354]     }
[10:32:41.354]     ...future.result$conditions <- ...future.conditions
[10:32:41.354]     ...future.result$finished <- base::Sys.time()
[10:32:41.354]     ...future.result
[10:32:41.354] }
[10:32:41.356] assign_globals() ...
[10:32:41.356] List of 2
[10:32:41.356]  $ rr: int 1
[10:32:41.356]  $ cc: int 1
[10:32:41.356]  - attr(*, "where")=List of 2
[10:32:41.356]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.356]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.356]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.356]  - attr(*, "resolved")= logi FALSE
[10:32:41.356]  - attr(*, "total_size")= num 112
[10:32:41.356]  - attr(*, "already-done")= logi TRUE
[10:32:41.358] - copied ‘rr’ to environment
[10:32:41.359] - copied ‘cc’ to environment
[10:32:41.359] assign_globals() ... done
[10:32:41.359] plan(): Setting new future strategy stack:
[10:32:41.359] List of future strategies:
[10:32:41.359] 1. sequential:
[10:32:41.359]    - args: function (..., envir = parent.frame())
[10:32:41.359]    - tweaked: FALSE
[10:32:41.359]    - call: NULL
[10:32:41.359] plan(): nbrOfWorkers() = 1
[10:32:41.360] plan(): Setting new future strategy stack:
[10:32:41.360] List of future strategies:
[10:32:41.360] 1. sequential:
[10:32:41.360]    - args: function (..., envir = parent.frame())
[10:32:41.360]    - tweaked: FALSE
[10:32:41.360]    - call: future::plan("sequential")
[10:32:41.360] plan(): nbrOfWorkers() = 1
[10:32:41.361] SequentialFuture started (and completed)
[10:32:41.361] - Launch lazy future ... done
[10:32:41.361] run() for ‘SequentialFuture’ ... done
[10:32:41.361] run() for ‘Future’ ...
[10:32:41.361] - state: ‘created’
[10:32:41.361] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.361] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.362]   - Field: ‘label’
[10:32:41.362]   - Field: ‘local’
[10:32:41.362]   - Field: ‘owner’
[10:32:41.362]   - Field: ‘envir’
[10:32:41.362]   - Field: ‘packages’
[10:32:41.362]   - Field: ‘gc’
[10:32:41.362]   - Field: ‘conditions’
[10:32:41.362]   - Field: ‘expr’
[10:32:41.362]   - Field: ‘uuid’
[10:32:41.362]   - Field: ‘seed’
[10:32:41.363]   - Field: ‘version’
[10:32:41.363]   - Field: ‘result’
[10:32:41.363]   - Field: ‘asynchronous’
[10:32:41.363]   - Field: ‘calls’
[10:32:41.363]   - Field: ‘globals’
[10:32:41.363]   - Field: ‘stdout’
[10:32:41.363]   - Field: ‘earlySignal’
[10:32:41.363]   - Field: ‘lazy’
[10:32:41.363]   - Field: ‘state’
[10:32:41.363] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.363] - Launch lazy future ...
[10:32:41.364] Packages needed by the future expression (n = 0): <none>
[10:32:41.364] Packages needed by future strategies (n = 0): <none>
[10:32:41.364] {
[10:32:41.364]     {
[10:32:41.364]         {
[10:32:41.364]             ...future.startTime <- base::Sys.time()
[10:32:41.364]             {
[10:32:41.364]                 {
[10:32:41.364]                   {
[10:32:41.364]                     base::local({
[10:32:41.364]                       has_future <- base::requireNamespace("future", 
[10:32:41.364]                         quietly = TRUE)
[10:32:41.364]                       if (has_future) {
[10:32:41.364]                         ns <- base::getNamespace("future")
[10:32:41.364]                         version <- ns[[".package"]][["version"]]
[10:32:41.364]                         if (is.null(version)) 
[10:32:41.364]                           version <- utils::packageVersion("future")
[10:32:41.364]                       }
[10:32:41.364]                       else {
[10:32:41.364]                         version <- NULL
[10:32:41.364]                       }
[10:32:41.364]                       if (!has_future || version < "1.8.0") {
[10:32:41.364]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.364]                           "", base::R.version$version.string), 
[10:32:41.364]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.364]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.364]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.364]                             "release", "version")], collapse = " "), 
[10:32:41.364]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.364]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.364]                           info)
[10:32:41.364]                         info <- base::paste(info, collapse = "; ")
[10:32:41.364]                         if (!has_future) {
[10:32:41.364]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.364]                             info)
[10:32:41.364]                         }
[10:32:41.364]                         else {
[10:32:41.364]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.364]                             info, version)
[10:32:41.364]                         }
[10:32:41.364]                         base::stop(msg)
[10:32:41.364]                       }
[10:32:41.364]                     })
[10:32:41.364]                   }
[10:32:41.364]                   ...future.strategy.old <- future::plan("list")
[10:32:41.364]                   options(future.plan = NULL)
[10:32:41.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.364]                 }
[10:32:41.364]                 ...future.workdir <- getwd()
[10:32:41.364]             }
[10:32:41.364]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.364]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.364]         }
[10:32:41.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.364]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.364]             base::names(...future.oldOptions))
[10:32:41.364]     }
[10:32:41.364]     if (FALSE) {
[10:32:41.364]     }
[10:32:41.364]     else {
[10:32:41.364]         if (TRUE) {
[10:32:41.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.364]                 open = "w")
[10:32:41.364]         }
[10:32:41.364]         else {
[10:32:41.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.364]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.364]         }
[10:32:41.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.364]             base::sink(type = "output", split = FALSE)
[10:32:41.364]             base::close(...future.stdout)
[10:32:41.364]         }, add = TRUE)
[10:32:41.364]     }
[10:32:41.364]     ...future.frame <- base::sys.nframe()
[10:32:41.364]     ...future.conditions <- base::list()
[10:32:41.364]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.364]     if (FALSE) {
[10:32:41.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.364]     }
[10:32:41.364]     ...future.result <- base::tryCatch({
[10:32:41.364]         base::withCallingHandlers({
[10:32:41.364]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.364]                 rr, cc)))
[10:32:41.364]             future::FutureResult(value = ...future.value$value, 
[10:32:41.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.364]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.364]                     ...future.globalenv.names))
[10:32:41.364]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.364]         }, condition = base::local({
[10:32:41.364]             c <- base::c
[10:32:41.364]             inherits <- base::inherits
[10:32:41.364]             invokeRestart <- base::invokeRestart
[10:32:41.364]             length <- base::length
[10:32:41.364]             list <- base::list
[10:32:41.364]             seq.int <- base::seq.int
[10:32:41.364]             signalCondition <- base::signalCondition
[10:32:41.364]             sys.calls <- base::sys.calls
[10:32:41.364]             `[[` <- base::`[[`
[10:32:41.364]             `+` <- base::`+`
[10:32:41.364]             `<<-` <- base::`<<-`
[10:32:41.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.364]                   3L)]
[10:32:41.364]             }
[10:32:41.364]             function(cond) {
[10:32:41.364]                 is_error <- inherits(cond, "error")
[10:32:41.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.364]                   NULL)
[10:32:41.364]                 if (is_error) {
[10:32:41.364]                   sessionInformation <- function() {
[10:32:41.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.364]                       search = base::search(), system = base::Sys.info())
[10:32:41.364]                   }
[10:32:41.364]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.364]                     cond$call), session = sessionInformation(), 
[10:32:41.364]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.364]                   signalCondition(cond)
[10:32:41.364]                 }
[10:32:41.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.364]                 "immediateCondition"))) {
[10:32:41.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.364]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.364]                   if (TRUE && !signal) {
[10:32:41.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.364]                     {
[10:32:41.364]                       inherits <- base::inherits
[10:32:41.364]                       invokeRestart <- base::invokeRestart
[10:32:41.364]                       is.null <- base::is.null
[10:32:41.364]                       muffled <- FALSE
[10:32:41.364]                       if (inherits(cond, "message")) {
[10:32:41.364]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.364]                         if (muffled) 
[10:32:41.364]                           invokeRestart("muffleMessage")
[10:32:41.364]                       }
[10:32:41.364]                       else if (inherits(cond, "warning")) {
[10:32:41.364]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.364]                         if (muffled) 
[10:32:41.364]                           invokeRestart("muffleWarning")
[10:32:41.364]                       }
[10:32:41.364]                       else if (inherits(cond, "condition")) {
[10:32:41.364]                         if (!is.null(pattern)) {
[10:32:41.364]                           computeRestarts <- base::computeRestarts
[10:32:41.364]                           grepl <- base::grepl
[10:32:41.364]                           restarts <- computeRestarts(cond)
[10:32:41.364]                           for (restart in restarts) {
[10:32:41.364]                             name <- restart$name
[10:32:41.364]                             if (is.null(name)) 
[10:32:41.364]                               next
[10:32:41.364]                             if (!grepl(pattern, name)) 
[10:32:41.364]                               next
[10:32:41.364]                             invokeRestart(restart)
[10:32:41.364]                             muffled <- TRUE
[10:32:41.364]                             break
[10:32:41.364]                           }
[10:32:41.364]                         }
[10:32:41.364]                       }
[10:32:41.364]                       invisible(muffled)
[10:32:41.364]                     }
[10:32:41.364]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.364]                   }
[10:32:41.364]                 }
[10:32:41.364]                 else {
[10:32:41.364]                   if (TRUE) {
[10:32:41.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.364]                     {
[10:32:41.364]                       inherits <- base::inherits
[10:32:41.364]                       invokeRestart <- base::invokeRestart
[10:32:41.364]                       is.null <- base::is.null
[10:32:41.364]                       muffled <- FALSE
[10:32:41.364]                       if (inherits(cond, "message")) {
[10:32:41.364]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.364]                         if (muffled) 
[10:32:41.364]                           invokeRestart("muffleMessage")
[10:32:41.364]                       }
[10:32:41.364]                       else if (inherits(cond, "warning")) {
[10:32:41.364]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.364]                         if (muffled) 
[10:32:41.364]                           invokeRestart("muffleWarning")
[10:32:41.364]                       }
[10:32:41.364]                       else if (inherits(cond, "condition")) {
[10:32:41.364]                         if (!is.null(pattern)) {
[10:32:41.364]                           computeRestarts <- base::computeRestarts
[10:32:41.364]                           grepl <- base::grepl
[10:32:41.364]                           restarts <- computeRestarts(cond)
[10:32:41.364]                           for (restart in restarts) {
[10:32:41.364]                             name <- restart$name
[10:32:41.364]                             if (is.null(name)) 
[10:32:41.364]                               next
[10:32:41.364]                             if (!grepl(pattern, name)) 
[10:32:41.364]                               next
[10:32:41.364]                             invokeRestart(restart)
[10:32:41.364]                             muffled <- TRUE
[10:32:41.364]                             break
[10:32:41.364]                           }
[10:32:41.364]                         }
[10:32:41.364]                       }
[10:32:41.364]                       invisible(muffled)
[10:32:41.364]                     }
[10:32:41.364]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.364]                   }
[10:32:41.364]                 }
[10:32:41.364]             }
[10:32:41.364]         }))
[10:32:41.364]     }, error = function(ex) {
[10:32:41.364]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.364]                 ...future.rng), started = ...future.startTime, 
[10:32:41.364]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.364]             version = "1.8"), class = "FutureResult")
[10:32:41.364]     }, finally = {
[10:32:41.364]         if (!identical(...future.workdir, getwd())) 
[10:32:41.364]             setwd(...future.workdir)
[10:32:41.364]         {
[10:32:41.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.364]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.364]             }
[10:32:41.364]             base::options(...future.oldOptions)
[10:32:41.364]             if (.Platform$OS.type == "windows") {
[10:32:41.364]                 old_names <- names(...future.oldEnvVars)
[10:32:41.364]                 envs <- base::Sys.getenv()
[10:32:41.364]                 names <- names(envs)
[10:32:41.364]                 common <- intersect(names, old_names)
[10:32:41.364]                 added <- setdiff(names, old_names)
[10:32:41.364]                 removed <- setdiff(old_names, names)
[10:32:41.364]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.364]                   envs[common]]
[10:32:41.364]                 NAMES <- toupper(changed)
[10:32:41.364]                 args <- list()
[10:32:41.364]                 for (kk in seq_along(NAMES)) {
[10:32:41.364]                   name <- changed[[kk]]
[10:32:41.364]                   NAME <- NAMES[[kk]]
[10:32:41.364]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.364]                     next
[10:32:41.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.364]                 }
[10:32:41.364]                 NAMES <- toupper(added)
[10:32:41.364]                 for (kk in seq_along(NAMES)) {
[10:32:41.364]                   name <- added[[kk]]
[10:32:41.364]                   NAME <- NAMES[[kk]]
[10:32:41.364]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.364]                     next
[10:32:41.364]                   args[[name]] <- ""
[10:32:41.364]                 }
[10:32:41.364]                 NAMES <- toupper(removed)
[10:32:41.364]                 for (kk in seq_along(NAMES)) {
[10:32:41.364]                   name <- removed[[kk]]
[10:32:41.364]                   NAME <- NAMES[[kk]]
[10:32:41.364]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.364]                     next
[10:32:41.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.364]                 }
[10:32:41.364]                 if (length(args) > 0) 
[10:32:41.364]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.364]             }
[10:32:41.364]             else {
[10:32:41.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.364]             }
[10:32:41.364]             {
[10:32:41.364]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.364]                   0L) {
[10:32:41.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.364]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.364]                   base::options(opts)
[10:32:41.364]                 }
[10:32:41.364]                 {
[10:32:41.364]                   {
[10:32:41.364]                     NULL
[10:32:41.364]                     RNGkind("Mersenne-Twister")
[10:32:41.364]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.364]                       inherits = FALSE)
[10:32:41.364]                   }
[10:32:41.364]                   options(future.plan = NULL)
[10:32:41.364]                   if (is.na(NA_character_)) 
[10:32:41.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.364]                     .init = FALSE)
[10:32:41.364]                 }
[10:32:41.364]             }
[10:32:41.364]         }
[10:32:41.364]     })
[10:32:41.364]     if (TRUE) {
[10:32:41.364]         base::sink(type = "output", split = FALSE)
[10:32:41.364]         if (TRUE) {
[10:32:41.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.364]         }
[10:32:41.364]         else {
[10:32:41.364]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.364]         }
[10:32:41.364]         base::close(...future.stdout)
[10:32:41.364]         ...future.stdout <- NULL
[10:32:41.364]     }
[10:32:41.364]     ...future.result$conditions <- ...future.conditions
[10:32:41.364]     ...future.result$finished <- base::Sys.time()
[10:32:41.364]     ...future.result
[10:32:41.364] }
[10:32:41.366] assign_globals() ...
[10:32:41.366] List of 2
[10:32:41.366]  $ rr: int 2
[10:32:41.366]  $ cc: int 1
[10:32:41.366]  - attr(*, "where")=List of 2
[10:32:41.366]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.366]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.366]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.366]  - attr(*, "resolved")= logi FALSE
[10:32:41.366]  - attr(*, "total_size")= num 112
[10:32:41.366]  - attr(*, "already-done")= logi TRUE
[10:32:41.369] - copied ‘rr’ to environment
[10:32:41.370] - copied ‘cc’ to environment
[10:32:41.370] assign_globals() ... done
[10:32:41.370] plan(): Setting new future strategy stack:
[10:32:41.370] List of future strategies:
[10:32:41.370] 1. sequential:
[10:32:41.370]    - args: function (..., envir = parent.frame())
[10:32:41.370]    - tweaked: FALSE
[10:32:41.370]    - call: NULL
[10:32:41.370] plan(): nbrOfWorkers() = 1
[10:32:41.371] plan(): Setting new future strategy stack:
[10:32:41.371] List of future strategies:
[10:32:41.371] 1. sequential:
[10:32:41.371]    - args: function (..., envir = parent.frame())
[10:32:41.371]    - tweaked: FALSE
[10:32:41.371]    - call: future::plan("sequential")
[10:32:41.371] plan(): nbrOfWorkers() = 1
[10:32:41.372] SequentialFuture started (and completed)
[10:32:41.372] - Launch lazy future ... done
[10:32:41.372] run() for ‘SequentialFuture’ ... done
[10:32:41.372] run() for ‘Future’ ...
[10:32:41.372] - state: ‘created’
[10:32:41.372] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.372] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.373] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.373]   - Field: ‘label’
[10:32:41.373]   - Field: ‘local’
[10:32:41.373]   - Field: ‘owner’
[10:32:41.373]   - Field: ‘envir’
[10:32:41.373]   - Field: ‘packages’
[10:32:41.373]   - Field: ‘gc’
[10:32:41.373]   - Field: ‘conditions’
[10:32:41.373]   - Field: ‘expr’
[10:32:41.373]   - Field: ‘uuid’
[10:32:41.373]   - Field: ‘seed’
[10:32:41.374]   - Field: ‘version’
[10:32:41.374]   - Field: ‘result’
[10:32:41.374]   - Field: ‘asynchronous’
[10:32:41.374]   - Field: ‘calls’
[10:32:41.374]   - Field: ‘globals’
[10:32:41.374]   - Field: ‘stdout’
[10:32:41.374]   - Field: ‘earlySignal’
[10:32:41.374]   - Field: ‘lazy’
[10:32:41.374]   - Field: ‘state’
[10:32:41.374] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.374] - Launch lazy future ...
[10:32:41.375] Packages needed by the future expression (n = 0): <none>
[10:32:41.375] Packages needed by future strategies (n = 0): <none>
[10:32:41.375] {
[10:32:41.375]     {
[10:32:41.375]         {
[10:32:41.375]             ...future.startTime <- base::Sys.time()
[10:32:41.375]             {
[10:32:41.375]                 {
[10:32:41.375]                   {
[10:32:41.375]                     base::local({
[10:32:41.375]                       has_future <- base::requireNamespace("future", 
[10:32:41.375]                         quietly = TRUE)
[10:32:41.375]                       if (has_future) {
[10:32:41.375]                         ns <- base::getNamespace("future")
[10:32:41.375]                         version <- ns[[".package"]][["version"]]
[10:32:41.375]                         if (is.null(version)) 
[10:32:41.375]                           version <- utils::packageVersion("future")
[10:32:41.375]                       }
[10:32:41.375]                       else {
[10:32:41.375]                         version <- NULL
[10:32:41.375]                       }
[10:32:41.375]                       if (!has_future || version < "1.8.0") {
[10:32:41.375]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.375]                           "", base::R.version$version.string), 
[10:32:41.375]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.375]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.375]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.375]                             "release", "version")], collapse = " "), 
[10:32:41.375]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.375]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.375]                           info)
[10:32:41.375]                         info <- base::paste(info, collapse = "; ")
[10:32:41.375]                         if (!has_future) {
[10:32:41.375]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.375]                             info)
[10:32:41.375]                         }
[10:32:41.375]                         else {
[10:32:41.375]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.375]                             info, version)
[10:32:41.375]                         }
[10:32:41.375]                         base::stop(msg)
[10:32:41.375]                       }
[10:32:41.375]                     })
[10:32:41.375]                   }
[10:32:41.375]                   ...future.strategy.old <- future::plan("list")
[10:32:41.375]                   options(future.plan = NULL)
[10:32:41.375]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.375]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.375]                 }
[10:32:41.375]                 ...future.workdir <- getwd()
[10:32:41.375]             }
[10:32:41.375]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.375]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.375]         }
[10:32:41.375]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.375]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.375]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.375]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.375]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.375]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.375]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.375]             base::names(...future.oldOptions))
[10:32:41.375]     }
[10:32:41.375]     if (FALSE) {
[10:32:41.375]     }
[10:32:41.375]     else {
[10:32:41.375]         if (TRUE) {
[10:32:41.375]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.375]                 open = "w")
[10:32:41.375]         }
[10:32:41.375]         else {
[10:32:41.375]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.375]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.375]         }
[10:32:41.375]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.375]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.375]             base::sink(type = "output", split = FALSE)
[10:32:41.375]             base::close(...future.stdout)
[10:32:41.375]         }, add = TRUE)
[10:32:41.375]     }
[10:32:41.375]     ...future.frame <- base::sys.nframe()
[10:32:41.375]     ...future.conditions <- base::list()
[10:32:41.375]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.375]     if (FALSE) {
[10:32:41.375]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.375]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.375]     }
[10:32:41.375]     ...future.result <- base::tryCatch({
[10:32:41.375]         base::withCallingHandlers({
[10:32:41.375]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.375]                 rr, cc)))
[10:32:41.375]             future::FutureResult(value = ...future.value$value, 
[10:32:41.375]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.375]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.375]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.375]                     ...future.globalenv.names))
[10:32:41.375]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.375]         }, condition = base::local({
[10:32:41.375]             c <- base::c
[10:32:41.375]             inherits <- base::inherits
[10:32:41.375]             invokeRestart <- base::invokeRestart
[10:32:41.375]             length <- base::length
[10:32:41.375]             list <- base::list
[10:32:41.375]             seq.int <- base::seq.int
[10:32:41.375]             signalCondition <- base::signalCondition
[10:32:41.375]             sys.calls <- base::sys.calls
[10:32:41.375]             `[[` <- base::`[[`
[10:32:41.375]             `+` <- base::`+`
[10:32:41.375]             `<<-` <- base::`<<-`
[10:32:41.375]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.375]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.375]                   3L)]
[10:32:41.375]             }
[10:32:41.375]             function(cond) {
[10:32:41.375]                 is_error <- inherits(cond, "error")
[10:32:41.375]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.375]                   NULL)
[10:32:41.375]                 if (is_error) {
[10:32:41.375]                   sessionInformation <- function() {
[10:32:41.375]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.375]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.375]                       search = base::search(), system = base::Sys.info())
[10:32:41.375]                   }
[10:32:41.375]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.375]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.375]                     cond$call), session = sessionInformation(), 
[10:32:41.375]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.375]                   signalCondition(cond)
[10:32:41.375]                 }
[10:32:41.375]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.375]                 "immediateCondition"))) {
[10:32:41.375]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.375]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.375]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.375]                   if (TRUE && !signal) {
[10:32:41.375]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.375]                     {
[10:32:41.375]                       inherits <- base::inherits
[10:32:41.375]                       invokeRestart <- base::invokeRestart
[10:32:41.375]                       is.null <- base::is.null
[10:32:41.375]                       muffled <- FALSE
[10:32:41.375]                       if (inherits(cond, "message")) {
[10:32:41.375]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.375]                         if (muffled) 
[10:32:41.375]                           invokeRestart("muffleMessage")
[10:32:41.375]                       }
[10:32:41.375]                       else if (inherits(cond, "warning")) {
[10:32:41.375]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.375]                         if (muffled) 
[10:32:41.375]                           invokeRestart("muffleWarning")
[10:32:41.375]                       }
[10:32:41.375]                       else if (inherits(cond, "condition")) {
[10:32:41.375]                         if (!is.null(pattern)) {
[10:32:41.375]                           computeRestarts <- base::computeRestarts
[10:32:41.375]                           grepl <- base::grepl
[10:32:41.375]                           restarts <- computeRestarts(cond)
[10:32:41.375]                           for (restart in restarts) {
[10:32:41.375]                             name <- restart$name
[10:32:41.375]                             if (is.null(name)) 
[10:32:41.375]                               next
[10:32:41.375]                             if (!grepl(pattern, name)) 
[10:32:41.375]                               next
[10:32:41.375]                             invokeRestart(restart)
[10:32:41.375]                             muffled <- TRUE
[10:32:41.375]                             break
[10:32:41.375]                           }
[10:32:41.375]                         }
[10:32:41.375]                       }
[10:32:41.375]                       invisible(muffled)
[10:32:41.375]                     }
[10:32:41.375]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.375]                   }
[10:32:41.375]                 }
[10:32:41.375]                 else {
[10:32:41.375]                   if (TRUE) {
[10:32:41.375]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.375]                     {
[10:32:41.375]                       inherits <- base::inherits
[10:32:41.375]                       invokeRestart <- base::invokeRestart
[10:32:41.375]                       is.null <- base::is.null
[10:32:41.375]                       muffled <- FALSE
[10:32:41.375]                       if (inherits(cond, "message")) {
[10:32:41.375]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.375]                         if (muffled) 
[10:32:41.375]                           invokeRestart("muffleMessage")
[10:32:41.375]                       }
[10:32:41.375]                       else if (inherits(cond, "warning")) {
[10:32:41.375]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.375]                         if (muffled) 
[10:32:41.375]                           invokeRestart("muffleWarning")
[10:32:41.375]                       }
[10:32:41.375]                       else if (inherits(cond, "condition")) {
[10:32:41.375]                         if (!is.null(pattern)) {
[10:32:41.375]                           computeRestarts <- base::computeRestarts
[10:32:41.375]                           grepl <- base::grepl
[10:32:41.375]                           restarts <- computeRestarts(cond)
[10:32:41.375]                           for (restart in restarts) {
[10:32:41.375]                             name <- restart$name
[10:32:41.375]                             if (is.null(name)) 
[10:32:41.375]                               next
[10:32:41.375]                             if (!grepl(pattern, name)) 
[10:32:41.375]                               next
[10:32:41.375]                             invokeRestart(restart)
[10:32:41.375]                             muffled <- TRUE
[10:32:41.375]                             break
[10:32:41.375]                           }
[10:32:41.375]                         }
[10:32:41.375]                       }
[10:32:41.375]                       invisible(muffled)
[10:32:41.375]                     }
[10:32:41.375]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.375]                   }
[10:32:41.375]                 }
[10:32:41.375]             }
[10:32:41.375]         }))
[10:32:41.375]     }, error = function(ex) {
[10:32:41.375]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.375]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.375]                 ...future.rng), started = ...future.startTime, 
[10:32:41.375]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.375]             version = "1.8"), class = "FutureResult")
[10:32:41.375]     }, finally = {
[10:32:41.375]         if (!identical(...future.workdir, getwd())) 
[10:32:41.375]             setwd(...future.workdir)
[10:32:41.375]         {
[10:32:41.375]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.375]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.375]             }
[10:32:41.375]             base::options(...future.oldOptions)
[10:32:41.375]             if (.Platform$OS.type == "windows") {
[10:32:41.375]                 old_names <- names(...future.oldEnvVars)
[10:32:41.375]                 envs <- base::Sys.getenv()
[10:32:41.375]                 names <- names(envs)
[10:32:41.375]                 common <- intersect(names, old_names)
[10:32:41.375]                 added <- setdiff(names, old_names)
[10:32:41.375]                 removed <- setdiff(old_names, names)
[10:32:41.375]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.375]                   envs[common]]
[10:32:41.375]                 NAMES <- toupper(changed)
[10:32:41.375]                 args <- list()
[10:32:41.375]                 for (kk in seq_along(NAMES)) {
[10:32:41.375]                   name <- changed[[kk]]
[10:32:41.375]                   NAME <- NAMES[[kk]]
[10:32:41.375]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.375]                     next
[10:32:41.375]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.375]                 }
[10:32:41.375]                 NAMES <- toupper(added)
[10:32:41.375]                 for (kk in seq_along(NAMES)) {
[10:32:41.375]                   name <- added[[kk]]
[10:32:41.375]                   NAME <- NAMES[[kk]]
[10:32:41.375]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.375]                     next
[10:32:41.375]                   args[[name]] <- ""
[10:32:41.375]                 }
[10:32:41.375]                 NAMES <- toupper(removed)
[10:32:41.375]                 for (kk in seq_along(NAMES)) {
[10:32:41.375]                   name <- removed[[kk]]
[10:32:41.375]                   NAME <- NAMES[[kk]]
[10:32:41.375]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.375]                     next
[10:32:41.375]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.375]                 }
[10:32:41.375]                 if (length(args) > 0) 
[10:32:41.375]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.375]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.375]             }
[10:32:41.375]             else {
[10:32:41.375]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.375]             }
[10:32:41.375]             {
[10:32:41.375]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.375]                   0L) {
[10:32:41.375]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.375]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.375]                   base::options(opts)
[10:32:41.375]                 }
[10:32:41.375]                 {
[10:32:41.375]                   {
[10:32:41.375]                     NULL
[10:32:41.375]                     RNGkind("Mersenne-Twister")
[10:32:41.375]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.375]                       inherits = FALSE)
[10:32:41.375]                   }
[10:32:41.375]                   options(future.plan = NULL)
[10:32:41.375]                   if (is.na(NA_character_)) 
[10:32:41.375]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.375]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.375]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.375]                     .init = FALSE)
[10:32:41.375]                 }
[10:32:41.375]             }
[10:32:41.375]         }
[10:32:41.375]     })
[10:32:41.375]     if (TRUE) {
[10:32:41.375]         base::sink(type = "output", split = FALSE)
[10:32:41.375]         if (TRUE) {
[10:32:41.375]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.375]         }
[10:32:41.375]         else {
[10:32:41.375]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.375]         }
[10:32:41.375]         base::close(...future.stdout)
[10:32:41.375]         ...future.stdout <- NULL
[10:32:41.375]     }
[10:32:41.375]     ...future.result$conditions <- ...future.conditions
[10:32:41.375]     ...future.result$finished <- base::Sys.time()
[10:32:41.375]     ...future.result
[10:32:41.375] }
[10:32:41.377] assign_globals() ...
[10:32:41.377] List of 2
[10:32:41.377]  $ rr: int 3
[10:32:41.377]  $ cc: int 1
[10:32:41.377]  - attr(*, "where")=List of 2
[10:32:41.377]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.377]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.377]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.377]  - attr(*, "resolved")= logi FALSE
[10:32:41.377]  - attr(*, "total_size")= num 112
[10:32:41.377]  - attr(*, "already-done")= logi TRUE
[10:32:41.380] - copied ‘rr’ to environment
[10:32:41.380] - copied ‘cc’ to environment
[10:32:41.380] assign_globals() ... done
[10:32:41.380] plan(): Setting new future strategy stack:
[10:32:41.380] List of future strategies:
[10:32:41.380] 1. sequential:
[10:32:41.380]    - args: function (..., envir = parent.frame())
[10:32:41.380]    - tweaked: FALSE
[10:32:41.380]    - call: NULL
[10:32:41.380] plan(): nbrOfWorkers() = 1
[10:32:41.381] plan(): Setting new future strategy stack:
[10:32:41.381] List of future strategies:
[10:32:41.381] 1. sequential:
[10:32:41.381]    - args: function (..., envir = parent.frame())
[10:32:41.381]    - tweaked: FALSE
[10:32:41.381]    - call: future::plan("sequential")
[10:32:41.382] plan(): nbrOfWorkers() = 1
[10:32:41.382] SequentialFuture started (and completed)
[10:32:41.382] - Launch lazy future ... done
[10:32:41.382] run() for ‘SequentialFuture’ ... done
[10:32:41.382] run() for ‘Future’ ...
[10:32:41.382] - state: ‘created’
[10:32:41.382] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.383] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.383]   - Field: ‘label’
[10:32:41.383]   - Field: ‘local’
[10:32:41.383]   - Field: ‘owner’
[10:32:41.383]   - Field: ‘envir’
[10:32:41.383]   - Field: ‘packages’
[10:32:41.383]   - Field: ‘gc’
[10:32:41.383]   - Field: ‘conditions’
[10:32:41.383]   - Field: ‘expr’
[10:32:41.383]   - Field: ‘uuid’
[10:32:41.384]   - Field: ‘seed’
[10:32:41.384]   - Field: ‘version’
[10:32:41.384]   - Field: ‘result’
[10:32:41.384]   - Field: ‘asynchronous’
[10:32:41.384]   - Field: ‘calls’
[10:32:41.384]   - Field: ‘globals’
[10:32:41.384]   - Field: ‘stdout’
[10:32:41.384]   - Field: ‘earlySignal’
[10:32:41.384]   - Field: ‘lazy’
[10:32:41.384]   - Field: ‘state’
[10:32:41.384] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.385] - Launch lazy future ...
[10:32:41.385] Packages needed by the future expression (n = 0): <none>
[10:32:41.385] Packages needed by future strategies (n = 0): <none>
[10:32:41.385] {
[10:32:41.385]     {
[10:32:41.385]         {
[10:32:41.385]             ...future.startTime <- base::Sys.time()
[10:32:41.385]             {
[10:32:41.385]                 {
[10:32:41.385]                   {
[10:32:41.385]                     base::local({
[10:32:41.385]                       has_future <- base::requireNamespace("future", 
[10:32:41.385]                         quietly = TRUE)
[10:32:41.385]                       if (has_future) {
[10:32:41.385]                         ns <- base::getNamespace("future")
[10:32:41.385]                         version <- ns[[".package"]][["version"]]
[10:32:41.385]                         if (is.null(version)) 
[10:32:41.385]                           version <- utils::packageVersion("future")
[10:32:41.385]                       }
[10:32:41.385]                       else {
[10:32:41.385]                         version <- NULL
[10:32:41.385]                       }
[10:32:41.385]                       if (!has_future || version < "1.8.0") {
[10:32:41.385]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.385]                           "", base::R.version$version.string), 
[10:32:41.385]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.385]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.385]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.385]                             "release", "version")], collapse = " "), 
[10:32:41.385]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.385]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.385]                           info)
[10:32:41.385]                         info <- base::paste(info, collapse = "; ")
[10:32:41.385]                         if (!has_future) {
[10:32:41.385]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.385]                             info)
[10:32:41.385]                         }
[10:32:41.385]                         else {
[10:32:41.385]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.385]                             info, version)
[10:32:41.385]                         }
[10:32:41.385]                         base::stop(msg)
[10:32:41.385]                       }
[10:32:41.385]                     })
[10:32:41.385]                   }
[10:32:41.385]                   ...future.strategy.old <- future::plan("list")
[10:32:41.385]                   options(future.plan = NULL)
[10:32:41.385]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.385]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.385]                 }
[10:32:41.385]                 ...future.workdir <- getwd()
[10:32:41.385]             }
[10:32:41.385]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.385]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.385]         }
[10:32:41.385]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.385]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.385]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.385]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.385]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.385]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.385]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.385]             base::names(...future.oldOptions))
[10:32:41.385]     }
[10:32:41.385]     if (FALSE) {
[10:32:41.385]     }
[10:32:41.385]     else {
[10:32:41.385]         if (TRUE) {
[10:32:41.385]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.385]                 open = "w")
[10:32:41.385]         }
[10:32:41.385]         else {
[10:32:41.385]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.385]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.385]         }
[10:32:41.385]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.385]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.385]             base::sink(type = "output", split = FALSE)
[10:32:41.385]             base::close(...future.stdout)
[10:32:41.385]         }, add = TRUE)
[10:32:41.385]     }
[10:32:41.385]     ...future.frame <- base::sys.nframe()
[10:32:41.385]     ...future.conditions <- base::list()
[10:32:41.385]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.385]     if (FALSE) {
[10:32:41.385]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.385]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.385]     }
[10:32:41.385]     ...future.result <- base::tryCatch({
[10:32:41.385]         base::withCallingHandlers({
[10:32:41.385]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.385]                 rr, cc)))
[10:32:41.385]             future::FutureResult(value = ...future.value$value, 
[10:32:41.385]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.385]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.385]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.385]                     ...future.globalenv.names))
[10:32:41.385]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.385]         }, condition = base::local({
[10:32:41.385]             c <- base::c
[10:32:41.385]             inherits <- base::inherits
[10:32:41.385]             invokeRestart <- base::invokeRestart
[10:32:41.385]             length <- base::length
[10:32:41.385]             list <- base::list
[10:32:41.385]             seq.int <- base::seq.int
[10:32:41.385]             signalCondition <- base::signalCondition
[10:32:41.385]             sys.calls <- base::sys.calls
[10:32:41.385]             `[[` <- base::`[[`
[10:32:41.385]             `+` <- base::`+`
[10:32:41.385]             `<<-` <- base::`<<-`
[10:32:41.385]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.385]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.385]                   3L)]
[10:32:41.385]             }
[10:32:41.385]             function(cond) {
[10:32:41.385]                 is_error <- inherits(cond, "error")
[10:32:41.385]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.385]                   NULL)
[10:32:41.385]                 if (is_error) {
[10:32:41.385]                   sessionInformation <- function() {
[10:32:41.385]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.385]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.385]                       search = base::search(), system = base::Sys.info())
[10:32:41.385]                   }
[10:32:41.385]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.385]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.385]                     cond$call), session = sessionInformation(), 
[10:32:41.385]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.385]                   signalCondition(cond)
[10:32:41.385]                 }
[10:32:41.385]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.385]                 "immediateCondition"))) {
[10:32:41.385]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.385]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.385]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.385]                   if (TRUE && !signal) {
[10:32:41.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.385]                     {
[10:32:41.385]                       inherits <- base::inherits
[10:32:41.385]                       invokeRestart <- base::invokeRestart
[10:32:41.385]                       is.null <- base::is.null
[10:32:41.385]                       muffled <- FALSE
[10:32:41.385]                       if (inherits(cond, "message")) {
[10:32:41.385]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.385]                         if (muffled) 
[10:32:41.385]                           invokeRestart("muffleMessage")
[10:32:41.385]                       }
[10:32:41.385]                       else if (inherits(cond, "warning")) {
[10:32:41.385]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.385]                         if (muffled) 
[10:32:41.385]                           invokeRestart("muffleWarning")
[10:32:41.385]                       }
[10:32:41.385]                       else if (inherits(cond, "condition")) {
[10:32:41.385]                         if (!is.null(pattern)) {
[10:32:41.385]                           computeRestarts <- base::computeRestarts
[10:32:41.385]                           grepl <- base::grepl
[10:32:41.385]                           restarts <- computeRestarts(cond)
[10:32:41.385]                           for (restart in restarts) {
[10:32:41.385]                             name <- restart$name
[10:32:41.385]                             if (is.null(name)) 
[10:32:41.385]                               next
[10:32:41.385]                             if (!grepl(pattern, name)) 
[10:32:41.385]                               next
[10:32:41.385]                             invokeRestart(restart)
[10:32:41.385]                             muffled <- TRUE
[10:32:41.385]                             break
[10:32:41.385]                           }
[10:32:41.385]                         }
[10:32:41.385]                       }
[10:32:41.385]                       invisible(muffled)
[10:32:41.385]                     }
[10:32:41.385]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.385]                   }
[10:32:41.385]                 }
[10:32:41.385]                 else {
[10:32:41.385]                   if (TRUE) {
[10:32:41.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.385]                     {
[10:32:41.385]                       inherits <- base::inherits
[10:32:41.385]                       invokeRestart <- base::invokeRestart
[10:32:41.385]                       is.null <- base::is.null
[10:32:41.385]                       muffled <- FALSE
[10:32:41.385]                       if (inherits(cond, "message")) {
[10:32:41.385]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.385]                         if (muffled) 
[10:32:41.385]                           invokeRestart("muffleMessage")
[10:32:41.385]                       }
[10:32:41.385]                       else if (inherits(cond, "warning")) {
[10:32:41.385]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.385]                         if (muffled) 
[10:32:41.385]                           invokeRestart("muffleWarning")
[10:32:41.385]                       }
[10:32:41.385]                       else if (inherits(cond, "condition")) {
[10:32:41.385]                         if (!is.null(pattern)) {
[10:32:41.385]                           computeRestarts <- base::computeRestarts
[10:32:41.385]                           grepl <- base::grepl
[10:32:41.385]                           restarts <- computeRestarts(cond)
[10:32:41.385]                           for (restart in restarts) {
[10:32:41.385]                             name <- restart$name
[10:32:41.385]                             if (is.null(name)) 
[10:32:41.385]                               next
[10:32:41.385]                             if (!grepl(pattern, name)) 
[10:32:41.385]                               next
[10:32:41.385]                             invokeRestart(restart)
[10:32:41.385]                             muffled <- TRUE
[10:32:41.385]                             break
[10:32:41.385]                           }
[10:32:41.385]                         }
[10:32:41.385]                       }
[10:32:41.385]                       invisible(muffled)
[10:32:41.385]                     }
[10:32:41.385]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.385]                   }
[10:32:41.385]                 }
[10:32:41.385]             }
[10:32:41.385]         }))
[10:32:41.385]     }, error = function(ex) {
[10:32:41.385]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.385]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.385]                 ...future.rng), started = ...future.startTime, 
[10:32:41.385]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.385]             version = "1.8"), class = "FutureResult")
[10:32:41.385]     }, finally = {
[10:32:41.385]         if (!identical(...future.workdir, getwd())) 
[10:32:41.385]             setwd(...future.workdir)
[10:32:41.385]         {
[10:32:41.385]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.385]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.385]             }
[10:32:41.385]             base::options(...future.oldOptions)
[10:32:41.385]             if (.Platform$OS.type == "windows") {
[10:32:41.385]                 old_names <- names(...future.oldEnvVars)
[10:32:41.385]                 envs <- base::Sys.getenv()
[10:32:41.385]                 names <- names(envs)
[10:32:41.385]                 common <- intersect(names, old_names)
[10:32:41.385]                 added <- setdiff(names, old_names)
[10:32:41.385]                 removed <- setdiff(old_names, names)
[10:32:41.385]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.385]                   envs[common]]
[10:32:41.385]                 NAMES <- toupper(changed)
[10:32:41.385]                 args <- list()
[10:32:41.385]                 for (kk in seq_along(NAMES)) {
[10:32:41.385]                   name <- changed[[kk]]
[10:32:41.385]                   NAME <- NAMES[[kk]]
[10:32:41.385]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.385]                     next
[10:32:41.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.385]                 }
[10:32:41.385]                 NAMES <- toupper(added)
[10:32:41.385]                 for (kk in seq_along(NAMES)) {
[10:32:41.385]                   name <- added[[kk]]
[10:32:41.385]                   NAME <- NAMES[[kk]]
[10:32:41.385]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.385]                     next
[10:32:41.385]                   args[[name]] <- ""
[10:32:41.385]                 }
[10:32:41.385]                 NAMES <- toupper(removed)
[10:32:41.385]                 for (kk in seq_along(NAMES)) {
[10:32:41.385]                   name <- removed[[kk]]
[10:32:41.385]                   NAME <- NAMES[[kk]]
[10:32:41.385]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.385]                     next
[10:32:41.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.385]                 }
[10:32:41.385]                 if (length(args) > 0) 
[10:32:41.385]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.385]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.385]             }
[10:32:41.385]             else {
[10:32:41.385]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.385]             }
[10:32:41.385]             {
[10:32:41.385]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.385]                   0L) {
[10:32:41.385]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.385]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.385]                   base::options(opts)
[10:32:41.385]                 }
[10:32:41.385]                 {
[10:32:41.385]                   {
[10:32:41.385]                     NULL
[10:32:41.385]                     RNGkind("Mersenne-Twister")
[10:32:41.385]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.385]                       inherits = FALSE)
[10:32:41.385]                   }
[10:32:41.385]                   options(future.plan = NULL)
[10:32:41.385]                   if (is.na(NA_character_)) 
[10:32:41.385]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.385]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.385]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.385]                     .init = FALSE)
[10:32:41.385]                 }
[10:32:41.385]             }
[10:32:41.385]         }
[10:32:41.385]     })
[10:32:41.385]     if (TRUE) {
[10:32:41.385]         base::sink(type = "output", split = FALSE)
[10:32:41.385]         if (TRUE) {
[10:32:41.385]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.385]         }
[10:32:41.385]         else {
[10:32:41.385]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.385]         }
[10:32:41.385]         base::close(...future.stdout)
[10:32:41.385]         ...future.stdout <- NULL
[10:32:41.385]     }
[10:32:41.385]     ...future.result$conditions <- ...future.conditions
[10:32:41.385]     ...future.result$finished <- base::Sys.time()
[10:32:41.385]     ...future.result
[10:32:41.385] }
[10:32:41.387] assign_globals() ...
[10:32:41.387] List of 2
[10:32:41.387]  $ rr: int 1
[10:32:41.387]  $ cc: int 2
[10:32:41.387]  - attr(*, "where")=List of 2
[10:32:41.387]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.387]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.387]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.387]  - attr(*, "resolved")= logi FALSE
[10:32:41.387]  - attr(*, "total_size")= num 112
[10:32:41.387]  - attr(*, "already-done")= logi TRUE
[10:32:41.390] - copied ‘rr’ to environment
[10:32:41.390] - copied ‘cc’ to environment
[10:32:41.390] assign_globals() ... done
[10:32:41.390] plan(): Setting new future strategy stack:
[10:32:41.390] List of future strategies:
[10:32:41.390] 1. sequential:
[10:32:41.390]    - args: function (..., envir = parent.frame())
[10:32:41.390]    - tweaked: FALSE
[10:32:41.390]    - call: NULL
[10:32:41.391] plan(): nbrOfWorkers() = 1
[10:32:41.391] plan(): Setting new future strategy stack:
[10:32:41.391] List of future strategies:
[10:32:41.391] 1. sequential:
[10:32:41.391]    - args: function (..., envir = parent.frame())
[10:32:41.391]    - tweaked: FALSE
[10:32:41.391]    - call: future::plan("sequential")
[10:32:41.392] plan(): nbrOfWorkers() = 1
[10:32:41.392] SequentialFuture started (and completed)
[10:32:41.392] - Launch lazy future ... done
[10:32:41.392] run() for ‘SequentialFuture’ ... done
[10:32:41.392] run() for ‘Future’ ...
[10:32:41.392] - state: ‘created’
[10:32:41.392] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.393] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.393] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.393]   - Field: ‘label’
[10:32:41.393]   - Field: ‘local’
[10:32:41.393]   - Field: ‘owner’
[10:32:41.393]   - Field: ‘envir’
[10:32:41.393]   - Field: ‘packages’
[10:32:41.393]   - Field: ‘gc’
[10:32:41.393]   - Field: ‘conditions’
[10:32:41.394]   - Field: ‘expr’
[10:32:41.394]   - Field: ‘uuid’
[10:32:41.394]   - Field: ‘seed’
[10:32:41.394]   - Field: ‘version’
[10:32:41.394]   - Field: ‘result’
[10:32:41.394]   - Field: ‘asynchronous’
[10:32:41.394]   - Field: ‘calls’
[10:32:41.394]   - Field: ‘globals’
[10:32:41.394]   - Field: ‘stdout’
[10:32:41.394]   - Field: ‘earlySignal’
[10:32:41.394]   - Field: ‘lazy’
[10:32:41.396]   - Field: ‘state’
[10:32:41.396] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.396] - Launch lazy future ...
[10:32:41.396] Packages needed by the future expression (n = 0): <none>
[10:32:41.396] Packages needed by future strategies (n = 0): <none>
[10:32:41.397] {
[10:32:41.397]     {
[10:32:41.397]         {
[10:32:41.397]             ...future.startTime <- base::Sys.time()
[10:32:41.397]             {
[10:32:41.397]                 {
[10:32:41.397]                   {
[10:32:41.397]                     base::local({
[10:32:41.397]                       has_future <- base::requireNamespace("future", 
[10:32:41.397]                         quietly = TRUE)
[10:32:41.397]                       if (has_future) {
[10:32:41.397]                         ns <- base::getNamespace("future")
[10:32:41.397]                         version <- ns[[".package"]][["version"]]
[10:32:41.397]                         if (is.null(version)) 
[10:32:41.397]                           version <- utils::packageVersion("future")
[10:32:41.397]                       }
[10:32:41.397]                       else {
[10:32:41.397]                         version <- NULL
[10:32:41.397]                       }
[10:32:41.397]                       if (!has_future || version < "1.8.0") {
[10:32:41.397]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.397]                           "", base::R.version$version.string), 
[10:32:41.397]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.397]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.397]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.397]                             "release", "version")], collapse = " "), 
[10:32:41.397]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.397]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.397]                           info)
[10:32:41.397]                         info <- base::paste(info, collapse = "; ")
[10:32:41.397]                         if (!has_future) {
[10:32:41.397]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.397]                             info)
[10:32:41.397]                         }
[10:32:41.397]                         else {
[10:32:41.397]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.397]                             info, version)
[10:32:41.397]                         }
[10:32:41.397]                         base::stop(msg)
[10:32:41.397]                       }
[10:32:41.397]                     })
[10:32:41.397]                   }
[10:32:41.397]                   ...future.strategy.old <- future::plan("list")
[10:32:41.397]                   options(future.plan = NULL)
[10:32:41.397]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.397]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.397]                 }
[10:32:41.397]                 ...future.workdir <- getwd()
[10:32:41.397]             }
[10:32:41.397]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.397]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.397]         }
[10:32:41.397]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.397]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.397]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.397]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.397]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.397]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.397]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.397]             base::names(...future.oldOptions))
[10:32:41.397]     }
[10:32:41.397]     if (FALSE) {
[10:32:41.397]     }
[10:32:41.397]     else {
[10:32:41.397]         if (TRUE) {
[10:32:41.397]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.397]                 open = "w")
[10:32:41.397]         }
[10:32:41.397]         else {
[10:32:41.397]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.397]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.397]         }
[10:32:41.397]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.397]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.397]             base::sink(type = "output", split = FALSE)
[10:32:41.397]             base::close(...future.stdout)
[10:32:41.397]         }, add = TRUE)
[10:32:41.397]     }
[10:32:41.397]     ...future.frame <- base::sys.nframe()
[10:32:41.397]     ...future.conditions <- base::list()
[10:32:41.397]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.397]     if (FALSE) {
[10:32:41.397]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.397]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.397]     }
[10:32:41.397]     ...future.result <- base::tryCatch({
[10:32:41.397]         base::withCallingHandlers({
[10:32:41.397]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.397]                 rr, cc)))
[10:32:41.397]             future::FutureResult(value = ...future.value$value, 
[10:32:41.397]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.397]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.397]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.397]                     ...future.globalenv.names))
[10:32:41.397]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.397]         }, condition = base::local({
[10:32:41.397]             c <- base::c
[10:32:41.397]             inherits <- base::inherits
[10:32:41.397]             invokeRestart <- base::invokeRestart
[10:32:41.397]             length <- base::length
[10:32:41.397]             list <- base::list
[10:32:41.397]             seq.int <- base::seq.int
[10:32:41.397]             signalCondition <- base::signalCondition
[10:32:41.397]             sys.calls <- base::sys.calls
[10:32:41.397]             `[[` <- base::`[[`
[10:32:41.397]             `+` <- base::`+`
[10:32:41.397]             `<<-` <- base::`<<-`
[10:32:41.397]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.397]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.397]                   3L)]
[10:32:41.397]             }
[10:32:41.397]             function(cond) {
[10:32:41.397]                 is_error <- inherits(cond, "error")
[10:32:41.397]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.397]                   NULL)
[10:32:41.397]                 if (is_error) {
[10:32:41.397]                   sessionInformation <- function() {
[10:32:41.397]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.397]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.397]                       search = base::search(), system = base::Sys.info())
[10:32:41.397]                   }
[10:32:41.397]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.397]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.397]                     cond$call), session = sessionInformation(), 
[10:32:41.397]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.397]                   signalCondition(cond)
[10:32:41.397]                 }
[10:32:41.397]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.397]                 "immediateCondition"))) {
[10:32:41.397]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.397]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.397]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.397]                   if (TRUE && !signal) {
[10:32:41.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.397]                     {
[10:32:41.397]                       inherits <- base::inherits
[10:32:41.397]                       invokeRestart <- base::invokeRestart
[10:32:41.397]                       is.null <- base::is.null
[10:32:41.397]                       muffled <- FALSE
[10:32:41.397]                       if (inherits(cond, "message")) {
[10:32:41.397]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.397]                         if (muffled) 
[10:32:41.397]                           invokeRestart("muffleMessage")
[10:32:41.397]                       }
[10:32:41.397]                       else if (inherits(cond, "warning")) {
[10:32:41.397]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.397]                         if (muffled) 
[10:32:41.397]                           invokeRestart("muffleWarning")
[10:32:41.397]                       }
[10:32:41.397]                       else if (inherits(cond, "condition")) {
[10:32:41.397]                         if (!is.null(pattern)) {
[10:32:41.397]                           computeRestarts <- base::computeRestarts
[10:32:41.397]                           grepl <- base::grepl
[10:32:41.397]                           restarts <- computeRestarts(cond)
[10:32:41.397]                           for (restart in restarts) {
[10:32:41.397]                             name <- restart$name
[10:32:41.397]                             if (is.null(name)) 
[10:32:41.397]                               next
[10:32:41.397]                             if (!grepl(pattern, name)) 
[10:32:41.397]                               next
[10:32:41.397]                             invokeRestart(restart)
[10:32:41.397]                             muffled <- TRUE
[10:32:41.397]                             break
[10:32:41.397]                           }
[10:32:41.397]                         }
[10:32:41.397]                       }
[10:32:41.397]                       invisible(muffled)
[10:32:41.397]                     }
[10:32:41.397]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.397]                   }
[10:32:41.397]                 }
[10:32:41.397]                 else {
[10:32:41.397]                   if (TRUE) {
[10:32:41.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.397]                     {
[10:32:41.397]                       inherits <- base::inherits
[10:32:41.397]                       invokeRestart <- base::invokeRestart
[10:32:41.397]                       is.null <- base::is.null
[10:32:41.397]                       muffled <- FALSE
[10:32:41.397]                       if (inherits(cond, "message")) {
[10:32:41.397]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.397]                         if (muffled) 
[10:32:41.397]                           invokeRestart("muffleMessage")
[10:32:41.397]                       }
[10:32:41.397]                       else if (inherits(cond, "warning")) {
[10:32:41.397]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.397]                         if (muffled) 
[10:32:41.397]                           invokeRestart("muffleWarning")
[10:32:41.397]                       }
[10:32:41.397]                       else if (inherits(cond, "condition")) {
[10:32:41.397]                         if (!is.null(pattern)) {
[10:32:41.397]                           computeRestarts <- base::computeRestarts
[10:32:41.397]                           grepl <- base::grepl
[10:32:41.397]                           restarts <- computeRestarts(cond)
[10:32:41.397]                           for (restart in restarts) {
[10:32:41.397]                             name <- restart$name
[10:32:41.397]                             if (is.null(name)) 
[10:32:41.397]                               next
[10:32:41.397]                             if (!grepl(pattern, name)) 
[10:32:41.397]                               next
[10:32:41.397]                             invokeRestart(restart)
[10:32:41.397]                             muffled <- TRUE
[10:32:41.397]                             break
[10:32:41.397]                           }
[10:32:41.397]                         }
[10:32:41.397]                       }
[10:32:41.397]                       invisible(muffled)
[10:32:41.397]                     }
[10:32:41.397]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.397]                   }
[10:32:41.397]                 }
[10:32:41.397]             }
[10:32:41.397]         }))
[10:32:41.397]     }, error = function(ex) {
[10:32:41.397]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.397]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.397]                 ...future.rng), started = ...future.startTime, 
[10:32:41.397]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.397]             version = "1.8"), class = "FutureResult")
[10:32:41.397]     }, finally = {
[10:32:41.397]         if (!identical(...future.workdir, getwd())) 
[10:32:41.397]             setwd(...future.workdir)
[10:32:41.397]         {
[10:32:41.397]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.397]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.397]             }
[10:32:41.397]             base::options(...future.oldOptions)
[10:32:41.397]             if (.Platform$OS.type == "windows") {
[10:32:41.397]                 old_names <- names(...future.oldEnvVars)
[10:32:41.397]                 envs <- base::Sys.getenv()
[10:32:41.397]                 names <- names(envs)
[10:32:41.397]                 common <- intersect(names, old_names)
[10:32:41.397]                 added <- setdiff(names, old_names)
[10:32:41.397]                 removed <- setdiff(old_names, names)
[10:32:41.397]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.397]                   envs[common]]
[10:32:41.397]                 NAMES <- toupper(changed)
[10:32:41.397]                 args <- list()
[10:32:41.397]                 for (kk in seq_along(NAMES)) {
[10:32:41.397]                   name <- changed[[kk]]
[10:32:41.397]                   NAME <- NAMES[[kk]]
[10:32:41.397]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.397]                     next
[10:32:41.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.397]                 }
[10:32:41.397]                 NAMES <- toupper(added)
[10:32:41.397]                 for (kk in seq_along(NAMES)) {
[10:32:41.397]                   name <- added[[kk]]
[10:32:41.397]                   NAME <- NAMES[[kk]]
[10:32:41.397]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.397]                     next
[10:32:41.397]                   args[[name]] <- ""
[10:32:41.397]                 }
[10:32:41.397]                 NAMES <- toupper(removed)
[10:32:41.397]                 for (kk in seq_along(NAMES)) {
[10:32:41.397]                   name <- removed[[kk]]
[10:32:41.397]                   NAME <- NAMES[[kk]]
[10:32:41.397]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.397]                     next
[10:32:41.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.397]                 }
[10:32:41.397]                 if (length(args) > 0) 
[10:32:41.397]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.397]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.397]             }
[10:32:41.397]             else {
[10:32:41.397]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.397]             }
[10:32:41.397]             {
[10:32:41.397]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.397]                   0L) {
[10:32:41.397]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.397]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.397]                   base::options(opts)
[10:32:41.397]                 }
[10:32:41.397]                 {
[10:32:41.397]                   {
[10:32:41.397]                     NULL
[10:32:41.397]                     RNGkind("Mersenne-Twister")
[10:32:41.397]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.397]                       inherits = FALSE)
[10:32:41.397]                   }
[10:32:41.397]                   options(future.plan = NULL)
[10:32:41.397]                   if (is.na(NA_character_)) 
[10:32:41.397]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.397]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.397]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.397]                     .init = FALSE)
[10:32:41.397]                 }
[10:32:41.397]             }
[10:32:41.397]         }
[10:32:41.397]     })
[10:32:41.397]     if (TRUE) {
[10:32:41.397]         base::sink(type = "output", split = FALSE)
[10:32:41.397]         if (TRUE) {
[10:32:41.397]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.397]         }
[10:32:41.397]         else {
[10:32:41.397]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.397]         }
[10:32:41.397]         base::close(...future.stdout)
[10:32:41.397]         ...future.stdout <- NULL
[10:32:41.397]     }
[10:32:41.397]     ...future.result$conditions <- ...future.conditions
[10:32:41.397]     ...future.result$finished <- base::Sys.time()
[10:32:41.397]     ...future.result
[10:32:41.397] }
[10:32:41.398] assign_globals() ...
[10:32:41.398] List of 2
[10:32:41.398]  $ rr: int 2
[10:32:41.398]  $ cc: int 2
[10:32:41.398]  - attr(*, "where")=List of 2
[10:32:41.398]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.398]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.398]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.398]  - attr(*, "resolved")= logi FALSE
[10:32:41.398]  - attr(*, "total_size")= num 112
[10:32:41.398]  - attr(*, "already-done")= logi TRUE
[10:32:41.401] - copied ‘rr’ to environment
[10:32:41.401] - copied ‘cc’ to environment
[10:32:41.401] assign_globals() ... done
[10:32:41.402] plan(): Setting new future strategy stack:
[10:32:41.402] List of future strategies:
[10:32:41.402] 1. sequential:
[10:32:41.402]    - args: function (..., envir = parent.frame())
[10:32:41.402]    - tweaked: FALSE
[10:32:41.402]    - call: NULL
[10:32:41.402] plan(): nbrOfWorkers() = 1
[10:32:41.403] plan(): Setting new future strategy stack:
[10:32:41.403] List of future strategies:
[10:32:41.403] 1. sequential:
[10:32:41.403]    - args: function (..., envir = parent.frame())
[10:32:41.403]    - tweaked: FALSE
[10:32:41.403]    - call: future::plan("sequential")
[10:32:41.403] plan(): nbrOfWorkers() = 1
[10:32:41.403] SequentialFuture started (and completed)
[10:32:41.403] - Launch lazy future ... done
[10:32:41.403] run() for ‘SequentialFuture’ ... done
[10:32:41.404] run() for ‘Future’ ...
[10:32:41.404] - state: ‘created’
[10:32:41.404] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:41.404] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:41.404] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:41.404]   - Field: ‘label’
[10:32:41.404]   - Field: ‘local’
[10:32:41.405]   - Field: ‘owner’
[10:32:41.405]   - Field: ‘envir’
[10:32:41.405]   - Field: ‘packages’
[10:32:41.405]   - Field: ‘gc’
[10:32:41.405]   - Field: ‘conditions’
[10:32:41.405]   - Field: ‘expr’
[10:32:41.405]   - Field: ‘uuid’
[10:32:41.405]   - Field: ‘seed’
[10:32:41.405]   - Field: ‘version’
[10:32:41.405]   - Field: ‘result’
[10:32:41.405]   - Field: ‘asynchronous’
[10:32:41.405]   - Field: ‘calls’
[10:32:41.406]   - Field: ‘globals’
[10:32:41.406]   - Field: ‘stdout’
[10:32:41.406]   - Field: ‘earlySignal’
[10:32:41.406]   - Field: ‘lazy’
[10:32:41.406]   - Field: ‘state’
[10:32:41.406] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:41.406] - Launch lazy future ...
[10:32:41.406] Packages needed by the future expression (n = 0): <none>
[10:32:41.406] Packages needed by future strategies (n = 0): <none>
[10:32:41.407] {
[10:32:41.407]     {
[10:32:41.407]         {
[10:32:41.407]             ...future.startTime <- base::Sys.time()
[10:32:41.407]             {
[10:32:41.407]                 {
[10:32:41.407]                   {
[10:32:41.407]                     base::local({
[10:32:41.407]                       has_future <- base::requireNamespace("future", 
[10:32:41.407]                         quietly = TRUE)
[10:32:41.407]                       if (has_future) {
[10:32:41.407]                         ns <- base::getNamespace("future")
[10:32:41.407]                         version <- ns[[".package"]][["version"]]
[10:32:41.407]                         if (is.null(version)) 
[10:32:41.407]                           version <- utils::packageVersion("future")
[10:32:41.407]                       }
[10:32:41.407]                       else {
[10:32:41.407]                         version <- NULL
[10:32:41.407]                       }
[10:32:41.407]                       if (!has_future || version < "1.8.0") {
[10:32:41.407]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:41.407]                           "", base::R.version$version.string), 
[10:32:41.407]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:41.407]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:41.407]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:41.407]                             "release", "version")], collapse = " "), 
[10:32:41.407]                           hostname = base::Sys.info()[["nodename"]])
[10:32:41.407]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:41.407]                           info)
[10:32:41.407]                         info <- base::paste(info, collapse = "; ")
[10:32:41.407]                         if (!has_future) {
[10:32:41.407]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:41.407]                             info)
[10:32:41.407]                         }
[10:32:41.407]                         else {
[10:32:41.407]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:41.407]                             info, version)
[10:32:41.407]                         }
[10:32:41.407]                         base::stop(msg)
[10:32:41.407]                       }
[10:32:41.407]                     })
[10:32:41.407]                   }
[10:32:41.407]                   ...future.strategy.old <- future::plan("list")
[10:32:41.407]                   options(future.plan = NULL)
[10:32:41.407]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.407]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:41.407]                 }
[10:32:41.407]                 ...future.workdir <- getwd()
[10:32:41.407]             }
[10:32:41.407]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:41.407]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:41.407]         }
[10:32:41.407]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:41.407]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:41.407]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:41.407]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:41.407]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:41.407]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:41.407]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:41.407]             base::names(...future.oldOptions))
[10:32:41.407]     }
[10:32:41.407]     if (FALSE) {
[10:32:41.407]     }
[10:32:41.407]     else {
[10:32:41.407]         if (TRUE) {
[10:32:41.407]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:41.407]                 open = "w")
[10:32:41.407]         }
[10:32:41.407]         else {
[10:32:41.407]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:41.407]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:41.407]         }
[10:32:41.407]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:41.407]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:41.407]             base::sink(type = "output", split = FALSE)
[10:32:41.407]             base::close(...future.stdout)
[10:32:41.407]         }, add = TRUE)
[10:32:41.407]     }
[10:32:41.407]     ...future.frame <- base::sys.nframe()
[10:32:41.407]     ...future.conditions <- base::list()
[10:32:41.407]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:41.407]     if (FALSE) {
[10:32:41.407]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:41.407]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:41.407]     }
[10:32:41.407]     ...future.result <- base::tryCatch({
[10:32:41.407]         base::withCallingHandlers({
[10:32:41.407]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[10:32:41.407]                 rr, cc)))
[10:32:41.407]             future::FutureResult(value = ...future.value$value, 
[10:32:41.407]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.407]                   ...future.rng), globalenv = if (FALSE) 
[10:32:41.407]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:41.407]                     ...future.globalenv.names))
[10:32:41.407]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:41.407]         }, condition = base::local({
[10:32:41.407]             c <- base::c
[10:32:41.407]             inherits <- base::inherits
[10:32:41.407]             invokeRestart <- base::invokeRestart
[10:32:41.407]             length <- base::length
[10:32:41.407]             list <- base::list
[10:32:41.407]             seq.int <- base::seq.int
[10:32:41.407]             signalCondition <- base::signalCondition
[10:32:41.407]             sys.calls <- base::sys.calls
[10:32:41.407]             `[[` <- base::`[[`
[10:32:41.407]             `+` <- base::`+`
[10:32:41.407]             `<<-` <- base::`<<-`
[10:32:41.407]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:41.407]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:41.407]                   3L)]
[10:32:41.407]             }
[10:32:41.407]             function(cond) {
[10:32:41.407]                 is_error <- inherits(cond, "error")
[10:32:41.407]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:41.407]                   NULL)
[10:32:41.407]                 if (is_error) {
[10:32:41.407]                   sessionInformation <- function() {
[10:32:41.407]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:41.407]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:41.407]                       search = base::search(), system = base::Sys.info())
[10:32:41.407]                   }
[10:32:41.407]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.407]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:41.407]                     cond$call), session = sessionInformation(), 
[10:32:41.407]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:41.407]                   signalCondition(cond)
[10:32:41.407]                 }
[10:32:41.407]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:41.407]                 "immediateCondition"))) {
[10:32:41.407]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:41.407]                   ...future.conditions[[length(...future.conditions) + 
[10:32:41.407]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:41.407]                   if (TRUE && !signal) {
[10:32:41.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.407]                     {
[10:32:41.407]                       inherits <- base::inherits
[10:32:41.407]                       invokeRestart <- base::invokeRestart
[10:32:41.407]                       is.null <- base::is.null
[10:32:41.407]                       muffled <- FALSE
[10:32:41.407]                       if (inherits(cond, "message")) {
[10:32:41.407]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.407]                         if (muffled) 
[10:32:41.407]                           invokeRestart("muffleMessage")
[10:32:41.407]                       }
[10:32:41.407]                       else if (inherits(cond, "warning")) {
[10:32:41.407]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.407]                         if (muffled) 
[10:32:41.407]                           invokeRestart("muffleWarning")
[10:32:41.407]                       }
[10:32:41.407]                       else if (inherits(cond, "condition")) {
[10:32:41.407]                         if (!is.null(pattern)) {
[10:32:41.407]                           computeRestarts <- base::computeRestarts
[10:32:41.407]                           grepl <- base::grepl
[10:32:41.407]                           restarts <- computeRestarts(cond)
[10:32:41.407]                           for (restart in restarts) {
[10:32:41.407]                             name <- restart$name
[10:32:41.407]                             if (is.null(name)) 
[10:32:41.407]                               next
[10:32:41.407]                             if (!grepl(pattern, name)) 
[10:32:41.407]                               next
[10:32:41.407]                             invokeRestart(restart)
[10:32:41.407]                             muffled <- TRUE
[10:32:41.407]                             break
[10:32:41.407]                           }
[10:32:41.407]                         }
[10:32:41.407]                       }
[10:32:41.407]                       invisible(muffled)
[10:32:41.407]                     }
[10:32:41.407]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.407]                   }
[10:32:41.407]                 }
[10:32:41.407]                 else {
[10:32:41.407]                   if (TRUE) {
[10:32:41.407]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:41.407]                     {
[10:32:41.407]                       inherits <- base::inherits
[10:32:41.407]                       invokeRestart <- base::invokeRestart
[10:32:41.407]                       is.null <- base::is.null
[10:32:41.407]                       muffled <- FALSE
[10:32:41.407]                       if (inherits(cond, "message")) {
[10:32:41.407]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:41.407]                         if (muffled) 
[10:32:41.407]                           invokeRestart("muffleMessage")
[10:32:41.407]                       }
[10:32:41.407]                       else if (inherits(cond, "warning")) {
[10:32:41.407]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:41.407]                         if (muffled) 
[10:32:41.407]                           invokeRestart("muffleWarning")
[10:32:41.407]                       }
[10:32:41.407]                       else if (inherits(cond, "condition")) {
[10:32:41.407]                         if (!is.null(pattern)) {
[10:32:41.407]                           computeRestarts <- base::computeRestarts
[10:32:41.407]                           grepl <- base::grepl
[10:32:41.407]                           restarts <- computeRestarts(cond)
[10:32:41.407]                           for (restart in restarts) {
[10:32:41.407]                             name <- restart$name
[10:32:41.407]                             if (is.null(name)) 
[10:32:41.407]                               next
[10:32:41.407]                             if (!grepl(pattern, name)) 
[10:32:41.407]                               next
[10:32:41.407]                             invokeRestart(restart)
[10:32:41.407]                             muffled <- TRUE
[10:32:41.407]                             break
[10:32:41.407]                           }
[10:32:41.407]                         }
[10:32:41.407]                       }
[10:32:41.407]                       invisible(muffled)
[10:32:41.407]                     }
[10:32:41.407]                     muffleCondition(cond, pattern = "^muffle")
[10:32:41.407]                   }
[10:32:41.407]                 }
[10:32:41.407]             }
[10:32:41.407]         }))
[10:32:41.407]     }, error = function(ex) {
[10:32:41.407]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:41.407]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:41.407]                 ...future.rng), started = ...future.startTime, 
[10:32:41.407]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:41.407]             version = "1.8"), class = "FutureResult")
[10:32:41.407]     }, finally = {
[10:32:41.407]         if (!identical(...future.workdir, getwd())) 
[10:32:41.407]             setwd(...future.workdir)
[10:32:41.407]         {
[10:32:41.407]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:41.407]                 ...future.oldOptions$nwarnings <- NULL
[10:32:41.407]             }
[10:32:41.407]             base::options(...future.oldOptions)
[10:32:41.407]             if (.Platform$OS.type == "windows") {
[10:32:41.407]                 old_names <- names(...future.oldEnvVars)
[10:32:41.407]                 envs <- base::Sys.getenv()
[10:32:41.407]                 names <- names(envs)
[10:32:41.407]                 common <- intersect(names, old_names)
[10:32:41.407]                 added <- setdiff(names, old_names)
[10:32:41.407]                 removed <- setdiff(old_names, names)
[10:32:41.407]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:41.407]                   envs[common]]
[10:32:41.407]                 NAMES <- toupper(changed)
[10:32:41.407]                 args <- list()
[10:32:41.407]                 for (kk in seq_along(NAMES)) {
[10:32:41.407]                   name <- changed[[kk]]
[10:32:41.407]                   NAME <- NAMES[[kk]]
[10:32:41.407]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.407]                     next
[10:32:41.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.407]                 }
[10:32:41.407]                 NAMES <- toupper(added)
[10:32:41.407]                 for (kk in seq_along(NAMES)) {
[10:32:41.407]                   name <- added[[kk]]
[10:32:41.407]                   NAME <- NAMES[[kk]]
[10:32:41.407]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.407]                     next
[10:32:41.407]                   args[[name]] <- ""
[10:32:41.407]                 }
[10:32:41.407]                 NAMES <- toupper(removed)
[10:32:41.407]                 for (kk in seq_along(NAMES)) {
[10:32:41.407]                   name <- removed[[kk]]
[10:32:41.407]                   NAME <- NAMES[[kk]]
[10:32:41.407]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:41.407]                     next
[10:32:41.407]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:41.407]                 }
[10:32:41.407]                 if (length(args) > 0) 
[10:32:41.407]                   base::do.call(base::Sys.setenv, args = args)
[10:32:41.407]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:41.407]             }
[10:32:41.407]             else {
[10:32:41.407]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:41.407]             }
[10:32:41.407]             {
[10:32:41.407]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:41.407]                   0L) {
[10:32:41.407]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:41.407]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:41.407]                   base::options(opts)
[10:32:41.407]                 }
[10:32:41.407]                 {
[10:32:41.407]                   {
[10:32:41.407]                     NULL
[10:32:41.407]                     RNGkind("Mersenne-Twister")
[10:32:41.407]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:41.407]                       inherits = FALSE)
[10:32:41.407]                   }
[10:32:41.407]                   options(future.plan = NULL)
[10:32:41.407]                   if (is.na(NA_character_)) 
[10:32:41.407]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:41.407]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:41.407]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:41.407]                     .init = FALSE)
[10:32:41.407]                 }
[10:32:41.407]             }
[10:32:41.407]         }
[10:32:41.407]     })
[10:32:41.407]     if (TRUE) {
[10:32:41.407]         base::sink(type = "output", split = FALSE)
[10:32:41.407]         if (TRUE) {
[10:32:41.407]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:41.407]         }
[10:32:41.407]         else {
[10:32:41.407]             ...future.result["stdout"] <- base::list(NULL)
[10:32:41.407]         }
[10:32:41.407]         base::close(...future.stdout)
[10:32:41.407]         ...future.stdout <- NULL
[10:32:41.407]     }
[10:32:41.407]     ...future.result$conditions <- ...future.conditions
[10:32:41.407]     ...future.result$finished <- base::Sys.time()
[10:32:41.407]     ...future.result
[10:32:41.407] }
[10:32:41.408] assign_globals() ...
[10:32:41.408] List of 2
[10:32:41.408]  $ rr: int 3
[10:32:41.408]  $ cc: int 2
[10:32:41.408]  - attr(*, "where")=List of 2
[10:32:41.408]   ..$ rr:<environment: R_EmptyEnv> 
[10:32:41.408]   ..$ cc:<environment: R_EmptyEnv> 
[10:32:41.408]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:32:41.408]  - attr(*, "resolved")= logi FALSE
[10:32:41.408]  - attr(*, "total_size")= num 112
[10:32:41.408]  - attr(*, "already-done")= logi TRUE
[10:32:41.411] - copied ‘rr’ to environment
[10:32:41.411] - copied ‘cc’ to environment
[10:32:41.411] assign_globals() ... done
[10:32:41.412] plan(): Setting new future strategy stack:
[10:32:41.412] List of future strategies:
[10:32:41.412] 1. sequential:
[10:32:41.412]    - args: function (..., envir = parent.frame())
[10:32:41.412]    - tweaked: FALSE
[10:32:41.412]    - call: NULL
[10:32:41.412] plan(): nbrOfWorkers() = 1
[10:32:41.413] plan(): Setting new future strategy stack:
[10:32:41.413] List of future strategies:
[10:32:41.413] 1. sequential:
[10:32:41.413]    - args: function (..., envir = parent.frame())
[10:32:41.413]    - tweaked: FALSE
[10:32:41.413]    - call: future::plan("sequential")
[10:32:41.413] plan(): nbrOfWorkers() = 1
[10:32:41.413] SequentialFuture started (and completed)
[10:32:41.413] - Launch lazy future ... done
[10:32:41.413] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[10:32:41.414] plan(): Setting new future strategy stack:
[10:32:41.414] List of future strategies:
[10:32:41.414] 1. FutureStrategy:
[10:32:41.414]    - args: function (..., envir = parent.frame())
[10:32:41.414]    - tweaked: FALSE
[10:32:41.414]    - call: future::plan(oplan)
[10:32:41.426] plan(): nbrOfWorkers() = 1
> 
