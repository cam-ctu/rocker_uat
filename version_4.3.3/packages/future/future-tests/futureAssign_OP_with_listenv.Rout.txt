
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:32.315] plan(): Setting new future strategy stack:
[16:20:32.316] List of future strategies:
[16:20:32.316] 1. sequential:
[16:20:32.316]    - args: function (..., envir = parent.frame())
[16:20:32.316]    - tweaked: FALSE
[16:20:32.316]    - call: future::plan("sequential")
[16:20:32.330] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:20:32.344] getGlobalsAndPackages() ...
[16:20:32.344] Searching for globals...
[16:20:32.347] - globals found: [1] ‘{’
[16:20:32.347] Searching for globals ... DONE
[16:20:32.348] Resolving globals: FALSE
[16:20:32.348] 
[16:20:32.348] 
[16:20:32.348] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[16:20:32.349] getGlobalsAndPackages() ...
[16:20:32.349] Searching for globals...
[16:20:32.350] - globals found: [1] ‘{’
[16:20:32.350] Searching for globals ... DONE
[16:20:32.350] Resolving globals: FALSE
[16:20:32.350] 
[16:20:32.350] 
[16:20:32.350] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[16:20:32.351] getGlobalsAndPackages() ...
[16:20:32.351] Searching for globals...
[16:20:32.352] - globals found: [1] ‘{’
[16:20:32.352] Searching for globals ... DONE
[16:20:32.352] Resolving globals: FALSE
[16:20:32.352] 
[16:20:32.352] 
[16:20:32.352] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[16:20:32.353] getGlobalsAndPackages() ...
[16:20:32.353] Searching for globals...
[16:20:32.354] - globals found: [1] ‘{’
[16:20:32.354] Searching for globals ... DONE
[16:20:32.354] Resolving globals: FALSE
[16:20:32.354] 
[16:20:32.354] 
[16:20:32.354] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[16:20:32.355] run() for ‘Future’ ...
[16:20:32.355] - state: ‘created’
[16:20:32.356] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.356] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.356] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.356]   - Field: ‘label’
[16:20:32.356]   - Field: ‘local’
[16:20:32.356]   - Field: ‘owner’
[16:20:32.356]   - Field: ‘envir’
[16:20:32.356]   - Field: ‘packages’
[16:20:32.357]   - Field: ‘gc’
[16:20:32.357]   - Field: ‘conditions’
[16:20:32.357]   - Field: ‘expr’
[16:20:32.357]   - Field: ‘uuid’
[16:20:32.357]   - Field: ‘seed’
[16:20:32.357]   - Field: ‘version’
[16:20:32.357]   - Field: ‘result’
[16:20:32.357]   - Field: ‘asynchronous’
[16:20:32.357]   - Field: ‘calls’
[16:20:32.357]   - Field: ‘globals’
[16:20:32.357]   - Field: ‘stdout’
[16:20:32.358]   - Field: ‘earlySignal’
[16:20:32.358]   - Field: ‘lazy’
[16:20:32.358]   - Field: ‘state’
[16:20:32.358] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.358] - Launch lazy future ...
[16:20:32.359] Packages needed by the future expression (n = 0): <none>
[16:20:32.359] Packages needed by future strategies (n = 0): <none>
[16:20:32.360] {
[16:20:32.360]     {
[16:20:32.360]         {
[16:20:32.360]             ...future.startTime <- base::Sys.time()
[16:20:32.360]             {
[16:20:32.360]                 {
[16:20:32.360]                   {
[16:20:32.360]                     base::local({
[16:20:32.360]                       has_future <- base::requireNamespace("future", 
[16:20:32.360]                         quietly = TRUE)
[16:20:32.360]                       if (has_future) {
[16:20:32.360]                         ns <- base::getNamespace("future")
[16:20:32.360]                         version <- ns[[".package"]][["version"]]
[16:20:32.360]                         if (is.null(version)) 
[16:20:32.360]                           version <- utils::packageVersion("future")
[16:20:32.360]                       }
[16:20:32.360]                       else {
[16:20:32.360]                         version <- NULL
[16:20:32.360]                       }
[16:20:32.360]                       if (!has_future || version < "1.8.0") {
[16:20:32.360]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.360]                           "", base::R.version$version.string), 
[16:20:32.360]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.360]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.360]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.360]                             "release", "version")], collapse = " "), 
[16:20:32.360]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.360]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.360]                           info)
[16:20:32.360]                         info <- base::paste(info, collapse = "; ")
[16:20:32.360]                         if (!has_future) {
[16:20:32.360]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.360]                             info)
[16:20:32.360]                         }
[16:20:32.360]                         else {
[16:20:32.360]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.360]                             info, version)
[16:20:32.360]                         }
[16:20:32.360]                         base::stop(msg)
[16:20:32.360]                       }
[16:20:32.360]                     })
[16:20:32.360]                   }
[16:20:32.360]                   ...future.strategy.old <- future::plan("list")
[16:20:32.360]                   options(future.plan = NULL)
[16:20:32.360]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.360]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.360]                 }
[16:20:32.360]                 ...future.workdir <- getwd()
[16:20:32.360]             }
[16:20:32.360]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.360]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.360]         }
[16:20:32.360]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.360]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.360]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.360]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.360]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.360]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.360]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.360]             base::names(...future.oldOptions))
[16:20:32.360]     }
[16:20:32.360]     if (FALSE) {
[16:20:32.360]     }
[16:20:32.360]     else {
[16:20:32.360]         if (TRUE) {
[16:20:32.360]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.360]                 open = "w")
[16:20:32.360]         }
[16:20:32.360]         else {
[16:20:32.360]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.360]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.360]         }
[16:20:32.360]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.360]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.360]             base::sink(type = "output", split = FALSE)
[16:20:32.360]             base::close(...future.stdout)
[16:20:32.360]         }, add = TRUE)
[16:20:32.360]     }
[16:20:32.360]     ...future.frame <- base::sys.nframe()
[16:20:32.360]     ...future.conditions <- base::list()
[16:20:32.360]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.360]     if (FALSE) {
[16:20:32.360]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.360]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.360]     }
[16:20:32.360]     ...future.result <- base::tryCatch({
[16:20:32.360]         base::withCallingHandlers({
[16:20:32.360]             ...future.value <- base::withVisible(base::local({
[16:20:32.360]                 2
[16:20:32.360]             }))
[16:20:32.360]             future::FutureResult(value = ...future.value$value, 
[16:20:32.360]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.360]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.360]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.360]                     ...future.globalenv.names))
[16:20:32.360]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.360]         }, condition = base::local({
[16:20:32.360]             c <- base::c
[16:20:32.360]             inherits <- base::inherits
[16:20:32.360]             invokeRestart <- base::invokeRestart
[16:20:32.360]             length <- base::length
[16:20:32.360]             list <- base::list
[16:20:32.360]             seq.int <- base::seq.int
[16:20:32.360]             signalCondition <- base::signalCondition
[16:20:32.360]             sys.calls <- base::sys.calls
[16:20:32.360]             `[[` <- base::`[[`
[16:20:32.360]             `+` <- base::`+`
[16:20:32.360]             `<<-` <- base::`<<-`
[16:20:32.360]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.360]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.360]                   3L)]
[16:20:32.360]             }
[16:20:32.360]             function(cond) {
[16:20:32.360]                 is_error <- inherits(cond, "error")
[16:20:32.360]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.360]                   NULL)
[16:20:32.360]                 if (is_error) {
[16:20:32.360]                   sessionInformation <- function() {
[16:20:32.360]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.360]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.360]                       search = base::search(), system = base::Sys.info())
[16:20:32.360]                   }
[16:20:32.360]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.360]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.360]                     cond$call), session = sessionInformation(), 
[16:20:32.360]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.360]                   signalCondition(cond)
[16:20:32.360]                 }
[16:20:32.360]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.360]                 "immediateCondition"))) {
[16:20:32.360]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.360]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.360]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.360]                   if (TRUE && !signal) {
[16:20:32.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.360]                     {
[16:20:32.360]                       inherits <- base::inherits
[16:20:32.360]                       invokeRestart <- base::invokeRestart
[16:20:32.360]                       is.null <- base::is.null
[16:20:32.360]                       muffled <- FALSE
[16:20:32.360]                       if (inherits(cond, "message")) {
[16:20:32.360]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.360]                         if (muffled) 
[16:20:32.360]                           invokeRestart("muffleMessage")
[16:20:32.360]                       }
[16:20:32.360]                       else if (inherits(cond, "warning")) {
[16:20:32.360]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.360]                         if (muffled) 
[16:20:32.360]                           invokeRestart("muffleWarning")
[16:20:32.360]                       }
[16:20:32.360]                       else if (inherits(cond, "condition")) {
[16:20:32.360]                         if (!is.null(pattern)) {
[16:20:32.360]                           computeRestarts <- base::computeRestarts
[16:20:32.360]                           grepl <- base::grepl
[16:20:32.360]                           restarts <- computeRestarts(cond)
[16:20:32.360]                           for (restart in restarts) {
[16:20:32.360]                             name <- restart$name
[16:20:32.360]                             if (is.null(name)) 
[16:20:32.360]                               next
[16:20:32.360]                             if (!grepl(pattern, name)) 
[16:20:32.360]                               next
[16:20:32.360]                             invokeRestart(restart)
[16:20:32.360]                             muffled <- TRUE
[16:20:32.360]                             break
[16:20:32.360]                           }
[16:20:32.360]                         }
[16:20:32.360]                       }
[16:20:32.360]                       invisible(muffled)
[16:20:32.360]                     }
[16:20:32.360]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.360]                   }
[16:20:32.360]                 }
[16:20:32.360]                 else {
[16:20:32.360]                   if (TRUE) {
[16:20:32.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.360]                     {
[16:20:32.360]                       inherits <- base::inherits
[16:20:32.360]                       invokeRestart <- base::invokeRestart
[16:20:32.360]                       is.null <- base::is.null
[16:20:32.360]                       muffled <- FALSE
[16:20:32.360]                       if (inherits(cond, "message")) {
[16:20:32.360]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.360]                         if (muffled) 
[16:20:32.360]                           invokeRestart("muffleMessage")
[16:20:32.360]                       }
[16:20:32.360]                       else if (inherits(cond, "warning")) {
[16:20:32.360]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.360]                         if (muffled) 
[16:20:32.360]                           invokeRestart("muffleWarning")
[16:20:32.360]                       }
[16:20:32.360]                       else if (inherits(cond, "condition")) {
[16:20:32.360]                         if (!is.null(pattern)) {
[16:20:32.360]                           computeRestarts <- base::computeRestarts
[16:20:32.360]                           grepl <- base::grepl
[16:20:32.360]                           restarts <- computeRestarts(cond)
[16:20:32.360]                           for (restart in restarts) {
[16:20:32.360]                             name <- restart$name
[16:20:32.360]                             if (is.null(name)) 
[16:20:32.360]                               next
[16:20:32.360]                             if (!grepl(pattern, name)) 
[16:20:32.360]                               next
[16:20:32.360]                             invokeRestart(restart)
[16:20:32.360]                             muffled <- TRUE
[16:20:32.360]                             break
[16:20:32.360]                           }
[16:20:32.360]                         }
[16:20:32.360]                       }
[16:20:32.360]                       invisible(muffled)
[16:20:32.360]                     }
[16:20:32.360]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.360]                   }
[16:20:32.360]                 }
[16:20:32.360]             }
[16:20:32.360]         }))
[16:20:32.360]     }, error = function(ex) {
[16:20:32.360]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.360]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.360]                 ...future.rng), started = ...future.startTime, 
[16:20:32.360]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.360]             version = "1.8"), class = "FutureResult")
[16:20:32.360]     }, finally = {
[16:20:32.360]         if (!identical(...future.workdir, getwd())) 
[16:20:32.360]             setwd(...future.workdir)
[16:20:32.360]         {
[16:20:32.360]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.360]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.360]             }
[16:20:32.360]             base::options(...future.oldOptions)
[16:20:32.360]             if (.Platform$OS.type == "windows") {
[16:20:32.360]                 old_names <- names(...future.oldEnvVars)
[16:20:32.360]                 envs <- base::Sys.getenv()
[16:20:32.360]                 names <- names(envs)
[16:20:32.360]                 common <- intersect(names, old_names)
[16:20:32.360]                 added <- setdiff(names, old_names)
[16:20:32.360]                 removed <- setdiff(old_names, names)
[16:20:32.360]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.360]                   envs[common]]
[16:20:32.360]                 NAMES <- toupper(changed)
[16:20:32.360]                 args <- list()
[16:20:32.360]                 for (kk in seq_along(NAMES)) {
[16:20:32.360]                   name <- changed[[kk]]
[16:20:32.360]                   NAME <- NAMES[[kk]]
[16:20:32.360]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.360]                     next
[16:20:32.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.360]                 }
[16:20:32.360]                 NAMES <- toupper(added)
[16:20:32.360]                 for (kk in seq_along(NAMES)) {
[16:20:32.360]                   name <- added[[kk]]
[16:20:32.360]                   NAME <- NAMES[[kk]]
[16:20:32.360]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.360]                     next
[16:20:32.360]                   args[[name]] <- ""
[16:20:32.360]                 }
[16:20:32.360]                 NAMES <- toupper(removed)
[16:20:32.360]                 for (kk in seq_along(NAMES)) {
[16:20:32.360]                   name <- removed[[kk]]
[16:20:32.360]                   NAME <- NAMES[[kk]]
[16:20:32.360]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.360]                     next
[16:20:32.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.360]                 }
[16:20:32.360]                 if (length(args) > 0) 
[16:20:32.360]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.360]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.360]             }
[16:20:32.360]             else {
[16:20:32.360]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.360]             }
[16:20:32.360]             {
[16:20:32.360]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.360]                   0L) {
[16:20:32.360]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.360]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.360]                   base::options(opts)
[16:20:32.360]                 }
[16:20:32.360]                 {
[16:20:32.360]                   {
[16:20:32.360]                     NULL
[16:20:32.360]                     RNGkind("Mersenne-Twister")
[16:20:32.360]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.360]                       inherits = FALSE)
[16:20:32.360]                   }
[16:20:32.360]                   options(future.plan = NULL)
[16:20:32.360]                   if (is.na(NA_character_)) 
[16:20:32.360]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.360]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.360]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.360]                     .init = FALSE)
[16:20:32.360]                 }
[16:20:32.360]             }
[16:20:32.360]         }
[16:20:32.360]     })
[16:20:32.360]     if (TRUE) {
[16:20:32.360]         base::sink(type = "output", split = FALSE)
[16:20:32.360]         if (TRUE) {
[16:20:32.360]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.360]         }
[16:20:32.360]         else {
[16:20:32.360]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.360]         }
[16:20:32.360]         base::close(...future.stdout)
[16:20:32.360]         ...future.stdout <- NULL
[16:20:32.360]     }
[16:20:32.360]     ...future.result$conditions <- ...future.conditions
[16:20:32.360]     ...future.result$finished <- base::Sys.time()
[16:20:32.360]     ...future.result
[16:20:32.360] }
[16:20:32.362] plan(): Setting new future strategy stack:
[16:20:32.362] List of future strategies:
[16:20:32.362] 1. sequential:
[16:20:32.362]    - args: function (..., envir = parent.frame())
[16:20:32.362]    - tweaked: FALSE
[16:20:32.362]    - call: NULL
[16:20:32.362] plan(): nbrOfWorkers() = 1
[16:20:32.363] plan(): Setting new future strategy stack:
[16:20:32.363] List of future strategies:
[16:20:32.363] 1. sequential:
[16:20:32.363]    - args: function (..., envir = parent.frame())
[16:20:32.363]    - tweaked: FALSE
[16:20:32.363]    - call: future::plan("sequential")
[16:20:32.364] plan(): nbrOfWorkers() = 1
[16:20:32.364] SequentialFuture started (and completed)
[16:20:32.364] - Launch lazy future ... done
[16:20:32.364] run() for ‘SequentialFuture’ ... done
[16:20:32.365] run() for ‘Future’ ...
[16:20:32.365] - state: ‘created’
[16:20:32.365] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.365] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.365] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.365]   - Field: ‘label’
[16:20:32.365]   - Field: ‘local’
[16:20:32.365]   - Field: ‘owner’
[16:20:32.366]   - Field: ‘envir’
[16:20:32.366]   - Field: ‘packages’
[16:20:32.366]   - Field: ‘gc’
[16:20:32.366]   - Field: ‘conditions’
[16:20:32.366]   - Field: ‘expr’
[16:20:32.366]   - Field: ‘uuid’
[16:20:32.366]   - Field: ‘seed’
[16:20:32.366]   - Field: ‘version’
[16:20:32.366]   - Field: ‘result’
[16:20:32.366]   - Field: ‘asynchronous’
[16:20:32.367]   - Field: ‘calls’
[16:20:32.367]   - Field: ‘globals’
[16:20:32.367]   - Field: ‘stdout’
[16:20:32.367]   - Field: ‘earlySignal’
[16:20:32.367]   - Field: ‘lazy’
[16:20:32.367]   - Field: ‘state’
[16:20:32.367] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.367] - Launch lazy future ...
[16:20:32.367] Packages needed by the future expression (n = 0): <none>
[16:20:32.367] Packages needed by future strategies (n = 0): <none>
[16:20:32.368] {
[16:20:32.368]     {
[16:20:32.368]         {
[16:20:32.368]             ...future.startTime <- base::Sys.time()
[16:20:32.368]             {
[16:20:32.368]                 {
[16:20:32.368]                   {
[16:20:32.368]                     base::local({
[16:20:32.368]                       has_future <- base::requireNamespace("future", 
[16:20:32.368]                         quietly = TRUE)
[16:20:32.368]                       if (has_future) {
[16:20:32.368]                         ns <- base::getNamespace("future")
[16:20:32.368]                         version <- ns[[".package"]][["version"]]
[16:20:32.368]                         if (is.null(version)) 
[16:20:32.368]                           version <- utils::packageVersion("future")
[16:20:32.368]                       }
[16:20:32.368]                       else {
[16:20:32.368]                         version <- NULL
[16:20:32.368]                       }
[16:20:32.368]                       if (!has_future || version < "1.8.0") {
[16:20:32.368]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.368]                           "", base::R.version$version.string), 
[16:20:32.368]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.368]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.368]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.368]                             "release", "version")], collapse = " "), 
[16:20:32.368]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.368]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.368]                           info)
[16:20:32.368]                         info <- base::paste(info, collapse = "; ")
[16:20:32.368]                         if (!has_future) {
[16:20:32.368]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.368]                             info)
[16:20:32.368]                         }
[16:20:32.368]                         else {
[16:20:32.368]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.368]                             info, version)
[16:20:32.368]                         }
[16:20:32.368]                         base::stop(msg)
[16:20:32.368]                       }
[16:20:32.368]                     })
[16:20:32.368]                   }
[16:20:32.368]                   ...future.strategy.old <- future::plan("list")
[16:20:32.368]                   options(future.plan = NULL)
[16:20:32.368]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.368]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.368]                 }
[16:20:32.368]                 ...future.workdir <- getwd()
[16:20:32.368]             }
[16:20:32.368]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.368]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.368]         }
[16:20:32.368]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.368]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.368]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.368]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.368]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.368]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.368]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.368]             base::names(...future.oldOptions))
[16:20:32.368]     }
[16:20:32.368]     if (FALSE) {
[16:20:32.368]     }
[16:20:32.368]     else {
[16:20:32.368]         if (TRUE) {
[16:20:32.368]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.368]                 open = "w")
[16:20:32.368]         }
[16:20:32.368]         else {
[16:20:32.368]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.368]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.368]         }
[16:20:32.368]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.368]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.368]             base::sink(type = "output", split = FALSE)
[16:20:32.368]             base::close(...future.stdout)
[16:20:32.368]         }, add = TRUE)
[16:20:32.368]     }
[16:20:32.368]     ...future.frame <- base::sys.nframe()
[16:20:32.368]     ...future.conditions <- base::list()
[16:20:32.368]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.368]     if (FALSE) {
[16:20:32.368]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.368]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.368]     }
[16:20:32.368]     ...future.result <- base::tryCatch({
[16:20:32.368]         base::withCallingHandlers({
[16:20:32.368]             ...future.value <- base::withVisible(base::local({
[16:20:32.368]                 "async!"
[16:20:32.368]             }))
[16:20:32.368]             future::FutureResult(value = ...future.value$value, 
[16:20:32.368]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.368]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.368]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.368]                     ...future.globalenv.names))
[16:20:32.368]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.368]         }, condition = base::local({
[16:20:32.368]             c <- base::c
[16:20:32.368]             inherits <- base::inherits
[16:20:32.368]             invokeRestart <- base::invokeRestart
[16:20:32.368]             length <- base::length
[16:20:32.368]             list <- base::list
[16:20:32.368]             seq.int <- base::seq.int
[16:20:32.368]             signalCondition <- base::signalCondition
[16:20:32.368]             sys.calls <- base::sys.calls
[16:20:32.368]             `[[` <- base::`[[`
[16:20:32.368]             `+` <- base::`+`
[16:20:32.368]             `<<-` <- base::`<<-`
[16:20:32.368]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.368]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.368]                   3L)]
[16:20:32.368]             }
[16:20:32.368]             function(cond) {
[16:20:32.368]                 is_error <- inherits(cond, "error")
[16:20:32.368]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.368]                   NULL)
[16:20:32.368]                 if (is_error) {
[16:20:32.368]                   sessionInformation <- function() {
[16:20:32.368]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.368]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.368]                       search = base::search(), system = base::Sys.info())
[16:20:32.368]                   }
[16:20:32.368]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.368]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.368]                     cond$call), session = sessionInformation(), 
[16:20:32.368]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.368]                   signalCondition(cond)
[16:20:32.368]                 }
[16:20:32.368]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.368]                 "immediateCondition"))) {
[16:20:32.368]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.368]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.368]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.368]                   if (TRUE && !signal) {
[16:20:32.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.368]                     {
[16:20:32.368]                       inherits <- base::inherits
[16:20:32.368]                       invokeRestart <- base::invokeRestart
[16:20:32.368]                       is.null <- base::is.null
[16:20:32.368]                       muffled <- FALSE
[16:20:32.368]                       if (inherits(cond, "message")) {
[16:20:32.368]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.368]                         if (muffled) 
[16:20:32.368]                           invokeRestart("muffleMessage")
[16:20:32.368]                       }
[16:20:32.368]                       else if (inherits(cond, "warning")) {
[16:20:32.368]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.368]                         if (muffled) 
[16:20:32.368]                           invokeRestart("muffleWarning")
[16:20:32.368]                       }
[16:20:32.368]                       else if (inherits(cond, "condition")) {
[16:20:32.368]                         if (!is.null(pattern)) {
[16:20:32.368]                           computeRestarts <- base::computeRestarts
[16:20:32.368]                           grepl <- base::grepl
[16:20:32.368]                           restarts <- computeRestarts(cond)
[16:20:32.368]                           for (restart in restarts) {
[16:20:32.368]                             name <- restart$name
[16:20:32.368]                             if (is.null(name)) 
[16:20:32.368]                               next
[16:20:32.368]                             if (!grepl(pattern, name)) 
[16:20:32.368]                               next
[16:20:32.368]                             invokeRestart(restart)
[16:20:32.368]                             muffled <- TRUE
[16:20:32.368]                             break
[16:20:32.368]                           }
[16:20:32.368]                         }
[16:20:32.368]                       }
[16:20:32.368]                       invisible(muffled)
[16:20:32.368]                     }
[16:20:32.368]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.368]                   }
[16:20:32.368]                 }
[16:20:32.368]                 else {
[16:20:32.368]                   if (TRUE) {
[16:20:32.368]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.368]                     {
[16:20:32.368]                       inherits <- base::inherits
[16:20:32.368]                       invokeRestart <- base::invokeRestart
[16:20:32.368]                       is.null <- base::is.null
[16:20:32.368]                       muffled <- FALSE
[16:20:32.368]                       if (inherits(cond, "message")) {
[16:20:32.368]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.368]                         if (muffled) 
[16:20:32.368]                           invokeRestart("muffleMessage")
[16:20:32.368]                       }
[16:20:32.368]                       else if (inherits(cond, "warning")) {
[16:20:32.368]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.368]                         if (muffled) 
[16:20:32.368]                           invokeRestart("muffleWarning")
[16:20:32.368]                       }
[16:20:32.368]                       else if (inherits(cond, "condition")) {
[16:20:32.368]                         if (!is.null(pattern)) {
[16:20:32.368]                           computeRestarts <- base::computeRestarts
[16:20:32.368]                           grepl <- base::grepl
[16:20:32.368]                           restarts <- computeRestarts(cond)
[16:20:32.368]                           for (restart in restarts) {
[16:20:32.368]                             name <- restart$name
[16:20:32.368]                             if (is.null(name)) 
[16:20:32.368]                               next
[16:20:32.368]                             if (!grepl(pattern, name)) 
[16:20:32.368]                               next
[16:20:32.368]                             invokeRestart(restart)
[16:20:32.368]                             muffled <- TRUE
[16:20:32.368]                             break
[16:20:32.368]                           }
[16:20:32.368]                         }
[16:20:32.368]                       }
[16:20:32.368]                       invisible(muffled)
[16:20:32.368]                     }
[16:20:32.368]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.368]                   }
[16:20:32.368]                 }
[16:20:32.368]             }
[16:20:32.368]         }))
[16:20:32.368]     }, error = function(ex) {
[16:20:32.368]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.368]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.368]                 ...future.rng), started = ...future.startTime, 
[16:20:32.368]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.368]             version = "1.8"), class = "FutureResult")
[16:20:32.368]     }, finally = {
[16:20:32.368]         if (!identical(...future.workdir, getwd())) 
[16:20:32.368]             setwd(...future.workdir)
[16:20:32.368]         {
[16:20:32.368]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.368]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.368]             }
[16:20:32.368]             base::options(...future.oldOptions)
[16:20:32.368]             if (.Platform$OS.type == "windows") {
[16:20:32.368]                 old_names <- names(...future.oldEnvVars)
[16:20:32.368]                 envs <- base::Sys.getenv()
[16:20:32.368]                 names <- names(envs)
[16:20:32.368]                 common <- intersect(names, old_names)
[16:20:32.368]                 added <- setdiff(names, old_names)
[16:20:32.368]                 removed <- setdiff(old_names, names)
[16:20:32.368]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.368]                   envs[common]]
[16:20:32.368]                 NAMES <- toupper(changed)
[16:20:32.368]                 args <- list()
[16:20:32.368]                 for (kk in seq_along(NAMES)) {
[16:20:32.368]                   name <- changed[[kk]]
[16:20:32.368]                   NAME <- NAMES[[kk]]
[16:20:32.368]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.368]                     next
[16:20:32.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.368]                 }
[16:20:32.368]                 NAMES <- toupper(added)
[16:20:32.368]                 for (kk in seq_along(NAMES)) {
[16:20:32.368]                   name <- added[[kk]]
[16:20:32.368]                   NAME <- NAMES[[kk]]
[16:20:32.368]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.368]                     next
[16:20:32.368]                   args[[name]] <- ""
[16:20:32.368]                 }
[16:20:32.368]                 NAMES <- toupper(removed)
[16:20:32.368]                 for (kk in seq_along(NAMES)) {
[16:20:32.368]                   name <- removed[[kk]]
[16:20:32.368]                   NAME <- NAMES[[kk]]
[16:20:32.368]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.368]                     next
[16:20:32.368]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.368]                 }
[16:20:32.368]                 if (length(args) > 0) 
[16:20:32.368]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.368]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.368]             }
[16:20:32.368]             else {
[16:20:32.368]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.368]             }
[16:20:32.368]             {
[16:20:32.368]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.368]                   0L) {
[16:20:32.368]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.368]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.368]                   base::options(opts)
[16:20:32.368]                 }
[16:20:32.368]                 {
[16:20:32.368]                   {
[16:20:32.368]                     NULL
[16:20:32.368]                     RNGkind("Mersenne-Twister")
[16:20:32.368]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.368]                       inherits = FALSE)
[16:20:32.368]                   }
[16:20:32.368]                   options(future.plan = NULL)
[16:20:32.368]                   if (is.na(NA_character_)) 
[16:20:32.368]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.368]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.368]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.368]                     .init = FALSE)
[16:20:32.368]                 }
[16:20:32.368]             }
[16:20:32.368]         }
[16:20:32.368]     })
[16:20:32.368]     if (TRUE) {
[16:20:32.368]         base::sink(type = "output", split = FALSE)
[16:20:32.368]         if (TRUE) {
[16:20:32.368]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.368]         }
[16:20:32.368]         else {
[16:20:32.368]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.368]         }
[16:20:32.368]         base::close(...future.stdout)
[16:20:32.368]         ...future.stdout <- NULL
[16:20:32.368]     }
[16:20:32.368]     ...future.result$conditions <- ...future.conditions
[16:20:32.368]     ...future.result$finished <- base::Sys.time()
[16:20:32.368]     ...future.result
[16:20:32.368] }
[16:20:32.370] plan(): Setting new future strategy stack:
[16:20:32.370] List of future strategies:
[16:20:32.370] 1. sequential:
[16:20:32.370]    - args: function (..., envir = parent.frame())
[16:20:32.370]    - tweaked: FALSE
[16:20:32.370]    - call: NULL
[16:20:32.370] plan(): nbrOfWorkers() = 1
[16:20:32.371] plan(): Setting new future strategy stack:
[16:20:32.371] List of future strategies:
[16:20:32.371] 1. sequential:
[16:20:32.371]    - args: function (..., envir = parent.frame())
[16:20:32.371]    - tweaked: FALSE
[16:20:32.371]    - call: future::plan("sequential")
[16:20:32.371] plan(): nbrOfWorkers() = 1
[16:20:32.371] SequentialFuture started (and completed)
[16:20:32.371] - Launch lazy future ... done
[16:20:32.371] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[16:20:32.376] getGlobalsAndPackages() ...
[16:20:32.376] Searching for globals...
[16:20:32.377] - globals found: [1] ‘{’
[16:20:32.377] Searching for globals ... DONE
[16:20:32.377] Resolving globals: FALSE
[16:20:32.377] 
[16:20:32.377] 
[16:20:32.377] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[16:20:32.381] getGlobalsAndPackages() ...
[16:20:32.381] Searching for globals...
[16:20:32.381] - globals found: [1] ‘{’
[16:20:32.382] Searching for globals ... DONE
[16:20:32.382] Resolving globals: FALSE
[16:20:32.382] 
[16:20:32.382] 
[16:20:32.382] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[16:20:32.383] run() for ‘Future’ ...
[16:20:32.383] - state: ‘created’
[16:20:32.383] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.383] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.384]   - Field: ‘label’
[16:20:32.384]   - Field: ‘local’
[16:20:32.384]   - Field: ‘owner’
[16:20:32.384]   - Field: ‘envir’
[16:20:32.384]   - Field: ‘packages’
[16:20:32.384]   - Field: ‘gc’
[16:20:32.384]   - Field: ‘conditions’
[16:20:32.384]   - Field: ‘expr’
[16:20:32.384]   - Field: ‘uuid’
[16:20:32.384]   - Field: ‘seed’
[16:20:32.384]   - Field: ‘version’
[16:20:32.385]   - Field: ‘result’
[16:20:32.385]   - Field: ‘asynchronous’
[16:20:32.385]   - Field: ‘calls’
[16:20:32.385]   - Field: ‘globals’
[16:20:32.385]   - Field: ‘stdout’
[16:20:32.385]   - Field: ‘earlySignal’
[16:20:32.385]   - Field: ‘lazy’
[16:20:32.385]   - Field: ‘state’
[16:20:32.385] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.385] - Launch lazy future ...
[16:20:32.386] Packages needed by the future expression (n = 0): <none>
[16:20:32.386] Packages needed by future strategies (n = 0): <none>
[16:20:32.386] {
[16:20:32.386]     {
[16:20:32.386]         {
[16:20:32.386]             ...future.startTime <- base::Sys.time()
[16:20:32.386]             {
[16:20:32.386]                 {
[16:20:32.386]                   {
[16:20:32.386]                     base::local({
[16:20:32.386]                       has_future <- base::requireNamespace("future", 
[16:20:32.386]                         quietly = TRUE)
[16:20:32.386]                       if (has_future) {
[16:20:32.386]                         ns <- base::getNamespace("future")
[16:20:32.386]                         version <- ns[[".package"]][["version"]]
[16:20:32.386]                         if (is.null(version)) 
[16:20:32.386]                           version <- utils::packageVersion("future")
[16:20:32.386]                       }
[16:20:32.386]                       else {
[16:20:32.386]                         version <- NULL
[16:20:32.386]                       }
[16:20:32.386]                       if (!has_future || version < "1.8.0") {
[16:20:32.386]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.386]                           "", base::R.version$version.string), 
[16:20:32.386]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.386]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.386]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.386]                             "release", "version")], collapse = " "), 
[16:20:32.386]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.386]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.386]                           info)
[16:20:32.386]                         info <- base::paste(info, collapse = "; ")
[16:20:32.386]                         if (!has_future) {
[16:20:32.386]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.386]                             info)
[16:20:32.386]                         }
[16:20:32.386]                         else {
[16:20:32.386]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.386]                             info, version)
[16:20:32.386]                         }
[16:20:32.386]                         base::stop(msg)
[16:20:32.386]                       }
[16:20:32.386]                     })
[16:20:32.386]                   }
[16:20:32.386]                   ...future.strategy.old <- future::plan("list")
[16:20:32.386]                   options(future.plan = NULL)
[16:20:32.386]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.386]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.386]                 }
[16:20:32.386]                 ...future.workdir <- getwd()
[16:20:32.386]             }
[16:20:32.386]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.386]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.386]         }
[16:20:32.386]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.386]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.386]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.386]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.386]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.386]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.386]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.386]             base::names(...future.oldOptions))
[16:20:32.386]     }
[16:20:32.386]     if (FALSE) {
[16:20:32.386]     }
[16:20:32.386]     else {
[16:20:32.386]         if (TRUE) {
[16:20:32.386]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.386]                 open = "w")
[16:20:32.386]         }
[16:20:32.386]         else {
[16:20:32.386]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.386]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.386]         }
[16:20:32.386]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.386]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.386]             base::sink(type = "output", split = FALSE)
[16:20:32.386]             base::close(...future.stdout)
[16:20:32.386]         }, add = TRUE)
[16:20:32.386]     }
[16:20:32.386]     ...future.frame <- base::sys.nframe()
[16:20:32.386]     ...future.conditions <- base::list()
[16:20:32.386]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.386]     if (FALSE) {
[16:20:32.386]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.386]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.386]     }
[16:20:32.386]     ...future.result <- base::tryCatch({
[16:20:32.386]         base::withCallingHandlers({
[16:20:32.386]             ...future.value <- base::withVisible(base::local({
[16:20:32.386]                 1
[16:20:32.386]             }))
[16:20:32.386]             future::FutureResult(value = ...future.value$value, 
[16:20:32.386]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.386]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.386]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.386]                     ...future.globalenv.names))
[16:20:32.386]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.386]         }, condition = base::local({
[16:20:32.386]             c <- base::c
[16:20:32.386]             inherits <- base::inherits
[16:20:32.386]             invokeRestart <- base::invokeRestart
[16:20:32.386]             length <- base::length
[16:20:32.386]             list <- base::list
[16:20:32.386]             seq.int <- base::seq.int
[16:20:32.386]             signalCondition <- base::signalCondition
[16:20:32.386]             sys.calls <- base::sys.calls
[16:20:32.386]             `[[` <- base::`[[`
[16:20:32.386]             `+` <- base::`+`
[16:20:32.386]             `<<-` <- base::`<<-`
[16:20:32.386]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.386]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.386]                   3L)]
[16:20:32.386]             }
[16:20:32.386]             function(cond) {
[16:20:32.386]                 is_error <- inherits(cond, "error")
[16:20:32.386]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.386]                   NULL)
[16:20:32.386]                 if (is_error) {
[16:20:32.386]                   sessionInformation <- function() {
[16:20:32.386]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.386]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.386]                       search = base::search(), system = base::Sys.info())
[16:20:32.386]                   }
[16:20:32.386]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.386]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.386]                     cond$call), session = sessionInformation(), 
[16:20:32.386]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.386]                   signalCondition(cond)
[16:20:32.386]                 }
[16:20:32.386]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.386]                 "immediateCondition"))) {
[16:20:32.386]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.386]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.386]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.386]                   if (TRUE && !signal) {
[16:20:32.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.386]                     {
[16:20:32.386]                       inherits <- base::inherits
[16:20:32.386]                       invokeRestart <- base::invokeRestart
[16:20:32.386]                       is.null <- base::is.null
[16:20:32.386]                       muffled <- FALSE
[16:20:32.386]                       if (inherits(cond, "message")) {
[16:20:32.386]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.386]                         if (muffled) 
[16:20:32.386]                           invokeRestart("muffleMessage")
[16:20:32.386]                       }
[16:20:32.386]                       else if (inherits(cond, "warning")) {
[16:20:32.386]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.386]                         if (muffled) 
[16:20:32.386]                           invokeRestart("muffleWarning")
[16:20:32.386]                       }
[16:20:32.386]                       else if (inherits(cond, "condition")) {
[16:20:32.386]                         if (!is.null(pattern)) {
[16:20:32.386]                           computeRestarts <- base::computeRestarts
[16:20:32.386]                           grepl <- base::grepl
[16:20:32.386]                           restarts <- computeRestarts(cond)
[16:20:32.386]                           for (restart in restarts) {
[16:20:32.386]                             name <- restart$name
[16:20:32.386]                             if (is.null(name)) 
[16:20:32.386]                               next
[16:20:32.386]                             if (!grepl(pattern, name)) 
[16:20:32.386]                               next
[16:20:32.386]                             invokeRestart(restart)
[16:20:32.386]                             muffled <- TRUE
[16:20:32.386]                             break
[16:20:32.386]                           }
[16:20:32.386]                         }
[16:20:32.386]                       }
[16:20:32.386]                       invisible(muffled)
[16:20:32.386]                     }
[16:20:32.386]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.386]                   }
[16:20:32.386]                 }
[16:20:32.386]                 else {
[16:20:32.386]                   if (TRUE) {
[16:20:32.386]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.386]                     {
[16:20:32.386]                       inherits <- base::inherits
[16:20:32.386]                       invokeRestart <- base::invokeRestart
[16:20:32.386]                       is.null <- base::is.null
[16:20:32.386]                       muffled <- FALSE
[16:20:32.386]                       if (inherits(cond, "message")) {
[16:20:32.386]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.386]                         if (muffled) 
[16:20:32.386]                           invokeRestart("muffleMessage")
[16:20:32.386]                       }
[16:20:32.386]                       else if (inherits(cond, "warning")) {
[16:20:32.386]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.386]                         if (muffled) 
[16:20:32.386]                           invokeRestart("muffleWarning")
[16:20:32.386]                       }
[16:20:32.386]                       else if (inherits(cond, "condition")) {
[16:20:32.386]                         if (!is.null(pattern)) {
[16:20:32.386]                           computeRestarts <- base::computeRestarts
[16:20:32.386]                           grepl <- base::grepl
[16:20:32.386]                           restarts <- computeRestarts(cond)
[16:20:32.386]                           for (restart in restarts) {
[16:20:32.386]                             name <- restart$name
[16:20:32.386]                             if (is.null(name)) 
[16:20:32.386]                               next
[16:20:32.386]                             if (!grepl(pattern, name)) 
[16:20:32.386]                               next
[16:20:32.386]                             invokeRestart(restart)
[16:20:32.386]                             muffled <- TRUE
[16:20:32.386]                             break
[16:20:32.386]                           }
[16:20:32.386]                         }
[16:20:32.386]                       }
[16:20:32.386]                       invisible(muffled)
[16:20:32.386]                     }
[16:20:32.386]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.386]                   }
[16:20:32.386]                 }
[16:20:32.386]             }
[16:20:32.386]         }))
[16:20:32.386]     }, error = function(ex) {
[16:20:32.386]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.386]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.386]                 ...future.rng), started = ...future.startTime, 
[16:20:32.386]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.386]             version = "1.8"), class = "FutureResult")
[16:20:32.386]     }, finally = {
[16:20:32.386]         if (!identical(...future.workdir, getwd())) 
[16:20:32.386]             setwd(...future.workdir)
[16:20:32.386]         {
[16:20:32.386]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.386]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.386]             }
[16:20:32.386]             base::options(...future.oldOptions)
[16:20:32.386]             if (.Platform$OS.type == "windows") {
[16:20:32.386]                 old_names <- names(...future.oldEnvVars)
[16:20:32.386]                 envs <- base::Sys.getenv()
[16:20:32.386]                 names <- names(envs)
[16:20:32.386]                 common <- intersect(names, old_names)
[16:20:32.386]                 added <- setdiff(names, old_names)
[16:20:32.386]                 removed <- setdiff(old_names, names)
[16:20:32.386]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.386]                   envs[common]]
[16:20:32.386]                 NAMES <- toupper(changed)
[16:20:32.386]                 args <- list()
[16:20:32.386]                 for (kk in seq_along(NAMES)) {
[16:20:32.386]                   name <- changed[[kk]]
[16:20:32.386]                   NAME <- NAMES[[kk]]
[16:20:32.386]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.386]                     next
[16:20:32.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.386]                 }
[16:20:32.386]                 NAMES <- toupper(added)
[16:20:32.386]                 for (kk in seq_along(NAMES)) {
[16:20:32.386]                   name <- added[[kk]]
[16:20:32.386]                   NAME <- NAMES[[kk]]
[16:20:32.386]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.386]                     next
[16:20:32.386]                   args[[name]] <- ""
[16:20:32.386]                 }
[16:20:32.386]                 NAMES <- toupper(removed)
[16:20:32.386]                 for (kk in seq_along(NAMES)) {
[16:20:32.386]                   name <- removed[[kk]]
[16:20:32.386]                   NAME <- NAMES[[kk]]
[16:20:32.386]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.386]                     next
[16:20:32.386]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.386]                 }
[16:20:32.386]                 if (length(args) > 0) 
[16:20:32.386]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.386]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.386]             }
[16:20:32.386]             else {
[16:20:32.386]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.386]             }
[16:20:32.386]             {
[16:20:32.386]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.386]                   0L) {
[16:20:32.386]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.386]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.386]                   base::options(opts)
[16:20:32.386]                 }
[16:20:32.386]                 {
[16:20:32.386]                   {
[16:20:32.386]                     NULL
[16:20:32.386]                     RNGkind("Mersenne-Twister")
[16:20:32.386]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.386]                       inherits = FALSE)
[16:20:32.386]                   }
[16:20:32.386]                   options(future.plan = NULL)
[16:20:32.386]                   if (is.na(NA_character_)) 
[16:20:32.386]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.386]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.386]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.386]                     .init = FALSE)
[16:20:32.386]                 }
[16:20:32.386]             }
[16:20:32.386]         }
[16:20:32.386]     })
[16:20:32.386]     if (TRUE) {
[16:20:32.386]         base::sink(type = "output", split = FALSE)
[16:20:32.386]         if (TRUE) {
[16:20:32.386]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.386]         }
[16:20:32.386]         else {
[16:20:32.386]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.386]         }
[16:20:32.386]         base::close(...future.stdout)
[16:20:32.386]         ...future.stdout <- NULL
[16:20:32.386]     }
[16:20:32.386]     ...future.result$conditions <- ...future.conditions
[16:20:32.386]     ...future.result$finished <- base::Sys.time()
[16:20:32.386]     ...future.result
[16:20:32.386] }
[16:20:32.388] plan(): Setting new future strategy stack:
[16:20:32.388] List of future strategies:
[16:20:32.388] 1. sequential:
[16:20:32.388]    - args: function (..., envir = parent.frame())
[16:20:32.388]    - tweaked: FALSE
[16:20:32.388]    - call: NULL
[16:20:32.388] plan(): nbrOfWorkers() = 1
[16:20:32.389] plan(): Setting new future strategy stack:
[16:20:32.389] List of future strategies:
[16:20:32.389] 1. sequential:
[16:20:32.389]    - args: function (..., envir = parent.frame())
[16:20:32.389]    - tweaked: FALSE
[16:20:32.389]    - call: future::plan("sequential")
[16:20:32.389] plan(): nbrOfWorkers() = 1
[16:20:32.390] SequentialFuture started (and completed)
[16:20:32.390] - Launch lazy future ... done
[16:20:32.390] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[16:20:32.390] run() for ‘Future’ ...
[16:20:32.390] - state: ‘created’
[16:20:32.390] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.391] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.391] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.391]   - Field: ‘label’
[16:20:32.391]   - Field: ‘local’
[16:20:32.391]   - Field: ‘owner’
[16:20:32.391]   - Field: ‘envir’
[16:20:32.391]   - Field: ‘packages’
[16:20:32.391]   - Field: ‘gc’
[16:20:32.391]   - Field: ‘conditions’
[16:20:32.391]   - Field: ‘expr’
[16:20:32.391]   - Field: ‘uuid’
[16:20:32.392]   - Field: ‘seed’
[16:20:32.392]   - Field: ‘version’
[16:20:32.392]   - Field: ‘result’
[16:20:32.392]   - Field: ‘asynchronous’
[16:20:32.392]   - Field: ‘calls’
[16:20:32.392]   - Field: ‘globals’
[16:20:32.392]   - Field: ‘stdout’
[16:20:32.392]   - Field: ‘earlySignal’
[16:20:32.392]   - Field: ‘lazy’
[16:20:32.392]   - Field: ‘state’
[16:20:32.393] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.393] - Launch lazy future ...
[16:20:32.393] Packages needed by the future expression (n = 0): <none>
[16:20:32.393] Packages needed by future strategies (n = 0): <none>
[16:20:32.393] {
[16:20:32.393]     {
[16:20:32.393]         {
[16:20:32.393]             ...future.startTime <- base::Sys.time()
[16:20:32.393]             {
[16:20:32.393]                 {
[16:20:32.393]                   {
[16:20:32.393]                     base::local({
[16:20:32.393]                       has_future <- base::requireNamespace("future", 
[16:20:32.393]                         quietly = TRUE)
[16:20:32.393]                       if (has_future) {
[16:20:32.393]                         ns <- base::getNamespace("future")
[16:20:32.393]                         version <- ns[[".package"]][["version"]]
[16:20:32.393]                         if (is.null(version)) 
[16:20:32.393]                           version <- utils::packageVersion("future")
[16:20:32.393]                       }
[16:20:32.393]                       else {
[16:20:32.393]                         version <- NULL
[16:20:32.393]                       }
[16:20:32.393]                       if (!has_future || version < "1.8.0") {
[16:20:32.393]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.393]                           "", base::R.version$version.string), 
[16:20:32.393]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.393]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.393]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.393]                             "release", "version")], collapse = " "), 
[16:20:32.393]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.393]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.393]                           info)
[16:20:32.393]                         info <- base::paste(info, collapse = "; ")
[16:20:32.393]                         if (!has_future) {
[16:20:32.393]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.393]                             info)
[16:20:32.393]                         }
[16:20:32.393]                         else {
[16:20:32.393]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.393]                             info, version)
[16:20:32.393]                         }
[16:20:32.393]                         base::stop(msg)
[16:20:32.393]                       }
[16:20:32.393]                     })
[16:20:32.393]                   }
[16:20:32.393]                   ...future.strategy.old <- future::plan("list")
[16:20:32.393]                   options(future.plan = NULL)
[16:20:32.393]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.393]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.393]                 }
[16:20:32.393]                 ...future.workdir <- getwd()
[16:20:32.393]             }
[16:20:32.393]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.393]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.393]         }
[16:20:32.393]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.393]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.393]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.393]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.393]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.393]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.393]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.393]             base::names(...future.oldOptions))
[16:20:32.393]     }
[16:20:32.393]     if (FALSE) {
[16:20:32.393]     }
[16:20:32.393]     else {
[16:20:32.393]         if (TRUE) {
[16:20:32.393]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.393]                 open = "w")
[16:20:32.393]         }
[16:20:32.393]         else {
[16:20:32.393]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.393]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.393]         }
[16:20:32.393]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.393]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.393]             base::sink(type = "output", split = FALSE)
[16:20:32.393]             base::close(...future.stdout)
[16:20:32.393]         }, add = TRUE)
[16:20:32.393]     }
[16:20:32.393]     ...future.frame <- base::sys.nframe()
[16:20:32.393]     ...future.conditions <- base::list()
[16:20:32.393]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.393]     if (FALSE) {
[16:20:32.393]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.393]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.393]     }
[16:20:32.393]     ...future.result <- base::tryCatch({
[16:20:32.393]         base::withCallingHandlers({
[16:20:32.393]             ...future.value <- base::withVisible(base::local({
[16:20:32.393]                 2
[16:20:32.393]             }))
[16:20:32.393]             future::FutureResult(value = ...future.value$value, 
[16:20:32.393]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.393]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.393]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.393]                     ...future.globalenv.names))
[16:20:32.393]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.393]         }, condition = base::local({
[16:20:32.393]             c <- base::c
[16:20:32.393]             inherits <- base::inherits
[16:20:32.393]             invokeRestart <- base::invokeRestart
[16:20:32.393]             length <- base::length
[16:20:32.393]             list <- base::list
[16:20:32.393]             seq.int <- base::seq.int
[16:20:32.393]             signalCondition <- base::signalCondition
[16:20:32.393]             sys.calls <- base::sys.calls
[16:20:32.393]             `[[` <- base::`[[`
[16:20:32.393]             `+` <- base::`+`
[16:20:32.393]             `<<-` <- base::`<<-`
[16:20:32.393]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.393]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.393]                   3L)]
[16:20:32.393]             }
[16:20:32.393]             function(cond) {
[16:20:32.393]                 is_error <- inherits(cond, "error")
[16:20:32.393]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.393]                   NULL)
[16:20:32.393]                 if (is_error) {
[16:20:32.393]                   sessionInformation <- function() {
[16:20:32.393]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.393]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.393]                       search = base::search(), system = base::Sys.info())
[16:20:32.393]                   }
[16:20:32.393]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.393]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.393]                     cond$call), session = sessionInformation(), 
[16:20:32.393]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.393]                   signalCondition(cond)
[16:20:32.393]                 }
[16:20:32.393]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.393]                 "immediateCondition"))) {
[16:20:32.393]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.393]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.393]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.393]                   if (TRUE && !signal) {
[16:20:32.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.393]                     {
[16:20:32.393]                       inherits <- base::inherits
[16:20:32.393]                       invokeRestart <- base::invokeRestart
[16:20:32.393]                       is.null <- base::is.null
[16:20:32.393]                       muffled <- FALSE
[16:20:32.393]                       if (inherits(cond, "message")) {
[16:20:32.393]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.393]                         if (muffled) 
[16:20:32.393]                           invokeRestart("muffleMessage")
[16:20:32.393]                       }
[16:20:32.393]                       else if (inherits(cond, "warning")) {
[16:20:32.393]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.393]                         if (muffled) 
[16:20:32.393]                           invokeRestart("muffleWarning")
[16:20:32.393]                       }
[16:20:32.393]                       else if (inherits(cond, "condition")) {
[16:20:32.393]                         if (!is.null(pattern)) {
[16:20:32.393]                           computeRestarts <- base::computeRestarts
[16:20:32.393]                           grepl <- base::grepl
[16:20:32.393]                           restarts <- computeRestarts(cond)
[16:20:32.393]                           for (restart in restarts) {
[16:20:32.393]                             name <- restart$name
[16:20:32.393]                             if (is.null(name)) 
[16:20:32.393]                               next
[16:20:32.393]                             if (!grepl(pattern, name)) 
[16:20:32.393]                               next
[16:20:32.393]                             invokeRestart(restart)
[16:20:32.393]                             muffled <- TRUE
[16:20:32.393]                             break
[16:20:32.393]                           }
[16:20:32.393]                         }
[16:20:32.393]                       }
[16:20:32.393]                       invisible(muffled)
[16:20:32.393]                     }
[16:20:32.393]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.393]                   }
[16:20:32.393]                 }
[16:20:32.393]                 else {
[16:20:32.393]                   if (TRUE) {
[16:20:32.393]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.393]                     {
[16:20:32.393]                       inherits <- base::inherits
[16:20:32.393]                       invokeRestart <- base::invokeRestart
[16:20:32.393]                       is.null <- base::is.null
[16:20:32.393]                       muffled <- FALSE
[16:20:32.393]                       if (inherits(cond, "message")) {
[16:20:32.393]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.393]                         if (muffled) 
[16:20:32.393]                           invokeRestart("muffleMessage")
[16:20:32.393]                       }
[16:20:32.393]                       else if (inherits(cond, "warning")) {
[16:20:32.393]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.393]                         if (muffled) 
[16:20:32.393]                           invokeRestart("muffleWarning")
[16:20:32.393]                       }
[16:20:32.393]                       else if (inherits(cond, "condition")) {
[16:20:32.393]                         if (!is.null(pattern)) {
[16:20:32.393]                           computeRestarts <- base::computeRestarts
[16:20:32.393]                           grepl <- base::grepl
[16:20:32.393]                           restarts <- computeRestarts(cond)
[16:20:32.393]                           for (restart in restarts) {
[16:20:32.393]                             name <- restart$name
[16:20:32.393]                             if (is.null(name)) 
[16:20:32.393]                               next
[16:20:32.393]                             if (!grepl(pattern, name)) 
[16:20:32.393]                               next
[16:20:32.393]                             invokeRestart(restart)
[16:20:32.393]                             muffled <- TRUE
[16:20:32.393]                             break
[16:20:32.393]                           }
[16:20:32.393]                         }
[16:20:32.393]                       }
[16:20:32.393]                       invisible(muffled)
[16:20:32.393]                     }
[16:20:32.393]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.393]                   }
[16:20:32.393]                 }
[16:20:32.393]             }
[16:20:32.393]         }))
[16:20:32.393]     }, error = function(ex) {
[16:20:32.393]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.393]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.393]                 ...future.rng), started = ...future.startTime, 
[16:20:32.393]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.393]             version = "1.8"), class = "FutureResult")
[16:20:32.393]     }, finally = {
[16:20:32.393]         if (!identical(...future.workdir, getwd())) 
[16:20:32.393]             setwd(...future.workdir)
[16:20:32.393]         {
[16:20:32.393]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.393]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.393]             }
[16:20:32.393]             base::options(...future.oldOptions)
[16:20:32.393]             if (.Platform$OS.type == "windows") {
[16:20:32.393]                 old_names <- names(...future.oldEnvVars)
[16:20:32.393]                 envs <- base::Sys.getenv()
[16:20:32.393]                 names <- names(envs)
[16:20:32.393]                 common <- intersect(names, old_names)
[16:20:32.393]                 added <- setdiff(names, old_names)
[16:20:32.393]                 removed <- setdiff(old_names, names)
[16:20:32.393]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.393]                   envs[common]]
[16:20:32.393]                 NAMES <- toupper(changed)
[16:20:32.393]                 args <- list()
[16:20:32.393]                 for (kk in seq_along(NAMES)) {
[16:20:32.393]                   name <- changed[[kk]]
[16:20:32.393]                   NAME <- NAMES[[kk]]
[16:20:32.393]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.393]                     next
[16:20:32.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.393]                 }
[16:20:32.393]                 NAMES <- toupper(added)
[16:20:32.393]                 for (kk in seq_along(NAMES)) {
[16:20:32.393]                   name <- added[[kk]]
[16:20:32.393]                   NAME <- NAMES[[kk]]
[16:20:32.393]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.393]                     next
[16:20:32.393]                   args[[name]] <- ""
[16:20:32.393]                 }
[16:20:32.393]                 NAMES <- toupper(removed)
[16:20:32.393]                 for (kk in seq_along(NAMES)) {
[16:20:32.393]                   name <- removed[[kk]]
[16:20:32.393]                   NAME <- NAMES[[kk]]
[16:20:32.393]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.393]                     next
[16:20:32.393]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.393]                 }
[16:20:32.393]                 if (length(args) > 0) 
[16:20:32.393]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.393]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.393]             }
[16:20:32.393]             else {
[16:20:32.393]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.393]             }
[16:20:32.393]             {
[16:20:32.393]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.393]                   0L) {
[16:20:32.393]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.393]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.393]                   base::options(opts)
[16:20:32.393]                 }
[16:20:32.393]                 {
[16:20:32.393]                   {
[16:20:32.393]                     NULL
[16:20:32.393]                     RNGkind("Mersenne-Twister")
[16:20:32.393]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.393]                       inherits = FALSE)
[16:20:32.393]                   }
[16:20:32.393]                   options(future.plan = NULL)
[16:20:32.393]                   if (is.na(NA_character_)) 
[16:20:32.393]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.393]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.393]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.393]                     .init = FALSE)
[16:20:32.393]                 }
[16:20:32.393]             }
[16:20:32.393]         }
[16:20:32.393]     })
[16:20:32.393]     if (TRUE) {
[16:20:32.393]         base::sink(type = "output", split = FALSE)
[16:20:32.393]         if (TRUE) {
[16:20:32.393]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.393]         }
[16:20:32.393]         else {
[16:20:32.393]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.393]         }
[16:20:32.393]         base::close(...future.stdout)
[16:20:32.393]         ...future.stdout <- NULL
[16:20:32.393]     }
[16:20:32.393]     ...future.result$conditions <- ...future.conditions
[16:20:32.393]     ...future.result$finished <- base::Sys.time()
[16:20:32.393]     ...future.result
[16:20:32.393] }
[16:20:32.395] plan(): Setting new future strategy stack:
[16:20:32.395] List of future strategies:
[16:20:32.395] 1. sequential:
[16:20:32.395]    - args: function (..., envir = parent.frame())
[16:20:32.395]    - tweaked: FALSE
[16:20:32.395]    - call: NULL
[16:20:32.395] plan(): nbrOfWorkers() = 1
[16:20:32.396] plan(): Setting new future strategy stack:
[16:20:32.396] List of future strategies:
[16:20:32.396] 1. sequential:
[16:20:32.396]    - args: function (..., envir = parent.frame())
[16:20:32.396]    - tweaked: FALSE
[16:20:32.396]    - call: future::plan("sequential")
[16:20:32.397] plan(): nbrOfWorkers() = 1
[16:20:32.397] SequentialFuture started (and completed)
[16:20:32.397] - Launch lazy future ... done
[16:20:32.397] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[16:20:32.403] getGlobalsAndPackages() ...
[16:20:32.403] Searching for globals...
[16:20:32.404] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.405] Searching for globals ... DONE
[16:20:32.405] Resolving globals: FALSE
[16:20:32.405] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.406] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.406] - globals: [2] ‘rr’, ‘cc’
[16:20:32.406] 
[16:20:32.406] getGlobalsAndPackages() ... DONE
[16:20:32.407] getGlobalsAndPackages() ...
[16:20:32.407] Searching for globals...
[16:20:32.407] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.408] Searching for globals ... DONE
[16:20:32.408] Resolving globals: FALSE
[16:20:32.408] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.408] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.408] - globals: [2] ‘rr’, ‘cc’
[16:20:32.409] 
[16:20:32.409] getGlobalsAndPackages() ... DONE
[16:20:32.411] getGlobalsAndPackages() ...
[16:20:32.411] Searching for globals...
[16:20:32.411] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.411] Searching for globals ... DONE
[16:20:32.412] Resolving globals: FALSE
[16:20:32.412] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.412] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.412] - globals: [2] ‘rr’, ‘cc’
[16:20:32.413] 
[16:20:32.413] getGlobalsAndPackages() ... DONE
[16:20:32.413] getGlobalsAndPackages() ...
[16:20:32.413] Searching for globals...
[16:20:32.414] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.414] Searching for globals ... DONE
[16:20:32.414] Resolving globals: FALSE
[16:20:32.414] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.415] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.415] - globals: [2] ‘rr’, ‘cc’
[16:20:32.415] 
[16:20:32.415] getGlobalsAndPackages() ... DONE
[16:20:32.416] getGlobalsAndPackages() ...
[16:20:32.416] Searching for globals...
[16:20:32.416] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.416] Searching for globals ... DONE
[16:20:32.416] Resolving globals: FALSE
[16:20:32.417] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.417] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.417] - globals: [2] ‘rr’, ‘cc’
[16:20:32.417] 
[16:20:32.417] getGlobalsAndPackages() ... DONE
[16:20:32.418] getGlobalsAndPackages() ...
[16:20:32.418] Searching for globals...
[16:20:32.419] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[16:20:32.419] Searching for globals ... DONE
[16:20:32.419] Resolving globals: FALSE
[16:20:32.419] The total size of the 2 globals is 112 bytes (112 bytes)
[16:20:32.420] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (56 bytes of class ‘numeric’) and ‘cc’ (56 bytes of class ‘numeric’)
[16:20:32.420] - globals: [2] ‘rr’, ‘cc’
[16:20:32.420] 
[16:20:32.420] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[16:20:32.420] run() for ‘Future’ ...
[16:20:32.420] - state: ‘created’
[16:20:32.420] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.421] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.421] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.421]   - Field: ‘label’
[16:20:32.421]   - Field: ‘local’
[16:20:32.421]   - Field: ‘owner’
[16:20:32.421]   - Field: ‘envir’
[16:20:32.421]   - Field: ‘packages’
[16:20:32.421]   - Field: ‘gc’
[16:20:32.421]   - Field: ‘conditions’
[16:20:32.421]   - Field: ‘expr’
[16:20:32.422]   - Field: ‘uuid’
[16:20:32.422]   - Field: ‘seed’
[16:20:32.422]   - Field: ‘version’
[16:20:32.422]   - Field: ‘result’
[16:20:32.422]   - Field: ‘asynchronous’
[16:20:32.422]   - Field: ‘calls’
[16:20:32.422]   - Field: ‘globals’
[16:20:32.422]   - Field: ‘stdout’
[16:20:32.422]   - Field: ‘earlySignal’
[16:20:32.422]   - Field: ‘lazy’
[16:20:32.422]   - Field: ‘state’
[16:20:32.423] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.423] - Launch lazy future ...
[16:20:32.423] Packages needed by the future expression (n = 0): <none>
[16:20:32.423] Packages needed by future strategies (n = 0): <none>
[16:20:32.423] {
[16:20:32.423]     {
[16:20:32.423]         {
[16:20:32.423]             ...future.startTime <- base::Sys.time()
[16:20:32.423]             {
[16:20:32.423]                 {
[16:20:32.423]                   {
[16:20:32.423]                     base::local({
[16:20:32.423]                       has_future <- base::requireNamespace("future", 
[16:20:32.423]                         quietly = TRUE)
[16:20:32.423]                       if (has_future) {
[16:20:32.423]                         ns <- base::getNamespace("future")
[16:20:32.423]                         version <- ns[[".package"]][["version"]]
[16:20:32.423]                         if (is.null(version)) 
[16:20:32.423]                           version <- utils::packageVersion("future")
[16:20:32.423]                       }
[16:20:32.423]                       else {
[16:20:32.423]                         version <- NULL
[16:20:32.423]                       }
[16:20:32.423]                       if (!has_future || version < "1.8.0") {
[16:20:32.423]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.423]                           "", base::R.version$version.string), 
[16:20:32.423]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.423]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.423]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.423]                             "release", "version")], collapse = " "), 
[16:20:32.423]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.423]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.423]                           info)
[16:20:32.423]                         info <- base::paste(info, collapse = "; ")
[16:20:32.423]                         if (!has_future) {
[16:20:32.423]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.423]                             info)
[16:20:32.423]                         }
[16:20:32.423]                         else {
[16:20:32.423]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.423]                             info, version)
[16:20:32.423]                         }
[16:20:32.423]                         base::stop(msg)
[16:20:32.423]                       }
[16:20:32.423]                     })
[16:20:32.423]                   }
[16:20:32.423]                   ...future.strategy.old <- future::plan("list")
[16:20:32.423]                   options(future.plan = NULL)
[16:20:32.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.423]                 }
[16:20:32.423]                 ...future.workdir <- getwd()
[16:20:32.423]             }
[16:20:32.423]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.423]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.423]         }
[16:20:32.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.423]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.423]             base::names(...future.oldOptions))
[16:20:32.423]     }
[16:20:32.423]     if (FALSE) {
[16:20:32.423]     }
[16:20:32.423]     else {
[16:20:32.423]         if (TRUE) {
[16:20:32.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.423]                 open = "w")
[16:20:32.423]         }
[16:20:32.423]         else {
[16:20:32.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.423]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.423]         }
[16:20:32.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.423]             base::sink(type = "output", split = FALSE)
[16:20:32.423]             base::close(...future.stdout)
[16:20:32.423]         }, add = TRUE)
[16:20:32.423]     }
[16:20:32.423]     ...future.frame <- base::sys.nframe()
[16:20:32.423]     ...future.conditions <- base::list()
[16:20:32.423]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.423]     if (FALSE) {
[16:20:32.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.423]     }
[16:20:32.423]     ...future.result <- base::tryCatch({
[16:20:32.423]         base::withCallingHandlers({
[16:20:32.423]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.423]                 rr, cc)))
[16:20:32.423]             future::FutureResult(value = ...future.value$value, 
[16:20:32.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.423]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.423]                     ...future.globalenv.names))
[16:20:32.423]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.423]         }, condition = base::local({
[16:20:32.423]             c <- base::c
[16:20:32.423]             inherits <- base::inherits
[16:20:32.423]             invokeRestart <- base::invokeRestart
[16:20:32.423]             length <- base::length
[16:20:32.423]             list <- base::list
[16:20:32.423]             seq.int <- base::seq.int
[16:20:32.423]             signalCondition <- base::signalCondition
[16:20:32.423]             sys.calls <- base::sys.calls
[16:20:32.423]             `[[` <- base::`[[`
[16:20:32.423]             `+` <- base::`+`
[16:20:32.423]             `<<-` <- base::`<<-`
[16:20:32.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.423]                   3L)]
[16:20:32.423]             }
[16:20:32.423]             function(cond) {
[16:20:32.423]                 is_error <- inherits(cond, "error")
[16:20:32.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.423]                   NULL)
[16:20:32.423]                 if (is_error) {
[16:20:32.423]                   sessionInformation <- function() {
[16:20:32.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.423]                       search = base::search(), system = base::Sys.info())
[16:20:32.423]                   }
[16:20:32.423]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.423]                     cond$call), session = sessionInformation(), 
[16:20:32.423]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.423]                   signalCondition(cond)
[16:20:32.423]                 }
[16:20:32.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.423]                 "immediateCondition"))) {
[16:20:32.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.423]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.423]                   if (TRUE && !signal) {
[16:20:32.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.423]                     {
[16:20:32.423]                       inherits <- base::inherits
[16:20:32.423]                       invokeRestart <- base::invokeRestart
[16:20:32.423]                       is.null <- base::is.null
[16:20:32.423]                       muffled <- FALSE
[16:20:32.423]                       if (inherits(cond, "message")) {
[16:20:32.423]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.423]                         if (muffled) 
[16:20:32.423]                           invokeRestart("muffleMessage")
[16:20:32.423]                       }
[16:20:32.423]                       else if (inherits(cond, "warning")) {
[16:20:32.423]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.423]                         if (muffled) 
[16:20:32.423]                           invokeRestart("muffleWarning")
[16:20:32.423]                       }
[16:20:32.423]                       else if (inherits(cond, "condition")) {
[16:20:32.423]                         if (!is.null(pattern)) {
[16:20:32.423]                           computeRestarts <- base::computeRestarts
[16:20:32.423]                           grepl <- base::grepl
[16:20:32.423]                           restarts <- computeRestarts(cond)
[16:20:32.423]                           for (restart in restarts) {
[16:20:32.423]                             name <- restart$name
[16:20:32.423]                             if (is.null(name)) 
[16:20:32.423]                               next
[16:20:32.423]                             if (!grepl(pattern, name)) 
[16:20:32.423]                               next
[16:20:32.423]                             invokeRestart(restart)
[16:20:32.423]                             muffled <- TRUE
[16:20:32.423]                             break
[16:20:32.423]                           }
[16:20:32.423]                         }
[16:20:32.423]                       }
[16:20:32.423]                       invisible(muffled)
[16:20:32.423]                     }
[16:20:32.423]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.423]                   }
[16:20:32.423]                 }
[16:20:32.423]                 else {
[16:20:32.423]                   if (TRUE) {
[16:20:32.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.423]                     {
[16:20:32.423]                       inherits <- base::inherits
[16:20:32.423]                       invokeRestart <- base::invokeRestart
[16:20:32.423]                       is.null <- base::is.null
[16:20:32.423]                       muffled <- FALSE
[16:20:32.423]                       if (inherits(cond, "message")) {
[16:20:32.423]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.423]                         if (muffled) 
[16:20:32.423]                           invokeRestart("muffleMessage")
[16:20:32.423]                       }
[16:20:32.423]                       else if (inherits(cond, "warning")) {
[16:20:32.423]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.423]                         if (muffled) 
[16:20:32.423]                           invokeRestart("muffleWarning")
[16:20:32.423]                       }
[16:20:32.423]                       else if (inherits(cond, "condition")) {
[16:20:32.423]                         if (!is.null(pattern)) {
[16:20:32.423]                           computeRestarts <- base::computeRestarts
[16:20:32.423]                           grepl <- base::grepl
[16:20:32.423]                           restarts <- computeRestarts(cond)
[16:20:32.423]                           for (restart in restarts) {
[16:20:32.423]                             name <- restart$name
[16:20:32.423]                             if (is.null(name)) 
[16:20:32.423]                               next
[16:20:32.423]                             if (!grepl(pattern, name)) 
[16:20:32.423]                               next
[16:20:32.423]                             invokeRestart(restart)
[16:20:32.423]                             muffled <- TRUE
[16:20:32.423]                             break
[16:20:32.423]                           }
[16:20:32.423]                         }
[16:20:32.423]                       }
[16:20:32.423]                       invisible(muffled)
[16:20:32.423]                     }
[16:20:32.423]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.423]                   }
[16:20:32.423]                 }
[16:20:32.423]             }
[16:20:32.423]         }))
[16:20:32.423]     }, error = function(ex) {
[16:20:32.423]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.423]                 ...future.rng), started = ...future.startTime, 
[16:20:32.423]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.423]             version = "1.8"), class = "FutureResult")
[16:20:32.423]     }, finally = {
[16:20:32.423]         if (!identical(...future.workdir, getwd())) 
[16:20:32.423]             setwd(...future.workdir)
[16:20:32.423]         {
[16:20:32.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.423]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.423]             }
[16:20:32.423]             base::options(...future.oldOptions)
[16:20:32.423]             if (.Platform$OS.type == "windows") {
[16:20:32.423]                 old_names <- names(...future.oldEnvVars)
[16:20:32.423]                 envs <- base::Sys.getenv()
[16:20:32.423]                 names <- names(envs)
[16:20:32.423]                 common <- intersect(names, old_names)
[16:20:32.423]                 added <- setdiff(names, old_names)
[16:20:32.423]                 removed <- setdiff(old_names, names)
[16:20:32.423]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.423]                   envs[common]]
[16:20:32.423]                 NAMES <- toupper(changed)
[16:20:32.423]                 args <- list()
[16:20:32.423]                 for (kk in seq_along(NAMES)) {
[16:20:32.423]                   name <- changed[[kk]]
[16:20:32.423]                   NAME <- NAMES[[kk]]
[16:20:32.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.423]                     next
[16:20:32.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.423]                 }
[16:20:32.423]                 NAMES <- toupper(added)
[16:20:32.423]                 for (kk in seq_along(NAMES)) {
[16:20:32.423]                   name <- added[[kk]]
[16:20:32.423]                   NAME <- NAMES[[kk]]
[16:20:32.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.423]                     next
[16:20:32.423]                   args[[name]] <- ""
[16:20:32.423]                 }
[16:20:32.423]                 NAMES <- toupper(removed)
[16:20:32.423]                 for (kk in seq_along(NAMES)) {
[16:20:32.423]                   name <- removed[[kk]]
[16:20:32.423]                   NAME <- NAMES[[kk]]
[16:20:32.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.423]                     next
[16:20:32.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.423]                 }
[16:20:32.423]                 if (length(args) > 0) 
[16:20:32.423]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.423]             }
[16:20:32.423]             else {
[16:20:32.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.423]             }
[16:20:32.423]             {
[16:20:32.423]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.423]                   0L) {
[16:20:32.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.423]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.423]                   base::options(opts)
[16:20:32.423]                 }
[16:20:32.423]                 {
[16:20:32.423]                   {
[16:20:32.423]                     NULL
[16:20:32.423]                     RNGkind("Mersenne-Twister")
[16:20:32.423]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.423]                       inherits = FALSE)
[16:20:32.423]                   }
[16:20:32.423]                   options(future.plan = NULL)
[16:20:32.423]                   if (is.na(NA_character_)) 
[16:20:32.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.423]                     .init = FALSE)
[16:20:32.423]                 }
[16:20:32.423]             }
[16:20:32.423]         }
[16:20:32.423]     })
[16:20:32.423]     if (TRUE) {
[16:20:32.423]         base::sink(type = "output", split = FALSE)
[16:20:32.423]         if (TRUE) {
[16:20:32.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.423]         }
[16:20:32.423]         else {
[16:20:32.423]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.423]         }
[16:20:32.423]         base::close(...future.stdout)
[16:20:32.423]         ...future.stdout <- NULL
[16:20:32.423]     }
[16:20:32.423]     ...future.result$conditions <- ...future.conditions
[16:20:32.423]     ...future.result$finished <- base::Sys.time()
[16:20:32.423]     ...future.result
[16:20:32.423] }
[16:20:32.425] assign_globals() ...
[16:20:32.425] List of 2
[16:20:32.425]  $ rr: int 1
[16:20:32.425]  $ cc: int 1
[16:20:32.425]  - attr(*, "where")=List of 2
[16:20:32.425]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.425]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.425]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.425]  - attr(*, "resolved")= logi FALSE
[16:20:32.425]  - attr(*, "total_size")= num 112
[16:20:32.425]  - attr(*, "already-done")= logi TRUE
[16:20:32.428] - copied ‘rr’ to environment
[16:20:32.428] - copied ‘cc’ to environment
[16:20:32.428] assign_globals() ... done
[16:20:32.428] plan(): Setting new future strategy stack:
[16:20:32.429] List of future strategies:
[16:20:32.429] 1. sequential:
[16:20:32.429]    - args: function (..., envir = parent.frame())
[16:20:32.429]    - tweaked: FALSE
[16:20:32.429]    - call: NULL
[16:20:32.429] plan(): nbrOfWorkers() = 1
[16:20:32.430] plan(): Setting new future strategy stack:
[16:20:32.430] List of future strategies:
[16:20:32.430] 1. sequential:
[16:20:32.430]    - args: function (..., envir = parent.frame())
[16:20:32.430]    - tweaked: FALSE
[16:20:32.430]    - call: future::plan("sequential")
[16:20:32.430] plan(): nbrOfWorkers() = 1
[16:20:32.430] SequentialFuture started (and completed)
[16:20:32.430] - Launch lazy future ... done
[16:20:32.430] run() for ‘SequentialFuture’ ... done
[16:20:32.431] run() for ‘Future’ ...
[16:20:32.431] - state: ‘created’
[16:20:32.431] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.431] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.431] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.431]   - Field: ‘label’
[16:20:32.431]   - Field: ‘local’
[16:20:32.431]   - Field: ‘owner’
[16:20:32.432]   - Field: ‘envir’
[16:20:32.432]   - Field: ‘packages’
[16:20:32.432]   - Field: ‘gc’
[16:20:32.432]   - Field: ‘conditions’
[16:20:32.432]   - Field: ‘expr’
[16:20:32.432]   - Field: ‘uuid’
[16:20:32.432]   - Field: ‘seed’
[16:20:32.432]   - Field: ‘version’
[16:20:32.432]   - Field: ‘result’
[16:20:32.432]   - Field: ‘asynchronous’
[16:20:32.433]   - Field: ‘calls’
[16:20:32.433]   - Field: ‘globals’
[16:20:32.433]   - Field: ‘stdout’
[16:20:32.433]   - Field: ‘earlySignal’
[16:20:32.433]   - Field: ‘lazy’
[16:20:32.433]   - Field: ‘state’
[16:20:32.433] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.433] - Launch lazy future ...
[16:20:32.433] Packages needed by the future expression (n = 0): <none>
[16:20:32.433] Packages needed by future strategies (n = 0): <none>
[16:20:32.434] {
[16:20:32.434]     {
[16:20:32.434]         {
[16:20:32.434]             ...future.startTime <- base::Sys.time()
[16:20:32.434]             {
[16:20:32.434]                 {
[16:20:32.434]                   {
[16:20:32.434]                     base::local({
[16:20:32.434]                       has_future <- base::requireNamespace("future", 
[16:20:32.434]                         quietly = TRUE)
[16:20:32.434]                       if (has_future) {
[16:20:32.434]                         ns <- base::getNamespace("future")
[16:20:32.434]                         version <- ns[[".package"]][["version"]]
[16:20:32.434]                         if (is.null(version)) 
[16:20:32.434]                           version <- utils::packageVersion("future")
[16:20:32.434]                       }
[16:20:32.434]                       else {
[16:20:32.434]                         version <- NULL
[16:20:32.434]                       }
[16:20:32.434]                       if (!has_future || version < "1.8.0") {
[16:20:32.434]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.434]                           "", base::R.version$version.string), 
[16:20:32.434]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.434]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.434]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.434]                             "release", "version")], collapse = " "), 
[16:20:32.434]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.434]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.434]                           info)
[16:20:32.434]                         info <- base::paste(info, collapse = "; ")
[16:20:32.434]                         if (!has_future) {
[16:20:32.434]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.434]                             info)
[16:20:32.434]                         }
[16:20:32.434]                         else {
[16:20:32.434]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.434]                             info, version)
[16:20:32.434]                         }
[16:20:32.434]                         base::stop(msg)
[16:20:32.434]                       }
[16:20:32.434]                     })
[16:20:32.434]                   }
[16:20:32.434]                   ...future.strategy.old <- future::plan("list")
[16:20:32.434]                   options(future.plan = NULL)
[16:20:32.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.434]                 }
[16:20:32.434]                 ...future.workdir <- getwd()
[16:20:32.434]             }
[16:20:32.434]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.434]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.434]         }
[16:20:32.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.434]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.434]             base::names(...future.oldOptions))
[16:20:32.434]     }
[16:20:32.434]     if (FALSE) {
[16:20:32.434]     }
[16:20:32.434]     else {
[16:20:32.434]         if (TRUE) {
[16:20:32.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.434]                 open = "w")
[16:20:32.434]         }
[16:20:32.434]         else {
[16:20:32.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.434]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.434]         }
[16:20:32.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.434]             base::sink(type = "output", split = FALSE)
[16:20:32.434]             base::close(...future.stdout)
[16:20:32.434]         }, add = TRUE)
[16:20:32.434]     }
[16:20:32.434]     ...future.frame <- base::sys.nframe()
[16:20:32.434]     ...future.conditions <- base::list()
[16:20:32.434]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.434]     if (FALSE) {
[16:20:32.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.434]     }
[16:20:32.434]     ...future.result <- base::tryCatch({
[16:20:32.434]         base::withCallingHandlers({
[16:20:32.434]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.434]                 rr, cc)))
[16:20:32.434]             future::FutureResult(value = ...future.value$value, 
[16:20:32.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.434]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.434]                     ...future.globalenv.names))
[16:20:32.434]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.434]         }, condition = base::local({
[16:20:32.434]             c <- base::c
[16:20:32.434]             inherits <- base::inherits
[16:20:32.434]             invokeRestart <- base::invokeRestart
[16:20:32.434]             length <- base::length
[16:20:32.434]             list <- base::list
[16:20:32.434]             seq.int <- base::seq.int
[16:20:32.434]             signalCondition <- base::signalCondition
[16:20:32.434]             sys.calls <- base::sys.calls
[16:20:32.434]             `[[` <- base::`[[`
[16:20:32.434]             `+` <- base::`+`
[16:20:32.434]             `<<-` <- base::`<<-`
[16:20:32.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.434]                   3L)]
[16:20:32.434]             }
[16:20:32.434]             function(cond) {
[16:20:32.434]                 is_error <- inherits(cond, "error")
[16:20:32.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.434]                   NULL)
[16:20:32.434]                 if (is_error) {
[16:20:32.434]                   sessionInformation <- function() {
[16:20:32.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.434]                       search = base::search(), system = base::Sys.info())
[16:20:32.434]                   }
[16:20:32.434]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.434]                     cond$call), session = sessionInformation(), 
[16:20:32.434]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.434]                   signalCondition(cond)
[16:20:32.434]                 }
[16:20:32.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.434]                 "immediateCondition"))) {
[16:20:32.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.434]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.434]                   if (TRUE && !signal) {
[16:20:32.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.434]                     {
[16:20:32.434]                       inherits <- base::inherits
[16:20:32.434]                       invokeRestart <- base::invokeRestart
[16:20:32.434]                       is.null <- base::is.null
[16:20:32.434]                       muffled <- FALSE
[16:20:32.434]                       if (inherits(cond, "message")) {
[16:20:32.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.434]                         if (muffled) 
[16:20:32.434]                           invokeRestart("muffleMessage")
[16:20:32.434]                       }
[16:20:32.434]                       else if (inherits(cond, "warning")) {
[16:20:32.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.434]                         if (muffled) 
[16:20:32.434]                           invokeRestart("muffleWarning")
[16:20:32.434]                       }
[16:20:32.434]                       else if (inherits(cond, "condition")) {
[16:20:32.434]                         if (!is.null(pattern)) {
[16:20:32.434]                           computeRestarts <- base::computeRestarts
[16:20:32.434]                           grepl <- base::grepl
[16:20:32.434]                           restarts <- computeRestarts(cond)
[16:20:32.434]                           for (restart in restarts) {
[16:20:32.434]                             name <- restart$name
[16:20:32.434]                             if (is.null(name)) 
[16:20:32.434]                               next
[16:20:32.434]                             if (!grepl(pattern, name)) 
[16:20:32.434]                               next
[16:20:32.434]                             invokeRestart(restart)
[16:20:32.434]                             muffled <- TRUE
[16:20:32.434]                             break
[16:20:32.434]                           }
[16:20:32.434]                         }
[16:20:32.434]                       }
[16:20:32.434]                       invisible(muffled)
[16:20:32.434]                     }
[16:20:32.434]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.434]                   }
[16:20:32.434]                 }
[16:20:32.434]                 else {
[16:20:32.434]                   if (TRUE) {
[16:20:32.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.434]                     {
[16:20:32.434]                       inherits <- base::inherits
[16:20:32.434]                       invokeRestart <- base::invokeRestart
[16:20:32.434]                       is.null <- base::is.null
[16:20:32.434]                       muffled <- FALSE
[16:20:32.434]                       if (inherits(cond, "message")) {
[16:20:32.434]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.434]                         if (muffled) 
[16:20:32.434]                           invokeRestart("muffleMessage")
[16:20:32.434]                       }
[16:20:32.434]                       else if (inherits(cond, "warning")) {
[16:20:32.434]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.434]                         if (muffled) 
[16:20:32.434]                           invokeRestart("muffleWarning")
[16:20:32.434]                       }
[16:20:32.434]                       else if (inherits(cond, "condition")) {
[16:20:32.434]                         if (!is.null(pattern)) {
[16:20:32.434]                           computeRestarts <- base::computeRestarts
[16:20:32.434]                           grepl <- base::grepl
[16:20:32.434]                           restarts <- computeRestarts(cond)
[16:20:32.434]                           for (restart in restarts) {
[16:20:32.434]                             name <- restart$name
[16:20:32.434]                             if (is.null(name)) 
[16:20:32.434]                               next
[16:20:32.434]                             if (!grepl(pattern, name)) 
[16:20:32.434]                               next
[16:20:32.434]                             invokeRestart(restart)
[16:20:32.434]                             muffled <- TRUE
[16:20:32.434]                             break
[16:20:32.434]                           }
[16:20:32.434]                         }
[16:20:32.434]                       }
[16:20:32.434]                       invisible(muffled)
[16:20:32.434]                     }
[16:20:32.434]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.434]                   }
[16:20:32.434]                 }
[16:20:32.434]             }
[16:20:32.434]         }))
[16:20:32.434]     }, error = function(ex) {
[16:20:32.434]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.434]                 ...future.rng), started = ...future.startTime, 
[16:20:32.434]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.434]             version = "1.8"), class = "FutureResult")
[16:20:32.434]     }, finally = {
[16:20:32.434]         if (!identical(...future.workdir, getwd())) 
[16:20:32.434]             setwd(...future.workdir)
[16:20:32.434]         {
[16:20:32.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.434]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.434]             }
[16:20:32.434]             base::options(...future.oldOptions)
[16:20:32.434]             if (.Platform$OS.type == "windows") {
[16:20:32.434]                 old_names <- names(...future.oldEnvVars)
[16:20:32.434]                 envs <- base::Sys.getenv()
[16:20:32.434]                 names <- names(envs)
[16:20:32.434]                 common <- intersect(names, old_names)
[16:20:32.434]                 added <- setdiff(names, old_names)
[16:20:32.434]                 removed <- setdiff(old_names, names)
[16:20:32.434]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.434]                   envs[common]]
[16:20:32.434]                 NAMES <- toupper(changed)
[16:20:32.434]                 args <- list()
[16:20:32.434]                 for (kk in seq_along(NAMES)) {
[16:20:32.434]                   name <- changed[[kk]]
[16:20:32.434]                   NAME <- NAMES[[kk]]
[16:20:32.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.434]                     next
[16:20:32.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.434]                 }
[16:20:32.434]                 NAMES <- toupper(added)
[16:20:32.434]                 for (kk in seq_along(NAMES)) {
[16:20:32.434]                   name <- added[[kk]]
[16:20:32.434]                   NAME <- NAMES[[kk]]
[16:20:32.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.434]                     next
[16:20:32.434]                   args[[name]] <- ""
[16:20:32.434]                 }
[16:20:32.434]                 NAMES <- toupper(removed)
[16:20:32.434]                 for (kk in seq_along(NAMES)) {
[16:20:32.434]                   name <- removed[[kk]]
[16:20:32.434]                   NAME <- NAMES[[kk]]
[16:20:32.434]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.434]                     next
[16:20:32.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.434]                 }
[16:20:32.434]                 if (length(args) > 0) 
[16:20:32.434]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.434]             }
[16:20:32.434]             else {
[16:20:32.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.434]             }
[16:20:32.434]             {
[16:20:32.434]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.434]                   0L) {
[16:20:32.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.434]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.434]                   base::options(opts)
[16:20:32.434]                 }
[16:20:32.434]                 {
[16:20:32.434]                   {
[16:20:32.434]                     NULL
[16:20:32.434]                     RNGkind("Mersenne-Twister")
[16:20:32.434]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.434]                       inherits = FALSE)
[16:20:32.434]                   }
[16:20:32.434]                   options(future.plan = NULL)
[16:20:32.434]                   if (is.na(NA_character_)) 
[16:20:32.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.434]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.434]                     .init = FALSE)
[16:20:32.434]                 }
[16:20:32.434]             }
[16:20:32.434]         }
[16:20:32.434]     })
[16:20:32.434]     if (TRUE) {
[16:20:32.434]         base::sink(type = "output", split = FALSE)
[16:20:32.434]         if (TRUE) {
[16:20:32.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.434]         }
[16:20:32.434]         else {
[16:20:32.434]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.434]         }
[16:20:32.434]         base::close(...future.stdout)
[16:20:32.434]         ...future.stdout <- NULL
[16:20:32.434]     }
[16:20:32.434]     ...future.result$conditions <- ...future.conditions
[16:20:32.434]     ...future.result$finished <- base::Sys.time()
[16:20:32.434]     ...future.result
[16:20:32.434] }
[16:20:32.435] assign_globals() ...
[16:20:32.435] List of 2
[16:20:32.435]  $ rr: int 2
[16:20:32.435]  $ cc: int 1
[16:20:32.435]  - attr(*, "where")=List of 2
[16:20:32.435]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.435]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.435]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.435]  - attr(*, "resolved")= logi FALSE
[16:20:32.435]  - attr(*, "total_size")= num 112
[16:20:32.435]  - attr(*, "already-done")= logi TRUE
[16:20:32.440] - copied ‘rr’ to environment
[16:20:32.440] - copied ‘cc’ to environment
[16:20:32.440] assign_globals() ... done
[16:20:32.440] plan(): Setting new future strategy stack:
[16:20:32.440] List of future strategies:
[16:20:32.440] 1. sequential:
[16:20:32.440]    - args: function (..., envir = parent.frame())
[16:20:32.440]    - tweaked: FALSE
[16:20:32.440]    - call: NULL
[16:20:32.440] plan(): nbrOfWorkers() = 1
[16:20:32.441] plan(): Setting new future strategy stack:
[16:20:32.441] List of future strategies:
[16:20:32.441] 1. sequential:
[16:20:32.441]    - args: function (..., envir = parent.frame())
[16:20:32.441]    - tweaked: FALSE
[16:20:32.441]    - call: future::plan("sequential")
[16:20:32.442] plan(): nbrOfWorkers() = 1
[16:20:32.442] SequentialFuture started (and completed)
[16:20:32.442] - Launch lazy future ... done
[16:20:32.442] run() for ‘SequentialFuture’ ... done
[16:20:32.442] run() for ‘Future’ ...
[16:20:32.442] - state: ‘created’
[16:20:32.442] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.443] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.443] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.443]   - Field: ‘label’
[16:20:32.443]   - Field: ‘local’
[16:20:32.443]   - Field: ‘owner’
[16:20:32.443]   - Field: ‘envir’
[16:20:32.443]   - Field: ‘packages’
[16:20:32.443]   - Field: ‘gc’
[16:20:32.443]   - Field: ‘conditions’
[16:20:32.443]   - Field: ‘expr’
[16:20:32.444]   - Field: ‘uuid’
[16:20:32.444]   - Field: ‘seed’
[16:20:32.444]   - Field: ‘version’
[16:20:32.444]   - Field: ‘result’
[16:20:32.444]   - Field: ‘asynchronous’
[16:20:32.444]   - Field: ‘calls’
[16:20:32.444]   - Field: ‘globals’
[16:20:32.444]   - Field: ‘stdout’
[16:20:32.444]   - Field: ‘earlySignal’
[16:20:32.444]   - Field: ‘lazy’
[16:20:32.444]   - Field: ‘state’
[16:20:32.445] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.445] - Launch lazy future ...
[16:20:32.445] Packages needed by the future expression (n = 0): <none>
[16:20:32.445] Packages needed by future strategies (n = 0): <none>
[16:20:32.445] {
[16:20:32.445]     {
[16:20:32.445]         {
[16:20:32.445]             ...future.startTime <- base::Sys.time()
[16:20:32.445]             {
[16:20:32.445]                 {
[16:20:32.445]                   {
[16:20:32.445]                     base::local({
[16:20:32.445]                       has_future <- base::requireNamespace("future", 
[16:20:32.445]                         quietly = TRUE)
[16:20:32.445]                       if (has_future) {
[16:20:32.445]                         ns <- base::getNamespace("future")
[16:20:32.445]                         version <- ns[[".package"]][["version"]]
[16:20:32.445]                         if (is.null(version)) 
[16:20:32.445]                           version <- utils::packageVersion("future")
[16:20:32.445]                       }
[16:20:32.445]                       else {
[16:20:32.445]                         version <- NULL
[16:20:32.445]                       }
[16:20:32.445]                       if (!has_future || version < "1.8.0") {
[16:20:32.445]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.445]                           "", base::R.version$version.string), 
[16:20:32.445]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.445]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.445]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.445]                             "release", "version")], collapse = " "), 
[16:20:32.445]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.445]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.445]                           info)
[16:20:32.445]                         info <- base::paste(info, collapse = "; ")
[16:20:32.445]                         if (!has_future) {
[16:20:32.445]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.445]                             info)
[16:20:32.445]                         }
[16:20:32.445]                         else {
[16:20:32.445]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.445]                             info, version)
[16:20:32.445]                         }
[16:20:32.445]                         base::stop(msg)
[16:20:32.445]                       }
[16:20:32.445]                     })
[16:20:32.445]                   }
[16:20:32.445]                   ...future.strategy.old <- future::plan("list")
[16:20:32.445]                   options(future.plan = NULL)
[16:20:32.445]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.445]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.445]                 }
[16:20:32.445]                 ...future.workdir <- getwd()
[16:20:32.445]             }
[16:20:32.445]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.445]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.445]         }
[16:20:32.445]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.445]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.445]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.445]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.445]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.445]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.445]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.445]             base::names(...future.oldOptions))
[16:20:32.445]     }
[16:20:32.445]     if (FALSE) {
[16:20:32.445]     }
[16:20:32.445]     else {
[16:20:32.445]         if (TRUE) {
[16:20:32.445]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.445]                 open = "w")
[16:20:32.445]         }
[16:20:32.445]         else {
[16:20:32.445]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.445]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.445]         }
[16:20:32.445]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.445]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.445]             base::sink(type = "output", split = FALSE)
[16:20:32.445]             base::close(...future.stdout)
[16:20:32.445]         }, add = TRUE)
[16:20:32.445]     }
[16:20:32.445]     ...future.frame <- base::sys.nframe()
[16:20:32.445]     ...future.conditions <- base::list()
[16:20:32.445]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.445]     if (FALSE) {
[16:20:32.445]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.445]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.445]     }
[16:20:32.445]     ...future.result <- base::tryCatch({
[16:20:32.445]         base::withCallingHandlers({
[16:20:32.445]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.445]                 rr, cc)))
[16:20:32.445]             future::FutureResult(value = ...future.value$value, 
[16:20:32.445]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.445]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.445]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.445]                     ...future.globalenv.names))
[16:20:32.445]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.445]         }, condition = base::local({
[16:20:32.445]             c <- base::c
[16:20:32.445]             inherits <- base::inherits
[16:20:32.445]             invokeRestart <- base::invokeRestart
[16:20:32.445]             length <- base::length
[16:20:32.445]             list <- base::list
[16:20:32.445]             seq.int <- base::seq.int
[16:20:32.445]             signalCondition <- base::signalCondition
[16:20:32.445]             sys.calls <- base::sys.calls
[16:20:32.445]             `[[` <- base::`[[`
[16:20:32.445]             `+` <- base::`+`
[16:20:32.445]             `<<-` <- base::`<<-`
[16:20:32.445]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.445]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.445]                   3L)]
[16:20:32.445]             }
[16:20:32.445]             function(cond) {
[16:20:32.445]                 is_error <- inherits(cond, "error")
[16:20:32.445]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.445]                   NULL)
[16:20:32.445]                 if (is_error) {
[16:20:32.445]                   sessionInformation <- function() {
[16:20:32.445]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.445]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.445]                       search = base::search(), system = base::Sys.info())
[16:20:32.445]                   }
[16:20:32.445]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.445]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.445]                     cond$call), session = sessionInformation(), 
[16:20:32.445]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.445]                   signalCondition(cond)
[16:20:32.445]                 }
[16:20:32.445]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.445]                 "immediateCondition"))) {
[16:20:32.445]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.445]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.445]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.445]                   if (TRUE && !signal) {
[16:20:32.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.445]                     {
[16:20:32.445]                       inherits <- base::inherits
[16:20:32.445]                       invokeRestart <- base::invokeRestart
[16:20:32.445]                       is.null <- base::is.null
[16:20:32.445]                       muffled <- FALSE
[16:20:32.445]                       if (inherits(cond, "message")) {
[16:20:32.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.445]                         if (muffled) 
[16:20:32.445]                           invokeRestart("muffleMessage")
[16:20:32.445]                       }
[16:20:32.445]                       else if (inherits(cond, "warning")) {
[16:20:32.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.445]                         if (muffled) 
[16:20:32.445]                           invokeRestart("muffleWarning")
[16:20:32.445]                       }
[16:20:32.445]                       else if (inherits(cond, "condition")) {
[16:20:32.445]                         if (!is.null(pattern)) {
[16:20:32.445]                           computeRestarts <- base::computeRestarts
[16:20:32.445]                           grepl <- base::grepl
[16:20:32.445]                           restarts <- computeRestarts(cond)
[16:20:32.445]                           for (restart in restarts) {
[16:20:32.445]                             name <- restart$name
[16:20:32.445]                             if (is.null(name)) 
[16:20:32.445]                               next
[16:20:32.445]                             if (!grepl(pattern, name)) 
[16:20:32.445]                               next
[16:20:32.445]                             invokeRestart(restart)
[16:20:32.445]                             muffled <- TRUE
[16:20:32.445]                             break
[16:20:32.445]                           }
[16:20:32.445]                         }
[16:20:32.445]                       }
[16:20:32.445]                       invisible(muffled)
[16:20:32.445]                     }
[16:20:32.445]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.445]                   }
[16:20:32.445]                 }
[16:20:32.445]                 else {
[16:20:32.445]                   if (TRUE) {
[16:20:32.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.445]                     {
[16:20:32.445]                       inherits <- base::inherits
[16:20:32.445]                       invokeRestart <- base::invokeRestart
[16:20:32.445]                       is.null <- base::is.null
[16:20:32.445]                       muffled <- FALSE
[16:20:32.445]                       if (inherits(cond, "message")) {
[16:20:32.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.445]                         if (muffled) 
[16:20:32.445]                           invokeRestart("muffleMessage")
[16:20:32.445]                       }
[16:20:32.445]                       else if (inherits(cond, "warning")) {
[16:20:32.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.445]                         if (muffled) 
[16:20:32.445]                           invokeRestart("muffleWarning")
[16:20:32.445]                       }
[16:20:32.445]                       else if (inherits(cond, "condition")) {
[16:20:32.445]                         if (!is.null(pattern)) {
[16:20:32.445]                           computeRestarts <- base::computeRestarts
[16:20:32.445]                           grepl <- base::grepl
[16:20:32.445]                           restarts <- computeRestarts(cond)
[16:20:32.445]                           for (restart in restarts) {
[16:20:32.445]                             name <- restart$name
[16:20:32.445]                             if (is.null(name)) 
[16:20:32.445]                               next
[16:20:32.445]                             if (!grepl(pattern, name)) 
[16:20:32.445]                               next
[16:20:32.445]                             invokeRestart(restart)
[16:20:32.445]                             muffled <- TRUE
[16:20:32.445]                             break
[16:20:32.445]                           }
[16:20:32.445]                         }
[16:20:32.445]                       }
[16:20:32.445]                       invisible(muffled)
[16:20:32.445]                     }
[16:20:32.445]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.445]                   }
[16:20:32.445]                 }
[16:20:32.445]             }
[16:20:32.445]         }))
[16:20:32.445]     }, error = function(ex) {
[16:20:32.445]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.445]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.445]                 ...future.rng), started = ...future.startTime, 
[16:20:32.445]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.445]             version = "1.8"), class = "FutureResult")
[16:20:32.445]     }, finally = {
[16:20:32.445]         if (!identical(...future.workdir, getwd())) 
[16:20:32.445]             setwd(...future.workdir)
[16:20:32.445]         {
[16:20:32.445]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.445]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.445]             }
[16:20:32.445]             base::options(...future.oldOptions)
[16:20:32.445]             if (.Platform$OS.type == "windows") {
[16:20:32.445]                 old_names <- names(...future.oldEnvVars)
[16:20:32.445]                 envs <- base::Sys.getenv()
[16:20:32.445]                 names <- names(envs)
[16:20:32.445]                 common <- intersect(names, old_names)
[16:20:32.445]                 added <- setdiff(names, old_names)
[16:20:32.445]                 removed <- setdiff(old_names, names)
[16:20:32.445]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.445]                   envs[common]]
[16:20:32.445]                 NAMES <- toupper(changed)
[16:20:32.445]                 args <- list()
[16:20:32.445]                 for (kk in seq_along(NAMES)) {
[16:20:32.445]                   name <- changed[[kk]]
[16:20:32.445]                   NAME <- NAMES[[kk]]
[16:20:32.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.445]                     next
[16:20:32.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.445]                 }
[16:20:32.445]                 NAMES <- toupper(added)
[16:20:32.445]                 for (kk in seq_along(NAMES)) {
[16:20:32.445]                   name <- added[[kk]]
[16:20:32.445]                   NAME <- NAMES[[kk]]
[16:20:32.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.445]                     next
[16:20:32.445]                   args[[name]] <- ""
[16:20:32.445]                 }
[16:20:32.445]                 NAMES <- toupper(removed)
[16:20:32.445]                 for (kk in seq_along(NAMES)) {
[16:20:32.445]                   name <- removed[[kk]]
[16:20:32.445]                   NAME <- NAMES[[kk]]
[16:20:32.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.445]                     next
[16:20:32.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.445]                 }
[16:20:32.445]                 if (length(args) > 0) 
[16:20:32.445]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.445]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.445]             }
[16:20:32.445]             else {
[16:20:32.445]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.445]             }
[16:20:32.445]             {
[16:20:32.445]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.445]                   0L) {
[16:20:32.445]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.445]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.445]                   base::options(opts)
[16:20:32.445]                 }
[16:20:32.445]                 {
[16:20:32.445]                   {
[16:20:32.445]                     NULL
[16:20:32.445]                     RNGkind("Mersenne-Twister")
[16:20:32.445]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.445]                       inherits = FALSE)
[16:20:32.445]                   }
[16:20:32.445]                   options(future.plan = NULL)
[16:20:32.445]                   if (is.na(NA_character_)) 
[16:20:32.445]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.445]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.445]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.445]                     .init = FALSE)
[16:20:32.445]                 }
[16:20:32.445]             }
[16:20:32.445]         }
[16:20:32.445]     })
[16:20:32.445]     if (TRUE) {
[16:20:32.445]         base::sink(type = "output", split = FALSE)
[16:20:32.445]         if (TRUE) {
[16:20:32.445]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.445]         }
[16:20:32.445]         else {
[16:20:32.445]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.445]         }
[16:20:32.445]         base::close(...future.stdout)
[16:20:32.445]         ...future.stdout <- NULL
[16:20:32.445]     }
[16:20:32.445]     ...future.result$conditions <- ...future.conditions
[16:20:32.445]     ...future.result$finished <- base::Sys.time()
[16:20:32.445]     ...future.result
[16:20:32.445] }
[16:20:32.447] assign_globals() ...
[16:20:32.447] List of 2
[16:20:32.447]  $ rr: int 3
[16:20:32.447]  $ cc: int 1
[16:20:32.447]  - attr(*, "where")=List of 2
[16:20:32.447]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.447]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.447]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.447]  - attr(*, "resolved")= logi FALSE
[16:20:32.447]  - attr(*, "total_size")= num 112
[16:20:32.447]  - attr(*, "already-done")= logi TRUE
[16:20:32.450] - copied ‘rr’ to environment
[16:20:32.450] - copied ‘cc’ to environment
[16:20:32.450] assign_globals() ... done
[16:20:32.450] plan(): Setting new future strategy stack:
[16:20:32.450] List of future strategies:
[16:20:32.450] 1. sequential:
[16:20:32.450]    - args: function (..., envir = parent.frame())
[16:20:32.450]    - tweaked: FALSE
[16:20:32.450]    - call: NULL
[16:20:32.451] plan(): nbrOfWorkers() = 1
[16:20:32.451] plan(): Setting new future strategy stack:
[16:20:32.451] List of future strategies:
[16:20:32.451] 1. sequential:
[16:20:32.451]    - args: function (..., envir = parent.frame())
[16:20:32.451]    - tweaked: FALSE
[16:20:32.451]    - call: future::plan("sequential")
[16:20:32.452] plan(): nbrOfWorkers() = 1
[16:20:32.452] SequentialFuture started (and completed)
[16:20:32.452] - Launch lazy future ... done
[16:20:32.452] run() for ‘SequentialFuture’ ... done
[16:20:32.452] run() for ‘Future’ ...
[16:20:32.452] - state: ‘created’
[16:20:32.452] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.453] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.453] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.453]   - Field: ‘label’
[16:20:32.453]   - Field: ‘local’
[16:20:32.453]   - Field: ‘owner’
[16:20:32.453]   - Field: ‘envir’
[16:20:32.453]   - Field: ‘packages’
[16:20:32.453]   - Field: ‘gc’
[16:20:32.453]   - Field: ‘conditions’
[16:20:32.454]   - Field: ‘expr’
[16:20:32.454]   - Field: ‘uuid’
[16:20:32.454]   - Field: ‘seed’
[16:20:32.454]   - Field: ‘version’
[16:20:32.454]   - Field: ‘result’
[16:20:32.454]   - Field: ‘asynchronous’
[16:20:32.454]   - Field: ‘calls’
[16:20:32.454]   - Field: ‘globals’
[16:20:32.454]   - Field: ‘stdout’
[16:20:32.454]   - Field: ‘earlySignal’
[16:20:32.454]   - Field: ‘lazy’
[16:20:32.455]   - Field: ‘state’
[16:20:32.455] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.455] - Launch lazy future ...
[16:20:32.455] Packages needed by the future expression (n = 0): <none>
[16:20:32.455] Packages needed by future strategies (n = 0): <none>
[16:20:32.455] {
[16:20:32.455]     {
[16:20:32.455]         {
[16:20:32.455]             ...future.startTime <- base::Sys.time()
[16:20:32.455]             {
[16:20:32.455]                 {
[16:20:32.455]                   {
[16:20:32.455]                     base::local({
[16:20:32.455]                       has_future <- base::requireNamespace("future", 
[16:20:32.455]                         quietly = TRUE)
[16:20:32.455]                       if (has_future) {
[16:20:32.455]                         ns <- base::getNamespace("future")
[16:20:32.455]                         version <- ns[[".package"]][["version"]]
[16:20:32.455]                         if (is.null(version)) 
[16:20:32.455]                           version <- utils::packageVersion("future")
[16:20:32.455]                       }
[16:20:32.455]                       else {
[16:20:32.455]                         version <- NULL
[16:20:32.455]                       }
[16:20:32.455]                       if (!has_future || version < "1.8.0") {
[16:20:32.455]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.455]                           "", base::R.version$version.string), 
[16:20:32.455]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.455]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.455]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.455]                             "release", "version")], collapse = " "), 
[16:20:32.455]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.455]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.455]                           info)
[16:20:32.455]                         info <- base::paste(info, collapse = "; ")
[16:20:32.455]                         if (!has_future) {
[16:20:32.455]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.455]                             info)
[16:20:32.455]                         }
[16:20:32.455]                         else {
[16:20:32.455]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.455]                             info, version)
[16:20:32.455]                         }
[16:20:32.455]                         base::stop(msg)
[16:20:32.455]                       }
[16:20:32.455]                     })
[16:20:32.455]                   }
[16:20:32.455]                   ...future.strategy.old <- future::plan("list")
[16:20:32.455]                   options(future.plan = NULL)
[16:20:32.455]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.455]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.455]                 }
[16:20:32.455]                 ...future.workdir <- getwd()
[16:20:32.455]             }
[16:20:32.455]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.455]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.455]         }
[16:20:32.455]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.455]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.455]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.455]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.455]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.455]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.455]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.455]             base::names(...future.oldOptions))
[16:20:32.455]     }
[16:20:32.455]     if (FALSE) {
[16:20:32.455]     }
[16:20:32.455]     else {
[16:20:32.455]         if (TRUE) {
[16:20:32.455]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.455]                 open = "w")
[16:20:32.455]         }
[16:20:32.455]         else {
[16:20:32.455]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.455]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.455]         }
[16:20:32.455]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.455]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.455]             base::sink(type = "output", split = FALSE)
[16:20:32.455]             base::close(...future.stdout)
[16:20:32.455]         }, add = TRUE)
[16:20:32.455]     }
[16:20:32.455]     ...future.frame <- base::sys.nframe()
[16:20:32.455]     ...future.conditions <- base::list()
[16:20:32.455]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.455]     if (FALSE) {
[16:20:32.455]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.455]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.455]     }
[16:20:32.455]     ...future.result <- base::tryCatch({
[16:20:32.455]         base::withCallingHandlers({
[16:20:32.455]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.455]                 rr, cc)))
[16:20:32.455]             future::FutureResult(value = ...future.value$value, 
[16:20:32.455]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.455]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.455]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.455]                     ...future.globalenv.names))
[16:20:32.455]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.455]         }, condition = base::local({
[16:20:32.455]             c <- base::c
[16:20:32.455]             inherits <- base::inherits
[16:20:32.455]             invokeRestart <- base::invokeRestart
[16:20:32.455]             length <- base::length
[16:20:32.455]             list <- base::list
[16:20:32.455]             seq.int <- base::seq.int
[16:20:32.455]             signalCondition <- base::signalCondition
[16:20:32.455]             sys.calls <- base::sys.calls
[16:20:32.455]             `[[` <- base::`[[`
[16:20:32.455]             `+` <- base::`+`
[16:20:32.455]             `<<-` <- base::`<<-`
[16:20:32.455]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.455]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.455]                   3L)]
[16:20:32.455]             }
[16:20:32.455]             function(cond) {
[16:20:32.455]                 is_error <- inherits(cond, "error")
[16:20:32.455]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.455]                   NULL)
[16:20:32.455]                 if (is_error) {
[16:20:32.455]                   sessionInformation <- function() {
[16:20:32.455]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.455]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.455]                       search = base::search(), system = base::Sys.info())
[16:20:32.455]                   }
[16:20:32.455]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.455]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.455]                     cond$call), session = sessionInformation(), 
[16:20:32.455]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.455]                   signalCondition(cond)
[16:20:32.455]                 }
[16:20:32.455]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.455]                 "immediateCondition"))) {
[16:20:32.455]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.455]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.455]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.455]                   if (TRUE && !signal) {
[16:20:32.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.455]                     {
[16:20:32.455]                       inherits <- base::inherits
[16:20:32.455]                       invokeRestart <- base::invokeRestart
[16:20:32.455]                       is.null <- base::is.null
[16:20:32.455]                       muffled <- FALSE
[16:20:32.455]                       if (inherits(cond, "message")) {
[16:20:32.455]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.455]                         if (muffled) 
[16:20:32.455]                           invokeRestart("muffleMessage")
[16:20:32.455]                       }
[16:20:32.455]                       else if (inherits(cond, "warning")) {
[16:20:32.455]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.455]                         if (muffled) 
[16:20:32.455]                           invokeRestart("muffleWarning")
[16:20:32.455]                       }
[16:20:32.455]                       else if (inherits(cond, "condition")) {
[16:20:32.455]                         if (!is.null(pattern)) {
[16:20:32.455]                           computeRestarts <- base::computeRestarts
[16:20:32.455]                           grepl <- base::grepl
[16:20:32.455]                           restarts <- computeRestarts(cond)
[16:20:32.455]                           for (restart in restarts) {
[16:20:32.455]                             name <- restart$name
[16:20:32.455]                             if (is.null(name)) 
[16:20:32.455]                               next
[16:20:32.455]                             if (!grepl(pattern, name)) 
[16:20:32.455]                               next
[16:20:32.455]                             invokeRestart(restart)
[16:20:32.455]                             muffled <- TRUE
[16:20:32.455]                             break
[16:20:32.455]                           }
[16:20:32.455]                         }
[16:20:32.455]                       }
[16:20:32.455]                       invisible(muffled)
[16:20:32.455]                     }
[16:20:32.455]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.455]                   }
[16:20:32.455]                 }
[16:20:32.455]                 else {
[16:20:32.455]                   if (TRUE) {
[16:20:32.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.455]                     {
[16:20:32.455]                       inherits <- base::inherits
[16:20:32.455]                       invokeRestart <- base::invokeRestart
[16:20:32.455]                       is.null <- base::is.null
[16:20:32.455]                       muffled <- FALSE
[16:20:32.455]                       if (inherits(cond, "message")) {
[16:20:32.455]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.455]                         if (muffled) 
[16:20:32.455]                           invokeRestart("muffleMessage")
[16:20:32.455]                       }
[16:20:32.455]                       else if (inherits(cond, "warning")) {
[16:20:32.455]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.455]                         if (muffled) 
[16:20:32.455]                           invokeRestart("muffleWarning")
[16:20:32.455]                       }
[16:20:32.455]                       else if (inherits(cond, "condition")) {
[16:20:32.455]                         if (!is.null(pattern)) {
[16:20:32.455]                           computeRestarts <- base::computeRestarts
[16:20:32.455]                           grepl <- base::grepl
[16:20:32.455]                           restarts <- computeRestarts(cond)
[16:20:32.455]                           for (restart in restarts) {
[16:20:32.455]                             name <- restart$name
[16:20:32.455]                             if (is.null(name)) 
[16:20:32.455]                               next
[16:20:32.455]                             if (!grepl(pattern, name)) 
[16:20:32.455]                               next
[16:20:32.455]                             invokeRestart(restart)
[16:20:32.455]                             muffled <- TRUE
[16:20:32.455]                             break
[16:20:32.455]                           }
[16:20:32.455]                         }
[16:20:32.455]                       }
[16:20:32.455]                       invisible(muffled)
[16:20:32.455]                     }
[16:20:32.455]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.455]                   }
[16:20:32.455]                 }
[16:20:32.455]             }
[16:20:32.455]         }))
[16:20:32.455]     }, error = function(ex) {
[16:20:32.455]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.455]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.455]                 ...future.rng), started = ...future.startTime, 
[16:20:32.455]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.455]             version = "1.8"), class = "FutureResult")
[16:20:32.455]     }, finally = {
[16:20:32.455]         if (!identical(...future.workdir, getwd())) 
[16:20:32.455]             setwd(...future.workdir)
[16:20:32.455]         {
[16:20:32.455]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.455]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.455]             }
[16:20:32.455]             base::options(...future.oldOptions)
[16:20:32.455]             if (.Platform$OS.type == "windows") {
[16:20:32.455]                 old_names <- names(...future.oldEnvVars)
[16:20:32.455]                 envs <- base::Sys.getenv()
[16:20:32.455]                 names <- names(envs)
[16:20:32.455]                 common <- intersect(names, old_names)
[16:20:32.455]                 added <- setdiff(names, old_names)
[16:20:32.455]                 removed <- setdiff(old_names, names)
[16:20:32.455]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.455]                   envs[common]]
[16:20:32.455]                 NAMES <- toupper(changed)
[16:20:32.455]                 args <- list()
[16:20:32.455]                 for (kk in seq_along(NAMES)) {
[16:20:32.455]                   name <- changed[[kk]]
[16:20:32.455]                   NAME <- NAMES[[kk]]
[16:20:32.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.455]                     next
[16:20:32.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.455]                 }
[16:20:32.455]                 NAMES <- toupper(added)
[16:20:32.455]                 for (kk in seq_along(NAMES)) {
[16:20:32.455]                   name <- added[[kk]]
[16:20:32.455]                   NAME <- NAMES[[kk]]
[16:20:32.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.455]                     next
[16:20:32.455]                   args[[name]] <- ""
[16:20:32.455]                 }
[16:20:32.455]                 NAMES <- toupper(removed)
[16:20:32.455]                 for (kk in seq_along(NAMES)) {
[16:20:32.455]                   name <- removed[[kk]]
[16:20:32.455]                   NAME <- NAMES[[kk]]
[16:20:32.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.455]                     next
[16:20:32.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.455]                 }
[16:20:32.455]                 if (length(args) > 0) 
[16:20:32.455]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.455]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.455]             }
[16:20:32.455]             else {
[16:20:32.455]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.455]             }
[16:20:32.455]             {
[16:20:32.455]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.455]                   0L) {
[16:20:32.455]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.455]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.455]                   base::options(opts)
[16:20:32.455]                 }
[16:20:32.455]                 {
[16:20:32.455]                   {
[16:20:32.455]                     NULL
[16:20:32.455]                     RNGkind("Mersenne-Twister")
[16:20:32.455]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.455]                       inherits = FALSE)
[16:20:32.455]                   }
[16:20:32.455]                   options(future.plan = NULL)
[16:20:32.455]                   if (is.na(NA_character_)) 
[16:20:32.455]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.455]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.455]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.455]                     .init = FALSE)
[16:20:32.455]                 }
[16:20:32.455]             }
[16:20:32.455]         }
[16:20:32.455]     })
[16:20:32.455]     if (TRUE) {
[16:20:32.455]         base::sink(type = "output", split = FALSE)
[16:20:32.455]         if (TRUE) {
[16:20:32.455]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.455]         }
[16:20:32.455]         else {
[16:20:32.455]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.455]         }
[16:20:32.455]         base::close(...future.stdout)
[16:20:32.455]         ...future.stdout <- NULL
[16:20:32.455]     }
[16:20:32.455]     ...future.result$conditions <- ...future.conditions
[16:20:32.455]     ...future.result$finished <- base::Sys.time()
[16:20:32.455]     ...future.result
[16:20:32.455] }
[16:20:32.457] assign_globals() ...
[16:20:32.457] List of 2
[16:20:32.457]  $ rr: int 1
[16:20:32.457]  $ cc: int 2
[16:20:32.457]  - attr(*, "where")=List of 2
[16:20:32.457]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.457]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.457]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.457]  - attr(*, "resolved")= logi FALSE
[16:20:32.457]  - attr(*, "total_size")= num 112
[16:20:32.457]  - attr(*, "already-done")= logi TRUE
[16:20:32.460] - copied ‘rr’ to environment
[16:20:32.460] - copied ‘cc’ to environment
[16:20:32.460] assign_globals() ... done
[16:20:32.460] plan(): Setting new future strategy stack:
[16:20:32.460] List of future strategies:
[16:20:32.460] 1. sequential:
[16:20:32.460]    - args: function (..., envir = parent.frame())
[16:20:32.460]    - tweaked: FALSE
[16:20:32.460]    - call: NULL
[16:20:32.461] plan(): nbrOfWorkers() = 1
[16:20:32.461] plan(): Setting new future strategy stack:
[16:20:32.461] List of future strategies:
[16:20:32.461] 1. sequential:
[16:20:32.461]    - args: function (..., envir = parent.frame())
[16:20:32.461]    - tweaked: FALSE
[16:20:32.461]    - call: future::plan("sequential")
[16:20:32.462] plan(): nbrOfWorkers() = 1
[16:20:32.462] SequentialFuture started (and completed)
[16:20:32.462] - Launch lazy future ... done
[16:20:32.462] run() for ‘SequentialFuture’ ... done
[16:20:32.462] run() for ‘Future’ ...
[16:20:32.462] - state: ‘created’
[16:20:32.462] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.463] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.463] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.463]   - Field: ‘label’
[16:20:32.463]   - Field: ‘local’
[16:20:32.463]   - Field: ‘owner’
[16:20:32.463]   - Field: ‘envir’
[16:20:32.463]   - Field: ‘packages’
[16:20:32.463]   - Field: ‘gc’
[16:20:32.463]   - Field: ‘conditions’
[16:20:32.464]   - Field: ‘expr’
[16:20:32.464]   - Field: ‘uuid’
[16:20:32.464]   - Field: ‘seed’
[16:20:32.464]   - Field: ‘version’
[16:20:32.464]   - Field: ‘result’
[16:20:32.464]   - Field: ‘asynchronous’
[16:20:32.464]   - Field: ‘calls’
[16:20:32.464]   - Field: ‘globals’
[16:20:32.464]   - Field: ‘stdout’
[16:20:32.464]   - Field: ‘earlySignal’
[16:20:32.464]   - Field: ‘lazy’
[16:20:32.466]   - Field: ‘state’
[16:20:32.466] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.466] - Launch lazy future ...
[16:20:32.466] Packages needed by the future expression (n = 0): <none>
[16:20:32.466] Packages needed by future strategies (n = 0): <none>
[16:20:32.466] {
[16:20:32.466]     {
[16:20:32.466]         {
[16:20:32.466]             ...future.startTime <- base::Sys.time()
[16:20:32.466]             {
[16:20:32.466]                 {
[16:20:32.466]                   {
[16:20:32.466]                     base::local({
[16:20:32.466]                       has_future <- base::requireNamespace("future", 
[16:20:32.466]                         quietly = TRUE)
[16:20:32.466]                       if (has_future) {
[16:20:32.466]                         ns <- base::getNamespace("future")
[16:20:32.466]                         version <- ns[[".package"]][["version"]]
[16:20:32.466]                         if (is.null(version)) 
[16:20:32.466]                           version <- utils::packageVersion("future")
[16:20:32.466]                       }
[16:20:32.466]                       else {
[16:20:32.466]                         version <- NULL
[16:20:32.466]                       }
[16:20:32.466]                       if (!has_future || version < "1.8.0") {
[16:20:32.466]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.466]                           "", base::R.version$version.string), 
[16:20:32.466]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.466]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.466]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.466]                             "release", "version")], collapse = " "), 
[16:20:32.466]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.466]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.466]                           info)
[16:20:32.466]                         info <- base::paste(info, collapse = "; ")
[16:20:32.466]                         if (!has_future) {
[16:20:32.466]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.466]                             info)
[16:20:32.466]                         }
[16:20:32.466]                         else {
[16:20:32.466]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.466]                             info, version)
[16:20:32.466]                         }
[16:20:32.466]                         base::stop(msg)
[16:20:32.466]                       }
[16:20:32.466]                     })
[16:20:32.466]                   }
[16:20:32.466]                   ...future.strategy.old <- future::plan("list")
[16:20:32.466]                   options(future.plan = NULL)
[16:20:32.466]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.466]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.466]                 }
[16:20:32.466]                 ...future.workdir <- getwd()
[16:20:32.466]             }
[16:20:32.466]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.466]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.466]         }
[16:20:32.466]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.466]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.466]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.466]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.466]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.466]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.466]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.466]             base::names(...future.oldOptions))
[16:20:32.466]     }
[16:20:32.466]     if (FALSE) {
[16:20:32.466]     }
[16:20:32.466]     else {
[16:20:32.466]         if (TRUE) {
[16:20:32.466]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.466]                 open = "w")
[16:20:32.466]         }
[16:20:32.466]         else {
[16:20:32.466]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.466]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.466]         }
[16:20:32.466]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.466]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.466]             base::sink(type = "output", split = FALSE)
[16:20:32.466]             base::close(...future.stdout)
[16:20:32.466]         }, add = TRUE)
[16:20:32.466]     }
[16:20:32.466]     ...future.frame <- base::sys.nframe()
[16:20:32.466]     ...future.conditions <- base::list()
[16:20:32.466]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.466]     if (FALSE) {
[16:20:32.466]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.466]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.466]     }
[16:20:32.466]     ...future.result <- base::tryCatch({
[16:20:32.466]         base::withCallingHandlers({
[16:20:32.466]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.466]                 rr, cc)))
[16:20:32.466]             future::FutureResult(value = ...future.value$value, 
[16:20:32.466]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.466]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.466]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.466]                     ...future.globalenv.names))
[16:20:32.466]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.466]         }, condition = base::local({
[16:20:32.466]             c <- base::c
[16:20:32.466]             inherits <- base::inherits
[16:20:32.466]             invokeRestart <- base::invokeRestart
[16:20:32.466]             length <- base::length
[16:20:32.466]             list <- base::list
[16:20:32.466]             seq.int <- base::seq.int
[16:20:32.466]             signalCondition <- base::signalCondition
[16:20:32.466]             sys.calls <- base::sys.calls
[16:20:32.466]             `[[` <- base::`[[`
[16:20:32.466]             `+` <- base::`+`
[16:20:32.466]             `<<-` <- base::`<<-`
[16:20:32.466]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.466]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.466]                   3L)]
[16:20:32.466]             }
[16:20:32.466]             function(cond) {
[16:20:32.466]                 is_error <- inherits(cond, "error")
[16:20:32.466]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.466]                   NULL)
[16:20:32.466]                 if (is_error) {
[16:20:32.466]                   sessionInformation <- function() {
[16:20:32.466]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.466]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.466]                       search = base::search(), system = base::Sys.info())
[16:20:32.466]                   }
[16:20:32.466]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.466]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.466]                     cond$call), session = sessionInformation(), 
[16:20:32.466]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.466]                   signalCondition(cond)
[16:20:32.466]                 }
[16:20:32.466]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.466]                 "immediateCondition"))) {
[16:20:32.466]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.466]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.466]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.466]                   if (TRUE && !signal) {
[16:20:32.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.466]                     {
[16:20:32.466]                       inherits <- base::inherits
[16:20:32.466]                       invokeRestart <- base::invokeRestart
[16:20:32.466]                       is.null <- base::is.null
[16:20:32.466]                       muffled <- FALSE
[16:20:32.466]                       if (inherits(cond, "message")) {
[16:20:32.466]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.466]                         if (muffled) 
[16:20:32.466]                           invokeRestart("muffleMessage")
[16:20:32.466]                       }
[16:20:32.466]                       else if (inherits(cond, "warning")) {
[16:20:32.466]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.466]                         if (muffled) 
[16:20:32.466]                           invokeRestart("muffleWarning")
[16:20:32.466]                       }
[16:20:32.466]                       else if (inherits(cond, "condition")) {
[16:20:32.466]                         if (!is.null(pattern)) {
[16:20:32.466]                           computeRestarts <- base::computeRestarts
[16:20:32.466]                           grepl <- base::grepl
[16:20:32.466]                           restarts <- computeRestarts(cond)
[16:20:32.466]                           for (restart in restarts) {
[16:20:32.466]                             name <- restart$name
[16:20:32.466]                             if (is.null(name)) 
[16:20:32.466]                               next
[16:20:32.466]                             if (!grepl(pattern, name)) 
[16:20:32.466]                               next
[16:20:32.466]                             invokeRestart(restart)
[16:20:32.466]                             muffled <- TRUE
[16:20:32.466]                             break
[16:20:32.466]                           }
[16:20:32.466]                         }
[16:20:32.466]                       }
[16:20:32.466]                       invisible(muffled)
[16:20:32.466]                     }
[16:20:32.466]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.466]                   }
[16:20:32.466]                 }
[16:20:32.466]                 else {
[16:20:32.466]                   if (TRUE) {
[16:20:32.466]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.466]                     {
[16:20:32.466]                       inherits <- base::inherits
[16:20:32.466]                       invokeRestart <- base::invokeRestart
[16:20:32.466]                       is.null <- base::is.null
[16:20:32.466]                       muffled <- FALSE
[16:20:32.466]                       if (inherits(cond, "message")) {
[16:20:32.466]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.466]                         if (muffled) 
[16:20:32.466]                           invokeRestart("muffleMessage")
[16:20:32.466]                       }
[16:20:32.466]                       else if (inherits(cond, "warning")) {
[16:20:32.466]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.466]                         if (muffled) 
[16:20:32.466]                           invokeRestart("muffleWarning")
[16:20:32.466]                       }
[16:20:32.466]                       else if (inherits(cond, "condition")) {
[16:20:32.466]                         if (!is.null(pattern)) {
[16:20:32.466]                           computeRestarts <- base::computeRestarts
[16:20:32.466]                           grepl <- base::grepl
[16:20:32.466]                           restarts <- computeRestarts(cond)
[16:20:32.466]                           for (restart in restarts) {
[16:20:32.466]                             name <- restart$name
[16:20:32.466]                             if (is.null(name)) 
[16:20:32.466]                               next
[16:20:32.466]                             if (!grepl(pattern, name)) 
[16:20:32.466]                               next
[16:20:32.466]                             invokeRestart(restart)
[16:20:32.466]                             muffled <- TRUE
[16:20:32.466]                             break
[16:20:32.466]                           }
[16:20:32.466]                         }
[16:20:32.466]                       }
[16:20:32.466]                       invisible(muffled)
[16:20:32.466]                     }
[16:20:32.466]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.466]                   }
[16:20:32.466]                 }
[16:20:32.466]             }
[16:20:32.466]         }))
[16:20:32.466]     }, error = function(ex) {
[16:20:32.466]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.466]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.466]                 ...future.rng), started = ...future.startTime, 
[16:20:32.466]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.466]             version = "1.8"), class = "FutureResult")
[16:20:32.466]     }, finally = {
[16:20:32.466]         if (!identical(...future.workdir, getwd())) 
[16:20:32.466]             setwd(...future.workdir)
[16:20:32.466]         {
[16:20:32.466]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.466]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.466]             }
[16:20:32.466]             base::options(...future.oldOptions)
[16:20:32.466]             if (.Platform$OS.type == "windows") {
[16:20:32.466]                 old_names <- names(...future.oldEnvVars)
[16:20:32.466]                 envs <- base::Sys.getenv()
[16:20:32.466]                 names <- names(envs)
[16:20:32.466]                 common <- intersect(names, old_names)
[16:20:32.466]                 added <- setdiff(names, old_names)
[16:20:32.466]                 removed <- setdiff(old_names, names)
[16:20:32.466]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.466]                   envs[common]]
[16:20:32.466]                 NAMES <- toupper(changed)
[16:20:32.466]                 args <- list()
[16:20:32.466]                 for (kk in seq_along(NAMES)) {
[16:20:32.466]                   name <- changed[[kk]]
[16:20:32.466]                   NAME <- NAMES[[kk]]
[16:20:32.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.466]                     next
[16:20:32.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.466]                 }
[16:20:32.466]                 NAMES <- toupper(added)
[16:20:32.466]                 for (kk in seq_along(NAMES)) {
[16:20:32.466]                   name <- added[[kk]]
[16:20:32.466]                   NAME <- NAMES[[kk]]
[16:20:32.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.466]                     next
[16:20:32.466]                   args[[name]] <- ""
[16:20:32.466]                 }
[16:20:32.466]                 NAMES <- toupper(removed)
[16:20:32.466]                 for (kk in seq_along(NAMES)) {
[16:20:32.466]                   name <- removed[[kk]]
[16:20:32.466]                   NAME <- NAMES[[kk]]
[16:20:32.466]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.466]                     next
[16:20:32.466]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.466]                 }
[16:20:32.466]                 if (length(args) > 0) 
[16:20:32.466]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.466]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.466]             }
[16:20:32.466]             else {
[16:20:32.466]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.466]             }
[16:20:32.466]             {
[16:20:32.466]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.466]                   0L) {
[16:20:32.466]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.466]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.466]                   base::options(opts)
[16:20:32.466]                 }
[16:20:32.466]                 {
[16:20:32.466]                   {
[16:20:32.466]                     NULL
[16:20:32.466]                     RNGkind("Mersenne-Twister")
[16:20:32.466]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.466]                       inherits = FALSE)
[16:20:32.466]                   }
[16:20:32.466]                   options(future.plan = NULL)
[16:20:32.466]                   if (is.na(NA_character_)) 
[16:20:32.466]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.466]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.466]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.466]                     .init = FALSE)
[16:20:32.466]                 }
[16:20:32.466]             }
[16:20:32.466]         }
[16:20:32.466]     })
[16:20:32.466]     if (TRUE) {
[16:20:32.466]         base::sink(type = "output", split = FALSE)
[16:20:32.466]         if (TRUE) {
[16:20:32.466]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.466]         }
[16:20:32.466]         else {
[16:20:32.466]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.466]         }
[16:20:32.466]         base::close(...future.stdout)
[16:20:32.466]         ...future.stdout <- NULL
[16:20:32.466]     }
[16:20:32.466]     ...future.result$conditions <- ...future.conditions
[16:20:32.466]     ...future.result$finished <- base::Sys.time()
[16:20:32.466]     ...future.result
[16:20:32.466] }
[16:20:32.468] assign_globals() ...
[16:20:32.468] List of 2
[16:20:32.468]  $ rr: int 2
[16:20:32.468]  $ cc: int 2
[16:20:32.468]  - attr(*, "where")=List of 2
[16:20:32.468]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.468]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.468]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.468]  - attr(*, "resolved")= logi FALSE
[16:20:32.468]  - attr(*, "total_size")= num 112
[16:20:32.468]  - attr(*, "already-done")= logi TRUE
[16:20:32.471] - copied ‘rr’ to environment
[16:20:32.471] - copied ‘cc’ to environment
[16:20:32.471] assign_globals() ... done
[16:20:32.471] plan(): Setting new future strategy stack:
[16:20:32.471] List of future strategies:
[16:20:32.471] 1. sequential:
[16:20:32.471]    - args: function (..., envir = parent.frame())
[16:20:32.471]    - tweaked: FALSE
[16:20:32.471]    - call: NULL
[16:20:32.472] plan(): nbrOfWorkers() = 1
[16:20:32.472] plan(): Setting new future strategy stack:
[16:20:32.473] List of future strategies:
[16:20:32.473] 1. sequential:
[16:20:32.473]    - args: function (..., envir = parent.frame())
[16:20:32.473]    - tweaked: FALSE
[16:20:32.473]    - call: future::plan("sequential")
[16:20:32.473] plan(): nbrOfWorkers() = 1
[16:20:32.473] SequentialFuture started (and completed)
[16:20:32.473] - Launch lazy future ... done
[16:20:32.473] run() for ‘SequentialFuture’ ... done
[16:20:32.473] run() for ‘Future’ ...
[16:20:32.474] - state: ‘created’
[16:20:32.474] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:32.474] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:32.474] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:32.474]   - Field: ‘label’
[16:20:32.474]   - Field: ‘local’
[16:20:32.474]   - Field: ‘owner’
[16:20:32.474]   - Field: ‘envir’
[16:20:32.474]   - Field: ‘packages’
[16:20:32.475]   - Field: ‘gc’
[16:20:32.475]   - Field: ‘conditions’
[16:20:32.475]   - Field: ‘expr’
[16:20:32.475]   - Field: ‘uuid’
[16:20:32.475]   - Field: ‘seed’
[16:20:32.475]   - Field: ‘version’
[16:20:32.475]   - Field: ‘result’
[16:20:32.475]   - Field: ‘asynchronous’
[16:20:32.475]   - Field: ‘calls’
[16:20:32.475]   - Field: ‘globals’
[16:20:32.475]   - Field: ‘stdout’
[16:20:32.476]   - Field: ‘earlySignal’
[16:20:32.476]   - Field: ‘lazy’
[16:20:32.476]   - Field: ‘state’
[16:20:32.476] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:32.476] - Launch lazy future ...
[16:20:32.476] Packages needed by the future expression (n = 0): <none>
[16:20:32.476] Packages needed by future strategies (n = 0): <none>
[16:20:32.477] {
[16:20:32.477]     {
[16:20:32.477]         {
[16:20:32.477]             ...future.startTime <- base::Sys.time()
[16:20:32.477]             {
[16:20:32.477]                 {
[16:20:32.477]                   {
[16:20:32.477]                     base::local({
[16:20:32.477]                       has_future <- base::requireNamespace("future", 
[16:20:32.477]                         quietly = TRUE)
[16:20:32.477]                       if (has_future) {
[16:20:32.477]                         ns <- base::getNamespace("future")
[16:20:32.477]                         version <- ns[[".package"]][["version"]]
[16:20:32.477]                         if (is.null(version)) 
[16:20:32.477]                           version <- utils::packageVersion("future")
[16:20:32.477]                       }
[16:20:32.477]                       else {
[16:20:32.477]                         version <- NULL
[16:20:32.477]                       }
[16:20:32.477]                       if (!has_future || version < "1.8.0") {
[16:20:32.477]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:32.477]                           "", base::R.version$version.string), 
[16:20:32.477]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:32.477]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:32.477]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:32.477]                             "release", "version")], collapse = " "), 
[16:20:32.477]                           hostname = base::Sys.info()[["nodename"]])
[16:20:32.477]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:32.477]                           info)
[16:20:32.477]                         info <- base::paste(info, collapse = "; ")
[16:20:32.477]                         if (!has_future) {
[16:20:32.477]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:32.477]                             info)
[16:20:32.477]                         }
[16:20:32.477]                         else {
[16:20:32.477]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:32.477]                             info, version)
[16:20:32.477]                         }
[16:20:32.477]                         base::stop(msg)
[16:20:32.477]                       }
[16:20:32.477]                     })
[16:20:32.477]                   }
[16:20:32.477]                   ...future.strategy.old <- future::plan("list")
[16:20:32.477]                   options(future.plan = NULL)
[16:20:32.477]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.477]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:32.477]                 }
[16:20:32.477]                 ...future.workdir <- getwd()
[16:20:32.477]             }
[16:20:32.477]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:32.477]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:32.477]         }
[16:20:32.477]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:32.477]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:32.477]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:32.477]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:32.477]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:32.477]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:32.477]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:32.477]             base::names(...future.oldOptions))
[16:20:32.477]     }
[16:20:32.477]     if (FALSE) {
[16:20:32.477]     }
[16:20:32.477]     else {
[16:20:32.477]         if (TRUE) {
[16:20:32.477]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:32.477]                 open = "w")
[16:20:32.477]         }
[16:20:32.477]         else {
[16:20:32.477]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:32.477]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:32.477]         }
[16:20:32.477]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:32.477]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:32.477]             base::sink(type = "output", split = FALSE)
[16:20:32.477]             base::close(...future.stdout)
[16:20:32.477]         }, add = TRUE)
[16:20:32.477]     }
[16:20:32.477]     ...future.frame <- base::sys.nframe()
[16:20:32.477]     ...future.conditions <- base::list()
[16:20:32.477]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:32.477]     if (FALSE) {
[16:20:32.477]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:32.477]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:32.477]     }
[16:20:32.477]     ...future.result <- base::tryCatch({
[16:20:32.477]         base::withCallingHandlers({
[16:20:32.477]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[16:20:32.477]                 rr, cc)))
[16:20:32.477]             future::FutureResult(value = ...future.value$value, 
[16:20:32.477]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.477]                   ...future.rng), globalenv = if (FALSE) 
[16:20:32.477]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:32.477]                     ...future.globalenv.names))
[16:20:32.477]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:32.477]         }, condition = base::local({
[16:20:32.477]             c <- base::c
[16:20:32.477]             inherits <- base::inherits
[16:20:32.477]             invokeRestart <- base::invokeRestart
[16:20:32.477]             length <- base::length
[16:20:32.477]             list <- base::list
[16:20:32.477]             seq.int <- base::seq.int
[16:20:32.477]             signalCondition <- base::signalCondition
[16:20:32.477]             sys.calls <- base::sys.calls
[16:20:32.477]             `[[` <- base::`[[`
[16:20:32.477]             `+` <- base::`+`
[16:20:32.477]             `<<-` <- base::`<<-`
[16:20:32.477]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:32.477]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:32.477]                   3L)]
[16:20:32.477]             }
[16:20:32.477]             function(cond) {
[16:20:32.477]                 is_error <- inherits(cond, "error")
[16:20:32.477]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:32.477]                   NULL)
[16:20:32.477]                 if (is_error) {
[16:20:32.477]                   sessionInformation <- function() {
[16:20:32.477]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:32.477]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:32.477]                       search = base::search(), system = base::Sys.info())
[16:20:32.477]                   }
[16:20:32.477]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.477]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:32.477]                     cond$call), session = sessionInformation(), 
[16:20:32.477]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:32.477]                   signalCondition(cond)
[16:20:32.477]                 }
[16:20:32.477]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:32.477]                 "immediateCondition"))) {
[16:20:32.477]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:32.477]                   ...future.conditions[[length(...future.conditions) + 
[16:20:32.477]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:32.477]                   if (TRUE && !signal) {
[16:20:32.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.477]                     {
[16:20:32.477]                       inherits <- base::inherits
[16:20:32.477]                       invokeRestart <- base::invokeRestart
[16:20:32.477]                       is.null <- base::is.null
[16:20:32.477]                       muffled <- FALSE
[16:20:32.477]                       if (inherits(cond, "message")) {
[16:20:32.477]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.477]                         if (muffled) 
[16:20:32.477]                           invokeRestart("muffleMessage")
[16:20:32.477]                       }
[16:20:32.477]                       else if (inherits(cond, "warning")) {
[16:20:32.477]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.477]                         if (muffled) 
[16:20:32.477]                           invokeRestart("muffleWarning")
[16:20:32.477]                       }
[16:20:32.477]                       else if (inherits(cond, "condition")) {
[16:20:32.477]                         if (!is.null(pattern)) {
[16:20:32.477]                           computeRestarts <- base::computeRestarts
[16:20:32.477]                           grepl <- base::grepl
[16:20:32.477]                           restarts <- computeRestarts(cond)
[16:20:32.477]                           for (restart in restarts) {
[16:20:32.477]                             name <- restart$name
[16:20:32.477]                             if (is.null(name)) 
[16:20:32.477]                               next
[16:20:32.477]                             if (!grepl(pattern, name)) 
[16:20:32.477]                               next
[16:20:32.477]                             invokeRestart(restart)
[16:20:32.477]                             muffled <- TRUE
[16:20:32.477]                             break
[16:20:32.477]                           }
[16:20:32.477]                         }
[16:20:32.477]                       }
[16:20:32.477]                       invisible(muffled)
[16:20:32.477]                     }
[16:20:32.477]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.477]                   }
[16:20:32.477]                 }
[16:20:32.477]                 else {
[16:20:32.477]                   if (TRUE) {
[16:20:32.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:32.477]                     {
[16:20:32.477]                       inherits <- base::inherits
[16:20:32.477]                       invokeRestart <- base::invokeRestart
[16:20:32.477]                       is.null <- base::is.null
[16:20:32.477]                       muffled <- FALSE
[16:20:32.477]                       if (inherits(cond, "message")) {
[16:20:32.477]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:32.477]                         if (muffled) 
[16:20:32.477]                           invokeRestart("muffleMessage")
[16:20:32.477]                       }
[16:20:32.477]                       else if (inherits(cond, "warning")) {
[16:20:32.477]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:32.477]                         if (muffled) 
[16:20:32.477]                           invokeRestart("muffleWarning")
[16:20:32.477]                       }
[16:20:32.477]                       else if (inherits(cond, "condition")) {
[16:20:32.477]                         if (!is.null(pattern)) {
[16:20:32.477]                           computeRestarts <- base::computeRestarts
[16:20:32.477]                           grepl <- base::grepl
[16:20:32.477]                           restarts <- computeRestarts(cond)
[16:20:32.477]                           for (restart in restarts) {
[16:20:32.477]                             name <- restart$name
[16:20:32.477]                             if (is.null(name)) 
[16:20:32.477]                               next
[16:20:32.477]                             if (!grepl(pattern, name)) 
[16:20:32.477]                               next
[16:20:32.477]                             invokeRestart(restart)
[16:20:32.477]                             muffled <- TRUE
[16:20:32.477]                             break
[16:20:32.477]                           }
[16:20:32.477]                         }
[16:20:32.477]                       }
[16:20:32.477]                       invisible(muffled)
[16:20:32.477]                     }
[16:20:32.477]                     muffleCondition(cond, pattern = "^muffle")
[16:20:32.477]                   }
[16:20:32.477]                 }
[16:20:32.477]             }
[16:20:32.477]         }))
[16:20:32.477]     }, error = function(ex) {
[16:20:32.477]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:32.477]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:32.477]                 ...future.rng), started = ...future.startTime, 
[16:20:32.477]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:32.477]             version = "1.8"), class = "FutureResult")
[16:20:32.477]     }, finally = {
[16:20:32.477]         if (!identical(...future.workdir, getwd())) 
[16:20:32.477]             setwd(...future.workdir)
[16:20:32.477]         {
[16:20:32.477]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:32.477]                 ...future.oldOptions$nwarnings <- NULL
[16:20:32.477]             }
[16:20:32.477]             base::options(...future.oldOptions)
[16:20:32.477]             if (.Platform$OS.type == "windows") {
[16:20:32.477]                 old_names <- names(...future.oldEnvVars)
[16:20:32.477]                 envs <- base::Sys.getenv()
[16:20:32.477]                 names <- names(envs)
[16:20:32.477]                 common <- intersect(names, old_names)
[16:20:32.477]                 added <- setdiff(names, old_names)
[16:20:32.477]                 removed <- setdiff(old_names, names)
[16:20:32.477]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:32.477]                   envs[common]]
[16:20:32.477]                 NAMES <- toupper(changed)
[16:20:32.477]                 args <- list()
[16:20:32.477]                 for (kk in seq_along(NAMES)) {
[16:20:32.477]                   name <- changed[[kk]]
[16:20:32.477]                   NAME <- NAMES[[kk]]
[16:20:32.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.477]                     next
[16:20:32.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.477]                 }
[16:20:32.477]                 NAMES <- toupper(added)
[16:20:32.477]                 for (kk in seq_along(NAMES)) {
[16:20:32.477]                   name <- added[[kk]]
[16:20:32.477]                   NAME <- NAMES[[kk]]
[16:20:32.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.477]                     next
[16:20:32.477]                   args[[name]] <- ""
[16:20:32.477]                 }
[16:20:32.477]                 NAMES <- toupper(removed)
[16:20:32.477]                 for (kk in seq_along(NAMES)) {
[16:20:32.477]                   name <- removed[[kk]]
[16:20:32.477]                   NAME <- NAMES[[kk]]
[16:20:32.477]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:32.477]                     next
[16:20:32.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:32.477]                 }
[16:20:32.477]                 if (length(args) > 0) 
[16:20:32.477]                   base::do.call(base::Sys.setenv, args = args)
[16:20:32.477]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:32.477]             }
[16:20:32.477]             else {
[16:20:32.477]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:32.477]             }
[16:20:32.477]             {
[16:20:32.477]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:32.477]                   0L) {
[16:20:32.477]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:32.477]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:32.477]                   base::options(opts)
[16:20:32.477]                 }
[16:20:32.477]                 {
[16:20:32.477]                   {
[16:20:32.477]                     NULL
[16:20:32.477]                     RNGkind("Mersenne-Twister")
[16:20:32.477]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:32.477]                       inherits = FALSE)
[16:20:32.477]                   }
[16:20:32.477]                   options(future.plan = NULL)
[16:20:32.477]                   if (is.na(NA_character_)) 
[16:20:32.477]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:32.477]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:32.477]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:32.477]                     .init = FALSE)
[16:20:32.477]                 }
[16:20:32.477]             }
[16:20:32.477]         }
[16:20:32.477]     })
[16:20:32.477]     if (TRUE) {
[16:20:32.477]         base::sink(type = "output", split = FALSE)
[16:20:32.477]         if (TRUE) {
[16:20:32.477]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:32.477]         }
[16:20:32.477]         else {
[16:20:32.477]             ...future.result["stdout"] <- base::list(NULL)
[16:20:32.477]         }
[16:20:32.477]         base::close(...future.stdout)
[16:20:32.477]         ...future.stdout <- NULL
[16:20:32.477]     }
[16:20:32.477]     ...future.result$conditions <- ...future.conditions
[16:20:32.477]     ...future.result$finished <- base::Sys.time()
[16:20:32.477]     ...future.result
[16:20:32.477] }
[16:20:32.478] assign_globals() ...
[16:20:32.478] List of 2
[16:20:32.478]  $ rr: int 3
[16:20:32.478]  $ cc: int 2
[16:20:32.478]  - attr(*, "where")=List of 2
[16:20:32.478]   ..$ rr:<environment: R_EmptyEnv> 
[16:20:32.478]   ..$ cc:<environment: R_EmptyEnv> 
[16:20:32.478]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:20:32.478]  - attr(*, "resolved")= logi FALSE
[16:20:32.478]  - attr(*, "total_size")= num 112
[16:20:32.478]  - attr(*, "already-done")= logi TRUE
[16:20:32.481] - copied ‘rr’ to environment
[16:20:32.481] - copied ‘cc’ to environment
[16:20:32.481] assign_globals() ... done
[16:20:32.481] plan(): Setting new future strategy stack:
[16:20:32.481] List of future strategies:
[16:20:32.481] 1. sequential:
[16:20:32.481]    - args: function (..., envir = parent.frame())
[16:20:32.481]    - tweaked: FALSE
[16:20:32.481]    - call: NULL
[16:20:32.482] plan(): nbrOfWorkers() = 1
[16:20:32.482] plan(): Setting new future strategy stack:
[16:20:32.482] List of future strategies:
[16:20:32.482] 1. sequential:
[16:20:32.482]    - args: function (..., envir = parent.frame())
[16:20:32.482]    - tweaked: FALSE
[16:20:32.482]    - call: future::plan("sequential")
[16:20:32.483] plan(): nbrOfWorkers() = 1
[16:20:32.483] SequentialFuture started (and completed)
[16:20:32.483] - Launch lazy future ... done
[16:20:32.483] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[16:20:32.484] plan(): Setting new future strategy stack:
[16:20:32.484] List of future strategies:
[16:20:32.484] 1. FutureStrategy:
[16:20:32.484]    - args: function (..., envir = parent.frame())
[16:20:32.484]    - tweaked: FALSE
[16:20:32.484]    - call: future::plan(oplan)
[16:20:32.496] plan(): nbrOfWorkers() = 1
> 
