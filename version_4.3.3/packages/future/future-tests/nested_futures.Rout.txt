
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:37:20.084] plan(): Setting new future strategy stack:
[13:37:20.084] List of future strategies:
[13:37:20.084] 1. sequential:
[13:37:20.084]    - args: function (..., envir = parent.frame())
[13:37:20.084]    - tweaked: FALSE
[13:37:20.084]    - call: future::plan("sequential")
[13:37:20.099] plan(): nbrOfWorkers() = 1
> 
> strategies <- supportedStrategies()
> 
> message("*** Nested futures ...")
*** Nested futures ...
> 
> for (strategy1 in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   for (strategy2 in strategies) {
+     message(sprintf("- plan(list('%s', '%s')) ...", strategy1, strategy2))
+     plan(list(a = strategy1, b = strategy2))
+     
+     nested <- plan("list")
+     stopifnot(
+       length(nested) == 2L,
+       all(names(nested) == c("a", "b")),
+       inherits(plan("next"), strategy1)
+     )
+ 
+     x %<-% {
+       a <- 1L
+ 
+       ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+       ## we're exporting the plan() function including its local stack!
+       plan_a <- unclass(future::plan("list"))
+       nested_a <- nested[-1]
+ 
+       stopifnot(
+         length(nested_a) == 1L,
+         length(plan_a) == 1L,
+         inherits(plan_a[[1]], "future"),
+         inherits(future::plan("next"), strategy2)
+       )
+ 
+       ## Attribute 'init' is modified at run time
+       for (kk in seq_along(plan_a)) attr(plan_a[[kk]], "init") <- NULL
+       for (kk in seq_along(nested_a)) attr(nested_a[[kk]], "init") <- NULL
+       stopifnot(all.equal(plan_a, nested_a))
+ 
+       y %<-% {
+         b <- 2L
+         
+         ## IMPORTANT: Use future::plan() - not just plan() - otherwise
+         ## we're exporting the plan() function including its local stack!
+         plan_b <- future::plan("list")
+         nested_b <- nested_a[-1]
+ 
+         stopifnot(
+           length(nested_b) == 0L,
+           length(plan_b) == 1L,
+           inherits(plan_b[[1]], "future"),
+           inherits(future::plan("next"), "sequential")
+         )
+ 
+         list(a = a, nested_a = nested_a, plan_a = plan_a,
+              b = b, nested_b = nested_b, plan_b = plan_b)
+       }
+       y
+     }
+ 
+     str(x)
+ 
+     stopifnot(
+       length(x) == 3 * length(nested),
+       all(names(x) == c("a", "nested_a", "plan_a",
+                         "b", "nested_b", "plan_b")),
+ 
+       x$a == 1L,
+       length(x$nested_a) == 1L,
+       is.list(x$plan_a),
+       length(x$plan_a) == 1L,
+       inherits(x$plan_a[[1]], "future"),
+ 
+       x$b == 2L,
+       length(x$nested_b) == 0L,
+       is.list(x$plan_b),
+       length(x$plan_b) == 1L,
+       inherits(x$plan_b[[1]], "future"),
+       inherits(x$plan_b[[1]], "sequential")
+     )
+ 
+     ## Attribute 'init' is modified at run time
+     for (kk in seq_along(x$plan_a)) attr(x$plan_a[[kk]], "init") <- NULL
+     for (kk in seq_along(nested)) attr(nested[[kk]], "init") <- NULL
+     stopifnot(all.equal(x$plan_a, nested[-1L]))
+ 
+     rm(list = c("nested", "x"))
+ 
+ 
+     ## Nested futures and globals
+     ## In future (<= 1.7.0), the below would produce an error saying
+     ## "Failed to locate global object in the relevant environments: 'a'"
+     ## Related to https://github.com/HenrikBengtsson/globals/issues/35
+     data <- data.frame(a = 1:3, b = 3:1)
+     y_truth <- subset(data, a == 2)
+     f <- future({
+       value(future( subset(data, a == 2) ))
+     })
+     y <- value(f)
+     stopifnot(identical(y, y_truth))
+     
+     message(sprintf("- plan(list('%s', '%s')) ... DONE", strategy1, strategy2))
+   }
+ }
- plan(list('sequential', 'sequential')) ...
[13:37:20.151] plan(): Setting new future strategy stack:
[13:37:20.151] List of future strategies:
[13:37:20.151] 1. sequential:
[13:37:20.151]    - args: function (..., envir = parent.frame())
[13:37:20.151]    - tweaked: FALSE
[13:37:20.151]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.151] 2. sequential:
[13:37:20.151]    - args: function (..., envir = parent.frame())
[13:37:20.151]    - tweaked: FALSE
[13:37:20.151]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.163] plan(): nbrOfWorkers() = 1
[13:37:20.165] getGlobalsAndPackages() ...
[13:37:20.165] Searching for globals...
[13:37:20.188] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:20.188] Searching for globals ... DONE
[13:37:20.189] Resolving globals: FALSE
[13:37:20.190] The total size of the 2 globals is 22.60 KiB (23144 bytes)
[13:37:20.191] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 22.60 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (22.48 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:20.191] - globals: [2] ‘nested’, ‘strategy2’
[13:37:20.191] - packages: [1] ‘future’
[13:37:20.191] getGlobalsAndPackages() ... DONE
[13:37:20.192] run() for ‘Future’ ...
[13:37:20.192] - state: ‘created’
[13:37:20.192] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.193] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.193] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.193]   - Field: ‘label’
[13:37:20.193]   - Field: ‘local’
[13:37:20.193]   - Field: ‘owner’
[13:37:20.193]   - Field: ‘envir’
[13:37:20.193]   - Field: ‘packages’
[13:37:20.193]   - Field: ‘gc’
[13:37:20.194]   - Field: ‘conditions’
[13:37:20.194]   - Field: ‘expr’
[13:37:20.194]   - Field: ‘uuid’
[13:37:20.194]   - Field: ‘seed’
[13:37:20.194]   - Field: ‘version’
[13:37:20.194]   - Field: ‘result’
[13:37:20.194]   - Field: ‘asynchronous’
[13:37:20.194]   - Field: ‘calls’
[13:37:20.194]   - Field: ‘globals’
[13:37:20.194]   - Field: ‘stdout’
[13:37:20.194]   - Field: ‘earlySignal’
[13:37:20.195]   - Field: ‘lazy’
[13:37:20.195]   - Field: ‘state’
[13:37:20.195] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.195] - Launch lazy future ...
[13:37:20.196] Packages needed by the future expression (n = 1): ‘future’
[13:37:20.196] Packages needed by future strategies (n = 1): ‘future’
[13:37:20.197] {
[13:37:20.197]     {
[13:37:20.197]         {
[13:37:20.197]             ...future.startTime <- base::Sys.time()
[13:37:20.197]             {
[13:37:20.197]                 {
[13:37:20.197]                   {
[13:37:20.197]                     {
[13:37:20.197]                       base::local({
[13:37:20.197]                         has_future <- base::requireNamespace("future", 
[13:37:20.197]                           quietly = TRUE)
[13:37:20.197]                         if (has_future) {
[13:37:20.197]                           ns <- base::getNamespace("future")
[13:37:20.197]                           version <- ns[[".package"]][["version"]]
[13:37:20.197]                           if (is.null(version)) 
[13:37:20.197]                             version <- utils::packageVersion("future")
[13:37:20.197]                         }
[13:37:20.197]                         else {
[13:37:20.197]                           version <- NULL
[13:37:20.197]                         }
[13:37:20.197]                         if (!has_future || version < "1.8.0") {
[13:37:20.197]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.197]                             "", base::R.version$version.string), 
[13:37:20.197]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.197]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.197]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.197]                               "release", "version")], collapse = " "), 
[13:37:20.197]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.197]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.197]                             info)
[13:37:20.197]                           info <- base::paste(info, collapse = "; ")
[13:37:20.197]                           if (!has_future) {
[13:37:20.197]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.197]                               info)
[13:37:20.197]                           }
[13:37:20.197]                           else {
[13:37:20.197]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.197]                               info, version)
[13:37:20.197]                           }
[13:37:20.197]                           base::stop(msg)
[13:37:20.197]                         }
[13:37:20.197]                       })
[13:37:20.197]                     }
[13:37:20.197]                     base::local({
[13:37:20.197]                       for (pkg in "future") {
[13:37:20.197]                         base::loadNamespace(pkg)
[13:37:20.197]                         base::library(pkg, character.only = TRUE)
[13:37:20.197]                       }
[13:37:20.197]                     })
[13:37:20.197]                   }
[13:37:20.197]                   ...future.strategy.old <- future::plan("list")
[13:37:20.197]                   options(future.plan = NULL)
[13:37:20.197]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.197]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:20.197]                   {
[13:37:20.197]                     future <- SequentialFuture(..., envir = envir)
[13:37:20.197]                     if (!future$lazy) 
[13:37:20.197]                       future <- run(future)
[13:37:20.197]                     invisible(future)
[13:37:20.197]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:20.197]                 }
[13:37:20.197]                 ...future.workdir <- getwd()
[13:37:20.197]             }
[13:37:20.197]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.197]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.197]         }
[13:37:20.197]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.197]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.197]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.197]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.197]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.197]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.197]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.197]             base::names(...future.oldOptions))
[13:37:20.197]     }
[13:37:20.197]     if (FALSE) {
[13:37:20.197]     }
[13:37:20.197]     else {
[13:37:20.197]         if (TRUE) {
[13:37:20.197]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.197]                 open = "w")
[13:37:20.197]         }
[13:37:20.197]         else {
[13:37:20.197]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.197]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.197]         }
[13:37:20.197]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.197]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.197]             base::sink(type = "output", split = FALSE)
[13:37:20.197]             base::close(...future.stdout)
[13:37:20.197]         }, add = TRUE)
[13:37:20.197]     }
[13:37:20.197]     ...future.frame <- base::sys.nframe()
[13:37:20.197]     ...future.conditions <- base::list()
[13:37:20.197]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.197]     if (FALSE) {
[13:37:20.197]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.197]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.197]     }
[13:37:20.197]     ...future.result <- base::tryCatch({
[13:37:20.197]         base::withCallingHandlers({
[13:37:20.197]             ...future.value <- base::withVisible(base::local({
[13:37:20.197]                 a <- 1L
[13:37:20.197]                 plan_a <- unclass(future::plan("list"))
[13:37:20.197]                 nested_a <- nested[-1]
[13:37:20.197]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:20.197]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.197]                   strategy2))
[13:37:20.197]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:20.197]                   "init") <- NULL
[13:37:20.197]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:20.197]                   "init") <- NULL
[13:37:20.197]                 stopifnot(all.equal(plan_a, nested_a))
[13:37:20.197]                 y %<-% {
[13:37:20.197]                   b <- 2L
[13:37:20.197]                   plan_b <- future::plan("list")
[13:37:20.197]                   nested_b <- nested_a[-1]
[13:37:20.197]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:20.197]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.197]                     "sequential"))
[13:37:20.197]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:20.197]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:20.197]                 }
[13:37:20.197]                 y
[13:37:20.197]             }))
[13:37:20.197]             future::FutureResult(value = ...future.value$value, 
[13:37:20.197]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.197]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.197]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.197]                     ...future.globalenv.names))
[13:37:20.197]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.197]         }, condition = base::local({
[13:37:20.197]             c <- base::c
[13:37:20.197]             inherits <- base::inherits
[13:37:20.197]             invokeRestart <- base::invokeRestart
[13:37:20.197]             length <- base::length
[13:37:20.197]             list <- base::list
[13:37:20.197]             seq.int <- base::seq.int
[13:37:20.197]             signalCondition <- base::signalCondition
[13:37:20.197]             sys.calls <- base::sys.calls
[13:37:20.197]             `[[` <- base::`[[`
[13:37:20.197]             `+` <- base::`+`
[13:37:20.197]             `<<-` <- base::`<<-`
[13:37:20.197]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.197]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.197]                   3L)]
[13:37:20.197]             }
[13:37:20.197]             function(cond) {
[13:37:20.197]                 is_error <- inherits(cond, "error")
[13:37:20.197]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.197]                   NULL)
[13:37:20.197]                 if (is_error) {
[13:37:20.197]                   sessionInformation <- function() {
[13:37:20.197]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.197]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.197]                       search = base::search(), system = base::Sys.info())
[13:37:20.197]                   }
[13:37:20.197]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.197]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.197]                     cond$call), session = sessionInformation(), 
[13:37:20.197]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.197]                   signalCondition(cond)
[13:37:20.197]                 }
[13:37:20.197]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.197]                 "immediateCondition"))) {
[13:37:20.197]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.197]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.197]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.197]                   if (TRUE && !signal) {
[13:37:20.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.197]                     {
[13:37:20.197]                       inherits <- base::inherits
[13:37:20.197]                       invokeRestart <- base::invokeRestart
[13:37:20.197]                       is.null <- base::is.null
[13:37:20.197]                       muffled <- FALSE
[13:37:20.197]                       if (inherits(cond, "message")) {
[13:37:20.197]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.197]                         if (muffled) 
[13:37:20.197]                           invokeRestart("muffleMessage")
[13:37:20.197]                       }
[13:37:20.197]                       else if (inherits(cond, "warning")) {
[13:37:20.197]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.197]                         if (muffled) 
[13:37:20.197]                           invokeRestart("muffleWarning")
[13:37:20.197]                       }
[13:37:20.197]                       else if (inherits(cond, "condition")) {
[13:37:20.197]                         if (!is.null(pattern)) {
[13:37:20.197]                           computeRestarts <- base::computeRestarts
[13:37:20.197]                           grepl <- base::grepl
[13:37:20.197]                           restarts <- computeRestarts(cond)
[13:37:20.197]                           for (restart in restarts) {
[13:37:20.197]                             name <- restart$name
[13:37:20.197]                             if (is.null(name)) 
[13:37:20.197]                               next
[13:37:20.197]                             if (!grepl(pattern, name)) 
[13:37:20.197]                               next
[13:37:20.197]                             invokeRestart(restart)
[13:37:20.197]                             muffled <- TRUE
[13:37:20.197]                             break
[13:37:20.197]                           }
[13:37:20.197]                         }
[13:37:20.197]                       }
[13:37:20.197]                       invisible(muffled)
[13:37:20.197]                     }
[13:37:20.197]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.197]                   }
[13:37:20.197]                 }
[13:37:20.197]                 else {
[13:37:20.197]                   if (TRUE) {
[13:37:20.197]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.197]                     {
[13:37:20.197]                       inherits <- base::inherits
[13:37:20.197]                       invokeRestart <- base::invokeRestart
[13:37:20.197]                       is.null <- base::is.null
[13:37:20.197]                       muffled <- FALSE
[13:37:20.197]                       if (inherits(cond, "message")) {
[13:37:20.197]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.197]                         if (muffled) 
[13:37:20.197]                           invokeRestart("muffleMessage")
[13:37:20.197]                       }
[13:37:20.197]                       else if (inherits(cond, "warning")) {
[13:37:20.197]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.197]                         if (muffled) 
[13:37:20.197]                           invokeRestart("muffleWarning")
[13:37:20.197]                       }
[13:37:20.197]                       else if (inherits(cond, "condition")) {
[13:37:20.197]                         if (!is.null(pattern)) {
[13:37:20.197]                           computeRestarts <- base::computeRestarts
[13:37:20.197]                           grepl <- base::grepl
[13:37:20.197]                           restarts <- computeRestarts(cond)
[13:37:20.197]                           for (restart in restarts) {
[13:37:20.197]                             name <- restart$name
[13:37:20.197]                             if (is.null(name)) 
[13:37:20.197]                               next
[13:37:20.197]                             if (!grepl(pattern, name)) 
[13:37:20.197]                               next
[13:37:20.197]                             invokeRestart(restart)
[13:37:20.197]                             muffled <- TRUE
[13:37:20.197]                             break
[13:37:20.197]                           }
[13:37:20.197]                         }
[13:37:20.197]                       }
[13:37:20.197]                       invisible(muffled)
[13:37:20.197]                     }
[13:37:20.197]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.197]                   }
[13:37:20.197]                 }
[13:37:20.197]             }
[13:37:20.197]         }))
[13:37:20.197]     }, error = function(ex) {
[13:37:20.197]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.197]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.197]                 ...future.rng), started = ...future.startTime, 
[13:37:20.197]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.197]             version = "1.8"), class = "FutureResult")
[13:37:20.197]     }, finally = {
[13:37:20.197]         if (!identical(...future.workdir, getwd())) 
[13:37:20.197]             setwd(...future.workdir)
[13:37:20.197]         {
[13:37:20.197]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.197]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.197]             }
[13:37:20.197]             base::options(...future.oldOptions)
[13:37:20.197]             if (.Platform$OS.type == "windows") {
[13:37:20.197]                 old_names <- names(...future.oldEnvVars)
[13:37:20.197]                 envs <- base::Sys.getenv()
[13:37:20.197]                 names <- names(envs)
[13:37:20.197]                 common <- intersect(names, old_names)
[13:37:20.197]                 added <- setdiff(names, old_names)
[13:37:20.197]                 removed <- setdiff(old_names, names)
[13:37:20.197]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.197]                   envs[common]]
[13:37:20.197]                 NAMES <- toupper(changed)
[13:37:20.197]                 args <- list()
[13:37:20.197]                 for (kk in seq_along(NAMES)) {
[13:37:20.197]                   name <- changed[[kk]]
[13:37:20.197]                   NAME <- NAMES[[kk]]
[13:37:20.197]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.197]                     next
[13:37:20.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.197]                 }
[13:37:20.197]                 NAMES <- toupper(added)
[13:37:20.197]                 for (kk in seq_along(NAMES)) {
[13:37:20.197]                   name <- added[[kk]]
[13:37:20.197]                   NAME <- NAMES[[kk]]
[13:37:20.197]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.197]                     next
[13:37:20.197]                   args[[name]] <- ""
[13:37:20.197]                 }
[13:37:20.197]                 NAMES <- toupper(removed)
[13:37:20.197]                 for (kk in seq_along(NAMES)) {
[13:37:20.197]                   name <- removed[[kk]]
[13:37:20.197]                   NAME <- NAMES[[kk]]
[13:37:20.197]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.197]                     next
[13:37:20.197]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.197]                 }
[13:37:20.197]                 if (length(args) > 0) 
[13:37:20.197]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.197]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.197]             }
[13:37:20.197]             else {
[13:37:20.197]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.197]             }
[13:37:20.197]             {
[13:37:20.197]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.197]                   0L) {
[13:37:20.197]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.197]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.197]                   base::options(opts)
[13:37:20.197]                 }
[13:37:20.197]                 {
[13:37:20.197]                   {
[13:37:20.197]                     NULL
[13:37:20.197]                     RNGkind("Mersenne-Twister")
[13:37:20.197]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.197]                       inherits = FALSE)
[13:37:20.197]                   }
[13:37:20.197]                   options(future.plan = NULL)
[13:37:20.197]                   if (is.na(NA_character_)) 
[13:37:20.197]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.197]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.197]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.197]                     .init = FALSE)
[13:37:20.197]                 }
[13:37:20.197]             }
[13:37:20.197]         }
[13:37:20.197]     })
[13:37:20.197]     if (TRUE) {
[13:37:20.197]         base::sink(type = "output", split = FALSE)
[13:37:20.197]         if (TRUE) {
[13:37:20.197]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.197]         }
[13:37:20.197]         else {
[13:37:20.197]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.197]         }
[13:37:20.197]         base::close(...future.stdout)
[13:37:20.197]         ...future.stdout <- NULL
[13:37:20.197]     }
[13:37:20.197]     ...future.result$conditions <- ...future.conditions
[13:37:20.197]     ...future.result$finished <- base::Sys.time()
[13:37:20.197]     ...future.result
[13:37:20.197] }
[13:37:20.199] assign_globals() ...
[13:37:20.199] List of 2
[13:37:20.199]  $ nested   :List of 2
[13:37:20.199]   ..$ a:function (..., envir = parent.frame())  
[13:37:20.199]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.199]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.199]   ..$ b:function (..., envir = parent.frame())  
[13:37:20.199]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.199]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.199]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:20.199]  $ strategy2: chr "sequential"
[13:37:20.199]  - attr(*, "where")=List of 2
[13:37:20.199]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:20.199]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:20.199]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.199]  - attr(*, "resolved")= logi FALSE
[13:37:20.199]  - attr(*, "total_size")= num 23144
[13:37:20.199]  - attr(*, "already-done")= logi TRUE
[13:37:20.206] - copied ‘nested’ to environment
[13:37:20.206] - copied ‘strategy2’ to environment
[13:37:20.206] assign_globals() ... done
[13:37:20.206] plan(): Setting new future strategy stack:
[13:37:20.206] List of future strategies:
[13:37:20.206] 1. sequential:
[13:37:20.206]    - args: function (..., envir = parent.frame())
[13:37:20.206]    - tweaked: FALSE
[13:37:20.206]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.207] plan(): nbrOfWorkers() = 1
[13:37:20.244] plan(): Setting new future strategy stack:
[13:37:20.245] List of future strategies:
[13:37:20.245] 1. sequential:
[13:37:20.245]    - args: function (..., envir = parent.frame())
[13:37:20.245]    - tweaked: FALSE
[13:37:20.245]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.245] 2. sequential:
[13:37:20.245]    - args: function (..., envir = parent.frame())
[13:37:20.245]    - tweaked: FALSE
[13:37:20.245]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.245] plan(): nbrOfWorkers() = 1
[13:37:20.245] SequentialFuture started (and completed)
[13:37:20.245] signalConditions() ...
[13:37:20.245]  - include = ‘immediateCondition’
[13:37:20.245]  - exclude = 
[13:37:20.246]  - resignal = FALSE
[13:37:20.246]  - Number of conditions: 54
[13:37:20.246] signalConditions() ... done
[13:37:20.246] - Launch lazy future ... done
[13:37:20.246] run() for ‘SequentialFuture’ ... done
[13:37:20.246] signalConditions() ...
[13:37:20.246]  - include = ‘immediateCondition’
[13:37:20.246]  - exclude = 
[13:37:20.246]  - resignal = FALSE
[13:37:20.246]  - Number of conditions: 54
[13:37:20.247] signalConditions() ... done
[13:37:20.247] Future state: ‘finished’
[13:37:20.247] signalConditions() ...
[13:37:20.247]  - include = ‘condition’
[13:37:20.247]  - exclude = ‘immediateCondition’
[13:37:20.247]  - resignal = TRUE
[13:37:20.247]  - Number of conditions: 54
[13:37:20.247]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.208] getGlobalsAndPackages() ...
[13:37:20.247]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.208] Searching for globals...
[13:37:20.248]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.227] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:20.248]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.227] Searching for globals ... DONE
[13:37:20.248]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.227] Resolving globals: FALSE
[13:37:20.248]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.228] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:37:20.248]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.228] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:20.248]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.228] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:20.248]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.228] 
[13:37:20.248]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] getGlobalsAndPackages() ... DONE
[13:37:20.249]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] run() for ‘Future’ ...
[13:37:20.249]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] - state: ‘created’
[13:37:20.249]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.249]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.249]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.229] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.249]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘label’
[13:37:20.249]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘local’
[13:37:20.249]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘owner’
[13:37:20.250]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘envir’
[13:37:20.250]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘packages’
[13:37:20.250]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘gc’
[13:37:20.250]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘conditions’
[13:37:20.250]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘expr’
[13:37:20.250]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.230]   - Field: ‘uuid’
[13:37:20.250]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘seed’
[13:37:20.251]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘version’
[13:37:20.251]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘result’
[13:37:20.251]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘asynchronous’
[13:37:20.251]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘calls’
[13:37:20.251]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘globals’
[13:37:20.251]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘stdout’
[13:37:20.251]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘earlySignal’
[13:37:20.251]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘lazy’
[13:37:20.252]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.231]   - Field: ‘state’
[13:37:20.252]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.232] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.252]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.232] - Launch lazy future ...
[13:37:20.252]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.232] Packages needed by the future expression (n = 0): <none>
[13:37:20.252]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.232] Packages needed by future strategies (n = 0): <none>
[13:37:20.252]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.232] {
[13:37:20.232]     {
[13:37:20.232]         {
[13:37:20.232]             ...future.startTime <- base::Sys.time()
[13:37:20.232]             {
[13:37:20.232]                 {
[13:37:20.232]                   {
[13:37:20.232]                     base::local({
[13:37:20.232]                       has_future <- base::requireNamespace("future", 
[13:37:20.232]                         quietly = TRUE)
[13:37:20.232]                       if (has_future) {
[13:37:20.232]                         ns <- base::getNamespace("future")
[13:37:20.232]                         version <- ns[[".package"]][["version"]]
[13:37:20.232]                         if (is.null(version)) 
[13:37:20.232]                           version <- utils::packageVersion("future")
[13:37:20.232]                       }
[13:37:20.232]                       else {
[13:37:20.232]                         version <- NULL
[13:37:20.232]                       }
[13:37:20.232]                       if (!has_future || version < "1.8.0") {
[13:37:20.232]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.232]                           "", base::R.version$version.string), 
[13:37:20.232]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:20.232]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.232]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.232]                             "release", "version")], collapse = " "), 
[13:37:20.232]                           hostname = base::Sys.info()[["nodename"]])
[13:37:20.232]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.232]                           info)
[13:37:20.232]                         info <- base::paste(info, collapse = "; ")
[13:37:20.232]                         if (!has_future) {
[13:37:20.232]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.232]                             info)
[13:37:20.232]                         }
[13:37:20.232]                         else {
[13:37:20.232]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.232]                             info, version)
[13:37:20.232]                         }
[13:37:20.232]                         base::stop(msg)
[13:37:20.232]                       }
[13:37:20.232]                     })
[13:37:20.232]                   }
[13:37:20.232]                   ...future.strategy.old <- future::plan("list")
[13:37:20.232]                   options(future.plan = NULL)
[13:37:20.232]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.232]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:20.232]                 }
[13:37:20.232]                 ...future.workdir <- getwd()
[13:37:20.232]             }
[13:37:20.232]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.232]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.232]         }
[13:37:20.232]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.232]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.232]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.232]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.232]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.232]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.232]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.232]             base::names(...future.oldOptions))
[13:37:20.232]     }
[13:37:20.232]     if (FALSE) {
[13:37:20.232]     }
[13:37:20.232]     else {
[13:37:20.232]         if (TRUE) {
[13:37:20.232]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.232]                 open = "w")
[13:37:20.232]         }
[13:37:20.232]         else {
[13:37:20.232]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.232]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.232]         }
[13:37:20.232]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.232]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.232]             base::sink(type = "output", split = FALSE)
[13:37:20.232]             base::close(...future.stdout)
[13:37:20.232]         }, add = TRUE)
[13:37:20.232]     }
[13:37:20.232]     ...future.frame <- base::sys.nframe()
[13:37:20.232]     ...future.conditions <- base::list()
[13:37:20.232]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.232]     if (FALSE) {
[13:37:20.232]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.232]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.232]     }
[13:37:20.232]     ...future.result <- base::tryCatch({
[13:37:20.232]         base::withCallingHandlers({
[13:37:20.232]             ...future.value <- base::withVisible(base::local({
[13:37:20.232]                 b <- 2L
[13:37:20.232]                 plan_b <- future::plan("list")
[13:37:20.232]                 nested_b <- nested_a[-1]
[13:37:20.232]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:20.232]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.232]                   "sequential"))
[13:37:20.232]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:20.232]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:20.232]             }))
[13:37:20.232]             future::FutureResult(value = ...future.value$value, 
[13:37:20.232]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.232]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.232]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.232]                     ...future.globalenv.names))
[13:37:20.232]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.232]         }, condition = base::local({
[13:37:20.232]             c <- base::c
[13:37:20.232]             inherits <- base::inherits
[13:37:20.232]             invokeRestart <- base::invokeRestart
[13:37:20.232]             length <- base::length
[13:37:20.232]             list <- base::list
[13:37:20.232]             seq.int <- base::seq.int
[13:37:20.232]             signalCondition <- base::signalCondition
[13:37:20.232]             sys.calls <- base::sys.calls
[13:37:20.232]             `[[` <- base::`[[`
[13:37:20.232]             `+` <- base::`+`
[13:37:20.232]             `<<-` <- base::`<<-`
[13:37:20.232]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.232]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.232]                   3L)]
[13:37:20.232]             }
[13:37:20.232]             function(cond) {
[13:37:20.232]                 is_error <- inherits(cond, "error")
[13:37:20.232]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.232]                   NULL)
[13:37:20.232]                 if (is_error) {
[13:37:20.232]                   sessionInformation <- function() {
[13:37:20.232]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.232]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.232]                       search = base::search(), system = base::Sys.info())
[13:37:20.232]                   }
[13:37:20.232]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.232]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.232]                     cond$call), session = sessionInformation(), 
[13:37:20.232]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.232]                   signalCondition(cond)
[13:37:20.232]                 }
[13:37:20.232]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.232]                 "immediateCondition"))) {
[13:37:20.232]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.232]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.232]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.232]                   if (TRUE && !signal) {
[13:37:20.232]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.232]                     {
[13:37:20.232]                       inherits <- base::inherits
[13:37:20.232]                       invokeRestart <- base::invokeRestart
[13:37:20.232]                       is.null <- base::is.null
[13:37:20.232]                       muffled <- FALSE
[13:37:20.232]                       if (inherits(cond, "message")) {
[13:37:20.232]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.232]                         if (muffled) 
[13:37:20.232]                           invokeRestart("muffleMessage")
[13:37:20.232]                       }
[13:37:20.232]                       else if (inherits(cond, "warning")) {
[13:37:20.232]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.232]                         if (muffled) 
[13:37:20.232]                           invokeRestart("muffleWarning")
[13:37:20.232]                       }
[13:37:20.232]                       else if (inherits(cond, "condition")) {
[13:37:20.232]                         if (!is.null(pattern)) {
[13:37:20.232]                           computeRestarts <- base::computeRestarts
[13:37:20.232]                           grepl <- base::grepl
[13:37:20.232]                           restarts <- computeRestarts(cond)
[13:37:20.232]                           for (restart in restarts) {
[13:37:20.232]                             name <- restart$name
[13:37:20.232]                             if (is.null(name)) 
[13:37:20.232]                               next
[13:37:20.232]                             if (!grepl(pattern, name)) 
[13:37:20.232]                               next
[13:37:20.232]                             invokeRestart(restart)
[13:37:20.232]                             muffled <- TRUE
[13:37:20.232]                             break
[13:37:20.232]                           }
[13:37:20.232]                         }
[13:37:20.232]                       }
[13:37:20.232]                       invisible(muffled)
[13:37:20.232]                     }
[13:37:20.232]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.232]                   }
[13:37:20.232]                 }
[13:37:20.232]                 else {
[13:37:20.232]                   if (TRUE) {
[13:37:20.232]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.232]                     {
[13:37:20.232]                       inherits <- base::inherits
[13:37:20.232]                       invokeRestart <- base::invokeRestart
[13:37:20.232]                       is.null <- base::is.null
[13:37:20.232]                       muffled <- FALSE
[13:37:20.232]                       if (inherits(cond, "message")) {
[13:37:20.232]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.232]                         if (muffled) 
[13:37:20.232]                           invokeRestart("muffleMessage")
[13:37:20.232]                       }
[13:37:20.232]                       else if (inherits(cond, "warning")) {
[13:37:20.232]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.232]                         if (muffled) 
[13:37:20.232]                           invokeRestart("muffleWarning")
[13:37:20.232]                       }
[13:37:20.232]                       else if (inherits(cond, "condition")) {
[13:37:20.232]                         if (!is.null(pattern)) {
[13:37:20.232]                           computeRestarts <- base::computeRestarts
[13:37:20.232]                           grepl <- base::grepl
[13:37:20.232]                           restarts <- computeRestarts(cond)
[13:37:20.232]                           for (restart in restarts) {
[13:37:20.232]                             name <- restart$name
[13:37:20.232]                             if (is.null(name)) 
[13:37:20.232]                               next
[13:37:20.232]                             if (!grepl(pattern, name)) 
[13:37:20.232]                               next
[13:37:20.232]                             invokeRestart(restart)
[13:37:20.232]                             muffled <- TRUE
[13:37:20.232]                             break
[13:37:20.232]                           }
[13:37:20.232]                         }
[13:37:20.232]                       }
[13:37:20.232]                       invisible(muffled)
[13:37:20.232]                     }
[13:37:20.232]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.232]                   }
[13:37:20.232]                 }
[13:37:20.232]             }
[13:37:20.232]         }))
[13:37:20.232]     }, error = function(ex) {
[13:37:20.232]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.232]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.232]                 ...future.rng), started = ...future.startTime, 
[13:37:20.232]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.232]             version = "1.8"), class = "FutureResult")
[13:37:20.232]     }, finally = {
[13:37:20.232]         if (!identical(...future.workdir, getwd())) 
[13:37:20.232]             setwd(...future.workdir)
[13:37:20.232]         {
[13:37:20.232]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.232]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.232]             }
[13:37:20.232]             base::options(...future.oldOptions)
[13:37:20.232]             if (.Platform$OS.type == "windows") {
[13:37:20.232]                 old_names <- names(...future.oldEnvVars)
[13:37:20.232]                 envs <- base::Sys.getenv()
[13:37:20.232]                 names <- names(envs)
[13:37:20.232]                 common <- intersect(names, old_names)
[13:37:20.232]                 added <- setdiff(names, old_names)
[13:37:20.232]                 removed <- setdiff(old_names, names)
[13:37:20.232]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.232]                   envs[common]]
[13:37:20.232]                 NAMES <- toupper(changed)
[13:37:20.232]                 args <- list()
[13:37:20.232]                 for (kk in seq_along(NAMES)) {
[13:37:20.232]                   name <- changed[[kk]]
[13:37:20.232]                   NAME <- NAMES[[kk]]
[13:37:20.232]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.232]                     next
[13:37:20.232]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.232]                 }
[13:37:20.232]                 NAMES <- toupper(added)
[13:37:20.232]                 for (kk in seq_along(NAMES)) {
[13:37:20.232]                   name <- added[[kk]]
[13:37:20.232]                   NAME <- NAMES[[kk]]
[13:37:20.232]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.232]                     next
[13:37:20.232]                   args[[name]] <- ""
[13:37:20.232]                 }
[13:37:20.232]                 NAMES <- toupper(removed)
[13:37:20.232]                 for (kk in seq_along(NAMES)) {
[13:37:20.232]                   name <- removed[[kk]]
[13:37:20.232]                   NAME <- NAMES[[kk]]
[13:37:20.232]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.232]                     next
[13:37:20.232]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.232]                 }
[13:37:20.232]                 if (length(args) > 0) 
[13:37:20.232]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.232]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.232]             }
[13:37:20.232]             else {
[13:37:20.232]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.232]             }
[13:37:20.232]             {
[13:37:20.232]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.232]                   0L) {
[13:37:20.232]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.232]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.232]                   base::options(opts)
[13:37:20.232]                 }
[13:37:20.232]                 {
[13:37:20.232]                   {
[13:37:20.232]                     NULL
[13:37:20.232]                     RNGkind("Mersenne-Twister")
[13:37:20.232]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.232]                       inherits = FALSE)
[13:37:20.232]                   }
[13:37:20.232]                   options(future.plan = NULL)
[13:37:20.232]                   if (is.na(NA_character_)) 
[13:37:20.232]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.232]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.232]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.232]                     .init = FALSE)
[13:37:20.232]                 }
[13:37:20.232]             }
[13:37:20.232]         }
[13:37:20.232]     })
[13:37:20.232]     if (TRUE) {
[13:37:20.232]         base::sink(type = "output", split = FALSE)
[13:37:20.232]         if (TRUE) {
[13:37:20.232]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.232]         }
[13:37:20.232]         else {
[13:37:20.232]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.232]         }
[13:37:20.232]         base::close(...future.stdout)
[13:37:20.232]         ...future.stdout <- NULL
[13:37:20.232]     }
[13:37:20.232]     ...future.result$conditions <- ...future.conditions
[13:37:20.232]     ...future.result$finished <- base::Sys.time()
[13:37:20.232]     ...future.result
[13:37:20.232] }
[13:37:20.252]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.234] assign_globals() ...
[13:37:20.252]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.234] List of 3
[13:37:20.234]  $ nested_a:List of 1
[13:37:20.234]   ..$ b:function (..., envir = parent.frame())  
[13:37:20.234]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.234]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.234]  $ a       : int 1
[13:37:20.234]  $ plan_a  :List of 1
[13:37:20.234]   ..$ b:function (..., envir = parent.frame())  
[13:37:20.234]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.234]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.234]  - attr(*, "where")=List of 3
[13:37:20.234]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:37:20.234]   ..$ a       :<environment: R_EmptyEnv> 
[13:37:20.234]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:37:20.234]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.234]  - attr(*, "resolved")= logi FALSE
[13:37:20.234]  - attr(*, "total_size")= num 23080
[13:37:20.234]  - attr(*, "already-done")= logi TRUE
[13:37:20.253]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.240] - copied ‘nested_a’ to environment
[13:37:20.253]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.240] - copied ‘a’ to environment
[13:37:20.253]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.240] - copied ‘plan_a’ to environment
[13:37:20.253]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.240] assign_globals() ... done
[13:37:20.253]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.241] plan(): Setting new future strategy stack:
[13:37:20.253]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.241] List of future strategies:
[13:37:20.241] 1. sequential:
[13:37:20.241]    - args: function (..., envir = parent.frame())
[13:37:20.241]    - tweaked: FALSE
[13:37:20.241]    - call: NULL
[13:37:20.253]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.241] plan(): nbrOfWorkers() = 1
[13:37:20.254]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.242] plan(): Setting new future strategy stack:
[13:37:20.254]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.242] List of future strategies:
[13:37:20.242] 1. sequential:
[13:37:20.242]    - args: function (..., envir = parent.frame())
[13:37:20.242]    - tweaked: FALSE
[13:37:20.242]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.254]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.243] plan(): nbrOfWorkers() = 1
[13:37:20.254]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.243] SequentialFuture started (and completed)
[13:37:20.254]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.244] - Launch lazy future ... done
[13:37:20.254]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.244] run() for ‘SequentialFuture’ ... done
[13:37:20.254] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:20.259] getGlobalsAndPackages() ...
[13:37:20.259] Searching for globals...
[13:37:20.262] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:20.262] Searching for globals ... DONE
[13:37:20.262] Resolving globals: FALSE
[13:37:20.262] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:20.263] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:20.263] - globals: [1] ‘data’
[13:37:20.263] - packages: [1] ‘future’
[13:37:20.263] getGlobalsAndPackages() ... DONE
[13:37:20.263] run() for ‘Future’ ...
[13:37:20.264] - state: ‘created’
[13:37:20.264] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.264] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.264] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.264]   - Field: ‘label’
[13:37:20.264]   - Field: ‘local’
[13:37:20.264]   - Field: ‘owner’
[13:37:20.264]   - Field: ‘envir’
[13:37:20.265]   - Field: ‘packages’
[13:37:20.265]   - Field: ‘gc’
[13:37:20.265]   - Field: ‘conditions’
[13:37:20.265]   - Field: ‘expr’
[13:37:20.265]   - Field: ‘uuid’
[13:37:20.265]   - Field: ‘seed’
[13:37:20.265]   - Field: ‘version’
[13:37:20.265]   - Field: ‘result’
[13:37:20.265]   - Field: ‘asynchronous’
[13:37:20.265]   - Field: ‘calls’
[13:37:20.265]   - Field: ‘globals’
[13:37:20.265]   - Field: ‘stdout’
[13:37:20.266]   - Field: ‘earlySignal’
[13:37:20.266]   - Field: ‘lazy’
[13:37:20.266]   - Field: ‘state’
[13:37:20.266] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.266] - Launch lazy future ...
[13:37:20.266] Packages needed by the future expression (n = 1): ‘future’
[13:37:20.266] Packages needed by future strategies (n = 1): ‘future’
[13:37:20.267] {
[13:37:20.267]     {
[13:37:20.267]         {
[13:37:20.267]             ...future.startTime <- base::Sys.time()
[13:37:20.267]             {
[13:37:20.267]                 {
[13:37:20.267]                   {
[13:37:20.267]                     {
[13:37:20.267]                       base::local({
[13:37:20.267]                         has_future <- base::requireNamespace("future", 
[13:37:20.267]                           quietly = TRUE)
[13:37:20.267]                         if (has_future) {
[13:37:20.267]                           ns <- base::getNamespace("future")
[13:37:20.267]                           version <- ns[[".package"]][["version"]]
[13:37:20.267]                           if (is.null(version)) 
[13:37:20.267]                             version <- utils::packageVersion("future")
[13:37:20.267]                         }
[13:37:20.267]                         else {
[13:37:20.267]                           version <- NULL
[13:37:20.267]                         }
[13:37:20.267]                         if (!has_future || version < "1.8.0") {
[13:37:20.267]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.267]                             "", base::R.version$version.string), 
[13:37:20.267]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.267]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.267]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.267]                               "release", "version")], collapse = " "), 
[13:37:20.267]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.267]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.267]                             info)
[13:37:20.267]                           info <- base::paste(info, collapse = "; ")
[13:37:20.267]                           if (!has_future) {
[13:37:20.267]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.267]                               info)
[13:37:20.267]                           }
[13:37:20.267]                           else {
[13:37:20.267]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.267]                               info, version)
[13:37:20.267]                           }
[13:37:20.267]                           base::stop(msg)
[13:37:20.267]                         }
[13:37:20.267]                       })
[13:37:20.267]                     }
[13:37:20.267]                     base::local({
[13:37:20.267]                       for (pkg in "future") {
[13:37:20.267]                         base::loadNamespace(pkg)
[13:37:20.267]                         base::library(pkg, character.only = TRUE)
[13:37:20.267]                       }
[13:37:20.267]                     })
[13:37:20.267]                   }
[13:37:20.267]                   ...future.strategy.old <- future::plan("list")
[13:37:20.267]                   options(future.plan = NULL)
[13:37:20.267]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.267]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:20.267]                   {
[13:37:20.267]                     future <- SequentialFuture(..., envir = envir)
[13:37:20.267]                     if (!future$lazy) 
[13:37:20.267]                       future <- run(future)
[13:37:20.267]                     invisible(future)
[13:37:20.267]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:20.267]                 }
[13:37:20.267]                 ...future.workdir <- getwd()
[13:37:20.267]             }
[13:37:20.267]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.267]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.267]         }
[13:37:20.267]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.267]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.267]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.267]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.267]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.267]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.267]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.267]             base::names(...future.oldOptions))
[13:37:20.267]     }
[13:37:20.267]     if (FALSE) {
[13:37:20.267]     }
[13:37:20.267]     else {
[13:37:20.267]         if (TRUE) {
[13:37:20.267]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.267]                 open = "w")
[13:37:20.267]         }
[13:37:20.267]         else {
[13:37:20.267]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.267]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.267]         }
[13:37:20.267]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.267]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.267]             base::sink(type = "output", split = FALSE)
[13:37:20.267]             base::close(...future.stdout)
[13:37:20.267]         }, add = TRUE)
[13:37:20.267]     }
[13:37:20.267]     ...future.frame <- base::sys.nframe()
[13:37:20.267]     ...future.conditions <- base::list()
[13:37:20.267]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.267]     if (FALSE) {
[13:37:20.267]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.267]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.267]     }
[13:37:20.267]     ...future.result <- base::tryCatch({
[13:37:20.267]         base::withCallingHandlers({
[13:37:20.267]             ...future.value <- base::withVisible(base::local({
[13:37:20.267]                 value(future(subset(data, a == 2)))
[13:37:20.267]             }))
[13:37:20.267]             future::FutureResult(value = ...future.value$value, 
[13:37:20.267]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.267]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.267]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.267]                     ...future.globalenv.names))
[13:37:20.267]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.267]         }, condition = base::local({
[13:37:20.267]             c <- base::c
[13:37:20.267]             inherits <- base::inherits
[13:37:20.267]             invokeRestart <- base::invokeRestart
[13:37:20.267]             length <- base::length
[13:37:20.267]             list <- base::list
[13:37:20.267]             seq.int <- base::seq.int
[13:37:20.267]             signalCondition <- base::signalCondition
[13:37:20.267]             sys.calls <- base::sys.calls
[13:37:20.267]             `[[` <- base::`[[`
[13:37:20.267]             `+` <- base::`+`
[13:37:20.267]             `<<-` <- base::`<<-`
[13:37:20.267]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.267]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.267]                   3L)]
[13:37:20.267]             }
[13:37:20.267]             function(cond) {
[13:37:20.267]                 is_error <- inherits(cond, "error")
[13:37:20.267]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.267]                   NULL)
[13:37:20.267]                 if (is_error) {
[13:37:20.267]                   sessionInformation <- function() {
[13:37:20.267]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.267]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.267]                       search = base::search(), system = base::Sys.info())
[13:37:20.267]                   }
[13:37:20.267]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.267]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.267]                     cond$call), session = sessionInformation(), 
[13:37:20.267]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.267]                   signalCondition(cond)
[13:37:20.267]                 }
[13:37:20.267]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.267]                 "immediateCondition"))) {
[13:37:20.267]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.267]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.267]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.267]                   if (TRUE && !signal) {
[13:37:20.267]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.267]                     {
[13:37:20.267]                       inherits <- base::inherits
[13:37:20.267]                       invokeRestart <- base::invokeRestart
[13:37:20.267]                       is.null <- base::is.null
[13:37:20.267]                       muffled <- FALSE
[13:37:20.267]                       if (inherits(cond, "message")) {
[13:37:20.267]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.267]                         if (muffled) 
[13:37:20.267]                           invokeRestart("muffleMessage")
[13:37:20.267]                       }
[13:37:20.267]                       else if (inherits(cond, "warning")) {
[13:37:20.267]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.267]                         if (muffled) 
[13:37:20.267]                           invokeRestart("muffleWarning")
[13:37:20.267]                       }
[13:37:20.267]                       else if (inherits(cond, "condition")) {
[13:37:20.267]                         if (!is.null(pattern)) {
[13:37:20.267]                           computeRestarts <- base::computeRestarts
[13:37:20.267]                           grepl <- base::grepl
[13:37:20.267]                           restarts <- computeRestarts(cond)
[13:37:20.267]                           for (restart in restarts) {
[13:37:20.267]                             name <- restart$name
[13:37:20.267]                             if (is.null(name)) 
[13:37:20.267]                               next
[13:37:20.267]                             if (!grepl(pattern, name)) 
[13:37:20.267]                               next
[13:37:20.267]                             invokeRestart(restart)
[13:37:20.267]                             muffled <- TRUE
[13:37:20.267]                             break
[13:37:20.267]                           }
[13:37:20.267]                         }
[13:37:20.267]                       }
[13:37:20.267]                       invisible(muffled)
[13:37:20.267]                     }
[13:37:20.267]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.267]                   }
[13:37:20.267]                 }
[13:37:20.267]                 else {
[13:37:20.267]                   if (TRUE) {
[13:37:20.267]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.267]                     {
[13:37:20.267]                       inherits <- base::inherits
[13:37:20.267]                       invokeRestart <- base::invokeRestart
[13:37:20.267]                       is.null <- base::is.null
[13:37:20.267]                       muffled <- FALSE
[13:37:20.267]                       if (inherits(cond, "message")) {
[13:37:20.267]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.267]                         if (muffled) 
[13:37:20.267]                           invokeRestart("muffleMessage")
[13:37:20.267]                       }
[13:37:20.267]                       else if (inherits(cond, "warning")) {
[13:37:20.267]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.267]                         if (muffled) 
[13:37:20.267]                           invokeRestart("muffleWarning")
[13:37:20.267]                       }
[13:37:20.267]                       else if (inherits(cond, "condition")) {
[13:37:20.267]                         if (!is.null(pattern)) {
[13:37:20.267]                           computeRestarts <- base::computeRestarts
[13:37:20.267]                           grepl <- base::grepl
[13:37:20.267]                           restarts <- computeRestarts(cond)
[13:37:20.267]                           for (restart in restarts) {
[13:37:20.267]                             name <- restart$name
[13:37:20.267]                             if (is.null(name)) 
[13:37:20.267]                               next
[13:37:20.267]                             if (!grepl(pattern, name)) 
[13:37:20.267]                               next
[13:37:20.267]                             invokeRestart(restart)
[13:37:20.267]                             muffled <- TRUE
[13:37:20.267]                             break
[13:37:20.267]                           }
[13:37:20.267]                         }
[13:37:20.267]                       }
[13:37:20.267]                       invisible(muffled)
[13:37:20.267]                     }
[13:37:20.267]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.267]                   }
[13:37:20.267]                 }
[13:37:20.267]             }
[13:37:20.267]         }))
[13:37:20.267]     }, error = function(ex) {
[13:37:20.267]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.267]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.267]                 ...future.rng), started = ...future.startTime, 
[13:37:20.267]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.267]             version = "1.8"), class = "FutureResult")
[13:37:20.267]     }, finally = {
[13:37:20.267]         if (!identical(...future.workdir, getwd())) 
[13:37:20.267]             setwd(...future.workdir)
[13:37:20.267]         {
[13:37:20.267]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.267]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.267]             }
[13:37:20.267]             base::options(...future.oldOptions)
[13:37:20.267]             if (.Platform$OS.type == "windows") {
[13:37:20.267]                 old_names <- names(...future.oldEnvVars)
[13:37:20.267]                 envs <- base::Sys.getenv()
[13:37:20.267]                 names <- names(envs)
[13:37:20.267]                 common <- intersect(names, old_names)
[13:37:20.267]                 added <- setdiff(names, old_names)
[13:37:20.267]                 removed <- setdiff(old_names, names)
[13:37:20.267]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.267]                   envs[common]]
[13:37:20.267]                 NAMES <- toupper(changed)
[13:37:20.267]                 args <- list()
[13:37:20.267]                 for (kk in seq_along(NAMES)) {
[13:37:20.267]                   name <- changed[[kk]]
[13:37:20.267]                   NAME <- NAMES[[kk]]
[13:37:20.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.267]                     next
[13:37:20.267]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.267]                 }
[13:37:20.267]                 NAMES <- toupper(added)
[13:37:20.267]                 for (kk in seq_along(NAMES)) {
[13:37:20.267]                   name <- added[[kk]]
[13:37:20.267]                   NAME <- NAMES[[kk]]
[13:37:20.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.267]                     next
[13:37:20.267]                   args[[name]] <- ""
[13:37:20.267]                 }
[13:37:20.267]                 NAMES <- toupper(removed)
[13:37:20.267]                 for (kk in seq_along(NAMES)) {
[13:37:20.267]                   name <- removed[[kk]]
[13:37:20.267]                   NAME <- NAMES[[kk]]
[13:37:20.267]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.267]                     next
[13:37:20.267]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.267]                 }
[13:37:20.267]                 if (length(args) > 0) 
[13:37:20.267]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.267]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.267]             }
[13:37:20.267]             else {
[13:37:20.267]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.267]             }
[13:37:20.267]             {
[13:37:20.267]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.267]                   0L) {
[13:37:20.267]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.267]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.267]                   base::options(opts)
[13:37:20.267]                 }
[13:37:20.267]                 {
[13:37:20.267]                   {
[13:37:20.267]                     NULL
[13:37:20.267]                     RNGkind("Mersenne-Twister")
[13:37:20.267]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.267]                       inherits = FALSE)
[13:37:20.267]                   }
[13:37:20.267]                   options(future.plan = NULL)
[13:37:20.267]                   if (is.na(NA_character_)) 
[13:37:20.267]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.267]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.267]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.267]                     .init = FALSE)
[13:37:20.267]                 }
[13:37:20.267]             }
[13:37:20.267]         }
[13:37:20.267]     })
[13:37:20.267]     if (TRUE) {
[13:37:20.267]         base::sink(type = "output", split = FALSE)
[13:37:20.267]         if (TRUE) {
[13:37:20.267]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.267]         }
[13:37:20.267]         else {
[13:37:20.267]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.267]         }
[13:37:20.267]         base::close(...future.stdout)
[13:37:20.267]         ...future.stdout <- NULL
[13:37:20.267]     }
[13:37:20.267]     ...future.result$conditions <- ...future.conditions
[13:37:20.267]     ...future.result$finished <- base::Sys.time()
[13:37:20.267]     ...future.result
[13:37:20.267] }
[13:37:20.268] assign_globals() ...
[13:37:20.269] List of 1
[13:37:20.269]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:20.269]   ..$ a: int [1:3] 1 2 3
[13:37:20.269]   ..$ b: int [1:3] 3 2 1
[13:37:20.269]  - attr(*, "where")=List of 1
[13:37:20.269]   ..$ data:<environment: R_EmptyEnv> 
[13:37:20.269]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.269]  - attr(*, "resolved")= logi FALSE
[13:37:20.269]  - attr(*, "total_size")= num 128
[13:37:20.269]  - attr(*, "already-done")= logi TRUE
[13:37:20.272] - copied ‘data’ to environment
[13:37:20.272] assign_globals() ... done
[13:37:20.272] plan(): Setting new future strategy stack:
[13:37:20.272] List of future strategies:
[13:37:20.272] 1. sequential:
[13:37:20.272]    - args: function (..., envir = parent.frame())
[13:37:20.272]    - tweaked: FALSE
[13:37:20.272]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.272] plan(): nbrOfWorkers() = 1
[13:37:20.300] plan(): Setting new future strategy stack:
[13:37:20.300] List of future strategies:
[13:37:20.300] 1. sequential:
[13:37:20.300]    - args: function (..., envir = parent.frame())
[13:37:20.300]    - tweaked: FALSE
[13:37:20.300]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.300] 2. sequential:
[13:37:20.300]    - args: function (..., envir = parent.frame())
[13:37:20.300]    - tweaked: FALSE
[13:37:20.300]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.301] plan(): nbrOfWorkers() = 1
[13:37:20.301] SequentialFuture started (and completed)
[13:37:20.301] signalConditions() ...
[13:37:20.301]  - include = ‘immediateCondition’
[13:37:20.301]  - exclude = 
[13:37:20.301]  - resignal = FALSE
[13:37:20.301]  - Number of conditions: 52
[13:37:20.302] signalConditions() ... done
[13:37:20.302] - Launch lazy future ... done
[13:37:20.302] run() for ‘SequentialFuture’ ... done
[13:37:20.302] signalConditions() ...
[13:37:20.302]  - include = ‘immediateCondition’
[13:37:20.302]  - exclude = 
[13:37:20.302]  - resignal = FALSE
[13:37:20.302]  - Number of conditions: 52
[13:37:20.302] signalConditions() ... done
[13:37:20.303] Future state: ‘finished’
[13:37:20.303] signalConditions() ...
[13:37:20.303]  - include = ‘condition’
[13:37:20.303]  - exclude = ‘immediateCondition’
[13:37:20.303]  - resignal = TRUE
[13:37:20.303]  - Number of conditions: 52
[13:37:20.303]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.273] getGlobalsAndPackages() ...
[13:37:20.303]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.273] Searching for globals...
[13:37:20.303]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.287] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:20.303]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.287] Searching for globals ... DONE
[13:37:20.304]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.288] Resolving globals: FALSE
[13:37:20.304]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.288] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:20.304]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.288] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:20.305]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] - globals: [1] ‘data’
[13:37:20.305]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] 
[13:37:20.306]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] getGlobalsAndPackages() ... DONE
[13:37:20.306]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] run() for ‘Future’ ...
[13:37:20.306]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] - state: ‘created’
[13:37:20.306]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.289] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.306]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.306]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.306]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘label’
[13:37:20.307]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘local’
[13:37:20.307]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘owner’
[13:37:20.307]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘envir’
[13:37:20.307]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘packages’
[13:37:20.307]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘gc’
[13:37:20.307]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘conditions’
[13:37:20.307]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.290]   - Field: ‘expr’
[13:37:20.307]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘uuid’
[13:37:20.308]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘seed’
[13:37:20.308]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘version’
[13:37:20.308]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘result’
[13:37:20.308]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘asynchronous’
[13:37:20.308]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘calls’
[13:37:20.308]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘globals’
[13:37:20.308]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘stdout’
[13:37:20.309]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘earlySignal’
[13:37:20.309]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.291]   - Field: ‘lazy’
[13:37:20.309]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.292]   - Field: ‘state’
[13:37:20.309]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.292] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.309]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.292] - Launch lazy future ...
[13:37:20.309]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.292] Packages needed by the future expression (n = 0): <none>
[13:37:20.309]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.292] Packages needed by future strategies (n = 0): <none>
[13:37:20.309]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.293] {
[13:37:20.293]     {
[13:37:20.293]         {
[13:37:20.293]             ...future.startTime <- base::Sys.time()
[13:37:20.293]             {
[13:37:20.293]                 {
[13:37:20.293]                   {
[13:37:20.293]                     base::local({
[13:37:20.293]                       has_future <- base::requireNamespace("future", 
[13:37:20.293]                         quietly = TRUE)
[13:37:20.293]                       if (has_future) {
[13:37:20.293]                         ns <- base::getNamespace("future")
[13:37:20.293]                         version <- ns[[".package"]][["version"]]
[13:37:20.293]                         if (is.null(version)) 
[13:37:20.293]                           version <- utils::packageVersion("future")
[13:37:20.293]                       }
[13:37:20.293]                       else {
[13:37:20.293]                         version <- NULL
[13:37:20.293]                       }
[13:37:20.293]                       if (!has_future || version < "1.8.0") {
[13:37:20.293]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.293]                           "", base::R.version$version.string), 
[13:37:20.293]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:20.293]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.293]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.293]                             "release", "version")], collapse = " "), 
[13:37:20.293]                           hostname = base::Sys.info()[["nodename"]])
[13:37:20.293]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.293]                           info)
[13:37:20.293]                         info <- base::paste(info, collapse = "; ")
[13:37:20.293]                         if (!has_future) {
[13:37:20.293]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.293]                             info)
[13:37:20.293]                         }
[13:37:20.293]                         else {
[13:37:20.293]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.293]                             info, version)
[13:37:20.293]                         }
[13:37:20.293]                         base::stop(msg)
[13:37:20.293]                       }
[13:37:20.293]                     })
[13:37:20.293]                   }
[13:37:20.293]                   ...future.strategy.old <- future::plan("list")
[13:37:20.293]                   options(future.plan = NULL)
[13:37:20.293]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.293]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:20.293]                 }
[13:37:20.293]                 ...future.workdir <- getwd()
[13:37:20.293]             }
[13:37:20.293]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.293]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.293]         }
[13:37:20.293]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.293]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.293]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.293]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.293]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.293]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.293]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.293]             base::names(...future.oldOptions))
[13:37:20.293]     }
[13:37:20.293]     if (FALSE) {
[13:37:20.293]     }
[13:37:20.293]     else {
[13:37:20.293]         if (TRUE) {
[13:37:20.293]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.293]                 open = "w")
[13:37:20.293]         }
[13:37:20.293]         else {
[13:37:20.293]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.293]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.293]         }
[13:37:20.293]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.293]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.293]             base::sink(type = "output", split = FALSE)
[13:37:20.293]             base::close(...future.stdout)
[13:37:20.293]         }, add = TRUE)
[13:37:20.293]     }
[13:37:20.293]     ...future.frame <- base::sys.nframe()
[13:37:20.293]     ...future.conditions <- base::list()
[13:37:20.293]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.293]     if (FALSE) {
[13:37:20.293]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.293]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.293]     }
[13:37:20.293]     ...future.result <- base::tryCatch({
[13:37:20.293]         base::withCallingHandlers({
[13:37:20.293]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:37:20.293]                 a == 2)))
[13:37:20.293]             future::FutureResult(value = ...future.value$value, 
[13:37:20.293]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.293]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.293]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.293]                     ...future.globalenv.names))
[13:37:20.293]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.293]         }, condition = base::local({
[13:37:20.293]             c <- base::c
[13:37:20.293]             inherits <- base::inherits
[13:37:20.293]             invokeRestart <- base::invokeRestart
[13:37:20.293]             length <- base::length
[13:37:20.293]             list <- base::list
[13:37:20.293]             seq.int <- base::seq.int
[13:37:20.293]             signalCondition <- base::signalCondition
[13:37:20.293]             sys.calls <- base::sys.calls
[13:37:20.293]             `[[` <- base::`[[`
[13:37:20.293]             `+` <- base::`+`
[13:37:20.293]             `<<-` <- base::`<<-`
[13:37:20.293]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.293]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.293]                   3L)]
[13:37:20.293]             }
[13:37:20.293]             function(cond) {
[13:37:20.293]                 is_error <- inherits(cond, "error")
[13:37:20.293]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.293]                   NULL)
[13:37:20.293]                 if (is_error) {
[13:37:20.293]                   sessionInformation <- function() {
[13:37:20.293]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.293]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.293]                       search = base::search(), system = base::Sys.info())
[13:37:20.293]                   }
[13:37:20.293]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.293]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.293]                     cond$call), session = sessionInformation(), 
[13:37:20.293]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.293]                   signalCondition(cond)
[13:37:20.293]                 }
[13:37:20.293]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.293]                 "immediateCondition"))) {
[13:37:20.293]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.293]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.293]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.293]                   if (TRUE && !signal) {
[13:37:20.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.293]                     {
[13:37:20.293]                       inherits <- base::inherits
[13:37:20.293]                       invokeRestart <- base::invokeRestart
[13:37:20.293]                       is.null <- base::is.null
[13:37:20.293]                       muffled <- FALSE
[13:37:20.293]                       if (inherits(cond, "message")) {
[13:37:20.293]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.293]                         if (muffled) 
[13:37:20.293]                           invokeRestart("muffleMessage")
[13:37:20.293]                       }
[13:37:20.293]                       else if (inherits(cond, "warning")) {
[13:37:20.293]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.293]                         if (muffled) 
[13:37:20.293]                           invokeRestart("muffleWarning")
[13:37:20.293]                       }
[13:37:20.293]                       else if (inherits(cond, "condition")) {
[13:37:20.293]                         if (!is.null(pattern)) {
[13:37:20.293]                           computeRestarts <- base::computeRestarts
[13:37:20.293]                           grepl <- base::grepl
[13:37:20.293]                           restarts <- computeRestarts(cond)
[13:37:20.293]                           for (restart in restarts) {
[13:37:20.293]                             name <- restart$name
[13:37:20.293]                             if (is.null(name)) 
[13:37:20.293]                               next
[13:37:20.293]                             if (!grepl(pattern, name)) 
[13:37:20.293]                               next
[13:37:20.293]                             invokeRestart(restart)
[13:37:20.293]                             muffled <- TRUE
[13:37:20.293]                             break
[13:37:20.293]                           }
[13:37:20.293]                         }
[13:37:20.293]                       }
[13:37:20.293]                       invisible(muffled)
[13:37:20.293]                     }
[13:37:20.293]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.293]                   }
[13:37:20.293]                 }
[13:37:20.293]                 else {
[13:37:20.293]                   if (TRUE) {
[13:37:20.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.293]                     {
[13:37:20.293]                       inherits <- base::inherits
[13:37:20.293]                       invokeRestart <- base::invokeRestart
[13:37:20.293]                       is.null <- base::is.null
[13:37:20.293]                       muffled <- FALSE
[13:37:20.293]                       if (inherits(cond, "message")) {
[13:37:20.293]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.293]                         if (muffled) 
[13:37:20.293]                           invokeRestart("muffleMessage")
[13:37:20.293]                       }
[13:37:20.293]                       else if (inherits(cond, "warning")) {
[13:37:20.293]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.293]                         if (muffled) 
[13:37:20.293]                           invokeRestart("muffleWarning")
[13:37:20.293]                       }
[13:37:20.293]                       else if (inherits(cond, "condition")) {
[13:37:20.293]                         if (!is.null(pattern)) {
[13:37:20.293]                           computeRestarts <- base::computeRestarts
[13:37:20.293]                           grepl <- base::grepl
[13:37:20.293]                           restarts <- computeRestarts(cond)
[13:37:20.293]                           for (restart in restarts) {
[13:37:20.293]                             name <- restart$name
[13:37:20.293]                             if (is.null(name)) 
[13:37:20.293]                               next
[13:37:20.293]                             if (!grepl(pattern, name)) 
[13:37:20.293]                               next
[13:37:20.293]                             invokeRestart(restart)
[13:37:20.293]                             muffled <- TRUE
[13:37:20.293]                             break
[13:37:20.293]                           }
[13:37:20.293]                         }
[13:37:20.293]                       }
[13:37:20.293]                       invisible(muffled)
[13:37:20.293]                     }
[13:37:20.293]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.293]                   }
[13:37:20.293]                 }
[13:37:20.293]             }
[13:37:20.293]         }))
[13:37:20.293]     }, error = function(ex) {
[13:37:20.293]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.293]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.293]                 ...future.rng), started = ...future.startTime, 
[13:37:20.293]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.293]             version = "1.8"), class = "FutureResult")
[13:37:20.293]     }, finally = {
[13:37:20.293]         if (!identical(...future.workdir, getwd())) 
[13:37:20.293]             setwd(...future.workdir)
[13:37:20.293]         {
[13:37:20.293]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.293]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.293]             }
[13:37:20.293]             base::options(...future.oldOptions)
[13:37:20.293]             if (.Platform$OS.type == "windows") {
[13:37:20.293]                 old_names <- names(...future.oldEnvVars)
[13:37:20.293]                 envs <- base::Sys.getenv()
[13:37:20.293]                 names <- names(envs)
[13:37:20.293]                 common <- intersect(names, old_names)
[13:37:20.293]                 added <- setdiff(names, old_names)
[13:37:20.293]                 removed <- setdiff(old_names, names)
[13:37:20.293]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.293]                   envs[common]]
[13:37:20.293]                 NAMES <- toupper(changed)
[13:37:20.293]                 args <- list()
[13:37:20.293]                 for (kk in seq_along(NAMES)) {
[13:37:20.293]                   name <- changed[[kk]]
[13:37:20.293]                   NAME <- NAMES[[kk]]
[13:37:20.293]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.293]                     next
[13:37:20.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.293]                 }
[13:37:20.293]                 NAMES <- toupper(added)
[13:37:20.293]                 for (kk in seq_along(NAMES)) {
[13:37:20.293]                   name <- added[[kk]]
[13:37:20.293]                   NAME <- NAMES[[kk]]
[13:37:20.293]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.293]                     next
[13:37:20.293]                   args[[name]] <- ""
[13:37:20.293]                 }
[13:37:20.293]                 NAMES <- toupper(removed)
[13:37:20.293]                 for (kk in seq_along(NAMES)) {
[13:37:20.293]                   name <- removed[[kk]]
[13:37:20.293]                   NAME <- NAMES[[kk]]
[13:37:20.293]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.293]                     next
[13:37:20.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.293]                 }
[13:37:20.293]                 if (length(args) > 0) 
[13:37:20.293]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.293]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.293]             }
[13:37:20.293]             else {
[13:37:20.293]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.293]             }
[13:37:20.293]             {
[13:37:20.293]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.293]                   0L) {
[13:37:20.293]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.293]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.293]                   base::options(opts)
[13:37:20.293]                 }
[13:37:20.293]                 {
[13:37:20.293]                   {
[13:37:20.293]                     NULL
[13:37:20.293]                     RNGkind("Mersenne-Twister")
[13:37:20.293]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.293]                       inherits = FALSE)
[13:37:20.293]                   }
[13:37:20.293]                   options(future.plan = NULL)
[13:37:20.293]                   if (is.na(NA_character_)) 
[13:37:20.293]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.293]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.293]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.293]                     .init = FALSE)
[13:37:20.293]                 }
[13:37:20.293]             }
[13:37:20.293]         }
[13:37:20.293]     })
[13:37:20.293]     if (TRUE) {
[13:37:20.293]         base::sink(type = "output", split = FALSE)
[13:37:20.293]         if (TRUE) {
[13:37:20.293]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.293]         }
[13:37:20.293]         else {
[13:37:20.293]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.293]         }
[13:37:20.293]         base::close(...future.stdout)
[13:37:20.293]         ...future.stdout <- NULL
[13:37:20.293]     }
[13:37:20.293]     ...future.result$conditions <- ...future.conditions
[13:37:20.293]     ...future.result$finished <- base::Sys.time()
[13:37:20.293]     ...future.result
[13:37:20.293] }
[13:37:20.310]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.294] assign_globals() ...
[13:37:20.310]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.294] List of 1
[13:37:20.294]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:20.294]   ..$ a: int [1:3] 1 2 3
[13:37:20.294]   ..$ b: int [1:3] 3 2 1
[13:37:20.294]  - attr(*, "where")=List of 1
[13:37:20.294]   ..$ data:<environment: R_EmptyEnv> 
[13:37:20.294]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.294]  - attr(*, "resolved")= logi FALSE
[13:37:20.294]  - attr(*, "total_size")= num 128
[13:37:20.294]  - attr(*, "already-done")= logi TRUE
[13:37:20.310]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.297] - copied ‘data’ to environment
[13:37:20.310]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.297] assign_globals() ... done
[13:37:20.310]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.298] plan(): Setting new future strategy stack:
[13:37:20.310]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.298] List of future strategies:
[13:37:20.298] 1. sequential:
[13:37:20.298]    - args: function (..., envir = parent.frame())
[13:37:20.298]    - tweaked: FALSE
[13:37:20.298]    - call: NULL
[13:37:20.310]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.298] plan(): nbrOfWorkers() = 1
[13:37:20.311]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.299] plan(): Setting new future strategy stack:
[13:37:20.311]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.299] List of future strategies:
[13:37:20.299] 1. sequential:
[13:37:20.299]    - args: function (..., envir = parent.frame())
[13:37:20.299]    - tweaked: FALSE
[13:37:20.299]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.311]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.299] plan(): nbrOfWorkers() = 1
[13:37:20.311]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.300] SequentialFuture started (and completed)
[13:37:20.311]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.300] - Launch lazy future ... done
[13:37:20.311]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.300] run() for ‘SequentialFuture’ ... done
[13:37:20.311] signalConditions() ... done
- plan(list('sequential', 'sequential')) ... DONE
- plan(list('sequential', 'multicore')) ...
[13:37:20.312] plan(): Setting new future strategy stack:
[13:37:20.312] List of future strategies:
[13:37:20.312] 1. sequential:
[13:37:20.312]    - args: function (..., envir = parent.frame())
[13:37:20.312]    - tweaked: FALSE
[13:37:20.312]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.312] 2. multicore:
[13:37:20.312]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:20.312]    - tweaked: FALSE
[13:37:20.312]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.312] plan(): nbrOfWorkers() = 1
[13:37:20.313] getGlobalsAndPackages() ...
[13:37:20.313] Searching for globals...
[13:37:20.329] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:20.329] Searching for globals ... DONE
[13:37:20.329] Resolving globals: FALSE
[13:37:20.330] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:37:20.331] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:20.331] - globals: [2] ‘nested’, ‘strategy2’
[13:37:20.331] - packages: [1] ‘future’
[13:37:20.331] getGlobalsAndPackages() ... DONE
[13:37:20.331] run() for ‘Future’ ...
[13:37:20.332] - state: ‘created’
[13:37:20.332] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.332] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.332] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.332]   - Field: ‘label’
[13:37:20.332]   - Field: ‘local’
[13:37:20.332]   - Field: ‘owner’
[13:37:20.332]   - Field: ‘envir’
[13:37:20.333]   - Field: ‘packages’
[13:37:20.333]   - Field: ‘gc’
[13:37:20.333]   - Field: ‘conditions’
[13:37:20.333]   - Field: ‘expr’
[13:37:20.333]   - Field: ‘uuid’
[13:37:20.333]   - Field: ‘seed’
[13:37:20.333]   - Field: ‘version’
[13:37:20.333]   - Field: ‘result’
[13:37:20.333]   - Field: ‘asynchronous’
[13:37:20.333]   - Field: ‘calls’
[13:37:20.333]   - Field: ‘globals’
[13:37:20.333]   - Field: ‘stdout’
[13:37:20.334]   - Field: ‘earlySignal’
[13:37:20.334]   - Field: ‘lazy’
[13:37:20.334]   - Field: ‘state’
[13:37:20.334] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.334] - Launch lazy future ...
[13:37:20.334] Packages needed by the future expression (n = 1): ‘future’
[13:37:20.334] Packages needed by future strategies (n = 1): ‘future’
[13:37:20.335] {
[13:37:20.335]     {
[13:37:20.335]         {
[13:37:20.335]             ...future.startTime <- base::Sys.time()
[13:37:20.335]             {
[13:37:20.335]                 {
[13:37:20.335]                   {
[13:37:20.335]                     {
[13:37:20.335]                       base::local({
[13:37:20.335]                         has_future <- base::requireNamespace("future", 
[13:37:20.335]                           quietly = TRUE)
[13:37:20.335]                         if (has_future) {
[13:37:20.335]                           ns <- base::getNamespace("future")
[13:37:20.335]                           version <- ns[[".package"]][["version"]]
[13:37:20.335]                           if (is.null(version)) 
[13:37:20.335]                             version <- utils::packageVersion("future")
[13:37:20.335]                         }
[13:37:20.335]                         else {
[13:37:20.335]                           version <- NULL
[13:37:20.335]                         }
[13:37:20.335]                         if (!has_future || version < "1.8.0") {
[13:37:20.335]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.335]                             "", base::R.version$version.string), 
[13:37:20.335]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.335]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.335]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.335]                               "release", "version")], collapse = " "), 
[13:37:20.335]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.335]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.335]                             info)
[13:37:20.335]                           info <- base::paste(info, collapse = "; ")
[13:37:20.335]                           if (!has_future) {
[13:37:20.335]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.335]                               info)
[13:37:20.335]                           }
[13:37:20.335]                           else {
[13:37:20.335]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.335]                               info, version)
[13:37:20.335]                           }
[13:37:20.335]                           base::stop(msg)
[13:37:20.335]                         }
[13:37:20.335]                       })
[13:37:20.335]                     }
[13:37:20.335]                     base::local({
[13:37:20.335]                       for (pkg in "future") {
[13:37:20.335]                         base::loadNamespace(pkg)
[13:37:20.335]                         base::library(pkg, character.only = TRUE)
[13:37:20.335]                       }
[13:37:20.335]                     })
[13:37:20.335]                   }
[13:37:20.335]                   ...future.strategy.old <- future::plan("list")
[13:37:20.335]                   options(future.plan = NULL)
[13:37:20.335]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.335]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:20.335]                     envir = parent.frame()) 
[13:37:20.335]                   {
[13:37:20.335]                     default_workers <- missing(workers)
[13:37:20.335]                     if (is.function(workers)) 
[13:37:20.335]                       workers <- workers()
[13:37:20.335]                     workers <- structure(as.integer(workers), 
[13:37:20.335]                       class = class(workers))
[13:37:20.335]                     stop_if_not(is.finite(workers), workers >= 
[13:37:20.335]                       1L)
[13:37:20.335]                     if ((workers == 1L && !inherits(workers, 
[13:37:20.335]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:20.335]                       if (default_workers) 
[13:37:20.335]                         supportsMulticore(warn = TRUE)
[13:37:20.335]                       return(sequential(..., envir = envir))
[13:37:20.335]                     }
[13:37:20.335]                     oopts <- options(mc.cores = workers)
[13:37:20.335]                     on.exit(options(oopts))
[13:37:20.335]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:20.335]                       envir = envir)
[13:37:20.335]                     if (!future$lazy) 
[13:37:20.335]                       future <- run(future)
[13:37:20.335]                     invisible(future)
[13:37:20.335]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:20.335]                 }
[13:37:20.335]                 ...future.workdir <- getwd()
[13:37:20.335]             }
[13:37:20.335]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.335]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.335]         }
[13:37:20.335]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.335]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.335]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.335]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.335]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.335]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.335]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.335]             base::names(...future.oldOptions))
[13:37:20.335]     }
[13:37:20.335]     if (FALSE) {
[13:37:20.335]     }
[13:37:20.335]     else {
[13:37:20.335]         if (TRUE) {
[13:37:20.335]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.335]                 open = "w")
[13:37:20.335]         }
[13:37:20.335]         else {
[13:37:20.335]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.335]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.335]         }
[13:37:20.335]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.335]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.335]             base::sink(type = "output", split = FALSE)
[13:37:20.335]             base::close(...future.stdout)
[13:37:20.335]         }, add = TRUE)
[13:37:20.335]     }
[13:37:20.335]     ...future.frame <- base::sys.nframe()
[13:37:20.335]     ...future.conditions <- base::list()
[13:37:20.335]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.335]     if (FALSE) {
[13:37:20.335]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.335]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.335]     }
[13:37:20.335]     ...future.result <- base::tryCatch({
[13:37:20.335]         base::withCallingHandlers({
[13:37:20.335]             ...future.value <- base::withVisible(base::local({
[13:37:20.335]                 a <- 1L
[13:37:20.335]                 plan_a <- unclass(future::plan("list"))
[13:37:20.335]                 nested_a <- nested[-1]
[13:37:20.335]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:20.335]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.335]                   strategy2))
[13:37:20.335]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:20.335]                   "init") <- NULL
[13:37:20.335]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:20.335]                   "init") <- NULL
[13:37:20.335]                 stopifnot(all.equal(plan_a, nested_a))
[13:37:20.335]                 y %<-% {
[13:37:20.335]                   b <- 2L
[13:37:20.335]                   plan_b <- future::plan("list")
[13:37:20.335]                   nested_b <- nested_a[-1]
[13:37:20.335]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:20.335]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.335]                     "sequential"))
[13:37:20.335]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:20.335]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:20.335]                 }
[13:37:20.335]                 y
[13:37:20.335]             }))
[13:37:20.335]             future::FutureResult(value = ...future.value$value, 
[13:37:20.335]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.335]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.335]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.335]                     ...future.globalenv.names))
[13:37:20.335]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.335]         }, condition = base::local({
[13:37:20.335]             c <- base::c
[13:37:20.335]             inherits <- base::inherits
[13:37:20.335]             invokeRestart <- base::invokeRestart
[13:37:20.335]             length <- base::length
[13:37:20.335]             list <- base::list
[13:37:20.335]             seq.int <- base::seq.int
[13:37:20.335]             signalCondition <- base::signalCondition
[13:37:20.335]             sys.calls <- base::sys.calls
[13:37:20.335]             `[[` <- base::`[[`
[13:37:20.335]             `+` <- base::`+`
[13:37:20.335]             `<<-` <- base::`<<-`
[13:37:20.335]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.335]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.335]                   3L)]
[13:37:20.335]             }
[13:37:20.335]             function(cond) {
[13:37:20.335]                 is_error <- inherits(cond, "error")
[13:37:20.335]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.335]                   NULL)
[13:37:20.335]                 if (is_error) {
[13:37:20.335]                   sessionInformation <- function() {
[13:37:20.335]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.335]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.335]                       search = base::search(), system = base::Sys.info())
[13:37:20.335]                   }
[13:37:20.335]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.335]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.335]                     cond$call), session = sessionInformation(), 
[13:37:20.335]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.335]                   signalCondition(cond)
[13:37:20.335]                 }
[13:37:20.335]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.335]                 "immediateCondition"))) {
[13:37:20.335]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.335]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.335]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.335]                   if (TRUE && !signal) {
[13:37:20.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.335]                     {
[13:37:20.335]                       inherits <- base::inherits
[13:37:20.335]                       invokeRestart <- base::invokeRestart
[13:37:20.335]                       is.null <- base::is.null
[13:37:20.335]                       muffled <- FALSE
[13:37:20.335]                       if (inherits(cond, "message")) {
[13:37:20.335]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.335]                         if (muffled) 
[13:37:20.335]                           invokeRestart("muffleMessage")
[13:37:20.335]                       }
[13:37:20.335]                       else if (inherits(cond, "warning")) {
[13:37:20.335]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.335]                         if (muffled) 
[13:37:20.335]                           invokeRestart("muffleWarning")
[13:37:20.335]                       }
[13:37:20.335]                       else if (inherits(cond, "condition")) {
[13:37:20.335]                         if (!is.null(pattern)) {
[13:37:20.335]                           computeRestarts <- base::computeRestarts
[13:37:20.335]                           grepl <- base::grepl
[13:37:20.335]                           restarts <- computeRestarts(cond)
[13:37:20.335]                           for (restart in restarts) {
[13:37:20.335]                             name <- restart$name
[13:37:20.335]                             if (is.null(name)) 
[13:37:20.335]                               next
[13:37:20.335]                             if (!grepl(pattern, name)) 
[13:37:20.335]                               next
[13:37:20.335]                             invokeRestart(restart)
[13:37:20.335]                             muffled <- TRUE
[13:37:20.335]                             break
[13:37:20.335]                           }
[13:37:20.335]                         }
[13:37:20.335]                       }
[13:37:20.335]                       invisible(muffled)
[13:37:20.335]                     }
[13:37:20.335]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.335]                   }
[13:37:20.335]                 }
[13:37:20.335]                 else {
[13:37:20.335]                   if (TRUE) {
[13:37:20.335]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.335]                     {
[13:37:20.335]                       inherits <- base::inherits
[13:37:20.335]                       invokeRestart <- base::invokeRestart
[13:37:20.335]                       is.null <- base::is.null
[13:37:20.335]                       muffled <- FALSE
[13:37:20.335]                       if (inherits(cond, "message")) {
[13:37:20.335]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.335]                         if (muffled) 
[13:37:20.335]                           invokeRestart("muffleMessage")
[13:37:20.335]                       }
[13:37:20.335]                       else if (inherits(cond, "warning")) {
[13:37:20.335]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.335]                         if (muffled) 
[13:37:20.335]                           invokeRestart("muffleWarning")
[13:37:20.335]                       }
[13:37:20.335]                       else if (inherits(cond, "condition")) {
[13:37:20.335]                         if (!is.null(pattern)) {
[13:37:20.335]                           computeRestarts <- base::computeRestarts
[13:37:20.335]                           grepl <- base::grepl
[13:37:20.335]                           restarts <- computeRestarts(cond)
[13:37:20.335]                           for (restart in restarts) {
[13:37:20.335]                             name <- restart$name
[13:37:20.335]                             if (is.null(name)) 
[13:37:20.335]                               next
[13:37:20.335]                             if (!grepl(pattern, name)) 
[13:37:20.335]                               next
[13:37:20.335]                             invokeRestart(restart)
[13:37:20.335]                             muffled <- TRUE
[13:37:20.335]                             break
[13:37:20.335]                           }
[13:37:20.335]                         }
[13:37:20.335]                       }
[13:37:20.335]                       invisible(muffled)
[13:37:20.335]                     }
[13:37:20.335]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.335]                   }
[13:37:20.335]                 }
[13:37:20.335]             }
[13:37:20.335]         }))
[13:37:20.335]     }, error = function(ex) {
[13:37:20.335]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.335]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.335]                 ...future.rng), started = ...future.startTime, 
[13:37:20.335]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.335]             version = "1.8"), class = "FutureResult")
[13:37:20.335]     }, finally = {
[13:37:20.335]         if (!identical(...future.workdir, getwd())) 
[13:37:20.335]             setwd(...future.workdir)
[13:37:20.335]         {
[13:37:20.335]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.335]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.335]             }
[13:37:20.335]             base::options(...future.oldOptions)
[13:37:20.335]             if (.Platform$OS.type == "windows") {
[13:37:20.335]                 old_names <- names(...future.oldEnvVars)
[13:37:20.335]                 envs <- base::Sys.getenv()
[13:37:20.335]                 names <- names(envs)
[13:37:20.335]                 common <- intersect(names, old_names)
[13:37:20.335]                 added <- setdiff(names, old_names)
[13:37:20.335]                 removed <- setdiff(old_names, names)
[13:37:20.335]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.335]                   envs[common]]
[13:37:20.335]                 NAMES <- toupper(changed)
[13:37:20.335]                 args <- list()
[13:37:20.335]                 for (kk in seq_along(NAMES)) {
[13:37:20.335]                   name <- changed[[kk]]
[13:37:20.335]                   NAME <- NAMES[[kk]]
[13:37:20.335]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.335]                     next
[13:37:20.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.335]                 }
[13:37:20.335]                 NAMES <- toupper(added)
[13:37:20.335]                 for (kk in seq_along(NAMES)) {
[13:37:20.335]                   name <- added[[kk]]
[13:37:20.335]                   NAME <- NAMES[[kk]]
[13:37:20.335]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.335]                     next
[13:37:20.335]                   args[[name]] <- ""
[13:37:20.335]                 }
[13:37:20.335]                 NAMES <- toupper(removed)
[13:37:20.335]                 for (kk in seq_along(NAMES)) {
[13:37:20.335]                   name <- removed[[kk]]
[13:37:20.335]                   NAME <- NAMES[[kk]]
[13:37:20.335]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.335]                     next
[13:37:20.335]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.335]                 }
[13:37:20.335]                 if (length(args) > 0) 
[13:37:20.335]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.335]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.335]             }
[13:37:20.335]             else {
[13:37:20.335]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.335]             }
[13:37:20.335]             {
[13:37:20.335]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.335]                   0L) {
[13:37:20.335]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.335]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.335]                   base::options(opts)
[13:37:20.335]                 }
[13:37:20.335]                 {
[13:37:20.335]                   {
[13:37:20.335]                     NULL
[13:37:20.335]                     RNGkind("Mersenne-Twister")
[13:37:20.335]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.335]                       inherits = FALSE)
[13:37:20.335]                   }
[13:37:20.335]                   options(future.plan = NULL)
[13:37:20.335]                   if (is.na(NA_character_)) 
[13:37:20.335]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.335]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.335]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.335]                     .init = FALSE)
[13:37:20.335]                 }
[13:37:20.335]             }
[13:37:20.335]         }
[13:37:20.335]     })
[13:37:20.335]     if (TRUE) {
[13:37:20.335]         base::sink(type = "output", split = FALSE)
[13:37:20.335]         if (TRUE) {
[13:37:20.335]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.335]         }
[13:37:20.335]         else {
[13:37:20.335]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.335]         }
[13:37:20.335]         base::close(...future.stdout)
[13:37:20.335]         ...future.stdout <- NULL
[13:37:20.335]     }
[13:37:20.335]     ...future.result$conditions <- ...future.conditions
[13:37:20.335]     ...future.result$finished <- base::Sys.time()
[13:37:20.335]     ...future.result
[13:37:20.335] }
[13:37:20.337] assign_globals() ...
[13:37:20.337] List of 2
[13:37:20.337]  $ nested   :List of 2
[13:37:20.337]   ..$ a:function (..., envir = parent.frame())  
[13:37:20.337]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.337]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.337]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:20.337]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:20.337]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.337]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:20.337]  $ strategy2: chr "multicore"
[13:37:20.337]  - attr(*, "where")=List of 2
[13:37:20.337]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:20.337]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:20.337]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.337]  - attr(*, "resolved")= logi FALSE
[13:37:20.337]  - attr(*, "total_size")= num 59224
[13:37:20.337]  - attr(*, "already-done")= logi TRUE
[13:37:20.341] - copied ‘nested’ to environment
[13:37:20.341] - copied ‘strategy2’ to environment
[13:37:20.341] assign_globals() ... done
[13:37:20.342] plan(): Setting new future strategy stack:
[13:37:20.342] List of future strategies:
[13:37:20.342] 1. multicore:
[13:37:20.342]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:20.342]    - tweaked: FALSE
[13:37:20.342]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.347] plan(): nbrOfWorkers() = 2
[13:37:20.409] plan(): Setting new future strategy stack:
[13:37:20.409] List of future strategies:
[13:37:20.409] 1. sequential:
[13:37:20.409]    - args: function (..., envir = parent.frame())
[13:37:20.409]    - tweaked: FALSE
[13:37:20.409]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.409] 2. multicore:
[13:37:20.409]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:20.409]    - tweaked: FALSE
[13:37:20.409]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.410] plan(): nbrOfWorkers() = 1
[13:37:20.410] SequentialFuture started (and completed)
[13:37:20.410] signalConditions() ...
[13:37:20.410]  - include = ‘immediateCondition’
[13:37:20.410]  - exclude = 
[13:37:20.411]  - resignal = FALSE
[13:37:20.411]  - Number of conditions: 57
[13:37:20.411] signalConditions() ... done
[13:37:20.411] - Launch lazy future ... done
[13:37:20.411] run() for ‘SequentialFuture’ ... done
[13:37:20.411] signalConditions() ...
[13:37:20.412]  - include = ‘immediateCondition’
[13:37:20.412]  - exclude = 
[13:37:20.412]  - resignal = FALSE
[13:37:20.412]  - Number of conditions: 57
[13:37:20.412] signalConditions() ... done
[13:37:20.412] Future state: ‘finished’
[13:37:20.412] signalConditions() ...
[13:37:20.412]  - include = ‘condition’
[13:37:20.413]  - exclude = ‘immediateCondition’
[13:37:20.413]  - resignal = TRUE
[13:37:20.413]  - Number of conditions: 57
[13:37:20.413]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.348] getGlobalsAndPackages() ...
[13:37:20.413]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.348] Searching for globals...
[13:37:20.413]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.368] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:20.413]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.368] Searching for globals ... DONE
[13:37:20.414]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.369] Resolving globals: FALSE
[13:37:20.414]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.370] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:37:20.414]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.370] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:20.414]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.370] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:20.414]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.371] 
[13:37:20.414]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.371] getGlobalsAndPackages() ... DONE
[13:37:20.415]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.371] run() for ‘Future’ ...
[13:37:20.415]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.371] - state: ‘created’
[13:37:20.415]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.371] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:20.415]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.375] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:20.415]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.375] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:20.415]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.375]   - Field: ‘label’
[13:37:20.416]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘local’
[13:37:20.416]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘owner’
[13:37:20.416]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘envir’
[13:37:20.416]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘workers’
[13:37:20.416]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘packages’
[13:37:20.416]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘gc’
[13:37:20.416]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘job’
[13:37:20.417]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘conditions’
[13:37:20.417]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.376]   - Field: ‘expr’
[13:37:20.417]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘uuid’
[13:37:20.417]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘seed’
[13:37:20.417]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘version’
[13:37:20.417]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘result’
[13:37:20.418]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘asynchronous’
[13:37:20.418]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘calls’
[13:37:20.418]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘globals’
[13:37:20.418]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘stdout’
[13:37:20.418]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘earlySignal’
[13:37:20.418]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.377]   - Field: ‘lazy’
[13:37:20.419]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.378]   - Field: ‘state’
[13:37:20.419]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.378] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:20.419]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.378] - Launch lazy future ...
[13:37:20.419]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.379] Packages needed by the future expression (n = 0): <none>
[13:37:20.419]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.379] Packages needed by future strategies (n = 0): <none>
[13:37:20.419]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.379] {
[13:37:20.379]     {
[13:37:20.379]         {
[13:37:20.379]             ...future.startTime <- base::Sys.time()
[13:37:20.379]             {
[13:37:20.379]                 {
[13:37:20.379]                   {
[13:37:20.379]                     {
[13:37:20.379]                       base::local({
[13:37:20.379]                         has_future <- base::requireNamespace("future", 
[13:37:20.379]                           quietly = TRUE)
[13:37:20.379]                         if (has_future) {
[13:37:20.379]                           ns <- base::getNamespace("future")
[13:37:20.379]                           version <- ns[[".package"]][["version"]]
[13:37:20.379]                           if (is.null(version)) 
[13:37:20.379]                             version <- utils::packageVersion("future")
[13:37:20.379]                         }
[13:37:20.379]                         else {
[13:37:20.379]                           version <- NULL
[13:37:20.379]                         }
[13:37:20.379]                         if (!has_future || version < "1.8.0") {
[13:37:20.379]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.379]                             "", base::R.version$version.string), 
[13:37:20.379]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.379]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.379]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.379]                               "release", "version")], collapse = " "), 
[13:37:20.379]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.379]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.379]                             info)
[13:37:20.379]                           info <- base::paste(info, collapse = "; ")
[13:37:20.379]                           if (!has_future) {
[13:37:20.379]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.379]                               info)
[13:37:20.379]                           }
[13:37:20.379]                           else {
[13:37:20.379]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.379]                               info, version)
[13:37:20.379]                           }
[13:37:20.379]                           base::stop(msg)
[13:37:20.379]                         }
[13:37:20.379]                       })
[13:37:20.379]                     }
[13:37:20.379]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:20.379]                     base::options(mc.cores = 1L)
[13:37:20.379]                   }
[13:37:20.379]                   ...future.strategy.old <- future::plan("list")
[13:37:20.379]                   options(future.plan = NULL)
[13:37:20.379]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.379]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:20.379]                 }
[13:37:20.379]                 ...future.workdir <- getwd()
[13:37:20.379]             }
[13:37:20.379]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.379]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.379]         }
[13:37:20.379]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.379]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.379]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.379]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.379]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.379]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.379]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.379]             base::names(...future.oldOptions))
[13:37:20.379]     }
[13:37:20.379]     if (FALSE) {
[13:37:20.379]     }
[13:37:20.379]     else {
[13:37:20.379]         if (TRUE) {
[13:37:20.379]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.379]                 open = "w")
[13:37:20.379]         }
[13:37:20.379]         else {
[13:37:20.379]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.379]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.379]         }
[13:37:20.379]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.379]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.379]             base::sink(type = "output", split = FALSE)
[13:37:20.379]             base::close(...future.stdout)
[13:37:20.379]         }, add = TRUE)
[13:37:20.379]     }
[13:37:20.379]     ...future.frame <- base::sys.nframe()
[13:37:20.379]     ...future.conditions <- base::list()
[13:37:20.379]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.379]     if (FALSE) {
[13:37:20.379]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.379]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.379]     }
[13:37:20.379]     ...future.result <- base::tryCatch({
[13:37:20.379]         base::withCallingHandlers({
[13:37:20.379]             ...future.value <- base::withVisible(base::local({
[13:37:20.379]                 withCallingHandlers({
[13:37:20.379]                   {
[13:37:20.379]                     b <- 2L
[13:37:20.379]                     plan_b <- future::plan("list")
[13:37:20.379]                     nested_b <- nested_a[-1]
[13:37:20.379]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:20.379]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.379]                       "sequential"))
[13:37:20.379]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:20.379]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:20.379]                   }
[13:37:20.379]                 }, immediateCondition = function(cond) {
[13:37:20.379]                   save_rds <- function (object, pathname, ...) 
[13:37:20.379]                   {
[13:37:20.379]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:20.379]                     if (file_test("-f", pathname_tmp)) {
[13:37:20.379]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.379]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:20.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.379]                         fi_tmp[["mtime"]])
[13:37:20.379]                     }
[13:37:20.379]                     tryCatch({
[13:37:20.379]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:20.379]                     }, error = function(ex) {
[13:37:20.379]                       msg <- conditionMessage(ex)
[13:37:20.379]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.379]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:20.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.379]                         fi_tmp[["mtime"]], msg)
[13:37:20.379]                       ex$message <- msg
[13:37:20.379]                       stop(ex)
[13:37:20.379]                     })
[13:37:20.379]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:20.379]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:20.379]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:20.379]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.379]                       fi <- file.info(pathname)
[13:37:20.379]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:20.379]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.379]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:20.379]                         fi[["size"]], fi[["mtime"]])
[13:37:20.379]                       stop(msg)
[13:37:20.379]                     }
[13:37:20.379]                     invisible(pathname)
[13:37:20.379]                   }
[13:37:20.379]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:20.379]                     rootPath = tempdir()) 
[13:37:20.379]                   {
[13:37:20.379]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:20.379]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:20.379]                       tmpdir = path, fileext = ".rds")
[13:37:20.379]                     save_rds(obj, file)
[13:37:20.379]                   }
[13:37:20.379]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:20.379]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.379]                   {
[13:37:20.379]                     inherits <- base::inherits
[13:37:20.379]                     invokeRestart <- base::invokeRestart
[13:37:20.379]                     is.null <- base::is.null
[13:37:20.379]                     muffled <- FALSE
[13:37:20.379]                     if (inherits(cond, "message")) {
[13:37:20.379]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:20.379]                       if (muffled) 
[13:37:20.379]                         invokeRestart("muffleMessage")
[13:37:20.379]                     }
[13:37:20.379]                     else if (inherits(cond, "warning")) {
[13:37:20.379]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:20.379]                       if (muffled) 
[13:37:20.379]                         invokeRestart("muffleWarning")
[13:37:20.379]                     }
[13:37:20.379]                     else if (inherits(cond, "condition")) {
[13:37:20.379]                       if (!is.null(pattern)) {
[13:37:20.379]                         computeRestarts <- base::computeRestarts
[13:37:20.379]                         grepl <- base::grepl
[13:37:20.379]                         restarts <- computeRestarts(cond)
[13:37:20.379]                         for (restart in restarts) {
[13:37:20.379]                           name <- restart$name
[13:37:20.379]                           if (is.null(name)) 
[13:37:20.379]                             next
[13:37:20.379]                           if (!grepl(pattern, name)) 
[13:37:20.379]                             next
[13:37:20.379]                           invokeRestart(restart)
[13:37:20.379]                           muffled <- TRUE
[13:37:20.379]                           break
[13:37:20.379]                         }
[13:37:20.379]                       }
[13:37:20.379]                     }
[13:37:20.379]                     invisible(muffled)
[13:37:20.379]                   }
[13:37:20.379]                   muffleCondition(cond)
[13:37:20.379]                 })
[13:37:20.379]             }))
[13:37:20.379]             future::FutureResult(value = ...future.value$value, 
[13:37:20.379]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.379]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.379]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.379]                     ...future.globalenv.names))
[13:37:20.379]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.379]         }, condition = base::local({
[13:37:20.379]             c <- base::c
[13:37:20.379]             inherits <- base::inherits
[13:37:20.379]             invokeRestart <- base::invokeRestart
[13:37:20.379]             length <- base::length
[13:37:20.379]             list <- base::list
[13:37:20.379]             seq.int <- base::seq.int
[13:37:20.379]             signalCondition <- base::signalCondition
[13:37:20.379]             sys.calls <- base::sys.calls
[13:37:20.379]             `[[` <- base::`[[`
[13:37:20.379]             `+` <- base::`+`
[13:37:20.379]             `<<-` <- base::`<<-`
[13:37:20.379]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.379]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.379]                   3L)]
[13:37:20.379]             }
[13:37:20.379]             function(cond) {
[13:37:20.379]                 is_error <- inherits(cond, "error")
[13:37:20.379]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.379]                   NULL)
[13:37:20.379]                 if (is_error) {
[13:37:20.379]                   sessionInformation <- function() {
[13:37:20.379]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.379]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.379]                       search = base::search(), system = base::Sys.info())
[13:37:20.379]                   }
[13:37:20.379]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.379]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.379]                     cond$call), session = sessionInformation(), 
[13:37:20.379]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.379]                   signalCondition(cond)
[13:37:20.379]                 }
[13:37:20.379]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.379]                 "immediateCondition"))) {
[13:37:20.379]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.379]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.379]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.379]                   if (TRUE && !signal) {
[13:37:20.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.379]                     {
[13:37:20.379]                       inherits <- base::inherits
[13:37:20.379]                       invokeRestart <- base::invokeRestart
[13:37:20.379]                       is.null <- base::is.null
[13:37:20.379]                       muffled <- FALSE
[13:37:20.379]                       if (inherits(cond, "message")) {
[13:37:20.379]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.379]                         if (muffled) 
[13:37:20.379]                           invokeRestart("muffleMessage")
[13:37:20.379]                       }
[13:37:20.379]                       else if (inherits(cond, "warning")) {
[13:37:20.379]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.379]                         if (muffled) 
[13:37:20.379]                           invokeRestart("muffleWarning")
[13:37:20.379]                       }
[13:37:20.379]                       else if (inherits(cond, "condition")) {
[13:37:20.379]                         if (!is.null(pattern)) {
[13:37:20.379]                           computeRestarts <- base::computeRestarts
[13:37:20.379]                           grepl <- base::grepl
[13:37:20.379]                           restarts <- computeRestarts(cond)
[13:37:20.379]                           for (restart in restarts) {
[13:37:20.379]                             name <- restart$name
[13:37:20.379]                             if (is.null(name)) 
[13:37:20.379]                               next
[13:37:20.379]                             if (!grepl(pattern, name)) 
[13:37:20.379]                               next
[13:37:20.379]                             invokeRestart(restart)
[13:37:20.379]                             muffled <- TRUE
[13:37:20.379]                             break
[13:37:20.379]                           }
[13:37:20.379]                         }
[13:37:20.379]                       }
[13:37:20.379]                       invisible(muffled)
[13:37:20.379]                     }
[13:37:20.379]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.379]                   }
[13:37:20.379]                 }
[13:37:20.379]                 else {
[13:37:20.379]                   if (TRUE) {
[13:37:20.379]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.379]                     {
[13:37:20.379]                       inherits <- base::inherits
[13:37:20.379]                       invokeRestart <- base::invokeRestart
[13:37:20.379]                       is.null <- base::is.null
[13:37:20.379]                       muffled <- FALSE
[13:37:20.379]                       if (inherits(cond, "message")) {
[13:37:20.379]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.379]                         if (muffled) 
[13:37:20.379]                           invokeRestart("muffleMessage")
[13:37:20.379]                       }
[13:37:20.379]                       else if (inherits(cond, "warning")) {
[13:37:20.379]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.379]                         if (muffled) 
[13:37:20.379]                           invokeRestart("muffleWarning")
[13:37:20.379]                       }
[13:37:20.379]                       else if (inherits(cond, "condition")) {
[13:37:20.379]                         if (!is.null(pattern)) {
[13:37:20.379]                           computeRestarts <- base::computeRestarts
[13:37:20.379]                           grepl <- base::grepl
[13:37:20.379]                           restarts <- computeRestarts(cond)
[13:37:20.379]                           for (restart in restarts) {
[13:37:20.379]                             name <- restart$name
[13:37:20.379]                             if (is.null(name)) 
[13:37:20.379]                               next
[13:37:20.379]                             if (!grepl(pattern, name)) 
[13:37:20.379]                               next
[13:37:20.379]                             invokeRestart(restart)
[13:37:20.379]                             muffled <- TRUE
[13:37:20.379]                             break
[13:37:20.379]                           }
[13:37:20.379]                         }
[13:37:20.379]                       }
[13:37:20.379]                       invisible(muffled)
[13:37:20.379]                     }
[13:37:20.379]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.379]                   }
[13:37:20.379]                 }
[13:37:20.379]             }
[13:37:20.379]         }))
[13:37:20.379]     }, error = function(ex) {
[13:37:20.379]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.379]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.379]                 ...future.rng), started = ...future.startTime, 
[13:37:20.379]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.379]             version = "1.8"), class = "FutureResult")
[13:37:20.379]     }, finally = {
[13:37:20.379]         if (!identical(...future.workdir, getwd())) 
[13:37:20.379]             setwd(...future.workdir)
[13:37:20.379]         {
[13:37:20.379]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.379]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.379]             }
[13:37:20.379]             base::options(...future.oldOptions)
[13:37:20.379]             if (.Platform$OS.type == "windows") {
[13:37:20.379]                 old_names <- names(...future.oldEnvVars)
[13:37:20.379]                 envs <- base::Sys.getenv()
[13:37:20.379]                 names <- names(envs)
[13:37:20.379]                 common <- intersect(names, old_names)
[13:37:20.379]                 added <- setdiff(names, old_names)
[13:37:20.379]                 removed <- setdiff(old_names, names)
[13:37:20.379]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.379]                   envs[common]]
[13:37:20.379]                 NAMES <- toupper(changed)
[13:37:20.379]                 args <- list()
[13:37:20.379]                 for (kk in seq_along(NAMES)) {
[13:37:20.379]                   name <- changed[[kk]]
[13:37:20.379]                   NAME <- NAMES[[kk]]
[13:37:20.379]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.379]                     next
[13:37:20.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.379]                 }
[13:37:20.379]                 NAMES <- toupper(added)
[13:37:20.379]                 for (kk in seq_along(NAMES)) {
[13:37:20.379]                   name <- added[[kk]]
[13:37:20.379]                   NAME <- NAMES[[kk]]
[13:37:20.379]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.379]                     next
[13:37:20.379]                   args[[name]] <- ""
[13:37:20.379]                 }
[13:37:20.379]                 NAMES <- toupper(removed)
[13:37:20.379]                 for (kk in seq_along(NAMES)) {
[13:37:20.379]                   name <- removed[[kk]]
[13:37:20.379]                   NAME <- NAMES[[kk]]
[13:37:20.379]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.379]                     next
[13:37:20.379]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.379]                 }
[13:37:20.379]                 if (length(args) > 0) 
[13:37:20.379]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.379]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.379]             }
[13:37:20.379]             else {
[13:37:20.379]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.379]             }
[13:37:20.379]             {
[13:37:20.379]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.379]                   0L) {
[13:37:20.379]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.379]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.379]                   base::options(opts)
[13:37:20.379]                 }
[13:37:20.379]                 {
[13:37:20.379]                   {
[13:37:20.379]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:20.379]                     NULL
[13:37:20.379]                   }
[13:37:20.379]                   options(future.plan = NULL)
[13:37:20.379]                   if (is.na(NA_character_)) 
[13:37:20.379]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.379]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.379]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.379]                     .init = FALSE)
[13:37:20.379]                 }
[13:37:20.379]             }
[13:37:20.379]         }
[13:37:20.379]     })
[13:37:20.379]     if (TRUE) {
[13:37:20.379]         base::sink(type = "output", split = FALSE)
[13:37:20.379]         if (TRUE) {
[13:37:20.379]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.379]         }
[13:37:20.379]         else {
[13:37:20.379]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.379]         }
[13:37:20.379]         base::close(...future.stdout)
[13:37:20.379]         ...future.stdout <- NULL
[13:37:20.379]     }
[13:37:20.379]     ...future.result$conditions <- ...future.conditions
[13:37:20.379]     ...future.result$finished <- base::Sys.time()
[13:37:20.379]     ...future.result
[13:37:20.379] }
[13:37:20.419]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.382] assign_globals() ...
[13:37:20.420]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.382] List of 3
[13:37:20.382]  $ nested_a:List of 1
[13:37:20.382]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:20.382]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:20.382]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.382]  $ a       : int 1
[13:37:20.382]  $ plan_a  :List of 1
[13:37:20.382]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:20.382]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:20.382]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.382]  - attr(*, "where")=List of 3
[13:37:20.382]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:37:20.382]   ..$ a       :<environment: R_EmptyEnv> 
[13:37:20.382]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:37:20.382]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.382]  - attr(*, "resolved")= logi FALSE
[13:37:20.382]  - attr(*, "total_size")= num 95240
[13:37:20.382]  - attr(*, "already-done")= logi TRUE
[13:37:20.420]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.386] - copied ‘nested_a’ to environment
[13:37:20.420]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.387] - copied ‘a’ to environment
[13:37:20.420]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.387] - copied ‘plan_a’ to environment
[13:37:20.420]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.387] assign_globals() ... done
[13:37:20.420]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.387] requestCore(): workers = 2
[13:37:20.421]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.390] MulticoreFuture started
[13:37:20.421]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.391] - Launch lazy future ... done
[13:37:20.421]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.391] run() for ‘MulticoreFuture’ ... done
[13:37:20.421]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.392] result() for MulticoreFuture ...
[13:37:20.421]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.404] result() for MulticoreFuture ...
[13:37:20.421]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.405] result() for MulticoreFuture ... done
[13:37:20.421]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.405] result() for MulticoreFuture ... done
[13:37:20.422]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.405] result() for MulticoreFuture ...
[13:37:20.422]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.408] result() for MulticoreFuture ... done
[13:37:20.422] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:20.428] getGlobalsAndPackages() ...
[13:37:20.428] Searching for globals...
[13:37:20.429] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:20.429] Searching for globals ... DONE
[13:37:20.429] Resolving globals: FALSE
[13:37:20.430] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:20.430] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:20.431] - globals: [1] ‘data’
[13:37:20.431] - packages: [1] ‘future’
[13:37:20.431] getGlobalsAndPackages() ... DONE
[13:37:20.431] run() for ‘Future’ ...
[13:37:20.431] - state: ‘created’
[13:37:20.431] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.432] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.432] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.432]   - Field: ‘label’
[13:37:20.432]   - Field: ‘local’
[13:37:20.432]   - Field: ‘owner’
[13:37:20.432]   - Field: ‘envir’
[13:37:20.432]   - Field: ‘packages’
[13:37:20.434]   - Field: ‘gc’
[13:37:20.434]   - Field: ‘conditions’
[13:37:20.434]   - Field: ‘expr’
[13:37:20.434]   - Field: ‘uuid’
[13:37:20.435]   - Field: ‘seed’
[13:37:20.435]   - Field: ‘version’
[13:37:20.435]   - Field: ‘result’
[13:37:20.435]   - Field: ‘asynchronous’
[13:37:20.435]   - Field: ‘calls’
[13:37:20.435]   - Field: ‘globals’
[13:37:20.435]   - Field: ‘stdout’
[13:37:20.435]   - Field: ‘earlySignal’
[13:37:20.435]   - Field: ‘lazy’
[13:37:20.435]   - Field: ‘state’
[13:37:20.435] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.436] - Launch lazy future ...
[13:37:20.436] Packages needed by the future expression (n = 1): ‘future’
[13:37:20.436] Packages needed by future strategies (n = 1): ‘future’
[13:37:20.436] {
[13:37:20.436]     {
[13:37:20.436]         {
[13:37:20.436]             ...future.startTime <- base::Sys.time()
[13:37:20.436]             {
[13:37:20.436]                 {
[13:37:20.436]                   {
[13:37:20.436]                     {
[13:37:20.436]                       base::local({
[13:37:20.436]                         has_future <- base::requireNamespace("future", 
[13:37:20.436]                           quietly = TRUE)
[13:37:20.436]                         if (has_future) {
[13:37:20.436]                           ns <- base::getNamespace("future")
[13:37:20.436]                           version <- ns[[".package"]][["version"]]
[13:37:20.436]                           if (is.null(version)) 
[13:37:20.436]                             version <- utils::packageVersion("future")
[13:37:20.436]                         }
[13:37:20.436]                         else {
[13:37:20.436]                           version <- NULL
[13:37:20.436]                         }
[13:37:20.436]                         if (!has_future || version < "1.8.0") {
[13:37:20.436]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.436]                             "", base::R.version$version.string), 
[13:37:20.436]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.436]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.436]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.436]                               "release", "version")], collapse = " "), 
[13:37:20.436]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.436]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.436]                             info)
[13:37:20.436]                           info <- base::paste(info, collapse = "; ")
[13:37:20.436]                           if (!has_future) {
[13:37:20.436]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.436]                               info)
[13:37:20.436]                           }
[13:37:20.436]                           else {
[13:37:20.436]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.436]                               info, version)
[13:37:20.436]                           }
[13:37:20.436]                           base::stop(msg)
[13:37:20.436]                         }
[13:37:20.436]                       })
[13:37:20.436]                     }
[13:37:20.436]                     base::local({
[13:37:20.436]                       for (pkg in "future") {
[13:37:20.436]                         base::loadNamespace(pkg)
[13:37:20.436]                         base::library(pkg, character.only = TRUE)
[13:37:20.436]                       }
[13:37:20.436]                     })
[13:37:20.436]                   }
[13:37:20.436]                   ...future.strategy.old <- future::plan("list")
[13:37:20.436]                   options(future.plan = NULL)
[13:37:20.436]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.436]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:20.436]                     envir = parent.frame()) 
[13:37:20.436]                   {
[13:37:20.436]                     default_workers <- missing(workers)
[13:37:20.436]                     if (is.function(workers)) 
[13:37:20.436]                       workers <- workers()
[13:37:20.436]                     workers <- structure(as.integer(workers), 
[13:37:20.436]                       class = class(workers))
[13:37:20.436]                     stop_if_not(is.finite(workers), workers >= 
[13:37:20.436]                       1L)
[13:37:20.436]                     if ((workers == 1L && !inherits(workers, 
[13:37:20.436]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:20.436]                       if (default_workers) 
[13:37:20.436]                         supportsMulticore(warn = TRUE)
[13:37:20.436]                       return(sequential(..., envir = envir))
[13:37:20.436]                     }
[13:37:20.436]                     oopts <- options(mc.cores = workers)
[13:37:20.436]                     on.exit(options(oopts))
[13:37:20.436]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:20.436]                       envir = envir)
[13:37:20.436]                     if (!future$lazy) 
[13:37:20.436]                       future <- run(future)
[13:37:20.436]                     invisible(future)
[13:37:20.436]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:20.436]                 }
[13:37:20.436]                 ...future.workdir <- getwd()
[13:37:20.436]             }
[13:37:20.436]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.436]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.436]         }
[13:37:20.436]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.436]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.436]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.436]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.436]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.436]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.436]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.436]             base::names(...future.oldOptions))
[13:37:20.436]     }
[13:37:20.436]     if (FALSE) {
[13:37:20.436]     }
[13:37:20.436]     else {
[13:37:20.436]         if (TRUE) {
[13:37:20.436]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.436]                 open = "w")
[13:37:20.436]         }
[13:37:20.436]         else {
[13:37:20.436]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.436]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.436]         }
[13:37:20.436]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.436]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.436]             base::sink(type = "output", split = FALSE)
[13:37:20.436]             base::close(...future.stdout)
[13:37:20.436]         }, add = TRUE)
[13:37:20.436]     }
[13:37:20.436]     ...future.frame <- base::sys.nframe()
[13:37:20.436]     ...future.conditions <- base::list()
[13:37:20.436]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.436]     if (FALSE) {
[13:37:20.436]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.436]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.436]     }
[13:37:20.436]     ...future.result <- base::tryCatch({
[13:37:20.436]         base::withCallingHandlers({
[13:37:20.436]             ...future.value <- base::withVisible(base::local({
[13:37:20.436]                 value(future(subset(data, a == 2)))
[13:37:20.436]             }))
[13:37:20.436]             future::FutureResult(value = ...future.value$value, 
[13:37:20.436]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.436]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.436]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.436]                     ...future.globalenv.names))
[13:37:20.436]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.436]         }, condition = base::local({
[13:37:20.436]             c <- base::c
[13:37:20.436]             inherits <- base::inherits
[13:37:20.436]             invokeRestart <- base::invokeRestart
[13:37:20.436]             length <- base::length
[13:37:20.436]             list <- base::list
[13:37:20.436]             seq.int <- base::seq.int
[13:37:20.436]             signalCondition <- base::signalCondition
[13:37:20.436]             sys.calls <- base::sys.calls
[13:37:20.436]             `[[` <- base::`[[`
[13:37:20.436]             `+` <- base::`+`
[13:37:20.436]             `<<-` <- base::`<<-`
[13:37:20.436]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.436]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.436]                   3L)]
[13:37:20.436]             }
[13:37:20.436]             function(cond) {
[13:37:20.436]                 is_error <- inherits(cond, "error")
[13:37:20.436]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.436]                   NULL)
[13:37:20.436]                 if (is_error) {
[13:37:20.436]                   sessionInformation <- function() {
[13:37:20.436]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.436]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.436]                       search = base::search(), system = base::Sys.info())
[13:37:20.436]                   }
[13:37:20.436]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.436]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.436]                     cond$call), session = sessionInformation(), 
[13:37:20.436]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.436]                   signalCondition(cond)
[13:37:20.436]                 }
[13:37:20.436]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.436]                 "immediateCondition"))) {
[13:37:20.436]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.436]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.436]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.436]                   if (TRUE && !signal) {
[13:37:20.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.436]                     {
[13:37:20.436]                       inherits <- base::inherits
[13:37:20.436]                       invokeRestart <- base::invokeRestart
[13:37:20.436]                       is.null <- base::is.null
[13:37:20.436]                       muffled <- FALSE
[13:37:20.436]                       if (inherits(cond, "message")) {
[13:37:20.436]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.436]                         if (muffled) 
[13:37:20.436]                           invokeRestart("muffleMessage")
[13:37:20.436]                       }
[13:37:20.436]                       else if (inherits(cond, "warning")) {
[13:37:20.436]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.436]                         if (muffled) 
[13:37:20.436]                           invokeRestart("muffleWarning")
[13:37:20.436]                       }
[13:37:20.436]                       else if (inherits(cond, "condition")) {
[13:37:20.436]                         if (!is.null(pattern)) {
[13:37:20.436]                           computeRestarts <- base::computeRestarts
[13:37:20.436]                           grepl <- base::grepl
[13:37:20.436]                           restarts <- computeRestarts(cond)
[13:37:20.436]                           for (restart in restarts) {
[13:37:20.436]                             name <- restart$name
[13:37:20.436]                             if (is.null(name)) 
[13:37:20.436]                               next
[13:37:20.436]                             if (!grepl(pattern, name)) 
[13:37:20.436]                               next
[13:37:20.436]                             invokeRestart(restart)
[13:37:20.436]                             muffled <- TRUE
[13:37:20.436]                             break
[13:37:20.436]                           }
[13:37:20.436]                         }
[13:37:20.436]                       }
[13:37:20.436]                       invisible(muffled)
[13:37:20.436]                     }
[13:37:20.436]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.436]                   }
[13:37:20.436]                 }
[13:37:20.436]                 else {
[13:37:20.436]                   if (TRUE) {
[13:37:20.436]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.436]                     {
[13:37:20.436]                       inherits <- base::inherits
[13:37:20.436]                       invokeRestart <- base::invokeRestart
[13:37:20.436]                       is.null <- base::is.null
[13:37:20.436]                       muffled <- FALSE
[13:37:20.436]                       if (inherits(cond, "message")) {
[13:37:20.436]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.436]                         if (muffled) 
[13:37:20.436]                           invokeRestart("muffleMessage")
[13:37:20.436]                       }
[13:37:20.436]                       else if (inherits(cond, "warning")) {
[13:37:20.436]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.436]                         if (muffled) 
[13:37:20.436]                           invokeRestart("muffleWarning")
[13:37:20.436]                       }
[13:37:20.436]                       else if (inherits(cond, "condition")) {
[13:37:20.436]                         if (!is.null(pattern)) {
[13:37:20.436]                           computeRestarts <- base::computeRestarts
[13:37:20.436]                           grepl <- base::grepl
[13:37:20.436]                           restarts <- computeRestarts(cond)
[13:37:20.436]                           for (restart in restarts) {
[13:37:20.436]                             name <- restart$name
[13:37:20.436]                             if (is.null(name)) 
[13:37:20.436]                               next
[13:37:20.436]                             if (!grepl(pattern, name)) 
[13:37:20.436]                               next
[13:37:20.436]                             invokeRestart(restart)
[13:37:20.436]                             muffled <- TRUE
[13:37:20.436]                             break
[13:37:20.436]                           }
[13:37:20.436]                         }
[13:37:20.436]                       }
[13:37:20.436]                       invisible(muffled)
[13:37:20.436]                     }
[13:37:20.436]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.436]                   }
[13:37:20.436]                 }
[13:37:20.436]             }
[13:37:20.436]         }))
[13:37:20.436]     }, error = function(ex) {
[13:37:20.436]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.436]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.436]                 ...future.rng), started = ...future.startTime, 
[13:37:20.436]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.436]             version = "1.8"), class = "FutureResult")
[13:37:20.436]     }, finally = {
[13:37:20.436]         if (!identical(...future.workdir, getwd())) 
[13:37:20.436]             setwd(...future.workdir)
[13:37:20.436]         {
[13:37:20.436]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.436]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.436]             }
[13:37:20.436]             base::options(...future.oldOptions)
[13:37:20.436]             if (.Platform$OS.type == "windows") {
[13:37:20.436]                 old_names <- names(...future.oldEnvVars)
[13:37:20.436]                 envs <- base::Sys.getenv()
[13:37:20.436]                 names <- names(envs)
[13:37:20.436]                 common <- intersect(names, old_names)
[13:37:20.436]                 added <- setdiff(names, old_names)
[13:37:20.436]                 removed <- setdiff(old_names, names)
[13:37:20.436]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.436]                   envs[common]]
[13:37:20.436]                 NAMES <- toupper(changed)
[13:37:20.436]                 args <- list()
[13:37:20.436]                 for (kk in seq_along(NAMES)) {
[13:37:20.436]                   name <- changed[[kk]]
[13:37:20.436]                   NAME <- NAMES[[kk]]
[13:37:20.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.436]                     next
[13:37:20.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.436]                 }
[13:37:20.436]                 NAMES <- toupper(added)
[13:37:20.436]                 for (kk in seq_along(NAMES)) {
[13:37:20.436]                   name <- added[[kk]]
[13:37:20.436]                   NAME <- NAMES[[kk]]
[13:37:20.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.436]                     next
[13:37:20.436]                   args[[name]] <- ""
[13:37:20.436]                 }
[13:37:20.436]                 NAMES <- toupper(removed)
[13:37:20.436]                 for (kk in seq_along(NAMES)) {
[13:37:20.436]                   name <- removed[[kk]]
[13:37:20.436]                   NAME <- NAMES[[kk]]
[13:37:20.436]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.436]                     next
[13:37:20.436]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.436]                 }
[13:37:20.436]                 if (length(args) > 0) 
[13:37:20.436]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.436]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.436]             }
[13:37:20.436]             else {
[13:37:20.436]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.436]             }
[13:37:20.436]             {
[13:37:20.436]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.436]                   0L) {
[13:37:20.436]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.436]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.436]                   base::options(opts)
[13:37:20.436]                 }
[13:37:20.436]                 {
[13:37:20.436]                   {
[13:37:20.436]                     NULL
[13:37:20.436]                     RNGkind("Mersenne-Twister")
[13:37:20.436]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.436]                       inherits = FALSE)
[13:37:20.436]                   }
[13:37:20.436]                   options(future.plan = NULL)
[13:37:20.436]                   if (is.na(NA_character_)) 
[13:37:20.436]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.436]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.436]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.436]                     .init = FALSE)
[13:37:20.436]                 }
[13:37:20.436]             }
[13:37:20.436]         }
[13:37:20.436]     })
[13:37:20.436]     if (TRUE) {
[13:37:20.436]         base::sink(type = "output", split = FALSE)
[13:37:20.436]         if (TRUE) {
[13:37:20.436]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.436]         }
[13:37:20.436]         else {
[13:37:20.436]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.436]         }
[13:37:20.436]         base::close(...future.stdout)
[13:37:20.436]         ...future.stdout <- NULL
[13:37:20.436]     }
[13:37:20.436]     ...future.result$conditions <- ...future.conditions
[13:37:20.436]     ...future.result$finished <- base::Sys.time()
[13:37:20.436]     ...future.result
[13:37:20.436] }
[13:37:20.438] assign_globals() ...
[13:37:20.438] List of 1
[13:37:20.438]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:20.438]   ..$ a: int [1:3] 1 2 3
[13:37:20.438]   ..$ b: int [1:3] 3 2 1
[13:37:20.438]  - attr(*, "where")=List of 1
[13:37:20.438]   ..$ data:<environment: R_EmptyEnv> 
[13:37:20.438]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.438]  - attr(*, "resolved")= logi FALSE
[13:37:20.438]  - attr(*, "total_size")= num 128
[13:37:20.438]  - attr(*, "already-done")= logi TRUE
[13:37:20.441] - copied ‘data’ to environment
[13:37:20.441] assign_globals() ... done
[13:37:20.442] plan(): Setting new future strategy stack:
[13:37:20.442] List of future strategies:
[13:37:20.442] 1. multicore:
[13:37:20.442]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:20.442]    - tweaked: FALSE
[13:37:20.442]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.446] plan(): nbrOfWorkers() = 2
[13:37:20.490] plan(): Setting new future strategy stack:
[13:37:20.490] List of future strategies:
[13:37:20.490] 1. sequential:
[13:37:20.490]    - args: function (..., envir = parent.frame())
[13:37:20.490]    - tweaked: FALSE
[13:37:20.490]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.490] 2. multicore:
[13:37:20.490]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:20.490]    - tweaked: FALSE
[13:37:20.490]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.491] plan(): nbrOfWorkers() = 1
[13:37:20.491] SequentialFuture started (and completed)
[13:37:20.491] signalConditions() ...
[13:37:20.491]  - include = ‘immediateCondition’
[13:37:20.492]  - exclude = 
[13:37:20.492]  - resignal = FALSE
[13:37:20.492]  - Number of conditions: 55
[13:37:20.492] signalConditions() ... done
[13:37:20.492] - Launch lazy future ... done
[13:37:20.492] run() for ‘SequentialFuture’ ... done
[13:37:20.492] signalConditions() ...
[13:37:20.492]  - include = ‘immediateCondition’
[13:37:20.493]  - exclude = 
[13:37:20.493]  - resignal = FALSE
[13:37:20.493]  - Number of conditions: 55
[13:37:20.496] signalConditions() ... done
[13:37:20.496] Future state: ‘finished’
[13:37:20.496] signalConditions() ...
[13:37:20.496]  - include = ‘condition’
[13:37:20.496]  - exclude = ‘immediateCondition’
[13:37:20.496]  - resignal = TRUE
[13:37:20.496]  - Number of conditions: 55
[13:37:20.497]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.446] getGlobalsAndPackages() ...
[13:37:20.497]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.446] Searching for globals...
[13:37:20.497]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.461] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:20.497]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.462] Searching for globals ... DONE
[13:37:20.497]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.462] Resolving globals: FALSE
[13:37:20.498]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.462] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:20.498]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.462] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:20.498]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] - globals: [1] ‘data’
[13:37:20.498]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] 
[13:37:20.498]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] getGlobalsAndPackages() ... DONE
[13:37:20.499]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] run() for ‘Future’ ...
[13:37:20.499]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] - state: ‘created’
[13:37:20.499]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.463] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:20.499]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:20.499]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:20.500]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467]   - Field: ‘label’
[13:37:20.500]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467]   - Field: ‘local’
[13:37:20.500]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467]   - Field: ‘owner’
[13:37:20.500]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.467]   - Field: ‘envir’
[13:37:20.500]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘workers’
[13:37:20.500]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘packages’
[13:37:20.501]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘gc’
[13:37:20.501]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘job’
[13:37:20.501]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘conditions’
[13:37:20.501]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘expr’
[13:37:20.501]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘uuid’
[13:37:20.501]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘seed’
[13:37:20.502]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘version’
[13:37:20.502]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.468]   - Field: ‘result’
[13:37:20.502]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘asynchronous’
[13:37:20.502]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘calls’
[13:37:20.502]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘globals’
[13:37:20.502]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘stdout’
[13:37:20.503]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘earlySignal’
[13:37:20.503]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘lazy’
[13:37:20.503]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469]   - Field: ‘state’
[13:37:20.503]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:20.503]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.469] - Launch lazy future ...
[13:37:20.503]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.470] Packages needed by the future expression (n = 0): <none>
[13:37:20.504]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.470] Packages needed by future strategies (n = 0): <none>
[13:37:20.504]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.470] {
[13:37:20.470]     {
[13:37:20.470]         {
[13:37:20.470]             ...future.startTime <- base::Sys.time()
[13:37:20.470]             {
[13:37:20.470]                 {
[13:37:20.470]                   {
[13:37:20.470]                     {
[13:37:20.470]                       base::local({
[13:37:20.470]                         has_future <- base::requireNamespace("future", 
[13:37:20.470]                           quietly = TRUE)
[13:37:20.470]                         if (has_future) {
[13:37:20.470]                           ns <- base::getNamespace("future")
[13:37:20.470]                           version <- ns[[".package"]][["version"]]
[13:37:20.470]                           if (is.null(version)) 
[13:37:20.470]                             version <- utils::packageVersion("future")
[13:37:20.470]                         }
[13:37:20.470]                         else {
[13:37:20.470]                           version <- NULL
[13:37:20.470]                         }
[13:37:20.470]                         if (!has_future || version < "1.8.0") {
[13:37:20.470]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.470]                             "", base::R.version$version.string), 
[13:37:20.470]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.470]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.470]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.470]                               "release", "version")], collapse = " "), 
[13:37:20.470]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.470]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.470]                             info)
[13:37:20.470]                           info <- base::paste(info, collapse = "; ")
[13:37:20.470]                           if (!has_future) {
[13:37:20.470]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.470]                               info)
[13:37:20.470]                           }
[13:37:20.470]                           else {
[13:37:20.470]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.470]                               info, version)
[13:37:20.470]                           }
[13:37:20.470]                           base::stop(msg)
[13:37:20.470]                         }
[13:37:20.470]                       })
[13:37:20.470]                     }
[13:37:20.470]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:20.470]                     base::options(mc.cores = 1L)
[13:37:20.470]                   }
[13:37:20.470]                   ...future.strategy.old <- future::plan("list")
[13:37:20.470]                   options(future.plan = NULL)
[13:37:20.470]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.470]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:20.470]                 }
[13:37:20.470]                 ...future.workdir <- getwd()
[13:37:20.470]             }
[13:37:20.470]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.470]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.470]         }
[13:37:20.470]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.470]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.470]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.470]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.470]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.470]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.470]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.470]             base::names(...future.oldOptions))
[13:37:20.470]     }
[13:37:20.470]     if (FALSE) {
[13:37:20.470]     }
[13:37:20.470]     else {
[13:37:20.470]         if (TRUE) {
[13:37:20.470]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.470]                 open = "w")
[13:37:20.470]         }
[13:37:20.470]         else {
[13:37:20.470]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.470]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.470]         }
[13:37:20.470]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.470]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.470]             base::sink(type = "output", split = FALSE)
[13:37:20.470]             base::close(...future.stdout)
[13:37:20.470]         }, add = TRUE)
[13:37:20.470]     }
[13:37:20.470]     ...future.frame <- base::sys.nframe()
[13:37:20.470]     ...future.conditions <- base::list()
[13:37:20.470]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.470]     if (FALSE) {
[13:37:20.470]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.470]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.470]     }
[13:37:20.470]     ...future.result <- base::tryCatch({
[13:37:20.470]         base::withCallingHandlers({
[13:37:20.470]             ...future.value <- base::withVisible(base::local({
[13:37:20.470]                 withCallingHandlers({
[13:37:20.470]                   subset(data, a == 2)
[13:37:20.470]                 }, immediateCondition = function(cond) {
[13:37:20.470]                   save_rds <- function (object, pathname, ...) 
[13:37:20.470]                   {
[13:37:20.470]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:20.470]                     if (file_test("-f", pathname_tmp)) {
[13:37:20.470]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.470]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:20.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.470]                         fi_tmp[["mtime"]])
[13:37:20.470]                     }
[13:37:20.470]                     tryCatch({
[13:37:20.470]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:20.470]                     }, error = function(ex) {
[13:37:20.470]                       msg <- conditionMessage(ex)
[13:37:20.470]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.470]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:20.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.470]                         fi_tmp[["mtime"]], msg)
[13:37:20.470]                       ex$message <- msg
[13:37:20.470]                       stop(ex)
[13:37:20.470]                     })
[13:37:20.470]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:20.470]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:20.470]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:20.470]                       fi_tmp <- file.info(pathname_tmp)
[13:37:20.470]                       fi <- file.info(pathname)
[13:37:20.470]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:20.470]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:20.470]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:20.470]                         fi[["size"]], fi[["mtime"]])
[13:37:20.470]                       stop(msg)
[13:37:20.470]                     }
[13:37:20.470]                     invisible(pathname)
[13:37:20.470]                   }
[13:37:20.470]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:20.470]                     rootPath = tempdir()) 
[13:37:20.470]                   {
[13:37:20.470]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:20.470]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:20.470]                       tmpdir = path, fileext = ".rds")
[13:37:20.470]                     save_rds(obj, file)
[13:37:20.470]                   }
[13:37:20.470]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:20.470]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.470]                   {
[13:37:20.470]                     inherits <- base::inherits
[13:37:20.470]                     invokeRestart <- base::invokeRestart
[13:37:20.470]                     is.null <- base::is.null
[13:37:20.470]                     muffled <- FALSE
[13:37:20.470]                     if (inherits(cond, "message")) {
[13:37:20.470]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:20.470]                       if (muffled) 
[13:37:20.470]                         invokeRestart("muffleMessage")
[13:37:20.470]                     }
[13:37:20.470]                     else if (inherits(cond, "warning")) {
[13:37:20.470]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:20.470]                       if (muffled) 
[13:37:20.470]                         invokeRestart("muffleWarning")
[13:37:20.470]                     }
[13:37:20.470]                     else if (inherits(cond, "condition")) {
[13:37:20.470]                       if (!is.null(pattern)) {
[13:37:20.470]                         computeRestarts <- base::computeRestarts
[13:37:20.470]                         grepl <- base::grepl
[13:37:20.470]                         restarts <- computeRestarts(cond)
[13:37:20.470]                         for (restart in restarts) {
[13:37:20.470]                           name <- restart$name
[13:37:20.470]                           if (is.null(name)) 
[13:37:20.470]                             next
[13:37:20.470]                           if (!grepl(pattern, name)) 
[13:37:20.470]                             next
[13:37:20.470]                           invokeRestart(restart)
[13:37:20.470]                           muffled <- TRUE
[13:37:20.470]                           break
[13:37:20.470]                         }
[13:37:20.470]                       }
[13:37:20.470]                     }
[13:37:20.470]                     invisible(muffled)
[13:37:20.470]                   }
[13:37:20.470]                   muffleCondition(cond)
[13:37:20.470]                 })
[13:37:20.470]             }))
[13:37:20.470]             future::FutureResult(value = ...future.value$value, 
[13:37:20.470]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.470]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.470]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.470]                     ...future.globalenv.names))
[13:37:20.470]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.470]         }, condition = base::local({
[13:37:20.470]             c <- base::c
[13:37:20.470]             inherits <- base::inherits
[13:37:20.470]             invokeRestart <- base::invokeRestart
[13:37:20.470]             length <- base::length
[13:37:20.470]             list <- base::list
[13:37:20.470]             seq.int <- base::seq.int
[13:37:20.470]             signalCondition <- base::signalCondition
[13:37:20.470]             sys.calls <- base::sys.calls
[13:37:20.470]             `[[` <- base::`[[`
[13:37:20.470]             `+` <- base::`+`
[13:37:20.470]             `<<-` <- base::`<<-`
[13:37:20.470]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.470]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.470]                   3L)]
[13:37:20.470]             }
[13:37:20.470]             function(cond) {
[13:37:20.470]                 is_error <- inherits(cond, "error")
[13:37:20.470]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.470]                   NULL)
[13:37:20.470]                 if (is_error) {
[13:37:20.470]                   sessionInformation <- function() {
[13:37:20.470]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.470]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.470]                       search = base::search(), system = base::Sys.info())
[13:37:20.470]                   }
[13:37:20.470]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.470]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.470]                     cond$call), session = sessionInformation(), 
[13:37:20.470]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.470]                   signalCondition(cond)
[13:37:20.470]                 }
[13:37:20.470]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.470]                 "immediateCondition"))) {
[13:37:20.470]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.470]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.470]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.470]                   if (TRUE && !signal) {
[13:37:20.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.470]                     {
[13:37:20.470]                       inherits <- base::inherits
[13:37:20.470]                       invokeRestart <- base::invokeRestart
[13:37:20.470]                       is.null <- base::is.null
[13:37:20.470]                       muffled <- FALSE
[13:37:20.470]                       if (inherits(cond, "message")) {
[13:37:20.470]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.470]                         if (muffled) 
[13:37:20.470]                           invokeRestart("muffleMessage")
[13:37:20.470]                       }
[13:37:20.470]                       else if (inherits(cond, "warning")) {
[13:37:20.470]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.470]                         if (muffled) 
[13:37:20.470]                           invokeRestart("muffleWarning")
[13:37:20.470]                       }
[13:37:20.470]                       else if (inherits(cond, "condition")) {
[13:37:20.470]                         if (!is.null(pattern)) {
[13:37:20.470]                           computeRestarts <- base::computeRestarts
[13:37:20.470]                           grepl <- base::grepl
[13:37:20.470]                           restarts <- computeRestarts(cond)
[13:37:20.470]                           for (restart in restarts) {
[13:37:20.470]                             name <- restart$name
[13:37:20.470]                             if (is.null(name)) 
[13:37:20.470]                               next
[13:37:20.470]                             if (!grepl(pattern, name)) 
[13:37:20.470]                               next
[13:37:20.470]                             invokeRestart(restart)
[13:37:20.470]                             muffled <- TRUE
[13:37:20.470]                             break
[13:37:20.470]                           }
[13:37:20.470]                         }
[13:37:20.470]                       }
[13:37:20.470]                       invisible(muffled)
[13:37:20.470]                     }
[13:37:20.470]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.470]                   }
[13:37:20.470]                 }
[13:37:20.470]                 else {
[13:37:20.470]                   if (TRUE) {
[13:37:20.470]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.470]                     {
[13:37:20.470]                       inherits <- base::inherits
[13:37:20.470]                       invokeRestart <- base::invokeRestart
[13:37:20.470]                       is.null <- base::is.null
[13:37:20.470]                       muffled <- FALSE
[13:37:20.470]                       if (inherits(cond, "message")) {
[13:37:20.470]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.470]                         if (muffled) 
[13:37:20.470]                           invokeRestart("muffleMessage")
[13:37:20.470]                       }
[13:37:20.470]                       else if (inherits(cond, "warning")) {
[13:37:20.470]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.470]                         if (muffled) 
[13:37:20.470]                           invokeRestart("muffleWarning")
[13:37:20.470]                       }
[13:37:20.470]                       else if (inherits(cond, "condition")) {
[13:37:20.470]                         if (!is.null(pattern)) {
[13:37:20.470]                           computeRestarts <- base::computeRestarts
[13:37:20.470]                           grepl <- base::grepl
[13:37:20.470]                           restarts <- computeRestarts(cond)
[13:37:20.470]                           for (restart in restarts) {
[13:37:20.470]                             name <- restart$name
[13:37:20.470]                             if (is.null(name)) 
[13:37:20.470]                               next
[13:37:20.470]                             if (!grepl(pattern, name)) 
[13:37:20.470]                               next
[13:37:20.470]                             invokeRestart(restart)
[13:37:20.470]                             muffled <- TRUE
[13:37:20.470]                             break
[13:37:20.470]                           }
[13:37:20.470]                         }
[13:37:20.470]                       }
[13:37:20.470]                       invisible(muffled)
[13:37:20.470]                     }
[13:37:20.470]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.470]                   }
[13:37:20.470]                 }
[13:37:20.470]             }
[13:37:20.470]         }))
[13:37:20.470]     }, error = function(ex) {
[13:37:20.470]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.470]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.470]                 ...future.rng), started = ...future.startTime, 
[13:37:20.470]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.470]             version = "1.8"), class = "FutureResult")
[13:37:20.470]     }, finally = {
[13:37:20.470]         if (!identical(...future.workdir, getwd())) 
[13:37:20.470]             setwd(...future.workdir)
[13:37:20.470]         {
[13:37:20.470]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.470]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.470]             }
[13:37:20.470]             base::options(...future.oldOptions)
[13:37:20.470]             if (.Platform$OS.type == "windows") {
[13:37:20.470]                 old_names <- names(...future.oldEnvVars)
[13:37:20.470]                 envs <- base::Sys.getenv()
[13:37:20.470]                 names <- names(envs)
[13:37:20.470]                 common <- intersect(names, old_names)
[13:37:20.470]                 added <- setdiff(names, old_names)
[13:37:20.470]                 removed <- setdiff(old_names, names)
[13:37:20.470]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.470]                   envs[common]]
[13:37:20.470]                 NAMES <- toupper(changed)
[13:37:20.470]                 args <- list()
[13:37:20.470]                 for (kk in seq_along(NAMES)) {
[13:37:20.470]                   name <- changed[[kk]]
[13:37:20.470]                   NAME <- NAMES[[kk]]
[13:37:20.470]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.470]                     next
[13:37:20.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.470]                 }
[13:37:20.470]                 NAMES <- toupper(added)
[13:37:20.470]                 for (kk in seq_along(NAMES)) {
[13:37:20.470]                   name <- added[[kk]]
[13:37:20.470]                   NAME <- NAMES[[kk]]
[13:37:20.470]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.470]                     next
[13:37:20.470]                   args[[name]] <- ""
[13:37:20.470]                 }
[13:37:20.470]                 NAMES <- toupper(removed)
[13:37:20.470]                 for (kk in seq_along(NAMES)) {
[13:37:20.470]                   name <- removed[[kk]]
[13:37:20.470]                   NAME <- NAMES[[kk]]
[13:37:20.470]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.470]                     next
[13:37:20.470]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.470]                 }
[13:37:20.470]                 if (length(args) > 0) 
[13:37:20.470]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.470]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.470]             }
[13:37:20.470]             else {
[13:37:20.470]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.470]             }
[13:37:20.470]             {
[13:37:20.470]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.470]                   0L) {
[13:37:20.470]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.470]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.470]                   base::options(opts)
[13:37:20.470]                 }
[13:37:20.470]                 {
[13:37:20.470]                   {
[13:37:20.470]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:20.470]                     NULL
[13:37:20.470]                   }
[13:37:20.470]                   options(future.plan = NULL)
[13:37:20.470]                   if (is.na(NA_character_)) 
[13:37:20.470]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.470]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.470]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.470]                     .init = FALSE)
[13:37:20.470]                 }
[13:37:20.470]             }
[13:37:20.470]         }
[13:37:20.470]     })
[13:37:20.470]     if (TRUE) {
[13:37:20.470]         base::sink(type = "output", split = FALSE)
[13:37:20.470]         if (TRUE) {
[13:37:20.470]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.470]         }
[13:37:20.470]         else {
[13:37:20.470]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.470]         }
[13:37:20.470]         base::close(...future.stdout)
[13:37:20.470]         ...future.stdout <- NULL
[13:37:20.470]     }
[13:37:20.470]     ...future.result$conditions <- ...future.conditions
[13:37:20.470]     ...future.result$finished <- base::Sys.time()
[13:37:20.470]     ...future.result
[13:37:20.470] }
[13:37:20.504]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.472] assign_globals() ...
[13:37:20.504]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.472] List of 1
[13:37:20.472]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:20.472]   ..$ a: int [1:3] 1 2 3
[13:37:20.472]   ..$ b: int [1:3] 3 2 1
[13:37:20.472]  - attr(*, "where")=List of 1
[13:37:20.472]   ..$ data:<environment: R_EmptyEnv> 
[13:37:20.472]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.472]  - attr(*, "resolved")= logi FALSE
[13:37:20.472]  - attr(*, "total_size")= num 128
[13:37:20.472]  - attr(*, "already-done")= logi TRUE
[13:37:20.504]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.475] - copied ‘data’ to environment
[13:37:20.504]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.475] assign_globals() ... done
[13:37:20.505]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.476] requestCore(): workers = 2
[13:37:20.505]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.478] MulticoreFuture started
[13:37:20.505]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.478] - Launch lazy future ... done
[13:37:20.505]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.479] run() for ‘MulticoreFuture’ ... done
[13:37:20.505]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.479] result() for MulticoreFuture ...
[13:37:20.505]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.488] result() for MulticoreFuture ...
[13:37:20.505]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.489] result() for MulticoreFuture ... done
[13:37:20.506]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.489] result() for MulticoreFuture ... done
[13:37:20.506]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.489] result() for MulticoreFuture ...
[13:37:20.506]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.489] result() for MulticoreFuture ... done
[13:37:20.506] signalConditions() ... done
- plan(list('sequential', 'multicore')) ... DONE
- plan(list('sequential', 'multisession')) ...
[13:37:20.507] plan(): Setting new future strategy stack:
[13:37:20.507] List of future strategies:
[13:37:20.507] 1. sequential:
[13:37:20.507]    - args: function (..., envir = parent.frame())
[13:37:20.507]    - tweaked: FALSE
[13:37:20.507]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.507] 2. multisession:
[13:37:20.507]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:20.507]    - tweaked: FALSE
[13:37:20.507]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.507] plan(): nbrOfWorkers() = 1
[13:37:20.508] getGlobalsAndPackages() ...
[13:37:20.508] Searching for globals...
[13:37:20.526] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:20.526] Searching for globals ... DONE
[13:37:20.526] Resolving globals: FALSE
[13:37:20.527] The total size of the 2 globals is 55.41 KiB (56736 bytes)
[13:37:20.528] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.41 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.29 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:20.528] - globals: [2] ‘nested’, ‘strategy2’
[13:37:20.528] - packages: [1] ‘future’
[13:37:20.528] getGlobalsAndPackages() ... DONE
[13:37:20.529] run() for ‘Future’ ...
[13:37:20.529] - state: ‘created’
[13:37:20.529] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:20.529] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:20.529] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:20.529]   - Field: ‘label’
[13:37:20.529]   - Field: ‘local’
[13:37:20.530]   - Field: ‘owner’
[13:37:20.530]   - Field: ‘envir’
[13:37:20.530]   - Field: ‘packages’
[13:37:20.530]   - Field: ‘gc’
[13:37:20.530]   - Field: ‘conditions’
[13:37:20.530]   - Field: ‘expr’
[13:37:20.530]   - Field: ‘uuid’
[13:37:20.530]   - Field: ‘seed’
[13:37:20.530]   - Field: ‘version’
[13:37:20.530]   - Field: ‘result’
[13:37:20.530]   - Field: ‘asynchronous’
[13:37:20.531]   - Field: ‘calls’
[13:37:20.531]   - Field: ‘globals’
[13:37:20.531]   - Field: ‘stdout’
[13:37:20.531]   - Field: ‘earlySignal’
[13:37:20.531]   - Field: ‘lazy’
[13:37:20.531]   - Field: ‘state’
[13:37:20.531] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:20.531] - Launch lazy future ...
[13:37:20.531] Packages needed by the future expression (n = 1): ‘future’
[13:37:20.532] Packages needed by future strategies (n = 1): ‘future’
[13:37:20.532] {
[13:37:20.532]     {
[13:37:20.532]         {
[13:37:20.532]             ...future.startTime <- base::Sys.time()
[13:37:20.532]             {
[13:37:20.532]                 {
[13:37:20.532]                   {
[13:37:20.532]                     {
[13:37:20.532]                       base::local({
[13:37:20.532]                         has_future <- base::requireNamespace("future", 
[13:37:20.532]                           quietly = TRUE)
[13:37:20.532]                         if (has_future) {
[13:37:20.532]                           ns <- base::getNamespace("future")
[13:37:20.532]                           version <- ns[[".package"]][["version"]]
[13:37:20.532]                           if (is.null(version)) 
[13:37:20.532]                             version <- utils::packageVersion("future")
[13:37:20.532]                         }
[13:37:20.532]                         else {
[13:37:20.532]                           version <- NULL
[13:37:20.532]                         }
[13:37:20.532]                         if (!has_future || version < "1.8.0") {
[13:37:20.532]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:20.532]                             "", base::R.version$version.string), 
[13:37:20.532]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:20.532]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:20.532]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:20.532]                               "release", "version")], collapse = " "), 
[13:37:20.532]                             hostname = base::Sys.info()[["nodename"]])
[13:37:20.532]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:20.532]                             info)
[13:37:20.532]                           info <- base::paste(info, collapse = "; ")
[13:37:20.532]                           if (!has_future) {
[13:37:20.532]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:20.532]                               info)
[13:37:20.532]                           }
[13:37:20.532]                           else {
[13:37:20.532]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:20.532]                               info, version)
[13:37:20.532]                           }
[13:37:20.532]                           base::stop(msg)
[13:37:20.532]                         }
[13:37:20.532]                       })
[13:37:20.532]                     }
[13:37:20.532]                     base::local({
[13:37:20.532]                       for (pkg in "future") {
[13:37:20.532]                         base::loadNamespace(pkg)
[13:37:20.532]                         base::library(pkg, character.only = TRUE)
[13:37:20.532]                       }
[13:37:20.532]                     })
[13:37:20.532]                   }
[13:37:20.532]                   ...future.strategy.old <- future::plan("list")
[13:37:20.532]                   options(future.plan = NULL)
[13:37:20.532]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.532]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:20.532]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:20.532]                     envir = parent.frame()) 
[13:37:20.532]                   {
[13:37:20.532]                     if (is.function(workers)) 
[13:37:20.532]                       workers <- workers()
[13:37:20.532]                     workers <- structure(as.integer(workers), 
[13:37:20.532]                       class = class(workers))
[13:37:20.532]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:20.532]                       workers >= 1)
[13:37:20.532]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:20.532]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:20.532]                     }
[13:37:20.532]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:20.532]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:20.532]                       envir = envir)
[13:37:20.532]                     if (!future$lazy) 
[13:37:20.532]                       future <- run(future)
[13:37:20.532]                     invisible(future)
[13:37:20.532]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:20.532]                 }
[13:37:20.532]                 ...future.workdir <- getwd()
[13:37:20.532]             }
[13:37:20.532]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:20.532]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:20.532]         }
[13:37:20.532]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:20.532]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:20.532]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:20.532]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:20.532]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:20.532]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:20.532]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:20.532]             base::names(...future.oldOptions))
[13:37:20.532]     }
[13:37:20.532]     if (FALSE) {
[13:37:20.532]     }
[13:37:20.532]     else {
[13:37:20.532]         if (TRUE) {
[13:37:20.532]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:20.532]                 open = "w")
[13:37:20.532]         }
[13:37:20.532]         else {
[13:37:20.532]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:20.532]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:20.532]         }
[13:37:20.532]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:20.532]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:20.532]             base::sink(type = "output", split = FALSE)
[13:37:20.532]             base::close(...future.stdout)
[13:37:20.532]         }, add = TRUE)
[13:37:20.532]     }
[13:37:20.532]     ...future.frame <- base::sys.nframe()
[13:37:20.532]     ...future.conditions <- base::list()
[13:37:20.532]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:20.532]     if (FALSE) {
[13:37:20.532]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:20.532]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:20.532]     }
[13:37:20.532]     ...future.result <- base::tryCatch({
[13:37:20.532]         base::withCallingHandlers({
[13:37:20.532]             ...future.value <- base::withVisible(base::local({
[13:37:20.532]                 a <- 1L
[13:37:20.532]                 plan_a <- unclass(future::plan("list"))
[13:37:20.532]                 nested_a <- nested[-1]
[13:37:20.532]                 stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:20.532]                   1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.532]                   strategy2))
[13:37:20.532]                 for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:20.532]                   "init") <- NULL
[13:37:20.532]                 for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:20.532]                   "init") <- NULL
[13:37:20.532]                 stopifnot(all.equal(plan_a, nested_a))
[13:37:20.532]                 y %<-% {
[13:37:20.532]                   b <- 2L
[13:37:20.532]                   plan_b <- future::plan("list")
[13:37:20.532]                   nested_b <- nested_a[-1]
[13:37:20.532]                   stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:20.532]                     1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:20.532]                     "sequential"))
[13:37:20.532]                   list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:20.532]                     b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:20.532]                 }
[13:37:20.532]                 y
[13:37:20.532]             }))
[13:37:20.532]             future::FutureResult(value = ...future.value$value, 
[13:37:20.532]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.532]                   ...future.rng), globalenv = if (FALSE) 
[13:37:20.532]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:20.532]                     ...future.globalenv.names))
[13:37:20.532]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:20.532]         }, condition = base::local({
[13:37:20.532]             c <- base::c
[13:37:20.532]             inherits <- base::inherits
[13:37:20.532]             invokeRestart <- base::invokeRestart
[13:37:20.532]             length <- base::length
[13:37:20.532]             list <- base::list
[13:37:20.532]             seq.int <- base::seq.int
[13:37:20.532]             signalCondition <- base::signalCondition
[13:37:20.532]             sys.calls <- base::sys.calls
[13:37:20.532]             `[[` <- base::`[[`
[13:37:20.532]             `+` <- base::`+`
[13:37:20.532]             `<<-` <- base::`<<-`
[13:37:20.532]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:20.532]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:20.532]                   3L)]
[13:37:20.532]             }
[13:37:20.532]             function(cond) {
[13:37:20.532]                 is_error <- inherits(cond, "error")
[13:37:20.532]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:20.532]                   NULL)
[13:37:20.532]                 if (is_error) {
[13:37:20.532]                   sessionInformation <- function() {
[13:37:20.532]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:20.532]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:20.532]                       search = base::search(), system = base::Sys.info())
[13:37:20.532]                   }
[13:37:20.532]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.532]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:20.532]                     cond$call), session = sessionInformation(), 
[13:37:20.532]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:20.532]                   signalCondition(cond)
[13:37:20.532]                 }
[13:37:20.532]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:20.532]                 "immediateCondition"))) {
[13:37:20.532]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:20.532]                   ...future.conditions[[length(...future.conditions) + 
[13:37:20.532]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:20.532]                   if (TRUE && !signal) {
[13:37:20.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.532]                     {
[13:37:20.532]                       inherits <- base::inherits
[13:37:20.532]                       invokeRestart <- base::invokeRestart
[13:37:20.532]                       is.null <- base::is.null
[13:37:20.532]                       muffled <- FALSE
[13:37:20.532]                       if (inherits(cond, "message")) {
[13:37:20.532]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.532]                         if (muffled) 
[13:37:20.532]                           invokeRestart("muffleMessage")
[13:37:20.532]                       }
[13:37:20.532]                       else if (inherits(cond, "warning")) {
[13:37:20.532]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.532]                         if (muffled) 
[13:37:20.532]                           invokeRestart("muffleWarning")
[13:37:20.532]                       }
[13:37:20.532]                       else if (inherits(cond, "condition")) {
[13:37:20.532]                         if (!is.null(pattern)) {
[13:37:20.532]                           computeRestarts <- base::computeRestarts
[13:37:20.532]                           grepl <- base::grepl
[13:37:20.532]                           restarts <- computeRestarts(cond)
[13:37:20.532]                           for (restart in restarts) {
[13:37:20.532]                             name <- restart$name
[13:37:20.532]                             if (is.null(name)) 
[13:37:20.532]                               next
[13:37:20.532]                             if (!grepl(pattern, name)) 
[13:37:20.532]                               next
[13:37:20.532]                             invokeRestart(restart)
[13:37:20.532]                             muffled <- TRUE
[13:37:20.532]                             break
[13:37:20.532]                           }
[13:37:20.532]                         }
[13:37:20.532]                       }
[13:37:20.532]                       invisible(muffled)
[13:37:20.532]                     }
[13:37:20.532]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.532]                   }
[13:37:20.532]                 }
[13:37:20.532]                 else {
[13:37:20.532]                   if (TRUE) {
[13:37:20.532]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:20.532]                     {
[13:37:20.532]                       inherits <- base::inherits
[13:37:20.532]                       invokeRestart <- base::invokeRestart
[13:37:20.532]                       is.null <- base::is.null
[13:37:20.532]                       muffled <- FALSE
[13:37:20.532]                       if (inherits(cond, "message")) {
[13:37:20.532]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:20.532]                         if (muffled) 
[13:37:20.532]                           invokeRestart("muffleMessage")
[13:37:20.532]                       }
[13:37:20.532]                       else if (inherits(cond, "warning")) {
[13:37:20.532]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:20.532]                         if (muffled) 
[13:37:20.532]                           invokeRestart("muffleWarning")
[13:37:20.532]                       }
[13:37:20.532]                       else if (inherits(cond, "condition")) {
[13:37:20.532]                         if (!is.null(pattern)) {
[13:37:20.532]                           computeRestarts <- base::computeRestarts
[13:37:20.532]                           grepl <- base::grepl
[13:37:20.532]                           restarts <- computeRestarts(cond)
[13:37:20.532]                           for (restart in restarts) {
[13:37:20.532]                             name <- restart$name
[13:37:20.532]                             if (is.null(name)) 
[13:37:20.532]                               next
[13:37:20.532]                             if (!grepl(pattern, name)) 
[13:37:20.532]                               next
[13:37:20.532]                             invokeRestart(restart)
[13:37:20.532]                             muffled <- TRUE
[13:37:20.532]                             break
[13:37:20.532]                           }
[13:37:20.532]                         }
[13:37:20.532]                       }
[13:37:20.532]                       invisible(muffled)
[13:37:20.532]                     }
[13:37:20.532]                     muffleCondition(cond, pattern = "^muffle")
[13:37:20.532]                   }
[13:37:20.532]                 }
[13:37:20.532]             }
[13:37:20.532]         }))
[13:37:20.532]     }, error = function(ex) {
[13:37:20.532]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:20.532]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:20.532]                 ...future.rng), started = ...future.startTime, 
[13:37:20.532]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:20.532]             version = "1.8"), class = "FutureResult")
[13:37:20.532]     }, finally = {
[13:37:20.532]         if (!identical(...future.workdir, getwd())) 
[13:37:20.532]             setwd(...future.workdir)
[13:37:20.532]         {
[13:37:20.532]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:20.532]                 ...future.oldOptions$nwarnings <- NULL
[13:37:20.532]             }
[13:37:20.532]             base::options(...future.oldOptions)
[13:37:20.532]             if (.Platform$OS.type == "windows") {
[13:37:20.532]                 old_names <- names(...future.oldEnvVars)
[13:37:20.532]                 envs <- base::Sys.getenv()
[13:37:20.532]                 names <- names(envs)
[13:37:20.532]                 common <- intersect(names, old_names)
[13:37:20.532]                 added <- setdiff(names, old_names)
[13:37:20.532]                 removed <- setdiff(old_names, names)
[13:37:20.532]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:20.532]                   envs[common]]
[13:37:20.532]                 NAMES <- toupper(changed)
[13:37:20.532]                 args <- list()
[13:37:20.532]                 for (kk in seq_along(NAMES)) {
[13:37:20.532]                   name <- changed[[kk]]
[13:37:20.532]                   NAME <- NAMES[[kk]]
[13:37:20.532]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.532]                     next
[13:37:20.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.532]                 }
[13:37:20.532]                 NAMES <- toupper(added)
[13:37:20.532]                 for (kk in seq_along(NAMES)) {
[13:37:20.532]                   name <- added[[kk]]
[13:37:20.532]                   NAME <- NAMES[[kk]]
[13:37:20.532]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.532]                     next
[13:37:20.532]                   args[[name]] <- ""
[13:37:20.532]                 }
[13:37:20.532]                 NAMES <- toupper(removed)
[13:37:20.532]                 for (kk in seq_along(NAMES)) {
[13:37:20.532]                   name <- removed[[kk]]
[13:37:20.532]                   NAME <- NAMES[[kk]]
[13:37:20.532]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:20.532]                     next
[13:37:20.532]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:20.532]                 }
[13:37:20.532]                 if (length(args) > 0) 
[13:37:20.532]                   base::do.call(base::Sys.setenv, args = args)
[13:37:20.532]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:20.532]             }
[13:37:20.532]             else {
[13:37:20.532]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:20.532]             }
[13:37:20.532]             {
[13:37:20.532]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:20.532]                   0L) {
[13:37:20.532]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:20.532]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:20.532]                   base::options(opts)
[13:37:20.532]                 }
[13:37:20.532]                 {
[13:37:20.532]                   {
[13:37:20.532]                     NULL
[13:37:20.532]                     RNGkind("Mersenne-Twister")
[13:37:20.532]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:20.532]                       inherits = FALSE)
[13:37:20.532]                   }
[13:37:20.532]                   options(future.plan = NULL)
[13:37:20.532]                   if (is.na(NA_character_)) 
[13:37:20.532]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:20.532]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:20.532]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:20.532]                     .init = FALSE)
[13:37:20.532]                 }
[13:37:20.532]             }
[13:37:20.532]         }
[13:37:20.532]     })
[13:37:20.532]     if (TRUE) {
[13:37:20.532]         base::sink(type = "output", split = FALSE)
[13:37:20.532]         if (TRUE) {
[13:37:20.532]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:20.532]         }
[13:37:20.532]         else {
[13:37:20.532]             ...future.result["stdout"] <- base::list(NULL)
[13:37:20.532]         }
[13:37:20.532]         base::close(...future.stdout)
[13:37:20.532]         ...future.stdout <- NULL
[13:37:20.532]     }
[13:37:20.532]     ...future.result$conditions <- ...future.conditions
[13:37:20.532]     ...future.result$finished <- base::Sys.time()
[13:37:20.532]     ...future.result
[13:37:20.532] }
[13:37:20.534] assign_globals() ...
[13:37:20.534] List of 2
[13:37:20.534]  $ nested   :List of 2
[13:37:20.534]   ..$ a:function (..., envir = parent.frame())  
[13:37:20.534]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:20.534]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.534]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:20.534]     envir = parent.frame())  
[13:37:20.534]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:37:20.534]   .. ..- attr(*, "init")= logi TRUE
[13:37:20.534]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:37:20.534]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:20.534]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:20.534]  $ strategy2: chr "multisession"
[13:37:20.534]  - attr(*, "where")=List of 2
[13:37:20.534]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:20.534]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:20.534]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:20.534]  - attr(*, "resolved")= logi FALSE
[13:37:20.534]  - attr(*, "total_size")= num 56736
[13:37:20.534]  - attr(*, "already-done")= logi TRUE
[13:37:20.541] - copied ‘nested’ to environment
[13:37:20.541] - copied ‘strategy2’ to environment
[13:37:20.541] assign_globals() ... done
[13:37:20.542] plan(): Setting new future strategy stack:
[13:37:20.542] List of future strategies:
[13:37:20.542] 1. multisession:
[13:37:20.542]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:20.542]    - tweaked: FALSE
[13:37:20.542]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:20.546] plan(): nbrOfWorkers() = 2
[13:37:21.304] plan(): Setting new future strategy stack:
[13:37:21.304] List of future strategies:
[13:37:21.304] 1. sequential:
[13:37:21.304]    - args: function (..., envir = parent.frame())
[13:37:21.304]    - tweaked: FALSE
[13:37:21.304]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.304] 2. multisession:
[13:37:21.304]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.304]    - tweaked: FALSE
[13:37:21.304]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.305] plan(): nbrOfWorkers() = 1
[13:37:21.305] SequentialFuture started (and completed)
[13:37:21.305] signalConditions() ...
[13:37:21.305]  - include = ‘immediateCondition’
[13:37:21.306]  - exclude = 
[13:37:21.306]  - resignal = FALSE
[13:37:21.306]  - Number of conditions: 97
[13:37:21.306] signalConditions() ... done
[13:37:21.306] - Launch lazy future ... done
[13:37:21.306] run() for ‘SequentialFuture’ ... done
[13:37:21.307] signalConditions() ...
[13:37:21.307]  - include = ‘immediateCondition’
[13:37:21.307]  - exclude = 
[13:37:21.307]  - resignal = FALSE
[13:37:21.307]  - Number of conditions: 97
[13:37:21.307] signalConditions() ... done
[13:37:21.307] Future state: ‘finished’
[13:37:21.307] signalConditions() ...
[13:37:21.308]  - include = ‘condition’
[13:37:21.308]  - exclude = ‘immediateCondition’
[13:37:21.308]  - resignal = TRUE
[13:37:21.308]  - Number of conditions: 97
[13:37:21.308]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.547] getGlobalsAndPackages() ...
[13:37:21.308]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.547] Searching for globals...
[13:37:21.308]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.566] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:21.309]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.566] Searching for globals ... DONE
[13:37:21.309]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.566] Resolving globals: FALSE
[13:37:21.309]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.567] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:37:21.309]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.567] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:21.309]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.567] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:21.309]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.567] 
[13:37:21.310]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.567] getGlobalsAndPackages() ... DONE
[13:37:21.310]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.568] run() for ‘Future’ ...
[13:37:21.310]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.568] - state: ‘created’
[13:37:21.310]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.568] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.310]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.575] [local output] makeClusterPSOCK() ...
[13:37:21.310]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.637] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:21.311]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.638] [local output] Base port: 11029
[13:37:21.311]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.639] [local output] Getting setup options for 2 cluster nodes ...
[13:37:21.311]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.639] [local output]  - Node 1 of 2 ...
[13:37:21.311]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.639] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:21.311]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.640] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576343b57275.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576343b57275.pid")'’
[13:37:21.312]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.831] - Possible to infer worker's PID: TRUE
[13:37:21.312]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.832] [local output] Rscript port: 11029

[13:37:21.312]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.832] [local output]  - Node 2 of 2 ...
[13:37:21.312]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.833] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:21.312]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.833] [local output] Rscript port: 11029

[13:37:21.312]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.834] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:21.313]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.834] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:21.313]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.834] [local output] Setting up PSOCK nodes in parallel
[13:37:21.313]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.835] List of 36
[13:37:20.835]  $ worker          : chr "localhost"
[13:37:20.835]   ..- attr(*, "localhost")= logi TRUE
[13:37:20.835]  $ master          : chr "localhost"
[13:37:20.835]  $ port            : int 11029
[13:37:20.835]  $ connectTimeout  : num 120
[13:37:20.835]  $ timeout         : num 2592000
[13:37:20.835]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:20.835]  $ homogeneous     : logi TRUE
[13:37:20.835]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:20.835]  $ rscript_envs    : NULL
[13:37:20.835]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:20.835]  $ rscript_startup : NULL
[13:37:20.835]  $ rscript_sh      : chr "sh"
[13:37:20.835]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:20.835]  $ methods         : logi TRUE
[13:37:20.835]  $ socketOptions   : chr "no-delay"
[13:37:20.835]  $ useXDR          : logi FALSE
[13:37:20.835]  $ outfile         : chr "/dev/null"
[13:37:20.835]  $ renice          : int NA
[13:37:20.835]  $ rshcmd          : NULL
[13:37:20.835]  $ user            : chr(0) 
[13:37:20.835]  $ revtunnel       : logi FALSE
[13:37:20.835]  $ rshlogfile      : NULL
[13:37:20.835]  $ rshopts         : chr(0) 
[13:37:20.835]  $ rank            : int 1
[13:37:20.835]  $ manual          : logi FALSE
[13:37:20.835]  $ dryrun          : logi FALSE
[13:37:20.835]  $ quiet           : logi FALSE
[13:37:20.835]  $ setup_strategy  : chr "parallel"
[13:37:20.835]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:20.835]  $ pidfile         : chr "/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576343b57275.pid"
[13:37:20.835]  $ rshcmd_label    : NULL
[13:37:20.835]  $ rsh_call        : NULL
[13:37:20.835]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:20.835]  $ localMachine    : logi TRUE
[13:37:20.835]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:20.835]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:20.835]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:20.835]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:20.835]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:20.835]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:20.835]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:20.835]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:20.835]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:20.835]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:20.835]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:20.835]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:20.835]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:20.835]  $ arguments       :List of 28
[13:37:20.835]   ..$ worker          : chr "localhost"
[13:37:20.835]   ..$ master          : NULL
[13:37:20.835]   ..$ port            : int 11029
[13:37:20.835]   ..$ connectTimeout  : num 120
[13:37:20.835]   ..$ timeout         : num 2592000
[13:37:20.835]   ..$ rscript         : NULL
[13:37:20.835]   ..$ homogeneous     : NULL
[13:37:20.835]   ..$ rscript_args    : NULL
[13:37:20.835]   ..$ rscript_envs    : NULL
[13:37:20.835]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:20.835]   ..$ rscript_startup : NULL
[13:37:20.835]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:20.835]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:20.835]   ..$ methods         : logi TRUE
[13:37:20.835]   ..$ socketOptions   : chr "no-delay"
[13:37:20.835]   ..$ useXDR          : logi FALSE
[13:37:20.835]   ..$ outfile         : chr "/dev/null"
[13:37:20.835]   ..$ renice          : int NA
[13:37:20.835]   ..$ rshcmd          : NULL
[13:37:20.835]   ..$ user            : NULL
[13:37:20.835]   ..$ revtunnel       : logi NA
[13:37:20.835]   ..$ rshlogfile      : NULL
[13:37:20.835]   ..$ rshopts         : NULL
[13:37:20.835]   ..$ rank            : int 1
[13:37:20.835]   ..$ manual          : logi FALSE
[13:37:20.835]   ..$ dryrun          : logi FALSE
[13:37:20.835]   ..$ quiet           : logi FALSE
[13:37:20.835]   ..$ setup_strategy  : chr "parallel"
[13:37:20.835]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:21.313]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.851] [local output] System call to launch all workers:
[13:37:21.313]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.851] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576343b57275.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11029 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:21.313]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.852] [local output] Starting PSOCK main server
[13:37:21.314]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.858] [local output] Workers launched
[13:37:21.314]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.858] [local output] Waiting for workers to connect back
[13:37:21.314]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:20.858]  - [local output] 0 workers out of 2 ready
[13:37:21.314]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.106]  - [local output] 0 workers out of 2 ready
[13:37:21.314]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.107]  - [local output] 1 workers out of 2 ready
[13:37:21.314]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.107]  - [local output] 2 workers out of 2 ready
[13:37:21.315]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.107] [local output] Launching of workers completed
[13:37:21.315]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.107] [local output] Collecting session information from workers
[13:37:21.315]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.108] [local output]  - Worker #1 of 2
[13:37:21.315]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.109] [local output]  - Worker #2 of 2
[13:37:21.315]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.109] [local output] makeClusterPSOCK() ... done
[13:37:21.315]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.316]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:21.316]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120]   - Field: ‘node’
[13:37:21.316]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120]   - Field: ‘label’
[13:37:21.316]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120]   - Field: ‘local’
[13:37:21.316]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.120]   - Field: ‘owner’
[13:37:21.316]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘envir’
[13:37:21.317]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘workers’
[13:37:21.317]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘packages’
[13:37:21.317]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘gc’
[13:37:21.317]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘conditions’
[13:37:21.317]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘persistent’
[13:37:21.317]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘expr’
[13:37:21.318]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.121]   - Field: ‘uuid’
[13:37:21.318]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘seed’
[13:37:21.318]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘version’
[13:37:21.318]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘result’
[13:37:21.318]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘asynchronous’
[13:37:21.319]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘calls’
[13:37:21.319]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘globals’
[13:37:21.319]  - Condition #64: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.122]   - Field: ‘stdout’
[13:37:21.319]  - Condition #65: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.123]   - Field: ‘earlySignal’
[13:37:21.319]  - Condition #66: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.123]   - Field: ‘lazy’
[13:37:21.319]  - Condition #67: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.123]   - Field: ‘state’
[13:37:21.320]  - Condition #68: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.123] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:21.320]  - Condition #69: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.123] - Launch lazy future ...
[13:37:21.320]  - Condition #70: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.124] Packages needed by the future expression (n = 0): <none>
[13:37:21.320]  - Condition #71: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.124] Packages needed by future strategies (n = 0): <none>
[13:37:21.320]  - Condition #72: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.125] {
[13:37:21.125]     {
[13:37:21.125]         {
[13:37:21.125]             ...future.startTime <- base::Sys.time()
[13:37:21.125]             {
[13:37:21.125]                 {
[13:37:21.125]                   {
[13:37:21.125]                     {
[13:37:21.125]                       base::local({
[13:37:21.125]                         has_future <- base::requireNamespace("future", 
[13:37:21.125]                           quietly = TRUE)
[13:37:21.125]                         if (has_future) {
[13:37:21.125]                           ns <- base::getNamespace("future")
[13:37:21.125]                           version <- ns[[".package"]][["version"]]
[13:37:21.125]                           if (is.null(version)) 
[13:37:21.125]                             version <- utils::packageVersion("future")
[13:37:21.125]                         }
[13:37:21.125]                         else {
[13:37:21.125]                           version <- NULL
[13:37:21.125]                         }
[13:37:21.125]                         if (!has_future || version < "1.8.0") {
[13:37:21.125]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.125]                             "", base::R.version$version.string), 
[13:37:21.125]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:21.125]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.125]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.125]                               "release", "version")], collapse = " "), 
[13:37:21.125]                             hostname = base::Sys.info()[["nodename"]])
[13:37:21.125]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.125]                             info)
[13:37:21.125]                           info <- base::paste(info, collapse = "; ")
[13:37:21.125]                           if (!has_future) {
[13:37:21.125]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.125]                               info)
[13:37:21.125]                           }
[13:37:21.125]                           else {
[13:37:21.125]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.125]                               info, version)
[13:37:21.125]                           }
[13:37:21.125]                           base::stop(msg)
[13:37:21.125]                         }
[13:37:21.125]                       })
[13:37:21.125]                     }
[13:37:21.125]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.125]                     base::options(mc.cores = 1L)
[13:37:21.125]                   }
[13:37:21.125]                   ...future.strategy.old <- future::plan("list")
[13:37:21.125]                   options(future.plan = NULL)
[13:37:21.125]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.125]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.125]                 }
[13:37:21.125]                 ...future.workdir <- getwd()
[13:37:21.125]             }
[13:37:21.125]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.125]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.125]         }
[13:37:21.125]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.125]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.125]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.125]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.125]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.125]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.125]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.125]             base::names(...future.oldOptions))
[13:37:21.125]     }
[13:37:21.125]     if (FALSE) {
[13:37:21.125]     }
[13:37:21.125]     else {
[13:37:21.125]         if (TRUE) {
[13:37:21.125]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.125]                 open = "w")
[13:37:21.125]         }
[13:37:21.125]         else {
[13:37:21.125]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.125]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.125]         }
[13:37:21.125]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.125]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.125]             base::sink(type = "output", split = FALSE)
[13:37:21.125]             base::close(...future.stdout)
[13:37:21.125]         }, add = TRUE)
[13:37:21.125]     }
[13:37:21.125]     ...future.frame <- base::sys.nframe()
[13:37:21.125]     ...future.conditions <- base::list()
[13:37:21.125]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.125]     if (FALSE) {
[13:37:21.125]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.125]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.125]     }
[13:37:21.125]     ...future.result <- base::tryCatch({
[13:37:21.125]         base::withCallingHandlers({
[13:37:21.125]             ...future.value <- base::withVisible(base::local({
[13:37:21.125]                 ...future.makeSendCondition <- base::local({
[13:37:21.125]                   sendCondition <- NULL
[13:37:21.125]                   function(frame = 1L) {
[13:37:21.125]                     if (is.function(sendCondition)) 
[13:37:21.125]                       return(sendCondition)
[13:37:21.125]                     ns <- getNamespace("parallel")
[13:37:21.125]                     if (exists("sendData", mode = "function", 
[13:37:21.125]                       envir = ns)) {
[13:37:21.125]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:21.125]                         envir = ns)
[13:37:21.125]                       envir <- sys.frame(frame)
[13:37:21.125]                       master <- NULL
[13:37:21.125]                       while (!identical(envir, .GlobalEnv) && 
[13:37:21.125]                         !identical(envir, emptyenv())) {
[13:37:21.125]                         if (exists("master", mode = "list", envir = envir, 
[13:37:21.125]                           inherits = FALSE)) {
[13:37:21.125]                           master <- get("master", mode = "list", 
[13:37:21.125]                             envir = envir, inherits = FALSE)
[13:37:21.125]                           if (inherits(master, c("SOCKnode", 
[13:37:21.125]                             "SOCK0node"))) {
[13:37:21.125]                             sendCondition <<- function(cond) {
[13:37:21.125]                               data <- list(type = "VALUE", value = cond, 
[13:37:21.125]                                 success = TRUE)
[13:37:21.125]                               parallel_sendData(master, data)
[13:37:21.125]                             }
[13:37:21.125]                             return(sendCondition)
[13:37:21.125]                           }
[13:37:21.125]                         }
[13:37:21.125]                         frame <- frame + 1L
[13:37:21.125]                         envir <- sys.frame(frame)
[13:37:21.125]                       }
[13:37:21.125]                     }
[13:37:21.125]                     sendCondition <<- function(cond) NULL
[13:37:21.125]                   }
[13:37:21.125]                 })
[13:37:21.125]                 withCallingHandlers({
[13:37:21.125]                   {
[13:37:21.125]                     b <- 2L
[13:37:21.125]                     plan_b <- future::plan("list")
[13:37:21.125]                     nested_b <- nested_a[-1]
[13:37:21.125]                     stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.125]                       1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.125]                       "sequential"))
[13:37:21.125]                     list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.125]                       b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.125]                   }
[13:37:21.125]                 }, immediateCondition = function(cond) {
[13:37:21.125]                   sendCondition <- ...future.makeSendCondition()
[13:37:21.125]                   sendCondition(cond)
[13:37:21.125]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.125]                   {
[13:37:21.125]                     inherits <- base::inherits
[13:37:21.125]                     invokeRestart <- base::invokeRestart
[13:37:21.125]                     is.null <- base::is.null
[13:37:21.125]                     muffled <- FALSE
[13:37:21.125]                     if (inherits(cond, "message")) {
[13:37:21.125]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.125]                       if (muffled) 
[13:37:21.125]                         invokeRestart("muffleMessage")
[13:37:21.125]                     }
[13:37:21.125]                     else if (inherits(cond, "warning")) {
[13:37:21.125]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.125]                       if (muffled) 
[13:37:21.125]                         invokeRestart("muffleWarning")
[13:37:21.125]                     }
[13:37:21.125]                     else if (inherits(cond, "condition")) {
[13:37:21.125]                       if (!is.null(pattern)) {
[13:37:21.125]                         computeRestarts <- base::computeRestarts
[13:37:21.125]                         grepl <- base::grepl
[13:37:21.125]                         restarts <- computeRestarts(cond)
[13:37:21.125]                         for (restart in restarts) {
[13:37:21.125]                           name <- restart$name
[13:37:21.125]                           if (is.null(name)) 
[13:37:21.125]                             next
[13:37:21.125]                           if (!grepl(pattern, name)) 
[13:37:21.125]                             next
[13:37:21.125]                           invokeRestart(restart)
[13:37:21.125]                           muffled <- TRUE
[13:37:21.125]                           break
[13:37:21.125]                         }
[13:37:21.125]                       }
[13:37:21.125]                     }
[13:37:21.125]                     invisible(muffled)
[13:37:21.125]                   }
[13:37:21.125]                   muffleCondition(cond)
[13:37:21.125]                 })
[13:37:21.125]             }))
[13:37:21.125]             future::FutureResult(value = ...future.value$value, 
[13:37:21.125]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.125]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.125]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.125]                     ...future.globalenv.names))
[13:37:21.125]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.125]         }, condition = base::local({
[13:37:21.125]             c <- base::c
[13:37:21.125]             inherits <- base::inherits
[13:37:21.125]             invokeRestart <- base::invokeRestart
[13:37:21.125]             length <- base::length
[13:37:21.125]             list <- base::list
[13:37:21.125]             seq.int <- base::seq.int
[13:37:21.125]             signalCondition <- base::signalCondition
[13:37:21.125]             sys.calls <- base::sys.calls
[13:37:21.125]             `[[` <- base::`[[`
[13:37:21.125]             `+` <- base::`+`
[13:37:21.125]             `<<-` <- base::`<<-`
[13:37:21.125]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.125]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.125]                   3L)]
[13:37:21.125]             }
[13:37:21.125]             function(cond) {
[13:37:21.125]                 is_error <- inherits(cond, "error")
[13:37:21.125]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.125]                   NULL)
[13:37:21.125]                 if (is_error) {
[13:37:21.125]                   sessionInformation <- function() {
[13:37:21.125]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.125]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.125]                       search = base::search(), system = base::Sys.info())
[13:37:21.125]                   }
[13:37:21.125]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.125]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.125]                     cond$call), session = sessionInformation(), 
[13:37:21.125]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.125]                   signalCondition(cond)
[13:37:21.125]                 }
[13:37:21.125]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.125]                 "immediateCondition"))) {
[13:37:21.125]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.125]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.125]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.125]                   if (TRUE && !signal) {
[13:37:21.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.125]                     {
[13:37:21.125]                       inherits <- base::inherits
[13:37:21.125]                       invokeRestart <- base::invokeRestart
[13:37:21.125]                       is.null <- base::is.null
[13:37:21.125]                       muffled <- FALSE
[13:37:21.125]                       if (inherits(cond, "message")) {
[13:37:21.125]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.125]                         if (muffled) 
[13:37:21.125]                           invokeRestart("muffleMessage")
[13:37:21.125]                       }
[13:37:21.125]                       else if (inherits(cond, "warning")) {
[13:37:21.125]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.125]                         if (muffled) 
[13:37:21.125]                           invokeRestart("muffleWarning")
[13:37:21.125]                       }
[13:37:21.125]                       else if (inherits(cond, "condition")) {
[13:37:21.125]                         if (!is.null(pattern)) {
[13:37:21.125]                           computeRestarts <- base::computeRestarts
[13:37:21.125]                           grepl <- base::grepl
[13:37:21.125]                           restarts <- computeRestarts(cond)
[13:37:21.125]                           for (restart in restarts) {
[13:37:21.125]                             name <- restart$name
[13:37:21.125]                             if (is.null(name)) 
[13:37:21.125]                               next
[13:37:21.125]                             if (!grepl(pattern, name)) 
[13:37:21.125]                               next
[13:37:21.125]                             invokeRestart(restart)
[13:37:21.125]                             muffled <- TRUE
[13:37:21.125]                             break
[13:37:21.125]                           }
[13:37:21.125]                         }
[13:37:21.125]                       }
[13:37:21.125]                       invisible(muffled)
[13:37:21.125]                     }
[13:37:21.125]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.125]                   }
[13:37:21.125]                 }
[13:37:21.125]                 else {
[13:37:21.125]                   if (TRUE) {
[13:37:21.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.125]                     {
[13:37:21.125]                       inherits <- base::inherits
[13:37:21.125]                       invokeRestart <- base::invokeRestart
[13:37:21.125]                       is.null <- base::is.null
[13:37:21.125]                       muffled <- FALSE
[13:37:21.125]                       if (inherits(cond, "message")) {
[13:37:21.125]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.125]                         if (muffled) 
[13:37:21.125]                           invokeRestart("muffleMessage")
[13:37:21.125]                       }
[13:37:21.125]                       else if (inherits(cond, "warning")) {
[13:37:21.125]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.125]                         if (muffled) 
[13:37:21.125]                           invokeRestart("muffleWarning")
[13:37:21.125]                       }
[13:37:21.125]                       else if (inherits(cond, "condition")) {
[13:37:21.125]                         if (!is.null(pattern)) {
[13:37:21.125]                           computeRestarts <- base::computeRestarts
[13:37:21.125]                           grepl <- base::grepl
[13:37:21.125]                           restarts <- computeRestarts(cond)
[13:37:21.125]                           for (restart in restarts) {
[13:37:21.125]                             name <- restart$name
[13:37:21.125]                             if (is.null(name)) 
[13:37:21.125]                               next
[13:37:21.125]                             if (!grepl(pattern, name)) 
[13:37:21.125]                               next
[13:37:21.125]                             invokeRestart(restart)
[13:37:21.125]                             muffled <- TRUE
[13:37:21.125]                             break
[13:37:21.125]                           }
[13:37:21.125]                         }
[13:37:21.125]                       }
[13:37:21.125]                       invisible(muffled)
[13:37:21.125]                     }
[13:37:21.125]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.125]                   }
[13:37:21.125]                 }
[13:37:21.125]             }
[13:37:21.125]         }))
[13:37:21.125]     }, error = function(ex) {
[13:37:21.125]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.125]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.125]                 ...future.rng), started = ...future.startTime, 
[13:37:21.125]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.125]             version = "1.8"), class = "FutureResult")
[13:37:21.125]     }, finally = {
[13:37:21.125]         if (!identical(...future.workdir, getwd())) 
[13:37:21.125]             setwd(...future.workdir)
[13:37:21.125]         {
[13:37:21.125]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.125]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.125]             }
[13:37:21.125]             base::options(...future.oldOptions)
[13:37:21.125]             if (.Platform$OS.type == "windows") {
[13:37:21.125]                 old_names <- names(...future.oldEnvVars)
[13:37:21.125]                 envs <- base::Sys.getenv()
[13:37:21.125]                 names <- names(envs)
[13:37:21.125]                 common <- intersect(names, old_names)
[13:37:21.125]                 added <- setdiff(names, old_names)
[13:37:21.125]                 removed <- setdiff(old_names, names)
[13:37:21.125]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.125]                   envs[common]]
[13:37:21.125]                 NAMES <- toupper(changed)
[13:37:21.125]                 args <- list()
[13:37:21.125]                 for (kk in seq_along(NAMES)) {
[13:37:21.125]                   name <- changed[[kk]]
[13:37:21.125]                   NAME <- NAMES[[kk]]
[13:37:21.125]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.125]                     next
[13:37:21.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.125]                 }
[13:37:21.125]                 NAMES <- toupper(added)
[13:37:21.125]                 for (kk in seq_along(NAMES)) {
[13:37:21.125]                   name <- added[[kk]]
[13:37:21.125]                   NAME <- NAMES[[kk]]
[13:37:21.125]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.125]                     next
[13:37:21.125]                   args[[name]] <- ""
[13:37:21.125]                 }
[13:37:21.125]                 NAMES <- toupper(removed)
[13:37:21.125]                 for (kk in seq_along(NAMES)) {
[13:37:21.125]                   name <- removed[[kk]]
[13:37:21.125]                   NAME <- NAMES[[kk]]
[13:37:21.125]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.125]                     next
[13:37:21.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.125]                 }
[13:37:21.125]                 if (length(args) > 0) 
[13:37:21.125]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.125]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.125]             }
[13:37:21.125]             else {
[13:37:21.125]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.125]             }
[13:37:21.125]             {
[13:37:21.125]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.125]                   0L) {
[13:37:21.125]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.125]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.125]                   base::options(opts)
[13:37:21.125]                 }
[13:37:21.125]                 {
[13:37:21.125]                   {
[13:37:21.125]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.125]                     NULL
[13:37:21.125]                   }
[13:37:21.125]                   options(future.plan = NULL)
[13:37:21.125]                   if (is.na(NA_character_)) 
[13:37:21.125]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.125]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.125]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.125]                     .init = FALSE)
[13:37:21.125]                 }
[13:37:21.125]             }
[13:37:21.125]         }
[13:37:21.125]     })
[13:37:21.125]     if (TRUE) {
[13:37:21.125]         base::sink(type = "output", split = FALSE)
[13:37:21.125]         if (TRUE) {
[13:37:21.125]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.125]         }
[13:37:21.125]         else {
[13:37:21.125]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.125]         }
[13:37:21.125]         base::close(...future.stdout)
[13:37:21.125]         ...future.stdout <- NULL
[13:37:21.125]     }
[13:37:21.125]     ...future.result$conditions <- ...future.conditions
[13:37:21.125]     ...future.result$finished <- base::Sys.time()
[13:37:21.125]     ...future.result
[13:37:21.125] }
[13:37:21.320]  - Condition #73: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.179] Exporting 3 global objects (87.82 KiB) to cluster node #1 ...
[13:37:21.321]  - Condition #74: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.180] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ...
[13:37:21.321]  - Condition #75: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.180] Exporting ‘nested_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:37:21.321]  - Condition #76: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.180] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[13:37:21.321]  - Condition #77: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.181] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[13:37:21.321]  - Condition #78: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.181] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ...
[13:37:21.321]  - Condition #79: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.223] Exporting ‘plan_a’ (43.88 KiB) to cluster node #1 ... DONE
[13:37:21.322]  - Condition #80: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.223] Exporting 3 global objects (87.82 KiB) to cluster node #1 ... DONE
[13:37:21.322]  - Condition #81: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.224] MultisessionFuture started
[13:37:21.322]  - Condition #82: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.224] - Launch lazy future ... done
[13:37:21.322]  - Condition #83: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.224] run() for ‘MultisessionFuture’ ... done
[13:37:21.322]  - Condition #84: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.224] result() for ClusterFuture ...
[13:37:21.322]  - Condition #85: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.225] receiveMessageFromWorker() for ClusterFuture ...
[13:37:21.323]  - Condition #86: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.225] - Validating connection of MultisessionFuture
[13:37:21.323]  - Condition #87: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.302] - received message: FutureResult
[13:37:21.323]  - Condition #88: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.302] - Received FutureResult
[13:37:21.323]  - Condition #89: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.302] - Erased future from FutureRegistry
[13:37:21.323]  - Condition #90: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.302] result() for ClusterFuture ...
[13:37:21.323]  - Condition #91: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] - result already collected: FutureResult
[13:37:21.324]  - Condition #92: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] result() for ClusterFuture ... done
[13:37:21.324]  - Condition #93: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:21.324]  - Condition #94: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] result() for ClusterFuture ... done
[13:37:21.324]  - Condition #95: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] result() for ClusterFuture ...
[13:37:21.324]  - Condition #96: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] - result already collected: FutureResult
[13:37:21.324]  - Condition #97: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.303] result() for ClusterFuture ... done
[13:37:21.325] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.332] getGlobalsAndPackages() ...
[13:37:21.332] Searching for globals...
[13:37:21.333] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.334] Searching for globals ... DONE
[13:37:21.334] Resolving globals: FALSE
[13:37:21.334] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.335] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.335] - globals: [1] ‘data’
[13:37:21.335] - packages: [1] ‘future’
[13:37:21.335] getGlobalsAndPackages() ... DONE
[13:37:21.336] run() for ‘Future’ ...
[13:37:21.336] - state: ‘created’
[13:37:21.336] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:21.336] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.336] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.337]   - Field: ‘label’
[13:37:21.337]   - Field: ‘local’
[13:37:21.337]   - Field: ‘owner’
[13:37:21.337]   - Field: ‘envir’
[13:37:21.337]   - Field: ‘packages’
[13:37:21.337]   - Field: ‘gc’
[13:37:21.337]   - Field: ‘conditions’
[13:37:21.337]   - Field: ‘expr’
[13:37:21.338]   - Field: ‘uuid’
[13:37:21.338]   - Field: ‘seed’
[13:37:21.338]   - Field: ‘version’
[13:37:21.338]   - Field: ‘result’
[13:37:21.338]   - Field: ‘asynchronous’
[13:37:21.338]   - Field: ‘calls’
[13:37:21.338]   - Field: ‘globals’
[13:37:21.338]   - Field: ‘stdout’
[13:37:21.338]   - Field: ‘earlySignal’
[13:37:21.339]   - Field: ‘lazy’
[13:37:21.339]   - Field: ‘state’
[13:37:21.339] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.339] - Launch lazy future ...
[13:37:21.339] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.339] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.340] {
[13:37:21.340]     {
[13:37:21.340]         {
[13:37:21.340]             ...future.startTime <- base::Sys.time()
[13:37:21.340]             {
[13:37:21.340]                 {
[13:37:21.340]                   {
[13:37:21.340]                     {
[13:37:21.340]                       base::local({
[13:37:21.340]                         has_future <- base::requireNamespace("future", 
[13:37:21.340]                           quietly = TRUE)
[13:37:21.340]                         if (has_future) {
[13:37:21.340]                           ns <- base::getNamespace("future")
[13:37:21.340]                           version <- ns[[".package"]][["version"]]
[13:37:21.340]                           if (is.null(version)) 
[13:37:21.340]                             version <- utils::packageVersion("future")
[13:37:21.340]                         }
[13:37:21.340]                         else {
[13:37:21.340]                           version <- NULL
[13:37:21.340]                         }
[13:37:21.340]                         if (!has_future || version < "1.8.0") {
[13:37:21.340]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.340]                             "", base::R.version$version.string), 
[13:37:21.340]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:21.340]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.340]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.340]                               "release", "version")], collapse = " "), 
[13:37:21.340]                             hostname = base::Sys.info()[["nodename"]])
[13:37:21.340]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.340]                             info)
[13:37:21.340]                           info <- base::paste(info, collapse = "; ")
[13:37:21.340]                           if (!has_future) {
[13:37:21.340]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.340]                               info)
[13:37:21.340]                           }
[13:37:21.340]                           else {
[13:37:21.340]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.340]                               info, version)
[13:37:21.340]                           }
[13:37:21.340]                           base::stop(msg)
[13:37:21.340]                         }
[13:37:21.340]                       })
[13:37:21.340]                     }
[13:37:21.340]                     base::local({
[13:37:21.340]                       for (pkg in "future") {
[13:37:21.340]                         base::loadNamespace(pkg)
[13:37:21.340]                         base::library(pkg, character.only = TRUE)
[13:37:21.340]                       }
[13:37:21.340]                     })
[13:37:21.340]                   }
[13:37:21.340]                   ...future.strategy.old <- future::plan("list")
[13:37:21.340]                   options(future.plan = NULL)
[13:37:21.340]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.340]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:21.340]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.340]                     envir = parent.frame()) 
[13:37:21.340]                   {
[13:37:21.340]                     if (is.function(workers)) 
[13:37:21.340]                       workers <- workers()
[13:37:21.340]                     workers <- structure(as.integer(workers), 
[13:37:21.340]                       class = class(workers))
[13:37:21.340]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:21.340]                       workers >= 1)
[13:37:21.340]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:21.340]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:21.340]                     }
[13:37:21.340]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:21.340]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:21.340]                       envir = envir)
[13:37:21.340]                     if (!future$lazy) 
[13:37:21.340]                       future <- run(future)
[13:37:21.340]                     invisible(future)
[13:37:21.340]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.340]                 }
[13:37:21.340]                 ...future.workdir <- getwd()
[13:37:21.340]             }
[13:37:21.340]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.340]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.340]         }
[13:37:21.340]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.340]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.340]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.340]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.340]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.340]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.340]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.340]             base::names(...future.oldOptions))
[13:37:21.340]     }
[13:37:21.340]     if (FALSE) {
[13:37:21.340]     }
[13:37:21.340]     else {
[13:37:21.340]         if (TRUE) {
[13:37:21.340]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.340]                 open = "w")
[13:37:21.340]         }
[13:37:21.340]         else {
[13:37:21.340]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.340]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.340]         }
[13:37:21.340]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.340]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.340]             base::sink(type = "output", split = FALSE)
[13:37:21.340]             base::close(...future.stdout)
[13:37:21.340]         }, add = TRUE)
[13:37:21.340]     }
[13:37:21.340]     ...future.frame <- base::sys.nframe()
[13:37:21.340]     ...future.conditions <- base::list()
[13:37:21.340]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.340]     if (FALSE) {
[13:37:21.340]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.340]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.340]     }
[13:37:21.340]     ...future.result <- base::tryCatch({
[13:37:21.340]         base::withCallingHandlers({
[13:37:21.340]             ...future.value <- base::withVisible(base::local({
[13:37:21.340]                 value(future(subset(data, a == 2)))
[13:37:21.340]             }))
[13:37:21.340]             future::FutureResult(value = ...future.value$value, 
[13:37:21.340]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.340]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.340]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.340]                     ...future.globalenv.names))
[13:37:21.340]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.340]         }, condition = base::local({
[13:37:21.340]             c <- base::c
[13:37:21.340]             inherits <- base::inherits
[13:37:21.340]             invokeRestart <- base::invokeRestart
[13:37:21.340]             length <- base::length
[13:37:21.340]             list <- base::list
[13:37:21.340]             seq.int <- base::seq.int
[13:37:21.340]             signalCondition <- base::signalCondition
[13:37:21.340]             sys.calls <- base::sys.calls
[13:37:21.340]             `[[` <- base::`[[`
[13:37:21.340]             `+` <- base::`+`
[13:37:21.340]             `<<-` <- base::`<<-`
[13:37:21.340]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.340]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.340]                   3L)]
[13:37:21.340]             }
[13:37:21.340]             function(cond) {
[13:37:21.340]                 is_error <- inherits(cond, "error")
[13:37:21.340]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.340]                   NULL)
[13:37:21.340]                 if (is_error) {
[13:37:21.340]                   sessionInformation <- function() {
[13:37:21.340]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.340]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.340]                       search = base::search(), system = base::Sys.info())
[13:37:21.340]                   }
[13:37:21.340]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.340]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.340]                     cond$call), session = sessionInformation(), 
[13:37:21.340]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.340]                   signalCondition(cond)
[13:37:21.340]                 }
[13:37:21.340]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.340]                 "immediateCondition"))) {
[13:37:21.340]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.340]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.340]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.340]                   if (TRUE && !signal) {
[13:37:21.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.340]                     {
[13:37:21.340]                       inherits <- base::inherits
[13:37:21.340]                       invokeRestart <- base::invokeRestart
[13:37:21.340]                       is.null <- base::is.null
[13:37:21.340]                       muffled <- FALSE
[13:37:21.340]                       if (inherits(cond, "message")) {
[13:37:21.340]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.340]                         if (muffled) 
[13:37:21.340]                           invokeRestart("muffleMessage")
[13:37:21.340]                       }
[13:37:21.340]                       else if (inherits(cond, "warning")) {
[13:37:21.340]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.340]                         if (muffled) 
[13:37:21.340]                           invokeRestart("muffleWarning")
[13:37:21.340]                       }
[13:37:21.340]                       else if (inherits(cond, "condition")) {
[13:37:21.340]                         if (!is.null(pattern)) {
[13:37:21.340]                           computeRestarts <- base::computeRestarts
[13:37:21.340]                           grepl <- base::grepl
[13:37:21.340]                           restarts <- computeRestarts(cond)
[13:37:21.340]                           for (restart in restarts) {
[13:37:21.340]                             name <- restart$name
[13:37:21.340]                             if (is.null(name)) 
[13:37:21.340]                               next
[13:37:21.340]                             if (!grepl(pattern, name)) 
[13:37:21.340]                               next
[13:37:21.340]                             invokeRestart(restart)
[13:37:21.340]                             muffled <- TRUE
[13:37:21.340]                             break
[13:37:21.340]                           }
[13:37:21.340]                         }
[13:37:21.340]                       }
[13:37:21.340]                       invisible(muffled)
[13:37:21.340]                     }
[13:37:21.340]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.340]                   }
[13:37:21.340]                 }
[13:37:21.340]                 else {
[13:37:21.340]                   if (TRUE) {
[13:37:21.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.340]                     {
[13:37:21.340]                       inherits <- base::inherits
[13:37:21.340]                       invokeRestart <- base::invokeRestart
[13:37:21.340]                       is.null <- base::is.null
[13:37:21.340]                       muffled <- FALSE
[13:37:21.340]                       if (inherits(cond, "message")) {
[13:37:21.340]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.340]                         if (muffled) 
[13:37:21.340]                           invokeRestart("muffleMessage")
[13:37:21.340]                       }
[13:37:21.340]                       else if (inherits(cond, "warning")) {
[13:37:21.340]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.340]                         if (muffled) 
[13:37:21.340]                           invokeRestart("muffleWarning")
[13:37:21.340]                       }
[13:37:21.340]                       else if (inherits(cond, "condition")) {
[13:37:21.340]                         if (!is.null(pattern)) {
[13:37:21.340]                           computeRestarts <- base::computeRestarts
[13:37:21.340]                           grepl <- base::grepl
[13:37:21.340]                           restarts <- computeRestarts(cond)
[13:37:21.340]                           for (restart in restarts) {
[13:37:21.340]                             name <- restart$name
[13:37:21.340]                             if (is.null(name)) 
[13:37:21.340]                               next
[13:37:21.340]                             if (!grepl(pattern, name)) 
[13:37:21.340]                               next
[13:37:21.340]                             invokeRestart(restart)
[13:37:21.340]                             muffled <- TRUE
[13:37:21.340]                             break
[13:37:21.340]                           }
[13:37:21.340]                         }
[13:37:21.340]                       }
[13:37:21.340]                       invisible(muffled)
[13:37:21.340]                     }
[13:37:21.340]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.340]                   }
[13:37:21.340]                 }
[13:37:21.340]             }
[13:37:21.340]         }))
[13:37:21.340]     }, error = function(ex) {
[13:37:21.340]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.340]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.340]                 ...future.rng), started = ...future.startTime, 
[13:37:21.340]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.340]             version = "1.8"), class = "FutureResult")
[13:37:21.340]     }, finally = {
[13:37:21.340]         if (!identical(...future.workdir, getwd())) 
[13:37:21.340]             setwd(...future.workdir)
[13:37:21.340]         {
[13:37:21.340]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.340]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.340]             }
[13:37:21.340]             base::options(...future.oldOptions)
[13:37:21.340]             if (.Platform$OS.type == "windows") {
[13:37:21.340]                 old_names <- names(...future.oldEnvVars)
[13:37:21.340]                 envs <- base::Sys.getenv()
[13:37:21.340]                 names <- names(envs)
[13:37:21.340]                 common <- intersect(names, old_names)
[13:37:21.340]                 added <- setdiff(names, old_names)
[13:37:21.340]                 removed <- setdiff(old_names, names)
[13:37:21.340]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.340]                   envs[common]]
[13:37:21.340]                 NAMES <- toupper(changed)
[13:37:21.340]                 args <- list()
[13:37:21.340]                 for (kk in seq_along(NAMES)) {
[13:37:21.340]                   name <- changed[[kk]]
[13:37:21.340]                   NAME <- NAMES[[kk]]
[13:37:21.340]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.340]                     next
[13:37:21.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.340]                 }
[13:37:21.340]                 NAMES <- toupper(added)
[13:37:21.340]                 for (kk in seq_along(NAMES)) {
[13:37:21.340]                   name <- added[[kk]]
[13:37:21.340]                   NAME <- NAMES[[kk]]
[13:37:21.340]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.340]                     next
[13:37:21.340]                   args[[name]] <- ""
[13:37:21.340]                 }
[13:37:21.340]                 NAMES <- toupper(removed)
[13:37:21.340]                 for (kk in seq_along(NAMES)) {
[13:37:21.340]                   name <- removed[[kk]]
[13:37:21.340]                   NAME <- NAMES[[kk]]
[13:37:21.340]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.340]                     next
[13:37:21.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.340]                 }
[13:37:21.340]                 if (length(args) > 0) 
[13:37:21.340]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.340]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.340]             }
[13:37:21.340]             else {
[13:37:21.340]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.340]             }
[13:37:21.340]             {
[13:37:21.340]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.340]                   0L) {
[13:37:21.340]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.340]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.340]                   base::options(opts)
[13:37:21.340]                 }
[13:37:21.340]                 {
[13:37:21.340]                   {
[13:37:21.340]                     NULL
[13:37:21.340]                     RNGkind("Mersenne-Twister")
[13:37:21.340]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.340]                       inherits = FALSE)
[13:37:21.340]                   }
[13:37:21.340]                   options(future.plan = NULL)
[13:37:21.340]                   if (is.na(NA_character_)) 
[13:37:21.340]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.340]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.340]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.340]                     .init = FALSE)
[13:37:21.340]                 }
[13:37:21.340]             }
[13:37:21.340]         }
[13:37:21.340]     })
[13:37:21.340]     if (TRUE) {
[13:37:21.340]         base::sink(type = "output", split = FALSE)
[13:37:21.340]         if (TRUE) {
[13:37:21.340]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.340]         }
[13:37:21.340]         else {
[13:37:21.340]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.340]         }
[13:37:21.340]         base::close(...future.stdout)
[13:37:21.340]         ...future.stdout <- NULL
[13:37:21.340]     }
[13:37:21.340]     ...future.result$conditions <- ...future.conditions
[13:37:21.340]     ...future.result$finished <- base::Sys.time()
[13:37:21.340]     ...future.result
[13:37:21.340] }
[13:37:21.342] assign_globals() ...
[13:37:21.342] List of 1
[13:37:21.342]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.342]   ..$ a: int [1:3] 1 2 3
[13:37:21.342]   ..$ b: int [1:3] 3 2 1
[13:37:21.342]  - attr(*, "where")=List of 1
[13:37:21.342]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.342]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.342]  - attr(*, "resolved")= logi FALSE
[13:37:21.342]  - attr(*, "total_size")= num 128
[13:37:21.342]  - attr(*, "already-done")= logi TRUE
[13:37:21.349] - copied ‘data’ to environment
[13:37:21.349] assign_globals() ... done
[13:37:21.349] plan(): Setting new future strategy stack:
[13:37:21.349] List of future strategies:
[13:37:21.349] 1. multisession:
[13:37:21.349]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.349]    - tweaked: FALSE
[13:37:21.349]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.353] plan(): nbrOfWorkers() = 2
[13:37:21.398] plan(): Setting new future strategy stack:
[13:37:21.398] List of future strategies:
[13:37:21.398] 1. sequential:
[13:37:21.398]    - args: function (..., envir = parent.frame())
[13:37:21.398]    - tweaked: FALSE
[13:37:21.398]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.398] 2. multisession:
[13:37:21.398]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.398]    - tweaked: FALSE
[13:37:21.398]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.399] plan(): nbrOfWorkers() = 1
[13:37:21.399] SequentialFuture started (and completed)
[13:37:21.399] signalConditions() ...
[13:37:21.399]  - include = ‘immediateCondition’
[13:37:21.399]  - exclude = 
[13:37:21.399]  - resignal = FALSE
[13:37:21.400]  - Number of conditions: 63
[13:37:21.400] signalConditions() ... done
[13:37:21.400] - Launch lazy future ... done
[13:37:21.400] run() for ‘SequentialFuture’ ... done
[13:37:21.400] signalConditions() ...
[13:37:21.400]  - include = ‘immediateCondition’
[13:37:21.400]  - exclude = 
[13:37:21.400]  - resignal = FALSE
[13:37:21.400]  - Number of conditions: 63
[13:37:21.400] signalConditions() ... done
[13:37:21.401] Future state: ‘finished’
[13:37:21.401] signalConditions() ...
[13:37:21.401]  - include = ‘condition’
[13:37:21.401]  - exclude = ‘immediateCondition’
[13:37:21.401]  - resignal = TRUE
[13:37:21.401]  - Number of conditions: 63
[13:37:21.401]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.354] getGlobalsAndPackages() ...
[13:37:21.401]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.354] Searching for globals...
[13:37:21.401]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.367] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.402]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.367] Searching for globals ... DONE
[13:37:21.402]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.368] Resolving globals: FALSE
[13:37:21.402]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.368] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.402]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.368] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.402]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] - globals: [1] ‘data’
[13:37:21.402]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] 
[13:37:21.402]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] getGlobalsAndPackages() ... DONE
[13:37:21.403]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] run() for ‘Future’ ...
[13:37:21.403]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] - state: ‘created’
[13:37:21.403]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.369] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.403]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.383] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.403]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.383] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:21.403]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘node’
[13:37:21.403]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘label’
[13:37:21.403]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘local’
[13:37:21.404]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘owner’
[13:37:21.404]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘envir’
[13:37:21.404]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘workers’
[13:37:21.404]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘packages’
[13:37:21.404]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘gc’
[13:37:21.404]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘conditions’
[13:37:21.404]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.384]   - Field: ‘persistent’
[13:37:21.404]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘expr’
[13:37:21.405]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘uuid’
[13:37:21.405]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘seed’
[13:37:21.405]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘version’
[13:37:21.405]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘result’
[13:37:21.405]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘asynchronous’
[13:37:21.405]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘calls’
[13:37:21.405]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘globals’
[13:37:21.405]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘stdout’
[13:37:21.406]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.385]   - Field: ‘earlySignal’
[13:37:21.406]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386]   - Field: ‘lazy’
[13:37:21.406]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386]   - Field: ‘state’
[13:37:21.406]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:21.406]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386] - Launch lazy future ...
[13:37:21.406]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386] Packages needed by the future expression (n = 0): <none>
[13:37:21.406]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.386] Packages needed by future strategies (n = 0): <none>
[13:37:21.407]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.387] {
[13:37:21.387]     {
[13:37:21.387]         {
[13:37:21.387]             ...future.startTime <- base::Sys.time()
[13:37:21.387]             {
[13:37:21.387]                 {
[13:37:21.387]                   {
[13:37:21.387]                     {
[13:37:21.387]                       base::local({
[13:37:21.387]                         has_future <- base::requireNamespace("future", 
[13:37:21.387]                           quietly = TRUE)
[13:37:21.387]                         if (has_future) {
[13:37:21.387]                           ns <- base::getNamespace("future")
[13:37:21.387]                           version <- ns[[".package"]][["version"]]
[13:37:21.387]                           if (is.null(version)) 
[13:37:21.387]                             version <- utils::packageVersion("future")
[13:37:21.387]                         }
[13:37:21.387]                         else {
[13:37:21.387]                           version <- NULL
[13:37:21.387]                         }
[13:37:21.387]                         if (!has_future || version < "1.8.0") {
[13:37:21.387]                           info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.387]                             "", base::R.version$version.string), 
[13:37:21.387]                             platform = base::sprintf("%s (%s-bit)", 
[13:37:21.387]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.387]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.387]                               "release", "version")], collapse = " "), 
[13:37:21.387]                             hostname = base::Sys.info()[["nodename"]])
[13:37:21.387]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.387]                             info)
[13:37:21.387]                           info <- base::paste(info, collapse = "; ")
[13:37:21.387]                           if (!has_future) {
[13:37:21.387]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.387]                               info)
[13:37:21.387]                           }
[13:37:21.387]                           else {
[13:37:21.387]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.387]                               info, version)
[13:37:21.387]                           }
[13:37:21.387]                           base::stop(msg)
[13:37:21.387]                         }
[13:37:21.387]                       })
[13:37:21.387]                     }
[13:37:21.387]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.387]                     base::options(mc.cores = 1L)
[13:37:21.387]                   }
[13:37:21.387]                   ...future.strategy.old <- future::plan("list")
[13:37:21.387]                   options(future.plan = NULL)
[13:37:21.387]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.387]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.387]                 }
[13:37:21.387]                 ...future.workdir <- getwd()
[13:37:21.387]             }
[13:37:21.387]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.387]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.387]         }
[13:37:21.387]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.387]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.387]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.387]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.387]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.387]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.387]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.387]             base::names(...future.oldOptions))
[13:37:21.387]     }
[13:37:21.387]     if (FALSE) {
[13:37:21.387]     }
[13:37:21.387]     else {
[13:37:21.387]         if (TRUE) {
[13:37:21.387]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.387]                 open = "w")
[13:37:21.387]         }
[13:37:21.387]         else {
[13:37:21.387]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.387]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.387]         }
[13:37:21.387]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.387]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.387]             base::sink(type = "output", split = FALSE)
[13:37:21.387]             base::close(...future.stdout)
[13:37:21.387]         }, add = TRUE)
[13:37:21.387]     }
[13:37:21.387]     ...future.frame <- base::sys.nframe()
[13:37:21.387]     ...future.conditions <- base::list()
[13:37:21.387]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.387]     if (FALSE) {
[13:37:21.387]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.387]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.387]     }
[13:37:21.387]     ...future.result <- base::tryCatch({
[13:37:21.387]         base::withCallingHandlers({
[13:37:21.387]             ...future.value <- base::withVisible(base::local({
[13:37:21.387]                 ...future.makeSendCondition <- base::local({
[13:37:21.387]                   sendCondition <- NULL
[13:37:21.387]                   function(frame = 1L) {
[13:37:21.387]                     if (is.function(sendCondition)) 
[13:37:21.387]                       return(sendCondition)
[13:37:21.387]                     ns <- getNamespace("parallel")
[13:37:21.387]                     if (exists("sendData", mode = "function", 
[13:37:21.387]                       envir = ns)) {
[13:37:21.387]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:21.387]                         envir = ns)
[13:37:21.387]                       envir <- sys.frame(frame)
[13:37:21.387]                       master <- NULL
[13:37:21.387]                       while (!identical(envir, .GlobalEnv) && 
[13:37:21.387]                         !identical(envir, emptyenv())) {
[13:37:21.387]                         if (exists("master", mode = "list", envir = envir, 
[13:37:21.387]                           inherits = FALSE)) {
[13:37:21.387]                           master <- get("master", mode = "list", 
[13:37:21.387]                             envir = envir, inherits = FALSE)
[13:37:21.387]                           if (inherits(master, c("SOCKnode", 
[13:37:21.387]                             "SOCK0node"))) {
[13:37:21.387]                             sendCondition <<- function(cond) {
[13:37:21.387]                               data <- list(type = "VALUE", value = cond, 
[13:37:21.387]                                 success = TRUE)
[13:37:21.387]                               parallel_sendData(master, data)
[13:37:21.387]                             }
[13:37:21.387]                             return(sendCondition)
[13:37:21.387]                           }
[13:37:21.387]                         }
[13:37:21.387]                         frame <- frame + 1L
[13:37:21.387]                         envir <- sys.frame(frame)
[13:37:21.387]                       }
[13:37:21.387]                     }
[13:37:21.387]                     sendCondition <<- function(cond) NULL
[13:37:21.387]                   }
[13:37:21.387]                 })
[13:37:21.387]                 withCallingHandlers({
[13:37:21.387]                   subset(data, a == 2)
[13:37:21.387]                 }, immediateCondition = function(cond) {
[13:37:21.387]                   sendCondition <- ...future.makeSendCondition()
[13:37:21.387]                   sendCondition(cond)
[13:37:21.387]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.387]                   {
[13:37:21.387]                     inherits <- base::inherits
[13:37:21.387]                     invokeRestart <- base::invokeRestart
[13:37:21.387]                     is.null <- base::is.null
[13:37:21.387]                     muffled <- FALSE
[13:37:21.387]                     if (inherits(cond, "message")) {
[13:37:21.387]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.387]                       if (muffled) 
[13:37:21.387]                         invokeRestart("muffleMessage")
[13:37:21.387]                     }
[13:37:21.387]                     else if (inherits(cond, "warning")) {
[13:37:21.387]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.387]                       if (muffled) 
[13:37:21.387]                         invokeRestart("muffleWarning")
[13:37:21.387]                     }
[13:37:21.387]                     else if (inherits(cond, "condition")) {
[13:37:21.387]                       if (!is.null(pattern)) {
[13:37:21.387]                         computeRestarts <- base::computeRestarts
[13:37:21.387]                         grepl <- base::grepl
[13:37:21.387]                         restarts <- computeRestarts(cond)
[13:37:21.387]                         for (restart in restarts) {
[13:37:21.387]                           name <- restart$name
[13:37:21.387]                           if (is.null(name)) 
[13:37:21.387]                             next
[13:37:21.387]                           if (!grepl(pattern, name)) 
[13:37:21.387]                             next
[13:37:21.387]                           invokeRestart(restart)
[13:37:21.387]                           muffled <- TRUE
[13:37:21.387]                           break
[13:37:21.387]                         }
[13:37:21.387]                       }
[13:37:21.387]                     }
[13:37:21.387]                     invisible(muffled)
[13:37:21.387]                   }
[13:37:21.387]                   muffleCondition(cond)
[13:37:21.387]                 })
[13:37:21.387]             }))
[13:37:21.387]             future::FutureResult(value = ...future.value$value, 
[13:37:21.387]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.387]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.387]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.387]                     ...future.globalenv.names))
[13:37:21.387]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.387]         }, condition = base::local({
[13:37:21.387]             c <- base::c
[13:37:21.387]             inherits <- base::inherits
[13:37:21.387]             invokeRestart <- base::invokeRestart
[13:37:21.387]             length <- base::length
[13:37:21.387]             list <- base::list
[13:37:21.387]             seq.int <- base::seq.int
[13:37:21.387]             signalCondition <- base::signalCondition
[13:37:21.387]             sys.calls <- base::sys.calls
[13:37:21.387]             `[[` <- base::`[[`
[13:37:21.387]             `+` <- base::`+`
[13:37:21.387]             `<<-` <- base::`<<-`
[13:37:21.387]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.387]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.387]                   3L)]
[13:37:21.387]             }
[13:37:21.387]             function(cond) {
[13:37:21.387]                 is_error <- inherits(cond, "error")
[13:37:21.387]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.387]                   NULL)
[13:37:21.387]                 if (is_error) {
[13:37:21.387]                   sessionInformation <- function() {
[13:37:21.387]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.387]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.387]                       search = base::search(), system = base::Sys.info())
[13:37:21.387]                   }
[13:37:21.387]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.387]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.387]                     cond$call), session = sessionInformation(), 
[13:37:21.387]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.387]                   signalCondition(cond)
[13:37:21.387]                 }
[13:37:21.387]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.387]                 "immediateCondition"))) {
[13:37:21.387]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.387]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.387]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.387]                   if (TRUE && !signal) {
[13:37:21.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.387]                     {
[13:37:21.387]                       inherits <- base::inherits
[13:37:21.387]                       invokeRestart <- base::invokeRestart
[13:37:21.387]                       is.null <- base::is.null
[13:37:21.387]                       muffled <- FALSE
[13:37:21.387]                       if (inherits(cond, "message")) {
[13:37:21.387]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.387]                         if (muffled) 
[13:37:21.387]                           invokeRestart("muffleMessage")
[13:37:21.387]                       }
[13:37:21.387]                       else if (inherits(cond, "warning")) {
[13:37:21.387]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.387]                         if (muffled) 
[13:37:21.387]                           invokeRestart("muffleWarning")
[13:37:21.387]                       }
[13:37:21.387]                       else if (inherits(cond, "condition")) {
[13:37:21.387]                         if (!is.null(pattern)) {
[13:37:21.387]                           computeRestarts <- base::computeRestarts
[13:37:21.387]                           grepl <- base::grepl
[13:37:21.387]                           restarts <- computeRestarts(cond)
[13:37:21.387]                           for (restart in restarts) {
[13:37:21.387]                             name <- restart$name
[13:37:21.387]                             if (is.null(name)) 
[13:37:21.387]                               next
[13:37:21.387]                             if (!grepl(pattern, name)) 
[13:37:21.387]                               next
[13:37:21.387]                             invokeRestart(restart)
[13:37:21.387]                             muffled <- TRUE
[13:37:21.387]                             break
[13:37:21.387]                           }
[13:37:21.387]                         }
[13:37:21.387]                       }
[13:37:21.387]                       invisible(muffled)
[13:37:21.387]                     }
[13:37:21.387]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.387]                   }
[13:37:21.387]                 }
[13:37:21.387]                 else {
[13:37:21.387]                   if (TRUE) {
[13:37:21.387]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.387]                     {
[13:37:21.387]                       inherits <- base::inherits
[13:37:21.387]                       invokeRestart <- base::invokeRestart
[13:37:21.387]                       is.null <- base::is.null
[13:37:21.387]                       muffled <- FALSE
[13:37:21.387]                       if (inherits(cond, "message")) {
[13:37:21.387]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.387]                         if (muffled) 
[13:37:21.387]                           invokeRestart("muffleMessage")
[13:37:21.387]                       }
[13:37:21.387]                       else if (inherits(cond, "warning")) {
[13:37:21.387]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.387]                         if (muffled) 
[13:37:21.387]                           invokeRestart("muffleWarning")
[13:37:21.387]                       }
[13:37:21.387]                       else if (inherits(cond, "condition")) {
[13:37:21.387]                         if (!is.null(pattern)) {
[13:37:21.387]                           computeRestarts <- base::computeRestarts
[13:37:21.387]                           grepl <- base::grepl
[13:37:21.387]                           restarts <- computeRestarts(cond)
[13:37:21.387]                           for (restart in restarts) {
[13:37:21.387]                             name <- restart$name
[13:37:21.387]                             if (is.null(name)) 
[13:37:21.387]                               next
[13:37:21.387]                             if (!grepl(pattern, name)) 
[13:37:21.387]                               next
[13:37:21.387]                             invokeRestart(restart)
[13:37:21.387]                             muffled <- TRUE
[13:37:21.387]                             break
[13:37:21.387]                           }
[13:37:21.387]                         }
[13:37:21.387]                       }
[13:37:21.387]                       invisible(muffled)
[13:37:21.387]                     }
[13:37:21.387]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.387]                   }
[13:37:21.387]                 }
[13:37:21.387]             }
[13:37:21.387]         }))
[13:37:21.387]     }, error = function(ex) {
[13:37:21.387]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.387]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.387]                 ...future.rng), started = ...future.startTime, 
[13:37:21.387]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.387]             version = "1.8"), class = "FutureResult")
[13:37:21.387]     }, finally = {
[13:37:21.387]         if (!identical(...future.workdir, getwd())) 
[13:37:21.387]             setwd(...future.workdir)
[13:37:21.387]         {
[13:37:21.387]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.387]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.387]             }
[13:37:21.387]             base::options(...future.oldOptions)
[13:37:21.387]             if (.Platform$OS.type == "windows") {
[13:37:21.387]                 old_names <- names(...future.oldEnvVars)
[13:37:21.387]                 envs <- base::Sys.getenv()
[13:37:21.387]                 names <- names(envs)
[13:37:21.387]                 common <- intersect(names, old_names)
[13:37:21.387]                 added <- setdiff(names, old_names)
[13:37:21.387]                 removed <- setdiff(old_names, names)
[13:37:21.387]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.387]                   envs[common]]
[13:37:21.387]                 NAMES <- toupper(changed)
[13:37:21.387]                 args <- list()
[13:37:21.387]                 for (kk in seq_along(NAMES)) {
[13:37:21.387]                   name <- changed[[kk]]
[13:37:21.387]                   NAME <- NAMES[[kk]]
[13:37:21.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.387]                     next
[13:37:21.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.387]                 }
[13:37:21.387]                 NAMES <- toupper(added)
[13:37:21.387]                 for (kk in seq_along(NAMES)) {
[13:37:21.387]                   name <- added[[kk]]
[13:37:21.387]                   NAME <- NAMES[[kk]]
[13:37:21.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.387]                     next
[13:37:21.387]                   args[[name]] <- ""
[13:37:21.387]                 }
[13:37:21.387]                 NAMES <- toupper(removed)
[13:37:21.387]                 for (kk in seq_along(NAMES)) {
[13:37:21.387]                   name <- removed[[kk]]
[13:37:21.387]                   NAME <- NAMES[[kk]]
[13:37:21.387]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.387]                     next
[13:37:21.387]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.387]                 }
[13:37:21.387]                 if (length(args) > 0) 
[13:37:21.387]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.387]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.387]             }
[13:37:21.387]             else {
[13:37:21.387]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.387]             }
[13:37:21.387]             {
[13:37:21.387]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.387]                   0L) {
[13:37:21.387]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.387]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.387]                   base::options(opts)
[13:37:21.387]                 }
[13:37:21.387]                 {
[13:37:21.387]                   {
[13:37:21.387]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.387]                     NULL
[13:37:21.387]                   }
[13:37:21.387]                   options(future.plan = NULL)
[13:37:21.387]                   if (is.na(NA_character_)) 
[13:37:21.387]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.387]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.387]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.387]                     .init = FALSE)
[13:37:21.387]                 }
[13:37:21.387]             }
[13:37:21.387]         }
[13:37:21.387]     })
[13:37:21.387]     if (TRUE) {
[13:37:21.387]         base::sink(type = "output", split = FALSE)
[13:37:21.387]         if (TRUE) {
[13:37:21.387]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.387]         }
[13:37:21.387]         else {
[13:37:21.387]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.387]         }
[13:37:21.387]         base::close(...future.stdout)
[13:37:21.387]         ...future.stdout <- NULL
[13:37:21.387]     }
[13:37:21.387]     ...future.result$conditions <- ...future.conditions
[13:37:21.387]     ...future.result$finished <- base::Sys.time()
[13:37:21.387]     ...future.result
[13:37:21.387] }
[13:37:21.407]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.389] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:37:21.407]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.390] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:37:21.407]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.390] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:37:21.407]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.390] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:37:21.407]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] MultisessionFuture started
[13:37:21.407]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] - Launch lazy future ... done
[13:37:21.408]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] run() for ‘MultisessionFuture’ ... done
[13:37:21.408]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] result() for ClusterFuture ...
[13:37:21.408]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] receiveMessageFromWorker() for ClusterFuture ...
[13:37:21.408]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.391] - Validating connection of MultisessionFuture
[13:37:21.408]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] - received message: FutureResult
[13:37:21.408]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] - Received FutureResult
[13:37:21.408]  - Condition #55: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] - Erased future from FutureRegistry
[13:37:21.408]  - Condition #56: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] result() for ClusterFuture ...
[13:37:21.409]  - Condition #57: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] - result already collected: FutureResult
[13:37:21.409]  - Condition #58: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] result() for ClusterFuture ... done
[13:37:21.409]  - Condition #59: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:21.409]  - Condition #60: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.397] result() for ClusterFuture ... done
[13:37:21.409]  - Condition #61: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.398] result() for ClusterFuture ...
[13:37:21.409]  - Condition #62: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.398] - result already collected: FutureResult
[13:37:21.409]  - Condition #63: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.398] result() for ClusterFuture ... done
[13:37:21.410] signalConditions() ... done
- plan(list('sequential', 'multisession')) ... DONE
- plan(list('multicore', 'sequential')) ...
[13:37:21.410] plan(): Setting new future strategy stack:
[13:37:21.410] List of future strategies:
[13:37:21.410] 1. multicore:
[13:37:21.410]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.410]    - tweaked: FALSE
[13:37:21.410]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.410] 2. sequential:
[13:37:21.410]    - args: function (..., envir = parent.frame())
[13:37:21.410]    - tweaked: FALSE
[13:37:21.410]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.415] plan(): nbrOfWorkers() = 2
[13:37:21.415] getGlobalsAndPackages() ...
[13:37:21.415] Searching for globals...
[13:37:21.436] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:21.436] Searching for globals ... DONE
[13:37:21.436] Resolving globals: FALSE
[13:37:21.437] The total size of the 2 globals is 57.84 KiB (59224 bytes)
[13:37:21.437] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 57.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (57.72 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:21.438] - globals: [2] ‘nested’, ‘strategy2’
[13:37:21.438] - packages: [1] ‘future’
[13:37:21.438] getGlobalsAndPackages() ... DONE
[13:37:21.438] run() for ‘Future’ ...
[13:37:21.438] - state: ‘created’
[13:37:21.438] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.442] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.442] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.442]   - Field: ‘label’
[13:37:21.442]   - Field: ‘local’
[13:37:21.442]   - Field: ‘owner’
[13:37:21.442]   - Field: ‘envir’
[13:37:21.443]   - Field: ‘workers’
[13:37:21.443]   - Field: ‘packages’
[13:37:21.443]   - Field: ‘gc’
[13:37:21.443]   - Field: ‘job’
[13:37:21.443]   - Field: ‘conditions’
[13:37:21.443]   - Field: ‘expr’
[13:37:21.443]   - Field: ‘uuid’
[13:37:21.443]   - Field: ‘seed’
[13:37:21.443]   - Field: ‘version’
[13:37:21.443]   - Field: ‘result’
[13:37:21.443]   - Field: ‘asynchronous’
[13:37:21.443]   - Field: ‘calls’
[13:37:21.444]   - Field: ‘globals’
[13:37:21.444]   - Field: ‘stdout’
[13:37:21.444]   - Field: ‘earlySignal’
[13:37:21.444]   - Field: ‘lazy’
[13:37:21.444]   - Field: ‘state’
[13:37:21.444] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.444] - Launch lazy future ...
[13:37:21.444] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.445] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.445] {
[13:37:21.445]     {
[13:37:21.445]         {
[13:37:21.445]             ...future.startTime <- base::Sys.time()
[13:37:21.445]             {
[13:37:21.445]                 {
[13:37:21.445]                   {
[13:37:21.445]                     {
[13:37:21.445]                       {
[13:37:21.445]                         base::local({
[13:37:21.445]                           has_future <- base::requireNamespace("future", 
[13:37:21.445]                             quietly = TRUE)
[13:37:21.445]                           if (has_future) {
[13:37:21.445]                             ns <- base::getNamespace("future")
[13:37:21.445]                             version <- ns[[".package"]][["version"]]
[13:37:21.445]                             if (is.null(version)) 
[13:37:21.445]                               version <- utils::packageVersion("future")
[13:37:21.445]                           }
[13:37:21.445]                           else {
[13:37:21.445]                             version <- NULL
[13:37:21.445]                           }
[13:37:21.445]                           if (!has_future || version < "1.8.0") {
[13:37:21.445]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.445]                               "", base::R.version$version.string), 
[13:37:21.445]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.445]                                 base::R.version$platform, 8 * 
[13:37:21.445]                                   base::.Machine$sizeof.pointer), 
[13:37:21.445]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.445]                                 "release", "version")], collapse = " "), 
[13:37:21.445]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.445]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.445]                               info)
[13:37:21.445]                             info <- base::paste(info, collapse = "; ")
[13:37:21.445]                             if (!has_future) {
[13:37:21.445]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.445]                                 info)
[13:37:21.445]                             }
[13:37:21.445]                             else {
[13:37:21.445]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.445]                                 info, version)
[13:37:21.445]                             }
[13:37:21.445]                             base::stop(msg)
[13:37:21.445]                           }
[13:37:21.445]                         })
[13:37:21.445]                       }
[13:37:21.445]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.445]                       base::options(mc.cores = 1L)
[13:37:21.445]                     }
[13:37:21.445]                     base::local({
[13:37:21.445]                       for (pkg in "future") {
[13:37:21.445]                         base::loadNamespace(pkg)
[13:37:21.445]                         base::library(pkg, character.only = TRUE)
[13:37:21.445]                       }
[13:37:21.445]                     })
[13:37:21.445]                   }
[13:37:21.445]                   ...future.strategy.old <- future::plan("list")
[13:37:21.445]                   options(future.plan = NULL)
[13:37:21.445]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.445]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:21.445]                   {
[13:37:21.445]                     future <- SequentialFuture(..., envir = envir)
[13:37:21.445]                     if (!future$lazy) 
[13:37:21.445]                       future <- run(future)
[13:37:21.445]                     invisible(future)
[13:37:21.445]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.445]                 }
[13:37:21.445]                 ...future.workdir <- getwd()
[13:37:21.445]             }
[13:37:21.445]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.445]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.445]         }
[13:37:21.445]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.445]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.445]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.445]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.445]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.445]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.445]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.445]             base::names(...future.oldOptions))
[13:37:21.445]     }
[13:37:21.445]     if (FALSE) {
[13:37:21.445]     }
[13:37:21.445]     else {
[13:37:21.445]         if (TRUE) {
[13:37:21.445]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.445]                 open = "w")
[13:37:21.445]         }
[13:37:21.445]         else {
[13:37:21.445]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.445]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.445]         }
[13:37:21.445]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.445]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.445]             base::sink(type = "output", split = FALSE)
[13:37:21.445]             base::close(...future.stdout)
[13:37:21.445]         }, add = TRUE)
[13:37:21.445]     }
[13:37:21.445]     ...future.frame <- base::sys.nframe()
[13:37:21.445]     ...future.conditions <- base::list()
[13:37:21.445]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.445]     if (FALSE) {
[13:37:21.445]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.445]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.445]     }
[13:37:21.445]     ...future.result <- base::tryCatch({
[13:37:21.445]         base::withCallingHandlers({
[13:37:21.445]             ...future.value <- base::withVisible(base::local({
[13:37:21.445]                 withCallingHandlers({
[13:37:21.445]                   {
[13:37:21.445]                     a <- 1L
[13:37:21.445]                     plan_a <- unclass(future::plan("list"))
[13:37:21.445]                     nested_a <- nested[-1]
[13:37:21.445]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:21.445]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.445]                       strategy2))
[13:37:21.445]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:21.445]                       "init") <- NULL
[13:37:21.445]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:21.445]                       "init") <- NULL
[13:37:21.445]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:21.445]                     y %<-% {
[13:37:21.445]                       b <- 2L
[13:37:21.445]                       plan_b <- future::plan("list")
[13:37:21.445]                       nested_b <- nested_a[-1]
[13:37:21.445]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.445]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:21.445]                         inherits(future::plan("next"), "sequential"))
[13:37:21.445]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.445]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.445]                     }
[13:37:21.445]                     y
[13:37:21.445]                   }
[13:37:21.445]                 }, immediateCondition = function(cond) {
[13:37:21.445]                   save_rds <- function (object, pathname, ...) 
[13:37:21.445]                   {
[13:37:21.445]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.445]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.445]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.445]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.445]                         fi_tmp[["mtime"]])
[13:37:21.445]                     }
[13:37:21.445]                     tryCatch({
[13:37:21.445]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.445]                     }, error = function(ex) {
[13:37:21.445]                       msg <- conditionMessage(ex)
[13:37:21.445]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.445]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.445]                         fi_tmp[["mtime"]], msg)
[13:37:21.445]                       ex$message <- msg
[13:37:21.445]                       stop(ex)
[13:37:21.445]                     })
[13:37:21.445]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.445]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.445]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.445]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.445]                       fi <- file.info(pathname)
[13:37:21.445]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.445]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.445]                         fi[["size"]], fi[["mtime"]])
[13:37:21.445]                       stop(msg)
[13:37:21.445]                     }
[13:37:21.445]                     invisible(pathname)
[13:37:21.445]                   }
[13:37:21.445]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.445]                     rootPath = tempdir()) 
[13:37:21.445]                   {
[13:37:21.445]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.445]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.445]                       tmpdir = path, fileext = ".rds")
[13:37:21.445]                     save_rds(obj, file)
[13:37:21.445]                   }
[13:37:21.445]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.445]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.445]                   {
[13:37:21.445]                     inherits <- base::inherits
[13:37:21.445]                     invokeRestart <- base::invokeRestart
[13:37:21.445]                     is.null <- base::is.null
[13:37:21.445]                     muffled <- FALSE
[13:37:21.445]                     if (inherits(cond, "message")) {
[13:37:21.445]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.445]                       if (muffled) 
[13:37:21.445]                         invokeRestart("muffleMessage")
[13:37:21.445]                     }
[13:37:21.445]                     else if (inherits(cond, "warning")) {
[13:37:21.445]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.445]                       if (muffled) 
[13:37:21.445]                         invokeRestart("muffleWarning")
[13:37:21.445]                     }
[13:37:21.445]                     else if (inherits(cond, "condition")) {
[13:37:21.445]                       if (!is.null(pattern)) {
[13:37:21.445]                         computeRestarts <- base::computeRestarts
[13:37:21.445]                         grepl <- base::grepl
[13:37:21.445]                         restarts <- computeRestarts(cond)
[13:37:21.445]                         for (restart in restarts) {
[13:37:21.445]                           name <- restart$name
[13:37:21.445]                           if (is.null(name)) 
[13:37:21.445]                             next
[13:37:21.445]                           if (!grepl(pattern, name)) 
[13:37:21.445]                             next
[13:37:21.445]                           invokeRestart(restart)
[13:37:21.445]                           muffled <- TRUE
[13:37:21.445]                           break
[13:37:21.445]                         }
[13:37:21.445]                       }
[13:37:21.445]                     }
[13:37:21.445]                     invisible(muffled)
[13:37:21.445]                   }
[13:37:21.445]                   muffleCondition(cond)
[13:37:21.445]                 })
[13:37:21.445]             }))
[13:37:21.445]             future::FutureResult(value = ...future.value$value, 
[13:37:21.445]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.445]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.445]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.445]                     ...future.globalenv.names))
[13:37:21.445]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.445]         }, condition = base::local({
[13:37:21.445]             c <- base::c
[13:37:21.445]             inherits <- base::inherits
[13:37:21.445]             invokeRestart <- base::invokeRestart
[13:37:21.445]             length <- base::length
[13:37:21.445]             list <- base::list
[13:37:21.445]             seq.int <- base::seq.int
[13:37:21.445]             signalCondition <- base::signalCondition
[13:37:21.445]             sys.calls <- base::sys.calls
[13:37:21.445]             `[[` <- base::`[[`
[13:37:21.445]             `+` <- base::`+`
[13:37:21.445]             `<<-` <- base::`<<-`
[13:37:21.445]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.445]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.445]                   3L)]
[13:37:21.445]             }
[13:37:21.445]             function(cond) {
[13:37:21.445]                 is_error <- inherits(cond, "error")
[13:37:21.445]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.445]                   NULL)
[13:37:21.445]                 if (is_error) {
[13:37:21.445]                   sessionInformation <- function() {
[13:37:21.445]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.445]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.445]                       search = base::search(), system = base::Sys.info())
[13:37:21.445]                   }
[13:37:21.445]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.445]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.445]                     cond$call), session = sessionInformation(), 
[13:37:21.445]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.445]                   signalCondition(cond)
[13:37:21.445]                 }
[13:37:21.445]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.445]                 "immediateCondition"))) {
[13:37:21.445]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.445]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.445]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.445]                   if (TRUE && !signal) {
[13:37:21.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.445]                     {
[13:37:21.445]                       inherits <- base::inherits
[13:37:21.445]                       invokeRestart <- base::invokeRestart
[13:37:21.445]                       is.null <- base::is.null
[13:37:21.445]                       muffled <- FALSE
[13:37:21.445]                       if (inherits(cond, "message")) {
[13:37:21.445]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.445]                         if (muffled) 
[13:37:21.445]                           invokeRestart("muffleMessage")
[13:37:21.445]                       }
[13:37:21.445]                       else if (inherits(cond, "warning")) {
[13:37:21.445]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.445]                         if (muffled) 
[13:37:21.445]                           invokeRestart("muffleWarning")
[13:37:21.445]                       }
[13:37:21.445]                       else if (inherits(cond, "condition")) {
[13:37:21.445]                         if (!is.null(pattern)) {
[13:37:21.445]                           computeRestarts <- base::computeRestarts
[13:37:21.445]                           grepl <- base::grepl
[13:37:21.445]                           restarts <- computeRestarts(cond)
[13:37:21.445]                           for (restart in restarts) {
[13:37:21.445]                             name <- restart$name
[13:37:21.445]                             if (is.null(name)) 
[13:37:21.445]                               next
[13:37:21.445]                             if (!grepl(pattern, name)) 
[13:37:21.445]                               next
[13:37:21.445]                             invokeRestart(restart)
[13:37:21.445]                             muffled <- TRUE
[13:37:21.445]                             break
[13:37:21.445]                           }
[13:37:21.445]                         }
[13:37:21.445]                       }
[13:37:21.445]                       invisible(muffled)
[13:37:21.445]                     }
[13:37:21.445]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.445]                   }
[13:37:21.445]                 }
[13:37:21.445]                 else {
[13:37:21.445]                   if (TRUE) {
[13:37:21.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.445]                     {
[13:37:21.445]                       inherits <- base::inherits
[13:37:21.445]                       invokeRestart <- base::invokeRestart
[13:37:21.445]                       is.null <- base::is.null
[13:37:21.445]                       muffled <- FALSE
[13:37:21.445]                       if (inherits(cond, "message")) {
[13:37:21.445]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.445]                         if (muffled) 
[13:37:21.445]                           invokeRestart("muffleMessage")
[13:37:21.445]                       }
[13:37:21.445]                       else if (inherits(cond, "warning")) {
[13:37:21.445]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.445]                         if (muffled) 
[13:37:21.445]                           invokeRestart("muffleWarning")
[13:37:21.445]                       }
[13:37:21.445]                       else if (inherits(cond, "condition")) {
[13:37:21.445]                         if (!is.null(pattern)) {
[13:37:21.445]                           computeRestarts <- base::computeRestarts
[13:37:21.445]                           grepl <- base::grepl
[13:37:21.445]                           restarts <- computeRestarts(cond)
[13:37:21.445]                           for (restart in restarts) {
[13:37:21.445]                             name <- restart$name
[13:37:21.445]                             if (is.null(name)) 
[13:37:21.445]                               next
[13:37:21.445]                             if (!grepl(pattern, name)) 
[13:37:21.445]                               next
[13:37:21.445]                             invokeRestart(restart)
[13:37:21.445]                             muffled <- TRUE
[13:37:21.445]                             break
[13:37:21.445]                           }
[13:37:21.445]                         }
[13:37:21.445]                       }
[13:37:21.445]                       invisible(muffled)
[13:37:21.445]                     }
[13:37:21.445]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.445]                   }
[13:37:21.445]                 }
[13:37:21.445]             }
[13:37:21.445]         }))
[13:37:21.445]     }, error = function(ex) {
[13:37:21.445]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.445]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.445]                 ...future.rng), started = ...future.startTime, 
[13:37:21.445]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.445]             version = "1.8"), class = "FutureResult")
[13:37:21.445]     }, finally = {
[13:37:21.445]         if (!identical(...future.workdir, getwd())) 
[13:37:21.445]             setwd(...future.workdir)
[13:37:21.445]         {
[13:37:21.445]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.445]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.445]             }
[13:37:21.445]             base::options(...future.oldOptions)
[13:37:21.445]             if (.Platform$OS.type == "windows") {
[13:37:21.445]                 old_names <- names(...future.oldEnvVars)
[13:37:21.445]                 envs <- base::Sys.getenv()
[13:37:21.445]                 names <- names(envs)
[13:37:21.445]                 common <- intersect(names, old_names)
[13:37:21.445]                 added <- setdiff(names, old_names)
[13:37:21.445]                 removed <- setdiff(old_names, names)
[13:37:21.445]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.445]                   envs[common]]
[13:37:21.445]                 NAMES <- toupper(changed)
[13:37:21.445]                 args <- list()
[13:37:21.445]                 for (kk in seq_along(NAMES)) {
[13:37:21.445]                   name <- changed[[kk]]
[13:37:21.445]                   NAME <- NAMES[[kk]]
[13:37:21.445]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.445]                     next
[13:37:21.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.445]                 }
[13:37:21.445]                 NAMES <- toupper(added)
[13:37:21.445]                 for (kk in seq_along(NAMES)) {
[13:37:21.445]                   name <- added[[kk]]
[13:37:21.445]                   NAME <- NAMES[[kk]]
[13:37:21.445]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.445]                     next
[13:37:21.445]                   args[[name]] <- ""
[13:37:21.445]                 }
[13:37:21.445]                 NAMES <- toupper(removed)
[13:37:21.445]                 for (kk in seq_along(NAMES)) {
[13:37:21.445]                   name <- removed[[kk]]
[13:37:21.445]                   NAME <- NAMES[[kk]]
[13:37:21.445]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.445]                     next
[13:37:21.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.445]                 }
[13:37:21.445]                 if (length(args) > 0) 
[13:37:21.445]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.445]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.445]             }
[13:37:21.445]             else {
[13:37:21.445]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.445]             }
[13:37:21.445]             {
[13:37:21.445]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.445]                   0L) {
[13:37:21.445]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.445]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.445]                   base::options(opts)
[13:37:21.445]                 }
[13:37:21.445]                 {
[13:37:21.445]                   {
[13:37:21.445]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.445]                     NULL
[13:37:21.445]                   }
[13:37:21.445]                   options(future.plan = NULL)
[13:37:21.445]                   if (is.na(NA_character_)) 
[13:37:21.445]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.445]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.445]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.445]                     .init = FALSE)
[13:37:21.445]                 }
[13:37:21.445]             }
[13:37:21.445]         }
[13:37:21.445]     })
[13:37:21.445]     if (TRUE) {
[13:37:21.445]         base::sink(type = "output", split = FALSE)
[13:37:21.445]         if (TRUE) {
[13:37:21.445]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.445]         }
[13:37:21.445]         else {
[13:37:21.445]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.445]         }
[13:37:21.445]         base::close(...future.stdout)
[13:37:21.445]         ...future.stdout <- NULL
[13:37:21.445]     }
[13:37:21.445]     ...future.result$conditions <- ...future.conditions
[13:37:21.445]     ...future.result$finished <- base::Sys.time()
[13:37:21.445]     ...future.result
[13:37:21.445] }
[13:37:21.447] assign_globals() ...
[13:37:21.448] List of 2
[13:37:21.448]  $ nested   :List of 2
[13:37:21.448]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.448]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.448]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.448]   ..$ b:function (..., envir = parent.frame())  
[13:37:21.448]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:21.448]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.448]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.448]  $ strategy2: chr "sequential"
[13:37:21.448]  - attr(*, "where")=List of 2
[13:37:21.448]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:21.448]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:21.448]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.448]  - attr(*, "resolved")= logi FALSE
[13:37:21.448]  - attr(*, "total_size")= num 59224
[13:37:21.448]  - attr(*, "already-done")= logi TRUE
[13:37:21.452] - copied ‘nested’ to environment
[13:37:21.452] - copied ‘strategy2’ to environment
[13:37:21.452] assign_globals() ... done
[13:37:21.453] requestCore(): workers = 2
[13:37:21.455] MulticoreFuture started
[13:37:21.455] - Launch lazy future ... done
[13:37:21.456] run() for ‘MulticoreFuture’ ... done
[13:37:21.456] result() for MulticoreFuture ...
[13:37:21.457] plan(): Setting new future strategy stack:
[13:37:21.457] List of future strategies:
[13:37:21.457] 1. sequential:
[13:37:21.457]    - args: function (..., envir = parent.frame())
[13:37:21.457]    - tweaked: FALSE
[13:37:21.457]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.458] plan(): nbrOfWorkers() = 1
[13:37:21.495] plan(): Setting new future strategy stack:
[13:37:21.495] List of future strategies:
[13:37:21.495] 1. multicore:
[13:37:21.495]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.495]    - tweaked: FALSE
[13:37:21.495]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.495] 2. sequential:
[13:37:21.495]    - args: function (..., envir = parent.frame())
[13:37:21.495]    - tweaked: FALSE
[13:37:21.495]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.500] plan(): nbrOfWorkers() = 2
[13:37:21.501] result() for MulticoreFuture ...
[13:37:21.501] result() for MulticoreFuture ... done
[13:37:21.501] signalConditions() ...
[13:37:21.501]  - include = ‘immediateCondition’
[13:37:21.502]  - exclude = 
[13:37:21.502]  - resignal = FALSE
[13:37:21.502]  - Number of conditions: 54
[13:37:21.502] signalConditions() ... done
[13:37:21.502] result() for MulticoreFuture ... done
[13:37:21.502] result() for MulticoreFuture ...
[13:37:21.502] result() for MulticoreFuture ... done
[13:37:21.502] signalConditions() ...
[13:37:21.503]  - include = ‘immediateCondition’
[13:37:21.503]  - exclude = 
[13:37:21.503]  - resignal = FALSE
[13:37:21.503]  - Number of conditions: 54
[13:37:21.503] signalConditions() ... done
[13:37:21.503] Future state: ‘finished’
[13:37:21.503] result() for MulticoreFuture ...
[13:37:21.503] result() for MulticoreFuture ... done
[13:37:21.504] signalConditions() ...
[13:37:21.504]  - include = ‘condition’
[13:37:21.504]  - exclude = ‘immediateCondition’
[13:37:21.504]  - resignal = TRUE
[13:37:21.504]  - Number of conditions: 54
[13:37:21.504]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.460] getGlobalsAndPackages() ...
[13:37:21.504]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.460] Searching for globals...
[13:37:21.505]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.470] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:21.505]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.470] Searching for globals ... DONE
[13:37:21.505]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.471] Resolving globals: FALSE
[13:37:21.505]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.472] The total size of the 3 globals is 22.54 KiB (23080 bytes)
[13:37:21.505]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.473] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 22.54 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (11.24 KiB of class ‘list’), ‘plan_a’ (11.24 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:21.505]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.473] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:21.506]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.473] 
[13:37:21.506]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.473] getGlobalsAndPackages() ... DONE
[13:37:21.506]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.474] run() for ‘Future’ ...
[13:37:21.506]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.475] - state: ‘created’
[13:37:21.506]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.475] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:21.507]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.475] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.507]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.475] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.507]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘label’
[13:37:21.507]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘local’
[13:37:21.507]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘owner’
[13:37:21.508]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘envir’
[13:37:21.508]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘packages’
[13:37:21.508]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.476]   - Field: ‘gc’
[13:37:21.508]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘conditions’
[13:37:21.508]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘expr’
[13:37:21.508]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘uuid’
[13:37:21.509]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘seed’
[13:37:21.509]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘version’
[13:37:21.509]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.477]   - Field: ‘result’
[13:37:21.509]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘asynchronous’
[13:37:21.509]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘calls’
[13:37:21.510]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘globals’
[13:37:21.510]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘stdout’
[13:37:21.510]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘earlySignal’
[13:37:21.510]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.478]   - Field: ‘lazy’
[13:37:21.510]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.479]   - Field: ‘state’
[13:37:21.511]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.479] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.511]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.479] - Launch lazy future ...
[13:37:21.511]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.479] Packages needed by the future expression (n = 0): <none>
[13:37:21.511]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.479] Packages needed by future strategies (n = 0): <none>
[13:37:21.511]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.480] {
[13:37:21.480]     {
[13:37:21.480]         {
[13:37:21.480]             ...future.startTime <- base::Sys.time()
[13:37:21.480]             {
[13:37:21.480]                 {
[13:37:21.480]                   {
[13:37:21.480]                     base::local({
[13:37:21.480]                       has_future <- base::requireNamespace("future", 
[13:37:21.480]                         quietly = TRUE)
[13:37:21.480]                       if (has_future) {
[13:37:21.480]                         ns <- base::getNamespace("future")
[13:37:21.480]                         version <- ns[[".package"]][["version"]]
[13:37:21.480]                         if (is.null(version)) 
[13:37:21.480]                           version <- utils::packageVersion("future")
[13:37:21.480]                       }
[13:37:21.480]                       else {
[13:37:21.480]                         version <- NULL
[13:37:21.480]                       }
[13:37:21.480]                       if (!has_future || version < "1.8.0") {
[13:37:21.480]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.480]                           "", base::R.version$version.string), 
[13:37:21.480]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.480]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.480]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.480]                             "release", "version")], collapse = " "), 
[13:37:21.480]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.480]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.480]                           info)
[13:37:21.480]                         info <- base::paste(info, collapse = "; ")
[13:37:21.480]                         if (!has_future) {
[13:37:21.480]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.480]                             info)
[13:37:21.480]                         }
[13:37:21.480]                         else {
[13:37:21.480]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.480]                             info, version)
[13:37:21.480]                         }
[13:37:21.480]                         base::stop(msg)
[13:37:21.480]                       }
[13:37:21.480]                     })
[13:37:21.480]                   }
[13:37:21.480]                   ...future.strategy.old <- future::plan("list")
[13:37:21.480]                   options(future.plan = NULL)
[13:37:21.480]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.480]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.480]                 }
[13:37:21.480]                 ...future.workdir <- getwd()
[13:37:21.480]             }
[13:37:21.480]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.480]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.480]         }
[13:37:21.480]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.480]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.480]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.480]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.480]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.480]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.480]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.480]             base::names(...future.oldOptions))
[13:37:21.480]     }
[13:37:21.480]     if (FALSE) {
[13:37:21.480]     }
[13:37:21.480]     else {
[13:37:21.480]         if (TRUE) {
[13:37:21.480]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.480]                 open = "w")
[13:37:21.480]         }
[13:37:21.480]         else {
[13:37:21.480]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.480]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.480]         }
[13:37:21.480]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.480]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.480]             base::sink(type = "output", split = FALSE)
[13:37:21.480]             base::close(...future.stdout)
[13:37:21.480]         }, add = TRUE)
[13:37:21.480]     }
[13:37:21.480]     ...future.frame <- base::sys.nframe()
[13:37:21.480]     ...future.conditions <- base::list()
[13:37:21.480]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.480]     if (FALSE) {
[13:37:21.480]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.480]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.480]     }
[13:37:21.480]     ...future.result <- base::tryCatch({
[13:37:21.480]         base::withCallingHandlers({
[13:37:21.480]             ...future.value <- base::withVisible(base::local({
[13:37:21.480]                 b <- 2L
[13:37:21.480]                 plan_b <- future::plan("list")
[13:37:21.480]                 nested_b <- nested_a[-1]
[13:37:21.480]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.480]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.480]                   "sequential"))
[13:37:21.480]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.480]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.480]             }))
[13:37:21.480]             future::FutureResult(value = ...future.value$value, 
[13:37:21.480]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.480]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.480]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.480]                     ...future.globalenv.names))
[13:37:21.480]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.480]         }, condition = base::local({
[13:37:21.480]             c <- base::c
[13:37:21.480]             inherits <- base::inherits
[13:37:21.480]             invokeRestart <- base::invokeRestart
[13:37:21.480]             length <- base::length
[13:37:21.480]             list <- base::list
[13:37:21.480]             seq.int <- base::seq.int
[13:37:21.480]             signalCondition <- base::signalCondition
[13:37:21.480]             sys.calls <- base::sys.calls
[13:37:21.480]             `[[` <- base::`[[`
[13:37:21.480]             `+` <- base::`+`
[13:37:21.480]             `<<-` <- base::`<<-`
[13:37:21.480]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.480]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.480]                   3L)]
[13:37:21.480]             }
[13:37:21.480]             function(cond) {
[13:37:21.480]                 is_error <- inherits(cond, "error")
[13:37:21.480]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.480]                   NULL)
[13:37:21.480]                 if (is_error) {
[13:37:21.480]                   sessionInformation <- function() {
[13:37:21.480]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.480]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.480]                       search = base::search(), system = base::Sys.info())
[13:37:21.480]                   }
[13:37:21.480]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.480]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.480]                     cond$call), session = sessionInformation(), 
[13:37:21.480]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.480]                   signalCondition(cond)
[13:37:21.480]                 }
[13:37:21.480]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.480]                 "immediateCondition"))) {
[13:37:21.480]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.480]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.480]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.480]                   if (TRUE && !signal) {
[13:37:21.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.480]                     {
[13:37:21.480]                       inherits <- base::inherits
[13:37:21.480]                       invokeRestart <- base::invokeRestart
[13:37:21.480]                       is.null <- base::is.null
[13:37:21.480]                       muffled <- FALSE
[13:37:21.480]                       if (inherits(cond, "message")) {
[13:37:21.480]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.480]                         if (muffled) 
[13:37:21.480]                           invokeRestart("muffleMessage")
[13:37:21.480]                       }
[13:37:21.480]                       else if (inherits(cond, "warning")) {
[13:37:21.480]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.480]                         if (muffled) 
[13:37:21.480]                           invokeRestart("muffleWarning")
[13:37:21.480]                       }
[13:37:21.480]                       else if (inherits(cond, "condition")) {
[13:37:21.480]                         if (!is.null(pattern)) {
[13:37:21.480]                           computeRestarts <- base::computeRestarts
[13:37:21.480]                           grepl <- base::grepl
[13:37:21.480]                           restarts <- computeRestarts(cond)
[13:37:21.480]                           for (restart in restarts) {
[13:37:21.480]                             name <- restart$name
[13:37:21.480]                             if (is.null(name)) 
[13:37:21.480]                               next
[13:37:21.480]                             if (!grepl(pattern, name)) 
[13:37:21.480]                               next
[13:37:21.480]                             invokeRestart(restart)
[13:37:21.480]                             muffled <- TRUE
[13:37:21.480]                             break
[13:37:21.480]                           }
[13:37:21.480]                         }
[13:37:21.480]                       }
[13:37:21.480]                       invisible(muffled)
[13:37:21.480]                     }
[13:37:21.480]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.480]                   }
[13:37:21.480]                 }
[13:37:21.480]                 else {
[13:37:21.480]                   if (TRUE) {
[13:37:21.480]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.480]                     {
[13:37:21.480]                       inherits <- base::inherits
[13:37:21.480]                       invokeRestart <- base::invokeRestart
[13:37:21.480]                       is.null <- base::is.null
[13:37:21.480]                       muffled <- FALSE
[13:37:21.480]                       if (inherits(cond, "message")) {
[13:37:21.480]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.480]                         if (muffled) 
[13:37:21.480]                           invokeRestart("muffleMessage")
[13:37:21.480]                       }
[13:37:21.480]                       else if (inherits(cond, "warning")) {
[13:37:21.480]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.480]                         if (muffled) 
[13:37:21.480]                           invokeRestart("muffleWarning")
[13:37:21.480]                       }
[13:37:21.480]                       else if (inherits(cond, "condition")) {
[13:37:21.480]                         if (!is.null(pattern)) {
[13:37:21.480]                           computeRestarts <- base::computeRestarts
[13:37:21.480]                           grepl <- base::grepl
[13:37:21.480]                           restarts <- computeRestarts(cond)
[13:37:21.480]                           for (restart in restarts) {
[13:37:21.480]                             name <- restart$name
[13:37:21.480]                             if (is.null(name)) 
[13:37:21.480]                               next
[13:37:21.480]                             if (!grepl(pattern, name)) 
[13:37:21.480]                               next
[13:37:21.480]                             invokeRestart(restart)
[13:37:21.480]                             muffled <- TRUE
[13:37:21.480]                             break
[13:37:21.480]                           }
[13:37:21.480]                         }
[13:37:21.480]                       }
[13:37:21.480]                       invisible(muffled)
[13:37:21.480]                     }
[13:37:21.480]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.480]                   }
[13:37:21.480]                 }
[13:37:21.480]             }
[13:37:21.480]         }))
[13:37:21.480]     }, error = function(ex) {
[13:37:21.480]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.480]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.480]                 ...future.rng), started = ...future.startTime, 
[13:37:21.480]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.480]             version = "1.8"), class = "FutureResult")
[13:37:21.480]     }, finally = {
[13:37:21.480]         if (!identical(...future.workdir, getwd())) 
[13:37:21.480]             setwd(...future.workdir)
[13:37:21.480]         {
[13:37:21.480]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.480]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.480]             }
[13:37:21.480]             base::options(...future.oldOptions)
[13:37:21.480]             if (.Platform$OS.type == "windows") {
[13:37:21.480]                 old_names <- names(...future.oldEnvVars)
[13:37:21.480]                 envs <- base::Sys.getenv()
[13:37:21.480]                 names <- names(envs)
[13:37:21.480]                 common <- intersect(names, old_names)
[13:37:21.480]                 added <- setdiff(names, old_names)
[13:37:21.480]                 removed <- setdiff(old_names, names)
[13:37:21.480]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.480]                   envs[common]]
[13:37:21.480]                 NAMES <- toupper(changed)
[13:37:21.480]                 args <- list()
[13:37:21.480]                 for (kk in seq_along(NAMES)) {
[13:37:21.480]                   name <- changed[[kk]]
[13:37:21.480]                   NAME <- NAMES[[kk]]
[13:37:21.480]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.480]                     next
[13:37:21.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.480]                 }
[13:37:21.480]                 NAMES <- toupper(added)
[13:37:21.480]                 for (kk in seq_along(NAMES)) {
[13:37:21.480]                   name <- added[[kk]]
[13:37:21.480]                   NAME <- NAMES[[kk]]
[13:37:21.480]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.480]                     next
[13:37:21.480]                   args[[name]] <- ""
[13:37:21.480]                 }
[13:37:21.480]                 NAMES <- toupper(removed)
[13:37:21.480]                 for (kk in seq_along(NAMES)) {
[13:37:21.480]                   name <- removed[[kk]]
[13:37:21.480]                   NAME <- NAMES[[kk]]
[13:37:21.480]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.480]                     next
[13:37:21.480]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.480]                 }
[13:37:21.480]                 if (length(args) > 0) 
[13:37:21.480]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.480]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.480]             }
[13:37:21.480]             else {
[13:37:21.480]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.480]             }
[13:37:21.480]             {
[13:37:21.480]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.480]                   0L) {
[13:37:21.480]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.480]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.480]                   base::options(opts)
[13:37:21.480]                 }
[13:37:21.480]                 {
[13:37:21.480]                   {
[13:37:21.480]                     NULL
[13:37:21.480]                     RNGkind("Mersenne-Twister")
[13:37:21.480]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.480]                       inherits = FALSE)
[13:37:21.480]                   }
[13:37:21.480]                   options(future.plan = NULL)
[13:37:21.480]                   if (is.na(NA_character_)) 
[13:37:21.480]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.480]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.480]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.480]                     .init = FALSE)
[13:37:21.480]                 }
[13:37:21.480]             }
[13:37:21.480]         }
[13:37:21.480]     })
[13:37:21.480]     if (TRUE) {
[13:37:21.480]         base::sink(type = "output", split = FALSE)
[13:37:21.480]         if (TRUE) {
[13:37:21.480]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.480]         }
[13:37:21.480]         else {
[13:37:21.480]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.480]         }
[13:37:21.480]         base::close(...future.stdout)
[13:37:21.480]         ...future.stdout <- NULL
[13:37:21.480]     }
[13:37:21.480]     ...future.result$conditions <- ...future.conditions
[13:37:21.480]     ...future.result$finished <- base::Sys.time()
[13:37:21.480]     ...future.result
[13:37:21.480] }
[13:37:21.512]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.483] assign_globals() ...
[13:37:21.512]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.483] List of 3
[13:37:21.483]  $ nested_a:List of 1
[13:37:21.483]   ..$ b:function (..., envir = parent.frame())  
[13:37:21.483]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:21.483]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.483]  $ a       : int 1
[13:37:21.483]  $ plan_a  :List of 1
[13:37:21.483]   ..$ b:function (..., envir = parent.frame())  
[13:37:21.483]   .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
[13:37:21.483]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.483]  - attr(*, "where")=List of 3
[13:37:21.483]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:37:21.483]   ..$ a       :<environment: R_EmptyEnv> 
[13:37:21.483]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:37:21.483]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.483]  - attr(*, "resolved")= logi FALSE
[13:37:21.483]  - attr(*, "total_size")= num 23080
[13:37:21.483]  - attr(*, "already-done")= logi TRUE
[13:37:21.512]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.490] - copied ‘nested_a’ to environment
[13:37:21.512]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.491] - copied ‘a’ to environment
[13:37:21.512]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.491] - copied ‘plan_a’ to environment
[13:37:21.512]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.491] assign_globals() ... done
[13:37:21.513]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.491] plan(): Setting new future strategy stack:
[13:37:21.513]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.491] List of future strategies:
[13:37:21.491] 1. sequential:
[13:37:21.491]    - args: function (..., envir = parent.frame())
[13:37:21.491]    - tweaked: FALSE
[13:37:21.491]    - call: NULL
[13:37:21.513]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.492] plan(): nbrOfWorkers() = 1
[13:37:21.513]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.493] plan(): Setting new future strategy stack:
[13:37:21.513]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.493] List of future strategies:
[13:37:21.493] 1. sequential:
[13:37:21.493]    - args: function (..., envir = parent.frame())
[13:37:21.493]    - tweaked: FALSE
[13:37:21.493]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.513]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.494] plan(): nbrOfWorkers() = 1
[13:37:21.514]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.494] SequentialFuture started (and completed)
[13:37:21.514]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.494] - Launch lazy future ... done
[13:37:21.514]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.494] run() for ‘SequentialFuture’ ... done
[13:37:21.514] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.520] getGlobalsAndPackages() ...
[13:37:21.521] Searching for globals...
[13:37:21.522] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.522] Searching for globals ... DONE
[13:37:21.523] Resolving globals: FALSE
[13:37:21.523] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.524] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.524] - globals: [1] ‘data’
[13:37:21.524] - packages: [1] ‘future’
[13:37:21.524] getGlobalsAndPackages() ... DONE
[13:37:21.525] run() for ‘Future’ ...
[13:37:21.525] - state: ‘created’
[13:37:21.525] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.529] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.530] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.530]   - Field: ‘label’
[13:37:21.530]   - Field: ‘local’
[13:37:21.530]   - Field: ‘owner’
[13:37:21.530]   - Field: ‘envir’
[13:37:21.530]   - Field: ‘workers’
[13:37:21.531]   - Field: ‘packages’
[13:37:21.531]   - Field: ‘gc’
[13:37:21.531]   - Field: ‘job’
[13:37:21.531]   - Field: ‘conditions’
[13:37:21.531]   - Field: ‘expr’
[13:37:21.531]   - Field: ‘uuid’
[13:37:21.531]   - Field: ‘seed’
[13:37:21.531]   - Field: ‘version’
[13:37:21.532]   - Field: ‘result’
[13:37:21.532]   - Field: ‘asynchronous’
[13:37:21.532]   - Field: ‘calls’
[13:37:21.532]   - Field: ‘globals’
[13:37:21.532]   - Field: ‘stdout’
[13:37:21.532]   - Field: ‘earlySignal’
[13:37:21.532]   - Field: ‘lazy’
[13:37:21.532]   - Field: ‘state’
[13:37:21.532] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.533] - Launch lazy future ...
[13:37:21.533] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.533] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.534] {
[13:37:21.534]     {
[13:37:21.534]         {
[13:37:21.534]             ...future.startTime <- base::Sys.time()
[13:37:21.534]             {
[13:37:21.534]                 {
[13:37:21.534]                   {
[13:37:21.534]                     {
[13:37:21.534]                       {
[13:37:21.534]                         base::local({
[13:37:21.534]                           has_future <- base::requireNamespace("future", 
[13:37:21.534]                             quietly = TRUE)
[13:37:21.534]                           if (has_future) {
[13:37:21.534]                             ns <- base::getNamespace("future")
[13:37:21.534]                             version <- ns[[".package"]][["version"]]
[13:37:21.534]                             if (is.null(version)) 
[13:37:21.534]                               version <- utils::packageVersion("future")
[13:37:21.534]                           }
[13:37:21.534]                           else {
[13:37:21.534]                             version <- NULL
[13:37:21.534]                           }
[13:37:21.534]                           if (!has_future || version < "1.8.0") {
[13:37:21.534]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.534]                               "", base::R.version$version.string), 
[13:37:21.534]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.534]                                 base::R.version$platform, 8 * 
[13:37:21.534]                                   base::.Machine$sizeof.pointer), 
[13:37:21.534]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.534]                                 "release", "version")], collapse = " "), 
[13:37:21.534]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.534]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.534]                               info)
[13:37:21.534]                             info <- base::paste(info, collapse = "; ")
[13:37:21.534]                             if (!has_future) {
[13:37:21.534]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.534]                                 info)
[13:37:21.534]                             }
[13:37:21.534]                             else {
[13:37:21.534]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.534]                                 info, version)
[13:37:21.534]                             }
[13:37:21.534]                             base::stop(msg)
[13:37:21.534]                           }
[13:37:21.534]                         })
[13:37:21.534]                       }
[13:37:21.534]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.534]                       base::options(mc.cores = 1L)
[13:37:21.534]                     }
[13:37:21.534]                     base::local({
[13:37:21.534]                       for (pkg in "future") {
[13:37:21.534]                         base::loadNamespace(pkg)
[13:37:21.534]                         base::library(pkg, character.only = TRUE)
[13:37:21.534]                       }
[13:37:21.534]                     })
[13:37:21.534]                   }
[13:37:21.534]                   ...future.strategy.old <- future::plan("list")
[13:37:21.534]                   options(future.plan = NULL)
[13:37:21.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.534]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:21.534]                   {
[13:37:21.534]                     future <- SequentialFuture(..., envir = envir)
[13:37:21.534]                     if (!future$lazy) 
[13:37:21.534]                       future <- run(future)
[13:37:21.534]                     invisible(future)
[13:37:21.534]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.534]                 }
[13:37:21.534]                 ...future.workdir <- getwd()
[13:37:21.534]             }
[13:37:21.534]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.534]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.534]         }
[13:37:21.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.534]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.534]             base::names(...future.oldOptions))
[13:37:21.534]     }
[13:37:21.534]     if (FALSE) {
[13:37:21.534]     }
[13:37:21.534]     else {
[13:37:21.534]         if (TRUE) {
[13:37:21.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.534]                 open = "w")
[13:37:21.534]         }
[13:37:21.534]         else {
[13:37:21.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.534]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.534]         }
[13:37:21.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.534]             base::sink(type = "output", split = FALSE)
[13:37:21.534]             base::close(...future.stdout)
[13:37:21.534]         }, add = TRUE)
[13:37:21.534]     }
[13:37:21.534]     ...future.frame <- base::sys.nframe()
[13:37:21.534]     ...future.conditions <- base::list()
[13:37:21.534]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.534]     if (FALSE) {
[13:37:21.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.534]     }
[13:37:21.534]     ...future.result <- base::tryCatch({
[13:37:21.534]         base::withCallingHandlers({
[13:37:21.534]             ...future.value <- base::withVisible(base::local({
[13:37:21.534]                 withCallingHandlers({
[13:37:21.534]                   {
[13:37:21.534]                     value(future(subset(data, a == 2)))
[13:37:21.534]                   }
[13:37:21.534]                 }, immediateCondition = function(cond) {
[13:37:21.534]                   save_rds <- function (object, pathname, ...) 
[13:37:21.534]                   {
[13:37:21.534]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.534]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.534]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.534]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.534]                         fi_tmp[["mtime"]])
[13:37:21.534]                     }
[13:37:21.534]                     tryCatch({
[13:37:21.534]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.534]                     }, error = function(ex) {
[13:37:21.534]                       msg <- conditionMessage(ex)
[13:37:21.534]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.534]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.534]                         fi_tmp[["mtime"]], msg)
[13:37:21.534]                       ex$message <- msg
[13:37:21.534]                       stop(ex)
[13:37:21.534]                     })
[13:37:21.534]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.534]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.534]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.534]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.534]                       fi <- file.info(pathname)
[13:37:21.534]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.534]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.534]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.534]                         fi[["size"]], fi[["mtime"]])
[13:37:21.534]                       stop(msg)
[13:37:21.534]                     }
[13:37:21.534]                     invisible(pathname)
[13:37:21.534]                   }
[13:37:21.534]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.534]                     rootPath = tempdir()) 
[13:37:21.534]                   {
[13:37:21.534]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.534]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.534]                       tmpdir = path, fileext = ".rds")
[13:37:21.534]                     save_rds(obj, file)
[13:37:21.534]                   }
[13:37:21.534]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.534]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.534]                   {
[13:37:21.534]                     inherits <- base::inherits
[13:37:21.534]                     invokeRestart <- base::invokeRestart
[13:37:21.534]                     is.null <- base::is.null
[13:37:21.534]                     muffled <- FALSE
[13:37:21.534]                     if (inherits(cond, "message")) {
[13:37:21.534]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.534]                       if (muffled) 
[13:37:21.534]                         invokeRestart("muffleMessage")
[13:37:21.534]                     }
[13:37:21.534]                     else if (inherits(cond, "warning")) {
[13:37:21.534]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.534]                       if (muffled) 
[13:37:21.534]                         invokeRestart("muffleWarning")
[13:37:21.534]                     }
[13:37:21.534]                     else if (inherits(cond, "condition")) {
[13:37:21.534]                       if (!is.null(pattern)) {
[13:37:21.534]                         computeRestarts <- base::computeRestarts
[13:37:21.534]                         grepl <- base::grepl
[13:37:21.534]                         restarts <- computeRestarts(cond)
[13:37:21.534]                         for (restart in restarts) {
[13:37:21.534]                           name <- restart$name
[13:37:21.534]                           if (is.null(name)) 
[13:37:21.534]                             next
[13:37:21.534]                           if (!grepl(pattern, name)) 
[13:37:21.534]                             next
[13:37:21.534]                           invokeRestart(restart)
[13:37:21.534]                           muffled <- TRUE
[13:37:21.534]                           break
[13:37:21.534]                         }
[13:37:21.534]                       }
[13:37:21.534]                     }
[13:37:21.534]                     invisible(muffled)
[13:37:21.534]                   }
[13:37:21.534]                   muffleCondition(cond)
[13:37:21.534]                 })
[13:37:21.534]             }))
[13:37:21.534]             future::FutureResult(value = ...future.value$value, 
[13:37:21.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.534]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.534]                     ...future.globalenv.names))
[13:37:21.534]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.534]         }, condition = base::local({
[13:37:21.534]             c <- base::c
[13:37:21.534]             inherits <- base::inherits
[13:37:21.534]             invokeRestart <- base::invokeRestart
[13:37:21.534]             length <- base::length
[13:37:21.534]             list <- base::list
[13:37:21.534]             seq.int <- base::seq.int
[13:37:21.534]             signalCondition <- base::signalCondition
[13:37:21.534]             sys.calls <- base::sys.calls
[13:37:21.534]             `[[` <- base::`[[`
[13:37:21.534]             `+` <- base::`+`
[13:37:21.534]             `<<-` <- base::`<<-`
[13:37:21.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.534]                   3L)]
[13:37:21.534]             }
[13:37:21.534]             function(cond) {
[13:37:21.534]                 is_error <- inherits(cond, "error")
[13:37:21.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.534]                   NULL)
[13:37:21.534]                 if (is_error) {
[13:37:21.534]                   sessionInformation <- function() {
[13:37:21.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.534]                       search = base::search(), system = base::Sys.info())
[13:37:21.534]                   }
[13:37:21.534]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.534]                     cond$call), session = sessionInformation(), 
[13:37:21.534]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.534]                   signalCondition(cond)
[13:37:21.534]                 }
[13:37:21.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.534]                 "immediateCondition"))) {
[13:37:21.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.534]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.534]                   if (TRUE && !signal) {
[13:37:21.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.534]                     {
[13:37:21.534]                       inherits <- base::inherits
[13:37:21.534]                       invokeRestart <- base::invokeRestart
[13:37:21.534]                       is.null <- base::is.null
[13:37:21.534]                       muffled <- FALSE
[13:37:21.534]                       if (inherits(cond, "message")) {
[13:37:21.534]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.534]                         if (muffled) 
[13:37:21.534]                           invokeRestart("muffleMessage")
[13:37:21.534]                       }
[13:37:21.534]                       else if (inherits(cond, "warning")) {
[13:37:21.534]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.534]                         if (muffled) 
[13:37:21.534]                           invokeRestart("muffleWarning")
[13:37:21.534]                       }
[13:37:21.534]                       else if (inherits(cond, "condition")) {
[13:37:21.534]                         if (!is.null(pattern)) {
[13:37:21.534]                           computeRestarts <- base::computeRestarts
[13:37:21.534]                           grepl <- base::grepl
[13:37:21.534]                           restarts <- computeRestarts(cond)
[13:37:21.534]                           for (restart in restarts) {
[13:37:21.534]                             name <- restart$name
[13:37:21.534]                             if (is.null(name)) 
[13:37:21.534]                               next
[13:37:21.534]                             if (!grepl(pattern, name)) 
[13:37:21.534]                               next
[13:37:21.534]                             invokeRestart(restart)
[13:37:21.534]                             muffled <- TRUE
[13:37:21.534]                             break
[13:37:21.534]                           }
[13:37:21.534]                         }
[13:37:21.534]                       }
[13:37:21.534]                       invisible(muffled)
[13:37:21.534]                     }
[13:37:21.534]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.534]                   }
[13:37:21.534]                 }
[13:37:21.534]                 else {
[13:37:21.534]                   if (TRUE) {
[13:37:21.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.534]                     {
[13:37:21.534]                       inherits <- base::inherits
[13:37:21.534]                       invokeRestart <- base::invokeRestart
[13:37:21.534]                       is.null <- base::is.null
[13:37:21.534]                       muffled <- FALSE
[13:37:21.534]                       if (inherits(cond, "message")) {
[13:37:21.534]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.534]                         if (muffled) 
[13:37:21.534]                           invokeRestart("muffleMessage")
[13:37:21.534]                       }
[13:37:21.534]                       else if (inherits(cond, "warning")) {
[13:37:21.534]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.534]                         if (muffled) 
[13:37:21.534]                           invokeRestart("muffleWarning")
[13:37:21.534]                       }
[13:37:21.534]                       else if (inherits(cond, "condition")) {
[13:37:21.534]                         if (!is.null(pattern)) {
[13:37:21.534]                           computeRestarts <- base::computeRestarts
[13:37:21.534]                           grepl <- base::grepl
[13:37:21.534]                           restarts <- computeRestarts(cond)
[13:37:21.534]                           for (restart in restarts) {
[13:37:21.534]                             name <- restart$name
[13:37:21.534]                             if (is.null(name)) 
[13:37:21.534]                               next
[13:37:21.534]                             if (!grepl(pattern, name)) 
[13:37:21.534]                               next
[13:37:21.534]                             invokeRestart(restart)
[13:37:21.534]                             muffled <- TRUE
[13:37:21.534]                             break
[13:37:21.534]                           }
[13:37:21.534]                         }
[13:37:21.534]                       }
[13:37:21.534]                       invisible(muffled)
[13:37:21.534]                     }
[13:37:21.534]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.534]                   }
[13:37:21.534]                 }
[13:37:21.534]             }
[13:37:21.534]         }))
[13:37:21.534]     }, error = function(ex) {
[13:37:21.534]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.534]                 ...future.rng), started = ...future.startTime, 
[13:37:21.534]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.534]             version = "1.8"), class = "FutureResult")
[13:37:21.534]     }, finally = {
[13:37:21.534]         if (!identical(...future.workdir, getwd())) 
[13:37:21.534]             setwd(...future.workdir)
[13:37:21.534]         {
[13:37:21.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.534]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.534]             }
[13:37:21.534]             base::options(...future.oldOptions)
[13:37:21.534]             if (.Platform$OS.type == "windows") {
[13:37:21.534]                 old_names <- names(...future.oldEnvVars)
[13:37:21.534]                 envs <- base::Sys.getenv()
[13:37:21.534]                 names <- names(envs)
[13:37:21.534]                 common <- intersect(names, old_names)
[13:37:21.534]                 added <- setdiff(names, old_names)
[13:37:21.534]                 removed <- setdiff(old_names, names)
[13:37:21.534]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.534]                   envs[common]]
[13:37:21.534]                 NAMES <- toupper(changed)
[13:37:21.534]                 args <- list()
[13:37:21.534]                 for (kk in seq_along(NAMES)) {
[13:37:21.534]                   name <- changed[[kk]]
[13:37:21.534]                   NAME <- NAMES[[kk]]
[13:37:21.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.534]                     next
[13:37:21.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.534]                 }
[13:37:21.534]                 NAMES <- toupper(added)
[13:37:21.534]                 for (kk in seq_along(NAMES)) {
[13:37:21.534]                   name <- added[[kk]]
[13:37:21.534]                   NAME <- NAMES[[kk]]
[13:37:21.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.534]                     next
[13:37:21.534]                   args[[name]] <- ""
[13:37:21.534]                 }
[13:37:21.534]                 NAMES <- toupper(removed)
[13:37:21.534]                 for (kk in seq_along(NAMES)) {
[13:37:21.534]                   name <- removed[[kk]]
[13:37:21.534]                   NAME <- NAMES[[kk]]
[13:37:21.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.534]                     next
[13:37:21.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.534]                 }
[13:37:21.534]                 if (length(args) > 0) 
[13:37:21.534]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.534]             }
[13:37:21.534]             else {
[13:37:21.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.534]             }
[13:37:21.534]             {
[13:37:21.534]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.534]                   0L) {
[13:37:21.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.534]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.534]                   base::options(opts)
[13:37:21.534]                 }
[13:37:21.534]                 {
[13:37:21.534]                   {
[13:37:21.534]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.534]                     NULL
[13:37:21.534]                   }
[13:37:21.534]                   options(future.plan = NULL)
[13:37:21.534]                   if (is.na(NA_character_)) 
[13:37:21.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.534]                     .init = FALSE)
[13:37:21.534]                 }
[13:37:21.534]             }
[13:37:21.534]         }
[13:37:21.534]     })
[13:37:21.534]     if (TRUE) {
[13:37:21.534]         base::sink(type = "output", split = FALSE)
[13:37:21.534]         if (TRUE) {
[13:37:21.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.534]         }
[13:37:21.534]         else {
[13:37:21.534]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.534]         }
[13:37:21.534]         base::close(...future.stdout)
[13:37:21.534]         ...future.stdout <- NULL
[13:37:21.534]     }
[13:37:21.534]     ...future.result$conditions <- ...future.conditions
[13:37:21.534]     ...future.result$finished <- base::Sys.time()
[13:37:21.534]     ...future.result
[13:37:21.534] }
[13:37:21.536] assign_globals() ...
[13:37:21.537] List of 1
[13:37:21.537]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.537]   ..$ a: int [1:3] 1 2 3
[13:37:21.537]   ..$ b: int [1:3] 3 2 1
[13:37:21.537]  - attr(*, "where")=List of 1
[13:37:21.537]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.537]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.537]  - attr(*, "resolved")= logi FALSE
[13:37:21.537]  - attr(*, "total_size")= num 128
[13:37:21.537]  - attr(*, "already-done")= logi TRUE
[13:37:21.540] - copied ‘data’ to environment
[13:37:21.540] assign_globals() ... done
[13:37:21.541] requestCore(): workers = 2
[13:37:21.543] MulticoreFuture started
[13:37:21.544] - Launch lazy future ... done
[13:37:21.544] run() for ‘MulticoreFuture’ ... done
[13:37:21.544] result() for MulticoreFuture ...
[13:37:21.545] plan(): Setting new future strategy stack:
[13:37:21.545] List of future strategies:
[13:37:21.545] 1. sequential:
[13:37:21.545]    - args: function (..., envir = parent.frame())
[13:37:21.545]    - tweaked: FALSE
[13:37:21.545]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.546] plan(): nbrOfWorkers() = 1
[13:37:21.571] plan(): Setting new future strategy stack:
[13:37:21.571] List of future strategies:
[13:37:21.571] 1. multicore:
[13:37:21.571]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.571]    - tweaked: FALSE
[13:37:21.571]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.571] 2. sequential:
[13:37:21.571]    - args: function (..., envir = parent.frame())
[13:37:21.571]    - tweaked: FALSE
[13:37:21.571]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.576] plan(): nbrOfWorkers() = 2
[13:37:21.577] result() for MulticoreFuture ...
[13:37:21.578] result() for MulticoreFuture ... done
[13:37:21.578] signalConditions() ...
[13:37:21.578]  - include = ‘immediateCondition’
[13:37:21.578]  - exclude = 
[13:37:21.578]  - resignal = FALSE
[13:37:21.578]  - Number of conditions: 52
[13:37:21.578] signalConditions() ... done
[13:37:21.579] result() for MulticoreFuture ... done
[13:37:21.579] result() for MulticoreFuture ...
[13:37:21.579] result() for MulticoreFuture ... done
[13:37:21.579] signalConditions() ...
[13:37:21.579]  - include = ‘immediateCondition’
[13:37:21.579]  - exclude = 
[13:37:21.579]  - resignal = FALSE
[13:37:21.579]  - Number of conditions: 52
[13:37:21.579] signalConditions() ... done
[13:37:21.580] Future state: ‘finished’
[13:37:21.580] result() for MulticoreFuture ...
[13:37:21.580] result() for MulticoreFuture ... done
[13:37:21.580] signalConditions() ...
[13:37:21.580]  - include = ‘condition’
[13:37:21.580]  - exclude = ‘immediateCondition’
[13:37:21.580]  - resignal = TRUE
[13:37:21.580]  - Number of conditions: 52
[13:37:21.581]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.547] getGlobalsAndPackages() ...
[13:37:21.581]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.547] Searching for globals...
[13:37:21.581]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.549] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.581]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.550] Searching for globals ... DONE
[13:37:21.581]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.550] Resolving globals: FALSE
[13:37:21.581]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.551] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.582]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.552] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.582]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.552] - globals: [1] ‘data’
[13:37:21.582]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.552] 
[13:37:21.582]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.552] getGlobalsAndPackages() ... DONE
[13:37:21.582]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.553] run() for ‘Future’ ...
[13:37:21.582]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.553] - state: ‘created’
[13:37:21.583]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.553] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:37:21.583]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.554] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.583]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.554] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.583]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.554]   - Field: ‘label’
[13:37:21.583]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.554]   - Field: ‘local’
[13:37:21.583]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘owner’
[13:37:21.583]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘envir’
[13:37:21.584]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘packages’
[13:37:21.584]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘gc’
[13:37:21.584]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘conditions’
[13:37:21.584]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘expr’
[13:37:21.584]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.555]   - Field: ‘uuid’
[13:37:21.584]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘seed’
[13:37:21.585]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘version’
[13:37:21.585]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘result’
[13:37:21.585]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘asynchronous’
[13:37:21.585]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘calls’
[13:37:21.585]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.556]   - Field: ‘globals’
[13:37:21.585]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557]   - Field: ‘stdout’
[13:37:21.585]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557]   - Field: ‘earlySignal’
[13:37:21.586]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557]   - Field: ‘lazy’
[13:37:21.586]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557]   - Field: ‘state’
[13:37:21.586]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.586]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.557] - Launch lazy future ...
[13:37:21.586]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.558] Packages needed by the future expression (n = 0): <none>
[13:37:21.586]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.558] Packages needed by future strategies (n = 0): <none>
[13:37:21.587]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.559] {
[13:37:21.559]     {
[13:37:21.559]         {
[13:37:21.559]             ...future.startTime <- base::Sys.time()
[13:37:21.559]             {
[13:37:21.559]                 {
[13:37:21.559]                   {
[13:37:21.559]                     base::local({
[13:37:21.559]                       has_future <- base::requireNamespace("future", 
[13:37:21.559]                         quietly = TRUE)
[13:37:21.559]                       if (has_future) {
[13:37:21.559]                         ns <- base::getNamespace("future")
[13:37:21.559]                         version <- ns[[".package"]][["version"]]
[13:37:21.559]                         if (is.null(version)) 
[13:37:21.559]                           version <- utils::packageVersion("future")
[13:37:21.559]                       }
[13:37:21.559]                       else {
[13:37:21.559]                         version <- NULL
[13:37:21.559]                       }
[13:37:21.559]                       if (!has_future || version < "1.8.0") {
[13:37:21.559]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.559]                           "", base::R.version$version.string), 
[13:37:21.559]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.559]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.559]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.559]                             "release", "version")], collapse = " "), 
[13:37:21.559]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.559]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.559]                           info)
[13:37:21.559]                         info <- base::paste(info, collapse = "; ")
[13:37:21.559]                         if (!has_future) {
[13:37:21.559]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.559]                             info)
[13:37:21.559]                         }
[13:37:21.559]                         else {
[13:37:21.559]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.559]                             info, version)
[13:37:21.559]                         }
[13:37:21.559]                         base::stop(msg)
[13:37:21.559]                       }
[13:37:21.559]                     })
[13:37:21.559]                   }
[13:37:21.559]                   ...future.strategy.old <- future::plan("list")
[13:37:21.559]                   options(future.plan = NULL)
[13:37:21.559]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.559]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.559]                 }
[13:37:21.559]                 ...future.workdir <- getwd()
[13:37:21.559]             }
[13:37:21.559]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.559]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.559]         }
[13:37:21.559]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.559]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.559]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.559]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.559]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.559]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.559]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.559]             base::names(...future.oldOptions))
[13:37:21.559]     }
[13:37:21.559]     if (FALSE) {
[13:37:21.559]     }
[13:37:21.559]     else {
[13:37:21.559]         if (TRUE) {
[13:37:21.559]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.559]                 open = "w")
[13:37:21.559]         }
[13:37:21.559]         else {
[13:37:21.559]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.559]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.559]         }
[13:37:21.559]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.559]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.559]             base::sink(type = "output", split = FALSE)
[13:37:21.559]             base::close(...future.stdout)
[13:37:21.559]         }, add = TRUE)
[13:37:21.559]     }
[13:37:21.559]     ...future.frame <- base::sys.nframe()
[13:37:21.559]     ...future.conditions <- base::list()
[13:37:21.559]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.559]     if (FALSE) {
[13:37:21.559]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.559]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.559]     }
[13:37:21.559]     ...future.result <- base::tryCatch({
[13:37:21.559]         base::withCallingHandlers({
[13:37:21.559]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:37:21.559]                 a == 2)))
[13:37:21.559]             future::FutureResult(value = ...future.value$value, 
[13:37:21.559]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.559]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.559]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.559]                     ...future.globalenv.names))
[13:37:21.559]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.559]         }, condition = base::local({
[13:37:21.559]             c <- base::c
[13:37:21.559]             inherits <- base::inherits
[13:37:21.559]             invokeRestart <- base::invokeRestart
[13:37:21.559]             length <- base::length
[13:37:21.559]             list <- base::list
[13:37:21.559]             seq.int <- base::seq.int
[13:37:21.559]             signalCondition <- base::signalCondition
[13:37:21.559]             sys.calls <- base::sys.calls
[13:37:21.559]             `[[` <- base::`[[`
[13:37:21.559]             `+` <- base::`+`
[13:37:21.559]             `<<-` <- base::`<<-`
[13:37:21.559]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.559]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.559]                   3L)]
[13:37:21.559]             }
[13:37:21.559]             function(cond) {
[13:37:21.559]                 is_error <- inherits(cond, "error")
[13:37:21.559]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.559]                   NULL)
[13:37:21.559]                 if (is_error) {
[13:37:21.559]                   sessionInformation <- function() {
[13:37:21.559]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.559]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.559]                       search = base::search(), system = base::Sys.info())
[13:37:21.559]                   }
[13:37:21.559]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.559]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.559]                     cond$call), session = sessionInformation(), 
[13:37:21.559]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.559]                   signalCondition(cond)
[13:37:21.559]                 }
[13:37:21.559]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.559]                 "immediateCondition"))) {
[13:37:21.559]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.559]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.559]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.559]                   if (TRUE && !signal) {
[13:37:21.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.559]                     {
[13:37:21.559]                       inherits <- base::inherits
[13:37:21.559]                       invokeRestart <- base::invokeRestart
[13:37:21.559]                       is.null <- base::is.null
[13:37:21.559]                       muffled <- FALSE
[13:37:21.559]                       if (inherits(cond, "message")) {
[13:37:21.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.559]                         if (muffled) 
[13:37:21.559]                           invokeRestart("muffleMessage")
[13:37:21.559]                       }
[13:37:21.559]                       else if (inherits(cond, "warning")) {
[13:37:21.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.559]                         if (muffled) 
[13:37:21.559]                           invokeRestart("muffleWarning")
[13:37:21.559]                       }
[13:37:21.559]                       else if (inherits(cond, "condition")) {
[13:37:21.559]                         if (!is.null(pattern)) {
[13:37:21.559]                           computeRestarts <- base::computeRestarts
[13:37:21.559]                           grepl <- base::grepl
[13:37:21.559]                           restarts <- computeRestarts(cond)
[13:37:21.559]                           for (restart in restarts) {
[13:37:21.559]                             name <- restart$name
[13:37:21.559]                             if (is.null(name)) 
[13:37:21.559]                               next
[13:37:21.559]                             if (!grepl(pattern, name)) 
[13:37:21.559]                               next
[13:37:21.559]                             invokeRestart(restart)
[13:37:21.559]                             muffled <- TRUE
[13:37:21.559]                             break
[13:37:21.559]                           }
[13:37:21.559]                         }
[13:37:21.559]                       }
[13:37:21.559]                       invisible(muffled)
[13:37:21.559]                     }
[13:37:21.559]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.559]                   }
[13:37:21.559]                 }
[13:37:21.559]                 else {
[13:37:21.559]                   if (TRUE) {
[13:37:21.559]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.559]                     {
[13:37:21.559]                       inherits <- base::inherits
[13:37:21.559]                       invokeRestart <- base::invokeRestart
[13:37:21.559]                       is.null <- base::is.null
[13:37:21.559]                       muffled <- FALSE
[13:37:21.559]                       if (inherits(cond, "message")) {
[13:37:21.559]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.559]                         if (muffled) 
[13:37:21.559]                           invokeRestart("muffleMessage")
[13:37:21.559]                       }
[13:37:21.559]                       else if (inherits(cond, "warning")) {
[13:37:21.559]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.559]                         if (muffled) 
[13:37:21.559]                           invokeRestart("muffleWarning")
[13:37:21.559]                       }
[13:37:21.559]                       else if (inherits(cond, "condition")) {
[13:37:21.559]                         if (!is.null(pattern)) {
[13:37:21.559]                           computeRestarts <- base::computeRestarts
[13:37:21.559]                           grepl <- base::grepl
[13:37:21.559]                           restarts <- computeRestarts(cond)
[13:37:21.559]                           for (restart in restarts) {
[13:37:21.559]                             name <- restart$name
[13:37:21.559]                             if (is.null(name)) 
[13:37:21.559]                               next
[13:37:21.559]                             if (!grepl(pattern, name)) 
[13:37:21.559]                               next
[13:37:21.559]                             invokeRestart(restart)
[13:37:21.559]                             muffled <- TRUE
[13:37:21.559]                             break
[13:37:21.559]                           }
[13:37:21.559]                         }
[13:37:21.559]                       }
[13:37:21.559]                       invisible(muffled)
[13:37:21.559]                     }
[13:37:21.559]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.559]                   }
[13:37:21.559]                 }
[13:37:21.559]             }
[13:37:21.559]         }))
[13:37:21.559]     }, error = function(ex) {
[13:37:21.559]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.559]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.559]                 ...future.rng), started = ...future.startTime, 
[13:37:21.559]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.559]             version = "1.8"), class = "FutureResult")
[13:37:21.559]     }, finally = {
[13:37:21.559]         if (!identical(...future.workdir, getwd())) 
[13:37:21.559]             setwd(...future.workdir)
[13:37:21.559]         {
[13:37:21.559]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.559]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.559]             }
[13:37:21.559]             base::options(...future.oldOptions)
[13:37:21.559]             if (.Platform$OS.type == "windows") {
[13:37:21.559]                 old_names <- names(...future.oldEnvVars)
[13:37:21.559]                 envs <- base::Sys.getenv()
[13:37:21.559]                 names <- names(envs)
[13:37:21.559]                 common <- intersect(names, old_names)
[13:37:21.559]                 added <- setdiff(names, old_names)
[13:37:21.559]                 removed <- setdiff(old_names, names)
[13:37:21.559]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.559]                   envs[common]]
[13:37:21.559]                 NAMES <- toupper(changed)
[13:37:21.559]                 args <- list()
[13:37:21.559]                 for (kk in seq_along(NAMES)) {
[13:37:21.559]                   name <- changed[[kk]]
[13:37:21.559]                   NAME <- NAMES[[kk]]
[13:37:21.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.559]                     next
[13:37:21.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.559]                 }
[13:37:21.559]                 NAMES <- toupper(added)
[13:37:21.559]                 for (kk in seq_along(NAMES)) {
[13:37:21.559]                   name <- added[[kk]]
[13:37:21.559]                   NAME <- NAMES[[kk]]
[13:37:21.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.559]                     next
[13:37:21.559]                   args[[name]] <- ""
[13:37:21.559]                 }
[13:37:21.559]                 NAMES <- toupper(removed)
[13:37:21.559]                 for (kk in seq_along(NAMES)) {
[13:37:21.559]                   name <- removed[[kk]]
[13:37:21.559]                   NAME <- NAMES[[kk]]
[13:37:21.559]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.559]                     next
[13:37:21.559]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.559]                 }
[13:37:21.559]                 if (length(args) > 0) 
[13:37:21.559]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.559]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.559]             }
[13:37:21.559]             else {
[13:37:21.559]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.559]             }
[13:37:21.559]             {
[13:37:21.559]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.559]                   0L) {
[13:37:21.559]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.559]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.559]                   base::options(opts)
[13:37:21.559]                 }
[13:37:21.559]                 {
[13:37:21.559]                   {
[13:37:21.559]                     NULL
[13:37:21.559]                     RNGkind("Mersenne-Twister")
[13:37:21.559]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.559]                       inherits = FALSE)
[13:37:21.559]                   }
[13:37:21.559]                   options(future.plan = NULL)
[13:37:21.559]                   if (is.na(NA_character_)) 
[13:37:21.559]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.559]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.559]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.559]                     .init = FALSE)
[13:37:21.559]                 }
[13:37:21.559]             }
[13:37:21.559]         }
[13:37:21.559]     })
[13:37:21.559]     if (TRUE) {
[13:37:21.559]         base::sink(type = "output", split = FALSE)
[13:37:21.559]         if (TRUE) {
[13:37:21.559]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.559]         }
[13:37:21.559]         else {
[13:37:21.559]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.559]         }
[13:37:21.559]         base::close(...future.stdout)
[13:37:21.559]         ...future.stdout <- NULL
[13:37:21.559]     }
[13:37:21.559]     ...future.result$conditions <- ...future.conditions
[13:37:21.559]     ...future.result$finished <- base::Sys.time()
[13:37:21.559]     ...future.result
[13:37:21.559] }
[13:37:21.587]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.561] assign_globals() ...
[13:37:21.587]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.561] List of 1
[13:37:21.561]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.561]   ..$ a: int [1:3] 1 2 3
[13:37:21.561]   ..$ b: int [1:3] 3 2 1
[13:37:21.561]  - attr(*, "where")=List of 1
[13:37:21.561]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.561]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.561]  - attr(*, "resolved")= logi FALSE
[13:37:21.561]  - attr(*, "total_size")= num 128
[13:37:21.561]  - attr(*, "already-done")= logi TRUE
[13:37:21.587]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.566] - copied ‘data’ to environment
[13:37:21.587]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.566] assign_globals() ... done
[13:37:21.587]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.567] plan(): Setting new future strategy stack:
[13:37:21.588]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.567] List of future strategies:
[13:37:21.567] 1. sequential:
[13:37:21.567]    - args: function (..., envir = parent.frame())
[13:37:21.567]    - tweaked: FALSE
[13:37:21.567]    - call: NULL
[13:37:21.588]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.567] plan(): nbrOfWorkers() = 1
[13:37:21.588]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.569] plan(): Setting new future strategy stack:
[13:37:21.588]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.569] List of future strategies:
[13:37:21.569] 1. sequential:
[13:37:21.569]    - args: function (..., envir = parent.frame())
[13:37:21.569]    - tweaked: FALSE
[13:37:21.569]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.588]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.569] plan(): nbrOfWorkers() = 1
[13:37:21.588]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.569] SequentialFuture started (and completed)
[13:37:21.588]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.570] - Launch lazy future ... done
[13:37:21.589]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.570] run() for ‘SequentialFuture’ ... done
[13:37:21.589] signalConditions() ... done
- plan(list('multicore', 'sequential')) ... DONE
- plan(list('multicore', 'multicore')) ...
[13:37:21.589] plan(): Setting new future strategy stack:
[13:37:21.589] List of future strategies:
[13:37:21.589] 1. multicore:
[13:37:21.589]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.589]    - tweaked: FALSE
[13:37:21.589]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.589] 2. multicore:
[13:37:21.589]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.589]    - tweaked: FALSE
[13:37:21.589]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.594] plan(): nbrOfWorkers() = 2
[13:37:21.594] getGlobalsAndPackages() ...
[13:37:21.595] Searching for globals...
[13:37:21.617] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:21.617] Searching for globals ... DONE
[13:37:21.617] Resolving globals: FALSE
[13:37:21.619] The total size of the 2 globals is 93.07 KiB (95304 bytes)
[13:37:21.619] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 93.07 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (92.95 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:21.619] - globals: [2] ‘nested’, ‘strategy2’
[13:37:21.619] - packages: [1] ‘future’
[13:37:21.620] getGlobalsAndPackages() ... DONE
[13:37:21.620] run() for ‘Future’ ...
[13:37:21.620] - state: ‘created’
[13:37:21.620] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.624] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.624] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.624]   - Field: ‘label’
[13:37:21.625]   - Field: ‘local’
[13:37:21.625]   - Field: ‘owner’
[13:37:21.625]   - Field: ‘envir’
[13:37:21.625]   - Field: ‘workers’
[13:37:21.625]   - Field: ‘packages’
[13:37:21.625]   - Field: ‘gc’
[13:37:21.625]   - Field: ‘job’
[13:37:21.625]   - Field: ‘conditions’
[13:37:21.625]   - Field: ‘expr’
[13:37:21.626]   - Field: ‘uuid’
[13:37:21.626]   - Field: ‘seed’
[13:37:21.626]   - Field: ‘version’
[13:37:21.626]   - Field: ‘result’
[13:37:21.626]   - Field: ‘asynchronous’
[13:37:21.626]   - Field: ‘calls’
[13:37:21.626]   - Field: ‘globals’
[13:37:21.626]   - Field: ‘stdout’
[13:37:21.626]   - Field: ‘earlySignal’
[13:37:21.627]   - Field: ‘lazy’
[13:37:21.627]   - Field: ‘state’
[13:37:21.627] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.627] - Launch lazy future ...
[13:37:21.627] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.627] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.628] {
[13:37:21.628]     {
[13:37:21.628]         {
[13:37:21.628]             ...future.startTime <- base::Sys.time()
[13:37:21.628]             {
[13:37:21.628]                 {
[13:37:21.628]                   {
[13:37:21.628]                     {
[13:37:21.628]                       {
[13:37:21.628]                         base::local({
[13:37:21.628]                           has_future <- base::requireNamespace("future", 
[13:37:21.628]                             quietly = TRUE)
[13:37:21.628]                           if (has_future) {
[13:37:21.628]                             ns <- base::getNamespace("future")
[13:37:21.628]                             version <- ns[[".package"]][["version"]]
[13:37:21.628]                             if (is.null(version)) 
[13:37:21.628]                               version <- utils::packageVersion("future")
[13:37:21.628]                           }
[13:37:21.628]                           else {
[13:37:21.628]                             version <- NULL
[13:37:21.628]                           }
[13:37:21.628]                           if (!has_future || version < "1.8.0") {
[13:37:21.628]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.628]                               "", base::R.version$version.string), 
[13:37:21.628]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.628]                                 base::R.version$platform, 8 * 
[13:37:21.628]                                   base::.Machine$sizeof.pointer), 
[13:37:21.628]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.628]                                 "release", "version")], collapse = " "), 
[13:37:21.628]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.628]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.628]                               info)
[13:37:21.628]                             info <- base::paste(info, collapse = "; ")
[13:37:21.628]                             if (!has_future) {
[13:37:21.628]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.628]                                 info)
[13:37:21.628]                             }
[13:37:21.628]                             else {
[13:37:21.628]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.628]                                 info, version)
[13:37:21.628]                             }
[13:37:21.628]                             base::stop(msg)
[13:37:21.628]                           }
[13:37:21.628]                         })
[13:37:21.628]                       }
[13:37:21.628]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.628]                       base::options(mc.cores = 1L)
[13:37:21.628]                     }
[13:37:21.628]                     base::local({
[13:37:21.628]                       for (pkg in "future") {
[13:37:21.628]                         base::loadNamespace(pkg)
[13:37:21.628]                         base::library(pkg, character.only = TRUE)
[13:37:21.628]                       }
[13:37:21.628]                     })
[13:37:21.628]                   }
[13:37:21.628]                   ...future.strategy.old <- future::plan("list")
[13:37:21.628]                   options(future.plan = NULL)
[13:37:21.628]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.628]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:21.628]                     envir = parent.frame()) 
[13:37:21.628]                   {
[13:37:21.628]                     default_workers <- missing(workers)
[13:37:21.628]                     if (is.function(workers)) 
[13:37:21.628]                       workers <- workers()
[13:37:21.628]                     workers <- structure(as.integer(workers), 
[13:37:21.628]                       class = class(workers))
[13:37:21.628]                     stop_if_not(is.finite(workers), workers >= 
[13:37:21.628]                       1L)
[13:37:21.628]                     if ((workers == 1L && !inherits(workers, 
[13:37:21.628]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:21.628]                       if (default_workers) 
[13:37:21.628]                         supportsMulticore(warn = TRUE)
[13:37:21.628]                       return(sequential(..., envir = envir))
[13:37:21.628]                     }
[13:37:21.628]                     oopts <- options(mc.cores = workers)
[13:37:21.628]                     on.exit(options(oopts))
[13:37:21.628]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:21.628]                       envir = envir)
[13:37:21.628]                     if (!future$lazy) 
[13:37:21.628]                       future <- run(future)
[13:37:21.628]                     invisible(future)
[13:37:21.628]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.628]                 }
[13:37:21.628]                 ...future.workdir <- getwd()
[13:37:21.628]             }
[13:37:21.628]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.628]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.628]         }
[13:37:21.628]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.628]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.628]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.628]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.628]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.628]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.628]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.628]             base::names(...future.oldOptions))
[13:37:21.628]     }
[13:37:21.628]     if (FALSE) {
[13:37:21.628]     }
[13:37:21.628]     else {
[13:37:21.628]         if (TRUE) {
[13:37:21.628]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.628]                 open = "w")
[13:37:21.628]         }
[13:37:21.628]         else {
[13:37:21.628]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.628]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.628]         }
[13:37:21.628]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.628]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.628]             base::sink(type = "output", split = FALSE)
[13:37:21.628]             base::close(...future.stdout)
[13:37:21.628]         }, add = TRUE)
[13:37:21.628]     }
[13:37:21.628]     ...future.frame <- base::sys.nframe()
[13:37:21.628]     ...future.conditions <- base::list()
[13:37:21.628]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.628]     if (FALSE) {
[13:37:21.628]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.628]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.628]     }
[13:37:21.628]     ...future.result <- base::tryCatch({
[13:37:21.628]         base::withCallingHandlers({
[13:37:21.628]             ...future.value <- base::withVisible(base::local({
[13:37:21.628]                 withCallingHandlers({
[13:37:21.628]                   {
[13:37:21.628]                     a <- 1L
[13:37:21.628]                     plan_a <- unclass(future::plan("list"))
[13:37:21.628]                     nested_a <- nested[-1]
[13:37:21.628]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:21.628]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.628]                       strategy2))
[13:37:21.628]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:21.628]                       "init") <- NULL
[13:37:21.628]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:21.628]                       "init") <- NULL
[13:37:21.628]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:21.628]                     y %<-% {
[13:37:21.628]                       b <- 2L
[13:37:21.628]                       plan_b <- future::plan("list")
[13:37:21.628]                       nested_b <- nested_a[-1]
[13:37:21.628]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.628]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:21.628]                         inherits(future::plan("next"), "sequential"))
[13:37:21.628]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.628]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.628]                     }
[13:37:21.628]                     y
[13:37:21.628]                   }
[13:37:21.628]                 }, immediateCondition = function(cond) {
[13:37:21.628]                   save_rds <- function (object, pathname, ...) 
[13:37:21.628]                   {
[13:37:21.628]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.628]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.628]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.628]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.628]                         fi_tmp[["mtime"]])
[13:37:21.628]                     }
[13:37:21.628]                     tryCatch({
[13:37:21.628]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.628]                     }, error = function(ex) {
[13:37:21.628]                       msg <- conditionMessage(ex)
[13:37:21.628]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.628]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.628]                         fi_tmp[["mtime"]], msg)
[13:37:21.628]                       ex$message <- msg
[13:37:21.628]                       stop(ex)
[13:37:21.628]                     })
[13:37:21.628]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.628]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.628]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.628]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.628]                       fi <- file.info(pathname)
[13:37:21.628]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.628]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.628]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.628]                         fi[["size"]], fi[["mtime"]])
[13:37:21.628]                       stop(msg)
[13:37:21.628]                     }
[13:37:21.628]                     invisible(pathname)
[13:37:21.628]                   }
[13:37:21.628]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.628]                     rootPath = tempdir()) 
[13:37:21.628]                   {
[13:37:21.628]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.628]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.628]                       tmpdir = path, fileext = ".rds")
[13:37:21.628]                     save_rds(obj, file)
[13:37:21.628]                   }
[13:37:21.628]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.628]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.628]                   {
[13:37:21.628]                     inherits <- base::inherits
[13:37:21.628]                     invokeRestart <- base::invokeRestart
[13:37:21.628]                     is.null <- base::is.null
[13:37:21.628]                     muffled <- FALSE
[13:37:21.628]                     if (inherits(cond, "message")) {
[13:37:21.628]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.628]                       if (muffled) 
[13:37:21.628]                         invokeRestart("muffleMessage")
[13:37:21.628]                     }
[13:37:21.628]                     else if (inherits(cond, "warning")) {
[13:37:21.628]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.628]                       if (muffled) 
[13:37:21.628]                         invokeRestart("muffleWarning")
[13:37:21.628]                     }
[13:37:21.628]                     else if (inherits(cond, "condition")) {
[13:37:21.628]                       if (!is.null(pattern)) {
[13:37:21.628]                         computeRestarts <- base::computeRestarts
[13:37:21.628]                         grepl <- base::grepl
[13:37:21.628]                         restarts <- computeRestarts(cond)
[13:37:21.628]                         for (restart in restarts) {
[13:37:21.628]                           name <- restart$name
[13:37:21.628]                           if (is.null(name)) 
[13:37:21.628]                             next
[13:37:21.628]                           if (!grepl(pattern, name)) 
[13:37:21.628]                             next
[13:37:21.628]                           invokeRestart(restart)
[13:37:21.628]                           muffled <- TRUE
[13:37:21.628]                           break
[13:37:21.628]                         }
[13:37:21.628]                       }
[13:37:21.628]                     }
[13:37:21.628]                     invisible(muffled)
[13:37:21.628]                   }
[13:37:21.628]                   muffleCondition(cond)
[13:37:21.628]                 })
[13:37:21.628]             }))
[13:37:21.628]             future::FutureResult(value = ...future.value$value, 
[13:37:21.628]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.628]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.628]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.628]                     ...future.globalenv.names))
[13:37:21.628]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.628]         }, condition = base::local({
[13:37:21.628]             c <- base::c
[13:37:21.628]             inherits <- base::inherits
[13:37:21.628]             invokeRestart <- base::invokeRestart
[13:37:21.628]             length <- base::length
[13:37:21.628]             list <- base::list
[13:37:21.628]             seq.int <- base::seq.int
[13:37:21.628]             signalCondition <- base::signalCondition
[13:37:21.628]             sys.calls <- base::sys.calls
[13:37:21.628]             `[[` <- base::`[[`
[13:37:21.628]             `+` <- base::`+`
[13:37:21.628]             `<<-` <- base::`<<-`
[13:37:21.628]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.628]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.628]                   3L)]
[13:37:21.628]             }
[13:37:21.628]             function(cond) {
[13:37:21.628]                 is_error <- inherits(cond, "error")
[13:37:21.628]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.628]                   NULL)
[13:37:21.628]                 if (is_error) {
[13:37:21.628]                   sessionInformation <- function() {
[13:37:21.628]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.628]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.628]                       search = base::search(), system = base::Sys.info())
[13:37:21.628]                   }
[13:37:21.628]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.628]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.628]                     cond$call), session = sessionInformation(), 
[13:37:21.628]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.628]                   signalCondition(cond)
[13:37:21.628]                 }
[13:37:21.628]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.628]                 "immediateCondition"))) {
[13:37:21.628]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.628]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.628]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.628]                   if (TRUE && !signal) {
[13:37:21.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.628]                     {
[13:37:21.628]                       inherits <- base::inherits
[13:37:21.628]                       invokeRestart <- base::invokeRestart
[13:37:21.628]                       is.null <- base::is.null
[13:37:21.628]                       muffled <- FALSE
[13:37:21.628]                       if (inherits(cond, "message")) {
[13:37:21.628]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.628]                         if (muffled) 
[13:37:21.628]                           invokeRestart("muffleMessage")
[13:37:21.628]                       }
[13:37:21.628]                       else if (inherits(cond, "warning")) {
[13:37:21.628]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.628]                         if (muffled) 
[13:37:21.628]                           invokeRestart("muffleWarning")
[13:37:21.628]                       }
[13:37:21.628]                       else if (inherits(cond, "condition")) {
[13:37:21.628]                         if (!is.null(pattern)) {
[13:37:21.628]                           computeRestarts <- base::computeRestarts
[13:37:21.628]                           grepl <- base::grepl
[13:37:21.628]                           restarts <- computeRestarts(cond)
[13:37:21.628]                           for (restart in restarts) {
[13:37:21.628]                             name <- restart$name
[13:37:21.628]                             if (is.null(name)) 
[13:37:21.628]                               next
[13:37:21.628]                             if (!grepl(pattern, name)) 
[13:37:21.628]                               next
[13:37:21.628]                             invokeRestart(restart)
[13:37:21.628]                             muffled <- TRUE
[13:37:21.628]                             break
[13:37:21.628]                           }
[13:37:21.628]                         }
[13:37:21.628]                       }
[13:37:21.628]                       invisible(muffled)
[13:37:21.628]                     }
[13:37:21.628]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.628]                   }
[13:37:21.628]                 }
[13:37:21.628]                 else {
[13:37:21.628]                   if (TRUE) {
[13:37:21.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.628]                     {
[13:37:21.628]                       inherits <- base::inherits
[13:37:21.628]                       invokeRestart <- base::invokeRestart
[13:37:21.628]                       is.null <- base::is.null
[13:37:21.628]                       muffled <- FALSE
[13:37:21.628]                       if (inherits(cond, "message")) {
[13:37:21.628]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.628]                         if (muffled) 
[13:37:21.628]                           invokeRestart("muffleMessage")
[13:37:21.628]                       }
[13:37:21.628]                       else if (inherits(cond, "warning")) {
[13:37:21.628]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.628]                         if (muffled) 
[13:37:21.628]                           invokeRestart("muffleWarning")
[13:37:21.628]                       }
[13:37:21.628]                       else if (inherits(cond, "condition")) {
[13:37:21.628]                         if (!is.null(pattern)) {
[13:37:21.628]                           computeRestarts <- base::computeRestarts
[13:37:21.628]                           grepl <- base::grepl
[13:37:21.628]                           restarts <- computeRestarts(cond)
[13:37:21.628]                           for (restart in restarts) {
[13:37:21.628]                             name <- restart$name
[13:37:21.628]                             if (is.null(name)) 
[13:37:21.628]                               next
[13:37:21.628]                             if (!grepl(pattern, name)) 
[13:37:21.628]                               next
[13:37:21.628]                             invokeRestart(restart)
[13:37:21.628]                             muffled <- TRUE
[13:37:21.628]                             break
[13:37:21.628]                           }
[13:37:21.628]                         }
[13:37:21.628]                       }
[13:37:21.628]                       invisible(muffled)
[13:37:21.628]                     }
[13:37:21.628]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.628]                   }
[13:37:21.628]                 }
[13:37:21.628]             }
[13:37:21.628]         }))
[13:37:21.628]     }, error = function(ex) {
[13:37:21.628]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.628]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.628]                 ...future.rng), started = ...future.startTime, 
[13:37:21.628]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.628]             version = "1.8"), class = "FutureResult")
[13:37:21.628]     }, finally = {
[13:37:21.628]         if (!identical(...future.workdir, getwd())) 
[13:37:21.628]             setwd(...future.workdir)
[13:37:21.628]         {
[13:37:21.628]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.628]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.628]             }
[13:37:21.628]             base::options(...future.oldOptions)
[13:37:21.628]             if (.Platform$OS.type == "windows") {
[13:37:21.628]                 old_names <- names(...future.oldEnvVars)
[13:37:21.628]                 envs <- base::Sys.getenv()
[13:37:21.628]                 names <- names(envs)
[13:37:21.628]                 common <- intersect(names, old_names)
[13:37:21.628]                 added <- setdiff(names, old_names)
[13:37:21.628]                 removed <- setdiff(old_names, names)
[13:37:21.628]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.628]                   envs[common]]
[13:37:21.628]                 NAMES <- toupper(changed)
[13:37:21.628]                 args <- list()
[13:37:21.628]                 for (kk in seq_along(NAMES)) {
[13:37:21.628]                   name <- changed[[kk]]
[13:37:21.628]                   NAME <- NAMES[[kk]]
[13:37:21.628]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.628]                     next
[13:37:21.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.628]                 }
[13:37:21.628]                 NAMES <- toupper(added)
[13:37:21.628]                 for (kk in seq_along(NAMES)) {
[13:37:21.628]                   name <- added[[kk]]
[13:37:21.628]                   NAME <- NAMES[[kk]]
[13:37:21.628]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.628]                     next
[13:37:21.628]                   args[[name]] <- ""
[13:37:21.628]                 }
[13:37:21.628]                 NAMES <- toupper(removed)
[13:37:21.628]                 for (kk in seq_along(NAMES)) {
[13:37:21.628]                   name <- removed[[kk]]
[13:37:21.628]                   NAME <- NAMES[[kk]]
[13:37:21.628]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.628]                     next
[13:37:21.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.628]                 }
[13:37:21.628]                 if (length(args) > 0) 
[13:37:21.628]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.628]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.628]             }
[13:37:21.628]             else {
[13:37:21.628]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.628]             }
[13:37:21.628]             {
[13:37:21.628]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.628]                   0L) {
[13:37:21.628]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.628]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.628]                   base::options(opts)
[13:37:21.628]                 }
[13:37:21.628]                 {
[13:37:21.628]                   {
[13:37:21.628]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.628]                     NULL
[13:37:21.628]                   }
[13:37:21.628]                   options(future.plan = NULL)
[13:37:21.628]                   if (is.na(NA_character_)) 
[13:37:21.628]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.628]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.628]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.628]                     .init = FALSE)
[13:37:21.628]                 }
[13:37:21.628]             }
[13:37:21.628]         }
[13:37:21.628]     })
[13:37:21.628]     if (TRUE) {
[13:37:21.628]         base::sink(type = "output", split = FALSE)
[13:37:21.628]         if (TRUE) {
[13:37:21.628]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.628]         }
[13:37:21.628]         else {
[13:37:21.628]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.628]         }
[13:37:21.628]         base::close(...future.stdout)
[13:37:21.628]         ...future.stdout <- NULL
[13:37:21.628]     }
[13:37:21.628]     ...future.result$conditions <- ...future.conditions
[13:37:21.628]     ...future.result$finished <- base::Sys.time()
[13:37:21.628]     ...future.result
[13:37:21.628] }
[13:37:21.631] assign_globals() ...
[13:37:21.631] List of 2
[13:37:21.631]  $ nested   :List of 2
[13:37:21.631]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.631]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.631]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.631]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.631]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.631]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.631]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.631]  $ strategy2: chr "multicore"
[13:37:21.631]  - attr(*, "where")=List of 2
[13:37:21.631]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:21.631]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:21.631]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.631]  - attr(*, "resolved")= logi FALSE
[13:37:21.631]  - attr(*, "total_size")= num 95304
[13:37:21.631]  - attr(*, "already-done")= logi TRUE
[13:37:21.637] - copied ‘nested’ to environment
[13:37:21.637] - copied ‘strategy2’ to environment
[13:37:21.637] assign_globals() ... done
[13:37:21.637] requestCore(): workers = 2
[13:37:21.640] MulticoreFuture started
[13:37:21.640] - Launch lazy future ... done
[13:37:21.640] run() for ‘MulticoreFuture’ ... done
[13:37:21.641] result() for MulticoreFuture ...
[13:37:21.641] plan(): Setting new future strategy stack:
[13:37:21.642] List of future strategies:
[13:37:21.642] 1. multicore:
[13:37:21.642]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.642]    - tweaked: FALSE
[13:37:21.642]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.648] plan(): nbrOfWorkers() = 1
[13:37:21.691] plan(): Setting new future strategy stack:
[13:37:21.691] List of future strategies:
[13:37:21.691] 1. multicore:
[13:37:21.691]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.691]    - tweaked: FALSE
[13:37:21.691]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.691] 2. multicore:
[13:37:21.691]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.691]    - tweaked: FALSE
[13:37:21.691]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.695] plan(): nbrOfWorkers() = 2
[13:37:21.697] result() for MulticoreFuture ...
[13:37:21.697] result() for MulticoreFuture ... done
[13:37:21.697] signalConditions() ...
[13:37:21.697]  - include = ‘immediateCondition’
[13:37:21.697]  - exclude = 
[13:37:21.698]  - resignal = FALSE
[13:37:21.698]  - Number of conditions: 54
[13:37:21.698] signalConditions() ... done
[13:37:21.698] result() for MulticoreFuture ... done
[13:37:21.698] result() for MulticoreFuture ...
[13:37:21.698] result() for MulticoreFuture ... done
[13:37:21.699] signalConditions() ...
[13:37:21.699]  - include = ‘immediateCondition’
[13:37:21.699]  - exclude = 
[13:37:21.699]  - resignal = FALSE
[13:37:21.699]  - Number of conditions: 54
[13:37:21.699] signalConditions() ... done
[13:37:21.699] Future state: ‘finished’
[13:37:21.700] result() for MulticoreFuture ...
[13:37:21.700] result() for MulticoreFuture ... done
[13:37:21.700] signalConditions() ...
[13:37:21.700]  - include = ‘condition’
[13:37:21.700]  - exclude = ‘immediateCondition’
[13:37:21.700]  - resignal = TRUE
[13:37:21.700]  - Number of conditions: 54
[13:37:21.700]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.650] getGlobalsAndPackages() ...
[13:37:21.701]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.650] Searching for globals...
[13:37:21.701]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.658] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:21.701]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.659] Searching for globals ... DONE
[13:37:21.701]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.659] Resolving globals: FALSE
[13:37:21.701]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.660] The total size of the 3 globals is 93.01 KiB (95240 bytes)
[13:37:21.701]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.661] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 93.01 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (46.48 KiB of class ‘list’), ‘plan_a’ (46.48 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:21.702]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.661] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:21.702]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.661] 
[13:37:21.702]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.661] getGlobalsAndPackages() ... DONE
[13:37:21.702]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.662] run() for ‘Future’ ...
[13:37:21.702]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.662] - state: ‘created’
[13:37:21.702]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.663] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.703]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.667] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.703]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.667] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.703]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.667]   - Field: ‘label’
[13:37:21.703]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.667]   - Field: ‘local’
[13:37:21.703]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘owner’
[13:37:21.703]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘envir’
[13:37:21.703]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘packages’
[13:37:21.704]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘gc’
[13:37:21.704]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘conditions’
[13:37:21.704]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.668]   - Field: ‘expr’
[13:37:21.704]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘uuid’
[13:37:21.704]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘seed’
[13:37:21.704]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘version’
[13:37:21.705]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘result’
[13:37:21.705]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘asynchronous’
[13:37:21.705]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.669]   - Field: ‘calls’
[13:37:21.705]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670]   - Field: ‘globals’
[13:37:21.705]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670]   - Field: ‘stdout’
[13:37:21.705]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670]   - Field: ‘earlySignal’
[13:37:21.706]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670]   - Field: ‘lazy’
[13:37:21.706]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670]   - Field: ‘state’
[13:37:21.706]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.670] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.706]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.671] - Launch lazy future ...
[13:37:21.706]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.671] Packages needed by the future expression (n = 0): <none>
[13:37:21.706]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.671] Packages needed by future strategies (n = 0): <none>
[13:37:21.707]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.672] {
[13:37:21.672]     {
[13:37:21.672]         {
[13:37:21.672]             ...future.startTime <- base::Sys.time()
[13:37:21.672]             {
[13:37:21.672]                 {
[13:37:21.672]                   {
[13:37:21.672]                     base::local({
[13:37:21.672]                       has_future <- base::requireNamespace("future", 
[13:37:21.672]                         quietly = TRUE)
[13:37:21.672]                       if (has_future) {
[13:37:21.672]                         ns <- base::getNamespace("future")
[13:37:21.672]                         version <- ns[[".package"]][["version"]]
[13:37:21.672]                         if (is.null(version)) 
[13:37:21.672]                           version <- utils::packageVersion("future")
[13:37:21.672]                       }
[13:37:21.672]                       else {
[13:37:21.672]                         version <- NULL
[13:37:21.672]                       }
[13:37:21.672]                       if (!has_future || version < "1.8.0") {
[13:37:21.672]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.672]                           "", base::R.version$version.string), 
[13:37:21.672]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.672]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.672]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.672]                             "release", "version")], collapse = " "), 
[13:37:21.672]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.672]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.672]                           info)
[13:37:21.672]                         info <- base::paste(info, collapse = "; ")
[13:37:21.672]                         if (!has_future) {
[13:37:21.672]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.672]                             info)
[13:37:21.672]                         }
[13:37:21.672]                         else {
[13:37:21.672]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.672]                             info, version)
[13:37:21.672]                         }
[13:37:21.672]                         base::stop(msg)
[13:37:21.672]                       }
[13:37:21.672]                     })
[13:37:21.672]                   }
[13:37:21.672]                   ...future.strategy.old <- future::plan("list")
[13:37:21.672]                   options(future.plan = NULL)
[13:37:21.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.672]                 }
[13:37:21.672]                 ...future.workdir <- getwd()
[13:37:21.672]             }
[13:37:21.672]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.672]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.672]         }
[13:37:21.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.672]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.672]             base::names(...future.oldOptions))
[13:37:21.672]     }
[13:37:21.672]     if (FALSE) {
[13:37:21.672]     }
[13:37:21.672]     else {
[13:37:21.672]         if (TRUE) {
[13:37:21.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.672]                 open = "w")
[13:37:21.672]         }
[13:37:21.672]         else {
[13:37:21.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.672]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.672]         }
[13:37:21.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.672]             base::sink(type = "output", split = FALSE)
[13:37:21.672]             base::close(...future.stdout)
[13:37:21.672]         }, add = TRUE)
[13:37:21.672]     }
[13:37:21.672]     ...future.frame <- base::sys.nframe()
[13:37:21.672]     ...future.conditions <- base::list()
[13:37:21.672]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.672]     if (FALSE) {
[13:37:21.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.672]     }
[13:37:21.672]     ...future.result <- base::tryCatch({
[13:37:21.672]         base::withCallingHandlers({
[13:37:21.672]             ...future.value <- base::withVisible(base::local({
[13:37:21.672]                 b <- 2L
[13:37:21.672]                 plan_b <- future::plan("list")
[13:37:21.672]                 nested_b <- nested_a[-1]
[13:37:21.672]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.672]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.672]                   "sequential"))
[13:37:21.672]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.672]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.672]             }))
[13:37:21.672]             future::FutureResult(value = ...future.value$value, 
[13:37:21.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.672]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.672]                     ...future.globalenv.names))
[13:37:21.672]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.672]         }, condition = base::local({
[13:37:21.672]             c <- base::c
[13:37:21.672]             inherits <- base::inherits
[13:37:21.672]             invokeRestart <- base::invokeRestart
[13:37:21.672]             length <- base::length
[13:37:21.672]             list <- base::list
[13:37:21.672]             seq.int <- base::seq.int
[13:37:21.672]             signalCondition <- base::signalCondition
[13:37:21.672]             sys.calls <- base::sys.calls
[13:37:21.672]             `[[` <- base::`[[`
[13:37:21.672]             `+` <- base::`+`
[13:37:21.672]             `<<-` <- base::`<<-`
[13:37:21.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.672]                   3L)]
[13:37:21.672]             }
[13:37:21.672]             function(cond) {
[13:37:21.672]                 is_error <- inherits(cond, "error")
[13:37:21.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.672]                   NULL)
[13:37:21.672]                 if (is_error) {
[13:37:21.672]                   sessionInformation <- function() {
[13:37:21.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.672]                       search = base::search(), system = base::Sys.info())
[13:37:21.672]                   }
[13:37:21.672]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.672]                     cond$call), session = sessionInformation(), 
[13:37:21.672]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.672]                   signalCondition(cond)
[13:37:21.672]                 }
[13:37:21.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.672]                 "immediateCondition"))) {
[13:37:21.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.672]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.672]                   if (TRUE && !signal) {
[13:37:21.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.672]                     {
[13:37:21.672]                       inherits <- base::inherits
[13:37:21.672]                       invokeRestart <- base::invokeRestart
[13:37:21.672]                       is.null <- base::is.null
[13:37:21.672]                       muffled <- FALSE
[13:37:21.672]                       if (inherits(cond, "message")) {
[13:37:21.672]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.672]                         if (muffled) 
[13:37:21.672]                           invokeRestart("muffleMessage")
[13:37:21.672]                       }
[13:37:21.672]                       else if (inherits(cond, "warning")) {
[13:37:21.672]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.672]                         if (muffled) 
[13:37:21.672]                           invokeRestart("muffleWarning")
[13:37:21.672]                       }
[13:37:21.672]                       else if (inherits(cond, "condition")) {
[13:37:21.672]                         if (!is.null(pattern)) {
[13:37:21.672]                           computeRestarts <- base::computeRestarts
[13:37:21.672]                           grepl <- base::grepl
[13:37:21.672]                           restarts <- computeRestarts(cond)
[13:37:21.672]                           for (restart in restarts) {
[13:37:21.672]                             name <- restart$name
[13:37:21.672]                             if (is.null(name)) 
[13:37:21.672]                               next
[13:37:21.672]                             if (!grepl(pattern, name)) 
[13:37:21.672]                               next
[13:37:21.672]                             invokeRestart(restart)
[13:37:21.672]                             muffled <- TRUE
[13:37:21.672]                             break
[13:37:21.672]                           }
[13:37:21.672]                         }
[13:37:21.672]                       }
[13:37:21.672]                       invisible(muffled)
[13:37:21.672]                     }
[13:37:21.672]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.672]                   }
[13:37:21.672]                 }
[13:37:21.672]                 else {
[13:37:21.672]                   if (TRUE) {
[13:37:21.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.672]                     {
[13:37:21.672]                       inherits <- base::inherits
[13:37:21.672]                       invokeRestart <- base::invokeRestart
[13:37:21.672]                       is.null <- base::is.null
[13:37:21.672]                       muffled <- FALSE
[13:37:21.672]                       if (inherits(cond, "message")) {
[13:37:21.672]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.672]                         if (muffled) 
[13:37:21.672]                           invokeRestart("muffleMessage")
[13:37:21.672]                       }
[13:37:21.672]                       else if (inherits(cond, "warning")) {
[13:37:21.672]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.672]                         if (muffled) 
[13:37:21.672]                           invokeRestart("muffleWarning")
[13:37:21.672]                       }
[13:37:21.672]                       else if (inherits(cond, "condition")) {
[13:37:21.672]                         if (!is.null(pattern)) {
[13:37:21.672]                           computeRestarts <- base::computeRestarts
[13:37:21.672]                           grepl <- base::grepl
[13:37:21.672]                           restarts <- computeRestarts(cond)
[13:37:21.672]                           for (restart in restarts) {
[13:37:21.672]                             name <- restart$name
[13:37:21.672]                             if (is.null(name)) 
[13:37:21.672]                               next
[13:37:21.672]                             if (!grepl(pattern, name)) 
[13:37:21.672]                               next
[13:37:21.672]                             invokeRestart(restart)
[13:37:21.672]                             muffled <- TRUE
[13:37:21.672]                             break
[13:37:21.672]                           }
[13:37:21.672]                         }
[13:37:21.672]                       }
[13:37:21.672]                       invisible(muffled)
[13:37:21.672]                     }
[13:37:21.672]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.672]                   }
[13:37:21.672]                 }
[13:37:21.672]             }
[13:37:21.672]         }))
[13:37:21.672]     }, error = function(ex) {
[13:37:21.672]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.672]                 ...future.rng), started = ...future.startTime, 
[13:37:21.672]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.672]             version = "1.8"), class = "FutureResult")
[13:37:21.672]     }, finally = {
[13:37:21.672]         if (!identical(...future.workdir, getwd())) 
[13:37:21.672]             setwd(...future.workdir)
[13:37:21.672]         {
[13:37:21.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.672]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.672]             }
[13:37:21.672]             base::options(...future.oldOptions)
[13:37:21.672]             if (.Platform$OS.type == "windows") {
[13:37:21.672]                 old_names <- names(...future.oldEnvVars)
[13:37:21.672]                 envs <- base::Sys.getenv()
[13:37:21.672]                 names <- names(envs)
[13:37:21.672]                 common <- intersect(names, old_names)
[13:37:21.672]                 added <- setdiff(names, old_names)
[13:37:21.672]                 removed <- setdiff(old_names, names)
[13:37:21.672]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.672]                   envs[common]]
[13:37:21.672]                 NAMES <- toupper(changed)
[13:37:21.672]                 args <- list()
[13:37:21.672]                 for (kk in seq_along(NAMES)) {
[13:37:21.672]                   name <- changed[[kk]]
[13:37:21.672]                   NAME <- NAMES[[kk]]
[13:37:21.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.672]                     next
[13:37:21.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.672]                 }
[13:37:21.672]                 NAMES <- toupper(added)
[13:37:21.672]                 for (kk in seq_along(NAMES)) {
[13:37:21.672]                   name <- added[[kk]]
[13:37:21.672]                   NAME <- NAMES[[kk]]
[13:37:21.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.672]                     next
[13:37:21.672]                   args[[name]] <- ""
[13:37:21.672]                 }
[13:37:21.672]                 NAMES <- toupper(removed)
[13:37:21.672]                 for (kk in seq_along(NAMES)) {
[13:37:21.672]                   name <- removed[[kk]]
[13:37:21.672]                   NAME <- NAMES[[kk]]
[13:37:21.672]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.672]                     next
[13:37:21.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.672]                 }
[13:37:21.672]                 if (length(args) > 0) 
[13:37:21.672]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.672]             }
[13:37:21.672]             else {
[13:37:21.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.672]             }
[13:37:21.672]             {
[13:37:21.672]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.672]                   0L) {
[13:37:21.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.672]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.672]                   base::options(opts)
[13:37:21.672]                 }
[13:37:21.672]                 {
[13:37:21.672]                   {
[13:37:21.672]                     NULL
[13:37:21.672]                     RNGkind("Mersenne-Twister")
[13:37:21.672]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.672]                       inherits = FALSE)
[13:37:21.672]                   }
[13:37:21.672]                   options(future.plan = NULL)
[13:37:21.672]                   if (is.na(NA_character_)) 
[13:37:21.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.672]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.672]                     .init = FALSE)
[13:37:21.672]                 }
[13:37:21.672]             }
[13:37:21.672]         }
[13:37:21.672]     })
[13:37:21.672]     if (TRUE) {
[13:37:21.672]         base::sink(type = "output", split = FALSE)
[13:37:21.672]         if (TRUE) {
[13:37:21.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.672]         }
[13:37:21.672]         else {
[13:37:21.672]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.672]         }
[13:37:21.672]         base::close(...future.stdout)
[13:37:21.672]         ...future.stdout <- NULL
[13:37:21.672]     }
[13:37:21.672]     ...future.result$conditions <- ...future.conditions
[13:37:21.672]     ...future.result$finished <- base::Sys.time()
[13:37:21.672]     ...future.result
[13:37:21.672] }
[13:37:21.707]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.674] assign_globals() ...
[13:37:21.707]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.675] List of 3
[13:37:21.675]  $ nested_a:List of 1
[13:37:21.675]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.675]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.675]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.675]  $ a       : int 1
[13:37:21.675]  $ plan_a  :List of 1
[13:37:21.675]   ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.675]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.675]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.675]  - attr(*, "where")=List of 3
[13:37:21.675]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:37:21.675]   ..$ a       :<environment: R_EmptyEnv> 
[13:37:21.675]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:37:21.675]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.675]  - attr(*, "resolved")= logi FALSE
[13:37:21.675]  - attr(*, "total_size")= num 95240
[13:37:21.675]  - attr(*, "already-done")= logi TRUE
[13:37:21.707]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.682] - copied ‘nested_a’ to environment
[13:37:21.707]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.682] - copied ‘a’ to environment
[13:37:21.707]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.682] - copied ‘plan_a’ to environment
[13:37:21.708]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.682] assign_globals() ... done
[13:37:21.708]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.683] plan(): Setting new future strategy stack:
[13:37:21.708]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.683] List of future strategies:
[13:37:21.683] 1. sequential:
[13:37:21.683]    - args: function (..., envir = parent.frame())
[13:37:21.683]    - tweaked: FALSE
[13:37:21.683]    - call: NULL
[13:37:21.708]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.683] plan(): nbrOfWorkers() = 1
[13:37:21.708]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.685] plan(): Setting new future strategy stack:
[13:37:21.708]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.685] List of future strategies:
[13:37:21.685] 1. multicore:
[13:37:21.685]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.685]    - tweaked: FALSE
[13:37:21.685]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.708]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.689] plan(): nbrOfWorkers() = 1
[13:37:21.709]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.689] SequentialFuture started (and completed)
[13:37:21.709]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.690] - Launch lazy future ... done
[13:37:21.709]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.690] run() for ‘SequentialFuture’ ... done
[13:37:21.709] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.716] getGlobalsAndPackages() ...
[13:37:21.716] Searching for globals...
[13:37:21.717] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.718] Searching for globals ... DONE
[13:37:21.718] Resolving globals: FALSE
[13:37:21.719] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.719] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.719] - globals: [1] ‘data’
[13:37:21.719] - packages: [1] ‘future’
[13:37:21.720] getGlobalsAndPackages() ... DONE
[13:37:21.720] run() for ‘Future’ ...
[13:37:21.720] - state: ‘created’
[13:37:21.720] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.725] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.725] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.725]   - Field: ‘label’
[13:37:21.725]   - Field: ‘local’
[13:37:21.725]   - Field: ‘owner’
[13:37:21.725]   - Field: ‘envir’
[13:37:21.725]   - Field: ‘workers’
[13:37:21.726]   - Field: ‘packages’
[13:37:21.726]   - Field: ‘gc’
[13:37:21.726]   - Field: ‘job’
[13:37:21.726]   - Field: ‘conditions’
[13:37:21.726]   - Field: ‘expr’
[13:37:21.726]   - Field: ‘uuid’
[13:37:21.726]   - Field: ‘seed’
[13:37:21.726]   - Field: ‘version’
[13:37:21.726]   - Field: ‘result’
[13:37:21.727]   - Field: ‘asynchronous’
[13:37:21.727]   - Field: ‘calls’
[13:37:21.727]   - Field: ‘globals’
[13:37:21.727]   - Field: ‘stdout’
[13:37:21.727]   - Field: ‘earlySignal’
[13:37:21.727]   - Field: ‘lazy’
[13:37:21.727]   - Field: ‘state’
[13:37:21.727] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.727] - Launch lazy future ...
[13:37:21.728] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.728] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.729] {
[13:37:21.729]     {
[13:37:21.729]         {
[13:37:21.729]             ...future.startTime <- base::Sys.time()
[13:37:21.729]             {
[13:37:21.729]                 {
[13:37:21.729]                   {
[13:37:21.729]                     {
[13:37:21.729]                       {
[13:37:21.729]                         base::local({
[13:37:21.729]                           has_future <- base::requireNamespace("future", 
[13:37:21.729]                             quietly = TRUE)
[13:37:21.729]                           if (has_future) {
[13:37:21.729]                             ns <- base::getNamespace("future")
[13:37:21.729]                             version <- ns[[".package"]][["version"]]
[13:37:21.729]                             if (is.null(version)) 
[13:37:21.729]                               version <- utils::packageVersion("future")
[13:37:21.729]                           }
[13:37:21.729]                           else {
[13:37:21.729]                             version <- NULL
[13:37:21.729]                           }
[13:37:21.729]                           if (!has_future || version < "1.8.0") {
[13:37:21.729]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.729]                               "", base::R.version$version.string), 
[13:37:21.729]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.729]                                 base::R.version$platform, 8 * 
[13:37:21.729]                                   base::.Machine$sizeof.pointer), 
[13:37:21.729]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.729]                                 "release", "version")], collapse = " "), 
[13:37:21.729]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.729]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.729]                               info)
[13:37:21.729]                             info <- base::paste(info, collapse = "; ")
[13:37:21.729]                             if (!has_future) {
[13:37:21.729]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.729]                                 info)
[13:37:21.729]                             }
[13:37:21.729]                             else {
[13:37:21.729]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.729]                                 info, version)
[13:37:21.729]                             }
[13:37:21.729]                             base::stop(msg)
[13:37:21.729]                           }
[13:37:21.729]                         })
[13:37:21.729]                       }
[13:37:21.729]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.729]                       base::options(mc.cores = 1L)
[13:37:21.729]                     }
[13:37:21.729]                     base::local({
[13:37:21.729]                       for (pkg in "future") {
[13:37:21.729]                         base::loadNamespace(pkg)
[13:37:21.729]                         base::library(pkg, character.only = TRUE)
[13:37:21.729]                       }
[13:37:21.729]                     })
[13:37:21.729]                   }
[13:37:21.729]                   ...future.strategy.old <- future::plan("list")
[13:37:21.729]                   options(future.plan = NULL)
[13:37:21.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.729]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:21.729]                     envir = parent.frame()) 
[13:37:21.729]                   {
[13:37:21.729]                     default_workers <- missing(workers)
[13:37:21.729]                     if (is.function(workers)) 
[13:37:21.729]                       workers <- workers()
[13:37:21.729]                     workers <- structure(as.integer(workers), 
[13:37:21.729]                       class = class(workers))
[13:37:21.729]                     stop_if_not(is.finite(workers), workers >= 
[13:37:21.729]                       1L)
[13:37:21.729]                     if ((workers == 1L && !inherits(workers, 
[13:37:21.729]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:21.729]                       if (default_workers) 
[13:37:21.729]                         supportsMulticore(warn = TRUE)
[13:37:21.729]                       return(sequential(..., envir = envir))
[13:37:21.729]                     }
[13:37:21.729]                     oopts <- options(mc.cores = workers)
[13:37:21.729]                     on.exit(options(oopts))
[13:37:21.729]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:21.729]                       envir = envir)
[13:37:21.729]                     if (!future$lazy) 
[13:37:21.729]                       future <- run(future)
[13:37:21.729]                     invisible(future)
[13:37:21.729]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.729]                 }
[13:37:21.729]                 ...future.workdir <- getwd()
[13:37:21.729]             }
[13:37:21.729]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.729]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.729]         }
[13:37:21.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.729]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.729]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.729]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.729]             base::names(...future.oldOptions))
[13:37:21.729]     }
[13:37:21.729]     if (FALSE) {
[13:37:21.729]     }
[13:37:21.729]     else {
[13:37:21.729]         if (TRUE) {
[13:37:21.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.729]                 open = "w")
[13:37:21.729]         }
[13:37:21.729]         else {
[13:37:21.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.729]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.729]         }
[13:37:21.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.729]             base::sink(type = "output", split = FALSE)
[13:37:21.729]             base::close(...future.stdout)
[13:37:21.729]         }, add = TRUE)
[13:37:21.729]     }
[13:37:21.729]     ...future.frame <- base::sys.nframe()
[13:37:21.729]     ...future.conditions <- base::list()
[13:37:21.729]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.729]     if (FALSE) {
[13:37:21.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.729]     }
[13:37:21.729]     ...future.result <- base::tryCatch({
[13:37:21.729]         base::withCallingHandlers({
[13:37:21.729]             ...future.value <- base::withVisible(base::local({
[13:37:21.729]                 withCallingHandlers({
[13:37:21.729]                   {
[13:37:21.729]                     value(future(subset(data, a == 2)))
[13:37:21.729]                   }
[13:37:21.729]                 }, immediateCondition = function(cond) {
[13:37:21.729]                   save_rds <- function (object, pathname, ...) 
[13:37:21.729]                   {
[13:37:21.729]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.729]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.729]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.729]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.729]                         fi_tmp[["mtime"]])
[13:37:21.729]                     }
[13:37:21.729]                     tryCatch({
[13:37:21.729]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.729]                     }, error = function(ex) {
[13:37:21.729]                       msg <- conditionMessage(ex)
[13:37:21.729]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.729]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.729]                         fi_tmp[["mtime"]], msg)
[13:37:21.729]                       ex$message <- msg
[13:37:21.729]                       stop(ex)
[13:37:21.729]                     })
[13:37:21.729]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.729]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.729]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.729]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.729]                       fi <- file.info(pathname)
[13:37:21.729]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.729]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.729]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.729]                         fi[["size"]], fi[["mtime"]])
[13:37:21.729]                       stop(msg)
[13:37:21.729]                     }
[13:37:21.729]                     invisible(pathname)
[13:37:21.729]                   }
[13:37:21.729]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.729]                     rootPath = tempdir()) 
[13:37:21.729]                   {
[13:37:21.729]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.729]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.729]                       tmpdir = path, fileext = ".rds")
[13:37:21.729]                     save_rds(obj, file)
[13:37:21.729]                   }
[13:37:21.729]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.729]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.729]                   {
[13:37:21.729]                     inherits <- base::inherits
[13:37:21.729]                     invokeRestart <- base::invokeRestart
[13:37:21.729]                     is.null <- base::is.null
[13:37:21.729]                     muffled <- FALSE
[13:37:21.729]                     if (inherits(cond, "message")) {
[13:37:21.729]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.729]                       if (muffled) 
[13:37:21.729]                         invokeRestart("muffleMessage")
[13:37:21.729]                     }
[13:37:21.729]                     else if (inherits(cond, "warning")) {
[13:37:21.729]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.729]                       if (muffled) 
[13:37:21.729]                         invokeRestart("muffleWarning")
[13:37:21.729]                     }
[13:37:21.729]                     else if (inherits(cond, "condition")) {
[13:37:21.729]                       if (!is.null(pattern)) {
[13:37:21.729]                         computeRestarts <- base::computeRestarts
[13:37:21.729]                         grepl <- base::grepl
[13:37:21.729]                         restarts <- computeRestarts(cond)
[13:37:21.729]                         for (restart in restarts) {
[13:37:21.729]                           name <- restart$name
[13:37:21.729]                           if (is.null(name)) 
[13:37:21.729]                             next
[13:37:21.729]                           if (!grepl(pattern, name)) 
[13:37:21.729]                             next
[13:37:21.729]                           invokeRestart(restart)
[13:37:21.729]                           muffled <- TRUE
[13:37:21.729]                           break
[13:37:21.729]                         }
[13:37:21.729]                       }
[13:37:21.729]                     }
[13:37:21.729]                     invisible(muffled)
[13:37:21.729]                   }
[13:37:21.729]                   muffleCondition(cond)
[13:37:21.729]                 })
[13:37:21.729]             }))
[13:37:21.729]             future::FutureResult(value = ...future.value$value, 
[13:37:21.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.729]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.729]                     ...future.globalenv.names))
[13:37:21.729]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.729]         }, condition = base::local({
[13:37:21.729]             c <- base::c
[13:37:21.729]             inherits <- base::inherits
[13:37:21.729]             invokeRestart <- base::invokeRestart
[13:37:21.729]             length <- base::length
[13:37:21.729]             list <- base::list
[13:37:21.729]             seq.int <- base::seq.int
[13:37:21.729]             signalCondition <- base::signalCondition
[13:37:21.729]             sys.calls <- base::sys.calls
[13:37:21.729]             `[[` <- base::`[[`
[13:37:21.729]             `+` <- base::`+`
[13:37:21.729]             `<<-` <- base::`<<-`
[13:37:21.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.729]                   3L)]
[13:37:21.729]             }
[13:37:21.729]             function(cond) {
[13:37:21.729]                 is_error <- inherits(cond, "error")
[13:37:21.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.729]                   NULL)
[13:37:21.729]                 if (is_error) {
[13:37:21.729]                   sessionInformation <- function() {
[13:37:21.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.729]                       search = base::search(), system = base::Sys.info())
[13:37:21.729]                   }
[13:37:21.729]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.729]                     cond$call), session = sessionInformation(), 
[13:37:21.729]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.729]                   signalCondition(cond)
[13:37:21.729]                 }
[13:37:21.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.729]                 "immediateCondition"))) {
[13:37:21.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.729]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.729]                   if (TRUE && !signal) {
[13:37:21.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.729]                     {
[13:37:21.729]                       inherits <- base::inherits
[13:37:21.729]                       invokeRestart <- base::invokeRestart
[13:37:21.729]                       is.null <- base::is.null
[13:37:21.729]                       muffled <- FALSE
[13:37:21.729]                       if (inherits(cond, "message")) {
[13:37:21.729]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.729]                         if (muffled) 
[13:37:21.729]                           invokeRestart("muffleMessage")
[13:37:21.729]                       }
[13:37:21.729]                       else if (inherits(cond, "warning")) {
[13:37:21.729]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.729]                         if (muffled) 
[13:37:21.729]                           invokeRestart("muffleWarning")
[13:37:21.729]                       }
[13:37:21.729]                       else if (inherits(cond, "condition")) {
[13:37:21.729]                         if (!is.null(pattern)) {
[13:37:21.729]                           computeRestarts <- base::computeRestarts
[13:37:21.729]                           grepl <- base::grepl
[13:37:21.729]                           restarts <- computeRestarts(cond)
[13:37:21.729]                           for (restart in restarts) {
[13:37:21.729]                             name <- restart$name
[13:37:21.729]                             if (is.null(name)) 
[13:37:21.729]                               next
[13:37:21.729]                             if (!grepl(pattern, name)) 
[13:37:21.729]                               next
[13:37:21.729]                             invokeRestart(restart)
[13:37:21.729]                             muffled <- TRUE
[13:37:21.729]                             break
[13:37:21.729]                           }
[13:37:21.729]                         }
[13:37:21.729]                       }
[13:37:21.729]                       invisible(muffled)
[13:37:21.729]                     }
[13:37:21.729]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.729]                   }
[13:37:21.729]                 }
[13:37:21.729]                 else {
[13:37:21.729]                   if (TRUE) {
[13:37:21.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.729]                     {
[13:37:21.729]                       inherits <- base::inherits
[13:37:21.729]                       invokeRestart <- base::invokeRestart
[13:37:21.729]                       is.null <- base::is.null
[13:37:21.729]                       muffled <- FALSE
[13:37:21.729]                       if (inherits(cond, "message")) {
[13:37:21.729]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.729]                         if (muffled) 
[13:37:21.729]                           invokeRestart("muffleMessage")
[13:37:21.729]                       }
[13:37:21.729]                       else if (inherits(cond, "warning")) {
[13:37:21.729]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.729]                         if (muffled) 
[13:37:21.729]                           invokeRestart("muffleWarning")
[13:37:21.729]                       }
[13:37:21.729]                       else if (inherits(cond, "condition")) {
[13:37:21.729]                         if (!is.null(pattern)) {
[13:37:21.729]                           computeRestarts <- base::computeRestarts
[13:37:21.729]                           grepl <- base::grepl
[13:37:21.729]                           restarts <- computeRestarts(cond)
[13:37:21.729]                           for (restart in restarts) {
[13:37:21.729]                             name <- restart$name
[13:37:21.729]                             if (is.null(name)) 
[13:37:21.729]                               next
[13:37:21.729]                             if (!grepl(pattern, name)) 
[13:37:21.729]                               next
[13:37:21.729]                             invokeRestart(restart)
[13:37:21.729]                             muffled <- TRUE
[13:37:21.729]                             break
[13:37:21.729]                           }
[13:37:21.729]                         }
[13:37:21.729]                       }
[13:37:21.729]                       invisible(muffled)
[13:37:21.729]                     }
[13:37:21.729]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.729]                   }
[13:37:21.729]                 }
[13:37:21.729]             }
[13:37:21.729]         }))
[13:37:21.729]     }, error = function(ex) {
[13:37:21.729]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.729]                 ...future.rng), started = ...future.startTime, 
[13:37:21.729]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.729]             version = "1.8"), class = "FutureResult")
[13:37:21.729]     }, finally = {
[13:37:21.729]         if (!identical(...future.workdir, getwd())) 
[13:37:21.729]             setwd(...future.workdir)
[13:37:21.729]         {
[13:37:21.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.729]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.729]             }
[13:37:21.729]             base::options(...future.oldOptions)
[13:37:21.729]             if (.Platform$OS.type == "windows") {
[13:37:21.729]                 old_names <- names(...future.oldEnvVars)
[13:37:21.729]                 envs <- base::Sys.getenv()
[13:37:21.729]                 names <- names(envs)
[13:37:21.729]                 common <- intersect(names, old_names)
[13:37:21.729]                 added <- setdiff(names, old_names)
[13:37:21.729]                 removed <- setdiff(old_names, names)
[13:37:21.729]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.729]                   envs[common]]
[13:37:21.729]                 NAMES <- toupper(changed)
[13:37:21.729]                 args <- list()
[13:37:21.729]                 for (kk in seq_along(NAMES)) {
[13:37:21.729]                   name <- changed[[kk]]
[13:37:21.729]                   NAME <- NAMES[[kk]]
[13:37:21.729]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.729]                     next
[13:37:21.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.729]                 }
[13:37:21.729]                 NAMES <- toupper(added)
[13:37:21.729]                 for (kk in seq_along(NAMES)) {
[13:37:21.729]                   name <- added[[kk]]
[13:37:21.729]                   NAME <- NAMES[[kk]]
[13:37:21.729]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.729]                     next
[13:37:21.729]                   args[[name]] <- ""
[13:37:21.729]                 }
[13:37:21.729]                 NAMES <- toupper(removed)
[13:37:21.729]                 for (kk in seq_along(NAMES)) {
[13:37:21.729]                   name <- removed[[kk]]
[13:37:21.729]                   NAME <- NAMES[[kk]]
[13:37:21.729]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.729]                     next
[13:37:21.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.729]                 }
[13:37:21.729]                 if (length(args) > 0) 
[13:37:21.729]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.729]             }
[13:37:21.729]             else {
[13:37:21.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.729]             }
[13:37:21.729]             {
[13:37:21.729]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.729]                   0L) {
[13:37:21.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.729]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.729]                   base::options(opts)
[13:37:21.729]                 }
[13:37:21.729]                 {
[13:37:21.729]                   {
[13:37:21.729]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.729]                     NULL
[13:37:21.729]                   }
[13:37:21.729]                   options(future.plan = NULL)
[13:37:21.729]                   if (is.na(NA_character_)) 
[13:37:21.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.729]                     .init = FALSE)
[13:37:21.729]                 }
[13:37:21.729]             }
[13:37:21.729]         }
[13:37:21.729]     })
[13:37:21.729]     if (TRUE) {
[13:37:21.729]         base::sink(type = "output", split = FALSE)
[13:37:21.729]         if (TRUE) {
[13:37:21.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.729]         }
[13:37:21.729]         else {
[13:37:21.729]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.729]         }
[13:37:21.729]         base::close(...future.stdout)
[13:37:21.729]         ...future.stdout <- NULL
[13:37:21.729]     }
[13:37:21.729]     ...future.result$conditions <- ...future.conditions
[13:37:21.729]     ...future.result$finished <- base::Sys.time()
[13:37:21.729]     ...future.result
[13:37:21.729] }
[13:37:21.731] assign_globals() ...
[13:37:21.731] List of 1
[13:37:21.731]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.731]   ..$ a: int [1:3] 1 2 3
[13:37:21.731]   ..$ b: int [1:3] 3 2 1
[13:37:21.731]  - attr(*, "where")=List of 1
[13:37:21.731]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.731]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.731]  - attr(*, "resolved")= logi FALSE
[13:37:21.731]  - attr(*, "total_size")= num 128
[13:37:21.731]  - attr(*, "already-done")= logi TRUE
[13:37:21.735] - copied ‘data’ to environment
[13:37:21.735] assign_globals() ... done
[13:37:21.735] requestCore(): workers = 2
[13:37:21.738] MulticoreFuture started
[13:37:21.739] - Launch lazy future ... done
[13:37:21.739] run() for ‘MulticoreFuture’ ... done
[13:37:21.739] result() for MulticoreFuture ...
[13:37:21.740] plan(): Setting new future strategy stack:
[13:37:21.740] List of future strategies:
[13:37:21.740] 1. multicore:
[13:37:21.740]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.740]    - tweaked: FALSE
[13:37:21.740]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.746] plan(): nbrOfWorkers() = 1
[13:37:21.782] plan(): Setting new future strategy stack:
[13:37:21.782] List of future strategies:
[13:37:21.782] 1. multicore:
[13:37:21.782]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.782]    - tweaked: FALSE
[13:37:21.782]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.782] 2. multicore:
[13:37:21.782]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.782]    - tweaked: FALSE
[13:37:21.782]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.786] plan(): nbrOfWorkers() = 2
[13:37:21.787] result() for MulticoreFuture ...
[13:37:21.788] result() for MulticoreFuture ... done
[13:37:21.788] signalConditions() ...
[13:37:21.788]  - include = ‘immediateCondition’
[13:37:21.788]  - exclude = 
[13:37:21.788]  - resignal = FALSE
[13:37:21.788]  - Number of conditions: 52
[13:37:21.788] signalConditions() ... done
[13:37:21.788] result() for MulticoreFuture ... done
[13:37:21.789] result() for MulticoreFuture ...
[13:37:21.789] result() for MulticoreFuture ... done
[13:37:21.789] signalConditions() ...
[13:37:21.789]  - include = ‘immediateCondition’
[13:37:21.789]  - exclude = 
[13:37:21.789]  - resignal = FALSE
[13:37:21.789]  - Number of conditions: 52
[13:37:21.789] signalConditions() ... done
[13:37:21.790] Future state: ‘finished’
[13:37:21.790] result() for MulticoreFuture ...
[13:37:21.790] result() for MulticoreFuture ... done
[13:37:21.790] signalConditions() ...
[13:37:21.790]  - include = ‘condition’
[13:37:21.790]  - exclude = ‘immediateCondition’
[13:37:21.790]  - resignal = TRUE
[13:37:21.790]  - Number of conditions: 52
[13:37:21.790]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.747] getGlobalsAndPackages() ...
[13:37:21.791]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.747] Searching for globals...
[13:37:21.791]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.749] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.791]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.749] Searching for globals ... DONE
[13:37:21.791]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.749] Resolving globals: FALSE
[13:37:21.791]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.750] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.791]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.751] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.792]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.751] - globals: [1] ‘data’
[13:37:21.792]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.751] 
[13:37:21.792]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.751] getGlobalsAndPackages() ... DONE
[13:37:21.792]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.752] run() for ‘Future’ ...
[13:37:21.792]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.752] - state: ‘created’
[13:37:21.792]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.753] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.793]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.793]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.793]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757]   - Field: ‘label’
[13:37:21.793]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757]   - Field: ‘local’
[13:37:21.793]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757]   - Field: ‘owner’
[13:37:21.793]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.757]   - Field: ‘envir’
[13:37:21.794]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘packages’
[13:37:21.794]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘gc’
[13:37:21.794]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘conditions’
[13:37:21.794]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘expr’
[13:37:21.794]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘uuid’
[13:37:21.794]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.758]   - Field: ‘seed’
[13:37:21.795]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘version’
[13:37:21.795]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘result’
[13:37:21.795]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘asynchronous’
[13:37:21.795]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘calls’
[13:37:21.795]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘globals’
[13:37:21.795]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘stdout’
[13:37:21.795]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.759]   - Field: ‘earlySignal’
[13:37:21.796]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.760]   - Field: ‘lazy’
[13:37:21.796]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.760]   - Field: ‘state’
[13:37:21.796]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.760] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.796]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.760] - Launch lazy future ...
[13:37:21.796]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.760] Packages needed by the future expression (n = 0): <none>
[13:37:21.796]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.761] Packages needed by future strategies (n = 0): <none>
[13:37:21.797]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.761] {
[13:37:21.761]     {
[13:37:21.761]         {
[13:37:21.761]             ...future.startTime <- base::Sys.time()
[13:37:21.761]             {
[13:37:21.761]                 {
[13:37:21.761]                   {
[13:37:21.761]                     base::local({
[13:37:21.761]                       has_future <- base::requireNamespace("future", 
[13:37:21.761]                         quietly = TRUE)
[13:37:21.761]                       if (has_future) {
[13:37:21.761]                         ns <- base::getNamespace("future")
[13:37:21.761]                         version <- ns[[".package"]][["version"]]
[13:37:21.761]                         if (is.null(version)) 
[13:37:21.761]                           version <- utils::packageVersion("future")
[13:37:21.761]                       }
[13:37:21.761]                       else {
[13:37:21.761]                         version <- NULL
[13:37:21.761]                       }
[13:37:21.761]                       if (!has_future || version < "1.8.0") {
[13:37:21.761]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.761]                           "", base::R.version$version.string), 
[13:37:21.761]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.761]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.761]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.761]                             "release", "version")], collapse = " "), 
[13:37:21.761]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.761]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.761]                           info)
[13:37:21.761]                         info <- base::paste(info, collapse = "; ")
[13:37:21.761]                         if (!has_future) {
[13:37:21.761]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.761]                             info)
[13:37:21.761]                         }
[13:37:21.761]                         else {
[13:37:21.761]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.761]                             info, version)
[13:37:21.761]                         }
[13:37:21.761]                         base::stop(msg)
[13:37:21.761]                       }
[13:37:21.761]                     })
[13:37:21.761]                   }
[13:37:21.761]                   ...future.strategy.old <- future::plan("list")
[13:37:21.761]                   options(future.plan = NULL)
[13:37:21.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.761]                 }
[13:37:21.761]                 ...future.workdir <- getwd()
[13:37:21.761]             }
[13:37:21.761]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.761]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.761]         }
[13:37:21.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.761]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.761]             base::names(...future.oldOptions))
[13:37:21.761]     }
[13:37:21.761]     if (FALSE) {
[13:37:21.761]     }
[13:37:21.761]     else {
[13:37:21.761]         if (TRUE) {
[13:37:21.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.761]                 open = "w")
[13:37:21.761]         }
[13:37:21.761]         else {
[13:37:21.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.761]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.761]         }
[13:37:21.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.761]             base::sink(type = "output", split = FALSE)
[13:37:21.761]             base::close(...future.stdout)
[13:37:21.761]         }, add = TRUE)
[13:37:21.761]     }
[13:37:21.761]     ...future.frame <- base::sys.nframe()
[13:37:21.761]     ...future.conditions <- base::list()
[13:37:21.761]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.761]     if (FALSE) {
[13:37:21.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.761]     }
[13:37:21.761]     ...future.result <- base::tryCatch({
[13:37:21.761]         base::withCallingHandlers({
[13:37:21.761]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:37:21.761]                 a == 2)))
[13:37:21.761]             future::FutureResult(value = ...future.value$value, 
[13:37:21.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.761]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.761]                     ...future.globalenv.names))
[13:37:21.761]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.761]         }, condition = base::local({
[13:37:21.761]             c <- base::c
[13:37:21.761]             inherits <- base::inherits
[13:37:21.761]             invokeRestart <- base::invokeRestart
[13:37:21.761]             length <- base::length
[13:37:21.761]             list <- base::list
[13:37:21.761]             seq.int <- base::seq.int
[13:37:21.761]             signalCondition <- base::signalCondition
[13:37:21.761]             sys.calls <- base::sys.calls
[13:37:21.761]             `[[` <- base::`[[`
[13:37:21.761]             `+` <- base::`+`
[13:37:21.761]             `<<-` <- base::`<<-`
[13:37:21.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.761]                   3L)]
[13:37:21.761]             }
[13:37:21.761]             function(cond) {
[13:37:21.761]                 is_error <- inherits(cond, "error")
[13:37:21.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.761]                   NULL)
[13:37:21.761]                 if (is_error) {
[13:37:21.761]                   sessionInformation <- function() {
[13:37:21.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.761]                       search = base::search(), system = base::Sys.info())
[13:37:21.761]                   }
[13:37:21.761]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.761]                     cond$call), session = sessionInformation(), 
[13:37:21.761]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.761]                   signalCondition(cond)
[13:37:21.761]                 }
[13:37:21.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.761]                 "immediateCondition"))) {
[13:37:21.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.761]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.761]                   if (TRUE && !signal) {
[13:37:21.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.761]                     {
[13:37:21.761]                       inherits <- base::inherits
[13:37:21.761]                       invokeRestart <- base::invokeRestart
[13:37:21.761]                       is.null <- base::is.null
[13:37:21.761]                       muffled <- FALSE
[13:37:21.761]                       if (inherits(cond, "message")) {
[13:37:21.761]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.761]                         if (muffled) 
[13:37:21.761]                           invokeRestart("muffleMessage")
[13:37:21.761]                       }
[13:37:21.761]                       else if (inherits(cond, "warning")) {
[13:37:21.761]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.761]                         if (muffled) 
[13:37:21.761]                           invokeRestart("muffleWarning")
[13:37:21.761]                       }
[13:37:21.761]                       else if (inherits(cond, "condition")) {
[13:37:21.761]                         if (!is.null(pattern)) {
[13:37:21.761]                           computeRestarts <- base::computeRestarts
[13:37:21.761]                           grepl <- base::grepl
[13:37:21.761]                           restarts <- computeRestarts(cond)
[13:37:21.761]                           for (restart in restarts) {
[13:37:21.761]                             name <- restart$name
[13:37:21.761]                             if (is.null(name)) 
[13:37:21.761]                               next
[13:37:21.761]                             if (!grepl(pattern, name)) 
[13:37:21.761]                               next
[13:37:21.761]                             invokeRestart(restart)
[13:37:21.761]                             muffled <- TRUE
[13:37:21.761]                             break
[13:37:21.761]                           }
[13:37:21.761]                         }
[13:37:21.761]                       }
[13:37:21.761]                       invisible(muffled)
[13:37:21.761]                     }
[13:37:21.761]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.761]                   }
[13:37:21.761]                 }
[13:37:21.761]                 else {
[13:37:21.761]                   if (TRUE) {
[13:37:21.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.761]                     {
[13:37:21.761]                       inherits <- base::inherits
[13:37:21.761]                       invokeRestart <- base::invokeRestart
[13:37:21.761]                       is.null <- base::is.null
[13:37:21.761]                       muffled <- FALSE
[13:37:21.761]                       if (inherits(cond, "message")) {
[13:37:21.761]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.761]                         if (muffled) 
[13:37:21.761]                           invokeRestart("muffleMessage")
[13:37:21.761]                       }
[13:37:21.761]                       else if (inherits(cond, "warning")) {
[13:37:21.761]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.761]                         if (muffled) 
[13:37:21.761]                           invokeRestart("muffleWarning")
[13:37:21.761]                       }
[13:37:21.761]                       else if (inherits(cond, "condition")) {
[13:37:21.761]                         if (!is.null(pattern)) {
[13:37:21.761]                           computeRestarts <- base::computeRestarts
[13:37:21.761]                           grepl <- base::grepl
[13:37:21.761]                           restarts <- computeRestarts(cond)
[13:37:21.761]                           for (restart in restarts) {
[13:37:21.761]                             name <- restart$name
[13:37:21.761]                             if (is.null(name)) 
[13:37:21.761]                               next
[13:37:21.761]                             if (!grepl(pattern, name)) 
[13:37:21.761]                               next
[13:37:21.761]                             invokeRestart(restart)
[13:37:21.761]                             muffled <- TRUE
[13:37:21.761]                             break
[13:37:21.761]                           }
[13:37:21.761]                         }
[13:37:21.761]                       }
[13:37:21.761]                       invisible(muffled)
[13:37:21.761]                     }
[13:37:21.761]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.761]                   }
[13:37:21.761]                 }
[13:37:21.761]             }
[13:37:21.761]         }))
[13:37:21.761]     }, error = function(ex) {
[13:37:21.761]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.761]                 ...future.rng), started = ...future.startTime, 
[13:37:21.761]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.761]             version = "1.8"), class = "FutureResult")
[13:37:21.761]     }, finally = {
[13:37:21.761]         if (!identical(...future.workdir, getwd())) 
[13:37:21.761]             setwd(...future.workdir)
[13:37:21.761]         {
[13:37:21.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.761]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.761]             }
[13:37:21.761]             base::options(...future.oldOptions)
[13:37:21.761]             if (.Platform$OS.type == "windows") {
[13:37:21.761]                 old_names <- names(...future.oldEnvVars)
[13:37:21.761]                 envs <- base::Sys.getenv()
[13:37:21.761]                 names <- names(envs)
[13:37:21.761]                 common <- intersect(names, old_names)
[13:37:21.761]                 added <- setdiff(names, old_names)
[13:37:21.761]                 removed <- setdiff(old_names, names)
[13:37:21.761]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.761]                   envs[common]]
[13:37:21.761]                 NAMES <- toupper(changed)
[13:37:21.761]                 args <- list()
[13:37:21.761]                 for (kk in seq_along(NAMES)) {
[13:37:21.761]                   name <- changed[[kk]]
[13:37:21.761]                   NAME <- NAMES[[kk]]
[13:37:21.761]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.761]                     next
[13:37:21.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.761]                 }
[13:37:21.761]                 NAMES <- toupper(added)
[13:37:21.761]                 for (kk in seq_along(NAMES)) {
[13:37:21.761]                   name <- added[[kk]]
[13:37:21.761]                   NAME <- NAMES[[kk]]
[13:37:21.761]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.761]                     next
[13:37:21.761]                   args[[name]] <- ""
[13:37:21.761]                 }
[13:37:21.761]                 NAMES <- toupper(removed)
[13:37:21.761]                 for (kk in seq_along(NAMES)) {
[13:37:21.761]                   name <- removed[[kk]]
[13:37:21.761]                   NAME <- NAMES[[kk]]
[13:37:21.761]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.761]                     next
[13:37:21.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.761]                 }
[13:37:21.761]                 if (length(args) > 0) 
[13:37:21.761]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.761]             }
[13:37:21.761]             else {
[13:37:21.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.761]             }
[13:37:21.761]             {
[13:37:21.761]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.761]                   0L) {
[13:37:21.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.761]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.761]                   base::options(opts)
[13:37:21.761]                 }
[13:37:21.761]                 {
[13:37:21.761]                   {
[13:37:21.761]                     NULL
[13:37:21.761]                     RNGkind("Mersenne-Twister")
[13:37:21.761]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.761]                       inherits = FALSE)
[13:37:21.761]                   }
[13:37:21.761]                   options(future.plan = NULL)
[13:37:21.761]                   if (is.na(NA_character_)) 
[13:37:21.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.761]                     .init = FALSE)
[13:37:21.761]                 }
[13:37:21.761]             }
[13:37:21.761]         }
[13:37:21.761]     })
[13:37:21.761]     if (TRUE) {
[13:37:21.761]         base::sink(type = "output", split = FALSE)
[13:37:21.761]         if (TRUE) {
[13:37:21.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.761]         }
[13:37:21.761]         else {
[13:37:21.761]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.761]         }
[13:37:21.761]         base::close(...future.stdout)
[13:37:21.761]         ...future.stdout <- NULL
[13:37:21.761]     }
[13:37:21.761]     ...future.result$conditions <- ...future.conditions
[13:37:21.761]     ...future.result$finished <- base::Sys.time()
[13:37:21.761]     ...future.result
[13:37:21.761] }
[13:37:21.797]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.764] assign_globals() ...
[13:37:21.797]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.764] List of 1
[13:37:21.764]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.764]   ..$ a: int [1:3] 1 2 3
[13:37:21.764]   ..$ b: int [1:3] 3 2 1
[13:37:21.764]  - attr(*, "where")=List of 1
[13:37:21.764]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.764]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.764]  - attr(*, "resolved")= logi FALSE
[13:37:21.764]  - attr(*, "total_size")= num 128
[13:37:21.764]  - attr(*, "already-done")= logi TRUE
[13:37:21.797]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.774] - copied ‘data’ to environment
[13:37:21.797]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.774] assign_globals() ... done
[13:37:21.797]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.774] plan(): Setting new future strategy stack:
[13:37:21.798]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.775] List of future strategies:
[13:37:21.775] 1. sequential:
[13:37:21.775]    - args: function (..., envir = parent.frame())
[13:37:21.775]    - tweaked: FALSE
[13:37:21.775]    - call: NULL
[13:37:21.798]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.775] plan(): nbrOfWorkers() = 1
[13:37:21.798]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.776] plan(): Setting new future strategy stack:
[13:37:21.798]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.777] List of future strategies:
[13:37:21.777] 1. multicore:
[13:37:21.777]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.777]    - tweaked: FALSE
[13:37:21.777]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.798]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.781] plan(): nbrOfWorkers() = 1
[13:37:21.798]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.781] SequentialFuture started (and completed)
[13:37:21.798]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.781] - Launch lazy future ... done
[13:37:21.799]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.781] run() for ‘SequentialFuture’ ... done
[13:37:21.799] signalConditions() ... done
- plan(list('multicore', 'multicore')) ... DONE
- plan(list('multicore', 'multisession')) ...
[13:37:21.799] plan(): Setting new future strategy stack:
[13:37:21.799] List of future strategies:
[13:37:21.799] 1. multicore:
[13:37:21.799]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.799]    - tweaked: FALSE
[13:37:21.799]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.799] 2. multisession:
[13:37:21.799]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.799]    - tweaked: FALSE
[13:37:21.799]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.804] plan(): nbrOfWorkers() = 2
[13:37:21.805] getGlobalsAndPackages() ...
[13:37:21.805] Searching for globals...
[13:37:21.828] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:21.828] Searching for globals ... DONE
[13:37:21.829] Resolving globals: FALSE
[13:37:21.830] The total size of the 2 globals is 90.64 KiB (92816 bytes)
[13:37:21.830] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.64 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.52 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:21.831] - globals: [2] ‘nested’, ‘strategy2’
[13:37:21.831] - packages: [1] ‘future’
[13:37:21.831] getGlobalsAndPackages() ... DONE
[13:37:21.831] run() for ‘Future’ ...
[13:37:21.831] - state: ‘created’
[13:37:21.831] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.835] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.835] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.836]   - Field: ‘label’
[13:37:21.836]   - Field: ‘local’
[13:37:21.836]   - Field: ‘owner’
[13:37:21.836]   - Field: ‘envir’
[13:37:21.836]   - Field: ‘workers’
[13:37:21.836]   - Field: ‘packages’
[13:37:21.836]   - Field: ‘gc’
[13:37:21.836]   - Field: ‘job’
[13:37:21.836]   - Field: ‘conditions’
[13:37:21.837]   - Field: ‘expr’
[13:37:21.837]   - Field: ‘uuid’
[13:37:21.837]   - Field: ‘seed’
[13:37:21.837]   - Field: ‘version’
[13:37:21.837]   - Field: ‘result’
[13:37:21.837]   - Field: ‘asynchronous’
[13:37:21.837]   - Field: ‘calls’
[13:37:21.837]   - Field: ‘globals’
[13:37:21.837]   - Field: ‘stdout’
[13:37:21.838]   - Field: ‘earlySignal’
[13:37:21.838]   - Field: ‘lazy’
[13:37:21.838]   - Field: ‘state’
[13:37:21.838] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.838] - Launch lazy future ...
[13:37:21.838] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.838] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.839] {
[13:37:21.839]     {
[13:37:21.839]         {
[13:37:21.839]             ...future.startTime <- base::Sys.time()
[13:37:21.839]             {
[13:37:21.839]                 {
[13:37:21.839]                   {
[13:37:21.839]                     {
[13:37:21.839]                       {
[13:37:21.839]                         base::local({
[13:37:21.839]                           has_future <- base::requireNamespace("future", 
[13:37:21.839]                             quietly = TRUE)
[13:37:21.839]                           if (has_future) {
[13:37:21.839]                             ns <- base::getNamespace("future")
[13:37:21.839]                             version <- ns[[".package"]][["version"]]
[13:37:21.839]                             if (is.null(version)) 
[13:37:21.839]                               version <- utils::packageVersion("future")
[13:37:21.839]                           }
[13:37:21.839]                           else {
[13:37:21.839]                             version <- NULL
[13:37:21.839]                           }
[13:37:21.839]                           if (!has_future || version < "1.8.0") {
[13:37:21.839]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.839]                               "", base::R.version$version.string), 
[13:37:21.839]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.839]                                 base::R.version$platform, 8 * 
[13:37:21.839]                                   base::.Machine$sizeof.pointer), 
[13:37:21.839]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.839]                                 "release", "version")], collapse = " "), 
[13:37:21.839]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.839]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.839]                               info)
[13:37:21.839]                             info <- base::paste(info, collapse = "; ")
[13:37:21.839]                             if (!has_future) {
[13:37:21.839]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.839]                                 info)
[13:37:21.839]                             }
[13:37:21.839]                             else {
[13:37:21.839]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.839]                                 info, version)
[13:37:21.839]                             }
[13:37:21.839]                             base::stop(msg)
[13:37:21.839]                           }
[13:37:21.839]                         })
[13:37:21.839]                       }
[13:37:21.839]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.839]                       base::options(mc.cores = 1L)
[13:37:21.839]                     }
[13:37:21.839]                     base::local({
[13:37:21.839]                       for (pkg in "future") {
[13:37:21.839]                         base::loadNamespace(pkg)
[13:37:21.839]                         base::library(pkg, character.only = TRUE)
[13:37:21.839]                       }
[13:37:21.839]                     })
[13:37:21.839]                   }
[13:37:21.839]                   ...future.strategy.old <- future::plan("list")
[13:37:21.839]                   options(future.plan = NULL)
[13:37:21.839]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.839]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:21.839]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.839]                     envir = parent.frame()) 
[13:37:21.839]                   {
[13:37:21.839]                     if (is.function(workers)) 
[13:37:21.839]                       workers <- workers()
[13:37:21.839]                     workers <- structure(as.integer(workers), 
[13:37:21.839]                       class = class(workers))
[13:37:21.839]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:21.839]                       workers >= 1)
[13:37:21.839]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:21.839]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:21.839]                     }
[13:37:21.839]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:21.839]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:21.839]                       envir = envir)
[13:37:21.839]                     if (!future$lazy) 
[13:37:21.839]                       future <- run(future)
[13:37:21.839]                     invisible(future)
[13:37:21.839]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.839]                 }
[13:37:21.839]                 ...future.workdir <- getwd()
[13:37:21.839]             }
[13:37:21.839]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.839]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.839]         }
[13:37:21.839]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.839]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.839]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.839]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.839]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.839]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.839]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.839]             base::names(...future.oldOptions))
[13:37:21.839]     }
[13:37:21.839]     if (FALSE) {
[13:37:21.839]     }
[13:37:21.839]     else {
[13:37:21.839]         if (TRUE) {
[13:37:21.839]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.839]                 open = "w")
[13:37:21.839]         }
[13:37:21.839]         else {
[13:37:21.839]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.839]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.839]         }
[13:37:21.839]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.839]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.839]             base::sink(type = "output", split = FALSE)
[13:37:21.839]             base::close(...future.stdout)
[13:37:21.839]         }, add = TRUE)
[13:37:21.839]     }
[13:37:21.839]     ...future.frame <- base::sys.nframe()
[13:37:21.839]     ...future.conditions <- base::list()
[13:37:21.839]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.839]     if (FALSE) {
[13:37:21.839]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.839]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.839]     }
[13:37:21.839]     ...future.result <- base::tryCatch({
[13:37:21.839]         base::withCallingHandlers({
[13:37:21.839]             ...future.value <- base::withVisible(base::local({
[13:37:21.839]                 withCallingHandlers({
[13:37:21.839]                   {
[13:37:21.839]                     a <- 1L
[13:37:21.839]                     plan_a <- unclass(future::plan("list"))
[13:37:21.839]                     nested_a <- nested[-1]
[13:37:21.839]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:21.839]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.839]                       strategy2))
[13:37:21.839]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:21.839]                       "init") <- NULL
[13:37:21.839]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:21.839]                       "init") <- NULL
[13:37:21.839]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:21.839]                     y %<-% {
[13:37:21.839]                       b <- 2L
[13:37:21.839]                       plan_b <- future::plan("list")
[13:37:21.839]                       nested_b <- nested_a[-1]
[13:37:21.839]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.839]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:21.839]                         inherits(future::plan("next"), "sequential"))
[13:37:21.839]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.839]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.839]                     }
[13:37:21.839]                     y
[13:37:21.839]                   }
[13:37:21.839]                 }, immediateCondition = function(cond) {
[13:37:21.839]                   save_rds <- function (object, pathname, ...) 
[13:37:21.839]                   {
[13:37:21.839]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.839]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.839]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.839]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.839]                         fi_tmp[["mtime"]])
[13:37:21.839]                     }
[13:37:21.839]                     tryCatch({
[13:37:21.839]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.839]                     }, error = function(ex) {
[13:37:21.839]                       msg <- conditionMessage(ex)
[13:37:21.839]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.839]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.839]                         fi_tmp[["mtime"]], msg)
[13:37:21.839]                       ex$message <- msg
[13:37:21.839]                       stop(ex)
[13:37:21.839]                     })
[13:37:21.839]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.839]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.839]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.839]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.839]                       fi <- file.info(pathname)
[13:37:21.839]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.839]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.839]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.839]                         fi[["size"]], fi[["mtime"]])
[13:37:21.839]                       stop(msg)
[13:37:21.839]                     }
[13:37:21.839]                     invisible(pathname)
[13:37:21.839]                   }
[13:37:21.839]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.839]                     rootPath = tempdir()) 
[13:37:21.839]                   {
[13:37:21.839]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.839]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.839]                       tmpdir = path, fileext = ".rds")
[13:37:21.839]                     save_rds(obj, file)
[13:37:21.839]                   }
[13:37:21.839]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.839]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.839]                   {
[13:37:21.839]                     inherits <- base::inherits
[13:37:21.839]                     invokeRestart <- base::invokeRestart
[13:37:21.839]                     is.null <- base::is.null
[13:37:21.839]                     muffled <- FALSE
[13:37:21.839]                     if (inherits(cond, "message")) {
[13:37:21.839]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.839]                       if (muffled) 
[13:37:21.839]                         invokeRestart("muffleMessage")
[13:37:21.839]                     }
[13:37:21.839]                     else if (inherits(cond, "warning")) {
[13:37:21.839]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.839]                       if (muffled) 
[13:37:21.839]                         invokeRestart("muffleWarning")
[13:37:21.839]                     }
[13:37:21.839]                     else if (inherits(cond, "condition")) {
[13:37:21.839]                       if (!is.null(pattern)) {
[13:37:21.839]                         computeRestarts <- base::computeRestarts
[13:37:21.839]                         grepl <- base::grepl
[13:37:21.839]                         restarts <- computeRestarts(cond)
[13:37:21.839]                         for (restart in restarts) {
[13:37:21.839]                           name <- restart$name
[13:37:21.839]                           if (is.null(name)) 
[13:37:21.839]                             next
[13:37:21.839]                           if (!grepl(pattern, name)) 
[13:37:21.839]                             next
[13:37:21.839]                           invokeRestart(restart)
[13:37:21.839]                           muffled <- TRUE
[13:37:21.839]                           break
[13:37:21.839]                         }
[13:37:21.839]                       }
[13:37:21.839]                     }
[13:37:21.839]                     invisible(muffled)
[13:37:21.839]                   }
[13:37:21.839]                   muffleCondition(cond)
[13:37:21.839]                 })
[13:37:21.839]             }))
[13:37:21.839]             future::FutureResult(value = ...future.value$value, 
[13:37:21.839]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.839]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.839]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.839]                     ...future.globalenv.names))
[13:37:21.839]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.839]         }, condition = base::local({
[13:37:21.839]             c <- base::c
[13:37:21.839]             inherits <- base::inherits
[13:37:21.839]             invokeRestart <- base::invokeRestart
[13:37:21.839]             length <- base::length
[13:37:21.839]             list <- base::list
[13:37:21.839]             seq.int <- base::seq.int
[13:37:21.839]             signalCondition <- base::signalCondition
[13:37:21.839]             sys.calls <- base::sys.calls
[13:37:21.839]             `[[` <- base::`[[`
[13:37:21.839]             `+` <- base::`+`
[13:37:21.839]             `<<-` <- base::`<<-`
[13:37:21.839]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.839]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.839]                   3L)]
[13:37:21.839]             }
[13:37:21.839]             function(cond) {
[13:37:21.839]                 is_error <- inherits(cond, "error")
[13:37:21.839]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.839]                   NULL)
[13:37:21.839]                 if (is_error) {
[13:37:21.839]                   sessionInformation <- function() {
[13:37:21.839]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.839]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.839]                       search = base::search(), system = base::Sys.info())
[13:37:21.839]                   }
[13:37:21.839]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.839]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.839]                     cond$call), session = sessionInformation(), 
[13:37:21.839]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.839]                   signalCondition(cond)
[13:37:21.839]                 }
[13:37:21.839]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.839]                 "immediateCondition"))) {
[13:37:21.839]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.839]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.839]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.839]                   if (TRUE && !signal) {
[13:37:21.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.839]                     {
[13:37:21.839]                       inherits <- base::inherits
[13:37:21.839]                       invokeRestart <- base::invokeRestart
[13:37:21.839]                       is.null <- base::is.null
[13:37:21.839]                       muffled <- FALSE
[13:37:21.839]                       if (inherits(cond, "message")) {
[13:37:21.839]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.839]                         if (muffled) 
[13:37:21.839]                           invokeRestart("muffleMessage")
[13:37:21.839]                       }
[13:37:21.839]                       else if (inherits(cond, "warning")) {
[13:37:21.839]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.839]                         if (muffled) 
[13:37:21.839]                           invokeRestart("muffleWarning")
[13:37:21.839]                       }
[13:37:21.839]                       else if (inherits(cond, "condition")) {
[13:37:21.839]                         if (!is.null(pattern)) {
[13:37:21.839]                           computeRestarts <- base::computeRestarts
[13:37:21.839]                           grepl <- base::grepl
[13:37:21.839]                           restarts <- computeRestarts(cond)
[13:37:21.839]                           for (restart in restarts) {
[13:37:21.839]                             name <- restart$name
[13:37:21.839]                             if (is.null(name)) 
[13:37:21.839]                               next
[13:37:21.839]                             if (!grepl(pattern, name)) 
[13:37:21.839]                               next
[13:37:21.839]                             invokeRestart(restart)
[13:37:21.839]                             muffled <- TRUE
[13:37:21.839]                             break
[13:37:21.839]                           }
[13:37:21.839]                         }
[13:37:21.839]                       }
[13:37:21.839]                       invisible(muffled)
[13:37:21.839]                     }
[13:37:21.839]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.839]                   }
[13:37:21.839]                 }
[13:37:21.839]                 else {
[13:37:21.839]                   if (TRUE) {
[13:37:21.839]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.839]                     {
[13:37:21.839]                       inherits <- base::inherits
[13:37:21.839]                       invokeRestart <- base::invokeRestart
[13:37:21.839]                       is.null <- base::is.null
[13:37:21.839]                       muffled <- FALSE
[13:37:21.839]                       if (inherits(cond, "message")) {
[13:37:21.839]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.839]                         if (muffled) 
[13:37:21.839]                           invokeRestart("muffleMessage")
[13:37:21.839]                       }
[13:37:21.839]                       else if (inherits(cond, "warning")) {
[13:37:21.839]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.839]                         if (muffled) 
[13:37:21.839]                           invokeRestart("muffleWarning")
[13:37:21.839]                       }
[13:37:21.839]                       else if (inherits(cond, "condition")) {
[13:37:21.839]                         if (!is.null(pattern)) {
[13:37:21.839]                           computeRestarts <- base::computeRestarts
[13:37:21.839]                           grepl <- base::grepl
[13:37:21.839]                           restarts <- computeRestarts(cond)
[13:37:21.839]                           for (restart in restarts) {
[13:37:21.839]                             name <- restart$name
[13:37:21.839]                             if (is.null(name)) 
[13:37:21.839]                               next
[13:37:21.839]                             if (!grepl(pattern, name)) 
[13:37:21.839]                               next
[13:37:21.839]                             invokeRestart(restart)
[13:37:21.839]                             muffled <- TRUE
[13:37:21.839]                             break
[13:37:21.839]                           }
[13:37:21.839]                         }
[13:37:21.839]                       }
[13:37:21.839]                       invisible(muffled)
[13:37:21.839]                     }
[13:37:21.839]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.839]                   }
[13:37:21.839]                 }
[13:37:21.839]             }
[13:37:21.839]         }))
[13:37:21.839]     }, error = function(ex) {
[13:37:21.839]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.839]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.839]                 ...future.rng), started = ...future.startTime, 
[13:37:21.839]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.839]             version = "1.8"), class = "FutureResult")
[13:37:21.839]     }, finally = {
[13:37:21.839]         if (!identical(...future.workdir, getwd())) 
[13:37:21.839]             setwd(...future.workdir)
[13:37:21.839]         {
[13:37:21.839]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.839]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.839]             }
[13:37:21.839]             base::options(...future.oldOptions)
[13:37:21.839]             if (.Platform$OS.type == "windows") {
[13:37:21.839]                 old_names <- names(...future.oldEnvVars)
[13:37:21.839]                 envs <- base::Sys.getenv()
[13:37:21.839]                 names <- names(envs)
[13:37:21.839]                 common <- intersect(names, old_names)
[13:37:21.839]                 added <- setdiff(names, old_names)
[13:37:21.839]                 removed <- setdiff(old_names, names)
[13:37:21.839]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.839]                   envs[common]]
[13:37:21.839]                 NAMES <- toupper(changed)
[13:37:21.839]                 args <- list()
[13:37:21.839]                 for (kk in seq_along(NAMES)) {
[13:37:21.839]                   name <- changed[[kk]]
[13:37:21.839]                   NAME <- NAMES[[kk]]
[13:37:21.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.839]                     next
[13:37:21.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.839]                 }
[13:37:21.839]                 NAMES <- toupper(added)
[13:37:21.839]                 for (kk in seq_along(NAMES)) {
[13:37:21.839]                   name <- added[[kk]]
[13:37:21.839]                   NAME <- NAMES[[kk]]
[13:37:21.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.839]                     next
[13:37:21.839]                   args[[name]] <- ""
[13:37:21.839]                 }
[13:37:21.839]                 NAMES <- toupper(removed)
[13:37:21.839]                 for (kk in seq_along(NAMES)) {
[13:37:21.839]                   name <- removed[[kk]]
[13:37:21.839]                   NAME <- NAMES[[kk]]
[13:37:21.839]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.839]                     next
[13:37:21.839]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.839]                 }
[13:37:21.839]                 if (length(args) > 0) 
[13:37:21.839]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.839]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.839]             }
[13:37:21.839]             else {
[13:37:21.839]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.839]             }
[13:37:21.839]             {
[13:37:21.839]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.839]                   0L) {
[13:37:21.839]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.839]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.839]                   base::options(opts)
[13:37:21.839]                 }
[13:37:21.839]                 {
[13:37:21.839]                   {
[13:37:21.839]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.839]                     NULL
[13:37:21.839]                   }
[13:37:21.839]                   options(future.plan = NULL)
[13:37:21.839]                   if (is.na(NA_character_)) 
[13:37:21.839]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.839]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.839]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.839]                     .init = FALSE)
[13:37:21.839]                 }
[13:37:21.839]             }
[13:37:21.839]         }
[13:37:21.839]     })
[13:37:21.839]     if (TRUE) {
[13:37:21.839]         base::sink(type = "output", split = FALSE)
[13:37:21.839]         if (TRUE) {
[13:37:21.839]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.839]         }
[13:37:21.839]         else {
[13:37:21.839]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.839]         }
[13:37:21.839]         base::close(...future.stdout)
[13:37:21.839]         ...future.stdout <- NULL
[13:37:21.839]     }
[13:37:21.839]     ...future.result$conditions <- ...future.conditions
[13:37:21.839]     ...future.result$finished <- base::Sys.time()
[13:37:21.839]     ...future.result
[13:37:21.839] }
[13:37:21.842] assign_globals() ...
[13:37:21.842] List of 2
[13:37:21.842]  $ nested   :List of 2
[13:37:21.842]   ..$ a:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
[13:37:21.842]   .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
[13:37:21.842]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.842]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.842]     envir = parent.frame())  
[13:37:21.842]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:37:21.842]   .. ..- attr(*, "init")= logi TRUE
[13:37:21.842]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:37:21.842]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.842]   ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.842]  $ strategy2: chr "multisession"
[13:37:21.842]  - attr(*, "where")=List of 2
[13:37:21.842]   ..$ nested   :<environment: R_EmptyEnv> 
[13:37:21.842]   ..$ strategy2:<environment: R_EmptyEnv> 
[13:37:21.842]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.842]  - attr(*, "resolved")= logi FALSE
[13:37:21.842]  - attr(*, "total_size")= num 92816
[13:37:21.842]  - attr(*, "already-done")= logi TRUE
[13:37:21.848] - copied ‘nested’ to environment
[13:37:21.848] - copied ‘strategy2’ to environment
[13:37:21.848] assign_globals() ... done
[13:37:21.848] requestCore(): workers = 2
[13:37:21.851] MulticoreFuture started
[13:37:21.851] - Launch lazy future ... done
[13:37:21.851] run() for ‘MulticoreFuture’ ... done
[13:37:21.852] result() for MulticoreFuture ...
[13:37:21.852] plan(): Setting new future strategy stack:
[13:37:21.853] List of future strategies:
[13:37:21.853] 1. multisession:
[13:37:21.853]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.853]    - tweaked: FALSE
[13:37:21.853]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.859] plan(): nbrOfWorkers() = 1
[13:37:21.900] plan(): Setting new future strategy stack:
[13:37:21.900] List of future strategies:
[13:37:21.900] 1. multicore:
[13:37:21.900]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.900]    - tweaked: FALSE
[13:37:21.900]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.900] 2. multisession:
[13:37:21.900]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.900]    - tweaked: FALSE
[13:37:21.900]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.904] plan(): nbrOfWorkers() = 2
[13:37:21.906] result() for MulticoreFuture ...
[13:37:21.906] result() for MulticoreFuture ... done
[13:37:21.906] signalConditions() ...
[13:37:21.906]  - include = ‘immediateCondition’
[13:37:21.906]  - exclude = 
[13:37:21.906]  - resignal = FALSE
[13:37:21.907]  - Number of conditions: 54
[13:37:21.907] signalConditions() ... done
[13:37:21.907] result() for MulticoreFuture ... done
[13:37:21.907] result() for MulticoreFuture ...
[13:37:21.907] result() for MulticoreFuture ... done
[13:37:21.907] signalConditions() ...
[13:37:21.907]  - include = ‘immediateCondition’
[13:37:21.907]  - exclude = 
[13:37:21.908]  - resignal = FALSE
[13:37:21.908]  - Number of conditions: 54
[13:37:21.908] signalConditions() ... done
[13:37:21.908] Future state: ‘finished’
[13:37:21.908] result() for MulticoreFuture ...
[13:37:21.908] result() for MulticoreFuture ... done
[13:37:21.908] signalConditions() ...
[13:37:21.908]  - include = ‘condition’
[13:37:21.909]  - exclude = ‘immediateCondition’
[13:37:21.909]  - resignal = TRUE
[13:37:21.909]  - Number of conditions: 54
[13:37:21.909]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.860] getGlobalsAndPackages() ...
[13:37:21.909]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.861] Searching for globals...
[13:37:21.909]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.868] - globals found: [14] ‘{’, ‘<-’, ‘::’, ‘[’, ‘nested_a’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘list’, ‘a’, ‘plan_a’
[13:37:21.909]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.868] Searching for globals ... DONE
[13:37:21.910]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.869] Resolving globals: FALSE
[13:37:21.910]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.870] The total size of the 3 globals is 87.82 KiB (89928 bytes)
[13:37:21.910]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.870] The total size of the 3 globals exported for future expression (‘{; b <- 2L; plan_b <- future::plan("list"); nested_b <- nested_a[-1]; stopifnot(length(nested_b) == 0L, length(plan_b) == 1L, inherits(plan_b[[1]],; "future"), inherits(future::plan("next"), "sequential")); list(a = a, nested_a = nested_a, plan_a = plan_a, b = b,; nested_b = nested_b, plan_b = plan_b); }’) is 87.82 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘nested_a’ (43.88 KiB of class ‘list’), ‘plan_a’ (43.88 KiB of class ‘list’) and ‘a’ (56 bytes of class ‘numeric’)
[13:37:21.910]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.871] - globals: [3] ‘nested_a’, ‘a’, ‘plan_a’
[13:37:21.910]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.871] 
[13:37:21.910]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.871] getGlobalsAndPackages() ... DONE
[13:37:21.911]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.872] run() for ‘Future’ ...
[13:37:21.911]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.872] - state: ‘created’
[13:37:21.911]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.872] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.911]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.876] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:21.911]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.877] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:21.911]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.877]   - Field: ‘label’
[13:37:21.912]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.877]   - Field: ‘local’
[13:37:21.912]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.877]   - Field: ‘owner’
[13:37:21.912]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.877]   - Field: ‘envir’
[13:37:21.912]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘packages’
[13:37:21.912]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘gc’
[13:37:21.912]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘conditions’
[13:37:21.913]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘expr’
[13:37:21.913]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘uuid’
[13:37:21.913]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘seed’
[13:37:21.913]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.878]   - Field: ‘version’
[13:37:21.913]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘result’
[13:37:21.913]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘asynchronous’
[13:37:21.913]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘calls’
[13:37:21.914]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘globals’
[13:37:21.914]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘stdout’
[13:37:21.914]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.879]   - Field: ‘earlySignal’
[13:37:21.914]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.880]   - Field: ‘lazy’
[13:37:21.914]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.880]   - Field: ‘state’
[13:37:21.914]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.880] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:21.915]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.880] - Launch lazy future ...
[13:37:21.915]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.880] Packages needed by the future expression (n = 0): <none>
[13:37:21.915]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.881] Packages needed by future strategies (n = 0): <none>
[13:37:21.915]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.881] {
[13:37:21.881]     {
[13:37:21.881]         {
[13:37:21.881]             ...future.startTime <- base::Sys.time()
[13:37:21.881]             {
[13:37:21.881]                 {
[13:37:21.881]                   {
[13:37:21.881]                     base::local({
[13:37:21.881]                       has_future <- base::requireNamespace("future", 
[13:37:21.881]                         quietly = TRUE)
[13:37:21.881]                       if (has_future) {
[13:37:21.881]                         ns <- base::getNamespace("future")
[13:37:21.881]                         version <- ns[[".package"]][["version"]]
[13:37:21.881]                         if (is.null(version)) 
[13:37:21.881]                           version <- utils::packageVersion("future")
[13:37:21.881]                       }
[13:37:21.881]                       else {
[13:37:21.881]                         version <- NULL
[13:37:21.881]                       }
[13:37:21.881]                       if (!has_future || version < "1.8.0") {
[13:37:21.881]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.881]                           "", base::R.version$version.string), 
[13:37:21.881]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.881]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.881]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.881]                             "release", "version")], collapse = " "), 
[13:37:21.881]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.881]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.881]                           info)
[13:37:21.881]                         info <- base::paste(info, collapse = "; ")
[13:37:21.881]                         if (!has_future) {
[13:37:21.881]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.881]                             info)
[13:37:21.881]                         }
[13:37:21.881]                         else {
[13:37:21.881]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.881]                             info, version)
[13:37:21.881]                         }
[13:37:21.881]                         base::stop(msg)
[13:37:21.881]                       }
[13:37:21.881]                     })
[13:37:21.881]                   }
[13:37:21.881]                   ...future.strategy.old <- future::plan("list")
[13:37:21.881]                   options(future.plan = NULL)
[13:37:21.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.881]                 }
[13:37:21.881]                 ...future.workdir <- getwd()
[13:37:21.881]             }
[13:37:21.881]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.881]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.881]         }
[13:37:21.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.881]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.881]             base::names(...future.oldOptions))
[13:37:21.881]     }
[13:37:21.881]     if (FALSE) {
[13:37:21.881]     }
[13:37:21.881]     else {
[13:37:21.881]         if (TRUE) {
[13:37:21.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.881]                 open = "w")
[13:37:21.881]         }
[13:37:21.881]         else {
[13:37:21.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.881]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.881]         }
[13:37:21.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.881]             base::sink(type = "output", split = FALSE)
[13:37:21.881]             base::close(...future.stdout)
[13:37:21.881]         }, add = TRUE)
[13:37:21.881]     }
[13:37:21.881]     ...future.frame <- base::sys.nframe()
[13:37:21.881]     ...future.conditions <- base::list()
[13:37:21.881]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.881]     if (FALSE) {
[13:37:21.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.881]     }
[13:37:21.881]     ...future.result <- base::tryCatch({
[13:37:21.881]         base::withCallingHandlers({
[13:37:21.881]             ...future.value <- base::withVisible(base::local({
[13:37:21.881]                 b <- 2L
[13:37:21.881]                 plan_b <- future::plan("list")
[13:37:21.881]                 nested_b <- nested_a[-1]
[13:37:21.881]                 stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:21.881]                   1L, inherits(plan_b[[1]], "future"), inherits(future::plan("next"), 
[13:37:21.881]                   "sequential"))
[13:37:21.881]                 list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:21.881]                   b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:21.881]             }))
[13:37:21.881]             future::FutureResult(value = ...future.value$value, 
[13:37:21.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.881]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.881]                     ...future.globalenv.names))
[13:37:21.881]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.881]         }, condition = base::local({
[13:37:21.881]             c <- base::c
[13:37:21.881]             inherits <- base::inherits
[13:37:21.881]             invokeRestart <- base::invokeRestart
[13:37:21.881]             length <- base::length
[13:37:21.881]             list <- base::list
[13:37:21.881]             seq.int <- base::seq.int
[13:37:21.881]             signalCondition <- base::signalCondition
[13:37:21.881]             sys.calls <- base::sys.calls
[13:37:21.881]             `[[` <- base::`[[`
[13:37:21.881]             `+` <- base::`+`
[13:37:21.881]             `<<-` <- base::`<<-`
[13:37:21.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.881]                   3L)]
[13:37:21.881]             }
[13:37:21.881]             function(cond) {
[13:37:21.881]                 is_error <- inherits(cond, "error")
[13:37:21.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.881]                   NULL)
[13:37:21.881]                 if (is_error) {
[13:37:21.881]                   sessionInformation <- function() {
[13:37:21.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.881]                       search = base::search(), system = base::Sys.info())
[13:37:21.881]                   }
[13:37:21.881]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.881]                     cond$call), session = sessionInformation(), 
[13:37:21.881]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.881]                   signalCondition(cond)
[13:37:21.881]                 }
[13:37:21.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.881]                 "immediateCondition"))) {
[13:37:21.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.881]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.881]                   if (TRUE && !signal) {
[13:37:21.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.881]                     {
[13:37:21.881]                       inherits <- base::inherits
[13:37:21.881]                       invokeRestart <- base::invokeRestart
[13:37:21.881]                       is.null <- base::is.null
[13:37:21.881]                       muffled <- FALSE
[13:37:21.881]                       if (inherits(cond, "message")) {
[13:37:21.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.881]                         if (muffled) 
[13:37:21.881]                           invokeRestart("muffleMessage")
[13:37:21.881]                       }
[13:37:21.881]                       else if (inherits(cond, "warning")) {
[13:37:21.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.881]                         if (muffled) 
[13:37:21.881]                           invokeRestart("muffleWarning")
[13:37:21.881]                       }
[13:37:21.881]                       else if (inherits(cond, "condition")) {
[13:37:21.881]                         if (!is.null(pattern)) {
[13:37:21.881]                           computeRestarts <- base::computeRestarts
[13:37:21.881]                           grepl <- base::grepl
[13:37:21.881]                           restarts <- computeRestarts(cond)
[13:37:21.881]                           for (restart in restarts) {
[13:37:21.881]                             name <- restart$name
[13:37:21.881]                             if (is.null(name)) 
[13:37:21.881]                               next
[13:37:21.881]                             if (!grepl(pattern, name)) 
[13:37:21.881]                               next
[13:37:21.881]                             invokeRestart(restart)
[13:37:21.881]                             muffled <- TRUE
[13:37:21.881]                             break
[13:37:21.881]                           }
[13:37:21.881]                         }
[13:37:21.881]                       }
[13:37:21.881]                       invisible(muffled)
[13:37:21.881]                     }
[13:37:21.881]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.881]                   }
[13:37:21.881]                 }
[13:37:21.881]                 else {
[13:37:21.881]                   if (TRUE) {
[13:37:21.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.881]                     {
[13:37:21.881]                       inherits <- base::inherits
[13:37:21.881]                       invokeRestart <- base::invokeRestart
[13:37:21.881]                       is.null <- base::is.null
[13:37:21.881]                       muffled <- FALSE
[13:37:21.881]                       if (inherits(cond, "message")) {
[13:37:21.881]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.881]                         if (muffled) 
[13:37:21.881]                           invokeRestart("muffleMessage")
[13:37:21.881]                       }
[13:37:21.881]                       else if (inherits(cond, "warning")) {
[13:37:21.881]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.881]                         if (muffled) 
[13:37:21.881]                           invokeRestart("muffleWarning")
[13:37:21.881]                       }
[13:37:21.881]                       else if (inherits(cond, "condition")) {
[13:37:21.881]                         if (!is.null(pattern)) {
[13:37:21.881]                           computeRestarts <- base::computeRestarts
[13:37:21.881]                           grepl <- base::grepl
[13:37:21.881]                           restarts <- computeRestarts(cond)
[13:37:21.881]                           for (restart in restarts) {
[13:37:21.881]                             name <- restart$name
[13:37:21.881]                             if (is.null(name)) 
[13:37:21.881]                               next
[13:37:21.881]                             if (!grepl(pattern, name)) 
[13:37:21.881]                               next
[13:37:21.881]                             invokeRestart(restart)
[13:37:21.881]                             muffled <- TRUE
[13:37:21.881]                             break
[13:37:21.881]                           }
[13:37:21.881]                         }
[13:37:21.881]                       }
[13:37:21.881]                       invisible(muffled)
[13:37:21.881]                     }
[13:37:21.881]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.881]                   }
[13:37:21.881]                 }
[13:37:21.881]             }
[13:37:21.881]         }))
[13:37:21.881]     }, error = function(ex) {
[13:37:21.881]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.881]                 ...future.rng), started = ...future.startTime, 
[13:37:21.881]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.881]             version = "1.8"), class = "FutureResult")
[13:37:21.881]     }, finally = {
[13:37:21.881]         if (!identical(...future.workdir, getwd())) 
[13:37:21.881]             setwd(...future.workdir)
[13:37:21.881]         {
[13:37:21.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.881]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.881]             }
[13:37:21.881]             base::options(...future.oldOptions)
[13:37:21.881]             if (.Platform$OS.type == "windows") {
[13:37:21.881]                 old_names <- names(...future.oldEnvVars)
[13:37:21.881]                 envs <- base::Sys.getenv()
[13:37:21.881]                 names <- names(envs)
[13:37:21.881]                 common <- intersect(names, old_names)
[13:37:21.881]                 added <- setdiff(names, old_names)
[13:37:21.881]                 removed <- setdiff(old_names, names)
[13:37:21.881]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.881]                   envs[common]]
[13:37:21.881]                 NAMES <- toupper(changed)
[13:37:21.881]                 args <- list()
[13:37:21.881]                 for (kk in seq_along(NAMES)) {
[13:37:21.881]                   name <- changed[[kk]]
[13:37:21.881]                   NAME <- NAMES[[kk]]
[13:37:21.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.881]                     next
[13:37:21.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.881]                 }
[13:37:21.881]                 NAMES <- toupper(added)
[13:37:21.881]                 for (kk in seq_along(NAMES)) {
[13:37:21.881]                   name <- added[[kk]]
[13:37:21.881]                   NAME <- NAMES[[kk]]
[13:37:21.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.881]                     next
[13:37:21.881]                   args[[name]] <- ""
[13:37:21.881]                 }
[13:37:21.881]                 NAMES <- toupper(removed)
[13:37:21.881]                 for (kk in seq_along(NAMES)) {
[13:37:21.881]                   name <- removed[[kk]]
[13:37:21.881]                   NAME <- NAMES[[kk]]
[13:37:21.881]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.881]                     next
[13:37:21.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.881]                 }
[13:37:21.881]                 if (length(args) > 0) 
[13:37:21.881]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.881]             }
[13:37:21.881]             else {
[13:37:21.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.881]             }
[13:37:21.881]             {
[13:37:21.881]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.881]                   0L) {
[13:37:21.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.881]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.881]                   base::options(opts)
[13:37:21.881]                 }
[13:37:21.881]                 {
[13:37:21.881]                   {
[13:37:21.881]                     NULL
[13:37:21.881]                     RNGkind("Mersenne-Twister")
[13:37:21.881]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.881]                       inherits = FALSE)
[13:37:21.881]                   }
[13:37:21.881]                   options(future.plan = NULL)
[13:37:21.881]                   if (is.na(NA_character_)) 
[13:37:21.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.881]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.881]                     .init = FALSE)
[13:37:21.881]                 }
[13:37:21.881]             }
[13:37:21.881]         }
[13:37:21.881]     })
[13:37:21.881]     if (TRUE) {
[13:37:21.881]         base::sink(type = "output", split = FALSE)
[13:37:21.881]         if (TRUE) {
[13:37:21.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.881]         }
[13:37:21.881]         else {
[13:37:21.881]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.881]         }
[13:37:21.881]         base::close(...future.stdout)
[13:37:21.881]         ...future.stdout <- NULL
[13:37:21.881]     }
[13:37:21.881]     ...future.result$conditions <- ...future.conditions
[13:37:21.881]     ...future.result$finished <- base::Sys.time()
[13:37:21.881]     ...future.result
[13:37:21.881] }
[13:37:21.915]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.884] assign_globals() ...
[13:37:21.915]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.884] List of 3
[13:37:21.884]  $ nested_a:List of 1
[13:37:21.884]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.884]     envir = parent.frame())  
[13:37:21.884]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:37:21.884]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:37:21.884]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.884]  $ a       : int 1
[13:37:21.884]  $ plan_a  :List of 1
[13:37:21.884]   ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.884]     envir = parent.frame())  
[13:37:21.884]   .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
[13:37:21.884]   .. ..- attr(*, "untweakable")= chr "persistent"
[13:37:21.884]   .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
[13:37:21.884]  - attr(*, "where")=List of 3
[13:37:21.884]   ..$ nested_a:<environment: R_EmptyEnv> 
[13:37:21.884]   ..$ a       :<environment: R_EmptyEnv> 
[13:37:21.884]   ..$ plan_a  :<environment: R_EmptyEnv> 
[13:37:21.884]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.884]  - attr(*, "resolved")= logi FALSE
[13:37:21.884]  - attr(*, "total_size")= num 89928
[13:37:21.884]  - attr(*, "already-done")= logi TRUE
[13:37:21.916]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.892] - copied ‘nested_a’ to environment
[13:37:21.916]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.892] - copied ‘a’ to environment
[13:37:21.916]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.892] - copied ‘plan_a’ to environment
[13:37:21.916]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.892] assign_globals() ... done
[13:37:21.916]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.892] plan(): Setting new future strategy stack:
[13:37:21.916]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.893] List of future strategies:
[13:37:21.893] 1. sequential:
[13:37:21.893]    - args: function (..., envir = parent.frame())
[13:37:21.893]    - tweaked: FALSE
[13:37:21.893]    - call: NULL
[13:37:21.916]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.893] plan(): nbrOfWorkers() = 1
[13:37:21.917]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.894] plan(): Setting new future strategy stack:
[13:37:21.917]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.894] List of future strategies:
[13:37:21.894] 1. multisession:
[13:37:21.894]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.894]    - tweaked: FALSE
[13:37:21.894]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.917]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.898] plan(): nbrOfWorkers() = 1
[13:37:21.917]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.899] SequentialFuture started (and completed)
[13:37:21.917]  - Condition #53: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.899] - Launch lazy future ... done
[13:37:21.917]  - Condition #54: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.899] run() for ‘SequentialFuture’ ... done
[13:37:21.918] signalConditions() ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:21.924] getGlobalsAndPackages() ...
[13:37:21.925] Searching for globals...
[13:37:21.926] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:21.926] Searching for globals ... DONE
[13:37:21.927] Resolving globals: FALSE
[13:37:21.927] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:21.928] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:21.928] - globals: [1] ‘data’
[13:37:21.928] - packages: [1] ‘future’
[13:37:21.928] getGlobalsAndPackages() ... DONE
[13:37:21.929] run() for ‘Future’ ...
[13:37:21.929] - state: ‘created’
[13:37:21.929] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:37:21.933] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:21.933] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:37:21.934]   - Field: ‘label’
[13:37:21.934]   - Field: ‘local’
[13:37:21.934]   - Field: ‘owner’
[13:37:21.934]   - Field: ‘envir’
[13:37:21.934]   - Field: ‘workers’
[13:37:21.934]   - Field: ‘packages’
[13:37:21.934]   - Field: ‘gc’
[13:37:21.934]   - Field: ‘job’
[13:37:21.935]   - Field: ‘conditions’
[13:37:21.935]   - Field: ‘expr’
[13:37:21.935]   - Field: ‘uuid’
[13:37:21.935]   - Field: ‘seed’
[13:37:21.935]   - Field: ‘version’
[13:37:21.935]   - Field: ‘result’
[13:37:21.935]   - Field: ‘asynchronous’
[13:37:21.935]   - Field: ‘calls’
[13:37:21.935]   - Field: ‘globals’
[13:37:21.936]   - Field: ‘stdout’
[13:37:21.936]   - Field: ‘earlySignal’
[13:37:21.936]   - Field: ‘lazy’
[13:37:21.936]   - Field: ‘state’
[13:37:21.936] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:37:21.936] - Launch lazy future ...
[13:37:21.936] Packages needed by the future expression (n = 1): ‘future’
[13:37:21.937] Packages needed by future strategies (n = 1): ‘future’
[13:37:21.937] {
[13:37:21.937]     {
[13:37:21.937]         {
[13:37:21.937]             ...future.startTime <- base::Sys.time()
[13:37:21.937]             {
[13:37:21.937]                 {
[13:37:21.937]                   {
[13:37:21.937]                     {
[13:37:21.937]                       {
[13:37:21.937]                         base::local({
[13:37:21.937]                           has_future <- base::requireNamespace("future", 
[13:37:21.937]                             quietly = TRUE)
[13:37:21.937]                           if (has_future) {
[13:37:21.937]                             ns <- base::getNamespace("future")
[13:37:21.937]                             version <- ns[[".package"]][["version"]]
[13:37:21.937]                             if (is.null(version)) 
[13:37:21.937]                               version <- utils::packageVersion("future")
[13:37:21.937]                           }
[13:37:21.937]                           else {
[13:37:21.937]                             version <- NULL
[13:37:21.937]                           }
[13:37:21.937]                           if (!has_future || version < "1.8.0") {
[13:37:21.937]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.937]                               "", base::R.version$version.string), 
[13:37:21.937]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:21.937]                                 base::R.version$platform, 8 * 
[13:37:21.937]                                   base::.Machine$sizeof.pointer), 
[13:37:21.937]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.937]                                 "release", "version")], collapse = " "), 
[13:37:21.937]                               hostname = base::Sys.info()[["nodename"]])
[13:37:21.937]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.937]                               info)
[13:37:21.937]                             info <- base::paste(info, collapse = "; ")
[13:37:21.937]                             if (!has_future) {
[13:37:21.937]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.937]                                 info)
[13:37:21.937]                             }
[13:37:21.937]                             else {
[13:37:21.937]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.937]                                 info, version)
[13:37:21.937]                             }
[13:37:21.937]                             base::stop(msg)
[13:37:21.937]                           }
[13:37:21.937]                         })
[13:37:21.937]                       }
[13:37:21.937]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:21.937]                       base::options(mc.cores = 1L)
[13:37:21.937]                     }
[13:37:21.937]                     base::local({
[13:37:21.937]                       for (pkg in "future") {
[13:37:21.937]                         base::loadNamespace(pkg)
[13:37:21.937]                         base::library(pkg, character.only = TRUE)
[13:37:21.937]                       }
[13:37:21.937]                     })
[13:37:21.937]                   }
[13:37:21.937]                   ...future.strategy.old <- future::plan("list")
[13:37:21.937]                   options(future.plan = NULL)
[13:37:21.937]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.937]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:21.937]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:21.937]                     envir = parent.frame()) 
[13:37:21.937]                   {
[13:37:21.937]                     if (is.function(workers)) 
[13:37:21.937]                       workers <- workers()
[13:37:21.937]                     workers <- structure(as.integer(workers), 
[13:37:21.937]                       class = class(workers))
[13:37:21.937]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:21.937]                       workers >= 1)
[13:37:21.937]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:21.937]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:21.937]                     }
[13:37:21.937]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:21.937]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:21.937]                       envir = envir)
[13:37:21.937]                     if (!future$lazy) 
[13:37:21.937]                       future <- run(future)
[13:37:21.937]                     invisible(future)
[13:37:21.937]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:21.937]                 }
[13:37:21.937]                 ...future.workdir <- getwd()
[13:37:21.937]             }
[13:37:21.937]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.937]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.937]         }
[13:37:21.937]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.937]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.937]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.937]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.937]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.937]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.937]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.937]             base::names(...future.oldOptions))
[13:37:21.937]     }
[13:37:21.937]     if (FALSE) {
[13:37:21.937]     }
[13:37:21.937]     else {
[13:37:21.937]         if (TRUE) {
[13:37:21.937]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.937]                 open = "w")
[13:37:21.937]         }
[13:37:21.937]         else {
[13:37:21.937]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.937]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.937]         }
[13:37:21.937]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.937]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.937]             base::sink(type = "output", split = FALSE)
[13:37:21.937]             base::close(...future.stdout)
[13:37:21.937]         }, add = TRUE)
[13:37:21.937]     }
[13:37:21.937]     ...future.frame <- base::sys.nframe()
[13:37:21.937]     ...future.conditions <- base::list()
[13:37:21.937]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.937]     if (FALSE) {
[13:37:21.937]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.937]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.937]     }
[13:37:21.937]     ...future.result <- base::tryCatch({
[13:37:21.937]         base::withCallingHandlers({
[13:37:21.937]             ...future.value <- base::withVisible(base::local({
[13:37:21.937]                 withCallingHandlers({
[13:37:21.937]                   {
[13:37:21.937]                     value(future(subset(data, a == 2)))
[13:37:21.937]                   }
[13:37:21.937]                 }, immediateCondition = function(cond) {
[13:37:21.937]                   save_rds <- function (object, pathname, ...) 
[13:37:21.937]                   {
[13:37:21.937]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:37:21.937]                     if (file_test("-f", pathname_tmp)) {
[13:37:21.937]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.937]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:37:21.937]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.937]                         fi_tmp[["mtime"]])
[13:37:21.937]                     }
[13:37:21.937]                     tryCatch({
[13:37:21.937]                       saveRDS(object, file = pathname_tmp, ...)
[13:37:21.937]                     }, error = function(ex) {
[13:37:21.937]                       msg <- conditionMessage(ex)
[13:37:21.937]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.937]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:37:21.937]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.937]                         fi_tmp[["mtime"]], msg)
[13:37:21.937]                       ex$message <- msg
[13:37:21.937]                       stop(ex)
[13:37:21.937]                     })
[13:37:21.937]                     stopifnot(file_test("-f", pathname_tmp))
[13:37:21.937]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:37:21.937]                     if (!res || file_test("-f", pathname_tmp)) {
[13:37:21.937]                       fi_tmp <- file.info(pathname_tmp)
[13:37:21.937]                       fi <- file.info(pathname)
[13:37:21.937]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:37:21.937]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:37:21.937]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:37:21.937]                         fi[["size"]], fi[["mtime"]])
[13:37:21.937]                       stop(msg)
[13:37:21.937]                     }
[13:37:21.937]                     invisible(pathname)
[13:37:21.937]                   }
[13:37:21.937]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:37:21.937]                     rootPath = tempdir()) 
[13:37:21.937]                   {
[13:37:21.937]                     obj <- list(time = Sys.time(), condition = cond)
[13:37:21.937]                     file <- tempfile(pattern = class(cond)[1], 
[13:37:21.937]                       tmpdir = path, fileext = ".rds")
[13:37:21.937]                     save_rds(obj, file)
[13:37:21.937]                   }
[13:37:21.937]                   saveImmediateCondition(cond, path = "/tmp/RtmpEvMoq7/.future/immediateConditions")
[13:37:21.937]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.937]                   {
[13:37:21.937]                     inherits <- base::inherits
[13:37:21.937]                     invokeRestart <- base::invokeRestart
[13:37:21.937]                     is.null <- base::is.null
[13:37:21.937]                     muffled <- FALSE
[13:37:21.937]                     if (inherits(cond, "message")) {
[13:37:21.937]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:21.937]                       if (muffled) 
[13:37:21.937]                         invokeRestart("muffleMessage")
[13:37:21.937]                     }
[13:37:21.937]                     else if (inherits(cond, "warning")) {
[13:37:21.937]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:21.937]                       if (muffled) 
[13:37:21.937]                         invokeRestart("muffleWarning")
[13:37:21.937]                     }
[13:37:21.937]                     else if (inherits(cond, "condition")) {
[13:37:21.937]                       if (!is.null(pattern)) {
[13:37:21.937]                         computeRestarts <- base::computeRestarts
[13:37:21.937]                         grepl <- base::grepl
[13:37:21.937]                         restarts <- computeRestarts(cond)
[13:37:21.937]                         for (restart in restarts) {
[13:37:21.937]                           name <- restart$name
[13:37:21.937]                           if (is.null(name)) 
[13:37:21.937]                             next
[13:37:21.937]                           if (!grepl(pattern, name)) 
[13:37:21.937]                             next
[13:37:21.937]                           invokeRestart(restart)
[13:37:21.937]                           muffled <- TRUE
[13:37:21.937]                           break
[13:37:21.937]                         }
[13:37:21.937]                       }
[13:37:21.937]                     }
[13:37:21.937]                     invisible(muffled)
[13:37:21.937]                   }
[13:37:21.937]                   muffleCondition(cond)
[13:37:21.937]                 })
[13:37:21.937]             }))
[13:37:21.937]             future::FutureResult(value = ...future.value$value, 
[13:37:21.937]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.937]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.937]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.937]                     ...future.globalenv.names))
[13:37:21.937]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.937]         }, condition = base::local({
[13:37:21.937]             c <- base::c
[13:37:21.937]             inherits <- base::inherits
[13:37:21.937]             invokeRestart <- base::invokeRestart
[13:37:21.937]             length <- base::length
[13:37:21.937]             list <- base::list
[13:37:21.937]             seq.int <- base::seq.int
[13:37:21.937]             signalCondition <- base::signalCondition
[13:37:21.937]             sys.calls <- base::sys.calls
[13:37:21.937]             `[[` <- base::`[[`
[13:37:21.937]             `+` <- base::`+`
[13:37:21.937]             `<<-` <- base::`<<-`
[13:37:21.937]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.937]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.937]                   3L)]
[13:37:21.937]             }
[13:37:21.937]             function(cond) {
[13:37:21.937]                 is_error <- inherits(cond, "error")
[13:37:21.937]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.937]                   NULL)
[13:37:21.937]                 if (is_error) {
[13:37:21.937]                   sessionInformation <- function() {
[13:37:21.937]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.937]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.937]                       search = base::search(), system = base::Sys.info())
[13:37:21.937]                   }
[13:37:21.937]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.937]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.937]                     cond$call), session = sessionInformation(), 
[13:37:21.937]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.937]                   signalCondition(cond)
[13:37:21.937]                 }
[13:37:21.937]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.937]                 "immediateCondition"))) {
[13:37:21.937]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.937]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.937]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.937]                   if (TRUE && !signal) {
[13:37:21.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.937]                     {
[13:37:21.937]                       inherits <- base::inherits
[13:37:21.937]                       invokeRestart <- base::invokeRestart
[13:37:21.937]                       is.null <- base::is.null
[13:37:21.937]                       muffled <- FALSE
[13:37:21.937]                       if (inherits(cond, "message")) {
[13:37:21.937]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.937]                         if (muffled) 
[13:37:21.937]                           invokeRestart("muffleMessage")
[13:37:21.937]                       }
[13:37:21.937]                       else if (inherits(cond, "warning")) {
[13:37:21.937]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.937]                         if (muffled) 
[13:37:21.937]                           invokeRestart("muffleWarning")
[13:37:21.937]                       }
[13:37:21.937]                       else if (inherits(cond, "condition")) {
[13:37:21.937]                         if (!is.null(pattern)) {
[13:37:21.937]                           computeRestarts <- base::computeRestarts
[13:37:21.937]                           grepl <- base::grepl
[13:37:21.937]                           restarts <- computeRestarts(cond)
[13:37:21.937]                           for (restart in restarts) {
[13:37:21.937]                             name <- restart$name
[13:37:21.937]                             if (is.null(name)) 
[13:37:21.937]                               next
[13:37:21.937]                             if (!grepl(pattern, name)) 
[13:37:21.937]                               next
[13:37:21.937]                             invokeRestart(restart)
[13:37:21.937]                             muffled <- TRUE
[13:37:21.937]                             break
[13:37:21.937]                           }
[13:37:21.937]                         }
[13:37:21.937]                       }
[13:37:21.937]                       invisible(muffled)
[13:37:21.937]                     }
[13:37:21.937]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.937]                   }
[13:37:21.937]                 }
[13:37:21.937]                 else {
[13:37:21.937]                   if (TRUE) {
[13:37:21.937]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.937]                     {
[13:37:21.937]                       inherits <- base::inherits
[13:37:21.937]                       invokeRestart <- base::invokeRestart
[13:37:21.937]                       is.null <- base::is.null
[13:37:21.937]                       muffled <- FALSE
[13:37:21.937]                       if (inherits(cond, "message")) {
[13:37:21.937]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.937]                         if (muffled) 
[13:37:21.937]                           invokeRestart("muffleMessage")
[13:37:21.937]                       }
[13:37:21.937]                       else if (inherits(cond, "warning")) {
[13:37:21.937]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.937]                         if (muffled) 
[13:37:21.937]                           invokeRestart("muffleWarning")
[13:37:21.937]                       }
[13:37:21.937]                       else if (inherits(cond, "condition")) {
[13:37:21.937]                         if (!is.null(pattern)) {
[13:37:21.937]                           computeRestarts <- base::computeRestarts
[13:37:21.937]                           grepl <- base::grepl
[13:37:21.937]                           restarts <- computeRestarts(cond)
[13:37:21.937]                           for (restart in restarts) {
[13:37:21.937]                             name <- restart$name
[13:37:21.937]                             if (is.null(name)) 
[13:37:21.937]                               next
[13:37:21.937]                             if (!grepl(pattern, name)) 
[13:37:21.937]                               next
[13:37:21.937]                             invokeRestart(restart)
[13:37:21.937]                             muffled <- TRUE
[13:37:21.937]                             break
[13:37:21.937]                           }
[13:37:21.937]                         }
[13:37:21.937]                       }
[13:37:21.937]                       invisible(muffled)
[13:37:21.937]                     }
[13:37:21.937]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.937]                   }
[13:37:21.937]                 }
[13:37:21.937]             }
[13:37:21.937]         }))
[13:37:21.937]     }, error = function(ex) {
[13:37:21.937]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.937]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.937]                 ...future.rng), started = ...future.startTime, 
[13:37:21.937]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.937]             version = "1.8"), class = "FutureResult")
[13:37:21.937]     }, finally = {
[13:37:21.937]         if (!identical(...future.workdir, getwd())) 
[13:37:21.937]             setwd(...future.workdir)
[13:37:21.937]         {
[13:37:21.937]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.937]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.937]             }
[13:37:21.937]             base::options(...future.oldOptions)
[13:37:21.937]             if (.Platform$OS.type == "windows") {
[13:37:21.937]                 old_names <- names(...future.oldEnvVars)
[13:37:21.937]                 envs <- base::Sys.getenv()
[13:37:21.937]                 names <- names(envs)
[13:37:21.937]                 common <- intersect(names, old_names)
[13:37:21.937]                 added <- setdiff(names, old_names)
[13:37:21.937]                 removed <- setdiff(old_names, names)
[13:37:21.937]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.937]                   envs[common]]
[13:37:21.937]                 NAMES <- toupper(changed)
[13:37:21.937]                 args <- list()
[13:37:21.937]                 for (kk in seq_along(NAMES)) {
[13:37:21.937]                   name <- changed[[kk]]
[13:37:21.937]                   NAME <- NAMES[[kk]]
[13:37:21.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.937]                     next
[13:37:21.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.937]                 }
[13:37:21.937]                 NAMES <- toupper(added)
[13:37:21.937]                 for (kk in seq_along(NAMES)) {
[13:37:21.937]                   name <- added[[kk]]
[13:37:21.937]                   NAME <- NAMES[[kk]]
[13:37:21.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.937]                     next
[13:37:21.937]                   args[[name]] <- ""
[13:37:21.937]                 }
[13:37:21.937]                 NAMES <- toupper(removed)
[13:37:21.937]                 for (kk in seq_along(NAMES)) {
[13:37:21.937]                   name <- removed[[kk]]
[13:37:21.937]                   NAME <- NAMES[[kk]]
[13:37:21.937]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.937]                     next
[13:37:21.937]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.937]                 }
[13:37:21.937]                 if (length(args) > 0) 
[13:37:21.937]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.937]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.937]             }
[13:37:21.937]             else {
[13:37:21.937]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.937]             }
[13:37:21.937]             {
[13:37:21.937]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.937]                   0L) {
[13:37:21.937]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.937]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.937]                   base::options(opts)
[13:37:21.937]                 }
[13:37:21.937]                 {
[13:37:21.937]                   {
[13:37:21.937]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:21.937]                     NULL
[13:37:21.937]                   }
[13:37:21.937]                   options(future.plan = NULL)
[13:37:21.937]                   if (is.na(NA_character_)) 
[13:37:21.937]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.937]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.937]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.937]                     .init = FALSE)
[13:37:21.937]                 }
[13:37:21.937]             }
[13:37:21.937]         }
[13:37:21.937]     })
[13:37:21.937]     if (TRUE) {
[13:37:21.937]         base::sink(type = "output", split = FALSE)
[13:37:21.937]         if (TRUE) {
[13:37:21.937]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.937]         }
[13:37:21.937]         else {
[13:37:21.937]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.937]         }
[13:37:21.937]         base::close(...future.stdout)
[13:37:21.937]         ...future.stdout <- NULL
[13:37:21.937]     }
[13:37:21.937]     ...future.result$conditions <- ...future.conditions
[13:37:21.937]     ...future.result$finished <- base::Sys.time()
[13:37:21.937]     ...future.result
[13:37:21.937] }
[13:37:21.940] assign_globals() ...
[13:37:21.940] List of 1
[13:37:21.940]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.940]   ..$ a: int [1:3] 1 2 3
[13:37:21.940]   ..$ b: int [1:3] 3 2 1
[13:37:21.940]  - attr(*, "where")=List of 1
[13:37:21.940]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.940]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.940]  - attr(*, "resolved")= logi FALSE
[13:37:21.940]  - attr(*, "total_size")= num 128
[13:37:21.940]  - attr(*, "already-done")= logi TRUE
[13:37:21.944] - copied ‘data’ to environment
[13:37:21.944] assign_globals() ... done
[13:37:21.944] requestCore(): workers = 2
[13:37:21.946] MulticoreFuture started
[13:37:21.947] - Launch lazy future ... done
[13:37:21.947] run() for ‘MulticoreFuture’ ... done
[13:37:21.947] result() for MulticoreFuture ...
[13:37:21.948] plan(): Setting new future strategy stack:
[13:37:21.948] List of future strategies:
[13:37:21.948] 1. multisession:
[13:37:21.948]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.948]    - tweaked: FALSE
[13:37:21.948]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.960] plan(): nbrOfWorkers() = 1
[13:37:21.991] plan(): Setting new future strategy stack:
[13:37:21.991] List of future strategies:
[13:37:21.991] 1. multicore:
[13:37:21.991]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:21.991]    - tweaked: FALSE
[13:37:21.991]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.991] 2. multisession:
[13:37:21.991]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.991]    - tweaked: FALSE
[13:37:21.991]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:21.995] plan(): nbrOfWorkers() = 2
[13:37:21.996] result() for MulticoreFuture ...
[13:37:21.996] result() for MulticoreFuture ... done
[13:37:21.997] signalConditions() ...
[13:37:21.997]  - include = ‘immediateCondition’
[13:37:22.000]  - exclude = 
[13:37:22.001]  - resignal = FALSE
[13:37:22.001]  - Number of conditions: 52
[13:37:22.001] signalConditions() ... done
[13:37:22.001] result() for MulticoreFuture ... done
[13:37:22.001] result() for MulticoreFuture ...
[13:37:22.001] result() for MulticoreFuture ... done
[13:37:22.001] signalConditions() ...
[13:37:22.001]  - include = ‘immediateCondition’
[13:37:22.002]  - exclude = 
[13:37:22.002]  - resignal = FALSE
[13:37:22.002]  - Number of conditions: 52
[13:37:22.002] signalConditions() ... done
[13:37:22.002] Future state: ‘finished’
[13:37:22.002] result() for MulticoreFuture ...
[13:37:22.002] result() for MulticoreFuture ... done
[13:37:22.002] signalConditions() ...
[13:37:22.003]  - include = ‘condition’
[13:37:22.003]  - exclude = ‘immediateCondition’
[13:37:22.003]  - resignal = TRUE
[13:37:22.003]  - Number of conditions: 52
[13:37:22.003]  - Condition #1: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.961] getGlobalsAndPackages() ...
[13:37:22.003]  - Condition #2: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.961] Searching for globals...
[13:37:22.003]  - Condition #3: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.963] - globals found: [4] ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:22.003]  - Condition #4: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.963] Searching for globals ... DONE
[13:37:22.004]  - Condition #5: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.963] Resolving globals: FALSE
[13:37:22.004]  - Condition #6: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.964] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:22.004]  - Condition #7: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.965] The total size of the 1 globals exported for future expression (‘subset(data, a == 2)’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:22.004]  - Condition #8: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.965] - globals: [1] ‘data’
[13:37:22.004]  - Condition #9: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.965] 
[13:37:22.004]  - Condition #10: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.965] getGlobalsAndPackages() ... DONE
[13:37:22.005]  - Condition #11: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.966] run() for ‘Future’ ...
[13:37:22.005]  - Condition #12: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.966] - state: ‘created’
[13:37:22.005]  - Condition #13: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.967] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:22.005]  - Condition #14: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:37:22.005]  - Condition #15: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:37:22.005]  - Condition #16: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971]   - Field: ‘label’
[13:37:22.005]  - Condition #17: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971]   - Field: ‘local’
[13:37:22.006]  - Condition #18: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971]   - Field: ‘owner’
[13:37:22.006]  - Condition #19: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.971]   - Field: ‘envir’
[13:37:22.006]  - Condition #20: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘packages’
[13:37:22.006]  - Condition #21: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘gc’
[13:37:22.006]  - Condition #22: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘conditions’
[13:37:22.006]  - Condition #23: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘expr’
[13:37:22.007]  - Condition #24: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘uuid’
[13:37:22.007]  - Condition #25: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.972]   - Field: ‘seed’
[13:37:22.007]  - Condition #26: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘version’
[13:37:22.007]  - Condition #27: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘result’
[13:37:22.007]  - Condition #28: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘asynchronous’
[13:37:22.007]  - Condition #29: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘calls’
[13:37:22.008]  - Condition #30: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘globals’
[13:37:22.008]  - Condition #31: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.973]   - Field: ‘stdout’
[13:37:22.008]  - Condition #32: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.974]   - Field: ‘earlySignal’
[13:37:22.008]  - Condition #33: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.974]   - Field: ‘lazy’
[13:37:22.008]  - Condition #34: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.974]   - Field: ‘state’
[13:37:22.008]  - Condition #35: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.974] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:37:22.009]  - Condition #36: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.974] - Launch lazy future ...
[13:37:22.009]  - Condition #37: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.975] Packages needed by the future expression (n = 0): <none>
[13:37:22.009]  - Condition #38: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.975] Packages needed by future strategies (n = 0): <none>
[13:37:22.009]  - Condition #39: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.976] {
[13:37:21.976]     {
[13:37:21.976]         {
[13:37:21.976]             ...future.startTime <- base::Sys.time()
[13:37:21.976]             {
[13:37:21.976]                 {
[13:37:21.976]                   {
[13:37:21.976]                     base::local({
[13:37:21.976]                       has_future <- base::requireNamespace("future", 
[13:37:21.976]                         quietly = TRUE)
[13:37:21.976]                       if (has_future) {
[13:37:21.976]                         ns <- base::getNamespace("future")
[13:37:21.976]                         version <- ns[[".package"]][["version"]]
[13:37:21.976]                         if (is.null(version)) 
[13:37:21.976]                           version <- utils::packageVersion("future")
[13:37:21.976]                       }
[13:37:21.976]                       else {
[13:37:21.976]                         version <- NULL
[13:37:21.976]                       }
[13:37:21.976]                       if (!has_future || version < "1.8.0") {
[13:37:21.976]                         info <- base::c(r_version = base::gsub("R version ", 
[13:37:21.976]                           "", base::R.version$version.string), 
[13:37:21.976]                           platform = base::sprintf("%s (%s-bit)", 
[13:37:21.976]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:37:21.976]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:21.976]                             "release", "version")], collapse = " "), 
[13:37:21.976]                           hostname = base::Sys.info()[["nodename"]])
[13:37:21.976]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:37:21.976]                           info)
[13:37:21.976]                         info <- base::paste(info, collapse = "; ")
[13:37:21.976]                         if (!has_future) {
[13:37:21.976]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:21.976]                             info)
[13:37:21.976]                         }
[13:37:21.976]                         else {
[13:37:21.976]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:21.976]                             info, version)
[13:37:21.976]                         }
[13:37:21.976]                         base::stop(msg)
[13:37:21.976]                       }
[13:37:21.976]                     })
[13:37:21.976]                   }
[13:37:21.976]                   ...future.strategy.old <- future::plan("list")
[13:37:21.976]                   options(future.plan = NULL)
[13:37:21.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.976]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:37:21.976]                 }
[13:37:21.976]                 ...future.workdir <- getwd()
[13:37:21.976]             }
[13:37:21.976]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:21.976]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:21.976]         }
[13:37:21.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:21.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:21.976]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:21.976]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:21.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:21.976]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:21.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:21.976]             base::names(...future.oldOptions))
[13:37:21.976]     }
[13:37:21.976]     if (FALSE) {
[13:37:21.976]     }
[13:37:21.976]     else {
[13:37:21.976]         if (TRUE) {
[13:37:21.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:21.976]                 open = "w")
[13:37:21.976]         }
[13:37:21.976]         else {
[13:37:21.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:21.976]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:21.976]         }
[13:37:21.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:21.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:21.976]             base::sink(type = "output", split = FALSE)
[13:37:21.976]             base::close(...future.stdout)
[13:37:21.976]         }, add = TRUE)
[13:37:21.976]     }
[13:37:21.976]     ...future.frame <- base::sys.nframe()
[13:37:21.976]     ...future.conditions <- base::list()
[13:37:21.976]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:21.976]     if (FALSE) {
[13:37:21.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:21.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:21.976]     }
[13:37:21.976]     ...future.result <- base::tryCatch({
[13:37:21.976]         base::withCallingHandlers({
[13:37:21.976]             ...future.value <- base::withVisible(base::local(subset(data, 
[13:37:21.976]                 a == 2)))
[13:37:21.976]             future::FutureResult(value = ...future.value$value, 
[13:37:21.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.976]                   ...future.rng), globalenv = if (FALSE) 
[13:37:21.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:21.976]                     ...future.globalenv.names))
[13:37:21.976]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:21.976]         }, condition = base::local({
[13:37:21.976]             c <- base::c
[13:37:21.976]             inherits <- base::inherits
[13:37:21.976]             invokeRestart <- base::invokeRestart
[13:37:21.976]             length <- base::length
[13:37:21.976]             list <- base::list
[13:37:21.976]             seq.int <- base::seq.int
[13:37:21.976]             signalCondition <- base::signalCondition
[13:37:21.976]             sys.calls <- base::sys.calls
[13:37:21.976]             `[[` <- base::`[[`
[13:37:21.976]             `+` <- base::`+`
[13:37:21.976]             `<<-` <- base::`<<-`
[13:37:21.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:21.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:21.976]                   3L)]
[13:37:21.976]             }
[13:37:21.976]             function(cond) {
[13:37:21.976]                 is_error <- inherits(cond, "error")
[13:37:21.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:21.976]                   NULL)
[13:37:21.976]                 if (is_error) {
[13:37:21.976]                   sessionInformation <- function() {
[13:37:21.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:21.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:21.976]                       search = base::search(), system = base::Sys.info())
[13:37:21.976]                   }
[13:37:21.976]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:21.976]                     cond$call), session = sessionInformation(), 
[13:37:21.976]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:21.976]                   signalCondition(cond)
[13:37:21.976]                 }
[13:37:21.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:21.976]                 "immediateCondition"))) {
[13:37:21.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:21.976]                   ...future.conditions[[length(...future.conditions) + 
[13:37:21.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:21.976]                   if (TRUE && !signal) {
[13:37:21.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.976]                     {
[13:37:21.976]                       inherits <- base::inherits
[13:37:21.976]                       invokeRestart <- base::invokeRestart
[13:37:21.976]                       is.null <- base::is.null
[13:37:21.976]                       muffled <- FALSE
[13:37:21.976]                       if (inherits(cond, "message")) {
[13:37:21.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.976]                         if (muffled) 
[13:37:21.976]                           invokeRestart("muffleMessage")
[13:37:21.976]                       }
[13:37:21.976]                       else if (inherits(cond, "warning")) {
[13:37:21.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.976]                         if (muffled) 
[13:37:21.976]                           invokeRestart("muffleWarning")
[13:37:21.976]                       }
[13:37:21.976]                       else if (inherits(cond, "condition")) {
[13:37:21.976]                         if (!is.null(pattern)) {
[13:37:21.976]                           computeRestarts <- base::computeRestarts
[13:37:21.976]                           grepl <- base::grepl
[13:37:21.976]                           restarts <- computeRestarts(cond)
[13:37:21.976]                           for (restart in restarts) {
[13:37:21.976]                             name <- restart$name
[13:37:21.976]                             if (is.null(name)) 
[13:37:21.976]                               next
[13:37:21.976]                             if (!grepl(pattern, name)) 
[13:37:21.976]                               next
[13:37:21.976]                             invokeRestart(restart)
[13:37:21.976]                             muffled <- TRUE
[13:37:21.976]                             break
[13:37:21.976]                           }
[13:37:21.976]                         }
[13:37:21.976]                       }
[13:37:21.976]                       invisible(muffled)
[13:37:21.976]                     }
[13:37:21.976]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.976]                   }
[13:37:21.976]                 }
[13:37:21.976]                 else {
[13:37:21.976]                   if (TRUE) {
[13:37:21.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:21.976]                     {
[13:37:21.976]                       inherits <- base::inherits
[13:37:21.976]                       invokeRestart <- base::invokeRestart
[13:37:21.976]                       is.null <- base::is.null
[13:37:21.976]                       muffled <- FALSE
[13:37:21.976]                       if (inherits(cond, "message")) {
[13:37:21.976]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:21.976]                         if (muffled) 
[13:37:21.976]                           invokeRestart("muffleMessage")
[13:37:21.976]                       }
[13:37:21.976]                       else if (inherits(cond, "warning")) {
[13:37:21.976]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:21.976]                         if (muffled) 
[13:37:21.976]                           invokeRestart("muffleWarning")
[13:37:21.976]                       }
[13:37:21.976]                       else if (inherits(cond, "condition")) {
[13:37:21.976]                         if (!is.null(pattern)) {
[13:37:21.976]                           computeRestarts <- base::computeRestarts
[13:37:21.976]                           grepl <- base::grepl
[13:37:21.976]                           restarts <- computeRestarts(cond)
[13:37:21.976]                           for (restart in restarts) {
[13:37:21.976]                             name <- restart$name
[13:37:21.976]                             if (is.null(name)) 
[13:37:21.976]                               next
[13:37:21.976]                             if (!grepl(pattern, name)) 
[13:37:21.976]                               next
[13:37:21.976]                             invokeRestart(restart)
[13:37:21.976]                             muffled <- TRUE
[13:37:21.976]                             break
[13:37:21.976]                           }
[13:37:21.976]                         }
[13:37:21.976]                       }
[13:37:21.976]                       invisible(muffled)
[13:37:21.976]                     }
[13:37:21.976]                     muffleCondition(cond, pattern = "^muffle")
[13:37:21.976]                   }
[13:37:21.976]                 }
[13:37:21.976]             }
[13:37:21.976]         }))
[13:37:21.976]     }, error = function(ex) {
[13:37:21.976]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:21.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:21.976]                 ...future.rng), started = ...future.startTime, 
[13:37:21.976]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:21.976]             version = "1.8"), class = "FutureResult")
[13:37:21.976]     }, finally = {
[13:37:21.976]         if (!identical(...future.workdir, getwd())) 
[13:37:21.976]             setwd(...future.workdir)
[13:37:21.976]         {
[13:37:21.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:21.976]                 ...future.oldOptions$nwarnings <- NULL
[13:37:21.976]             }
[13:37:21.976]             base::options(...future.oldOptions)
[13:37:21.976]             if (.Platform$OS.type == "windows") {
[13:37:21.976]                 old_names <- names(...future.oldEnvVars)
[13:37:21.976]                 envs <- base::Sys.getenv()
[13:37:21.976]                 names <- names(envs)
[13:37:21.976]                 common <- intersect(names, old_names)
[13:37:21.976]                 added <- setdiff(names, old_names)
[13:37:21.976]                 removed <- setdiff(old_names, names)
[13:37:21.976]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:21.976]                   envs[common]]
[13:37:21.976]                 NAMES <- toupper(changed)
[13:37:21.976]                 args <- list()
[13:37:21.976]                 for (kk in seq_along(NAMES)) {
[13:37:21.976]                   name <- changed[[kk]]
[13:37:21.976]                   NAME <- NAMES[[kk]]
[13:37:21.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.976]                     next
[13:37:21.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.976]                 }
[13:37:21.976]                 NAMES <- toupper(added)
[13:37:21.976]                 for (kk in seq_along(NAMES)) {
[13:37:21.976]                   name <- added[[kk]]
[13:37:21.976]                   NAME <- NAMES[[kk]]
[13:37:21.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.976]                     next
[13:37:21.976]                   args[[name]] <- ""
[13:37:21.976]                 }
[13:37:21.976]                 NAMES <- toupper(removed)
[13:37:21.976]                 for (kk in seq_along(NAMES)) {
[13:37:21.976]                   name <- removed[[kk]]
[13:37:21.976]                   NAME <- NAMES[[kk]]
[13:37:21.976]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:21.976]                     next
[13:37:21.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:21.976]                 }
[13:37:21.976]                 if (length(args) > 0) 
[13:37:21.976]                   base::do.call(base::Sys.setenv, args = args)
[13:37:21.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:21.976]             }
[13:37:21.976]             else {
[13:37:21.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:21.976]             }
[13:37:21.976]             {
[13:37:21.976]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:21.976]                   0L) {
[13:37:21.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:21.976]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:21.976]                   base::options(opts)
[13:37:21.976]                 }
[13:37:21.976]                 {
[13:37:21.976]                   {
[13:37:21.976]                     NULL
[13:37:21.976]                     RNGkind("Mersenne-Twister")
[13:37:21.976]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:37:21.976]                       inherits = FALSE)
[13:37:21.976]                   }
[13:37:21.976]                   options(future.plan = NULL)
[13:37:21.976]                   if (is.na(NA_character_)) 
[13:37:21.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:21.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:21.976]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:21.976]                     .init = FALSE)
[13:37:21.976]                 }
[13:37:21.976]             }
[13:37:21.976]         }
[13:37:21.976]     })
[13:37:21.976]     if (TRUE) {
[13:37:21.976]         base::sink(type = "output", split = FALSE)
[13:37:21.976]         if (TRUE) {
[13:37:21.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:21.976]         }
[13:37:21.976]         else {
[13:37:21.976]             ...future.result["stdout"] <- base::list(NULL)
[13:37:21.976]         }
[13:37:21.976]         base::close(...future.stdout)
[13:37:21.976]         ...future.stdout <- NULL
[13:37:21.976]     }
[13:37:21.976]     ...future.result$conditions <- ...future.conditions
[13:37:21.976]     ...future.result$finished <- base::Sys.time()
[13:37:21.976]     ...future.result
[13:37:21.976] }
[13:37:22.009]  - Condition #40: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.978] assign_globals() ...
[13:37:22.009]  - Condition #41: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.978] List of 1
[13:37:21.978]  $ data:'data.frame':	3 obs. of  2 variables:
[13:37:21.978]   ..$ a: int [1:3] 1 2 3
[13:37:21.978]   ..$ b: int [1:3] 3 2 1
[13:37:21.978]  - attr(*, "where")=List of 1
[13:37:21.978]   ..$ data:<environment: R_EmptyEnv> 
[13:37:21.978]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:37:21.978]  - attr(*, "resolved")= logi FALSE
[13:37:21.978]  - attr(*, "total_size")= num 128
[13:37:21.978]  - attr(*, "already-done")= logi TRUE
[13:37:22.010]  - Condition #42: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.983] - copied ‘data’ to environment
[13:37:22.010]  - Condition #43: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.983] assign_globals() ... done
[13:37:22.010]  - Condition #44: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.983] plan(): Setting new future strategy stack:
[13:37:22.010]  - Condition #45: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.983] List of future strategies:
[13:37:21.983] 1. sequential:
[13:37:21.983]    - args: function (..., envir = parent.frame())
[13:37:21.983]    - tweaked: FALSE
[13:37:21.983]    - call: NULL
[13:37:22.010]  - Condition #46: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.984] plan(): nbrOfWorkers() = 1
[13:37:22.010]  - Condition #47: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.985] plan(): Setting new future strategy stack:
[13:37:22.011]  - Condition #48: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.985] List of future strategies:
[13:37:21.985] 1. multisession:
[13:37:21.985]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:21.985]    - tweaked: FALSE
[13:37:21.985]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.011]  - Condition #49: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.989] plan(): nbrOfWorkers() = 1
[13:37:22.011]  - Condition #50: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.990] SequentialFuture started (and completed)
[13:37:22.011]  - Condition #51: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.990] - Launch lazy future ... done
[13:37:22.011]  - Condition #52: ‘simpleMessage’, ‘message’, ‘condition’
[13:37:21.990] run() for ‘SequentialFuture’ ... done
[13:37:22.011] signalConditions() ... done
- plan(list('multicore', 'multisession')) ... DONE
- plan(list('multisession', 'sequential')) ...
[13:37:22.012] plan(): Setting new future strategy stack:
[13:37:22.012] List of future strategies:
[13:37:22.012] 1. multisession:
[13:37:22.012]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:22.012]    - tweaked: FALSE
[13:37:22.012]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.012] 2. sequential:
[13:37:22.012]    - args: function (..., envir = parent.frame())
[13:37:22.012]    - tweaked: FALSE
[13:37:22.012]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.013] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:22.013] multisession:
[13:37:22.013] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:22.013] - tweaked: FALSE
[13:37:22.013] - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.017] getGlobalsAndPackages() ...
[13:37:22.017] Not searching for globals
[13:37:22.017] - globals: [0] <none>
[13:37:22.018] getGlobalsAndPackages() ... DONE
[13:37:22.018] [local output] makeClusterPSOCK() ...
[13:37:22.022] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:22.022] [local output] Base port: 11627
[13:37:22.022] [local output] Getting setup options for 2 cluster nodes ...
[13:37:22.022] [local output]  - Node 1 of 2 ...
[13:37:22.023] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:22.024] [local output] Rscript port: 11627

[13:37:22.024] [local output]  - Node 2 of 2 ...
[13:37:22.024] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:22.025] [local output] Rscript port: 11627

[13:37:22.025] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:22.025] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:22.026] [local output] Setting up PSOCK nodes in parallel
[13:37:22.026] List of 36
[13:37:22.026]  $ worker          : chr "localhost"
[13:37:22.026]   ..- attr(*, "localhost")= logi TRUE
[13:37:22.026]  $ master          : chr "localhost"
[13:37:22.026]  $ port            : int 11627
[13:37:22.026]  $ connectTimeout  : num 120
[13:37:22.026]  $ timeout         : num 2592000
[13:37:22.026]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:22.026]  $ homogeneous     : logi TRUE
[13:37:22.026]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:22.026]  $ rscript_envs    : NULL
[13:37:22.026]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:22.026]  $ rscript_startup : NULL
[13:37:22.026]  $ rscript_sh      : chr "sh"
[13:37:22.026]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:22.026]  $ methods         : logi TRUE
[13:37:22.026]  $ socketOptions   : chr "no-delay"
[13:37:22.026]  $ useXDR          : logi FALSE
[13:37:22.026]  $ outfile         : chr "/dev/null"
[13:37:22.026]  $ renice          : int NA
[13:37:22.026]  $ rshcmd          : NULL
[13:37:22.026]  $ user            : chr(0) 
[13:37:22.026]  $ revtunnel       : logi FALSE
[13:37:22.026]  $ rshlogfile      : NULL
[13:37:22.026]  $ rshopts         : chr(0) 
[13:37:22.026]  $ rank            : int 1
[13:37:22.026]  $ manual          : logi FALSE
[13:37:22.026]  $ dryrun          : logi FALSE
[13:37:22.026]  $ quiet           : logi FALSE
[13:37:22.026]  $ setup_strategy  : chr "parallel"
[13:37:22.026]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:22.026]  $ pidfile         : chr "/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.157632e89a854.pid"
[13:37:22.026]  $ rshcmd_label    : NULL
[13:37:22.026]  $ rsh_call        : NULL
[13:37:22.026]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:22.026]  $ localMachine    : logi TRUE
[13:37:22.026]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:22.026]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:22.026]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:22.026]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:22.026]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:22.026]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:22.026]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:22.026]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:22.026]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:22.026]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:22.026]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:22.026]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:22.026]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:22.026]  $ arguments       :List of 28
[13:37:22.026]   ..$ worker          : chr "localhost"
[13:37:22.026]   ..$ master          : NULL
[13:37:22.026]   ..$ port            : int 11627
[13:37:22.026]   ..$ connectTimeout  : num 120
[13:37:22.026]   ..$ timeout         : num 2592000
[13:37:22.026]   ..$ rscript         : NULL
[13:37:22.026]   ..$ homogeneous     : NULL
[13:37:22.026]   ..$ rscript_args    : NULL
[13:37:22.026]   ..$ rscript_envs    : NULL
[13:37:22.026]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:22.026]   ..$ rscript_startup : NULL
[13:37:22.026]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:22.026]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:22.026]   ..$ methods         : logi TRUE
[13:37:22.026]   ..$ socketOptions   : chr "no-delay"
[13:37:22.026]   ..$ useXDR          : logi FALSE
[13:37:22.026]   ..$ outfile         : chr "/dev/null"
[13:37:22.026]   ..$ renice          : int NA
[13:37:22.026]   ..$ rshcmd          : NULL
[13:37:22.026]   ..$ user            : NULL
[13:37:22.026]   ..$ revtunnel       : logi NA
[13:37:22.026]   ..$ rshlogfile      : NULL
[13:37:22.026]   ..$ rshopts         : NULL
[13:37:22.026]   ..$ rank            : int 1
[13:37:22.026]   ..$ manual          : logi FALSE
[13:37:22.026]   ..$ dryrun          : logi FALSE
[13:37:22.026]   ..$ quiet           : logi FALSE
[13:37:22.026]   ..$ setup_strategy  : chr "parallel"
[13:37:22.026]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:22.047] [local output] System call to launch all workers:
[13:37:22.047] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.157632e89a854.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11627 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:22.047] [local output] Starting PSOCK main server
[13:37:22.048] [local output] Workers launched
[13:37:22.048] [local output] Waiting for workers to connect back
[13:37:22.048]  - [local output] 0 workers out of 2 ready
[13:37:22.301]  - [local output] 0 workers out of 2 ready
[13:37:22.301]  - [local output] 1 workers out of 2 ready
[13:37:22.302]  - [local output] 2 workers out of 2 ready
[13:37:22.302] [local output] Launching of workers completed
[13:37:22.302] [local output] Collecting session information from workers
[13:37:22.302] [local output]  - Worker #1 of 2
[13:37:22.303] [local output]  - Worker #2 of 2
[13:37:22.303] [local output] makeClusterPSOCK() ... done
[13:37:22.314] Packages needed by the future expression (n = 0): <none>
[13:37:22.315] Packages needed by future strategies (n = 1): ‘future’
[13:37:22.315] {
[13:37:22.315]     {
[13:37:22.315]         {
[13:37:22.315]             ...future.startTime <- base::Sys.time()
[13:37:22.315]             {
[13:37:22.315]                 {
[13:37:22.315]                   {
[13:37:22.315]                     {
[13:37:22.315]                       {
[13:37:22.315]                         base::local({
[13:37:22.315]                           has_future <- base::requireNamespace("future", 
[13:37:22.315]                             quietly = TRUE)
[13:37:22.315]                           if (has_future) {
[13:37:22.315]                             ns <- base::getNamespace("future")
[13:37:22.315]                             version <- ns[[".package"]][["version"]]
[13:37:22.315]                             if (is.null(version)) 
[13:37:22.315]                               version <- utils::packageVersion("future")
[13:37:22.315]                           }
[13:37:22.315]                           else {
[13:37:22.315]                             version <- NULL
[13:37:22.315]                           }
[13:37:22.315]                           if (!has_future || version < "1.8.0") {
[13:37:22.315]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:22.315]                               "", base::R.version$version.string), 
[13:37:22.315]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:22.315]                                 base::R.version$platform, 8 * 
[13:37:22.315]                                   base::.Machine$sizeof.pointer), 
[13:37:22.315]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:22.315]                                 "release", "version")], collapse = " "), 
[13:37:22.315]                               hostname = base::Sys.info()[["nodename"]])
[13:37:22.315]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:22.315]                               info)
[13:37:22.315]                             info <- base::paste(info, collapse = "; ")
[13:37:22.315]                             if (!has_future) {
[13:37:22.315]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:22.315]                                 info)
[13:37:22.315]                             }
[13:37:22.315]                             else {
[13:37:22.315]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:22.315]                                 info, version)
[13:37:22.315]                             }
[13:37:22.315]                             base::stop(msg)
[13:37:22.315]                           }
[13:37:22.315]                         })
[13:37:22.315]                       }
[13:37:22.315]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:22.315]                       base::options(mc.cores = 1L)
[13:37:22.315]                     }
[13:37:22.315]                     base::local({
[13:37:22.315]                       for (pkg in "future") {
[13:37:22.315]                         base::loadNamespace(pkg)
[13:37:22.315]                         base::library(pkg, character.only = TRUE)
[13:37:22.315]                       }
[13:37:22.315]                     })
[13:37:22.315]                   }
[13:37:22.315]                   ...future.strategy.old <- future::plan("list")
[13:37:22.315]                   options(future.plan = NULL)
[13:37:22.315]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.315]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:22.315]                   {
[13:37:22.315]                     future <- SequentialFuture(..., envir = envir)
[13:37:22.315]                     if (!future$lazy) 
[13:37:22.315]                       future <- run(future)
[13:37:22.315]                     invisible(future)
[13:37:22.315]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:22.315]                 }
[13:37:22.315]                 ...future.workdir <- getwd()
[13:37:22.315]             }
[13:37:22.315]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:22.315]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:22.315]         }
[13:37:22.315]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:22.315]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:22.315]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:22.315]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:22.315]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:22.315]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:22.315]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:22.315]             base::names(...future.oldOptions))
[13:37:22.315]     }
[13:37:22.315]     if (FALSE) {
[13:37:22.315]     }
[13:37:22.315]     else {
[13:37:22.315]         if (TRUE) {
[13:37:22.315]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:22.315]                 open = "w")
[13:37:22.315]         }
[13:37:22.315]         else {
[13:37:22.315]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:22.315]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:22.315]         }
[13:37:22.315]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:22.315]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:22.315]             base::sink(type = "output", split = FALSE)
[13:37:22.315]             base::close(...future.stdout)
[13:37:22.315]         }, add = TRUE)
[13:37:22.315]     }
[13:37:22.315]     ...future.frame <- base::sys.nframe()
[13:37:22.315]     ...future.conditions <- base::list()
[13:37:22.315]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:22.315]     if (FALSE) {
[13:37:22.315]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:22.315]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:22.315]     }
[13:37:22.315]     ...future.result <- base::tryCatch({
[13:37:22.315]         base::withCallingHandlers({
[13:37:22.315]             ...future.value <- base::withVisible(base::local({
[13:37:22.315]                 ...future.makeSendCondition <- base::local({
[13:37:22.315]                   sendCondition <- NULL
[13:37:22.315]                   function(frame = 1L) {
[13:37:22.315]                     if (is.function(sendCondition)) 
[13:37:22.315]                       return(sendCondition)
[13:37:22.315]                     ns <- getNamespace("parallel")
[13:37:22.315]                     if (exists("sendData", mode = "function", 
[13:37:22.315]                       envir = ns)) {
[13:37:22.315]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:22.315]                         envir = ns)
[13:37:22.315]                       envir <- sys.frame(frame)
[13:37:22.315]                       master <- NULL
[13:37:22.315]                       while (!identical(envir, .GlobalEnv) && 
[13:37:22.315]                         !identical(envir, emptyenv())) {
[13:37:22.315]                         if (exists("master", mode = "list", envir = envir, 
[13:37:22.315]                           inherits = FALSE)) {
[13:37:22.315]                           master <- get("master", mode = "list", 
[13:37:22.315]                             envir = envir, inherits = FALSE)
[13:37:22.315]                           if (inherits(master, c("SOCKnode", 
[13:37:22.315]                             "SOCK0node"))) {
[13:37:22.315]                             sendCondition <<- function(cond) {
[13:37:22.315]                               data <- list(type = "VALUE", value = cond, 
[13:37:22.315]                                 success = TRUE)
[13:37:22.315]                               parallel_sendData(master, data)
[13:37:22.315]                             }
[13:37:22.315]                             return(sendCondition)
[13:37:22.315]                           }
[13:37:22.315]                         }
[13:37:22.315]                         frame <- frame + 1L
[13:37:22.315]                         envir <- sys.frame(frame)
[13:37:22.315]                       }
[13:37:22.315]                     }
[13:37:22.315]                     sendCondition <<- function(cond) NULL
[13:37:22.315]                   }
[13:37:22.315]                 })
[13:37:22.315]                 withCallingHandlers({
[13:37:22.315]                   NA
[13:37:22.315]                 }, immediateCondition = function(cond) {
[13:37:22.315]                   sendCondition <- ...future.makeSendCondition()
[13:37:22.315]                   sendCondition(cond)
[13:37:22.315]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.315]                   {
[13:37:22.315]                     inherits <- base::inherits
[13:37:22.315]                     invokeRestart <- base::invokeRestart
[13:37:22.315]                     is.null <- base::is.null
[13:37:22.315]                     muffled <- FALSE
[13:37:22.315]                     if (inherits(cond, "message")) {
[13:37:22.315]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:22.315]                       if (muffled) 
[13:37:22.315]                         invokeRestart("muffleMessage")
[13:37:22.315]                     }
[13:37:22.315]                     else if (inherits(cond, "warning")) {
[13:37:22.315]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:22.315]                       if (muffled) 
[13:37:22.315]                         invokeRestart("muffleWarning")
[13:37:22.315]                     }
[13:37:22.315]                     else if (inherits(cond, "condition")) {
[13:37:22.315]                       if (!is.null(pattern)) {
[13:37:22.315]                         computeRestarts <- base::computeRestarts
[13:37:22.315]                         grepl <- base::grepl
[13:37:22.315]                         restarts <- computeRestarts(cond)
[13:37:22.315]                         for (restart in restarts) {
[13:37:22.315]                           name <- restart$name
[13:37:22.315]                           if (is.null(name)) 
[13:37:22.315]                             next
[13:37:22.315]                           if (!grepl(pattern, name)) 
[13:37:22.315]                             next
[13:37:22.315]                           invokeRestart(restart)
[13:37:22.315]                           muffled <- TRUE
[13:37:22.315]                           break
[13:37:22.315]                         }
[13:37:22.315]                       }
[13:37:22.315]                     }
[13:37:22.315]                     invisible(muffled)
[13:37:22.315]                   }
[13:37:22.315]                   muffleCondition(cond)
[13:37:22.315]                 })
[13:37:22.315]             }))
[13:37:22.315]             future::FutureResult(value = ...future.value$value, 
[13:37:22.315]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.315]                   ...future.rng), globalenv = if (FALSE) 
[13:37:22.315]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:22.315]                     ...future.globalenv.names))
[13:37:22.315]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:22.315]         }, condition = base::local({
[13:37:22.315]             c <- base::c
[13:37:22.315]             inherits <- base::inherits
[13:37:22.315]             invokeRestart <- base::invokeRestart
[13:37:22.315]             length <- base::length
[13:37:22.315]             list <- base::list
[13:37:22.315]             seq.int <- base::seq.int
[13:37:22.315]             signalCondition <- base::signalCondition
[13:37:22.315]             sys.calls <- base::sys.calls
[13:37:22.315]             `[[` <- base::`[[`
[13:37:22.315]             `+` <- base::`+`
[13:37:22.315]             `<<-` <- base::`<<-`
[13:37:22.315]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:22.315]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:22.315]                   3L)]
[13:37:22.315]             }
[13:37:22.315]             function(cond) {
[13:37:22.315]                 is_error <- inherits(cond, "error")
[13:37:22.315]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:22.315]                   NULL)
[13:37:22.315]                 if (is_error) {
[13:37:22.315]                   sessionInformation <- function() {
[13:37:22.315]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:22.315]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:22.315]                       search = base::search(), system = base::Sys.info())
[13:37:22.315]                   }
[13:37:22.315]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.315]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:22.315]                     cond$call), session = sessionInformation(), 
[13:37:22.315]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:22.315]                   signalCondition(cond)
[13:37:22.315]                 }
[13:37:22.315]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:22.315]                 "immediateCondition"))) {
[13:37:22.315]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:22.315]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.315]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:22.315]                   if (TRUE && !signal) {
[13:37:22.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.315]                     {
[13:37:22.315]                       inherits <- base::inherits
[13:37:22.315]                       invokeRestart <- base::invokeRestart
[13:37:22.315]                       is.null <- base::is.null
[13:37:22.315]                       muffled <- FALSE
[13:37:22.315]                       if (inherits(cond, "message")) {
[13:37:22.315]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.315]                         if (muffled) 
[13:37:22.315]                           invokeRestart("muffleMessage")
[13:37:22.315]                       }
[13:37:22.315]                       else if (inherits(cond, "warning")) {
[13:37:22.315]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.315]                         if (muffled) 
[13:37:22.315]                           invokeRestart("muffleWarning")
[13:37:22.315]                       }
[13:37:22.315]                       else if (inherits(cond, "condition")) {
[13:37:22.315]                         if (!is.null(pattern)) {
[13:37:22.315]                           computeRestarts <- base::computeRestarts
[13:37:22.315]                           grepl <- base::grepl
[13:37:22.315]                           restarts <- computeRestarts(cond)
[13:37:22.315]                           for (restart in restarts) {
[13:37:22.315]                             name <- restart$name
[13:37:22.315]                             if (is.null(name)) 
[13:37:22.315]                               next
[13:37:22.315]                             if (!grepl(pattern, name)) 
[13:37:22.315]                               next
[13:37:22.315]                             invokeRestart(restart)
[13:37:22.315]                             muffled <- TRUE
[13:37:22.315]                             break
[13:37:22.315]                           }
[13:37:22.315]                         }
[13:37:22.315]                       }
[13:37:22.315]                       invisible(muffled)
[13:37:22.315]                     }
[13:37:22.315]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.315]                   }
[13:37:22.315]                 }
[13:37:22.315]                 else {
[13:37:22.315]                   if (TRUE) {
[13:37:22.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.315]                     {
[13:37:22.315]                       inherits <- base::inherits
[13:37:22.315]                       invokeRestart <- base::invokeRestart
[13:37:22.315]                       is.null <- base::is.null
[13:37:22.315]                       muffled <- FALSE
[13:37:22.315]                       if (inherits(cond, "message")) {
[13:37:22.315]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.315]                         if (muffled) 
[13:37:22.315]                           invokeRestart("muffleMessage")
[13:37:22.315]                       }
[13:37:22.315]                       else if (inherits(cond, "warning")) {
[13:37:22.315]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.315]                         if (muffled) 
[13:37:22.315]                           invokeRestart("muffleWarning")
[13:37:22.315]                       }
[13:37:22.315]                       else if (inherits(cond, "condition")) {
[13:37:22.315]                         if (!is.null(pattern)) {
[13:37:22.315]                           computeRestarts <- base::computeRestarts
[13:37:22.315]                           grepl <- base::grepl
[13:37:22.315]                           restarts <- computeRestarts(cond)
[13:37:22.315]                           for (restart in restarts) {
[13:37:22.315]                             name <- restart$name
[13:37:22.315]                             if (is.null(name)) 
[13:37:22.315]                               next
[13:37:22.315]                             if (!grepl(pattern, name)) 
[13:37:22.315]                               next
[13:37:22.315]                             invokeRestart(restart)
[13:37:22.315]                             muffled <- TRUE
[13:37:22.315]                             break
[13:37:22.315]                           }
[13:37:22.315]                         }
[13:37:22.315]                       }
[13:37:22.315]                       invisible(muffled)
[13:37:22.315]                     }
[13:37:22.315]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.315]                   }
[13:37:22.315]                 }
[13:37:22.315]             }
[13:37:22.315]         }))
[13:37:22.315]     }, error = function(ex) {
[13:37:22.315]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:22.315]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.315]                 ...future.rng), started = ...future.startTime, 
[13:37:22.315]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:22.315]             version = "1.8"), class = "FutureResult")
[13:37:22.315]     }, finally = {
[13:37:22.315]         if (!identical(...future.workdir, getwd())) 
[13:37:22.315]             setwd(...future.workdir)
[13:37:22.315]         {
[13:37:22.315]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:22.315]                 ...future.oldOptions$nwarnings <- NULL
[13:37:22.315]             }
[13:37:22.315]             base::options(...future.oldOptions)
[13:37:22.315]             if (.Platform$OS.type == "windows") {
[13:37:22.315]                 old_names <- names(...future.oldEnvVars)
[13:37:22.315]                 envs <- base::Sys.getenv()
[13:37:22.315]                 names <- names(envs)
[13:37:22.315]                 common <- intersect(names, old_names)
[13:37:22.315]                 added <- setdiff(names, old_names)
[13:37:22.315]                 removed <- setdiff(old_names, names)
[13:37:22.315]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:22.315]                   envs[common]]
[13:37:22.315]                 NAMES <- toupper(changed)
[13:37:22.315]                 args <- list()
[13:37:22.315]                 for (kk in seq_along(NAMES)) {
[13:37:22.315]                   name <- changed[[kk]]
[13:37:22.315]                   NAME <- NAMES[[kk]]
[13:37:22.315]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.315]                     next
[13:37:22.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.315]                 }
[13:37:22.315]                 NAMES <- toupper(added)
[13:37:22.315]                 for (kk in seq_along(NAMES)) {
[13:37:22.315]                   name <- added[[kk]]
[13:37:22.315]                   NAME <- NAMES[[kk]]
[13:37:22.315]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.315]                     next
[13:37:22.315]                   args[[name]] <- ""
[13:37:22.315]                 }
[13:37:22.315]                 NAMES <- toupper(removed)
[13:37:22.315]                 for (kk in seq_along(NAMES)) {
[13:37:22.315]                   name <- removed[[kk]]
[13:37:22.315]                   NAME <- NAMES[[kk]]
[13:37:22.315]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.315]                     next
[13:37:22.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.315]                 }
[13:37:22.315]                 if (length(args) > 0) 
[13:37:22.315]                   base::do.call(base::Sys.setenv, args = args)
[13:37:22.315]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:22.315]             }
[13:37:22.315]             else {
[13:37:22.315]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:22.315]             }
[13:37:22.315]             {
[13:37:22.315]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:22.315]                   0L) {
[13:37:22.315]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:22.315]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:22.315]                   base::options(opts)
[13:37:22.315]                 }
[13:37:22.315]                 {
[13:37:22.315]                   {
[13:37:22.315]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:22.315]                     NULL
[13:37:22.315]                   }
[13:37:22.315]                   options(future.plan = NULL)
[13:37:22.315]                   if (is.na(NA_character_)) 
[13:37:22.315]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.315]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:22.315]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:22.315]                     .init = FALSE)
[13:37:22.315]                 }
[13:37:22.315]             }
[13:37:22.315]         }
[13:37:22.315]     })
[13:37:22.315]     if (TRUE) {
[13:37:22.315]         base::sink(type = "output", split = FALSE)
[13:37:22.315]         if (TRUE) {
[13:37:22.315]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:22.315]         }
[13:37:22.315]         else {
[13:37:22.315]             ...future.result["stdout"] <- base::list(NULL)
[13:37:22.315]         }
[13:37:22.315]         base::close(...future.stdout)
[13:37:22.315]         ...future.stdout <- NULL
[13:37:22.315]     }
[13:37:22.315]     ...future.result$conditions <- ...future.conditions
[13:37:22.315]     ...future.result$finished <- base::Sys.time()
[13:37:22.315]     ...future.result
[13:37:22.315] }
[13:37:22.370] MultisessionFuture started
[13:37:22.370] result() for ClusterFuture ...
[13:37:22.370] receiveMessageFromWorker() for ClusterFuture ...
[13:37:22.371] - Validating connection of MultisessionFuture
[13:37:22.409] - received message: FutureResult
[13:37:22.410] - Received FutureResult
[13:37:22.410] - Erased future from FutureRegistry
[13:37:22.410] result() for ClusterFuture ...
[13:37:22.410] - result already collected: FutureResult
[13:37:22.410] result() for ClusterFuture ... done
[13:37:22.410] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:22.410] result() for ClusterFuture ... done
[13:37:22.411] result() for ClusterFuture ...
[13:37:22.411] - result already collected: FutureResult
[13:37:22.411] result() for ClusterFuture ... done
[13:37:22.411] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:22.415] plan(): nbrOfWorkers() = 2
[13:37:22.415] getGlobalsAndPackages() ...
[13:37:22.415] Searching for globals...
[13:37:22.436] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:22.436] Searching for globals ... DONE
[13:37:22.436] Resolving globals: FALSE
[13:37:22.437] The total size of the 2 globals is 55.46 KiB (56792 bytes)
[13:37:22.438] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 55.46 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (55.34 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:22.438] - globals: [2] ‘nested’, ‘strategy2’
[13:37:22.438] - packages: [1] ‘future’
[13:37:22.438] getGlobalsAndPackages() ... DONE
[13:37:22.439] run() for ‘Future’ ...
[13:37:22.439] - state: ‘created’
[13:37:22.439] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:22.452] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:22.453] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:22.453]   - Field: ‘node’
[13:37:22.453]   - Field: ‘label’
[13:37:22.453]   - Field: ‘local’
[13:37:22.453]   - Field: ‘owner’
[13:37:22.453]   - Field: ‘envir’
[13:37:22.453]   - Field: ‘workers’
[13:37:22.453]   - Field: ‘packages’
[13:37:22.453]   - Field: ‘gc’
[13:37:22.453]   - Field: ‘conditions’
[13:37:22.453]   - Field: ‘persistent’
[13:37:22.454]   - Field: ‘expr’
[13:37:22.454]   - Field: ‘uuid’
[13:37:22.454]   - Field: ‘seed’
[13:37:22.454]   - Field: ‘version’
[13:37:22.454]   - Field: ‘result’
[13:37:22.454]   - Field: ‘asynchronous’
[13:37:22.454]   - Field: ‘calls’
[13:37:22.454]   - Field: ‘globals’
[13:37:22.454]   - Field: ‘stdout’
[13:37:22.454]   - Field: ‘earlySignal’
[13:37:22.455]   - Field: ‘lazy’
[13:37:22.455]   - Field: ‘state’
[13:37:22.455] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:22.455] - Launch lazy future ...
[13:37:22.455] Packages needed by the future expression (n = 1): ‘future’
[13:37:22.455] Packages needed by future strategies (n = 1): ‘future’
[13:37:22.456] {
[13:37:22.456]     {
[13:37:22.456]         {
[13:37:22.456]             ...future.startTime <- base::Sys.time()
[13:37:22.456]             {
[13:37:22.456]                 {
[13:37:22.456]                   {
[13:37:22.456]                     {
[13:37:22.456]                       {
[13:37:22.456]                         base::local({
[13:37:22.456]                           has_future <- base::requireNamespace("future", 
[13:37:22.456]                             quietly = TRUE)
[13:37:22.456]                           if (has_future) {
[13:37:22.456]                             ns <- base::getNamespace("future")
[13:37:22.456]                             version <- ns[[".package"]][["version"]]
[13:37:22.456]                             if (is.null(version)) 
[13:37:22.456]                               version <- utils::packageVersion("future")
[13:37:22.456]                           }
[13:37:22.456]                           else {
[13:37:22.456]                             version <- NULL
[13:37:22.456]                           }
[13:37:22.456]                           if (!has_future || version < "1.8.0") {
[13:37:22.456]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:22.456]                               "", base::R.version$version.string), 
[13:37:22.456]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:22.456]                                 base::R.version$platform, 8 * 
[13:37:22.456]                                   base::.Machine$sizeof.pointer), 
[13:37:22.456]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:22.456]                                 "release", "version")], collapse = " "), 
[13:37:22.456]                               hostname = base::Sys.info()[["nodename"]])
[13:37:22.456]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:22.456]                               info)
[13:37:22.456]                             info <- base::paste(info, collapse = "; ")
[13:37:22.456]                             if (!has_future) {
[13:37:22.456]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:22.456]                                 info)
[13:37:22.456]                             }
[13:37:22.456]                             else {
[13:37:22.456]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:22.456]                                 info, version)
[13:37:22.456]                             }
[13:37:22.456]                             base::stop(msg)
[13:37:22.456]                           }
[13:37:22.456]                         })
[13:37:22.456]                       }
[13:37:22.456]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:22.456]                       base::options(mc.cores = 1L)
[13:37:22.456]                     }
[13:37:22.456]                     base::local({
[13:37:22.456]                       for (pkg in "future") {
[13:37:22.456]                         base::loadNamespace(pkg)
[13:37:22.456]                         base::library(pkg, character.only = TRUE)
[13:37:22.456]                       }
[13:37:22.456]                     })
[13:37:22.456]                   }
[13:37:22.456]                   ...future.strategy.old <- future::plan("list")
[13:37:22.456]                   options(future.plan = NULL)
[13:37:22.456]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.456]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:22.456]                   {
[13:37:22.456]                     future <- SequentialFuture(..., envir = envir)
[13:37:22.456]                     if (!future$lazy) 
[13:37:22.456]                       future <- run(future)
[13:37:22.456]                     invisible(future)
[13:37:22.456]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:22.456]                 }
[13:37:22.456]                 ...future.workdir <- getwd()
[13:37:22.456]             }
[13:37:22.456]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:22.456]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:22.456]         }
[13:37:22.456]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:22.456]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:22.456]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:22.456]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:22.456]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:22.456]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:22.456]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:22.456]             base::names(...future.oldOptions))
[13:37:22.456]     }
[13:37:22.456]     if (FALSE) {
[13:37:22.456]     }
[13:37:22.456]     else {
[13:37:22.456]         if (TRUE) {
[13:37:22.456]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:22.456]                 open = "w")
[13:37:22.456]         }
[13:37:22.456]         else {
[13:37:22.456]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:22.456]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:22.456]         }
[13:37:22.456]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:22.456]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:22.456]             base::sink(type = "output", split = FALSE)
[13:37:22.456]             base::close(...future.stdout)
[13:37:22.456]         }, add = TRUE)
[13:37:22.456]     }
[13:37:22.456]     ...future.frame <- base::sys.nframe()
[13:37:22.456]     ...future.conditions <- base::list()
[13:37:22.456]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:22.456]     if (FALSE) {
[13:37:22.456]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:22.456]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:22.456]     }
[13:37:22.456]     ...future.result <- base::tryCatch({
[13:37:22.456]         base::withCallingHandlers({
[13:37:22.456]             ...future.value <- base::withVisible(base::local({
[13:37:22.456]                 ...future.makeSendCondition <- base::local({
[13:37:22.456]                   sendCondition <- NULL
[13:37:22.456]                   function(frame = 1L) {
[13:37:22.456]                     if (is.function(sendCondition)) 
[13:37:22.456]                       return(sendCondition)
[13:37:22.456]                     ns <- getNamespace("parallel")
[13:37:22.456]                     if (exists("sendData", mode = "function", 
[13:37:22.456]                       envir = ns)) {
[13:37:22.456]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:22.456]                         envir = ns)
[13:37:22.456]                       envir <- sys.frame(frame)
[13:37:22.456]                       master <- NULL
[13:37:22.456]                       while (!identical(envir, .GlobalEnv) && 
[13:37:22.456]                         !identical(envir, emptyenv())) {
[13:37:22.456]                         if (exists("master", mode = "list", envir = envir, 
[13:37:22.456]                           inherits = FALSE)) {
[13:37:22.456]                           master <- get("master", mode = "list", 
[13:37:22.456]                             envir = envir, inherits = FALSE)
[13:37:22.456]                           if (inherits(master, c("SOCKnode", 
[13:37:22.456]                             "SOCK0node"))) {
[13:37:22.456]                             sendCondition <<- function(cond) {
[13:37:22.456]                               data <- list(type = "VALUE", value = cond, 
[13:37:22.456]                                 success = TRUE)
[13:37:22.456]                               parallel_sendData(master, data)
[13:37:22.456]                             }
[13:37:22.456]                             return(sendCondition)
[13:37:22.456]                           }
[13:37:22.456]                         }
[13:37:22.456]                         frame <- frame + 1L
[13:37:22.456]                         envir <- sys.frame(frame)
[13:37:22.456]                       }
[13:37:22.456]                     }
[13:37:22.456]                     sendCondition <<- function(cond) NULL
[13:37:22.456]                   }
[13:37:22.456]                 })
[13:37:22.456]                 withCallingHandlers({
[13:37:22.456]                   {
[13:37:22.456]                     a <- 1L
[13:37:22.456]                     plan_a <- unclass(future::plan("list"))
[13:37:22.456]                     nested_a <- nested[-1]
[13:37:22.456]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:22.456]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:22.456]                       strategy2))
[13:37:22.456]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:22.456]                       "init") <- NULL
[13:37:22.456]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:22.456]                       "init") <- NULL
[13:37:22.456]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:22.456]                     y %<-% {
[13:37:22.456]                       b <- 2L
[13:37:22.456]                       plan_b <- future::plan("list")
[13:37:22.456]                       nested_b <- nested_a[-1]
[13:37:22.456]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:22.456]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:22.456]                         inherits(future::plan("next"), "sequential"))
[13:37:22.456]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:22.456]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:22.456]                     }
[13:37:22.456]                     y
[13:37:22.456]                   }
[13:37:22.456]                 }, immediateCondition = function(cond) {
[13:37:22.456]                   sendCondition <- ...future.makeSendCondition()
[13:37:22.456]                   sendCondition(cond)
[13:37:22.456]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.456]                   {
[13:37:22.456]                     inherits <- base::inherits
[13:37:22.456]                     invokeRestart <- base::invokeRestart
[13:37:22.456]                     is.null <- base::is.null
[13:37:22.456]                     muffled <- FALSE
[13:37:22.456]                     if (inherits(cond, "message")) {
[13:37:22.456]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:22.456]                       if (muffled) 
[13:37:22.456]                         invokeRestart("muffleMessage")
[13:37:22.456]                     }
[13:37:22.456]                     else if (inherits(cond, "warning")) {
[13:37:22.456]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:22.456]                       if (muffled) 
[13:37:22.456]                         invokeRestart("muffleWarning")
[13:37:22.456]                     }
[13:37:22.456]                     else if (inherits(cond, "condition")) {
[13:37:22.456]                       if (!is.null(pattern)) {
[13:37:22.456]                         computeRestarts <- base::computeRestarts
[13:37:22.456]                         grepl <- base::grepl
[13:37:22.456]                         restarts <- computeRestarts(cond)
[13:37:22.456]                         for (restart in restarts) {
[13:37:22.456]                           name <- restart$name
[13:37:22.456]                           if (is.null(name)) 
[13:37:22.456]                             next
[13:37:22.456]                           if (!grepl(pattern, name)) 
[13:37:22.456]                             next
[13:37:22.456]                           invokeRestart(restart)
[13:37:22.456]                           muffled <- TRUE
[13:37:22.456]                           break
[13:37:22.456]                         }
[13:37:22.456]                       }
[13:37:22.456]                     }
[13:37:22.456]                     invisible(muffled)
[13:37:22.456]                   }
[13:37:22.456]                   muffleCondition(cond)
[13:37:22.456]                 })
[13:37:22.456]             }))
[13:37:22.456]             future::FutureResult(value = ...future.value$value, 
[13:37:22.456]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.456]                   ...future.rng), globalenv = if (FALSE) 
[13:37:22.456]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:22.456]                     ...future.globalenv.names))
[13:37:22.456]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:22.456]         }, condition = base::local({
[13:37:22.456]             c <- base::c
[13:37:22.456]             inherits <- base::inherits
[13:37:22.456]             invokeRestart <- base::invokeRestart
[13:37:22.456]             length <- base::length
[13:37:22.456]             list <- base::list
[13:37:22.456]             seq.int <- base::seq.int
[13:37:22.456]             signalCondition <- base::signalCondition
[13:37:22.456]             sys.calls <- base::sys.calls
[13:37:22.456]             `[[` <- base::`[[`
[13:37:22.456]             `+` <- base::`+`
[13:37:22.456]             `<<-` <- base::`<<-`
[13:37:22.456]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:22.456]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:22.456]                   3L)]
[13:37:22.456]             }
[13:37:22.456]             function(cond) {
[13:37:22.456]                 is_error <- inherits(cond, "error")
[13:37:22.456]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:22.456]                   NULL)
[13:37:22.456]                 if (is_error) {
[13:37:22.456]                   sessionInformation <- function() {
[13:37:22.456]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:22.456]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:22.456]                       search = base::search(), system = base::Sys.info())
[13:37:22.456]                   }
[13:37:22.456]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.456]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:22.456]                     cond$call), session = sessionInformation(), 
[13:37:22.456]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:22.456]                   signalCondition(cond)
[13:37:22.456]                 }
[13:37:22.456]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:22.456]                 "immediateCondition"))) {
[13:37:22.456]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:22.456]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.456]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:22.456]                   if (TRUE && !signal) {
[13:37:22.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.456]                     {
[13:37:22.456]                       inherits <- base::inherits
[13:37:22.456]                       invokeRestart <- base::invokeRestart
[13:37:22.456]                       is.null <- base::is.null
[13:37:22.456]                       muffled <- FALSE
[13:37:22.456]                       if (inherits(cond, "message")) {
[13:37:22.456]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.456]                         if (muffled) 
[13:37:22.456]                           invokeRestart("muffleMessage")
[13:37:22.456]                       }
[13:37:22.456]                       else if (inherits(cond, "warning")) {
[13:37:22.456]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.456]                         if (muffled) 
[13:37:22.456]                           invokeRestart("muffleWarning")
[13:37:22.456]                       }
[13:37:22.456]                       else if (inherits(cond, "condition")) {
[13:37:22.456]                         if (!is.null(pattern)) {
[13:37:22.456]                           computeRestarts <- base::computeRestarts
[13:37:22.456]                           grepl <- base::grepl
[13:37:22.456]                           restarts <- computeRestarts(cond)
[13:37:22.456]                           for (restart in restarts) {
[13:37:22.456]                             name <- restart$name
[13:37:22.456]                             if (is.null(name)) 
[13:37:22.456]                               next
[13:37:22.456]                             if (!grepl(pattern, name)) 
[13:37:22.456]                               next
[13:37:22.456]                             invokeRestart(restart)
[13:37:22.456]                             muffled <- TRUE
[13:37:22.456]                             break
[13:37:22.456]                           }
[13:37:22.456]                         }
[13:37:22.456]                       }
[13:37:22.456]                       invisible(muffled)
[13:37:22.456]                     }
[13:37:22.456]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.456]                   }
[13:37:22.456]                 }
[13:37:22.456]                 else {
[13:37:22.456]                   if (TRUE) {
[13:37:22.456]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.456]                     {
[13:37:22.456]                       inherits <- base::inherits
[13:37:22.456]                       invokeRestart <- base::invokeRestart
[13:37:22.456]                       is.null <- base::is.null
[13:37:22.456]                       muffled <- FALSE
[13:37:22.456]                       if (inherits(cond, "message")) {
[13:37:22.456]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.456]                         if (muffled) 
[13:37:22.456]                           invokeRestart("muffleMessage")
[13:37:22.456]                       }
[13:37:22.456]                       else if (inherits(cond, "warning")) {
[13:37:22.456]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.456]                         if (muffled) 
[13:37:22.456]                           invokeRestart("muffleWarning")
[13:37:22.456]                       }
[13:37:22.456]                       else if (inherits(cond, "condition")) {
[13:37:22.456]                         if (!is.null(pattern)) {
[13:37:22.456]                           computeRestarts <- base::computeRestarts
[13:37:22.456]                           grepl <- base::grepl
[13:37:22.456]                           restarts <- computeRestarts(cond)
[13:37:22.456]                           for (restart in restarts) {
[13:37:22.456]                             name <- restart$name
[13:37:22.456]                             if (is.null(name)) 
[13:37:22.456]                               next
[13:37:22.456]                             if (!grepl(pattern, name)) 
[13:37:22.456]                               next
[13:37:22.456]                             invokeRestart(restart)
[13:37:22.456]                             muffled <- TRUE
[13:37:22.456]                             break
[13:37:22.456]                           }
[13:37:22.456]                         }
[13:37:22.456]                       }
[13:37:22.456]                       invisible(muffled)
[13:37:22.456]                     }
[13:37:22.456]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.456]                   }
[13:37:22.456]                 }
[13:37:22.456]             }
[13:37:22.456]         }))
[13:37:22.456]     }, error = function(ex) {
[13:37:22.456]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:22.456]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.456]                 ...future.rng), started = ...future.startTime, 
[13:37:22.456]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:22.456]             version = "1.8"), class = "FutureResult")
[13:37:22.456]     }, finally = {
[13:37:22.456]         if (!identical(...future.workdir, getwd())) 
[13:37:22.456]             setwd(...future.workdir)
[13:37:22.456]         {
[13:37:22.456]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:22.456]                 ...future.oldOptions$nwarnings <- NULL
[13:37:22.456]             }
[13:37:22.456]             base::options(...future.oldOptions)
[13:37:22.456]             if (.Platform$OS.type == "windows") {
[13:37:22.456]                 old_names <- names(...future.oldEnvVars)
[13:37:22.456]                 envs <- base::Sys.getenv()
[13:37:22.456]                 names <- names(envs)
[13:37:22.456]                 common <- intersect(names, old_names)
[13:37:22.456]                 added <- setdiff(names, old_names)
[13:37:22.456]                 removed <- setdiff(old_names, names)
[13:37:22.456]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:22.456]                   envs[common]]
[13:37:22.456]                 NAMES <- toupper(changed)
[13:37:22.456]                 args <- list()
[13:37:22.456]                 for (kk in seq_along(NAMES)) {
[13:37:22.456]                   name <- changed[[kk]]
[13:37:22.456]                   NAME <- NAMES[[kk]]
[13:37:22.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.456]                     next
[13:37:22.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.456]                 }
[13:37:22.456]                 NAMES <- toupper(added)
[13:37:22.456]                 for (kk in seq_along(NAMES)) {
[13:37:22.456]                   name <- added[[kk]]
[13:37:22.456]                   NAME <- NAMES[[kk]]
[13:37:22.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.456]                     next
[13:37:22.456]                   args[[name]] <- ""
[13:37:22.456]                 }
[13:37:22.456]                 NAMES <- toupper(removed)
[13:37:22.456]                 for (kk in seq_along(NAMES)) {
[13:37:22.456]                   name <- removed[[kk]]
[13:37:22.456]                   NAME <- NAMES[[kk]]
[13:37:22.456]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.456]                     next
[13:37:22.456]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.456]                 }
[13:37:22.456]                 if (length(args) > 0) 
[13:37:22.456]                   base::do.call(base::Sys.setenv, args = args)
[13:37:22.456]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:22.456]             }
[13:37:22.456]             else {
[13:37:22.456]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:22.456]             }
[13:37:22.456]             {
[13:37:22.456]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:22.456]                   0L) {
[13:37:22.456]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:22.456]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:22.456]                   base::options(opts)
[13:37:22.456]                 }
[13:37:22.456]                 {
[13:37:22.456]                   {
[13:37:22.456]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:22.456]                     NULL
[13:37:22.456]                   }
[13:37:22.456]                   options(future.plan = NULL)
[13:37:22.456]                   if (is.na(NA_character_)) 
[13:37:22.456]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.456]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:22.456]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:22.456]                     .init = FALSE)
[13:37:22.456]                 }
[13:37:22.456]             }
[13:37:22.456]         }
[13:37:22.456]     })
[13:37:22.456]     if (TRUE) {
[13:37:22.456]         base::sink(type = "output", split = FALSE)
[13:37:22.456]         if (TRUE) {
[13:37:22.456]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:22.456]         }
[13:37:22.456]         else {
[13:37:22.456]             ...future.result["stdout"] <- base::list(NULL)
[13:37:22.456]         }
[13:37:22.456]         base::close(...future.stdout)
[13:37:22.456]         ...future.stdout <- NULL
[13:37:22.456]     }
[13:37:22.456]     ...future.result$conditions <- ...future.conditions
[13:37:22.456]     ...future.result$finished <- base::Sys.time()
[13:37:22.456]     ...future.result
[13:37:22.456] }
[13:37:22.459] Exporting 2 global objects (55.46 KiB) to cluster node #1 ...
[13:37:22.459] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ...
[13:37:22.502] Exporting ‘nested’ (55.34 KiB) to cluster node #1 ... DONE
[13:37:22.503] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:37:22.503] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:37:22.503] Exporting 2 global objects (55.46 KiB) to cluster node #1 ... DONE
[13:37:22.504] MultisessionFuture started
[13:37:22.504] - Launch lazy future ... done
[13:37:22.504] run() for ‘MultisessionFuture’ ... done
[13:37:22.504] result() for ClusterFuture ...
[13:37:22.504] receiveMessageFromWorker() for ClusterFuture ...
[13:37:22.504] - Validating connection of MultisessionFuture
[13:37:22.568] - received message: FutureResult
[13:37:22.568] - Received FutureResult
[13:37:22.568] - Erased future from FutureRegistry
[13:37:22.568] result() for ClusterFuture ...
[13:37:22.569] - result already collected: FutureResult
[13:37:22.569] result() for ClusterFuture ... done
[13:37:22.569] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:22.569] result() for ClusterFuture ... done
[13:37:22.569] result() for ClusterFuture ...
[13:37:22.569] - result already collected: FutureResult
[13:37:22.569] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:22.574] getGlobalsAndPackages() ...
[13:37:22.574] Searching for globals...
[13:37:22.576] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:22.576] Searching for globals ... DONE
[13:37:22.576] Resolving globals: FALSE
[13:37:22.576] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:22.577] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:22.577] - globals: [1] ‘data’
[13:37:22.577] - packages: [1] ‘future’
[13:37:22.577] getGlobalsAndPackages() ... DONE
[13:37:22.577] run() for ‘Future’ ...
[13:37:22.577] - state: ‘created’
[13:37:22.578] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:22.593] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:22.593] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:22.593]   - Field: ‘node’
[13:37:22.593]   - Field: ‘label’
[13:37:22.593]   - Field: ‘local’
[13:37:22.593]   - Field: ‘owner’
[13:37:22.593]   - Field: ‘envir’
[13:37:22.593]   - Field: ‘workers’
[13:37:22.593]   - Field: ‘packages’
[13:37:22.594]   - Field: ‘gc’
[13:37:22.594]   - Field: ‘conditions’
[13:37:22.594]   - Field: ‘persistent’
[13:37:22.594]   - Field: ‘expr’
[13:37:22.594]   - Field: ‘uuid’
[13:37:22.594]   - Field: ‘seed’
[13:37:22.594]   - Field: ‘version’
[13:37:22.594]   - Field: ‘result’
[13:37:22.594]   - Field: ‘asynchronous’
[13:37:22.594]   - Field: ‘calls’
[13:37:22.595]   - Field: ‘globals’
[13:37:22.595]   - Field: ‘stdout’
[13:37:22.595]   - Field: ‘earlySignal’
[13:37:22.595]   - Field: ‘lazy’
[13:37:22.595]   - Field: ‘state’
[13:37:22.595] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:22.595] - Launch lazy future ...
[13:37:22.595] Packages needed by the future expression (n = 1): ‘future’
[13:37:22.596] Packages needed by future strategies (n = 1): ‘future’
[13:37:22.596] {
[13:37:22.596]     {
[13:37:22.596]         {
[13:37:22.596]             ...future.startTime <- base::Sys.time()
[13:37:22.596]             {
[13:37:22.596]                 {
[13:37:22.596]                   {
[13:37:22.596]                     {
[13:37:22.596]                       {
[13:37:22.596]                         base::local({
[13:37:22.596]                           has_future <- base::requireNamespace("future", 
[13:37:22.596]                             quietly = TRUE)
[13:37:22.596]                           if (has_future) {
[13:37:22.596]                             ns <- base::getNamespace("future")
[13:37:22.596]                             version <- ns[[".package"]][["version"]]
[13:37:22.596]                             if (is.null(version)) 
[13:37:22.596]                               version <- utils::packageVersion("future")
[13:37:22.596]                           }
[13:37:22.596]                           else {
[13:37:22.596]                             version <- NULL
[13:37:22.596]                           }
[13:37:22.596]                           if (!has_future || version < "1.8.0") {
[13:37:22.596]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:22.596]                               "", base::R.version$version.string), 
[13:37:22.596]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:22.596]                                 base::R.version$platform, 8 * 
[13:37:22.596]                                   base::.Machine$sizeof.pointer), 
[13:37:22.596]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:22.596]                                 "release", "version")], collapse = " "), 
[13:37:22.596]                               hostname = base::Sys.info()[["nodename"]])
[13:37:22.596]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:22.596]                               info)
[13:37:22.596]                             info <- base::paste(info, collapse = "; ")
[13:37:22.596]                             if (!has_future) {
[13:37:22.596]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:22.596]                                 info)
[13:37:22.596]                             }
[13:37:22.596]                             else {
[13:37:22.596]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:22.596]                                 info, version)
[13:37:22.596]                             }
[13:37:22.596]                             base::stop(msg)
[13:37:22.596]                           }
[13:37:22.596]                         })
[13:37:22.596]                       }
[13:37:22.596]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:22.596]                       base::options(mc.cores = 1L)
[13:37:22.596]                     }
[13:37:22.596]                     base::local({
[13:37:22.596]                       for (pkg in "future") {
[13:37:22.596]                         base::loadNamespace(pkg)
[13:37:22.596]                         base::library(pkg, character.only = TRUE)
[13:37:22.596]                       }
[13:37:22.596]                     })
[13:37:22.596]                   }
[13:37:22.596]                   ...future.strategy.old <- future::plan("list")
[13:37:22.596]                   options(future.plan = NULL)
[13:37:22.596]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.596]                   future::plan(list(b = function (..., envir = parent.frame()) 
[13:37:22.596]                   {
[13:37:22.596]                     future <- SequentialFuture(..., envir = envir)
[13:37:22.596]                     if (!future$lazy) 
[13:37:22.596]                       future <- run(future)
[13:37:22.596]                     invisible(future)
[13:37:22.596]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:22.596]                 }
[13:37:22.596]                 ...future.workdir <- getwd()
[13:37:22.596]             }
[13:37:22.596]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:22.596]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:22.596]         }
[13:37:22.596]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:22.596]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:22.596]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:22.596]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:22.596]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:22.596]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:22.596]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:22.596]             base::names(...future.oldOptions))
[13:37:22.596]     }
[13:37:22.596]     if (FALSE) {
[13:37:22.596]     }
[13:37:22.596]     else {
[13:37:22.596]         if (TRUE) {
[13:37:22.596]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:22.596]                 open = "w")
[13:37:22.596]         }
[13:37:22.596]         else {
[13:37:22.596]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:22.596]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:22.596]         }
[13:37:22.596]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:22.596]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:22.596]             base::sink(type = "output", split = FALSE)
[13:37:22.596]             base::close(...future.stdout)
[13:37:22.596]         }, add = TRUE)
[13:37:22.596]     }
[13:37:22.596]     ...future.frame <- base::sys.nframe()
[13:37:22.596]     ...future.conditions <- base::list()
[13:37:22.596]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:22.596]     if (FALSE) {
[13:37:22.596]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:22.596]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:22.596]     }
[13:37:22.596]     ...future.result <- base::tryCatch({
[13:37:22.596]         base::withCallingHandlers({
[13:37:22.596]             ...future.value <- base::withVisible(base::local({
[13:37:22.596]                 ...future.makeSendCondition <- base::local({
[13:37:22.596]                   sendCondition <- NULL
[13:37:22.596]                   function(frame = 1L) {
[13:37:22.596]                     if (is.function(sendCondition)) 
[13:37:22.596]                       return(sendCondition)
[13:37:22.596]                     ns <- getNamespace("parallel")
[13:37:22.596]                     if (exists("sendData", mode = "function", 
[13:37:22.596]                       envir = ns)) {
[13:37:22.596]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:22.596]                         envir = ns)
[13:37:22.596]                       envir <- sys.frame(frame)
[13:37:22.596]                       master <- NULL
[13:37:22.596]                       while (!identical(envir, .GlobalEnv) && 
[13:37:22.596]                         !identical(envir, emptyenv())) {
[13:37:22.596]                         if (exists("master", mode = "list", envir = envir, 
[13:37:22.596]                           inherits = FALSE)) {
[13:37:22.596]                           master <- get("master", mode = "list", 
[13:37:22.596]                             envir = envir, inherits = FALSE)
[13:37:22.596]                           if (inherits(master, c("SOCKnode", 
[13:37:22.596]                             "SOCK0node"))) {
[13:37:22.596]                             sendCondition <<- function(cond) {
[13:37:22.596]                               data <- list(type = "VALUE", value = cond, 
[13:37:22.596]                                 success = TRUE)
[13:37:22.596]                               parallel_sendData(master, data)
[13:37:22.596]                             }
[13:37:22.596]                             return(sendCondition)
[13:37:22.596]                           }
[13:37:22.596]                         }
[13:37:22.596]                         frame <- frame + 1L
[13:37:22.596]                         envir <- sys.frame(frame)
[13:37:22.596]                       }
[13:37:22.596]                     }
[13:37:22.596]                     sendCondition <<- function(cond) NULL
[13:37:22.596]                   }
[13:37:22.596]                 })
[13:37:22.596]                 withCallingHandlers({
[13:37:22.596]                   {
[13:37:22.596]                     value(future(subset(data, a == 2)))
[13:37:22.596]                   }
[13:37:22.596]                 }, immediateCondition = function(cond) {
[13:37:22.596]                   sendCondition <- ...future.makeSendCondition()
[13:37:22.596]                   sendCondition(cond)
[13:37:22.596]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.596]                   {
[13:37:22.596]                     inherits <- base::inherits
[13:37:22.596]                     invokeRestart <- base::invokeRestart
[13:37:22.596]                     is.null <- base::is.null
[13:37:22.596]                     muffled <- FALSE
[13:37:22.596]                     if (inherits(cond, "message")) {
[13:37:22.596]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:22.596]                       if (muffled) 
[13:37:22.596]                         invokeRestart("muffleMessage")
[13:37:22.596]                     }
[13:37:22.596]                     else if (inherits(cond, "warning")) {
[13:37:22.596]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:22.596]                       if (muffled) 
[13:37:22.596]                         invokeRestart("muffleWarning")
[13:37:22.596]                     }
[13:37:22.596]                     else if (inherits(cond, "condition")) {
[13:37:22.596]                       if (!is.null(pattern)) {
[13:37:22.596]                         computeRestarts <- base::computeRestarts
[13:37:22.596]                         grepl <- base::grepl
[13:37:22.596]                         restarts <- computeRestarts(cond)
[13:37:22.596]                         for (restart in restarts) {
[13:37:22.596]                           name <- restart$name
[13:37:22.596]                           if (is.null(name)) 
[13:37:22.596]                             next
[13:37:22.596]                           if (!grepl(pattern, name)) 
[13:37:22.596]                             next
[13:37:22.596]                           invokeRestart(restart)
[13:37:22.596]                           muffled <- TRUE
[13:37:22.596]                           break
[13:37:22.596]                         }
[13:37:22.596]                       }
[13:37:22.596]                     }
[13:37:22.596]                     invisible(muffled)
[13:37:22.596]                   }
[13:37:22.596]                   muffleCondition(cond)
[13:37:22.596]                 })
[13:37:22.596]             }))
[13:37:22.596]             future::FutureResult(value = ...future.value$value, 
[13:37:22.596]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.596]                   ...future.rng), globalenv = if (FALSE) 
[13:37:22.596]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:22.596]                     ...future.globalenv.names))
[13:37:22.596]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:22.596]         }, condition = base::local({
[13:37:22.596]             c <- base::c
[13:37:22.596]             inherits <- base::inherits
[13:37:22.596]             invokeRestart <- base::invokeRestart
[13:37:22.596]             length <- base::length
[13:37:22.596]             list <- base::list
[13:37:22.596]             seq.int <- base::seq.int
[13:37:22.596]             signalCondition <- base::signalCondition
[13:37:22.596]             sys.calls <- base::sys.calls
[13:37:22.596]             `[[` <- base::`[[`
[13:37:22.596]             `+` <- base::`+`
[13:37:22.596]             `<<-` <- base::`<<-`
[13:37:22.596]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:22.596]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:22.596]                   3L)]
[13:37:22.596]             }
[13:37:22.596]             function(cond) {
[13:37:22.596]                 is_error <- inherits(cond, "error")
[13:37:22.596]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:22.596]                   NULL)
[13:37:22.596]                 if (is_error) {
[13:37:22.596]                   sessionInformation <- function() {
[13:37:22.596]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:22.596]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:22.596]                       search = base::search(), system = base::Sys.info())
[13:37:22.596]                   }
[13:37:22.596]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.596]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:22.596]                     cond$call), session = sessionInformation(), 
[13:37:22.596]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:22.596]                   signalCondition(cond)
[13:37:22.596]                 }
[13:37:22.596]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:22.596]                 "immediateCondition"))) {
[13:37:22.596]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:22.596]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.596]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:22.596]                   if (TRUE && !signal) {
[13:37:22.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.596]                     {
[13:37:22.596]                       inherits <- base::inherits
[13:37:22.596]                       invokeRestart <- base::invokeRestart
[13:37:22.596]                       is.null <- base::is.null
[13:37:22.596]                       muffled <- FALSE
[13:37:22.596]                       if (inherits(cond, "message")) {
[13:37:22.596]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.596]                         if (muffled) 
[13:37:22.596]                           invokeRestart("muffleMessage")
[13:37:22.596]                       }
[13:37:22.596]                       else if (inherits(cond, "warning")) {
[13:37:22.596]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.596]                         if (muffled) 
[13:37:22.596]                           invokeRestart("muffleWarning")
[13:37:22.596]                       }
[13:37:22.596]                       else if (inherits(cond, "condition")) {
[13:37:22.596]                         if (!is.null(pattern)) {
[13:37:22.596]                           computeRestarts <- base::computeRestarts
[13:37:22.596]                           grepl <- base::grepl
[13:37:22.596]                           restarts <- computeRestarts(cond)
[13:37:22.596]                           for (restart in restarts) {
[13:37:22.596]                             name <- restart$name
[13:37:22.596]                             if (is.null(name)) 
[13:37:22.596]                               next
[13:37:22.596]                             if (!grepl(pattern, name)) 
[13:37:22.596]                               next
[13:37:22.596]                             invokeRestart(restart)
[13:37:22.596]                             muffled <- TRUE
[13:37:22.596]                             break
[13:37:22.596]                           }
[13:37:22.596]                         }
[13:37:22.596]                       }
[13:37:22.596]                       invisible(muffled)
[13:37:22.596]                     }
[13:37:22.596]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.596]                   }
[13:37:22.596]                 }
[13:37:22.596]                 else {
[13:37:22.596]                   if (TRUE) {
[13:37:22.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.596]                     {
[13:37:22.596]                       inherits <- base::inherits
[13:37:22.596]                       invokeRestart <- base::invokeRestart
[13:37:22.596]                       is.null <- base::is.null
[13:37:22.596]                       muffled <- FALSE
[13:37:22.596]                       if (inherits(cond, "message")) {
[13:37:22.596]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.596]                         if (muffled) 
[13:37:22.596]                           invokeRestart("muffleMessage")
[13:37:22.596]                       }
[13:37:22.596]                       else if (inherits(cond, "warning")) {
[13:37:22.596]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.596]                         if (muffled) 
[13:37:22.596]                           invokeRestart("muffleWarning")
[13:37:22.596]                       }
[13:37:22.596]                       else if (inherits(cond, "condition")) {
[13:37:22.596]                         if (!is.null(pattern)) {
[13:37:22.596]                           computeRestarts <- base::computeRestarts
[13:37:22.596]                           grepl <- base::grepl
[13:37:22.596]                           restarts <- computeRestarts(cond)
[13:37:22.596]                           for (restart in restarts) {
[13:37:22.596]                             name <- restart$name
[13:37:22.596]                             if (is.null(name)) 
[13:37:22.596]                               next
[13:37:22.596]                             if (!grepl(pattern, name)) 
[13:37:22.596]                               next
[13:37:22.596]                             invokeRestart(restart)
[13:37:22.596]                             muffled <- TRUE
[13:37:22.596]                             break
[13:37:22.596]                           }
[13:37:22.596]                         }
[13:37:22.596]                       }
[13:37:22.596]                       invisible(muffled)
[13:37:22.596]                     }
[13:37:22.596]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.596]                   }
[13:37:22.596]                 }
[13:37:22.596]             }
[13:37:22.596]         }))
[13:37:22.596]     }, error = function(ex) {
[13:37:22.596]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:22.596]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.596]                 ...future.rng), started = ...future.startTime, 
[13:37:22.596]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:22.596]             version = "1.8"), class = "FutureResult")
[13:37:22.596]     }, finally = {
[13:37:22.596]         if (!identical(...future.workdir, getwd())) 
[13:37:22.596]             setwd(...future.workdir)
[13:37:22.596]         {
[13:37:22.596]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:22.596]                 ...future.oldOptions$nwarnings <- NULL
[13:37:22.596]             }
[13:37:22.596]             base::options(...future.oldOptions)
[13:37:22.596]             if (.Platform$OS.type == "windows") {
[13:37:22.596]                 old_names <- names(...future.oldEnvVars)
[13:37:22.596]                 envs <- base::Sys.getenv()
[13:37:22.596]                 names <- names(envs)
[13:37:22.596]                 common <- intersect(names, old_names)
[13:37:22.596]                 added <- setdiff(names, old_names)
[13:37:22.596]                 removed <- setdiff(old_names, names)
[13:37:22.596]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:22.596]                   envs[common]]
[13:37:22.596]                 NAMES <- toupper(changed)
[13:37:22.596]                 args <- list()
[13:37:22.596]                 for (kk in seq_along(NAMES)) {
[13:37:22.596]                   name <- changed[[kk]]
[13:37:22.596]                   NAME <- NAMES[[kk]]
[13:37:22.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.596]                     next
[13:37:22.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.596]                 }
[13:37:22.596]                 NAMES <- toupper(added)
[13:37:22.596]                 for (kk in seq_along(NAMES)) {
[13:37:22.596]                   name <- added[[kk]]
[13:37:22.596]                   NAME <- NAMES[[kk]]
[13:37:22.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.596]                     next
[13:37:22.596]                   args[[name]] <- ""
[13:37:22.596]                 }
[13:37:22.596]                 NAMES <- toupper(removed)
[13:37:22.596]                 for (kk in seq_along(NAMES)) {
[13:37:22.596]                   name <- removed[[kk]]
[13:37:22.596]                   NAME <- NAMES[[kk]]
[13:37:22.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.596]                     next
[13:37:22.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.596]                 }
[13:37:22.596]                 if (length(args) > 0) 
[13:37:22.596]                   base::do.call(base::Sys.setenv, args = args)
[13:37:22.596]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:22.596]             }
[13:37:22.596]             else {
[13:37:22.596]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:22.596]             }
[13:37:22.596]             {
[13:37:22.596]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:22.596]                   0L) {
[13:37:22.596]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:22.596]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:22.596]                   base::options(opts)
[13:37:22.596]                 }
[13:37:22.596]                 {
[13:37:22.596]                   {
[13:37:22.596]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:22.596]                     NULL
[13:37:22.596]                   }
[13:37:22.596]                   options(future.plan = NULL)
[13:37:22.596]                   if (is.na(NA_character_)) 
[13:37:22.596]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.596]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:22.596]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:22.596]                     .init = FALSE)
[13:37:22.596]                 }
[13:37:22.596]             }
[13:37:22.596]         }
[13:37:22.596]     })
[13:37:22.596]     if (TRUE) {
[13:37:22.596]         base::sink(type = "output", split = FALSE)
[13:37:22.596]         if (TRUE) {
[13:37:22.596]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:22.596]         }
[13:37:22.596]         else {
[13:37:22.596]             ...future.result["stdout"] <- base::list(NULL)
[13:37:22.596]         }
[13:37:22.596]         base::close(...future.stdout)
[13:37:22.596]         ...future.stdout <- NULL
[13:37:22.596]     }
[13:37:22.596]     ...future.result$conditions <- ...future.conditions
[13:37:22.596]     ...future.result$finished <- base::Sys.time()
[13:37:22.596]     ...future.result
[13:37:22.596] }
[13:37:22.599] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:37:22.599] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:37:22.599] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:37:22.600] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:37:22.600] MultisessionFuture started
[13:37:22.600] - Launch lazy future ... done
[13:37:22.600] run() for ‘MultisessionFuture’ ... done
[13:37:22.600] result() for ClusterFuture ...
[13:37:22.600] receiveMessageFromWorker() for ClusterFuture ...
[13:37:22.601] - Validating connection of MultisessionFuture
[13:37:22.648] - received message: FutureResult
[13:37:22.648] - Received FutureResult
[13:37:22.648] - Erased future from FutureRegistry
[13:37:22.648] result() for ClusterFuture ...
[13:37:22.648] - result already collected: FutureResult
[13:37:22.648] result() for ClusterFuture ... done
[13:37:22.648] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:22.648] result() for ClusterFuture ... done
[13:37:22.649] result() for ClusterFuture ...
[13:37:22.649] - result already collected: FutureResult
[13:37:22.649] result() for ClusterFuture ... done
- plan(list('multisession', 'sequential')) ... DONE
- plan(list('multisession', 'multicore')) ...
[13:37:22.649] plan(): Setting new future strategy stack:
[13:37:22.649] List of future strategies:
[13:37:22.649] 1. multisession:
[13:37:22.649]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:22.649]    - tweaked: FALSE
[13:37:22.649]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.649] 2. multicore:
[13:37:22.649]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:37:22.649]    - tweaked: FALSE
[13:37:22.649]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.650] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:22.650] multisession:
[13:37:22.650] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:22.650] - tweaked: FALSE
[13:37:22.650] - call: plan(list(a = strategy1, b = strategy2))
[13:37:22.655] getGlobalsAndPackages() ...
[13:37:22.655] Not searching for globals
[13:37:22.655] - globals: [0] <none>
[13:37:22.655] getGlobalsAndPackages() ... DONE
[13:37:22.656] [local output] makeClusterPSOCK() ...
[13:37:22.660] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:22.661] [local output] Base port: 11767
[13:37:22.661] [local output] Getting setup options for 2 cluster nodes ...
[13:37:22.661] [local output]  - Node 1 of 2 ...
[13:37:22.661] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:22.662] [local output] Rscript port: 11767

[13:37:22.662] [local output]  - Node 2 of 2 ...
[13:37:22.663] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:22.663] [local output] Rscript port: 11767

[13:37:22.663] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:22.664] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:22.664] [local output] Setting up PSOCK nodes in parallel
[13:37:22.664] List of 36
[13:37:22.664]  $ worker          : chr "localhost"
[13:37:22.664]   ..- attr(*, "localhost")= logi TRUE
[13:37:22.664]  $ master          : chr "localhost"
[13:37:22.664]  $ port            : int 11767
[13:37:22.664]  $ connectTimeout  : num 120
[13:37:22.664]  $ timeout         : num 2592000
[13:37:22.664]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:22.664]  $ homogeneous     : logi TRUE
[13:37:22.664]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:22.664]  $ rscript_envs    : NULL
[13:37:22.664]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:22.664]  $ rscript_startup : NULL
[13:37:22.664]  $ rscript_sh      : chr "sh"
[13:37:22.664]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:22.664]  $ methods         : logi TRUE
[13:37:22.664]  $ socketOptions   : chr "no-delay"
[13:37:22.664]  $ useXDR          : logi FALSE
[13:37:22.664]  $ outfile         : chr "/dev/null"
[13:37:22.664]  $ renice          : int NA
[13:37:22.664]  $ rshcmd          : NULL
[13:37:22.664]  $ user            : chr(0) 
[13:37:22.664]  $ revtunnel       : logi FALSE
[13:37:22.664]  $ rshlogfile      : NULL
[13:37:22.664]  $ rshopts         : chr(0) 
[13:37:22.664]  $ rank            : int 1
[13:37:22.664]  $ manual          : logi FALSE
[13:37:22.664]  $ dryrun          : logi FALSE
[13:37:22.664]  $ quiet           : logi FALSE
[13:37:22.664]  $ setup_strategy  : chr "parallel"
[13:37:22.664]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:22.664]  $ pidfile         : chr "/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.157635014a780.pid"
[13:37:22.664]  $ rshcmd_label    : NULL
[13:37:22.664]  $ rsh_call        : NULL
[13:37:22.664]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:22.664]  $ localMachine    : logi TRUE
[13:37:22.664]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:22.664]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:22.664]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:22.664]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:22.664]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:22.664]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:22.664]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:22.664]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:22.664]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:22.664]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:22.664]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:22.664]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:22.664]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:22.664]  $ arguments       :List of 28
[13:37:22.664]   ..$ worker          : chr "localhost"
[13:37:22.664]   ..$ master          : NULL
[13:37:22.664]   ..$ port            : int 11767
[13:37:22.664]   ..$ connectTimeout  : num 120
[13:37:22.664]   ..$ timeout         : num 2592000
[13:37:22.664]   ..$ rscript         : NULL
[13:37:22.664]   ..$ homogeneous     : NULL
[13:37:22.664]   ..$ rscript_args    : NULL
[13:37:22.664]   ..$ rscript_envs    : NULL
[13:37:22.664]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:22.664]   ..$ rscript_startup : NULL
[13:37:22.664]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:22.664]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:22.664]   ..$ methods         : logi TRUE
[13:37:22.664]   ..$ socketOptions   : chr "no-delay"
[13:37:22.664]   ..$ useXDR          : logi FALSE
[13:37:22.664]   ..$ outfile         : chr "/dev/null"
[13:37:22.664]   ..$ renice          : int NA
[13:37:22.664]   ..$ rshcmd          : NULL
[13:37:22.664]   ..$ user            : NULL
[13:37:22.664]   ..$ revtunnel       : logi NA
[13:37:22.664]   ..$ rshlogfile      : NULL
[13:37:22.664]   ..$ rshopts         : NULL
[13:37:22.664]   ..$ rank            : int 1
[13:37:22.664]   ..$ manual          : logi FALSE
[13:37:22.664]   ..$ dryrun          : logi FALSE
[13:37:22.664]   ..$ quiet           : logi FALSE
[13:37:22.664]   ..$ setup_strategy  : chr "parallel"
[13:37:22.664]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:22.683] [local output] System call to launch all workers:
[13:37:22.683] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.157635014a780.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11767 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:22.683] [local output] Starting PSOCK main server
[13:37:22.684] [local output] Workers launched
[13:37:22.684] [local output] Waiting for workers to connect back
[13:37:22.685]  - [local output] 0 workers out of 2 ready
[13:37:22.940]  - [local output] 0 workers out of 2 ready
[13:37:22.940]  - [local output] 1 workers out of 2 ready
[13:37:22.946]  - [local output] 1 workers out of 2 ready
[13:37:22.946]  - [local output] 2 workers out of 2 ready
[13:37:22.946] [local output] Launching of workers completed
[13:37:22.946] [local output] Collecting session information from workers
[13:37:22.947] [local output]  - Worker #1 of 2
[13:37:22.947] [local output]  - Worker #2 of 2
[13:37:22.948] [local output] makeClusterPSOCK() ... done
[13:37:22.958] Packages needed by the future expression (n = 0): <none>
[13:37:22.959] Packages needed by future strategies (n = 1): ‘future’
[13:37:22.959] {
[13:37:22.959]     {
[13:37:22.959]         {
[13:37:22.959]             ...future.startTime <- base::Sys.time()
[13:37:22.959]             {
[13:37:22.959]                 {
[13:37:22.959]                   {
[13:37:22.959]                     {
[13:37:22.959]                       {
[13:37:22.959]                         base::local({
[13:37:22.959]                           has_future <- base::requireNamespace("future", 
[13:37:22.959]                             quietly = TRUE)
[13:37:22.959]                           if (has_future) {
[13:37:22.959]                             ns <- base::getNamespace("future")
[13:37:22.959]                             version <- ns[[".package"]][["version"]]
[13:37:22.959]                             if (is.null(version)) 
[13:37:22.959]                               version <- utils::packageVersion("future")
[13:37:22.959]                           }
[13:37:22.959]                           else {
[13:37:22.959]                             version <- NULL
[13:37:22.959]                           }
[13:37:22.959]                           if (!has_future || version < "1.8.0") {
[13:37:22.959]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:22.959]                               "", base::R.version$version.string), 
[13:37:22.959]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:22.959]                                 base::R.version$platform, 8 * 
[13:37:22.959]                                   base::.Machine$sizeof.pointer), 
[13:37:22.959]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:22.959]                                 "release", "version")], collapse = " "), 
[13:37:22.959]                               hostname = base::Sys.info()[["nodename"]])
[13:37:22.959]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:22.959]                               info)
[13:37:22.959]                             info <- base::paste(info, collapse = "; ")
[13:37:22.959]                             if (!has_future) {
[13:37:22.959]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:22.959]                                 info)
[13:37:22.959]                             }
[13:37:22.959]                             else {
[13:37:22.959]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:22.959]                                 info, version)
[13:37:22.959]                             }
[13:37:22.959]                             base::stop(msg)
[13:37:22.959]                           }
[13:37:22.959]                         })
[13:37:22.959]                       }
[13:37:22.959]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:22.959]                       base::options(mc.cores = 1L)
[13:37:22.959]                     }
[13:37:22.959]                     base::local({
[13:37:22.959]                       for (pkg in "future") {
[13:37:22.959]                         base::loadNamespace(pkg)
[13:37:22.959]                         base::library(pkg, character.only = TRUE)
[13:37:22.959]                       }
[13:37:22.959]                     })
[13:37:22.959]                   }
[13:37:22.959]                   ...future.strategy.old <- future::plan("list")
[13:37:22.959]                   options(future.plan = NULL)
[13:37:22.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.959]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:22.959]                     envir = parent.frame()) 
[13:37:22.959]                   {
[13:37:22.959]                     default_workers <- missing(workers)
[13:37:22.959]                     if (is.function(workers)) 
[13:37:22.959]                       workers <- workers()
[13:37:22.959]                     workers <- structure(as.integer(workers), 
[13:37:22.959]                       class = class(workers))
[13:37:22.959]                     stop_if_not(is.finite(workers), workers >= 
[13:37:22.959]                       1L)
[13:37:22.959]                     if ((workers == 1L && !inherits(workers, 
[13:37:22.959]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:22.959]                       if (default_workers) 
[13:37:22.959]                         supportsMulticore(warn = TRUE)
[13:37:22.959]                       return(sequential(..., envir = envir))
[13:37:22.959]                     }
[13:37:22.959]                     oopts <- options(mc.cores = workers)
[13:37:22.959]                     on.exit(options(oopts))
[13:37:22.959]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:22.959]                       envir = envir)
[13:37:22.959]                     if (!future$lazy) 
[13:37:22.959]                       future <- run(future)
[13:37:22.959]                     invisible(future)
[13:37:22.959]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:22.959]                 }
[13:37:22.959]                 ...future.workdir <- getwd()
[13:37:22.959]             }
[13:37:22.959]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:22.959]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:22.959]         }
[13:37:22.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:22.959]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:22.959]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:22.959]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:22.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:22.959]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:22.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:22.959]             base::names(...future.oldOptions))
[13:37:22.959]     }
[13:37:22.959]     if (FALSE) {
[13:37:22.959]     }
[13:37:22.959]     else {
[13:37:22.959]         if (TRUE) {
[13:37:22.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:22.959]                 open = "w")
[13:37:22.959]         }
[13:37:22.959]         else {
[13:37:22.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:22.959]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:22.959]         }
[13:37:22.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:22.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:22.959]             base::sink(type = "output", split = FALSE)
[13:37:22.959]             base::close(...future.stdout)
[13:37:22.959]         }, add = TRUE)
[13:37:22.959]     }
[13:37:22.959]     ...future.frame <- base::sys.nframe()
[13:37:22.959]     ...future.conditions <- base::list()
[13:37:22.959]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:22.959]     if (FALSE) {
[13:37:22.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:22.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:22.959]     }
[13:37:22.959]     ...future.result <- base::tryCatch({
[13:37:22.959]         base::withCallingHandlers({
[13:37:22.959]             ...future.value <- base::withVisible(base::local({
[13:37:22.959]                 ...future.makeSendCondition <- base::local({
[13:37:22.959]                   sendCondition <- NULL
[13:37:22.959]                   function(frame = 1L) {
[13:37:22.959]                     if (is.function(sendCondition)) 
[13:37:22.959]                       return(sendCondition)
[13:37:22.959]                     ns <- getNamespace("parallel")
[13:37:22.959]                     if (exists("sendData", mode = "function", 
[13:37:22.959]                       envir = ns)) {
[13:37:22.959]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:22.959]                         envir = ns)
[13:37:22.959]                       envir <- sys.frame(frame)
[13:37:22.959]                       master <- NULL
[13:37:22.959]                       while (!identical(envir, .GlobalEnv) && 
[13:37:22.959]                         !identical(envir, emptyenv())) {
[13:37:22.959]                         if (exists("master", mode = "list", envir = envir, 
[13:37:22.959]                           inherits = FALSE)) {
[13:37:22.959]                           master <- get("master", mode = "list", 
[13:37:22.959]                             envir = envir, inherits = FALSE)
[13:37:22.959]                           if (inherits(master, c("SOCKnode", 
[13:37:22.959]                             "SOCK0node"))) {
[13:37:22.959]                             sendCondition <<- function(cond) {
[13:37:22.959]                               data <- list(type = "VALUE", value = cond, 
[13:37:22.959]                                 success = TRUE)
[13:37:22.959]                               parallel_sendData(master, data)
[13:37:22.959]                             }
[13:37:22.959]                             return(sendCondition)
[13:37:22.959]                           }
[13:37:22.959]                         }
[13:37:22.959]                         frame <- frame + 1L
[13:37:22.959]                         envir <- sys.frame(frame)
[13:37:22.959]                       }
[13:37:22.959]                     }
[13:37:22.959]                     sendCondition <<- function(cond) NULL
[13:37:22.959]                   }
[13:37:22.959]                 })
[13:37:22.959]                 withCallingHandlers({
[13:37:22.959]                   NA
[13:37:22.959]                 }, immediateCondition = function(cond) {
[13:37:22.959]                   sendCondition <- ...future.makeSendCondition()
[13:37:22.959]                   sendCondition(cond)
[13:37:22.959]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.959]                   {
[13:37:22.959]                     inherits <- base::inherits
[13:37:22.959]                     invokeRestart <- base::invokeRestart
[13:37:22.959]                     is.null <- base::is.null
[13:37:22.959]                     muffled <- FALSE
[13:37:22.959]                     if (inherits(cond, "message")) {
[13:37:22.959]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:22.959]                       if (muffled) 
[13:37:22.959]                         invokeRestart("muffleMessage")
[13:37:22.959]                     }
[13:37:22.959]                     else if (inherits(cond, "warning")) {
[13:37:22.959]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:22.959]                       if (muffled) 
[13:37:22.959]                         invokeRestart("muffleWarning")
[13:37:22.959]                     }
[13:37:22.959]                     else if (inherits(cond, "condition")) {
[13:37:22.959]                       if (!is.null(pattern)) {
[13:37:22.959]                         computeRestarts <- base::computeRestarts
[13:37:22.959]                         grepl <- base::grepl
[13:37:22.959]                         restarts <- computeRestarts(cond)
[13:37:22.959]                         for (restart in restarts) {
[13:37:22.959]                           name <- restart$name
[13:37:22.959]                           if (is.null(name)) 
[13:37:22.959]                             next
[13:37:22.959]                           if (!grepl(pattern, name)) 
[13:37:22.959]                             next
[13:37:22.959]                           invokeRestart(restart)
[13:37:22.959]                           muffled <- TRUE
[13:37:22.959]                           break
[13:37:22.959]                         }
[13:37:22.959]                       }
[13:37:22.959]                     }
[13:37:22.959]                     invisible(muffled)
[13:37:22.959]                   }
[13:37:22.959]                   muffleCondition(cond)
[13:37:22.959]                 })
[13:37:22.959]             }))
[13:37:22.959]             future::FutureResult(value = ...future.value$value, 
[13:37:22.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.959]                   ...future.rng), globalenv = if (FALSE) 
[13:37:22.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:22.959]                     ...future.globalenv.names))
[13:37:22.959]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:22.959]         }, condition = base::local({
[13:37:22.959]             c <- base::c
[13:37:22.959]             inherits <- base::inherits
[13:37:22.959]             invokeRestart <- base::invokeRestart
[13:37:22.959]             length <- base::length
[13:37:22.959]             list <- base::list
[13:37:22.959]             seq.int <- base::seq.int
[13:37:22.959]             signalCondition <- base::signalCondition
[13:37:22.959]             sys.calls <- base::sys.calls
[13:37:22.959]             `[[` <- base::`[[`
[13:37:22.959]             `+` <- base::`+`
[13:37:22.959]             `<<-` <- base::`<<-`
[13:37:22.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:22.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:22.959]                   3L)]
[13:37:22.959]             }
[13:37:22.959]             function(cond) {
[13:37:22.959]                 is_error <- inherits(cond, "error")
[13:37:22.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:22.959]                   NULL)
[13:37:22.959]                 if (is_error) {
[13:37:22.959]                   sessionInformation <- function() {
[13:37:22.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:22.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:22.959]                       search = base::search(), system = base::Sys.info())
[13:37:22.959]                   }
[13:37:22.959]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:22.959]                     cond$call), session = sessionInformation(), 
[13:37:22.959]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:22.959]                   signalCondition(cond)
[13:37:22.959]                 }
[13:37:22.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:22.959]                 "immediateCondition"))) {
[13:37:22.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:22.959]                   ...future.conditions[[length(...future.conditions) + 
[13:37:22.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:22.959]                   if (TRUE && !signal) {
[13:37:22.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.959]                     {
[13:37:22.959]                       inherits <- base::inherits
[13:37:22.959]                       invokeRestart <- base::invokeRestart
[13:37:22.959]                       is.null <- base::is.null
[13:37:22.959]                       muffled <- FALSE
[13:37:22.959]                       if (inherits(cond, "message")) {
[13:37:22.959]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.959]                         if (muffled) 
[13:37:22.959]                           invokeRestart("muffleMessage")
[13:37:22.959]                       }
[13:37:22.959]                       else if (inherits(cond, "warning")) {
[13:37:22.959]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.959]                         if (muffled) 
[13:37:22.959]                           invokeRestart("muffleWarning")
[13:37:22.959]                       }
[13:37:22.959]                       else if (inherits(cond, "condition")) {
[13:37:22.959]                         if (!is.null(pattern)) {
[13:37:22.959]                           computeRestarts <- base::computeRestarts
[13:37:22.959]                           grepl <- base::grepl
[13:37:22.959]                           restarts <- computeRestarts(cond)
[13:37:22.959]                           for (restart in restarts) {
[13:37:22.959]                             name <- restart$name
[13:37:22.959]                             if (is.null(name)) 
[13:37:22.959]                               next
[13:37:22.959]                             if (!grepl(pattern, name)) 
[13:37:22.959]                               next
[13:37:22.959]                             invokeRestart(restart)
[13:37:22.959]                             muffled <- TRUE
[13:37:22.959]                             break
[13:37:22.959]                           }
[13:37:22.959]                         }
[13:37:22.959]                       }
[13:37:22.959]                       invisible(muffled)
[13:37:22.959]                     }
[13:37:22.959]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.959]                   }
[13:37:22.959]                 }
[13:37:22.959]                 else {
[13:37:22.959]                   if (TRUE) {
[13:37:22.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:22.959]                     {
[13:37:22.959]                       inherits <- base::inherits
[13:37:22.959]                       invokeRestart <- base::invokeRestart
[13:37:22.959]                       is.null <- base::is.null
[13:37:22.959]                       muffled <- FALSE
[13:37:22.959]                       if (inherits(cond, "message")) {
[13:37:22.959]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:22.959]                         if (muffled) 
[13:37:22.959]                           invokeRestart("muffleMessage")
[13:37:22.959]                       }
[13:37:22.959]                       else if (inherits(cond, "warning")) {
[13:37:22.959]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:22.959]                         if (muffled) 
[13:37:22.959]                           invokeRestart("muffleWarning")
[13:37:22.959]                       }
[13:37:22.959]                       else if (inherits(cond, "condition")) {
[13:37:22.959]                         if (!is.null(pattern)) {
[13:37:22.959]                           computeRestarts <- base::computeRestarts
[13:37:22.959]                           grepl <- base::grepl
[13:37:22.959]                           restarts <- computeRestarts(cond)
[13:37:22.959]                           for (restart in restarts) {
[13:37:22.959]                             name <- restart$name
[13:37:22.959]                             if (is.null(name)) 
[13:37:22.959]                               next
[13:37:22.959]                             if (!grepl(pattern, name)) 
[13:37:22.959]                               next
[13:37:22.959]                             invokeRestart(restart)
[13:37:22.959]                             muffled <- TRUE
[13:37:22.959]                             break
[13:37:22.959]                           }
[13:37:22.959]                         }
[13:37:22.959]                       }
[13:37:22.959]                       invisible(muffled)
[13:37:22.959]                     }
[13:37:22.959]                     muffleCondition(cond, pattern = "^muffle")
[13:37:22.959]                   }
[13:37:22.959]                 }
[13:37:22.959]             }
[13:37:22.959]         }))
[13:37:22.959]     }, error = function(ex) {
[13:37:22.959]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:22.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:22.959]                 ...future.rng), started = ...future.startTime, 
[13:37:22.959]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:22.959]             version = "1.8"), class = "FutureResult")
[13:37:22.959]     }, finally = {
[13:37:22.959]         if (!identical(...future.workdir, getwd())) 
[13:37:22.959]             setwd(...future.workdir)
[13:37:22.959]         {
[13:37:22.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:22.959]                 ...future.oldOptions$nwarnings <- NULL
[13:37:22.959]             }
[13:37:22.959]             base::options(...future.oldOptions)
[13:37:22.959]             if (.Platform$OS.type == "windows") {
[13:37:22.959]                 old_names <- names(...future.oldEnvVars)
[13:37:22.959]                 envs <- base::Sys.getenv()
[13:37:22.959]                 names <- names(envs)
[13:37:22.959]                 common <- intersect(names, old_names)
[13:37:22.959]                 added <- setdiff(names, old_names)
[13:37:22.959]                 removed <- setdiff(old_names, names)
[13:37:22.959]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:22.959]                   envs[common]]
[13:37:22.959]                 NAMES <- toupper(changed)
[13:37:22.959]                 args <- list()
[13:37:22.959]                 for (kk in seq_along(NAMES)) {
[13:37:22.959]                   name <- changed[[kk]]
[13:37:22.959]                   NAME <- NAMES[[kk]]
[13:37:22.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.959]                     next
[13:37:22.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.959]                 }
[13:37:22.959]                 NAMES <- toupper(added)
[13:37:22.959]                 for (kk in seq_along(NAMES)) {
[13:37:22.959]                   name <- added[[kk]]
[13:37:22.959]                   NAME <- NAMES[[kk]]
[13:37:22.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.959]                     next
[13:37:22.959]                   args[[name]] <- ""
[13:37:22.959]                 }
[13:37:22.959]                 NAMES <- toupper(removed)
[13:37:22.959]                 for (kk in seq_along(NAMES)) {
[13:37:22.959]                   name <- removed[[kk]]
[13:37:22.959]                   NAME <- NAMES[[kk]]
[13:37:22.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:22.959]                     next
[13:37:22.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:22.959]                 }
[13:37:22.959]                 if (length(args) > 0) 
[13:37:22.959]                   base::do.call(base::Sys.setenv, args = args)
[13:37:22.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:22.959]             }
[13:37:22.959]             else {
[13:37:22.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:22.959]             }
[13:37:22.959]             {
[13:37:22.959]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:22.959]                   0L) {
[13:37:22.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:22.959]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:22.959]                   base::options(opts)
[13:37:22.959]                 }
[13:37:22.959]                 {
[13:37:22.959]                   {
[13:37:22.959]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:22.959]                     NULL
[13:37:22.959]                   }
[13:37:22.959]                   options(future.plan = NULL)
[13:37:22.959]                   if (is.na(NA_character_)) 
[13:37:22.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:22.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:22.959]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:22.959]                     .init = FALSE)
[13:37:22.959]                 }
[13:37:22.959]             }
[13:37:22.959]         }
[13:37:22.959]     })
[13:37:22.959]     if (TRUE) {
[13:37:22.959]         base::sink(type = "output", split = FALSE)
[13:37:22.959]         if (TRUE) {
[13:37:22.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:22.959]         }
[13:37:22.959]         else {
[13:37:22.959]             ...future.result["stdout"] <- base::list(NULL)
[13:37:22.959]         }
[13:37:22.959]         base::close(...future.stdout)
[13:37:22.959]         ...future.stdout <- NULL
[13:37:22.959]     }
[13:37:22.959]     ...future.result$conditions <- ...future.conditions
[13:37:22.959]     ...future.result$finished <- base::Sys.time()
[13:37:22.959]     ...future.result
[13:37:22.959] }
[13:37:23.013] MultisessionFuture started
[13:37:23.013] result() for ClusterFuture ...
[13:37:23.013] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.013] - Validating connection of MultisessionFuture
[13:37:23.061] - received message: FutureResult
[13:37:23.061] - Received FutureResult
[13:37:23.061] - Erased future from FutureRegistry
[13:37:23.062] result() for ClusterFuture ...
[13:37:23.062] - result already collected: FutureResult
[13:37:23.062] result() for ClusterFuture ... done
[13:37:23.062] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.062] result() for ClusterFuture ... done
[13:37:23.062] result() for ClusterFuture ...
[13:37:23.062] - result already collected: FutureResult
[13:37:23.062] result() for ClusterFuture ... done
[13:37:23.062] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:23.066] plan(): nbrOfWorkers() = 2
[13:37:23.066] getGlobalsAndPackages() ...
[13:37:23.066] Searching for globals...
[13:37:23.084] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:23.085] Searching for globals ... DONE
[13:37:23.085] Resolving globals: FALSE
[13:37:23.086] The total size of the 2 globals is 90.70 KiB (92872 bytes)
[13:37:23.086] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 90.70 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (90.58 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:23.086] - globals: [2] ‘nested’, ‘strategy2’
[13:37:23.086] - packages: [1] ‘future’
[13:37:23.087] getGlobalsAndPackages() ... DONE
[13:37:23.087] run() for ‘Future’ ...
[13:37:23.087] - state: ‘created’
[13:37:23.087] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:23.101] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:23.101] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:23.101]   - Field: ‘node’
[13:37:23.101]   - Field: ‘label’
[13:37:23.101]   - Field: ‘local’
[13:37:23.101]   - Field: ‘owner’
[13:37:23.101]   - Field: ‘envir’
[13:37:23.101]   - Field: ‘workers’
[13:37:23.102]   - Field: ‘packages’
[13:37:23.102]   - Field: ‘gc’
[13:37:23.102]   - Field: ‘conditions’
[13:37:23.102]   - Field: ‘persistent’
[13:37:23.102]   - Field: ‘expr’
[13:37:23.102]   - Field: ‘uuid’
[13:37:23.102]   - Field: ‘seed’
[13:37:23.102]   - Field: ‘version’
[13:37:23.102]   - Field: ‘result’
[13:37:23.102]   - Field: ‘asynchronous’
[13:37:23.102]   - Field: ‘calls’
[13:37:23.103]   - Field: ‘globals’
[13:37:23.103]   - Field: ‘stdout’
[13:37:23.103]   - Field: ‘earlySignal’
[13:37:23.103]   - Field: ‘lazy’
[13:37:23.103]   - Field: ‘state’
[13:37:23.103] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:23.103] - Launch lazy future ...
[13:37:23.103] Packages needed by the future expression (n = 1): ‘future’
[13:37:23.104] Packages needed by future strategies (n = 1): ‘future’
[13:37:23.104] {
[13:37:23.104]     {
[13:37:23.104]         {
[13:37:23.104]             ...future.startTime <- base::Sys.time()
[13:37:23.104]             {
[13:37:23.104]                 {
[13:37:23.104]                   {
[13:37:23.104]                     {
[13:37:23.104]                       {
[13:37:23.104]                         base::local({
[13:37:23.104]                           has_future <- base::requireNamespace("future", 
[13:37:23.104]                             quietly = TRUE)
[13:37:23.104]                           if (has_future) {
[13:37:23.104]                             ns <- base::getNamespace("future")
[13:37:23.104]                             version <- ns[[".package"]][["version"]]
[13:37:23.104]                             if (is.null(version)) 
[13:37:23.104]                               version <- utils::packageVersion("future")
[13:37:23.104]                           }
[13:37:23.104]                           else {
[13:37:23.104]                             version <- NULL
[13:37:23.104]                           }
[13:37:23.104]                           if (!has_future || version < "1.8.0") {
[13:37:23.104]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:23.104]                               "", base::R.version$version.string), 
[13:37:23.104]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:23.104]                                 base::R.version$platform, 8 * 
[13:37:23.104]                                   base::.Machine$sizeof.pointer), 
[13:37:23.104]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:23.104]                                 "release", "version")], collapse = " "), 
[13:37:23.104]                               hostname = base::Sys.info()[["nodename"]])
[13:37:23.104]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:23.104]                               info)
[13:37:23.104]                             info <- base::paste(info, collapse = "; ")
[13:37:23.104]                             if (!has_future) {
[13:37:23.104]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:23.104]                                 info)
[13:37:23.104]                             }
[13:37:23.104]                             else {
[13:37:23.104]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:23.104]                                 info, version)
[13:37:23.104]                             }
[13:37:23.104]                             base::stop(msg)
[13:37:23.104]                           }
[13:37:23.104]                         })
[13:37:23.104]                       }
[13:37:23.104]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:23.104]                       base::options(mc.cores = 1L)
[13:37:23.104]                     }
[13:37:23.104]                     base::local({
[13:37:23.104]                       for (pkg in "future") {
[13:37:23.104]                         base::loadNamespace(pkg)
[13:37:23.104]                         base::library(pkg, character.only = TRUE)
[13:37:23.104]                       }
[13:37:23.104]                     })
[13:37:23.104]                   }
[13:37:23.104]                   ...future.strategy.old <- future::plan("list")
[13:37:23.104]                   options(future.plan = NULL)
[13:37:23.104]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.104]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:23.104]                     envir = parent.frame()) 
[13:37:23.104]                   {
[13:37:23.104]                     default_workers <- missing(workers)
[13:37:23.104]                     if (is.function(workers)) 
[13:37:23.104]                       workers <- workers()
[13:37:23.104]                     workers <- structure(as.integer(workers), 
[13:37:23.104]                       class = class(workers))
[13:37:23.104]                     stop_if_not(is.finite(workers), workers >= 
[13:37:23.104]                       1L)
[13:37:23.104]                     if ((workers == 1L && !inherits(workers, 
[13:37:23.104]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:23.104]                       if (default_workers) 
[13:37:23.104]                         supportsMulticore(warn = TRUE)
[13:37:23.104]                       return(sequential(..., envir = envir))
[13:37:23.104]                     }
[13:37:23.104]                     oopts <- options(mc.cores = workers)
[13:37:23.104]                     on.exit(options(oopts))
[13:37:23.104]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:23.104]                       envir = envir)
[13:37:23.104]                     if (!future$lazy) 
[13:37:23.104]                       future <- run(future)
[13:37:23.104]                     invisible(future)
[13:37:23.104]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:23.104]                 }
[13:37:23.104]                 ...future.workdir <- getwd()
[13:37:23.104]             }
[13:37:23.104]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:23.104]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:23.104]         }
[13:37:23.104]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:23.104]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:23.104]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:23.104]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:23.104]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:23.104]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:23.104]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:23.104]             base::names(...future.oldOptions))
[13:37:23.104]     }
[13:37:23.104]     if (FALSE) {
[13:37:23.104]     }
[13:37:23.104]     else {
[13:37:23.104]         if (TRUE) {
[13:37:23.104]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:23.104]                 open = "w")
[13:37:23.104]         }
[13:37:23.104]         else {
[13:37:23.104]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:23.104]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:23.104]         }
[13:37:23.104]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:23.104]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:23.104]             base::sink(type = "output", split = FALSE)
[13:37:23.104]             base::close(...future.stdout)
[13:37:23.104]         }, add = TRUE)
[13:37:23.104]     }
[13:37:23.104]     ...future.frame <- base::sys.nframe()
[13:37:23.104]     ...future.conditions <- base::list()
[13:37:23.104]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:23.104]     if (FALSE) {
[13:37:23.104]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:23.104]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:23.104]     }
[13:37:23.104]     ...future.result <- base::tryCatch({
[13:37:23.104]         base::withCallingHandlers({
[13:37:23.104]             ...future.value <- base::withVisible(base::local({
[13:37:23.104]                 ...future.makeSendCondition <- base::local({
[13:37:23.104]                   sendCondition <- NULL
[13:37:23.104]                   function(frame = 1L) {
[13:37:23.104]                     if (is.function(sendCondition)) 
[13:37:23.104]                       return(sendCondition)
[13:37:23.104]                     ns <- getNamespace("parallel")
[13:37:23.104]                     if (exists("sendData", mode = "function", 
[13:37:23.104]                       envir = ns)) {
[13:37:23.104]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:23.104]                         envir = ns)
[13:37:23.104]                       envir <- sys.frame(frame)
[13:37:23.104]                       master <- NULL
[13:37:23.104]                       while (!identical(envir, .GlobalEnv) && 
[13:37:23.104]                         !identical(envir, emptyenv())) {
[13:37:23.104]                         if (exists("master", mode = "list", envir = envir, 
[13:37:23.104]                           inherits = FALSE)) {
[13:37:23.104]                           master <- get("master", mode = "list", 
[13:37:23.104]                             envir = envir, inherits = FALSE)
[13:37:23.104]                           if (inherits(master, c("SOCKnode", 
[13:37:23.104]                             "SOCK0node"))) {
[13:37:23.104]                             sendCondition <<- function(cond) {
[13:37:23.104]                               data <- list(type = "VALUE", value = cond, 
[13:37:23.104]                                 success = TRUE)
[13:37:23.104]                               parallel_sendData(master, data)
[13:37:23.104]                             }
[13:37:23.104]                             return(sendCondition)
[13:37:23.104]                           }
[13:37:23.104]                         }
[13:37:23.104]                         frame <- frame + 1L
[13:37:23.104]                         envir <- sys.frame(frame)
[13:37:23.104]                       }
[13:37:23.104]                     }
[13:37:23.104]                     sendCondition <<- function(cond) NULL
[13:37:23.104]                   }
[13:37:23.104]                 })
[13:37:23.104]                 withCallingHandlers({
[13:37:23.104]                   {
[13:37:23.104]                     a <- 1L
[13:37:23.104]                     plan_a <- unclass(future::plan("list"))
[13:37:23.104]                     nested_a <- nested[-1]
[13:37:23.104]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:23.104]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:23.104]                       strategy2))
[13:37:23.104]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:23.104]                       "init") <- NULL
[13:37:23.104]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:23.104]                       "init") <- NULL
[13:37:23.104]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:23.104]                     y %<-% {
[13:37:23.104]                       b <- 2L
[13:37:23.104]                       plan_b <- future::plan("list")
[13:37:23.104]                       nested_b <- nested_a[-1]
[13:37:23.104]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:23.104]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:23.104]                         inherits(future::plan("next"), "sequential"))
[13:37:23.104]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:23.104]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:23.104]                     }
[13:37:23.104]                     y
[13:37:23.104]                   }
[13:37:23.104]                 }, immediateCondition = function(cond) {
[13:37:23.104]                   sendCondition <- ...future.makeSendCondition()
[13:37:23.104]                   sendCondition(cond)
[13:37:23.104]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.104]                   {
[13:37:23.104]                     inherits <- base::inherits
[13:37:23.104]                     invokeRestart <- base::invokeRestart
[13:37:23.104]                     is.null <- base::is.null
[13:37:23.104]                     muffled <- FALSE
[13:37:23.104]                     if (inherits(cond, "message")) {
[13:37:23.104]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:23.104]                       if (muffled) 
[13:37:23.104]                         invokeRestart("muffleMessage")
[13:37:23.104]                     }
[13:37:23.104]                     else if (inherits(cond, "warning")) {
[13:37:23.104]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:23.104]                       if (muffled) 
[13:37:23.104]                         invokeRestart("muffleWarning")
[13:37:23.104]                     }
[13:37:23.104]                     else if (inherits(cond, "condition")) {
[13:37:23.104]                       if (!is.null(pattern)) {
[13:37:23.104]                         computeRestarts <- base::computeRestarts
[13:37:23.104]                         grepl <- base::grepl
[13:37:23.104]                         restarts <- computeRestarts(cond)
[13:37:23.104]                         for (restart in restarts) {
[13:37:23.104]                           name <- restart$name
[13:37:23.104]                           if (is.null(name)) 
[13:37:23.104]                             next
[13:37:23.104]                           if (!grepl(pattern, name)) 
[13:37:23.104]                             next
[13:37:23.104]                           invokeRestart(restart)
[13:37:23.104]                           muffled <- TRUE
[13:37:23.104]                           break
[13:37:23.104]                         }
[13:37:23.104]                       }
[13:37:23.104]                     }
[13:37:23.104]                     invisible(muffled)
[13:37:23.104]                   }
[13:37:23.104]                   muffleCondition(cond)
[13:37:23.104]                 })
[13:37:23.104]             }))
[13:37:23.104]             future::FutureResult(value = ...future.value$value, 
[13:37:23.104]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.104]                   ...future.rng), globalenv = if (FALSE) 
[13:37:23.104]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:23.104]                     ...future.globalenv.names))
[13:37:23.104]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:23.104]         }, condition = base::local({
[13:37:23.104]             c <- base::c
[13:37:23.104]             inherits <- base::inherits
[13:37:23.104]             invokeRestart <- base::invokeRestart
[13:37:23.104]             length <- base::length
[13:37:23.104]             list <- base::list
[13:37:23.104]             seq.int <- base::seq.int
[13:37:23.104]             signalCondition <- base::signalCondition
[13:37:23.104]             sys.calls <- base::sys.calls
[13:37:23.104]             `[[` <- base::`[[`
[13:37:23.104]             `+` <- base::`+`
[13:37:23.104]             `<<-` <- base::`<<-`
[13:37:23.104]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:23.104]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:23.104]                   3L)]
[13:37:23.104]             }
[13:37:23.104]             function(cond) {
[13:37:23.104]                 is_error <- inherits(cond, "error")
[13:37:23.104]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:23.104]                   NULL)
[13:37:23.104]                 if (is_error) {
[13:37:23.104]                   sessionInformation <- function() {
[13:37:23.104]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:23.104]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:23.104]                       search = base::search(), system = base::Sys.info())
[13:37:23.104]                   }
[13:37:23.104]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.104]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:23.104]                     cond$call), session = sessionInformation(), 
[13:37:23.104]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:23.104]                   signalCondition(cond)
[13:37:23.104]                 }
[13:37:23.104]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:23.104]                 "immediateCondition"))) {
[13:37:23.104]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:23.104]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.104]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:23.104]                   if (TRUE && !signal) {
[13:37:23.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.104]                     {
[13:37:23.104]                       inherits <- base::inherits
[13:37:23.104]                       invokeRestart <- base::invokeRestart
[13:37:23.104]                       is.null <- base::is.null
[13:37:23.104]                       muffled <- FALSE
[13:37:23.104]                       if (inherits(cond, "message")) {
[13:37:23.104]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.104]                         if (muffled) 
[13:37:23.104]                           invokeRestart("muffleMessage")
[13:37:23.104]                       }
[13:37:23.104]                       else if (inherits(cond, "warning")) {
[13:37:23.104]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.104]                         if (muffled) 
[13:37:23.104]                           invokeRestart("muffleWarning")
[13:37:23.104]                       }
[13:37:23.104]                       else if (inherits(cond, "condition")) {
[13:37:23.104]                         if (!is.null(pattern)) {
[13:37:23.104]                           computeRestarts <- base::computeRestarts
[13:37:23.104]                           grepl <- base::grepl
[13:37:23.104]                           restarts <- computeRestarts(cond)
[13:37:23.104]                           for (restart in restarts) {
[13:37:23.104]                             name <- restart$name
[13:37:23.104]                             if (is.null(name)) 
[13:37:23.104]                               next
[13:37:23.104]                             if (!grepl(pattern, name)) 
[13:37:23.104]                               next
[13:37:23.104]                             invokeRestart(restart)
[13:37:23.104]                             muffled <- TRUE
[13:37:23.104]                             break
[13:37:23.104]                           }
[13:37:23.104]                         }
[13:37:23.104]                       }
[13:37:23.104]                       invisible(muffled)
[13:37:23.104]                     }
[13:37:23.104]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.104]                   }
[13:37:23.104]                 }
[13:37:23.104]                 else {
[13:37:23.104]                   if (TRUE) {
[13:37:23.104]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.104]                     {
[13:37:23.104]                       inherits <- base::inherits
[13:37:23.104]                       invokeRestart <- base::invokeRestart
[13:37:23.104]                       is.null <- base::is.null
[13:37:23.104]                       muffled <- FALSE
[13:37:23.104]                       if (inherits(cond, "message")) {
[13:37:23.104]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.104]                         if (muffled) 
[13:37:23.104]                           invokeRestart("muffleMessage")
[13:37:23.104]                       }
[13:37:23.104]                       else if (inherits(cond, "warning")) {
[13:37:23.104]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.104]                         if (muffled) 
[13:37:23.104]                           invokeRestart("muffleWarning")
[13:37:23.104]                       }
[13:37:23.104]                       else if (inherits(cond, "condition")) {
[13:37:23.104]                         if (!is.null(pattern)) {
[13:37:23.104]                           computeRestarts <- base::computeRestarts
[13:37:23.104]                           grepl <- base::grepl
[13:37:23.104]                           restarts <- computeRestarts(cond)
[13:37:23.104]                           for (restart in restarts) {
[13:37:23.104]                             name <- restart$name
[13:37:23.104]                             if (is.null(name)) 
[13:37:23.104]                               next
[13:37:23.104]                             if (!grepl(pattern, name)) 
[13:37:23.104]                               next
[13:37:23.104]                             invokeRestart(restart)
[13:37:23.104]                             muffled <- TRUE
[13:37:23.104]                             break
[13:37:23.104]                           }
[13:37:23.104]                         }
[13:37:23.104]                       }
[13:37:23.104]                       invisible(muffled)
[13:37:23.104]                     }
[13:37:23.104]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.104]                   }
[13:37:23.104]                 }
[13:37:23.104]             }
[13:37:23.104]         }))
[13:37:23.104]     }, error = function(ex) {
[13:37:23.104]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:23.104]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.104]                 ...future.rng), started = ...future.startTime, 
[13:37:23.104]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:23.104]             version = "1.8"), class = "FutureResult")
[13:37:23.104]     }, finally = {
[13:37:23.104]         if (!identical(...future.workdir, getwd())) 
[13:37:23.104]             setwd(...future.workdir)
[13:37:23.104]         {
[13:37:23.104]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:23.104]                 ...future.oldOptions$nwarnings <- NULL
[13:37:23.104]             }
[13:37:23.104]             base::options(...future.oldOptions)
[13:37:23.104]             if (.Platform$OS.type == "windows") {
[13:37:23.104]                 old_names <- names(...future.oldEnvVars)
[13:37:23.104]                 envs <- base::Sys.getenv()
[13:37:23.104]                 names <- names(envs)
[13:37:23.104]                 common <- intersect(names, old_names)
[13:37:23.104]                 added <- setdiff(names, old_names)
[13:37:23.104]                 removed <- setdiff(old_names, names)
[13:37:23.104]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:23.104]                   envs[common]]
[13:37:23.104]                 NAMES <- toupper(changed)
[13:37:23.104]                 args <- list()
[13:37:23.104]                 for (kk in seq_along(NAMES)) {
[13:37:23.104]                   name <- changed[[kk]]
[13:37:23.104]                   NAME <- NAMES[[kk]]
[13:37:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.104]                     next
[13:37:23.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.104]                 }
[13:37:23.104]                 NAMES <- toupper(added)
[13:37:23.104]                 for (kk in seq_along(NAMES)) {
[13:37:23.104]                   name <- added[[kk]]
[13:37:23.104]                   NAME <- NAMES[[kk]]
[13:37:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.104]                     next
[13:37:23.104]                   args[[name]] <- ""
[13:37:23.104]                 }
[13:37:23.104]                 NAMES <- toupper(removed)
[13:37:23.104]                 for (kk in seq_along(NAMES)) {
[13:37:23.104]                   name <- removed[[kk]]
[13:37:23.104]                   NAME <- NAMES[[kk]]
[13:37:23.104]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.104]                     next
[13:37:23.104]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.104]                 }
[13:37:23.104]                 if (length(args) > 0) 
[13:37:23.104]                   base::do.call(base::Sys.setenv, args = args)
[13:37:23.104]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:23.104]             }
[13:37:23.104]             else {
[13:37:23.104]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:23.104]             }
[13:37:23.104]             {
[13:37:23.104]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:23.104]                   0L) {
[13:37:23.104]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:23.104]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:23.104]                   base::options(opts)
[13:37:23.104]                 }
[13:37:23.104]                 {
[13:37:23.104]                   {
[13:37:23.104]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:23.104]                     NULL
[13:37:23.104]                   }
[13:37:23.104]                   options(future.plan = NULL)
[13:37:23.104]                   if (is.na(NA_character_)) 
[13:37:23.104]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.104]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:23.104]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:23.104]                     .init = FALSE)
[13:37:23.104]                 }
[13:37:23.104]             }
[13:37:23.104]         }
[13:37:23.104]     })
[13:37:23.104]     if (TRUE) {
[13:37:23.104]         base::sink(type = "output", split = FALSE)
[13:37:23.104]         if (TRUE) {
[13:37:23.104]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:23.104]         }
[13:37:23.104]         else {
[13:37:23.104]             ...future.result["stdout"] <- base::list(NULL)
[13:37:23.104]         }
[13:37:23.104]         base::close(...future.stdout)
[13:37:23.104]         ...future.stdout <- NULL
[13:37:23.104]     }
[13:37:23.104]     ...future.result$conditions <- ...future.conditions
[13:37:23.104]     ...future.result$finished <- base::Sys.time()
[13:37:23.104]     ...future.result
[13:37:23.104] }
[13:37:23.107] Exporting 2 global objects (90.70 KiB) to cluster node #1 ...
[13:37:23.107] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ...
[13:37:23.150] Exporting ‘nested’ (90.58 KiB) to cluster node #1 ... DONE
[13:37:23.151] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:37:23.151] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:37:23.151] Exporting 2 global objects (90.70 KiB) to cluster node #1 ... DONE
[13:37:23.152] MultisessionFuture started
[13:37:23.152] - Launch lazy future ... done
[13:37:23.152] run() for ‘MultisessionFuture’ ... done
[13:37:23.152] result() for ClusterFuture ...
[13:37:23.152] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.152] - Validating connection of MultisessionFuture
[13:37:23.225] - received message: FutureResult
[13:37:23.226] - Received FutureResult
[13:37:23.226] - Erased future from FutureRegistry
[13:37:23.226] result() for ClusterFuture ...
[13:37:23.226] - result already collected: FutureResult
[13:37:23.226] result() for ClusterFuture ... done
[13:37:23.226] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.226] result() for ClusterFuture ... done
[13:37:23.226] result() for ClusterFuture ...
[13:37:23.227] - result already collected: FutureResult
[13:37:23.227] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "multicore" "multiprocess" "future" "function"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:23.232] getGlobalsAndPackages() ...
[13:37:23.232] Searching for globals...
[13:37:23.233] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:23.233] Searching for globals ... DONE
[13:37:23.234] Resolving globals: FALSE
[13:37:23.234] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:23.235] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:23.235] - globals: [1] ‘data’
[13:37:23.235] - packages: [1] ‘future’
[13:37:23.235] getGlobalsAndPackages() ... DONE
[13:37:23.235] run() for ‘Future’ ...
[13:37:23.235] - state: ‘created’
[13:37:23.235] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:23.249] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:23.249] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:23.250]   - Field: ‘node’
[13:37:23.250]   - Field: ‘label’
[13:37:23.250]   - Field: ‘local’
[13:37:23.250]   - Field: ‘owner’
[13:37:23.250]   - Field: ‘envir’
[13:37:23.250]   - Field: ‘workers’
[13:37:23.250]   - Field: ‘packages’
[13:37:23.250]   - Field: ‘gc’
[13:37:23.250]   - Field: ‘conditions’
[13:37:23.250]   - Field: ‘persistent’
[13:37:23.251]   - Field: ‘expr’
[13:37:23.251]   - Field: ‘uuid’
[13:37:23.251]   - Field: ‘seed’
[13:37:23.251]   - Field: ‘version’
[13:37:23.251]   - Field: ‘result’
[13:37:23.251]   - Field: ‘asynchronous’
[13:37:23.251]   - Field: ‘calls’
[13:37:23.251]   - Field: ‘globals’
[13:37:23.251]   - Field: ‘stdout’
[13:37:23.251]   - Field: ‘earlySignal’
[13:37:23.251]   - Field: ‘lazy’
[13:37:23.252]   - Field: ‘state’
[13:37:23.252] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:23.252] - Launch lazy future ...
[13:37:23.252] Packages needed by the future expression (n = 1): ‘future’
[13:37:23.252] Packages needed by future strategies (n = 1): ‘future’
[13:37:23.253] {
[13:37:23.253]     {
[13:37:23.253]         {
[13:37:23.253]             ...future.startTime <- base::Sys.time()
[13:37:23.253]             {
[13:37:23.253]                 {
[13:37:23.253]                   {
[13:37:23.253]                     {
[13:37:23.253]                       {
[13:37:23.253]                         base::local({
[13:37:23.253]                           has_future <- base::requireNamespace("future", 
[13:37:23.253]                             quietly = TRUE)
[13:37:23.253]                           if (has_future) {
[13:37:23.253]                             ns <- base::getNamespace("future")
[13:37:23.253]                             version <- ns[[".package"]][["version"]]
[13:37:23.253]                             if (is.null(version)) 
[13:37:23.253]                               version <- utils::packageVersion("future")
[13:37:23.253]                           }
[13:37:23.253]                           else {
[13:37:23.253]                             version <- NULL
[13:37:23.253]                           }
[13:37:23.253]                           if (!has_future || version < "1.8.0") {
[13:37:23.253]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:23.253]                               "", base::R.version$version.string), 
[13:37:23.253]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:23.253]                                 base::R.version$platform, 8 * 
[13:37:23.253]                                   base::.Machine$sizeof.pointer), 
[13:37:23.253]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:23.253]                                 "release", "version")], collapse = " "), 
[13:37:23.253]                               hostname = base::Sys.info()[["nodename"]])
[13:37:23.253]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:23.253]                               info)
[13:37:23.253]                             info <- base::paste(info, collapse = "; ")
[13:37:23.253]                             if (!has_future) {
[13:37:23.253]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:23.253]                                 info)
[13:37:23.253]                             }
[13:37:23.253]                             else {
[13:37:23.253]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:23.253]                                 info, version)
[13:37:23.253]                             }
[13:37:23.253]                             base::stop(msg)
[13:37:23.253]                           }
[13:37:23.253]                         })
[13:37:23.253]                       }
[13:37:23.253]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:23.253]                       base::options(mc.cores = 1L)
[13:37:23.253]                     }
[13:37:23.253]                     base::local({
[13:37:23.253]                       for (pkg in "future") {
[13:37:23.253]                         base::loadNamespace(pkg)
[13:37:23.253]                         base::library(pkg, character.only = TRUE)
[13:37:23.253]                       }
[13:37:23.253]                     })
[13:37:23.253]                   }
[13:37:23.253]                   ...future.strategy.old <- future::plan("list")
[13:37:23.253]                   options(future.plan = NULL)
[13:37:23.253]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.253]                   future::plan(list(b = function (..., workers = availableCores(constraints = "multicore"), 
[13:37:23.253]                     envir = parent.frame()) 
[13:37:23.253]                   {
[13:37:23.253]                     default_workers <- missing(workers)
[13:37:23.253]                     if (is.function(workers)) 
[13:37:23.253]                       workers <- workers()
[13:37:23.253]                     workers <- structure(as.integer(workers), 
[13:37:23.253]                       class = class(workers))
[13:37:23.253]                     stop_if_not(is.finite(workers), workers >= 
[13:37:23.253]                       1L)
[13:37:23.253]                     if ((workers == 1L && !inherits(workers, 
[13:37:23.253]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:37:23.253]                       if (default_workers) 
[13:37:23.253]                         supportsMulticore(warn = TRUE)
[13:37:23.253]                       return(sequential(..., envir = envir))
[13:37:23.253]                     }
[13:37:23.253]                     oopts <- options(mc.cores = workers)
[13:37:23.253]                     on.exit(options(oopts))
[13:37:23.253]                     future <- MulticoreFuture(..., workers = workers, 
[13:37:23.253]                       envir = envir)
[13:37:23.253]                     if (!future$lazy) 
[13:37:23.253]                       future <- run(future)
[13:37:23.253]                     invisible(future)
[13:37:23.253]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:23.253]                 }
[13:37:23.253]                 ...future.workdir <- getwd()
[13:37:23.253]             }
[13:37:23.253]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:23.253]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:23.253]         }
[13:37:23.253]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:23.253]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:23.253]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:23.253]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:23.253]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:23.253]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:23.253]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:23.253]             base::names(...future.oldOptions))
[13:37:23.253]     }
[13:37:23.253]     if (FALSE) {
[13:37:23.253]     }
[13:37:23.253]     else {
[13:37:23.253]         if (TRUE) {
[13:37:23.253]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:23.253]                 open = "w")
[13:37:23.253]         }
[13:37:23.253]         else {
[13:37:23.253]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:23.253]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:23.253]         }
[13:37:23.253]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:23.253]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:23.253]             base::sink(type = "output", split = FALSE)
[13:37:23.253]             base::close(...future.stdout)
[13:37:23.253]         }, add = TRUE)
[13:37:23.253]     }
[13:37:23.253]     ...future.frame <- base::sys.nframe()
[13:37:23.253]     ...future.conditions <- base::list()
[13:37:23.253]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:23.253]     if (FALSE) {
[13:37:23.253]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:23.253]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:23.253]     }
[13:37:23.253]     ...future.result <- base::tryCatch({
[13:37:23.253]         base::withCallingHandlers({
[13:37:23.253]             ...future.value <- base::withVisible(base::local({
[13:37:23.253]                 ...future.makeSendCondition <- base::local({
[13:37:23.253]                   sendCondition <- NULL
[13:37:23.253]                   function(frame = 1L) {
[13:37:23.253]                     if (is.function(sendCondition)) 
[13:37:23.253]                       return(sendCondition)
[13:37:23.253]                     ns <- getNamespace("parallel")
[13:37:23.253]                     if (exists("sendData", mode = "function", 
[13:37:23.253]                       envir = ns)) {
[13:37:23.253]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:23.253]                         envir = ns)
[13:37:23.253]                       envir <- sys.frame(frame)
[13:37:23.253]                       master <- NULL
[13:37:23.253]                       while (!identical(envir, .GlobalEnv) && 
[13:37:23.253]                         !identical(envir, emptyenv())) {
[13:37:23.253]                         if (exists("master", mode = "list", envir = envir, 
[13:37:23.253]                           inherits = FALSE)) {
[13:37:23.253]                           master <- get("master", mode = "list", 
[13:37:23.253]                             envir = envir, inherits = FALSE)
[13:37:23.253]                           if (inherits(master, c("SOCKnode", 
[13:37:23.253]                             "SOCK0node"))) {
[13:37:23.253]                             sendCondition <<- function(cond) {
[13:37:23.253]                               data <- list(type = "VALUE", value = cond, 
[13:37:23.253]                                 success = TRUE)
[13:37:23.253]                               parallel_sendData(master, data)
[13:37:23.253]                             }
[13:37:23.253]                             return(sendCondition)
[13:37:23.253]                           }
[13:37:23.253]                         }
[13:37:23.253]                         frame <- frame + 1L
[13:37:23.253]                         envir <- sys.frame(frame)
[13:37:23.253]                       }
[13:37:23.253]                     }
[13:37:23.253]                     sendCondition <<- function(cond) NULL
[13:37:23.253]                   }
[13:37:23.253]                 })
[13:37:23.253]                 withCallingHandlers({
[13:37:23.253]                   {
[13:37:23.253]                     value(future(subset(data, a == 2)))
[13:37:23.253]                   }
[13:37:23.253]                 }, immediateCondition = function(cond) {
[13:37:23.253]                   sendCondition <- ...future.makeSendCondition()
[13:37:23.253]                   sendCondition(cond)
[13:37:23.253]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.253]                   {
[13:37:23.253]                     inherits <- base::inherits
[13:37:23.253]                     invokeRestart <- base::invokeRestart
[13:37:23.253]                     is.null <- base::is.null
[13:37:23.253]                     muffled <- FALSE
[13:37:23.253]                     if (inherits(cond, "message")) {
[13:37:23.253]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:23.253]                       if (muffled) 
[13:37:23.253]                         invokeRestart("muffleMessage")
[13:37:23.253]                     }
[13:37:23.253]                     else if (inherits(cond, "warning")) {
[13:37:23.253]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:23.253]                       if (muffled) 
[13:37:23.253]                         invokeRestart("muffleWarning")
[13:37:23.253]                     }
[13:37:23.253]                     else if (inherits(cond, "condition")) {
[13:37:23.253]                       if (!is.null(pattern)) {
[13:37:23.253]                         computeRestarts <- base::computeRestarts
[13:37:23.253]                         grepl <- base::grepl
[13:37:23.253]                         restarts <- computeRestarts(cond)
[13:37:23.253]                         for (restart in restarts) {
[13:37:23.253]                           name <- restart$name
[13:37:23.253]                           if (is.null(name)) 
[13:37:23.253]                             next
[13:37:23.253]                           if (!grepl(pattern, name)) 
[13:37:23.253]                             next
[13:37:23.253]                           invokeRestart(restart)
[13:37:23.253]                           muffled <- TRUE
[13:37:23.253]                           break
[13:37:23.253]                         }
[13:37:23.253]                       }
[13:37:23.253]                     }
[13:37:23.253]                     invisible(muffled)
[13:37:23.253]                   }
[13:37:23.253]                   muffleCondition(cond)
[13:37:23.253]                 })
[13:37:23.253]             }))
[13:37:23.253]             future::FutureResult(value = ...future.value$value, 
[13:37:23.253]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.253]                   ...future.rng), globalenv = if (FALSE) 
[13:37:23.253]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:23.253]                     ...future.globalenv.names))
[13:37:23.253]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:23.253]         }, condition = base::local({
[13:37:23.253]             c <- base::c
[13:37:23.253]             inherits <- base::inherits
[13:37:23.253]             invokeRestart <- base::invokeRestart
[13:37:23.253]             length <- base::length
[13:37:23.253]             list <- base::list
[13:37:23.253]             seq.int <- base::seq.int
[13:37:23.253]             signalCondition <- base::signalCondition
[13:37:23.253]             sys.calls <- base::sys.calls
[13:37:23.253]             `[[` <- base::`[[`
[13:37:23.253]             `+` <- base::`+`
[13:37:23.253]             `<<-` <- base::`<<-`
[13:37:23.253]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:23.253]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:23.253]                   3L)]
[13:37:23.253]             }
[13:37:23.253]             function(cond) {
[13:37:23.253]                 is_error <- inherits(cond, "error")
[13:37:23.253]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:23.253]                   NULL)
[13:37:23.253]                 if (is_error) {
[13:37:23.253]                   sessionInformation <- function() {
[13:37:23.253]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:23.253]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:23.253]                       search = base::search(), system = base::Sys.info())
[13:37:23.253]                   }
[13:37:23.253]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.253]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:23.253]                     cond$call), session = sessionInformation(), 
[13:37:23.253]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:23.253]                   signalCondition(cond)
[13:37:23.253]                 }
[13:37:23.253]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:23.253]                 "immediateCondition"))) {
[13:37:23.253]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:23.253]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.253]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:23.253]                   if (TRUE && !signal) {
[13:37:23.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.253]                     {
[13:37:23.253]                       inherits <- base::inherits
[13:37:23.253]                       invokeRestart <- base::invokeRestart
[13:37:23.253]                       is.null <- base::is.null
[13:37:23.253]                       muffled <- FALSE
[13:37:23.253]                       if (inherits(cond, "message")) {
[13:37:23.253]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.253]                         if (muffled) 
[13:37:23.253]                           invokeRestart("muffleMessage")
[13:37:23.253]                       }
[13:37:23.253]                       else if (inherits(cond, "warning")) {
[13:37:23.253]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.253]                         if (muffled) 
[13:37:23.253]                           invokeRestart("muffleWarning")
[13:37:23.253]                       }
[13:37:23.253]                       else if (inherits(cond, "condition")) {
[13:37:23.253]                         if (!is.null(pattern)) {
[13:37:23.253]                           computeRestarts <- base::computeRestarts
[13:37:23.253]                           grepl <- base::grepl
[13:37:23.253]                           restarts <- computeRestarts(cond)
[13:37:23.253]                           for (restart in restarts) {
[13:37:23.253]                             name <- restart$name
[13:37:23.253]                             if (is.null(name)) 
[13:37:23.253]                               next
[13:37:23.253]                             if (!grepl(pattern, name)) 
[13:37:23.253]                               next
[13:37:23.253]                             invokeRestart(restart)
[13:37:23.253]                             muffled <- TRUE
[13:37:23.253]                             break
[13:37:23.253]                           }
[13:37:23.253]                         }
[13:37:23.253]                       }
[13:37:23.253]                       invisible(muffled)
[13:37:23.253]                     }
[13:37:23.253]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.253]                   }
[13:37:23.253]                 }
[13:37:23.253]                 else {
[13:37:23.253]                   if (TRUE) {
[13:37:23.253]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.253]                     {
[13:37:23.253]                       inherits <- base::inherits
[13:37:23.253]                       invokeRestart <- base::invokeRestart
[13:37:23.253]                       is.null <- base::is.null
[13:37:23.253]                       muffled <- FALSE
[13:37:23.253]                       if (inherits(cond, "message")) {
[13:37:23.253]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.253]                         if (muffled) 
[13:37:23.253]                           invokeRestart("muffleMessage")
[13:37:23.253]                       }
[13:37:23.253]                       else if (inherits(cond, "warning")) {
[13:37:23.253]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.253]                         if (muffled) 
[13:37:23.253]                           invokeRestart("muffleWarning")
[13:37:23.253]                       }
[13:37:23.253]                       else if (inherits(cond, "condition")) {
[13:37:23.253]                         if (!is.null(pattern)) {
[13:37:23.253]                           computeRestarts <- base::computeRestarts
[13:37:23.253]                           grepl <- base::grepl
[13:37:23.253]                           restarts <- computeRestarts(cond)
[13:37:23.253]                           for (restart in restarts) {
[13:37:23.253]                             name <- restart$name
[13:37:23.253]                             if (is.null(name)) 
[13:37:23.253]                               next
[13:37:23.253]                             if (!grepl(pattern, name)) 
[13:37:23.253]                               next
[13:37:23.253]                             invokeRestart(restart)
[13:37:23.253]                             muffled <- TRUE
[13:37:23.253]                             break
[13:37:23.253]                           }
[13:37:23.253]                         }
[13:37:23.253]                       }
[13:37:23.253]                       invisible(muffled)
[13:37:23.253]                     }
[13:37:23.253]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.253]                   }
[13:37:23.253]                 }
[13:37:23.253]             }
[13:37:23.253]         }))
[13:37:23.253]     }, error = function(ex) {
[13:37:23.253]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:23.253]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.253]                 ...future.rng), started = ...future.startTime, 
[13:37:23.253]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:23.253]             version = "1.8"), class = "FutureResult")
[13:37:23.253]     }, finally = {
[13:37:23.253]         if (!identical(...future.workdir, getwd())) 
[13:37:23.253]             setwd(...future.workdir)
[13:37:23.253]         {
[13:37:23.253]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:23.253]                 ...future.oldOptions$nwarnings <- NULL
[13:37:23.253]             }
[13:37:23.253]             base::options(...future.oldOptions)
[13:37:23.253]             if (.Platform$OS.type == "windows") {
[13:37:23.253]                 old_names <- names(...future.oldEnvVars)
[13:37:23.253]                 envs <- base::Sys.getenv()
[13:37:23.253]                 names <- names(envs)
[13:37:23.253]                 common <- intersect(names, old_names)
[13:37:23.253]                 added <- setdiff(names, old_names)
[13:37:23.253]                 removed <- setdiff(old_names, names)
[13:37:23.253]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:23.253]                   envs[common]]
[13:37:23.253]                 NAMES <- toupper(changed)
[13:37:23.253]                 args <- list()
[13:37:23.253]                 for (kk in seq_along(NAMES)) {
[13:37:23.253]                   name <- changed[[kk]]
[13:37:23.253]                   NAME <- NAMES[[kk]]
[13:37:23.253]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.253]                     next
[13:37:23.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.253]                 }
[13:37:23.253]                 NAMES <- toupper(added)
[13:37:23.253]                 for (kk in seq_along(NAMES)) {
[13:37:23.253]                   name <- added[[kk]]
[13:37:23.253]                   NAME <- NAMES[[kk]]
[13:37:23.253]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.253]                     next
[13:37:23.253]                   args[[name]] <- ""
[13:37:23.253]                 }
[13:37:23.253]                 NAMES <- toupper(removed)
[13:37:23.253]                 for (kk in seq_along(NAMES)) {
[13:37:23.253]                   name <- removed[[kk]]
[13:37:23.253]                   NAME <- NAMES[[kk]]
[13:37:23.253]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.253]                     next
[13:37:23.253]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.253]                 }
[13:37:23.253]                 if (length(args) > 0) 
[13:37:23.253]                   base::do.call(base::Sys.setenv, args = args)
[13:37:23.253]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:23.253]             }
[13:37:23.253]             else {
[13:37:23.253]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:23.253]             }
[13:37:23.253]             {
[13:37:23.253]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:23.253]                   0L) {
[13:37:23.253]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:23.253]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:23.253]                   base::options(opts)
[13:37:23.253]                 }
[13:37:23.253]                 {
[13:37:23.253]                   {
[13:37:23.253]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:23.253]                     NULL
[13:37:23.253]                   }
[13:37:23.253]                   options(future.plan = NULL)
[13:37:23.253]                   if (is.na(NA_character_)) 
[13:37:23.253]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.253]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:23.253]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:23.253]                     .init = FALSE)
[13:37:23.253]                 }
[13:37:23.253]             }
[13:37:23.253]         }
[13:37:23.253]     })
[13:37:23.253]     if (TRUE) {
[13:37:23.253]         base::sink(type = "output", split = FALSE)
[13:37:23.253]         if (TRUE) {
[13:37:23.253]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:23.253]         }
[13:37:23.253]         else {
[13:37:23.253]             ...future.result["stdout"] <- base::list(NULL)
[13:37:23.253]         }
[13:37:23.253]         base::close(...future.stdout)
[13:37:23.253]         ...future.stdout <- NULL
[13:37:23.253]     }
[13:37:23.253]     ...future.result$conditions <- ...future.conditions
[13:37:23.253]     ...future.result$finished <- base::Sys.time()
[13:37:23.253]     ...future.result
[13:37:23.253] }
[13:37:23.256] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:37:23.256] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:37:23.256] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:37:23.256] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:37:23.257] MultisessionFuture started
[13:37:23.257] - Launch lazy future ... done
[13:37:23.257] run() for ‘MultisessionFuture’ ... done
[13:37:23.257] result() for ClusterFuture ...
[13:37:23.257] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.257] - Validating connection of MultisessionFuture
[13:37:23.314] - received message: FutureResult
[13:37:23.314] - Received FutureResult
[13:37:23.314] - Erased future from FutureRegistry
[13:37:23.314] result() for ClusterFuture ...
[13:37:23.314] - result already collected: FutureResult
[13:37:23.314] result() for ClusterFuture ... done
[13:37:23.314] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.314] result() for ClusterFuture ... done
[13:37:23.315] result() for ClusterFuture ...
[13:37:23.315] - result already collected: FutureResult
[13:37:23.315] result() for ClusterFuture ... done
- plan(list('multisession', 'multicore')) ... DONE
- plan(list('multisession', 'multisession')) ...
[13:37:23.315] plan(): Setting new future strategy stack:
[13:37:23.315] List of future strategies:
[13:37:23.315] 1. multisession:
[13:37:23.315]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:23.315]    - tweaked: FALSE
[13:37:23.315]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:23.315] 2. multisession:
[13:37:23.315]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:23.315]    - tweaked: FALSE
[13:37:23.315]    - call: plan(list(a = strategy1, b = strategy2))
[13:37:23.316] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:37:23.316] multisession:
[13:37:23.316] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:37:23.316] - tweaked: FALSE
[13:37:23.316] - call: plan(list(a = strategy1, b = strategy2))
[13:37:23.321] getGlobalsAndPackages() ...
[13:37:23.321] Not searching for globals
[13:37:23.321] - globals: [0] <none>
[13:37:23.321] getGlobalsAndPackages() ... DONE
[13:37:23.322] [local output] makeClusterPSOCK() ...
[13:37:23.326] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:37:23.327] [local output] Base port: 11619
[13:37:23.327] [local output] Getting setup options for 2 cluster nodes ...
[13:37:23.328] [local output]  - Node 1 of 2 ...
[13:37:23.328] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:23.329] [local output] Rscript port: 11619

[13:37:23.330] [local output]  - Node 2 of 2 ...
[13:37:23.330] [local output] localMachine=TRUE => revtunnel=FALSE

[13:37:23.331] [local output] Rscript port: 11619

[13:37:23.331] [local output] Getting setup options for 2 cluster nodes ... done
[13:37:23.332] [local output]  - Parallel setup requested for some PSOCK nodes
[13:37:23.332] [local output] Setting up PSOCK nodes in parallel
[13:37:23.332] List of 36
[13:37:23.332]  $ worker          : chr "localhost"
[13:37:23.332]   ..- attr(*, "localhost")= logi TRUE
[13:37:23.332]  $ master          : chr "localhost"
[13:37:23.332]  $ port            : int 11619
[13:37:23.332]  $ connectTimeout  : num 120
[13:37:23.332]  $ timeout         : num 2592000
[13:37:23.332]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:37:23.332]  $ homogeneous     : logi TRUE
[13:37:23.332]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:37:23.332]  $ rscript_envs    : NULL
[13:37:23.332]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:23.332]  $ rscript_startup : NULL
[13:37:23.332]  $ rscript_sh      : chr "sh"
[13:37:23.332]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:23.332]  $ methods         : logi TRUE
[13:37:23.332]  $ socketOptions   : chr "no-delay"
[13:37:23.332]  $ useXDR          : logi FALSE
[13:37:23.332]  $ outfile         : chr "/dev/null"
[13:37:23.332]  $ renice          : int NA
[13:37:23.332]  $ rshcmd          : NULL
[13:37:23.332]  $ user            : chr(0) 
[13:37:23.332]  $ revtunnel       : logi FALSE
[13:37:23.332]  $ rshlogfile      : NULL
[13:37:23.332]  $ rshopts         : chr(0) 
[13:37:23.332]  $ rank            : int 1
[13:37:23.332]  $ manual          : logi FALSE
[13:37:23.332]  $ dryrun          : logi FALSE
[13:37:23.332]  $ quiet           : logi FALSE
[13:37:23.332]  $ setup_strategy  : chr "parallel"
[13:37:23.332]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:23.332]  $ pidfile         : chr "/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576387f40df.pid"
[13:37:23.332]  $ rshcmd_label    : NULL
[13:37:23.332]  $ rsh_call        : NULL
[13:37:23.332]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:37:23.332]  $ localMachine    : logi TRUE
[13:37:23.332]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:37:23.332]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:37:23.332]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:37:23.332]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:37:23.332]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:37:23.332]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:37:23.332]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:37:23.332]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:37:23.332]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:37:23.332]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:37:23.332]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:37:23.332]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:37:23.332]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:37:23.332]  $ arguments       :List of 28
[13:37:23.332]   ..$ worker          : chr "localhost"
[13:37:23.332]   ..$ master          : NULL
[13:37:23.332]   ..$ port            : int 11619
[13:37:23.332]   ..$ connectTimeout  : num 120
[13:37:23.332]   ..$ timeout         : num 2592000
[13:37:23.332]   ..$ rscript         : NULL
[13:37:23.332]   ..$ homogeneous     : NULL
[13:37:23.332]   ..$ rscript_args    : NULL
[13:37:23.332]   ..$ rscript_envs    : NULL
[13:37:23.332]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:37:23.332]   ..$ rscript_startup : NULL
[13:37:23.332]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:37:23.332]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:37:23.332]   ..$ methods         : logi TRUE
[13:37:23.332]   ..$ socketOptions   : chr "no-delay"
[13:37:23.332]   ..$ useXDR          : logi FALSE
[13:37:23.332]   ..$ outfile         : chr "/dev/null"
[13:37:23.332]   ..$ renice          : int NA
[13:37:23.332]   ..$ rshcmd          : NULL
[13:37:23.332]   ..$ user            : NULL
[13:37:23.332]   ..$ revtunnel       : logi NA
[13:37:23.332]   ..$ rshlogfile      : NULL
[13:37:23.332]   ..$ rshopts         : NULL
[13:37:23.332]   ..$ rank            : int 1
[13:37:23.332]   ..$ manual          : logi FALSE
[13:37:23.332]   ..$ dryrun          : logi FALSE
[13:37:23.332]   ..$ quiet           : logi FALSE
[13:37:23.332]   ..$ setup_strategy  : chr "parallel"
[13:37:23.332]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:37:23.354] [local output] System call to launch all workers:
[13:37:23.354] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpEvMoq7/worker.rank=1.parallelly.parent=87907.1576387f40df.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11619 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:37:23.355] [local output] Starting PSOCK main server
[13:37:23.356] [local output] Workers launched
[13:37:23.356] [local output] Waiting for workers to connect back
[13:37:23.356]  - [local output] 0 workers out of 2 ready
[13:37:23.603]  - [local output] 0 workers out of 2 ready
[13:37:23.604]  - [local output] 1 workers out of 2 ready
[13:37:23.608]  - [local output] 1 workers out of 2 ready
[13:37:23.609]  - [local output] 2 workers out of 2 ready
[13:37:23.609] [local output] Launching of workers completed
[13:37:23.609] [local output] Collecting session information from workers
[13:37:23.610] [local output]  - Worker #1 of 2
[13:37:23.610] [local output]  - Worker #2 of 2
[13:37:23.611] [local output] makeClusterPSOCK() ... done
[13:37:23.621] Packages needed by the future expression (n = 0): <none>
[13:37:23.622] Packages needed by future strategies (n = 1): ‘future’
[13:37:23.622] {
[13:37:23.622]     {
[13:37:23.622]         {
[13:37:23.622]             ...future.startTime <- base::Sys.time()
[13:37:23.622]             {
[13:37:23.622]                 {
[13:37:23.622]                   {
[13:37:23.622]                     {
[13:37:23.622]                       {
[13:37:23.622]                         base::local({
[13:37:23.622]                           has_future <- base::requireNamespace("future", 
[13:37:23.622]                             quietly = TRUE)
[13:37:23.622]                           if (has_future) {
[13:37:23.622]                             ns <- base::getNamespace("future")
[13:37:23.622]                             version <- ns[[".package"]][["version"]]
[13:37:23.622]                             if (is.null(version)) 
[13:37:23.622]                               version <- utils::packageVersion("future")
[13:37:23.622]                           }
[13:37:23.622]                           else {
[13:37:23.622]                             version <- NULL
[13:37:23.622]                           }
[13:37:23.622]                           if (!has_future || version < "1.8.0") {
[13:37:23.622]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:23.622]                               "", base::R.version$version.string), 
[13:37:23.622]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:23.622]                                 base::R.version$platform, 8 * 
[13:37:23.622]                                   base::.Machine$sizeof.pointer), 
[13:37:23.622]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:23.622]                                 "release", "version")], collapse = " "), 
[13:37:23.622]                               hostname = base::Sys.info()[["nodename"]])
[13:37:23.622]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:23.622]                               info)
[13:37:23.622]                             info <- base::paste(info, collapse = "; ")
[13:37:23.622]                             if (!has_future) {
[13:37:23.622]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:23.622]                                 info)
[13:37:23.622]                             }
[13:37:23.622]                             else {
[13:37:23.622]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:23.622]                                 info, version)
[13:37:23.622]                             }
[13:37:23.622]                             base::stop(msg)
[13:37:23.622]                           }
[13:37:23.622]                         })
[13:37:23.622]                       }
[13:37:23.622]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:23.622]                       base::options(mc.cores = 1L)
[13:37:23.622]                     }
[13:37:23.622]                     base::local({
[13:37:23.622]                       for (pkg in "future") {
[13:37:23.622]                         base::loadNamespace(pkg)
[13:37:23.622]                         base::library(pkg, character.only = TRUE)
[13:37:23.622]                       }
[13:37:23.622]                     })
[13:37:23.622]                   }
[13:37:23.622]                   ...future.strategy.old <- future::plan("list")
[13:37:23.622]                   options(future.plan = NULL)
[13:37:23.622]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.622]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:23.622]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:23.622]                     envir = parent.frame()) 
[13:37:23.622]                   {
[13:37:23.622]                     if (is.function(workers)) 
[13:37:23.622]                       workers <- workers()
[13:37:23.622]                     workers <- structure(as.integer(workers), 
[13:37:23.622]                       class = class(workers))
[13:37:23.622]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:23.622]                       workers >= 1)
[13:37:23.622]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:23.622]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:23.622]                     }
[13:37:23.622]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:23.622]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:23.622]                       envir = envir)
[13:37:23.622]                     if (!future$lazy) 
[13:37:23.622]                       future <- run(future)
[13:37:23.622]                     invisible(future)
[13:37:23.622]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:23.622]                 }
[13:37:23.622]                 ...future.workdir <- getwd()
[13:37:23.622]             }
[13:37:23.622]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:23.622]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:23.622]         }
[13:37:23.622]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:23.622]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:23.622]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:23.622]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:23.622]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:23.622]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:23.622]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:23.622]             base::names(...future.oldOptions))
[13:37:23.622]     }
[13:37:23.622]     if (FALSE) {
[13:37:23.622]     }
[13:37:23.622]     else {
[13:37:23.622]         if (TRUE) {
[13:37:23.622]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:23.622]                 open = "w")
[13:37:23.622]         }
[13:37:23.622]         else {
[13:37:23.622]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:23.622]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:23.622]         }
[13:37:23.622]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:23.622]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:23.622]             base::sink(type = "output", split = FALSE)
[13:37:23.622]             base::close(...future.stdout)
[13:37:23.622]         }, add = TRUE)
[13:37:23.622]     }
[13:37:23.622]     ...future.frame <- base::sys.nframe()
[13:37:23.622]     ...future.conditions <- base::list()
[13:37:23.622]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:23.622]     if (FALSE) {
[13:37:23.622]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:23.622]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:23.622]     }
[13:37:23.622]     ...future.result <- base::tryCatch({
[13:37:23.622]         base::withCallingHandlers({
[13:37:23.622]             ...future.value <- base::withVisible(base::local({
[13:37:23.622]                 ...future.makeSendCondition <- base::local({
[13:37:23.622]                   sendCondition <- NULL
[13:37:23.622]                   function(frame = 1L) {
[13:37:23.622]                     if (is.function(sendCondition)) 
[13:37:23.622]                       return(sendCondition)
[13:37:23.622]                     ns <- getNamespace("parallel")
[13:37:23.622]                     if (exists("sendData", mode = "function", 
[13:37:23.622]                       envir = ns)) {
[13:37:23.622]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:23.622]                         envir = ns)
[13:37:23.622]                       envir <- sys.frame(frame)
[13:37:23.622]                       master <- NULL
[13:37:23.622]                       while (!identical(envir, .GlobalEnv) && 
[13:37:23.622]                         !identical(envir, emptyenv())) {
[13:37:23.622]                         if (exists("master", mode = "list", envir = envir, 
[13:37:23.622]                           inherits = FALSE)) {
[13:37:23.622]                           master <- get("master", mode = "list", 
[13:37:23.622]                             envir = envir, inherits = FALSE)
[13:37:23.622]                           if (inherits(master, c("SOCKnode", 
[13:37:23.622]                             "SOCK0node"))) {
[13:37:23.622]                             sendCondition <<- function(cond) {
[13:37:23.622]                               data <- list(type = "VALUE", value = cond, 
[13:37:23.622]                                 success = TRUE)
[13:37:23.622]                               parallel_sendData(master, data)
[13:37:23.622]                             }
[13:37:23.622]                             return(sendCondition)
[13:37:23.622]                           }
[13:37:23.622]                         }
[13:37:23.622]                         frame <- frame + 1L
[13:37:23.622]                         envir <- sys.frame(frame)
[13:37:23.622]                       }
[13:37:23.622]                     }
[13:37:23.622]                     sendCondition <<- function(cond) NULL
[13:37:23.622]                   }
[13:37:23.622]                 })
[13:37:23.622]                 withCallingHandlers({
[13:37:23.622]                   NA
[13:37:23.622]                 }, immediateCondition = function(cond) {
[13:37:23.622]                   sendCondition <- ...future.makeSendCondition()
[13:37:23.622]                   sendCondition(cond)
[13:37:23.622]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.622]                   {
[13:37:23.622]                     inherits <- base::inherits
[13:37:23.622]                     invokeRestart <- base::invokeRestart
[13:37:23.622]                     is.null <- base::is.null
[13:37:23.622]                     muffled <- FALSE
[13:37:23.622]                     if (inherits(cond, "message")) {
[13:37:23.622]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:23.622]                       if (muffled) 
[13:37:23.622]                         invokeRestart("muffleMessage")
[13:37:23.622]                     }
[13:37:23.622]                     else if (inherits(cond, "warning")) {
[13:37:23.622]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:23.622]                       if (muffled) 
[13:37:23.622]                         invokeRestart("muffleWarning")
[13:37:23.622]                     }
[13:37:23.622]                     else if (inherits(cond, "condition")) {
[13:37:23.622]                       if (!is.null(pattern)) {
[13:37:23.622]                         computeRestarts <- base::computeRestarts
[13:37:23.622]                         grepl <- base::grepl
[13:37:23.622]                         restarts <- computeRestarts(cond)
[13:37:23.622]                         for (restart in restarts) {
[13:37:23.622]                           name <- restart$name
[13:37:23.622]                           if (is.null(name)) 
[13:37:23.622]                             next
[13:37:23.622]                           if (!grepl(pattern, name)) 
[13:37:23.622]                             next
[13:37:23.622]                           invokeRestart(restart)
[13:37:23.622]                           muffled <- TRUE
[13:37:23.622]                           break
[13:37:23.622]                         }
[13:37:23.622]                       }
[13:37:23.622]                     }
[13:37:23.622]                     invisible(muffled)
[13:37:23.622]                   }
[13:37:23.622]                   muffleCondition(cond)
[13:37:23.622]                 })
[13:37:23.622]             }))
[13:37:23.622]             future::FutureResult(value = ...future.value$value, 
[13:37:23.622]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.622]                   ...future.rng), globalenv = if (FALSE) 
[13:37:23.622]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:23.622]                     ...future.globalenv.names))
[13:37:23.622]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:23.622]         }, condition = base::local({
[13:37:23.622]             c <- base::c
[13:37:23.622]             inherits <- base::inherits
[13:37:23.622]             invokeRestart <- base::invokeRestart
[13:37:23.622]             length <- base::length
[13:37:23.622]             list <- base::list
[13:37:23.622]             seq.int <- base::seq.int
[13:37:23.622]             signalCondition <- base::signalCondition
[13:37:23.622]             sys.calls <- base::sys.calls
[13:37:23.622]             `[[` <- base::`[[`
[13:37:23.622]             `+` <- base::`+`
[13:37:23.622]             `<<-` <- base::`<<-`
[13:37:23.622]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:23.622]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:23.622]                   3L)]
[13:37:23.622]             }
[13:37:23.622]             function(cond) {
[13:37:23.622]                 is_error <- inherits(cond, "error")
[13:37:23.622]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:23.622]                   NULL)
[13:37:23.622]                 if (is_error) {
[13:37:23.622]                   sessionInformation <- function() {
[13:37:23.622]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:23.622]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:23.622]                       search = base::search(), system = base::Sys.info())
[13:37:23.622]                   }
[13:37:23.622]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.622]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:23.622]                     cond$call), session = sessionInformation(), 
[13:37:23.622]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:23.622]                   signalCondition(cond)
[13:37:23.622]                 }
[13:37:23.622]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:23.622]                 "immediateCondition"))) {
[13:37:23.622]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:23.622]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.622]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:23.622]                   if (TRUE && !signal) {
[13:37:23.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.622]                     {
[13:37:23.622]                       inherits <- base::inherits
[13:37:23.622]                       invokeRestart <- base::invokeRestart
[13:37:23.622]                       is.null <- base::is.null
[13:37:23.622]                       muffled <- FALSE
[13:37:23.622]                       if (inherits(cond, "message")) {
[13:37:23.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.622]                         if (muffled) 
[13:37:23.622]                           invokeRestart("muffleMessage")
[13:37:23.622]                       }
[13:37:23.622]                       else if (inherits(cond, "warning")) {
[13:37:23.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.622]                         if (muffled) 
[13:37:23.622]                           invokeRestart("muffleWarning")
[13:37:23.622]                       }
[13:37:23.622]                       else if (inherits(cond, "condition")) {
[13:37:23.622]                         if (!is.null(pattern)) {
[13:37:23.622]                           computeRestarts <- base::computeRestarts
[13:37:23.622]                           grepl <- base::grepl
[13:37:23.622]                           restarts <- computeRestarts(cond)
[13:37:23.622]                           for (restart in restarts) {
[13:37:23.622]                             name <- restart$name
[13:37:23.622]                             if (is.null(name)) 
[13:37:23.622]                               next
[13:37:23.622]                             if (!grepl(pattern, name)) 
[13:37:23.622]                               next
[13:37:23.622]                             invokeRestart(restart)
[13:37:23.622]                             muffled <- TRUE
[13:37:23.622]                             break
[13:37:23.622]                           }
[13:37:23.622]                         }
[13:37:23.622]                       }
[13:37:23.622]                       invisible(muffled)
[13:37:23.622]                     }
[13:37:23.622]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.622]                   }
[13:37:23.622]                 }
[13:37:23.622]                 else {
[13:37:23.622]                   if (TRUE) {
[13:37:23.622]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.622]                     {
[13:37:23.622]                       inherits <- base::inherits
[13:37:23.622]                       invokeRestart <- base::invokeRestart
[13:37:23.622]                       is.null <- base::is.null
[13:37:23.622]                       muffled <- FALSE
[13:37:23.622]                       if (inherits(cond, "message")) {
[13:37:23.622]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.622]                         if (muffled) 
[13:37:23.622]                           invokeRestart("muffleMessage")
[13:37:23.622]                       }
[13:37:23.622]                       else if (inherits(cond, "warning")) {
[13:37:23.622]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.622]                         if (muffled) 
[13:37:23.622]                           invokeRestart("muffleWarning")
[13:37:23.622]                       }
[13:37:23.622]                       else if (inherits(cond, "condition")) {
[13:37:23.622]                         if (!is.null(pattern)) {
[13:37:23.622]                           computeRestarts <- base::computeRestarts
[13:37:23.622]                           grepl <- base::grepl
[13:37:23.622]                           restarts <- computeRestarts(cond)
[13:37:23.622]                           for (restart in restarts) {
[13:37:23.622]                             name <- restart$name
[13:37:23.622]                             if (is.null(name)) 
[13:37:23.622]                               next
[13:37:23.622]                             if (!grepl(pattern, name)) 
[13:37:23.622]                               next
[13:37:23.622]                             invokeRestart(restart)
[13:37:23.622]                             muffled <- TRUE
[13:37:23.622]                             break
[13:37:23.622]                           }
[13:37:23.622]                         }
[13:37:23.622]                       }
[13:37:23.622]                       invisible(muffled)
[13:37:23.622]                     }
[13:37:23.622]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.622]                   }
[13:37:23.622]                 }
[13:37:23.622]             }
[13:37:23.622]         }))
[13:37:23.622]     }, error = function(ex) {
[13:37:23.622]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:23.622]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.622]                 ...future.rng), started = ...future.startTime, 
[13:37:23.622]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:23.622]             version = "1.8"), class = "FutureResult")
[13:37:23.622]     }, finally = {
[13:37:23.622]         if (!identical(...future.workdir, getwd())) 
[13:37:23.622]             setwd(...future.workdir)
[13:37:23.622]         {
[13:37:23.622]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:23.622]                 ...future.oldOptions$nwarnings <- NULL
[13:37:23.622]             }
[13:37:23.622]             base::options(...future.oldOptions)
[13:37:23.622]             if (.Platform$OS.type == "windows") {
[13:37:23.622]                 old_names <- names(...future.oldEnvVars)
[13:37:23.622]                 envs <- base::Sys.getenv()
[13:37:23.622]                 names <- names(envs)
[13:37:23.622]                 common <- intersect(names, old_names)
[13:37:23.622]                 added <- setdiff(names, old_names)
[13:37:23.622]                 removed <- setdiff(old_names, names)
[13:37:23.622]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:23.622]                   envs[common]]
[13:37:23.622]                 NAMES <- toupper(changed)
[13:37:23.622]                 args <- list()
[13:37:23.622]                 for (kk in seq_along(NAMES)) {
[13:37:23.622]                   name <- changed[[kk]]
[13:37:23.622]                   NAME <- NAMES[[kk]]
[13:37:23.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.622]                     next
[13:37:23.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.622]                 }
[13:37:23.622]                 NAMES <- toupper(added)
[13:37:23.622]                 for (kk in seq_along(NAMES)) {
[13:37:23.622]                   name <- added[[kk]]
[13:37:23.622]                   NAME <- NAMES[[kk]]
[13:37:23.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.622]                     next
[13:37:23.622]                   args[[name]] <- ""
[13:37:23.622]                 }
[13:37:23.622]                 NAMES <- toupper(removed)
[13:37:23.622]                 for (kk in seq_along(NAMES)) {
[13:37:23.622]                   name <- removed[[kk]]
[13:37:23.622]                   NAME <- NAMES[[kk]]
[13:37:23.622]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.622]                     next
[13:37:23.622]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.622]                 }
[13:37:23.622]                 if (length(args) > 0) 
[13:37:23.622]                   base::do.call(base::Sys.setenv, args = args)
[13:37:23.622]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:23.622]             }
[13:37:23.622]             else {
[13:37:23.622]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:23.622]             }
[13:37:23.622]             {
[13:37:23.622]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:23.622]                   0L) {
[13:37:23.622]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:23.622]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:23.622]                   base::options(opts)
[13:37:23.622]                 }
[13:37:23.622]                 {
[13:37:23.622]                   {
[13:37:23.622]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:23.622]                     NULL
[13:37:23.622]                   }
[13:37:23.622]                   options(future.plan = NULL)
[13:37:23.622]                   if (is.na(NA_character_)) 
[13:37:23.622]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.622]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:23.622]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:23.622]                     .init = FALSE)
[13:37:23.622]                 }
[13:37:23.622]             }
[13:37:23.622]         }
[13:37:23.622]     })
[13:37:23.622]     if (TRUE) {
[13:37:23.622]         base::sink(type = "output", split = FALSE)
[13:37:23.622]         if (TRUE) {
[13:37:23.622]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:23.622]         }
[13:37:23.622]         else {
[13:37:23.622]             ...future.result["stdout"] <- base::list(NULL)
[13:37:23.622]         }
[13:37:23.622]         base::close(...future.stdout)
[13:37:23.622]         ...future.stdout <- NULL
[13:37:23.622]     }
[13:37:23.622]     ...future.result$conditions <- ...future.conditions
[13:37:23.622]     ...future.result$finished <- base::Sys.time()
[13:37:23.622]     ...future.result
[13:37:23.622] }
[13:37:23.676] MultisessionFuture started
[13:37:23.676] result() for ClusterFuture ...
[13:37:23.677] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.677] - Validating connection of MultisessionFuture
[13:37:23.723] - received message: FutureResult
[13:37:23.723] - Received FutureResult
[13:37:23.724] - Erased future from FutureRegistry
[13:37:23.724] result() for ClusterFuture ...
[13:37:23.724] - result already collected: FutureResult
[13:37:23.724] result() for ClusterFuture ... done
[13:37:23.724] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.724] result() for ClusterFuture ... done
[13:37:23.724] result() for ClusterFuture ...
[13:37:23.724] - result already collected: FutureResult
[13:37:23.724] result() for ClusterFuture ... done
[13:37:23.724] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:37:23.728] plan(): nbrOfWorkers() = 2
[13:37:23.728] getGlobalsAndPackages() ...
[13:37:23.728] Searching for globals...
[13:37:23.744] - globals found: [21] ‘{’, ‘<-’, ‘unclass’, ‘::’, ‘[’, ‘nested’, ‘-’, ‘stopifnot’, ‘==’, ‘length’, ‘inherits’, ‘[[’, ‘strategy2’, ‘for’, ‘seq_along’, ‘attr’, ‘attr<-’, ‘[[<-’, ‘all.equal’, ‘list’, ‘%<-%’
[13:37:23.744] Searching for globals ... DONE
[13:37:23.744] Resolving globals: FALSE
[13:37:23.745] The total size of the 2 globals is 88.27 KiB (90384 bytes)
[13:37:23.746] The total size of the 2 globals exported for future expression (‘{; a <- 1L; plan_a <- unclass(future::plan("list")); nested_a <- nested[-1]; stopifnot(length(nested_a) == 1L, length(plan_a) == 1L, inherits(plan_a[[1]],; "future"), inherits(future::plan("next"), strategy2)); ...; }; y; }’) is 88.27 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘nested’ (88.15 KiB of class ‘list’) and ‘strategy2’ (120 bytes of class ‘character’)
[13:37:23.746] - globals: [2] ‘nested’, ‘strategy2’
[13:37:23.746] - packages: [1] ‘future’
[13:37:23.746] getGlobalsAndPackages() ... DONE
[13:37:23.747] run() for ‘Future’ ...
[13:37:23.747] - state: ‘created’
[13:37:23.747] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:23.761] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:23.761] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:23.761]   - Field: ‘node’
[13:37:23.761]   - Field: ‘label’
[13:37:23.761]   - Field: ‘local’
[13:37:23.761]   - Field: ‘owner’
[13:37:23.761]   - Field: ‘envir’
[13:37:23.761]   - Field: ‘workers’
[13:37:23.761]   - Field: ‘packages’
[13:37:23.761]   - Field: ‘gc’
[13:37:23.762]   - Field: ‘conditions’
[13:37:23.762]   - Field: ‘persistent’
[13:37:23.762]   - Field: ‘expr’
[13:37:23.762]   - Field: ‘uuid’
[13:37:23.762]   - Field: ‘seed’
[13:37:23.762]   - Field: ‘version’
[13:37:23.762]   - Field: ‘result’
[13:37:23.762]   - Field: ‘asynchronous’
[13:37:23.762]   - Field: ‘calls’
[13:37:23.762]   - Field: ‘globals’
[13:37:23.763]   - Field: ‘stdout’
[13:37:23.763]   - Field: ‘earlySignal’
[13:37:23.763]   - Field: ‘lazy’
[13:37:23.763]   - Field: ‘state’
[13:37:23.763] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:23.763] - Launch lazy future ...
[13:37:23.763] Packages needed by the future expression (n = 1): ‘future’
[13:37:23.763] Packages needed by future strategies (n = 1): ‘future’
[13:37:23.764] {
[13:37:23.764]     {
[13:37:23.764]         {
[13:37:23.764]             ...future.startTime <- base::Sys.time()
[13:37:23.764]             {
[13:37:23.764]                 {
[13:37:23.764]                   {
[13:37:23.764]                     {
[13:37:23.764]                       {
[13:37:23.764]                         base::local({
[13:37:23.764]                           has_future <- base::requireNamespace("future", 
[13:37:23.764]                             quietly = TRUE)
[13:37:23.764]                           if (has_future) {
[13:37:23.764]                             ns <- base::getNamespace("future")
[13:37:23.764]                             version <- ns[[".package"]][["version"]]
[13:37:23.764]                             if (is.null(version)) 
[13:37:23.764]                               version <- utils::packageVersion("future")
[13:37:23.764]                           }
[13:37:23.764]                           else {
[13:37:23.764]                             version <- NULL
[13:37:23.764]                           }
[13:37:23.764]                           if (!has_future || version < "1.8.0") {
[13:37:23.764]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:23.764]                               "", base::R.version$version.string), 
[13:37:23.764]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:23.764]                                 base::R.version$platform, 8 * 
[13:37:23.764]                                   base::.Machine$sizeof.pointer), 
[13:37:23.764]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:23.764]                                 "release", "version")], collapse = " "), 
[13:37:23.764]                               hostname = base::Sys.info()[["nodename"]])
[13:37:23.764]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:23.764]                               info)
[13:37:23.764]                             info <- base::paste(info, collapse = "; ")
[13:37:23.764]                             if (!has_future) {
[13:37:23.764]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:23.764]                                 info)
[13:37:23.764]                             }
[13:37:23.764]                             else {
[13:37:23.764]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:23.764]                                 info, version)
[13:37:23.764]                             }
[13:37:23.764]                             base::stop(msg)
[13:37:23.764]                           }
[13:37:23.764]                         })
[13:37:23.764]                       }
[13:37:23.764]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:23.764]                       base::options(mc.cores = 1L)
[13:37:23.764]                     }
[13:37:23.764]                     base::local({
[13:37:23.764]                       for (pkg in "future") {
[13:37:23.764]                         base::loadNamespace(pkg)
[13:37:23.764]                         base::library(pkg, character.only = TRUE)
[13:37:23.764]                       }
[13:37:23.764]                     })
[13:37:23.764]                   }
[13:37:23.764]                   ...future.strategy.old <- future::plan("list")
[13:37:23.764]                   options(future.plan = NULL)
[13:37:23.764]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.764]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:23.764]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:23.764]                     envir = parent.frame()) 
[13:37:23.764]                   {
[13:37:23.764]                     if (is.function(workers)) 
[13:37:23.764]                       workers <- workers()
[13:37:23.764]                     workers <- structure(as.integer(workers), 
[13:37:23.764]                       class = class(workers))
[13:37:23.764]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:23.764]                       workers >= 1)
[13:37:23.764]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:23.764]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:23.764]                     }
[13:37:23.764]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:23.764]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:23.764]                       envir = envir)
[13:37:23.764]                     if (!future$lazy) 
[13:37:23.764]                       future <- run(future)
[13:37:23.764]                     invisible(future)
[13:37:23.764]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:23.764]                 }
[13:37:23.764]                 ...future.workdir <- getwd()
[13:37:23.764]             }
[13:37:23.764]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:23.764]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:23.764]         }
[13:37:23.764]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:23.764]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:23.764]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:23.764]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:23.764]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:23.764]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:23.764]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:23.764]             base::names(...future.oldOptions))
[13:37:23.764]     }
[13:37:23.764]     if (FALSE) {
[13:37:23.764]     }
[13:37:23.764]     else {
[13:37:23.764]         if (TRUE) {
[13:37:23.764]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:23.764]                 open = "w")
[13:37:23.764]         }
[13:37:23.764]         else {
[13:37:23.764]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:23.764]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:23.764]         }
[13:37:23.764]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:23.764]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:23.764]             base::sink(type = "output", split = FALSE)
[13:37:23.764]             base::close(...future.stdout)
[13:37:23.764]         }, add = TRUE)
[13:37:23.764]     }
[13:37:23.764]     ...future.frame <- base::sys.nframe()
[13:37:23.764]     ...future.conditions <- base::list()
[13:37:23.764]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:23.764]     if (FALSE) {
[13:37:23.764]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:23.764]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:23.764]     }
[13:37:23.764]     ...future.result <- base::tryCatch({
[13:37:23.764]         base::withCallingHandlers({
[13:37:23.764]             ...future.value <- base::withVisible(base::local({
[13:37:23.764]                 ...future.makeSendCondition <- base::local({
[13:37:23.764]                   sendCondition <- NULL
[13:37:23.764]                   function(frame = 1L) {
[13:37:23.764]                     if (is.function(sendCondition)) 
[13:37:23.764]                       return(sendCondition)
[13:37:23.764]                     ns <- getNamespace("parallel")
[13:37:23.764]                     if (exists("sendData", mode = "function", 
[13:37:23.764]                       envir = ns)) {
[13:37:23.764]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:23.764]                         envir = ns)
[13:37:23.764]                       envir <- sys.frame(frame)
[13:37:23.764]                       master <- NULL
[13:37:23.764]                       while (!identical(envir, .GlobalEnv) && 
[13:37:23.764]                         !identical(envir, emptyenv())) {
[13:37:23.764]                         if (exists("master", mode = "list", envir = envir, 
[13:37:23.764]                           inherits = FALSE)) {
[13:37:23.764]                           master <- get("master", mode = "list", 
[13:37:23.764]                             envir = envir, inherits = FALSE)
[13:37:23.764]                           if (inherits(master, c("SOCKnode", 
[13:37:23.764]                             "SOCK0node"))) {
[13:37:23.764]                             sendCondition <<- function(cond) {
[13:37:23.764]                               data <- list(type = "VALUE", value = cond, 
[13:37:23.764]                                 success = TRUE)
[13:37:23.764]                               parallel_sendData(master, data)
[13:37:23.764]                             }
[13:37:23.764]                             return(sendCondition)
[13:37:23.764]                           }
[13:37:23.764]                         }
[13:37:23.764]                         frame <- frame + 1L
[13:37:23.764]                         envir <- sys.frame(frame)
[13:37:23.764]                       }
[13:37:23.764]                     }
[13:37:23.764]                     sendCondition <<- function(cond) NULL
[13:37:23.764]                   }
[13:37:23.764]                 })
[13:37:23.764]                 withCallingHandlers({
[13:37:23.764]                   {
[13:37:23.764]                     a <- 1L
[13:37:23.764]                     plan_a <- unclass(future::plan("list"))
[13:37:23.764]                     nested_a <- nested[-1]
[13:37:23.764]                     stopifnot(length(nested_a) == 1L, length(plan_a) == 
[13:37:23.764]                       1L, inherits(plan_a[[1]], "future"), inherits(future::plan("next"), 
[13:37:23.764]                       strategy2))
[13:37:23.764]                     for (kk in seq_along(plan_a)) attr(plan_a[[kk]], 
[13:37:23.764]                       "init") <- NULL
[13:37:23.764]                     for (kk in seq_along(nested_a)) attr(nested_a[[kk]], 
[13:37:23.764]                       "init") <- NULL
[13:37:23.764]                     stopifnot(all.equal(plan_a, nested_a))
[13:37:23.764]                     y %<-% {
[13:37:23.764]                       b <- 2L
[13:37:23.764]                       plan_b <- future::plan("list")
[13:37:23.764]                       nested_b <- nested_a[-1]
[13:37:23.764]                       stopifnot(length(nested_b) == 0L, length(plan_b) == 
[13:37:23.764]                         1L, inherits(plan_b[[1]], "future"), 
[13:37:23.764]                         inherits(future::plan("next"), "sequential"))
[13:37:23.764]                       list(a = a, nested_a = nested_a, plan_a = plan_a, 
[13:37:23.764]                         b = b, nested_b = nested_b, plan_b = plan_b)
[13:37:23.764]                     }
[13:37:23.764]                     y
[13:37:23.764]                   }
[13:37:23.764]                 }, immediateCondition = function(cond) {
[13:37:23.764]                   sendCondition <- ...future.makeSendCondition()
[13:37:23.764]                   sendCondition(cond)
[13:37:23.764]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.764]                   {
[13:37:23.764]                     inherits <- base::inherits
[13:37:23.764]                     invokeRestart <- base::invokeRestart
[13:37:23.764]                     is.null <- base::is.null
[13:37:23.764]                     muffled <- FALSE
[13:37:23.764]                     if (inherits(cond, "message")) {
[13:37:23.764]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:23.764]                       if (muffled) 
[13:37:23.764]                         invokeRestart("muffleMessage")
[13:37:23.764]                     }
[13:37:23.764]                     else if (inherits(cond, "warning")) {
[13:37:23.764]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:23.764]                       if (muffled) 
[13:37:23.764]                         invokeRestart("muffleWarning")
[13:37:23.764]                     }
[13:37:23.764]                     else if (inherits(cond, "condition")) {
[13:37:23.764]                       if (!is.null(pattern)) {
[13:37:23.764]                         computeRestarts <- base::computeRestarts
[13:37:23.764]                         grepl <- base::grepl
[13:37:23.764]                         restarts <- computeRestarts(cond)
[13:37:23.764]                         for (restart in restarts) {
[13:37:23.764]                           name <- restart$name
[13:37:23.764]                           if (is.null(name)) 
[13:37:23.764]                             next
[13:37:23.764]                           if (!grepl(pattern, name)) 
[13:37:23.764]                             next
[13:37:23.764]                           invokeRestart(restart)
[13:37:23.764]                           muffled <- TRUE
[13:37:23.764]                           break
[13:37:23.764]                         }
[13:37:23.764]                       }
[13:37:23.764]                     }
[13:37:23.764]                     invisible(muffled)
[13:37:23.764]                   }
[13:37:23.764]                   muffleCondition(cond)
[13:37:23.764]                 })
[13:37:23.764]             }))
[13:37:23.764]             future::FutureResult(value = ...future.value$value, 
[13:37:23.764]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.764]                   ...future.rng), globalenv = if (FALSE) 
[13:37:23.764]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:23.764]                     ...future.globalenv.names))
[13:37:23.764]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:23.764]         }, condition = base::local({
[13:37:23.764]             c <- base::c
[13:37:23.764]             inherits <- base::inherits
[13:37:23.764]             invokeRestart <- base::invokeRestart
[13:37:23.764]             length <- base::length
[13:37:23.764]             list <- base::list
[13:37:23.764]             seq.int <- base::seq.int
[13:37:23.764]             signalCondition <- base::signalCondition
[13:37:23.764]             sys.calls <- base::sys.calls
[13:37:23.764]             `[[` <- base::`[[`
[13:37:23.764]             `+` <- base::`+`
[13:37:23.764]             `<<-` <- base::`<<-`
[13:37:23.764]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:23.764]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:23.764]                   3L)]
[13:37:23.764]             }
[13:37:23.764]             function(cond) {
[13:37:23.764]                 is_error <- inherits(cond, "error")
[13:37:23.764]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:23.764]                   NULL)
[13:37:23.764]                 if (is_error) {
[13:37:23.764]                   sessionInformation <- function() {
[13:37:23.764]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:23.764]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:23.764]                       search = base::search(), system = base::Sys.info())
[13:37:23.764]                   }
[13:37:23.764]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.764]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:23.764]                     cond$call), session = sessionInformation(), 
[13:37:23.764]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:23.764]                   signalCondition(cond)
[13:37:23.764]                 }
[13:37:23.764]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:23.764]                 "immediateCondition"))) {
[13:37:23.764]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:23.764]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.764]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:23.764]                   if (TRUE && !signal) {
[13:37:23.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.764]                     {
[13:37:23.764]                       inherits <- base::inherits
[13:37:23.764]                       invokeRestart <- base::invokeRestart
[13:37:23.764]                       is.null <- base::is.null
[13:37:23.764]                       muffled <- FALSE
[13:37:23.764]                       if (inherits(cond, "message")) {
[13:37:23.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.764]                         if (muffled) 
[13:37:23.764]                           invokeRestart("muffleMessage")
[13:37:23.764]                       }
[13:37:23.764]                       else if (inherits(cond, "warning")) {
[13:37:23.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.764]                         if (muffled) 
[13:37:23.764]                           invokeRestart("muffleWarning")
[13:37:23.764]                       }
[13:37:23.764]                       else if (inherits(cond, "condition")) {
[13:37:23.764]                         if (!is.null(pattern)) {
[13:37:23.764]                           computeRestarts <- base::computeRestarts
[13:37:23.764]                           grepl <- base::grepl
[13:37:23.764]                           restarts <- computeRestarts(cond)
[13:37:23.764]                           for (restart in restarts) {
[13:37:23.764]                             name <- restart$name
[13:37:23.764]                             if (is.null(name)) 
[13:37:23.764]                               next
[13:37:23.764]                             if (!grepl(pattern, name)) 
[13:37:23.764]                               next
[13:37:23.764]                             invokeRestart(restart)
[13:37:23.764]                             muffled <- TRUE
[13:37:23.764]                             break
[13:37:23.764]                           }
[13:37:23.764]                         }
[13:37:23.764]                       }
[13:37:23.764]                       invisible(muffled)
[13:37:23.764]                     }
[13:37:23.764]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.764]                   }
[13:37:23.764]                 }
[13:37:23.764]                 else {
[13:37:23.764]                   if (TRUE) {
[13:37:23.764]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.764]                     {
[13:37:23.764]                       inherits <- base::inherits
[13:37:23.764]                       invokeRestart <- base::invokeRestart
[13:37:23.764]                       is.null <- base::is.null
[13:37:23.764]                       muffled <- FALSE
[13:37:23.764]                       if (inherits(cond, "message")) {
[13:37:23.764]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.764]                         if (muffled) 
[13:37:23.764]                           invokeRestart("muffleMessage")
[13:37:23.764]                       }
[13:37:23.764]                       else if (inherits(cond, "warning")) {
[13:37:23.764]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.764]                         if (muffled) 
[13:37:23.764]                           invokeRestart("muffleWarning")
[13:37:23.764]                       }
[13:37:23.764]                       else if (inherits(cond, "condition")) {
[13:37:23.764]                         if (!is.null(pattern)) {
[13:37:23.764]                           computeRestarts <- base::computeRestarts
[13:37:23.764]                           grepl <- base::grepl
[13:37:23.764]                           restarts <- computeRestarts(cond)
[13:37:23.764]                           for (restart in restarts) {
[13:37:23.764]                             name <- restart$name
[13:37:23.764]                             if (is.null(name)) 
[13:37:23.764]                               next
[13:37:23.764]                             if (!grepl(pattern, name)) 
[13:37:23.764]                               next
[13:37:23.764]                             invokeRestart(restart)
[13:37:23.764]                             muffled <- TRUE
[13:37:23.764]                             break
[13:37:23.764]                           }
[13:37:23.764]                         }
[13:37:23.764]                       }
[13:37:23.764]                       invisible(muffled)
[13:37:23.764]                     }
[13:37:23.764]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.764]                   }
[13:37:23.764]                 }
[13:37:23.764]             }
[13:37:23.764]         }))
[13:37:23.764]     }, error = function(ex) {
[13:37:23.764]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:23.764]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.764]                 ...future.rng), started = ...future.startTime, 
[13:37:23.764]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:23.764]             version = "1.8"), class = "FutureResult")
[13:37:23.764]     }, finally = {
[13:37:23.764]         if (!identical(...future.workdir, getwd())) 
[13:37:23.764]             setwd(...future.workdir)
[13:37:23.764]         {
[13:37:23.764]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:23.764]                 ...future.oldOptions$nwarnings <- NULL
[13:37:23.764]             }
[13:37:23.764]             base::options(...future.oldOptions)
[13:37:23.764]             if (.Platform$OS.type == "windows") {
[13:37:23.764]                 old_names <- names(...future.oldEnvVars)
[13:37:23.764]                 envs <- base::Sys.getenv()
[13:37:23.764]                 names <- names(envs)
[13:37:23.764]                 common <- intersect(names, old_names)
[13:37:23.764]                 added <- setdiff(names, old_names)
[13:37:23.764]                 removed <- setdiff(old_names, names)
[13:37:23.764]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:23.764]                   envs[common]]
[13:37:23.764]                 NAMES <- toupper(changed)
[13:37:23.764]                 args <- list()
[13:37:23.764]                 for (kk in seq_along(NAMES)) {
[13:37:23.764]                   name <- changed[[kk]]
[13:37:23.764]                   NAME <- NAMES[[kk]]
[13:37:23.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.764]                     next
[13:37:23.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.764]                 }
[13:37:23.764]                 NAMES <- toupper(added)
[13:37:23.764]                 for (kk in seq_along(NAMES)) {
[13:37:23.764]                   name <- added[[kk]]
[13:37:23.764]                   NAME <- NAMES[[kk]]
[13:37:23.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.764]                     next
[13:37:23.764]                   args[[name]] <- ""
[13:37:23.764]                 }
[13:37:23.764]                 NAMES <- toupper(removed)
[13:37:23.764]                 for (kk in seq_along(NAMES)) {
[13:37:23.764]                   name <- removed[[kk]]
[13:37:23.764]                   NAME <- NAMES[[kk]]
[13:37:23.764]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.764]                     next
[13:37:23.764]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.764]                 }
[13:37:23.764]                 if (length(args) > 0) 
[13:37:23.764]                   base::do.call(base::Sys.setenv, args = args)
[13:37:23.764]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:23.764]             }
[13:37:23.764]             else {
[13:37:23.764]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:23.764]             }
[13:37:23.764]             {
[13:37:23.764]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:23.764]                   0L) {
[13:37:23.764]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:23.764]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:23.764]                   base::options(opts)
[13:37:23.764]                 }
[13:37:23.764]                 {
[13:37:23.764]                   {
[13:37:23.764]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:23.764]                     NULL
[13:37:23.764]                   }
[13:37:23.764]                   options(future.plan = NULL)
[13:37:23.764]                   if (is.na(NA_character_)) 
[13:37:23.764]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.764]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:23.764]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:23.764]                     .init = FALSE)
[13:37:23.764]                 }
[13:37:23.764]             }
[13:37:23.764]         }
[13:37:23.764]     })
[13:37:23.764]     if (TRUE) {
[13:37:23.764]         base::sink(type = "output", split = FALSE)
[13:37:23.764]         if (TRUE) {
[13:37:23.764]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:23.764]         }
[13:37:23.764]         else {
[13:37:23.764]             ...future.result["stdout"] <- base::list(NULL)
[13:37:23.764]         }
[13:37:23.764]         base::close(...future.stdout)
[13:37:23.764]         ...future.stdout <- NULL
[13:37:23.764]     }
[13:37:23.764]     ...future.result$conditions <- ...future.conditions
[13:37:23.764]     ...future.result$finished <- base::Sys.time()
[13:37:23.764]     ...future.result
[13:37:23.764] }
[13:37:23.767] Exporting 2 global objects (88.27 KiB) to cluster node #1 ...
[13:37:23.767] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ...
[13:37:23.810] Exporting ‘nested’ (88.15 KiB) to cluster node #1 ... DONE
[13:37:23.811] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ...
[13:37:23.811] Exporting ‘strategy2’ (120 bytes) to cluster node #1 ... DONE
[13:37:23.811] Exporting 2 global objects (88.27 KiB) to cluster node #1 ... DONE
[13:37:23.812] MultisessionFuture started
[13:37:23.812] - Launch lazy future ... done
[13:37:23.812] run() for ‘MultisessionFuture’ ... done
[13:37:23.812] result() for ClusterFuture ...
[13:37:23.813] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.813] - Validating connection of MultisessionFuture
[13:37:23.886] - received message: FutureResult
[13:37:23.887] - Received FutureResult
[13:37:23.887] - Erased future from FutureRegistry
[13:37:23.887] result() for ClusterFuture ...
[13:37:23.887] - result already collected: FutureResult
[13:37:23.887] result() for ClusterFuture ... done
[13:37:23.887] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.887] result() for ClusterFuture ... done
[13:37:23.887] result() for ClusterFuture ...
[13:37:23.888] - result already collected: FutureResult
[13:37:23.888] result() for ClusterFuture ... done
List of 6
 $ a       : int 1
 $ nested_a:List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ plan_a  :List of 1
  ..$ b:function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), 
    envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:5] "multisession" "cluster" "multiprocess" "future" ...
  .. ..- attr(*, "untweakable")= chr "persistent"
  .. ..- attr(*, "call")= language plan(list(a = strategy1, b = strategy2))
 $ b       : int 2
 $ nested_b: Named list()
 $ plan_b  :List of 1
  ..$ :function (..., envir = parent.frame())  
  .. ..- attr(*, "class")= chr [1:4] "sequential" "uniprocess" "future" "function"
  ..- attr(*, "class")= chr [1:2] "FutureStrategyList" "list"
[13:37:23.893] getGlobalsAndPackages() ...
[13:37:23.893] Searching for globals...
[13:37:23.895] - globals found: [7] ‘{’, ‘value’, ‘future’, ‘subset’, ‘data’, ‘==’, ‘a’
[13:37:23.895] Searching for globals ... DONE
[13:37:23.895] Resolving globals: FALSE
[13:37:23.896] The total size of the 1 globals is 128 bytes (128 bytes)
[13:37:23.896] The total size of the 1 globals exported for future expression (‘{; value(future(subset(data, a == 2))); }’) is 128 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘data’ (128 bytes of class ‘list’)
[13:37:23.896] - globals: [1] ‘data’
[13:37:23.896] - packages: [1] ‘future’
[13:37:23.896] getGlobalsAndPackages() ... DONE
[13:37:23.897] run() for ‘Future’ ...
[13:37:23.897] - state: ‘created’
[13:37:23.897] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:37:23.911] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:37:23.911] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:37:23.911]   - Field: ‘node’
[13:37:23.911]   - Field: ‘label’
[13:37:23.911]   - Field: ‘local’
[13:37:23.911]   - Field: ‘owner’
[13:37:23.911]   - Field: ‘envir’
[13:37:23.911]   - Field: ‘workers’
[13:37:23.911]   - Field: ‘packages’
[13:37:23.911]   - Field: ‘gc’
[13:37:23.912]   - Field: ‘conditions’
[13:37:23.912]   - Field: ‘persistent’
[13:37:23.912]   - Field: ‘expr’
[13:37:23.912]   - Field: ‘uuid’
[13:37:23.912]   - Field: ‘seed’
[13:37:23.912]   - Field: ‘version’
[13:37:23.912]   - Field: ‘result’
[13:37:23.912]   - Field: ‘asynchronous’
[13:37:23.912]   - Field: ‘calls’
[13:37:23.915]   - Field: ‘globals’
[13:37:23.915]   - Field: ‘stdout’
[13:37:23.915]   - Field: ‘earlySignal’
[13:37:23.915]   - Field: ‘lazy’
[13:37:23.915]   - Field: ‘state’
[13:37:23.915] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:37:23.916] - Launch lazy future ...
[13:37:23.916] Packages needed by the future expression (n = 1): ‘future’
[13:37:23.916] Packages needed by future strategies (n = 1): ‘future’
[13:37:23.916] {
[13:37:23.916]     {
[13:37:23.916]         {
[13:37:23.916]             ...future.startTime <- base::Sys.time()
[13:37:23.916]             {
[13:37:23.916]                 {
[13:37:23.916]                   {
[13:37:23.916]                     {
[13:37:23.916]                       {
[13:37:23.916]                         base::local({
[13:37:23.916]                           has_future <- base::requireNamespace("future", 
[13:37:23.916]                             quietly = TRUE)
[13:37:23.916]                           if (has_future) {
[13:37:23.916]                             ns <- base::getNamespace("future")
[13:37:23.916]                             version <- ns[[".package"]][["version"]]
[13:37:23.916]                             if (is.null(version)) 
[13:37:23.916]                               version <- utils::packageVersion("future")
[13:37:23.916]                           }
[13:37:23.916]                           else {
[13:37:23.916]                             version <- NULL
[13:37:23.916]                           }
[13:37:23.916]                           if (!has_future || version < "1.8.0") {
[13:37:23.916]                             info <- base::c(r_version = base::gsub("R version ", 
[13:37:23.916]                               "", base::R.version$version.string), 
[13:37:23.916]                               platform = base::sprintf("%s (%s-bit)", 
[13:37:23.916]                                 base::R.version$platform, 8 * 
[13:37:23.916]                                   base::.Machine$sizeof.pointer), 
[13:37:23.916]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:37:23.916]                                 "release", "version")], collapse = " "), 
[13:37:23.916]                               hostname = base::Sys.info()[["nodename"]])
[13:37:23.916]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:37:23.916]                               info)
[13:37:23.916]                             info <- base::paste(info, collapse = "; ")
[13:37:23.916]                             if (!has_future) {
[13:37:23.916]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:37:23.916]                                 info)
[13:37:23.916]                             }
[13:37:23.916]                             else {
[13:37:23.916]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:37:23.916]                                 info, version)
[13:37:23.916]                             }
[13:37:23.916]                             base::stop(msg)
[13:37:23.916]                           }
[13:37:23.916]                         })
[13:37:23.916]                       }
[13:37:23.916]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:37:23.916]                       base::options(mc.cores = 1L)
[13:37:23.916]                     }
[13:37:23.916]                     base::local({
[13:37:23.916]                       for (pkg in "future") {
[13:37:23.916]                         base::loadNamespace(pkg)
[13:37:23.916]                         base::library(pkg, character.only = TRUE)
[13:37:23.916]                       }
[13:37:23.916]                     })
[13:37:23.916]                   }
[13:37:23.916]                   ...future.strategy.old <- future::plan("list")
[13:37:23.916]                   options(future.plan = NULL)
[13:37:23.916]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.916]                   future::plan(list(b = function (..., workers = availableCores(), 
[13:37:23.916]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:37:23.916]                     envir = parent.frame()) 
[13:37:23.916]                   {
[13:37:23.916]                     if (is.function(workers)) 
[13:37:23.916]                       workers <- workers()
[13:37:23.916]                     workers <- structure(as.integer(workers), 
[13:37:23.916]                       class = class(workers))
[13:37:23.916]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:37:23.916]                       workers >= 1)
[13:37:23.916]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:37:23.916]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:37:23.916]                     }
[13:37:23.916]                     future <- MultisessionFuture(..., workers = workers, 
[13:37:23.916]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:37:23.916]                       envir = envir)
[13:37:23.916]                     if (!future$lazy) 
[13:37:23.916]                       future <- run(future)
[13:37:23.916]                     invisible(future)
[13:37:23.916]                   }), .cleanup = FALSE, .init = FALSE)
[13:37:23.916]                 }
[13:37:23.916]                 ...future.workdir <- getwd()
[13:37:23.916]             }
[13:37:23.916]             ...future.oldOptions <- base::as.list(base::.Options)
[13:37:23.916]             ...future.oldEnvVars <- base::Sys.getenv()
[13:37:23.916]         }
[13:37:23.916]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:37:23.916]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:37:23.916]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:37:23.916]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:37:23.916]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:37:23.916]             future.stdout.windows.reencode = NULL, width = 80L)
[13:37:23.916]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:37:23.916]             base::names(...future.oldOptions))
[13:37:23.916]     }
[13:37:23.916]     if (FALSE) {
[13:37:23.916]     }
[13:37:23.916]     else {
[13:37:23.916]         if (TRUE) {
[13:37:23.916]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:37:23.916]                 open = "w")
[13:37:23.916]         }
[13:37:23.916]         else {
[13:37:23.916]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:37:23.916]                 windows = "NUL", "/dev/null"), open = "w")
[13:37:23.916]         }
[13:37:23.916]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:37:23.916]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:37:23.916]             base::sink(type = "output", split = FALSE)
[13:37:23.916]             base::close(...future.stdout)
[13:37:23.916]         }, add = TRUE)
[13:37:23.916]     }
[13:37:23.916]     ...future.frame <- base::sys.nframe()
[13:37:23.916]     ...future.conditions <- base::list()
[13:37:23.916]     ...future.rng <- base::globalenv()$.Random.seed
[13:37:23.916]     if (FALSE) {
[13:37:23.916]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:37:23.916]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:37:23.916]     }
[13:37:23.916]     ...future.result <- base::tryCatch({
[13:37:23.916]         base::withCallingHandlers({
[13:37:23.916]             ...future.value <- base::withVisible(base::local({
[13:37:23.916]                 ...future.makeSendCondition <- base::local({
[13:37:23.916]                   sendCondition <- NULL
[13:37:23.916]                   function(frame = 1L) {
[13:37:23.916]                     if (is.function(sendCondition)) 
[13:37:23.916]                       return(sendCondition)
[13:37:23.916]                     ns <- getNamespace("parallel")
[13:37:23.916]                     if (exists("sendData", mode = "function", 
[13:37:23.916]                       envir = ns)) {
[13:37:23.916]                       parallel_sendData <- get("sendData", mode = "function", 
[13:37:23.916]                         envir = ns)
[13:37:23.916]                       envir <- sys.frame(frame)
[13:37:23.916]                       master <- NULL
[13:37:23.916]                       while (!identical(envir, .GlobalEnv) && 
[13:37:23.916]                         !identical(envir, emptyenv())) {
[13:37:23.916]                         if (exists("master", mode = "list", envir = envir, 
[13:37:23.916]                           inherits = FALSE)) {
[13:37:23.916]                           master <- get("master", mode = "list", 
[13:37:23.916]                             envir = envir, inherits = FALSE)
[13:37:23.916]                           if (inherits(master, c("SOCKnode", 
[13:37:23.916]                             "SOCK0node"))) {
[13:37:23.916]                             sendCondition <<- function(cond) {
[13:37:23.916]                               data <- list(type = "VALUE", value = cond, 
[13:37:23.916]                                 success = TRUE)
[13:37:23.916]                               parallel_sendData(master, data)
[13:37:23.916]                             }
[13:37:23.916]                             return(sendCondition)
[13:37:23.916]                           }
[13:37:23.916]                         }
[13:37:23.916]                         frame <- frame + 1L
[13:37:23.916]                         envir <- sys.frame(frame)
[13:37:23.916]                       }
[13:37:23.916]                     }
[13:37:23.916]                     sendCondition <<- function(cond) NULL
[13:37:23.916]                   }
[13:37:23.916]                 })
[13:37:23.916]                 withCallingHandlers({
[13:37:23.916]                   {
[13:37:23.916]                     value(future(subset(data, a == 2)))
[13:37:23.916]                   }
[13:37:23.916]                 }, immediateCondition = function(cond) {
[13:37:23.916]                   sendCondition <- ...future.makeSendCondition()
[13:37:23.916]                   sendCondition(cond)
[13:37:23.916]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.916]                   {
[13:37:23.916]                     inherits <- base::inherits
[13:37:23.916]                     invokeRestart <- base::invokeRestart
[13:37:23.916]                     is.null <- base::is.null
[13:37:23.916]                     muffled <- FALSE
[13:37:23.916]                     if (inherits(cond, "message")) {
[13:37:23.916]                       muffled <- grepl(pattern, "muffleMessage")
[13:37:23.916]                       if (muffled) 
[13:37:23.916]                         invokeRestart("muffleMessage")
[13:37:23.916]                     }
[13:37:23.916]                     else if (inherits(cond, "warning")) {
[13:37:23.916]                       muffled <- grepl(pattern, "muffleWarning")
[13:37:23.916]                       if (muffled) 
[13:37:23.916]                         invokeRestart("muffleWarning")
[13:37:23.916]                     }
[13:37:23.916]                     else if (inherits(cond, "condition")) {
[13:37:23.916]                       if (!is.null(pattern)) {
[13:37:23.916]                         computeRestarts <- base::computeRestarts
[13:37:23.916]                         grepl <- base::grepl
[13:37:23.916]                         restarts <- computeRestarts(cond)
[13:37:23.916]                         for (restart in restarts) {
[13:37:23.916]                           name <- restart$name
[13:37:23.916]                           if (is.null(name)) 
[13:37:23.916]                             next
[13:37:23.916]                           if (!grepl(pattern, name)) 
[13:37:23.916]                             next
[13:37:23.916]                           invokeRestart(restart)
[13:37:23.916]                           muffled <- TRUE
[13:37:23.916]                           break
[13:37:23.916]                         }
[13:37:23.916]                       }
[13:37:23.916]                     }
[13:37:23.916]                     invisible(muffled)
[13:37:23.916]                   }
[13:37:23.916]                   muffleCondition(cond)
[13:37:23.916]                 })
[13:37:23.916]             }))
[13:37:23.916]             future::FutureResult(value = ...future.value$value, 
[13:37:23.916]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.916]                   ...future.rng), globalenv = if (FALSE) 
[13:37:23.916]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:37:23.916]                     ...future.globalenv.names))
[13:37:23.916]                 else NULL, started = ...future.startTime, version = "1.8")
[13:37:23.916]         }, condition = base::local({
[13:37:23.916]             c <- base::c
[13:37:23.916]             inherits <- base::inherits
[13:37:23.916]             invokeRestart <- base::invokeRestart
[13:37:23.916]             length <- base::length
[13:37:23.916]             list <- base::list
[13:37:23.916]             seq.int <- base::seq.int
[13:37:23.916]             signalCondition <- base::signalCondition
[13:37:23.916]             sys.calls <- base::sys.calls
[13:37:23.916]             `[[` <- base::`[[`
[13:37:23.916]             `+` <- base::`+`
[13:37:23.916]             `<<-` <- base::`<<-`
[13:37:23.916]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:37:23.916]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:37:23.916]                   3L)]
[13:37:23.916]             }
[13:37:23.916]             function(cond) {
[13:37:23.916]                 is_error <- inherits(cond, "error")
[13:37:23.916]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:37:23.916]                   NULL)
[13:37:23.916]                 if (is_error) {
[13:37:23.916]                   sessionInformation <- function() {
[13:37:23.916]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:37:23.916]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:37:23.916]                       search = base::search(), system = base::Sys.info())
[13:37:23.916]                   }
[13:37:23.916]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.916]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:37:23.916]                     cond$call), session = sessionInformation(), 
[13:37:23.916]                     timestamp = base::Sys.time(), signaled = 0L)
[13:37:23.916]                   signalCondition(cond)
[13:37:23.916]                 }
[13:37:23.916]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:37:23.916]                 "immediateCondition"))) {
[13:37:23.916]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:37:23.916]                   ...future.conditions[[length(...future.conditions) + 
[13:37:23.916]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:37:23.916]                   if (TRUE && !signal) {
[13:37:23.916]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.916]                     {
[13:37:23.916]                       inherits <- base::inherits
[13:37:23.916]                       invokeRestart <- base::invokeRestart
[13:37:23.916]                       is.null <- base::is.null
[13:37:23.916]                       muffled <- FALSE
[13:37:23.916]                       if (inherits(cond, "message")) {
[13:37:23.916]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.916]                         if (muffled) 
[13:37:23.916]                           invokeRestart("muffleMessage")
[13:37:23.916]                       }
[13:37:23.916]                       else if (inherits(cond, "warning")) {
[13:37:23.916]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.916]                         if (muffled) 
[13:37:23.916]                           invokeRestart("muffleWarning")
[13:37:23.916]                       }
[13:37:23.916]                       else if (inherits(cond, "condition")) {
[13:37:23.916]                         if (!is.null(pattern)) {
[13:37:23.916]                           computeRestarts <- base::computeRestarts
[13:37:23.916]                           grepl <- base::grepl
[13:37:23.916]                           restarts <- computeRestarts(cond)
[13:37:23.916]                           for (restart in restarts) {
[13:37:23.916]                             name <- restart$name
[13:37:23.916]                             if (is.null(name)) 
[13:37:23.916]                               next
[13:37:23.916]                             if (!grepl(pattern, name)) 
[13:37:23.916]                               next
[13:37:23.916]                             invokeRestart(restart)
[13:37:23.916]                             muffled <- TRUE
[13:37:23.916]                             break
[13:37:23.916]                           }
[13:37:23.916]                         }
[13:37:23.916]                       }
[13:37:23.916]                       invisible(muffled)
[13:37:23.916]                     }
[13:37:23.916]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.916]                   }
[13:37:23.916]                 }
[13:37:23.916]                 else {
[13:37:23.916]                   if (TRUE) {
[13:37:23.916]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:37:23.916]                     {
[13:37:23.916]                       inherits <- base::inherits
[13:37:23.916]                       invokeRestart <- base::invokeRestart
[13:37:23.916]                       is.null <- base::is.null
[13:37:23.916]                       muffled <- FALSE
[13:37:23.916]                       if (inherits(cond, "message")) {
[13:37:23.916]                         muffled <- grepl(pattern, "muffleMessage")
[13:37:23.916]                         if (muffled) 
[13:37:23.916]                           invokeRestart("muffleMessage")
[13:37:23.916]                       }
[13:37:23.916]                       else if (inherits(cond, "warning")) {
[13:37:23.916]                         muffled <- grepl(pattern, "muffleWarning")
[13:37:23.916]                         if (muffled) 
[13:37:23.916]                           invokeRestart("muffleWarning")
[13:37:23.916]                       }
[13:37:23.916]                       else if (inherits(cond, "condition")) {
[13:37:23.916]                         if (!is.null(pattern)) {
[13:37:23.916]                           computeRestarts <- base::computeRestarts
[13:37:23.916]                           grepl <- base::grepl
[13:37:23.916]                           restarts <- computeRestarts(cond)
[13:37:23.916]                           for (restart in restarts) {
[13:37:23.916]                             name <- restart$name
[13:37:23.916]                             if (is.null(name)) 
[13:37:23.916]                               next
[13:37:23.916]                             if (!grepl(pattern, name)) 
[13:37:23.916]                               next
[13:37:23.916]                             invokeRestart(restart)
[13:37:23.916]                             muffled <- TRUE
[13:37:23.916]                             break
[13:37:23.916]                           }
[13:37:23.916]                         }
[13:37:23.916]                       }
[13:37:23.916]                       invisible(muffled)
[13:37:23.916]                     }
[13:37:23.916]                     muffleCondition(cond, pattern = "^muffle")
[13:37:23.916]                   }
[13:37:23.916]                 }
[13:37:23.916]             }
[13:37:23.916]         }))
[13:37:23.916]     }, error = function(ex) {
[13:37:23.916]         base::structure(base::list(value = NULL, visible = NULL, 
[13:37:23.916]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:37:23.916]                 ...future.rng), started = ...future.startTime, 
[13:37:23.916]             finished = Sys.time(), session_uuid = NA_character_, 
[13:37:23.916]             version = "1.8"), class = "FutureResult")
[13:37:23.916]     }, finally = {
[13:37:23.916]         if (!identical(...future.workdir, getwd())) 
[13:37:23.916]             setwd(...future.workdir)
[13:37:23.916]         {
[13:37:23.916]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:37:23.916]                 ...future.oldOptions$nwarnings <- NULL
[13:37:23.916]             }
[13:37:23.916]             base::options(...future.oldOptions)
[13:37:23.916]             if (.Platform$OS.type == "windows") {
[13:37:23.916]                 old_names <- names(...future.oldEnvVars)
[13:37:23.916]                 envs <- base::Sys.getenv()
[13:37:23.916]                 names <- names(envs)
[13:37:23.916]                 common <- intersect(names, old_names)
[13:37:23.916]                 added <- setdiff(names, old_names)
[13:37:23.916]                 removed <- setdiff(old_names, names)
[13:37:23.916]                 changed <- common[...future.oldEnvVars[common] != 
[13:37:23.916]                   envs[common]]
[13:37:23.916]                 NAMES <- toupper(changed)
[13:37:23.916]                 args <- list()
[13:37:23.916]                 for (kk in seq_along(NAMES)) {
[13:37:23.916]                   name <- changed[[kk]]
[13:37:23.916]                   NAME <- NAMES[[kk]]
[13:37:23.916]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.916]                     next
[13:37:23.916]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.916]                 }
[13:37:23.916]                 NAMES <- toupper(added)
[13:37:23.916]                 for (kk in seq_along(NAMES)) {
[13:37:23.916]                   name <- added[[kk]]
[13:37:23.916]                   NAME <- NAMES[[kk]]
[13:37:23.916]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.916]                     next
[13:37:23.916]                   args[[name]] <- ""
[13:37:23.916]                 }
[13:37:23.916]                 NAMES <- toupper(removed)
[13:37:23.916]                 for (kk in seq_along(NAMES)) {
[13:37:23.916]                   name <- removed[[kk]]
[13:37:23.916]                   NAME <- NAMES[[kk]]
[13:37:23.916]                   if (name != NAME && is.element(NAME, old_names)) 
[13:37:23.916]                     next
[13:37:23.916]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:37:23.916]                 }
[13:37:23.916]                 if (length(args) > 0) 
[13:37:23.916]                   base::do.call(base::Sys.setenv, args = args)
[13:37:23.916]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:37:23.916]             }
[13:37:23.916]             else {
[13:37:23.916]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:37:23.916]             }
[13:37:23.916]             {
[13:37:23.916]                 if (base::length(...future.futureOptionsAdded) > 
[13:37:23.916]                   0L) {
[13:37:23.916]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:37:23.916]                   base::names(opts) <- ...future.futureOptionsAdded
[13:37:23.916]                   base::options(opts)
[13:37:23.916]                 }
[13:37:23.916]                 {
[13:37:23.916]                   {
[13:37:23.916]                     base::options(mc.cores = ...future.mc.cores.old)
[13:37:23.916]                     NULL
[13:37:23.916]                   }
[13:37:23.916]                   options(future.plan = NULL)
[13:37:23.916]                   if (is.na(NA_character_)) 
[13:37:23.916]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:37:23.916]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:37:23.916]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:37:23.916]                     .init = FALSE)
[13:37:23.916]                 }
[13:37:23.916]             }
[13:37:23.916]         }
[13:37:23.916]     })
[13:37:23.916]     if (TRUE) {
[13:37:23.916]         base::sink(type = "output", split = FALSE)
[13:37:23.916]         if (TRUE) {
[13:37:23.916]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:37:23.916]         }
[13:37:23.916]         else {
[13:37:23.916]             ...future.result["stdout"] <- base::list(NULL)
[13:37:23.916]         }
[13:37:23.916]         base::close(...future.stdout)
[13:37:23.916]         ...future.stdout <- NULL
[13:37:23.916]     }
[13:37:23.916]     ...future.result$conditions <- ...future.conditions
[13:37:23.916]     ...future.result$finished <- base::Sys.time()
[13:37:23.916]     ...future.result
[13:37:23.916] }
[13:37:23.919] Exporting 1 global objects (128 bytes) to cluster node #1 ...
[13:37:23.919] Exporting ‘data’ (128 bytes) to cluster node #1 ...
[13:37:23.920] Exporting ‘data’ (128 bytes) to cluster node #1 ... DONE
[13:37:23.920] Exporting 1 global objects (128 bytes) to cluster node #1 ... DONE
[13:37:23.920] MultisessionFuture started
[13:37:23.921] - Launch lazy future ... done
[13:37:23.921] run() for ‘MultisessionFuture’ ... done
[13:37:23.921] result() for ClusterFuture ...
[13:37:23.921] receiveMessageFromWorker() for ClusterFuture ...
[13:37:23.921] - Validating connection of MultisessionFuture
[13:37:23.978] - received message: FutureResult
[13:37:23.978] - Received FutureResult
[13:37:23.978] - Erased future from FutureRegistry
[13:37:23.978] result() for ClusterFuture ...
[13:37:23.978] - result already collected: FutureResult
[13:37:23.978] result() for ClusterFuture ... done
[13:37:23.979] receiveMessageFromWorker() for ClusterFuture ... done
[13:37:23.979] result() for ClusterFuture ... done
[13:37:23.979] result() for ClusterFuture ...
[13:37:23.979] - result already collected: FutureResult
[13:37:23.979] result() for ClusterFuture ... done
- plan(list('multisession', 'multisession')) ... DONE
> 
> message("*** Nested futures ... DONE")
*** Nested futures ... DONE
> 
> source("incl/end.R")
[13:37:23.980] plan(): Setting new future strategy stack:
[13:37:23.980] List of future strategies:
[13:37:23.980] 1. FutureStrategy:
[13:37:23.980]    - args: function (..., envir = parent.frame())
[13:37:23.980]    - tweaked: FALSE
[13:37:23.980]    - call: future::plan(oplan)
[13:37:23.980] plan(): nbrOfWorkers() = 1
> 
