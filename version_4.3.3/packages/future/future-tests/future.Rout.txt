
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:40.548] plan(): Setting new future strategy stack:
[10:32:40.549] List of future strategies:
[10:32:40.549] 1. sequential:
[10:32:40.549]    - args: function (..., envir = parent.frame())
[10:32:40.549]    - tweaked: FALSE
[10:32:40.549]    - call: future::plan("sequential")
[10:32:40.563] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[10:32:40.574] getGlobalsAndPackages() ...
[10:32:40.574] Searching for globals...
[10:32:40.577] - globals found: [1] ‘{’
[10:32:40.578] Searching for globals ... DONE
[10:32:40.578] Resolving globals: FALSE
[10:32:40.578] 
[10:32:40.578] 
[10:32:40.578] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[10:32:40.579] resolved() for ‘Future’ ...
[10:32:40.579] - state: ‘created’
[10:32:40.579] - run: TRUE
[10:32:40.579] - run() ...
[10:32:40.580] run() for ‘Future’ ...
[10:32:40.580] - state: ‘created’
[10:32:40.580] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:40.580] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:40.580] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:40.581]   - Field: ‘label’
[10:32:40.581]   - Field: ‘local’
[10:32:40.581]   - Field: ‘owner’
[10:32:40.581]   - Field: ‘envir’
[10:32:40.581]   - Field: ‘packages’
[10:32:40.581]   - Field: ‘gc’
[10:32:40.581]   - Field: ‘conditions’
[10:32:40.581]   - Field: ‘expr’
[10:32:40.581]   - Field: ‘uuid’
[10:32:40.581]   - Field: ‘seed’
[10:32:40.582]   - Field: ‘version’
[10:32:40.582]   - Field: ‘result’
[10:32:40.582]   - Field: ‘asynchronous’
[10:32:40.582]   - Field: ‘calls’
[10:32:40.582]   - Field: ‘globals’
[10:32:40.582]   - Field: ‘stdout’
[10:32:40.582]   - Field: ‘earlySignal’
[10:32:40.582]   - Field: ‘lazy’
[10:32:40.582]   - Field: ‘state’
[10:32:40.582] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:40.582] - Launch lazy future ...
[10:32:40.583] Packages needed by the future expression (n = 0): <none>
[10:32:40.583] Packages needed by future strategies (n = 0): <none>
[10:32:40.584] {
[10:32:40.584]     {
[10:32:40.584]         {
[10:32:40.584]             ...future.startTime <- base::Sys.time()
[10:32:40.584]             {
[10:32:40.584]                 {
[10:32:40.584]                   {
[10:32:40.584]                     base::local({
[10:32:40.584]                       has_future <- base::requireNamespace("future", 
[10:32:40.584]                         quietly = TRUE)
[10:32:40.584]                       if (has_future) {
[10:32:40.584]                         ns <- base::getNamespace("future")
[10:32:40.584]                         version <- ns[[".package"]][["version"]]
[10:32:40.584]                         if (is.null(version)) 
[10:32:40.584]                           version <- utils::packageVersion("future")
[10:32:40.584]                       }
[10:32:40.584]                       else {
[10:32:40.584]                         version <- NULL
[10:32:40.584]                       }
[10:32:40.584]                       if (!has_future || version < "1.8.0") {
[10:32:40.584]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:40.584]                           "", base::R.version$version.string), 
[10:32:40.584]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:40.584]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:40.584]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:40.584]                             "release", "version")], collapse = " "), 
[10:32:40.584]                           hostname = base::Sys.info()[["nodename"]])
[10:32:40.584]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:40.584]                           info)
[10:32:40.584]                         info <- base::paste(info, collapse = "; ")
[10:32:40.584]                         if (!has_future) {
[10:32:40.584]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:40.584]                             info)
[10:32:40.584]                         }
[10:32:40.584]                         else {
[10:32:40.584]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:40.584]                             info, version)
[10:32:40.584]                         }
[10:32:40.584]                         base::stop(msg)
[10:32:40.584]                       }
[10:32:40.584]                     })
[10:32:40.584]                   }
[10:32:40.584]                   ...future.strategy.old <- future::plan("list")
[10:32:40.584]                   options(future.plan = NULL)
[10:32:40.584]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.584]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:40.584]                 }
[10:32:40.584]                 ...future.workdir <- getwd()
[10:32:40.584]             }
[10:32:40.584]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:40.584]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:40.584]         }
[10:32:40.584]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:40.584]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:40.584]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:40.584]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:40.584]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:40.584]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:40.584]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:40.584]             base::names(...future.oldOptions))
[10:32:40.584]     }
[10:32:40.584]     if (FALSE) {
[10:32:40.584]     }
[10:32:40.584]     else {
[10:32:40.584]         if (TRUE) {
[10:32:40.584]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:40.584]                 open = "w")
[10:32:40.584]         }
[10:32:40.584]         else {
[10:32:40.584]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:40.584]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:40.584]         }
[10:32:40.584]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:40.584]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:40.584]             base::sink(type = "output", split = FALSE)
[10:32:40.584]             base::close(...future.stdout)
[10:32:40.584]         }, add = TRUE)
[10:32:40.584]     }
[10:32:40.584]     ...future.frame <- base::sys.nframe()
[10:32:40.584]     ...future.conditions <- base::list()
[10:32:40.584]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:40.584]     if (FALSE) {
[10:32:40.584]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:40.584]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:40.584]     }
[10:32:40.584]     ...future.result <- base::tryCatch({
[10:32:40.584]         base::withCallingHandlers({
[10:32:40.584]             ...future.value <- base::withVisible(base::local({
[10:32:40.584]                 42L
[10:32:40.584]             }))
[10:32:40.584]             future::FutureResult(value = ...future.value$value, 
[10:32:40.584]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.584]                   ...future.rng), globalenv = if (FALSE) 
[10:32:40.584]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:40.584]                     ...future.globalenv.names))
[10:32:40.584]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:40.584]         }, condition = base::local({
[10:32:40.584]             c <- base::c
[10:32:40.584]             inherits <- base::inherits
[10:32:40.584]             invokeRestart <- base::invokeRestart
[10:32:40.584]             length <- base::length
[10:32:40.584]             list <- base::list
[10:32:40.584]             seq.int <- base::seq.int
[10:32:40.584]             signalCondition <- base::signalCondition
[10:32:40.584]             sys.calls <- base::sys.calls
[10:32:40.584]             `[[` <- base::`[[`
[10:32:40.584]             `+` <- base::`+`
[10:32:40.584]             `<<-` <- base::`<<-`
[10:32:40.584]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:40.584]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:40.584]                   3L)]
[10:32:40.584]             }
[10:32:40.584]             function(cond) {
[10:32:40.584]                 is_error <- inherits(cond, "error")
[10:32:40.584]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:40.584]                   NULL)
[10:32:40.584]                 if (is_error) {
[10:32:40.584]                   sessionInformation <- function() {
[10:32:40.584]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:40.584]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:40.584]                       search = base::search(), system = base::Sys.info())
[10:32:40.584]                   }
[10:32:40.584]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.584]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:40.584]                     cond$call), session = sessionInformation(), 
[10:32:40.584]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:40.584]                   signalCondition(cond)
[10:32:40.584]                 }
[10:32:40.584]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:40.584]                 "immediateCondition"))) {
[10:32:40.584]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:40.584]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.584]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:40.584]                   if (TRUE && !signal) {
[10:32:40.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.584]                     {
[10:32:40.584]                       inherits <- base::inherits
[10:32:40.584]                       invokeRestart <- base::invokeRestart
[10:32:40.584]                       is.null <- base::is.null
[10:32:40.584]                       muffled <- FALSE
[10:32:40.584]                       if (inherits(cond, "message")) {
[10:32:40.584]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.584]                         if (muffled) 
[10:32:40.584]                           invokeRestart("muffleMessage")
[10:32:40.584]                       }
[10:32:40.584]                       else if (inherits(cond, "warning")) {
[10:32:40.584]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.584]                         if (muffled) 
[10:32:40.584]                           invokeRestart("muffleWarning")
[10:32:40.584]                       }
[10:32:40.584]                       else if (inherits(cond, "condition")) {
[10:32:40.584]                         if (!is.null(pattern)) {
[10:32:40.584]                           computeRestarts <- base::computeRestarts
[10:32:40.584]                           grepl <- base::grepl
[10:32:40.584]                           restarts <- computeRestarts(cond)
[10:32:40.584]                           for (restart in restarts) {
[10:32:40.584]                             name <- restart$name
[10:32:40.584]                             if (is.null(name)) 
[10:32:40.584]                               next
[10:32:40.584]                             if (!grepl(pattern, name)) 
[10:32:40.584]                               next
[10:32:40.584]                             invokeRestart(restart)
[10:32:40.584]                             muffled <- TRUE
[10:32:40.584]                             break
[10:32:40.584]                           }
[10:32:40.584]                         }
[10:32:40.584]                       }
[10:32:40.584]                       invisible(muffled)
[10:32:40.584]                     }
[10:32:40.584]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.584]                   }
[10:32:40.584]                 }
[10:32:40.584]                 else {
[10:32:40.584]                   if (TRUE) {
[10:32:40.584]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.584]                     {
[10:32:40.584]                       inherits <- base::inherits
[10:32:40.584]                       invokeRestart <- base::invokeRestart
[10:32:40.584]                       is.null <- base::is.null
[10:32:40.584]                       muffled <- FALSE
[10:32:40.584]                       if (inherits(cond, "message")) {
[10:32:40.584]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.584]                         if (muffled) 
[10:32:40.584]                           invokeRestart("muffleMessage")
[10:32:40.584]                       }
[10:32:40.584]                       else if (inherits(cond, "warning")) {
[10:32:40.584]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.584]                         if (muffled) 
[10:32:40.584]                           invokeRestart("muffleWarning")
[10:32:40.584]                       }
[10:32:40.584]                       else if (inherits(cond, "condition")) {
[10:32:40.584]                         if (!is.null(pattern)) {
[10:32:40.584]                           computeRestarts <- base::computeRestarts
[10:32:40.584]                           grepl <- base::grepl
[10:32:40.584]                           restarts <- computeRestarts(cond)
[10:32:40.584]                           for (restart in restarts) {
[10:32:40.584]                             name <- restart$name
[10:32:40.584]                             if (is.null(name)) 
[10:32:40.584]                               next
[10:32:40.584]                             if (!grepl(pattern, name)) 
[10:32:40.584]                               next
[10:32:40.584]                             invokeRestart(restart)
[10:32:40.584]                             muffled <- TRUE
[10:32:40.584]                             break
[10:32:40.584]                           }
[10:32:40.584]                         }
[10:32:40.584]                       }
[10:32:40.584]                       invisible(muffled)
[10:32:40.584]                     }
[10:32:40.584]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.584]                   }
[10:32:40.584]                 }
[10:32:40.584]             }
[10:32:40.584]         }))
[10:32:40.584]     }, error = function(ex) {
[10:32:40.584]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:40.584]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.584]                 ...future.rng), started = ...future.startTime, 
[10:32:40.584]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:40.584]             version = "1.8"), class = "FutureResult")
[10:32:40.584]     }, finally = {
[10:32:40.584]         if (!identical(...future.workdir, getwd())) 
[10:32:40.584]             setwd(...future.workdir)
[10:32:40.584]         {
[10:32:40.584]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:40.584]                 ...future.oldOptions$nwarnings <- NULL
[10:32:40.584]             }
[10:32:40.584]             base::options(...future.oldOptions)
[10:32:40.584]             if (.Platform$OS.type == "windows") {
[10:32:40.584]                 old_names <- names(...future.oldEnvVars)
[10:32:40.584]                 envs <- base::Sys.getenv()
[10:32:40.584]                 names <- names(envs)
[10:32:40.584]                 common <- intersect(names, old_names)
[10:32:40.584]                 added <- setdiff(names, old_names)
[10:32:40.584]                 removed <- setdiff(old_names, names)
[10:32:40.584]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:40.584]                   envs[common]]
[10:32:40.584]                 NAMES <- toupper(changed)
[10:32:40.584]                 args <- list()
[10:32:40.584]                 for (kk in seq_along(NAMES)) {
[10:32:40.584]                   name <- changed[[kk]]
[10:32:40.584]                   NAME <- NAMES[[kk]]
[10:32:40.584]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.584]                     next
[10:32:40.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.584]                 }
[10:32:40.584]                 NAMES <- toupper(added)
[10:32:40.584]                 for (kk in seq_along(NAMES)) {
[10:32:40.584]                   name <- added[[kk]]
[10:32:40.584]                   NAME <- NAMES[[kk]]
[10:32:40.584]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.584]                     next
[10:32:40.584]                   args[[name]] <- ""
[10:32:40.584]                 }
[10:32:40.584]                 NAMES <- toupper(removed)
[10:32:40.584]                 for (kk in seq_along(NAMES)) {
[10:32:40.584]                   name <- removed[[kk]]
[10:32:40.584]                   NAME <- NAMES[[kk]]
[10:32:40.584]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.584]                     next
[10:32:40.584]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.584]                 }
[10:32:40.584]                 if (length(args) > 0) 
[10:32:40.584]                   base::do.call(base::Sys.setenv, args = args)
[10:32:40.584]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:40.584]             }
[10:32:40.584]             else {
[10:32:40.584]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:40.584]             }
[10:32:40.584]             {
[10:32:40.584]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:40.584]                   0L) {
[10:32:40.584]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:40.584]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:40.584]                   base::options(opts)
[10:32:40.584]                 }
[10:32:40.584]                 {
[10:32:40.584]                   {
[10:32:40.584]                     NULL
[10:32:40.584]                     RNGkind("Mersenne-Twister")
[10:32:40.584]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:40.584]                       inherits = FALSE)
[10:32:40.584]                   }
[10:32:40.584]                   options(future.plan = NULL)
[10:32:40.584]                   if (is.na(NA_character_)) 
[10:32:40.584]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.584]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:40.584]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:40.584]                     .init = FALSE)
[10:32:40.584]                 }
[10:32:40.584]             }
[10:32:40.584]         }
[10:32:40.584]     })
[10:32:40.584]     if (TRUE) {
[10:32:40.584]         base::sink(type = "output", split = FALSE)
[10:32:40.584]         if (TRUE) {
[10:32:40.584]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:40.584]         }
[10:32:40.584]         else {
[10:32:40.584]             ...future.result["stdout"] <- base::list(NULL)
[10:32:40.584]         }
[10:32:40.584]         base::close(...future.stdout)
[10:32:40.584]         ...future.stdout <- NULL
[10:32:40.584]     }
[10:32:40.584]     ...future.result$conditions <- ...future.conditions
[10:32:40.584]     ...future.result$finished <- base::Sys.time()
[10:32:40.584]     ...future.result
[10:32:40.584] }
[10:32:40.586] plan(): Setting new future strategy stack:
[10:32:40.586] List of future strategies:
[10:32:40.586] 1. sequential:
[10:32:40.586]    - args: function (..., envir = parent.frame())
[10:32:40.586]    - tweaked: FALSE
[10:32:40.586]    - call: NULL
[10:32:40.587] plan(): nbrOfWorkers() = 1
[10:32:40.588] plan(): Setting new future strategy stack:
[10:32:40.588] List of future strategies:
[10:32:40.588] 1. sequential:
[10:32:40.588]    - args: function (..., envir = parent.frame())
[10:32:40.588]    - tweaked: FALSE
[10:32:40.588]    - call: future::plan("sequential")
[10:32:40.588] plan(): nbrOfWorkers() = 1
[10:32:40.588] SequentialFuture started (and completed)
[10:32:40.589] - Launch lazy future ... done
[10:32:40.589] run() for ‘SequentialFuture’ ... done
[10:32:40.589] - run() ... done
[10:32:40.589] - resolved() ...
[10:32:40.589] resolved() for ‘SequentialFuture’ ...
[10:32:40.589] - state: ‘finished’
[10:32:40.590] - run: TRUE
[10:32:40.590] - result: ‘FutureResult’
[10:32:40.590] resolved() for ‘SequentialFuture’ ... done
[10:32:40.590] - resolved: TRUE
[10:32:40.590] - resolved() ... done
[10:32:40.590] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[10:32:40.591] getGlobalsAndPackages() ...
[10:32:40.591] Searching for globals...
[10:32:40.591] 
[10:32:40.591] Searching for globals ... DONE
[10:32:40.591] - globals: [0] <none>
[10:32:40.591] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a6dbf6c0-9c7d-0ebb-6cda-58b0789136f8
Class: ‘Future’, ‘environment’
> y <- value(f)
[10:32:40.592] run() for ‘Future’ ...
[10:32:40.592] - state: ‘created’
[10:32:40.592] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:40.593] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:40.593] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:40.593]   - Field: ‘label’
[10:32:40.593]   - Field: ‘local’
[10:32:40.593]   - Field: ‘owner’
[10:32:40.593]   - Field: ‘envir’
[10:32:40.593]   - Field: ‘packages’
[10:32:40.594]   - Field: ‘gc’
[10:32:40.594]   - Field: ‘conditions’
[10:32:40.594]   - Field: ‘expr’
[10:32:40.594]   - Field: ‘uuid’
[10:32:40.594]   - Field: ‘seed’
[10:32:40.594]   - Field: ‘version’
[10:32:40.594]   - Field: ‘result’
[10:32:40.594]   - Field: ‘asynchronous’
[10:32:40.594]   - Field: ‘calls’
[10:32:40.594]   - Field: ‘globals’
[10:32:40.594]   - Field: ‘stdout’
[10:32:40.595]   - Field: ‘earlySignal’
[10:32:40.595]   - Field: ‘lazy’
[10:32:40.595]   - Field: ‘state’
[10:32:40.595] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:40.595] - Launch lazy future ...
[10:32:40.595] Packages needed by the future expression (n = 0): <none>
[10:32:40.595] Packages needed by future strategies (n = 0): <none>
[10:32:40.596] {
[10:32:40.596]     {
[10:32:40.596]         {
[10:32:40.596]             ...future.startTime <- base::Sys.time()
[10:32:40.596]             {
[10:32:40.596]                 {
[10:32:40.596]                   {
[10:32:40.596]                     base::local({
[10:32:40.596]                       has_future <- base::requireNamespace("future", 
[10:32:40.596]                         quietly = TRUE)
[10:32:40.596]                       if (has_future) {
[10:32:40.596]                         ns <- base::getNamespace("future")
[10:32:40.596]                         version <- ns[[".package"]][["version"]]
[10:32:40.596]                         if (is.null(version)) 
[10:32:40.596]                           version <- utils::packageVersion("future")
[10:32:40.596]                       }
[10:32:40.596]                       else {
[10:32:40.596]                         version <- NULL
[10:32:40.596]                       }
[10:32:40.596]                       if (!has_future || version < "1.8.0") {
[10:32:40.596]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:40.596]                           "", base::R.version$version.string), 
[10:32:40.596]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:40.596]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:40.596]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:40.596]                             "release", "version")], collapse = " "), 
[10:32:40.596]                           hostname = base::Sys.info()[["nodename"]])
[10:32:40.596]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:40.596]                           info)
[10:32:40.596]                         info <- base::paste(info, collapse = "; ")
[10:32:40.596]                         if (!has_future) {
[10:32:40.596]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:40.596]                             info)
[10:32:40.596]                         }
[10:32:40.596]                         else {
[10:32:40.596]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:40.596]                             info, version)
[10:32:40.596]                         }
[10:32:40.596]                         base::stop(msg)
[10:32:40.596]                       }
[10:32:40.596]                     })
[10:32:40.596]                   }
[10:32:40.596]                   ...future.strategy.old <- future::plan("list")
[10:32:40.596]                   options(future.plan = NULL)
[10:32:40.596]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.596]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:40.596]                 }
[10:32:40.596]                 ...future.workdir <- getwd()
[10:32:40.596]             }
[10:32:40.596]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:40.596]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:40.596]         }
[10:32:40.596]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:40.596]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:40.596]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:40.596]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:40.596]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:40.596]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:40.596]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:40.596]             base::names(...future.oldOptions))
[10:32:40.596]     }
[10:32:40.596]     if (FALSE) {
[10:32:40.596]     }
[10:32:40.596]     else {
[10:32:40.596]         if (TRUE) {
[10:32:40.596]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:40.596]                 open = "w")
[10:32:40.596]         }
[10:32:40.596]         else {
[10:32:40.596]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:40.596]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:40.596]         }
[10:32:40.596]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:40.596]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:40.596]             base::sink(type = "output", split = FALSE)
[10:32:40.596]             base::close(...future.stdout)
[10:32:40.596]         }, add = TRUE)
[10:32:40.596]     }
[10:32:40.596]     ...future.frame <- base::sys.nframe()
[10:32:40.596]     ...future.conditions <- base::list()
[10:32:40.596]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:40.596]     if (FALSE) {
[10:32:40.596]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:40.596]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:40.596]     }
[10:32:40.596]     ...future.result <- base::tryCatch({
[10:32:40.596]         base::withCallingHandlers({
[10:32:40.596]             ...future.value <- base::withVisible(base::local(42L))
[10:32:40.596]             future::FutureResult(value = ...future.value$value, 
[10:32:40.596]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.596]                   ...future.rng), globalenv = if (FALSE) 
[10:32:40.596]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:40.596]                     ...future.globalenv.names))
[10:32:40.596]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:40.596]         }, condition = base::local({
[10:32:40.596]             c <- base::c
[10:32:40.596]             inherits <- base::inherits
[10:32:40.596]             invokeRestart <- base::invokeRestart
[10:32:40.596]             length <- base::length
[10:32:40.596]             list <- base::list
[10:32:40.596]             seq.int <- base::seq.int
[10:32:40.596]             signalCondition <- base::signalCondition
[10:32:40.596]             sys.calls <- base::sys.calls
[10:32:40.596]             `[[` <- base::`[[`
[10:32:40.596]             `+` <- base::`+`
[10:32:40.596]             `<<-` <- base::`<<-`
[10:32:40.596]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:40.596]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:40.596]                   3L)]
[10:32:40.596]             }
[10:32:40.596]             function(cond) {
[10:32:40.596]                 is_error <- inherits(cond, "error")
[10:32:40.596]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:40.596]                   NULL)
[10:32:40.596]                 if (is_error) {
[10:32:40.596]                   sessionInformation <- function() {
[10:32:40.596]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:40.596]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:40.596]                       search = base::search(), system = base::Sys.info())
[10:32:40.596]                   }
[10:32:40.596]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.596]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:40.596]                     cond$call), session = sessionInformation(), 
[10:32:40.596]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:40.596]                   signalCondition(cond)
[10:32:40.596]                 }
[10:32:40.596]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:40.596]                 "immediateCondition"))) {
[10:32:40.596]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:40.596]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.596]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:40.596]                   if (TRUE && !signal) {
[10:32:40.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.596]                     {
[10:32:40.596]                       inherits <- base::inherits
[10:32:40.596]                       invokeRestart <- base::invokeRestart
[10:32:40.596]                       is.null <- base::is.null
[10:32:40.596]                       muffled <- FALSE
[10:32:40.596]                       if (inherits(cond, "message")) {
[10:32:40.596]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.596]                         if (muffled) 
[10:32:40.596]                           invokeRestart("muffleMessage")
[10:32:40.596]                       }
[10:32:40.596]                       else if (inherits(cond, "warning")) {
[10:32:40.596]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.596]                         if (muffled) 
[10:32:40.596]                           invokeRestart("muffleWarning")
[10:32:40.596]                       }
[10:32:40.596]                       else if (inherits(cond, "condition")) {
[10:32:40.596]                         if (!is.null(pattern)) {
[10:32:40.596]                           computeRestarts <- base::computeRestarts
[10:32:40.596]                           grepl <- base::grepl
[10:32:40.596]                           restarts <- computeRestarts(cond)
[10:32:40.596]                           for (restart in restarts) {
[10:32:40.596]                             name <- restart$name
[10:32:40.596]                             if (is.null(name)) 
[10:32:40.596]                               next
[10:32:40.596]                             if (!grepl(pattern, name)) 
[10:32:40.596]                               next
[10:32:40.596]                             invokeRestart(restart)
[10:32:40.596]                             muffled <- TRUE
[10:32:40.596]                             break
[10:32:40.596]                           }
[10:32:40.596]                         }
[10:32:40.596]                       }
[10:32:40.596]                       invisible(muffled)
[10:32:40.596]                     }
[10:32:40.596]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.596]                   }
[10:32:40.596]                 }
[10:32:40.596]                 else {
[10:32:40.596]                   if (TRUE) {
[10:32:40.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.596]                     {
[10:32:40.596]                       inherits <- base::inherits
[10:32:40.596]                       invokeRestart <- base::invokeRestart
[10:32:40.596]                       is.null <- base::is.null
[10:32:40.596]                       muffled <- FALSE
[10:32:40.596]                       if (inherits(cond, "message")) {
[10:32:40.596]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.596]                         if (muffled) 
[10:32:40.596]                           invokeRestart("muffleMessage")
[10:32:40.596]                       }
[10:32:40.596]                       else if (inherits(cond, "warning")) {
[10:32:40.596]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.596]                         if (muffled) 
[10:32:40.596]                           invokeRestart("muffleWarning")
[10:32:40.596]                       }
[10:32:40.596]                       else if (inherits(cond, "condition")) {
[10:32:40.596]                         if (!is.null(pattern)) {
[10:32:40.596]                           computeRestarts <- base::computeRestarts
[10:32:40.596]                           grepl <- base::grepl
[10:32:40.596]                           restarts <- computeRestarts(cond)
[10:32:40.596]                           for (restart in restarts) {
[10:32:40.596]                             name <- restart$name
[10:32:40.596]                             if (is.null(name)) 
[10:32:40.596]                               next
[10:32:40.596]                             if (!grepl(pattern, name)) 
[10:32:40.596]                               next
[10:32:40.596]                             invokeRestart(restart)
[10:32:40.596]                             muffled <- TRUE
[10:32:40.596]                             break
[10:32:40.596]                           }
[10:32:40.596]                         }
[10:32:40.596]                       }
[10:32:40.596]                       invisible(muffled)
[10:32:40.596]                     }
[10:32:40.596]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.596]                   }
[10:32:40.596]                 }
[10:32:40.596]             }
[10:32:40.596]         }))
[10:32:40.596]     }, error = function(ex) {
[10:32:40.596]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:40.596]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.596]                 ...future.rng), started = ...future.startTime, 
[10:32:40.596]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:40.596]             version = "1.8"), class = "FutureResult")
[10:32:40.596]     }, finally = {
[10:32:40.596]         if (!identical(...future.workdir, getwd())) 
[10:32:40.596]             setwd(...future.workdir)
[10:32:40.596]         {
[10:32:40.596]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:40.596]                 ...future.oldOptions$nwarnings <- NULL
[10:32:40.596]             }
[10:32:40.596]             base::options(...future.oldOptions)
[10:32:40.596]             if (.Platform$OS.type == "windows") {
[10:32:40.596]                 old_names <- names(...future.oldEnvVars)
[10:32:40.596]                 envs <- base::Sys.getenv()
[10:32:40.596]                 names <- names(envs)
[10:32:40.596]                 common <- intersect(names, old_names)
[10:32:40.596]                 added <- setdiff(names, old_names)
[10:32:40.596]                 removed <- setdiff(old_names, names)
[10:32:40.596]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:40.596]                   envs[common]]
[10:32:40.596]                 NAMES <- toupper(changed)
[10:32:40.596]                 args <- list()
[10:32:40.596]                 for (kk in seq_along(NAMES)) {
[10:32:40.596]                   name <- changed[[kk]]
[10:32:40.596]                   NAME <- NAMES[[kk]]
[10:32:40.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.596]                     next
[10:32:40.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.596]                 }
[10:32:40.596]                 NAMES <- toupper(added)
[10:32:40.596]                 for (kk in seq_along(NAMES)) {
[10:32:40.596]                   name <- added[[kk]]
[10:32:40.596]                   NAME <- NAMES[[kk]]
[10:32:40.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.596]                     next
[10:32:40.596]                   args[[name]] <- ""
[10:32:40.596]                 }
[10:32:40.596]                 NAMES <- toupper(removed)
[10:32:40.596]                 for (kk in seq_along(NAMES)) {
[10:32:40.596]                   name <- removed[[kk]]
[10:32:40.596]                   NAME <- NAMES[[kk]]
[10:32:40.596]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.596]                     next
[10:32:40.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.596]                 }
[10:32:40.596]                 if (length(args) > 0) 
[10:32:40.596]                   base::do.call(base::Sys.setenv, args = args)
[10:32:40.596]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:40.596]             }
[10:32:40.596]             else {
[10:32:40.596]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:40.596]             }
[10:32:40.596]             {
[10:32:40.596]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:40.596]                   0L) {
[10:32:40.596]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:40.596]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:40.596]                   base::options(opts)
[10:32:40.596]                 }
[10:32:40.596]                 {
[10:32:40.596]                   {
[10:32:40.596]                     NULL
[10:32:40.596]                     RNGkind("Mersenne-Twister")
[10:32:40.596]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:40.596]                       inherits = FALSE)
[10:32:40.596]                   }
[10:32:40.596]                   options(future.plan = NULL)
[10:32:40.596]                   if (is.na(NA_character_)) 
[10:32:40.596]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.596]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:40.596]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:40.596]                     .init = FALSE)
[10:32:40.596]                 }
[10:32:40.596]             }
[10:32:40.596]         }
[10:32:40.596]     })
[10:32:40.596]     if (TRUE) {
[10:32:40.596]         base::sink(type = "output", split = FALSE)
[10:32:40.596]         if (TRUE) {
[10:32:40.596]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:40.596]         }
[10:32:40.596]         else {
[10:32:40.596]             ...future.result["stdout"] <- base::list(NULL)
[10:32:40.596]         }
[10:32:40.596]         base::close(...future.stdout)
[10:32:40.596]         ...future.stdout <- NULL
[10:32:40.596]     }
[10:32:40.596]     ...future.result$conditions <- ...future.conditions
[10:32:40.596]     ...future.result$finished <- base::Sys.time()
[10:32:40.596]     ...future.result
[10:32:40.596] }
[10:32:40.597] plan(): Setting new future strategy stack:
[10:32:40.597] List of future strategies:
[10:32:40.597] 1. sequential:
[10:32:40.597]    - args: function (..., envir = parent.frame())
[10:32:40.597]    - tweaked: FALSE
[10:32:40.597]    - call: NULL
[10:32:40.598] plan(): nbrOfWorkers() = 1
[10:32:40.598] plan(): Setting new future strategy stack:
[10:32:40.599] List of future strategies:
[10:32:40.599] 1. sequential:
[10:32:40.599]    - args: function (..., envir = parent.frame())
[10:32:40.599]    - tweaked: FALSE
[10:32:40.599]    - call: future::plan("sequential")
[10:32:40.599] plan(): nbrOfWorkers() = 1
[10:32:40.599] SequentialFuture started (and completed)
[10:32:40.599] - Launch lazy future ... done
[10:32:40.599] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[10:32:40.600] getGlobalsAndPackages() ...
[10:32:40.600] Searching for globals...
[10:32:40.600] - globals found: [1] ‘{’
[10:32:40.601] Searching for globals ... DONE
[10:32:40.601] Resolving globals: FALSE
[10:32:40.601] 
[10:32:40.601] 
[10:32:40.601] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[10:32:40.601] resolved() for ‘Future’ ...
[10:32:40.601] - state: ‘created’
[10:32:40.602] - run: TRUE
[10:32:40.602] - run() ...
[10:32:40.602] run() for ‘Future’ ...
[10:32:40.602] - state: ‘created’
[10:32:40.602] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:40.602] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:40.602] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:40.602]   - Field: ‘label’
[10:32:40.603]   - Field: ‘local’
[10:32:40.603]   - Field: ‘owner’
[10:32:40.603]   - Field: ‘envir’
[10:32:40.603]   - Field: ‘packages’
[10:32:40.603]   - Field: ‘gc’
[10:32:40.603]   - Field: ‘conditions’
[10:32:40.603]   - Field: ‘expr’
[10:32:40.603]   - Field: ‘uuid’
[10:32:40.603]   - Field: ‘seed’
[10:32:40.603]   - Field: ‘version’
[10:32:40.603]   - Field: ‘result’
[10:32:40.604]   - Field: ‘asynchronous’
[10:32:40.604]   - Field: ‘calls’
[10:32:40.604]   - Field: ‘globals’
[10:32:40.604]   - Field: ‘stdout’
[10:32:40.604]   - Field: ‘earlySignal’
[10:32:40.604]   - Field: ‘lazy’
[10:32:40.604]   - Field: ‘state’
[10:32:40.604] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:40.604] - Launch lazy future ...
[10:32:40.604] Packages needed by the future expression (n = 0): <none>
[10:32:40.605] Packages needed by future strategies (n = 0): <none>
[10:32:40.605] {
[10:32:40.605]     {
[10:32:40.605]         {
[10:32:40.605]             ...future.startTime <- base::Sys.time()
[10:32:40.605]             {
[10:32:40.605]                 {
[10:32:40.605]                   {
[10:32:40.605]                     base::local({
[10:32:40.605]                       has_future <- base::requireNamespace("future", 
[10:32:40.605]                         quietly = TRUE)
[10:32:40.605]                       if (has_future) {
[10:32:40.605]                         ns <- base::getNamespace("future")
[10:32:40.605]                         version <- ns[[".package"]][["version"]]
[10:32:40.605]                         if (is.null(version)) 
[10:32:40.605]                           version <- utils::packageVersion("future")
[10:32:40.605]                       }
[10:32:40.605]                       else {
[10:32:40.605]                         version <- NULL
[10:32:40.605]                       }
[10:32:40.605]                       if (!has_future || version < "1.8.0") {
[10:32:40.605]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:40.605]                           "", base::R.version$version.string), 
[10:32:40.605]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:40.605]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:40.605]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:40.605]                             "release", "version")], collapse = " "), 
[10:32:40.605]                           hostname = base::Sys.info()[["nodename"]])
[10:32:40.605]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:40.605]                           info)
[10:32:40.605]                         info <- base::paste(info, collapse = "; ")
[10:32:40.605]                         if (!has_future) {
[10:32:40.605]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:40.605]                             info)
[10:32:40.605]                         }
[10:32:40.605]                         else {
[10:32:40.605]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:40.605]                             info, version)
[10:32:40.605]                         }
[10:32:40.605]                         base::stop(msg)
[10:32:40.605]                       }
[10:32:40.605]                     })
[10:32:40.605]                   }
[10:32:40.605]                   ...future.strategy.old <- future::plan("list")
[10:32:40.605]                   options(future.plan = NULL)
[10:32:40.605]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.605]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:40.605]                 }
[10:32:40.605]                 ...future.workdir <- getwd()
[10:32:40.605]             }
[10:32:40.605]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:40.605]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:40.605]         }
[10:32:40.605]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:40.605]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:40.605]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:40.605]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:40.605]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:40.605]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:40.605]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:40.605]             base::names(...future.oldOptions))
[10:32:40.605]     }
[10:32:40.605]     if (FALSE) {
[10:32:40.605]     }
[10:32:40.605]     else {
[10:32:40.605]         if (TRUE) {
[10:32:40.605]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:40.605]                 open = "w")
[10:32:40.605]         }
[10:32:40.605]         else {
[10:32:40.605]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:40.605]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:40.605]         }
[10:32:40.605]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:40.605]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:40.605]             base::sink(type = "output", split = FALSE)
[10:32:40.605]             base::close(...future.stdout)
[10:32:40.605]         }, add = TRUE)
[10:32:40.605]     }
[10:32:40.605]     ...future.frame <- base::sys.nframe()
[10:32:40.605]     ...future.conditions <- base::list()
[10:32:40.605]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:40.605]     if (FALSE) {
[10:32:40.605]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:40.605]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:40.605]     }
[10:32:40.605]     ...future.result <- base::tryCatch({
[10:32:40.605]         base::withCallingHandlers({
[10:32:40.605]             ...future.value <- base::withVisible(base::local({
[10:32:40.605]                 42L
[10:32:40.605]             }))
[10:32:40.605]             future::FutureResult(value = ...future.value$value, 
[10:32:40.605]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.605]                   ...future.rng), globalenv = if (FALSE) 
[10:32:40.605]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:40.605]                     ...future.globalenv.names))
[10:32:40.605]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:40.605]         }, condition = base::local({
[10:32:40.605]             c <- base::c
[10:32:40.605]             inherits <- base::inherits
[10:32:40.605]             invokeRestart <- base::invokeRestart
[10:32:40.605]             length <- base::length
[10:32:40.605]             list <- base::list
[10:32:40.605]             seq.int <- base::seq.int
[10:32:40.605]             signalCondition <- base::signalCondition
[10:32:40.605]             sys.calls <- base::sys.calls
[10:32:40.605]             `[[` <- base::`[[`
[10:32:40.605]             `+` <- base::`+`
[10:32:40.605]             `<<-` <- base::`<<-`
[10:32:40.605]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:40.605]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:40.605]                   3L)]
[10:32:40.605]             }
[10:32:40.605]             function(cond) {
[10:32:40.605]                 is_error <- inherits(cond, "error")
[10:32:40.605]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:40.605]                   NULL)
[10:32:40.605]                 if (is_error) {
[10:32:40.605]                   sessionInformation <- function() {
[10:32:40.605]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:40.605]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:40.605]                       search = base::search(), system = base::Sys.info())
[10:32:40.605]                   }
[10:32:40.605]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.605]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:40.605]                     cond$call), session = sessionInformation(), 
[10:32:40.605]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:40.605]                   signalCondition(cond)
[10:32:40.605]                 }
[10:32:40.605]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:40.605]                 "immediateCondition"))) {
[10:32:40.605]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:40.605]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.605]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:40.605]                   if (TRUE && !signal) {
[10:32:40.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.605]                     {
[10:32:40.605]                       inherits <- base::inherits
[10:32:40.605]                       invokeRestart <- base::invokeRestart
[10:32:40.605]                       is.null <- base::is.null
[10:32:40.605]                       muffled <- FALSE
[10:32:40.605]                       if (inherits(cond, "message")) {
[10:32:40.605]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.605]                         if (muffled) 
[10:32:40.605]                           invokeRestart("muffleMessage")
[10:32:40.605]                       }
[10:32:40.605]                       else if (inherits(cond, "warning")) {
[10:32:40.605]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.605]                         if (muffled) 
[10:32:40.605]                           invokeRestart("muffleWarning")
[10:32:40.605]                       }
[10:32:40.605]                       else if (inherits(cond, "condition")) {
[10:32:40.605]                         if (!is.null(pattern)) {
[10:32:40.605]                           computeRestarts <- base::computeRestarts
[10:32:40.605]                           grepl <- base::grepl
[10:32:40.605]                           restarts <- computeRestarts(cond)
[10:32:40.605]                           for (restart in restarts) {
[10:32:40.605]                             name <- restart$name
[10:32:40.605]                             if (is.null(name)) 
[10:32:40.605]                               next
[10:32:40.605]                             if (!grepl(pattern, name)) 
[10:32:40.605]                               next
[10:32:40.605]                             invokeRestart(restart)
[10:32:40.605]                             muffled <- TRUE
[10:32:40.605]                             break
[10:32:40.605]                           }
[10:32:40.605]                         }
[10:32:40.605]                       }
[10:32:40.605]                       invisible(muffled)
[10:32:40.605]                     }
[10:32:40.605]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.605]                   }
[10:32:40.605]                 }
[10:32:40.605]                 else {
[10:32:40.605]                   if (TRUE) {
[10:32:40.605]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.605]                     {
[10:32:40.605]                       inherits <- base::inherits
[10:32:40.605]                       invokeRestart <- base::invokeRestart
[10:32:40.605]                       is.null <- base::is.null
[10:32:40.605]                       muffled <- FALSE
[10:32:40.605]                       if (inherits(cond, "message")) {
[10:32:40.605]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.605]                         if (muffled) 
[10:32:40.605]                           invokeRestart("muffleMessage")
[10:32:40.605]                       }
[10:32:40.605]                       else if (inherits(cond, "warning")) {
[10:32:40.605]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.605]                         if (muffled) 
[10:32:40.605]                           invokeRestart("muffleWarning")
[10:32:40.605]                       }
[10:32:40.605]                       else if (inherits(cond, "condition")) {
[10:32:40.605]                         if (!is.null(pattern)) {
[10:32:40.605]                           computeRestarts <- base::computeRestarts
[10:32:40.605]                           grepl <- base::grepl
[10:32:40.605]                           restarts <- computeRestarts(cond)
[10:32:40.605]                           for (restart in restarts) {
[10:32:40.605]                             name <- restart$name
[10:32:40.605]                             if (is.null(name)) 
[10:32:40.605]                               next
[10:32:40.605]                             if (!grepl(pattern, name)) 
[10:32:40.605]                               next
[10:32:40.605]                             invokeRestart(restart)
[10:32:40.605]                             muffled <- TRUE
[10:32:40.605]                             break
[10:32:40.605]                           }
[10:32:40.605]                         }
[10:32:40.605]                       }
[10:32:40.605]                       invisible(muffled)
[10:32:40.605]                     }
[10:32:40.605]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.605]                   }
[10:32:40.605]                 }
[10:32:40.605]             }
[10:32:40.605]         }))
[10:32:40.605]     }, error = function(ex) {
[10:32:40.605]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:40.605]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.605]                 ...future.rng), started = ...future.startTime, 
[10:32:40.605]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:40.605]             version = "1.8"), class = "FutureResult")
[10:32:40.605]     }, finally = {
[10:32:40.605]         if (!identical(...future.workdir, getwd())) 
[10:32:40.605]             setwd(...future.workdir)
[10:32:40.605]         {
[10:32:40.605]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:40.605]                 ...future.oldOptions$nwarnings <- NULL
[10:32:40.605]             }
[10:32:40.605]             base::options(...future.oldOptions)
[10:32:40.605]             if (.Platform$OS.type == "windows") {
[10:32:40.605]                 old_names <- names(...future.oldEnvVars)
[10:32:40.605]                 envs <- base::Sys.getenv()
[10:32:40.605]                 names <- names(envs)
[10:32:40.605]                 common <- intersect(names, old_names)
[10:32:40.605]                 added <- setdiff(names, old_names)
[10:32:40.605]                 removed <- setdiff(old_names, names)
[10:32:40.605]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:40.605]                   envs[common]]
[10:32:40.605]                 NAMES <- toupper(changed)
[10:32:40.605]                 args <- list()
[10:32:40.605]                 for (kk in seq_along(NAMES)) {
[10:32:40.605]                   name <- changed[[kk]]
[10:32:40.605]                   NAME <- NAMES[[kk]]
[10:32:40.605]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.605]                     next
[10:32:40.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.605]                 }
[10:32:40.605]                 NAMES <- toupper(added)
[10:32:40.605]                 for (kk in seq_along(NAMES)) {
[10:32:40.605]                   name <- added[[kk]]
[10:32:40.605]                   NAME <- NAMES[[kk]]
[10:32:40.605]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.605]                     next
[10:32:40.605]                   args[[name]] <- ""
[10:32:40.605]                 }
[10:32:40.605]                 NAMES <- toupper(removed)
[10:32:40.605]                 for (kk in seq_along(NAMES)) {
[10:32:40.605]                   name <- removed[[kk]]
[10:32:40.605]                   NAME <- NAMES[[kk]]
[10:32:40.605]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.605]                     next
[10:32:40.605]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.605]                 }
[10:32:40.605]                 if (length(args) > 0) 
[10:32:40.605]                   base::do.call(base::Sys.setenv, args = args)
[10:32:40.605]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:40.605]             }
[10:32:40.605]             else {
[10:32:40.605]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:40.605]             }
[10:32:40.605]             {
[10:32:40.605]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:40.605]                   0L) {
[10:32:40.605]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:40.605]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:40.605]                   base::options(opts)
[10:32:40.605]                 }
[10:32:40.605]                 {
[10:32:40.605]                   {
[10:32:40.605]                     NULL
[10:32:40.605]                     RNGkind("Mersenne-Twister")
[10:32:40.605]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:40.605]                       inherits = FALSE)
[10:32:40.605]                   }
[10:32:40.605]                   options(future.plan = NULL)
[10:32:40.605]                   if (is.na(NA_character_)) 
[10:32:40.605]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.605]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:40.605]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:40.605]                     .init = FALSE)
[10:32:40.605]                 }
[10:32:40.605]             }
[10:32:40.605]         }
[10:32:40.605]     })
[10:32:40.605]     if (TRUE) {
[10:32:40.605]         base::sink(type = "output", split = FALSE)
[10:32:40.605]         if (TRUE) {
[10:32:40.605]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:40.605]         }
[10:32:40.605]         else {
[10:32:40.605]             ...future.result["stdout"] <- base::list(NULL)
[10:32:40.605]         }
[10:32:40.605]         base::close(...future.stdout)
[10:32:40.605]         ...future.stdout <- NULL
[10:32:40.605]     }
[10:32:40.605]     ...future.result$conditions <- ...future.conditions
[10:32:40.605]     ...future.result$finished <- base::Sys.time()
[10:32:40.605]     ...future.result
[10:32:40.605] }
[10:32:40.607] plan(): Setting new future strategy stack:
[10:32:40.607] List of future strategies:
[10:32:40.607] 1. sequential:
[10:32:40.607]    - args: function (..., envir = parent.frame())
[10:32:40.607]    - tweaked: FALSE
[10:32:40.607]    - call: NULL
[10:32:40.607] plan(): nbrOfWorkers() = 1
[10:32:40.608] plan(): Setting new future strategy stack:
[10:32:40.608] List of future strategies:
[10:32:40.608] 1. sequential:
[10:32:40.608]    - args: function (..., envir = parent.frame())
[10:32:40.608]    - tweaked: FALSE
[10:32:40.608]    - call: future::plan("sequential")
[10:32:40.608] plan(): nbrOfWorkers() = 1
[10:32:40.608] SequentialFuture started (and completed)
[10:32:40.609] - Launch lazy future ... done
[10:32:40.609] run() for ‘SequentialFuture’ ... done
[10:32:40.609] - run() ... done
[10:32:40.609] - resolved() ...
[10:32:40.609] resolved() for ‘SequentialFuture’ ...
[10:32:40.609] - state: ‘finished’
[10:32:40.609] - run: TRUE
[10:32:40.609] - result: ‘FutureResult’
[10:32:40.609] resolved() for ‘SequentialFuture’ ... done
[10:32:40.609] - resolved: TRUE
[10:32:40.610] - resolved() ... done
[10:32:40.610] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[10:32:40.610] getGlobalsAndPackages() ...
[10:32:40.610] Searching for globals...
[10:32:40.613] 
[10:32:40.613] Searching for globals ... DONE
[10:32:40.613] - globals: [0] <none>
[10:32:40.613] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: a6dbf6c0-9c7d-0ebb-6cda-58b0789136f8
Class: ‘Future’, ‘environment’
> y <- value(f)
[10:32:40.614] run() for ‘Future’ ...
[10:32:40.614] - state: ‘created’
[10:32:40.614] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:40.614] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:40.615] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:40.615]   - Field: ‘label’
[10:32:40.615]   - Field: ‘local’
[10:32:40.615]   - Field: ‘owner’
[10:32:40.615]   - Field: ‘envir’
[10:32:40.615]   - Field: ‘packages’
[10:32:40.615]   - Field: ‘gc’
[10:32:40.615]   - Field: ‘conditions’
[10:32:40.615]   - Field: ‘expr’
[10:32:40.615]   - Field: ‘uuid’
[10:32:40.616]   - Field: ‘seed’
[10:32:40.616]   - Field: ‘version’
[10:32:40.616]   - Field: ‘result’
[10:32:40.616]   - Field: ‘asynchronous’
[10:32:40.616]   - Field: ‘calls’
[10:32:40.616]   - Field: ‘globals’
[10:32:40.616]   - Field: ‘stdout’
[10:32:40.616]   - Field: ‘earlySignal’
[10:32:40.616]   - Field: ‘lazy’
[10:32:40.616]   - Field: ‘state’
[10:32:40.616] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:40.617] - Launch lazy future ...
[10:32:40.617] Packages needed by the future expression (n = 0): <none>
[10:32:40.617] Packages needed by future strategies (n = 0): <none>
[10:32:40.617] {
[10:32:40.617]     {
[10:32:40.617]         {
[10:32:40.617]             ...future.startTime <- base::Sys.time()
[10:32:40.617]             {
[10:32:40.617]                 {
[10:32:40.617]                   {
[10:32:40.617]                     base::local({
[10:32:40.617]                       has_future <- base::requireNamespace("future", 
[10:32:40.617]                         quietly = TRUE)
[10:32:40.617]                       if (has_future) {
[10:32:40.617]                         ns <- base::getNamespace("future")
[10:32:40.617]                         version <- ns[[".package"]][["version"]]
[10:32:40.617]                         if (is.null(version)) 
[10:32:40.617]                           version <- utils::packageVersion("future")
[10:32:40.617]                       }
[10:32:40.617]                       else {
[10:32:40.617]                         version <- NULL
[10:32:40.617]                       }
[10:32:40.617]                       if (!has_future || version < "1.8.0") {
[10:32:40.617]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:40.617]                           "", base::R.version$version.string), 
[10:32:40.617]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:40.617]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:40.617]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:40.617]                             "release", "version")], collapse = " "), 
[10:32:40.617]                           hostname = base::Sys.info()[["nodename"]])
[10:32:40.617]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:40.617]                           info)
[10:32:40.617]                         info <- base::paste(info, collapse = "; ")
[10:32:40.617]                         if (!has_future) {
[10:32:40.617]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:40.617]                             info)
[10:32:40.617]                         }
[10:32:40.617]                         else {
[10:32:40.617]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:40.617]                             info, version)
[10:32:40.617]                         }
[10:32:40.617]                         base::stop(msg)
[10:32:40.617]                       }
[10:32:40.617]                     })
[10:32:40.617]                   }
[10:32:40.617]                   ...future.strategy.old <- future::plan("list")
[10:32:40.617]                   options(future.plan = NULL)
[10:32:40.617]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.617]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:40.617]                 }
[10:32:40.617]                 ...future.workdir <- getwd()
[10:32:40.617]             }
[10:32:40.617]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:40.617]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:40.617]         }
[10:32:40.617]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:40.617]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:40.617]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:40.617]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:40.617]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:40.617]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:40.617]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:40.617]             base::names(...future.oldOptions))
[10:32:40.617]     }
[10:32:40.617]     if (FALSE) {
[10:32:40.617]     }
[10:32:40.617]     else {
[10:32:40.617]         if (TRUE) {
[10:32:40.617]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:40.617]                 open = "w")
[10:32:40.617]         }
[10:32:40.617]         else {
[10:32:40.617]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:40.617]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:40.617]         }
[10:32:40.617]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:40.617]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:40.617]             base::sink(type = "output", split = FALSE)
[10:32:40.617]             base::close(...future.stdout)
[10:32:40.617]         }, add = TRUE)
[10:32:40.617]     }
[10:32:40.617]     ...future.frame <- base::sys.nframe()
[10:32:40.617]     ...future.conditions <- base::list()
[10:32:40.617]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:40.617]     if (FALSE) {
[10:32:40.617]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:40.617]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:40.617]     }
[10:32:40.617]     ...future.result <- base::tryCatch({
[10:32:40.617]         base::withCallingHandlers({
[10:32:40.617]             ...future.value <- base::withVisible(base::local(42L))
[10:32:40.617]             future::FutureResult(value = ...future.value$value, 
[10:32:40.617]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.617]                   ...future.rng), globalenv = if (FALSE) 
[10:32:40.617]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:40.617]                     ...future.globalenv.names))
[10:32:40.617]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:40.617]         }, condition = base::local({
[10:32:40.617]             c <- base::c
[10:32:40.617]             inherits <- base::inherits
[10:32:40.617]             invokeRestart <- base::invokeRestart
[10:32:40.617]             length <- base::length
[10:32:40.617]             list <- base::list
[10:32:40.617]             seq.int <- base::seq.int
[10:32:40.617]             signalCondition <- base::signalCondition
[10:32:40.617]             sys.calls <- base::sys.calls
[10:32:40.617]             `[[` <- base::`[[`
[10:32:40.617]             `+` <- base::`+`
[10:32:40.617]             `<<-` <- base::`<<-`
[10:32:40.617]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:40.617]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:40.617]                   3L)]
[10:32:40.617]             }
[10:32:40.617]             function(cond) {
[10:32:40.617]                 is_error <- inherits(cond, "error")
[10:32:40.617]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:40.617]                   NULL)
[10:32:40.617]                 if (is_error) {
[10:32:40.617]                   sessionInformation <- function() {
[10:32:40.617]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:40.617]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:40.617]                       search = base::search(), system = base::Sys.info())
[10:32:40.617]                   }
[10:32:40.617]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.617]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:40.617]                     cond$call), session = sessionInformation(), 
[10:32:40.617]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:40.617]                   signalCondition(cond)
[10:32:40.617]                 }
[10:32:40.617]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:40.617]                 "immediateCondition"))) {
[10:32:40.617]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:40.617]                   ...future.conditions[[length(...future.conditions) + 
[10:32:40.617]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:40.617]                   if (TRUE && !signal) {
[10:32:40.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.617]                     {
[10:32:40.617]                       inherits <- base::inherits
[10:32:40.617]                       invokeRestart <- base::invokeRestart
[10:32:40.617]                       is.null <- base::is.null
[10:32:40.617]                       muffled <- FALSE
[10:32:40.617]                       if (inherits(cond, "message")) {
[10:32:40.617]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.617]                         if (muffled) 
[10:32:40.617]                           invokeRestart("muffleMessage")
[10:32:40.617]                       }
[10:32:40.617]                       else if (inherits(cond, "warning")) {
[10:32:40.617]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.617]                         if (muffled) 
[10:32:40.617]                           invokeRestart("muffleWarning")
[10:32:40.617]                       }
[10:32:40.617]                       else if (inherits(cond, "condition")) {
[10:32:40.617]                         if (!is.null(pattern)) {
[10:32:40.617]                           computeRestarts <- base::computeRestarts
[10:32:40.617]                           grepl <- base::grepl
[10:32:40.617]                           restarts <- computeRestarts(cond)
[10:32:40.617]                           for (restart in restarts) {
[10:32:40.617]                             name <- restart$name
[10:32:40.617]                             if (is.null(name)) 
[10:32:40.617]                               next
[10:32:40.617]                             if (!grepl(pattern, name)) 
[10:32:40.617]                               next
[10:32:40.617]                             invokeRestart(restart)
[10:32:40.617]                             muffled <- TRUE
[10:32:40.617]                             break
[10:32:40.617]                           }
[10:32:40.617]                         }
[10:32:40.617]                       }
[10:32:40.617]                       invisible(muffled)
[10:32:40.617]                     }
[10:32:40.617]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.617]                   }
[10:32:40.617]                 }
[10:32:40.617]                 else {
[10:32:40.617]                   if (TRUE) {
[10:32:40.617]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:40.617]                     {
[10:32:40.617]                       inherits <- base::inherits
[10:32:40.617]                       invokeRestart <- base::invokeRestart
[10:32:40.617]                       is.null <- base::is.null
[10:32:40.617]                       muffled <- FALSE
[10:32:40.617]                       if (inherits(cond, "message")) {
[10:32:40.617]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:40.617]                         if (muffled) 
[10:32:40.617]                           invokeRestart("muffleMessage")
[10:32:40.617]                       }
[10:32:40.617]                       else if (inherits(cond, "warning")) {
[10:32:40.617]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:40.617]                         if (muffled) 
[10:32:40.617]                           invokeRestart("muffleWarning")
[10:32:40.617]                       }
[10:32:40.617]                       else if (inherits(cond, "condition")) {
[10:32:40.617]                         if (!is.null(pattern)) {
[10:32:40.617]                           computeRestarts <- base::computeRestarts
[10:32:40.617]                           grepl <- base::grepl
[10:32:40.617]                           restarts <- computeRestarts(cond)
[10:32:40.617]                           for (restart in restarts) {
[10:32:40.617]                             name <- restart$name
[10:32:40.617]                             if (is.null(name)) 
[10:32:40.617]                               next
[10:32:40.617]                             if (!grepl(pattern, name)) 
[10:32:40.617]                               next
[10:32:40.617]                             invokeRestart(restart)
[10:32:40.617]                             muffled <- TRUE
[10:32:40.617]                             break
[10:32:40.617]                           }
[10:32:40.617]                         }
[10:32:40.617]                       }
[10:32:40.617]                       invisible(muffled)
[10:32:40.617]                     }
[10:32:40.617]                     muffleCondition(cond, pattern = "^muffle")
[10:32:40.617]                   }
[10:32:40.617]                 }
[10:32:40.617]             }
[10:32:40.617]         }))
[10:32:40.617]     }, error = function(ex) {
[10:32:40.617]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:40.617]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:40.617]                 ...future.rng), started = ...future.startTime, 
[10:32:40.617]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:40.617]             version = "1.8"), class = "FutureResult")
[10:32:40.617]     }, finally = {
[10:32:40.617]         if (!identical(...future.workdir, getwd())) 
[10:32:40.617]             setwd(...future.workdir)
[10:32:40.617]         {
[10:32:40.617]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:40.617]                 ...future.oldOptions$nwarnings <- NULL
[10:32:40.617]             }
[10:32:40.617]             base::options(...future.oldOptions)
[10:32:40.617]             if (.Platform$OS.type == "windows") {
[10:32:40.617]                 old_names <- names(...future.oldEnvVars)
[10:32:40.617]                 envs <- base::Sys.getenv()
[10:32:40.617]                 names <- names(envs)
[10:32:40.617]                 common <- intersect(names, old_names)
[10:32:40.617]                 added <- setdiff(names, old_names)
[10:32:40.617]                 removed <- setdiff(old_names, names)
[10:32:40.617]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:40.617]                   envs[common]]
[10:32:40.617]                 NAMES <- toupper(changed)
[10:32:40.617]                 args <- list()
[10:32:40.617]                 for (kk in seq_along(NAMES)) {
[10:32:40.617]                   name <- changed[[kk]]
[10:32:40.617]                   NAME <- NAMES[[kk]]
[10:32:40.617]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.617]                     next
[10:32:40.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.617]                 }
[10:32:40.617]                 NAMES <- toupper(added)
[10:32:40.617]                 for (kk in seq_along(NAMES)) {
[10:32:40.617]                   name <- added[[kk]]
[10:32:40.617]                   NAME <- NAMES[[kk]]
[10:32:40.617]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.617]                     next
[10:32:40.617]                   args[[name]] <- ""
[10:32:40.617]                 }
[10:32:40.617]                 NAMES <- toupper(removed)
[10:32:40.617]                 for (kk in seq_along(NAMES)) {
[10:32:40.617]                   name <- removed[[kk]]
[10:32:40.617]                   NAME <- NAMES[[kk]]
[10:32:40.617]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:40.617]                     next
[10:32:40.617]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:40.617]                 }
[10:32:40.617]                 if (length(args) > 0) 
[10:32:40.617]                   base::do.call(base::Sys.setenv, args = args)
[10:32:40.617]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:40.617]             }
[10:32:40.617]             else {
[10:32:40.617]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:40.617]             }
[10:32:40.617]             {
[10:32:40.617]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:40.617]                   0L) {
[10:32:40.617]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:40.617]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:40.617]                   base::options(opts)
[10:32:40.617]                 }
[10:32:40.617]                 {
[10:32:40.617]                   {
[10:32:40.617]                     NULL
[10:32:40.617]                     RNGkind("Mersenne-Twister")
[10:32:40.617]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:40.617]                       inherits = FALSE)
[10:32:40.617]                   }
[10:32:40.617]                   options(future.plan = NULL)
[10:32:40.617]                   if (is.na(NA_character_)) 
[10:32:40.617]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:40.617]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:40.617]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:40.617]                     .init = FALSE)
[10:32:40.617]                 }
[10:32:40.617]             }
[10:32:40.617]         }
[10:32:40.617]     })
[10:32:40.617]     if (TRUE) {
[10:32:40.617]         base::sink(type = "output", split = FALSE)
[10:32:40.617]         if (TRUE) {
[10:32:40.617]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:40.617]         }
[10:32:40.617]         else {
[10:32:40.617]             ...future.result["stdout"] <- base::list(NULL)
[10:32:40.617]         }
[10:32:40.617]         base::close(...future.stdout)
[10:32:40.617]         ...future.stdout <- NULL
[10:32:40.617]     }
[10:32:40.617]     ...future.result$conditions <- ...future.conditions
[10:32:40.617]     ...future.result$finished <- base::Sys.time()
[10:32:40.617]     ...future.result
[10:32:40.617] }
[10:32:40.619] plan(): Setting new future strategy stack:
[10:32:40.619] List of future strategies:
[10:32:40.619] 1. sequential:
[10:32:40.619]    - args: function (..., envir = parent.frame())
[10:32:40.619]    - tweaked: FALSE
[10:32:40.619]    - call: NULL
[10:32:40.619] plan(): nbrOfWorkers() = 1
[10:32:40.620] plan(): Setting new future strategy stack:
[10:32:40.620] List of future strategies:
[10:32:40.620] 1. sequential:
[10:32:40.620]    - args: function (..., envir = parent.frame())
[10:32:40.620]    - tweaked: FALSE
[10:32:40.620]    - call: future::plan("sequential")
[10:32:40.621] plan(): nbrOfWorkers() = 1
[10:32:40.621] SequentialFuture started (and completed)
[10:32:40.621] - Launch lazy future ... done
[10:32:40.621] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[10:32:40.621] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[10:32:40.622] plan(): Setting new future strategy stack:
[10:32:40.622] List of future strategies:
[10:32:40.622] 1. FutureStrategy:
[10:32:40.622]    - args: function (..., envir = parent.frame())
[10:32:40.622]    - tweaked: FALSE
[10:32:40.622]    - call: future::plan(oplan)
[10:32:40.633] plan(): nbrOfWorkers() = 1
> 
