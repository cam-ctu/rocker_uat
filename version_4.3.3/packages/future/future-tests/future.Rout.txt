
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:24.331] plan(): Setting new future strategy stack:
[13:36:24.331] List of future strategies:
[13:36:24.331] 1. sequential:
[13:36:24.331]    - args: function (..., envir = parent.frame())
[13:36:24.331]    - tweaked: FALSE
[13:36:24.331]    - call: future::plan("sequential")
[13:36:24.345] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:36:24.355] getGlobalsAndPackages() ...
[13:36:24.356] Searching for globals...
[13:36:24.359] - globals found: [1] ‘{’
[13:36:24.359] Searching for globals ... DONE
[13:36:24.359] Resolving globals: FALSE
[13:36:24.359] 
[13:36:24.360] 
[13:36:24.360] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:36:24.360] resolved() for ‘Future’ ...
[13:36:24.360] - state: ‘created’
[13:36:24.360] - run: TRUE
[13:36:24.361] - run() ...
[13:36:24.361] run() for ‘Future’ ...
[13:36:24.361] - state: ‘created’
[13:36:24.361] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:24.361] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:24.362] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:24.362]   - Field: ‘label’
[13:36:24.362]   - Field: ‘local’
[13:36:24.362]   - Field: ‘owner’
[13:36:24.362]   - Field: ‘envir’
[13:36:24.362]   - Field: ‘packages’
[13:36:24.362]   - Field: ‘gc’
[13:36:24.362]   - Field: ‘conditions’
[13:36:24.362]   - Field: ‘expr’
[13:36:24.363]   - Field: ‘uuid’
[13:36:24.363]   - Field: ‘seed’
[13:36:24.363]   - Field: ‘version’
[13:36:24.363]   - Field: ‘result’
[13:36:24.363]   - Field: ‘asynchronous’
[13:36:24.363]   - Field: ‘calls’
[13:36:24.363]   - Field: ‘globals’
[13:36:24.363]   - Field: ‘stdout’
[13:36:24.363]   - Field: ‘earlySignal’
[13:36:24.363]   - Field: ‘lazy’
[13:36:24.363]   - Field: ‘state’
[13:36:24.363] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:24.364] - Launch lazy future ...
[13:36:24.364] Packages needed by the future expression (n = 0): <none>
[13:36:24.364] Packages needed by future strategies (n = 0): <none>
[13:36:24.365] {
[13:36:24.365]     {
[13:36:24.365]         {
[13:36:24.365]             ...future.startTime <- base::Sys.time()
[13:36:24.365]             {
[13:36:24.365]                 {
[13:36:24.365]                   {
[13:36:24.365]                     base::local({
[13:36:24.365]                       has_future <- base::requireNamespace("future", 
[13:36:24.365]                         quietly = TRUE)
[13:36:24.365]                       if (has_future) {
[13:36:24.365]                         ns <- base::getNamespace("future")
[13:36:24.365]                         version <- ns[[".package"]][["version"]]
[13:36:24.365]                         if (is.null(version)) 
[13:36:24.365]                           version <- utils::packageVersion("future")
[13:36:24.365]                       }
[13:36:24.365]                       else {
[13:36:24.365]                         version <- NULL
[13:36:24.365]                       }
[13:36:24.365]                       if (!has_future || version < "1.8.0") {
[13:36:24.365]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:24.365]                           "", base::R.version$version.string), 
[13:36:24.365]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:24.365]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:24.365]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:24.365]                             "release", "version")], collapse = " "), 
[13:36:24.365]                           hostname = base::Sys.info()[["nodename"]])
[13:36:24.365]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:24.365]                           info)
[13:36:24.365]                         info <- base::paste(info, collapse = "; ")
[13:36:24.365]                         if (!has_future) {
[13:36:24.365]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:24.365]                             info)
[13:36:24.365]                         }
[13:36:24.365]                         else {
[13:36:24.365]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:24.365]                             info, version)
[13:36:24.365]                         }
[13:36:24.365]                         base::stop(msg)
[13:36:24.365]                       }
[13:36:24.365]                     })
[13:36:24.365]                   }
[13:36:24.365]                   ...future.strategy.old <- future::plan("list")
[13:36:24.365]                   options(future.plan = NULL)
[13:36:24.365]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.365]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:24.365]                 }
[13:36:24.365]                 ...future.workdir <- getwd()
[13:36:24.365]             }
[13:36:24.365]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:24.365]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:24.365]         }
[13:36:24.365]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:24.365]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:24.365]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:24.365]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:24.365]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:24.365]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:24.365]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:24.365]             base::names(...future.oldOptions))
[13:36:24.365]     }
[13:36:24.365]     if (FALSE) {
[13:36:24.365]     }
[13:36:24.365]     else {
[13:36:24.365]         if (TRUE) {
[13:36:24.365]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:24.365]                 open = "w")
[13:36:24.365]         }
[13:36:24.365]         else {
[13:36:24.365]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:24.365]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:24.365]         }
[13:36:24.365]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:24.365]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:24.365]             base::sink(type = "output", split = FALSE)
[13:36:24.365]             base::close(...future.stdout)
[13:36:24.365]         }, add = TRUE)
[13:36:24.365]     }
[13:36:24.365]     ...future.frame <- base::sys.nframe()
[13:36:24.365]     ...future.conditions <- base::list()
[13:36:24.365]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:24.365]     if (FALSE) {
[13:36:24.365]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:24.365]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:24.365]     }
[13:36:24.365]     ...future.result <- base::tryCatch({
[13:36:24.365]         base::withCallingHandlers({
[13:36:24.365]             ...future.value <- base::withVisible(base::local({
[13:36:24.365]                 42L
[13:36:24.365]             }))
[13:36:24.365]             future::FutureResult(value = ...future.value$value, 
[13:36:24.365]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.365]                   ...future.rng), globalenv = if (FALSE) 
[13:36:24.365]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:24.365]                     ...future.globalenv.names))
[13:36:24.365]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:24.365]         }, condition = base::local({
[13:36:24.365]             c <- base::c
[13:36:24.365]             inherits <- base::inherits
[13:36:24.365]             invokeRestart <- base::invokeRestart
[13:36:24.365]             length <- base::length
[13:36:24.365]             list <- base::list
[13:36:24.365]             seq.int <- base::seq.int
[13:36:24.365]             signalCondition <- base::signalCondition
[13:36:24.365]             sys.calls <- base::sys.calls
[13:36:24.365]             `[[` <- base::`[[`
[13:36:24.365]             `+` <- base::`+`
[13:36:24.365]             `<<-` <- base::`<<-`
[13:36:24.365]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:24.365]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:24.365]                   3L)]
[13:36:24.365]             }
[13:36:24.365]             function(cond) {
[13:36:24.365]                 is_error <- inherits(cond, "error")
[13:36:24.365]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:24.365]                   NULL)
[13:36:24.365]                 if (is_error) {
[13:36:24.365]                   sessionInformation <- function() {
[13:36:24.365]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:24.365]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:24.365]                       search = base::search(), system = base::Sys.info())
[13:36:24.365]                   }
[13:36:24.365]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.365]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:24.365]                     cond$call), session = sessionInformation(), 
[13:36:24.365]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:24.365]                   signalCondition(cond)
[13:36:24.365]                 }
[13:36:24.365]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:24.365]                 "immediateCondition"))) {
[13:36:24.365]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:24.365]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.365]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:24.365]                   if (TRUE && !signal) {
[13:36:24.365]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.365]                     {
[13:36:24.365]                       inherits <- base::inherits
[13:36:24.365]                       invokeRestart <- base::invokeRestart
[13:36:24.365]                       is.null <- base::is.null
[13:36:24.365]                       muffled <- FALSE
[13:36:24.365]                       if (inherits(cond, "message")) {
[13:36:24.365]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.365]                         if (muffled) 
[13:36:24.365]                           invokeRestart("muffleMessage")
[13:36:24.365]                       }
[13:36:24.365]                       else if (inherits(cond, "warning")) {
[13:36:24.365]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.365]                         if (muffled) 
[13:36:24.365]                           invokeRestart("muffleWarning")
[13:36:24.365]                       }
[13:36:24.365]                       else if (inherits(cond, "condition")) {
[13:36:24.365]                         if (!is.null(pattern)) {
[13:36:24.365]                           computeRestarts <- base::computeRestarts
[13:36:24.365]                           grepl <- base::grepl
[13:36:24.365]                           restarts <- computeRestarts(cond)
[13:36:24.365]                           for (restart in restarts) {
[13:36:24.365]                             name <- restart$name
[13:36:24.365]                             if (is.null(name)) 
[13:36:24.365]                               next
[13:36:24.365]                             if (!grepl(pattern, name)) 
[13:36:24.365]                               next
[13:36:24.365]                             invokeRestart(restart)
[13:36:24.365]                             muffled <- TRUE
[13:36:24.365]                             break
[13:36:24.365]                           }
[13:36:24.365]                         }
[13:36:24.365]                       }
[13:36:24.365]                       invisible(muffled)
[13:36:24.365]                     }
[13:36:24.365]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.365]                   }
[13:36:24.365]                 }
[13:36:24.365]                 else {
[13:36:24.365]                   if (TRUE) {
[13:36:24.365]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.365]                     {
[13:36:24.365]                       inherits <- base::inherits
[13:36:24.365]                       invokeRestart <- base::invokeRestart
[13:36:24.365]                       is.null <- base::is.null
[13:36:24.365]                       muffled <- FALSE
[13:36:24.365]                       if (inherits(cond, "message")) {
[13:36:24.365]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.365]                         if (muffled) 
[13:36:24.365]                           invokeRestart("muffleMessage")
[13:36:24.365]                       }
[13:36:24.365]                       else if (inherits(cond, "warning")) {
[13:36:24.365]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.365]                         if (muffled) 
[13:36:24.365]                           invokeRestart("muffleWarning")
[13:36:24.365]                       }
[13:36:24.365]                       else if (inherits(cond, "condition")) {
[13:36:24.365]                         if (!is.null(pattern)) {
[13:36:24.365]                           computeRestarts <- base::computeRestarts
[13:36:24.365]                           grepl <- base::grepl
[13:36:24.365]                           restarts <- computeRestarts(cond)
[13:36:24.365]                           for (restart in restarts) {
[13:36:24.365]                             name <- restart$name
[13:36:24.365]                             if (is.null(name)) 
[13:36:24.365]                               next
[13:36:24.365]                             if (!grepl(pattern, name)) 
[13:36:24.365]                               next
[13:36:24.365]                             invokeRestart(restart)
[13:36:24.365]                             muffled <- TRUE
[13:36:24.365]                             break
[13:36:24.365]                           }
[13:36:24.365]                         }
[13:36:24.365]                       }
[13:36:24.365]                       invisible(muffled)
[13:36:24.365]                     }
[13:36:24.365]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.365]                   }
[13:36:24.365]                 }
[13:36:24.365]             }
[13:36:24.365]         }))
[13:36:24.365]     }, error = function(ex) {
[13:36:24.365]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:24.365]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.365]                 ...future.rng), started = ...future.startTime, 
[13:36:24.365]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:24.365]             version = "1.8"), class = "FutureResult")
[13:36:24.365]     }, finally = {
[13:36:24.365]         if (!identical(...future.workdir, getwd())) 
[13:36:24.365]             setwd(...future.workdir)
[13:36:24.365]         {
[13:36:24.365]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:24.365]                 ...future.oldOptions$nwarnings <- NULL
[13:36:24.365]             }
[13:36:24.365]             base::options(...future.oldOptions)
[13:36:24.365]             if (.Platform$OS.type == "windows") {
[13:36:24.365]                 old_names <- names(...future.oldEnvVars)
[13:36:24.365]                 envs <- base::Sys.getenv()
[13:36:24.365]                 names <- names(envs)
[13:36:24.365]                 common <- intersect(names, old_names)
[13:36:24.365]                 added <- setdiff(names, old_names)
[13:36:24.365]                 removed <- setdiff(old_names, names)
[13:36:24.365]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:24.365]                   envs[common]]
[13:36:24.365]                 NAMES <- toupper(changed)
[13:36:24.365]                 args <- list()
[13:36:24.365]                 for (kk in seq_along(NAMES)) {
[13:36:24.365]                   name <- changed[[kk]]
[13:36:24.365]                   NAME <- NAMES[[kk]]
[13:36:24.365]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.365]                     next
[13:36:24.365]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.365]                 }
[13:36:24.365]                 NAMES <- toupper(added)
[13:36:24.365]                 for (kk in seq_along(NAMES)) {
[13:36:24.365]                   name <- added[[kk]]
[13:36:24.365]                   NAME <- NAMES[[kk]]
[13:36:24.365]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.365]                     next
[13:36:24.365]                   args[[name]] <- ""
[13:36:24.365]                 }
[13:36:24.365]                 NAMES <- toupper(removed)
[13:36:24.365]                 for (kk in seq_along(NAMES)) {
[13:36:24.365]                   name <- removed[[kk]]
[13:36:24.365]                   NAME <- NAMES[[kk]]
[13:36:24.365]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.365]                     next
[13:36:24.365]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.365]                 }
[13:36:24.365]                 if (length(args) > 0) 
[13:36:24.365]                   base::do.call(base::Sys.setenv, args = args)
[13:36:24.365]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:24.365]             }
[13:36:24.365]             else {
[13:36:24.365]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:24.365]             }
[13:36:24.365]             {
[13:36:24.365]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:24.365]                   0L) {
[13:36:24.365]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:24.365]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:24.365]                   base::options(opts)
[13:36:24.365]                 }
[13:36:24.365]                 {
[13:36:24.365]                   {
[13:36:24.365]                     NULL
[13:36:24.365]                     RNGkind("Mersenne-Twister")
[13:36:24.365]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:24.365]                       inherits = FALSE)
[13:36:24.365]                   }
[13:36:24.365]                   options(future.plan = NULL)
[13:36:24.365]                   if (is.na(NA_character_)) 
[13:36:24.365]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.365]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:24.365]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:24.365]                     .init = FALSE)
[13:36:24.365]                 }
[13:36:24.365]             }
[13:36:24.365]         }
[13:36:24.365]     })
[13:36:24.365]     if (TRUE) {
[13:36:24.365]         base::sink(type = "output", split = FALSE)
[13:36:24.365]         if (TRUE) {
[13:36:24.365]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:24.365]         }
[13:36:24.365]         else {
[13:36:24.365]             ...future.result["stdout"] <- base::list(NULL)
[13:36:24.365]         }
[13:36:24.365]         base::close(...future.stdout)
[13:36:24.365]         ...future.stdout <- NULL
[13:36:24.365]     }
[13:36:24.365]     ...future.result$conditions <- ...future.conditions
[13:36:24.365]     ...future.result$finished <- base::Sys.time()
[13:36:24.365]     ...future.result
[13:36:24.365] }
[13:36:24.367] plan(): Setting new future strategy stack:
[13:36:24.367] List of future strategies:
[13:36:24.367] 1. sequential:
[13:36:24.367]    - args: function (..., envir = parent.frame())
[13:36:24.367]    - tweaked: FALSE
[13:36:24.367]    - call: NULL
[13:36:24.368] plan(): nbrOfWorkers() = 1
[13:36:24.369] plan(): Setting new future strategy stack:
[13:36:24.369] List of future strategies:
[13:36:24.369] 1. sequential:
[13:36:24.369]    - args: function (..., envir = parent.frame())
[13:36:24.369]    - tweaked: FALSE
[13:36:24.369]    - call: future::plan("sequential")
[13:36:24.369] plan(): nbrOfWorkers() = 1
[13:36:24.369] SequentialFuture started (and completed)
[13:36:24.370] - Launch lazy future ... done
[13:36:24.370] run() for ‘SequentialFuture’ ... done
[13:36:24.370] - run() ... done
[13:36:24.370] - resolved() ...
[13:36:24.370] resolved() for ‘SequentialFuture’ ...
[13:36:24.370] - state: ‘finished’
[13:36:24.370] - run: TRUE
[13:36:24.370] - result: ‘FutureResult’
[13:36:24.371] resolved() for ‘SequentialFuture’ ... done
[13:36:24.371] - resolved: TRUE
[13:36:24.371] - resolved() ... done
[13:36:24.371] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:36:24.371] getGlobalsAndPackages() ...
[13:36:24.372] Searching for globals...
[13:36:24.372] 
[13:36:24.372] Searching for globals ... DONE
[13:36:24.372] - globals: [0] <none>
[13:36:24.372] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e2fccc75-23ad-d4f3-ad1f-f2a430e62aa6
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:36:24.373] run() for ‘Future’ ...
[13:36:24.373] - state: ‘created’
[13:36:24.373] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:24.373] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:24.374] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:24.374]   - Field: ‘label’
[13:36:24.374]   - Field: ‘local’
[13:36:24.374]   - Field: ‘owner’
[13:36:24.374]   - Field: ‘envir’
[13:36:24.374]   - Field: ‘packages’
[13:36:24.374]   - Field: ‘gc’
[13:36:24.374]   - Field: ‘conditions’
[13:36:24.374]   - Field: ‘expr’
[13:36:24.374]   - Field: ‘uuid’
[13:36:24.375]   - Field: ‘seed’
[13:36:24.375]   - Field: ‘version’
[13:36:24.375]   - Field: ‘result’
[13:36:24.375]   - Field: ‘asynchronous’
[13:36:24.375]   - Field: ‘calls’
[13:36:24.375]   - Field: ‘globals’
[13:36:24.375]   - Field: ‘stdout’
[13:36:24.375]   - Field: ‘earlySignal’
[13:36:24.375]   - Field: ‘lazy’
[13:36:24.375]   - Field: ‘state’
[13:36:24.375] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:24.376] - Launch lazy future ...
[13:36:24.376] Packages needed by the future expression (n = 0): <none>
[13:36:24.376] Packages needed by future strategies (n = 0): <none>
[13:36:24.376] {
[13:36:24.376]     {
[13:36:24.376]         {
[13:36:24.376]             ...future.startTime <- base::Sys.time()
[13:36:24.376]             {
[13:36:24.376]                 {
[13:36:24.376]                   {
[13:36:24.376]                     base::local({
[13:36:24.376]                       has_future <- base::requireNamespace("future", 
[13:36:24.376]                         quietly = TRUE)
[13:36:24.376]                       if (has_future) {
[13:36:24.376]                         ns <- base::getNamespace("future")
[13:36:24.376]                         version <- ns[[".package"]][["version"]]
[13:36:24.376]                         if (is.null(version)) 
[13:36:24.376]                           version <- utils::packageVersion("future")
[13:36:24.376]                       }
[13:36:24.376]                       else {
[13:36:24.376]                         version <- NULL
[13:36:24.376]                       }
[13:36:24.376]                       if (!has_future || version < "1.8.0") {
[13:36:24.376]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:24.376]                           "", base::R.version$version.string), 
[13:36:24.376]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:24.376]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:24.376]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:24.376]                             "release", "version")], collapse = " "), 
[13:36:24.376]                           hostname = base::Sys.info()[["nodename"]])
[13:36:24.376]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:24.376]                           info)
[13:36:24.376]                         info <- base::paste(info, collapse = "; ")
[13:36:24.376]                         if (!has_future) {
[13:36:24.376]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:24.376]                             info)
[13:36:24.376]                         }
[13:36:24.376]                         else {
[13:36:24.376]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:24.376]                             info, version)
[13:36:24.376]                         }
[13:36:24.376]                         base::stop(msg)
[13:36:24.376]                       }
[13:36:24.376]                     })
[13:36:24.376]                   }
[13:36:24.376]                   ...future.strategy.old <- future::plan("list")
[13:36:24.376]                   options(future.plan = NULL)
[13:36:24.376]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.376]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:24.376]                 }
[13:36:24.376]                 ...future.workdir <- getwd()
[13:36:24.376]             }
[13:36:24.376]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:24.376]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:24.376]         }
[13:36:24.376]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:24.376]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:24.376]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:24.376]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:24.376]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:24.376]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:24.376]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:24.376]             base::names(...future.oldOptions))
[13:36:24.376]     }
[13:36:24.376]     if (FALSE) {
[13:36:24.376]     }
[13:36:24.376]     else {
[13:36:24.376]         if (TRUE) {
[13:36:24.376]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:24.376]                 open = "w")
[13:36:24.376]         }
[13:36:24.376]         else {
[13:36:24.376]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:24.376]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:24.376]         }
[13:36:24.376]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:24.376]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:24.376]             base::sink(type = "output", split = FALSE)
[13:36:24.376]             base::close(...future.stdout)
[13:36:24.376]         }, add = TRUE)
[13:36:24.376]     }
[13:36:24.376]     ...future.frame <- base::sys.nframe()
[13:36:24.376]     ...future.conditions <- base::list()
[13:36:24.376]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:24.376]     if (FALSE) {
[13:36:24.376]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:24.376]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:24.376]     }
[13:36:24.376]     ...future.result <- base::tryCatch({
[13:36:24.376]         base::withCallingHandlers({
[13:36:24.376]             ...future.value <- base::withVisible(base::local(42L))
[13:36:24.376]             future::FutureResult(value = ...future.value$value, 
[13:36:24.376]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.376]                   ...future.rng), globalenv = if (FALSE) 
[13:36:24.376]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:24.376]                     ...future.globalenv.names))
[13:36:24.376]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:24.376]         }, condition = base::local({
[13:36:24.376]             c <- base::c
[13:36:24.376]             inherits <- base::inherits
[13:36:24.376]             invokeRestart <- base::invokeRestart
[13:36:24.376]             length <- base::length
[13:36:24.376]             list <- base::list
[13:36:24.376]             seq.int <- base::seq.int
[13:36:24.376]             signalCondition <- base::signalCondition
[13:36:24.376]             sys.calls <- base::sys.calls
[13:36:24.376]             `[[` <- base::`[[`
[13:36:24.376]             `+` <- base::`+`
[13:36:24.376]             `<<-` <- base::`<<-`
[13:36:24.376]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:24.376]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:24.376]                   3L)]
[13:36:24.376]             }
[13:36:24.376]             function(cond) {
[13:36:24.376]                 is_error <- inherits(cond, "error")
[13:36:24.376]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:24.376]                   NULL)
[13:36:24.376]                 if (is_error) {
[13:36:24.376]                   sessionInformation <- function() {
[13:36:24.376]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:24.376]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:24.376]                       search = base::search(), system = base::Sys.info())
[13:36:24.376]                   }
[13:36:24.376]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.376]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:24.376]                     cond$call), session = sessionInformation(), 
[13:36:24.376]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:24.376]                   signalCondition(cond)
[13:36:24.376]                 }
[13:36:24.376]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:24.376]                 "immediateCondition"))) {
[13:36:24.376]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:24.376]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.376]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:24.376]                   if (TRUE && !signal) {
[13:36:24.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.376]                     {
[13:36:24.376]                       inherits <- base::inherits
[13:36:24.376]                       invokeRestart <- base::invokeRestart
[13:36:24.376]                       is.null <- base::is.null
[13:36:24.376]                       muffled <- FALSE
[13:36:24.376]                       if (inherits(cond, "message")) {
[13:36:24.376]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.376]                         if (muffled) 
[13:36:24.376]                           invokeRestart("muffleMessage")
[13:36:24.376]                       }
[13:36:24.376]                       else if (inherits(cond, "warning")) {
[13:36:24.376]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.376]                         if (muffled) 
[13:36:24.376]                           invokeRestart("muffleWarning")
[13:36:24.376]                       }
[13:36:24.376]                       else if (inherits(cond, "condition")) {
[13:36:24.376]                         if (!is.null(pattern)) {
[13:36:24.376]                           computeRestarts <- base::computeRestarts
[13:36:24.376]                           grepl <- base::grepl
[13:36:24.376]                           restarts <- computeRestarts(cond)
[13:36:24.376]                           for (restart in restarts) {
[13:36:24.376]                             name <- restart$name
[13:36:24.376]                             if (is.null(name)) 
[13:36:24.376]                               next
[13:36:24.376]                             if (!grepl(pattern, name)) 
[13:36:24.376]                               next
[13:36:24.376]                             invokeRestart(restart)
[13:36:24.376]                             muffled <- TRUE
[13:36:24.376]                             break
[13:36:24.376]                           }
[13:36:24.376]                         }
[13:36:24.376]                       }
[13:36:24.376]                       invisible(muffled)
[13:36:24.376]                     }
[13:36:24.376]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.376]                   }
[13:36:24.376]                 }
[13:36:24.376]                 else {
[13:36:24.376]                   if (TRUE) {
[13:36:24.376]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.376]                     {
[13:36:24.376]                       inherits <- base::inherits
[13:36:24.376]                       invokeRestart <- base::invokeRestart
[13:36:24.376]                       is.null <- base::is.null
[13:36:24.376]                       muffled <- FALSE
[13:36:24.376]                       if (inherits(cond, "message")) {
[13:36:24.376]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.376]                         if (muffled) 
[13:36:24.376]                           invokeRestart("muffleMessage")
[13:36:24.376]                       }
[13:36:24.376]                       else if (inherits(cond, "warning")) {
[13:36:24.376]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.376]                         if (muffled) 
[13:36:24.376]                           invokeRestart("muffleWarning")
[13:36:24.376]                       }
[13:36:24.376]                       else if (inherits(cond, "condition")) {
[13:36:24.376]                         if (!is.null(pattern)) {
[13:36:24.376]                           computeRestarts <- base::computeRestarts
[13:36:24.376]                           grepl <- base::grepl
[13:36:24.376]                           restarts <- computeRestarts(cond)
[13:36:24.376]                           for (restart in restarts) {
[13:36:24.376]                             name <- restart$name
[13:36:24.376]                             if (is.null(name)) 
[13:36:24.376]                               next
[13:36:24.376]                             if (!grepl(pattern, name)) 
[13:36:24.376]                               next
[13:36:24.376]                             invokeRestart(restart)
[13:36:24.376]                             muffled <- TRUE
[13:36:24.376]                             break
[13:36:24.376]                           }
[13:36:24.376]                         }
[13:36:24.376]                       }
[13:36:24.376]                       invisible(muffled)
[13:36:24.376]                     }
[13:36:24.376]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.376]                   }
[13:36:24.376]                 }
[13:36:24.376]             }
[13:36:24.376]         }))
[13:36:24.376]     }, error = function(ex) {
[13:36:24.376]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:24.376]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.376]                 ...future.rng), started = ...future.startTime, 
[13:36:24.376]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:24.376]             version = "1.8"), class = "FutureResult")
[13:36:24.376]     }, finally = {
[13:36:24.376]         if (!identical(...future.workdir, getwd())) 
[13:36:24.376]             setwd(...future.workdir)
[13:36:24.376]         {
[13:36:24.376]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:24.376]                 ...future.oldOptions$nwarnings <- NULL
[13:36:24.376]             }
[13:36:24.376]             base::options(...future.oldOptions)
[13:36:24.376]             if (.Platform$OS.type == "windows") {
[13:36:24.376]                 old_names <- names(...future.oldEnvVars)
[13:36:24.376]                 envs <- base::Sys.getenv()
[13:36:24.376]                 names <- names(envs)
[13:36:24.376]                 common <- intersect(names, old_names)
[13:36:24.376]                 added <- setdiff(names, old_names)
[13:36:24.376]                 removed <- setdiff(old_names, names)
[13:36:24.376]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:24.376]                   envs[common]]
[13:36:24.376]                 NAMES <- toupper(changed)
[13:36:24.376]                 args <- list()
[13:36:24.376]                 for (kk in seq_along(NAMES)) {
[13:36:24.376]                   name <- changed[[kk]]
[13:36:24.376]                   NAME <- NAMES[[kk]]
[13:36:24.376]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.376]                     next
[13:36:24.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.376]                 }
[13:36:24.376]                 NAMES <- toupper(added)
[13:36:24.376]                 for (kk in seq_along(NAMES)) {
[13:36:24.376]                   name <- added[[kk]]
[13:36:24.376]                   NAME <- NAMES[[kk]]
[13:36:24.376]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.376]                     next
[13:36:24.376]                   args[[name]] <- ""
[13:36:24.376]                 }
[13:36:24.376]                 NAMES <- toupper(removed)
[13:36:24.376]                 for (kk in seq_along(NAMES)) {
[13:36:24.376]                   name <- removed[[kk]]
[13:36:24.376]                   NAME <- NAMES[[kk]]
[13:36:24.376]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.376]                     next
[13:36:24.376]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.376]                 }
[13:36:24.376]                 if (length(args) > 0) 
[13:36:24.376]                   base::do.call(base::Sys.setenv, args = args)
[13:36:24.376]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:24.376]             }
[13:36:24.376]             else {
[13:36:24.376]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:24.376]             }
[13:36:24.376]             {
[13:36:24.376]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:24.376]                   0L) {
[13:36:24.376]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:24.376]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:24.376]                   base::options(opts)
[13:36:24.376]                 }
[13:36:24.376]                 {
[13:36:24.376]                   {
[13:36:24.376]                     NULL
[13:36:24.376]                     RNGkind("Mersenne-Twister")
[13:36:24.376]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:24.376]                       inherits = FALSE)
[13:36:24.376]                   }
[13:36:24.376]                   options(future.plan = NULL)
[13:36:24.376]                   if (is.na(NA_character_)) 
[13:36:24.376]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.376]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:24.376]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:24.376]                     .init = FALSE)
[13:36:24.376]                 }
[13:36:24.376]             }
[13:36:24.376]         }
[13:36:24.376]     })
[13:36:24.376]     if (TRUE) {
[13:36:24.376]         base::sink(type = "output", split = FALSE)
[13:36:24.376]         if (TRUE) {
[13:36:24.376]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:24.376]         }
[13:36:24.376]         else {
[13:36:24.376]             ...future.result["stdout"] <- base::list(NULL)
[13:36:24.376]         }
[13:36:24.376]         base::close(...future.stdout)
[13:36:24.376]         ...future.stdout <- NULL
[13:36:24.376]     }
[13:36:24.376]     ...future.result$conditions <- ...future.conditions
[13:36:24.376]     ...future.result$finished <- base::Sys.time()
[13:36:24.376]     ...future.result
[13:36:24.376] }
[13:36:24.378] plan(): Setting new future strategy stack:
[13:36:24.378] List of future strategies:
[13:36:24.378] 1. sequential:
[13:36:24.378]    - args: function (..., envir = parent.frame())
[13:36:24.378]    - tweaked: FALSE
[13:36:24.378]    - call: NULL
[13:36:24.378] plan(): nbrOfWorkers() = 1
[13:36:24.379] plan(): Setting new future strategy stack:
[13:36:24.379] List of future strategies:
[13:36:24.379] 1. sequential:
[13:36:24.379]    - args: function (..., envir = parent.frame())
[13:36:24.379]    - tweaked: FALSE
[13:36:24.379]    - call: future::plan("sequential")
[13:36:24.380] plan(): nbrOfWorkers() = 1
[13:36:24.380] SequentialFuture started (and completed)
[13:36:24.380] - Launch lazy future ... done
[13:36:24.380] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[13:36:24.380] getGlobalsAndPackages() ...
[13:36:24.380] Searching for globals...
[13:36:24.381] - globals found: [1] ‘{’
[13:36:24.381] Searching for globals ... DONE
[13:36:24.381] Resolving globals: FALSE
[13:36:24.381] 
[13:36:24.382] 
[13:36:24.382] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[13:36:24.382] resolved() for ‘Future’ ...
[13:36:24.382] - state: ‘created’
[13:36:24.382] - run: TRUE
[13:36:24.382] - run() ...
[13:36:24.382] run() for ‘Future’ ...
[13:36:24.382] - state: ‘created’
[13:36:24.382] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:24.383] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:24.383] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:24.383]   - Field: ‘label’
[13:36:24.383]   - Field: ‘local’
[13:36:24.383]   - Field: ‘owner’
[13:36:24.383]   - Field: ‘envir’
[13:36:24.383]   - Field: ‘packages’
[13:36:24.383]   - Field: ‘gc’
[13:36:24.383]   - Field: ‘conditions’
[13:36:24.384]   - Field: ‘expr’
[13:36:24.384]   - Field: ‘uuid’
[13:36:24.384]   - Field: ‘seed’
[13:36:24.384]   - Field: ‘version’
[13:36:24.384]   - Field: ‘result’
[13:36:24.384]   - Field: ‘asynchronous’
[13:36:24.384]   - Field: ‘calls’
[13:36:24.384]   - Field: ‘globals’
[13:36:24.384]   - Field: ‘stdout’
[13:36:24.384]   - Field: ‘earlySignal’
[13:36:24.384]   - Field: ‘lazy’
[13:36:24.384]   - Field: ‘state’
[13:36:24.385] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:24.385] - Launch lazy future ...
[13:36:24.385] Packages needed by the future expression (n = 0): <none>
[13:36:24.385] Packages needed by future strategies (n = 0): <none>
[13:36:24.385] {
[13:36:24.385]     {
[13:36:24.385]         {
[13:36:24.385]             ...future.startTime <- base::Sys.time()
[13:36:24.385]             {
[13:36:24.385]                 {
[13:36:24.385]                   {
[13:36:24.385]                     base::local({
[13:36:24.385]                       has_future <- base::requireNamespace("future", 
[13:36:24.385]                         quietly = TRUE)
[13:36:24.385]                       if (has_future) {
[13:36:24.385]                         ns <- base::getNamespace("future")
[13:36:24.385]                         version <- ns[[".package"]][["version"]]
[13:36:24.385]                         if (is.null(version)) 
[13:36:24.385]                           version <- utils::packageVersion("future")
[13:36:24.385]                       }
[13:36:24.385]                       else {
[13:36:24.385]                         version <- NULL
[13:36:24.385]                       }
[13:36:24.385]                       if (!has_future || version < "1.8.0") {
[13:36:24.385]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:24.385]                           "", base::R.version$version.string), 
[13:36:24.385]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:24.385]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:24.385]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:24.385]                             "release", "version")], collapse = " "), 
[13:36:24.385]                           hostname = base::Sys.info()[["nodename"]])
[13:36:24.385]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:24.385]                           info)
[13:36:24.385]                         info <- base::paste(info, collapse = "; ")
[13:36:24.385]                         if (!has_future) {
[13:36:24.385]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:24.385]                             info)
[13:36:24.385]                         }
[13:36:24.385]                         else {
[13:36:24.385]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:24.385]                             info, version)
[13:36:24.385]                         }
[13:36:24.385]                         base::stop(msg)
[13:36:24.385]                       }
[13:36:24.385]                     })
[13:36:24.385]                   }
[13:36:24.385]                   ...future.strategy.old <- future::plan("list")
[13:36:24.385]                   options(future.plan = NULL)
[13:36:24.385]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.385]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:24.385]                 }
[13:36:24.385]                 ...future.workdir <- getwd()
[13:36:24.385]             }
[13:36:24.385]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:24.385]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:24.385]         }
[13:36:24.385]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:24.385]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:24.385]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:24.385]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:24.385]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:24.385]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:24.385]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:24.385]             base::names(...future.oldOptions))
[13:36:24.385]     }
[13:36:24.385]     if (FALSE) {
[13:36:24.385]     }
[13:36:24.385]     else {
[13:36:24.385]         if (TRUE) {
[13:36:24.385]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:24.385]                 open = "w")
[13:36:24.385]         }
[13:36:24.385]         else {
[13:36:24.385]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:24.385]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:24.385]         }
[13:36:24.385]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:24.385]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:24.385]             base::sink(type = "output", split = FALSE)
[13:36:24.385]             base::close(...future.stdout)
[13:36:24.385]         }, add = TRUE)
[13:36:24.385]     }
[13:36:24.385]     ...future.frame <- base::sys.nframe()
[13:36:24.385]     ...future.conditions <- base::list()
[13:36:24.385]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:24.385]     if (FALSE) {
[13:36:24.385]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:24.385]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:24.385]     }
[13:36:24.385]     ...future.result <- base::tryCatch({
[13:36:24.385]         base::withCallingHandlers({
[13:36:24.385]             ...future.value <- base::withVisible(base::local({
[13:36:24.385]                 42L
[13:36:24.385]             }))
[13:36:24.385]             future::FutureResult(value = ...future.value$value, 
[13:36:24.385]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.385]                   ...future.rng), globalenv = if (FALSE) 
[13:36:24.385]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:24.385]                     ...future.globalenv.names))
[13:36:24.385]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:24.385]         }, condition = base::local({
[13:36:24.385]             c <- base::c
[13:36:24.385]             inherits <- base::inherits
[13:36:24.385]             invokeRestart <- base::invokeRestart
[13:36:24.385]             length <- base::length
[13:36:24.385]             list <- base::list
[13:36:24.385]             seq.int <- base::seq.int
[13:36:24.385]             signalCondition <- base::signalCondition
[13:36:24.385]             sys.calls <- base::sys.calls
[13:36:24.385]             `[[` <- base::`[[`
[13:36:24.385]             `+` <- base::`+`
[13:36:24.385]             `<<-` <- base::`<<-`
[13:36:24.385]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:24.385]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:24.385]                   3L)]
[13:36:24.385]             }
[13:36:24.385]             function(cond) {
[13:36:24.385]                 is_error <- inherits(cond, "error")
[13:36:24.385]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:24.385]                   NULL)
[13:36:24.385]                 if (is_error) {
[13:36:24.385]                   sessionInformation <- function() {
[13:36:24.385]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:24.385]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:24.385]                       search = base::search(), system = base::Sys.info())
[13:36:24.385]                   }
[13:36:24.385]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.385]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:24.385]                     cond$call), session = sessionInformation(), 
[13:36:24.385]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:24.385]                   signalCondition(cond)
[13:36:24.385]                 }
[13:36:24.385]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:24.385]                 "immediateCondition"))) {
[13:36:24.385]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:24.385]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.385]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:24.385]                   if (TRUE && !signal) {
[13:36:24.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.385]                     {
[13:36:24.385]                       inherits <- base::inherits
[13:36:24.385]                       invokeRestart <- base::invokeRestart
[13:36:24.385]                       is.null <- base::is.null
[13:36:24.385]                       muffled <- FALSE
[13:36:24.385]                       if (inherits(cond, "message")) {
[13:36:24.385]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.385]                         if (muffled) 
[13:36:24.385]                           invokeRestart("muffleMessage")
[13:36:24.385]                       }
[13:36:24.385]                       else if (inherits(cond, "warning")) {
[13:36:24.385]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.385]                         if (muffled) 
[13:36:24.385]                           invokeRestart("muffleWarning")
[13:36:24.385]                       }
[13:36:24.385]                       else if (inherits(cond, "condition")) {
[13:36:24.385]                         if (!is.null(pattern)) {
[13:36:24.385]                           computeRestarts <- base::computeRestarts
[13:36:24.385]                           grepl <- base::grepl
[13:36:24.385]                           restarts <- computeRestarts(cond)
[13:36:24.385]                           for (restart in restarts) {
[13:36:24.385]                             name <- restart$name
[13:36:24.385]                             if (is.null(name)) 
[13:36:24.385]                               next
[13:36:24.385]                             if (!grepl(pattern, name)) 
[13:36:24.385]                               next
[13:36:24.385]                             invokeRestart(restart)
[13:36:24.385]                             muffled <- TRUE
[13:36:24.385]                             break
[13:36:24.385]                           }
[13:36:24.385]                         }
[13:36:24.385]                       }
[13:36:24.385]                       invisible(muffled)
[13:36:24.385]                     }
[13:36:24.385]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.385]                   }
[13:36:24.385]                 }
[13:36:24.385]                 else {
[13:36:24.385]                   if (TRUE) {
[13:36:24.385]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.385]                     {
[13:36:24.385]                       inherits <- base::inherits
[13:36:24.385]                       invokeRestart <- base::invokeRestart
[13:36:24.385]                       is.null <- base::is.null
[13:36:24.385]                       muffled <- FALSE
[13:36:24.385]                       if (inherits(cond, "message")) {
[13:36:24.385]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.385]                         if (muffled) 
[13:36:24.385]                           invokeRestart("muffleMessage")
[13:36:24.385]                       }
[13:36:24.385]                       else if (inherits(cond, "warning")) {
[13:36:24.385]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.385]                         if (muffled) 
[13:36:24.385]                           invokeRestart("muffleWarning")
[13:36:24.385]                       }
[13:36:24.385]                       else if (inherits(cond, "condition")) {
[13:36:24.385]                         if (!is.null(pattern)) {
[13:36:24.385]                           computeRestarts <- base::computeRestarts
[13:36:24.385]                           grepl <- base::grepl
[13:36:24.385]                           restarts <- computeRestarts(cond)
[13:36:24.385]                           for (restart in restarts) {
[13:36:24.385]                             name <- restart$name
[13:36:24.385]                             if (is.null(name)) 
[13:36:24.385]                               next
[13:36:24.385]                             if (!grepl(pattern, name)) 
[13:36:24.385]                               next
[13:36:24.385]                             invokeRestart(restart)
[13:36:24.385]                             muffled <- TRUE
[13:36:24.385]                             break
[13:36:24.385]                           }
[13:36:24.385]                         }
[13:36:24.385]                       }
[13:36:24.385]                       invisible(muffled)
[13:36:24.385]                     }
[13:36:24.385]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.385]                   }
[13:36:24.385]                 }
[13:36:24.385]             }
[13:36:24.385]         }))
[13:36:24.385]     }, error = function(ex) {
[13:36:24.385]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:24.385]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.385]                 ...future.rng), started = ...future.startTime, 
[13:36:24.385]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:24.385]             version = "1.8"), class = "FutureResult")
[13:36:24.385]     }, finally = {
[13:36:24.385]         if (!identical(...future.workdir, getwd())) 
[13:36:24.385]             setwd(...future.workdir)
[13:36:24.385]         {
[13:36:24.385]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:24.385]                 ...future.oldOptions$nwarnings <- NULL
[13:36:24.385]             }
[13:36:24.385]             base::options(...future.oldOptions)
[13:36:24.385]             if (.Platform$OS.type == "windows") {
[13:36:24.385]                 old_names <- names(...future.oldEnvVars)
[13:36:24.385]                 envs <- base::Sys.getenv()
[13:36:24.385]                 names <- names(envs)
[13:36:24.385]                 common <- intersect(names, old_names)
[13:36:24.385]                 added <- setdiff(names, old_names)
[13:36:24.385]                 removed <- setdiff(old_names, names)
[13:36:24.385]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:24.385]                   envs[common]]
[13:36:24.385]                 NAMES <- toupper(changed)
[13:36:24.385]                 args <- list()
[13:36:24.385]                 for (kk in seq_along(NAMES)) {
[13:36:24.385]                   name <- changed[[kk]]
[13:36:24.385]                   NAME <- NAMES[[kk]]
[13:36:24.385]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.385]                     next
[13:36:24.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.385]                 }
[13:36:24.385]                 NAMES <- toupper(added)
[13:36:24.385]                 for (kk in seq_along(NAMES)) {
[13:36:24.385]                   name <- added[[kk]]
[13:36:24.385]                   NAME <- NAMES[[kk]]
[13:36:24.385]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.385]                     next
[13:36:24.385]                   args[[name]] <- ""
[13:36:24.385]                 }
[13:36:24.385]                 NAMES <- toupper(removed)
[13:36:24.385]                 for (kk in seq_along(NAMES)) {
[13:36:24.385]                   name <- removed[[kk]]
[13:36:24.385]                   NAME <- NAMES[[kk]]
[13:36:24.385]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.385]                     next
[13:36:24.385]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.385]                 }
[13:36:24.385]                 if (length(args) > 0) 
[13:36:24.385]                   base::do.call(base::Sys.setenv, args = args)
[13:36:24.385]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:24.385]             }
[13:36:24.385]             else {
[13:36:24.385]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:24.385]             }
[13:36:24.385]             {
[13:36:24.385]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:24.385]                   0L) {
[13:36:24.385]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:24.385]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:24.385]                   base::options(opts)
[13:36:24.385]                 }
[13:36:24.385]                 {
[13:36:24.385]                   {
[13:36:24.385]                     NULL
[13:36:24.385]                     RNGkind("Mersenne-Twister")
[13:36:24.385]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:24.385]                       inherits = FALSE)
[13:36:24.385]                   }
[13:36:24.385]                   options(future.plan = NULL)
[13:36:24.385]                   if (is.na(NA_character_)) 
[13:36:24.385]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.385]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:24.385]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:24.385]                     .init = FALSE)
[13:36:24.385]                 }
[13:36:24.385]             }
[13:36:24.385]         }
[13:36:24.385]     })
[13:36:24.385]     if (TRUE) {
[13:36:24.385]         base::sink(type = "output", split = FALSE)
[13:36:24.385]         if (TRUE) {
[13:36:24.385]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:24.385]         }
[13:36:24.385]         else {
[13:36:24.385]             ...future.result["stdout"] <- base::list(NULL)
[13:36:24.385]         }
[13:36:24.385]         base::close(...future.stdout)
[13:36:24.385]         ...future.stdout <- NULL
[13:36:24.385]     }
[13:36:24.385]     ...future.result$conditions <- ...future.conditions
[13:36:24.385]     ...future.result$finished <- base::Sys.time()
[13:36:24.385]     ...future.result
[13:36:24.385] }
[13:36:24.387] plan(): Setting new future strategy stack:
[13:36:24.387] List of future strategies:
[13:36:24.387] 1. sequential:
[13:36:24.387]    - args: function (..., envir = parent.frame())
[13:36:24.387]    - tweaked: FALSE
[13:36:24.387]    - call: NULL
[13:36:24.387] plan(): nbrOfWorkers() = 1
[13:36:24.388] plan(): Setting new future strategy stack:
[13:36:24.388] List of future strategies:
[13:36:24.388] 1. sequential:
[13:36:24.388]    - args: function (..., envir = parent.frame())
[13:36:24.388]    - tweaked: FALSE
[13:36:24.388]    - call: future::plan("sequential")
[13:36:24.389] plan(): nbrOfWorkers() = 1
[13:36:24.389] SequentialFuture started (and completed)
[13:36:24.389] - Launch lazy future ... done
[13:36:24.389] run() for ‘SequentialFuture’ ... done
[13:36:24.389] - run() ... done
[13:36:24.389] - resolved() ...
[13:36:24.389] resolved() for ‘SequentialFuture’ ...
[13:36:24.389] - state: ‘finished’
[13:36:24.389] - run: TRUE
[13:36:24.389] - result: ‘FutureResult’
[13:36:24.390] resolved() for ‘SequentialFuture’ ... done
[13:36:24.390] - resolved: TRUE
[13:36:24.390] - resolved() ... done
[13:36:24.390] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[13:36:24.390] getGlobalsAndPackages() ...
[13:36:24.390] Searching for globals...
[13:36:24.393] 
[13:36:24.393] Searching for globals ... DONE
[13:36:24.393] - globals: [0] <none>
[13:36:24.393] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e2fccc75-23ad-d4f3-ad1f-f2a430e62aa6
Class: ‘Future’, ‘environment’
> y <- value(f)
[13:36:24.393] run() for ‘Future’ ...
[13:36:24.394] - state: ‘created’
[13:36:24.394] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:24.394] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:24.394] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:24.394]   - Field: ‘label’
[13:36:24.394]   - Field: ‘local’
[13:36:24.394]   - Field: ‘owner’
[13:36:24.394]   - Field: ‘envir’
[13:36:24.395]   - Field: ‘packages’
[13:36:24.395]   - Field: ‘gc’
[13:36:24.395]   - Field: ‘conditions’
[13:36:24.395]   - Field: ‘expr’
[13:36:24.395]   - Field: ‘uuid’
[13:36:24.395]   - Field: ‘seed’
[13:36:24.395]   - Field: ‘version’
[13:36:24.395]   - Field: ‘result’
[13:36:24.395]   - Field: ‘asynchronous’
[13:36:24.395]   - Field: ‘calls’
[13:36:24.395]   - Field: ‘globals’
[13:36:24.395]   - Field: ‘stdout’
[13:36:24.396]   - Field: ‘earlySignal’
[13:36:24.396]   - Field: ‘lazy’
[13:36:24.396]   - Field: ‘state’
[13:36:24.396] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:24.396] - Launch lazy future ...
[13:36:24.396] Packages needed by the future expression (n = 0): <none>
[13:36:24.396] Packages needed by future strategies (n = 0): <none>
[13:36:24.397] {
[13:36:24.397]     {
[13:36:24.397]         {
[13:36:24.397]             ...future.startTime <- base::Sys.time()
[13:36:24.397]             {
[13:36:24.397]                 {
[13:36:24.397]                   {
[13:36:24.397]                     base::local({
[13:36:24.397]                       has_future <- base::requireNamespace("future", 
[13:36:24.397]                         quietly = TRUE)
[13:36:24.397]                       if (has_future) {
[13:36:24.397]                         ns <- base::getNamespace("future")
[13:36:24.397]                         version <- ns[[".package"]][["version"]]
[13:36:24.397]                         if (is.null(version)) 
[13:36:24.397]                           version <- utils::packageVersion("future")
[13:36:24.397]                       }
[13:36:24.397]                       else {
[13:36:24.397]                         version <- NULL
[13:36:24.397]                       }
[13:36:24.397]                       if (!has_future || version < "1.8.0") {
[13:36:24.397]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:24.397]                           "", base::R.version$version.string), 
[13:36:24.397]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:24.397]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:24.397]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:24.397]                             "release", "version")], collapse = " "), 
[13:36:24.397]                           hostname = base::Sys.info()[["nodename"]])
[13:36:24.397]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:24.397]                           info)
[13:36:24.397]                         info <- base::paste(info, collapse = "; ")
[13:36:24.397]                         if (!has_future) {
[13:36:24.397]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:24.397]                             info)
[13:36:24.397]                         }
[13:36:24.397]                         else {
[13:36:24.397]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:24.397]                             info, version)
[13:36:24.397]                         }
[13:36:24.397]                         base::stop(msg)
[13:36:24.397]                       }
[13:36:24.397]                     })
[13:36:24.397]                   }
[13:36:24.397]                   ...future.strategy.old <- future::plan("list")
[13:36:24.397]                   options(future.plan = NULL)
[13:36:24.397]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.397]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:24.397]                 }
[13:36:24.397]                 ...future.workdir <- getwd()
[13:36:24.397]             }
[13:36:24.397]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:24.397]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:24.397]         }
[13:36:24.397]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:24.397]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:24.397]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:24.397]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:24.397]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:24.397]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:24.397]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:24.397]             base::names(...future.oldOptions))
[13:36:24.397]     }
[13:36:24.397]     if (FALSE) {
[13:36:24.397]     }
[13:36:24.397]     else {
[13:36:24.397]         if (TRUE) {
[13:36:24.397]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:24.397]                 open = "w")
[13:36:24.397]         }
[13:36:24.397]         else {
[13:36:24.397]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:24.397]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:24.397]         }
[13:36:24.397]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:24.397]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:24.397]             base::sink(type = "output", split = FALSE)
[13:36:24.397]             base::close(...future.stdout)
[13:36:24.397]         }, add = TRUE)
[13:36:24.397]     }
[13:36:24.397]     ...future.frame <- base::sys.nframe()
[13:36:24.397]     ...future.conditions <- base::list()
[13:36:24.397]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:24.397]     if (FALSE) {
[13:36:24.397]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:24.397]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:24.397]     }
[13:36:24.397]     ...future.result <- base::tryCatch({
[13:36:24.397]         base::withCallingHandlers({
[13:36:24.397]             ...future.value <- base::withVisible(base::local(42L))
[13:36:24.397]             future::FutureResult(value = ...future.value$value, 
[13:36:24.397]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.397]                   ...future.rng), globalenv = if (FALSE) 
[13:36:24.397]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:24.397]                     ...future.globalenv.names))
[13:36:24.397]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:24.397]         }, condition = base::local({
[13:36:24.397]             c <- base::c
[13:36:24.397]             inherits <- base::inherits
[13:36:24.397]             invokeRestart <- base::invokeRestart
[13:36:24.397]             length <- base::length
[13:36:24.397]             list <- base::list
[13:36:24.397]             seq.int <- base::seq.int
[13:36:24.397]             signalCondition <- base::signalCondition
[13:36:24.397]             sys.calls <- base::sys.calls
[13:36:24.397]             `[[` <- base::`[[`
[13:36:24.397]             `+` <- base::`+`
[13:36:24.397]             `<<-` <- base::`<<-`
[13:36:24.397]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:24.397]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:24.397]                   3L)]
[13:36:24.397]             }
[13:36:24.397]             function(cond) {
[13:36:24.397]                 is_error <- inherits(cond, "error")
[13:36:24.397]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:24.397]                   NULL)
[13:36:24.397]                 if (is_error) {
[13:36:24.397]                   sessionInformation <- function() {
[13:36:24.397]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:24.397]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:24.397]                       search = base::search(), system = base::Sys.info())
[13:36:24.397]                   }
[13:36:24.397]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.397]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:24.397]                     cond$call), session = sessionInformation(), 
[13:36:24.397]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:24.397]                   signalCondition(cond)
[13:36:24.397]                 }
[13:36:24.397]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:24.397]                 "immediateCondition"))) {
[13:36:24.397]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:24.397]                   ...future.conditions[[length(...future.conditions) + 
[13:36:24.397]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:24.397]                   if (TRUE && !signal) {
[13:36:24.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.397]                     {
[13:36:24.397]                       inherits <- base::inherits
[13:36:24.397]                       invokeRestart <- base::invokeRestart
[13:36:24.397]                       is.null <- base::is.null
[13:36:24.397]                       muffled <- FALSE
[13:36:24.397]                       if (inherits(cond, "message")) {
[13:36:24.397]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.397]                         if (muffled) 
[13:36:24.397]                           invokeRestart("muffleMessage")
[13:36:24.397]                       }
[13:36:24.397]                       else if (inherits(cond, "warning")) {
[13:36:24.397]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.397]                         if (muffled) 
[13:36:24.397]                           invokeRestart("muffleWarning")
[13:36:24.397]                       }
[13:36:24.397]                       else if (inherits(cond, "condition")) {
[13:36:24.397]                         if (!is.null(pattern)) {
[13:36:24.397]                           computeRestarts <- base::computeRestarts
[13:36:24.397]                           grepl <- base::grepl
[13:36:24.397]                           restarts <- computeRestarts(cond)
[13:36:24.397]                           for (restart in restarts) {
[13:36:24.397]                             name <- restart$name
[13:36:24.397]                             if (is.null(name)) 
[13:36:24.397]                               next
[13:36:24.397]                             if (!grepl(pattern, name)) 
[13:36:24.397]                               next
[13:36:24.397]                             invokeRestart(restart)
[13:36:24.397]                             muffled <- TRUE
[13:36:24.397]                             break
[13:36:24.397]                           }
[13:36:24.397]                         }
[13:36:24.397]                       }
[13:36:24.397]                       invisible(muffled)
[13:36:24.397]                     }
[13:36:24.397]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.397]                   }
[13:36:24.397]                 }
[13:36:24.397]                 else {
[13:36:24.397]                   if (TRUE) {
[13:36:24.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:24.397]                     {
[13:36:24.397]                       inherits <- base::inherits
[13:36:24.397]                       invokeRestart <- base::invokeRestart
[13:36:24.397]                       is.null <- base::is.null
[13:36:24.397]                       muffled <- FALSE
[13:36:24.397]                       if (inherits(cond, "message")) {
[13:36:24.397]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:24.397]                         if (muffled) 
[13:36:24.397]                           invokeRestart("muffleMessage")
[13:36:24.397]                       }
[13:36:24.397]                       else if (inherits(cond, "warning")) {
[13:36:24.397]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:24.397]                         if (muffled) 
[13:36:24.397]                           invokeRestart("muffleWarning")
[13:36:24.397]                       }
[13:36:24.397]                       else if (inherits(cond, "condition")) {
[13:36:24.397]                         if (!is.null(pattern)) {
[13:36:24.397]                           computeRestarts <- base::computeRestarts
[13:36:24.397]                           grepl <- base::grepl
[13:36:24.397]                           restarts <- computeRestarts(cond)
[13:36:24.397]                           for (restart in restarts) {
[13:36:24.397]                             name <- restart$name
[13:36:24.397]                             if (is.null(name)) 
[13:36:24.397]                               next
[13:36:24.397]                             if (!grepl(pattern, name)) 
[13:36:24.397]                               next
[13:36:24.397]                             invokeRestart(restart)
[13:36:24.397]                             muffled <- TRUE
[13:36:24.397]                             break
[13:36:24.397]                           }
[13:36:24.397]                         }
[13:36:24.397]                       }
[13:36:24.397]                       invisible(muffled)
[13:36:24.397]                     }
[13:36:24.397]                     muffleCondition(cond, pattern = "^muffle")
[13:36:24.397]                   }
[13:36:24.397]                 }
[13:36:24.397]             }
[13:36:24.397]         }))
[13:36:24.397]     }, error = function(ex) {
[13:36:24.397]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:24.397]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:24.397]                 ...future.rng), started = ...future.startTime, 
[13:36:24.397]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:24.397]             version = "1.8"), class = "FutureResult")
[13:36:24.397]     }, finally = {
[13:36:24.397]         if (!identical(...future.workdir, getwd())) 
[13:36:24.397]             setwd(...future.workdir)
[13:36:24.397]         {
[13:36:24.397]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:24.397]                 ...future.oldOptions$nwarnings <- NULL
[13:36:24.397]             }
[13:36:24.397]             base::options(...future.oldOptions)
[13:36:24.397]             if (.Platform$OS.type == "windows") {
[13:36:24.397]                 old_names <- names(...future.oldEnvVars)
[13:36:24.397]                 envs <- base::Sys.getenv()
[13:36:24.397]                 names <- names(envs)
[13:36:24.397]                 common <- intersect(names, old_names)
[13:36:24.397]                 added <- setdiff(names, old_names)
[13:36:24.397]                 removed <- setdiff(old_names, names)
[13:36:24.397]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:24.397]                   envs[common]]
[13:36:24.397]                 NAMES <- toupper(changed)
[13:36:24.397]                 args <- list()
[13:36:24.397]                 for (kk in seq_along(NAMES)) {
[13:36:24.397]                   name <- changed[[kk]]
[13:36:24.397]                   NAME <- NAMES[[kk]]
[13:36:24.397]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.397]                     next
[13:36:24.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.397]                 }
[13:36:24.397]                 NAMES <- toupper(added)
[13:36:24.397]                 for (kk in seq_along(NAMES)) {
[13:36:24.397]                   name <- added[[kk]]
[13:36:24.397]                   NAME <- NAMES[[kk]]
[13:36:24.397]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.397]                     next
[13:36:24.397]                   args[[name]] <- ""
[13:36:24.397]                 }
[13:36:24.397]                 NAMES <- toupper(removed)
[13:36:24.397]                 for (kk in seq_along(NAMES)) {
[13:36:24.397]                   name <- removed[[kk]]
[13:36:24.397]                   NAME <- NAMES[[kk]]
[13:36:24.397]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:24.397]                     next
[13:36:24.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:24.397]                 }
[13:36:24.397]                 if (length(args) > 0) 
[13:36:24.397]                   base::do.call(base::Sys.setenv, args = args)
[13:36:24.397]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:24.397]             }
[13:36:24.397]             else {
[13:36:24.397]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:24.397]             }
[13:36:24.397]             {
[13:36:24.397]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:24.397]                   0L) {
[13:36:24.397]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:24.397]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:24.397]                   base::options(opts)
[13:36:24.397]                 }
[13:36:24.397]                 {
[13:36:24.397]                   {
[13:36:24.397]                     NULL
[13:36:24.397]                     RNGkind("Mersenne-Twister")
[13:36:24.397]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:24.397]                       inherits = FALSE)
[13:36:24.397]                   }
[13:36:24.397]                   options(future.plan = NULL)
[13:36:24.397]                   if (is.na(NA_character_)) 
[13:36:24.397]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:24.397]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:24.397]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:24.397]                     .init = FALSE)
[13:36:24.397]                 }
[13:36:24.397]             }
[13:36:24.397]         }
[13:36:24.397]     })
[13:36:24.397]     if (TRUE) {
[13:36:24.397]         base::sink(type = "output", split = FALSE)
[13:36:24.397]         if (TRUE) {
[13:36:24.397]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:24.397]         }
[13:36:24.397]         else {
[13:36:24.397]             ...future.result["stdout"] <- base::list(NULL)
[13:36:24.397]         }
[13:36:24.397]         base::close(...future.stdout)
[13:36:24.397]         ...future.stdout <- NULL
[13:36:24.397]     }
[13:36:24.397]     ...future.result$conditions <- ...future.conditions
[13:36:24.397]     ...future.result$finished <- base::Sys.time()
[13:36:24.397]     ...future.result
[13:36:24.397] }
[13:36:24.398] plan(): Setting new future strategy stack:
[13:36:24.398] List of future strategies:
[13:36:24.398] 1. sequential:
[13:36:24.398]    - args: function (..., envir = parent.frame())
[13:36:24.398]    - tweaked: FALSE
[13:36:24.398]    - call: NULL
[13:36:24.399] plan(): nbrOfWorkers() = 1
[13:36:24.399] plan(): Setting new future strategy stack:
[13:36:24.399] List of future strategies:
[13:36:24.399] 1. sequential:
[13:36:24.399]    - args: function (..., envir = parent.frame())
[13:36:24.399]    - tweaked: FALSE
[13:36:24.399]    - call: future::plan("sequential")
[13:36:24.400] plan(): nbrOfWorkers() = 1
[13:36:24.400] SequentialFuture started (and completed)
[13:36:24.400] - Launch lazy future ... done
[13:36:24.400] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[13:36:24.401] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[13:36:24.401] plan(): Setting new future strategy stack:
[13:36:24.401] List of future strategies:
[13:36:24.401] 1. FutureStrategy:
[13:36:24.401]    - args: function (..., envir = parent.frame())
[13:36:24.401]    - tweaked: FALSE
[13:36:24.401]    - call: future::plan(oplan)
[13:36:24.412] plan(): nbrOfWorkers() = 1
> 
