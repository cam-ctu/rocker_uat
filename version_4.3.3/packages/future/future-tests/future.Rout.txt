
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:31.608] plan(): Setting new future strategy stack:
[16:20:31.609] List of future strategies:
[16:20:31.609] 1. sequential:
[16:20:31.609]    - args: function (..., envir = parent.frame())
[16:20:31.609]    - tweaked: FALSE
[16:20:31.609]    - call: future::plan("sequential")
[16:20:31.623] plan(): nbrOfWorkers() = 1
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[16:20:31.634] getGlobalsAndPackages() ...
[16:20:31.634] Searching for globals...
[16:20:31.637] - globals found: [1] ‘{’
[16:20:31.637] Searching for globals ... DONE
[16:20:31.637] Resolving globals: FALSE
[16:20:31.638] 
[16:20:31.638] 
[16:20:31.638] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[16:20:31.639] resolved() for ‘Future’ ...
[16:20:31.639] - state: ‘created’
[16:20:31.639] - run: TRUE
[16:20:31.639] - run() ...
[16:20:31.639] run() for ‘Future’ ...
[16:20:31.639] - state: ‘created’
[16:20:31.640] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:31.640] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:31.640] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:31.640]   - Field: ‘label’
[16:20:31.640]   - Field: ‘local’
[16:20:31.640]   - Field: ‘owner’
[16:20:31.641]   - Field: ‘envir’
[16:20:31.641]   - Field: ‘packages’
[16:20:31.641]   - Field: ‘gc’
[16:20:31.641]   - Field: ‘conditions’
[16:20:31.641]   - Field: ‘expr’
[16:20:31.641]   - Field: ‘uuid’
[16:20:31.641]   - Field: ‘seed’
[16:20:31.641]   - Field: ‘version’
[16:20:31.641]   - Field: ‘result’
[16:20:31.641]   - Field: ‘asynchronous’
[16:20:31.641]   - Field: ‘calls’
[16:20:31.642]   - Field: ‘globals’
[16:20:31.642]   - Field: ‘stdout’
[16:20:31.642]   - Field: ‘earlySignal’
[16:20:31.642]   - Field: ‘lazy’
[16:20:31.642]   - Field: ‘state’
[16:20:31.642] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:31.642] - Launch lazy future ...
[16:20:31.643] Packages needed by the future expression (n = 0): <none>
[16:20:31.643] Packages needed by future strategies (n = 0): <none>
[16:20:31.644] {
[16:20:31.644]     {
[16:20:31.644]         {
[16:20:31.644]             ...future.startTime <- base::Sys.time()
[16:20:31.644]             {
[16:20:31.644]                 {
[16:20:31.644]                   {
[16:20:31.644]                     base::local({
[16:20:31.644]                       has_future <- base::requireNamespace("future", 
[16:20:31.644]                         quietly = TRUE)
[16:20:31.644]                       if (has_future) {
[16:20:31.644]                         ns <- base::getNamespace("future")
[16:20:31.644]                         version <- ns[[".package"]][["version"]]
[16:20:31.644]                         if (is.null(version)) 
[16:20:31.644]                           version <- utils::packageVersion("future")
[16:20:31.644]                       }
[16:20:31.644]                       else {
[16:20:31.644]                         version <- NULL
[16:20:31.644]                       }
[16:20:31.644]                       if (!has_future || version < "1.8.0") {
[16:20:31.644]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:31.644]                           "", base::R.version$version.string), 
[16:20:31.644]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:31.644]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:31.644]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:31.644]                             "release", "version")], collapse = " "), 
[16:20:31.644]                           hostname = base::Sys.info()[["nodename"]])
[16:20:31.644]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:31.644]                           info)
[16:20:31.644]                         info <- base::paste(info, collapse = "; ")
[16:20:31.644]                         if (!has_future) {
[16:20:31.644]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:31.644]                             info)
[16:20:31.644]                         }
[16:20:31.644]                         else {
[16:20:31.644]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:31.644]                             info, version)
[16:20:31.644]                         }
[16:20:31.644]                         base::stop(msg)
[16:20:31.644]                       }
[16:20:31.644]                     })
[16:20:31.644]                   }
[16:20:31.644]                   ...future.strategy.old <- future::plan("list")
[16:20:31.644]                   options(future.plan = NULL)
[16:20:31.644]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.644]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:31.644]                 }
[16:20:31.644]                 ...future.workdir <- getwd()
[16:20:31.644]             }
[16:20:31.644]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:31.644]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:31.644]         }
[16:20:31.644]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:31.644]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:31.644]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:31.644]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:31.644]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:31.644]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:31.644]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:31.644]             base::names(...future.oldOptions))
[16:20:31.644]     }
[16:20:31.644]     if (FALSE) {
[16:20:31.644]     }
[16:20:31.644]     else {
[16:20:31.644]         if (TRUE) {
[16:20:31.644]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:31.644]                 open = "w")
[16:20:31.644]         }
[16:20:31.644]         else {
[16:20:31.644]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:31.644]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:31.644]         }
[16:20:31.644]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:31.644]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:31.644]             base::sink(type = "output", split = FALSE)
[16:20:31.644]             base::close(...future.stdout)
[16:20:31.644]         }, add = TRUE)
[16:20:31.644]     }
[16:20:31.644]     ...future.frame <- base::sys.nframe()
[16:20:31.644]     ...future.conditions <- base::list()
[16:20:31.644]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:31.644]     if (FALSE) {
[16:20:31.644]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:31.644]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:31.644]     }
[16:20:31.644]     ...future.result <- base::tryCatch({
[16:20:31.644]         base::withCallingHandlers({
[16:20:31.644]             ...future.value <- base::withVisible(base::local({
[16:20:31.644]                 42L
[16:20:31.644]             }))
[16:20:31.644]             future::FutureResult(value = ...future.value$value, 
[16:20:31.644]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.644]                   ...future.rng), globalenv = if (FALSE) 
[16:20:31.644]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:31.644]                     ...future.globalenv.names))
[16:20:31.644]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:31.644]         }, condition = base::local({
[16:20:31.644]             c <- base::c
[16:20:31.644]             inherits <- base::inherits
[16:20:31.644]             invokeRestart <- base::invokeRestart
[16:20:31.644]             length <- base::length
[16:20:31.644]             list <- base::list
[16:20:31.644]             seq.int <- base::seq.int
[16:20:31.644]             signalCondition <- base::signalCondition
[16:20:31.644]             sys.calls <- base::sys.calls
[16:20:31.644]             `[[` <- base::`[[`
[16:20:31.644]             `+` <- base::`+`
[16:20:31.644]             `<<-` <- base::`<<-`
[16:20:31.644]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:31.644]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:31.644]                   3L)]
[16:20:31.644]             }
[16:20:31.644]             function(cond) {
[16:20:31.644]                 is_error <- inherits(cond, "error")
[16:20:31.644]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:31.644]                   NULL)
[16:20:31.644]                 if (is_error) {
[16:20:31.644]                   sessionInformation <- function() {
[16:20:31.644]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:31.644]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:31.644]                       search = base::search(), system = base::Sys.info())
[16:20:31.644]                   }
[16:20:31.644]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.644]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:31.644]                     cond$call), session = sessionInformation(), 
[16:20:31.644]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:31.644]                   signalCondition(cond)
[16:20:31.644]                 }
[16:20:31.644]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:31.644]                 "immediateCondition"))) {
[16:20:31.644]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:31.644]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.644]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:31.644]                   if (TRUE && !signal) {
[16:20:31.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.644]                     {
[16:20:31.644]                       inherits <- base::inherits
[16:20:31.644]                       invokeRestart <- base::invokeRestart
[16:20:31.644]                       is.null <- base::is.null
[16:20:31.644]                       muffled <- FALSE
[16:20:31.644]                       if (inherits(cond, "message")) {
[16:20:31.644]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.644]                         if (muffled) 
[16:20:31.644]                           invokeRestart("muffleMessage")
[16:20:31.644]                       }
[16:20:31.644]                       else if (inherits(cond, "warning")) {
[16:20:31.644]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.644]                         if (muffled) 
[16:20:31.644]                           invokeRestart("muffleWarning")
[16:20:31.644]                       }
[16:20:31.644]                       else if (inherits(cond, "condition")) {
[16:20:31.644]                         if (!is.null(pattern)) {
[16:20:31.644]                           computeRestarts <- base::computeRestarts
[16:20:31.644]                           grepl <- base::grepl
[16:20:31.644]                           restarts <- computeRestarts(cond)
[16:20:31.644]                           for (restart in restarts) {
[16:20:31.644]                             name <- restart$name
[16:20:31.644]                             if (is.null(name)) 
[16:20:31.644]                               next
[16:20:31.644]                             if (!grepl(pattern, name)) 
[16:20:31.644]                               next
[16:20:31.644]                             invokeRestart(restart)
[16:20:31.644]                             muffled <- TRUE
[16:20:31.644]                             break
[16:20:31.644]                           }
[16:20:31.644]                         }
[16:20:31.644]                       }
[16:20:31.644]                       invisible(muffled)
[16:20:31.644]                     }
[16:20:31.644]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.644]                   }
[16:20:31.644]                 }
[16:20:31.644]                 else {
[16:20:31.644]                   if (TRUE) {
[16:20:31.644]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.644]                     {
[16:20:31.644]                       inherits <- base::inherits
[16:20:31.644]                       invokeRestart <- base::invokeRestart
[16:20:31.644]                       is.null <- base::is.null
[16:20:31.644]                       muffled <- FALSE
[16:20:31.644]                       if (inherits(cond, "message")) {
[16:20:31.644]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.644]                         if (muffled) 
[16:20:31.644]                           invokeRestart("muffleMessage")
[16:20:31.644]                       }
[16:20:31.644]                       else if (inherits(cond, "warning")) {
[16:20:31.644]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.644]                         if (muffled) 
[16:20:31.644]                           invokeRestart("muffleWarning")
[16:20:31.644]                       }
[16:20:31.644]                       else if (inherits(cond, "condition")) {
[16:20:31.644]                         if (!is.null(pattern)) {
[16:20:31.644]                           computeRestarts <- base::computeRestarts
[16:20:31.644]                           grepl <- base::grepl
[16:20:31.644]                           restarts <- computeRestarts(cond)
[16:20:31.644]                           for (restart in restarts) {
[16:20:31.644]                             name <- restart$name
[16:20:31.644]                             if (is.null(name)) 
[16:20:31.644]                               next
[16:20:31.644]                             if (!grepl(pattern, name)) 
[16:20:31.644]                               next
[16:20:31.644]                             invokeRestart(restart)
[16:20:31.644]                             muffled <- TRUE
[16:20:31.644]                             break
[16:20:31.644]                           }
[16:20:31.644]                         }
[16:20:31.644]                       }
[16:20:31.644]                       invisible(muffled)
[16:20:31.644]                     }
[16:20:31.644]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.644]                   }
[16:20:31.644]                 }
[16:20:31.644]             }
[16:20:31.644]         }))
[16:20:31.644]     }, error = function(ex) {
[16:20:31.644]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:31.644]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.644]                 ...future.rng), started = ...future.startTime, 
[16:20:31.644]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:31.644]             version = "1.8"), class = "FutureResult")
[16:20:31.644]     }, finally = {
[16:20:31.644]         if (!identical(...future.workdir, getwd())) 
[16:20:31.644]             setwd(...future.workdir)
[16:20:31.644]         {
[16:20:31.644]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:31.644]                 ...future.oldOptions$nwarnings <- NULL
[16:20:31.644]             }
[16:20:31.644]             base::options(...future.oldOptions)
[16:20:31.644]             if (.Platform$OS.type == "windows") {
[16:20:31.644]                 old_names <- names(...future.oldEnvVars)
[16:20:31.644]                 envs <- base::Sys.getenv()
[16:20:31.644]                 names <- names(envs)
[16:20:31.644]                 common <- intersect(names, old_names)
[16:20:31.644]                 added <- setdiff(names, old_names)
[16:20:31.644]                 removed <- setdiff(old_names, names)
[16:20:31.644]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:31.644]                   envs[common]]
[16:20:31.644]                 NAMES <- toupper(changed)
[16:20:31.644]                 args <- list()
[16:20:31.644]                 for (kk in seq_along(NAMES)) {
[16:20:31.644]                   name <- changed[[kk]]
[16:20:31.644]                   NAME <- NAMES[[kk]]
[16:20:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.644]                     next
[16:20:31.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.644]                 }
[16:20:31.644]                 NAMES <- toupper(added)
[16:20:31.644]                 for (kk in seq_along(NAMES)) {
[16:20:31.644]                   name <- added[[kk]]
[16:20:31.644]                   NAME <- NAMES[[kk]]
[16:20:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.644]                     next
[16:20:31.644]                   args[[name]] <- ""
[16:20:31.644]                 }
[16:20:31.644]                 NAMES <- toupper(removed)
[16:20:31.644]                 for (kk in seq_along(NAMES)) {
[16:20:31.644]                   name <- removed[[kk]]
[16:20:31.644]                   NAME <- NAMES[[kk]]
[16:20:31.644]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.644]                     next
[16:20:31.644]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.644]                 }
[16:20:31.644]                 if (length(args) > 0) 
[16:20:31.644]                   base::do.call(base::Sys.setenv, args = args)
[16:20:31.644]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:31.644]             }
[16:20:31.644]             else {
[16:20:31.644]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:31.644]             }
[16:20:31.644]             {
[16:20:31.644]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:31.644]                   0L) {
[16:20:31.644]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:31.644]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:31.644]                   base::options(opts)
[16:20:31.644]                 }
[16:20:31.644]                 {
[16:20:31.644]                   {
[16:20:31.644]                     NULL
[16:20:31.644]                     RNGkind("Mersenne-Twister")
[16:20:31.644]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:31.644]                       inherits = FALSE)
[16:20:31.644]                   }
[16:20:31.644]                   options(future.plan = NULL)
[16:20:31.644]                   if (is.na(NA_character_)) 
[16:20:31.644]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.644]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:31.644]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:31.644]                     .init = FALSE)
[16:20:31.644]                 }
[16:20:31.644]             }
[16:20:31.644]         }
[16:20:31.644]     })
[16:20:31.644]     if (TRUE) {
[16:20:31.644]         base::sink(type = "output", split = FALSE)
[16:20:31.644]         if (TRUE) {
[16:20:31.644]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:31.644]         }
[16:20:31.644]         else {
[16:20:31.644]             ...future.result["stdout"] <- base::list(NULL)
[16:20:31.644]         }
[16:20:31.644]         base::close(...future.stdout)
[16:20:31.644]         ...future.stdout <- NULL
[16:20:31.644]     }
[16:20:31.644]     ...future.result$conditions <- ...future.conditions
[16:20:31.644]     ...future.result$finished <- base::Sys.time()
[16:20:31.644]     ...future.result
[16:20:31.644] }
[16:20:31.646] plan(): Setting new future strategy stack:
[16:20:31.646] List of future strategies:
[16:20:31.646] 1. sequential:
[16:20:31.646]    - args: function (..., envir = parent.frame())
[16:20:31.646]    - tweaked: FALSE
[16:20:31.646]    - call: NULL
[16:20:31.646] plan(): nbrOfWorkers() = 1
[16:20:31.647] plan(): Setting new future strategy stack:
[16:20:31.648] List of future strategies:
[16:20:31.648] 1. sequential:
[16:20:31.648]    - args: function (..., envir = parent.frame())
[16:20:31.648]    - tweaked: FALSE
[16:20:31.648]    - call: future::plan("sequential")
[16:20:31.648] plan(): nbrOfWorkers() = 1
[16:20:31.648] SequentialFuture started (and completed)
[16:20:31.649] - Launch lazy future ... done
[16:20:31.649] run() for ‘SequentialFuture’ ... done
[16:20:31.649] - run() ... done
[16:20:31.649] - resolved() ...
[16:20:31.649] resolved() for ‘SequentialFuture’ ...
[16:20:31.649] - state: ‘finished’
[16:20:31.649] - run: TRUE
[16:20:31.649] - result: ‘FutureResult’
[16:20:31.650] resolved() for ‘SequentialFuture’ ... done
[16:20:31.650] - resolved: TRUE
[16:20:31.650] - resolved() ... done
[16:20:31.650] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[16:20:31.650] getGlobalsAndPackages() ...
[16:20:31.651] Searching for globals...
[16:20:31.651] 
[16:20:31.651] Searching for globals ... DONE
[16:20:31.651] - globals: [0] <none>
[16:20:31.651] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e24f7f14-e512-7bda-f124-e4762d5e913b
Class: ‘Future’, ‘environment’
> y <- value(f)
[16:20:31.652] run() for ‘Future’ ...
[16:20:31.652] - state: ‘created’
[16:20:31.652] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:31.653] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:31.653] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:31.653]   - Field: ‘label’
[16:20:31.653]   - Field: ‘local’
[16:20:31.653]   - Field: ‘owner’
[16:20:31.653]   - Field: ‘envir’
[16:20:31.653]   - Field: ‘packages’
[16:20:31.653]   - Field: ‘gc’
[16:20:31.653]   - Field: ‘conditions’
[16:20:31.654]   - Field: ‘expr’
[16:20:31.654]   - Field: ‘uuid’
[16:20:31.654]   - Field: ‘seed’
[16:20:31.654]   - Field: ‘version’
[16:20:31.654]   - Field: ‘result’
[16:20:31.654]   - Field: ‘asynchronous’
[16:20:31.654]   - Field: ‘calls’
[16:20:31.654]   - Field: ‘globals’
[16:20:31.654]   - Field: ‘stdout’
[16:20:31.654]   - Field: ‘earlySignal’
[16:20:31.654]   - Field: ‘lazy’
[16:20:31.655]   - Field: ‘state’
[16:20:31.655] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:31.655] - Launch lazy future ...
[16:20:31.655] Packages needed by the future expression (n = 0): <none>
[16:20:31.655] Packages needed by future strategies (n = 0): <none>
[16:20:31.655] {
[16:20:31.655]     {
[16:20:31.655]         {
[16:20:31.655]             ...future.startTime <- base::Sys.time()
[16:20:31.655]             {
[16:20:31.655]                 {
[16:20:31.655]                   {
[16:20:31.655]                     base::local({
[16:20:31.655]                       has_future <- base::requireNamespace("future", 
[16:20:31.655]                         quietly = TRUE)
[16:20:31.655]                       if (has_future) {
[16:20:31.655]                         ns <- base::getNamespace("future")
[16:20:31.655]                         version <- ns[[".package"]][["version"]]
[16:20:31.655]                         if (is.null(version)) 
[16:20:31.655]                           version <- utils::packageVersion("future")
[16:20:31.655]                       }
[16:20:31.655]                       else {
[16:20:31.655]                         version <- NULL
[16:20:31.655]                       }
[16:20:31.655]                       if (!has_future || version < "1.8.0") {
[16:20:31.655]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:31.655]                           "", base::R.version$version.string), 
[16:20:31.655]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:31.655]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:31.655]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:31.655]                             "release", "version")], collapse = " "), 
[16:20:31.655]                           hostname = base::Sys.info()[["nodename"]])
[16:20:31.655]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:31.655]                           info)
[16:20:31.655]                         info <- base::paste(info, collapse = "; ")
[16:20:31.655]                         if (!has_future) {
[16:20:31.655]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:31.655]                             info)
[16:20:31.655]                         }
[16:20:31.655]                         else {
[16:20:31.655]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:31.655]                             info, version)
[16:20:31.655]                         }
[16:20:31.655]                         base::stop(msg)
[16:20:31.655]                       }
[16:20:31.655]                     })
[16:20:31.655]                   }
[16:20:31.655]                   ...future.strategy.old <- future::plan("list")
[16:20:31.655]                   options(future.plan = NULL)
[16:20:31.655]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.655]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:31.655]                 }
[16:20:31.655]                 ...future.workdir <- getwd()
[16:20:31.655]             }
[16:20:31.655]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:31.655]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:31.655]         }
[16:20:31.655]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:31.655]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:31.655]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:31.655]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:31.655]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:31.655]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:31.655]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:31.655]             base::names(...future.oldOptions))
[16:20:31.655]     }
[16:20:31.655]     if (FALSE) {
[16:20:31.655]     }
[16:20:31.655]     else {
[16:20:31.655]         if (TRUE) {
[16:20:31.655]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:31.655]                 open = "w")
[16:20:31.655]         }
[16:20:31.655]         else {
[16:20:31.655]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:31.655]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:31.655]         }
[16:20:31.655]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:31.655]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:31.655]             base::sink(type = "output", split = FALSE)
[16:20:31.655]             base::close(...future.stdout)
[16:20:31.655]         }, add = TRUE)
[16:20:31.655]     }
[16:20:31.655]     ...future.frame <- base::sys.nframe()
[16:20:31.655]     ...future.conditions <- base::list()
[16:20:31.655]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:31.655]     if (FALSE) {
[16:20:31.655]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:31.655]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:31.655]     }
[16:20:31.655]     ...future.result <- base::tryCatch({
[16:20:31.655]         base::withCallingHandlers({
[16:20:31.655]             ...future.value <- base::withVisible(base::local(42L))
[16:20:31.655]             future::FutureResult(value = ...future.value$value, 
[16:20:31.655]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.655]                   ...future.rng), globalenv = if (FALSE) 
[16:20:31.655]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:31.655]                     ...future.globalenv.names))
[16:20:31.655]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:31.655]         }, condition = base::local({
[16:20:31.655]             c <- base::c
[16:20:31.655]             inherits <- base::inherits
[16:20:31.655]             invokeRestart <- base::invokeRestart
[16:20:31.655]             length <- base::length
[16:20:31.655]             list <- base::list
[16:20:31.655]             seq.int <- base::seq.int
[16:20:31.655]             signalCondition <- base::signalCondition
[16:20:31.655]             sys.calls <- base::sys.calls
[16:20:31.655]             `[[` <- base::`[[`
[16:20:31.655]             `+` <- base::`+`
[16:20:31.655]             `<<-` <- base::`<<-`
[16:20:31.655]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:31.655]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:31.655]                   3L)]
[16:20:31.655]             }
[16:20:31.655]             function(cond) {
[16:20:31.655]                 is_error <- inherits(cond, "error")
[16:20:31.655]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:31.655]                   NULL)
[16:20:31.655]                 if (is_error) {
[16:20:31.655]                   sessionInformation <- function() {
[16:20:31.655]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:31.655]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:31.655]                       search = base::search(), system = base::Sys.info())
[16:20:31.655]                   }
[16:20:31.655]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.655]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:31.655]                     cond$call), session = sessionInformation(), 
[16:20:31.655]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:31.655]                   signalCondition(cond)
[16:20:31.655]                 }
[16:20:31.655]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:31.655]                 "immediateCondition"))) {
[16:20:31.655]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:31.655]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.655]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:31.655]                   if (TRUE && !signal) {
[16:20:31.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.655]                     {
[16:20:31.655]                       inherits <- base::inherits
[16:20:31.655]                       invokeRestart <- base::invokeRestart
[16:20:31.655]                       is.null <- base::is.null
[16:20:31.655]                       muffled <- FALSE
[16:20:31.655]                       if (inherits(cond, "message")) {
[16:20:31.655]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.655]                         if (muffled) 
[16:20:31.655]                           invokeRestart("muffleMessage")
[16:20:31.655]                       }
[16:20:31.655]                       else if (inherits(cond, "warning")) {
[16:20:31.655]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.655]                         if (muffled) 
[16:20:31.655]                           invokeRestart("muffleWarning")
[16:20:31.655]                       }
[16:20:31.655]                       else if (inherits(cond, "condition")) {
[16:20:31.655]                         if (!is.null(pattern)) {
[16:20:31.655]                           computeRestarts <- base::computeRestarts
[16:20:31.655]                           grepl <- base::grepl
[16:20:31.655]                           restarts <- computeRestarts(cond)
[16:20:31.655]                           for (restart in restarts) {
[16:20:31.655]                             name <- restart$name
[16:20:31.655]                             if (is.null(name)) 
[16:20:31.655]                               next
[16:20:31.655]                             if (!grepl(pattern, name)) 
[16:20:31.655]                               next
[16:20:31.655]                             invokeRestart(restart)
[16:20:31.655]                             muffled <- TRUE
[16:20:31.655]                             break
[16:20:31.655]                           }
[16:20:31.655]                         }
[16:20:31.655]                       }
[16:20:31.655]                       invisible(muffled)
[16:20:31.655]                     }
[16:20:31.655]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.655]                   }
[16:20:31.655]                 }
[16:20:31.655]                 else {
[16:20:31.655]                   if (TRUE) {
[16:20:31.655]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.655]                     {
[16:20:31.655]                       inherits <- base::inherits
[16:20:31.655]                       invokeRestart <- base::invokeRestart
[16:20:31.655]                       is.null <- base::is.null
[16:20:31.655]                       muffled <- FALSE
[16:20:31.655]                       if (inherits(cond, "message")) {
[16:20:31.655]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.655]                         if (muffled) 
[16:20:31.655]                           invokeRestart("muffleMessage")
[16:20:31.655]                       }
[16:20:31.655]                       else if (inherits(cond, "warning")) {
[16:20:31.655]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.655]                         if (muffled) 
[16:20:31.655]                           invokeRestart("muffleWarning")
[16:20:31.655]                       }
[16:20:31.655]                       else if (inherits(cond, "condition")) {
[16:20:31.655]                         if (!is.null(pattern)) {
[16:20:31.655]                           computeRestarts <- base::computeRestarts
[16:20:31.655]                           grepl <- base::grepl
[16:20:31.655]                           restarts <- computeRestarts(cond)
[16:20:31.655]                           for (restart in restarts) {
[16:20:31.655]                             name <- restart$name
[16:20:31.655]                             if (is.null(name)) 
[16:20:31.655]                               next
[16:20:31.655]                             if (!grepl(pattern, name)) 
[16:20:31.655]                               next
[16:20:31.655]                             invokeRestart(restart)
[16:20:31.655]                             muffled <- TRUE
[16:20:31.655]                             break
[16:20:31.655]                           }
[16:20:31.655]                         }
[16:20:31.655]                       }
[16:20:31.655]                       invisible(muffled)
[16:20:31.655]                     }
[16:20:31.655]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.655]                   }
[16:20:31.655]                 }
[16:20:31.655]             }
[16:20:31.655]         }))
[16:20:31.655]     }, error = function(ex) {
[16:20:31.655]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:31.655]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.655]                 ...future.rng), started = ...future.startTime, 
[16:20:31.655]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:31.655]             version = "1.8"), class = "FutureResult")
[16:20:31.655]     }, finally = {
[16:20:31.655]         if (!identical(...future.workdir, getwd())) 
[16:20:31.655]             setwd(...future.workdir)
[16:20:31.655]         {
[16:20:31.655]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:31.655]                 ...future.oldOptions$nwarnings <- NULL
[16:20:31.655]             }
[16:20:31.655]             base::options(...future.oldOptions)
[16:20:31.655]             if (.Platform$OS.type == "windows") {
[16:20:31.655]                 old_names <- names(...future.oldEnvVars)
[16:20:31.655]                 envs <- base::Sys.getenv()
[16:20:31.655]                 names <- names(envs)
[16:20:31.655]                 common <- intersect(names, old_names)
[16:20:31.655]                 added <- setdiff(names, old_names)
[16:20:31.655]                 removed <- setdiff(old_names, names)
[16:20:31.655]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:31.655]                   envs[common]]
[16:20:31.655]                 NAMES <- toupper(changed)
[16:20:31.655]                 args <- list()
[16:20:31.655]                 for (kk in seq_along(NAMES)) {
[16:20:31.655]                   name <- changed[[kk]]
[16:20:31.655]                   NAME <- NAMES[[kk]]
[16:20:31.655]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.655]                     next
[16:20:31.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.655]                 }
[16:20:31.655]                 NAMES <- toupper(added)
[16:20:31.655]                 for (kk in seq_along(NAMES)) {
[16:20:31.655]                   name <- added[[kk]]
[16:20:31.655]                   NAME <- NAMES[[kk]]
[16:20:31.655]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.655]                     next
[16:20:31.655]                   args[[name]] <- ""
[16:20:31.655]                 }
[16:20:31.655]                 NAMES <- toupper(removed)
[16:20:31.655]                 for (kk in seq_along(NAMES)) {
[16:20:31.655]                   name <- removed[[kk]]
[16:20:31.655]                   NAME <- NAMES[[kk]]
[16:20:31.655]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.655]                     next
[16:20:31.655]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.655]                 }
[16:20:31.655]                 if (length(args) > 0) 
[16:20:31.655]                   base::do.call(base::Sys.setenv, args = args)
[16:20:31.655]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:31.655]             }
[16:20:31.655]             else {
[16:20:31.655]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:31.655]             }
[16:20:31.655]             {
[16:20:31.655]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:31.655]                   0L) {
[16:20:31.655]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:31.655]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:31.655]                   base::options(opts)
[16:20:31.655]                 }
[16:20:31.655]                 {
[16:20:31.655]                   {
[16:20:31.655]                     NULL
[16:20:31.655]                     RNGkind("Mersenne-Twister")
[16:20:31.655]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:31.655]                       inherits = FALSE)
[16:20:31.655]                   }
[16:20:31.655]                   options(future.plan = NULL)
[16:20:31.655]                   if (is.na(NA_character_)) 
[16:20:31.655]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.655]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:31.655]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:31.655]                     .init = FALSE)
[16:20:31.655]                 }
[16:20:31.655]             }
[16:20:31.655]         }
[16:20:31.655]     })
[16:20:31.655]     if (TRUE) {
[16:20:31.655]         base::sink(type = "output", split = FALSE)
[16:20:31.655]         if (TRUE) {
[16:20:31.655]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:31.655]         }
[16:20:31.655]         else {
[16:20:31.655]             ...future.result["stdout"] <- base::list(NULL)
[16:20:31.655]         }
[16:20:31.655]         base::close(...future.stdout)
[16:20:31.655]         ...future.stdout <- NULL
[16:20:31.655]     }
[16:20:31.655]     ...future.result$conditions <- ...future.conditions
[16:20:31.655]     ...future.result$finished <- base::Sys.time()
[16:20:31.655]     ...future.result
[16:20:31.655] }
[16:20:31.657] plan(): Setting new future strategy stack:
[16:20:31.657] List of future strategies:
[16:20:31.657] 1. sequential:
[16:20:31.657]    - args: function (..., envir = parent.frame())
[16:20:31.657]    - tweaked: FALSE
[16:20:31.657]    - call: NULL
[16:20:31.658] plan(): nbrOfWorkers() = 1
[16:20:31.658] plan(): Setting new future strategy stack:
[16:20:31.658] List of future strategies:
[16:20:31.658] 1. sequential:
[16:20:31.658]    - args: function (..., envir = parent.frame())
[16:20:31.658]    - tweaked: FALSE
[16:20:31.658]    - call: future::plan("sequential")
[16:20:31.659] plan(): nbrOfWorkers() = 1
[16:20:31.659] SequentialFuture started (and completed)
[16:20:31.659] - Launch lazy future ... done
[16:20:31.659] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> message("*** future() ... DONE")
*** future() ... DONE
> 
> message("*** future() ...")
*** future() ...
> 
> f <- future({
+   42L
+ }, lazy = TRUE)
[16:20:31.660] getGlobalsAndPackages() ...
[16:20:31.660] Searching for globals...
[16:20:31.660] - globals found: [1] ‘{’
[16:20:31.661] Searching for globals ... DONE
[16:20:31.661] Resolving globals: FALSE
[16:20:31.661] 
[16:20:31.661] 
[16:20:31.661] getGlobalsAndPackages() ... DONE
> 
> print(resolved(f))
[16:20:31.661] resolved() for ‘Future’ ...
[16:20:31.661] - state: ‘created’
[16:20:31.662] - run: TRUE
[16:20:31.662] - run() ...
[16:20:31.662] run() for ‘Future’ ...
[16:20:31.662] - state: ‘created’
[16:20:31.662] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:31.662] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:31.662] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:31.662]   - Field: ‘label’
[16:20:31.663]   - Field: ‘local’
[16:20:31.663]   - Field: ‘owner’
[16:20:31.663]   - Field: ‘envir’
[16:20:31.663]   - Field: ‘packages’
[16:20:31.663]   - Field: ‘gc’
[16:20:31.663]   - Field: ‘conditions’
[16:20:31.663]   - Field: ‘expr’
[16:20:31.663]   - Field: ‘uuid’
[16:20:31.663]   - Field: ‘seed’
[16:20:31.663]   - Field: ‘version’
[16:20:31.663]   - Field: ‘result’
[16:20:31.664]   - Field: ‘asynchronous’
[16:20:31.664]   - Field: ‘calls’
[16:20:31.664]   - Field: ‘globals’
[16:20:31.664]   - Field: ‘stdout’
[16:20:31.664]   - Field: ‘earlySignal’
[16:20:31.664]   - Field: ‘lazy’
[16:20:31.664]   - Field: ‘state’
[16:20:31.664] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:31.664] - Launch lazy future ...
[16:20:31.665] Packages needed by the future expression (n = 0): <none>
[16:20:31.665] Packages needed by future strategies (n = 0): <none>
[16:20:31.665] {
[16:20:31.665]     {
[16:20:31.665]         {
[16:20:31.665]             ...future.startTime <- base::Sys.time()
[16:20:31.665]             {
[16:20:31.665]                 {
[16:20:31.665]                   {
[16:20:31.665]                     base::local({
[16:20:31.665]                       has_future <- base::requireNamespace("future", 
[16:20:31.665]                         quietly = TRUE)
[16:20:31.665]                       if (has_future) {
[16:20:31.665]                         ns <- base::getNamespace("future")
[16:20:31.665]                         version <- ns[[".package"]][["version"]]
[16:20:31.665]                         if (is.null(version)) 
[16:20:31.665]                           version <- utils::packageVersion("future")
[16:20:31.665]                       }
[16:20:31.665]                       else {
[16:20:31.665]                         version <- NULL
[16:20:31.665]                       }
[16:20:31.665]                       if (!has_future || version < "1.8.0") {
[16:20:31.665]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:31.665]                           "", base::R.version$version.string), 
[16:20:31.665]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:31.665]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:31.665]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:31.665]                             "release", "version")], collapse = " "), 
[16:20:31.665]                           hostname = base::Sys.info()[["nodename"]])
[16:20:31.665]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:31.665]                           info)
[16:20:31.665]                         info <- base::paste(info, collapse = "; ")
[16:20:31.665]                         if (!has_future) {
[16:20:31.665]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:31.665]                             info)
[16:20:31.665]                         }
[16:20:31.665]                         else {
[16:20:31.665]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:31.665]                             info, version)
[16:20:31.665]                         }
[16:20:31.665]                         base::stop(msg)
[16:20:31.665]                       }
[16:20:31.665]                     })
[16:20:31.665]                   }
[16:20:31.665]                   ...future.strategy.old <- future::plan("list")
[16:20:31.665]                   options(future.plan = NULL)
[16:20:31.665]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.665]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:31.665]                 }
[16:20:31.665]                 ...future.workdir <- getwd()
[16:20:31.665]             }
[16:20:31.665]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:31.665]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:31.665]         }
[16:20:31.665]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:31.665]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:31.665]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:31.665]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:31.665]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:31.665]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:31.665]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:31.665]             base::names(...future.oldOptions))
[16:20:31.665]     }
[16:20:31.665]     if (FALSE) {
[16:20:31.665]     }
[16:20:31.665]     else {
[16:20:31.665]         if (TRUE) {
[16:20:31.665]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:31.665]                 open = "w")
[16:20:31.665]         }
[16:20:31.665]         else {
[16:20:31.665]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:31.665]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:31.665]         }
[16:20:31.665]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:31.665]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:31.665]             base::sink(type = "output", split = FALSE)
[16:20:31.665]             base::close(...future.stdout)
[16:20:31.665]         }, add = TRUE)
[16:20:31.665]     }
[16:20:31.665]     ...future.frame <- base::sys.nframe()
[16:20:31.665]     ...future.conditions <- base::list()
[16:20:31.665]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:31.665]     if (FALSE) {
[16:20:31.665]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:31.665]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:31.665]     }
[16:20:31.665]     ...future.result <- base::tryCatch({
[16:20:31.665]         base::withCallingHandlers({
[16:20:31.665]             ...future.value <- base::withVisible(base::local({
[16:20:31.665]                 42L
[16:20:31.665]             }))
[16:20:31.665]             future::FutureResult(value = ...future.value$value, 
[16:20:31.665]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.665]                   ...future.rng), globalenv = if (FALSE) 
[16:20:31.665]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:31.665]                     ...future.globalenv.names))
[16:20:31.665]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:31.665]         }, condition = base::local({
[16:20:31.665]             c <- base::c
[16:20:31.665]             inherits <- base::inherits
[16:20:31.665]             invokeRestart <- base::invokeRestart
[16:20:31.665]             length <- base::length
[16:20:31.665]             list <- base::list
[16:20:31.665]             seq.int <- base::seq.int
[16:20:31.665]             signalCondition <- base::signalCondition
[16:20:31.665]             sys.calls <- base::sys.calls
[16:20:31.665]             `[[` <- base::`[[`
[16:20:31.665]             `+` <- base::`+`
[16:20:31.665]             `<<-` <- base::`<<-`
[16:20:31.665]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:31.665]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:31.665]                   3L)]
[16:20:31.665]             }
[16:20:31.665]             function(cond) {
[16:20:31.665]                 is_error <- inherits(cond, "error")
[16:20:31.665]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:31.665]                   NULL)
[16:20:31.665]                 if (is_error) {
[16:20:31.665]                   sessionInformation <- function() {
[16:20:31.665]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:31.665]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:31.665]                       search = base::search(), system = base::Sys.info())
[16:20:31.665]                   }
[16:20:31.665]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.665]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:31.665]                     cond$call), session = sessionInformation(), 
[16:20:31.665]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:31.665]                   signalCondition(cond)
[16:20:31.665]                 }
[16:20:31.665]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:31.665]                 "immediateCondition"))) {
[16:20:31.665]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:31.665]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.665]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:31.665]                   if (TRUE && !signal) {
[16:20:31.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.665]                     {
[16:20:31.665]                       inherits <- base::inherits
[16:20:31.665]                       invokeRestart <- base::invokeRestart
[16:20:31.665]                       is.null <- base::is.null
[16:20:31.665]                       muffled <- FALSE
[16:20:31.665]                       if (inherits(cond, "message")) {
[16:20:31.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.665]                         if (muffled) 
[16:20:31.665]                           invokeRestart("muffleMessage")
[16:20:31.665]                       }
[16:20:31.665]                       else if (inherits(cond, "warning")) {
[16:20:31.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.665]                         if (muffled) 
[16:20:31.665]                           invokeRestart("muffleWarning")
[16:20:31.665]                       }
[16:20:31.665]                       else if (inherits(cond, "condition")) {
[16:20:31.665]                         if (!is.null(pattern)) {
[16:20:31.665]                           computeRestarts <- base::computeRestarts
[16:20:31.665]                           grepl <- base::grepl
[16:20:31.665]                           restarts <- computeRestarts(cond)
[16:20:31.665]                           for (restart in restarts) {
[16:20:31.665]                             name <- restart$name
[16:20:31.665]                             if (is.null(name)) 
[16:20:31.665]                               next
[16:20:31.665]                             if (!grepl(pattern, name)) 
[16:20:31.665]                               next
[16:20:31.665]                             invokeRestart(restart)
[16:20:31.665]                             muffled <- TRUE
[16:20:31.665]                             break
[16:20:31.665]                           }
[16:20:31.665]                         }
[16:20:31.665]                       }
[16:20:31.665]                       invisible(muffled)
[16:20:31.665]                     }
[16:20:31.665]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.665]                   }
[16:20:31.665]                 }
[16:20:31.665]                 else {
[16:20:31.665]                   if (TRUE) {
[16:20:31.665]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.665]                     {
[16:20:31.665]                       inherits <- base::inherits
[16:20:31.665]                       invokeRestart <- base::invokeRestart
[16:20:31.665]                       is.null <- base::is.null
[16:20:31.665]                       muffled <- FALSE
[16:20:31.665]                       if (inherits(cond, "message")) {
[16:20:31.665]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.665]                         if (muffled) 
[16:20:31.665]                           invokeRestart("muffleMessage")
[16:20:31.665]                       }
[16:20:31.665]                       else if (inherits(cond, "warning")) {
[16:20:31.665]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.665]                         if (muffled) 
[16:20:31.665]                           invokeRestart("muffleWarning")
[16:20:31.665]                       }
[16:20:31.665]                       else if (inherits(cond, "condition")) {
[16:20:31.665]                         if (!is.null(pattern)) {
[16:20:31.665]                           computeRestarts <- base::computeRestarts
[16:20:31.665]                           grepl <- base::grepl
[16:20:31.665]                           restarts <- computeRestarts(cond)
[16:20:31.665]                           for (restart in restarts) {
[16:20:31.665]                             name <- restart$name
[16:20:31.665]                             if (is.null(name)) 
[16:20:31.665]                               next
[16:20:31.665]                             if (!grepl(pattern, name)) 
[16:20:31.665]                               next
[16:20:31.665]                             invokeRestart(restart)
[16:20:31.665]                             muffled <- TRUE
[16:20:31.665]                             break
[16:20:31.665]                           }
[16:20:31.665]                         }
[16:20:31.665]                       }
[16:20:31.665]                       invisible(muffled)
[16:20:31.665]                     }
[16:20:31.665]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.665]                   }
[16:20:31.665]                 }
[16:20:31.665]             }
[16:20:31.665]         }))
[16:20:31.665]     }, error = function(ex) {
[16:20:31.665]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:31.665]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.665]                 ...future.rng), started = ...future.startTime, 
[16:20:31.665]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:31.665]             version = "1.8"), class = "FutureResult")
[16:20:31.665]     }, finally = {
[16:20:31.665]         if (!identical(...future.workdir, getwd())) 
[16:20:31.665]             setwd(...future.workdir)
[16:20:31.665]         {
[16:20:31.665]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:31.665]                 ...future.oldOptions$nwarnings <- NULL
[16:20:31.665]             }
[16:20:31.665]             base::options(...future.oldOptions)
[16:20:31.665]             if (.Platform$OS.type == "windows") {
[16:20:31.665]                 old_names <- names(...future.oldEnvVars)
[16:20:31.665]                 envs <- base::Sys.getenv()
[16:20:31.665]                 names <- names(envs)
[16:20:31.665]                 common <- intersect(names, old_names)
[16:20:31.665]                 added <- setdiff(names, old_names)
[16:20:31.665]                 removed <- setdiff(old_names, names)
[16:20:31.665]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:31.665]                   envs[common]]
[16:20:31.665]                 NAMES <- toupper(changed)
[16:20:31.665]                 args <- list()
[16:20:31.665]                 for (kk in seq_along(NAMES)) {
[16:20:31.665]                   name <- changed[[kk]]
[16:20:31.665]                   NAME <- NAMES[[kk]]
[16:20:31.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.665]                     next
[16:20:31.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.665]                 }
[16:20:31.665]                 NAMES <- toupper(added)
[16:20:31.665]                 for (kk in seq_along(NAMES)) {
[16:20:31.665]                   name <- added[[kk]]
[16:20:31.665]                   NAME <- NAMES[[kk]]
[16:20:31.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.665]                     next
[16:20:31.665]                   args[[name]] <- ""
[16:20:31.665]                 }
[16:20:31.665]                 NAMES <- toupper(removed)
[16:20:31.665]                 for (kk in seq_along(NAMES)) {
[16:20:31.665]                   name <- removed[[kk]]
[16:20:31.665]                   NAME <- NAMES[[kk]]
[16:20:31.665]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.665]                     next
[16:20:31.665]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.665]                 }
[16:20:31.665]                 if (length(args) > 0) 
[16:20:31.665]                   base::do.call(base::Sys.setenv, args = args)
[16:20:31.665]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:31.665]             }
[16:20:31.665]             else {
[16:20:31.665]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:31.665]             }
[16:20:31.665]             {
[16:20:31.665]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:31.665]                   0L) {
[16:20:31.665]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:31.665]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:31.665]                   base::options(opts)
[16:20:31.665]                 }
[16:20:31.665]                 {
[16:20:31.665]                   {
[16:20:31.665]                     NULL
[16:20:31.665]                     RNGkind("Mersenne-Twister")
[16:20:31.665]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:31.665]                       inherits = FALSE)
[16:20:31.665]                   }
[16:20:31.665]                   options(future.plan = NULL)
[16:20:31.665]                   if (is.na(NA_character_)) 
[16:20:31.665]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.665]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:31.665]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:31.665]                     .init = FALSE)
[16:20:31.665]                 }
[16:20:31.665]             }
[16:20:31.665]         }
[16:20:31.665]     })
[16:20:31.665]     if (TRUE) {
[16:20:31.665]         base::sink(type = "output", split = FALSE)
[16:20:31.665]         if (TRUE) {
[16:20:31.665]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:31.665]         }
[16:20:31.665]         else {
[16:20:31.665]             ...future.result["stdout"] <- base::list(NULL)
[16:20:31.665]         }
[16:20:31.665]         base::close(...future.stdout)
[16:20:31.665]         ...future.stdout <- NULL
[16:20:31.665]     }
[16:20:31.665]     ...future.result$conditions <- ...future.conditions
[16:20:31.665]     ...future.result$finished <- base::Sys.time()
[16:20:31.665]     ...future.result
[16:20:31.665] }
[16:20:31.667] plan(): Setting new future strategy stack:
[16:20:31.667] List of future strategies:
[16:20:31.667] 1. sequential:
[16:20:31.667]    - args: function (..., envir = parent.frame())
[16:20:31.667]    - tweaked: FALSE
[16:20:31.667]    - call: NULL
[16:20:31.667] plan(): nbrOfWorkers() = 1
[16:20:31.668] plan(): Setting new future strategy stack:
[16:20:31.668] List of future strategies:
[16:20:31.668] 1. sequential:
[16:20:31.668]    - args: function (..., envir = parent.frame())
[16:20:31.668]    - tweaked: FALSE
[16:20:31.668]    - call: future::plan("sequential")
[16:20:31.668] plan(): nbrOfWorkers() = 1
[16:20:31.669] SequentialFuture started (and completed)
[16:20:31.669] - Launch lazy future ... done
[16:20:31.669] run() for ‘SequentialFuture’ ... done
[16:20:31.669] - run() ... done
[16:20:31.669] - resolved() ...
[16:20:31.669] resolved() for ‘SequentialFuture’ ...
[16:20:31.669] - state: ‘finished’
[16:20:31.669] - run: TRUE
[16:20:31.669] - result: ‘FutureResult’
[16:20:31.669] resolved() for ‘SequentialFuture’ ... done
[16:20:31.670] - resolved: TRUE
[16:20:31.670] - resolved() ... done
[16:20:31.670] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
> y <- value(f)
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> 
> message("*** future() w/ gc = TRUE ...")
*** future() w/ gc = TRUE ...
> 
> f <- future(42L, gc = TRUE, lazy = TRUE)
[16:20:31.670] getGlobalsAndPackages() ...
[16:20:31.670] Searching for globals...
[16:20:31.673] 
[16:20:31.673] Searching for globals ... DONE
[16:20:31.674] - globals: [0] <none>
[16:20:31.674] getGlobalsAndPackages() ... DONE
> print(f)
Future:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: TRUE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: e24f7f14-e512-7bda-f124-e4762d5e913b
Class: ‘Future’, ‘environment’
> y <- value(f)
[16:20:31.674] run() for ‘Future’ ...
[16:20:31.674] - state: ‘created’
[16:20:31.674] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:31.675] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:31.675] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:31.675]   - Field: ‘label’
[16:20:31.675]   - Field: ‘local’
[16:20:31.675]   - Field: ‘owner’
[16:20:31.675]   - Field: ‘envir’
[16:20:31.675]   - Field: ‘packages’
[16:20:31.675]   - Field: ‘gc’
[16:20:31.676]   - Field: ‘conditions’
[16:20:31.676]   - Field: ‘expr’
[16:20:31.676]   - Field: ‘uuid’
[16:20:31.676]   - Field: ‘seed’
[16:20:31.676]   - Field: ‘version’
[16:20:31.676]   - Field: ‘result’
[16:20:31.676]   - Field: ‘asynchronous’
[16:20:31.676]   - Field: ‘calls’
[16:20:31.676]   - Field: ‘globals’
[16:20:31.676]   - Field: ‘stdout’
[16:20:31.677]   - Field: ‘earlySignal’
[16:20:31.677]   - Field: ‘lazy’
[16:20:31.677]   - Field: ‘state’
[16:20:31.677] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:31.677] - Launch lazy future ...
[16:20:31.677] Packages needed by the future expression (n = 0): <none>
[16:20:31.677] Packages needed by future strategies (n = 0): <none>
[16:20:31.678] {
[16:20:31.678]     {
[16:20:31.678]         {
[16:20:31.678]             ...future.startTime <- base::Sys.time()
[16:20:31.678]             {
[16:20:31.678]                 {
[16:20:31.678]                   {
[16:20:31.678]                     base::local({
[16:20:31.678]                       has_future <- base::requireNamespace("future", 
[16:20:31.678]                         quietly = TRUE)
[16:20:31.678]                       if (has_future) {
[16:20:31.678]                         ns <- base::getNamespace("future")
[16:20:31.678]                         version <- ns[[".package"]][["version"]]
[16:20:31.678]                         if (is.null(version)) 
[16:20:31.678]                           version <- utils::packageVersion("future")
[16:20:31.678]                       }
[16:20:31.678]                       else {
[16:20:31.678]                         version <- NULL
[16:20:31.678]                       }
[16:20:31.678]                       if (!has_future || version < "1.8.0") {
[16:20:31.678]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:31.678]                           "", base::R.version$version.string), 
[16:20:31.678]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:31.678]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:31.678]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:31.678]                             "release", "version")], collapse = " "), 
[16:20:31.678]                           hostname = base::Sys.info()[["nodename"]])
[16:20:31.678]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:31.678]                           info)
[16:20:31.678]                         info <- base::paste(info, collapse = "; ")
[16:20:31.678]                         if (!has_future) {
[16:20:31.678]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:31.678]                             info)
[16:20:31.678]                         }
[16:20:31.678]                         else {
[16:20:31.678]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:31.678]                             info, version)
[16:20:31.678]                         }
[16:20:31.678]                         base::stop(msg)
[16:20:31.678]                       }
[16:20:31.678]                     })
[16:20:31.678]                   }
[16:20:31.678]                   ...future.strategy.old <- future::plan("list")
[16:20:31.678]                   options(future.plan = NULL)
[16:20:31.678]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.678]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:31.678]                 }
[16:20:31.678]                 ...future.workdir <- getwd()
[16:20:31.678]             }
[16:20:31.678]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:31.678]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:31.678]         }
[16:20:31.678]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:31.678]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:31.678]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:31.678]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:31.678]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:31.678]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:31.678]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:31.678]             base::names(...future.oldOptions))
[16:20:31.678]     }
[16:20:31.678]     if (FALSE) {
[16:20:31.678]     }
[16:20:31.678]     else {
[16:20:31.678]         if (TRUE) {
[16:20:31.678]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:31.678]                 open = "w")
[16:20:31.678]         }
[16:20:31.678]         else {
[16:20:31.678]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:31.678]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:31.678]         }
[16:20:31.678]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:31.678]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:31.678]             base::sink(type = "output", split = FALSE)
[16:20:31.678]             base::close(...future.stdout)
[16:20:31.678]         }, add = TRUE)
[16:20:31.678]     }
[16:20:31.678]     ...future.frame <- base::sys.nframe()
[16:20:31.678]     ...future.conditions <- base::list()
[16:20:31.678]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:31.678]     if (FALSE) {
[16:20:31.678]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:31.678]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:31.678]     }
[16:20:31.678]     ...future.result <- base::tryCatch({
[16:20:31.678]         base::withCallingHandlers({
[16:20:31.678]             ...future.value <- base::withVisible(base::local(42L))
[16:20:31.678]             future::FutureResult(value = ...future.value$value, 
[16:20:31.678]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.678]                   ...future.rng), globalenv = if (FALSE) 
[16:20:31.678]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:31.678]                     ...future.globalenv.names))
[16:20:31.678]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:31.678]         }, condition = base::local({
[16:20:31.678]             c <- base::c
[16:20:31.678]             inherits <- base::inherits
[16:20:31.678]             invokeRestart <- base::invokeRestart
[16:20:31.678]             length <- base::length
[16:20:31.678]             list <- base::list
[16:20:31.678]             seq.int <- base::seq.int
[16:20:31.678]             signalCondition <- base::signalCondition
[16:20:31.678]             sys.calls <- base::sys.calls
[16:20:31.678]             `[[` <- base::`[[`
[16:20:31.678]             `+` <- base::`+`
[16:20:31.678]             `<<-` <- base::`<<-`
[16:20:31.678]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:31.678]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:31.678]                   3L)]
[16:20:31.678]             }
[16:20:31.678]             function(cond) {
[16:20:31.678]                 is_error <- inherits(cond, "error")
[16:20:31.678]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:31.678]                   NULL)
[16:20:31.678]                 if (is_error) {
[16:20:31.678]                   sessionInformation <- function() {
[16:20:31.678]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:31.678]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:31.678]                       search = base::search(), system = base::Sys.info())
[16:20:31.678]                   }
[16:20:31.678]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.678]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:31.678]                     cond$call), session = sessionInformation(), 
[16:20:31.678]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:31.678]                   signalCondition(cond)
[16:20:31.678]                 }
[16:20:31.678]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:31.678]                 "immediateCondition"))) {
[16:20:31.678]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:31.678]                   ...future.conditions[[length(...future.conditions) + 
[16:20:31.678]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:31.678]                   if (TRUE && !signal) {
[16:20:31.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.678]                     {
[16:20:31.678]                       inherits <- base::inherits
[16:20:31.678]                       invokeRestart <- base::invokeRestart
[16:20:31.678]                       is.null <- base::is.null
[16:20:31.678]                       muffled <- FALSE
[16:20:31.678]                       if (inherits(cond, "message")) {
[16:20:31.678]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.678]                         if (muffled) 
[16:20:31.678]                           invokeRestart("muffleMessage")
[16:20:31.678]                       }
[16:20:31.678]                       else if (inherits(cond, "warning")) {
[16:20:31.678]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.678]                         if (muffled) 
[16:20:31.678]                           invokeRestart("muffleWarning")
[16:20:31.678]                       }
[16:20:31.678]                       else if (inherits(cond, "condition")) {
[16:20:31.678]                         if (!is.null(pattern)) {
[16:20:31.678]                           computeRestarts <- base::computeRestarts
[16:20:31.678]                           grepl <- base::grepl
[16:20:31.678]                           restarts <- computeRestarts(cond)
[16:20:31.678]                           for (restart in restarts) {
[16:20:31.678]                             name <- restart$name
[16:20:31.678]                             if (is.null(name)) 
[16:20:31.678]                               next
[16:20:31.678]                             if (!grepl(pattern, name)) 
[16:20:31.678]                               next
[16:20:31.678]                             invokeRestart(restart)
[16:20:31.678]                             muffled <- TRUE
[16:20:31.678]                             break
[16:20:31.678]                           }
[16:20:31.678]                         }
[16:20:31.678]                       }
[16:20:31.678]                       invisible(muffled)
[16:20:31.678]                     }
[16:20:31.678]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.678]                   }
[16:20:31.678]                 }
[16:20:31.678]                 else {
[16:20:31.678]                   if (TRUE) {
[16:20:31.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:31.678]                     {
[16:20:31.678]                       inherits <- base::inherits
[16:20:31.678]                       invokeRestart <- base::invokeRestart
[16:20:31.678]                       is.null <- base::is.null
[16:20:31.678]                       muffled <- FALSE
[16:20:31.678]                       if (inherits(cond, "message")) {
[16:20:31.678]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:31.678]                         if (muffled) 
[16:20:31.678]                           invokeRestart("muffleMessage")
[16:20:31.678]                       }
[16:20:31.678]                       else if (inherits(cond, "warning")) {
[16:20:31.678]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:31.678]                         if (muffled) 
[16:20:31.678]                           invokeRestart("muffleWarning")
[16:20:31.678]                       }
[16:20:31.678]                       else if (inherits(cond, "condition")) {
[16:20:31.678]                         if (!is.null(pattern)) {
[16:20:31.678]                           computeRestarts <- base::computeRestarts
[16:20:31.678]                           grepl <- base::grepl
[16:20:31.678]                           restarts <- computeRestarts(cond)
[16:20:31.678]                           for (restart in restarts) {
[16:20:31.678]                             name <- restart$name
[16:20:31.678]                             if (is.null(name)) 
[16:20:31.678]                               next
[16:20:31.678]                             if (!grepl(pattern, name)) 
[16:20:31.678]                               next
[16:20:31.678]                             invokeRestart(restart)
[16:20:31.678]                             muffled <- TRUE
[16:20:31.678]                             break
[16:20:31.678]                           }
[16:20:31.678]                         }
[16:20:31.678]                       }
[16:20:31.678]                       invisible(muffled)
[16:20:31.678]                     }
[16:20:31.678]                     muffleCondition(cond, pattern = "^muffle")
[16:20:31.678]                   }
[16:20:31.678]                 }
[16:20:31.678]             }
[16:20:31.678]         }))
[16:20:31.678]     }, error = function(ex) {
[16:20:31.678]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:31.678]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:31.678]                 ...future.rng), started = ...future.startTime, 
[16:20:31.678]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:31.678]             version = "1.8"), class = "FutureResult")
[16:20:31.678]     }, finally = {
[16:20:31.678]         if (!identical(...future.workdir, getwd())) 
[16:20:31.678]             setwd(...future.workdir)
[16:20:31.678]         {
[16:20:31.678]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:31.678]                 ...future.oldOptions$nwarnings <- NULL
[16:20:31.678]             }
[16:20:31.678]             base::options(...future.oldOptions)
[16:20:31.678]             if (.Platform$OS.type == "windows") {
[16:20:31.678]                 old_names <- names(...future.oldEnvVars)
[16:20:31.678]                 envs <- base::Sys.getenv()
[16:20:31.678]                 names <- names(envs)
[16:20:31.678]                 common <- intersect(names, old_names)
[16:20:31.678]                 added <- setdiff(names, old_names)
[16:20:31.678]                 removed <- setdiff(old_names, names)
[16:20:31.678]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:31.678]                   envs[common]]
[16:20:31.678]                 NAMES <- toupper(changed)
[16:20:31.678]                 args <- list()
[16:20:31.678]                 for (kk in seq_along(NAMES)) {
[16:20:31.678]                   name <- changed[[kk]]
[16:20:31.678]                   NAME <- NAMES[[kk]]
[16:20:31.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.678]                     next
[16:20:31.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.678]                 }
[16:20:31.678]                 NAMES <- toupper(added)
[16:20:31.678]                 for (kk in seq_along(NAMES)) {
[16:20:31.678]                   name <- added[[kk]]
[16:20:31.678]                   NAME <- NAMES[[kk]]
[16:20:31.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.678]                     next
[16:20:31.678]                   args[[name]] <- ""
[16:20:31.678]                 }
[16:20:31.678]                 NAMES <- toupper(removed)
[16:20:31.678]                 for (kk in seq_along(NAMES)) {
[16:20:31.678]                   name <- removed[[kk]]
[16:20:31.678]                   NAME <- NAMES[[kk]]
[16:20:31.678]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:31.678]                     next
[16:20:31.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:31.678]                 }
[16:20:31.678]                 if (length(args) > 0) 
[16:20:31.678]                   base::do.call(base::Sys.setenv, args = args)
[16:20:31.678]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:31.678]             }
[16:20:31.678]             else {
[16:20:31.678]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:31.678]             }
[16:20:31.678]             {
[16:20:31.678]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:31.678]                   0L) {
[16:20:31.678]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:31.678]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:31.678]                   base::options(opts)
[16:20:31.678]                 }
[16:20:31.678]                 {
[16:20:31.678]                   {
[16:20:31.678]                     NULL
[16:20:31.678]                     RNGkind("Mersenne-Twister")
[16:20:31.678]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:31.678]                       inherits = FALSE)
[16:20:31.678]                   }
[16:20:31.678]                   options(future.plan = NULL)
[16:20:31.678]                   if (is.na(NA_character_)) 
[16:20:31.678]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:31.678]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:31.678]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:31.678]                     .init = FALSE)
[16:20:31.678]                 }
[16:20:31.678]             }
[16:20:31.678]         }
[16:20:31.678]     })
[16:20:31.678]     if (TRUE) {
[16:20:31.678]         base::sink(type = "output", split = FALSE)
[16:20:31.678]         if (TRUE) {
[16:20:31.678]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:31.678]         }
[16:20:31.678]         else {
[16:20:31.678]             ...future.result["stdout"] <- base::list(NULL)
[16:20:31.678]         }
[16:20:31.678]         base::close(...future.stdout)
[16:20:31.678]         ...future.stdout <- NULL
[16:20:31.678]     }
[16:20:31.678]     ...future.result$conditions <- ...future.conditions
[16:20:31.678]     ...future.result$finished <- base::Sys.time()
[16:20:31.678]     ...future.result
[16:20:31.678] }
[16:20:31.679] plan(): Setting new future strategy stack:
[16:20:31.679] List of future strategies:
[16:20:31.679] 1. sequential:
[16:20:31.679]    - args: function (..., envir = parent.frame())
[16:20:31.679]    - tweaked: FALSE
[16:20:31.679]    - call: NULL
[16:20:31.680] plan(): nbrOfWorkers() = 1
[16:20:31.680] plan(): Setting new future strategy stack:
[16:20:31.681] List of future strategies:
[16:20:31.681] 1. sequential:
[16:20:31.681]    - args: function (..., envir = parent.frame())
[16:20:31.681]    - tweaked: FALSE
[16:20:31.681]    - call: future::plan("sequential")
[16:20:31.681] plan(): nbrOfWorkers() = 1
[16:20:31.681] SequentialFuture started (and completed)
[16:20:31.681] - Launch lazy future ... done
[16:20:31.681] run() for ‘SequentialFuture’ ... done
> print(y)
[1] 42
> stopifnot(y == 42L)
> 
> message("*** future() w/ gc = TRUE ... DONE")
*** future() w/ gc = TRUE ... DONE
> 
> 
> message("*** future() - exceptions ...")
*** future() - exceptions ...
> 
> target <- list(name = "<unknown>", envir = new.env(), code = "Yo!", exists = TRUE)
> res <- tryCatch(get_future(target, mustExist = TRUE), error = identity)
[16:20:31.682] ERROR: Future (‘<unknown>’) not found in environment ‘<noname>’: ‘Yo!’
> stopifnot(inherits(res, "error"))
> 
> message("*** future() - exceptions ... DONE")
*** future() - exceptions ... DONE
> 
> message("*** future() ... DONE")
*** future() ... DONE
> 
> source("incl/end.R")
[16:20:31.683] plan(): Setting new future strategy stack:
[16:20:31.683] List of future strategies:
[16:20:31.683] 1. FutureStrategy:
[16:20:31.683]    - args: function (..., envir = parent.frame())
[16:20:31.683]    - tweaked: FALSE
[16:20:31.683]    - call: future::plan(oplan)
[16:20:31.694] plan(): nbrOfWorkers() = 1
> 
