
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:35:53.381] plan(): Setting new future strategy stack:
[13:35:53.382] List of future strategies:
[13:35:53.382] 1. sequential:
[13:35:53.382]    - args: function (..., envir = parent.frame())
[13:35:53.382]    - tweaked: FALSE
[13:35:53.382]    - call: future::plan("sequential")
[13:35:53.395] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[13:35:53.407] plan(): Setting new future strategy stack:
[13:35:53.408] List of future strategies:
[13:35:53.408] 1. multisession:
[13:35:53.408]    - args: function (..., workers = 2, envir = parent.frame())
[13:35:53.408]    - tweaked: TRUE
[13:35:53.408]    - call: plan(multisession, workers = 2)
[13:35:53.418] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:35:53.418] multisession:
[13:35:53.418] - args: function (..., workers = 2, envir = parent.frame())
[13:35:53.418] - tweaked: TRUE
[13:35:53.418] - call: plan(multisession, workers = 2)
[13:35:53.420] getGlobalsAndPackages() ...
[13:35:53.420] Not searching for globals
[13:35:53.420] - globals: [0] <none>
[13:35:53.420] getGlobalsAndPackages() ... DONE
[13:35:53.420] [local output] makeClusterPSOCK() ...
[13:35:53.450] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:35:53.451] [local output] Base port: 11777
[13:35:53.451] [local output] Getting setup options for 2 cluster nodes ...
[13:35:53.451] [local output]  - Node 1 of 2 ...
[13:35:53.451] [local output] localMachine=TRUE => revtunnel=FALSE

[13:35:53.452] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4cD67K/worker.rank=1.parallelly.parent=79486.1367e2720e993.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp4cD67K/worker.rank=1.parallelly.parent=79486.1367e2720e993.pid")'’
[13:35:53.640] - Possible to infer worker's PID: TRUE
[13:35:53.641] [local output] Rscript port: 11777

[13:35:53.641] [local output]  - Node 2 of 2 ...
[13:35:53.641] [local output] localMachine=TRUE => revtunnel=FALSE

[13:35:53.642] [local output] Rscript port: 11777

[13:35:53.642] [local output] Getting setup options for 2 cluster nodes ... done
[13:35:53.642] [local output]  - Parallel setup requested for some PSOCK nodes
[13:35:53.643] [local output] Setting up PSOCK nodes in parallel
[13:35:53.643] List of 36
[13:35:53.643]  $ worker          : chr "localhost"
[13:35:53.643]   ..- attr(*, "localhost")= logi TRUE
[13:35:53.643]  $ master          : chr "localhost"
[13:35:53.643]  $ port            : int 11777
[13:35:53.643]  $ connectTimeout  : num 120
[13:35:53.643]  $ timeout         : num 2592000
[13:35:53.643]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:35:53.643]  $ homogeneous     : logi TRUE
[13:35:53.643]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:35:53.643]  $ rscript_envs    : NULL
[13:35:53.643]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:35:53.643]  $ rscript_startup : NULL
[13:35:53.643]  $ rscript_sh      : chr "sh"
[13:35:53.643]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:35:53.643]  $ methods         : logi TRUE
[13:35:53.643]  $ socketOptions   : chr "no-delay"
[13:35:53.643]  $ useXDR          : logi FALSE
[13:35:53.643]  $ outfile         : chr "/dev/null"
[13:35:53.643]  $ renice          : int NA
[13:35:53.643]  $ rshcmd          : NULL
[13:35:53.643]  $ user            : chr(0) 
[13:35:53.643]  $ revtunnel       : logi FALSE
[13:35:53.643]  $ rshlogfile      : NULL
[13:35:53.643]  $ rshopts         : chr(0) 
[13:35:53.643]  $ rank            : int 1
[13:35:53.643]  $ manual          : logi FALSE
[13:35:53.643]  $ dryrun          : logi FALSE
[13:35:53.643]  $ quiet           : logi FALSE
[13:35:53.643]  $ setup_strategy  : chr "parallel"
[13:35:53.643]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:35:53.643]  $ pidfile         : chr "/tmp/Rtmp4cD67K/worker.rank=1.parallelly.parent=79486.1367e2720e993.pid"
[13:35:53.643]  $ rshcmd_label    : NULL
[13:35:53.643]  $ rsh_call        : NULL
[13:35:53.643]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:35:53.643]  $ localMachine    : logi TRUE
[13:35:53.643]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:35:53.643]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:35:53.643]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:35:53.643]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:35:53.643]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:35:53.643]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:35:53.643]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:35:53.643]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:35:53.643]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:35:53.643]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:35:53.643]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:35:53.643]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:35:53.643]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:35:53.643]  $ arguments       :List of 28
[13:35:53.643]   ..$ worker          : chr "localhost"
[13:35:53.643]   ..$ master          : NULL
[13:35:53.643]   ..$ port            : int 11777
[13:35:53.643]   ..$ connectTimeout  : num 120
[13:35:53.643]   ..$ timeout         : num 2592000
[13:35:53.643]   ..$ rscript         : NULL
[13:35:53.643]   ..$ homogeneous     : NULL
[13:35:53.643]   ..$ rscript_args    : NULL
[13:35:53.643]   ..$ rscript_envs    : NULL
[13:35:53.643]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:35:53.643]   ..$ rscript_startup : NULL
[13:35:53.643]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:35:53.643]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:35:53.643]   ..$ methods         : logi TRUE
[13:35:53.643]   ..$ socketOptions   : chr "no-delay"
[13:35:53.643]   ..$ useXDR          : logi FALSE
[13:35:53.643]   ..$ outfile         : chr "/dev/null"
[13:35:53.643]   ..$ renice          : int NA
[13:35:53.643]   ..$ rshcmd          : NULL
[13:35:53.643]   ..$ user            : NULL
[13:35:53.643]   ..$ revtunnel       : logi NA
[13:35:53.643]   ..$ rshlogfile      : NULL
[13:35:53.643]   ..$ rshopts         : NULL
[13:35:53.643]   ..$ rank            : int 1
[13:35:53.643]   ..$ manual          : logi FALSE
[13:35:53.643]   ..$ dryrun          : logi FALSE
[13:35:53.643]   ..$ quiet           : logi FALSE
[13:35:53.643]   ..$ setup_strategy  : chr "parallel"
[13:35:53.643]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:35:53.662] [local output] System call to launch all workers:
[13:35:53.662] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4cD67K/worker.rank=1.parallelly.parent=79486.1367e2720e993.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11777 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:35:53.662] [local output] Starting PSOCK main server
[13:35:53.668] [local output] Workers launched
[13:35:53.668] [local output] Waiting for workers to connect back
[13:35:53.668]  - [local output] 0 workers out of 2 ready
[13:35:53.912]  - [local output] 0 workers out of 2 ready
[13:35:53.913]  - [local output] 1 workers out of 2 ready
[13:35:53.913]  - [local output] 1 workers out of 2 ready
[13:35:53.914]  - [local output] 2 workers out of 2 ready
[13:35:53.914] [local output] Launching of workers completed
[13:35:53.914] [local output] Collecting session information from workers
[13:35:53.915] [local output]  - Worker #1 of 2
[13:35:53.915] [local output]  - Worker #2 of 2
[13:35:53.916] [local output] makeClusterPSOCK() ... done
[13:35:53.929] Packages needed by the future expression (n = 0): <none>
[13:35:53.929] Packages needed by future strategies (n = 0): <none>
[13:35:53.930] {
[13:35:53.930]     {
[13:35:53.930]         {
[13:35:53.930]             ...future.startTime <- base::Sys.time()
[13:35:53.930]             {
[13:35:53.930]                 {
[13:35:53.930]                   {
[13:35:53.930]                     {
[13:35:53.930]                       base::local({
[13:35:53.930]                         has_future <- base::requireNamespace("future", 
[13:35:53.930]                           quietly = TRUE)
[13:35:53.930]                         if (has_future) {
[13:35:53.930]                           ns <- base::getNamespace("future")
[13:35:53.930]                           version <- ns[[".package"]][["version"]]
[13:35:53.930]                           if (is.null(version)) 
[13:35:53.930]                             version <- utils::packageVersion("future")
[13:35:53.930]                         }
[13:35:53.930]                         else {
[13:35:53.930]                           version <- NULL
[13:35:53.930]                         }
[13:35:53.930]                         if (!has_future || version < "1.8.0") {
[13:35:53.930]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:53.930]                             "", base::R.version$version.string), 
[13:35:53.930]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:53.930]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:53.930]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:53.930]                               "release", "version")], collapse = " "), 
[13:35:53.930]                             hostname = base::Sys.info()[["nodename"]])
[13:35:53.930]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:53.930]                             info)
[13:35:53.930]                           info <- base::paste(info, collapse = "; ")
[13:35:53.930]                           if (!has_future) {
[13:35:53.930]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:53.930]                               info)
[13:35:53.930]                           }
[13:35:53.930]                           else {
[13:35:53.930]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:53.930]                               info, version)
[13:35:53.930]                           }
[13:35:53.930]                           base::stop(msg)
[13:35:53.930]                         }
[13:35:53.930]                       })
[13:35:53.930]                     }
[13:35:53.930]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:53.930]                     base::options(mc.cores = 1L)
[13:35:53.930]                   }
[13:35:53.930]                   ...future.strategy.old <- future::plan("list")
[13:35:53.930]                   options(future.plan = NULL)
[13:35:53.930]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:53.930]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:53.930]                 }
[13:35:53.930]                 ...future.workdir <- getwd()
[13:35:53.930]             }
[13:35:53.930]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:53.930]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:53.930]         }
[13:35:53.930]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:53.930]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:53.930]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:53.930]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:53.930]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:53.930]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:53.930]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:53.930]             base::names(...future.oldOptions))
[13:35:53.930]     }
[13:35:53.930]     if (FALSE) {
[13:35:53.930]     }
[13:35:53.930]     else {
[13:35:53.930]         if (TRUE) {
[13:35:53.930]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:53.930]                 open = "w")
[13:35:53.930]         }
[13:35:53.930]         else {
[13:35:53.930]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:53.930]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:53.930]         }
[13:35:53.930]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:53.930]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:53.930]             base::sink(type = "output", split = FALSE)
[13:35:53.930]             base::close(...future.stdout)
[13:35:53.930]         }, add = TRUE)
[13:35:53.930]     }
[13:35:53.930]     ...future.frame <- base::sys.nframe()
[13:35:53.930]     ...future.conditions <- base::list()
[13:35:53.930]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:53.930]     if (FALSE) {
[13:35:53.930]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:53.930]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:53.930]     }
[13:35:53.930]     ...future.result <- base::tryCatch({
[13:35:53.930]         base::withCallingHandlers({
[13:35:53.930]             ...future.value <- base::withVisible(base::local({
[13:35:53.930]                 ...future.makeSendCondition <- base::local({
[13:35:53.930]                   sendCondition <- NULL
[13:35:53.930]                   function(frame = 1L) {
[13:35:53.930]                     if (is.function(sendCondition)) 
[13:35:53.930]                       return(sendCondition)
[13:35:53.930]                     ns <- getNamespace("parallel")
[13:35:53.930]                     if (exists("sendData", mode = "function", 
[13:35:53.930]                       envir = ns)) {
[13:35:53.930]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:53.930]                         envir = ns)
[13:35:53.930]                       envir <- sys.frame(frame)
[13:35:53.930]                       master <- NULL
[13:35:53.930]                       while (!identical(envir, .GlobalEnv) && 
[13:35:53.930]                         !identical(envir, emptyenv())) {
[13:35:53.930]                         if (exists("master", mode = "list", envir = envir, 
[13:35:53.930]                           inherits = FALSE)) {
[13:35:53.930]                           master <- get("master", mode = "list", 
[13:35:53.930]                             envir = envir, inherits = FALSE)
[13:35:53.930]                           if (inherits(master, c("SOCKnode", 
[13:35:53.930]                             "SOCK0node"))) {
[13:35:53.930]                             sendCondition <<- function(cond) {
[13:35:53.930]                               data <- list(type = "VALUE", value = cond, 
[13:35:53.930]                                 success = TRUE)
[13:35:53.930]                               parallel_sendData(master, data)
[13:35:53.930]                             }
[13:35:53.930]                             return(sendCondition)
[13:35:53.930]                           }
[13:35:53.930]                         }
[13:35:53.930]                         frame <- frame + 1L
[13:35:53.930]                         envir <- sys.frame(frame)
[13:35:53.930]                       }
[13:35:53.930]                     }
[13:35:53.930]                     sendCondition <<- function(cond) NULL
[13:35:53.930]                   }
[13:35:53.930]                 })
[13:35:53.930]                 withCallingHandlers({
[13:35:53.930]                   NA
[13:35:53.930]                 }, immediateCondition = function(cond) {
[13:35:53.930]                   sendCondition <- ...future.makeSendCondition()
[13:35:53.930]                   sendCondition(cond)
[13:35:53.930]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:53.930]                   {
[13:35:53.930]                     inherits <- base::inherits
[13:35:53.930]                     invokeRestart <- base::invokeRestart
[13:35:53.930]                     is.null <- base::is.null
[13:35:53.930]                     muffled <- FALSE
[13:35:53.930]                     if (inherits(cond, "message")) {
[13:35:53.930]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:53.930]                       if (muffled) 
[13:35:53.930]                         invokeRestart("muffleMessage")
[13:35:53.930]                     }
[13:35:53.930]                     else if (inherits(cond, "warning")) {
[13:35:53.930]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:53.930]                       if (muffled) 
[13:35:53.930]                         invokeRestart("muffleWarning")
[13:35:53.930]                     }
[13:35:53.930]                     else if (inherits(cond, "condition")) {
[13:35:53.930]                       if (!is.null(pattern)) {
[13:35:53.930]                         computeRestarts <- base::computeRestarts
[13:35:53.930]                         grepl <- base::grepl
[13:35:53.930]                         restarts <- computeRestarts(cond)
[13:35:53.930]                         for (restart in restarts) {
[13:35:53.930]                           name <- restart$name
[13:35:53.930]                           if (is.null(name)) 
[13:35:53.930]                             next
[13:35:53.930]                           if (!grepl(pattern, name)) 
[13:35:53.930]                             next
[13:35:53.930]                           invokeRestart(restart)
[13:35:53.930]                           muffled <- TRUE
[13:35:53.930]                           break
[13:35:53.930]                         }
[13:35:53.930]                       }
[13:35:53.930]                     }
[13:35:53.930]                     invisible(muffled)
[13:35:53.930]                   }
[13:35:53.930]                   muffleCondition(cond)
[13:35:53.930]                 })
[13:35:53.930]             }))
[13:35:53.930]             future::FutureResult(value = ...future.value$value, 
[13:35:53.930]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:53.930]                   ...future.rng), globalenv = if (FALSE) 
[13:35:53.930]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:53.930]                     ...future.globalenv.names))
[13:35:53.930]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:53.930]         }, condition = base::local({
[13:35:53.930]             c <- base::c
[13:35:53.930]             inherits <- base::inherits
[13:35:53.930]             invokeRestart <- base::invokeRestart
[13:35:53.930]             length <- base::length
[13:35:53.930]             list <- base::list
[13:35:53.930]             seq.int <- base::seq.int
[13:35:53.930]             signalCondition <- base::signalCondition
[13:35:53.930]             sys.calls <- base::sys.calls
[13:35:53.930]             `[[` <- base::`[[`
[13:35:53.930]             `+` <- base::`+`
[13:35:53.930]             `<<-` <- base::`<<-`
[13:35:53.930]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:53.930]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:53.930]                   3L)]
[13:35:53.930]             }
[13:35:53.930]             function(cond) {
[13:35:53.930]                 is_error <- inherits(cond, "error")
[13:35:53.930]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:53.930]                   NULL)
[13:35:53.930]                 if (is_error) {
[13:35:53.930]                   sessionInformation <- function() {
[13:35:53.930]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:53.930]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:53.930]                       search = base::search(), system = base::Sys.info())
[13:35:53.930]                   }
[13:35:53.930]                   ...future.conditions[[length(...future.conditions) + 
[13:35:53.930]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:53.930]                     cond$call), session = sessionInformation(), 
[13:35:53.930]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:53.930]                   signalCondition(cond)
[13:35:53.930]                 }
[13:35:53.930]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:53.930]                 "immediateCondition"))) {
[13:35:53.930]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:53.930]                   ...future.conditions[[length(...future.conditions) + 
[13:35:53.930]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:53.930]                   if (TRUE && !signal) {
[13:35:53.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:53.930]                     {
[13:35:53.930]                       inherits <- base::inherits
[13:35:53.930]                       invokeRestart <- base::invokeRestart
[13:35:53.930]                       is.null <- base::is.null
[13:35:53.930]                       muffled <- FALSE
[13:35:53.930]                       if (inherits(cond, "message")) {
[13:35:53.930]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:53.930]                         if (muffled) 
[13:35:53.930]                           invokeRestart("muffleMessage")
[13:35:53.930]                       }
[13:35:53.930]                       else if (inherits(cond, "warning")) {
[13:35:53.930]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:53.930]                         if (muffled) 
[13:35:53.930]                           invokeRestart("muffleWarning")
[13:35:53.930]                       }
[13:35:53.930]                       else if (inherits(cond, "condition")) {
[13:35:53.930]                         if (!is.null(pattern)) {
[13:35:53.930]                           computeRestarts <- base::computeRestarts
[13:35:53.930]                           grepl <- base::grepl
[13:35:53.930]                           restarts <- computeRestarts(cond)
[13:35:53.930]                           for (restart in restarts) {
[13:35:53.930]                             name <- restart$name
[13:35:53.930]                             if (is.null(name)) 
[13:35:53.930]                               next
[13:35:53.930]                             if (!grepl(pattern, name)) 
[13:35:53.930]                               next
[13:35:53.930]                             invokeRestart(restart)
[13:35:53.930]                             muffled <- TRUE
[13:35:53.930]                             break
[13:35:53.930]                           }
[13:35:53.930]                         }
[13:35:53.930]                       }
[13:35:53.930]                       invisible(muffled)
[13:35:53.930]                     }
[13:35:53.930]                     muffleCondition(cond, pattern = "^muffle")
[13:35:53.930]                   }
[13:35:53.930]                 }
[13:35:53.930]                 else {
[13:35:53.930]                   if (TRUE) {
[13:35:53.930]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:53.930]                     {
[13:35:53.930]                       inherits <- base::inherits
[13:35:53.930]                       invokeRestart <- base::invokeRestart
[13:35:53.930]                       is.null <- base::is.null
[13:35:53.930]                       muffled <- FALSE
[13:35:53.930]                       if (inherits(cond, "message")) {
[13:35:53.930]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:53.930]                         if (muffled) 
[13:35:53.930]                           invokeRestart("muffleMessage")
[13:35:53.930]                       }
[13:35:53.930]                       else if (inherits(cond, "warning")) {
[13:35:53.930]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:53.930]                         if (muffled) 
[13:35:53.930]                           invokeRestart("muffleWarning")
[13:35:53.930]                       }
[13:35:53.930]                       else if (inherits(cond, "condition")) {
[13:35:53.930]                         if (!is.null(pattern)) {
[13:35:53.930]                           computeRestarts <- base::computeRestarts
[13:35:53.930]                           grepl <- base::grepl
[13:35:53.930]                           restarts <- computeRestarts(cond)
[13:35:53.930]                           for (restart in restarts) {
[13:35:53.930]                             name <- restart$name
[13:35:53.930]                             if (is.null(name)) 
[13:35:53.930]                               next
[13:35:53.930]                             if (!grepl(pattern, name)) 
[13:35:53.930]                               next
[13:35:53.930]                             invokeRestart(restart)
[13:35:53.930]                             muffled <- TRUE
[13:35:53.930]                             break
[13:35:53.930]                           }
[13:35:53.930]                         }
[13:35:53.930]                       }
[13:35:53.930]                       invisible(muffled)
[13:35:53.930]                     }
[13:35:53.930]                     muffleCondition(cond, pattern = "^muffle")
[13:35:53.930]                   }
[13:35:53.930]                 }
[13:35:53.930]             }
[13:35:53.930]         }))
[13:35:53.930]     }, error = function(ex) {
[13:35:53.930]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:53.930]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:53.930]                 ...future.rng), started = ...future.startTime, 
[13:35:53.930]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:53.930]             version = "1.8"), class = "FutureResult")
[13:35:53.930]     }, finally = {
[13:35:53.930]         if (!identical(...future.workdir, getwd())) 
[13:35:53.930]             setwd(...future.workdir)
[13:35:53.930]         {
[13:35:53.930]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:53.930]                 ...future.oldOptions$nwarnings <- NULL
[13:35:53.930]             }
[13:35:53.930]             base::options(...future.oldOptions)
[13:35:53.930]             if (.Platform$OS.type == "windows") {
[13:35:53.930]                 old_names <- names(...future.oldEnvVars)
[13:35:53.930]                 envs <- base::Sys.getenv()
[13:35:53.930]                 names <- names(envs)
[13:35:53.930]                 common <- intersect(names, old_names)
[13:35:53.930]                 added <- setdiff(names, old_names)
[13:35:53.930]                 removed <- setdiff(old_names, names)
[13:35:53.930]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:53.930]                   envs[common]]
[13:35:53.930]                 NAMES <- toupper(changed)
[13:35:53.930]                 args <- list()
[13:35:53.930]                 for (kk in seq_along(NAMES)) {
[13:35:53.930]                   name <- changed[[kk]]
[13:35:53.930]                   NAME <- NAMES[[kk]]
[13:35:53.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:53.930]                     next
[13:35:53.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:53.930]                 }
[13:35:53.930]                 NAMES <- toupper(added)
[13:35:53.930]                 for (kk in seq_along(NAMES)) {
[13:35:53.930]                   name <- added[[kk]]
[13:35:53.930]                   NAME <- NAMES[[kk]]
[13:35:53.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:53.930]                     next
[13:35:53.930]                   args[[name]] <- ""
[13:35:53.930]                 }
[13:35:53.930]                 NAMES <- toupper(removed)
[13:35:53.930]                 for (kk in seq_along(NAMES)) {
[13:35:53.930]                   name <- removed[[kk]]
[13:35:53.930]                   NAME <- NAMES[[kk]]
[13:35:53.930]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:53.930]                     next
[13:35:53.930]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:53.930]                 }
[13:35:53.930]                 if (length(args) > 0) 
[13:35:53.930]                   base::do.call(base::Sys.setenv, args = args)
[13:35:53.930]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:53.930]             }
[13:35:53.930]             else {
[13:35:53.930]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:53.930]             }
[13:35:53.930]             {
[13:35:53.930]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:53.930]                   0L) {
[13:35:53.930]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:53.930]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:53.930]                   base::options(opts)
[13:35:53.930]                 }
[13:35:53.930]                 {
[13:35:53.930]                   {
[13:35:53.930]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:53.930]                     NULL
[13:35:53.930]                   }
[13:35:53.930]                   options(future.plan = NULL)
[13:35:53.930]                   if (is.na(NA_character_)) 
[13:35:53.930]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:53.930]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:53.930]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:53.930]                     .init = FALSE)
[13:35:53.930]                 }
[13:35:53.930]             }
[13:35:53.930]         }
[13:35:53.930]     })
[13:35:53.930]     if (TRUE) {
[13:35:53.930]         base::sink(type = "output", split = FALSE)
[13:35:53.930]         if (TRUE) {
[13:35:53.930]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:53.930]         }
[13:35:53.930]         else {
[13:35:53.930]             ...future.result["stdout"] <- base::list(NULL)
[13:35:53.930]         }
[13:35:53.930]         base::close(...future.stdout)
[13:35:53.930]         ...future.stdout <- NULL
[13:35:53.930]     }
[13:35:53.930]     ...future.result$conditions <- ...future.conditions
[13:35:53.930]     ...future.result$finished <- base::Sys.time()
[13:35:53.930]     ...future.result
[13:35:53.930] }
[13:35:53.983] MultisessionFuture started
[13:35:53.984] result() for ClusterFuture ...
[13:35:53.985] receiveMessageFromWorker() for ClusterFuture ...
[13:35:53.985] - Validating connection of MultisessionFuture
[13:35:54.017] - received message: FutureResult
[13:35:54.018] - Received FutureResult
[13:35:54.020] - Erased future from FutureRegistry
[13:35:54.021] result() for ClusterFuture ...
[13:35:54.021] - result already collected: FutureResult
[13:35:54.021] result() for ClusterFuture ... done
[13:35:54.021] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:54.021] result() for ClusterFuture ... done
[13:35:54.021] result() for ClusterFuture ...
[13:35:54.022] - result already collected: FutureResult
[13:35:54.022] result() for ClusterFuture ... done
[13:35:54.022] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:35:54.022] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[13:35:54.022] getGlobalsAndPackages() ...
[13:35:54.023] Searching for globals...
[13:35:54.029] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[13:35:54.030] Searching for globals ... DONE
[13:35:54.030] Resolving globals: FALSE
[13:35:54.031] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[13:35:54.032] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:35:54.032] - globals: [2] ‘slow_fcn’, ‘x’
[13:35:54.032] 
[13:35:54.032] getGlobalsAndPackages() ... DONE
[13:35:54.034] run() for ‘Future’ ...
[13:35:54.034] - state: ‘created’
[13:35:54.034] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:35:54.046] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:35:54.046] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:35:54.046]   - Field: ‘node’
[13:35:54.046]   - Field: ‘label’
[13:35:54.046]   - Field: ‘local’
[13:35:54.046]   - Field: ‘owner’
[13:35:54.046]   - Field: ‘envir’
[13:35:54.046]   - Field: ‘workers’
[13:35:54.046]   - Field: ‘packages’
[13:35:54.046]   - Field: ‘gc’
[13:35:54.047]   - Field: ‘conditions’
[13:35:54.047]   - Field: ‘persistent’
[13:35:54.047]   - Field: ‘expr’
[13:35:54.047]   - Field: ‘uuid’
[13:35:54.047]   - Field: ‘seed’
[13:35:54.047]   - Field: ‘version’
[13:35:54.047]   - Field: ‘result’
[13:35:54.047]   - Field: ‘asynchronous’
[13:35:54.048]   - Field: ‘calls’
[13:35:54.048]   - Field: ‘globals’
[13:35:54.048]   - Field: ‘stdout’
[13:35:54.048]   - Field: ‘earlySignal’
[13:35:54.048]   - Field: ‘lazy’
[13:35:54.048]   - Field: ‘state’
[13:35:54.048] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:35:54.048] - Launch lazy future ...
[13:35:54.049] Packages needed by the future expression (n = 0): <none>
[13:35:54.049] Packages needed by future strategies (n = 0): <none>
[13:35:54.049] {
[13:35:54.049]     {
[13:35:54.049]         {
[13:35:54.049]             ...future.startTime <- base::Sys.time()
[13:35:54.049]             {
[13:35:54.049]                 {
[13:35:54.049]                   {
[13:35:54.049]                     {
[13:35:54.049]                       base::local({
[13:35:54.049]                         has_future <- base::requireNamespace("future", 
[13:35:54.049]                           quietly = TRUE)
[13:35:54.049]                         if (has_future) {
[13:35:54.049]                           ns <- base::getNamespace("future")
[13:35:54.049]                           version <- ns[[".package"]][["version"]]
[13:35:54.049]                           if (is.null(version)) 
[13:35:54.049]                             version <- utils::packageVersion("future")
[13:35:54.049]                         }
[13:35:54.049]                         else {
[13:35:54.049]                           version <- NULL
[13:35:54.049]                         }
[13:35:54.049]                         if (!has_future || version < "1.8.0") {
[13:35:54.049]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:54.049]                             "", base::R.version$version.string), 
[13:35:54.049]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:54.049]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:54.049]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:54.049]                               "release", "version")], collapse = " "), 
[13:35:54.049]                             hostname = base::Sys.info()[["nodename"]])
[13:35:54.049]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:54.049]                             info)
[13:35:54.049]                           info <- base::paste(info, collapse = "; ")
[13:35:54.049]                           if (!has_future) {
[13:35:54.049]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:54.049]                               info)
[13:35:54.049]                           }
[13:35:54.049]                           else {
[13:35:54.049]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:54.049]                               info, version)
[13:35:54.049]                           }
[13:35:54.049]                           base::stop(msg)
[13:35:54.049]                         }
[13:35:54.049]                       })
[13:35:54.049]                     }
[13:35:54.049]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:54.049]                     base::options(mc.cores = 1L)
[13:35:54.049]                   }
[13:35:54.049]                   ...future.strategy.old <- future::plan("list")
[13:35:54.049]                   options(future.plan = NULL)
[13:35:54.049]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.049]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:54.049]                 }
[13:35:54.049]                 ...future.workdir <- getwd()
[13:35:54.049]             }
[13:35:54.049]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:54.049]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:54.049]         }
[13:35:54.049]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:54.049]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:54.049]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:54.049]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:54.049]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:54.049]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:54.049]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:54.049]             base::names(...future.oldOptions))
[13:35:54.049]     }
[13:35:54.049]     if (FALSE) {
[13:35:54.049]     }
[13:35:54.049]     else {
[13:35:54.049]         if (TRUE) {
[13:35:54.049]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:54.049]                 open = "w")
[13:35:54.049]         }
[13:35:54.049]         else {
[13:35:54.049]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:54.049]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:54.049]         }
[13:35:54.049]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:54.049]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:54.049]             base::sink(type = "output", split = FALSE)
[13:35:54.049]             base::close(...future.stdout)
[13:35:54.049]         }, add = TRUE)
[13:35:54.049]     }
[13:35:54.049]     ...future.frame <- base::sys.nframe()
[13:35:54.049]     ...future.conditions <- base::list()
[13:35:54.049]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:54.049]     if (FALSE) {
[13:35:54.049]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:54.049]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:54.049]     }
[13:35:54.049]     ...future.result <- base::tryCatch({
[13:35:54.049]         base::withCallingHandlers({
[13:35:54.049]             ...future.value <- base::withVisible(base::local({
[13:35:54.049]                 ...future.makeSendCondition <- base::local({
[13:35:54.049]                   sendCondition <- NULL
[13:35:54.049]                   function(frame = 1L) {
[13:35:54.049]                     if (is.function(sendCondition)) 
[13:35:54.049]                       return(sendCondition)
[13:35:54.049]                     ns <- getNamespace("parallel")
[13:35:54.049]                     if (exists("sendData", mode = "function", 
[13:35:54.049]                       envir = ns)) {
[13:35:54.049]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:54.049]                         envir = ns)
[13:35:54.049]                       envir <- sys.frame(frame)
[13:35:54.049]                       master <- NULL
[13:35:54.049]                       while (!identical(envir, .GlobalEnv) && 
[13:35:54.049]                         !identical(envir, emptyenv())) {
[13:35:54.049]                         if (exists("master", mode = "list", envir = envir, 
[13:35:54.049]                           inherits = FALSE)) {
[13:35:54.049]                           master <- get("master", mode = "list", 
[13:35:54.049]                             envir = envir, inherits = FALSE)
[13:35:54.049]                           if (inherits(master, c("SOCKnode", 
[13:35:54.049]                             "SOCK0node"))) {
[13:35:54.049]                             sendCondition <<- function(cond) {
[13:35:54.049]                               data <- list(type = "VALUE", value = cond, 
[13:35:54.049]                                 success = TRUE)
[13:35:54.049]                               parallel_sendData(master, data)
[13:35:54.049]                             }
[13:35:54.049]                             return(sendCondition)
[13:35:54.049]                           }
[13:35:54.049]                         }
[13:35:54.049]                         frame <- frame + 1L
[13:35:54.049]                         envir <- sys.frame(frame)
[13:35:54.049]                       }
[13:35:54.049]                     }
[13:35:54.049]                     sendCondition <<- function(cond) NULL
[13:35:54.049]                   }
[13:35:54.049]                 })
[13:35:54.049]                 withCallingHandlers({
[13:35:54.049]                   slow_fcn(x)
[13:35:54.049]                 }, immediateCondition = function(cond) {
[13:35:54.049]                   sendCondition <- ...future.makeSendCondition()
[13:35:54.049]                   sendCondition(cond)
[13:35:54.049]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.049]                   {
[13:35:54.049]                     inherits <- base::inherits
[13:35:54.049]                     invokeRestart <- base::invokeRestart
[13:35:54.049]                     is.null <- base::is.null
[13:35:54.049]                     muffled <- FALSE
[13:35:54.049]                     if (inherits(cond, "message")) {
[13:35:54.049]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:54.049]                       if (muffled) 
[13:35:54.049]                         invokeRestart("muffleMessage")
[13:35:54.049]                     }
[13:35:54.049]                     else if (inherits(cond, "warning")) {
[13:35:54.049]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:54.049]                       if (muffled) 
[13:35:54.049]                         invokeRestart("muffleWarning")
[13:35:54.049]                     }
[13:35:54.049]                     else if (inherits(cond, "condition")) {
[13:35:54.049]                       if (!is.null(pattern)) {
[13:35:54.049]                         computeRestarts <- base::computeRestarts
[13:35:54.049]                         grepl <- base::grepl
[13:35:54.049]                         restarts <- computeRestarts(cond)
[13:35:54.049]                         for (restart in restarts) {
[13:35:54.049]                           name <- restart$name
[13:35:54.049]                           if (is.null(name)) 
[13:35:54.049]                             next
[13:35:54.049]                           if (!grepl(pattern, name)) 
[13:35:54.049]                             next
[13:35:54.049]                           invokeRestart(restart)
[13:35:54.049]                           muffled <- TRUE
[13:35:54.049]                           break
[13:35:54.049]                         }
[13:35:54.049]                       }
[13:35:54.049]                     }
[13:35:54.049]                     invisible(muffled)
[13:35:54.049]                   }
[13:35:54.049]                   muffleCondition(cond)
[13:35:54.049]                 })
[13:35:54.049]             }))
[13:35:54.049]             future::FutureResult(value = ...future.value$value, 
[13:35:54.049]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.049]                   ...future.rng), globalenv = if (FALSE) 
[13:35:54.049]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:54.049]                     ...future.globalenv.names))
[13:35:54.049]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:54.049]         }, condition = base::local({
[13:35:54.049]             c <- base::c
[13:35:54.049]             inherits <- base::inherits
[13:35:54.049]             invokeRestart <- base::invokeRestart
[13:35:54.049]             length <- base::length
[13:35:54.049]             list <- base::list
[13:35:54.049]             seq.int <- base::seq.int
[13:35:54.049]             signalCondition <- base::signalCondition
[13:35:54.049]             sys.calls <- base::sys.calls
[13:35:54.049]             `[[` <- base::`[[`
[13:35:54.049]             `+` <- base::`+`
[13:35:54.049]             `<<-` <- base::`<<-`
[13:35:54.049]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:54.049]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:54.049]                   3L)]
[13:35:54.049]             }
[13:35:54.049]             function(cond) {
[13:35:54.049]                 is_error <- inherits(cond, "error")
[13:35:54.049]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:54.049]                   NULL)
[13:35:54.049]                 if (is_error) {
[13:35:54.049]                   sessionInformation <- function() {
[13:35:54.049]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:54.049]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:54.049]                       search = base::search(), system = base::Sys.info())
[13:35:54.049]                   }
[13:35:54.049]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.049]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:54.049]                     cond$call), session = sessionInformation(), 
[13:35:54.049]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:54.049]                   signalCondition(cond)
[13:35:54.049]                 }
[13:35:54.049]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:54.049]                 "immediateCondition"))) {
[13:35:54.049]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:54.049]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.049]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:54.049]                   if (TRUE && !signal) {
[13:35:54.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.049]                     {
[13:35:54.049]                       inherits <- base::inherits
[13:35:54.049]                       invokeRestart <- base::invokeRestart
[13:35:54.049]                       is.null <- base::is.null
[13:35:54.049]                       muffled <- FALSE
[13:35:54.049]                       if (inherits(cond, "message")) {
[13:35:54.049]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.049]                         if (muffled) 
[13:35:54.049]                           invokeRestart("muffleMessage")
[13:35:54.049]                       }
[13:35:54.049]                       else if (inherits(cond, "warning")) {
[13:35:54.049]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.049]                         if (muffled) 
[13:35:54.049]                           invokeRestart("muffleWarning")
[13:35:54.049]                       }
[13:35:54.049]                       else if (inherits(cond, "condition")) {
[13:35:54.049]                         if (!is.null(pattern)) {
[13:35:54.049]                           computeRestarts <- base::computeRestarts
[13:35:54.049]                           grepl <- base::grepl
[13:35:54.049]                           restarts <- computeRestarts(cond)
[13:35:54.049]                           for (restart in restarts) {
[13:35:54.049]                             name <- restart$name
[13:35:54.049]                             if (is.null(name)) 
[13:35:54.049]                               next
[13:35:54.049]                             if (!grepl(pattern, name)) 
[13:35:54.049]                               next
[13:35:54.049]                             invokeRestart(restart)
[13:35:54.049]                             muffled <- TRUE
[13:35:54.049]                             break
[13:35:54.049]                           }
[13:35:54.049]                         }
[13:35:54.049]                       }
[13:35:54.049]                       invisible(muffled)
[13:35:54.049]                     }
[13:35:54.049]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.049]                   }
[13:35:54.049]                 }
[13:35:54.049]                 else {
[13:35:54.049]                   if (TRUE) {
[13:35:54.049]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.049]                     {
[13:35:54.049]                       inherits <- base::inherits
[13:35:54.049]                       invokeRestart <- base::invokeRestart
[13:35:54.049]                       is.null <- base::is.null
[13:35:54.049]                       muffled <- FALSE
[13:35:54.049]                       if (inherits(cond, "message")) {
[13:35:54.049]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.049]                         if (muffled) 
[13:35:54.049]                           invokeRestart("muffleMessage")
[13:35:54.049]                       }
[13:35:54.049]                       else if (inherits(cond, "warning")) {
[13:35:54.049]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.049]                         if (muffled) 
[13:35:54.049]                           invokeRestart("muffleWarning")
[13:35:54.049]                       }
[13:35:54.049]                       else if (inherits(cond, "condition")) {
[13:35:54.049]                         if (!is.null(pattern)) {
[13:35:54.049]                           computeRestarts <- base::computeRestarts
[13:35:54.049]                           grepl <- base::grepl
[13:35:54.049]                           restarts <- computeRestarts(cond)
[13:35:54.049]                           for (restart in restarts) {
[13:35:54.049]                             name <- restart$name
[13:35:54.049]                             if (is.null(name)) 
[13:35:54.049]                               next
[13:35:54.049]                             if (!grepl(pattern, name)) 
[13:35:54.049]                               next
[13:35:54.049]                             invokeRestart(restart)
[13:35:54.049]                             muffled <- TRUE
[13:35:54.049]                             break
[13:35:54.049]                           }
[13:35:54.049]                         }
[13:35:54.049]                       }
[13:35:54.049]                       invisible(muffled)
[13:35:54.049]                     }
[13:35:54.049]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.049]                   }
[13:35:54.049]                 }
[13:35:54.049]             }
[13:35:54.049]         }))
[13:35:54.049]     }, error = function(ex) {
[13:35:54.049]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:54.049]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.049]                 ...future.rng), started = ...future.startTime, 
[13:35:54.049]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:54.049]             version = "1.8"), class = "FutureResult")
[13:35:54.049]     }, finally = {
[13:35:54.049]         if (!identical(...future.workdir, getwd())) 
[13:35:54.049]             setwd(...future.workdir)
[13:35:54.049]         {
[13:35:54.049]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:54.049]                 ...future.oldOptions$nwarnings <- NULL
[13:35:54.049]             }
[13:35:54.049]             base::options(...future.oldOptions)
[13:35:54.049]             if (.Platform$OS.type == "windows") {
[13:35:54.049]                 old_names <- names(...future.oldEnvVars)
[13:35:54.049]                 envs <- base::Sys.getenv()
[13:35:54.049]                 names <- names(envs)
[13:35:54.049]                 common <- intersect(names, old_names)
[13:35:54.049]                 added <- setdiff(names, old_names)
[13:35:54.049]                 removed <- setdiff(old_names, names)
[13:35:54.049]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:54.049]                   envs[common]]
[13:35:54.049]                 NAMES <- toupper(changed)
[13:35:54.049]                 args <- list()
[13:35:54.049]                 for (kk in seq_along(NAMES)) {
[13:35:54.049]                   name <- changed[[kk]]
[13:35:54.049]                   NAME <- NAMES[[kk]]
[13:35:54.049]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.049]                     next
[13:35:54.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.049]                 }
[13:35:54.049]                 NAMES <- toupper(added)
[13:35:54.049]                 for (kk in seq_along(NAMES)) {
[13:35:54.049]                   name <- added[[kk]]
[13:35:54.049]                   NAME <- NAMES[[kk]]
[13:35:54.049]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.049]                     next
[13:35:54.049]                   args[[name]] <- ""
[13:35:54.049]                 }
[13:35:54.049]                 NAMES <- toupper(removed)
[13:35:54.049]                 for (kk in seq_along(NAMES)) {
[13:35:54.049]                   name <- removed[[kk]]
[13:35:54.049]                   NAME <- NAMES[[kk]]
[13:35:54.049]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.049]                     next
[13:35:54.049]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.049]                 }
[13:35:54.049]                 if (length(args) > 0) 
[13:35:54.049]                   base::do.call(base::Sys.setenv, args = args)
[13:35:54.049]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:54.049]             }
[13:35:54.049]             else {
[13:35:54.049]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:54.049]             }
[13:35:54.049]             {
[13:35:54.049]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:54.049]                   0L) {
[13:35:54.049]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:54.049]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:54.049]                   base::options(opts)
[13:35:54.049]                 }
[13:35:54.049]                 {
[13:35:54.049]                   {
[13:35:54.049]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:54.049]                     NULL
[13:35:54.049]                   }
[13:35:54.049]                   options(future.plan = NULL)
[13:35:54.049]                   if (is.na(NA_character_)) 
[13:35:54.049]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.049]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:54.049]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:54.049]                     .init = FALSE)
[13:35:54.049]                 }
[13:35:54.049]             }
[13:35:54.049]         }
[13:35:54.049]     })
[13:35:54.049]     if (TRUE) {
[13:35:54.049]         base::sink(type = "output", split = FALSE)
[13:35:54.049]         if (TRUE) {
[13:35:54.049]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:54.049]         }
[13:35:54.049]         else {
[13:35:54.049]             ...future.result["stdout"] <- base::list(NULL)
[13:35:54.049]         }
[13:35:54.049]         base::close(...future.stdout)
[13:35:54.049]         ...future.stdout <- NULL
[13:35:54.049]     }
[13:35:54.049]     ...future.result$conditions <- ...future.conditions
[13:35:54.049]     ...future.result$finished <- base::Sys.time()
[13:35:54.049]     ...future.result
[13:35:54.049] }
[13:35:54.055] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[13:35:54.055] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[13:35:54.056] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[13:35:54.056] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:35:54.056] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:35:54.056] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[13:35:54.058] MultisessionFuture started
[13:35:54.059] - Launch lazy future ... done
[13:35:54.059] run() for ‘MultisessionFuture’ ... done
[13:35:54.061] getGlobalsAndPackages() ...
[13:35:54.061] Searching for globals...
[13:35:54.067] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[13:35:54.067] Searching for globals ... DONE
[13:35:54.067] Resolving globals: FALSE
[13:35:54.068] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[13:35:54.068] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:35:54.068] - globals: [2] ‘slow_fcn’, ‘x’
[13:35:54.068] 
[13:35:54.068] getGlobalsAndPackages() ... DONE
[13:35:54.069] run() for ‘Future’ ...
[13:35:54.069] - state: ‘created’
[13:35:54.069] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:35:54.079] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:35:54.080] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:35:54.080]   - Field: ‘node’
[13:35:54.080]   - Field: ‘label’
[13:35:54.080]   - Field: ‘local’
[13:35:54.080]   - Field: ‘owner’
[13:35:54.080]   - Field: ‘envir’
[13:35:54.080]   - Field: ‘workers’
[13:35:54.080]   - Field: ‘packages’
[13:35:54.080]   - Field: ‘gc’
[13:35:54.080]   - Field: ‘conditions’
[13:35:54.080]   - Field: ‘persistent’
[13:35:54.081]   - Field: ‘expr’
[13:35:54.081]   - Field: ‘uuid’
[13:35:54.081]   - Field: ‘seed’
[13:35:54.081]   - Field: ‘version’
[13:35:54.081]   - Field: ‘result’
[13:35:54.081]   - Field: ‘asynchronous’
[13:35:54.081]   - Field: ‘calls’
[13:35:54.081]   - Field: ‘globals’
[13:35:54.081]   - Field: ‘stdout’
[13:35:54.081]   - Field: ‘earlySignal’
[13:35:54.081]   - Field: ‘lazy’
[13:35:54.081]   - Field: ‘state’
[13:35:54.082] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:35:54.082] - Launch lazy future ...
[13:35:54.082] Packages needed by the future expression (n = 0): <none>
[13:35:54.082] Packages needed by future strategies (n = 0): <none>
[13:35:54.082] {
[13:35:54.082]     {
[13:35:54.082]         {
[13:35:54.082]             ...future.startTime <- base::Sys.time()
[13:35:54.082]             {
[13:35:54.082]                 {
[13:35:54.082]                   {
[13:35:54.082]                     {
[13:35:54.082]                       base::local({
[13:35:54.082]                         has_future <- base::requireNamespace("future", 
[13:35:54.082]                           quietly = TRUE)
[13:35:54.082]                         if (has_future) {
[13:35:54.082]                           ns <- base::getNamespace("future")
[13:35:54.082]                           version <- ns[[".package"]][["version"]]
[13:35:54.082]                           if (is.null(version)) 
[13:35:54.082]                             version <- utils::packageVersion("future")
[13:35:54.082]                         }
[13:35:54.082]                         else {
[13:35:54.082]                           version <- NULL
[13:35:54.082]                         }
[13:35:54.082]                         if (!has_future || version < "1.8.0") {
[13:35:54.082]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:54.082]                             "", base::R.version$version.string), 
[13:35:54.082]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:54.082]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:54.082]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:54.082]                               "release", "version")], collapse = " "), 
[13:35:54.082]                             hostname = base::Sys.info()[["nodename"]])
[13:35:54.082]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:54.082]                             info)
[13:35:54.082]                           info <- base::paste(info, collapse = "; ")
[13:35:54.082]                           if (!has_future) {
[13:35:54.082]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:54.082]                               info)
[13:35:54.082]                           }
[13:35:54.082]                           else {
[13:35:54.082]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:54.082]                               info, version)
[13:35:54.082]                           }
[13:35:54.082]                           base::stop(msg)
[13:35:54.082]                         }
[13:35:54.082]                       })
[13:35:54.082]                     }
[13:35:54.082]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:54.082]                     base::options(mc.cores = 1L)
[13:35:54.082]                   }
[13:35:54.082]                   ...future.strategy.old <- future::plan("list")
[13:35:54.082]                   options(future.plan = NULL)
[13:35:54.082]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.082]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:54.082]                 }
[13:35:54.082]                 ...future.workdir <- getwd()
[13:35:54.082]             }
[13:35:54.082]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:54.082]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:54.082]         }
[13:35:54.082]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:54.082]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:54.082]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:54.082]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:54.082]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:54.082]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:54.082]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:54.082]             base::names(...future.oldOptions))
[13:35:54.082]     }
[13:35:54.082]     if (FALSE) {
[13:35:54.082]     }
[13:35:54.082]     else {
[13:35:54.082]         if (TRUE) {
[13:35:54.082]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:54.082]                 open = "w")
[13:35:54.082]         }
[13:35:54.082]         else {
[13:35:54.082]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:54.082]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:54.082]         }
[13:35:54.082]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:54.082]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:54.082]             base::sink(type = "output", split = FALSE)
[13:35:54.082]             base::close(...future.stdout)
[13:35:54.082]         }, add = TRUE)
[13:35:54.082]     }
[13:35:54.082]     ...future.frame <- base::sys.nframe()
[13:35:54.082]     ...future.conditions <- base::list()
[13:35:54.082]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:54.082]     if (FALSE) {
[13:35:54.082]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:54.082]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:54.082]     }
[13:35:54.082]     ...future.result <- base::tryCatch({
[13:35:54.082]         base::withCallingHandlers({
[13:35:54.082]             ...future.value <- base::withVisible(base::local({
[13:35:54.082]                 ...future.makeSendCondition <- base::local({
[13:35:54.082]                   sendCondition <- NULL
[13:35:54.082]                   function(frame = 1L) {
[13:35:54.082]                     if (is.function(sendCondition)) 
[13:35:54.082]                       return(sendCondition)
[13:35:54.082]                     ns <- getNamespace("parallel")
[13:35:54.082]                     if (exists("sendData", mode = "function", 
[13:35:54.082]                       envir = ns)) {
[13:35:54.082]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:54.082]                         envir = ns)
[13:35:54.082]                       envir <- sys.frame(frame)
[13:35:54.082]                       master <- NULL
[13:35:54.082]                       while (!identical(envir, .GlobalEnv) && 
[13:35:54.082]                         !identical(envir, emptyenv())) {
[13:35:54.082]                         if (exists("master", mode = "list", envir = envir, 
[13:35:54.082]                           inherits = FALSE)) {
[13:35:54.082]                           master <- get("master", mode = "list", 
[13:35:54.082]                             envir = envir, inherits = FALSE)
[13:35:54.082]                           if (inherits(master, c("SOCKnode", 
[13:35:54.082]                             "SOCK0node"))) {
[13:35:54.082]                             sendCondition <<- function(cond) {
[13:35:54.082]                               data <- list(type = "VALUE", value = cond, 
[13:35:54.082]                                 success = TRUE)
[13:35:54.082]                               parallel_sendData(master, data)
[13:35:54.082]                             }
[13:35:54.082]                             return(sendCondition)
[13:35:54.082]                           }
[13:35:54.082]                         }
[13:35:54.082]                         frame <- frame + 1L
[13:35:54.082]                         envir <- sys.frame(frame)
[13:35:54.082]                       }
[13:35:54.082]                     }
[13:35:54.082]                     sendCondition <<- function(cond) NULL
[13:35:54.082]                   }
[13:35:54.082]                 })
[13:35:54.082]                 withCallingHandlers({
[13:35:54.082]                   slow_fcn(x)
[13:35:54.082]                 }, immediateCondition = function(cond) {
[13:35:54.082]                   sendCondition <- ...future.makeSendCondition()
[13:35:54.082]                   sendCondition(cond)
[13:35:54.082]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.082]                   {
[13:35:54.082]                     inherits <- base::inherits
[13:35:54.082]                     invokeRestart <- base::invokeRestart
[13:35:54.082]                     is.null <- base::is.null
[13:35:54.082]                     muffled <- FALSE
[13:35:54.082]                     if (inherits(cond, "message")) {
[13:35:54.082]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:54.082]                       if (muffled) 
[13:35:54.082]                         invokeRestart("muffleMessage")
[13:35:54.082]                     }
[13:35:54.082]                     else if (inherits(cond, "warning")) {
[13:35:54.082]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:54.082]                       if (muffled) 
[13:35:54.082]                         invokeRestart("muffleWarning")
[13:35:54.082]                     }
[13:35:54.082]                     else if (inherits(cond, "condition")) {
[13:35:54.082]                       if (!is.null(pattern)) {
[13:35:54.082]                         computeRestarts <- base::computeRestarts
[13:35:54.082]                         grepl <- base::grepl
[13:35:54.082]                         restarts <- computeRestarts(cond)
[13:35:54.082]                         for (restart in restarts) {
[13:35:54.082]                           name <- restart$name
[13:35:54.082]                           if (is.null(name)) 
[13:35:54.082]                             next
[13:35:54.082]                           if (!grepl(pattern, name)) 
[13:35:54.082]                             next
[13:35:54.082]                           invokeRestart(restart)
[13:35:54.082]                           muffled <- TRUE
[13:35:54.082]                           break
[13:35:54.082]                         }
[13:35:54.082]                       }
[13:35:54.082]                     }
[13:35:54.082]                     invisible(muffled)
[13:35:54.082]                   }
[13:35:54.082]                   muffleCondition(cond)
[13:35:54.082]                 })
[13:35:54.082]             }))
[13:35:54.082]             future::FutureResult(value = ...future.value$value, 
[13:35:54.082]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.082]                   ...future.rng), globalenv = if (FALSE) 
[13:35:54.082]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:54.082]                     ...future.globalenv.names))
[13:35:54.082]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:54.082]         }, condition = base::local({
[13:35:54.082]             c <- base::c
[13:35:54.082]             inherits <- base::inherits
[13:35:54.082]             invokeRestart <- base::invokeRestart
[13:35:54.082]             length <- base::length
[13:35:54.082]             list <- base::list
[13:35:54.082]             seq.int <- base::seq.int
[13:35:54.082]             signalCondition <- base::signalCondition
[13:35:54.082]             sys.calls <- base::sys.calls
[13:35:54.082]             `[[` <- base::`[[`
[13:35:54.082]             `+` <- base::`+`
[13:35:54.082]             `<<-` <- base::`<<-`
[13:35:54.082]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:54.082]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:54.082]                   3L)]
[13:35:54.082]             }
[13:35:54.082]             function(cond) {
[13:35:54.082]                 is_error <- inherits(cond, "error")
[13:35:54.082]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:54.082]                   NULL)
[13:35:54.082]                 if (is_error) {
[13:35:54.082]                   sessionInformation <- function() {
[13:35:54.082]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:54.082]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:54.082]                       search = base::search(), system = base::Sys.info())
[13:35:54.082]                   }
[13:35:54.082]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.082]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:54.082]                     cond$call), session = sessionInformation(), 
[13:35:54.082]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:54.082]                   signalCondition(cond)
[13:35:54.082]                 }
[13:35:54.082]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:54.082]                 "immediateCondition"))) {
[13:35:54.082]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:54.082]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.082]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:54.082]                   if (TRUE && !signal) {
[13:35:54.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.082]                     {
[13:35:54.082]                       inherits <- base::inherits
[13:35:54.082]                       invokeRestart <- base::invokeRestart
[13:35:54.082]                       is.null <- base::is.null
[13:35:54.082]                       muffled <- FALSE
[13:35:54.082]                       if (inherits(cond, "message")) {
[13:35:54.082]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.082]                         if (muffled) 
[13:35:54.082]                           invokeRestart("muffleMessage")
[13:35:54.082]                       }
[13:35:54.082]                       else if (inherits(cond, "warning")) {
[13:35:54.082]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.082]                         if (muffled) 
[13:35:54.082]                           invokeRestart("muffleWarning")
[13:35:54.082]                       }
[13:35:54.082]                       else if (inherits(cond, "condition")) {
[13:35:54.082]                         if (!is.null(pattern)) {
[13:35:54.082]                           computeRestarts <- base::computeRestarts
[13:35:54.082]                           grepl <- base::grepl
[13:35:54.082]                           restarts <- computeRestarts(cond)
[13:35:54.082]                           for (restart in restarts) {
[13:35:54.082]                             name <- restart$name
[13:35:54.082]                             if (is.null(name)) 
[13:35:54.082]                               next
[13:35:54.082]                             if (!grepl(pattern, name)) 
[13:35:54.082]                               next
[13:35:54.082]                             invokeRestart(restart)
[13:35:54.082]                             muffled <- TRUE
[13:35:54.082]                             break
[13:35:54.082]                           }
[13:35:54.082]                         }
[13:35:54.082]                       }
[13:35:54.082]                       invisible(muffled)
[13:35:54.082]                     }
[13:35:54.082]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.082]                   }
[13:35:54.082]                 }
[13:35:54.082]                 else {
[13:35:54.082]                   if (TRUE) {
[13:35:54.082]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.082]                     {
[13:35:54.082]                       inherits <- base::inherits
[13:35:54.082]                       invokeRestart <- base::invokeRestart
[13:35:54.082]                       is.null <- base::is.null
[13:35:54.082]                       muffled <- FALSE
[13:35:54.082]                       if (inherits(cond, "message")) {
[13:35:54.082]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.082]                         if (muffled) 
[13:35:54.082]                           invokeRestart("muffleMessage")
[13:35:54.082]                       }
[13:35:54.082]                       else if (inherits(cond, "warning")) {
[13:35:54.082]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.082]                         if (muffled) 
[13:35:54.082]                           invokeRestart("muffleWarning")
[13:35:54.082]                       }
[13:35:54.082]                       else if (inherits(cond, "condition")) {
[13:35:54.082]                         if (!is.null(pattern)) {
[13:35:54.082]                           computeRestarts <- base::computeRestarts
[13:35:54.082]                           grepl <- base::grepl
[13:35:54.082]                           restarts <- computeRestarts(cond)
[13:35:54.082]                           for (restart in restarts) {
[13:35:54.082]                             name <- restart$name
[13:35:54.082]                             if (is.null(name)) 
[13:35:54.082]                               next
[13:35:54.082]                             if (!grepl(pattern, name)) 
[13:35:54.082]                               next
[13:35:54.082]                             invokeRestart(restart)
[13:35:54.082]                             muffled <- TRUE
[13:35:54.082]                             break
[13:35:54.082]                           }
[13:35:54.082]                         }
[13:35:54.082]                       }
[13:35:54.082]                       invisible(muffled)
[13:35:54.082]                     }
[13:35:54.082]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.082]                   }
[13:35:54.082]                 }
[13:35:54.082]             }
[13:35:54.082]         }))
[13:35:54.082]     }, error = function(ex) {
[13:35:54.082]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:54.082]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.082]                 ...future.rng), started = ...future.startTime, 
[13:35:54.082]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:54.082]             version = "1.8"), class = "FutureResult")
[13:35:54.082]     }, finally = {
[13:35:54.082]         if (!identical(...future.workdir, getwd())) 
[13:35:54.082]             setwd(...future.workdir)
[13:35:54.082]         {
[13:35:54.082]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:54.082]                 ...future.oldOptions$nwarnings <- NULL
[13:35:54.082]             }
[13:35:54.082]             base::options(...future.oldOptions)
[13:35:54.082]             if (.Platform$OS.type == "windows") {
[13:35:54.082]                 old_names <- names(...future.oldEnvVars)
[13:35:54.082]                 envs <- base::Sys.getenv()
[13:35:54.082]                 names <- names(envs)
[13:35:54.082]                 common <- intersect(names, old_names)
[13:35:54.082]                 added <- setdiff(names, old_names)
[13:35:54.082]                 removed <- setdiff(old_names, names)
[13:35:54.082]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:54.082]                   envs[common]]
[13:35:54.082]                 NAMES <- toupper(changed)
[13:35:54.082]                 args <- list()
[13:35:54.082]                 for (kk in seq_along(NAMES)) {
[13:35:54.082]                   name <- changed[[kk]]
[13:35:54.082]                   NAME <- NAMES[[kk]]
[13:35:54.082]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.082]                     next
[13:35:54.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.082]                 }
[13:35:54.082]                 NAMES <- toupper(added)
[13:35:54.082]                 for (kk in seq_along(NAMES)) {
[13:35:54.082]                   name <- added[[kk]]
[13:35:54.082]                   NAME <- NAMES[[kk]]
[13:35:54.082]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.082]                     next
[13:35:54.082]                   args[[name]] <- ""
[13:35:54.082]                 }
[13:35:54.082]                 NAMES <- toupper(removed)
[13:35:54.082]                 for (kk in seq_along(NAMES)) {
[13:35:54.082]                   name <- removed[[kk]]
[13:35:54.082]                   NAME <- NAMES[[kk]]
[13:35:54.082]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.082]                     next
[13:35:54.082]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.082]                 }
[13:35:54.082]                 if (length(args) > 0) 
[13:35:54.082]                   base::do.call(base::Sys.setenv, args = args)
[13:35:54.082]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:54.082]             }
[13:35:54.082]             else {
[13:35:54.082]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:54.082]             }
[13:35:54.082]             {
[13:35:54.082]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:54.082]                   0L) {
[13:35:54.082]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:54.082]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:54.082]                   base::options(opts)
[13:35:54.082]                 }
[13:35:54.082]                 {
[13:35:54.082]                   {
[13:35:54.082]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:54.082]                     NULL
[13:35:54.082]                   }
[13:35:54.082]                   options(future.plan = NULL)
[13:35:54.082]                   if (is.na(NA_character_)) 
[13:35:54.082]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.082]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:54.082]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:54.082]                     .init = FALSE)
[13:35:54.082]                 }
[13:35:54.082]             }
[13:35:54.082]         }
[13:35:54.082]     })
[13:35:54.082]     if (TRUE) {
[13:35:54.082]         base::sink(type = "output", split = FALSE)
[13:35:54.082]         if (TRUE) {
[13:35:54.082]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:54.082]         }
[13:35:54.082]         else {
[13:35:54.082]             ...future.result["stdout"] <- base::list(NULL)
[13:35:54.082]         }
[13:35:54.082]         base::close(...future.stdout)
[13:35:54.082]         ...future.stdout <- NULL
[13:35:54.082]     }
[13:35:54.082]     ...future.result$conditions <- ...future.conditions
[13:35:54.082]     ...future.result$finished <- base::Sys.time()
[13:35:54.082]     ...future.result
[13:35:54.082] }
[13:35:54.138] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[13:35:54.138] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[13:35:54.138] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[13:35:54.139] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[13:35:54.139] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[13:35:54.139] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[13:35:54.140] MultisessionFuture started
[13:35:54.141] - Launch lazy future ... done
[13:35:54.141] run() for ‘MultisessionFuture’ ... done
[13:35:54.141] getGlobalsAndPackages() ...
[13:35:54.141] Searching for globals...
[13:35:54.142] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[13:35:54.143] Searching for globals ... DONE
[13:35:54.143] Resolving globals: FALSE
[13:35:54.143] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[13:35:54.144] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[13:35:54.144] - globals: [2] ‘slow_fcn’, ‘x’
[13:35:54.144] 
[13:35:54.144] getGlobalsAndPackages() ... DONE
[13:35:54.144] run() for ‘Future’ ...
[13:35:54.144] - state: ‘created’
[13:35:54.145] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:35:54.155] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:35:54.155] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:35:54.155]   - Field: ‘node’
[13:35:54.156]   - Field: ‘label’
[13:35:54.156]   - Field: ‘local’
[13:35:54.156]   - Field: ‘owner’
[13:35:54.156]   - Field: ‘envir’
[13:35:54.156]   - Field: ‘workers’
[13:35:54.156]   - Field: ‘packages’
[13:35:54.156]   - Field: ‘gc’
[13:35:54.156]   - Field: ‘conditions’
[13:35:54.156]   - Field: ‘persistent’
[13:35:54.156]   - Field: ‘expr’
[13:35:54.156]   - Field: ‘uuid’
[13:35:54.157]   - Field: ‘seed’
[13:35:54.157]   - Field: ‘version’
[13:35:54.157]   - Field: ‘result’
[13:35:54.157]   - Field: ‘asynchronous’
[13:35:54.157]   - Field: ‘calls’
[13:35:54.157]   - Field: ‘globals’
[13:35:54.157]   - Field: ‘stdout’
[13:35:54.157]   - Field: ‘earlySignal’
[13:35:54.157]   - Field: ‘lazy’
[13:35:54.157]   - Field: ‘state’
[13:35:54.158] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:35:54.158] - Launch lazy future ...
[13:35:54.158] Packages needed by the future expression (n = 0): <none>
[13:35:54.158] Packages needed by future strategies (n = 0): <none>
[13:35:54.158] {
[13:35:54.158]     {
[13:35:54.158]         {
[13:35:54.158]             ...future.startTime <- base::Sys.time()
[13:35:54.158]             {
[13:35:54.158]                 {
[13:35:54.158]                   {
[13:35:54.158]                     {
[13:35:54.158]                       base::local({
[13:35:54.158]                         has_future <- base::requireNamespace("future", 
[13:35:54.158]                           quietly = TRUE)
[13:35:54.158]                         if (has_future) {
[13:35:54.158]                           ns <- base::getNamespace("future")
[13:35:54.158]                           version <- ns[[".package"]][["version"]]
[13:35:54.158]                           if (is.null(version)) 
[13:35:54.158]                             version <- utils::packageVersion("future")
[13:35:54.158]                         }
[13:35:54.158]                         else {
[13:35:54.158]                           version <- NULL
[13:35:54.158]                         }
[13:35:54.158]                         if (!has_future || version < "1.8.0") {
[13:35:54.158]                           info <- base::c(r_version = base::gsub("R version ", 
[13:35:54.158]                             "", base::R.version$version.string), 
[13:35:54.158]                             platform = base::sprintf("%s (%s-bit)", 
[13:35:54.158]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:35:54.158]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:35:54.158]                               "release", "version")], collapse = " "), 
[13:35:54.158]                             hostname = base::Sys.info()[["nodename"]])
[13:35:54.158]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:35:54.158]                             info)
[13:35:54.158]                           info <- base::paste(info, collapse = "; ")
[13:35:54.158]                           if (!has_future) {
[13:35:54.158]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:35:54.158]                               info)
[13:35:54.158]                           }
[13:35:54.158]                           else {
[13:35:54.158]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:35:54.158]                               info, version)
[13:35:54.158]                           }
[13:35:54.158]                           base::stop(msg)
[13:35:54.158]                         }
[13:35:54.158]                       })
[13:35:54.158]                     }
[13:35:54.158]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:35:54.158]                     base::options(mc.cores = 1L)
[13:35:54.158]                   }
[13:35:54.158]                   ...future.strategy.old <- future::plan("list")
[13:35:54.158]                   options(future.plan = NULL)
[13:35:54.158]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.158]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:35:54.158]                 }
[13:35:54.158]                 ...future.workdir <- getwd()
[13:35:54.158]             }
[13:35:54.158]             ...future.oldOptions <- base::as.list(base::.Options)
[13:35:54.158]             ...future.oldEnvVars <- base::Sys.getenv()
[13:35:54.158]         }
[13:35:54.158]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:35:54.158]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:35:54.158]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:35:54.158]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:35:54.158]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:35:54.158]             future.stdout.windows.reencode = NULL, width = 80L)
[13:35:54.158]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:35:54.158]             base::names(...future.oldOptions))
[13:35:54.158]     }
[13:35:54.158]     if (FALSE) {
[13:35:54.158]     }
[13:35:54.158]     else {
[13:35:54.158]         if (TRUE) {
[13:35:54.158]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:35:54.158]                 open = "w")
[13:35:54.158]         }
[13:35:54.158]         else {
[13:35:54.158]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:35:54.158]                 windows = "NUL", "/dev/null"), open = "w")
[13:35:54.158]         }
[13:35:54.158]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:35:54.158]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:35:54.158]             base::sink(type = "output", split = FALSE)
[13:35:54.158]             base::close(...future.stdout)
[13:35:54.158]         }, add = TRUE)
[13:35:54.158]     }
[13:35:54.158]     ...future.frame <- base::sys.nframe()
[13:35:54.158]     ...future.conditions <- base::list()
[13:35:54.158]     ...future.rng <- base::globalenv()$.Random.seed
[13:35:54.158]     if (FALSE) {
[13:35:54.158]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:35:54.158]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:35:54.158]     }
[13:35:54.158]     ...future.result <- base::tryCatch({
[13:35:54.158]         base::withCallingHandlers({
[13:35:54.158]             ...future.value <- base::withVisible(base::local({
[13:35:54.158]                 ...future.makeSendCondition <- base::local({
[13:35:54.158]                   sendCondition <- NULL
[13:35:54.158]                   function(frame = 1L) {
[13:35:54.158]                     if (is.function(sendCondition)) 
[13:35:54.158]                       return(sendCondition)
[13:35:54.158]                     ns <- getNamespace("parallel")
[13:35:54.158]                     if (exists("sendData", mode = "function", 
[13:35:54.158]                       envir = ns)) {
[13:35:54.158]                       parallel_sendData <- get("sendData", mode = "function", 
[13:35:54.158]                         envir = ns)
[13:35:54.158]                       envir <- sys.frame(frame)
[13:35:54.158]                       master <- NULL
[13:35:54.158]                       while (!identical(envir, .GlobalEnv) && 
[13:35:54.158]                         !identical(envir, emptyenv())) {
[13:35:54.158]                         if (exists("master", mode = "list", envir = envir, 
[13:35:54.158]                           inherits = FALSE)) {
[13:35:54.158]                           master <- get("master", mode = "list", 
[13:35:54.158]                             envir = envir, inherits = FALSE)
[13:35:54.158]                           if (inherits(master, c("SOCKnode", 
[13:35:54.158]                             "SOCK0node"))) {
[13:35:54.158]                             sendCondition <<- function(cond) {
[13:35:54.158]                               data <- list(type = "VALUE", value = cond, 
[13:35:54.158]                                 success = TRUE)
[13:35:54.158]                               parallel_sendData(master, data)
[13:35:54.158]                             }
[13:35:54.158]                             return(sendCondition)
[13:35:54.158]                           }
[13:35:54.158]                         }
[13:35:54.158]                         frame <- frame + 1L
[13:35:54.158]                         envir <- sys.frame(frame)
[13:35:54.158]                       }
[13:35:54.158]                     }
[13:35:54.158]                     sendCondition <<- function(cond) NULL
[13:35:54.158]                   }
[13:35:54.158]                 })
[13:35:54.158]                 withCallingHandlers({
[13:35:54.158]                   slow_fcn(x)
[13:35:54.158]                 }, immediateCondition = function(cond) {
[13:35:54.158]                   sendCondition <- ...future.makeSendCondition()
[13:35:54.158]                   sendCondition(cond)
[13:35:54.158]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.158]                   {
[13:35:54.158]                     inherits <- base::inherits
[13:35:54.158]                     invokeRestart <- base::invokeRestart
[13:35:54.158]                     is.null <- base::is.null
[13:35:54.158]                     muffled <- FALSE
[13:35:54.158]                     if (inherits(cond, "message")) {
[13:35:54.158]                       muffled <- grepl(pattern, "muffleMessage")
[13:35:54.158]                       if (muffled) 
[13:35:54.158]                         invokeRestart("muffleMessage")
[13:35:54.158]                     }
[13:35:54.158]                     else if (inherits(cond, "warning")) {
[13:35:54.158]                       muffled <- grepl(pattern, "muffleWarning")
[13:35:54.158]                       if (muffled) 
[13:35:54.158]                         invokeRestart("muffleWarning")
[13:35:54.158]                     }
[13:35:54.158]                     else if (inherits(cond, "condition")) {
[13:35:54.158]                       if (!is.null(pattern)) {
[13:35:54.158]                         computeRestarts <- base::computeRestarts
[13:35:54.158]                         grepl <- base::grepl
[13:35:54.158]                         restarts <- computeRestarts(cond)
[13:35:54.158]                         for (restart in restarts) {
[13:35:54.158]                           name <- restart$name
[13:35:54.158]                           if (is.null(name)) 
[13:35:54.158]                             next
[13:35:54.158]                           if (!grepl(pattern, name)) 
[13:35:54.158]                             next
[13:35:54.158]                           invokeRestart(restart)
[13:35:54.158]                           muffled <- TRUE
[13:35:54.158]                           break
[13:35:54.158]                         }
[13:35:54.158]                       }
[13:35:54.158]                     }
[13:35:54.158]                     invisible(muffled)
[13:35:54.158]                   }
[13:35:54.158]                   muffleCondition(cond)
[13:35:54.158]                 })
[13:35:54.158]             }))
[13:35:54.158]             future::FutureResult(value = ...future.value$value, 
[13:35:54.158]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.158]                   ...future.rng), globalenv = if (FALSE) 
[13:35:54.158]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:35:54.158]                     ...future.globalenv.names))
[13:35:54.158]                 else NULL, started = ...future.startTime, version = "1.8")
[13:35:54.158]         }, condition = base::local({
[13:35:54.158]             c <- base::c
[13:35:54.158]             inherits <- base::inherits
[13:35:54.158]             invokeRestart <- base::invokeRestart
[13:35:54.158]             length <- base::length
[13:35:54.158]             list <- base::list
[13:35:54.158]             seq.int <- base::seq.int
[13:35:54.158]             signalCondition <- base::signalCondition
[13:35:54.158]             sys.calls <- base::sys.calls
[13:35:54.158]             `[[` <- base::`[[`
[13:35:54.158]             `+` <- base::`+`
[13:35:54.158]             `<<-` <- base::`<<-`
[13:35:54.158]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:35:54.158]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:35:54.158]                   3L)]
[13:35:54.158]             }
[13:35:54.158]             function(cond) {
[13:35:54.158]                 is_error <- inherits(cond, "error")
[13:35:54.158]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:35:54.158]                   NULL)
[13:35:54.158]                 if (is_error) {
[13:35:54.158]                   sessionInformation <- function() {
[13:35:54.158]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:35:54.158]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:35:54.158]                       search = base::search(), system = base::Sys.info())
[13:35:54.158]                   }
[13:35:54.158]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.158]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:35:54.158]                     cond$call), session = sessionInformation(), 
[13:35:54.158]                     timestamp = base::Sys.time(), signaled = 0L)
[13:35:54.158]                   signalCondition(cond)
[13:35:54.158]                 }
[13:35:54.158]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:35:54.158]                 "immediateCondition"))) {
[13:35:54.158]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:35:54.158]                   ...future.conditions[[length(...future.conditions) + 
[13:35:54.158]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:35:54.158]                   if (TRUE && !signal) {
[13:35:54.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.158]                     {
[13:35:54.158]                       inherits <- base::inherits
[13:35:54.158]                       invokeRestart <- base::invokeRestart
[13:35:54.158]                       is.null <- base::is.null
[13:35:54.158]                       muffled <- FALSE
[13:35:54.158]                       if (inherits(cond, "message")) {
[13:35:54.158]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.158]                         if (muffled) 
[13:35:54.158]                           invokeRestart("muffleMessage")
[13:35:54.158]                       }
[13:35:54.158]                       else if (inherits(cond, "warning")) {
[13:35:54.158]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.158]                         if (muffled) 
[13:35:54.158]                           invokeRestart("muffleWarning")
[13:35:54.158]                       }
[13:35:54.158]                       else if (inherits(cond, "condition")) {
[13:35:54.158]                         if (!is.null(pattern)) {
[13:35:54.158]                           computeRestarts <- base::computeRestarts
[13:35:54.158]                           grepl <- base::grepl
[13:35:54.158]                           restarts <- computeRestarts(cond)
[13:35:54.158]                           for (restart in restarts) {
[13:35:54.158]                             name <- restart$name
[13:35:54.158]                             if (is.null(name)) 
[13:35:54.158]                               next
[13:35:54.158]                             if (!grepl(pattern, name)) 
[13:35:54.158]                               next
[13:35:54.158]                             invokeRestart(restart)
[13:35:54.158]                             muffled <- TRUE
[13:35:54.158]                             break
[13:35:54.158]                           }
[13:35:54.158]                         }
[13:35:54.158]                       }
[13:35:54.158]                       invisible(muffled)
[13:35:54.158]                     }
[13:35:54.158]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.158]                   }
[13:35:54.158]                 }
[13:35:54.158]                 else {
[13:35:54.158]                   if (TRUE) {
[13:35:54.158]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:35:54.158]                     {
[13:35:54.158]                       inherits <- base::inherits
[13:35:54.158]                       invokeRestart <- base::invokeRestart
[13:35:54.158]                       is.null <- base::is.null
[13:35:54.158]                       muffled <- FALSE
[13:35:54.158]                       if (inherits(cond, "message")) {
[13:35:54.158]                         muffled <- grepl(pattern, "muffleMessage")
[13:35:54.158]                         if (muffled) 
[13:35:54.158]                           invokeRestart("muffleMessage")
[13:35:54.158]                       }
[13:35:54.158]                       else if (inherits(cond, "warning")) {
[13:35:54.158]                         muffled <- grepl(pattern, "muffleWarning")
[13:35:54.158]                         if (muffled) 
[13:35:54.158]                           invokeRestart("muffleWarning")
[13:35:54.158]                       }
[13:35:54.158]                       else if (inherits(cond, "condition")) {
[13:35:54.158]                         if (!is.null(pattern)) {
[13:35:54.158]                           computeRestarts <- base::computeRestarts
[13:35:54.158]                           grepl <- base::grepl
[13:35:54.158]                           restarts <- computeRestarts(cond)
[13:35:54.158]                           for (restart in restarts) {
[13:35:54.158]                             name <- restart$name
[13:35:54.158]                             if (is.null(name)) 
[13:35:54.158]                               next
[13:35:54.158]                             if (!grepl(pattern, name)) 
[13:35:54.158]                               next
[13:35:54.158]                             invokeRestart(restart)
[13:35:54.158]                             muffled <- TRUE
[13:35:54.158]                             break
[13:35:54.158]                           }
[13:35:54.158]                         }
[13:35:54.158]                       }
[13:35:54.158]                       invisible(muffled)
[13:35:54.158]                     }
[13:35:54.158]                     muffleCondition(cond, pattern = "^muffle")
[13:35:54.158]                   }
[13:35:54.158]                 }
[13:35:54.158]             }
[13:35:54.158]         }))
[13:35:54.158]     }, error = function(ex) {
[13:35:54.158]         base::structure(base::list(value = NULL, visible = NULL, 
[13:35:54.158]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:35:54.158]                 ...future.rng), started = ...future.startTime, 
[13:35:54.158]             finished = Sys.time(), session_uuid = NA_character_, 
[13:35:54.158]             version = "1.8"), class = "FutureResult")
[13:35:54.158]     }, finally = {
[13:35:54.158]         if (!identical(...future.workdir, getwd())) 
[13:35:54.158]             setwd(...future.workdir)
[13:35:54.158]         {
[13:35:54.158]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:35:54.158]                 ...future.oldOptions$nwarnings <- NULL
[13:35:54.158]             }
[13:35:54.158]             base::options(...future.oldOptions)
[13:35:54.158]             if (.Platform$OS.type == "windows") {
[13:35:54.158]                 old_names <- names(...future.oldEnvVars)
[13:35:54.158]                 envs <- base::Sys.getenv()
[13:35:54.158]                 names <- names(envs)
[13:35:54.158]                 common <- intersect(names, old_names)
[13:35:54.158]                 added <- setdiff(names, old_names)
[13:35:54.158]                 removed <- setdiff(old_names, names)
[13:35:54.158]                 changed <- common[...future.oldEnvVars[common] != 
[13:35:54.158]                   envs[common]]
[13:35:54.158]                 NAMES <- toupper(changed)
[13:35:54.158]                 args <- list()
[13:35:54.158]                 for (kk in seq_along(NAMES)) {
[13:35:54.158]                   name <- changed[[kk]]
[13:35:54.158]                   NAME <- NAMES[[kk]]
[13:35:54.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.158]                     next
[13:35:54.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.158]                 }
[13:35:54.158]                 NAMES <- toupper(added)
[13:35:54.158]                 for (kk in seq_along(NAMES)) {
[13:35:54.158]                   name <- added[[kk]]
[13:35:54.158]                   NAME <- NAMES[[kk]]
[13:35:54.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.158]                     next
[13:35:54.158]                   args[[name]] <- ""
[13:35:54.158]                 }
[13:35:54.158]                 NAMES <- toupper(removed)
[13:35:54.158]                 for (kk in seq_along(NAMES)) {
[13:35:54.158]                   name <- removed[[kk]]
[13:35:54.158]                   NAME <- NAMES[[kk]]
[13:35:54.158]                   if (name != NAME && is.element(NAME, old_names)) 
[13:35:54.158]                     next
[13:35:54.158]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:35:54.158]                 }
[13:35:54.158]                 if (length(args) > 0) 
[13:35:54.158]                   base::do.call(base::Sys.setenv, args = args)
[13:35:54.158]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:35:54.158]             }
[13:35:54.158]             else {
[13:35:54.158]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:35:54.158]             }
[13:35:54.158]             {
[13:35:54.158]                 if (base::length(...future.futureOptionsAdded) > 
[13:35:54.158]                   0L) {
[13:35:54.158]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:35:54.158]                   base::names(opts) <- ...future.futureOptionsAdded
[13:35:54.158]                   base::options(opts)
[13:35:54.158]                 }
[13:35:54.158]                 {
[13:35:54.158]                   {
[13:35:54.158]                     base::options(mc.cores = ...future.mc.cores.old)
[13:35:54.158]                     NULL
[13:35:54.158]                   }
[13:35:54.158]                   options(future.plan = NULL)
[13:35:54.158]                   if (is.na(NA_character_)) 
[13:35:54.158]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:35:54.158]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:35:54.158]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:35:54.158]                     .init = FALSE)
[13:35:54.158]                 }
[13:35:54.158]             }
[13:35:54.158]         }
[13:35:54.158]     })
[13:35:54.158]     if (TRUE) {
[13:35:54.158]         base::sink(type = "output", split = FALSE)
[13:35:54.158]         if (TRUE) {
[13:35:54.158]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:35:54.158]         }
[13:35:54.158]         else {
[13:35:54.158]             ...future.result["stdout"] <- base::list(NULL)
[13:35:54.158]         }
[13:35:54.158]         base::close(...future.stdout)
[13:35:54.158]         ...future.stdout <- NULL
[13:35:54.158]     }
[13:35:54.158]     ...future.result$conditions <- ...future.conditions
[13:35:54.158]     ...future.result$finished <- base::Sys.time()
[13:35:54.158]     ...future.result
[13:35:54.158] }
[13:35:54.161] Poll #1 (0): usedNodes() = 2, workers = 2
[13:35:54.192] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[13:35:54.232] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[13:35:54.264] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[13:35:54.295] Poll #5 (0.13 secs): usedNodes() = 2, workers = 2
[13:35:54.327] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[13:35:54.359] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[13:35:54.391] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[13:35:54.423] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[13:35:54.455] Poll #10 (0.29 secs): usedNodes() = 2, workers = 2
[13:35:54.488] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[13:35:54.520] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[13:35:54.553] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[13:35:54.586] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[13:35:54.619] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[13:35:54.652] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[13:35:54.685] Poll #17 (0.52 secs): usedNodes() = 2, workers = 2
[13:35:54.718] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[13:35:54.752] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[13:35:54.785] Poll #20 (0.62 secs): usedNodes() = 2, workers = 2
[13:35:54.819] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[13:35:54.853] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[13:35:54.887] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[13:35:54.900] receiveMessageFromWorker() for ClusterFuture ...
[13:35:54.900] - Validating connection of MultisessionFuture
[13:35:54.900] - received message: FutureResult
[13:35:54.901] - Received FutureResult
[13:35:54.901] - Erased future from FutureRegistry
[13:35:54.901] result() for ClusterFuture ...
[13:35:54.901] - result already collected: FutureResult
[13:35:54.901] result() for ClusterFuture ... done
[13:35:54.906] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:54.907] result() for ClusterFuture ...
[13:35:54.907] - result already collected: FutureResult
[13:35:54.907] result() for ClusterFuture ... done
[13:35:54.907] result() for ClusterFuture ...
[13:35:54.907] - result already collected: FutureResult
[13:35:54.907] result() for ClusterFuture ... done
[13:35:54.909] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[13:35:54.909] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[13:35:54.910] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[13:35:54.910] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:35:54.910] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:35:54.910] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[13:35:54.911] MultisessionFuture started
[13:35:54.912] - Launch lazy future ... done
[13:35:54.913] run() for ‘MultisessionFuture’ ... done
[13:35:54.913] resolve() on list ...
[13:35:54.913]  recursive: 0
[13:35:54.914]  length: 3
[13:35:54.914] 
[13:35:54.914] Future #1
[13:35:54.914] result() for ClusterFuture ...
[13:35:54.914] - result already collected: FutureResult
[13:35:54.914] result() for ClusterFuture ... done
[13:35:54.914] result() for ClusterFuture ...
[13:35:54.914] - result already collected: FutureResult
[13:35:54.914] result() for ClusterFuture ... done
[13:35:54.915] signalConditionsASAP(MultisessionFuture, pos=1) ...
[13:35:54.915] - nx: 3
[13:35:54.915] - relay: TRUE
[13:35:54.915] - stdout: TRUE
[13:35:54.915] - signal: TRUE
[13:35:54.915] - resignal: FALSE
[13:35:54.915] - force: TRUE
[13:35:54.915] - relayed: [n=3] FALSE, FALSE, FALSE
[13:35:54.915] - queued futures: [n=3] FALSE, FALSE, FALSE
[13:35:54.915]  - until=1
[13:35:54.915]  - relaying element #1
[13:35:54.915] result() for ClusterFuture ...
[13:35:54.916] - result already collected: FutureResult
[13:35:54.916] result() for ClusterFuture ... done
[13:35:54.916] result() for ClusterFuture ...
[13:35:54.916] - result already collected: FutureResult
[13:35:54.916] result() for ClusterFuture ... done
[13:35:54.916] result() for ClusterFuture ...
[13:35:54.916] - result already collected: FutureResult
[13:35:54.916] result() for ClusterFuture ... done
[13:35:54.916] result() for ClusterFuture ...
[13:35:54.916] - result already collected: FutureResult
[13:35:54.916] result() for ClusterFuture ... done
[13:35:54.917] - relayed: [n=3] TRUE, FALSE, FALSE
[13:35:54.917] - queued futures: [n=3] TRUE, FALSE, FALSE
[13:35:54.917] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[13:35:54.917]  length: 2 (resolved future 1)
[13:35:55.175] receiveMessageFromWorker() for ClusterFuture ...
[13:35:55.176] - Validating connection of MultisessionFuture
[13:35:55.176] - received message: FutureResult
[13:35:55.177] - Received FutureResult
[13:35:55.177] - Erased future from FutureRegistry
[13:35:55.177] result() for ClusterFuture ...
[13:35:55.177] - result already collected: FutureResult
[13:35:55.177] result() for ClusterFuture ... done
[13:35:55.179] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:55.179] Future #2
[13:35:55.179] result() for ClusterFuture ...
[13:35:55.179] - result already collected: FutureResult
[13:35:55.179] result() for ClusterFuture ... done
[13:35:55.179] result() for ClusterFuture ...
[13:35:55.179] - result already collected: FutureResult
[13:35:55.179] result() for ClusterFuture ... done
[13:35:55.180] signalConditionsASAP(MultisessionFuture, pos=2) ...
[13:35:55.180] - nx: 3
[13:35:55.180] - relay: TRUE
[13:35:55.180] - stdout: TRUE
[13:35:55.180] - signal: TRUE
[13:35:55.180] - resignal: FALSE
[13:35:55.180] - force: TRUE
[13:35:55.180] - relayed: [n=3] TRUE, FALSE, FALSE
[13:35:55.180] - queued futures: [n=3] TRUE, FALSE, FALSE
[13:35:55.180]  - until=2
[13:35:55.180]  - relaying element #2
[13:35:55.180] result() for ClusterFuture ...
[13:35:55.181] - result already collected: FutureResult
[13:35:55.181] result() for ClusterFuture ... done
[13:35:55.181] result() for ClusterFuture ...
[13:35:55.181] - result already collected: FutureResult
[13:35:55.181] result() for ClusterFuture ... done
[13:35:55.181] result() for ClusterFuture ...
[13:35:55.181] - result already collected: FutureResult
[13:35:55.181] result() for ClusterFuture ... done
[13:35:55.181] result() for ClusterFuture ...
[13:35:55.181] - result already collected: FutureResult
[13:35:55.181] result() for ClusterFuture ... done
[13:35:55.182] - relayed: [n=3] TRUE, TRUE, FALSE
[13:35:55.182] - queued futures: [n=3] TRUE, TRUE, FALSE
[13:35:55.182] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[13:35:55.182]  length: 1 (resolved future 2)
[13:35:56.422] receiveMessageFromWorker() for ClusterFuture ...
[13:35:56.422] - Validating connection of MultisessionFuture
[13:35:56.423] - received message: FutureResult
[13:35:56.423] - Received FutureResult
[13:35:56.424] - Erased future from FutureRegistry
[13:35:56.424] result() for ClusterFuture ...
[13:35:56.424] - result already collected: FutureResult
[13:35:56.424] result() for ClusterFuture ... done
[13:35:56.426] receiveMessageFromWorker() for ClusterFuture ... done
[13:35:56.426] Future #3
[13:35:56.426] result() for ClusterFuture ...
[13:35:56.426] - result already collected: FutureResult
[13:35:56.426] result() for ClusterFuture ... done
[13:35:56.426] result() for ClusterFuture ...
[13:35:56.426] - result already collected: FutureResult
[13:35:56.426] result() for ClusterFuture ... done
[13:35:56.427] signalConditionsASAP(MultisessionFuture, pos=3) ...
[13:35:56.427] - nx: 3
[13:35:56.427] - relay: TRUE
[13:35:56.427] - stdout: TRUE
[13:35:56.427] - signal: TRUE
[13:35:56.427] - resignal: FALSE
[13:35:56.427] - force: TRUE
[13:35:56.427] - relayed: [n=3] TRUE, TRUE, FALSE
[13:35:56.427] - queued futures: [n=3] TRUE, TRUE, FALSE
[13:35:56.427]  - until=3
[13:35:56.427]  - relaying element #3
[13:35:56.428] result() for ClusterFuture ...
[13:35:56.428] - result already collected: FutureResult
[13:35:56.428] result() for ClusterFuture ... done
[13:35:56.428] result() for ClusterFuture ...
[13:35:56.428] - result already collected: FutureResult
[13:35:56.428] result() for ClusterFuture ... done
[13:35:56.428] result() for ClusterFuture ...
[13:35:56.428] - result already collected: FutureResult
[13:35:56.428] result() for ClusterFuture ... done
[13:35:56.428] result() for ClusterFuture ...
[13:35:56.428] - result already collected: FutureResult
[13:35:56.428] result() for ClusterFuture ... done
[13:35:56.429] - relayed: [n=3] TRUE, TRUE, TRUE
[13:35:56.429] - queued futures: [n=3] TRUE, TRUE, TRUE
[13:35:56.429] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[13:35:56.429]  length: 0 (resolved future 3)
[13:35:56.429] Relaying remaining futures
[13:35:56.429] signalConditionsASAP(NULL, pos=0) ...
[13:35:56.429] - nx: 3
[13:35:56.429] - relay: TRUE
[13:35:56.429] - stdout: TRUE
[13:35:56.429] - signal: TRUE
[13:35:56.429] - resignal: FALSE
[13:35:56.429] - force: TRUE
[13:35:56.430] - relayed: [n=3] TRUE, TRUE, TRUE
[13:35:56.430] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[13:35:56.430] - relayed: [n=3] TRUE, TRUE, TRUE
[13:35:56.430] - queued futures: [n=3] TRUE, TRUE, TRUE
[13:35:56.430] signalConditionsASAP(NULL, pos=0) ... done
[13:35:56.430] resolve() on list ... DONE
[13:35:56.430] result() for ClusterFuture ...
[13:35:56.430] - result already collected: FutureResult
[13:35:56.430] result() for ClusterFuture ... done
[13:35:56.430] result() for ClusterFuture ...
[13:35:56.431] - result already collected: FutureResult
[13:35:56.431] result() for ClusterFuture ... done
[13:35:56.431] result() for ClusterFuture ...
[13:35:56.431] - result already collected: FutureResult
[13:35:56.431] result() for ClusterFuture ... done
[13:35:56.431] result() for ClusterFuture ...
[13:35:56.431] - result already collected: FutureResult
[13:35:56.431] result() for ClusterFuture ... done
[13:35:56.431] result() for ClusterFuture ...
[13:35:56.431] - result already collected: FutureResult
[13:35:56.431] result() for ClusterFuture ... done
[13:35:56.432] result() for ClusterFuture ...
[13:35:56.432] - result already collected: FutureResult
[13:35:56.432] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 13:35:54 0.02603388 secs
2      getWorker   overhead launch 2025-01-07 13:35:54 0.02920842 secs
3    eraseWorker   overhead launch 2025-01-07 13:35:54 0.03088713 secs
4 attachPackages   overhead launch 2025-01-07 13:35:54 0.03195834 secs
5  exportGlobals   overhead launch 2025-01-07 13:35:54 0.03264499 secs
9       evaluate evaluation   <NA> 2025-01-07 13:35:54 0.03586793 secs
7  receiveResult   overhead gather 2025-01-07 13:35:54 0.87770200 secs
8         gather   overhead   <NA> 2025-01-07 13:35:54 0.87875891 secs
           duration future_label                          future_uuid
1 0.0102002621 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
6 0.0095043182 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
2 0.0002470016 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
3 0.0003795624 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
4 0.0000474453 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
5 0.0015509129 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
9 0.8402426243 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
7 0.0002169609 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
8 0.0002865791 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
                          session_uuid
1 d897c91b-134c-024b-329d-c5e18c565665
6 d897c91b-134c-024b-329d-c5e18c565665
2 d897c91b-134c-024b-329d-c5e18c565665
3 d897c91b-134c-024b-329d-c5e18c565665
4 d897c91b-134c-024b-329d-c5e18c565665
5 d897c91b-134c-024b-329d-c5e18c565665
9 2889a364-a344-4699-f10b-958adb5956fb
7 d897c91b-134c-024b-329d-c5e18c565665
8 d897c91b-134c-024b-329d-c5e18c565665

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 13:35:54 0.02056217 secs
2      getWorker   overhead launch 2025-01-07 13:35:54 0.02316308 secs
3    eraseWorker   overhead launch 2025-01-07 13:35:54 0.02377534 secs
4 attachPackages   overhead launch 2025-01-07 13:35:54 0.07595658 secs
5  exportGlobals   overhead launch 2025-01-07 13:35:54 0.07655168 secs
9       evaluate evaluation   <NA> 2025-01-07 13:35:54 0.07907319 secs
7  receiveResult   overhead gather 2025-01-07 13:35:55 1.11447716 secs
8         gather   overhead   <NA> 2025-01-07 13:35:55 1.11555076 secs
           duration future_label                          future_uuid
1 7.208824e-03 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
6 5.834675e-02 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
2 1.161098e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
3 5.148768e-02 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
4 4.839897e-05 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
5 1.339197e-03 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
9 1.034904e+00 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
7 2.076626e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
8 2.794266e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
                          session_uuid
1 d897c91b-134c-024b-329d-c5e18c565665
6 d897c91b-134c-024b-329d-c5e18c565665
2 d897c91b-134c-024b-329d-c5e18c565665
3 d897c91b-134c-024b-329d-c5e18c565665
4 d897c91b-134c-024b-329d-c5e18c565665
5 d897c91b-134c-024b-329d-c5e18c565665
9 10804868-d624-fdc7-5149-41d274f41fea
7 d897c91b-134c-024b-329d-c5e18c565665
8 d897c91b-134c-024b-329d-c5e18c565665

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 13:35:54 0.01689744 secs
2      getWorker   overhead launch 2025-01-07 13:35:54 0.01967382 secs
3    eraseWorker   overhead launch 2025-01-07 13:35:54 0.76687694 secs
4 attachPackages   overhead launch 2025-01-07 13:35:54 0.76775503 secs
5  exportGlobals   overhead launch 2025-01-07 13:35:54 0.76826406 secs
9       evaluate evaluation   <NA> 2025-01-07 13:35:54 0.77112770 secs
7  receiveResult   overhead gather 2025-01-07 13:35:56 2.28175807 secs
8         gather   overhead   <NA> 2025-01-07 13:35:56 2.28284264 secs
           duration future_label                          future_uuid
1 3.240347e-03 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
6 7.538393e-01 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
2 7.467182e-01 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
3 3.731251e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
4 3.647804e-05 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
5 1.363754e-03 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
9 1.503407e+00 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
7 2.062321e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
8 2.908707e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
                          session_uuid
1 d897c91b-134c-024b-329d-c5e18c565665
6 d897c91b-134c-024b-329d-c5e18c565665
2 d897c91b-134c-024b-329d-c5e18c565665
3 d897c91b-134c-024b-329d-c5e18c565665
4 d897c91b-134c-024b-329d-c5e18c565665
5 d897c91b-134c-024b-329d-c5e18c565665
9 2889a364-a344-4699-f10b-958adb5956fb
7 d897c91b-134c-024b-329d-c5e18c565665
8 d897c91b-134c-024b-329d-c5e18c565665

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[13:35:56.439] plan(): Setting new future strategy stack:
[13:35:56.439] List of future strategies:
[13:35:56.439] 1. sequential:
[13:35:56.439]    - args: function (..., envir = parent.frame())
[13:35:56.439]    - tweaked: FALSE
[13:35:56.439]    - call: plan(sequential)
[13:35:56.440] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
6          launch   overhead   <NA> 2025-01-07 13:35:54 0.02603388 secs
2       getWorker   overhead launch 2025-01-07 13:35:54 0.02920842 secs
3     eraseWorker   overhead launch 2025-01-07 13:35:54 0.03088713 secs
4  attachPackages   overhead launch 2025-01-07 13:35:54 0.03195834 secs
5   exportGlobals   overhead launch 2025-01-07 13:35:54 0.03264499 secs
9        evaluate evaluation   <NA> 2025-01-07 13:35:54 0.03586793 secs
7   receiveResult   overhead gather 2025-01-07 13:35:54 0.87770200 secs
8          gather   overhead   <NA> 2025-01-07 13:35:54 0.87875891 secs
11         create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
61         launch   overhead   <NA> 2025-01-07 13:35:54 0.02056217 secs
21      getWorker   overhead launch 2025-01-07 13:35:54 0.02316308 secs
31    eraseWorker   overhead launch 2025-01-07 13:35:54 0.02377534 secs
41 attachPackages   overhead launch 2025-01-07 13:35:54 0.07595658 secs
51  exportGlobals   overhead launch 2025-01-07 13:35:54 0.07655168 secs
91       evaluate evaluation   <NA> 2025-01-07 13:35:54 0.07907319 secs
71  receiveResult   overhead gather 2025-01-07 13:35:55 1.11447716 secs
81         gather   overhead   <NA> 2025-01-07 13:35:55 1.11555076 secs
12         create   overhead   <NA> 2025-01-07 13:35:54 0.00000000 secs
62         launch   overhead   <NA> 2025-01-07 13:35:54 0.01689744 secs
22      getWorker   overhead launch 2025-01-07 13:35:54 0.01967382 secs
32    eraseWorker   overhead launch 2025-01-07 13:35:54 0.76687694 secs
42 attachPackages   overhead launch 2025-01-07 13:35:54 0.76775503 secs
52  exportGlobals   overhead launch 2025-01-07 13:35:54 0.76826406 secs
92       evaluate evaluation   <NA> 2025-01-07 13:35:54 0.77112770 secs
72  receiveResult   overhead gather 2025-01-07 13:35:56 2.28175807 secs
82         gather   overhead   <NA> 2025-01-07 13:35:56 2.28284264 secs
            duration future_label                          future_uuid
1  1.020026e-02 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
6  9.504318e-03 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
2  2.470016e-04 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
3  3.795624e-04 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
4  4.744530e-05 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
5  1.550913e-03 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
9  8.402426e-01 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
7  2.169609e-04 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
8  2.865791e-04 secs         <NA> 0f8e3e98-1aaf-42c1-e3d9-1a5cde2386d7
11 7.208824e-03 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
61 5.834675e-02 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
21 1.161098e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
31 5.148768e-02 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
41 4.839897e-05 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
51 1.339197e-03 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
91 1.034904e+00 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
71 2.076626e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
81 2.794266e-04 secs         <NA> 729a7295-6590-ed7d-3177-d470aed62bab
12 3.240347e-03 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
62 7.538393e-01 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
22 7.467182e-01 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
32 3.731251e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
42 3.647804e-05 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
52 1.363754e-03 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
92 1.503407e+00 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
72 2.062321e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
82 2.908707e-04 secs         <NA> ac4c0a7e-1b8e-274b-9da8-906b025fd9c5
                           session_uuid
1  d897c91b-134c-024b-329d-c5e18c565665
6  d897c91b-134c-024b-329d-c5e18c565665
2  d897c91b-134c-024b-329d-c5e18c565665
3  d897c91b-134c-024b-329d-c5e18c565665
4  d897c91b-134c-024b-329d-c5e18c565665
5  d897c91b-134c-024b-329d-c5e18c565665
9  2889a364-a344-4699-f10b-958adb5956fb
7  d897c91b-134c-024b-329d-c5e18c565665
8  d897c91b-134c-024b-329d-c5e18c565665
11 d897c91b-134c-024b-329d-c5e18c565665
61 d897c91b-134c-024b-329d-c5e18c565665
21 d897c91b-134c-024b-329d-c5e18c565665
31 d897c91b-134c-024b-329d-c5e18c565665
41 d897c91b-134c-024b-329d-c5e18c565665
51 d897c91b-134c-024b-329d-c5e18c565665
91 10804868-d624-fdc7-5149-41d274f41fea
71 d897c91b-134c-024b-329d-c5e18c565665
81 d897c91b-134c-024b-329d-c5e18c565665
12 d897c91b-134c-024b-329d-c5e18c565665
62 d897c91b-134c-024b-329d-c5e18c565665
22 d897c91b-134c-024b-329d-c5e18c565665
32 d897c91b-134c-024b-329d-c5e18c565665
42 d897c91b-134c-024b-329d-c5e18c565665
52 d897c91b-134c-024b-329d-c5e18c565665
92 2889a364-a344-4699-f10b-958adb5956fb
72 d897c91b-134c-024b-329d-c5e18c565665
82 d897c91b-134c-024b-329d-c5e18c565665
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8402426 secs      0.9558580 0.01999116 secs     0.02274189
2    mean 1.1261849 secs      0.7897493 0.28106554 secs     0.19710024
3  median 1.0349045 secs      0.9274749 0.06583500 secs     0.05900091
4     max 1.5034075 secs      0.6584843 0.75737047 secs     0.33172413
5   total 3.3785546 secs      0.7897493 0.84319663 secs     0.19710024
        duration       walltime
1 0.8790455 secs 0.8790455 secs
2 1.4260031 secs 1.4260031 secs
3 1.1158302 secs 1.1158302 secs
4 2.2831335 secs 2.2831335 secs
5 4.2780092 secs 4.2780092 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
