
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:09.446] plan(): Setting new future strategy stack:
[10:32:09.446] List of future strategies:
[10:32:09.446] 1. sequential:
[10:32:09.446]    - args: function (..., envir = parent.frame())
[10:32:09.446]    - tweaked: FALSE
[10:32:09.446]    - call: future::plan("sequential")
[10:32:09.461] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[10:32:09.474] plan(): Setting new future strategy stack:
[10:32:09.474] List of future strategies:
[10:32:09.474] 1. multisession:
[10:32:09.474]    - args: function (..., workers = 2, envir = parent.frame())
[10:32:09.474]    - tweaked: TRUE
[10:32:09.474]    - call: plan(multisession, workers = 2)
[10:32:09.484] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:32:09.485] multisession:
[10:32:09.485] - args: function (..., workers = 2, envir = parent.frame())
[10:32:09.485] - tweaked: TRUE
[10:32:09.485] - call: plan(multisession, workers = 2)
[10:32:09.486] getGlobalsAndPackages() ...
[10:32:09.486] Not searching for globals
[10:32:09.487] - globals: [0] <none>
[10:32:09.487] getGlobalsAndPackages() ... DONE
[10:32:09.487] [local output] makeClusterPSOCK() ...
[10:32:09.521] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:09.522] [local output] Base port: 11537
[10:32:09.522] [local output] Getting setup options for 2 cluster nodes ...
[10:32:09.522] [local output]  - Node 1 of 2 ...
[10:32:09.523] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:09.523] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP6IVfl/worker.rank=1.parallelly.parent=78648.13338148d68d0.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpP6IVfl/worker.rank=1.parallelly.parent=78648.13338148d68d0.pid")'’
[10:32:09.717] - Possible to infer worker's PID: TRUE
[10:32:09.718] [local output] Rscript port: 11537

[10:32:09.718] [local output]  - Node 2 of 2 ...
[10:32:09.718] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:09.719] [local output] Rscript port: 11537

[10:32:09.719] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:09.719] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:09.720] [local output] Setting up PSOCK nodes in parallel
[10:32:09.720] List of 36
[10:32:09.720]  $ worker          : chr "localhost"
[10:32:09.720]   ..- attr(*, "localhost")= logi TRUE
[10:32:09.720]  $ master          : chr "localhost"
[10:32:09.720]  $ port            : int 11537
[10:32:09.720]  $ connectTimeout  : num 120
[10:32:09.720]  $ timeout         : num 2592000
[10:32:09.720]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:09.720]  $ homogeneous     : logi TRUE
[10:32:09.720]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:09.720]  $ rscript_envs    : NULL
[10:32:09.720]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:09.720]  $ rscript_startup : NULL
[10:32:09.720]  $ rscript_sh      : chr "sh"
[10:32:09.720]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:09.720]  $ methods         : logi TRUE
[10:32:09.720]  $ socketOptions   : chr "no-delay"
[10:32:09.720]  $ useXDR          : logi FALSE
[10:32:09.720]  $ outfile         : chr "/dev/null"
[10:32:09.720]  $ renice          : int NA
[10:32:09.720]  $ rshcmd          : NULL
[10:32:09.720]  $ user            : chr(0) 
[10:32:09.720]  $ revtunnel       : logi FALSE
[10:32:09.720]  $ rshlogfile      : NULL
[10:32:09.720]  $ rshopts         : chr(0) 
[10:32:09.720]  $ rank            : int 1
[10:32:09.720]  $ manual          : logi FALSE
[10:32:09.720]  $ dryrun          : logi FALSE
[10:32:09.720]  $ quiet           : logi FALSE
[10:32:09.720]  $ setup_strategy  : chr "parallel"
[10:32:09.720]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:09.720]  $ pidfile         : chr "/tmp/RtmpP6IVfl/worker.rank=1.parallelly.parent=78648.13338148d68d0.pid"
[10:32:09.720]  $ rshcmd_label    : NULL
[10:32:09.720]  $ rsh_call        : NULL
[10:32:09.720]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:09.720]  $ localMachine    : logi TRUE
[10:32:09.720]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:09.720]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:09.720]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:09.720]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:09.720]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:09.720]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:09.720]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:09.720]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:09.720]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:09.720]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:09.720]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:09.720]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:09.720]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:09.720]  $ arguments       :List of 28
[10:32:09.720]   ..$ worker          : chr "localhost"
[10:32:09.720]   ..$ master          : NULL
[10:32:09.720]   ..$ port            : int 11537
[10:32:09.720]   ..$ connectTimeout  : num 120
[10:32:09.720]   ..$ timeout         : num 2592000
[10:32:09.720]   ..$ rscript         : NULL
[10:32:09.720]   ..$ homogeneous     : NULL
[10:32:09.720]   ..$ rscript_args    : NULL
[10:32:09.720]   ..$ rscript_envs    : NULL
[10:32:09.720]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:09.720]   ..$ rscript_startup : NULL
[10:32:09.720]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:09.720]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:09.720]   ..$ methods         : logi TRUE
[10:32:09.720]   ..$ socketOptions   : chr "no-delay"
[10:32:09.720]   ..$ useXDR          : logi FALSE
[10:32:09.720]   ..$ outfile         : chr "/dev/null"
[10:32:09.720]   ..$ renice          : int NA
[10:32:09.720]   ..$ rshcmd          : NULL
[10:32:09.720]   ..$ user            : NULL
[10:32:09.720]   ..$ revtunnel       : logi NA
[10:32:09.720]   ..$ rshlogfile      : NULL
[10:32:09.720]   ..$ rshopts         : NULL
[10:32:09.720]   ..$ rank            : int 1
[10:32:09.720]   ..$ manual          : logi FALSE
[10:32:09.720]   ..$ dryrun          : logi FALSE
[10:32:09.720]   ..$ quiet           : logi FALSE
[10:32:09.720]   ..$ setup_strategy  : chr "parallel"
[10:32:09.720]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:09.739] [local output] System call to launch all workers:
[10:32:09.740] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpP6IVfl/worker.rank=1.parallelly.parent=78648.13338148d68d0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11537 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:09.740] [local output] Starting PSOCK main server
[10:32:09.746] [local output] Workers launched
[10:32:09.746] [local output] Waiting for workers to connect back
[10:32:09.746]  - [local output] 0 workers out of 2 ready
[10:32:09.990]  - [local output] 0 workers out of 2 ready
[10:32:09.991]  - [local output] 1 workers out of 2 ready
[10:32:09.994]  - [local output] 1 workers out of 2 ready
[10:32:09.994]  - [local output] 2 workers out of 2 ready
[10:32:09.994] [local output] Launching of workers completed
[10:32:09.994] [local output] Collecting session information from workers
[10:32:09.995] [local output]  - Worker #1 of 2
[10:32:09.996] [local output]  - Worker #2 of 2
[10:32:09.996] [local output] makeClusterPSOCK() ... done
[10:32:10.009] Packages needed by the future expression (n = 0): <none>
[10:32:10.009] Packages needed by future strategies (n = 0): <none>
[10:32:10.010] {
[10:32:10.010]     {
[10:32:10.010]         {
[10:32:10.010]             ...future.startTime <- base::Sys.time()
[10:32:10.010]             {
[10:32:10.010]                 {
[10:32:10.010]                   {
[10:32:10.010]                     {
[10:32:10.010]                       base::local({
[10:32:10.010]                         has_future <- base::requireNamespace("future", 
[10:32:10.010]                           quietly = TRUE)
[10:32:10.010]                         if (has_future) {
[10:32:10.010]                           ns <- base::getNamespace("future")
[10:32:10.010]                           version <- ns[[".package"]][["version"]]
[10:32:10.010]                           if (is.null(version)) 
[10:32:10.010]                             version <- utils::packageVersion("future")
[10:32:10.010]                         }
[10:32:10.010]                         else {
[10:32:10.010]                           version <- NULL
[10:32:10.010]                         }
[10:32:10.010]                         if (!has_future || version < "1.8.0") {
[10:32:10.010]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:10.010]                             "", base::R.version$version.string), 
[10:32:10.010]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:10.010]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:10.010]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:10.010]                               "release", "version")], collapse = " "), 
[10:32:10.010]                             hostname = base::Sys.info()[["nodename"]])
[10:32:10.010]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:10.010]                             info)
[10:32:10.010]                           info <- base::paste(info, collapse = "; ")
[10:32:10.010]                           if (!has_future) {
[10:32:10.010]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:10.010]                               info)
[10:32:10.010]                           }
[10:32:10.010]                           else {
[10:32:10.010]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:10.010]                               info, version)
[10:32:10.010]                           }
[10:32:10.010]                           base::stop(msg)
[10:32:10.010]                         }
[10:32:10.010]                       })
[10:32:10.010]                     }
[10:32:10.010]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:10.010]                     base::options(mc.cores = 1L)
[10:32:10.010]                   }
[10:32:10.010]                   ...future.strategy.old <- future::plan("list")
[10:32:10.010]                   options(future.plan = NULL)
[10:32:10.010]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.010]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:10.010]                 }
[10:32:10.010]                 ...future.workdir <- getwd()
[10:32:10.010]             }
[10:32:10.010]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:10.010]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:10.010]         }
[10:32:10.010]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:10.010]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:10.010]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:10.010]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:10.010]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:10.010]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:10.010]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:10.010]             base::names(...future.oldOptions))
[10:32:10.010]     }
[10:32:10.010]     if (FALSE) {
[10:32:10.010]     }
[10:32:10.010]     else {
[10:32:10.010]         if (TRUE) {
[10:32:10.010]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:10.010]                 open = "w")
[10:32:10.010]         }
[10:32:10.010]         else {
[10:32:10.010]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:10.010]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:10.010]         }
[10:32:10.010]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:10.010]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:10.010]             base::sink(type = "output", split = FALSE)
[10:32:10.010]             base::close(...future.stdout)
[10:32:10.010]         }, add = TRUE)
[10:32:10.010]     }
[10:32:10.010]     ...future.frame <- base::sys.nframe()
[10:32:10.010]     ...future.conditions <- base::list()
[10:32:10.010]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:10.010]     if (FALSE) {
[10:32:10.010]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:10.010]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:10.010]     }
[10:32:10.010]     ...future.result <- base::tryCatch({
[10:32:10.010]         base::withCallingHandlers({
[10:32:10.010]             ...future.value <- base::withVisible(base::local({
[10:32:10.010]                 ...future.makeSendCondition <- base::local({
[10:32:10.010]                   sendCondition <- NULL
[10:32:10.010]                   function(frame = 1L) {
[10:32:10.010]                     if (is.function(sendCondition)) 
[10:32:10.010]                       return(sendCondition)
[10:32:10.010]                     ns <- getNamespace("parallel")
[10:32:10.010]                     if (exists("sendData", mode = "function", 
[10:32:10.010]                       envir = ns)) {
[10:32:10.010]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:10.010]                         envir = ns)
[10:32:10.010]                       envir <- sys.frame(frame)
[10:32:10.010]                       master <- NULL
[10:32:10.010]                       while (!identical(envir, .GlobalEnv) && 
[10:32:10.010]                         !identical(envir, emptyenv())) {
[10:32:10.010]                         if (exists("master", mode = "list", envir = envir, 
[10:32:10.010]                           inherits = FALSE)) {
[10:32:10.010]                           master <- get("master", mode = "list", 
[10:32:10.010]                             envir = envir, inherits = FALSE)
[10:32:10.010]                           if (inherits(master, c("SOCKnode", 
[10:32:10.010]                             "SOCK0node"))) {
[10:32:10.010]                             sendCondition <<- function(cond) {
[10:32:10.010]                               data <- list(type = "VALUE", value = cond, 
[10:32:10.010]                                 success = TRUE)
[10:32:10.010]                               parallel_sendData(master, data)
[10:32:10.010]                             }
[10:32:10.010]                             return(sendCondition)
[10:32:10.010]                           }
[10:32:10.010]                         }
[10:32:10.010]                         frame <- frame + 1L
[10:32:10.010]                         envir <- sys.frame(frame)
[10:32:10.010]                       }
[10:32:10.010]                     }
[10:32:10.010]                     sendCondition <<- function(cond) NULL
[10:32:10.010]                   }
[10:32:10.010]                 })
[10:32:10.010]                 withCallingHandlers({
[10:32:10.010]                   NA
[10:32:10.010]                 }, immediateCondition = function(cond) {
[10:32:10.010]                   sendCondition <- ...future.makeSendCondition()
[10:32:10.010]                   sendCondition(cond)
[10:32:10.010]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.010]                   {
[10:32:10.010]                     inherits <- base::inherits
[10:32:10.010]                     invokeRestart <- base::invokeRestart
[10:32:10.010]                     is.null <- base::is.null
[10:32:10.010]                     muffled <- FALSE
[10:32:10.010]                     if (inherits(cond, "message")) {
[10:32:10.010]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:10.010]                       if (muffled) 
[10:32:10.010]                         invokeRestart("muffleMessage")
[10:32:10.010]                     }
[10:32:10.010]                     else if (inherits(cond, "warning")) {
[10:32:10.010]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:10.010]                       if (muffled) 
[10:32:10.010]                         invokeRestart("muffleWarning")
[10:32:10.010]                     }
[10:32:10.010]                     else if (inherits(cond, "condition")) {
[10:32:10.010]                       if (!is.null(pattern)) {
[10:32:10.010]                         computeRestarts <- base::computeRestarts
[10:32:10.010]                         grepl <- base::grepl
[10:32:10.010]                         restarts <- computeRestarts(cond)
[10:32:10.010]                         for (restart in restarts) {
[10:32:10.010]                           name <- restart$name
[10:32:10.010]                           if (is.null(name)) 
[10:32:10.010]                             next
[10:32:10.010]                           if (!grepl(pattern, name)) 
[10:32:10.010]                             next
[10:32:10.010]                           invokeRestart(restart)
[10:32:10.010]                           muffled <- TRUE
[10:32:10.010]                           break
[10:32:10.010]                         }
[10:32:10.010]                       }
[10:32:10.010]                     }
[10:32:10.010]                     invisible(muffled)
[10:32:10.010]                   }
[10:32:10.010]                   muffleCondition(cond)
[10:32:10.010]                 })
[10:32:10.010]             }))
[10:32:10.010]             future::FutureResult(value = ...future.value$value, 
[10:32:10.010]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.010]                   ...future.rng), globalenv = if (FALSE) 
[10:32:10.010]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:10.010]                     ...future.globalenv.names))
[10:32:10.010]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:10.010]         }, condition = base::local({
[10:32:10.010]             c <- base::c
[10:32:10.010]             inherits <- base::inherits
[10:32:10.010]             invokeRestart <- base::invokeRestart
[10:32:10.010]             length <- base::length
[10:32:10.010]             list <- base::list
[10:32:10.010]             seq.int <- base::seq.int
[10:32:10.010]             signalCondition <- base::signalCondition
[10:32:10.010]             sys.calls <- base::sys.calls
[10:32:10.010]             `[[` <- base::`[[`
[10:32:10.010]             `+` <- base::`+`
[10:32:10.010]             `<<-` <- base::`<<-`
[10:32:10.010]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:10.010]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:10.010]                   3L)]
[10:32:10.010]             }
[10:32:10.010]             function(cond) {
[10:32:10.010]                 is_error <- inherits(cond, "error")
[10:32:10.010]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:10.010]                   NULL)
[10:32:10.010]                 if (is_error) {
[10:32:10.010]                   sessionInformation <- function() {
[10:32:10.010]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:10.010]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:10.010]                       search = base::search(), system = base::Sys.info())
[10:32:10.010]                   }
[10:32:10.010]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.010]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:10.010]                     cond$call), session = sessionInformation(), 
[10:32:10.010]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:10.010]                   signalCondition(cond)
[10:32:10.010]                 }
[10:32:10.010]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:10.010]                 "immediateCondition"))) {
[10:32:10.010]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:10.010]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.010]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:10.010]                   if (TRUE && !signal) {
[10:32:10.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.010]                     {
[10:32:10.010]                       inherits <- base::inherits
[10:32:10.010]                       invokeRestart <- base::invokeRestart
[10:32:10.010]                       is.null <- base::is.null
[10:32:10.010]                       muffled <- FALSE
[10:32:10.010]                       if (inherits(cond, "message")) {
[10:32:10.010]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.010]                         if (muffled) 
[10:32:10.010]                           invokeRestart("muffleMessage")
[10:32:10.010]                       }
[10:32:10.010]                       else if (inherits(cond, "warning")) {
[10:32:10.010]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.010]                         if (muffled) 
[10:32:10.010]                           invokeRestart("muffleWarning")
[10:32:10.010]                       }
[10:32:10.010]                       else if (inherits(cond, "condition")) {
[10:32:10.010]                         if (!is.null(pattern)) {
[10:32:10.010]                           computeRestarts <- base::computeRestarts
[10:32:10.010]                           grepl <- base::grepl
[10:32:10.010]                           restarts <- computeRestarts(cond)
[10:32:10.010]                           for (restart in restarts) {
[10:32:10.010]                             name <- restart$name
[10:32:10.010]                             if (is.null(name)) 
[10:32:10.010]                               next
[10:32:10.010]                             if (!grepl(pattern, name)) 
[10:32:10.010]                               next
[10:32:10.010]                             invokeRestart(restart)
[10:32:10.010]                             muffled <- TRUE
[10:32:10.010]                             break
[10:32:10.010]                           }
[10:32:10.010]                         }
[10:32:10.010]                       }
[10:32:10.010]                       invisible(muffled)
[10:32:10.010]                     }
[10:32:10.010]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.010]                   }
[10:32:10.010]                 }
[10:32:10.010]                 else {
[10:32:10.010]                   if (TRUE) {
[10:32:10.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.010]                     {
[10:32:10.010]                       inherits <- base::inherits
[10:32:10.010]                       invokeRestart <- base::invokeRestart
[10:32:10.010]                       is.null <- base::is.null
[10:32:10.010]                       muffled <- FALSE
[10:32:10.010]                       if (inherits(cond, "message")) {
[10:32:10.010]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.010]                         if (muffled) 
[10:32:10.010]                           invokeRestart("muffleMessage")
[10:32:10.010]                       }
[10:32:10.010]                       else if (inherits(cond, "warning")) {
[10:32:10.010]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.010]                         if (muffled) 
[10:32:10.010]                           invokeRestart("muffleWarning")
[10:32:10.010]                       }
[10:32:10.010]                       else if (inherits(cond, "condition")) {
[10:32:10.010]                         if (!is.null(pattern)) {
[10:32:10.010]                           computeRestarts <- base::computeRestarts
[10:32:10.010]                           grepl <- base::grepl
[10:32:10.010]                           restarts <- computeRestarts(cond)
[10:32:10.010]                           for (restart in restarts) {
[10:32:10.010]                             name <- restart$name
[10:32:10.010]                             if (is.null(name)) 
[10:32:10.010]                               next
[10:32:10.010]                             if (!grepl(pattern, name)) 
[10:32:10.010]                               next
[10:32:10.010]                             invokeRestart(restart)
[10:32:10.010]                             muffled <- TRUE
[10:32:10.010]                             break
[10:32:10.010]                           }
[10:32:10.010]                         }
[10:32:10.010]                       }
[10:32:10.010]                       invisible(muffled)
[10:32:10.010]                     }
[10:32:10.010]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.010]                   }
[10:32:10.010]                 }
[10:32:10.010]             }
[10:32:10.010]         }))
[10:32:10.010]     }, error = function(ex) {
[10:32:10.010]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:10.010]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.010]                 ...future.rng), started = ...future.startTime, 
[10:32:10.010]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:10.010]             version = "1.8"), class = "FutureResult")
[10:32:10.010]     }, finally = {
[10:32:10.010]         if (!identical(...future.workdir, getwd())) 
[10:32:10.010]             setwd(...future.workdir)
[10:32:10.010]         {
[10:32:10.010]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:10.010]                 ...future.oldOptions$nwarnings <- NULL
[10:32:10.010]             }
[10:32:10.010]             base::options(...future.oldOptions)
[10:32:10.010]             if (.Platform$OS.type == "windows") {
[10:32:10.010]                 old_names <- names(...future.oldEnvVars)
[10:32:10.010]                 envs <- base::Sys.getenv()
[10:32:10.010]                 names <- names(envs)
[10:32:10.010]                 common <- intersect(names, old_names)
[10:32:10.010]                 added <- setdiff(names, old_names)
[10:32:10.010]                 removed <- setdiff(old_names, names)
[10:32:10.010]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:10.010]                   envs[common]]
[10:32:10.010]                 NAMES <- toupper(changed)
[10:32:10.010]                 args <- list()
[10:32:10.010]                 for (kk in seq_along(NAMES)) {
[10:32:10.010]                   name <- changed[[kk]]
[10:32:10.010]                   NAME <- NAMES[[kk]]
[10:32:10.010]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.010]                     next
[10:32:10.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.010]                 }
[10:32:10.010]                 NAMES <- toupper(added)
[10:32:10.010]                 for (kk in seq_along(NAMES)) {
[10:32:10.010]                   name <- added[[kk]]
[10:32:10.010]                   NAME <- NAMES[[kk]]
[10:32:10.010]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.010]                     next
[10:32:10.010]                   args[[name]] <- ""
[10:32:10.010]                 }
[10:32:10.010]                 NAMES <- toupper(removed)
[10:32:10.010]                 for (kk in seq_along(NAMES)) {
[10:32:10.010]                   name <- removed[[kk]]
[10:32:10.010]                   NAME <- NAMES[[kk]]
[10:32:10.010]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.010]                     next
[10:32:10.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.010]                 }
[10:32:10.010]                 if (length(args) > 0) 
[10:32:10.010]                   base::do.call(base::Sys.setenv, args = args)
[10:32:10.010]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:10.010]             }
[10:32:10.010]             else {
[10:32:10.010]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:10.010]             }
[10:32:10.010]             {
[10:32:10.010]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:10.010]                   0L) {
[10:32:10.010]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:10.010]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:10.010]                   base::options(opts)
[10:32:10.010]                 }
[10:32:10.010]                 {
[10:32:10.010]                   {
[10:32:10.010]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:10.010]                     NULL
[10:32:10.010]                   }
[10:32:10.010]                   options(future.plan = NULL)
[10:32:10.010]                   if (is.na(NA_character_)) 
[10:32:10.010]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.010]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:10.010]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:10.010]                     .init = FALSE)
[10:32:10.010]                 }
[10:32:10.010]             }
[10:32:10.010]         }
[10:32:10.010]     })
[10:32:10.010]     if (TRUE) {
[10:32:10.010]         base::sink(type = "output", split = FALSE)
[10:32:10.010]         if (TRUE) {
[10:32:10.010]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:10.010]         }
[10:32:10.010]         else {
[10:32:10.010]             ...future.result["stdout"] <- base::list(NULL)
[10:32:10.010]         }
[10:32:10.010]         base::close(...future.stdout)
[10:32:10.010]         ...future.stdout <- NULL
[10:32:10.010]     }
[10:32:10.010]     ...future.result$conditions <- ...future.conditions
[10:32:10.010]     ...future.result$finished <- base::Sys.time()
[10:32:10.010]     ...future.result
[10:32:10.010] }
[10:32:10.064] MultisessionFuture started
[10:32:10.065] result() for ClusterFuture ...
[10:32:10.065] receiveMessageFromWorker() for ClusterFuture ...
[10:32:10.065] - Validating connection of MultisessionFuture
[10:32:10.098] - received message: FutureResult
[10:32:10.098] - Received FutureResult
[10:32:10.101] - Erased future from FutureRegistry
[10:32:10.102] result() for ClusterFuture ...
[10:32:10.102] - result already collected: FutureResult
[10:32:10.102] result() for ClusterFuture ... done
[10:32:10.102] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:10.102] result() for ClusterFuture ... done
[10:32:10.102] result() for ClusterFuture ...
[10:32:10.103] - result already collected: FutureResult
[10:32:10.103] result() for ClusterFuture ... done
[10:32:10.103] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:32:10.103] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[10:32:10.103] getGlobalsAndPackages() ...
[10:32:10.103] Searching for globals...
[10:32:10.110] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[10:32:10.111] Searching for globals ... DONE
[10:32:10.111] Resolving globals: FALSE
[10:32:10.112] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[10:32:10.113] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:32:10.113] - globals: [2] ‘slow_fcn’, ‘x’
[10:32:10.113] 
[10:32:10.113] getGlobalsAndPackages() ... DONE
[10:32:10.115] run() for ‘Future’ ...
[10:32:10.115] - state: ‘created’
[10:32:10.115] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:10.126] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:10.127] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:10.127]   - Field: ‘node’
[10:32:10.127]   - Field: ‘label’
[10:32:10.127]   - Field: ‘local’
[10:32:10.127]   - Field: ‘owner’
[10:32:10.127]   - Field: ‘envir’
[10:32:10.127]   - Field: ‘workers’
[10:32:10.127]   - Field: ‘packages’
[10:32:10.127]   - Field: ‘gc’
[10:32:10.127]   - Field: ‘conditions’
[10:32:10.128]   - Field: ‘persistent’
[10:32:10.128]   - Field: ‘expr’
[10:32:10.128]   - Field: ‘uuid’
[10:32:10.128]   - Field: ‘seed’
[10:32:10.128]   - Field: ‘version’
[10:32:10.128]   - Field: ‘result’
[10:32:10.128]   - Field: ‘asynchronous’
[10:32:10.128]   - Field: ‘calls’
[10:32:10.128]   - Field: ‘globals’
[10:32:10.129]   - Field: ‘stdout’
[10:32:10.129]   - Field: ‘earlySignal’
[10:32:10.129]   - Field: ‘lazy’
[10:32:10.129]   - Field: ‘state’
[10:32:10.129] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:10.129] - Launch lazy future ...
[10:32:10.130] Packages needed by the future expression (n = 0): <none>
[10:32:10.130] Packages needed by future strategies (n = 0): <none>
[10:32:10.130] {
[10:32:10.130]     {
[10:32:10.130]         {
[10:32:10.130]             ...future.startTime <- base::Sys.time()
[10:32:10.130]             {
[10:32:10.130]                 {
[10:32:10.130]                   {
[10:32:10.130]                     {
[10:32:10.130]                       base::local({
[10:32:10.130]                         has_future <- base::requireNamespace("future", 
[10:32:10.130]                           quietly = TRUE)
[10:32:10.130]                         if (has_future) {
[10:32:10.130]                           ns <- base::getNamespace("future")
[10:32:10.130]                           version <- ns[[".package"]][["version"]]
[10:32:10.130]                           if (is.null(version)) 
[10:32:10.130]                             version <- utils::packageVersion("future")
[10:32:10.130]                         }
[10:32:10.130]                         else {
[10:32:10.130]                           version <- NULL
[10:32:10.130]                         }
[10:32:10.130]                         if (!has_future || version < "1.8.0") {
[10:32:10.130]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:10.130]                             "", base::R.version$version.string), 
[10:32:10.130]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:10.130]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:10.130]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:10.130]                               "release", "version")], collapse = " "), 
[10:32:10.130]                             hostname = base::Sys.info()[["nodename"]])
[10:32:10.130]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:10.130]                             info)
[10:32:10.130]                           info <- base::paste(info, collapse = "; ")
[10:32:10.130]                           if (!has_future) {
[10:32:10.130]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:10.130]                               info)
[10:32:10.130]                           }
[10:32:10.130]                           else {
[10:32:10.130]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:10.130]                               info, version)
[10:32:10.130]                           }
[10:32:10.130]                           base::stop(msg)
[10:32:10.130]                         }
[10:32:10.130]                       })
[10:32:10.130]                     }
[10:32:10.130]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:10.130]                     base::options(mc.cores = 1L)
[10:32:10.130]                   }
[10:32:10.130]                   ...future.strategy.old <- future::plan("list")
[10:32:10.130]                   options(future.plan = NULL)
[10:32:10.130]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.130]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:10.130]                 }
[10:32:10.130]                 ...future.workdir <- getwd()
[10:32:10.130]             }
[10:32:10.130]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:10.130]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:10.130]         }
[10:32:10.130]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:10.130]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:10.130]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:10.130]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:10.130]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:10.130]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:10.130]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:10.130]             base::names(...future.oldOptions))
[10:32:10.130]     }
[10:32:10.130]     if (FALSE) {
[10:32:10.130]     }
[10:32:10.130]     else {
[10:32:10.130]         if (TRUE) {
[10:32:10.130]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:10.130]                 open = "w")
[10:32:10.130]         }
[10:32:10.130]         else {
[10:32:10.130]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:10.130]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:10.130]         }
[10:32:10.130]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:10.130]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:10.130]             base::sink(type = "output", split = FALSE)
[10:32:10.130]             base::close(...future.stdout)
[10:32:10.130]         }, add = TRUE)
[10:32:10.130]     }
[10:32:10.130]     ...future.frame <- base::sys.nframe()
[10:32:10.130]     ...future.conditions <- base::list()
[10:32:10.130]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:10.130]     if (FALSE) {
[10:32:10.130]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:10.130]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:10.130]     }
[10:32:10.130]     ...future.result <- base::tryCatch({
[10:32:10.130]         base::withCallingHandlers({
[10:32:10.130]             ...future.value <- base::withVisible(base::local({
[10:32:10.130]                 ...future.makeSendCondition <- base::local({
[10:32:10.130]                   sendCondition <- NULL
[10:32:10.130]                   function(frame = 1L) {
[10:32:10.130]                     if (is.function(sendCondition)) 
[10:32:10.130]                       return(sendCondition)
[10:32:10.130]                     ns <- getNamespace("parallel")
[10:32:10.130]                     if (exists("sendData", mode = "function", 
[10:32:10.130]                       envir = ns)) {
[10:32:10.130]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:10.130]                         envir = ns)
[10:32:10.130]                       envir <- sys.frame(frame)
[10:32:10.130]                       master <- NULL
[10:32:10.130]                       while (!identical(envir, .GlobalEnv) && 
[10:32:10.130]                         !identical(envir, emptyenv())) {
[10:32:10.130]                         if (exists("master", mode = "list", envir = envir, 
[10:32:10.130]                           inherits = FALSE)) {
[10:32:10.130]                           master <- get("master", mode = "list", 
[10:32:10.130]                             envir = envir, inherits = FALSE)
[10:32:10.130]                           if (inherits(master, c("SOCKnode", 
[10:32:10.130]                             "SOCK0node"))) {
[10:32:10.130]                             sendCondition <<- function(cond) {
[10:32:10.130]                               data <- list(type = "VALUE", value = cond, 
[10:32:10.130]                                 success = TRUE)
[10:32:10.130]                               parallel_sendData(master, data)
[10:32:10.130]                             }
[10:32:10.130]                             return(sendCondition)
[10:32:10.130]                           }
[10:32:10.130]                         }
[10:32:10.130]                         frame <- frame + 1L
[10:32:10.130]                         envir <- sys.frame(frame)
[10:32:10.130]                       }
[10:32:10.130]                     }
[10:32:10.130]                     sendCondition <<- function(cond) NULL
[10:32:10.130]                   }
[10:32:10.130]                 })
[10:32:10.130]                 withCallingHandlers({
[10:32:10.130]                   slow_fcn(x)
[10:32:10.130]                 }, immediateCondition = function(cond) {
[10:32:10.130]                   sendCondition <- ...future.makeSendCondition()
[10:32:10.130]                   sendCondition(cond)
[10:32:10.130]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.130]                   {
[10:32:10.130]                     inherits <- base::inherits
[10:32:10.130]                     invokeRestart <- base::invokeRestart
[10:32:10.130]                     is.null <- base::is.null
[10:32:10.130]                     muffled <- FALSE
[10:32:10.130]                     if (inherits(cond, "message")) {
[10:32:10.130]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:10.130]                       if (muffled) 
[10:32:10.130]                         invokeRestart("muffleMessage")
[10:32:10.130]                     }
[10:32:10.130]                     else if (inherits(cond, "warning")) {
[10:32:10.130]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:10.130]                       if (muffled) 
[10:32:10.130]                         invokeRestart("muffleWarning")
[10:32:10.130]                     }
[10:32:10.130]                     else if (inherits(cond, "condition")) {
[10:32:10.130]                       if (!is.null(pattern)) {
[10:32:10.130]                         computeRestarts <- base::computeRestarts
[10:32:10.130]                         grepl <- base::grepl
[10:32:10.130]                         restarts <- computeRestarts(cond)
[10:32:10.130]                         for (restart in restarts) {
[10:32:10.130]                           name <- restart$name
[10:32:10.130]                           if (is.null(name)) 
[10:32:10.130]                             next
[10:32:10.130]                           if (!grepl(pattern, name)) 
[10:32:10.130]                             next
[10:32:10.130]                           invokeRestart(restart)
[10:32:10.130]                           muffled <- TRUE
[10:32:10.130]                           break
[10:32:10.130]                         }
[10:32:10.130]                       }
[10:32:10.130]                     }
[10:32:10.130]                     invisible(muffled)
[10:32:10.130]                   }
[10:32:10.130]                   muffleCondition(cond)
[10:32:10.130]                 })
[10:32:10.130]             }))
[10:32:10.130]             future::FutureResult(value = ...future.value$value, 
[10:32:10.130]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.130]                   ...future.rng), globalenv = if (FALSE) 
[10:32:10.130]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:10.130]                     ...future.globalenv.names))
[10:32:10.130]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:10.130]         }, condition = base::local({
[10:32:10.130]             c <- base::c
[10:32:10.130]             inherits <- base::inherits
[10:32:10.130]             invokeRestart <- base::invokeRestart
[10:32:10.130]             length <- base::length
[10:32:10.130]             list <- base::list
[10:32:10.130]             seq.int <- base::seq.int
[10:32:10.130]             signalCondition <- base::signalCondition
[10:32:10.130]             sys.calls <- base::sys.calls
[10:32:10.130]             `[[` <- base::`[[`
[10:32:10.130]             `+` <- base::`+`
[10:32:10.130]             `<<-` <- base::`<<-`
[10:32:10.130]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:10.130]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:10.130]                   3L)]
[10:32:10.130]             }
[10:32:10.130]             function(cond) {
[10:32:10.130]                 is_error <- inherits(cond, "error")
[10:32:10.130]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:10.130]                   NULL)
[10:32:10.130]                 if (is_error) {
[10:32:10.130]                   sessionInformation <- function() {
[10:32:10.130]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:10.130]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:10.130]                       search = base::search(), system = base::Sys.info())
[10:32:10.130]                   }
[10:32:10.130]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.130]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:10.130]                     cond$call), session = sessionInformation(), 
[10:32:10.130]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:10.130]                   signalCondition(cond)
[10:32:10.130]                 }
[10:32:10.130]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:10.130]                 "immediateCondition"))) {
[10:32:10.130]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:10.130]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.130]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:10.130]                   if (TRUE && !signal) {
[10:32:10.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.130]                     {
[10:32:10.130]                       inherits <- base::inherits
[10:32:10.130]                       invokeRestart <- base::invokeRestart
[10:32:10.130]                       is.null <- base::is.null
[10:32:10.130]                       muffled <- FALSE
[10:32:10.130]                       if (inherits(cond, "message")) {
[10:32:10.130]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.130]                         if (muffled) 
[10:32:10.130]                           invokeRestart("muffleMessage")
[10:32:10.130]                       }
[10:32:10.130]                       else if (inherits(cond, "warning")) {
[10:32:10.130]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.130]                         if (muffled) 
[10:32:10.130]                           invokeRestart("muffleWarning")
[10:32:10.130]                       }
[10:32:10.130]                       else if (inherits(cond, "condition")) {
[10:32:10.130]                         if (!is.null(pattern)) {
[10:32:10.130]                           computeRestarts <- base::computeRestarts
[10:32:10.130]                           grepl <- base::grepl
[10:32:10.130]                           restarts <- computeRestarts(cond)
[10:32:10.130]                           for (restart in restarts) {
[10:32:10.130]                             name <- restart$name
[10:32:10.130]                             if (is.null(name)) 
[10:32:10.130]                               next
[10:32:10.130]                             if (!grepl(pattern, name)) 
[10:32:10.130]                               next
[10:32:10.130]                             invokeRestart(restart)
[10:32:10.130]                             muffled <- TRUE
[10:32:10.130]                             break
[10:32:10.130]                           }
[10:32:10.130]                         }
[10:32:10.130]                       }
[10:32:10.130]                       invisible(muffled)
[10:32:10.130]                     }
[10:32:10.130]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.130]                   }
[10:32:10.130]                 }
[10:32:10.130]                 else {
[10:32:10.130]                   if (TRUE) {
[10:32:10.130]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.130]                     {
[10:32:10.130]                       inherits <- base::inherits
[10:32:10.130]                       invokeRestart <- base::invokeRestart
[10:32:10.130]                       is.null <- base::is.null
[10:32:10.130]                       muffled <- FALSE
[10:32:10.130]                       if (inherits(cond, "message")) {
[10:32:10.130]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.130]                         if (muffled) 
[10:32:10.130]                           invokeRestart("muffleMessage")
[10:32:10.130]                       }
[10:32:10.130]                       else if (inherits(cond, "warning")) {
[10:32:10.130]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.130]                         if (muffled) 
[10:32:10.130]                           invokeRestart("muffleWarning")
[10:32:10.130]                       }
[10:32:10.130]                       else if (inherits(cond, "condition")) {
[10:32:10.130]                         if (!is.null(pattern)) {
[10:32:10.130]                           computeRestarts <- base::computeRestarts
[10:32:10.130]                           grepl <- base::grepl
[10:32:10.130]                           restarts <- computeRestarts(cond)
[10:32:10.130]                           for (restart in restarts) {
[10:32:10.130]                             name <- restart$name
[10:32:10.130]                             if (is.null(name)) 
[10:32:10.130]                               next
[10:32:10.130]                             if (!grepl(pattern, name)) 
[10:32:10.130]                               next
[10:32:10.130]                             invokeRestart(restart)
[10:32:10.130]                             muffled <- TRUE
[10:32:10.130]                             break
[10:32:10.130]                           }
[10:32:10.130]                         }
[10:32:10.130]                       }
[10:32:10.130]                       invisible(muffled)
[10:32:10.130]                     }
[10:32:10.130]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.130]                   }
[10:32:10.130]                 }
[10:32:10.130]             }
[10:32:10.130]         }))
[10:32:10.130]     }, error = function(ex) {
[10:32:10.130]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:10.130]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.130]                 ...future.rng), started = ...future.startTime, 
[10:32:10.130]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:10.130]             version = "1.8"), class = "FutureResult")
[10:32:10.130]     }, finally = {
[10:32:10.130]         if (!identical(...future.workdir, getwd())) 
[10:32:10.130]             setwd(...future.workdir)
[10:32:10.130]         {
[10:32:10.130]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:10.130]                 ...future.oldOptions$nwarnings <- NULL
[10:32:10.130]             }
[10:32:10.130]             base::options(...future.oldOptions)
[10:32:10.130]             if (.Platform$OS.type == "windows") {
[10:32:10.130]                 old_names <- names(...future.oldEnvVars)
[10:32:10.130]                 envs <- base::Sys.getenv()
[10:32:10.130]                 names <- names(envs)
[10:32:10.130]                 common <- intersect(names, old_names)
[10:32:10.130]                 added <- setdiff(names, old_names)
[10:32:10.130]                 removed <- setdiff(old_names, names)
[10:32:10.130]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:10.130]                   envs[common]]
[10:32:10.130]                 NAMES <- toupper(changed)
[10:32:10.130]                 args <- list()
[10:32:10.130]                 for (kk in seq_along(NAMES)) {
[10:32:10.130]                   name <- changed[[kk]]
[10:32:10.130]                   NAME <- NAMES[[kk]]
[10:32:10.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.130]                     next
[10:32:10.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.130]                 }
[10:32:10.130]                 NAMES <- toupper(added)
[10:32:10.130]                 for (kk in seq_along(NAMES)) {
[10:32:10.130]                   name <- added[[kk]]
[10:32:10.130]                   NAME <- NAMES[[kk]]
[10:32:10.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.130]                     next
[10:32:10.130]                   args[[name]] <- ""
[10:32:10.130]                 }
[10:32:10.130]                 NAMES <- toupper(removed)
[10:32:10.130]                 for (kk in seq_along(NAMES)) {
[10:32:10.130]                   name <- removed[[kk]]
[10:32:10.130]                   NAME <- NAMES[[kk]]
[10:32:10.130]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.130]                     next
[10:32:10.130]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.130]                 }
[10:32:10.130]                 if (length(args) > 0) 
[10:32:10.130]                   base::do.call(base::Sys.setenv, args = args)
[10:32:10.130]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:10.130]             }
[10:32:10.130]             else {
[10:32:10.130]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:10.130]             }
[10:32:10.130]             {
[10:32:10.130]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:10.130]                   0L) {
[10:32:10.130]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:10.130]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:10.130]                   base::options(opts)
[10:32:10.130]                 }
[10:32:10.130]                 {
[10:32:10.130]                   {
[10:32:10.130]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:10.130]                     NULL
[10:32:10.130]                   }
[10:32:10.130]                   options(future.plan = NULL)
[10:32:10.130]                   if (is.na(NA_character_)) 
[10:32:10.130]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.130]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:10.130]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:10.130]                     .init = FALSE)
[10:32:10.130]                 }
[10:32:10.130]             }
[10:32:10.130]         }
[10:32:10.130]     })
[10:32:10.130]     if (TRUE) {
[10:32:10.130]         base::sink(type = "output", split = FALSE)
[10:32:10.130]         if (TRUE) {
[10:32:10.130]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:10.130]         }
[10:32:10.130]         else {
[10:32:10.130]             ...future.result["stdout"] <- base::list(NULL)
[10:32:10.130]         }
[10:32:10.130]         base::close(...future.stdout)
[10:32:10.130]         ...future.stdout <- NULL
[10:32:10.130]     }
[10:32:10.130]     ...future.result$conditions <- ...future.conditions
[10:32:10.130]     ...future.result$finished <- base::Sys.time()
[10:32:10.130]     ...future.result
[10:32:10.130] }
[10:32:10.136] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[10:32:10.136] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[10:32:10.137] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[10:32:10.137] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:10.137] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:10.138] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[10:32:10.139] MultisessionFuture started
[10:32:10.140] - Launch lazy future ... done
[10:32:10.140] run() for ‘MultisessionFuture’ ... done
[10:32:10.141] getGlobalsAndPackages() ...
[10:32:10.141] Searching for globals...
[10:32:10.146] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[10:32:10.146] Searching for globals ... DONE
[10:32:10.146] Resolving globals: FALSE
[10:32:10.147] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[10:32:10.147] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:32:10.147] - globals: [2] ‘slow_fcn’, ‘x’
[10:32:10.147] 
[10:32:10.147] getGlobalsAndPackages() ... DONE
[10:32:10.148] run() for ‘Future’ ...
[10:32:10.148] - state: ‘created’
[10:32:10.148] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:10.159] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:10.159] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:10.159]   - Field: ‘node’
[10:32:10.159]   - Field: ‘label’
[10:32:10.159]   - Field: ‘local’
[10:32:10.159]   - Field: ‘owner’
[10:32:10.159]   - Field: ‘envir’
[10:32:10.159]   - Field: ‘workers’
[10:32:10.160]   - Field: ‘packages’
[10:32:10.160]   - Field: ‘gc’
[10:32:10.160]   - Field: ‘conditions’
[10:32:10.160]   - Field: ‘persistent’
[10:32:10.160]   - Field: ‘expr’
[10:32:10.160]   - Field: ‘uuid’
[10:32:10.160]   - Field: ‘seed’
[10:32:10.160]   - Field: ‘version’
[10:32:10.160]   - Field: ‘result’
[10:32:10.160]   - Field: ‘asynchronous’
[10:32:10.160]   - Field: ‘calls’
[10:32:10.161]   - Field: ‘globals’
[10:32:10.161]   - Field: ‘stdout’
[10:32:10.161]   - Field: ‘earlySignal’
[10:32:10.161]   - Field: ‘lazy’
[10:32:10.161]   - Field: ‘state’
[10:32:10.161] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:10.161] - Launch lazy future ...
[10:32:10.161] Packages needed by the future expression (n = 0): <none>
[10:32:10.161] Packages needed by future strategies (n = 0): <none>
[10:32:10.162] {
[10:32:10.162]     {
[10:32:10.162]         {
[10:32:10.162]             ...future.startTime <- base::Sys.time()
[10:32:10.162]             {
[10:32:10.162]                 {
[10:32:10.162]                   {
[10:32:10.162]                     {
[10:32:10.162]                       base::local({
[10:32:10.162]                         has_future <- base::requireNamespace("future", 
[10:32:10.162]                           quietly = TRUE)
[10:32:10.162]                         if (has_future) {
[10:32:10.162]                           ns <- base::getNamespace("future")
[10:32:10.162]                           version <- ns[[".package"]][["version"]]
[10:32:10.162]                           if (is.null(version)) 
[10:32:10.162]                             version <- utils::packageVersion("future")
[10:32:10.162]                         }
[10:32:10.162]                         else {
[10:32:10.162]                           version <- NULL
[10:32:10.162]                         }
[10:32:10.162]                         if (!has_future || version < "1.8.0") {
[10:32:10.162]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:10.162]                             "", base::R.version$version.string), 
[10:32:10.162]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:10.162]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:10.162]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:10.162]                               "release", "version")], collapse = " "), 
[10:32:10.162]                             hostname = base::Sys.info()[["nodename"]])
[10:32:10.162]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:10.162]                             info)
[10:32:10.162]                           info <- base::paste(info, collapse = "; ")
[10:32:10.162]                           if (!has_future) {
[10:32:10.162]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:10.162]                               info)
[10:32:10.162]                           }
[10:32:10.162]                           else {
[10:32:10.162]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:10.162]                               info, version)
[10:32:10.162]                           }
[10:32:10.162]                           base::stop(msg)
[10:32:10.162]                         }
[10:32:10.162]                       })
[10:32:10.162]                     }
[10:32:10.162]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:10.162]                     base::options(mc.cores = 1L)
[10:32:10.162]                   }
[10:32:10.162]                   ...future.strategy.old <- future::plan("list")
[10:32:10.162]                   options(future.plan = NULL)
[10:32:10.162]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.162]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:10.162]                 }
[10:32:10.162]                 ...future.workdir <- getwd()
[10:32:10.162]             }
[10:32:10.162]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:10.162]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:10.162]         }
[10:32:10.162]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:10.162]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:10.162]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:10.162]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:10.162]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:10.162]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:10.162]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:10.162]             base::names(...future.oldOptions))
[10:32:10.162]     }
[10:32:10.162]     if (FALSE) {
[10:32:10.162]     }
[10:32:10.162]     else {
[10:32:10.162]         if (TRUE) {
[10:32:10.162]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:10.162]                 open = "w")
[10:32:10.162]         }
[10:32:10.162]         else {
[10:32:10.162]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:10.162]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:10.162]         }
[10:32:10.162]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:10.162]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:10.162]             base::sink(type = "output", split = FALSE)
[10:32:10.162]             base::close(...future.stdout)
[10:32:10.162]         }, add = TRUE)
[10:32:10.162]     }
[10:32:10.162]     ...future.frame <- base::sys.nframe()
[10:32:10.162]     ...future.conditions <- base::list()
[10:32:10.162]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:10.162]     if (FALSE) {
[10:32:10.162]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:10.162]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:10.162]     }
[10:32:10.162]     ...future.result <- base::tryCatch({
[10:32:10.162]         base::withCallingHandlers({
[10:32:10.162]             ...future.value <- base::withVisible(base::local({
[10:32:10.162]                 ...future.makeSendCondition <- base::local({
[10:32:10.162]                   sendCondition <- NULL
[10:32:10.162]                   function(frame = 1L) {
[10:32:10.162]                     if (is.function(sendCondition)) 
[10:32:10.162]                       return(sendCondition)
[10:32:10.162]                     ns <- getNamespace("parallel")
[10:32:10.162]                     if (exists("sendData", mode = "function", 
[10:32:10.162]                       envir = ns)) {
[10:32:10.162]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:10.162]                         envir = ns)
[10:32:10.162]                       envir <- sys.frame(frame)
[10:32:10.162]                       master <- NULL
[10:32:10.162]                       while (!identical(envir, .GlobalEnv) && 
[10:32:10.162]                         !identical(envir, emptyenv())) {
[10:32:10.162]                         if (exists("master", mode = "list", envir = envir, 
[10:32:10.162]                           inherits = FALSE)) {
[10:32:10.162]                           master <- get("master", mode = "list", 
[10:32:10.162]                             envir = envir, inherits = FALSE)
[10:32:10.162]                           if (inherits(master, c("SOCKnode", 
[10:32:10.162]                             "SOCK0node"))) {
[10:32:10.162]                             sendCondition <<- function(cond) {
[10:32:10.162]                               data <- list(type = "VALUE", value = cond, 
[10:32:10.162]                                 success = TRUE)
[10:32:10.162]                               parallel_sendData(master, data)
[10:32:10.162]                             }
[10:32:10.162]                             return(sendCondition)
[10:32:10.162]                           }
[10:32:10.162]                         }
[10:32:10.162]                         frame <- frame + 1L
[10:32:10.162]                         envir <- sys.frame(frame)
[10:32:10.162]                       }
[10:32:10.162]                     }
[10:32:10.162]                     sendCondition <<- function(cond) NULL
[10:32:10.162]                   }
[10:32:10.162]                 })
[10:32:10.162]                 withCallingHandlers({
[10:32:10.162]                   slow_fcn(x)
[10:32:10.162]                 }, immediateCondition = function(cond) {
[10:32:10.162]                   sendCondition <- ...future.makeSendCondition()
[10:32:10.162]                   sendCondition(cond)
[10:32:10.162]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.162]                   {
[10:32:10.162]                     inherits <- base::inherits
[10:32:10.162]                     invokeRestart <- base::invokeRestart
[10:32:10.162]                     is.null <- base::is.null
[10:32:10.162]                     muffled <- FALSE
[10:32:10.162]                     if (inherits(cond, "message")) {
[10:32:10.162]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:10.162]                       if (muffled) 
[10:32:10.162]                         invokeRestart("muffleMessage")
[10:32:10.162]                     }
[10:32:10.162]                     else if (inherits(cond, "warning")) {
[10:32:10.162]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:10.162]                       if (muffled) 
[10:32:10.162]                         invokeRestart("muffleWarning")
[10:32:10.162]                     }
[10:32:10.162]                     else if (inherits(cond, "condition")) {
[10:32:10.162]                       if (!is.null(pattern)) {
[10:32:10.162]                         computeRestarts <- base::computeRestarts
[10:32:10.162]                         grepl <- base::grepl
[10:32:10.162]                         restarts <- computeRestarts(cond)
[10:32:10.162]                         for (restart in restarts) {
[10:32:10.162]                           name <- restart$name
[10:32:10.162]                           if (is.null(name)) 
[10:32:10.162]                             next
[10:32:10.162]                           if (!grepl(pattern, name)) 
[10:32:10.162]                             next
[10:32:10.162]                           invokeRestart(restart)
[10:32:10.162]                           muffled <- TRUE
[10:32:10.162]                           break
[10:32:10.162]                         }
[10:32:10.162]                       }
[10:32:10.162]                     }
[10:32:10.162]                     invisible(muffled)
[10:32:10.162]                   }
[10:32:10.162]                   muffleCondition(cond)
[10:32:10.162]                 })
[10:32:10.162]             }))
[10:32:10.162]             future::FutureResult(value = ...future.value$value, 
[10:32:10.162]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.162]                   ...future.rng), globalenv = if (FALSE) 
[10:32:10.162]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:10.162]                     ...future.globalenv.names))
[10:32:10.162]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:10.162]         }, condition = base::local({
[10:32:10.162]             c <- base::c
[10:32:10.162]             inherits <- base::inherits
[10:32:10.162]             invokeRestart <- base::invokeRestart
[10:32:10.162]             length <- base::length
[10:32:10.162]             list <- base::list
[10:32:10.162]             seq.int <- base::seq.int
[10:32:10.162]             signalCondition <- base::signalCondition
[10:32:10.162]             sys.calls <- base::sys.calls
[10:32:10.162]             `[[` <- base::`[[`
[10:32:10.162]             `+` <- base::`+`
[10:32:10.162]             `<<-` <- base::`<<-`
[10:32:10.162]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:10.162]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:10.162]                   3L)]
[10:32:10.162]             }
[10:32:10.162]             function(cond) {
[10:32:10.162]                 is_error <- inherits(cond, "error")
[10:32:10.162]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:10.162]                   NULL)
[10:32:10.162]                 if (is_error) {
[10:32:10.162]                   sessionInformation <- function() {
[10:32:10.162]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:10.162]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:10.162]                       search = base::search(), system = base::Sys.info())
[10:32:10.162]                   }
[10:32:10.162]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.162]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:10.162]                     cond$call), session = sessionInformation(), 
[10:32:10.162]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:10.162]                   signalCondition(cond)
[10:32:10.162]                 }
[10:32:10.162]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:10.162]                 "immediateCondition"))) {
[10:32:10.162]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:10.162]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.162]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:10.162]                   if (TRUE && !signal) {
[10:32:10.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.162]                     {
[10:32:10.162]                       inherits <- base::inherits
[10:32:10.162]                       invokeRestart <- base::invokeRestart
[10:32:10.162]                       is.null <- base::is.null
[10:32:10.162]                       muffled <- FALSE
[10:32:10.162]                       if (inherits(cond, "message")) {
[10:32:10.162]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.162]                         if (muffled) 
[10:32:10.162]                           invokeRestart("muffleMessage")
[10:32:10.162]                       }
[10:32:10.162]                       else if (inherits(cond, "warning")) {
[10:32:10.162]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.162]                         if (muffled) 
[10:32:10.162]                           invokeRestart("muffleWarning")
[10:32:10.162]                       }
[10:32:10.162]                       else if (inherits(cond, "condition")) {
[10:32:10.162]                         if (!is.null(pattern)) {
[10:32:10.162]                           computeRestarts <- base::computeRestarts
[10:32:10.162]                           grepl <- base::grepl
[10:32:10.162]                           restarts <- computeRestarts(cond)
[10:32:10.162]                           for (restart in restarts) {
[10:32:10.162]                             name <- restart$name
[10:32:10.162]                             if (is.null(name)) 
[10:32:10.162]                               next
[10:32:10.162]                             if (!grepl(pattern, name)) 
[10:32:10.162]                               next
[10:32:10.162]                             invokeRestart(restart)
[10:32:10.162]                             muffled <- TRUE
[10:32:10.162]                             break
[10:32:10.162]                           }
[10:32:10.162]                         }
[10:32:10.162]                       }
[10:32:10.162]                       invisible(muffled)
[10:32:10.162]                     }
[10:32:10.162]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.162]                   }
[10:32:10.162]                 }
[10:32:10.162]                 else {
[10:32:10.162]                   if (TRUE) {
[10:32:10.162]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.162]                     {
[10:32:10.162]                       inherits <- base::inherits
[10:32:10.162]                       invokeRestart <- base::invokeRestart
[10:32:10.162]                       is.null <- base::is.null
[10:32:10.162]                       muffled <- FALSE
[10:32:10.162]                       if (inherits(cond, "message")) {
[10:32:10.162]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.162]                         if (muffled) 
[10:32:10.162]                           invokeRestart("muffleMessage")
[10:32:10.162]                       }
[10:32:10.162]                       else if (inherits(cond, "warning")) {
[10:32:10.162]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.162]                         if (muffled) 
[10:32:10.162]                           invokeRestart("muffleWarning")
[10:32:10.162]                       }
[10:32:10.162]                       else if (inherits(cond, "condition")) {
[10:32:10.162]                         if (!is.null(pattern)) {
[10:32:10.162]                           computeRestarts <- base::computeRestarts
[10:32:10.162]                           grepl <- base::grepl
[10:32:10.162]                           restarts <- computeRestarts(cond)
[10:32:10.162]                           for (restart in restarts) {
[10:32:10.162]                             name <- restart$name
[10:32:10.162]                             if (is.null(name)) 
[10:32:10.162]                               next
[10:32:10.162]                             if (!grepl(pattern, name)) 
[10:32:10.162]                               next
[10:32:10.162]                             invokeRestart(restart)
[10:32:10.162]                             muffled <- TRUE
[10:32:10.162]                             break
[10:32:10.162]                           }
[10:32:10.162]                         }
[10:32:10.162]                       }
[10:32:10.162]                       invisible(muffled)
[10:32:10.162]                     }
[10:32:10.162]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.162]                   }
[10:32:10.162]                 }
[10:32:10.162]             }
[10:32:10.162]         }))
[10:32:10.162]     }, error = function(ex) {
[10:32:10.162]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:10.162]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.162]                 ...future.rng), started = ...future.startTime, 
[10:32:10.162]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:10.162]             version = "1.8"), class = "FutureResult")
[10:32:10.162]     }, finally = {
[10:32:10.162]         if (!identical(...future.workdir, getwd())) 
[10:32:10.162]             setwd(...future.workdir)
[10:32:10.162]         {
[10:32:10.162]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:10.162]                 ...future.oldOptions$nwarnings <- NULL
[10:32:10.162]             }
[10:32:10.162]             base::options(...future.oldOptions)
[10:32:10.162]             if (.Platform$OS.type == "windows") {
[10:32:10.162]                 old_names <- names(...future.oldEnvVars)
[10:32:10.162]                 envs <- base::Sys.getenv()
[10:32:10.162]                 names <- names(envs)
[10:32:10.162]                 common <- intersect(names, old_names)
[10:32:10.162]                 added <- setdiff(names, old_names)
[10:32:10.162]                 removed <- setdiff(old_names, names)
[10:32:10.162]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:10.162]                   envs[common]]
[10:32:10.162]                 NAMES <- toupper(changed)
[10:32:10.162]                 args <- list()
[10:32:10.162]                 for (kk in seq_along(NAMES)) {
[10:32:10.162]                   name <- changed[[kk]]
[10:32:10.162]                   NAME <- NAMES[[kk]]
[10:32:10.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.162]                     next
[10:32:10.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.162]                 }
[10:32:10.162]                 NAMES <- toupper(added)
[10:32:10.162]                 for (kk in seq_along(NAMES)) {
[10:32:10.162]                   name <- added[[kk]]
[10:32:10.162]                   NAME <- NAMES[[kk]]
[10:32:10.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.162]                     next
[10:32:10.162]                   args[[name]] <- ""
[10:32:10.162]                 }
[10:32:10.162]                 NAMES <- toupper(removed)
[10:32:10.162]                 for (kk in seq_along(NAMES)) {
[10:32:10.162]                   name <- removed[[kk]]
[10:32:10.162]                   NAME <- NAMES[[kk]]
[10:32:10.162]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.162]                     next
[10:32:10.162]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.162]                 }
[10:32:10.162]                 if (length(args) > 0) 
[10:32:10.162]                   base::do.call(base::Sys.setenv, args = args)
[10:32:10.162]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:10.162]             }
[10:32:10.162]             else {
[10:32:10.162]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:10.162]             }
[10:32:10.162]             {
[10:32:10.162]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:10.162]                   0L) {
[10:32:10.162]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:10.162]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:10.162]                   base::options(opts)
[10:32:10.162]                 }
[10:32:10.162]                 {
[10:32:10.162]                   {
[10:32:10.162]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:10.162]                     NULL
[10:32:10.162]                   }
[10:32:10.162]                   options(future.plan = NULL)
[10:32:10.162]                   if (is.na(NA_character_)) 
[10:32:10.162]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.162]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:10.162]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:10.162]                     .init = FALSE)
[10:32:10.162]                 }
[10:32:10.162]             }
[10:32:10.162]         }
[10:32:10.162]     })
[10:32:10.162]     if (TRUE) {
[10:32:10.162]         base::sink(type = "output", split = FALSE)
[10:32:10.162]         if (TRUE) {
[10:32:10.162]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:10.162]         }
[10:32:10.162]         else {
[10:32:10.162]             ...future.result["stdout"] <- base::list(NULL)
[10:32:10.162]         }
[10:32:10.162]         base::close(...future.stdout)
[10:32:10.162]         ...future.stdout <- NULL
[10:32:10.162]     }
[10:32:10.162]     ...future.result$conditions <- ...future.conditions
[10:32:10.162]     ...future.result$finished <- base::Sys.time()
[10:32:10.162]     ...future.result
[10:32:10.162] }
[10:32:10.217] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[10:32:10.217] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[10:32:10.217] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[10:32:10.217] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[10:32:10.218] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[10:32:10.218] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[10:32:10.219] MultisessionFuture started
[10:32:10.220] - Launch lazy future ... done
[10:32:10.220] run() for ‘MultisessionFuture’ ... done
[10:32:10.220] getGlobalsAndPackages() ...
[10:32:10.221] Searching for globals...
[10:32:10.223] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[10:32:10.223] Searching for globals ... DONE
[10:32:10.223] Resolving globals: FALSE
[10:32:10.224] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[10:32:10.224] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[10:32:10.225] - globals: [2] ‘slow_fcn’, ‘x’
[10:32:10.225] 
[10:32:10.225] getGlobalsAndPackages() ... DONE
[10:32:10.226] run() for ‘Future’ ...
[10:32:10.226] - state: ‘created’
[10:32:10.226] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:10.239] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:10.239] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:10.239]   - Field: ‘node’
[10:32:10.239]   - Field: ‘label’
[10:32:10.239]   - Field: ‘local’
[10:32:10.239]   - Field: ‘owner’
[10:32:10.240]   - Field: ‘envir’
[10:32:10.240]   - Field: ‘workers’
[10:32:10.240]   - Field: ‘packages’
[10:32:10.240]   - Field: ‘gc’
[10:32:10.240]   - Field: ‘conditions’
[10:32:10.240]   - Field: ‘persistent’
[10:32:10.240]   - Field: ‘expr’
[10:32:10.240]   - Field: ‘uuid’
[10:32:10.240]   - Field: ‘seed’
[10:32:10.240]   - Field: ‘version’
[10:32:10.240]   - Field: ‘result’
[10:32:10.241]   - Field: ‘asynchronous’
[10:32:10.241]   - Field: ‘calls’
[10:32:10.241]   - Field: ‘globals’
[10:32:10.241]   - Field: ‘stdout’
[10:32:10.241]   - Field: ‘earlySignal’
[10:32:10.241]   - Field: ‘lazy’
[10:32:10.241]   - Field: ‘state’
[10:32:10.241] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:10.241] - Launch lazy future ...
[10:32:10.242] Packages needed by the future expression (n = 0): <none>
[10:32:10.242] Packages needed by future strategies (n = 0): <none>
[10:32:10.242] {
[10:32:10.242]     {
[10:32:10.242]         {
[10:32:10.242]             ...future.startTime <- base::Sys.time()
[10:32:10.242]             {
[10:32:10.242]                 {
[10:32:10.242]                   {
[10:32:10.242]                     {
[10:32:10.242]                       base::local({
[10:32:10.242]                         has_future <- base::requireNamespace("future", 
[10:32:10.242]                           quietly = TRUE)
[10:32:10.242]                         if (has_future) {
[10:32:10.242]                           ns <- base::getNamespace("future")
[10:32:10.242]                           version <- ns[[".package"]][["version"]]
[10:32:10.242]                           if (is.null(version)) 
[10:32:10.242]                             version <- utils::packageVersion("future")
[10:32:10.242]                         }
[10:32:10.242]                         else {
[10:32:10.242]                           version <- NULL
[10:32:10.242]                         }
[10:32:10.242]                         if (!has_future || version < "1.8.0") {
[10:32:10.242]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:10.242]                             "", base::R.version$version.string), 
[10:32:10.242]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:10.242]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:10.242]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:10.242]                               "release", "version")], collapse = " "), 
[10:32:10.242]                             hostname = base::Sys.info()[["nodename"]])
[10:32:10.242]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:10.242]                             info)
[10:32:10.242]                           info <- base::paste(info, collapse = "; ")
[10:32:10.242]                           if (!has_future) {
[10:32:10.242]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:10.242]                               info)
[10:32:10.242]                           }
[10:32:10.242]                           else {
[10:32:10.242]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:10.242]                               info, version)
[10:32:10.242]                           }
[10:32:10.242]                           base::stop(msg)
[10:32:10.242]                         }
[10:32:10.242]                       })
[10:32:10.242]                     }
[10:32:10.242]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:10.242]                     base::options(mc.cores = 1L)
[10:32:10.242]                   }
[10:32:10.242]                   ...future.strategy.old <- future::plan("list")
[10:32:10.242]                   options(future.plan = NULL)
[10:32:10.242]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.242]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:10.242]                 }
[10:32:10.242]                 ...future.workdir <- getwd()
[10:32:10.242]             }
[10:32:10.242]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:10.242]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:10.242]         }
[10:32:10.242]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:10.242]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:10.242]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:10.242]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:10.242]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:10.242]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:10.242]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:10.242]             base::names(...future.oldOptions))
[10:32:10.242]     }
[10:32:10.242]     if (FALSE) {
[10:32:10.242]     }
[10:32:10.242]     else {
[10:32:10.242]         if (TRUE) {
[10:32:10.242]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:10.242]                 open = "w")
[10:32:10.242]         }
[10:32:10.242]         else {
[10:32:10.242]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:10.242]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:10.242]         }
[10:32:10.242]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:10.242]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:10.242]             base::sink(type = "output", split = FALSE)
[10:32:10.242]             base::close(...future.stdout)
[10:32:10.242]         }, add = TRUE)
[10:32:10.242]     }
[10:32:10.242]     ...future.frame <- base::sys.nframe()
[10:32:10.242]     ...future.conditions <- base::list()
[10:32:10.242]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:10.242]     if (FALSE) {
[10:32:10.242]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:10.242]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:10.242]     }
[10:32:10.242]     ...future.result <- base::tryCatch({
[10:32:10.242]         base::withCallingHandlers({
[10:32:10.242]             ...future.value <- base::withVisible(base::local({
[10:32:10.242]                 ...future.makeSendCondition <- base::local({
[10:32:10.242]                   sendCondition <- NULL
[10:32:10.242]                   function(frame = 1L) {
[10:32:10.242]                     if (is.function(sendCondition)) 
[10:32:10.242]                       return(sendCondition)
[10:32:10.242]                     ns <- getNamespace("parallel")
[10:32:10.242]                     if (exists("sendData", mode = "function", 
[10:32:10.242]                       envir = ns)) {
[10:32:10.242]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:10.242]                         envir = ns)
[10:32:10.242]                       envir <- sys.frame(frame)
[10:32:10.242]                       master <- NULL
[10:32:10.242]                       while (!identical(envir, .GlobalEnv) && 
[10:32:10.242]                         !identical(envir, emptyenv())) {
[10:32:10.242]                         if (exists("master", mode = "list", envir = envir, 
[10:32:10.242]                           inherits = FALSE)) {
[10:32:10.242]                           master <- get("master", mode = "list", 
[10:32:10.242]                             envir = envir, inherits = FALSE)
[10:32:10.242]                           if (inherits(master, c("SOCKnode", 
[10:32:10.242]                             "SOCK0node"))) {
[10:32:10.242]                             sendCondition <<- function(cond) {
[10:32:10.242]                               data <- list(type = "VALUE", value = cond, 
[10:32:10.242]                                 success = TRUE)
[10:32:10.242]                               parallel_sendData(master, data)
[10:32:10.242]                             }
[10:32:10.242]                             return(sendCondition)
[10:32:10.242]                           }
[10:32:10.242]                         }
[10:32:10.242]                         frame <- frame + 1L
[10:32:10.242]                         envir <- sys.frame(frame)
[10:32:10.242]                       }
[10:32:10.242]                     }
[10:32:10.242]                     sendCondition <<- function(cond) NULL
[10:32:10.242]                   }
[10:32:10.242]                 })
[10:32:10.242]                 withCallingHandlers({
[10:32:10.242]                   slow_fcn(x)
[10:32:10.242]                 }, immediateCondition = function(cond) {
[10:32:10.242]                   sendCondition <- ...future.makeSendCondition()
[10:32:10.242]                   sendCondition(cond)
[10:32:10.242]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.242]                   {
[10:32:10.242]                     inherits <- base::inherits
[10:32:10.242]                     invokeRestart <- base::invokeRestart
[10:32:10.242]                     is.null <- base::is.null
[10:32:10.242]                     muffled <- FALSE
[10:32:10.242]                     if (inherits(cond, "message")) {
[10:32:10.242]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:10.242]                       if (muffled) 
[10:32:10.242]                         invokeRestart("muffleMessage")
[10:32:10.242]                     }
[10:32:10.242]                     else if (inherits(cond, "warning")) {
[10:32:10.242]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:10.242]                       if (muffled) 
[10:32:10.242]                         invokeRestart("muffleWarning")
[10:32:10.242]                     }
[10:32:10.242]                     else if (inherits(cond, "condition")) {
[10:32:10.242]                       if (!is.null(pattern)) {
[10:32:10.242]                         computeRestarts <- base::computeRestarts
[10:32:10.242]                         grepl <- base::grepl
[10:32:10.242]                         restarts <- computeRestarts(cond)
[10:32:10.242]                         for (restart in restarts) {
[10:32:10.242]                           name <- restart$name
[10:32:10.242]                           if (is.null(name)) 
[10:32:10.242]                             next
[10:32:10.242]                           if (!grepl(pattern, name)) 
[10:32:10.242]                             next
[10:32:10.242]                           invokeRestart(restart)
[10:32:10.242]                           muffled <- TRUE
[10:32:10.242]                           break
[10:32:10.242]                         }
[10:32:10.242]                       }
[10:32:10.242]                     }
[10:32:10.242]                     invisible(muffled)
[10:32:10.242]                   }
[10:32:10.242]                   muffleCondition(cond)
[10:32:10.242]                 })
[10:32:10.242]             }))
[10:32:10.242]             future::FutureResult(value = ...future.value$value, 
[10:32:10.242]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.242]                   ...future.rng), globalenv = if (FALSE) 
[10:32:10.242]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:10.242]                     ...future.globalenv.names))
[10:32:10.242]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:10.242]         }, condition = base::local({
[10:32:10.242]             c <- base::c
[10:32:10.242]             inherits <- base::inherits
[10:32:10.242]             invokeRestart <- base::invokeRestart
[10:32:10.242]             length <- base::length
[10:32:10.242]             list <- base::list
[10:32:10.242]             seq.int <- base::seq.int
[10:32:10.242]             signalCondition <- base::signalCondition
[10:32:10.242]             sys.calls <- base::sys.calls
[10:32:10.242]             `[[` <- base::`[[`
[10:32:10.242]             `+` <- base::`+`
[10:32:10.242]             `<<-` <- base::`<<-`
[10:32:10.242]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:10.242]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:10.242]                   3L)]
[10:32:10.242]             }
[10:32:10.242]             function(cond) {
[10:32:10.242]                 is_error <- inherits(cond, "error")
[10:32:10.242]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:10.242]                   NULL)
[10:32:10.242]                 if (is_error) {
[10:32:10.242]                   sessionInformation <- function() {
[10:32:10.242]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:10.242]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:10.242]                       search = base::search(), system = base::Sys.info())
[10:32:10.242]                   }
[10:32:10.242]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.242]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:10.242]                     cond$call), session = sessionInformation(), 
[10:32:10.242]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:10.242]                   signalCondition(cond)
[10:32:10.242]                 }
[10:32:10.242]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:10.242]                 "immediateCondition"))) {
[10:32:10.242]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:10.242]                   ...future.conditions[[length(...future.conditions) + 
[10:32:10.242]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:10.242]                   if (TRUE && !signal) {
[10:32:10.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.242]                     {
[10:32:10.242]                       inherits <- base::inherits
[10:32:10.242]                       invokeRestart <- base::invokeRestart
[10:32:10.242]                       is.null <- base::is.null
[10:32:10.242]                       muffled <- FALSE
[10:32:10.242]                       if (inherits(cond, "message")) {
[10:32:10.242]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.242]                         if (muffled) 
[10:32:10.242]                           invokeRestart("muffleMessage")
[10:32:10.242]                       }
[10:32:10.242]                       else if (inherits(cond, "warning")) {
[10:32:10.242]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.242]                         if (muffled) 
[10:32:10.242]                           invokeRestart("muffleWarning")
[10:32:10.242]                       }
[10:32:10.242]                       else if (inherits(cond, "condition")) {
[10:32:10.242]                         if (!is.null(pattern)) {
[10:32:10.242]                           computeRestarts <- base::computeRestarts
[10:32:10.242]                           grepl <- base::grepl
[10:32:10.242]                           restarts <- computeRestarts(cond)
[10:32:10.242]                           for (restart in restarts) {
[10:32:10.242]                             name <- restart$name
[10:32:10.242]                             if (is.null(name)) 
[10:32:10.242]                               next
[10:32:10.242]                             if (!grepl(pattern, name)) 
[10:32:10.242]                               next
[10:32:10.242]                             invokeRestart(restart)
[10:32:10.242]                             muffled <- TRUE
[10:32:10.242]                             break
[10:32:10.242]                           }
[10:32:10.242]                         }
[10:32:10.242]                       }
[10:32:10.242]                       invisible(muffled)
[10:32:10.242]                     }
[10:32:10.242]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.242]                   }
[10:32:10.242]                 }
[10:32:10.242]                 else {
[10:32:10.242]                   if (TRUE) {
[10:32:10.242]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:10.242]                     {
[10:32:10.242]                       inherits <- base::inherits
[10:32:10.242]                       invokeRestart <- base::invokeRestart
[10:32:10.242]                       is.null <- base::is.null
[10:32:10.242]                       muffled <- FALSE
[10:32:10.242]                       if (inherits(cond, "message")) {
[10:32:10.242]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:10.242]                         if (muffled) 
[10:32:10.242]                           invokeRestart("muffleMessage")
[10:32:10.242]                       }
[10:32:10.242]                       else if (inherits(cond, "warning")) {
[10:32:10.242]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:10.242]                         if (muffled) 
[10:32:10.242]                           invokeRestart("muffleWarning")
[10:32:10.242]                       }
[10:32:10.242]                       else if (inherits(cond, "condition")) {
[10:32:10.242]                         if (!is.null(pattern)) {
[10:32:10.242]                           computeRestarts <- base::computeRestarts
[10:32:10.242]                           grepl <- base::grepl
[10:32:10.242]                           restarts <- computeRestarts(cond)
[10:32:10.242]                           for (restart in restarts) {
[10:32:10.242]                             name <- restart$name
[10:32:10.242]                             if (is.null(name)) 
[10:32:10.242]                               next
[10:32:10.242]                             if (!grepl(pattern, name)) 
[10:32:10.242]                               next
[10:32:10.242]                             invokeRestart(restart)
[10:32:10.242]                             muffled <- TRUE
[10:32:10.242]                             break
[10:32:10.242]                           }
[10:32:10.242]                         }
[10:32:10.242]                       }
[10:32:10.242]                       invisible(muffled)
[10:32:10.242]                     }
[10:32:10.242]                     muffleCondition(cond, pattern = "^muffle")
[10:32:10.242]                   }
[10:32:10.242]                 }
[10:32:10.242]             }
[10:32:10.242]         }))
[10:32:10.242]     }, error = function(ex) {
[10:32:10.242]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:10.242]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:10.242]                 ...future.rng), started = ...future.startTime, 
[10:32:10.242]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:10.242]             version = "1.8"), class = "FutureResult")
[10:32:10.242]     }, finally = {
[10:32:10.242]         if (!identical(...future.workdir, getwd())) 
[10:32:10.242]             setwd(...future.workdir)
[10:32:10.242]         {
[10:32:10.242]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:10.242]                 ...future.oldOptions$nwarnings <- NULL
[10:32:10.242]             }
[10:32:10.242]             base::options(...future.oldOptions)
[10:32:10.242]             if (.Platform$OS.type == "windows") {
[10:32:10.242]                 old_names <- names(...future.oldEnvVars)
[10:32:10.242]                 envs <- base::Sys.getenv()
[10:32:10.242]                 names <- names(envs)
[10:32:10.242]                 common <- intersect(names, old_names)
[10:32:10.242]                 added <- setdiff(names, old_names)
[10:32:10.242]                 removed <- setdiff(old_names, names)
[10:32:10.242]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:10.242]                   envs[common]]
[10:32:10.242]                 NAMES <- toupper(changed)
[10:32:10.242]                 args <- list()
[10:32:10.242]                 for (kk in seq_along(NAMES)) {
[10:32:10.242]                   name <- changed[[kk]]
[10:32:10.242]                   NAME <- NAMES[[kk]]
[10:32:10.242]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.242]                     next
[10:32:10.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.242]                 }
[10:32:10.242]                 NAMES <- toupper(added)
[10:32:10.242]                 for (kk in seq_along(NAMES)) {
[10:32:10.242]                   name <- added[[kk]]
[10:32:10.242]                   NAME <- NAMES[[kk]]
[10:32:10.242]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.242]                     next
[10:32:10.242]                   args[[name]] <- ""
[10:32:10.242]                 }
[10:32:10.242]                 NAMES <- toupper(removed)
[10:32:10.242]                 for (kk in seq_along(NAMES)) {
[10:32:10.242]                   name <- removed[[kk]]
[10:32:10.242]                   NAME <- NAMES[[kk]]
[10:32:10.242]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:10.242]                     next
[10:32:10.242]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:10.242]                 }
[10:32:10.242]                 if (length(args) > 0) 
[10:32:10.242]                   base::do.call(base::Sys.setenv, args = args)
[10:32:10.242]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:10.242]             }
[10:32:10.242]             else {
[10:32:10.242]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:10.242]             }
[10:32:10.242]             {
[10:32:10.242]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:10.242]                   0L) {
[10:32:10.242]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:10.242]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:10.242]                   base::options(opts)
[10:32:10.242]                 }
[10:32:10.242]                 {
[10:32:10.242]                   {
[10:32:10.242]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:10.242]                     NULL
[10:32:10.242]                   }
[10:32:10.242]                   options(future.plan = NULL)
[10:32:10.242]                   if (is.na(NA_character_)) 
[10:32:10.242]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:10.242]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:10.242]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:10.242]                     .init = FALSE)
[10:32:10.242]                 }
[10:32:10.242]             }
[10:32:10.242]         }
[10:32:10.242]     })
[10:32:10.242]     if (TRUE) {
[10:32:10.242]         base::sink(type = "output", split = FALSE)
[10:32:10.242]         if (TRUE) {
[10:32:10.242]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:10.242]         }
[10:32:10.242]         else {
[10:32:10.242]             ...future.result["stdout"] <- base::list(NULL)
[10:32:10.242]         }
[10:32:10.242]         base::close(...future.stdout)
[10:32:10.242]         ...future.stdout <- NULL
[10:32:10.242]     }
[10:32:10.242]     ...future.result$conditions <- ...future.conditions
[10:32:10.242]     ...future.result$finished <- base::Sys.time()
[10:32:10.242]     ...future.result
[10:32:10.242] }
[10:32:10.244] Poll #1 (0): usedNodes() = 2, workers = 2
[10:32:10.276] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[10:32:10.316] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[10:32:10.348] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[10:32:10.380] Poll #5 (0.14 secs): usedNodes() = 2, workers = 2
[10:32:10.412] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[10:32:10.444] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[10:32:10.476] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[10:32:10.508] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[10:32:10.541] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[10:32:10.574] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[10:32:10.606] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[10:32:10.639] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[10:32:10.672] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[10:32:10.705] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[10:32:10.738] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[10:32:10.772] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[10:32:10.805] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[10:32:10.839] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[10:32:10.872] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[10:32:10.906] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[10:32:10.940] Poll #22 (0.7 secs): usedNodes() = 2, workers = 2
[10:32:10.974] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[10:32:10.987] receiveMessageFromWorker() for ClusterFuture ...
[10:32:10.987] - Validating connection of MultisessionFuture
[10:32:10.987] - received message: FutureResult
[10:32:10.988] - Received FutureResult
[10:32:10.988] - Erased future from FutureRegistry
[10:32:10.988] result() for ClusterFuture ...
[10:32:10.988] - result already collected: FutureResult
[10:32:10.989] result() for ClusterFuture ... done
[10:32:10.993] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:10.994] result() for ClusterFuture ...
[10:32:10.994] - result already collected: FutureResult
[10:32:10.994] result() for ClusterFuture ... done
[10:32:10.994] result() for ClusterFuture ...
[10:32:10.994] - result already collected: FutureResult
[10:32:10.994] result() for ClusterFuture ... done
[10:32:10.996] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[10:32:10.996] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[10:32:10.997] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[10:32:10.997] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[10:32:10.997] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[10:32:10.997] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[10:32:10.998] MultisessionFuture started
[10:32:10.999] - Launch lazy future ... done
[10:32:10.999] run() for ‘MultisessionFuture’ ... done
[10:32:11.000] resolve() on list ...
[10:32:11.000]  recursive: 0
[10:32:11.000]  length: 3
[10:32:11.000] 
[10:32:11.000] Future #1
[10:32:11.000] result() for ClusterFuture ...
[10:32:11.000] - result already collected: FutureResult
[10:32:11.000] result() for ClusterFuture ... done
[10:32:11.001] result() for ClusterFuture ...
[10:32:11.001] - result already collected: FutureResult
[10:32:11.001] result() for ClusterFuture ... done
[10:32:11.001] signalConditionsASAP(MultisessionFuture, pos=1) ...
[10:32:11.001] - nx: 3
[10:32:11.001] - relay: TRUE
[10:32:11.001] - stdout: TRUE
[10:32:11.001] - signal: TRUE
[10:32:11.001] - resignal: FALSE
[10:32:11.001] - force: TRUE
[10:32:11.001] - relayed: [n=3] FALSE, FALSE, FALSE
[10:32:11.001] - queued futures: [n=3] FALSE, FALSE, FALSE
[10:32:11.002]  - until=1
[10:32:11.002]  - relaying element #1
[10:32:11.002] result() for ClusterFuture ...
[10:32:11.002] - result already collected: FutureResult
[10:32:11.002] result() for ClusterFuture ... done
[10:32:11.002] result() for ClusterFuture ...
[10:32:11.002] - result already collected: FutureResult
[10:32:11.002] result() for ClusterFuture ... done
[10:32:11.002] result() for ClusterFuture ...
[10:32:11.002] - result already collected: FutureResult
[10:32:11.002] result() for ClusterFuture ... done
[10:32:11.003] result() for ClusterFuture ...
[10:32:11.003] - result already collected: FutureResult
[10:32:11.003] result() for ClusterFuture ... done
[10:32:11.003] - relayed: [n=3] TRUE, FALSE, FALSE
[10:32:11.003] - queued futures: [n=3] TRUE, FALSE, FALSE
[10:32:11.003] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[10:32:11.003]  length: 2 (resolved future 1)
[10:32:11.261] receiveMessageFromWorker() for ClusterFuture ...
[10:32:11.262] - Validating connection of MultisessionFuture
[10:32:11.262] - received message: FutureResult
[10:32:11.263] - Received FutureResult
[10:32:11.263] - Erased future from FutureRegistry
[10:32:11.263] result() for ClusterFuture ...
[10:32:11.263] - result already collected: FutureResult
[10:32:11.263] result() for ClusterFuture ... done
[10:32:11.265] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:11.265] Future #2
[10:32:11.265] result() for ClusterFuture ...
[10:32:11.265] - result already collected: FutureResult
[10:32:11.265] result() for ClusterFuture ... done
[10:32:11.265] result() for ClusterFuture ...
[10:32:11.265] - result already collected: FutureResult
[10:32:11.265] result() for ClusterFuture ... done
[10:32:11.266] signalConditionsASAP(MultisessionFuture, pos=2) ...
[10:32:11.266] - nx: 3
[10:32:11.266] - relay: TRUE
[10:32:11.266] - stdout: TRUE
[10:32:11.266] - signal: TRUE
[10:32:11.266] - resignal: FALSE
[10:32:11.266] - force: TRUE
[10:32:11.266] - relayed: [n=3] TRUE, FALSE, FALSE
[10:32:11.266] - queued futures: [n=3] TRUE, FALSE, FALSE
[10:32:11.266]  - until=2
[10:32:11.266]  - relaying element #2
[10:32:11.267] result() for ClusterFuture ...
[10:32:11.267] - result already collected: FutureResult
[10:32:11.267] result() for ClusterFuture ... done
[10:32:11.267] result() for ClusterFuture ...
[10:32:11.267] - result already collected: FutureResult
[10:32:11.267] result() for ClusterFuture ... done
[10:32:11.267] result() for ClusterFuture ...
[10:32:11.267] - result already collected: FutureResult
[10:32:11.267] result() for ClusterFuture ... done
[10:32:11.267] result() for ClusterFuture ...
[10:32:11.267] - result already collected: FutureResult
[10:32:11.268] result() for ClusterFuture ... done
[10:32:11.268] - relayed: [n=3] TRUE, TRUE, FALSE
[10:32:11.268] - queued futures: [n=3] TRUE, TRUE, FALSE
[10:32:11.268] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[10:32:11.268]  length: 1 (resolved future 2)
[10:32:12.508] receiveMessageFromWorker() for ClusterFuture ...
[10:32:12.508] - Validating connection of MultisessionFuture
[10:32:12.508] - received message: FutureResult
[10:32:12.509] - Received FutureResult
[10:32:12.509] - Erased future from FutureRegistry
[10:32:12.509] result() for ClusterFuture ...
[10:32:12.509] - result already collected: FutureResult
[10:32:12.509] result() for ClusterFuture ... done
[10:32:12.511] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:12.511] Future #3
[10:32:12.512] result() for ClusterFuture ...
[10:32:12.512] - result already collected: FutureResult
[10:32:12.512] result() for ClusterFuture ... done
[10:32:12.512] result() for ClusterFuture ...
[10:32:12.512] - result already collected: FutureResult
[10:32:12.512] result() for ClusterFuture ... done
[10:32:12.512] signalConditionsASAP(MultisessionFuture, pos=3) ...
[10:32:12.512] - nx: 3
[10:32:12.512] - relay: TRUE
[10:32:12.512] - stdout: TRUE
[10:32:12.512] - signal: TRUE
[10:32:12.512] - resignal: FALSE
[10:32:12.513] - force: TRUE
[10:32:12.513] - relayed: [n=3] TRUE, TRUE, FALSE
[10:32:12.513] - queued futures: [n=3] TRUE, TRUE, FALSE
[10:32:12.513]  - until=3
[10:32:12.513]  - relaying element #3
[10:32:12.513] result() for ClusterFuture ...
[10:32:12.513] - result already collected: FutureResult
[10:32:12.513] result() for ClusterFuture ... done
[10:32:12.513] result() for ClusterFuture ...
[10:32:12.513] - result already collected: FutureResult
[10:32:12.513] result() for ClusterFuture ... done
[10:32:12.514] result() for ClusterFuture ...
[10:32:12.514] - result already collected: FutureResult
[10:32:12.514] result() for ClusterFuture ... done
[10:32:12.514] result() for ClusterFuture ...
[10:32:12.514] - result already collected: FutureResult
[10:32:12.514] result() for ClusterFuture ... done
[10:32:12.514] - relayed: [n=3] TRUE, TRUE, TRUE
[10:32:12.514] - queued futures: [n=3] TRUE, TRUE, TRUE
[10:32:12.514] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[10:32:12.514]  length: 0 (resolved future 3)
[10:32:12.515] Relaying remaining futures
[10:32:12.515] signalConditionsASAP(NULL, pos=0) ...
[10:32:12.515] - nx: 3
[10:32:12.515] - relay: TRUE
[10:32:12.515] - stdout: TRUE
[10:32:12.515] - signal: TRUE
[10:32:12.515] - resignal: FALSE
[10:32:12.515] - force: TRUE
[10:32:12.515] - relayed: [n=3] TRUE, TRUE, TRUE
[10:32:12.515] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[10:32:12.515] - relayed: [n=3] TRUE, TRUE, TRUE
[10:32:12.515] - queued futures: [n=3] TRUE, TRUE, TRUE
[10:32:12.516] signalConditionsASAP(NULL, pos=0) ... done
[10:32:12.516] resolve() on list ... DONE
[10:32:12.516] result() for ClusterFuture ...
[10:32:12.516] - result already collected: FutureResult
[10:32:12.516] result() for ClusterFuture ... done
[10:32:12.516] result() for ClusterFuture ...
[10:32:12.516] - result already collected: FutureResult
[10:32:12.516] result() for ClusterFuture ... done
[10:32:12.516] result() for ClusterFuture ...
[10:32:12.516] - result already collected: FutureResult
[10:32:12.516] result() for ClusterFuture ... done
[10:32:12.517] result() for ClusterFuture ...
[10:32:12.517] - result already collected: FutureResult
[10:32:12.517] result() for ClusterFuture ... done
[10:32:12.517] result() for ClusterFuture ...
[10:32:12.517] - result already collected: FutureResult
[10:32:12.517] result() for ClusterFuture ... done
[10:32:12.517] result() for ClusterFuture ...
[10:32:12.517] - result already collected: FutureResult
[10:32:12.517] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 10:32:10 0.02598190 secs
2      getWorker   overhead launch 2025-01-07 10:32:10 0.02919912 secs
3    eraseWorker   overhead launch 2025-01-07 10:32:10 0.03091860 secs
4 attachPackages   overhead launch 2025-01-07 10:32:10 0.03206277 secs
5  exportGlobals   overhead launch 2025-01-07 10:32:10 0.03273845 secs
9       evaluate evaluation   <NA> 2025-01-07 10:32:10 0.03578258 secs
7  receiveResult   overhead gather 2025-01-07 10:32:10 0.88390589 secs
8         gather   overhead   <NA> 2025-01-07 10:32:10 0.88498282 secs
           duration future_label                          future_uuid
1 1.024222e-02 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
6 9.567261e-03 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
2 2.789497e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
3 4.718304e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
4 4.863739e-05 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
5 1.562595e-03 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
9 8.392246e-01 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
7 2.312660e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
8 2.820492e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
                          session_uuid
1 3cb29b47-6e77-470d-5674-5b2429688b5e
6 3cb29b47-6e77-470d-5674-5b2429688b5e
2 3cb29b47-6e77-470d-5674-5b2429688b5e
3 3cb29b47-6e77-470d-5674-5b2429688b5e
4 3cb29b47-6e77-470d-5674-5b2429688b5e
5 3cb29b47-6e77-470d-5674-5b2429688b5e
9 2f9fde77-483b-aa6f-f514-9c14cf4e175d
7 3cb29b47-6e77-470d-5674-5b2429688b5e
8 3cb29b47-6e77-470d-5674-5b2429688b5e

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 10:32:10 0.01994491 secs
2      getWorker   overhead launch 2025-01-07 10:32:10 0.02260900 secs
3    eraseWorker   overhead launch 2025-01-07 10:32:10 0.02325153 secs
4 attachPackages   overhead launch 2025-01-07 10:32:10 0.07474709 secs
5  exportGlobals   overhead launch 2025-01-07 10:32:10 0.07528591 secs
9       evaluate evaluation   <NA> 2025-01-07 10:32:10 0.07825637 secs
7  receiveResult   overhead gather 2025-01-07 10:32:11 1.12050843 secs
8         gather   overhead   <NA> 2025-01-07 10:32:11 1.12156820 secs
           duration future_label                          future_uuid
1 6.387472e-03 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
6 5.800033e-02 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
2 1.211166e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
3 5.081987e-02 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
4 4.434586e-05 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
5 1.497984e-03 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
9 1.041752e+00 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
7 2.090931e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
8 2.777576e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
                          session_uuid
1 3cb29b47-6e77-470d-5674-5b2429688b5e
6 3cb29b47-6e77-470d-5674-5b2429688b5e
2 3cb29b47-6e77-470d-5674-5b2429688b5e
3 3cb29b47-6e77-470d-5674-5b2429688b5e
4 3cb29b47-6e77-470d-5674-5b2429688b5e
5 3cb29b47-6e77-470d-5674-5b2429688b5e
9 af8ce3f5-77c5-277d-5396-2353fc1397f9
7 3cb29b47-6e77-470d-5674-5b2429688b5e
8 3cb29b47-6e77-470d-5674-5b2429688b5e

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
6         launch   overhead   <NA> 2025-01-07 10:32:10 0.02108383 secs
2      getWorker   overhead launch 2025-01-07 10:32:10 0.02391458 secs
3    eraseWorker   overhead launch 2025-01-07 10:32:10 0.77438307 secs
4 attachPackages   overhead launch 2025-01-07 10:32:10 0.77528524 secs
5  exportGlobals   overhead launch 2025-01-07 10:32:10 0.77578783 secs
9       evaluate evaluation   <NA> 2025-01-07 10:32:10 0.77842808 secs
7  receiveResult   overhead gather 2025-01-07 10:32:12 2.28773642 secs
8         gather   overhead   <NA> 2025-01-07 10:32:12 2.28889155 secs
           duration future_label                          future_uuid
1 5.045414e-03 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
6 7.570817e-01 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
2 7.499752e-01 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
3 4.143715e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
4 3.504753e-05 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
5 1.382828e-03 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
9 1.502944e+00 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
7 2.369881e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
8 2.827644e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
                          session_uuid
1 3cb29b47-6e77-470d-5674-5b2429688b5e
6 3cb29b47-6e77-470d-5674-5b2429688b5e
2 3cb29b47-6e77-470d-5674-5b2429688b5e
3 3cb29b47-6e77-470d-5674-5b2429688b5e
4 3cb29b47-6e77-470d-5674-5b2429688b5e
5 3cb29b47-6e77-470d-5674-5b2429688b5e
9 2f9fde77-483b-aa6f-f514-9c14cf4e175d
7 3cb29b47-6e77-470d-5674-5b2429688b5e
8 3cb29b47-6e77-470d-5674-5b2429688b5e

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[10:32:12.524] plan(): Setting new future strategy stack:
[10:32:12.524] List of future strategies:
[10:32:12.524] 1. sequential:
[10:32:12.524]    - args: function (..., envir = parent.frame())
[10:32:12.524]    - tweaked: FALSE
[10:32:12.524]    - call: plan(sequential)
[10:32:12.525] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
6          launch   overhead   <NA> 2025-01-07 10:32:10 0.02598190 secs
2       getWorker   overhead launch 2025-01-07 10:32:10 0.02919912 secs
3     eraseWorker   overhead launch 2025-01-07 10:32:10 0.03091860 secs
4  attachPackages   overhead launch 2025-01-07 10:32:10 0.03206277 secs
5   exportGlobals   overhead launch 2025-01-07 10:32:10 0.03273845 secs
9        evaluate evaluation   <NA> 2025-01-07 10:32:10 0.03578258 secs
7   receiveResult   overhead gather 2025-01-07 10:32:10 0.88390589 secs
8          gather   overhead   <NA> 2025-01-07 10:32:10 0.88498282 secs
11         create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
61         launch   overhead   <NA> 2025-01-07 10:32:10 0.01994491 secs
21      getWorker   overhead launch 2025-01-07 10:32:10 0.02260900 secs
31    eraseWorker   overhead launch 2025-01-07 10:32:10 0.02325153 secs
41 attachPackages   overhead launch 2025-01-07 10:32:10 0.07474709 secs
51  exportGlobals   overhead launch 2025-01-07 10:32:10 0.07528591 secs
91       evaluate evaluation   <NA> 2025-01-07 10:32:10 0.07825637 secs
71  receiveResult   overhead gather 2025-01-07 10:32:11 1.12050843 secs
81         gather   overhead   <NA> 2025-01-07 10:32:11 1.12156820 secs
12         create   overhead   <NA> 2025-01-07 10:32:10 0.00000000 secs
62         launch   overhead   <NA> 2025-01-07 10:32:10 0.02108383 secs
22      getWorker   overhead launch 2025-01-07 10:32:10 0.02391458 secs
32    eraseWorker   overhead launch 2025-01-07 10:32:10 0.77438307 secs
42 attachPackages   overhead launch 2025-01-07 10:32:10 0.77528524 secs
52  exportGlobals   overhead launch 2025-01-07 10:32:10 0.77578783 secs
92       evaluate evaluation   <NA> 2025-01-07 10:32:10 0.77842808 secs
72  receiveResult   overhead gather 2025-01-07 10:32:12 2.28773642 secs
82         gather   overhead   <NA> 2025-01-07 10:32:12 2.28889155 secs
            duration future_label                          future_uuid
1  1.024222e-02 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
6  9.567261e-03 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
2  2.789497e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
3  4.718304e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
4  4.863739e-05 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
5  1.562595e-03 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
9  8.392246e-01 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
7  2.312660e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
8  2.820492e-04 secs         <NA> cc5c8a6a-c745-c7ac-5a65-43f1da0eae0b
11 6.387472e-03 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
61 5.800033e-02 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
21 1.211166e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
31 5.081987e-02 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
41 4.434586e-05 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
51 1.497984e-03 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
91 1.041752e+00 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
71 2.090931e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
81 2.777576e-04 secs         <NA> 0140f833-53ff-5b3c-a5b2-b7f55e3d2c5a
12 5.045414e-03 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
62 7.570817e-01 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
22 7.499752e-01 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
32 4.143715e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
42 3.504753e-05 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
52 1.382828e-03 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
92 1.502944e+00 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
72 2.369881e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
82 2.827644e-04 secs         <NA> ec3cb891-8196-b636-40b5-855cd5ffc3b3
                           session_uuid
1  3cb29b47-6e77-470d-5674-5b2429688b5e
6  3cb29b47-6e77-470d-5674-5b2429688b5e
2  3cb29b47-6e77-470d-5674-5b2429688b5e
3  3cb29b47-6e77-470d-5674-5b2429688b5e
4  3cb29b47-6e77-470d-5674-5b2429688b5e
5  3cb29b47-6e77-470d-5674-5b2429688b5e
9  2f9fde77-483b-aa6f-f514-9c14cf4e175d
7  3cb29b47-6e77-470d-5674-5b2429688b5e
8  3cb29b47-6e77-470d-5674-5b2429688b5e
11 3cb29b47-6e77-470d-5674-5b2429688b5e
61 3cb29b47-6e77-470d-5674-5b2429688b5e
21 3cb29b47-6e77-470d-5674-5b2429688b5e
31 3cb29b47-6e77-470d-5674-5b2429688b5e
41 3cb29b47-6e77-470d-5674-5b2429688b5e
51 3cb29b47-6e77-470d-5674-5b2429688b5e
91 af8ce3f5-77c5-277d-5396-2353fc1397f9
71 3cb29b47-6e77-470d-5674-5b2429688b5e
81 3cb29b47-6e77-470d-5674-5b2429688b5e
12 3cb29b47-6e77-470d-5674-5b2429688b5e
62 3cb29b47-6e77-470d-5674-5b2429688b5e
22 3cb29b47-6e77-470d-5674-5b2429688b5e
32 3cb29b47-6e77-470d-5674-5b2429688b5e
42 3cb29b47-6e77-470d-5674-5b2429688b5e
52 3cb29b47-6e77-470d-5674-5b2429688b5e
92 2f9fde77-483b-aa6f-f514-9c14cf4e175d
72 3cb29b47-6e77-470d-5674-5b2429688b5e
82 3cb29b47-6e77-470d-5674-5b2429688b5e
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8392246 secs      0.9479926 0.02009153 secs     0.02269551
2    mean 1.1279738 secs      0.7876389 0.28238901 secs     0.19718594
3  median 1.0417523 secs      0.9286055 0.06466556 secs     0.05764210
4     max 1.5029445 secs      0.6565444 0.76240993 secs     0.33305018
5   total 3.3839214 secs      0.7876389 0.84716702 secs     0.19718594
        duration       walltime
1 0.8852649 secs 0.8852649 secs
2 1.4320951 secs 1.4320951 secs
3 1.1218460 secs 1.1218460 secs
4 2.2891743 secs 2.2891743 secs
5 4.2962852 secs 4.2962852 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
