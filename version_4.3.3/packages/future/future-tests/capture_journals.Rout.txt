
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:00.276] plan(): Setting new future strategy stack:
[16:20:00.276] List of future strategies:
[16:20:00.276] 1. sequential:
[16:20:00.276]    - args: function (..., envir = parent.frame())
[16:20:00.276]    - tweaked: FALSE
[16:20:00.276]    - call: future::plan("sequential")
[16:20:00.290] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[16:20:00.302] plan(): Setting new future strategy stack:
[16:20:00.302] List of future strategies:
[16:20:00.302] 1. multisession:
[16:20:00.302]    - args: function (..., workers = 2, envir = parent.frame())
[16:20:00.302]    - tweaked: TRUE
[16:20:00.302]    - call: plan(multisession, workers = 2)
[16:20:00.312] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:00.313] multisession:
[16:20:00.313] - args: function (..., workers = 2, envir = parent.frame())
[16:20:00.313] - tweaked: TRUE
[16:20:00.313] - call: plan(multisession, workers = 2)
[16:20:00.314] getGlobalsAndPackages() ...
[16:20:00.314] Not searching for globals
[16:20:00.315] - globals: [0] <none>
[16:20:00.315] getGlobalsAndPackages() ... DONE
[16:20:00.315] [local output] makeClusterPSOCK() ...
[16:20:00.347] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:00.349] [local output] Base port: 11839
[16:20:00.349] [local output] Getting setup options for 2 cluster nodes ...
[16:20:00.349] [local output]  - Node 1 of 2 ...
[16:20:00.349] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:00.350] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2IAJyk/worker.rank=1.parallelly.parent=78385.132315aa62787.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp2IAJyk/worker.rank=1.parallelly.parent=78385.132315aa62787.pid")'’
[16:20:00.538] - Possible to infer worker's PID: TRUE
[16:20:00.538] [local output] Rscript port: 11839

[16:20:00.539] [local output]  - Node 2 of 2 ...
[16:20:00.539] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:00.540] [local output] Rscript port: 11839

[16:20:00.540] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:00.540] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:00.541] [local output] Setting up PSOCK nodes in parallel
[16:20:00.541] List of 36
[16:20:00.541]  $ worker          : chr "localhost"
[16:20:00.541]   ..- attr(*, "localhost")= logi TRUE
[16:20:00.541]  $ master          : chr "localhost"
[16:20:00.541]  $ port            : int 11839
[16:20:00.541]  $ connectTimeout  : num 120
[16:20:00.541]  $ timeout         : num 2592000
[16:20:00.541]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:00.541]  $ homogeneous     : logi TRUE
[16:20:00.541]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:00.541]  $ rscript_envs    : NULL
[16:20:00.541]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:00.541]  $ rscript_startup : NULL
[16:20:00.541]  $ rscript_sh      : chr "sh"
[16:20:00.541]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:00.541]  $ methods         : logi TRUE
[16:20:00.541]  $ socketOptions   : chr "no-delay"
[16:20:00.541]  $ useXDR          : logi FALSE
[16:20:00.541]  $ outfile         : chr "/dev/null"
[16:20:00.541]  $ renice          : int NA
[16:20:00.541]  $ rshcmd          : NULL
[16:20:00.541]  $ user            : chr(0) 
[16:20:00.541]  $ revtunnel       : logi FALSE
[16:20:00.541]  $ rshlogfile      : NULL
[16:20:00.541]  $ rshopts         : chr(0) 
[16:20:00.541]  $ rank            : int 1
[16:20:00.541]  $ manual          : logi FALSE
[16:20:00.541]  $ dryrun          : logi FALSE
[16:20:00.541]  $ quiet           : logi FALSE
[16:20:00.541]  $ setup_strategy  : chr "parallel"
[16:20:00.541]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:00.541]  $ pidfile         : chr "/tmp/Rtmp2IAJyk/worker.rank=1.parallelly.parent=78385.132315aa62787.pid"
[16:20:00.541]  $ rshcmd_label    : NULL
[16:20:00.541]  $ rsh_call        : NULL
[16:20:00.541]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:00.541]  $ localMachine    : logi TRUE
[16:20:00.541]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:00.541]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:00.541]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:00.541]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:00.541]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:00.541]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:00.541]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:00.541]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:00.541]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:00.541]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:00.541]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:00.541]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:00.541]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:00.541]  $ arguments       :List of 28
[16:20:00.541]   ..$ worker          : chr "localhost"
[16:20:00.541]   ..$ master          : NULL
[16:20:00.541]   ..$ port            : int 11839
[16:20:00.541]   ..$ connectTimeout  : num 120
[16:20:00.541]   ..$ timeout         : num 2592000
[16:20:00.541]   ..$ rscript         : NULL
[16:20:00.541]   ..$ homogeneous     : NULL
[16:20:00.541]   ..$ rscript_args    : NULL
[16:20:00.541]   ..$ rscript_envs    : NULL
[16:20:00.541]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:00.541]   ..$ rscript_startup : NULL
[16:20:00.541]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:00.541]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:00.541]   ..$ methods         : logi TRUE
[16:20:00.541]   ..$ socketOptions   : chr "no-delay"
[16:20:00.541]   ..$ useXDR          : logi FALSE
[16:20:00.541]   ..$ outfile         : chr "/dev/null"
[16:20:00.541]   ..$ renice          : int NA
[16:20:00.541]   ..$ rshcmd          : NULL
[16:20:00.541]   ..$ user            : NULL
[16:20:00.541]   ..$ revtunnel       : logi NA
[16:20:00.541]   ..$ rshlogfile      : NULL
[16:20:00.541]   ..$ rshopts         : NULL
[16:20:00.541]   ..$ rank            : int 1
[16:20:00.541]   ..$ manual          : logi FALSE
[16:20:00.541]   ..$ dryrun          : logi FALSE
[16:20:00.541]   ..$ quiet           : logi FALSE
[16:20:00.541]   ..$ setup_strategy  : chr "parallel"
[16:20:00.541]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:00.560] [local output] System call to launch all workers:
[16:20:00.560] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp2IAJyk/worker.rank=1.parallelly.parent=78385.132315aa62787.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11839 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:00.560] [local output] Starting PSOCK main server
[16:20:00.565] [local output] Workers launched
[16:20:00.566] [local output] Waiting for workers to connect back
[16:20:00.566]  - [local output] 0 workers out of 2 ready
[16:20:00.829]  - [local output] 0 workers out of 2 ready
[16:20:00.830]  - [local output] 1 workers out of 2 ready
[16:20:00.830]  - [local output] 2 workers out of 2 ready
[16:20:00.830] [local output] Launching of workers completed
[16:20:00.830] [local output] Collecting session information from workers
[16:20:00.831] [local output]  - Worker #1 of 2
[16:20:00.832] [local output]  - Worker #2 of 2
[16:20:00.832] [local output] makeClusterPSOCK() ... done
[16:20:00.846] Packages needed by the future expression (n = 0): <none>
[16:20:00.846] Packages needed by future strategies (n = 0): <none>
[16:20:00.847] {
[16:20:00.847]     {
[16:20:00.847]         {
[16:20:00.847]             ...future.startTime <- base::Sys.time()
[16:20:00.847]             {
[16:20:00.847]                 {
[16:20:00.847]                   {
[16:20:00.847]                     {
[16:20:00.847]                       base::local({
[16:20:00.847]                         has_future <- base::requireNamespace("future", 
[16:20:00.847]                           quietly = TRUE)
[16:20:00.847]                         if (has_future) {
[16:20:00.847]                           ns <- base::getNamespace("future")
[16:20:00.847]                           version <- ns[[".package"]][["version"]]
[16:20:00.847]                           if (is.null(version)) 
[16:20:00.847]                             version <- utils::packageVersion("future")
[16:20:00.847]                         }
[16:20:00.847]                         else {
[16:20:00.847]                           version <- NULL
[16:20:00.847]                         }
[16:20:00.847]                         if (!has_future || version < "1.8.0") {
[16:20:00.847]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:00.847]                             "", base::R.version$version.string), 
[16:20:00.847]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:00.847]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:00.847]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:00.847]                               "release", "version")], collapse = " "), 
[16:20:00.847]                             hostname = base::Sys.info()[["nodename"]])
[16:20:00.847]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:00.847]                             info)
[16:20:00.847]                           info <- base::paste(info, collapse = "; ")
[16:20:00.847]                           if (!has_future) {
[16:20:00.847]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:00.847]                               info)
[16:20:00.847]                           }
[16:20:00.847]                           else {
[16:20:00.847]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:00.847]                               info, version)
[16:20:00.847]                           }
[16:20:00.847]                           base::stop(msg)
[16:20:00.847]                         }
[16:20:00.847]                       })
[16:20:00.847]                     }
[16:20:00.847]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:00.847]                     base::options(mc.cores = 1L)
[16:20:00.847]                   }
[16:20:00.847]                   ...future.strategy.old <- future::plan("list")
[16:20:00.847]                   options(future.plan = NULL)
[16:20:00.847]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.847]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:00.847]                 }
[16:20:00.847]                 ...future.workdir <- getwd()
[16:20:00.847]             }
[16:20:00.847]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:00.847]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:00.847]         }
[16:20:00.847]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:00.847]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:00.847]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:00.847]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:00.847]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:00.847]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:00.847]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:00.847]             base::names(...future.oldOptions))
[16:20:00.847]     }
[16:20:00.847]     if (FALSE) {
[16:20:00.847]     }
[16:20:00.847]     else {
[16:20:00.847]         if (TRUE) {
[16:20:00.847]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:00.847]                 open = "w")
[16:20:00.847]         }
[16:20:00.847]         else {
[16:20:00.847]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:00.847]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:00.847]         }
[16:20:00.847]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:00.847]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:00.847]             base::sink(type = "output", split = FALSE)
[16:20:00.847]             base::close(...future.stdout)
[16:20:00.847]         }, add = TRUE)
[16:20:00.847]     }
[16:20:00.847]     ...future.frame <- base::sys.nframe()
[16:20:00.847]     ...future.conditions <- base::list()
[16:20:00.847]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:00.847]     if (FALSE) {
[16:20:00.847]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:00.847]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:00.847]     }
[16:20:00.847]     ...future.result <- base::tryCatch({
[16:20:00.847]         base::withCallingHandlers({
[16:20:00.847]             ...future.value <- base::withVisible(base::local({
[16:20:00.847]                 ...future.makeSendCondition <- base::local({
[16:20:00.847]                   sendCondition <- NULL
[16:20:00.847]                   function(frame = 1L) {
[16:20:00.847]                     if (is.function(sendCondition)) 
[16:20:00.847]                       return(sendCondition)
[16:20:00.847]                     ns <- getNamespace("parallel")
[16:20:00.847]                     if (exists("sendData", mode = "function", 
[16:20:00.847]                       envir = ns)) {
[16:20:00.847]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:00.847]                         envir = ns)
[16:20:00.847]                       envir <- sys.frame(frame)
[16:20:00.847]                       master <- NULL
[16:20:00.847]                       while (!identical(envir, .GlobalEnv) && 
[16:20:00.847]                         !identical(envir, emptyenv())) {
[16:20:00.847]                         if (exists("master", mode = "list", envir = envir, 
[16:20:00.847]                           inherits = FALSE)) {
[16:20:00.847]                           master <- get("master", mode = "list", 
[16:20:00.847]                             envir = envir, inherits = FALSE)
[16:20:00.847]                           if (inherits(master, c("SOCKnode", 
[16:20:00.847]                             "SOCK0node"))) {
[16:20:00.847]                             sendCondition <<- function(cond) {
[16:20:00.847]                               data <- list(type = "VALUE", value = cond, 
[16:20:00.847]                                 success = TRUE)
[16:20:00.847]                               parallel_sendData(master, data)
[16:20:00.847]                             }
[16:20:00.847]                             return(sendCondition)
[16:20:00.847]                           }
[16:20:00.847]                         }
[16:20:00.847]                         frame <- frame + 1L
[16:20:00.847]                         envir <- sys.frame(frame)
[16:20:00.847]                       }
[16:20:00.847]                     }
[16:20:00.847]                     sendCondition <<- function(cond) NULL
[16:20:00.847]                   }
[16:20:00.847]                 })
[16:20:00.847]                 withCallingHandlers({
[16:20:00.847]                   NA
[16:20:00.847]                 }, immediateCondition = function(cond) {
[16:20:00.847]                   sendCondition <- ...future.makeSendCondition()
[16:20:00.847]                   sendCondition(cond)
[16:20:00.847]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.847]                   {
[16:20:00.847]                     inherits <- base::inherits
[16:20:00.847]                     invokeRestart <- base::invokeRestart
[16:20:00.847]                     is.null <- base::is.null
[16:20:00.847]                     muffled <- FALSE
[16:20:00.847]                     if (inherits(cond, "message")) {
[16:20:00.847]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:00.847]                       if (muffled) 
[16:20:00.847]                         invokeRestart("muffleMessage")
[16:20:00.847]                     }
[16:20:00.847]                     else if (inherits(cond, "warning")) {
[16:20:00.847]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:00.847]                       if (muffled) 
[16:20:00.847]                         invokeRestart("muffleWarning")
[16:20:00.847]                     }
[16:20:00.847]                     else if (inherits(cond, "condition")) {
[16:20:00.847]                       if (!is.null(pattern)) {
[16:20:00.847]                         computeRestarts <- base::computeRestarts
[16:20:00.847]                         grepl <- base::grepl
[16:20:00.847]                         restarts <- computeRestarts(cond)
[16:20:00.847]                         for (restart in restarts) {
[16:20:00.847]                           name <- restart$name
[16:20:00.847]                           if (is.null(name)) 
[16:20:00.847]                             next
[16:20:00.847]                           if (!grepl(pattern, name)) 
[16:20:00.847]                             next
[16:20:00.847]                           invokeRestart(restart)
[16:20:00.847]                           muffled <- TRUE
[16:20:00.847]                           break
[16:20:00.847]                         }
[16:20:00.847]                       }
[16:20:00.847]                     }
[16:20:00.847]                     invisible(muffled)
[16:20:00.847]                   }
[16:20:00.847]                   muffleCondition(cond)
[16:20:00.847]                 })
[16:20:00.847]             }))
[16:20:00.847]             future::FutureResult(value = ...future.value$value, 
[16:20:00.847]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.847]                   ...future.rng), globalenv = if (FALSE) 
[16:20:00.847]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:00.847]                     ...future.globalenv.names))
[16:20:00.847]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:00.847]         }, condition = base::local({
[16:20:00.847]             c <- base::c
[16:20:00.847]             inherits <- base::inherits
[16:20:00.847]             invokeRestart <- base::invokeRestart
[16:20:00.847]             length <- base::length
[16:20:00.847]             list <- base::list
[16:20:00.847]             seq.int <- base::seq.int
[16:20:00.847]             signalCondition <- base::signalCondition
[16:20:00.847]             sys.calls <- base::sys.calls
[16:20:00.847]             `[[` <- base::`[[`
[16:20:00.847]             `+` <- base::`+`
[16:20:00.847]             `<<-` <- base::`<<-`
[16:20:00.847]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:00.847]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:00.847]                   3L)]
[16:20:00.847]             }
[16:20:00.847]             function(cond) {
[16:20:00.847]                 is_error <- inherits(cond, "error")
[16:20:00.847]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:00.847]                   NULL)
[16:20:00.847]                 if (is_error) {
[16:20:00.847]                   sessionInformation <- function() {
[16:20:00.847]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:00.847]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:00.847]                       search = base::search(), system = base::Sys.info())
[16:20:00.847]                   }
[16:20:00.847]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.847]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:00.847]                     cond$call), session = sessionInformation(), 
[16:20:00.847]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:00.847]                   signalCondition(cond)
[16:20:00.847]                 }
[16:20:00.847]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:00.847]                 "immediateCondition"))) {
[16:20:00.847]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:00.847]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.847]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:00.847]                   if (TRUE && !signal) {
[16:20:00.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.847]                     {
[16:20:00.847]                       inherits <- base::inherits
[16:20:00.847]                       invokeRestart <- base::invokeRestart
[16:20:00.847]                       is.null <- base::is.null
[16:20:00.847]                       muffled <- FALSE
[16:20:00.847]                       if (inherits(cond, "message")) {
[16:20:00.847]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.847]                         if (muffled) 
[16:20:00.847]                           invokeRestart("muffleMessage")
[16:20:00.847]                       }
[16:20:00.847]                       else if (inherits(cond, "warning")) {
[16:20:00.847]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.847]                         if (muffled) 
[16:20:00.847]                           invokeRestart("muffleWarning")
[16:20:00.847]                       }
[16:20:00.847]                       else if (inherits(cond, "condition")) {
[16:20:00.847]                         if (!is.null(pattern)) {
[16:20:00.847]                           computeRestarts <- base::computeRestarts
[16:20:00.847]                           grepl <- base::grepl
[16:20:00.847]                           restarts <- computeRestarts(cond)
[16:20:00.847]                           for (restart in restarts) {
[16:20:00.847]                             name <- restart$name
[16:20:00.847]                             if (is.null(name)) 
[16:20:00.847]                               next
[16:20:00.847]                             if (!grepl(pattern, name)) 
[16:20:00.847]                               next
[16:20:00.847]                             invokeRestart(restart)
[16:20:00.847]                             muffled <- TRUE
[16:20:00.847]                             break
[16:20:00.847]                           }
[16:20:00.847]                         }
[16:20:00.847]                       }
[16:20:00.847]                       invisible(muffled)
[16:20:00.847]                     }
[16:20:00.847]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.847]                   }
[16:20:00.847]                 }
[16:20:00.847]                 else {
[16:20:00.847]                   if (TRUE) {
[16:20:00.847]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.847]                     {
[16:20:00.847]                       inherits <- base::inherits
[16:20:00.847]                       invokeRestart <- base::invokeRestart
[16:20:00.847]                       is.null <- base::is.null
[16:20:00.847]                       muffled <- FALSE
[16:20:00.847]                       if (inherits(cond, "message")) {
[16:20:00.847]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.847]                         if (muffled) 
[16:20:00.847]                           invokeRestart("muffleMessage")
[16:20:00.847]                       }
[16:20:00.847]                       else if (inherits(cond, "warning")) {
[16:20:00.847]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.847]                         if (muffled) 
[16:20:00.847]                           invokeRestart("muffleWarning")
[16:20:00.847]                       }
[16:20:00.847]                       else if (inherits(cond, "condition")) {
[16:20:00.847]                         if (!is.null(pattern)) {
[16:20:00.847]                           computeRestarts <- base::computeRestarts
[16:20:00.847]                           grepl <- base::grepl
[16:20:00.847]                           restarts <- computeRestarts(cond)
[16:20:00.847]                           for (restart in restarts) {
[16:20:00.847]                             name <- restart$name
[16:20:00.847]                             if (is.null(name)) 
[16:20:00.847]                               next
[16:20:00.847]                             if (!grepl(pattern, name)) 
[16:20:00.847]                               next
[16:20:00.847]                             invokeRestart(restart)
[16:20:00.847]                             muffled <- TRUE
[16:20:00.847]                             break
[16:20:00.847]                           }
[16:20:00.847]                         }
[16:20:00.847]                       }
[16:20:00.847]                       invisible(muffled)
[16:20:00.847]                     }
[16:20:00.847]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.847]                   }
[16:20:00.847]                 }
[16:20:00.847]             }
[16:20:00.847]         }))
[16:20:00.847]     }, error = function(ex) {
[16:20:00.847]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:00.847]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.847]                 ...future.rng), started = ...future.startTime, 
[16:20:00.847]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:00.847]             version = "1.8"), class = "FutureResult")
[16:20:00.847]     }, finally = {
[16:20:00.847]         if (!identical(...future.workdir, getwd())) 
[16:20:00.847]             setwd(...future.workdir)
[16:20:00.847]         {
[16:20:00.847]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:00.847]                 ...future.oldOptions$nwarnings <- NULL
[16:20:00.847]             }
[16:20:00.847]             base::options(...future.oldOptions)
[16:20:00.847]             if (.Platform$OS.type == "windows") {
[16:20:00.847]                 old_names <- names(...future.oldEnvVars)
[16:20:00.847]                 envs <- base::Sys.getenv()
[16:20:00.847]                 names <- names(envs)
[16:20:00.847]                 common <- intersect(names, old_names)
[16:20:00.847]                 added <- setdiff(names, old_names)
[16:20:00.847]                 removed <- setdiff(old_names, names)
[16:20:00.847]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:00.847]                   envs[common]]
[16:20:00.847]                 NAMES <- toupper(changed)
[16:20:00.847]                 args <- list()
[16:20:00.847]                 for (kk in seq_along(NAMES)) {
[16:20:00.847]                   name <- changed[[kk]]
[16:20:00.847]                   NAME <- NAMES[[kk]]
[16:20:00.847]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.847]                     next
[16:20:00.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.847]                 }
[16:20:00.847]                 NAMES <- toupper(added)
[16:20:00.847]                 for (kk in seq_along(NAMES)) {
[16:20:00.847]                   name <- added[[kk]]
[16:20:00.847]                   NAME <- NAMES[[kk]]
[16:20:00.847]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.847]                     next
[16:20:00.847]                   args[[name]] <- ""
[16:20:00.847]                 }
[16:20:00.847]                 NAMES <- toupper(removed)
[16:20:00.847]                 for (kk in seq_along(NAMES)) {
[16:20:00.847]                   name <- removed[[kk]]
[16:20:00.847]                   NAME <- NAMES[[kk]]
[16:20:00.847]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.847]                     next
[16:20:00.847]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.847]                 }
[16:20:00.847]                 if (length(args) > 0) 
[16:20:00.847]                   base::do.call(base::Sys.setenv, args = args)
[16:20:00.847]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:00.847]             }
[16:20:00.847]             else {
[16:20:00.847]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:00.847]             }
[16:20:00.847]             {
[16:20:00.847]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:00.847]                   0L) {
[16:20:00.847]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:00.847]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:00.847]                   base::options(opts)
[16:20:00.847]                 }
[16:20:00.847]                 {
[16:20:00.847]                   {
[16:20:00.847]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:00.847]                     NULL
[16:20:00.847]                   }
[16:20:00.847]                   options(future.plan = NULL)
[16:20:00.847]                   if (is.na(NA_character_)) 
[16:20:00.847]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.847]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:00.847]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:00.847]                     .init = FALSE)
[16:20:00.847]                 }
[16:20:00.847]             }
[16:20:00.847]         }
[16:20:00.847]     })
[16:20:00.847]     if (TRUE) {
[16:20:00.847]         base::sink(type = "output", split = FALSE)
[16:20:00.847]         if (TRUE) {
[16:20:00.847]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:00.847]         }
[16:20:00.847]         else {
[16:20:00.847]             ...future.result["stdout"] <- base::list(NULL)
[16:20:00.847]         }
[16:20:00.847]         base::close(...future.stdout)
[16:20:00.847]         ...future.stdout <- NULL
[16:20:00.847]     }
[16:20:00.847]     ...future.result$conditions <- ...future.conditions
[16:20:00.847]     ...future.result$finished <- base::Sys.time()
[16:20:00.847]     ...future.result
[16:20:00.847] }
[16:20:00.901] MultisessionFuture started
[16:20:00.901] result() for ClusterFuture ...
[16:20:00.902] receiveMessageFromWorker() for ClusterFuture ...
[16:20:00.902] - Validating connection of MultisessionFuture
[16:20:00.934] - received message: FutureResult
[16:20:00.934] - Received FutureResult
[16:20:00.937] - Erased future from FutureRegistry
[16:20:00.938] result() for ClusterFuture ...
[16:20:00.938] - result already collected: FutureResult
[16:20:00.938] result() for ClusterFuture ... done
[16:20:00.938] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:00.938] result() for ClusterFuture ... done
[16:20:00.938] result() for ClusterFuture ...
[16:20:00.938] - result already collected: FutureResult
[16:20:00.938] result() for ClusterFuture ... done
[16:20:00.939] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:00.939] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[16:20:00.939] getGlobalsAndPackages() ...
[16:20:00.939] Searching for globals...
[16:20:00.946] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[16:20:00.946] Searching for globals ... DONE
[16:20:00.947] Resolving globals: FALSE
[16:20:00.948] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[16:20:00.949] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:20:00.949] - globals: [2] ‘slow_fcn’, ‘x’
[16:20:00.949] 
[16:20:00.949] getGlobalsAndPackages() ... DONE
[16:20:00.951] run() for ‘Future’ ...
[16:20:00.951] - state: ‘created’
[16:20:00.951] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:00.963] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:00.963] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:00.963]   - Field: ‘node’
[16:20:00.963]   - Field: ‘label’
[16:20:00.963]   - Field: ‘local’
[16:20:00.963]   - Field: ‘owner’
[16:20:00.963]   - Field: ‘envir’
[16:20:00.963]   - Field: ‘workers’
[16:20:00.963]   - Field: ‘packages’
[16:20:00.963]   - Field: ‘gc’
[16:20:00.964]   - Field: ‘conditions’
[16:20:00.964]   - Field: ‘persistent’
[16:20:00.964]   - Field: ‘expr’
[16:20:00.964]   - Field: ‘uuid’
[16:20:00.964]   - Field: ‘seed’
[16:20:00.964]   - Field: ‘version’
[16:20:00.964]   - Field: ‘result’
[16:20:00.964]   - Field: ‘asynchronous’
[16:20:00.965]   - Field: ‘calls’
[16:20:00.965]   - Field: ‘globals’
[16:20:00.965]   - Field: ‘stdout’
[16:20:00.965]   - Field: ‘earlySignal’
[16:20:00.965]   - Field: ‘lazy’
[16:20:00.965]   - Field: ‘state’
[16:20:00.965] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:00.965] - Launch lazy future ...
[16:20:00.966] Packages needed by the future expression (n = 0): <none>
[16:20:00.966] Packages needed by future strategies (n = 0): <none>
[16:20:00.966] {
[16:20:00.966]     {
[16:20:00.966]         {
[16:20:00.966]             ...future.startTime <- base::Sys.time()
[16:20:00.966]             {
[16:20:00.966]                 {
[16:20:00.966]                   {
[16:20:00.966]                     {
[16:20:00.966]                       base::local({
[16:20:00.966]                         has_future <- base::requireNamespace("future", 
[16:20:00.966]                           quietly = TRUE)
[16:20:00.966]                         if (has_future) {
[16:20:00.966]                           ns <- base::getNamespace("future")
[16:20:00.966]                           version <- ns[[".package"]][["version"]]
[16:20:00.966]                           if (is.null(version)) 
[16:20:00.966]                             version <- utils::packageVersion("future")
[16:20:00.966]                         }
[16:20:00.966]                         else {
[16:20:00.966]                           version <- NULL
[16:20:00.966]                         }
[16:20:00.966]                         if (!has_future || version < "1.8.0") {
[16:20:00.966]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:00.966]                             "", base::R.version$version.string), 
[16:20:00.966]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:00.966]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:00.966]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:00.966]                               "release", "version")], collapse = " "), 
[16:20:00.966]                             hostname = base::Sys.info()[["nodename"]])
[16:20:00.966]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:00.966]                             info)
[16:20:00.966]                           info <- base::paste(info, collapse = "; ")
[16:20:00.966]                           if (!has_future) {
[16:20:00.966]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:00.966]                               info)
[16:20:00.966]                           }
[16:20:00.966]                           else {
[16:20:00.966]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:00.966]                               info, version)
[16:20:00.966]                           }
[16:20:00.966]                           base::stop(msg)
[16:20:00.966]                         }
[16:20:00.966]                       })
[16:20:00.966]                     }
[16:20:00.966]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:00.966]                     base::options(mc.cores = 1L)
[16:20:00.966]                   }
[16:20:00.966]                   ...future.strategy.old <- future::plan("list")
[16:20:00.966]                   options(future.plan = NULL)
[16:20:00.966]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.966]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:00.966]                 }
[16:20:00.966]                 ...future.workdir <- getwd()
[16:20:00.966]             }
[16:20:00.966]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:00.966]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:00.966]         }
[16:20:00.966]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:00.966]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:00.966]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:00.966]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:00.966]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:00.966]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:00.966]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:00.966]             base::names(...future.oldOptions))
[16:20:00.966]     }
[16:20:00.966]     if (FALSE) {
[16:20:00.966]     }
[16:20:00.966]     else {
[16:20:00.966]         if (TRUE) {
[16:20:00.966]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:00.966]                 open = "w")
[16:20:00.966]         }
[16:20:00.966]         else {
[16:20:00.966]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:00.966]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:00.966]         }
[16:20:00.966]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:00.966]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:00.966]             base::sink(type = "output", split = FALSE)
[16:20:00.966]             base::close(...future.stdout)
[16:20:00.966]         }, add = TRUE)
[16:20:00.966]     }
[16:20:00.966]     ...future.frame <- base::sys.nframe()
[16:20:00.966]     ...future.conditions <- base::list()
[16:20:00.966]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:00.966]     if (FALSE) {
[16:20:00.966]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:00.966]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:00.966]     }
[16:20:00.966]     ...future.result <- base::tryCatch({
[16:20:00.966]         base::withCallingHandlers({
[16:20:00.966]             ...future.value <- base::withVisible(base::local({
[16:20:00.966]                 ...future.makeSendCondition <- base::local({
[16:20:00.966]                   sendCondition <- NULL
[16:20:00.966]                   function(frame = 1L) {
[16:20:00.966]                     if (is.function(sendCondition)) 
[16:20:00.966]                       return(sendCondition)
[16:20:00.966]                     ns <- getNamespace("parallel")
[16:20:00.966]                     if (exists("sendData", mode = "function", 
[16:20:00.966]                       envir = ns)) {
[16:20:00.966]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:00.966]                         envir = ns)
[16:20:00.966]                       envir <- sys.frame(frame)
[16:20:00.966]                       master <- NULL
[16:20:00.966]                       while (!identical(envir, .GlobalEnv) && 
[16:20:00.966]                         !identical(envir, emptyenv())) {
[16:20:00.966]                         if (exists("master", mode = "list", envir = envir, 
[16:20:00.966]                           inherits = FALSE)) {
[16:20:00.966]                           master <- get("master", mode = "list", 
[16:20:00.966]                             envir = envir, inherits = FALSE)
[16:20:00.966]                           if (inherits(master, c("SOCKnode", 
[16:20:00.966]                             "SOCK0node"))) {
[16:20:00.966]                             sendCondition <<- function(cond) {
[16:20:00.966]                               data <- list(type = "VALUE", value = cond, 
[16:20:00.966]                                 success = TRUE)
[16:20:00.966]                               parallel_sendData(master, data)
[16:20:00.966]                             }
[16:20:00.966]                             return(sendCondition)
[16:20:00.966]                           }
[16:20:00.966]                         }
[16:20:00.966]                         frame <- frame + 1L
[16:20:00.966]                         envir <- sys.frame(frame)
[16:20:00.966]                       }
[16:20:00.966]                     }
[16:20:00.966]                     sendCondition <<- function(cond) NULL
[16:20:00.966]                   }
[16:20:00.966]                 })
[16:20:00.966]                 withCallingHandlers({
[16:20:00.966]                   slow_fcn(x)
[16:20:00.966]                 }, immediateCondition = function(cond) {
[16:20:00.966]                   sendCondition <- ...future.makeSendCondition()
[16:20:00.966]                   sendCondition(cond)
[16:20:00.966]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.966]                   {
[16:20:00.966]                     inherits <- base::inherits
[16:20:00.966]                     invokeRestart <- base::invokeRestart
[16:20:00.966]                     is.null <- base::is.null
[16:20:00.966]                     muffled <- FALSE
[16:20:00.966]                     if (inherits(cond, "message")) {
[16:20:00.966]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:00.966]                       if (muffled) 
[16:20:00.966]                         invokeRestart("muffleMessage")
[16:20:00.966]                     }
[16:20:00.966]                     else if (inherits(cond, "warning")) {
[16:20:00.966]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:00.966]                       if (muffled) 
[16:20:00.966]                         invokeRestart("muffleWarning")
[16:20:00.966]                     }
[16:20:00.966]                     else if (inherits(cond, "condition")) {
[16:20:00.966]                       if (!is.null(pattern)) {
[16:20:00.966]                         computeRestarts <- base::computeRestarts
[16:20:00.966]                         grepl <- base::grepl
[16:20:00.966]                         restarts <- computeRestarts(cond)
[16:20:00.966]                         for (restart in restarts) {
[16:20:00.966]                           name <- restart$name
[16:20:00.966]                           if (is.null(name)) 
[16:20:00.966]                             next
[16:20:00.966]                           if (!grepl(pattern, name)) 
[16:20:00.966]                             next
[16:20:00.966]                           invokeRestart(restart)
[16:20:00.966]                           muffled <- TRUE
[16:20:00.966]                           break
[16:20:00.966]                         }
[16:20:00.966]                       }
[16:20:00.966]                     }
[16:20:00.966]                     invisible(muffled)
[16:20:00.966]                   }
[16:20:00.966]                   muffleCondition(cond)
[16:20:00.966]                 })
[16:20:00.966]             }))
[16:20:00.966]             future::FutureResult(value = ...future.value$value, 
[16:20:00.966]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.966]                   ...future.rng), globalenv = if (FALSE) 
[16:20:00.966]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:00.966]                     ...future.globalenv.names))
[16:20:00.966]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:00.966]         }, condition = base::local({
[16:20:00.966]             c <- base::c
[16:20:00.966]             inherits <- base::inherits
[16:20:00.966]             invokeRestart <- base::invokeRestart
[16:20:00.966]             length <- base::length
[16:20:00.966]             list <- base::list
[16:20:00.966]             seq.int <- base::seq.int
[16:20:00.966]             signalCondition <- base::signalCondition
[16:20:00.966]             sys.calls <- base::sys.calls
[16:20:00.966]             `[[` <- base::`[[`
[16:20:00.966]             `+` <- base::`+`
[16:20:00.966]             `<<-` <- base::`<<-`
[16:20:00.966]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:00.966]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:00.966]                   3L)]
[16:20:00.966]             }
[16:20:00.966]             function(cond) {
[16:20:00.966]                 is_error <- inherits(cond, "error")
[16:20:00.966]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:00.966]                   NULL)
[16:20:00.966]                 if (is_error) {
[16:20:00.966]                   sessionInformation <- function() {
[16:20:00.966]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:00.966]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:00.966]                       search = base::search(), system = base::Sys.info())
[16:20:00.966]                   }
[16:20:00.966]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.966]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:00.966]                     cond$call), session = sessionInformation(), 
[16:20:00.966]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:00.966]                   signalCondition(cond)
[16:20:00.966]                 }
[16:20:00.966]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:00.966]                 "immediateCondition"))) {
[16:20:00.966]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:00.966]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.966]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:00.966]                   if (TRUE && !signal) {
[16:20:00.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.966]                     {
[16:20:00.966]                       inherits <- base::inherits
[16:20:00.966]                       invokeRestart <- base::invokeRestart
[16:20:00.966]                       is.null <- base::is.null
[16:20:00.966]                       muffled <- FALSE
[16:20:00.966]                       if (inherits(cond, "message")) {
[16:20:00.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.966]                         if (muffled) 
[16:20:00.966]                           invokeRestart("muffleMessage")
[16:20:00.966]                       }
[16:20:00.966]                       else if (inherits(cond, "warning")) {
[16:20:00.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.966]                         if (muffled) 
[16:20:00.966]                           invokeRestart("muffleWarning")
[16:20:00.966]                       }
[16:20:00.966]                       else if (inherits(cond, "condition")) {
[16:20:00.966]                         if (!is.null(pattern)) {
[16:20:00.966]                           computeRestarts <- base::computeRestarts
[16:20:00.966]                           grepl <- base::grepl
[16:20:00.966]                           restarts <- computeRestarts(cond)
[16:20:00.966]                           for (restart in restarts) {
[16:20:00.966]                             name <- restart$name
[16:20:00.966]                             if (is.null(name)) 
[16:20:00.966]                               next
[16:20:00.966]                             if (!grepl(pattern, name)) 
[16:20:00.966]                               next
[16:20:00.966]                             invokeRestart(restart)
[16:20:00.966]                             muffled <- TRUE
[16:20:00.966]                             break
[16:20:00.966]                           }
[16:20:00.966]                         }
[16:20:00.966]                       }
[16:20:00.966]                       invisible(muffled)
[16:20:00.966]                     }
[16:20:00.966]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.966]                   }
[16:20:00.966]                 }
[16:20:00.966]                 else {
[16:20:00.966]                   if (TRUE) {
[16:20:00.966]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.966]                     {
[16:20:00.966]                       inherits <- base::inherits
[16:20:00.966]                       invokeRestart <- base::invokeRestart
[16:20:00.966]                       is.null <- base::is.null
[16:20:00.966]                       muffled <- FALSE
[16:20:00.966]                       if (inherits(cond, "message")) {
[16:20:00.966]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.966]                         if (muffled) 
[16:20:00.966]                           invokeRestart("muffleMessage")
[16:20:00.966]                       }
[16:20:00.966]                       else if (inherits(cond, "warning")) {
[16:20:00.966]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.966]                         if (muffled) 
[16:20:00.966]                           invokeRestart("muffleWarning")
[16:20:00.966]                       }
[16:20:00.966]                       else if (inherits(cond, "condition")) {
[16:20:00.966]                         if (!is.null(pattern)) {
[16:20:00.966]                           computeRestarts <- base::computeRestarts
[16:20:00.966]                           grepl <- base::grepl
[16:20:00.966]                           restarts <- computeRestarts(cond)
[16:20:00.966]                           for (restart in restarts) {
[16:20:00.966]                             name <- restart$name
[16:20:00.966]                             if (is.null(name)) 
[16:20:00.966]                               next
[16:20:00.966]                             if (!grepl(pattern, name)) 
[16:20:00.966]                               next
[16:20:00.966]                             invokeRestart(restart)
[16:20:00.966]                             muffled <- TRUE
[16:20:00.966]                             break
[16:20:00.966]                           }
[16:20:00.966]                         }
[16:20:00.966]                       }
[16:20:00.966]                       invisible(muffled)
[16:20:00.966]                     }
[16:20:00.966]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.966]                   }
[16:20:00.966]                 }
[16:20:00.966]             }
[16:20:00.966]         }))
[16:20:00.966]     }, error = function(ex) {
[16:20:00.966]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:00.966]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.966]                 ...future.rng), started = ...future.startTime, 
[16:20:00.966]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:00.966]             version = "1.8"), class = "FutureResult")
[16:20:00.966]     }, finally = {
[16:20:00.966]         if (!identical(...future.workdir, getwd())) 
[16:20:00.966]             setwd(...future.workdir)
[16:20:00.966]         {
[16:20:00.966]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:00.966]                 ...future.oldOptions$nwarnings <- NULL
[16:20:00.966]             }
[16:20:00.966]             base::options(...future.oldOptions)
[16:20:00.966]             if (.Platform$OS.type == "windows") {
[16:20:00.966]                 old_names <- names(...future.oldEnvVars)
[16:20:00.966]                 envs <- base::Sys.getenv()
[16:20:00.966]                 names <- names(envs)
[16:20:00.966]                 common <- intersect(names, old_names)
[16:20:00.966]                 added <- setdiff(names, old_names)
[16:20:00.966]                 removed <- setdiff(old_names, names)
[16:20:00.966]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:00.966]                   envs[common]]
[16:20:00.966]                 NAMES <- toupper(changed)
[16:20:00.966]                 args <- list()
[16:20:00.966]                 for (kk in seq_along(NAMES)) {
[16:20:00.966]                   name <- changed[[kk]]
[16:20:00.966]                   NAME <- NAMES[[kk]]
[16:20:00.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.966]                     next
[16:20:00.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.966]                 }
[16:20:00.966]                 NAMES <- toupper(added)
[16:20:00.966]                 for (kk in seq_along(NAMES)) {
[16:20:00.966]                   name <- added[[kk]]
[16:20:00.966]                   NAME <- NAMES[[kk]]
[16:20:00.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.966]                     next
[16:20:00.966]                   args[[name]] <- ""
[16:20:00.966]                 }
[16:20:00.966]                 NAMES <- toupper(removed)
[16:20:00.966]                 for (kk in seq_along(NAMES)) {
[16:20:00.966]                   name <- removed[[kk]]
[16:20:00.966]                   NAME <- NAMES[[kk]]
[16:20:00.966]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.966]                     next
[16:20:00.966]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.966]                 }
[16:20:00.966]                 if (length(args) > 0) 
[16:20:00.966]                   base::do.call(base::Sys.setenv, args = args)
[16:20:00.966]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:00.966]             }
[16:20:00.966]             else {
[16:20:00.966]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:00.966]             }
[16:20:00.966]             {
[16:20:00.966]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:00.966]                   0L) {
[16:20:00.966]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:00.966]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:00.966]                   base::options(opts)
[16:20:00.966]                 }
[16:20:00.966]                 {
[16:20:00.966]                   {
[16:20:00.966]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:00.966]                     NULL
[16:20:00.966]                   }
[16:20:00.966]                   options(future.plan = NULL)
[16:20:00.966]                   if (is.na(NA_character_)) 
[16:20:00.966]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.966]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:00.966]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:00.966]                     .init = FALSE)
[16:20:00.966]                 }
[16:20:00.966]             }
[16:20:00.966]         }
[16:20:00.966]     })
[16:20:00.966]     if (TRUE) {
[16:20:00.966]         base::sink(type = "output", split = FALSE)
[16:20:00.966]         if (TRUE) {
[16:20:00.966]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:00.966]         }
[16:20:00.966]         else {
[16:20:00.966]             ...future.result["stdout"] <- base::list(NULL)
[16:20:00.966]         }
[16:20:00.966]         base::close(...future.stdout)
[16:20:00.966]         ...future.stdout <- NULL
[16:20:00.966]     }
[16:20:00.966]     ...future.result$conditions <- ...future.conditions
[16:20:00.966]     ...future.result$finished <- base::Sys.time()
[16:20:00.966]     ...future.result
[16:20:00.966] }
[16:20:00.972] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[16:20:00.972] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[16:20:00.973] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[16:20:00.973] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:00.973] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:00.974] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[16:20:00.975] MultisessionFuture started
[16:20:00.976] - Launch lazy future ... done
[16:20:00.976] run() for ‘MultisessionFuture’ ... done
[16:20:00.977] getGlobalsAndPackages() ...
[16:20:00.977] Searching for globals...
[16:20:00.982] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[16:20:00.983] Searching for globals ... DONE
[16:20:00.983] Resolving globals: FALSE
[16:20:00.983] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[16:20:00.984] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:20:00.984] - globals: [2] ‘slow_fcn’, ‘x’
[16:20:00.984] 
[16:20:00.984] getGlobalsAndPackages() ... DONE
[16:20:00.984] run() for ‘Future’ ...
[16:20:00.985] - state: ‘created’
[16:20:00.985] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:00.995] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:00.995] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:00.995]   - Field: ‘node’
[16:20:00.996]   - Field: ‘label’
[16:20:00.996]   - Field: ‘local’
[16:20:00.996]   - Field: ‘owner’
[16:20:00.996]   - Field: ‘envir’
[16:20:00.996]   - Field: ‘workers’
[16:20:00.996]   - Field: ‘packages’
[16:20:00.996]   - Field: ‘gc’
[16:20:00.996]   - Field: ‘conditions’
[16:20:00.996]   - Field: ‘persistent’
[16:20:00.996]   - Field: ‘expr’
[16:20:00.996]   - Field: ‘uuid’
[16:20:00.997]   - Field: ‘seed’
[16:20:00.997]   - Field: ‘version’
[16:20:00.997]   - Field: ‘result’
[16:20:00.997]   - Field: ‘asynchronous’
[16:20:00.997]   - Field: ‘calls’
[16:20:00.997]   - Field: ‘globals’
[16:20:00.997]   - Field: ‘stdout’
[16:20:00.997]   - Field: ‘earlySignal’
[16:20:00.997]   - Field: ‘lazy’
[16:20:00.997]   - Field: ‘state’
[16:20:00.997] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:00.998] - Launch lazy future ...
[16:20:00.998] Packages needed by the future expression (n = 0): <none>
[16:20:00.998] Packages needed by future strategies (n = 0): <none>
[16:20:00.998] {
[16:20:00.998]     {
[16:20:00.998]         {
[16:20:00.998]             ...future.startTime <- base::Sys.time()
[16:20:00.998]             {
[16:20:00.998]                 {
[16:20:00.998]                   {
[16:20:00.998]                     {
[16:20:00.998]                       base::local({
[16:20:00.998]                         has_future <- base::requireNamespace("future", 
[16:20:00.998]                           quietly = TRUE)
[16:20:00.998]                         if (has_future) {
[16:20:00.998]                           ns <- base::getNamespace("future")
[16:20:00.998]                           version <- ns[[".package"]][["version"]]
[16:20:00.998]                           if (is.null(version)) 
[16:20:00.998]                             version <- utils::packageVersion("future")
[16:20:00.998]                         }
[16:20:00.998]                         else {
[16:20:00.998]                           version <- NULL
[16:20:00.998]                         }
[16:20:00.998]                         if (!has_future || version < "1.8.0") {
[16:20:00.998]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:00.998]                             "", base::R.version$version.string), 
[16:20:00.998]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:00.998]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:00.998]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:00.998]                               "release", "version")], collapse = " "), 
[16:20:00.998]                             hostname = base::Sys.info()[["nodename"]])
[16:20:00.998]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:00.998]                             info)
[16:20:00.998]                           info <- base::paste(info, collapse = "; ")
[16:20:00.998]                           if (!has_future) {
[16:20:00.998]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:00.998]                               info)
[16:20:00.998]                           }
[16:20:00.998]                           else {
[16:20:00.998]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:00.998]                               info, version)
[16:20:00.998]                           }
[16:20:00.998]                           base::stop(msg)
[16:20:00.998]                         }
[16:20:00.998]                       })
[16:20:00.998]                     }
[16:20:00.998]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:00.998]                     base::options(mc.cores = 1L)
[16:20:00.998]                   }
[16:20:00.998]                   ...future.strategy.old <- future::plan("list")
[16:20:00.998]                   options(future.plan = NULL)
[16:20:00.998]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.998]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:00.998]                 }
[16:20:00.998]                 ...future.workdir <- getwd()
[16:20:00.998]             }
[16:20:00.998]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:00.998]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:00.998]         }
[16:20:00.998]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:00.998]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:00.998]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:00.998]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:00.998]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:00.998]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:00.998]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:00.998]             base::names(...future.oldOptions))
[16:20:00.998]     }
[16:20:00.998]     if (FALSE) {
[16:20:00.998]     }
[16:20:00.998]     else {
[16:20:00.998]         if (TRUE) {
[16:20:00.998]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:00.998]                 open = "w")
[16:20:00.998]         }
[16:20:00.998]         else {
[16:20:00.998]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:00.998]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:00.998]         }
[16:20:00.998]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:00.998]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:00.998]             base::sink(type = "output", split = FALSE)
[16:20:00.998]             base::close(...future.stdout)
[16:20:00.998]         }, add = TRUE)
[16:20:00.998]     }
[16:20:00.998]     ...future.frame <- base::sys.nframe()
[16:20:00.998]     ...future.conditions <- base::list()
[16:20:00.998]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:00.998]     if (FALSE) {
[16:20:00.998]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:00.998]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:00.998]     }
[16:20:00.998]     ...future.result <- base::tryCatch({
[16:20:00.998]         base::withCallingHandlers({
[16:20:00.998]             ...future.value <- base::withVisible(base::local({
[16:20:00.998]                 ...future.makeSendCondition <- base::local({
[16:20:00.998]                   sendCondition <- NULL
[16:20:00.998]                   function(frame = 1L) {
[16:20:00.998]                     if (is.function(sendCondition)) 
[16:20:00.998]                       return(sendCondition)
[16:20:00.998]                     ns <- getNamespace("parallel")
[16:20:00.998]                     if (exists("sendData", mode = "function", 
[16:20:00.998]                       envir = ns)) {
[16:20:00.998]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:00.998]                         envir = ns)
[16:20:00.998]                       envir <- sys.frame(frame)
[16:20:00.998]                       master <- NULL
[16:20:00.998]                       while (!identical(envir, .GlobalEnv) && 
[16:20:00.998]                         !identical(envir, emptyenv())) {
[16:20:00.998]                         if (exists("master", mode = "list", envir = envir, 
[16:20:00.998]                           inherits = FALSE)) {
[16:20:00.998]                           master <- get("master", mode = "list", 
[16:20:00.998]                             envir = envir, inherits = FALSE)
[16:20:00.998]                           if (inherits(master, c("SOCKnode", 
[16:20:00.998]                             "SOCK0node"))) {
[16:20:00.998]                             sendCondition <<- function(cond) {
[16:20:00.998]                               data <- list(type = "VALUE", value = cond, 
[16:20:00.998]                                 success = TRUE)
[16:20:00.998]                               parallel_sendData(master, data)
[16:20:00.998]                             }
[16:20:00.998]                             return(sendCondition)
[16:20:00.998]                           }
[16:20:00.998]                         }
[16:20:00.998]                         frame <- frame + 1L
[16:20:00.998]                         envir <- sys.frame(frame)
[16:20:00.998]                       }
[16:20:00.998]                     }
[16:20:00.998]                     sendCondition <<- function(cond) NULL
[16:20:00.998]                   }
[16:20:00.998]                 })
[16:20:00.998]                 withCallingHandlers({
[16:20:00.998]                   slow_fcn(x)
[16:20:00.998]                 }, immediateCondition = function(cond) {
[16:20:00.998]                   sendCondition <- ...future.makeSendCondition()
[16:20:00.998]                   sendCondition(cond)
[16:20:00.998]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.998]                   {
[16:20:00.998]                     inherits <- base::inherits
[16:20:00.998]                     invokeRestart <- base::invokeRestart
[16:20:00.998]                     is.null <- base::is.null
[16:20:00.998]                     muffled <- FALSE
[16:20:00.998]                     if (inherits(cond, "message")) {
[16:20:00.998]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:00.998]                       if (muffled) 
[16:20:00.998]                         invokeRestart("muffleMessage")
[16:20:00.998]                     }
[16:20:00.998]                     else if (inherits(cond, "warning")) {
[16:20:00.998]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:00.998]                       if (muffled) 
[16:20:00.998]                         invokeRestart("muffleWarning")
[16:20:00.998]                     }
[16:20:00.998]                     else if (inherits(cond, "condition")) {
[16:20:00.998]                       if (!is.null(pattern)) {
[16:20:00.998]                         computeRestarts <- base::computeRestarts
[16:20:00.998]                         grepl <- base::grepl
[16:20:00.998]                         restarts <- computeRestarts(cond)
[16:20:00.998]                         for (restart in restarts) {
[16:20:00.998]                           name <- restart$name
[16:20:00.998]                           if (is.null(name)) 
[16:20:00.998]                             next
[16:20:00.998]                           if (!grepl(pattern, name)) 
[16:20:00.998]                             next
[16:20:00.998]                           invokeRestart(restart)
[16:20:00.998]                           muffled <- TRUE
[16:20:00.998]                           break
[16:20:00.998]                         }
[16:20:00.998]                       }
[16:20:00.998]                     }
[16:20:00.998]                     invisible(muffled)
[16:20:00.998]                   }
[16:20:00.998]                   muffleCondition(cond)
[16:20:00.998]                 })
[16:20:00.998]             }))
[16:20:00.998]             future::FutureResult(value = ...future.value$value, 
[16:20:00.998]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.998]                   ...future.rng), globalenv = if (FALSE) 
[16:20:00.998]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:00.998]                     ...future.globalenv.names))
[16:20:00.998]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:00.998]         }, condition = base::local({
[16:20:00.998]             c <- base::c
[16:20:00.998]             inherits <- base::inherits
[16:20:00.998]             invokeRestart <- base::invokeRestart
[16:20:00.998]             length <- base::length
[16:20:00.998]             list <- base::list
[16:20:00.998]             seq.int <- base::seq.int
[16:20:00.998]             signalCondition <- base::signalCondition
[16:20:00.998]             sys.calls <- base::sys.calls
[16:20:00.998]             `[[` <- base::`[[`
[16:20:00.998]             `+` <- base::`+`
[16:20:00.998]             `<<-` <- base::`<<-`
[16:20:00.998]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:00.998]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:00.998]                   3L)]
[16:20:00.998]             }
[16:20:00.998]             function(cond) {
[16:20:00.998]                 is_error <- inherits(cond, "error")
[16:20:00.998]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:00.998]                   NULL)
[16:20:00.998]                 if (is_error) {
[16:20:00.998]                   sessionInformation <- function() {
[16:20:00.998]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:00.998]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:00.998]                       search = base::search(), system = base::Sys.info())
[16:20:00.998]                   }
[16:20:00.998]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.998]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:00.998]                     cond$call), session = sessionInformation(), 
[16:20:00.998]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:00.998]                   signalCondition(cond)
[16:20:00.998]                 }
[16:20:00.998]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:00.998]                 "immediateCondition"))) {
[16:20:00.998]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:00.998]                   ...future.conditions[[length(...future.conditions) + 
[16:20:00.998]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:00.998]                   if (TRUE && !signal) {
[16:20:00.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.998]                     {
[16:20:00.998]                       inherits <- base::inherits
[16:20:00.998]                       invokeRestart <- base::invokeRestart
[16:20:00.998]                       is.null <- base::is.null
[16:20:00.998]                       muffled <- FALSE
[16:20:00.998]                       if (inherits(cond, "message")) {
[16:20:00.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.998]                         if (muffled) 
[16:20:00.998]                           invokeRestart("muffleMessage")
[16:20:00.998]                       }
[16:20:00.998]                       else if (inherits(cond, "warning")) {
[16:20:00.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.998]                         if (muffled) 
[16:20:00.998]                           invokeRestart("muffleWarning")
[16:20:00.998]                       }
[16:20:00.998]                       else if (inherits(cond, "condition")) {
[16:20:00.998]                         if (!is.null(pattern)) {
[16:20:00.998]                           computeRestarts <- base::computeRestarts
[16:20:00.998]                           grepl <- base::grepl
[16:20:00.998]                           restarts <- computeRestarts(cond)
[16:20:00.998]                           for (restart in restarts) {
[16:20:00.998]                             name <- restart$name
[16:20:00.998]                             if (is.null(name)) 
[16:20:00.998]                               next
[16:20:00.998]                             if (!grepl(pattern, name)) 
[16:20:00.998]                               next
[16:20:00.998]                             invokeRestart(restart)
[16:20:00.998]                             muffled <- TRUE
[16:20:00.998]                             break
[16:20:00.998]                           }
[16:20:00.998]                         }
[16:20:00.998]                       }
[16:20:00.998]                       invisible(muffled)
[16:20:00.998]                     }
[16:20:00.998]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.998]                   }
[16:20:00.998]                 }
[16:20:00.998]                 else {
[16:20:00.998]                   if (TRUE) {
[16:20:00.998]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:00.998]                     {
[16:20:00.998]                       inherits <- base::inherits
[16:20:00.998]                       invokeRestart <- base::invokeRestart
[16:20:00.998]                       is.null <- base::is.null
[16:20:00.998]                       muffled <- FALSE
[16:20:00.998]                       if (inherits(cond, "message")) {
[16:20:00.998]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:00.998]                         if (muffled) 
[16:20:00.998]                           invokeRestart("muffleMessage")
[16:20:00.998]                       }
[16:20:00.998]                       else if (inherits(cond, "warning")) {
[16:20:00.998]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:00.998]                         if (muffled) 
[16:20:00.998]                           invokeRestart("muffleWarning")
[16:20:00.998]                       }
[16:20:00.998]                       else if (inherits(cond, "condition")) {
[16:20:00.998]                         if (!is.null(pattern)) {
[16:20:00.998]                           computeRestarts <- base::computeRestarts
[16:20:00.998]                           grepl <- base::grepl
[16:20:00.998]                           restarts <- computeRestarts(cond)
[16:20:00.998]                           for (restart in restarts) {
[16:20:00.998]                             name <- restart$name
[16:20:00.998]                             if (is.null(name)) 
[16:20:00.998]                               next
[16:20:00.998]                             if (!grepl(pattern, name)) 
[16:20:00.998]                               next
[16:20:00.998]                             invokeRestart(restart)
[16:20:00.998]                             muffled <- TRUE
[16:20:00.998]                             break
[16:20:00.998]                           }
[16:20:00.998]                         }
[16:20:00.998]                       }
[16:20:00.998]                       invisible(muffled)
[16:20:00.998]                     }
[16:20:00.998]                     muffleCondition(cond, pattern = "^muffle")
[16:20:00.998]                   }
[16:20:00.998]                 }
[16:20:00.998]             }
[16:20:00.998]         }))
[16:20:00.998]     }, error = function(ex) {
[16:20:00.998]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:00.998]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:00.998]                 ...future.rng), started = ...future.startTime, 
[16:20:00.998]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:00.998]             version = "1.8"), class = "FutureResult")
[16:20:00.998]     }, finally = {
[16:20:00.998]         if (!identical(...future.workdir, getwd())) 
[16:20:00.998]             setwd(...future.workdir)
[16:20:00.998]         {
[16:20:00.998]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:00.998]                 ...future.oldOptions$nwarnings <- NULL
[16:20:00.998]             }
[16:20:00.998]             base::options(...future.oldOptions)
[16:20:00.998]             if (.Platform$OS.type == "windows") {
[16:20:00.998]                 old_names <- names(...future.oldEnvVars)
[16:20:00.998]                 envs <- base::Sys.getenv()
[16:20:00.998]                 names <- names(envs)
[16:20:00.998]                 common <- intersect(names, old_names)
[16:20:00.998]                 added <- setdiff(names, old_names)
[16:20:00.998]                 removed <- setdiff(old_names, names)
[16:20:00.998]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:00.998]                   envs[common]]
[16:20:00.998]                 NAMES <- toupper(changed)
[16:20:00.998]                 args <- list()
[16:20:00.998]                 for (kk in seq_along(NAMES)) {
[16:20:00.998]                   name <- changed[[kk]]
[16:20:00.998]                   NAME <- NAMES[[kk]]
[16:20:00.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.998]                     next
[16:20:00.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.998]                 }
[16:20:00.998]                 NAMES <- toupper(added)
[16:20:00.998]                 for (kk in seq_along(NAMES)) {
[16:20:00.998]                   name <- added[[kk]]
[16:20:00.998]                   NAME <- NAMES[[kk]]
[16:20:00.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.998]                     next
[16:20:00.998]                   args[[name]] <- ""
[16:20:00.998]                 }
[16:20:00.998]                 NAMES <- toupper(removed)
[16:20:00.998]                 for (kk in seq_along(NAMES)) {
[16:20:00.998]                   name <- removed[[kk]]
[16:20:00.998]                   NAME <- NAMES[[kk]]
[16:20:00.998]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:00.998]                     next
[16:20:00.998]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:00.998]                 }
[16:20:00.998]                 if (length(args) > 0) 
[16:20:00.998]                   base::do.call(base::Sys.setenv, args = args)
[16:20:00.998]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:00.998]             }
[16:20:00.998]             else {
[16:20:00.998]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:00.998]             }
[16:20:00.998]             {
[16:20:00.998]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:00.998]                   0L) {
[16:20:00.998]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:00.998]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:00.998]                   base::options(opts)
[16:20:00.998]                 }
[16:20:00.998]                 {
[16:20:00.998]                   {
[16:20:00.998]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:00.998]                     NULL
[16:20:00.998]                   }
[16:20:00.998]                   options(future.plan = NULL)
[16:20:00.998]                   if (is.na(NA_character_)) 
[16:20:00.998]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:00.998]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:00.998]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:00.998]                     .init = FALSE)
[16:20:00.998]                 }
[16:20:00.998]             }
[16:20:00.998]         }
[16:20:00.998]     })
[16:20:00.998]     if (TRUE) {
[16:20:00.998]         base::sink(type = "output", split = FALSE)
[16:20:00.998]         if (TRUE) {
[16:20:00.998]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:00.998]         }
[16:20:00.998]         else {
[16:20:00.998]             ...future.result["stdout"] <- base::list(NULL)
[16:20:00.998]         }
[16:20:00.998]         base::close(...future.stdout)
[16:20:00.998]         ...future.stdout <- NULL
[16:20:00.998]     }
[16:20:00.998]     ...future.result$conditions <- ...future.conditions
[16:20:00.998]     ...future.result$finished <- base::Sys.time()
[16:20:00.998]     ...future.result
[16:20:00.998] }
[16:20:01.053] Exporting 2 global objects (1.20 KiB) to cluster node #2 ...
[16:20:01.053] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ...
[16:20:01.053] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #2 ... DONE
[16:20:01.053] Exporting ‘x’ (56 bytes) to cluster node #2 ...
[16:20:01.054] Exporting ‘x’ (56 bytes) to cluster node #2 ... DONE
[16:20:01.054] Exporting 2 global objects (1.20 KiB) to cluster node #2 ... DONE
[16:20:01.055] MultisessionFuture started
[16:20:01.056] - Launch lazy future ... done
[16:20:01.056] run() for ‘MultisessionFuture’ ... done
[16:20:01.056] getGlobalsAndPackages() ...
[16:20:01.057] Searching for globals...
[16:20:01.059] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[16:20:01.059] Searching for globals ... DONE
[16:20:01.059] Resolving globals: FALSE
[16:20:01.060] The total size of the 2 globals is 1.20 KiB (1232 bytes)
[16:20:01.061] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 1.20 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (1.15 KiB of class ‘function’) and ‘x’ (56 bytes of class ‘numeric’)
[16:20:01.061] - globals: [2] ‘slow_fcn’, ‘x’
[16:20:01.061] 
[16:20:01.061] getGlobalsAndPackages() ... DONE
[16:20:01.062] run() for ‘Future’ ...
[16:20:01.062] - state: ‘created’
[16:20:01.062] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:01.075] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:01.075] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:01.076]   - Field: ‘node’
[16:20:01.076]   - Field: ‘label’
[16:20:01.076]   - Field: ‘local’
[16:20:01.076]   - Field: ‘owner’
[16:20:01.076]   - Field: ‘envir’
[16:20:01.076]   - Field: ‘workers’
[16:20:01.077]   - Field: ‘packages’
[16:20:01.077]   - Field: ‘gc’
[16:20:01.077]   - Field: ‘conditions’
[16:20:01.077]   - Field: ‘persistent’
[16:20:01.077]   - Field: ‘expr’
[16:20:01.077]   - Field: ‘uuid’
[16:20:01.078]   - Field: ‘seed’
[16:20:01.078]   - Field: ‘version’
[16:20:01.078]   - Field: ‘result’
[16:20:01.078]   - Field: ‘asynchronous’
[16:20:01.078]   - Field: ‘calls’
[16:20:01.078]   - Field: ‘globals’
[16:20:01.079]   - Field: ‘stdout’
[16:20:01.079]   - Field: ‘earlySignal’
[16:20:01.079]   - Field: ‘lazy’
[16:20:01.079]   - Field: ‘state’
[16:20:01.079] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:01.079] - Launch lazy future ...
[16:20:01.080] Packages needed by the future expression (n = 0): <none>
[16:20:01.080] Packages needed by future strategies (n = 0): <none>
[16:20:01.081] {
[16:20:01.081]     {
[16:20:01.081]         {
[16:20:01.081]             ...future.startTime <- base::Sys.time()
[16:20:01.081]             {
[16:20:01.081]                 {
[16:20:01.081]                   {
[16:20:01.081]                     {
[16:20:01.081]                       base::local({
[16:20:01.081]                         has_future <- base::requireNamespace("future", 
[16:20:01.081]                           quietly = TRUE)
[16:20:01.081]                         if (has_future) {
[16:20:01.081]                           ns <- base::getNamespace("future")
[16:20:01.081]                           version <- ns[[".package"]][["version"]]
[16:20:01.081]                           if (is.null(version)) 
[16:20:01.081]                             version <- utils::packageVersion("future")
[16:20:01.081]                         }
[16:20:01.081]                         else {
[16:20:01.081]                           version <- NULL
[16:20:01.081]                         }
[16:20:01.081]                         if (!has_future || version < "1.8.0") {
[16:20:01.081]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:01.081]                             "", base::R.version$version.string), 
[16:20:01.081]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:01.081]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:01.081]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:01.081]                               "release", "version")], collapse = " "), 
[16:20:01.081]                             hostname = base::Sys.info()[["nodename"]])
[16:20:01.081]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:01.081]                             info)
[16:20:01.081]                           info <- base::paste(info, collapse = "; ")
[16:20:01.081]                           if (!has_future) {
[16:20:01.081]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:01.081]                               info)
[16:20:01.081]                           }
[16:20:01.081]                           else {
[16:20:01.081]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:01.081]                               info, version)
[16:20:01.081]                           }
[16:20:01.081]                           base::stop(msg)
[16:20:01.081]                         }
[16:20:01.081]                       })
[16:20:01.081]                     }
[16:20:01.081]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:01.081]                     base::options(mc.cores = 1L)
[16:20:01.081]                   }
[16:20:01.081]                   ...future.strategy.old <- future::plan("list")
[16:20:01.081]                   options(future.plan = NULL)
[16:20:01.081]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:01.081]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:01.081]                 }
[16:20:01.081]                 ...future.workdir <- getwd()
[16:20:01.081]             }
[16:20:01.081]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:01.081]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:01.081]         }
[16:20:01.081]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:01.081]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:01.081]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:01.081]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:01.081]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:01.081]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:01.081]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:01.081]             base::names(...future.oldOptions))
[16:20:01.081]     }
[16:20:01.081]     if (FALSE) {
[16:20:01.081]     }
[16:20:01.081]     else {
[16:20:01.081]         if (TRUE) {
[16:20:01.081]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:01.081]                 open = "w")
[16:20:01.081]         }
[16:20:01.081]         else {
[16:20:01.081]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:01.081]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:01.081]         }
[16:20:01.081]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:01.081]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:01.081]             base::sink(type = "output", split = FALSE)
[16:20:01.081]             base::close(...future.stdout)
[16:20:01.081]         }, add = TRUE)
[16:20:01.081]     }
[16:20:01.081]     ...future.frame <- base::sys.nframe()
[16:20:01.081]     ...future.conditions <- base::list()
[16:20:01.081]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:01.081]     if (FALSE) {
[16:20:01.081]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:01.081]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:01.081]     }
[16:20:01.081]     ...future.result <- base::tryCatch({
[16:20:01.081]         base::withCallingHandlers({
[16:20:01.081]             ...future.value <- base::withVisible(base::local({
[16:20:01.081]                 ...future.makeSendCondition <- base::local({
[16:20:01.081]                   sendCondition <- NULL
[16:20:01.081]                   function(frame = 1L) {
[16:20:01.081]                     if (is.function(sendCondition)) 
[16:20:01.081]                       return(sendCondition)
[16:20:01.081]                     ns <- getNamespace("parallel")
[16:20:01.081]                     if (exists("sendData", mode = "function", 
[16:20:01.081]                       envir = ns)) {
[16:20:01.081]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:01.081]                         envir = ns)
[16:20:01.081]                       envir <- sys.frame(frame)
[16:20:01.081]                       master <- NULL
[16:20:01.081]                       while (!identical(envir, .GlobalEnv) && 
[16:20:01.081]                         !identical(envir, emptyenv())) {
[16:20:01.081]                         if (exists("master", mode = "list", envir = envir, 
[16:20:01.081]                           inherits = FALSE)) {
[16:20:01.081]                           master <- get("master", mode = "list", 
[16:20:01.081]                             envir = envir, inherits = FALSE)
[16:20:01.081]                           if (inherits(master, c("SOCKnode", 
[16:20:01.081]                             "SOCK0node"))) {
[16:20:01.081]                             sendCondition <<- function(cond) {
[16:20:01.081]                               data <- list(type = "VALUE", value = cond, 
[16:20:01.081]                                 success = TRUE)
[16:20:01.081]                               parallel_sendData(master, data)
[16:20:01.081]                             }
[16:20:01.081]                             return(sendCondition)
[16:20:01.081]                           }
[16:20:01.081]                         }
[16:20:01.081]                         frame <- frame + 1L
[16:20:01.081]                         envir <- sys.frame(frame)
[16:20:01.081]                       }
[16:20:01.081]                     }
[16:20:01.081]                     sendCondition <<- function(cond) NULL
[16:20:01.081]                   }
[16:20:01.081]                 })
[16:20:01.081]                 withCallingHandlers({
[16:20:01.081]                   slow_fcn(x)
[16:20:01.081]                 }, immediateCondition = function(cond) {
[16:20:01.081]                   sendCondition <- ...future.makeSendCondition()
[16:20:01.081]                   sendCondition(cond)
[16:20:01.081]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:01.081]                   {
[16:20:01.081]                     inherits <- base::inherits
[16:20:01.081]                     invokeRestart <- base::invokeRestart
[16:20:01.081]                     is.null <- base::is.null
[16:20:01.081]                     muffled <- FALSE
[16:20:01.081]                     if (inherits(cond, "message")) {
[16:20:01.081]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:01.081]                       if (muffled) 
[16:20:01.081]                         invokeRestart("muffleMessage")
[16:20:01.081]                     }
[16:20:01.081]                     else if (inherits(cond, "warning")) {
[16:20:01.081]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:01.081]                       if (muffled) 
[16:20:01.081]                         invokeRestart("muffleWarning")
[16:20:01.081]                     }
[16:20:01.081]                     else if (inherits(cond, "condition")) {
[16:20:01.081]                       if (!is.null(pattern)) {
[16:20:01.081]                         computeRestarts <- base::computeRestarts
[16:20:01.081]                         grepl <- base::grepl
[16:20:01.081]                         restarts <- computeRestarts(cond)
[16:20:01.081]                         for (restart in restarts) {
[16:20:01.081]                           name <- restart$name
[16:20:01.081]                           if (is.null(name)) 
[16:20:01.081]                             next
[16:20:01.081]                           if (!grepl(pattern, name)) 
[16:20:01.081]                             next
[16:20:01.081]                           invokeRestart(restart)
[16:20:01.081]                           muffled <- TRUE
[16:20:01.081]                           break
[16:20:01.081]                         }
[16:20:01.081]                       }
[16:20:01.081]                     }
[16:20:01.081]                     invisible(muffled)
[16:20:01.081]                   }
[16:20:01.081]                   muffleCondition(cond)
[16:20:01.081]                 })
[16:20:01.081]             }))
[16:20:01.081]             future::FutureResult(value = ...future.value$value, 
[16:20:01.081]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:01.081]                   ...future.rng), globalenv = if (FALSE) 
[16:20:01.081]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:01.081]                     ...future.globalenv.names))
[16:20:01.081]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:01.081]         }, condition = base::local({
[16:20:01.081]             c <- base::c
[16:20:01.081]             inherits <- base::inherits
[16:20:01.081]             invokeRestart <- base::invokeRestart
[16:20:01.081]             length <- base::length
[16:20:01.081]             list <- base::list
[16:20:01.081]             seq.int <- base::seq.int
[16:20:01.081]             signalCondition <- base::signalCondition
[16:20:01.081]             sys.calls <- base::sys.calls
[16:20:01.081]             `[[` <- base::`[[`
[16:20:01.081]             `+` <- base::`+`
[16:20:01.081]             `<<-` <- base::`<<-`
[16:20:01.081]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:01.081]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:01.081]                   3L)]
[16:20:01.081]             }
[16:20:01.081]             function(cond) {
[16:20:01.081]                 is_error <- inherits(cond, "error")
[16:20:01.081]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:01.081]                   NULL)
[16:20:01.081]                 if (is_error) {
[16:20:01.081]                   sessionInformation <- function() {
[16:20:01.081]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:01.081]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:01.081]                       search = base::search(), system = base::Sys.info())
[16:20:01.081]                   }
[16:20:01.081]                   ...future.conditions[[length(...future.conditions) + 
[16:20:01.081]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:01.081]                     cond$call), session = sessionInformation(), 
[16:20:01.081]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:01.081]                   signalCondition(cond)
[16:20:01.081]                 }
[16:20:01.081]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:01.081]                 "immediateCondition"))) {
[16:20:01.081]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:01.081]                   ...future.conditions[[length(...future.conditions) + 
[16:20:01.081]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:01.081]                   if (TRUE && !signal) {
[16:20:01.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:01.081]                     {
[16:20:01.081]                       inherits <- base::inherits
[16:20:01.081]                       invokeRestart <- base::invokeRestart
[16:20:01.081]                       is.null <- base::is.null
[16:20:01.081]                       muffled <- FALSE
[16:20:01.081]                       if (inherits(cond, "message")) {
[16:20:01.081]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:01.081]                         if (muffled) 
[16:20:01.081]                           invokeRestart("muffleMessage")
[16:20:01.081]                       }
[16:20:01.081]                       else if (inherits(cond, "warning")) {
[16:20:01.081]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:01.081]                         if (muffled) 
[16:20:01.081]                           invokeRestart("muffleWarning")
[16:20:01.081]                       }
[16:20:01.081]                       else if (inherits(cond, "condition")) {
[16:20:01.081]                         if (!is.null(pattern)) {
[16:20:01.081]                           computeRestarts <- base::computeRestarts
[16:20:01.081]                           grepl <- base::grepl
[16:20:01.081]                           restarts <- computeRestarts(cond)
[16:20:01.081]                           for (restart in restarts) {
[16:20:01.081]                             name <- restart$name
[16:20:01.081]                             if (is.null(name)) 
[16:20:01.081]                               next
[16:20:01.081]                             if (!grepl(pattern, name)) 
[16:20:01.081]                               next
[16:20:01.081]                             invokeRestart(restart)
[16:20:01.081]                             muffled <- TRUE
[16:20:01.081]                             break
[16:20:01.081]                           }
[16:20:01.081]                         }
[16:20:01.081]                       }
[16:20:01.081]                       invisible(muffled)
[16:20:01.081]                     }
[16:20:01.081]                     muffleCondition(cond, pattern = "^muffle")
[16:20:01.081]                   }
[16:20:01.081]                 }
[16:20:01.081]                 else {
[16:20:01.081]                   if (TRUE) {
[16:20:01.081]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:01.081]                     {
[16:20:01.081]                       inherits <- base::inherits
[16:20:01.081]                       invokeRestart <- base::invokeRestart
[16:20:01.081]                       is.null <- base::is.null
[16:20:01.081]                       muffled <- FALSE
[16:20:01.081]                       if (inherits(cond, "message")) {
[16:20:01.081]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:01.081]                         if (muffled) 
[16:20:01.081]                           invokeRestart("muffleMessage")
[16:20:01.081]                       }
[16:20:01.081]                       else if (inherits(cond, "warning")) {
[16:20:01.081]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:01.081]                         if (muffled) 
[16:20:01.081]                           invokeRestart("muffleWarning")
[16:20:01.081]                       }
[16:20:01.081]                       else if (inherits(cond, "condition")) {
[16:20:01.081]                         if (!is.null(pattern)) {
[16:20:01.081]                           computeRestarts <- base::computeRestarts
[16:20:01.081]                           grepl <- base::grepl
[16:20:01.081]                           restarts <- computeRestarts(cond)
[16:20:01.081]                           for (restart in restarts) {
[16:20:01.081]                             name <- restart$name
[16:20:01.081]                             if (is.null(name)) 
[16:20:01.081]                               next
[16:20:01.081]                             if (!grepl(pattern, name)) 
[16:20:01.081]                               next
[16:20:01.081]                             invokeRestart(restart)
[16:20:01.081]                             muffled <- TRUE
[16:20:01.081]                             break
[16:20:01.081]                           }
[16:20:01.081]                         }
[16:20:01.081]                       }
[16:20:01.081]                       invisible(muffled)
[16:20:01.081]                     }
[16:20:01.081]                     muffleCondition(cond, pattern = "^muffle")
[16:20:01.081]                   }
[16:20:01.081]                 }
[16:20:01.081]             }
[16:20:01.081]         }))
[16:20:01.081]     }, error = function(ex) {
[16:20:01.081]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:01.081]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:01.081]                 ...future.rng), started = ...future.startTime, 
[16:20:01.081]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:01.081]             version = "1.8"), class = "FutureResult")
[16:20:01.081]     }, finally = {
[16:20:01.081]         if (!identical(...future.workdir, getwd())) 
[16:20:01.081]             setwd(...future.workdir)
[16:20:01.081]         {
[16:20:01.081]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:01.081]                 ...future.oldOptions$nwarnings <- NULL
[16:20:01.081]             }
[16:20:01.081]             base::options(...future.oldOptions)
[16:20:01.081]             if (.Platform$OS.type == "windows") {
[16:20:01.081]                 old_names <- names(...future.oldEnvVars)
[16:20:01.081]                 envs <- base::Sys.getenv()
[16:20:01.081]                 names <- names(envs)
[16:20:01.081]                 common <- intersect(names, old_names)
[16:20:01.081]                 added <- setdiff(names, old_names)
[16:20:01.081]                 removed <- setdiff(old_names, names)
[16:20:01.081]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:01.081]                   envs[common]]
[16:20:01.081]                 NAMES <- toupper(changed)
[16:20:01.081]                 args <- list()
[16:20:01.081]                 for (kk in seq_along(NAMES)) {
[16:20:01.081]                   name <- changed[[kk]]
[16:20:01.081]                   NAME <- NAMES[[kk]]
[16:20:01.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:01.081]                     next
[16:20:01.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:01.081]                 }
[16:20:01.081]                 NAMES <- toupper(added)
[16:20:01.081]                 for (kk in seq_along(NAMES)) {
[16:20:01.081]                   name <- added[[kk]]
[16:20:01.081]                   NAME <- NAMES[[kk]]
[16:20:01.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:01.081]                     next
[16:20:01.081]                   args[[name]] <- ""
[16:20:01.081]                 }
[16:20:01.081]                 NAMES <- toupper(removed)
[16:20:01.081]                 for (kk in seq_along(NAMES)) {
[16:20:01.081]                   name <- removed[[kk]]
[16:20:01.081]                   NAME <- NAMES[[kk]]
[16:20:01.081]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:01.081]                     next
[16:20:01.081]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:01.081]                 }
[16:20:01.081]                 if (length(args) > 0) 
[16:20:01.081]                   base::do.call(base::Sys.setenv, args = args)
[16:20:01.081]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:01.081]             }
[16:20:01.081]             else {
[16:20:01.081]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:01.081]             }
[16:20:01.081]             {
[16:20:01.081]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:01.081]                   0L) {
[16:20:01.081]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:01.081]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:01.081]                   base::options(opts)
[16:20:01.081]                 }
[16:20:01.081]                 {
[16:20:01.081]                   {
[16:20:01.081]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:01.081]                     NULL
[16:20:01.081]                   }
[16:20:01.081]                   options(future.plan = NULL)
[16:20:01.081]                   if (is.na(NA_character_)) 
[16:20:01.081]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:01.081]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:01.081]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:01.081]                     .init = FALSE)
[16:20:01.081]                 }
[16:20:01.081]             }
[16:20:01.081]         }
[16:20:01.081]     })
[16:20:01.081]     if (TRUE) {
[16:20:01.081]         base::sink(type = "output", split = FALSE)
[16:20:01.081]         if (TRUE) {
[16:20:01.081]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:01.081]         }
[16:20:01.081]         else {
[16:20:01.081]             ...future.result["stdout"] <- base::list(NULL)
[16:20:01.081]         }
[16:20:01.081]         base::close(...future.stdout)
[16:20:01.081]         ...future.stdout <- NULL
[16:20:01.081]     }
[16:20:01.081]     ...future.result$conditions <- ...future.conditions
[16:20:01.081]     ...future.result$finished <- base::Sys.time()
[16:20:01.081]     ...future.result
[16:20:01.081] }
[16:20:01.084] Poll #1 (0): usedNodes() = 2, workers = 2
[16:20:01.117] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[16:20:01.156] Poll #3 (0.07 secs): usedNodes() = 2, workers = 2
[16:20:01.188] Poll #4 (0.1 secs): usedNodes() = 2, workers = 2
[16:20:01.219] Poll #5 (0.13 secs): usedNodes() = 2, workers = 2
[16:20:01.251] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[16:20:01.283] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[16:20:01.315] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[16:20:01.348] Poll #9 (0.26 secs): usedNodes() = 2, workers = 2
[16:20:01.380] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[16:20:01.413] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[16:20:01.445] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[16:20:01.478] Poll #13 (0.39 secs): usedNodes() = 2, workers = 2
[16:20:01.511] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[16:20:01.544] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[16:20:01.577] Poll #16 (0.49 secs): usedNodes() = 2, workers = 2
[16:20:01.611] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[16:20:01.644] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[16:20:01.677] Poll #19 (0.59 secs): usedNodes() = 2, workers = 2
[16:20:01.711] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[16:20:01.745] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[16:20:01.778] Poll #22 (0.69 secs): usedNodes() = 2, workers = 2
[16:20:01.812] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[16:20:01.825] receiveMessageFromWorker() for ClusterFuture ...
[16:20:01.826] - Validating connection of MultisessionFuture
[16:20:01.826] - received message: FutureResult
[16:20:01.827] - Received FutureResult
[16:20:01.827] - Erased future from FutureRegistry
[16:20:01.827] result() for ClusterFuture ...
[16:20:01.827] - result already collected: FutureResult
[16:20:01.827] result() for ClusterFuture ... done
[16:20:01.832] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:01.832] result() for ClusterFuture ...
[16:20:01.832] - result already collected: FutureResult
[16:20:01.832] result() for ClusterFuture ... done
[16:20:01.832] result() for ClusterFuture ...
[16:20:01.833] - result already collected: FutureResult
[16:20:01.833] result() for ClusterFuture ... done
[16:20:01.835] Exporting 2 global objects (1.20 KiB) to cluster node #1 ...
[16:20:01.835] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ...
[16:20:01.835] Exporting ‘slow_fcn’ (1.15 KiB) to cluster node #1 ... DONE
[16:20:01.835] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[16:20:01.836] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[16:20:01.836] Exporting 2 global objects (1.20 KiB) to cluster node #1 ... DONE
[16:20:01.837] MultisessionFuture started
[16:20:01.838] - Launch lazy future ... done
[16:20:01.838] run() for ‘MultisessionFuture’ ... done
[16:20:01.838] resolve() on list ...
[16:20:01.838]  recursive: 0
[16:20:01.839]  length: 3
[16:20:01.839] 
[16:20:01.839] Future #1
[16:20:01.839] result() for ClusterFuture ...
[16:20:01.839] - result already collected: FutureResult
[16:20:01.839] result() for ClusterFuture ... done
[16:20:01.839] result() for ClusterFuture ...
[16:20:01.839] - result already collected: FutureResult
[16:20:01.839] result() for ClusterFuture ... done
[16:20:01.839] signalConditionsASAP(MultisessionFuture, pos=1) ...
[16:20:01.839] - nx: 3
[16:20:01.840] - relay: TRUE
[16:20:01.840] - stdout: TRUE
[16:20:01.840] - signal: TRUE
[16:20:01.840] - resignal: FALSE
[16:20:01.840] - force: TRUE
[16:20:01.840] - relayed: [n=3] FALSE, FALSE, FALSE
[16:20:01.840] - queued futures: [n=3] FALSE, FALSE, FALSE
[16:20:01.840]  - until=1
[16:20:01.840]  - relaying element #1
[16:20:01.840] result() for ClusterFuture ...
[16:20:01.840] - result already collected: FutureResult
[16:20:01.840] result() for ClusterFuture ... done
[16:20:01.841] result() for ClusterFuture ...
[16:20:01.841] - result already collected: FutureResult
[16:20:01.841] result() for ClusterFuture ... done
[16:20:01.841] result() for ClusterFuture ...
[16:20:01.841] - result already collected: FutureResult
[16:20:01.841] result() for ClusterFuture ... done
[16:20:01.841] result() for ClusterFuture ...
[16:20:01.841] - result already collected: FutureResult
[16:20:01.841] result() for ClusterFuture ... done
[16:20:01.841] - relayed: [n=3] TRUE, FALSE, FALSE
[16:20:01.841] - queued futures: [n=3] TRUE, FALSE, FALSE
[16:20:01.842] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[16:20:01.842]  length: 2 (resolved future 1)
[16:20:02.123] receiveMessageFromWorker() for ClusterFuture ...
[16:20:02.123] - Validating connection of MultisessionFuture
[16:20:02.123] - received message: FutureResult
[16:20:02.124] - Received FutureResult
[16:20:02.124] - Erased future from FutureRegistry
[16:20:02.124] result() for ClusterFuture ...
[16:20:02.124] - result already collected: FutureResult
[16:20:02.124] result() for ClusterFuture ... done
[16:20:02.126] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:02.126] Future #2
[16:20:02.127] result() for ClusterFuture ...
[16:20:02.127] - result already collected: FutureResult
[16:20:02.127] result() for ClusterFuture ... done
[16:20:02.127] result() for ClusterFuture ...
[16:20:02.127] - result already collected: FutureResult
[16:20:02.127] result() for ClusterFuture ... done
[16:20:02.127] signalConditionsASAP(MultisessionFuture, pos=2) ...
[16:20:02.127] - nx: 3
[16:20:02.127] - relay: TRUE
[16:20:02.127] - stdout: TRUE
[16:20:02.128] - signal: TRUE
[16:20:02.128] - resignal: FALSE
[16:20:02.128] - force: TRUE
[16:20:02.128] - relayed: [n=3] TRUE, FALSE, FALSE
[16:20:02.128] - queued futures: [n=3] TRUE, FALSE, FALSE
[16:20:02.128]  - until=2
[16:20:02.128]  - relaying element #2
[16:20:02.128] result() for ClusterFuture ...
[16:20:02.128] - result already collected: FutureResult
[16:20:02.128] result() for ClusterFuture ... done
[16:20:02.128] result() for ClusterFuture ...
[16:20:02.129] - result already collected: FutureResult
[16:20:02.129] result() for ClusterFuture ... done
[16:20:02.129] result() for ClusterFuture ...
[16:20:02.129] - result already collected: FutureResult
[16:20:02.129] result() for ClusterFuture ... done
[16:20:02.129] result() for ClusterFuture ...
[16:20:02.129] - result already collected: FutureResult
[16:20:02.129] result() for ClusterFuture ... done
[16:20:02.129] - relayed: [n=3] TRUE, TRUE, FALSE
[16:20:02.129] - queued futures: [n=3] TRUE, TRUE, FALSE
[16:20:02.129] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[16:20:02.130]  length: 1 (resolved future 2)
[16:20:03.349] receiveMessageFromWorker() for ClusterFuture ...
[16:20:03.349] - Validating connection of MultisessionFuture
[16:20:03.349] - received message: FutureResult
[16:20:03.350] - Received FutureResult
[16:20:03.350] - Erased future from FutureRegistry
[16:20:03.350] result() for ClusterFuture ...
[16:20:03.350] - result already collected: FutureResult
[16:20:03.350] result() for ClusterFuture ... done
[16:20:03.352] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:03.352] Future #3
[16:20:03.352] result() for ClusterFuture ...
[16:20:03.353] - result already collected: FutureResult
[16:20:03.353] result() for ClusterFuture ... done
[16:20:03.353] result() for ClusterFuture ...
[16:20:03.353] - result already collected: FutureResult
[16:20:03.353] result() for ClusterFuture ... done
[16:20:03.353] signalConditionsASAP(MultisessionFuture, pos=3) ...
[16:20:03.353] - nx: 3
[16:20:03.353] - relay: TRUE
[16:20:03.353] - stdout: TRUE
[16:20:03.353] - signal: TRUE
[16:20:03.353] - resignal: FALSE
[16:20:03.354] - force: TRUE
[16:20:03.354] - relayed: [n=3] TRUE, TRUE, FALSE
[16:20:03.354] - queued futures: [n=3] TRUE, TRUE, FALSE
[16:20:03.354]  - until=3
[16:20:03.354]  - relaying element #3
[16:20:03.354] result() for ClusterFuture ...
[16:20:03.354] - result already collected: FutureResult
[16:20:03.354] result() for ClusterFuture ... done
[16:20:03.354] result() for ClusterFuture ...
[16:20:03.354] - result already collected: FutureResult
[16:20:03.354] result() for ClusterFuture ... done
[16:20:03.355] result() for ClusterFuture ...
[16:20:03.355] - result already collected: FutureResult
[16:20:03.355] result() for ClusterFuture ... done
[16:20:03.355] result() for ClusterFuture ...
[16:20:03.355] - result already collected: FutureResult
[16:20:03.355] result() for ClusterFuture ... done
[16:20:03.355] - relayed: [n=3] TRUE, TRUE, TRUE
[16:20:03.355] - queued futures: [n=3] TRUE, TRUE, TRUE
[16:20:03.355] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[16:20:03.355]  length: 0 (resolved future 3)
[16:20:03.355] Relaying remaining futures
[16:20:03.356] signalConditionsASAP(NULL, pos=0) ...
[16:20:03.356] - nx: 3
[16:20:03.356] - relay: TRUE
[16:20:03.356] - stdout: TRUE
[16:20:03.356] - signal: TRUE
[16:20:03.356] - resignal: FALSE
[16:20:03.356] - force: TRUE
[16:20:03.356] - relayed: [n=3] TRUE, TRUE, TRUE
[16:20:03.356] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[16:20:03.356] - relayed: [n=3] TRUE, TRUE, TRUE
[16:20:03.356] - queued futures: [n=3] TRUE, TRUE, TRUE
[16:20:03.356] signalConditionsASAP(NULL, pos=0) ... done
[16:20:03.357] resolve() on list ... DONE
[16:20:03.357] result() for ClusterFuture ...
[16:20:03.357] - result already collected: FutureResult
[16:20:03.357] result() for ClusterFuture ... done
[16:20:03.357] result() for ClusterFuture ...
[16:20:03.357] - result already collected: FutureResult
[16:20:03.357] result() for ClusterFuture ... done
[16:20:03.357] result() for ClusterFuture ...
[16:20:03.357] - result already collected: FutureResult
[16:20:03.357] result() for ClusterFuture ... done
[16:20:03.358] result() for ClusterFuture ...
[16:20:03.358] - result already collected: FutureResult
[16:20:03.358] result() for ClusterFuture ... done
[16:20:03.358] result() for ClusterFuture ...
[16:20:03.358] - result already collected: FutureResult
[16:20:03.358] result() for ClusterFuture ... done
[16:20:03.358] result() for ClusterFuture ...
[16:20:03.358] - result already collected: FutureResult
[16:20:03.358] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-06 16:20:00 0.00000000 secs
6         launch   overhead   <NA> 2025-01-06 16:20:00 0.02630353 secs
2      getWorker   overhead launch 2025-01-06 16:20:00 0.02953863 secs
3    eraseWorker   overhead launch 2025-01-06 16:20:00 0.03123140 secs
4 attachPackages   overhead launch 2025-01-06 16:20:00 0.03227544 secs
5  exportGlobals   overhead launch 2025-01-06 16:20:00 0.03296018 secs
9       evaluate evaluation   <NA> 2025-01-06 16:20:00 0.03598309 secs
7  receiveResult   overhead gather 2025-01-06 16:20:01 0.88660312 secs
8         gather   overhead   <NA> 2025-01-06 16:20:01 0.88765168 secs
           duration future_label                          future_uuid
1 1.041436e-02 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
6 9.515762e-03 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
2 2.517700e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
3 3.838539e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
4 5.054474e-05 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
5 1.582861e-03 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
9 8.391426e-01 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
7 2.021790e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
8 2.791882e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
                          session_uuid
1 8dcbd4f4-a265-bf13-b6ce-bd621be51665
6 8dcbd4f4-a265-bf13-b6ce-bd621be51665
2 8dcbd4f4-a265-bf13-b6ce-bd621be51665
3 8dcbd4f4-a265-bf13-b6ce-bd621be51665
4 8dcbd4f4-a265-bf13-b6ce-bd621be51665
5 8dcbd4f4-a265-bf13-b6ce-bd621be51665
9 0e69215b-3dcb-8951-d95c-5a24723cc6bc
7 8dcbd4f4-a265-bf13-b6ce-bd621be51665
8 8dcbd4f4-a265-bf13-b6ce-bd621be51665

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-06 16:20:00 0.00000000 secs
6         launch   overhead   <NA> 2025-01-06 16:20:00 0.02036572 secs
2      getWorker   overhead launch 2025-01-06 16:20:01 0.02305698 secs
3    eraseWorker   overhead launch 2025-01-06 16:20:01 0.02368999 secs
4 attachPackages   overhead launch 2025-01-06 16:20:01 0.07472277 secs
5  exportGlobals   overhead launch 2025-01-06 16:20:01 0.07531595 secs
9       evaluate evaluation   <NA> 2025-01-06 16:20:01 0.07827163 secs
7  receiveResult   overhead gather 2025-01-06 16:20:02 1.14594293 secs
8         gather   overhead   <NA> 2025-01-06 16:20:02 1.14702559 secs
           duration future_label                          future_uuid
1 6.870747e-03 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
6 5.760407e-02 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
2 1.227856e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
3 5.035758e-02 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
4 4.553795e-05 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
5 1.468182e-03 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
9 1.047293e+00 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
7 2.033710e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
8 3.006458e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
                          session_uuid
1 8dcbd4f4-a265-bf13-b6ce-bd621be51665
6 8dcbd4f4-a265-bf13-b6ce-bd621be51665
2 8dcbd4f4-a265-bf13-b6ce-bd621be51665
3 8dcbd4f4-a265-bf13-b6ce-bd621be51665
4 8dcbd4f4-a265-bf13-b6ce-bd621be51665
5 8dcbd4f4-a265-bf13-b6ce-bd621be51665
9 e2945a29-fbb5-f7cc-498b-9500dbd412f7
7 8dcbd4f4-a265-bf13-b6ce-bd621be51665
8 8dcbd4f4-a265-bf13-b6ce-bd621be51665

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-01-06 16:20:01 0.00000000 secs
6         launch   overhead   <NA> 2025-01-06 16:20:01 0.02310896 secs
2      getWorker   overhead launch 2025-01-06 16:20:01 0.02781796 secs
3    eraseWorker   overhead launch 2025-01-06 16:20:01 0.77687526 secs
4 attachPackages   overhead launch 2025-01-06 16:20:01 0.77776337 secs
5  exportGlobals   overhead launch 2025-01-06 16:20:01 0.77826118 secs
9       evaluate evaluation   <NA> 2025-01-06 16:20:01 0.78086805 secs
7  receiveResult   overhead gather 2025-01-06 16:20:03 2.29253912 secs
8         gather   overhead   <NA> 2025-01-06 16:20:03 2.29368019 secs
           duration future_label                          future_uuid
1 5.103827e-03 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
6 7.574921e-01 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
2 7.485714e-01 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
3 3.938675e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
4 3.552437e-05 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
5 1.310349e-03 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
9 1.503054e+00 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
7 2.379417e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
8 2.827644e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
                          session_uuid
1 8dcbd4f4-a265-bf13-b6ce-bd621be51665
6 8dcbd4f4-a265-bf13-b6ce-bd621be51665
2 8dcbd4f4-a265-bf13-b6ce-bd621be51665
3 8dcbd4f4-a265-bf13-b6ce-bd621be51665
4 8dcbd4f4-a265-bf13-b6ce-bd621be51665
5 8dcbd4f4-a265-bf13-b6ce-bd621be51665
9 0e69215b-3dcb-8951-d95c-5a24723cc6bc
7 8dcbd4f4-a265-bf13-b6ce-bd621be51665
8 8dcbd4f4-a265-bf13-b6ce-bd621be51665

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[16:20:03.365] plan(): Setting new future strategy stack:
[16:20:03.365] List of future strategies:
[16:20:03.365] 1. sequential:
[16:20:03.365]    - args: function (..., envir = parent.frame())
[16:20:03.365]    - tweaked: FALSE
[16:20:03.365]    - call: plan(sequential)
[16:20:03.366] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2025-01-06 16:20:00 0.00000000 secs
6          launch   overhead   <NA> 2025-01-06 16:20:00 0.02630353 secs
2       getWorker   overhead launch 2025-01-06 16:20:00 0.02953863 secs
3     eraseWorker   overhead launch 2025-01-06 16:20:00 0.03123140 secs
4  attachPackages   overhead launch 2025-01-06 16:20:00 0.03227544 secs
5   exportGlobals   overhead launch 2025-01-06 16:20:00 0.03296018 secs
9        evaluate evaluation   <NA> 2025-01-06 16:20:00 0.03598309 secs
7   receiveResult   overhead gather 2025-01-06 16:20:01 0.88660312 secs
8          gather   overhead   <NA> 2025-01-06 16:20:01 0.88765168 secs
11         create   overhead   <NA> 2025-01-06 16:20:00 0.00000000 secs
61         launch   overhead   <NA> 2025-01-06 16:20:00 0.02036572 secs
21      getWorker   overhead launch 2025-01-06 16:20:01 0.02305698 secs
31    eraseWorker   overhead launch 2025-01-06 16:20:01 0.02368999 secs
41 attachPackages   overhead launch 2025-01-06 16:20:01 0.07472277 secs
51  exportGlobals   overhead launch 2025-01-06 16:20:01 0.07531595 secs
91       evaluate evaluation   <NA> 2025-01-06 16:20:01 0.07827163 secs
71  receiveResult   overhead gather 2025-01-06 16:20:02 1.14594293 secs
81         gather   overhead   <NA> 2025-01-06 16:20:02 1.14702559 secs
12         create   overhead   <NA> 2025-01-06 16:20:01 0.00000000 secs
62         launch   overhead   <NA> 2025-01-06 16:20:01 0.02310896 secs
22      getWorker   overhead launch 2025-01-06 16:20:01 0.02781796 secs
32    eraseWorker   overhead launch 2025-01-06 16:20:01 0.77687526 secs
42 attachPackages   overhead launch 2025-01-06 16:20:01 0.77776337 secs
52  exportGlobals   overhead launch 2025-01-06 16:20:01 0.77826118 secs
92       evaluate evaluation   <NA> 2025-01-06 16:20:01 0.78086805 secs
72  receiveResult   overhead gather 2025-01-06 16:20:03 2.29253912 secs
82         gather   overhead   <NA> 2025-01-06 16:20:03 2.29368019 secs
            duration future_label                          future_uuid
1  1.041436e-02 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
6  9.515762e-03 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
2  2.517700e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
3  3.838539e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
4  5.054474e-05 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
5  1.582861e-03 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
9  8.391426e-01 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
7  2.021790e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
8  2.791882e-04 secs         <NA> 18b91697-08e1-7662-8726-2189e97ea507
11 6.870747e-03 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
61 5.760407e-02 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
21 1.227856e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
31 5.035758e-02 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
41 4.553795e-05 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
51 1.468182e-03 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
91 1.047293e+00 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
71 2.033710e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
81 3.006458e-04 secs         <NA> d0f179b9-2fa9-68b9-42f0-c533bb4261ed
12 5.103827e-03 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
62 7.574921e-01 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
22 7.485714e-01 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
32 3.938675e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
42 3.552437e-05 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
52 1.310349e-03 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
92 1.503054e+00 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
72 2.379417e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
82 2.827644e-04 secs         <NA> 9bb481c7-ffd7-7439-e0b3-3ffae8d7dc29
                           session_uuid
1  8dcbd4f4-a265-bf13-b6ce-bd621be51665
6  8dcbd4f4-a265-bf13-b6ce-bd621be51665
2  8dcbd4f4-a265-bf13-b6ce-bd621be51665
3  8dcbd4f4-a265-bf13-b6ce-bd621be51665
4  8dcbd4f4-a265-bf13-b6ce-bd621be51665
5  8dcbd4f4-a265-bf13-b6ce-bd621be51665
9  0e69215b-3dcb-8951-d95c-5a24723cc6bc
7  8dcbd4f4-a265-bf13-b6ce-bd621be51665
8  8dcbd4f4-a265-bf13-b6ce-bd621be51665
11 8dcbd4f4-a265-bf13-b6ce-bd621be51665
61 8dcbd4f4-a265-bf13-b6ce-bd621be51665
21 8dcbd4f4-a265-bf13-b6ce-bd621be51665
31 8dcbd4f4-a265-bf13-b6ce-bd621be51665
41 8dcbd4f4-a265-bf13-b6ce-bd621be51665
51 8dcbd4f4-a265-bf13-b6ce-bd621be51665
91 e2945a29-fbb5-f7cc-498b-9500dbd412f7
71 8dcbd4f4-a265-bf13-b6ce-bd621be51665
81 8dcbd4f4-a265-bf13-b6ce-bd621be51665
12 8dcbd4f4-a265-bf13-b6ce-bd621be51665
62 8dcbd4f4-a265-bf13-b6ce-bd621be51665
22 8dcbd4f4-a265-bf13-b6ce-bd621be51665
32 8dcbd4f4-a265-bf13-b6ce-bd621be51665
42 8dcbd4f4-a265-bf13-b6ce-bd621be51665
52 8dcbd4f4-a265-bf13-b6ce-bd621be51665
92 0e69215b-3dcb-8951-d95c-5a24723cc6bc
72 8dcbd4f4-a265-bf13-b6ce-bd621be51665
82 8dcbd4f4-a265-bf13-b6ce-bd621be51665
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8391426 secs      0.9450539 0.02020931 secs     0.02276001
2    mean 1.1298298 secs      0.7829330 0.28262115 secs     0.19584669
3  median 1.0472929 secs      0.9128118 0.06477547 secs     0.05645776
4     max 1.5030539 secs      0.6552215 0.76287866 secs     0.33255927
5   total 3.3894894 secs      0.7829330 0.84786344 secs     0.19584669
        duration       walltime
1 0.8879309 secs 0.8879309 secs
2 1.4430734 secs 1.4430734 secs
3 1.1473262 secs 1.1473262 secs
4 2.2939630 secs 2.2939630 secs
5 4.3292201 secs 4.3292201 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
