
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:20:29.248] plan(): Setting new future strategy stack:
[16:20:29.249] List of future strategies:
[16:20:29.249] 1. sequential:
[16:20:29.249]    - args: function (..., envir = parent.frame())
[16:20:29.249]    - tweaked: FALSE
[16:20:29.249]    - call: future::plan("sequential")
[16:20:29.262] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[16:20:29.285] plan(): Setting new future strategy stack:
[16:20:29.285] List of future strategies:
[16:20:29.285] 1. sequential:
[16:20:29.285]    - args: function (..., envir = parent.frame())
[16:20:29.285]    - tweaked: FALSE
[16:20:29.285]    - call: plan(strategy)
[16:20:29.297] plan(): nbrOfWorkers() = 1
[16:20:29.298] getGlobalsAndPackages() ...
[16:20:29.298] Searching for globals...
[16:20:29.300] 
[16:20:29.300] Searching for globals ... DONE
[16:20:29.301] - globals: [0] <none>
[16:20:29.301] getGlobalsAndPackages() ... DONE
[16:20:29.302] Packages needed by the future expression (n = 0): <none>
[16:20:29.302] Packages needed by future strategies (n = 0): <none>
[16:20:29.303] {
[16:20:29.303]     {
[16:20:29.303]         {
[16:20:29.303]             ...future.startTime <- base::Sys.time()
[16:20:29.303]             {
[16:20:29.303]                 {
[16:20:29.303]                   {
[16:20:29.303]                     base::local({
[16:20:29.303]                       has_future <- base::requireNamespace("future", 
[16:20:29.303]                         quietly = TRUE)
[16:20:29.303]                       if (has_future) {
[16:20:29.303]                         ns <- base::getNamespace("future")
[16:20:29.303]                         version <- ns[[".package"]][["version"]]
[16:20:29.303]                         if (is.null(version)) 
[16:20:29.303]                           version <- utils::packageVersion("future")
[16:20:29.303]                       }
[16:20:29.303]                       else {
[16:20:29.303]                         version <- NULL
[16:20:29.303]                       }
[16:20:29.303]                       if (!has_future || version < "1.8.0") {
[16:20:29.303]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.303]                           "", base::R.version$version.string), 
[16:20:29.303]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.303]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.303]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.303]                             "release", "version")], collapse = " "), 
[16:20:29.303]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.303]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.303]                           info)
[16:20:29.303]                         info <- base::paste(info, collapse = "; ")
[16:20:29.303]                         if (!has_future) {
[16:20:29.303]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.303]                             info)
[16:20:29.303]                         }
[16:20:29.303]                         else {
[16:20:29.303]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.303]                             info, version)
[16:20:29.303]                         }
[16:20:29.303]                         base::stop(msg)
[16:20:29.303]                       }
[16:20:29.303]                     })
[16:20:29.303]                   }
[16:20:29.303]                   ...future.strategy.old <- future::plan("list")
[16:20:29.303]                   options(future.plan = NULL)
[16:20:29.303]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.303]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.303]                 }
[16:20:29.303]                 ...future.workdir <- getwd()
[16:20:29.303]             }
[16:20:29.303]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.303]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.303]         }
[16:20:29.303]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.303]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.303]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.303]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.303]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.303]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.303]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.303]             base::names(...future.oldOptions))
[16:20:29.303]     }
[16:20:29.303]     if (FALSE) {
[16:20:29.303]     }
[16:20:29.303]     else {
[16:20:29.303]         if (TRUE) {
[16:20:29.303]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.303]                 open = "w")
[16:20:29.303]         }
[16:20:29.303]         else {
[16:20:29.303]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.303]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.303]         }
[16:20:29.303]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.303]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.303]             base::sink(type = "output", split = FALSE)
[16:20:29.303]             base::close(...future.stdout)
[16:20:29.303]         }, add = TRUE)
[16:20:29.303]     }
[16:20:29.303]     ...future.frame <- base::sys.nframe()
[16:20:29.303]     ...future.conditions <- base::list()
[16:20:29.303]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.303]     if (FALSE) {
[16:20:29.303]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.303]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.303]     }
[16:20:29.303]     ...future.result <- base::tryCatch({
[16:20:29.303]         base::withCallingHandlers({
[16:20:29.303]             ...future.value <- base::withVisible(base::local(42))
[16:20:29.303]             future::FutureResult(value = ...future.value$value, 
[16:20:29.303]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.303]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.303]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.303]                     ...future.globalenv.names))
[16:20:29.303]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.303]         }, condition = base::local({
[16:20:29.303]             c <- base::c
[16:20:29.303]             inherits <- base::inherits
[16:20:29.303]             invokeRestart <- base::invokeRestart
[16:20:29.303]             length <- base::length
[16:20:29.303]             list <- base::list
[16:20:29.303]             seq.int <- base::seq.int
[16:20:29.303]             signalCondition <- base::signalCondition
[16:20:29.303]             sys.calls <- base::sys.calls
[16:20:29.303]             `[[` <- base::`[[`
[16:20:29.303]             `+` <- base::`+`
[16:20:29.303]             `<<-` <- base::`<<-`
[16:20:29.303]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.303]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.303]                   3L)]
[16:20:29.303]             }
[16:20:29.303]             function(cond) {
[16:20:29.303]                 is_error <- inherits(cond, "error")
[16:20:29.303]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.303]                   NULL)
[16:20:29.303]                 if (is_error) {
[16:20:29.303]                   sessionInformation <- function() {
[16:20:29.303]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.303]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.303]                       search = base::search(), system = base::Sys.info())
[16:20:29.303]                   }
[16:20:29.303]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.303]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.303]                     cond$call), session = sessionInformation(), 
[16:20:29.303]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.303]                   signalCondition(cond)
[16:20:29.303]                 }
[16:20:29.303]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.303]                 "immediateCondition"))) {
[16:20:29.303]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.303]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.303]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.303]                   if (TRUE && !signal) {
[16:20:29.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.303]                     {
[16:20:29.303]                       inherits <- base::inherits
[16:20:29.303]                       invokeRestart <- base::invokeRestart
[16:20:29.303]                       is.null <- base::is.null
[16:20:29.303]                       muffled <- FALSE
[16:20:29.303]                       if (inherits(cond, "message")) {
[16:20:29.303]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.303]                         if (muffled) 
[16:20:29.303]                           invokeRestart("muffleMessage")
[16:20:29.303]                       }
[16:20:29.303]                       else if (inherits(cond, "warning")) {
[16:20:29.303]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.303]                         if (muffled) 
[16:20:29.303]                           invokeRestart("muffleWarning")
[16:20:29.303]                       }
[16:20:29.303]                       else if (inherits(cond, "condition")) {
[16:20:29.303]                         if (!is.null(pattern)) {
[16:20:29.303]                           computeRestarts <- base::computeRestarts
[16:20:29.303]                           grepl <- base::grepl
[16:20:29.303]                           restarts <- computeRestarts(cond)
[16:20:29.303]                           for (restart in restarts) {
[16:20:29.303]                             name <- restart$name
[16:20:29.303]                             if (is.null(name)) 
[16:20:29.303]                               next
[16:20:29.303]                             if (!grepl(pattern, name)) 
[16:20:29.303]                               next
[16:20:29.303]                             invokeRestart(restart)
[16:20:29.303]                             muffled <- TRUE
[16:20:29.303]                             break
[16:20:29.303]                           }
[16:20:29.303]                         }
[16:20:29.303]                       }
[16:20:29.303]                       invisible(muffled)
[16:20:29.303]                     }
[16:20:29.303]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.303]                   }
[16:20:29.303]                 }
[16:20:29.303]                 else {
[16:20:29.303]                   if (TRUE) {
[16:20:29.303]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.303]                     {
[16:20:29.303]                       inherits <- base::inherits
[16:20:29.303]                       invokeRestart <- base::invokeRestart
[16:20:29.303]                       is.null <- base::is.null
[16:20:29.303]                       muffled <- FALSE
[16:20:29.303]                       if (inherits(cond, "message")) {
[16:20:29.303]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.303]                         if (muffled) 
[16:20:29.303]                           invokeRestart("muffleMessage")
[16:20:29.303]                       }
[16:20:29.303]                       else if (inherits(cond, "warning")) {
[16:20:29.303]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.303]                         if (muffled) 
[16:20:29.303]                           invokeRestart("muffleWarning")
[16:20:29.303]                       }
[16:20:29.303]                       else if (inherits(cond, "condition")) {
[16:20:29.303]                         if (!is.null(pattern)) {
[16:20:29.303]                           computeRestarts <- base::computeRestarts
[16:20:29.303]                           grepl <- base::grepl
[16:20:29.303]                           restarts <- computeRestarts(cond)
[16:20:29.303]                           for (restart in restarts) {
[16:20:29.303]                             name <- restart$name
[16:20:29.303]                             if (is.null(name)) 
[16:20:29.303]                               next
[16:20:29.303]                             if (!grepl(pattern, name)) 
[16:20:29.303]                               next
[16:20:29.303]                             invokeRestart(restart)
[16:20:29.303]                             muffled <- TRUE
[16:20:29.303]                             break
[16:20:29.303]                           }
[16:20:29.303]                         }
[16:20:29.303]                       }
[16:20:29.303]                       invisible(muffled)
[16:20:29.303]                     }
[16:20:29.303]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.303]                   }
[16:20:29.303]                 }
[16:20:29.303]             }
[16:20:29.303]         }))
[16:20:29.303]     }, error = function(ex) {
[16:20:29.303]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.303]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.303]                 ...future.rng), started = ...future.startTime, 
[16:20:29.303]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.303]             version = "1.8"), class = "FutureResult")
[16:20:29.303]     }, finally = {
[16:20:29.303]         if (!identical(...future.workdir, getwd())) 
[16:20:29.303]             setwd(...future.workdir)
[16:20:29.303]         {
[16:20:29.303]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.303]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.303]             }
[16:20:29.303]             base::options(...future.oldOptions)
[16:20:29.303]             if (.Platform$OS.type == "windows") {
[16:20:29.303]                 old_names <- names(...future.oldEnvVars)
[16:20:29.303]                 envs <- base::Sys.getenv()
[16:20:29.303]                 names <- names(envs)
[16:20:29.303]                 common <- intersect(names, old_names)
[16:20:29.303]                 added <- setdiff(names, old_names)
[16:20:29.303]                 removed <- setdiff(old_names, names)
[16:20:29.303]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.303]                   envs[common]]
[16:20:29.303]                 NAMES <- toupper(changed)
[16:20:29.303]                 args <- list()
[16:20:29.303]                 for (kk in seq_along(NAMES)) {
[16:20:29.303]                   name <- changed[[kk]]
[16:20:29.303]                   NAME <- NAMES[[kk]]
[16:20:29.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.303]                     next
[16:20:29.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.303]                 }
[16:20:29.303]                 NAMES <- toupper(added)
[16:20:29.303]                 for (kk in seq_along(NAMES)) {
[16:20:29.303]                   name <- added[[kk]]
[16:20:29.303]                   NAME <- NAMES[[kk]]
[16:20:29.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.303]                     next
[16:20:29.303]                   args[[name]] <- ""
[16:20:29.303]                 }
[16:20:29.303]                 NAMES <- toupper(removed)
[16:20:29.303]                 for (kk in seq_along(NAMES)) {
[16:20:29.303]                   name <- removed[[kk]]
[16:20:29.303]                   NAME <- NAMES[[kk]]
[16:20:29.303]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.303]                     next
[16:20:29.303]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.303]                 }
[16:20:29.303]                 if (length(args) > 0) 
[16:20:29.303]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.303]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.303]             }
[16:20:29.303]             else {
[16:20:29.303]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.303]             }
[16:20:29.303]             {
[16:20:29.303]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.303]                   0L) {
[16:20:29.303]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.303]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.303]                   base::options(opts)
[16:20:29.303]                 }
[16:20:29.303]                 {
[16:20:29.303]                   {
[16:20:29.303]                     NULL
[16:20:29.303]                     RNGkind("Mersenne-Twister")
[16:20:29.303]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.303]                       inherits = FALSE)
[16:20:29.303]                   }
[16:20:29.303]                   options(future.plan = NULL)
[16:20:29.303]                   if (is.na(NA_character_)) 
[16:20:29.303]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.303]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.303]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.303]                     .init = FALSE)
[16:20:29.303]                 }
[16:20:29.303]             }
[16:20:29.303]         }
[16:20:29.303]     })
[16:20:29.303]     if (TRUE) {
[16:20:29.303]         base::sink(type = "output", split = FALSE)
[16:20:29.303]         if (TRUE) {
[16:20:29.303]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.303]         }
[16:20:29.303]         else {
[16:20:29.303]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.303]         }
[16:20:29.303]         base::close(...future.stdout)
[16:20:29.303]         ...future.stdout <- NULL
[16:20:29.303]     }
[16:20:29.303]     ...future.result$conditions <- ...future.conditions
[16:20:29.303]     ...future.result$finished <- base::Sys.time()
[16:20:29.303]     ...future.result
[16:20:29.303] }
[16:20:29.305] plan(): Setting new future strategy stack:
[16:20:29.305] List of future strategies:
[16:20:29.305] 1. sequential:
[16:20:29.305]    - args: function (..., envir = parent.frame())
[16:20:29.305]    - tweaked: FALSE
[16:20:29.305]    - call: NULL
[16:20:29.305] plan(): nbrOfWorkers() = 1
[16:20:29.306] plan(): Setting new future strategy stack:
[16:20:29.306] List of future strategies:
[16:20:29.306] 1. sequential:
[16:20:29.306]    - args: function (..., envir = parent.frame())
[16:20:29.306]    - tweaked: FALSE
[16:20:29.306]    - call: plan(strategy)
[16:20:29.307] plan(): nbrOfWorkers() = 1
[16:20:29.307] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.309] getGlobalsAndPackages() ...
[16:20:29.309] Searching for globals...
[16:20:29.309] 
[16:20:29.309] Searching for globals ... DONE
[16:20:29.309] - globals: [0] <none>
[16:20:29.309] getGlobalsAndPackages() ... DONE
[16:20:29.310] run() for ‘Future’ ...
[16:20:29.310] - state: ‘created’
[16:20:29.310] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:29.310] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.310] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:29.310]   - Field: ‘label’
[16:20:29.310]   - Field: ‘local’
[16:20:29.310]   - Field: ‘owner’
[16:20:29.311]   - Field: ‘envir’
[16:20:29.311]   - Field: ‘packages’
[16:20:29.311]   - Field: ‘gc’
[16:20:29.311]   - Field: ‘conditions’
[16:20:29.311]   - Field: ‘expr’
[16:20:29.311]   - Field: ‘uuid’
[16:20:29.311]   - Field: ‘seed’
[16:20:29.311]   - Field: ‘version’
[16:20:29.311]   - Field: ‘result’
[16:20:29.311]   - Field: ‘asynchronous’
[16:20:29.311]   - Field: ‘calls’
[16:20:29.312]   - Field: ‘globals’
[16:20:29.312]   - Field: ‘stdout’
[16:20:29.312]   - Field: ‘earlySignal’
[16:20:29.312]   - Field: ‘lazy’
[16:20:29.312]   - Field: ‘state’
[16:20:29.312] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:29.312] - Launch lazy future ...
[16:20:29.312] Packages needed by the future expression (n = 0): <none>
[16:20:29.312] Packages needed by future strategies (n = 0): <none>
[16:20:29.313] {
[16:20:29.313]     {
[16:20:29.313]         {
[16:20:29.313]             ...future.startTime <- base::Sys.time()
[16:20:29.313]             {
[16:20:29.313]                 {
[16:20:29.313]                   {
[16:20:29.313]                     base::local({
[16:20:29.313]                       has_future <- base::requireNamespace("future", 
[16:20:29.313]                         quietly = TRUE)
[16:20:29.313]                       if (has_future) {
[16:20:29.313]                         ns <- base::getNamespace("future")
[16:20:29.313]                         version <- ns[[".package"]][["version"]]
[16:20:29.313]                         if (is.null(version)) 
[16:20:29.313]                           version <- utils::packageVersion("future")
[16:20:29.313]                       }
[16:20:29.313]                       else {
[16:20:29.313]                         version <- NULL
[16:20:29.313]                       }
[16:20:29.313]                       if (!has_future || version < "1.8.0") {
[16:20:29.313]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.313]                           "", base::R.version$version.string), 
[16:20:29.313]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.313]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.313]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.313]                             "release", "version")], collapse = " "), 
[16:20:29.313]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.313]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.313]                           info)
[16:20:29.313]                         info <- base::paste(info, collapse = "; ")
[16:20:29.313]                         if (!has_future) {
[16:20:29.313]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.313]                             info)
[16:20:29.313]                         }
[16:20:29.313]                         else {
[16:20:29.313]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.313]                             info, version)
[16:20:29.313]                         }
[16:20:29.313]                         base::stop(msg)
[16:20:29.313]                       }
[16:20:29.313]                     })
[16:20:29.313]                   }
[16:20:29.313]                   ...future.strategy.old <- future::plan("list")
[16:20:29.313]                   options(future.plan = NULL)
[16:20:29.313]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.313]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.313]                 }
[16:20:29.313]                 ...future.workdir <- getwd()
[16:20:29.313]             }
[16:20:29.313]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.313]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.313]         }
[16:20:29.313]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.313]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.313]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.313]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.313]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.313]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.313]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.313]             base::names(...future.oldOptions))
[16:20:29.313]     }
[16:20:29.313]     if (FALSE) {
[16:20:29.313]     }
[16:20:29.313]     else {
[16:20:29.313]         if (TRUE) {
[16:20:29.313]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.313]                 open = "w")
[16:20:29.313]         }
[16:20:29.313]         else {
[16:20:29.313]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.313]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.313]         }
[16:20:29.313]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.313]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.313]             base::sink(type = "output", split = FALSE)
[16:20:29.313]             base::close(...future.stdout)
[16:20:29.313]         }, add = TRUE)
[16:20:29.313]     }
[16:20:29.313]     ...future.frame <- base::sys.nframe()
[16:20:29.313]     ...future.conditions <- base::list()
[16:20:29.313]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.313]     if (FALSE) {
[16:20:29.313]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.313]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.313]     }
[16:20:29.313]     ...future.result <- base::tryCatch({
[16:20:29.313]         base::withCallingHandlers({
[16:20:29.313]             ...future.value <- base::withVisible(base::local(42))
[16:20:29.313]             future::FutureResult(value = ...future.value$value, 
[16:20:29.313]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.313]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.313]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.313]                     ...future.globalenv.names))
[16:20:29.313]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.313]         }, condition = base::local({
[16:20:29.313]             c <- base::c
[16:20:29.313]             inherits <- base::inherits
[16:20:29.313]             invokeRestart <- base::invokeRestart
[16:20:29.313]             length <- base::length
[16:20:29.313]             list <- base::list
[16:20:29.313]             seq.int <- base::seq.int
[16:20:29.313]             signalCondition <- base::signalCondition
[16:20:29.313]             sys.calls <- base::sys.calls
[16:20:29.313]             `[[` <- base::`[[`
[16:20:29.313]             `+` <- base::`+`
[16:20:29.313]             `<<-` <- base::`<<-`
[16:20:29.313]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.313]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.313]                   3L)]
[16:20:29.313]             }
[16:20:29.313]             function(cond) {
[16:20:29.313]                 is_error <- inherits(cond, "error")
[16:20:29.313]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.313]                   NULL)
[16:20:29.313]                 if (is_error) {
[16:20:29.313]                   sessionInformation <- function() {
[16:20:29.313]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.313]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.313]                       search = base::search(), system = base::Sys.info())
[16:20:29.313]                   }
[16:20:29.313]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.313]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.313]                     cond$call), session = sessionInformation(), 
[16:20:29.313]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.313]                   signalCondition(cond)
[16:20:29.313]                 }
[16:20:29.313]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.313]                 "immediateCondition"))) {
[16:20:29.313]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.313]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.313]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.313]                   if (TRUE && !signal) {
[16:20:29.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.313]                     {
[16:20:29.313]                       inherits <- base::inherits
[16:20:29.313]                       invokeRestart <- base::invokeRestart
[16:20:29.313]                       is.null <- base::is.null
[16:20:29.313]                       muffled <- FALSE
[16:20:29.313]                       if (inherits(cond, "message")) {
[16:20:29.313]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.313]                         if (muffled) 
[16:20:29.313]                           invokeRestart("muffleMessage")
[16:20:29.313]                       }
[16:20:29.313]                       else if (inherits(cond, "warning")) {
[16:20:29.313]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.313]                         if (muffled) 
[16:20:29.313]                           invokeRestart("muffleWarning")
[16:20:29.313]                       }
[16:20:29.313]                       else if (inherits(cond, "condition")) {
[16:20:29.313]                         if (!is.null(pattern)) {
[16:20:29.313]                           computeRestarts <- base::computeRestarts
[16:20:29.313]                           grepl <- base::grepl
[16:20:29.313]                           restarts <- computeRestarts(cond)
[16:20:29.313]                           for (restart in restarts) {
[16:20:29.313]                             name <- restart$name
[16:20:29.313]                             if (is.null(name)) 
[16:20:29.313]                               next
[16:20:29.313]                             if (!grepl(pattern, name)) 
[16:20:29.313]                               next
[16:20:29.313]                             invokeRestart(restart)
[16:20:29.313]                             muffled <- TRUE
[16:20:29.313]                             break
[16:20:29.313]                           }
[16:20:29.313]                         }
[16:20:29.313]                       }
[16:20:29.313]                       invisible(muffled)
[16:20:29.313]                     }
[16:20:29.313]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.313]                   }
[16:20:29.313]                 }
[16:20:29.313]                 else {
[16:20:29.313]                   if (TRUE) {
[16:20:29.313]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.313]                     {
[16:20:29.313]                       inherits <- base::inherits
[16:20:29.313]                       invokeRestart <- base::invokeRestart
[16:20:29.313]                       is.null <- base::is.null
[16:20:29.313]                       muffled <- FALSE
[16:20:29.313]                       if (inherits(cond, "message")) {
[16:20:29.313]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.313]                         if (muffled) 
[16:20:29.313]                           invokeRestart("muffleMessage")
[16:20:29.313]                       }
[16:20:29.313]                       else if (inherits(cond, "warning")) {
[16:20:29.313]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.313]                         if (muffled) 
[16:20:29.313]                           invokeRestart("muffleWarning")
[16:20:29.313]                       }
[16:20:29.313]                       else if (inherits(cond, "condition")) {
[16:20:29.313]                         if (!is.null(pattern)) {
[16:20:29.313]                           computeRestarts <- base::computeRestarts
[16:20:29.313]                           grepl <- base::grepl
[16:20:29.313]                           restarts <- computeRestarts(cond)
[16:20:29.313]                           for (restart in restarts) {
[16:20:29.313]                             name <- restart$name
[16:20:29.313]                             if (is.null(name)) 
[16:20:29.313]                               next
[16:20:29.313]                             if (!grepl(pattern, name)) 
[16:20:29.313]                               next
[16:20:29.313]                             invokeRestart(restart)
[16:20:29.313]                             muffled <- TRUE
[16:20:29.313]                             break
[16:20:29.313]                           }
[16:20:29.313]                         }
[16:20:29.313]                       }
[16:20:29.313]                       invisible(muffled)
[16:20:29.313]                     }
[16:20:29.313]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.313]                   }
[16:20:29.313]                 }
[16:20:29.313]             }
[16:20:29.313]         }))
[16:20:29.313]     }, error = function(ex) {
[16:20:29.313]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.313]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.313]                 ...future.rng), started = ...future.startTime, 
[16:20:29.313]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.313]             version = "1.8"), class = "FutureResult")
[16:20:29.313]     }, finally = {
[16:20:29.313]         if (!identical(...future.workdir, getwd())) 
[16:20:29.313]             setwd(...future.workdir)
[16:20:29.313]         {
[16:20:29.313]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.313]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.313]             }
[16:20:29.313]             base::options(...future.oldOptions)
[16:20:29.313]             if (.Platform$OS.type == "windows") {
[16:20:29.313]                 old_names <- names(...future.oldEnvVars)
[16:20:29.313]                 envs <- base::Sys.getenv()
[16:20:29.313]                 names <- names(envs)
[16:20:29.313]                 common <- intersect(names, old_names)
[16:20:29.313]                 added <- setdiff(names, old_names)
[16:20:29.313]                 removed <- setdiff(old_names, names)
[16:20:29.313]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.313]                   envs[common]]
[16:20:29.313]                 NAMES <- toupper(changed)
[16:20:29.313]                 args <- list()
[16:20:29.313]                 for (kk in seq_along(NAMES)) {
[16:20:29.313]                   name <- changed[[kk]]
[16:20:29.313]                   NAME <- NAMES[[kk]]
[16:20:29.313]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.313]                     next
[16:20:29.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.313]                 }
[16:20:29.313]                 NAMES <- toupper(added)
[16:20:29.313]                 for (kk in seq_along(NAMES)) {
[16:20:29.313]                   name <- added[[kk]]
[16:20:29.313]                   NAME <- NAMES[[kk]]
[16:20:29.313]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.313]                     next
[16:20:29.313]                   args[[name]] <- ""
[16:20:29.313]                 }
[16:20:29.313]                 NAMES <- toupper(removed)
[16:20:29.313]                 for (kk in seq_along(NAMES)) {
[16:20:29.313]                   name <- removed[[kk]]
[16:20:29.313]                   NAME <- NAMES[[kk]]
[16:20:29.313]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.313]                     next
[16:20:29.313]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.313]                 }
[16:20:29.313]                 if (length(args) > 0) 
[16:20:29.313]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.313]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.313]             }
[16:20:29.313]             else {
[16:20:29.313]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.313]             }
[16:20:29.313]             {
[16:20:29.313]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.313]                   0L) {
[16:20:29.313]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.313]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.313]                   base::options(opts)
[16:20:29.313]                 }
[16:20:29.313]                 {
[16:20:29.313]                   {
[16:20:29.313]                     NULL
[16:20:29.313]                     RNGkind("Mersenne-Twister")
[16:20:29.313]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.313]                       inherits = FALSE)
[16:20:29.313]                   }
[16:20:29.313]                   options(future.plan = NULL)
[16:20:29.313]                   if (is.na(NA_character_)) 
[16:20:29.313]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.313]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.313]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.313]                     .init = FALSE)
[16:20:29.313]                 }
[16:20:29.313]             }
[16:20:29.313]         }
[16:20:29.313]     })
[16:20:29.313]     if (TRUE) {
[16:20:29.313]         base::sink(type = "output", split = FALSE)
[16:20:29.313]         if (TRUE) {
[16:20:29.313]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.313]         }
[16:20:29.313]         else {
[16:20:29.313]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.313]         }
[16:20:29.313]         base::close(...future.stdout)
[16:20:29.313]         ...future.stdout <- NULL
[16:20:29.313]     }
[16:20:29.313]     ...future.result$conditions <- ...future.conditions
[16:20:29.313]     ...future.result$finished <- base::Sys.time()
[16:20:29.313]     ...future.result
[16:20:29.313] }
[16:20:29.314] plan(): Setting new future strategy stack:
[16:20:29.315] List of future strategies:
[16:20:29.315] 1. sequential:
[16:20:29.315]    - args: function (..., envir = parent.frame())
[16:20:29.315]    - tweaked: FALSE
[16:20:29.315]    - call: NULL
[16:20:29.315] plan(): nbrOfWorkers() = 1
[16:20:29.316] plan(): Setting new future strategy stack:
[16:20:29.316] List of future strategies:
[16:20:29.316] 1. sequential:
[16:20:29.316]    - args: function (..., envir = parent.frame())
[16:20:29.316]    - tweaked: FALSE
[16:20:29.316]    - call: plan(strategy)
[16:20:29.316] plan(): nbrOfWorkers() = 1
[16:20:29.316] SequentialFuture started (and completed)
[16:20:29.316] - Launch lazy future ... done
[16:20:29.316] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.318] getGlobalsAndPackages() ...
[16:20:29.318] Searching for globals...
[16:20:29.319] - globals found: [1] ‘{’
[16:20:29.319] Searching for globals ... DONE
[16:20:29.319] Resolving globals: FALSE
[16:20:29.320] 
[16:20:29.320] 
[16:20:29.320] getGlobalsAndPackages() ... DONE
[16:20:29.320] run() for ‘Future’ ...
[16:20:29.321] - state: ‘created’
[16:20:29.321] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:29.321] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.321] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:29.321]   - Field: ‘label’
[16:20:29.321]   - Field: ‘local’
[16:20:29.321]   - Field: ‘owner’
[16:20:29.321]   - Field: ‘envir’
[16:20:29.321]   - Field: ‘packages’
[16:20:29.322]   - Field: ‘gc’
[16:20:29.322]   - Field: ‘conditions’
[16:20:29.322]   - Field: ‘expr’
[16:20:29.322]   - Field: ‘uuid’
[16:20:29.322]   - Field: ‘seed’
[16:20:29.322]   - Field: ‘version’
[16:20:29.322]   - Field: ‘result’
[16:20:29.322]   - Field: ‘asynchronous’
[16:20:29.322]   - Field: ‘calls’
[16:20:29.322]   - Field: ‘globals’
[16:20:29.322]   - Field: ‘stdout’
[16:20:29.323]   - Field: ‘earlySignal’
[16:20:29.323]   - Field: ‘lazy’
[16:20:29.323]   - Field: ‘state’
[16:20:29.323] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:29.323] - Launch lazy future ...
[16:20:29.323] Packages needed by the future expression (n = 0): <none>
[16:20:29.323] Packages needed by future strategies (n = 0): <none>
[16:20:29.324] {
[16:20:29.324]     {
[16:20:29.324]         {
[16:20:29.324]             ...future.startTime <- base::Sys.time()
[16:20:29.324]             {
[16:20:29.324]                 {
[16:20:29.324]                   {
[16:20:29.324]                     base::local({
[16:20:29.324]                       has_future <- base::requireNamespace("future", 
[16:20:29.324]                         quietly = TRUE)
[16:20:29.324]                       if (has_future) {
[16:20:29.324]                         ns <- base::getNamespace("future")
[16:20:29.324]                         version <- ns[[".package"]][["version"]]
[16:20:29.324]                         if (is.null(version)) 
[16:20:29.324]                           version <- utils::packageVersion("future")
[16:20:29.324]                       }
[16:20:29.324]                       else {
[16:20:29.324]                         version <- NULL
[16:20:29.324]                       }
[16:20:29.324]                       if (!has_future || version < "1.8.0") {
[16:20:29.324]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.324]                           "", base::R.version$version.string), 
[16:20:29.324]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.324]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.324]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.324]                             "release", "version")], collapse = " "), 
[16:20:29.324]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.324]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.324]                           info)
[16:20:29.324]                         info <- base::paste(info, collapse = "; ")
[16:20:29.324]                         if (!has_future) {
[16:20:29.324]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.324]                             info)
[16:20:29.324]                         }
[16:20:29.324]                         else {
[16:20:29.324]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.324]                             info, version)
[16:20:29.324]                         }
[16:20:29.324]                         base::stop(msg)
[16:20:29.324]                       }
[16:20:29.324]                     })
[16:20:29.324]                   }
[16:20:29.324]                   ...future.strategy.old <- future::plan("list")
[16:20:29.324]                   options(future.plan = NULL)
[16:20:29.324]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.324]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.324]                 }
[16:20:29.324]                 ...future.workdir <- getwd()
[16:20:29.324]             }
[16:20:29.324]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.324]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.324]         }
[16:20:29.324]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.324]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.324]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.324]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.324]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.324]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.324]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.324]             base::names(...future.oldOptions))
[16:20:29.324]     }
[16:20:29.324]     if (FALSE) {
[16:20:29.324]     }
[16:20:29.324]     else {
[16:20:29.324]         if (TRUE) {
[16:20:29.324]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.324]                 open = "w")
[16:20:29.324]         }
[16:20:29.324]         else {
[16:20:29.324]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.324]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.324]         }
[16:20:29.324]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.324]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.324]             base::sink(type = "output", split = FALSE)
[16:20:29.324]             base::close(...future.stdout)
[16:20:29.324]         }, add = TRUE)
[16:20:29.324]     }
[16:20:29.324]     ...future.frame <- base::sys.nframe()
[16:20:29.324]     ...future.conditions <- base::list()
[16:20:29.324]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.324]     if (FALSE) {
[16:20:29.324]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.324]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.324]     }
[16:20:29.324]     ...future.result <- base::tryCatch({
[16:20:29.324]         base::withCallingHandlers({
[16:20:29.324]             ...future.value <- base::withVisible(base::local({
[16:20:29.324]                 42
[16:20:29.324]             }))
[16:20:29.324]             future::FutureResult(value = ...future.value$value, 
[16:20:29.324]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.324]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.324]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.324]                     ...future.globalenv.names))
[16:20:29.324]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.324]         }, condition = base::local({
[16:20:29.324]             c <- base::c
[16:20:29.324]             inherits <- base::inherits
[16:20:29.324]             invokeRestart <- base::invokeRestart
[16:20:29.324]             length <- base::length
[16:20:29.324]             list <- base::list
[16:20:29.324]             seq.int <- base::seq.int
[16:20:29.324]             signalCondition <- base::signalCondition
[16:20:29.324]             sys.calls <- base::sys.calls
[16:20:29.324]             `[[` <- base::`[[`
[16:20:29.324]             `+` <- base::`+`
[16:20:29.324]             `<<-` <- base::`<<-`
[16:20:29.324]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.324]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.324]                   3L)]
[16:20:29.324]             }
[16:20:29.324]             function(cond) {
[16:20:29.324]                 is_error <- inherits(cond, "error")
[16:20:29.324]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.324]                   NULL)
[16:20:29.324]                 if (is_error) {
[16:20:29.324]                   sessionInformation <- function() {
[16:20:29.324]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.324]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.324]                       search = base::search(), system = base::Sys.info())
[16:20:29.324]                   }
[16:20:29.324]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.324]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.324]                     cond$call), session = sessionInformation(), 
[16:20:29.324]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.324]                   signalCondition(cond)
[16:20:29.324]                 }
[16:20:29.324]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.324]                 "immediateCondition"))) {
[16:20:29.324]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.324]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.324]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.324]                   if (TRUE && !signal) {
[16:20:29.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.324]                     {
[16:20:29.324]                       inherits <- base::inherits
[16:20:29.324]                       invokeRestart <- base::invokeRestart
[16:20:29.324]                       is.null <- base::is.null
[16:20:29.324]                       muffled <- FALSE
[16:20:29.324]                       if (inherits(cond, "message")) {
[16:20:29.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.324]                         if (muffled) 
[16:20:29.324]                           invokeRestart("muffleMessage")
[16:20:29.324]                       }
[16:20:29.324]                       else if (inherits(cond, "warning")) {
[16:20:29.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.324]                         if (muffled) 
[16:20:29.324]                           invokeRestart("muffleWarning")
[16:20:29.324]                       }
[16:20:29.324]                       else if (inherits(cond, "condition")) {
[16:20:29.324]                         if (!is.null(pattern)) {
[16:20:29.324]                           computeRestarts <- base::computeRestarts
[16:20:29.324]                           grepl <- base::grepl
[16:20:29.324]                           restarts <- computeRestarts(cond)
[16:20:29.324]                           for (restart in restarts) {
[16:20:29.324]                             name <- restart$name
[16:20:29.324]                             if (is.null(name)) 
[16:20:29.324]                               next
[16:20:29.324]                             if (!grepl(pattern, name)) 
[16:20:29.324]                               next
[16:20:29.324]                             invokeRestart(restart)
[16:20:29.324]                             muffled <- TRUE
[16:20:29.324]                             break
[16:20:29.324]                           }
[16:20:29.324]                         }
[16:20:29.324]                       }
[16:20:29.324]                       invisible(muffled)
[16:20:29.324]                     }
[16:20:29.324]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.324]                   }
[16:20:29.324]                 }
[16:20:29.324]                 else {
[16:20:29.324]                   if (TRUE) {
[16:20:29.324]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.324]                     {
[16:20:29.324]                       inherits <- base::inherits
[16:20:29.324]                       invokeRestart <- base::invokeRestart
[16:20:29.324]                       is.null <- base::is.null
[16:20:29.324]                       muffled <- FALSE
[16:20:29.324]                       if (inherits(cond, "message")) {
[16:20:29.324]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.324]                         if (muffled) 
[16:20:29.324]                           invokeRestart("muffleMessage")
[16:20:29.324]                       }
[16:20:29.324]                       else if (inherits(cond, "warning")) {
[16:20:29.324]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.324]                         if (muffled) 
[16:20:29.324]                           invokeRestart("muffleWarning")
[16:20:29.324]                       }
[16:20:29.324]                       else if (inherits(cond, "condition")) {
[16:20:29.324]                         if (!is.null(pattern)) {
[16:20:29.324]                           computeRestarts <- base::computeRestarts
[16:20:29.324]                           grepl <- base::grepl
[16:20:29.324]                           restarts <- computeRestarts(cond)
[16:20:29.324]                           for (restart in restarts) {
[16:20:29.324]                             name <- restart$name
[16:20:29.324]                             if (is.null(name)) 
[16:20:29.324]                               next
[16:20:29.324]                             if (!grepl(pattern, name)) 
[16:20:29.324]                               next
[16:20:29.324]                             invokeRestart(restart)
[16:20:29.324]                             muffled <- TRUE
[16:20:29.324]                             break
[16:20:29.324]                           }
[16:20:29.324]                         }
[16:20:29.324]                       }
[16:20:29.324]                       invisible(muffled)
[16:20:29.324]                     }
[16:20:29.324]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.324]                   }
[16:20:29.324]                 }
[16:20:29.324]             }
[16:20:29.324]         }))
[16:20:29.324]     }, error = function(ex) {
[16:20:29.324]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.324]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.324]                 ...future.rng), started = ...future.startTime, 
[16:20:29.324]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.324]             version = "1.8"), class = "FutureResult")
[16:20:29.324]     }, finally = {
[16:20:29.324]         if (!identical(...future.workdir, getwd())) 
[16:20:29.324]             setwd(...future.workdir)
[16:20:29.324]         {
[16:20:29.324]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.324]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.324]             }
[16:20:29.324]             base::options(...future.oldOptions)
[16:20:29.324]             if (.Platform$OS.type == "windows") {
[16:20:29.324]                 old_names <- names(...future.oldEnvVars)
[16:20:29.324]                 envs <- base::Sys.getenv()
[16:20:29.324]                 names <- names(envs)
[16:20:29.324]                 common <- intersect(names, old_names)
[16:20:29.324]                 added <- setdiff(names, old_names)
[16:20:29.324]                 removed <- setdiff(old_names, names)
[16:20:29.324]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.324]                   envs[common]]
[16:20:29.324]                 NAMES <- toupper(changed)
[16:20:29.324]                 args <- list()
[16:20:29.324]                 for (kk in seq_along(NAMES)) {
[16:20:29.324]                   name <- changed[[kk]]
[16:20:29.324]                   NAME <- NAMES[[kk]]
[16:20:29.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.324]                     next
[16:20:29.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.324]                 }
[16:20:29.324]                 NAMES <- toupper(added)
[16:20:29.324]                 for (kk in seq_along(NAMES)) {
[16:20:29.324]                   name <- added[[kk]]
[16:20:29.324]                   NAME <- NAMES[[kk]]
[16:20:29.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.324]                     next
[16:20:29.324]                   args[[name]] <- ""
[16:20:29.324]                 }
[16:20:29.324]                 NAMES <- toupper(removed)
[16:20:29.324]                 for (kk in seq_along(NAMES)) {
[16:20:29.324]                   name <- removed[[kk]]
[16:20:29.324]                   NAME <- NAMES[[kk]]
[16:20:29.324]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.324]                     next
[16:20:29.324]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.324]                 }
[16:20:29.324]                 if (length(args) > 0) 
[16:20:29.324]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.324]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.324]             }
[16:20:29.324]             else {
[16:20:29.324]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.324]             }
[16:20:29.324]             {
[16:20:29.324]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.324]                   0L) {
[16:20:29.324]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.324]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.324]                   base::options(opts)
[16:20:29.324]                 }
[16:20:29.324]                 {
[16:20:29.324]                   {
[16:20:29.324]                     NULL
[16:20:29.324]                     RNGkind("Mersenne-Twister")
[16:20:29.324]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.324]                       inherits = FALSE)
[16:20:29.324]                   }
[16:20:29.324]                   options(future.plan = NULL)
[16:20:29.324]                   if (is.na(NA_character_)) 
[16:20:29.324]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.324]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.324]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.324]                     .init = FALSE)
[16:20:29.324]                 }
[16:20:29.324]             }
[16:20:29.324]         }
[16:20:29.324]     })
[16:20:29.324]     if (TRUE) {
[16:20:29.324]         base::sink(type = "output", split = FALSE)
[16:20:29.324]         if (TRUE) {
[16:20:29.324]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.324]         }
[16:20:29.324]         else {
[16:20:29.324]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.324]         }
[16:20:29.324]         base::close(...future.stdout)
[16:20:29.324]         ...future.stdout <- NULL
[16:20:29.324]     }
[16:20:29.324]     ...future.result$conditions <- ...future.conditions
[16:20:29.324]     ...future.result$finished <- base::Sys.time()
[16:20:29.324]     ...future.result
[16:20:29.324] }
[16:20:29.325] plan(): Setting new future strategy stack:
[16:20:29.325] List of future strategies:
[16:20:29.325] 1. sequential:
[16:20:29.325]    - args: function (..., envir = parent.frame())
[16:20:29.325]    - tweaked: FALSE
[16:20:29.325]    - call: NULL
[16:20:29.326] plan(): nbrOfWorkers() = 1
[16:20:29.327] plan(): Setting new future strategy stack:
[16:20:29.327] List of future strategies:
[16:20:29.327] 1. sequential:
[16:20:29.327]    - args: function (..., envir = parent.frame())
[16:20:29.327]    - tweaked: FALSE
[16:20:29.327]    - call: plan(strategy)
[16:20:29.327] plan(): nbrOfWorkers() = 1
[16:20:29.327] SequentialFuture started (and completed)
[16:20:29.327] - Launch lazy future ... done
[16:20:29.327] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.328] getGlobalsAndPackages() ...
[16:20:29.328] Searching for globals...
[16:20:29.329] 
[16:20:29.329] Searching for globals ... DONE
[16:20:29.329] - globals: [0] <none>
[16:20:29.329] getGlobalsAndPackages() ... DONE
[16:20:29.329] Packages needed by the future expression (n = 0): <none>
[16:20:29.329] Packages needed by future strategies (n = 0): <none>
[16:20:29.330] {
[16:20:29.330]     {
[16:20:29.330]         {
[16:20:29.330]             ...future.startTime <- base::Sys.time()
[16:20:29.330]             {
[16:20:29.330]                 {
[16:20:29.330]                   {
[16:20:29.330]                     base::local({
[16:20:29.330]                       has_future <- base::requireNamespace("future", 
[16:20:29.330]                         quietly = TRUE)
[16:20:29.330]                       if (has_future) {
[16:20:29.330]                         ns <- base::getNamespace("future")
[16:20:29.330]                         version <- ns[[".package"]][["version"]]
[16:20:29.330]                         if (is.null(version)) 
[16:20:29.330]                           version <- utils::packageVersion("future")
[16:20:29.330]                       }
[16:20:29.330]                       else {
[16:20:29.330]                         version <- NULL
[16:20:29.330]                       }
[16:20:29.330]                       if (!has_future || version < "1.8.0") {
[16:20:29.330]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.330]                           "", base::R.version$version.string), 
[16:20:29.330]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.330]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.330]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.330]                             "release", "version")], collapse = " "), 
[16:20:29.330]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.330]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.330]                           info)
[16:20:29.330]                         info <- base::paste(info, collapse = "; ")
[16:20:29.330]                         if (!has_future) {
[16:20:29.330]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.330]                             info)
[16:20:29.330]                         }
[16:20:29.330]                         else {
[16:20:29.330]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.330]                             info, version)
[16:20:29.330]                         }
[16:20:29.330]                         base::stop(msg)
[16:20:29.330]                       }
[16:20:29.330]                     })
[16:20:29.330]                   }
[16:20:29.330]                   ...future.strategy.old <- future::plan("list")
[16:20:29.330]                   options(future.plan = NULL)
[16:20:29.330]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.330]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.330]                 }
[16:20:29.330]                 ...future.workdir <- getwd()
[16:20:29.330]             }
[16:20:29.330]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.330]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.330]         }
[16:20:29.330]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.330]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.330]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.330]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.330]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.330]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.330]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.330]             base::names(...future.oldOptions))
[16:20:29.330]     }
[16:20:29.330]     if (FALSE) {
[16:20:29.330]     }
[16:20:29.330]     else {
[16:20:29.330]         if (TRUE) {
[16:20:29.330]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.330]                 open = "w")
[16:20:29.330]         }
[16:20:29.330]         else {
[16:20:29.330]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.330]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.330]         }
[16:20:29.330]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.330]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.330]             base::sink(type = "output", split = FALSE)
[16:20:29.330]             base::close(...future.stdout)
[16:20:29.330]         }, add = TRUE)
[16:20:29.330]     }
[16:20:29.330]     ...future.frame <- base::sys.nframe()
[16:20:29.330]     ...future.conditions <- base::list()
[16:20:29.330]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.330]     if (FALSE) {
[16:20:29.330]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.330]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.330]     }
[16:20:29.330]     ...future.result <- base::tryCatch({
[16:20:29.330]         base::withCallingHandlers({
[16:20:29.330]             ...future.value <- base::withVisible(base::local(42))
[16:20:29.330]             future::FutureResult(value = ...future.value$value, 
[16:20:29.330]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.330]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.330]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.330]                     ...future.globalenv.names))
[16:20:29.330]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.330]         }, condition = base::local({
[16:20:29.330]             c <- base::c
[16:20:29.330]             inherits <- base::inherits
[16:20:29.330]             invokeRestart <- base::invokeRestart
[16:20:29.330]             length <- base::length
[16:20:29.330]             list <- base::list
[16:20:29.330]             seq.int <- base::seq.int
[16:20:29.330]             signalCondition <- base::signalCondition
[16:20:29.330]             sys.calls <- base::sys.calls
[16:20:29.330]             `[[` <- base::`[[`
[16:20:29.330]             `+` <- base::`+`
[16:20:29.330]             `<<-` <- base::`<<-`
[16:20:29.330]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.330]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.330]                   3L)]
[16:20:29.330]             }
[16:20:29.330]             function(cond) {
[16:20:29.330]                 is_error <- inherits(cond, "error")
[16:20:29.330]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.330]                   NULL)
[16:20:29.330]                 if (is_error) {
[16:20:29.330]                   sessionInformation <- function() {
[16:20:29.330]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.330]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.330]                       search = base::search(), system = base::Sys.info())
[16:20:29.330]                   }
[16:20:29.330]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.330]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.330]                     cond$call), session = sessionInformation(), 
[16:20:29.330]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.330]                   signalCondition(cond)
[16:20:29.330]                 }
[16:20:29.330]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.330]                 "immediateCondition"))) {
[16:20:29.330]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.330]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.330]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.330]                   if (TRUE && !signal) {
[16:20:29.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.330]                     {
[16:20:29.330]                       inherits <- base::inherits
[16:20:29.330]                       invokeRestart <- base::invokeRestart
[16:20:29.330]                       is.null <- base::is.null
[16:20:29.330]                       muffled <- FALSE
[16:20:29.330]                       if (inherits(cond, "message")) {
[16:20:29.330]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.330]                         if (muffled) 
[16:20:29.330]                           invokeRestart("muffleMessage")
[16:20:29.330]                       }
[16:20:29.330]                       else if (inherits(cond, "warning")) {
[16:20:29.330]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.330]                         if (muffled) 
[16:20:29.330]                           invokeRestart("muffleWarning")
[16:20:29.330]                       }
[16:20:29.330]                       else if (inherits(cond, "condition")) {
[16:20:29.330]                         if (!is.null(pattern)) {
[16:20:29.330]                           computeRestarts <- base::computeRestarts
[16:20:29.330]                           grepl <- base::grepl
[16:20:29.330]                           restarts <- computeRestarts(cond)
[16:20:29.330]                           for (restart in restarts) {
[16:20:29.330]                             name <- restart$name
[16:20:29.330]                             if (is.null(name)) 
[16:20:29.330]                               next
[16:20:29.330]                             if (!grepl(pattern, name)) 
[16:20:29.330]                               next
[16:20:29.330]                             invokeRestart(restart)
[16:20:29.330]                             muffled <- TRUE
[16:20:29.330]                             break
[16:20:29.330]                           }
[16:20:29.330]                         }
[16:20:29.330]                       }
[16:20:29.330]                       invisible(muffled)
[16:20:29.330]                     }
[16:20:29.330]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.330]                   }
[16:20:29.330]                 }
[16:20:29.330]                 else {
[16:20:29.330]                   if (TRUE) {
[16:20:29.330]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.330]                     {
[16:20:29.330]                       inherits <- base::inherits
[16:20:29.330]                       invokeRestart <- base::invokeRestart
[16:20:29.330]                       is.null <- base::is.null
[16:20:29.330]                       muffled <- FALSE
[16:20:29.330]                       if (inherits(cond, "message")) {
[16:20:29.330]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.330]                         if (muffled) 
[16:20:29.330]                           invokeRestart("muffleMessage")
[16:20:29.330]                       }
[16:20:29.330]                       else if (inherits(cond, "warning")) {
[16:20:29.330]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.330]                         if (muffled) 
[16:20:29.330]                           invokeRestart("muffleWarning")
[16:20:29.330]                       }
[16:20:29.330]                       else if (inherits(cond, "condition")) {
[16:20:29.330]                         if (!is.null(pattern)) {
[16:20:29.330]                           computeRestarts <- base::computeRestarts
[16:20:29.330]                           grepl <- base::grepl
[16:20:29.330]                           restarts <- computeRestarts(cond)
[16:20:29.330]                           for (restart in restarts) {
[16:20:29.330]                             name <- restart$name
[16:20:29.330]                             if (is.null(name)) 
[16:20:29.330]                               next
[16:20:29.330]                             if (!grepl(pattern, name)) 
[16:20:29.330]                               next
[16:20:29.330]                             invokeRestart(restart)
[16:20:29.330]                             muffled <- TRUE
[16:20:29.330]                             break
[16:20:29.330]                           }
[16:20:29.330]                         }
[16:20:29.330]                       }
[16:20:29.330]                       invisible(muffled)
[16:20:29.330]                     }
[16:20:29.330]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.330]                   }
[16:20:29.330]                 }
[16:20:29.330]             }
[16:20:29.330]         }))
[16:20:29.330]     }, error = function(ex) {
[16:20:29.330]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.330]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.330]                 ...future.rng), started = ...future.startTime, 
[16:20:29.330]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.330]             version = "1.8"), class = "FutureResult")
[16:20:29.330]     }, finally = {
[16:20:29.330]         if (!identical(...future.workdir, getwd())) 
[16:20:29.330]             setwd(...future.workdir)
[16:20:29.330]         {
[16:20:29.330]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.330]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.330]             }
[16:20:29.330]             base::options(...future.oldOptions)
[16:20:29.330]             if (.Platform$OS.type == "windows") {
[16:20:29.330]                 old_names <- names(...future.oldEnvVars)
[16:20:29.330]                 envs <- base::Sys.getenv()
[16:20:29.330]                 names <- names(envs)
[16:20:29.330]                 common <- intersect(names, old_names)
[16:20:29.330]                 added <- setdiff(names, old_names)
[16:20:29.330]                 removed <- setdiff(old_names, names)
[16:20:29.330]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.330]                   envs[common]]
[16:20:29.330]                 NAMES <- toupper(changed)
[16:20:29.330]                 args <- list()
[16:20:29.330]                 for (kk in seq_along(NAMES)) {
[16:20:29.330]                   name <- changed[[kk]]
[16:20:29.330]                   NAME <- NAMES[[kk]]
[16:20:29.330]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.330]                     next
[16:20:29.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.330]                 }
[16:20:29.330]                 NAMES <- toupper(added)
[16:20:29.330]                 for (kk in seq_along(NAMES)) {
[16:20:29.330]                   name <- added[[kk]]
[16:20:29.330]                   NAME <- NAMES[[kk]]
[16:20:29.330]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.330]                     next
[16:20:29.330]                   args[[name]] <- ""
[16:20:29.330]                 }
[16:20:29.330]                 NAMES <- toupper(removed)
[16:20:29.330]                 for (kk in seq_along(NAMES)) {
[16:20:29.330]                   name <- removed[[kk]]
[16:20:29.330]                   NAME <- NAMES[[kk]]
[16:20:29.330]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.330]                     next
[16:20:29.330]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.330]                 }
[16:20:29.330]                 if (length(args) > 0) 
[16:20:29.330]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.330]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.330]             }
[16:20:29.330]             else {
[16:20:29.330]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.330]             }
[16:20:29.330]             {
[16:20:29.330]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.330]                   0L) {
[16:20:29.330]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.330]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.330]                   base::options(opts)
[16:20:29.330]                 }
[16:20:29.330]                 {
[16:20:29.330]                   {
[16:20:29.330]                     NULL
[16:20:29.330]                     RNGkind("Mersenne-Twister")
[16:20:29.330]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.330]                       inherits = FALSE)
[16:20:29.330]                   }
[16:20:29.330]                   options(future.plan = NULL)
[16:20:29.330]                   if (is.na(NA_character_)) 
[16:20:29.330]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.330]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.330]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.330]                     .init = FALSE)
[16:20:29.330]                 }
[16:20:29.330]             }
[16:20:29.330]         }
[16:20:29.330]     })
[16:20:29.330]     if (TRUE) {
[16:20:29.330]         base::sink(type = "output", split = FALSE)
[16:20:29.330]         if (TRUE) {
[16:20:29.330]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.330]         }
[16:20:29.330]         else {
[16:20:29.330]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.330]         }
[16:20:29.330]         base::close(...future.stdout)
[16:20:29.330]         ...future.stdout <- NULL
[16:20:29.330]     }
[16:20:29.330]     ...future.result$conditions <- ...future.conditions
[16:20:29.330]     ...future.result$finished <- base::Sys.time()
[16:20:29.330]     ...future.result
[16:20:29.330] }
[16:20:29.331] plan(): Setting new future strategy stack:
[16:20:29.331] List of future strategies:
[16:20:29.331] 1. sequential:
[16:20:29.331]    - args: function (..., envir = parent.frame())
[16:20:29.331]    - tweaked: FALSE
[16:20:29.331]    - call: NULL
[16:20:29.332] plan(): nbrOfWorkers() = 1
[16:20:29.332] plan(): Setting new future strategy stack:
[16:20:29.333] List of future strategies:
[16:20:29.333] 1. sequential:
[16:20:29.333]    - args: function (..., envir = parent.frame())
[16:20:29.333]    - tweaked: FALSE
[16:20:29.333]    - call: plan(strategy)
[16:20:29.333] plan(): nbrOfWorkers() = 1
[16:20:29.333] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.334] getGlobalsAndPackages() ...
[16:20:29.334] Searching for globals...
[16:20:29.334] 
[16:20:29.334] Searching for globals ... DONE
[16:20:29.334] - globals: [0] <none>
[16:20:29.334] getGlobalsAndPackages() ... DONE
[16:20:29.335] run() for ‘Future’ ...
[16:20:29.335] - state: ‘created’
[16:20:29.335] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:29.335] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.335] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:29.338]   - Field: ‘label’
[16:20:29.338]   - Field: ‘local’
[16:20:29.338]   - Field: ‘owner’
[16:20:29.338]   - Field: ‘envir’
[16:20:29.338]   - Field: ‘packages’
[16:20:29.338]   - Field: ‘gc’
[16:20:29.339]   - Field: ‘conditions’
[16:20:29.339]   - Field: ‘expr’
[16:20:29.339]   - Field: ‘uuid’
[16:20:29.339]   - Field: ‘seed’
[16:20:29.339]   - Field: ‘version’
[16:20:29.339]   - Field: ‘result’
[16:20:29.339]   - Field: ‘asynchronous’
[16:20:29.339]   - Field: ‘calls’
[16:20:29.339]   - Field: ‘globals’
[16:20:29.339]   - Field: ‘stdout’
[16:20:29.339]   - Field: ‘earlySignal’
[16:20:29.340]   - Field: ‘lazy’
[16:20:29.340]   - Field: ‘state’
[16:20:29.340] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:29.340] - Launch lazy future ...
[16:20:29.340] Packages needed by the future expression (n = 0): <none>
[16:20:29.340] Packages needed by future strategies (n = 0): <none>
[16:20:29.341] {
[16:20:29.341]     {
[16:20:29.341]         {
[16:20:29.341]             ...future.startTime <- base::Sys.time()
[16:20:29.341]             {
[16:20:29.341]                 {
[16:20:29.341]                   {
[16:20:29.341]                     base::local({
[16:20:29.341]                       has_future <- base::requireNamespace("future", 
[16:20:29.341]                         quietly = TRUE)
[16:20:29.341]                       if (has_future) {
[16:20:29.341]                         ns <- base::getNamespace("future")
[16:20:29.341]                         version <- ns[[".package"]][["version"]]
[16:20:29.341]                         if (is.null(version)) 
[16:20:29.341]                           version <- utils::packageVersion("future")
[16:20:29.341]                       }
[16:20:29.341]                       else {
[16:20:29.341]                         version <- NULL
[16:20:29.341]                       }
[16:20:29.341]                       if (!has_future || version < "1.8.0") {
[16:20:29.341]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.341]                           "", base::R.version$version.string), 
[16:20:29.341]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.341]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.341]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.341]                             "release", "version")], collapse = " "), 
[16:20:29.341]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.341]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.341]                           info)
[16:20:29.341]                         info <- base::paste(info, collapse = "; ")
[16:20:29.341]                         if (!has_future) {
[16:20:29.341]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.341]                             info)
[16:20:29.341]                         }
[16:20:29.341]                         else {
[16:20:29.341]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.341]                             info, version)
[16:20:29.341]                         }
[16:20:29.341]                         base::stop(msg)
[16:20:29.341]                       }
[16:20:29.341]                     })
[16:20:29.341]                   }
[16:20:29.341]                   ...future.strategy.old <- future::plan("list")
[16:20:29.341]                   options(future.plan = NULL)
[16:20:29.341]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.341]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.341]                 }
[16:20:29.341]                 ...future.workdir <- getwd()
[16:20:29.341]             }
[16:20:29.341]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.341]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.341]         }
[16:20:29.341]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.341]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.341]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.341]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.341]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.341]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.341]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.341]             base::names(...future.oldOptions))
[16:20:29.341]     }
[16:20:29.341]     if (FALSE) {
[16:20:29.341]     }
[16:20:29.341]     else {
[16:20:29.341]         if (TRUE) {
[16:20:29.341]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.341]                 open = "w")
[16:20:29.341]         }
[16:20:29.341]         else {
[16:20:29.341]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.341]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.341]         }
[16:20:29.341]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.341]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.341]             base::sink(type = "output", split = FALSE)
[16:20:29.341]             base::close(...future.stdout)
[16:20:29.341]         }, add = TRUE)
[16:20:29.341]     }
[16:20:29.341]     ...future.frame <- base::sys.nframe()
[16:20:29.341]     ...future.conditions <- base::list()
[16:20:29.341]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.341]     if (FALSE) {
[16:20:29.341]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.341]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.341]     }
[16:20:29.341]     ...future.result <- base::tryCatch({
[16:20:29.341]         base::withCallingHandlers({
[16:20:29.341]             ...future.value <- base::withVisible(base::local(42))
[16:20:29.341]             future::FutureResult(value = ...future.value$value, 
[16:20:29.341]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.341]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.341]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.341]                     ...future.globalenv.names))
[16:20:29.341]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.341]         }, condition = base::local({
[16:20:29.341]             c <- base::c
[16:20:29.341]             inherits <- base::inherits
[16:20:29.341]             invokeRestart <- base::invokeRestart
[16:20:29.341]             length <- base::length
[16:20:29.341]             list <- base::list
[16:20:29.341]             seq.int <- base::seq.int
[16:20:29.341]             signalCondition <- base::signalCondition
[16:20:29.341]             sys.calls <- base::sys.calls
[16:20:29.341]             `[[` <- base::`[[`
[16:20:29.341]             `+` <- base::`+`
[16:20:29.341]             `<<-` <- base::`<<-`
[16:20:29.341]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.341]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.341]                   3L)]
[16:20:29.341]             }
[16:20:29.341]             function(cond) {
[16:20:29.341]                 is_error <- inherits(cond, "error")
[16:20:29.341]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.341]                   NULL)
[16:20:29.341]                 if (is_error) {
[16:20:29.341]                   sessionInformation <- function() {
[16:20:29.341]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.341]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.341]                       search = base::search(), system = base::Sys.info())
[16:20:29.341]                   }
[16:20:29.341]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.341]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.341]                     cond$call), session = sessionInformation(), 
[16:20:29.341]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.341]                   signalCondition(cond)
[16:20:29.341]                 }
[16:20:29.341]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.341]                 "immediateCondition"))) {
[16:20:29.341]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.341]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.341]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.341]                   if (TRUE && !signal) {
[16:20:29.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.341]                     {
[16:20:29.341]                       inherits <- base::inherits
[16:20:29.341]                       invokeRestart <- base::invokeRestart
[16:20:29.341]                       is.null <- base::is.null
[16:20:29.341]                       muffled <- FALSE
[16:20:29.341]                       if (inherits(cond, "message")) {
[16:20:29.341]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.341]                         if (muffled) 
[16:20:29.341]                           invokeRestart("muffleMessage")
[16:20:29.341]                       }
[16:20:29.341]                       else if (inherits(cond, "warning")) {
[16:20:29.341]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.341]                         if (muffled) 
[16:20:29.341]                           invokeRestart("muffleWarning")
[16:20:29.341]                       }
[16:20:29.341]                       else if (inherits(cond, "condition")) {
[16:20:29.341]                         if (!is.null(pattern)) {
[16:20:29.341]                           computeRestarts <- base::computeRestarts
[16:20:29.341]                           grepl <- base::grepl
[16:20:29.341]                           restarts <- computeRestarts(cond)
[16:20:29.341]                           for (restart in restarts) {
[16:20:29.341]                             name <- restart$name
[16:20:29.341]                             if (is.null(name)) 
[16:20:29.341]                               next
[16:20:29.341]                             if (!grepl(pattern, name)) 
[16:20:29.341]                               next
[16:20:29.341]                             invokeRestart(restart)
[16:20:29.341]                             muffled <- TRUE
[16:20:29.341]                             break
[16:20:29.341]                           }
[16:20:29.341]                         }
[16:20:29.341]                       }
[16:20:29.341]                       invisible(muffled)
[16:20:29.341]                     }
[16:20:29.341]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.341]                   }
[16:20:29.341]                 }
[16:20:29.341]                 else {
[16:20:29.341]                   if (TRUE) {
[16:20:29.341]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.341]                     {
[16:20:29.341]                       inherits <- base::inherits
[16:20:29.341]                       invokeRestart <- base::invokeRestart
[16:20:29.341]                       is.null <- base::is.null
[16:20:29.341]                       muffled <- FALSE
[16:20:29.341]                       if (inherits(cond, "message")) {
[16:20:29.341]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.341]                         if (muffled) 
[16:20:29.341]                           invokeRestart("muffleMessage")
[16:20:29.341]                       }
[16:20:29.341]                       else if (inherits(cond, "warning")) {
[16:20:29.341]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.341]                         if (muffled) 
[16:20:29.341]                           invokeRestart("muffleWarning")
[16:20:29.341]                       }
[16:20:29.341]                       else if (inherits(cond, "condition")) {
[16:20:29.341]                         if (!is.null(pattern)) {
[16:20:29.341]                           computeRestarts <- base::computeRestarts
[16:20:29.341]                           grepl <- base::grepl
[16:20:29.341]                           restarts <- computeRestarts(cond)
[16:20:29.341]                           for (restart in restarts) {
[16:20:29.341]                             name <- restart$name
[16:20:29.341]                             if (is.null(name)) 
[16:20:29.341]                               next
[16:20:29.341]                             if (!grepl(pattern, name)) 
[16:20:29.341]                               next
[16:20:29.341]                             invokeRestart(restart)
[16:20:29.341]                             muffled <- TRUE
[16:20:29.341]                             break
[16:20:29.341]                           }
[16:20:29.341]                         }
[16:20:29.341]                       }
[16:20:29.341]                       invisible(muffled)
[16:20:29.341]                     }
[16:20:29.341]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.341]                   }
[16:20:29.341]                 }
[16:20:29.341]             }
[16:20:29.341]         }))
[16:20:29.341]     }, error = function(ex) {
[16:20:29.341]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.341]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.341]                 ...future.rng), started = ...future.startTime, 
[16:20:29.341]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.341]             version = "1.8"), class = "FutureResult")
[16:20:29.341]     }, finally = {
[16:20:29.341]         if (!identical(...future.workdir, getwd())) 
[16:20:29.341]             setwd(...future.workdir)
[16:20:29.341]         {
[16:20:29.341]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.341]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.341]             }
[16:20:29.341]             base::options(...future.oldOptions)
[16:20:29.341]             if (.Platform$OS.type == "windows") {
[16:20:29.341]                 old_names <- names(...future.oldEnvVars)
[16:20:29.341]                 envs <- base::Sys.getenv()
[16:20:29.341]                 names <- names(envs)
[16:20:29.341]                 common <- intersect(names, old_names)
[16:20:29.341]                 added <- setdiff(names, old_names)
[16:20:29.341]                 removed <- setdiff(old_names, names)
[16:20:29.341]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.341]                   envs[common]]
[16:20:29.341]                 NAMES <- toupper(changed)
[16:20:29.341]                 args <- list()
[16:20:29.341]                 for (kk in seq_along(NAMES)) {
[16:20:29.341]                   name <- changed[[kk]]
[16:20:29.341]                   NAME <- NAMES[[kk]]
[16:20:29.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.341]                     next
[16:20:29.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.341]                 }
[16:20:29.341]                 NAMES <- toupper(added)
[16:20:29.341]                 for (kk in seq_along(NAMES)) {
[16:20:29.341]                   name <- added[[kk]]
[16:20:29.341]                   NAME <- NAMES[[kk]]
[16:20:29.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.341]                     next
[16:20:29.341]                   args[[name]] <- ""
[16:20:29.341]                 }
[16:20:29.341]                 NAMES <- toupper(removed)
[16:20:29.341]                 for (kk in seq_along(NAMES)) {
[16:20:29.341]                   name <- removed[[kk]]
[16:20:29.341]                   NAME <- NAMES[[kk]]
[16:20:29.341]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.341]                     next
[16:20:29.341]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.341]                 }
[16:20:29.341]                 if (length(args) > 0) 
[16:20:29.341]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.341]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.341]             }
[16:20:29.341]             else {
[16:20:29.341]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.341]             }
[16:20:29.341]             {
[16:20:29.341]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.341]                   0L) {
[16:20:29.341]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.341]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.341]                   base::options(opts)
[16:20:29.341]                 }
[16:20:29.341]                 {
[16:20:29.341]                   {
[16:20:29.341]                     NULL
[16:20:29.341]                     RNGkind("Mersenne-Twister")
[16:20:29.341]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.341]                       inherits = FALSE)
[16:20:29.341]                   }
[16:20:29.341]                   options(future.plan = NULL)
[16:20:29.341]                   if (is.na(NA_character_)) 
[16:20:29.341]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.341]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.341]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.341]                     .init = FALSE)
[16:20:29.341]                 }
[16:20:29.341]             }
[16:20:29.341]         }
[16:20:29.341]     })
[16:20:29.341]     if (TRUE) {
[16:20:29.341]         base::sink(type = "output", split = FALSE)
[16:20:29.341]         if (TRUE) {
[16:20:29.341]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.341]         }
[16:20:29.341]         else {
[16:20:29.341]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.341]         }
[16:20:29.341]         base::close(...future.stdout)
[16:20:29.341]         ...future.stdout <- NULL
[16:20:29.341]     }
[16:20:29.341]     ...future.result$conditions <- ...future.conditions
[16:20:29.341]     ...future.result$finished <- base::Sys.time()
[16:20:29.341]     ...future.result
[16:20:29.341] }
[16:20:29.342] plan(): Setting new future strategy stack:
[16:20:29.342] List of future strategies:
[16:20:29.342] 1. sequential:
[16:20:29.342]    - args: function (..., envir = parent.frame())
[16:20:29.342]    - tweaked: FALSE
[16:20:29.342]    - call: NULL
[16:20:29.343] plan(): nbrOfWorkers() = 1
[16:20:29.343] plan(): Setting new future strategy stack:
[16:20:29.344] List of future strategies:
[16:20:29.344] 1. sequential:
[16:20:29.344]    - args: function (..., envir = parent.frame())
[16:20:29.344]    - tweaked: FALSE
[16:20:29.344]    - call: plan(strategy)
[16:20:29.344] plan(): nbrOfWorkers() = 1
[16:20:29.344] SequentialFuture started (and completed)
[16:20:29.344] - Launch lazy future ... done
[16:20:29.344] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.345] getGlobalsAndPackages() ...
[16:20:29.345] Searching for globals...
[16:20:29.346] - globals found: [1] ‘{’
[16:20:29.346] Searching for globals ... DONE
[16:20:29.346] Resolving globals: FALSE
[16:20:29.346] 
[16:20:29.346] 
[16:20:29.346] getGlobalsAndPackages() ... DONE
[16:20:29.347] run() for ‘Future’ ...
[16:20:29.347] - state: ‘created’
[16:20:29.347] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:20:29.347] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:20:29.347] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:20:29.347]   - Field: ‘label’
[16:20:29.347]   - Field: ‘local’
[16:20:29.347]   - Field: ‘owner’
[16:20:29.348]   - Field: ‘envir’
[16:20:29.348]   - Field: ‘packages’
[16:20:29.348]   - Field: ‘gc’
[16:20:29.348]   - Field: ‘conditions’
[16:20:29.348]   - Field: ‘expr’
[16:20:29.348]   - Field: ‘uuid’
[16:20:29.348]   - Field: ‘seed’
[16:20:29.348]   - Field: ‘version’
[16:20:29.348]   - Field: ‘result’
[16:20:29.348]   - Field: ‘asynchronous’
[16:20:29.348]   - Field: ‘calls’
[16:20:29.349]   - Field: ‘globals’
[16:20:29.349]   - Field: ‘stdout’
[16:20:29.349]   - Field: ‘earlySignal’
[16:20:29.349]   - Field: ‘lazy’
[16:20:29.349]   - Field: ‘state’
[16:20:29.349] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:20:29.349] - Launch lazy future ...
[16:20:29.349] Packages needed by the future expression (n = 0): <none>
[16:20:29.349] Packages needed by future strategies (n = 0): <none>
[16:20:29.350] {
[16:20:29.350]     {
[16:20:29.350]         {
[16:20:29.350]             ...future.startTime <- base::Sys.time()
[16:20:29.350]             {
[16:20:29.350]                 {
[16:20:29.350]                   {
[16:20:29.350]                     base::local({
[16:20:29.350]                       has_future <- base::requireNamespace("future", 
[16:20:29.350]                         quietly = TRUE)
[16:20:29.350]                       if (has_future) {
[16:20:29.350]                         ns <- base::getNamespace("future")
[16:20:29.350]                         version <- ns[[".package"]][["version"]]
[16:20:29.350]                         if (is.null(version)) 
[16:20:29.350]                           version <- utils::packageVersion("future")
[16:20:29.350]                       }
[16:20:29.350]                       else {
[16:20:29.350]                         version <- NULL
[16:20:29.350]                       }
[16:20:29.350]                       if (!has_future || version < "1.8.0") {
[16:20:29.350]                         info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.350]                           "", base::R.version$version.string), 
[16:20:29.350]                           platform = base::sprintf("%s (%s-bit)", 
[16:20:29.350]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.350]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.350]                             "release", "version")], collapse = " "), 
[16:20:29.350]                           hostname = base::Sys.info()[["nodename"]])
[16:20:29.350]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.350]                           info)
[16:20:29.350]                         info <- base::paste(info, collapse = "; ")
[16:20:29.350]                         if (!has_future) {
[16:20:29.350]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.350]                             info)
[16:20:29.350]                         }
[16:20:29.350]                         else {
[16:20:29.350]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.350]                             info, version)
[16:20:29.350]                         }
[16:20:29.350]                         base::stop(msg)
[16:20:29.350]                       }
[16:20:29.350]                     })
[16:20:29.350]                   }
[16:20:29.350]                   ...future.strategy.old <- future::plan("list")
[16:20:29.350]                   options(future.plan = NULL)
[16:20:29.350]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.350]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.350]                 }
[16:20:29.350]                 ...future.workdir <- getwd()
[16:20:29.350]             }
[16:20:29.350]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.350]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.350]         }
[16:20:29.350]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.350]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.350]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.350]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.350]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.350]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.350]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.350]             base::names(...future.oldOptions))
[16:20:29.350]     }
[16:20:29.350]     if (FALSE) {
[16:20:29.350]     }
[16:20:29.350]     else {
[16:20:29.350]         if (TRUE) {
[16:20:29.350]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.350]                 open = "w")
[16:20:29.350]         }
[16:20:29.350]         else {
[16:20:29.350]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.350]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.350]         }
[16:20:29.350]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.350]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.350]             base::sink(type = "output", split = FALSE)
[16:20:29.350]             base::close(...future.stdout)
[16:20:29.350]         }, add = TRUE)
[16:20:29.350]     }
[16:20:29.350]     ...future.frame <- base::sys.nframe()
[16:20:29.350]     ...future.conditions <- base::list()
[16:20:29.350]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.350]     if (FALSE) {
[16:20:29.350]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.350]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.350]     }
[16:20:29.350]     ...future.result <- base::tryCatch({
[16:20:29.350]         base::withCallingHandlers({
[16:20:29.350]             ...future.value <- base::withVisible(base::local({
[16:20:29.350]                 42
[16:20:29.350]             }))
[16:20:29.350]             future::FutureResult(value = ...future.value$value, 
[16:20:29.350]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.350]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.350]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.350]                     ...future.globalenv.names))
[16:20:29.350]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.350]         }, condition = base::local({
[16:20:29.350]             c <- base::c
[16:20:29.350]             inherits <- base::inherits
[16:20:29.350]             invokeRestart <- base::invokeRestart
[16:20:29.350]             length <- base::length
[16:20:29.350]             list <- base::list
[16:20:29.350]             seq.int <- base::seq.int
[16:20:29.350]             signalCondition <- base::signalCondition
[16:20:29.350]             sys.calls <- base::sys.calls
[16:20:29.350]             `[[` <- base::`[[`
[16:20:29.350]             `+` <- base::`+`
[16:20:29.350]             `<<-` <- base::`<<-`
[16:20:29.350]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.350]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.350]                   3L)]
[16:20:29.350]             }
[16:20:29.350]             function(cond) {
[16:20:29.350]                 is_error <- inherits(cond, "error")
[16:20:29.350]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.350]                   NULL)
[16:20:29.350]                 if (is_error) {
[16:20:29.350]                   sessionInformation <- function() {
[16:20:29.350]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.350]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.350]                       search = base::search(), system = base::Sys.info())
[16:20:29.350]                   }
[16:20:29.350]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.350]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.350]                     cond$call), session = sessionInformation(), 
[16:20:29.350]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.350]                   signalCondition(cond)
[16:20:29.350]                 }
[16:20:29.350]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.350]                 "immediateCondition"))) {
[16:20:29.350]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.350]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.350]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.350]                   if (TRUE && !signal) {
[16:20:29.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.350]                     {
[16:20:29.350]                       inherits <- base::inherits
[16:20:29.350]                       invokeRestart <- base::invokeRestart
[16:20:29.350]                       is.null <- base::is.null
[16:20:29.350]                       muffled <- FALSE
[16:20:29.350]                       if (inherits(cond, "message")) {
[16:20:29.350]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.350]                         if (muffled) 
[16:20:29.350]                           invokeRestart("muffleMessage")
[16:20:29.350]                       }
[16:20:29.350]                       else if (inherits(cond, "warning")) {
[16:20:29.350]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.350]                         if (muffled) 
[16:20:29.350]                           invokeRestart("muffleWarning")
[16:20:29.350]                       }
[16:20:29.350]                       else if (inherits(cond, "condition")) {
[16:20:29.350]                         if (!is.null(pattern)) {
[16:20:29.350]                           computeRestarts <- base::computeRestarts
[16:20:29.350]                           grepl <- base::grepl
[16:20:29.350]                           restarts <- computeRestarts(cond)
[16:20:29.350]                           for (restart in restarts) {
[16:20:29.350]                             name <- restart$name
[16:20:29.350]                             if (is.null(name)) 
[16:20:29.350]                               next
[16:20:29.350]                             if (!grepl(pattern, name)) 
[16:20:29.350]                               next
[16:20:29.350]                             invokeRestart(restart)
[16:20:29.350]                             muffled <- TRUE
[16:20:29.350]                             break
[16:20:29.350]                           }
[16:20:29.350]                         }
[16:20:29.350]                       }
[16:20:29.350]                       invisible(muffled)
[16:20:29.350]                     }
[16:20:29.350]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.350]                   }
[16:20:29.350]                 }
[16:20:29.350]                 else {
[16:20:29.350]                   if (TRUE) {
[16:20:29.350]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.350]                     {
[16:20:29.350]                       inherits <- base::inherits
[16:20:29.350]                       invokeRestart <- base::invokeRestart
[16:20:29.350]                       is.null <- base::is.null
[16:20:29.350]                       muffled <- FALSE
[16:20:29.350]                       if (inherits(cond, "message")) {
[16:20:29.350]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.350]                         if (muffled) 
[16:20:29.350]                           invokeRestart("muffleMessage")
[16:20:29.350]                       }
[16:20:29.350]                       else if (inherits(cond, "warning")) {
[16:20:29.350]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.350]                         if (muffled) 
[16:20:29.350]                           invokeRestart("muffleWarning")
[16:20:29.350]                       }
[16:20:29.350]                       else if (inherits(cond, "condition")) {
[16:20:29.350]                         if (!is.null(pattern)) {
[16:20:29.350]                           computeRestarts <- base::computeRestarts
[16:20:29.350]                           grepl <- base::grepl
[16:20:29.350]                           restarts <- computeRestarts(cond)
[16:20:29.350]                           for (restart in restarts) {
[16:20:29.350]                             name <- restart$name
[16:20:29.350]                             if (is.null(name)) 
[16:20:29.350]                               next
[16:20:29.350]                             if (!grepl(pattern, name)) 
[16:20:29.350]                               next
[16:20:29.350]                             invokeRestart(restart)
[16:20:29.350]                             muffled <- TRUE
[16:20:29.350]                             break
[16:20:29.350]                           }
[16:20:29.350]                         }
[16:20:29.350]                       }
[16:20:29.350]                       invisible(muffled)
[16:20:29.350]                     }
[16:20:29.350]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.350]                   }
[16:20:29.350]                 }
[16:20:29.350]             }
[16:20:29.350]         }))
[16:20:29.350]     }, error = function(ex) {
[16:20:29.350]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.350]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.350]                 ...future.rng), started = ...future.startTime, 
[16:20:29.350]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.350]             version = "1.8"), class = "FutureResult")
[16:20:29.350]     }, finally = {
[16:20:29.350]         if (!identical(...future.workdir, getwd())) 
[16:20:29.350]             setwd(...future.workdir)
[16:20:29.350]         {
[16:20:29.350]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.350]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.350]             }
[16:20:29.350]             base::options(...future.oldOptions)
[16:20:29.350]             if (.Platform$OS.type == "windows") {
[16:20:29.350]                 old_names <- names(...future.oldEnvVars)
[16:20:29.350]                 envs <- base::Sys.getenv()
[16:20:29.350]                 names <- names(envs)
[16:20:29.350]                 common <- intersect(names, old_names)
[16:20:29.350]                 added <- setdiff(names, old_names)
[16:20:29.350]                 removed <- setdiff(old_names, names)
[16:20:29.350]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.350]                   envs[common]]
[16:20:29.350]                 NAMES <- toupper(changed)
[16:20:29.350]                 args <- list()
[16:20:29.350]                 for (kk in seq_along(NAMES)) {
[16:20:29.350]                   name <- changed[[kk]]
[16:20:29.350]                   NAME <- NAMES[[kk]]
[16:20:29.350]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.350]                     next
[16:20:29.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.350]                 }
[16:20:29.350]                 NAMES <- toupper(added)
[16:20:29.350]                 for (kk in seq_along(NAMES)) {
[16:20:29.350]                   name <- added[[kk]]
[16:20:29.350]                   NAME <- NAMES[[kk]]
[16:20:29.350]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.350]                     next
[16:20:29.350]                   args[[name]] <- ""
[16:20:29.350]                 }
[16:20:29.350]                 NAMES <- toupper(removed)
[16:20:29.350]                 for (kk in seq_along(NAMES)) {
[16:20:29.350]                   name <- removed[[kk]]
[16:20:29.350]                   NAME <- NAMES[[kk]]
[16:20:29.350]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.350]                     next
[16:20:29.350]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.350]                 }
[16:20:29.350]                 if (length(args) > 0) 
[16:20:29.350]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.350]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.350]             }
[16:20:29.350]             else {
[16:20:29.350]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.350]             }
[16:20:29.350]             {
[16:20:29.350]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.350]                   0L) {
[16:20:29.350]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.350]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.350]                   base::options(opts)
[16:20:29.350]                 }
[16:20:29.350]                 {
[16:20:29.350]                   {
[16:20:29.350]                     NULL
[16:20:29.350]                     RNGkind("Mersenne-Twister")
[16:20:29.350]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:20:29.350]                       inherits = FALSE)
[16:20:29.350]                   }
[16:20:29.350]                   options(future.plan = NULL)
[16:20:29.350]                   if (is.na(NA_character_)) 
[16:20:29.350]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.350]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.350]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.350]                     .init = FALSE)
[16:20:29.350]                 }
[16:20:29.350]             }
[16:20:29.350]         }
[16:20:29.350]     })
[16:20:29.350]     if (TRUE) {
[16:20:29.350]         base::sink(type = "output", split = FALSE)
[16:20:29.350]         if (TRUE) {
[16:20:29.350]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.350]         }
[16:20:29.350]         else {
[16:20:29.350]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.350]         }
[16:20:29.350]         base::close(...future.stdout)
[16:20:29.350]         ...future.stdout <- NULL
[16:20:29.350]     }
[16:20:29.350]     ...future.result$conditions <- ...future.conditions
[16:20:29.350]     ...future.result$finished <- base::Sys.time()
[16:20:29.350]     ...future.result
[16:20:29.350] }
[16:20:29.351] plan(): Setting new future strategy stack:
[16:20:29.352] List of future strategies:
[16:20:29.352] 1. sequential:
[16:20:29.352]    - args: function (..., envir = parent.frame())
[16:20:29.352]    - tweaked: FALSE
[16:20:29.352]    - call: NULL
[16:20:29.352] plan(): nbrOfWorkers() = 1
[16:20:29.353] plan(): Setting new future strategy stack:
[16:20:29.353] List of future strategies:
[16:20:29.353] 1. sequential:
[16:20:29.353]    - args: function (..., envir = parent.frame())
[16:20:29.353]    - tweaked: FALSE
[16:20:29.353]    - call: plan(strategy)
[16:20:29.353] plan(): nbrOfWorkers() = 1
[16:20:29.353] SequentialFuture started (and completed)
[16:20:29.353] - Launch lazy future ... done
[16:20:29.353] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[16:20:29.354] plan(): Setting new future strategy stack:
[16:20:29.355] List of future strategies:
[16:20:29.355] 1. multicore:
[16:20:29.355]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.355]    - tweaked: FALSE
[16:20:29.355]    - call: plan(strategy)
[16:20:29.358] plan(): nbrOfWorkers() = 2
[16:20:29.362] getGlobalsAndPackages() ...
[16:20:29.362] 
[16:20:29.362] - globals: [0] <none>
[16:20:29.362] getGlobalsAndPackages() ... DONE
[16:20:29.363] Packages needed by the future expression (n = 0): <none>
[16:20:29.363] Packages needed by future strategies (n = 0): <none>
[16:20:29.364] {
[16:20:29.364]     {
[16:20:29.364]         {
[16:20:29.364]             ...future.startTime <- base::Sys.time()
[16:20:29.364]             {
[16:20:29.364]                 {
[16:20:29.364]                   {
[16:20:29.364]                     {
[16:20:29.364]                       base::local({
[16:20:29.364]                         has_future <- base::requireNamespace("future", 
[16:20:29.364]                           quietly = TRUE)
[16:20:29.364]                         if (has_future) {
[16:20:29.364]                           ns <- base::getNamespace("future")
[16:20:29.364]                           version <- ns[[".package"]][["version"]]
[16:20:29.364]                           if (is.null(version)) 
[16:20:29.364]                             version <- utils::packageVersion("future")
[16:20:29.364]                         }
[16:20:29.364]                         else {
[16:20:29.364]                           version <- NULL
[16:20:29.364]                         }
[16:20:29.364]                         if (!has_future || version < "1.8.0") {
[16:20:29.364]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.364]                             "", base::R.version$version.string), 
[16:20:29.364]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.364]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.364]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.364]                               "release", "version")], collapse = " "), 
[16:20:29.364]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.364]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.364]                             info)
[16:20:29.364]                           info <- base::paste(info, collapse = "; ")
[16:20:29.364]                           if (!has_future) {
[16:20:29.364]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.364]                               info)
[16:20:29.364]                           }
[16:20:29.364]                           else {
[16:20:29.364]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.364]                               info, version)
[16:20:29.364]                           }
[16:20:29.364]                           base::stop(msg)
[16:20:29.364]                         }
[16:20:29.364]                       })
[16:20:29.364]                     }
[16:20:29.364]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.364]                     base::options(mc.cores = 1L)
[16:20:29.364]                   }
[16:20:29.364]                   ...future.strategy.old <- future::plan("list")
[16:20:29.364]                   options(future.plan = NULL)
[16:20:29.364]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.364]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.364]                 }
[16:20:29.364]                 ...future.workdir <- getwd()
[16:20:29.364]             }
[16:20:29.364]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.364]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.364]         }
[16:20:29.364]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.364]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.364]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.364]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.364]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.364]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.364]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.364]             base::names(...future.oldOptions))
[16:20:29.364]     }
[16:20:29.364]     if (FALSE) {
[16:20:29.364]     }
[16:20:29.364]     else {
[16:20:29.364]         if (TRUE) {
[16:20:29.364]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.364]                 open = "w")
[16:20:29.364]         }
[16:20:29.364]         else {
[16:20:29.364]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.364]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.364]         }
[16:20:29.364]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.364]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.364]             base::sink(type = "output", split = FALSE)
[16:20:29.364]             base::close(...future.stdout)
[16:20:29.364]         }, add = TRUE)
[16:20:29.364]     }
[16:20:29.364]     ...future.frame <- base::sys.nframe()
[16:20:29.364]     ...future.conditions <- base::list()
[16:20:29.364]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.364]     if (FALSE) {
[16:20:29.364]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.364]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.364]     }
[16:20:29.364]     ...future.result <- base::tryCatch({
[16:20:29.364]         base::withCallingHandlers({
[16:20:29.364]             ...future.value <- base::withVisible(base::local({
[16:20:29.364]                 withCallingHandlers({
[16:20:29.364]                   42
[16:20:29.364]                 }, immediateCondition = function(cond) {
[16:20:29.364]                   save_rds <- function (object, pathname, ...) 
[16:20:29.364]                   {
[16:20:29.364]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.364]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.364]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.364]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.364]                         fi_tmp[["mtime"]])
[16:20:29.364]                     }
[16:20:29.364]                     tryCatch({
[16:20:29.364]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.364]                     }, error = function(ex) {
[16:20:29.364]                       msg <- conditionMessage(ex)
[16:20:29.364]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.364]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.364]                         fi_tmp[["mtime"]], msg)
[16:20:29.364]                       ex$message <- msg
[16:20:29.364]                       stop(ex)
[16:20:29.364]                     })
[16:20:29.364]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.364]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.364]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.364]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.364]                       fi <- file.info(pathname)
[16:20:29.364]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.364]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.364]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.364]                         fi[["size"]], fi[["mtime"]])
[16:20:29.364]                       stop(msg)
[16:20:29.364]                     }
[16:20:29.364]                     invisible(pathname)
[16:20:29.364]                   }
[16:20:29.364]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.364]                     rootPath = tempdir()) 
[16:20:29.364]                   {
[16:20:29.364]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.364]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.364]                       tmpdir = path, fileext = ".rds")
[16:20:29.364]                     save_rds(obj, file)
[16:20:29.364]                   }
[16:20:29.364]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.364]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.364]                   {
[16:20:29.364]                     inherits <- base::inherits
[16:20:29.364]                     invokeRestart <- base::invokeRestart
[16:20:29.364]                     is.null <- base::is.null
[16:20:29.364]                     muffled <- FALSE
[16:20:29.364]                     if (inherits(cond, "message")) {
[16:20:29.364]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.364]                       if (muffled) 
[16:20:29.364]                         invokeRestart("muffleMessage")
[16:20:29.364]                     }
[16:20:29.364]                     else if (inherits(cond, "warning")) {
[16:20:29.364]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.364]                       if (muffled) 
[16:20:29.364]                         invokeRestart("muffleWarning")
[16:20:29.364]                     }
[16:20:29.364]                     else if (inherits(cond, "condition")) {
[16:20:29.364]                       if (!is.null(pattern)) {
[16:20:29.364]                         computeRestarts <- base::computeRestarts
[16:20:29.364]                         grepl <- base::grepl
[16:20:29.364]                         restarts <- computeRestarts(cond)
[16:20:29.364]                         for (restart in restarts) {
[16:20:29.364]                           name <- restart$name
[16:20:29.364]                           if (is.null(name)) 
[16:20:29.364]                             next
[16:20:29.364]                           if (!grepl(pattern, name)) 
[16:20:29.364]                             next
[16:20:29.364]                           invokeRestart(restart)
[16:20:29.364]                           muffled <- TRUE
[16:20:29.364]                           break
[16:20:29.364]                         }
[16:20:29.364]                       }
[16:20:29.364]                     }
[16:20:29.364]                     invisible(muffled)
[16:20:29.364]                   }
[16:20:29.364]                   muffleCondition(cond)
[16:20:29.364]                 })
[16:20:29.364]             }))
[16:20:29.364]             future::FutureResult(value = ...future.value$value, 
[16:20:29.364]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.364]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.364]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.364]                     ...future.globalenv.names))
[16:20:29.364]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.364]         }, condition = base::local({
[16:20:29.364]             c <- base::c
[16:20:29.364]             inherits <- base::inherits
[16:20:29.364]             invokeRestart <- base::invokeRestart
[16:20:29.364]             length <- base::length
[16:20:29.364]             list <- base::list
[16:20:29.364]             seq.int <- base::seq.int
[16:20:29.364]             signalCondition <- base::signalCondition
[16:20:29.364]             sys.calls <- base::sys.calls
[16:20:29.364]             `[[` <- base::`[[`
[16:20:29.364]             `+` <- base::`+`
[16:20:29.364]             `<<-` <- base::`<<-`
[16:20:29.364]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.364]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.364]                   3L)]
[16:20:29.364]             }
[16:20:29.364]             function(cond) {
[16:20:29.364]                 is_error <- inherits(cond, "error")
[16:20:29.364]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.364]                   NULL)
[16:20:29.364]                 if (is_error) {
[16:20:29.364]                   sessionInformation <- function() {
[16:20:29.364]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.364]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.364]                       search = base::search(), system = base::Sys.info())
[16:20:29.364]                   }
[16:20:29.364]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.364]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.364]                     cond$call), session = sessionInformation(), 
[16:20:29.364]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.364]                   signalCondition(cond)
[16:20:29.364]                 }
[16:20:29.364]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.364]                 "immediateCondition"))) {
[16:20:29.364]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.364]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.364]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.364]                   if (TRUE && !signal) {
[16:20:29.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.364]                     {
[16:20:29.364]                       inherits <- base::inherits
[16:20:29.364]                       invokeRestart <- base::invokeRestart
[16:20:29.364]                       is.null <- base::is.null
[16:20:29.364]                       muffled <- FALSE
[16:20:29.364]                       if (inherits(cond, "message")) {
[16:20:29.364]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.364]                         if (muffled) 
[16:20:29.364]                           invokeRestart("muffleMessage")
[16:20:29.364]                       }
[16:20:29.364]                       else if (inherits(cond, "warning")) {
[16:20:29.364]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.364]                         if (muffled) 
[16:20:29.364]                           invokeRestart("muffleWarning")
[16:20:29.364]                       }
[16:20:29.364]                       else if (inherits(cond, "condition")) {
[16:20:29.364]                         if (!is.null(pattern)) {
[16:20:29.364]                           computeRestarts <- base::computeRestarts
[16:20:29.364]                           grepl <- base::grepl
[16:20:29.364]                           restarts <- computeRestarts(cond)
[16:20:29.364]                           for (restart in restarts) {
[16:20:29.364]                             name <- restart$name
[16:20:29.364]                             if (is.null(name)) 
[16:20:29.364]                               next
[16:20:29.364]                             if (!grepl(pattern, name)) 
[16:20:29.364]                               next
[16:20:29.364]                             invokeRestart(restart)
[16:20:29.364]                             muffled <- TRUE
[16:20:29.364]                             break
[16:20:29.364]                           }
[16:20:29.364]                         }
[16:20:29.364]                       }
[16:20:29.364]                       invisible(muffled)
[16:20:29.364]                     }
[16:20:29.364]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.364]                   }
[16:20:29.364]                 }
[16:20:29.364]                 else {
[16:20:29.364]                   if (TRUE) {
[16:20:29.364]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.364]                     {
[16:20:29.364]                       inherits <- base::inherits
[16:20:29.364]                       invokeRestart <- base::invokeRestart
[16:20:29.364]                       is.null <- base::is.null
[16:20:29.364]                       muffled <- FALSE
[16:20:29.364]                       if (inherits(cond, "message")) {
[16:20:29.364]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.364]                         if (muffled) 
[16:20:29.364]                           invokeRestart("muffleMessage")
[16:20:29.364]                       }
[16:20:29.364]                       else if (inherits(cond, "warning")) {
[16:20:29.364]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.364]                         if (muffled) 
[16:20:29.364]                           invokeRestart("muffleWarning")
[16:20:29.364]                       }
[16:20:29.364]                       else if (inherits(cond, "condition")) {
[16:20:29.364]                         if (!is.null(pattern)) {
[16:20:29.364]                           computeRestarts <- base::computeRestarts
[16:20:29.364]                           grepl <- base::grepl
[16:20:29.364]                           restarts <- computeRestarts(cond)
[16:20:29.364]                           for (restart in restarts) {
[16:20:29.364]                             name <- restart$name
[16:20:29.364]                             if (is.null(name)) 
[16:20:29.364]                               next
[16:20:29.364]                             if (!grepl(pattern, name)) 
[16:20:29.364]                               next
[16:20:29.364]                             invokeRestart(restart)
[16:20:29.364]                             muffled <- TRUE
[16:20:29.364]                             break
[16:20:29.364]                           }
[16:20:29.364]                         }
[16:20:29.364]                       }
[16:20:29.364]                       invisible(muffled)
[16:20:29.364]                     }
[16:20:29.364]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.364]                   }
[16:20:29.364]                 }
[16:20:29.364]             }
[16:20:29.364]         }))
[16:20:29.364]     }, error = function(ex) {
[16:20:29.364]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.364]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.364]                 ...future.rng), started = ...future.startTime, 
[16:20:29.364]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.364]             version = "1.8"), class = "FutureResult")
[16:20:29.364]     }, finally = {
[16:20:29.364]         if (!identical(...future.workdir, getwd())) 
[16:20:29.364]             setwd(...future.workdir)
[16:20:29.364]         {
[16:20:29.364]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.364]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.364]             }
[16:20:29.364]             base::options(...future.oldOptions)
[16:20:29.364]             if (.Platform$OS.type == "windows") {
[16:20:29.364]                 old_names <- names(...future.oldEnvVars)
[16:20:29.364]                 envs <- base::Sys.getenv()
[16:20:29.364]                 names <- names(envs)
[16:20:29.364]                 common <- intersect(names, old_names)
[16:20:29.364]                 added <- setdiff(names, old_names)
[16:20:29.364]                 removed <- setdiff(old_names, names)
[16:20:29.364]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.364]                   envs[common]]
[16:20:29.364]                 NAMES <- toupper(changed)
[16:20:29.364]                 args <- list()
[16:20:29.364]                 for (kk in seq_along(NAMES)) {
[16:20:29.364]                   name <- changed[[kk]]
[16:20:29.364]                   NAME <- NAMES[[kk]]
[16:20:29.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.364]                     next
[16:20:29.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.364]                 }
[16:20:29.364]                 NAMES <- toupper(added)
[16:20:29.364]                 for (kk in seq_along(NAMES)) {
[16:20:29.364]                   name <- added[[kk]]
[16:20:29.364]                   NAME <- NAMES[[kk]]
[16:20:29.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.364]                     next
[16:20:29.364]                   args[[name]] <- ""
[16:20:29.364]                 }
[16:20:29.364]                 NAMES <- toupper(removed)
[16:20:29.364]                 for (kk in seq_along(NAMES)) {
[16:20:29.364]                   name <- removed[[kk]]
[16:20:29.364]                   NAME <- NAMES[[kk]]
[16:20:29.364]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.364]                     next
[16:20:29.364]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.364]                 }
[16:20:29.364]                 if (length(args) > 0) 
[16:20:29.364]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.364]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.364]             }
[16:20:29.364]             else {
[16:20:29.364]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.364]             }
[16:20:29.364]             {
[16:20:29.364]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.364]                   0L) {
[16:20:29.364]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.364]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.364]                   base::options(opts)
[16:20:29.364]                 }
[16:20:29.364]                 {
[16:20:29.364]                   {
[16:20:29.364]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.364]                     NULL
[16:20:29.364]                   }
[16:20:29.364]                   options(future.plan = NULL)
[16:20:29.364]                   if (is.na(NA_character_)) 
[16:20:29.364]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.364]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.364]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.364]                     .init = FALSE)
[16:20:29.364]                 }
[16:20:29.364]             }
[16:20:29.364]         }
[16:20:29.364]     })
[16:20:29.364]     if (TRUE) {
[16:20:29.364]         base::sink(type = "output", split = FALSE)
[16:20:29.364]         if (TRUE) {
[16:20:29.364]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.364]         }
[16:20:29.364]         else {
[16:20:29.364]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.364]         }
[16:20:29.364]         base::close(...future.stdout)
[16:20:29.364]         ...future.stdout <- NULL
[16:20:29.364]     }
[16:20:29.364]     ...future.result$conditions <- ...future.conditions
[16:20:29.364]     ...future.result$finished <- base::Sys.time()
[16:20:29.364]     ...future.result
[16:20:29.364] }
[16:20:29.366] requestCore(): workers = 2
[16:20:29.369] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[16:20:29.370] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.370] List of future strategies:
[16:20:29.370] 1. sequential:
[16:20:29.370]    - args: function (..., envir = parent.frame())
[16:20:29.370]    - tweaked: FALSE
[16:20:29.370]    - call: NULL
[16:20:29.371] plan(): nbrOfWorkers() = 1
[16:20:29.373] plan(): Setting new future strategy stack:
[16:20:29.373] List of future strategies:
[16:20:29.373] 1. multicore:
[16:20:29.373]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.373]    - tweaked: FALSE
[16:20:29.373]    - call: plan(strategy)
[16:20:29.377] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.379] result() for MulticoreFuture ...
[16:20:29.384] result() for MulticoreFuture ...
[16:20:29.384] result() for MulticoreFuture ... done
[16:20:29.385] result() for MulticoreFuture ... done
[16:20:29.385] result() for MulticoreFuture ...
[16:20:29.385] result() for MulticoreFuture ... done
[16:20:29.385] getGlobalsAndPackages() ...
[16:20:29.385] Searching for globals...
[16:20:29.386] 
[16:20:29.386] Searching for globals ... DONE
[16:20:29.386] - globals: [0] <none>
[16:20:29.386] getGlobalsAndPackages() ... DONE
[16:20:29.386] run() for ‘Future’ ...
[16:20:29.386] - state: ‘created’
[16:20:29.386] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:29.390] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.391] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:29.391]   - Field: ‘label’
[16:20:29.391]   - Field: ‘local’
[16:20:29.391]   - Field: ‘owner’
[16:20:29.391]   - Field: ‘envir’
[16:20:29.391]   - Field: ‘workers’
[16:20:29.391]   - Field: ‘packages’
[16:20:29.391]   - Field: ‘gc’
[16:20:29.391]   - Field: ‘job’
[16:20:29.392]   - Field: ‘conditions’
[16:20:29.392]   - Field: ‘expr’
[16:20:29.392]   - Field: ‘uuid’
[16:20:29.392]   - Field: ‘seed’
[16:20:29.392]   - Field: ‘version’
[16:20:29.392]   - Field: ‘result’
[16:20:29.392]   - Field: ‘asynchronous’
[16:20:29.392]   - Field: ‘calls’
[16:20:29.395]   - Field: ‘globals’
[16:20:29.395]   - Field: ‘stdout’
[16:20:29.396]   - Field: ‘earlySignal’
[16:20:29.396]   - Field: ‘lazy’
[16:20:29.396]   - Field: ‘state’
[16:20:29.396] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:29.396] - Launch lazy future ...
[16:20:29.396] Packages needed by the future expression (n = 0): <none>
[16:20:29.397] Packages needed by future strategies (n = 0): <none>
[16:20:29.397] {
[16:20:29.397]     {
[16:20:29.397]         {
[16:20:29.397]             ...future.startTime <- base::Sys.time()
[16:20:29.397]             {
[16:20:29.397]                 {
[16:20:29.397]                   {
[16:20:29.397]                     {
[16:20:29.397]                       base::local({
[16:20:29.397]                         has_future <- base::requireNamespace("future", 
[16:20:29.397]                           quietly = TRUE)
[16:20:29.397]                         if (has_future) {
[16:20:29.397]                           ns <- base::getNamespace("future")
[16:20:29.397]                           version <- ns[[".package"]][["version"]]
[16:20:29.397]                           if (is.null(version)) 
[16:20:29.397]                             version <- utils::packageVersion("future")
[16:20:29.397]                         }
[16:20:29.397]                         else {
[16:20:29.397]                           version <- NULL
[16:20:29.397]                         }
[16:20:29.397]                         if (!has_future || version < "1.8.0") {
[16:20:29.397]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.397]                             "", base::R.version$version.string), 
[16:20:29.397]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.397]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.397]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.397]                               "release", "version")], collapse = " "), 
[16:20:29.397]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.397]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.397]                             info)
[16:20:29.397]                           info <- base::paste(info, collapse = "; ")
[16:20:29.397]                           if (!has_future) {
[16:20:29.397]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.397]                               info)
[16:20:29.397]                           }
[16:20:29.397]                           else {
[16:20:29.397]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.397]                               info, version)
[16:20:29.397]                           }
[16:20:29.397]                           base::stop(msg)
[16:20:29.397]                         }
[16:20:29.397]                       })
[16:20:29.397]                     }
[16:20:29.397]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.397]                     base::options(mc.cores = 1L)
[16:20:29.397]                   }
[16:20:29.397]                   ...future.strategy.old <- future::plan("list")
[16:20:29.397]                   options(future.plan = NULL)
[16:20:29.397]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.397]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.397]                 }
[16:20:29.397]                 ...future.workdir <- getwd()
[16:20:29.397]             }
[16:20:29.397]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.397]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.397]         }
[16:20:29.397]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.397]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.397]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.397]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.397]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.397]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.397]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.397]             base::names(...future.oldOptions))
[16:20:29.397]     }
[16:20:29.397]     if (FALSE) {
[16:20:29.397]     }
[16:20:29.397]     else {
[16:20:29.397]         if (TRUE) {
[16:20:29.397]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.397]                 open = "w")
[16:20:29.397]         }
[16:20:29.397]         else {
[16:20:29.397]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.397]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.397]         }
[16:20:29.397]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.397]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.397]             base::sink(type = "output", split = FALSE)
[16:20:29.397]             base::close(...future.stdout)
[16:20:29.397]         }, add = TRUE)
[16:20:29.397]     }
[16:20:29.397]     ...future.frame <- base::sys.nframe()
[16:20:29.397]     ...future.conditions <- base::list()
[16:20:29.397]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.397]     if (FALSE) {
[16:20:29.397]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.397]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.397]     }
[16:20:29.397]     ...future.result <- base::tryCatch({
[16:20:29.397]         base::withCallingHandlers({
[16:20:29.397]             ...future.value <- base::withVisible(base::local({
[16:20:29.397]                 withCallingHandlers({
[16:20:29.397]                   42
[16:20:29.397]                 }, immediateCondition = function(cond) {
[16:20:29.397]                   save_rds <- function (object, pathname, ...) 
[16:20:29.397]                   {
[16:20:29.397]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.397]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.397]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.397]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.397]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.397]                         fi_tmp[["mtime"]])
[16:20:29.397]                     }
[16:20:29.397]                     tryCatch({
[16:20:29.397]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.397]                     }, error = function(ex) {
[16:20:29.397]                       msg <- conditionMessage(ex)
[16:20:29.397]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.397]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.397]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.397]                         fi_tmp[["mtime"]], msg)
[16:20:29.397]                       ex$message <- msg
[16:20:29.397]                       stop(ex)
[16:20:29.397]                     })
[16:20:29.397]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.397]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.397]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.397]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.397]                       fi <- file.info(pathname)
[16:20:29.397]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.397]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.397]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.397]                         fi[["size"]], fi[["mtime"]])
[16:20:29.397]                       stop(msg)
[16:20:29.397]                     }
[16:20:29.397]                     invisible(pathname)
[16:20:29.397]                   }
[16:20:29.397]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.397]                     rootPath = tempdir()) 
[16:20:29.397]                   {
[16:20:29.397]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.397]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.397]                       tmpdir = path, fileext = ".rds")
[16:20:29.397]                     save_rds(obj, file)
[16:20:29.397]                   }
[16:20:29.397]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.397]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.397]                   {
[16:20:29.397]                     inherits <- base::inherits
[16:20:29.397]                     invokeRestart <- base::invokeRestart
[16:20:29.397]                     is.null <- base::is.null
[16:20:29.397]                     muffled <- FALSE
[16:20:29.397]                     if (inherits(cond, "message")) {
[16:20:29.397]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.397]                       if (muffled) 
[16:20:29.397]                         invokeRestart("muffleMessage")
[16:20:29.397]                     }
[16:20:29.397]                     else if (inherits(cond, "warning")) {
[16:20:29.397]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.397]                       if (muffled) 
[16:20:29.397]                         invokeRestart("muffleWarning")
[16:20:29.397]                     }
[16:20:29.397]                     else if (inherits(cond, "condition")) {
[16:20:29.397]                       if (!is.null(pattern)) {
[16:20:29.397]                         computeRestarts <- base::computeRestarts
[16:20:29.397]                         grepl <- base::grepl
[16:20:29.397]                         restarts <- computeRestarts(cond)
[16:20:29.397]                         for (restart in restarts) {
[16:20:29.397]                           name <- restart$name
[16:20:29.397]                           if (is.null(name)) 
[16:20:29.397]                             next
[16:20:29.397]                           if (!grepl(pattern, name)) 
[16:20:29.397]                             next
[16:20:29.397]                           invokeRestart(restart)
[16:20:29.397]                           muffled <- TRUE
[16:20:29.397]                           break
[16:20:29.397]                         }
[16:20:29.397]                       }
[16:20:29.397]                     }
[16:20:29.397]                     invisible(muffled)
[16:20:29.397]                   }
[16:20:29.397]                   muffleCondition(cond)
[16:20:29.397]                 })
[16:20:29.397]             }))
[16:20:29.397]             future::FutureResult(value = ...future.value$value, 
[16:20:29.397]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.397]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.397]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.397]                     ...future.globalenv.names))
[16:20:29.397]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.397]         }, condition = base::local({
[16:20:29.397]             c <- base::c
[16:20:29.397]             inherits <- base::inherits
[16:20:29.397]             invokeRestart <- base::invokeRestart
[16:20:29.397]             length <- base::length
[16:20:29.397]             list <- base::list
[16:20:29.397]             seq.int <- base::seq.int
[16:20:29.397]             signalCondition <- base::signalCondition
[16:20:29.397]             sys.calls <- base::sys.calls
[16:20:29.397]             `[[` <- base::`[[`
[16:20:29.397]             `+` <- base::`+`
[16:20:29.397]             `<<-` <- base::`<<-`
[16:20:29.397]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.397]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.397]                   3L)]
[16:20:29.397]             }
[16:20:29.397]             function(cond) {
[16:20:29.397]                 is_error <- inherits(cond, "error")
[16:20:29.397]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.397]                   NULL)
[16:20:29.397]                 if (is_error) {
[16:20:29.397]                   sessionInformation <- function() {
[16:20:29.397]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.397]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.397]                       search = base::search(), system = base::Sys.info())
[16:20:29.397]                   }
[16:20:29.397]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.397]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.397]                     cond$call), session = sessionInformation(), 
[16:20:29.397]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.397]                   signalCondition(cond)
[16:20:29.397]                 }
[16:20:29.397]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.397]                 "immediateCondition"))) {
[16:20:29.397]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.397]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.397]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.397]                   if (TRUE && !signal) {
[16:20:29.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.397]                     {
[16:20:29.397]                       inherits <- base::inherits
[16:20:29.397]                       invokeRestart <- base::invokeRestart
[16:20:29.397]                       is.null <- base::is.null
[16:20:29.397]                       muffled <- FALSE
[16:20:29.397]                       if (inherits(cond, "message")) {
[16:20:29.397]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.397]                         if (muffled) 
[16:20:29.397]                           invokeRestart("muffleMessage")
[16:20:29.397]                       }
[16:20:29.397]                       else if (inherits(cond, "warning")) {
[16:20:29.397]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.397]                         if (muffled) 
[16:20:29.397]                           invokeRestart("muffleWarning")
[16:20:29.397]                       }
[16:20:29.397]                       else if (inherits(cond, "condition")) {
[16:20:29.397]                         if (!is.null(pattern)) {
[16:20:29.397]                           computeRestarts <- base::computeRestarts
[16:20:29.397]                           grepl <- base::grepl
[16:20:29.397]                           restarts <- computeRestarts(cond)
[16:20:29.397]                           for (restart in restarts) {
[16:20:29.397]                             name <- restart$name
[16:20:29.397]                             if (is.null(name)) 
[16:20:29.397]                               next
[16:20:29.397]                             if (!grepl(pattern, name)) 
[16:20:29.397]                               next
[16:20:29.397]                             invokeRestart(restart)
[16:20:29.397]                             muffled <- TRUE
[16:20:29.397]                             break
[16:20:29.397]                           }
[16:20:29.397]                         }
[16:20:29.397]                       }
[16:20:29.397]                       invisible(muffled)
[16:20:29.397]                     }
[16:20:29.397]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.397]                   }
[16:20:29.397]                 }
[16:20:29.397]                 else {
[16:20:29.397]                   if (TRUE) {
[16:20:29.397]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.397]                     {
[16:20:29.397]                       inherits <- base::inherits
[16:20:29.397]                       invokeRestart <- base::invokeRestart
[16:20:29.397]                       is.null <- base::is.null
[16:20:29.397]                       muffled <- FALSE
[16:20:29.397]                       if (inherits(cond, "message")) {
[16:20:29.397]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.397]                         if (muffled) 
[16:20:29.397]                           invokeRestart("muffleMessage")
[16:20:29.397]                       }
[16:20:29.397]                       else if (inherits(cond, "warning")) {
[16:20:29.397]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.397]                         if (muffled) 
[16:20:29.397]                           invokeRestart("muffleWarning")
[16:20:29.397]                       }
[16:20:29.397]                       else if (inherits(cond, "condition")) {
[16:20:29.397]                         if (!is.null(pattern)) {
[16:20:29.397]                           computeRestarts <- base::computeRestarts
[16:20:29.397]                           grepl <- base::grepl
[16:20:29.397]                           restarts <- computeRestarts(cond)
[16:20:29.397]                           for (restart in restarts) {
[16:20:29.397]                             name <- restart$name
[16:20:29.397]                             if (is.null(name)) 
[16:20:29.397]                               next
[16:20:29.397]                             if (!grepl(pattern, name)) 
[16:20:29.397]                               next
[16:20:29.397]                             invokeRestart(restart)
[16:20:29.397]                             muffled <- TRUE
[16:20:29.397]                             break
[16:20:29.397]                           }
[16:20:29.397]                         }
[16:20:29.397]                       }
[16:20:29.397]                       invisible(muffled)
[16:20:29.397]                     }
[16:20:29.397]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.397]                   }
[16:20:29.397]                 }
[16:20:29.397]             }
[16:20:29.397]         }))
[16:20:29.397]     }, error = function(ex) {
[16:20:29.397]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.397]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.397]                 ...future.rng), started = ...future.startTime, 
[16:20:29.397]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.397]             version = "1.8"), class = "FutureResult")
[16:20:29.397]     }, finally = {
[16:20:29.397]         if (!identical(...future.workdir, getwd())) 
[16:20:29.397]             setwd(...future.workdir)
[16:20:29.397]         {
[16:20:29.397]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.397]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.397]             }
[16:20:29.397]             base::options(...future.oldOptions)
[16:20:29.397]             if (.Platform$OS.type == "windows") {
[16:20:29.397]                 old_names <- names(...future.oldEnvVars)
[16:20:29.397]                 envs <- base::Sys.getenv()
[16:20:29.397]                 names <- names(envs)
[16:20:29.397]                 common <- intersect(names, old_names)
[16:20:29.397]                 added <- setdiff(names, old_names)
[16:20:29.397]                 removed <- setdiff(old_names, names)
[16:20:29.397]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.397]                   envs[common]]
[16:20:29.397]                 NAMES <- toupper(changed)
[16:20:29.397]                 args <- list()
[16:20:29.397]                 for (kk in seq_along(NAMES)) {
[16:20:29.397]                   name <- changed[[kk]]
[16:20:29.397]                   NAME <- NAMES[[kk]]
[16:20:29.397]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.397]                     next
[16:20:29.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.397]                 }
[16:20:29.397]                 NAMES <- toupper(added)
[16:20:29.397]                 for (kk in seq_along(NAMES)) {
[16:20:29.397]                   name <- added[[kk]]
[16:20:29.397]                   NAME <- NAMES[[kk]]
[16:20:29.397]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.397]                     next
[16:20:29.397]                   args[[name]] <- ""
[16:20:29.397]                 }
[16:20:29.397]                 NAMES <- toupper(removed)
[16:20:29.397]                 for (kk in seq_along(NAMES)) {
[16:20:29.397]                   name <- removed[[kk]]
[16:20:29.397]                   NAME <- NAMES[[kk]]
[16:20:29.397]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.397]                     next
[16:20:29.397]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.397]                 }
[16:20:29.397]                 if (length(args) > 0) 
[16:20:29.397]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.397]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.397]             }
[16:20:29.397]             else {
[16:20:29.397]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.397]             }
[16:20:29.397]             {
[16:20:29.397]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.397]                   0L) {
[16:20:29.397]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.397]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.397]                   base::options(opts)
[16:20:29.397]                 }
[16:20:29.397]                 {
[16:20:29.397]                   {
[16:20:29.397]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.397]                     NULL
[16:20:29.397]                   }
[16:20:29.397]                   options(future.plan = NULL)
[16:20:29.397]                   if (is.na(NA_character_)) 
[16:20:29.397]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.397]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.397]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.397]                     .init = FALSE)
[16:20:29.397]                 }
[16:20:29.397]             }
[16:20:29.397]         }
[16:20:29.397]     })
[16:20:29.397]     if (TRUE) {
[16:20:29.397]         base::sink(type = "output", split = FALSE)
[16:20:29.397]         if (TRUE) {
[16:20:29.397]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.397]         }
[16:20:29.397]         else {
[16:20:29.397]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.397]         }
[16:20:29.397]         base::close(...future.stdout)
[16:20:29.397]         ...future.stdout <- NULL
[16:20:29.397]     }
[16:20:29.397]     ...future.result$conditions <- ...future.conditions
[16:20:29.397]     ...future.result$finished <- base::Sys.time()
[16:20:29.397]     ...future.result
[16:20:29.397] }
[16:20:29.400] requestCore(): workers = 2
[16:20:29.402] MulticoreFuture started
[16:20:29.402] - Launch lazy future ... done
[16:20:29.402] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
[16:20:29.403] plan(): Setting new future strategy stack:
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.403] List of future strategies:
[16:20:29.403] 1. sequential:
[16:20:29.403]    - args: function (..., envir = parent.frame())
[16:20:29.403]    - tweaked: FALSE
[16:20:29.403]    - call: NULL
[16:20:29.404] plan(): nbrOfWorkers() = 1
[16:20:29.406] plan(): Setting new future strategy stack:
[16:20:29.406] List of future strategies:
[16:20:29.406] 1. multicore:
[16:20:29.406]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.406]    - tweaked: FALSE
[16:20:29.406]    - call: plan(strategy)
[16:20:29.411] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.412] result() for MulticoreFuture ...
[16:20:29.413] result() for MulticoreFuture ...
[16:20:29.413] result() for MulticoreFuture ... done
[16:20:29.414] result() for MulticoreFuture ... done
[16:20:29.414] result() for MulticoreFuture ...
[16:20:29.414] result() for MulticoreFuture ... done
[16:20:29.414] getGlobalsAndPackages() ...
[16:20:29.415] Searching for globals...
[16:20:29.415] - globals found: [1] ‘{’
[16:20:29.416] Searching for globals ... DONE
[16:20:29.416] Resolving globals: FALSE
[16:20:29.416] 
[16:20:29.416] 
[16:20:29.416] getGlobalsAndPackages() ... DONE
[16:20:29.417] run() for ‘Future’ ...
[16:20:29.417] - state: ‘created’
[16:20:29.417] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:29.421] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.421] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:29.421]   - Field: ‘label’
[16:20:29.421]   - Field: ‘local’
[16:20:29.421]   - Field: ‘owner’
[16:20:29.421]   - Field: ‘envir’
[16:20:29.422]   - Field: ‘workers’
[16:20:29.422]   - Field: ‘packages’
[16:20:29.422]   - Field: ‘gc’
[16:20:29.422]   - Field: ‘job’
[16:20:29.422]   - Field: ‘conditions’
[16:20:29.422]   - Field: ‘expr’
[16:20:29.422]   - Field: ‘uuid’
[16:20:29.422]   - Field: ‘seed’
[16:20:29.423]   - Field: ‘version’
[16:20:29.423]   - Field: ‘result’
[16:20:29.423]   - Field: ‘asynchronous’
[16:20:29.423]   - Field: ‘calls’
[16:20:29.423]   - Field: ‘globals’
[16:20:29.423]   - Field: ‘stdout’
[16:20:29.423]   - Field: ‘earlySignal’
[16:20:29.423]   - Field: ‘lazy’
[16:20:29.423]   - Field: ‘state’
[16:20:29.424] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:29.424] - Launch lazy future ...
[16:20:29.424] Packages needed by the future expression (n = 0): <none>
[16:20:29.424] Packages needed by future strategies (n = 0): <none>
[16:20:29.425] {
[16:20:29.425]     {
[16:20:29.425]         {
[16:20:29.425]             ...future.startTime <- base::Sys.time()
[16:20:29.425]             {
[16:20:29.425]                 {
[16:20:29.425]                   {
[16:20:29.425]                     {
[16:20:29.425]                       base::local({
[16:20:29.425]                         has_future <- base::requireNamespace("future", 
[16:20:29.425]                           quietly = TRUE)
[16:20:29.425]                         if (has_future) {
[16:20:29.425]                           ns <- base::getNamespace("future")
[16:20:29.425]                           version <- ns[[".package"]][["version"]]
[16:20:29.425]                           if (is.null(version)) 
[16:20:29.425]                             version <- utils::packageVersion("future")
[16:20:29.425]                         }
[16:20:29.425]                         else {
[16:20:29.425]                           version <- NULL
[16:20:29.425]                         }
[16:20:29.425]                         if (!has_future || version < "1.8.0") {
[16:20:29.425]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.425]                             "", base::R.version$version.string), 
[16:20:29.425]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.425]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.425]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.425]                               "release", "version")], collapse = " "), 
[16:20:29.425]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.425]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.425]                             info)
[16:20:29.425]                           info <- base::paste(info, collapse = "; ")
[16:20:29.425]                           if (!has_future) {
[16:20:29.425]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.425]                               info)
[16:20:29.425]                           }
[16:20:29.425]                           else {
[16:20:29.425]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.425]                               info, version)
[16:20:29.425]                           }
[16:20:29.425]                           base::stop(msg)
[16:20:29.425]                         }
[16:20:29.425]                       })
[16:20:29.425]                     }
[16:20:29.425]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.425]                     base::options(mc.cores = 1L)
[16:20:29.425]                   }
[16:20:29.425]                   ...future.strategy.old <- future::plan("list")
[16:20:29.425]                   options(future.plan = NULL)
[16:20:29.425]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.425]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.425]                 }
[16:20:29.425]                 ...future.workdir <- getwd()
[16:20:29.425]             }
[16:20:29.425]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.425]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.425]         }
[16:20:29.425]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.425]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.425]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.425]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.425]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.425]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.425]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.425]             base::names(...future.oldOptions))
[16:20:29.425]     }
[16:20:29.425]     if (FALSE) {
[16:20:29.425]     }
[16:20:29.425]     else {
[16:20:29.425]         if (TRUE) {
[16:20:29.425]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.425]                 open = "w")
[16:20:29.425]         }
[16:20:29.425]         else {
[16:20:29.425]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.425]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.425]         }
[16:20:29.425]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.425]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.425]             base::sink(type = "output", split = FALSE)
[16:20:29.425]             base::close(...future.stdout)
[16:20:29.425]         }, add = TRUE)
[16:20:29.425]     }
[16:20:29.425]     ...future.frame <- base::sys.nframe()
[16:20:29.425]     ...future.conditions <- base::list()
[16:20:29.425]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.425]     if (FALSE) {
[16:20:29.425]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.425]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.425]     }
[16:20:29.425]     ...future.result <- base::tryCatch({
[16:20:29.425]         base::withCallingHandlers({
[16:20:29.425]             ...future.value <- base::withVisible(base::local({
[16:20:29.425]                 withCallingHandlers({
[16:20:29.425]                   {
[16:20:29.425]                     42
[16:20:29.425]                   }
[16:20:29.425]                 }, immediateCondition = function(cond) {
[16:20:29.425]                   save_rds <- function (object, pathname, ...) 
[16:20:29.425]                   {
[16:20:29.425]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.425]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.425]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.425]                         fi_tmp[["mtime"]])
[16:20:29.425]                     }
[16:20:29.425]                     tryCatch({
[16:20:29.425]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.425]                     }, error = function(ex) {
[16:20:29.425]                       msg <- conditionMessage(ex)
[16:20:29.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.425]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.425]                         fi_tmp[["mtime"]], msg)
[16:20:29.425]                       ex$message <- msg
[16:20:29.425]                       stop(ex)
[16:20:29.425]                     })
[16:20:29.425]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.425]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.425]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.425]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.425]                       fi <- file.info(pathname)
[16:20:29.425]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.425]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.425]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.425]                         fi[["size"]], fi[["mtime"]])
[16:20:29.425]                       stop(msg)
[16:20:29.425]                     }
[16:20:29.425]                     invisible(pathname)
[16:20:29.425]                   }
[16:20:29.425]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.425]                     rootPath = tempdir()) 
[16:20:29.425]                   {
[16:20:29.425]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.425]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.425]                       tmpdir = path, fileext = ".rds")
[16:20:29.425]                     save_rds(obj, file)
[16:20:29.425]                   }
[16:20:29.425]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.425]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.425]                   {
[16:20:29.425]                     inherits <- base::inherits
[16:20:29.425]                     invokeRestart <- base::invokeRestart
[16:20:29.425]                     is.null <- base::is.null
[16:20:29.425]                     muffled <- FALSE
[16:20:29.425]                     if (inherits(cond, "message")) {
[16:20:29.425]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.425]                       if (muffled) 
[16:20:29.425]                         invokeRestart("muffleMessage")
[16:20:29.425]                     }
[16:20:29.425]                     else if (inherits(cond, "warning")) {
[16:20:29.425]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.425]                       if (muffled) 
[16:20:29.425]                         invokeRestart("muffleWarning")
[16:20:29.425]                     }
[16:20:29.425]                     else if (inherits(cond, "condition")) {
[16:20:29.425]                       if (!is.null(pattern)) {
[16:20:29.425]                         computeRestarts <- base::computeRestarts
[16:20:29.425]                         grepl <- base::grepl
[16:20:29.425]                         restarts <- computeRestarts(cond)
[16:20:29.425]                         for (restart in restarts) {
[16:20:29.425]                           name <- restart$name
[16:20:29.425]                           if (is.null(name)) 
[16:20:29.425]                             next
[16:20:29.425]                           if (!grepl(pattern, name)) 
[16:20:29.425]                             next
[16:20:29.425]                           invokeRestart(restart)
[16:20:29.425]                           muffled <- TRUE
[16:20:29.425]                           break
[16:20:29.425]                         }
[16:20:29.425]                       }
[16:20:29.425]                     }
[16:20:29.425]                     invisible(muffled)
[16:20:29.425]                   }
[16:20:29.425]                   muffleCondition(cond)
[16:20:29.425]                 })
[16:20:29.425]             }))
[16:20:29.425]             future::FutureResult(value = ...future.value$value, 
[16:20:29.425]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.425]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.425]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.425]                     ...future.globalenv.names))
[16:20:29.425]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.425]         }, condition = base::local({
[16:20:29.425]             c <- base::c
[16:20:29.425]             inherits <- base::inherits
[16:20:29.425]             invokeRestart <- base::invokeRestart
[16:20:29.425]             length <- base::length
[16:20:29.425]             list <- base::list
[16:20:29.425]             seq.int <- base::seq.int
[16:20:29.425]             signalCondition <- base::signalCondition
[16:20:29.425]             sys.calls <- base::sys.calls
[16:20:29.425]             `[[` <- base::`[[`
[16:20:29.425]             `+` <- base::`+`
[16:20:29.425]             `<<-` <- base::`<<-`
[16:20:29.425]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.425]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.425]                   3L)]
[16:20:29.425]             }
[16:20:29.425]             function(cond) {
[16:20:29.425]                 is_error <- inherits(cond, "error")
[16:20:29.425]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.425]                   NULL)
[16:20:29.425]                 if (is_error) {
[16:20:29.425]                   sessionInformation <- function() {
[16:20:29.425]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.425]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.425]                       search = base::search(), system = base::Sys.info())
[16:20:29.425]                   }
[16:20:29.425]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.425]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.425]                     cond$call), session = sessionInformation(), 
[16:20:29.425]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.425]                   signalCondition(cond)
[16:20:29.425]                 }
[16:20:29.425]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.425]                 "immediateCondition"))) {
[16:20:29.425]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.425]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.425]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.425]                   if (TRUE && !signal) {
[16:20:29.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.425]                     {
[16:20:29.425]                       inherits <- base::inherits
[16:20:29.425]                       invokeRestart <- base::invokeRestart
[16:20:29.425]                       is.null <- base::is.null
[16:20:29.425]                       muffled <- FALSE
[16:20:29.425]                       if (inherits(cond, "message")) {
[16:20:29.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.425]                         if (muffled) 
[16:20:29.425]                           invokeRestart("muffleMessage")
[16:20:29.425]                       }
[16:20:29.425]                       else if (inherits(cond, "warning")) {
[16:20:29.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.425]                         if (muffled) 
[16:20:29.425]                           invokeRestart("muffleWarning")
[16:20:29.425]                       }
[16:20:29.425]                       else if (inherits(cond, "condition")) {
[16:20:29.425]                         if (!is.null(pattern)) {
[16:20:29.425]                           computeRestarts <- base::computeRestarts
[16:20:29.425]                           grepl <- base::grepl
[16:20:29.425]                           restarts <- computeRestarts(cond)
[16:20:29.425]                           for (restart in restarts) {
[16:20:29.425]                             name <- restart$name
[16:20:29.425]                             if (is.null(name)) 
[16:20:29.425]                               next
[16:20:29.425]                             if (!grepl(pattern, name)) 
[16:20:29.425]                               next
[16:20:29.425]                             invokeRestart(restart)
[16:20:29.425]                             muffled <- TRUE
[16:20:29.425]                             break
[16:20:29.425]                           }
[16:20:29.425]                         }
[16:20:29.425]                       }
[16:20:29.425]                       invisible(muffled)
[16:20:29.425]                     }
[16:20:29.425]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.425]                   }
[16:20:29.425]                 }
[16:20:29.425]                 else {
[16:20:29.425]                   if (TRUE) {
[16:20:29.425]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.425]                     {
[16:20:29.425]                       inherits <- base::inherits
[16:20:29.425]                       invokeRestart <- base::invokeRestart
[16:20:29.425]                       is.null <- base::is.null
[16:20:29.425]                       muffled <- FALSE
[16:20:29.425]                       if (inherits(cond, "message")) {
[16:20:29.425]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.425]                         if (muffled) 
[16:20:29.425]                           invokeRestart("muffleMessage")
[16:20:29.425]                       }
[16:20:29.425]                       else if (inherits(cond, "warning")) {
[16:20:29.425]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.425]                         if (muffled) 
[16:20:29.425]                           invokeRestart("muffleWarning")
[16:20:29.425]                       }
[16:20:29.425]                       else if (inherits(cond, "condition")) {
[16:20:29.425]                         if (!is.null(pattern)) {
[16:20:29.425]                           computeRestarts <- base::computeRestarts
[16:20:29.425]                           grepl <- base::grepl
[16:20:29.425]                           restarts <- computeRestarts(cond)
[16:20:29.425]                           for (restart in restarts) {
[16:20:29.425]                             name <- restart$name
[16:20:29.425]                             if (is.null(name)) 
[16:20:29.425]                               next
[16:20:29.425]                             if (!grepl(pattern, name)) 
[16:20:29.425]                               next
[16:20:29.425]                             invokeRestart(restart)
[16:20:29.425]                             muffled <- TRUE
[16:20:29.425]                             break
[16:20:29.425]                           }
[16:20:29.425]                         }
[16:20:29.425]                       }
[16:20:29.425]                       invisible(muffled)
[16:20:29.425]                     }
[16:20:29.425]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.425]                   }
[16:20:29.425]                 }
[16:20:29.425]             }
[16:20:29.425]         }))
[16:20:29.425]     }, error = function(ex) {
[16:20:29.425]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.425]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.425]                 ...future.rng), started = ...future.startTime, 
[16:20:29.425]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.425]             version = "1.8"), class = "FutureResult")
[16:20:29.425]     }, finally = {
[16:20:29.425]         if (!identical(...future.workdir, getwd())) 
[16:20:29.425]             setwd(...future.workdir)
[16:20:29.425]         {
[16:20:29.425]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.425]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.425]             }
[16:20:29.425]             base::options(...future.oldOptions)
[16:20:29.425]             if (.Platform$OS.type == "windows") {
[16:20:29.425]                 old_names <- names(...future.oldEnvVars)
[16:20:29.425]                 envs <- base::Sys.getenv()
[16:20:29.425]                 names <- names(envs)
[16:20:29.425]                 common <- intersect(names, old_names)
[16:20:29.425]                 added <- setdiff(names, old_names)
[16:20:29.425]                 removed <- setdiff(old_names, names)
[16:20:29.425]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.425]                   envs[common]]
[16:20:29.425]                 NAMES <- toupper(changed)
[16:20:29.425]                 args <- list()
[16:20:29.425]                 for (kk in seq_along(NAMES)) {
[16:20:29.425]                   name <- changed[[kk]]
[16:20:29.425]                   NAME <- NAMES[[kk]]
[16:20:29.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.425]                     next
[16:20:29.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.425]                 }
[16:20:29.425]                 NAMES <- toupper(added)
[16:20:29.425]                 for (kk in seq_along(NAMES)) {
[16:20:29.425]                   name <- added[[kk]]
[16:20:29.425]                   NAME <- NAMES[[kk]]
[16:20:29.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.425]                     next
[16:20:29.425]                   args[[name]] <- ""
[16:20:29.425]                 }
[16:20:29.425]                 NAMES <- toupper(removed)
[16:20:29.425]                 for (kk in seq_along(NAMES)) {
[16:20:29.425]                   name <- removed[[kk]]
[16:20:29.425]                   NAME <- NAMES[[kk]]
[16:20:29.425]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.425]                     next
[16:20:29.425]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.425]                 }
[16:20:29.425]                 if (length(args) > 0) 
[16:20:29.425]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.425]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.425]             }
[16:20:29.425]             else {
[16:20:29.425]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.425]             }
[16:20:29.425]             {
[16:20:29.425]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.425]                   0L) {
[16:20:29.425]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.425]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.425]                   base::options(opts)
[16:20:29.425]                 }
[16:20:29.425]                 {
[16:20:29.425]                   {
[16:20:29.425]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.425]                     NULL
[16:20:29.425]                   }
[16:20:29.425]                   options(future.plan = NULL)
[16:20:29.425]                   if (is.na(NA_character_)) 
[16:20:29.425]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.425]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.425]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.425]                     .init = FALSE)
[16:20:29.425]                 }
[16:20:29.425]             }
[16:20:29.425]         }
[16:20:29.425]     })
[16:20:29.425]     if (TRUE) {
[16:20:29.425]         base::sink(type = "output", split = FALSE)
[16:20:29.425]         if (TRUE) {
[16:20:29.425]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.425]         }
[16:20:29.425]         else {
[16:20:29.425]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.425]         }
[16:20:29.425]         base::close(...future.stdout)
[16:20:29.425]         ...future.stdout <- NULL
[16:20:29.425]     }
[16:20:29.425]     ...future.result$conditions <- ...future.conditions
[16:20:29.425]     ...future.result$finished <- base::Sys.time()
[16:20:29.425]     ...future.result
[16:20:29.425] }
[16:20:29.427] requestCore(): workers = 2
[16:20:29.429] MulticoreFuture started
[16:20:29.429] - Launch lazy future ... done
[16:20:29.430] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[16:20:29.430] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.430] List of future strategies:
[16:20:29.430] 1. sequential:
[16:20:29.430]    - args: function (..., envir = parent.frame())
[16:20:29.430]    - tweaked: FALSE
[16:20:29.430]    - call: NULL
[16:20:29.431] plan(): nbrOfWorkers() = 1
[16:20:29.433] plan(): Setting new future strategy stack:
[16:20:29.433] List of future strategies:
[16:20:29.433] 1. multicore:
[16:20:29.433]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.433]    - tweaked: FALSE
[16:20:29.433]    - call: plan(strategy)
[16:20:29.438] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.439] result() for MulticoreFuture ...
[16:20:29.440] result() for MulticoreFuture ...
[16:20:29.440] result() for MulticoreFuture ... done
[16:20:29.440] result() for MulticoreFuture ... done
[16:20:29.440] result() for MulticoreFuture ...
[16:20:29.441] result() for MulticoreFuture ... done
[16:20:29.445] getGlobalsAndPackages() ...
[16:20:29.445] 
[16:20:29.445] - globals: [0] <none>
[16:20:29.445] getGlobalsAndPackages() ... DONE
[16:20:29.446] Packages needed by the future expression (n = 0): <none>
[16:20:29.446] Packages needed by future strategies (n = 0): <none>
[16:20:29.446] {
[16:20:29.446]     {
[16:20:29.446]         {
[16:20:29.446]             ...future.startTime <- base::Sys.time()
[16:20:29.446]             {
[16:20:29.446]                 {
[16:20:29.446]                   {
[16:20:29.446]                     {
[16:20:29.446]                       base::local({
[16:20:29.446]                         has_future <- base::requireNamespace("future", 
[16:20:29.446]                           quietly = TRUE)
[16:20:29.446]                         if (has_future) {
[16:20:29.446]                           ns <- base::getNamespace("future")
[16:20:29.446]                           version <- ns[[".package"]][["version"]]
[16:20:29.446]                           if (is.null(version)) 
[16:20:29.446]                             version <- utils::packageVersion("future")
[16:20:29.446]                         }
[16:20:29.446]                         else {
[16:20:29.446]                           version <- NULL
[16:20:29.446]                         }
[16:20:29.446]                         if (!has_future || version < "1.8.0") {
[16:20:29.446]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.446]                             "", base::R.version$version.string), 
[16:20:29.446]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.446]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.446]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.446]                               "release", "version")], collapse = " "), 
[16:20:29.446]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.446]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.446]                             info)
[16:20:29.446]                           info <- base::paste(info, collapse = "; ")
[16:20:29.446]                           if (!has_future) {
[16:20:29.446]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.446]                               info)
[16:20:29.446]                           }
[16:20:29.446]                           else {
[16:20:29.446]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.446]                               info, version)
[16:20:29.446]                           }
[16:20:29.446]                           base::stop(msg)
[16:20:29.446]                         }
[16:20:29.446]                       })
[16:20:29.446]                     }
[16:20:29.446]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.446]                     base::options(mc.cores = 1L)
[16:20:29.446]                   }
[16:20:29.446]                   ...future.strategy.old <- future::plan("list")
[16:20:29.446]                   options(future.plan = NULL)
[16:20:29.446]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.446]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.446]                 }
[16:20:29.446]                 ...future.workdir <- getwd()
[16:20:29.446]             }
[16:20:29.446]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.446]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.446]         }
[16:20:29.446]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.446]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.446]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.446]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.446]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.446]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.446]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.446]             base::names(...future.oldOptions))
[16:20:29.446]     }
[16:20:29.446]     if (FALSE) {
[16:20:29.446]     }
[16:20:29.446]     else {
[16:20:29.446]         if (TRUE) {
[16:20:29.446]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.446]                 open = "w")
[16:20:29.446]         }
[16:20:29.446]         else {
[16:20:29.446]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.446]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.446]         }
[16:20:29.446]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.446]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.446]             base::sink(type = "output", split = FALSE)
[16:20:29.446]             base::close(...future.stdout)
[16:20:29.446]         }, add = TRUE)
[16:20:29.446]     }
[16:20:29.446]     ...future.frame <- base::sys.nframe()
[16:20:29.446]     ...future.conditions <- base::list()
[16:20:29.446]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.446]     if (FALSE) {
[16:20:29.446]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.446]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.446]     }
[16:20:29.446]     ...future.result <- base::tryCatch({
[16:20:29.446]         base::withCallingHandlers({
[16:20:29.446]             ...future.value <- base::withVisible(base::local({
[16:20:29.446]                 withCallingHandlers({
[16:20:29.446]                   42
[16:20:29.446]                 }, immediateCondition = function(cond) {
[16:20:29.446]                   save_rds <- function (object, pathname, ...) 
[16:20:29.446]                   {
[16:20:29.446]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.446]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.446]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.446]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.446]                         fi_tmp[["mtime"]])
[16:20:29.446]                     }
[16:20:29.446]                     tryCatch({
[16:20:29.446]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.446]                     }, error = function(ex) {
[16:20:29.446]                       msg <- conditionMessage(ex)
[16:20:29.446]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.446]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.446]                         fi_tmp[["mtime"]], msg)
[16:20:29.446]                       ex$message <- msg
[16:20:29.446]                       stop(ex)
[16:20:29.446]                     })
[16:20:29.446]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.446]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.446]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.446]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.446]                       fi <- file.info(pathname)
[16:20:29.446]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.446]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.446]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.446]                         fi[["size"]], fi[["mtime"]])
[16:20:29.446]                       stop(msg)
[16:20:29.446]                     }
[16:20:29.446]                     invisible(pathname)
[16:20:29.446]                   }
[16:20:29.446]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.446]                     rootPath = tempdir()) 
[16:20:29.446]                   {
[16:20:29.446]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.446]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.446]                       tmpdir = path, fileext = ".rds")
[16:20:29.446]                     save_rds(obj, file)
[16:20:29.446]                   }
[16:20:29.446]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.446]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.446]                   {
[16:20:29.446]                     inherits <- base::inherits
[16:20:29.446]                     invokeRestart <- base::invokeRestart
[16:20:29.446]                     is.null <- base::is.null
[16:20:29.446]                     muffled <- FALSE
[16:20:29.446]                     if (inherits(cond, "message")) {
[16:20:29.446]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.446]                       if (muffled) 
[16:20:29.446]                         invokeRestart("muffleMessage")
[16:20:29.446]                     }
[16:20:29.446]                     else if (inherits(cond, "warning")) {
[16:20:29.446]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.446]                       if (muffled) 
[16:20:29.446]                         invokeRestart("muffleWarning")
[16:20:29.446]                     }
[16:20:29.446]                     else if (inherits(cond, "condition")) {
[16:20:29.446]                       if (!is.null(pattern)) {
[16:20:29.446]                         computeRestarts <- base::computeRestarts
[16:20:29.446]                         grepl <- base::grepl
[16:20:29.446]                         restarts <- computeRestarts(cond)
[16:20:29.446]                         for (restart in restarts) {
[16:20:29.446]                           name <- restart$name
[16:20:29.446]                           if (is.null(name)) 
[16:20:29.446]                             next
[16:20:29.446]                           if (!grepl(pattern, name)) 
[16:20:29.446]                             next
[16:20:29.446]                           invokeRestart(restart)
[16:20:29.446]                           muffled <- TRUE
[16:20:29.446]                           break
[16:20:29.446]                         }
[16:20:29.446]                       }
[16:20:29.446]                     }
[16:20:29.446]                     invisible(muffled)
[16:20:29.446]                   }
[16:20:29.446]                   muffleCondition(cond)
[16:20:29.446]                 })
[16:20:29.446]             }))
[16:20:29.446]             future::FutureResult(value = ...future.value$value, 
[16:20:29.446]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.446]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.446]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.446]                     ...future.globalenv.names))
[16:20:29.446]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.446]         }, condition = base::local({
[16:20:29.446]             c <- base::c
[16:20:29.446]             inherits <- base::inherits
[16:20:29.446]             invokeRestart <- base::invokeRestart
[16:20:29.446]             length <- base::length
[16:20:29.446]             list <- base::list
[16:20:29.446]             seq.int <- base::seq.int
[16:20:29.446]             signalCondition <- base::signalCondition
[16:20:29.446]             sys.calls <- base::sys.calls
[16:20:29.446]             `[[` <- base::`[[`
[16:20:29.446]             `+` <- base::`+`
[16:20:29.446]             `<<-` <- base::`<<-`
[16:20:29.446]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.446]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.446]                   3L)]
[16:20:29.446]             }
[16:20:29.446]             function(cond) {
[16:20:29.446]                 is_error <- inherits(cond, "error")
[16:20:29.446]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.446]                   NULL)
[16:20:29.446]                 if (is_error) {
[16:20:29.446]                   sessionInformation <- function() {
[16:20:29.446]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.446]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.446]                       search = base::search(), system = base::Sys.info())
[16:20:29.446]                   }
[16:20:29.446]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.446]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.446]                     cond$call), session = sessionInformation(), 
[16:20:29.446]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.446]                   signalCondition(cond)
[16:20:29.446]                 }
[16:20:29.446]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.446]                 "immediateCondition"))) {
[16:20:29.446]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.446]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.446]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.446]                   if (TRUE && !signal) {
[16:20:29.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.446]                     {
[16:20:29.446]                       inherits <- base::inherits
[16:20:29.446]                       invokeRestart <- base::invokeRestart
[16:20:29.446]                       is.null <- base::is.null
[16:20:29.446]                       muffled <- FALSE
[16:20:29.446]                       if (inherits(cond, "message")) {
[16:20:29.446]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.446]                         if (muffled) 
[16:20:29.446]                           invokeRestart("muffleMessage")
[16:20:29.446]                       }
[16:20:29.446]                       else if (inherits(cond, "warning")) {
[16:20:29.446]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.446]                         if (muffled) 
[16:20:29.446]                           invokeRestart("muffleWarning")
[16:20:29.446]                       }
[16:20:29.446]                       else if (inherits(cond, "condition")) {
[16:20:29.446]                         if (!is.null(pattern)) {
[16:20:29.446]                           computeRestarts <- base::computeRestarts
[16:20:29.446]                           grepl <- base::grepl
[16:20:29.446]                           restarts <- computeRestarts(cond)
[16:20:29.446]                           for (restart in restarts) {
[16:20:29.446]                             name <- restart$name
[16:20:29.446]                             if (is.null(name)) 
[16:20:29.446]                               next
[16:20:29.446]                             if (!grepl(pattern, name)) 
[16:20:29.446]                               next
[16:20:29.446]                             invokeRestart(restart)
[16:20:29.446]                             muffled <- TRUE
[16:20:29.446]                             break
[16:20:29.446]                           }
[16:20:29.446]                         }
[16:20:29.446]                       }
[16:20:29.446]                       invisible(muffled)
[16:20:29.446]                     }
[16:20:29.446]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.446]                   }
[16:20:29.446]                 }
[16:20:29.446]                 else {
[16:20:29.446]                   if (TRUE) {
[16:20:29.446]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.446]                     {
[16:20:29.446]                       inherits <- base::inherits
[16:20:29.446]                       invokeRestart <- base::invokeRestart
[16:20:29.446]                       is.null <- base::is.null
[16:20:29.446]                       muffled <- FALSE
[16:20:29.446]                       if (inherits(cond, "message")) {
[16:20:29.446]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.446]                         if (muffled) 
[16:20:29.446]                           invokeRestart("muffleMessage")
[16:20:29.446]                       }
[16:20:29.446]                       else if (inherits(cond, "warning")) {
[16:20:29.446]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.446]                         if (muffled) 
[16:20:29.446]                           invokeRestart("muffleWarning")
[16:20:29.446]                       }
[16:20:29.446]                       else if (inherits(cond, "condition")) {
[16:20:29.446]                         if (!is.null(pattern)) {
[16:20:29.446]                           computeRestarts <- base::computeRestarts
[16:20:29.446]                           grepl <- base::grepl
[16:20:29.446]                           restarts <- computeRestarts(cond)
[16:20:29.446]                           for (restart in restarts) {
[16:20:29.446]                             name <- restart$name
[16:20:29.446]                             if (is.null(name)) 
[16:20:29.446]                               next
[16:20:29.446]                             if (!grepl(pattern, name)) 
[16:20:29.446]                               next
[16:20:29.446]                             invokeRestart(restart)
[16:20:29.446]                             muffled <- TRUE
[16:20:29.446]                             break
[16:20:29.446]                           }
[16:20:29.446]                         }
[16:20:29.446]                       }
[16:20:29.446]                       invisible(muffled)
[16:20:29.446]                     }
[16:20:29.446]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.446]                   }
[16:20:29.446]                 }
[16:20:29.446]             }
[16:20:29.446]         }))
[16:20:29.446]     }, error = function(ex) {
[16:20:29.446]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.446]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.446]                 ...future.rng), started = ...future.startTime, 
[16:20:29.446]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.446]             version = "1.8"), class = "FutureResult")
[16:20:29.446]     }, finally = {
[16:20:29.446]         if (!identical(...future.workdir, getwd())) 
[16:20:29.446]             setwd(...future.workdir)
[16:20:29.446]         {
[16:20:29.446]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.446]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.446]             }
[16:20:29.446]             base::options(...future.oldOptions)
[16:20:29.446]             if (.Platform$OS.type == "windows") {
[16:20:29.446]                 old_names <- names(...future.oldEnvVars)
[16:20:29.446]                 envs <- base::Sys.getenv()
[16:20:29.446]                 names <- names(envs)
[16:20:29.446]                 common <- intersect(names, old_names)
[16:20:29.446]                 added <- setdiff(names, old_names)
[16:20:29.446]                 removed <- setdiff(old_names, names)
[16:20:29.446]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.446]                   envs[common]]
[16:20:29.446]                 NAMES <- toupper(changed)
[16:20:29.446]                 args <- list()
[16:20:29.446]                 for (kk in seq_along(NAMES)) {
[16:20:29.446]                   name <- changed[[kk]]
[16:20:29.446]                   NAME <- NAMES[[kk]]
[16:20:29.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.446]                     next
[16:20:29.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.446]                 }
[16:20:29.446]                 NAMES <- toupper(added)
[16:20:29.446]                 for (kk in seq_along(NAMES)) {
[16:20:29.446]                   name <- added[[kk]]
[16:20:29.446]                   NAME <- NAMES[[kk]]
[16:20:29.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.446]                     next
[16:20:29.446]                   args[[name]] <- ""
[16:20:29.446]                 }
[16:20:29.446]                 NAMES <- toupper(removed)
[16:20:29.446]                 for (kk in seq_along(NAMES)) {
[16:20:29.446]                   name <- removed[[kk]]
[16:20:29.446]                   NAME <- NAMES[[kk]]
[16:20:29.446]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.446]                     next
[16:20:29.446]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.446]                 }
[16:20:29.446]                 if (length(args) > 0) 
[16:20:29.446]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.446]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.446]             }
[16:20:29.446]             else {
[16:20:29.446]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.446]             }
[16:20:29.446]             {
[16:20:29.446]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.446]                   0L) {
[16:20:29.446]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.446]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.446]                   base::options(opts)
[16:20:29.446]                 }
[16:20:29.446]                 {
[16:20:29.446]                   {
[16:20:29.446]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.446]                     NULL
[16:20:29.446]                   }
[16:20:29.446]                   options(future.plan = NULL)
[16:20:29.446]                   if (is.na(NA_character_)) 
[16:20:29.446]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.446]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.446]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.446]                     .init = FALSE)
[16:20:29.446]                 }
[16:20:29.446]             }
[16:20:29.446]         }
[16:20:29.446]     })
[16:20:29.446]     if (TRUE) {
[16:20:29.446]         base::sink(type = "output", split = FALSE)
[16:20:29.446]         if (TRUE) {
[16:20:29.446]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.446]         }
[16:20:29.446]         else {
[16:20:29.446]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.446]         }
[16:20:29.446]         base::close(...future.stdout)
[16:20:29.446]         ...future.stdout <- NULL
[16:20:29.446]     }
[16:20:29.446]     ...future.result$conditions <- ...future.conditions
[16:20:29.446]     ...future.result$finished <- base::Sys.time()
[16:20:29.446]     ...future.result
[16:20:29.446] }
[16:20:29.449] requestCore(): workers = 2
[16:20:29.451] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.452] plan(): Setting new future strategy stack:
[16:20:29.452] List of future strategies:
[16:20:29.452] 1. sequential:
[16:20:29.452]    - args: function (..., envir = parent.frame())
[16:20:29.452]    - tweaked: FALSE
[16:20:29.452]    - call: NULL
[16:20:29.453] plan(): nbrOfWorkers() = 1
[16:20:29.455] plan(): Setting new future strategy stack:
[16:20:29.455] List of future strategies:
[16:20:29.455] 1. multicore:
[16:20:29.455]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.455]    - tweaked: FALSE
[16:20:29.455]    - call: plan(strategy)
[16:20:29.460] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.461] result() for MulticoreFuture ...
[16:20:29.462] result() for MulticoreFuture ...
[16:20:29.462] result() for MulticoreFuture ... done
[16:20:29.462] result() for MulticoreFuture ... done
[16:20:29.462] result() for MulticoreFuture ...
[16:20:29.462] result() for MulticoreFuture ... done
[16:20:29.462] getGlobalsAndPackages() ...
[16:20:29.463] Searching for globals...
[16:20:29.463] 
[16:20:29.463] Searching for globals ... DONE
[16:20:29.464] - globals: [0] <none>
[16:20:29.464] getGlobalsAndPackages() ... DONE
[16:20:29.464] run() for ‘Future’ ...
[16:20:29.464] - state: ‘created’
[16:20:29.464] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:29.468] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.469] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:29.469]   - Field: ‘label’
[16:20:29.469]   - Field: ‘local’
[16:20:29.469]   - Field: ‘owner’
[16:20:29.469]   - Field: ‘envir’
[16:20:29.469]   - Field: ‘workers’
[16:20:29.469]   - Field: ‘packages’
[16:20:29.469]   - Field: ‘gc’
[16:20:29.469]   - Field: ‘job’
[16:20:29.470]   - Field: ‘conditions’
[16:20:29.470]   - Field: ‘expr’
[16:20:29.470]   - Field: ‘uuid’
[16:20:29.470]   - Field: ‘seed’
[16:20:29.470]   - Field: ‘version’
[16:20:29.470]   - Field: ‘result’
[16:20:29.470]   - Field: ‘asynchronous’
[16:20:29.470]   - Field: ‘calls’
[16:20:29.470]   - Field: ‘globals’
[16:20:29.471]   - Field: ‘stdout’
[16:20:29.471]   - Field: ‘earlySignal’
[16:20:29.471]   - Field: ‘lazy’
[16:20:29.471]   - Field: ‘state’
[16:20:29.471] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:29.471] - Launch lazy future ...
[16:20:29.471] Packages needed by the future expression (n = 0): <none>
[16:20:29.472] Packages needed by future strategies (n = 0): <none>
[16:20:29.472] {
[16:20:29.472]     {
[16:20:29.472]         {
[16:20:29.472]             ...future.startTime <- base::Sys.time()
[16:20:29.472]             {
[16:20:29.472]                 {
[16:20:29.472]                   {
[16:20:29.472]                     {
[16:20:29.472]                       base::local({
[16:20:29.472]                         has_future <- base::requireNamespace("future", 
[16:20:29.472]                           quietly = TRUE)
[16:20:29.472]                         if (has_future) {
[16:20:29.472]                           ns <- base::getNamespace("future")
[16:20:29.472]                           version <- ns[[".package"]][["version"]]
[16:20:29.472]                           if (is.null(version)) 
[16:20:29.472]                             version <- utils::packageVersion("future")
[16:20:29.472]                         }
[16:20:29.472]                         else {
[16:20:29.472]                           version <- NULL
[16:20:29.472]                         }
[16:20:29.472]                         if (!has_future || version < "1.8.0") {
[16:20:29.472]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.472]                             "", base::R.version$version.string), 
[16:20:29.472]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.472]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.472]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.472]                               "release", "version")], collapse = " "), 
[16:20:29.472]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.472]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.472]                             info)
[16:20:29.472]                           info <- base::paste(info, collapse = "; ")
[16:20:29.472]                           if (!has_future) {
[16:20:29.472]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.472]                               info)
[16:20:29.472]                           }
[16:20:29.472]                           else {
[16:20:29.472]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.472]                               info, version)
[16:20:29.472]                           }
[16:20:29.472]                           base::stop(msg)
[16:20:29.472]                         }
[16:20:29.472]                       })
[16:20:29.472]                     }
[16:20:29.472]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.472]                     base::options(mc.cores = 1L)
[16:20:29.472]                   }
[16:20:29.472]                   ...future.strategy.old <- future::plan("list")
[16:20:29.472]                   options(future.plan = NULL)
[16:20:29.472]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.472]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.472]                 }
[16:20:29.472]                 ...future.workdir <- getwd()
[16:20:29.472]             }
[16:20:29.472]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.472]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.472]         }
[16:20:29.472]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.472]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.472]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.472]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.472]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.472]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.472]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.472]             base::names(...future.oldOptions))
[16:20:29.472]     }
[16:20:29.472]     if (FALSE) {
[16:20:29.472]     }
[16:20:29.472]     else {
[16:20:29.472]         if (TRUE) {
[16:20:29.472]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.472]                 open = "w")
[16:20:29.472]         }
[16:20:29.472]         else {
[16:20:29.472]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.472]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.472]         }
[16:20:29.472]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.472]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.472]             base::sink(type = "output", split = FALSE)
[16:20:29.472]             base::close(...future.stdout)
[16:20:29.472]         }, add = TRUE)
[16:20:29.472]     }
[16:20:29.472]     ...future.frame <- base::sys.nframe()
[16:20:29.472]     ...future.conditions <- base::list()
[16:20:29.472]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.472]     if (FALSE) {
[16:20:29.472]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.472]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.472]     }
[16:20:29.472]     ...future.result <- base::tryCatch({
[16:20:29.472]         base::withCallingHandlers({
[16:20:29.472]             ...future.value <- base::withVisible(base::local({
[16:20:29.472]                 withCallingHandlers({
[16:20:29.472]                   42
[16:20:29.472]                 }, immediateCondition = function(cond) {
[16:20:29.472]                   save_rds <- function (object, pathname, ...) 
[16:20:29.472]                   {
[16:20:29.472]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.472]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.472]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.472]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.472]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.472]                         fi_tmp[["mtime"]])
[16:20:29.472]                     }
[16:20:29.472]                     tryCatch({
[16:20:29.472]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.472]                     }, error = function(ex) {
[16:20:29.472]                       msg <- conditionMessage(ex)
[16:20:29.472]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.472]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.472]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.472]                         fi_tmp[["mtime"]], msg)
[16:20:29.472]                       ex$message <- msg
[16:20:29.472]                       stop(ex)
[16:20:29.472]                     })
[16:20:29.472]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.472]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.472]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.472]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.472]                       fi <- file.info(pathname)
[16:20:29.472]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.472]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.472]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.472]                         fi[["size"]], fi[["mtime"]])
[16:20:29.472]                       stop(msg)
[16:20:29.472]                     }
[16:20:29.472]                     invisible(pathname)
[16:20:29.472]                   }
[16:20:29.472]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.472]                     rootPath = tempdir()) 
[16:20:29.472]                   {
[16:20:29.472]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.472]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.472]                       tmpdir = path, fileext = ".rds")
[16:20:29.472]                     save_rds(obj, file)
[16:20:29.472]                   }
[16:20:29.472]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.472]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.472]                   {
[16:20:29.472]                     inherits <- base::inherits
[16:20:29.472]                     invokeRestart <- base::invokeRestart
[16:20:29.472]                     is.null <- base::is.null
[16:20:29.472]                     muffled <- FALSE
[16:20:29.472]                     if (inherits(cond, "message")) {
[16:20:29.472]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.472]                       if (muffled) 
[16:20:29.472]                         invokeRestart("muffleMessage")
[16:20:29.472]                     }
[16:20:29.472]                     else if (inherits(cond, "warning")) {
[16:20:29.472]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.472]                       if (muffled) 
[16:20:29.472]                         invokeRestart("muffleWarning")
[16:20:29.472]                     }
[16:20:29.472]                     else if (inherits(cond, "condition")) {
[16:20:29.472]                       if (!is.null(pattern)) {
[16:20:29.472]                         computeRestarts <- base::computeRestarts
[16:20:29.472]                         grepl <- base::grepl
[16:20:29.472]                         restarts <- computeRestarts(cond)
[16:20:29.472]                         for (restart in restarts) {
[16:20:29.472]                           name <- restart$name
[16:20:29.472]                           if (is.null(name)) 
[16:20:29.472]                             next
[16:20:29.472]                           if (!grepl(pattern, name)) 
[16:20:29.472]                             next
[16:20:29.472]                           invokeRestart(restart)
[16:20:29.472]                           muffled <- TRUE
[16:20:29.472]                           break
[16:20:29.472]                         }
[16:20:29.472]                       }
[16:20:29.472]                     }
[16:20:29.472]                     invisible(muffled)
[16:20:29.472]                   }
[16:20:29.472]                   muffleCondition(cond)
[16:20:29.472]                 })
[16:20:29.472]             }))
[16:20:29.472]             future::FutureResult(value = ...future.value$value, 
[16:20:29.472]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.472]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.472]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.472]                     ...future.globalenv.names))
[16:20:29.472]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.472]         }, condition = base::local({
[16:20:29.472]             c <- base::c
[16:20:29.472]             inherits <- base::inherits
[16:20:29.472]             invokeRestart <- base::invokeRestart
[16:20:29.472]             length <- base::length
[16:20:29.472]             list <- base::list
[16:20:29.472]             seq.int <- base::seq.int
[16:20:29.472]             signalCondition <- base::signalCondition
[16:20:29.472]             sys.calls <- base::sys.calls
[16:20:29.472]             `[[` <- base::`[[`
[16:20:29.472]             `+` <- base::`+`
[16:20:29.472]             `<<-` <- base::`<<-`
[16:20:29.472]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.472]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.472]                   3L)]
[16:20:29.472]             }
[16:20:29.472]             function(cond) {
[16:20:29.472]                 is_error <- inherits(cond, "error")
[16:20:29.472]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.472]                   NULL)
[16:20:29.472]                 if (is_error) {
[16:20:29.472]                   sessionInformation <- function() {
[16:20:29.472]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.472]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.472]                       search = base::search(), system = base::Sys.info())
[16:20:29.472]                   }
[16:20:29.472]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.472]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.472]                     cond$call), session = sessionInformation(), 
[16:20:29.472]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.472]                   signalCondition(cond)
[16:20:29.472]                 }
[16:20:29.472]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.472]                 "immediateCondition"))) {
[16:20:29.472]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.472]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.472]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.472]                   if (TRUE && !signal) {
[16:20:29.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.472]                     {
[16:20:29.472]                       inherits <- base::inherits
[16:20:29.472]                       invokeRestart <- base::invokeRestart
[16:20:29.472]                       is.null <- base::is.null
[16:20:29.472]                       muffled <- FALSE
[16:20:29.472]                       if (inherits(cond, "message")) {
[16:20:29.472]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.472]                         if (muffled) 
[16:20:29.472]                           invokeRestart("muffleMessage")
[16:20:29.472]                       }
[16:20:29.472]                       else if (inherits(cond, "warning")) {
[16:20:29.472]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.472]                         if (muffled) 
[16:20:29.472]                           invokeRestart("muffleWarning")
[16:20:29.472]                       }
[16:20:29.472]                       else if (inherits(cond, "condition")) {
[16:20:29.472]                         if (!is.null(pattern)) {
[16:20:29.472]                           computeRestarts <- base::computeRestarts
[16:20:29.472]                           grepl <- base::grepl
[16:20:29.472]                           restarts <- computeRestarts(cond)
[16:20:29.472]                           for (restart in restarts) {
[16:20:29.472]                             name <- restart$name
[16:20:29.472]                             if (is.null(name)) 
[16:20:29.472]                               next
[16:20:29.472]                             if (!grepl(pattern, name)) 
[16:20:29.472]                               next
[16:20:29.472]                             invokeRestart(restart)
[16:20:29.472]                             muffled <- TRUE
[16:20:29.472]                             break
[16:20:29.472]                           }
[16:20:29.472]                         }
[16:20:29.472]                       }
[16:20:29.472]                       invisible(muffled)
[16:20:29.472]                     }
[16:20:29.472]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.472]                   }
[16:20:29.472]                 }
[16:20:29.472]                 else {
[16:20:29.472]                   if (TRUE) {
[16:20:29.472]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.472]                     {
[16:20:29.472]                       inherits <- base::inherits
[16:20:29.472]                       invokeRestart <- base::invokeRestart
[16:20:29.472]                       is.null <- base::is.null
[16:20:29.472]                       muffled <- FALSE
[16:20:29.472]                       if (inherits(cond, "message")) {
[16:20:29.472]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.472]                         if (muffled) 
[16:20:29.472]                           invokeRestart("muffleMessage")
[16:20:29.472]                       }
[16:20:29.472]                       else if (inherits(cond, "warning")) {
[16:20:29.472]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.472]                         if (muffled) 
[16:20:29.472]                           invokeRestart("muffleWarning")
[16:20:29.472]                       }
[16:20:29.472]                       else if (inherits(cond, "condition")) {
[16:20:29.472]                         if (!is.null(pattern)) {
[16:20:29.472]                           computeRestarts <- base::computeRestarts
[16:20:29.472]                           grepl <- base::grepl
[16:20:29.472]                           restarts <- computeRestarts(cond)
[16:20:29.472]                           for (restart in restarts) {
[16:20:29.472]                             name <- restart$name
[16:20:29.472]                             if (is.null(name)) 
[16:20:29.472]                               next
[16:20:29.472]                             if (!grepl(pattern, name)) 
[16:20:29.472]                               next
[16:20:29.472]                             invokeRestart(restart)
[16:20:29.472]                             muffled <- TRUE
[16:20:29.472]                             break
[16:20:29.472]                           }
[16:20:29.472]                         }
[16:20:29.472]                       }
[16:20:29.472]                       invisible(muffled)
[16:20:29.472]                     }
[16:20:29.472]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.472]                   }
[16:20:29.472]                 }
[16:20:29.472]             }
[16:20:29.472]         }))
[16:20:29.472]     }, error = function(ex) {
[16:20:29.472]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.472]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.472]                 ...future.rng), started = ...future.startTime, 
[16:20:29.472]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.472]             version = "1.8"), class = "FutureResult")
[16:20:29.472]     }, finally = {
[16:20:29.472]         if (!identical(...future.workdir, getwd())) 
[16:20:29.472]             setwd(...future.workdir)
[16:20:29.472]         {
[16:20:29.472]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.472]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.472]             }
[16:20:29.472]             base::options(...future.oldOptions)
[16:20:29.472]             if (.Platform$OS.type == "windows") {
[16:20:29.472]                 old_names <- names(...future.oldEnvVars)
[16:20:29.472]                 envs <- base::Sys.getenv()
[16:20:29.472]                 names <- names(envs)
[16:20:29.472]                 common <- intersect(names, old_names)
[16:20:29.472]                 added <- setdiff(names, old_names)
[16:20:29.472]                 removed <- setdiff(old_names, names)
[16:20:29.472]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.472]                   envs[common]]
[16:20:29.472]                 NAMES <- toupper(changed)
[16:20:29.472]                 args <- list()
[16:20:29.472]                 for (kk in seq_along(NAMES)) {
[16:20:29.472]                   name <- changed[[kk]]
[16:20:29.472]                   NAME <- NAMES[[kk]]
[16:20:29.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.472]                     next
[16:20:29.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.472]                 }
[16:20:29.472]                 NAMES <- toupper(added)
[16:20:29.472]                 for (kk in seq_along(NAMES)) {
[16:20:29.472]                   name <- added[[kk]]
[16:20:29.472]                   NAME <- NAMES[[kk]]
[16:20:29.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.472]                     next
[16:20:29.472]                   args[[name]] <- ""
[16:20:29.472]                 }
[16:20:29.472]                 NAMES <- toupper(removed)
[16:20:29.472]                 for (kk in seq_along(NAMES)) {
[16:20:29.472]                   name <- removed[[kk]]
[16:20:29.472]                   NAME <- NAMES[[kk]]
[16:20:29.472]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.472]                     next
[16:20:29.472]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.472]                 }
[16:20:29.472]                 if (length(args) > 0) 
[16:20:29.472]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.472]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.472]             }
[16:20:29.472]             else {
[16:20:29.472]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.472]             }
[16:20:29.472]             {
[16:20:29.472]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.472]                   0L) {
[16:20:29.472]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.472]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.472]                   base::options(opts)
[16:20:29.472]                 }
[16:20:29.472]                 {
[16:20:29.472]                   {
[16:20:29.472]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.472]                     NULL
[16:20:29.472]                   }
[16:20:29.472]                   options(future.plan = NULL)
[16:20:29.472]                   if (is.na(NA_character_)) 
[16:20:29.472]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.472]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.472]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.472]                     .init = FALSE)
[16:20:29.472]                 }
[16:20:29.472]             }
[16:20:29.472]         }
[16:20:29.472]     })
[16:20:29.472]     if (TRUE) {
[16:20:29.472]         base::sink(type = "output", split = FALSE)
[16:20:29.472]         if (TRUE) {
[16:20:29.472]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.472]         }
[16:20:29.472]         else {
[16:20:29.472]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.472]         }
[16:20:29.472]         base::close(...future.stdout)
[16:20:29.472]         ...future.stdout <- NULL
[16:20:29.472]     }
[16:20:29.472]     ...future.result$conditions <- ...future.conditions
[16:20:29.472]     ...future.result$finished <- base::Sys.time()
[16:20:29.472]     ...future.result
[16:20:29.472] }
[16:20:29.475] requestCore(): workers = 2
[16:20:29.477] MulticoreFuture started
[16:20:29.477] - Launch lazy future ... done
[16:20:29.477] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.478] plan(): Setting new future strategy stack:
[16:20:29.478] List of future strategies:
[16:20:29.478] 1. sequential:
[16:20:29.478]    - args: function (..., envir = parent.frame())
[16:20:29.478]    - tweaked: FALSE
[16:20:29.478]    - call: NULL
[16:20:29.479] plan(): nbrOfWorkers() = 1
[16:20:29.481] plan(): Setting new future strategy stack:
[16:20:29.481] List of future strategies:
[16:20:29.481] 1. multicore:
[16:20:29.481]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.481]    - tweaked: FALSE
[16:20:29.481]    - call: plan(strategy)
[16:20:29.486] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.486] result() for MulticoreFuture ...
[16:20:29.487] result() for MulticoreFuture ...
[16:20:29.487] result() for MulticoreFuture ... done
[16:20:29.488] result() for MulticoreFuture ... done
[16:20:29.488] result() for MulticoreFuture ...
[16:20:29.488] result() for MulticoreFuture ... done
[16:20:29.488] getGlobalsAndPackages() ...
[16:20:29.488] Searching for globals...
[16:20:29.489] - globals found: [1] ‘{’
[16:20:29.489] Searching for globals ... DONE
[16:20:29.490] Resolving globals: FALSE
[16:20:29.490] 
[16:20:29.490] 
[16:20:29.490] getGlobalsAndPackages() ... DONE
[16:20:29.490] run() for ‘Future’ ...
[16:20:29.491] - state: ‘created’
[16:20:29.491] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:20:29.498] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.498] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:20:29.498]   - Field: ‘label’
[16:20:29.498]   - Field: ‘local’
[16:20:29.498]   - Field: ‘owner’
[16:20:29.499]   - Field: ‘envir’
[16:20:29.499]   - Field: ‘workers’
[16:20:29.499]   - Field: ‘packages’
[16:20:29.499]   - Field: ‘gc’
[16:20:29.499]   - Field: ‘job’
[16:20:29.499]   - Field: ‘conditions’
[16:20:29.499]   - Field: ‘expr’
[16:20:29.500]   - Field: ‘uuid’
[16:20:29.500]   - Field: ‘seed’
[16:20:29.500]   - Field: ‘version’
[16:20:29.500]   - Field: ‘result’
[16:20:29.500]   - Field: ‘asynchronous’
[16:20:29.500]   - Field: ‘calls’
[16:20:29.500]   - Field: ‘globals’
[16:20:29.501]   - Field: ‘stdout’
[16:20:29.501]   - Field: ‘earlySignal’
[16:20:29.501]   - Field: ‘lazy’
[16:20:29.501]   - Field: ‘state’
[16:20:29.501] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:20:29.501] - Launch lazy future ...
[16:20:29.501] Packages needed by the future expression (n = 0): <none>
[16:20:29.502] Packages needed by future strategies (n = 0): <none>
[16:20:29.502] {
[16:20:29.502]     {
[16:20:29.502]         {
[16:20:29.502]             ...future.startTime <- base::Sys.time()
[16:20:29.502]             {
[16:20:29.502]                 {
[16:20:29.502]                   {
[16:20:29.502]                     {
[16:20:29.502]                       base::local({
[16:20:29.502]                         has_future <- base::requireNamespace("future", 
[16:20:29.502]                           quietly = TRUE)
[16:20:29.502]                         if (has_future) {
[16:20:29.502]                           ns <- base::getNamespace("future")
[16:20:29.502]                           version <- ns[[".package"]][["version"]]
[16:20:29.502]                           if (is.null(version)) 
[16:20:29.502]                             version <- utils::packageVersion("future")
[16:20:29.502]                         }
[16:20:29.502]                         else {
[16:20:29.502]                           version <- NULL
[16:20:29.502]                         }
[16:20:29.502]                         if (!has_future || version < "1.8.0") {
[16:20:29.502]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:29.502]                             "", base::R.version$version.string), 
[16:20:29.502]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:29.502]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:29.502]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:29.502]                               "release", "version")], collapse = " "), 
[16:20:29.502]                             hostname = base::Sys.info()[["nodename"]])
[16:20:29.502]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:29.502]                             info)
[16:20:29.502]                           info <- base::paste(info, collapse = "; ")
[16:20:29.502]                           if (!has_future) {
[16:20:29.502]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:29.502]                               info)
[16:20:29.502]                           }
[16:20:29.502]                           else {
[16:20:29.502]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:29.502]                               info, version)
[16:20:29.502]                           }
[16:20:29.502]                           base::stop(msg)
[16:20:29.502]                         }
[16:20:29.502]                       })
[16:20:29.502]                     }
[16:20:29.502]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:29.502]                     base::options(mc.cores = 1L)
[16:20:29.502]                   }
[16:20:29.502]                   ...future.strategy.old <- future::plan("list")
[16:20:29.502]                   options(future.plan = NULL)
[16:20:29.502]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.502]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:29.502]                 }
[16:20:29.502]                 ...future.workdir <- getwd()
[16:20:29.502]             }
[16:20:29.502]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:29.502]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:29.502]         }
[16:20:29.502]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:29.502]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:29.502]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:29.502]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:29.502]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:29.502]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:29.502]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:29.502]             base::names(...future.oldOptions))
[16:20:29.502]     }
[16:20:29.502]     if (FALSE) {
[16:20:29.502]     }
[16:20:29.502]     else {
[16:20:29.502]         if (TRUE) {
[16:20:29.502]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:29.502]                 open = "w")
[16:20:29.502]         }
[16:20:29.502]         else {
[16:20:29.502]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:29.502]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:29.502]         }
[16:20:29.502]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:29.502]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:29.502]             base::sink(type = "output", split = FALSE)
[16:20:29.502]             base::close(...future.stdout)
[16:20:29.502]         }, add = TRUE)
[16:20:29.502]     }
[16:20:29.502]     ...future.frame <- base::sys.nframe()
[16:20:29.502]     ...future.conditions <- base::list()
[16:20:29.502]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:29.502]     if (FALSE) {
[16:20:29.502]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:29.502]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:29.502]     }
[16:20:29.502]     ...future.result <- base::tryCatch({
[16:20:29.502]         base::withCallingHandlers({
[16:20:29.502]             ...future.value <- base::withVisible(base::local({
[16:20:29.502]                 withCallingHandlers({
[16:20:29.502]                   {
[16:20:29.502]                     42
[16:20:29.502]                   }
[16:20:29.502]                 }, immediateCondition = function(cond) {
[16:20:29.502]                   save_rds <- function (object, pathname, ...) 
[16:20:29.502]                   {
[16:20:29.502]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:20:29.502]                     if (file_test("-f", pathname_tmp)) {
[16:20:29.502]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.502]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:20:29.502]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.502]                         fi_tmp[["mtime"]])
[16:20:29.502]                     }
[16:20:29.502]                     tryCatch({
[16:20:29.502]                       saveRDS(object, file = pathname_tmp, ...)
[16:20:29.502]                     }, error = function(ex) {
[16:20:29.502]                       msg <- conditionMessage(ex)
[16:20:29.502]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.502]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:20:29.502]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.502]                         fi_tmp[["mtime"]], msg)
[16:20:29.502]                       ex$message <- msg
[16:20:29.502]                       stop(ex)
[16:20:29.502]                     })
[16:20:29.502]                     stopifnot(file_test("-f", pathname_tmp))
[16:20:29.502]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:20:29.502]                     if (!res || file_test("-f", pathname_tmp)) {
[16:20:29.502]                       fi_tmp <- file.info(pathname_tmp)
[16:20:29.502]                       fi <- file.info(pathname)
[16:20:29.502]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:20:29.502]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:20:29.502]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:20:29.502]                         fi[["size"]], fi[["mtime"]])
[16:20:29.502]                       stop(msg)
[16:20:29.502]                     }
[16:20:29.502]                     invisible(pathname)
[16:20:29.502]                   }
[16:20:29.502]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:20:29.502]                     rootPath = tempdir()) 
[16:20:29.502]                   {
[16:20:29.502]                     obj <- list(time = Sys.time(), condition = cond)
[16:20:29.502]                     file <- tempfile(pattern = class(cond)[1], 
[16:20:29.502]                       tmpdir = path, fileext = ".rds")
[16:20:29.502]                     save_rds(obj, file)
[16:20:29.502]                   }
[16:20:29.502]                   saveImmediateCondition(cond, path = "/tmp/RtmpTNp63N/.future/immediateConditions")
[16:20:29.502]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.502]                   {
[16:20:29.502]                     inherits <- base::inherits
[16:20:29.502]                     invokeRestart <- base::invokeRestart
[16:20:29.502]                     is.null <- base::is.null
[16:20:29.502]                     muffled <- FALSE
[16:20:29.502]                     if (inherits(cond, "message")) {
[16:20:29.502]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:29.502]                       if (muffled) 
[16:20:29.502]                         invokeRestart("muffleMessage")
[16:20:29.502]                     }
[16:20:29.502]                     else if (inherits(cond, "warning")) {
[16:20:29.502]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:29.502]                       if (muffled) 
[16:20:29.502]                         invokeRestart("muffleWarning")
[16:20:29.502]                     }
[16:20:29.502]                     else if (inherits(cond, "condition")) {
[16:20:29.502]                       if (!is.null(pattern)) {
[16:20:29.502]                         computeRestarts <- base::computeRestarts
[16:20:29.502]                         grepl <- base::grepl
[16:20:29.502]                         restarts <- computeRestarts(cond)
[16:20:29.502]                         for (restart in restarts) {
[16:20:29.502]                           name <- restart$name
[16:20:29.502]                           if (is.null(name)) 
[16:20:29.502]                             next
[16:20:29.502]                           if (!grepl(pattern, name)) 
[16:20:29.502]                             next
[16:20:29.502]                           invokeRestart(restart)
[16:20:29.502]                           muffled <- TRUE
[16:20:29.502]                           break
[16:20:29.502]                         }
[16:20:29.502]                       }
[16:20:29.502]                     }
[16:20:29.502]                     invisible(muffled)
[16:20:29.502]                   }
[16:20:29.502]                   muffleCondition(cond)
[16:20:29.502]                 })
[16:20:29.502]             }))
[16:20:29.502]             future::FutureResult(value = ...future.value$value, 
[16:20:29.502]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.502]                   ...future.rng), globalenv = if (FALSE) 
[16:20:29.502]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:29.502]                     ...future.globalenv.names))
[16:20:29.502]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:29.502]         }, condition = base::local({
[16:20:29.502]             c <- base::c
[16:20:29.502]             inherits <- base::inherits
[16:20:29.502]             invokeRestart <- base::invokeRestart
[16:20:29.502]             length <- base::length
[16:20:29.502]             list <- base::list
[16:20:29.502]             seq.int <- base::seq.int
[16:20:29.502]             signalCondition <- base::signalCondition
[16:20:29.502]             sys.calls <- base::sys.calls
[16:20:29.502]             `[[` <- base::`[[`
[16:20:29.502]             `+` <- base::`+`
[16:20:29.502]             `<<-` <- base::`<<-`
[16:20:29.502]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:29.502]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:29.502]                   3L)]
[16:20:29.502]             }
[16:20:29.502]             function(cond) {
[16:20:29.502]                 is_error <- inherits(cond, "error")
[16:20:29.502]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:29.502]                   NULL)
[16:20:29.502]                 if (is_error) {
[16:20:29.502]                   sessionInformation <- function() {
[16:20:29.502]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:29.502]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:29.502]                       search = base::search(), system = base::Sys.info())
[16:20:29.502]                   }
[16:20:29.502]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.502]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:29.502]                     cond$call), session = sessionInformation(), 
[16:20:29.502]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:29.502]                   signalCondition(cond)
[16:20:29.502]                 }
[16:20:29.502]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:29.502]                 "immediateCondition"))) {
[16:20:29.502]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:29.502]                   ...future.conditions[[length(...future.conditions) + 
[16:20:29.502]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:29.502]                   if (TRUE && !signal) {
[16:20:29.502]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.502]                     {
[16:20:29.502]                       inherits <- base::inherits
[16:20:29.502]                       invokeRestart <- base::invokeRestart
[16:20:29.502]                       is.null <- base::is.null
[16:20:29.502]                       muffled <- FALSE
[16:20:29.502]                       if (inherits(cond, "message")) {
[16:20:29.502]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.502]                         if (muffled) 
[16:20:29.502]                           invokeRestart("muffleMessage")
[16:20:29.502]                       }
[16:20:29.502]                       else if (inherits(cond, "warning")) {
[16:20:29.502]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.502]                         if (muffled) 
[16:20:29.502]                           invokeRestart("muffleWarning")
[16:20:29.502]                       }
[16:20:29.502]                       else if (inherits(cond, "condition")) {
[16:20:29.502]                         if (!is.null(pattern)) {
[16:20:29.502]                           computeRestarts <- base::computeRestarts
[16:20:29.502]                           grepl <- base::grepl
[16:20:29.502]                           restarts <- computeRestarts(cond)
[16:20:29.502]                           for (restart in restarts) {
[16:20:29.502]                             name <- restart$name
[16:20:29.502]                             if (is.null(name)) 
[16:20:29.502]                               next
[16:20:29.502]                             if (!grepl(pattern, name)) 
[16:20:29.502]                               next
[16:20:29.502]                             invokeRestart(restart)
[16:20:29.502]                             muffled <- TRUE
[16:20:29.502]                             break
[16:20:29.502]                           }
[16:20:29.502]                         }
[16:20:29.502]                       }
[16:20:29.502]                       invisible(muffled)
[16:20:29.502]                     }
[16:20:29.502]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.502]                   }
[16:20:29.502]                 }
[16:20:29.502]                 else {
[16:20:29.502]                   if (TRUE) {
[16:20:29.502]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:29.502]                     {
[16:20:29.502]                       inherits <- base::inherits
[16:20:29.502]                       invokeRestart <- base::invokeRestart
[16:20:29.502]                       is.null <- base::is.null
[16:20:29.502]                       muffled <- FALSE
[16:20:29.502]                       if (inherits(cond, "message")) {
[16:20:29.502]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:29.502]                         if (muffled) 
[16:20:29.502]                           invokeRestart("muffleMessage")
[16:20:29.502]                       }
[16:20:29.502]                       else if (inherits(cond, "warning")) {
[16:20:29.502]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:29.502]                         if (muffled) 
[16:20:29.502]                           invokeRestart("muffleWarning")
[16:20:29.502]                       }
[16:20:29.502]                       else if (inherits(cond, "condition")) {
[16:20:29.502]                         if (!is.null(pattern)) {
[16:20:29.502]                           computeRestarts <- base::computeRestarts
[16:20:29.502]                           grepl <- base::grepl
[16:20:29.502]                           restarts <- computeRestarts(cond)
[16:20:29.502]                           for (restart in restarts) {
[16:20:29.502]                             name <- restart$name
[16:20:29.502]                             if (is.null(name)) 
[16:20:29.502]                               next
[16:20:29.502]                             if (!grepl(pattern, name)) 
[16:20:29.502]                               next
[16:20:29.502]                             invokeRestart(restart)
[16:20:29.502]                             muffled <- TRUE
[16:20:29.502]                             break
[16:20:29.502]                           }
[16:20:29.502]                         }
[16:20:29.502]                       }
[16:20:29.502]                       invisible(muffled)
[16:20:29.502]                     }
[16:20:29.502]                     muffleCondition(cond, pattern = "^muffle")
[16:20:29.502]                   }
[16:20:29.502]                 }
[16:20:29.502]             }
[16:20:29.502]         }))
[16:20:29.502]     }, error = function(ex) {
[16:20:29.502]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:29.502]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:29.502]                 ...future.rng), started = ...future.startTime, 
[16:20:29.502]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:29.502]             version = "1.8"), class = "FutureResult")
[16:20:29.502]     }, finally = {
[16:20:29.502]         if (!identical(...future.workdir, getwd())) 
[16:20:29.502]             setwd(...future.workdir)
[16:20:29.502]         {
[16:20:29.502]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:29.502]                 ...future.oldOptions$nwarnings <- NULL
[16:20:29.502]             }
[16:20:29.502]             base::options(...future.oldOptions)
[16:20:29.502]             if (.Platform$OS.type == "windows") {
[16:20:29.502]                 old_names <- names(...future.oldEnvVars)
[16:20:29.502]                 envs <- base::Sys.getenv()
[16:20:29.502]                 names <- names(envs)
[16:20:29.502]                 common <- intersect(names, old_names)
[16:20:29.502]                 added <- setdiff(names, old_names)
[16:20:29.502]                 removed <- setdiff(old_names, names)
[16:20:29.502]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:29.502]                   envs[common]]
[16:20:29.502]                 NAMES <- toupper(changed)
[16:20:29.502]                 args <- list()
[16:20:29.502]                 for (kk in seq_along(NAMES)) {
[16:20:29.502]                   name <- changed[[kk]]
[16:20:29.502]                   NAME <- NAMES[[kk]]
[16:20:29.502]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.502]                     next
[16:20:29.502]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.502]                 }
[16:20:29.502]                 NAMES <- toupper(added)
[16:20:29.502]                 for (kk in seq_along(NAMES)) {
[16:20:29.502]                   name <- added[[kk]]
[16:20:29.502]                   NAME <- NAMES[[kk]]
[16:20:29.502]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.502]                     next
[16:20:29.502]                   args[[name]] <- ""
[16:20:29.502]                 }
[16:20:29.502]                 NAMES <- toupper(removed)
[16:20:29.502]                 for (kk in seq_along(NAMES)) {
[16:20:29.502]                   name <- removed[[kk]]
[16:20:29.502]                   NAME <- NAMES[[kk]]
[16:20:29.502]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:29.502]                     next
[16:20:29.502]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:29.502]                 }
[16:20:29.502]                 if (length(args) > 0) 
[16:20:29.502]                   base::do.call(base::Sys.setenv, args = args)
[16:20:29.502]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:29.502]             }
[16:20:29.502]             else {
[16:20:29.502]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:29.502]             }
[16:20:29.502]             {
[16:20:29.502]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:29.502]                   0L) {
[16:20:29.502]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:29.502]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:29.502]                   base::options(opts)
[16:20:29.502]                 }
[16:20:29.502]                 {
[16:20:29.502]                   {
[16:20:29.502]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:29.502]                     NULL
[16:20:29.502]                   }
[16:20:29.502]                   options(future.plan = NULL)
[16:20:29.502]                   if (is.na(NA_character_)) 
[16:20:29.502]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:29.502]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:29.502]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:29.502]                     .init = FALSE)
[16:20:29.502]                 }
[16:20:29.502]             }
[16:20:29.502]         }
[16:20:29.502]     })
[16:20:29.502]     if (TRUE) {
[16:20:29.502]         base::sink(type = "output", split = FALSE)
[16:20:29.502]         if (TRUE) {
[16:20:29.502]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:29.502]         }
[16:20:29.502]         else {
[16:20:29.502]             ...future.result["stdout"] <- base::list(NULL)
[16:20:29.502]         }
[16:20:29.502]         base::close(...future.stdout)
[16:20:29.502]         ...future.stdout <- NULL
[16:20:29.502]     }
[16:20:29.502]     ...future.result$conditions <- ...future.conditions
[16:20:29.502]     ...future.result$finished <- base::Sys.time()
[16:20:29.502]     ...future.result
[16:20:29.502] }
[16:20:29.505] requestCore(): workers = 2
[16:20:29.506] MulticoreFuture started
[16:20:29.507] - Launch lazy future ... done
[16:20:29.507] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
[16:20:29.508] plan(): Setting new future strategy stack:
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:29.508] List of future strategies:
[16:20:29.508] 1. sequential:
[16:20:29.508]    - args: function (..., envir = parent.frame())
[16:20:29.508]    - tweaked: FALSE
[16:20:29.508]    - call: NULL
[16:20:29.509] plan(): nbrOfWorkers() = 1
[16:20:29.511] plan(): Setting new future strategy stack:
[16:20:29.512] List of future strategies:
[16:20:29.512] 1. multicore:
[16:20:29.512]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:20:29.512]    - tweaked: FALSE
[16:20:29.512]    - call: plan(strategy)
[16:20:29.516] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:29.517] result() for MulticoreFuture ...
[16:20:29.518] result() for MulticoreFuture ...
[16:20:29.518] result() for MulticoreFuture ... done
[16:20:29.518] result() for MulticoreFuture ... done
[16:20:29.519] result() for MulticoreFuture ...
[16:20:29.519] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[16:20:29.519] plan(): Setting new future strategy stack:
[16:20:29.520] List of future strategies:
[16:20:29.520] 1. multisession:
[16:20:29.520]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:29.520]    - tweaked: FALSE
[16:20:29.520]    - call: plan(strategy)
[16:20:29.520] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:20:29.520] multisession:
[16:20:29.520] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:20:29.520] - tweaked: FALSE
[16:20:29.520] - call: plan(strategy)
[16:20:29.527] getGlobalsAndPackages() ...
[16:20:29.527] Not searching for globals
[16:20:29.527] - globals: [0] <none>
[16:20:29.527] getGlobalsAndPackages() ... DONE
[16:20:29.528] [local output] makeClusterPSOCK() ...
[16:20:29.570] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:20:29.571] [local output] Base port: 11982
[16:20:29.571] [local output] Getting setup options for 2 cluster nodes ...
[16:20:29.571] [local output]  - Node 1 of 2 ...
[16:20:29.571] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:29.572] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTNp63N/worker.rank=1.parallelly.parent=80178.139325924e35e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpTNp63N/worker.rank=1.parallelly.parent=80178.139325924e35e.pid")'’
[16:20:29.763] - Possible to infer worker's PID: TRUE
[16:20:29.763] [local output] Rscript port: 11982

[16:20:29.763] [local output]  - Node 2 of 2 ...
[16:20:29.764] [local output] localMachine=TRUE => revtunnel=FALSE

[16:20:29.764] [local output] Rscript port: 11982

[16:20:29.765] [local output] Getting setup options for 2 cluster nodes ... done
[16:20:29.765] [local output]  - Parallel setup requested for some PSOCK nodes
[16:20:29.765] [local output] Setting up PSOCK nodes in parallel
[16:20:29.766] List of 36
[16:20:29.766]  $ worker          : chr "localhost"
[16:20:29.766]   ..- attr(*, "localhost")= logi TRUE
[16:20:29.766]  $ master          : chr "localhost"
[16:20:29.766]  $ port            : int 11982
[16:20:29.766]  $ connectTimeout  : num 120
[16:20:29.766]  $ timeout         : num 2592000
[16:20:29.766]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:20:29.766]  $ homogeneous     : logi TRUE
[16:20:29.766]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:20:29.766]  $ rscript_envs    : NULL
[16:20:29.766]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:29.766]  $ rscript_startup : NULL
[16:20:29.766]  $ rscript_sh      : chr "sh"
[16:20:29.766]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:29.766]  $ methods         : logi TRUE
[16:20:29.766]  $ socketOptions   : chr "no-delay"
[16:20:29.766]  $ useXDR          : logi FALSE
[16:20:29.766]  $ outfile         : chr "/dev/null"
[16:20:29.766]  $ renice          : int NA
[16:20:29.766]  $ rshcmd          : NULL
[16:20:29.766]  $ user            : chr(0) 
[16:20:29.766]  $ revtunnel       : logi FALSE
[16:20:29.766]  $ rshlogfile      : NULL
[16:20:29.766]  $ rshopts         : chr(0) 
[16:20:29.766]  $ rank            : int 1
[16:20:29.766]  $ manual          : logi FALSE
[16:20:29.766]  $ dryrun          : logi FALSE
[16:20:29.766]  $ quiet           : logi FALSE
[16:20:29.766]  $ setup_strategy  : chr "parallel"
[16:20:29.766]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:29.766]  $ pidfile         : chr "/tmp/RtmpTNp63N/worker.rank=1.parallelly.parent=80178.139325924e35e.pid"
[16:20:29.766]  $ rshcmd_label    : NULL
[16:20:29.766]  $ rsh_call        : NULL
[16:20:29.766]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:20:29.766]  $ localMachine    : logi TRUE
[16:20:29.766]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:20:29.766]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:20:29.766]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:20:29.766]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:20:29.766]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:20:29.766]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:20:29.766]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:20:29.766]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:20:29.766]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:20:29.766]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:20:29.766]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:20:29.766]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:20:29.766]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:20:29.766]  $ arguments       :List of 28
[16:20:29.766]   ..$ worker          : chr "localhost"
[16:20:29.766]   ..$ master          : NULL
[16:20:29.766]   ..$ port            : int 11982
[16:20:29.766]   ..$ connectTimeout  : num 120
[16:20:29.766]   ..$ timeout         : num 2592000
[16:20:29.766]   ..$ rscript         : NULL
[16:20:29.766]   ..$ homogeneous     : NULL
[16:20:29.766]   ..$ rscript_args    : NULL
[16:20:29.766]   ..$ rscript_envs    : NULL
[16:20:29.766]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:20:29.766]   ..$ rscript_startup : NULL
[16:20:29.766]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:20:29.766]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:20:29.766]   ..$ methods         : logi TRUE
[16:20:29.766]   ..$ socketOptions   : chr "no-delay"
[16:20:29.766]   ..$ useXDR          : logi FALSE
[16:20:29.766]   ..$ outfile         : chr "/dev/null"
[16:20:29.766]   ..$ renice          : int NA
[16:20:29.766]   ..$ rshcmd          : NULL
[16:20:29.766]   ..$ user            : NULL
[16:20:29.766]   ..$ revtunnel       : logi NA
[16:20:29.766]   ..$ rshlogfile      : NULL
[16:20:29.766]   ..$ rshopts         : NULL
[16:20:29.766]   ..$ rank            : int 1
[16:20:29.766]   ..$ manual          : logi FALSE
[16:20:29.766]   ..$ dryrun          : logi FALSE
[16:20:29.766]   ..$ quiet           : logi FALSE
[16:20:29.766]   ..$ setup_strategy  : chr "parallel"
[16:20:29.766]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:20:29.785] [local output] System call to launch all workers:
[16:20:29.785] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpTNp63N/worker.rank=1.parallelly.parent=80178.139325924e35e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11982 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:20:29.785] [local output] Starting PSOCK main server
[16:20:29.790] [local output] Workers launched
[16:20:29.791] [local output] Waiting for workers to connect back
[16:20:29.791]  - [local output] 0 workers out of 2 ready
[16:20:30.035]  - [local output] 0 workers out of 2 ready
[16:20:30.036]  - [local output] 1 workers out of 2 ready
[16:20:30.041]  - [local output] 1 workers out of 2 ready
[16:20:30.042]  - [local output] 2 workers out of 2 ready
[16:20:30.042] [local output] Launching of workers completed
[16:20:30.042] [local output] Collecting session information from workers
[16:20:30.043] [local output]  - Worker #1 of 2
[16:20:30.044] [local output]  - Worker #2 of 2
[16:20:30.044] [local output] makeClusterPSOCK() ... done
[16:20:30.055] Packages needed by the future expression (n = 0): <none>
[16:20:30.055] Packages needed by future strategies (n = 0): <none>
[16:20:30.056] {
[16:20:30.056]     {
[16:20:30.056]         {
[16:20:30.056]             ...future.startTime <- base::Sys.time()
[16:20:30.056]             {
[16:20:30.056]                 {
[16:20:30.056]                   {
[16:20:30.056]                     {
[16:20:30.056]                       base::local({
[16:20:30.056]                         has_future <- base::requireNamespace("future", 
[16:20:30.056]                           quietly = TRUE)
[16:20:30.056]                         if (has_future) {
[16:20:30.056]                           ns <- base::getNamespace("future")
[16:20:30.056]                           version <- ns[[".package"]][["version"]]
[16:20:30.056]                           if (is.null(version)) 
[16:20:30.056]                             version <- utils::packageVersion("future")
[16:20:30.056]                         }
[16:20:30.056]                         else {
[16:20:30.056]                           version <- NULL
[16:20:30.056]                         }
[16:20:30.056]                         if (!has_future || version < "1.8.0") {
[16:20:30.056]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.056]                             "", base::R.version$version.string), 
[16:20:30.056]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.056]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.056]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.056]                               "release", "version")], collapse = " "), 
[16:20:30.056]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.056]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.056]                             info)
[16:20:30.056]                           info <- base::paste(info, collapse = "; ")
[16:20:30.056]                           if (!has_future) {
[16:20:30.056]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.056]                               info)
[16:20:30.056]                           }
[16:20:30.056]                           else {
[16:20:30.056]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.056]                               info, version)
[16:20:30.056]                           }
[16:20:30.056]                           base::stop(msg)
[16:20:30.056]                         }
[16:20:30.056]                       })
[16:20:30.056]                     }
[16:20:30.056]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.056]                     base::options(mc.cores = 1L)
[16:20:30.056]                   }
[16:20:30.056]                   ...future.strategy.old <- future::plan("list")
[16:20:30.056]                   options(future.plan = NULL)
[16:20:30.056]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.056]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.056]                 }
[16:20:30.056]                 ...future.workdir <- getwd()
[16:20:30.056]             }
[16:20:30.056]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.056]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.056]         }
[16:20:30.056]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.056]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.056]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.056]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.056]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.056]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.056]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.056]             base::names(...future.oldOptions))
[16:20:30.056]     }
[16:20:30.056]     if (FALSE) {
[16:20:30.056]     }
[16:20:30.056]     else {
[16:20:30.056]         if (TRUE) {
[16:20:30.056]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.056]                 open = "w")
[16:20:30.056]         }
[16:20:30.056]         else {
[16:20:30.056]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.056]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.056]         }
[16:20:30.056]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.056]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.056]             base::sink(type = "output", split = FALSE)
[16:20:30.056]             base::close(...future.stdout)
[16:20:30.056]         }, add = TRUE)
[16:20:30.056]     }
[16:20:30.056]     ...future.frame <- base::sys.nframe()
[16:20:30.056]     ...future.conditions <- base::list()
[16:20:30.056]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.056]     if (FALSE) {
[16:20:30.056]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.056]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.056]     }
[16:20:30.056]     ...future.result <- base::tryCatch({
[16:20:30.056]         base::withCallingHandlers({
[16:20:30.056]             ...future.value <- base::withVisible(base::local({
[16:20:30.056]                 ...future.makeSendCondition <- base::local({
[16:20:30.056]                   sendCondition <- NULL
[16:20:30.056]                   function(frame = 1L) {
[16:20:30.056]                     if (is.function(sendCondition)) 
[16:20:30.056]                       return(sendCondition)
[16:20:30.056]                     ns <- getNamespace("parallel")
[16:20:30.056]                     if (exists("sendData", mode = "function", 
[16:20:30.056]                       envir = ns)) {
[16:20:30.056]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.056]                         envir = ns)
[16:20:30.056]                       envir <- sys.frame(frame)
[16:20:30.056]                       master <- NULL
[16:20:30.056]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.056]                         !identical(envir, emptyenv())) {
[16:20:30.056]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.056]                           inherits = FALSE)) {
[16:20:30.056]                           master <- get("master", mode = "list", 
[16:20:30.056]                             envir = envir, inherits = FALSE)
[16:20:30.056]                           if (inherits(master, c("SOCKnode", 
[16:20:30.056]                             "SOCK0node"))) {
[16:20:30.056]                             sendCondition <<- function(cond) {
[16:20:30.056]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.056]                                 success = TRUE)
[16:20:30.056]                               parallel_sendData(master, data)
[16:20:30.056]                             }
[16:20:30.056]                             return(sendCondition)
[16:20:30.056]                           }
[16:20:30.056]                         }
[16:20:30.056]                         frame <- frame + 1L
[16:20:30.056]                         envir <- sys.frame(frame)
[16:20:30.056]                       }
[16:20:30.056]                     }
[16:20:30.056]                     sendCondition <<- function(cond) NULL
[16:20:30.056]                   }
[16:20:30.056]                 })
[16:20:30.056]                 withCallingHandlers({
[16:20:30.056]                   NA
[16:20:30.056]                 }, immediateCondition = function(cond) {
[16:20:30.056]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.056]                   sendCondition(cond)
[16:20:30.056]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.056]                   {
[16:20:30.056]                     inherits <- base::inherits
[16:20:30.056]                     invokeRestart <- base::invokeRestart
[16:20:30.056]                     is.null <- base::is.null
[16:20:30.056]                     muffled <- FALSE
[16:20:30.056]                     if (inherits(cond, "message")) {
[16:20:30.056]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.056]                       if (muffled) 
[16:20:30.056]                         invokeRestart("muffleMessage")
[16:20:30.056]                     }
[16:20:30.056]                     else if (inherits(cond, "warning")) {
[16:20:30.056]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.056]                       if (muffled) 
[16:20:30.056]                         invokeRestart("muffleWarning")
[16:20:30.056]                     }
[16:20:30.056]                     else if (inherits(cond, "condition")) {
[16:20:30.056]                       if (!is.null(pattern)) {
[16:20:30.056]                         computeRestarts <- base::computeRestarts
[16:20:30.056]                         grepl <- base::grepl
[16:20:30.056]                         restarts <- computeRestarts(cond)
[16:20:30.056]                         for (restart in restarts) {
[16:20:30.056]                           name <- restart$name
[16:20:30.056]                           if (is.null(name)) 
[16:20:30.056]                             next
[16:20:30.056]                           if (!grepl(pattern, name)) 
[16:20:30.056]                             next
[16:20:30.056]                           invokeRestart(restart)
[16:20:30.056]                           muffled <- TRUE
[16:20:30.056]                           break
[16:20:30.056]                         }
[16:20:30.056]                       }
[16:20:30.056]                     }
[16:20:30.056]                     invisible(muffled)
[16:20:30.056]                   }
[16:20:30.056]                   muffleCondition(cond)
[16:20:30.056]                 })
[16:20:30.056]             }))
[16:20:30.056]             future::FutureResult(value = ...future.value$value, 
[16:20:30.056]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.056]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.056]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.056]                     ...future.globalenv.names))
[16:20:30.056]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.056]         }, condition = base::local({
[16:20:30.056]             c <- base::c
[16:20:30.056]             inherits <- base::inherits
[16:20:30.056]             invokeRestart <- base::invokeRestart
[16:20:30.056]             length <- base::length
[16:20:30.056]             list <- base::list
[16:20:30.056]             seq.int <- base::seq.int
[16:20:30.056]             signalCondition <- base::signalCondition
[16:20:30.056]             sys.calls <- base::sys.calls
[16:20:30.056]             `[[` <- base::`[[`
[16:20:30.056]             `+` <- base::`+`
[16:20:30.056]             `<<-` <- base::`<<-`
[16:20:30.056]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.056]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.056]                   3L)]
[16:20:30.056]             }
[16:20:30.056]             function(cond) {
[16:20:30.056]                 is_error <- inherits(cond, "error")
[16:20:30.056]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.056]                   NULL)
[16:20:30.056]                 if (is_error) {
[16:20:30.056]                   sessionInformation <- function() {
[16:20:30.056]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.056]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.056]                       search = base::search(), system = base::Sys.info())
[16:20:30.056]                   }
[16:20:30.056]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.056]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.056]                     cond$call), session = sessionInformation(), 
[16:20:30.056]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.056]                   signalCondition(cond)
[16:20:30.056]                 }
[16:20:30.056]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.056]                 "immediateCondition"))) {
[16:20:30.056]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.056]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.056]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.056]                   if (TRUE && !signal) {
[16:20:30.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.056]                     {
[16:20:30.056]                       inherits <- base::inherits
[16:20:30.056]                       invokeRestart <- base::invokeRestart
[16:20:30.056]                       is.null <- base::is.null
[16:20:30.056]                       muffled <- FALSE
[16:20:30.056]                       if (inherits(cond, "message")) {
[16:20:30.056]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.056]                         if (muffled) 
[16:20:30.056]                           invokeRestart("muffleMessage")
[16:20:30.056]                       }
[16:20:30.056]                       else if (inherits(cond, "warning")) {
[16:20:30.056]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.056]                         if (muffled) 
[16:20:30.056]                           invokeRestart("muffleWarning")
[16:20:30.056]                       }
[16:20:30.056]                       else if (inherits(cond, "condition")) {
[16:20:30.056]                         if (!is.null(pattern)) {
[16:20:30.056]                           computeRestarts <- base::computeRestarts
[16:20:30.056]                           grepl <- base::grepl
[16:20:30.056]                           restarts <- computeRestarts(cond)
[16:20:30.056]                           for (restart in restarts) {
[16:20:30.056]                             name <- restart$name
[16:20:30.056]                             if (is.null(name)) 
[16:20:30.056]                               next
[16:20:30.056]                             if (!grepl(pattern, name)) 
[16:20:30.056]                               next
[16:20:30.056]                             invokeRestart(restart)
[16:20:30.056]                             muffled <- TRUE
[16:20:30.056]                             break
[16:20:30.056]                           }
[16:20:30.056]                         }
[16:20:30.056]                       }
[16:20:30.056]                       invisible(muffled)
[16:20:30.056]                     }
[16:20:30.056]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.056]                   }
[16:20:30.056]                 }
[16:20:30.056]                 else {
[16:20:30.056]                   if (TRUE) {
[16:20:30.056]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.056]                     {
[16:20:30.056]                       inherits <- base::inherits
[16:20:30.056]                       invokeRestart <- base::invokeRestart
[16:20:30.056]                       is.null <- base::is.null
[16:20:30.056]                       muffled <- FALSE
[16:20:30.056]                       if (inherits(cond, "message")) {
[16:20:30.056]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.056]                         if (muffled) 
[16:20:30.056]                           invokeRestart("muffleMessage")
[16:20:30.056]                       }
[16:20:30.056]                       else if (inherits(cond, "warning")) {
[16:20:30.056]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.056]                         if (muffled) 
[16:20:30.056]                           invokeRestart("muffleWarning")
[16:20:30.056]                       }
[16:20:30.056]                       else if (inherits(cond, "condition")) {
[16:20:30.056]                         if (!is.null(pattern)) {
[16:20:30.056]                           computeRestarts <- base::computeRestarts
[16:20:30.056]                           grepl <- base::grepl
[16:20:30.056]                           restarts <- computeRestarts(cond)
[16:20:30.056]                           for (restart in restarts) {
[16:20:30.056]                             name <- restart$name
[16:20:30.056]                             if (is.null(name)) 
[16:20:30.056]                               next
[16:20:30.056]                             if (!grepl(pattern, name)) 
[16:20:30.056]                               next
[16:20:30.056]                             invokeRestart(restart)
[16:20:30.056]                             muffled <- TRUE
[16:20:30.056]                             break
[16:20:30.056]                           }
[16:20:30.056]                         }
[16:20:30.056]                       }
[16:20:30.056]                       invisible(muffled)
[16:20:30.056]                     }
[16:20:30.056]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.056]                   }
[16:20:30.056]                 }
[16:20:30.056]             }
[16:20:30.056]         }))
[16:20:30.056]     }, error = function(ex) {
[16:20:30.056]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.056]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.056]                 ...future.rng), started = ...future.startTime, 
[16:20:30.056]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.056]             version = "1.8"), class = "FutureResult")
[16:20:30.056]     }, finally = {
[16:20:30.056]         if (!identical(...future.workdir, getwd())) 
[16:20:30.056]             setwd(...future.workdir)
[16:20:30.056]         {
[16:20:30.056]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.056]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.056]             }
[16:20:30.056]             base::options(...future.oldOptions)
[16:20:30.056]             if (.Platform$OS.type == "windows") {
[16:20:30.056]                 old_names <- names(...future.oldEnvVars)
[16:20:30.056]                 envs <- base::Sys.getenv()
[16:20:30.056]                 names <- names(envs)
[16:20:30.056]                 common <- intersect(names, old_names)
[16:20:30.056]                 added <- setdiff(names, old_names)
[16:20:30.056]                 removed <- setdiff(old_names, names)
[16:20:30.056]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.056]                   envs[common]]
[16:20:30.056]                 NAMES <- toupper(changed)
[16:20:30.056]                 args <- list()
[16:20:30.056]                 for (kk in seq_along(NAMES)) {
[16:20:30.056]                   name <- changed[[kk]]
[16:20:30.056]                   NAME <- NAMES[[kk]]
[16:20:30.056]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.056]                     next
[16:20:30.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.056]                 }
[16:20:30.056]                 NAMES <- toupper(added)
[16:20:30.056]                 for (kk in seq_along(NAMES)) {
[16:20:30.056]                   name <- added[[kk]]
[16:20:30.056]                   NAME <- NAMES[[kk]]
[16:20:30.056]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.056]                     next
[16:20:30.056]                   args[[name]] <- ""
[16:20:30.056]                 }
[16:20:30.056]                 NAMES <- toupper(removed)
[16:20:30.056]                 for (kk in seq_along(NAMES)) {
[16:20:30.056]                   name <- removed[[kk]]
[16:20:30.056]                   NAME <- NAMES[[kk]]
[16:20:30.056]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.056]                     next
[16:20:30.056]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.056]                 }
[16:20:30.056]                 if (length(args) > 0) 
[16:20:30.056]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.056]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.056]             }
[16:20:30.056]             else {
[16:20:30.056]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.056]             }
[16:20:30.056]             {
[16:20:30.056]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.056]                   0L) {
[16:20:30.056]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.056]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.056]                   base::options(opts)
[16:20:30.056]                 }
[16:20:30.056]                 {
[16:20:30.056]                   {
[16:20:30.056]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.056]                     NULL
[16:20:30.056]                   }
[16:20:30.056]                   options(future.plan = NULL)
[16:20:30.056]                   if (is.na(NA_character_)) 
[16:20:30.056]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.056]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.056]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.056]                     .init = FALSE)
[16:20:30.056]                 }
[16:20:30.056]             }
[16:20:30.056]         }
[16:20:30.056]     })
[16:20:30.056]     if (TRUE) {
[16:20:30.056]         base::sink(type = "output", split = FALSE)
[16:20:30.056]         if (TRUE) {
[16:20:30.056]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.056]         }
[16:20:30.056]         else {
[16:20:30.056]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.056]         }
[16:20:30.056]         base::close(...future.stdout)
[16:20:30.056]         ...future.stdout <- NULL
[16:20:30.056]     }
[16:20:30.056]     ...future.result$conditions <- ...future.conditions
[16:20:30.056]     ...future.result$finished <- base::Sys.time()
[16:20:30.056]     ...future.result
[16:20:30.056] }
[16:20:30.110] MultisessionFuture started
[16:20:30.110] result() for ClusterFuture ...
[16:20:30.111] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.111] - Validating connection of MultisessionFuture
[16:20:30.143] - received message: FutureResult
[16:20:30.144] - Received FutureResult
[16:20:30.144] - Erased future from FutureRegistry
[16:20:30.144] result() for ClusterFuture ...
[16:20:30.144] - result already collected: FutureResult
[16:20:30.144] result() for ClusterFuture ... done
[16:20:30.144] receiveMessageFromWorker() for ClusterFuture ... done
[16:20:30.144] result() for ClusterFuture ... done
[16:20:30.145] result() for ClusterFuture ...
[16:20:30.145] - result already collected: FutureResult
[16:20:30.145] result() for ClusterFuture ... done
[16:20:30.145] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:20:30.149] plan(): nbrOfWorkers() = 2
[16:20:30.153] getGlobalsAndPackages() ...
[16:20:30.153] 
[16:20:30.153] - globals: [0] <none>
[16:20:30.153] getGlobalsAndPackages() ... DONE
[16:20:30.164] Packages needed by the future expression (n = 0): <none>
[16:20:30.165] Packages needed by future strategies (n = 0): <none>
[16:20:30.165] {
[16:20:30.165]     {
[16:20:30.165]         {
[16:20:30.165]             ...future.startTime <- base::Sys.time()
[16:20:30.165]             {
[16:20:30.165]                 {
[16:20:30.165]                   {
[16:20:30.165]                     {
[16:20:30.165]                       base::local({
[16:20:30.165]                         has_future <- base::requireNamespace("future", 
[16:20:30.165]                           quietly = TRUE)
[16:20:30.165]                         if (has_future) {
[16:20:30.165]                           ns <- base::getNamespace("future")
[16:20:30.165]                           version <- ns[[".package"]][["version"]]
[16:20:30.165]                           if (is.null(version)) 
[16:20:30.165]                             version <- utils::packageVersion("future")
[16:20:30.165]                         }
[16:20:30.165]                         else {
[16:20:30.165]                           version <- NULL
[16:20:30.165]                         }
[16:20:30.165]                         if (!has_future || version < "1.8.0") {
[16:20:30.165]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.165]                             "", base::R.version$version.string), 
[16:20:30.165]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.165]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.165]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.165]                               "release", "version")], collapse = " "), 
[16:20:30.165]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.165]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.165]                             info)
[16:20:30.165]                           info <- base::paste(info, collapse = "; ")
[16:20:30.165]                           if (!has_future) {
[16:20:30.165]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.165]                               info)
[16:20:30.165]                           }
[16:20:30.165]                           else {
[16:20:30.165]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.165]                               info, version)
[16:20:30.165]                           }
[16:20:30.165]                           base::stop(msg)
[16:20:30.165]                         }
[16:20:30.165]                       })
[16:20:30.165]                     }
[16:20:30.165]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.165]                     base::options(mc.cores = 1L)
[16:20:30.165]                   }
[16:20:30.165]                   ...future.strategy.old <- future::plan("list")
[16:20:30.165]                   options(future.plan = NULL)
[16:20:30.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.165]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.165]                 }
[16:20:30.165]                 ...future.workdir <- getwd()
[16:20:30.165]             }
[16:20:30.165]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.165]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.165]         }
[16:20:30.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.165]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.165]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.165]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.165]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.165]             base::names(...future.oldOptions))
[16:20:30.165]     }
[16:20:30.165]     if (FALSE) {
[16:20:30.165]     }
[16:20:30.165]     else {
[16:20:30.165]         if (TRUE) {
[16:20:30.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.165]                 open = "w")
[16:20:30.165]         }
[16:20:30.165]         else {
[16:20:30.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.165]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.165]         }
[16:20:30.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.165]             base::sink(type = "output", split = FALSE)
[16:20:30.165]             base::close(...future.stdout)
[16:20:30.165]         }, add = TRUE)
[16:20:30.165]     }
[16:20:30.165]     ...future.frame <- base::sys.nframe()
[16:20:30.165]     ...future.conditions <- base::list()
[16:20:30.165]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.165]     if (FALSE) {
[16:20:30.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.165]     }
[16:20:30.165]     ...future.result <- base::tryCatch({
[16:20:30.165]         base::withCallingHandlers({
[16:20:30.165]             ...future.value <- base::withVisible(base::local({
[16:20:30.165]                 ...future.makeSendCondition <- base::local({
[16:20:30.165]                   sendCondition <- NULL
[16:20:30.165]                   function(frame = 1L) {
[16:20:30.165]                     if (is.function(sendCondition)) 
[16:20:30.165]                       return(sendCondition)
[16:20:30.165]                     ns <- getNamespace("parallel")
[16:20:30.165]                     if (exists("sendData", mode = "function", 
[16:20:30.165]                       envir = ns)) {
[16:20:30.165]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.165]                         envir = ns)
[16:20:30.165]                       envir <- sys.frame(frame)
[16:20:30.165]                       master <- NULL
[16:20:30.165]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.165]                         !identical(envir, emptyenv())) {
[16:20:30.165]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.165]                           inherits = FALSE)) {
[16:20:30.165]                           master <- get("master", mode = "list", 
[16:20:30.165]                             envir = envir, inherits = FALSE)
[16:20:30.165]                           if (inherits(master, c("SOCKnode", 
[16:20:30.165]                             "SOCK0node"))) {
[16:20:30.165]                             sendCondition <<- function(cond) {
[16:20:30.165]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.165]                                 success = TRUE)
[16:20:30.165]                               parallel_sendData(master, data)
[16:20:30.165]                             }
[16:20:30.165]                             return(sendCondition)
[16:20:30.165]                           }
[16:20:30.165]                         }
[16:20:30.165]                         frame <- frame + 1L
[16:20:30.165]                         envir <- sys.frame(frame)
[16:20:30.165]                       }
[16:20:30.165]                     }
[16:20:30.165]                     sendCondition <<- function(cond) NULL
[16:20:30.165]                   }
[16:20:30.165]                 })
[16:20:30.165]                 withCallingHandlers({
[16:20:30.165]                   42
[16:20:30.165]                 }, immediateCondition = function(cond) {
[16:20:30.165]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.165]                   sendCondition(cond)
[16:20:30.165]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.165]                   {
[16:20:30.165]                     inherits <- base::inherits
[16:20:30.165]                     invokeRestart <- base::invokeRestart
[16:20:30.165]                     is.null <- base::is.null
[16:20:30.165]                     muffled <- FALSE
[16:20:30.165]                     if (inherits(cond, "message")) {
[16:20:30.165]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.165]                       if (muffled) 
[16:20:30.165]                         invokeRestart("muffleMessage")
[16:20:30.165]                     }
[16:20:30.165]                     else if (inherits(cond, "warning")) {
[16:20:30.165]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.165]                       if (muffled) 
[16:20:30.165]                         invokeRestart("muffleWarning")
[16:20:30.165]                     }
[16:20:30.165]                     else if (inherits(cond, "condition")) {
[16:20:30.165]                       if (!is.null(pattern)) {
[16:20:30.165]                         computeRestarts <- base::computeRestarts
[16:20:30.165]                         grepl <- base::grepl
[16:20:30.165]                         restarts <- computeRestarts(cond)
[16:20:30.165]                         for (restart in restarts) {
[16:20:30.165]                           name <- restart$name
[16:20:30.165]                           if (is.null(name)) 
[16:20:30.165]                             next
[16:20:30.165]                           if (!grepl(pattern, name)) 
[16:20:30.165]                             next
[16:20:30.165]                           invokeRestart(restart)
[16:20:30.165]                           muffled <- TRUE
[16:20:30.165]                           break
[16:20:30.165]                         }
[16:20:30.165]                       }
[16:20:30.165]                     }
[16:20:30.165]                     invisible(muffled)
[16:20:30.165]                   }
[16:20:30.165]                   muffleCondition(cond)
[16:20:30.165]                 })
[16:20:30.165]             }))
[16:20:30.165]             future::FutureResult(value = ...future.value$value, 
[16:20:30.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.165]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.165]                     ...future.globalenv.names))
[16:20:30.165]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.165]         }, condition = base::local({
[16:20:30.165]             c <- base::c
[16:20:30.165]             inherits <- base::inherits
[16:20:30.165]             invokeRestart <- base::invokeRestart
[16:20:30.165]             length <- base::length
[16:20:30.165]             list <- base::list
[16:20:30.165]             seq.int <- base::seq.int
[16:20:30.165]             signalCondition <- base::signalCondition
[16:20:30.165]             sys.calls <- base::sys.calls
[16:20:30.165]             `[[` <- base::`[[`
[16:20:30.165]             `+` <- base::`+`
[16:20:30.165]             `<<-` <- base::`<<-`
[16:20:30.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.165]                   3L)]
[16:20:30.165]             }
[16:20:30.165]             function(cond) {
[16:20:30.165]                 is_error <- inherits(cond, "error")
[16:20:30.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.165]                   NULL)
[16:20:30.165]                 if (is_error) {
[16:20:30.165]                   sessionInformation <- function() {
[16:20:30.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.165]                       search = base::search(), system = base::Sys.info())
[16:20:30.165]                   }
[16:20:30.165]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.165]                     cond$call), session = sessionInformation(), 
[16:20:30.165]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.165]                   signalCondition(cond)
[16:20:30.165]                 }
[16:20:30.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.165]                 "immediateCondition"))) {
[16:20:30.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.165]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.165]                   if (TRUE && !signal) {
[16:20:30.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.165]                     {
[16:20:30.165]                       inherits <- base::inherits
[16:20:30.165]                       invokeRestart <- base::invokeRestart
[16:20:30.165]                       is.null <- base::is.null
[16:20:30.165]                       muffled <- FALSE
[16:20:30.165]                       if (inherits(cond, "message")) {
[16:20:30.165]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.165]                         if (muffled) 
[16:20:30.165]                           invokeRestart("muffleMessage")
[16:20:30.165]                       }
[16:20:30.165]                       else if (inherits(cond, "warning")) {
[16:20:30.165]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.165]                         if (muffled) 
[16:20:30.165]                           invokeRestart("muffleWarning")
[16:20:30.165]                       }
[16:20:30.165]                       else if (inherits(cond, "condition")) {
[16:20:30.165]                         if (!is.null(pattern)) {
[16:20:30.165]                           computeRestarts <- base::computeRestarts
[16:20:30.165]                           grepl <- base::grepl
[16:20:30.165]                           restarts <- computeRestarts(cond)
[16:20:30.165]                           for (restart in restarts) {
[16:20:30.165]                             name <- restart$name
[16:20:30.165]                             if (is.null(name)) 
[16:20:30.165]                               next
[16:20:30.165]                             if (!grepl(pattern, name)) 
[16:20:30.165]                               next
[16:20:30.165]                             invokeRestart(restart)
[16:20:30.165]                             muffled <- TRUE
[16:20:30.165]                             break
[16:20:30.165]                           }
[16:20:30.165]                         }
[16:20:30.165]                       }
[16:20:30.165]                       invisible(muffled)
[16:20:30.165]                     }
[16:20:30.165]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.165]                   }
[16:20:30.165]                 }
[16:20:30.165]                 else {
[16:20:30.165]                   if (TRUE) {
[16:20:30.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.165]                     {
[16:20:30.165]                       inherits <- base::inherits
[16:20:30.165]                       invokeRestart <- base::invokeRestart
[16:20:30.165]                       is.null <- base::is.null
[16:20:30.165]                       muffled <- FALSE
[16:20:30.165]                       if (inherits(cond, "message")) {
[16:20:30.165]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.165]                         if (muffled) 
[16:20:30.165]                           invokeRestart("muffleMessage")
[16:20:30.165]                       }
[16:20:30.165]                       else if (inherits(cond, "warning")) {
[16:20:30.165]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.165]                         if (muffled) 
[16:20:30.165]                           invokeRestart("muffleWarning")
[16:20:30.165]                       }
[16:20:30.165]                       else if (inherits(cond, "condition")) {
[16:20:30.165]                         if (!is.null(pattern)) {
[16:20:30.165]                           computeRestarts <- base::computeRestarts
[16:20:30.165]                           grepl <- base::grepl
[16:20:30.165]                           restarts <- computeRestarts(cond)
[16:20:30.165]                           for (restart in restarts) {
[16:20:30.165]                             name <- restart$name
[16:20:30.165]                             if (is.null(name)) 
[16:20:30.165]                               next
[16:20:30.165]                             if (!grepl(pattern, name)) 
[16:20:30.165]                               next
[16:20:30.165]                             invokeRestart(restart)
[16:20:30.165]                             muffled <- TRUE
[16:20:30.165]                             break
[16:20:30.165]                           }
[16:20:30.165]                         }
[16:20:30.165]                       }
[16:20:30.165]                       invisible(muffled)
[16:20:30.165]                     }
[16:20:30.165]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.165]                   }
[16:20:30.165]                 }
[16:20:30.165]             }
[16:20:30.165]         }))
[16:20:30.165]     }, error = function(ex) {
[16:20:30.165]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.165]                 ...future.rng), started = ...future.startTime, 
[16:20:30.165]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.165]             version = "1.8"), class = "FutureResult")
[16:20:30.165]     }, finally = {
[16:20:30.165]         if (!identical(...future.workdir, getwd())) 
[16:20:30.165]             setwd(...future.workdir)
[16:20:30.165]         {
[16:20:30.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.165]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.165]             }
[16:20:30.165]             base::options(...future.oldOptions)
[16:20:30.165]             if (.Platform$OS.type == "windows") {
[16:20:30.165]                 old_names <- names(...future.oldEnvVars)
[16:20:30.165]                 envs <- base::Sys.getenv()
[16:20:30.165]                 names <- names(envs)
[16:20:30.165]                 common <- intersect(names, old_names)
[16:20:30.165]                 added <- setdiff(names, old_names)
[16:20:30.165]                 removed <- setdiff(old_names, names)
[16:20:30.165]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.165]                   envs[common]]
[16:20:30.165]                 NAMES <- toupper(changed)
[16:20:30.165]                 args <- list()
[16:20:30.165]                 for (kk in seq_along(NAMES)) {
[16:20:30.165]                   name <- changed[[kk]]
[16:20:30.165]                   NAME <- NAMES[[kk]]
[16:20:30.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.165]                     next
[16:20:30.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.165]                 }
[16:20:30.165]                 NAMES <- toupper(added)
[16:20:30.165]                 for (kk in seq_along(NAMES)) {
[16:20:30.165]                   name <- added[[kk]]
[16:20:30.165]                   NAME <- NAMES[[kk]]
[16:20:30.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.165]                     next
[16:20:30.165]                   args[[name]] <- ""
[16:20:30.165]                 }
[16:20:30.165]                 NAMES <- toupper(removed)
[16:20:30.165]                 for (kk in seq_along(NAMES)) {
[16:20:30.165]                   name <- removed[[kk]]
[16:20:30.165]                   NAME <- NAMES[[kk]]
[16:20:30.165]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.165]                     next
[16:20:30.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.165]                 }
[16:20:30.165]                 if (length(args) > 0) 
[16:20:30.165]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.165]             }
[16:20:30.165]             else {
[16:20:30.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.165]             }
[16:20:30.165]             {
[16:20:30.165]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.165]                   0L) {
[16:20:30.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.165]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.165]                   base::options(opts)
[16:20:30.165]                 }
[16:20:30.165]                 {
[16:20:30.165]                   {
[16:20:30.165]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.165]                     NULL
[16:20:30.165]                   }
[16:20:30.165]                   options(future.plan = NULL)
[16:20:30.165]                   if (is.na(NA_character_)) 
[16:20:30.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.165]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.165]                     .init = FALSE)
[16:20:30.165]                 }
[16:20:30.165]             }
[16:20:30.165]         }
[16:20:30.165]     })
[16:20:30.165]     if (TRUE) {
[16:20:30.165]         base::sink(type = "output", split = FALSE)
[16:20:30.165]         if (TRUE) {
[16:20:30.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.165]         }
[16:20:30.165]         else {
[16:20:30.165]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.165]         }
[16:20:30.165]         base::close(...future.stdout)
[16:20:30.165]         ...future.stdout <- NULL
[16:20:30.165]     }
[16:20:30.165]     ...future.result$conditions <- ...future.conditions
[16:20:30.165]     ...future.result$finished <- base::Sys.time()
[16:20:30.165]     ...future.result
[16:20:30.165] }
[16:20:30.168] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.173] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.174] - Validating connection of MultisessionFuture
[16:20:30.174] - received message: FutureResult
[16:20:30.174] - Received FutureResult
[16:20:30.174] - Erased future from FutureRegistry
[16:20:30.174] result() for ClusterFuture ...
[16:20:30.174] - result already collected: FutureResult
[16:20:30.175] result() for ClusterFuture ... done
[16:20:30.175] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.175] result() for ClusterFuture ...
[16:20:30.175] - result already collected: FutureResult
[16:20:30.175] result() for ClusterFuture ... done
[16:20:30.175] result() for ClusterFuture ...
[16:20:30.175] - result already collected: FutureResult
[16:20:30.175] result() for ClusterFuture ... done
[16:20:30.176] getGlobalsAndPackages() ...
[16:20:30.176] Searching for globals...
[16:20:30.176] 
[16:20:30.176] Searching for globals ... DONE
[16:20:30.176] - globals: [0] <none>
[16:20:30.177] getGlobalsAndPackages() ... DONE
[16:20:30.177] run() for ‘Future’ ...
[16:20:30.177] - state: ‘created’
[16:20:30.177] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:30.192] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.192] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:30.192]   - Field: ‘node’
[16:20:30.192]   - Field: ‘label’
[16:20:30.192]   - Field: ‘local’
[16:20:30.192]   - Field: ‘owner’
[16:20:30.192]   - Field: ‘envir’
[16:20:30.192]   - Field: ‘workers’
[16:20:30.192]   - Field: ‘packages’
[16:20:30.193]   - Field: ‘gc’
[16:20:30.193]   - Field: ‘conditions’
[16:20:30.193]   - Field: ‘persistent’
[16:20:30.193]   - Field: ‘expr’
[16:20:30.193]   - Field: ‘uuid’
[16:20:30.193]   - Field: ‘seed’
[16:20:30.193]   - Field: ‘version’
[16:20:30.193]   - Field: ‘result’
[16:20:30.193]   - Field: ‘asynchronous’
[16:20:30.194]   - Field: ‘calls’
[16:20:30.194]   - Field: ‘globals’
[16:20:30.194]   - Field: ‘stdout’
[16:20:30.194]   - Field: ‘earlySignal’
[16:20:30.194]   - Field: ‘lazy’
[16:20:30.194]   - Field: ‘state’
[16:20:30.194] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:30.194] - Launch lazy future ...
[16:20:30.195] Packages needed by the future expression (n = 0): <none>
[16:20:30.195] Packages needed by future strategies (n = 0): <none>
[16:20:30.195] {
[16:20:30.195]     {
[16:20:30.195]         {
[16:20:30.195]             ...future.startTime <- base::Sys.time()
[16:20:30.195]             {
[16:20:30.195]                 {
[16:20:30.195]                   {
[16:20:30.195]                     {
[16:20:30.195]                       base::local({
[16:20:30.195]                         has_future <- base::requireNamespace("future", 
[16:20:30.195]                           quietly = TRUE)
[16:20:30.195]                         if (has_future) {
[16:20:30.195]                           ns <- base::getNamespace("future")
[16:20:30.195]                           version <- ns[[".package"]][["version"]]
[16:20:30.195]                           if (is.null(version)) 
[16:20:30.195]                             version <- utils::packageVersion("future")
[16:20:30.195]                         }
[16:20:30.195]                         else {
[16:20:30.195]                           version <- NULL
[16:20:30.195]                         }
[16:20:30.195]                         if (!has_future || version < "1.8.0") {
[16:20:30.195]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.195]                             "", base::R.version$version.string), 
[16:20:30.195]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.195]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.195]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.195]                               "release", "version")], collapse = " "), 
[16:20:30.195]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.195]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.195]                             info)
[16:20:30.195]                           info <- base::paste(info, collapse = "; ")
[16:20:30.195]                           if (!has_future) {
[16:20:30.195]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.195]                               info)
[16:20:30.195]                           }
[16:20:30.195]                           else {
[16:20:30.195]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.195]                               info, version)
[16:20:30.195]                           }
[16:20:30.195]                           base::stop(msg)
[16:20:30.195]                         }
[16:20:30.195]                       })
[16:20:30.195]                     }
[16:20:30.195]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.195]                     base::options(mc.cores = 1L)
[16:20:30.195]                   }
[16:20:30.195]                   ...future.strategy.old <- future::plan("list")
[16:20:30.195]                   options(future.plan = NULL)
[16:20:30.195]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.195]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.195]                 }
[16:20:30.195]                 ...future.workdir <- getwd()
[16:20:30.195]             }
[16:20:30.195]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.195]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.195]         }
[16:20:30.195]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.195]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.195]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.195]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.195]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.195]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.195]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.195]             base::names(...future.oldOptions))
[16:20:30.195]     }
[16:20:30.195]     if (FALSE) {
[16:20:30.195]     }
[16:20:30.195]     else {
[16:20:30.195]         if (TRUE) {
[16:20:30.195]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.195]                 open = "w")
[16:20:30.195]         }
[16:20:30.195]         else {
[16:20:30.195]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.195]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.195]         }
[16:20:30.195]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.195]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.195]             base::sink(type = "output", split = FALSE)
[16:20:30.195]             base::close(...future.stdout)
[16:20:30.195]         }, add = TRUE)
[16:20:30.195]     }
[16:20:30.195]     ...future.frame <- base::sys.nframe()
[16:20:30.195]     ...future.conditions <- base::list()
[16:20:30.195]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.195]     if (FALSE) {
[16:20:30.195]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.195]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.195]     }
[16:20:30.195]     ...future.result <- base::tryCatch({
[16:20:30.195]         base::withCallingHandlers({
[16:20:30.195]             ...future.value <- base::withVisible(base::local({
[16:20:30.195]                 ...future.makeSendCondition <- base::local({
[16:20:30.195]                   sendCondition <- NULL
[16:20:30.195]                   function(frame = 1L) {
[16:20:30.195]                     if (is.function(sendCondition)) 
[16:20:30.195]                       return(sendCondition)
[16:20:30.195]                     ns <- getNamespace("parallel")
[16:20:30.195]                     if (exists("sendData", mode = "function", 
[16:20:30.195]                       envir = ns)) {
[16:20:30.195]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.195]                         envir = ns)
[16:20:30.195]                       envir <- sys.frame(frame)
[16:20:30.195]                       master <- NULL
[16:20:30.195]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.195]                         !identical(envir, emptyenv())) {
[16:20:30.195]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.195]                           inherits = FALSE)) {
[16:20:30.195]                           master <- get("master", mode = "list", 
[16:20:30.195]                             envir = envir, inherits = FALSE)
[16:20:30.195]                           if (inherits(master, c("SOCKnode", 
[16:20:30.195]                             "SOCK0node"))) {
[16:20:30.195]                             sendCondition <<- function(cond) {
[16:20:30.195]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.195]                                 success = TRUE)
[16:20:30.195]                               parallel_sendData(master, data)
[16:20:30.195]                             }
[16:20:30.195]                             return(sendCondition)
[16:20:30.195]                           }
[16:20:30.195]                         }
[16:20:30.195]                         frame <- frame + 1L
[16:20:30.195]                         envir <- sys.frame(frame)
[16:20:30.195]                       }
[16:20:30.195]                     }
[16:20:30.195]                     sendCondition <<- function(cond) NULL
[16:20:30.195]                   }
[16:20:30.195]                 })
[16:20:30.195]                 withCallingHandlers({
[16:20:30.195]                   42
[16:20:30.195]                 }, immediateCondition = function(cond) {
[16:20:30.195]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.195]                   sendCondition(cond)
[16:20:30.195]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.195]                   {
[16:20:30.195]                     inherits <- base::inherits
[16:20:30.195]                     invokeRestart <- base::invokeRestart
[16:20:30.195]                     is.null <- base::is.null
[16:20:30.195]                     muffled <- FALSE
[16:20:30.195]                     if (inherits(cond, "message")) {
[16:20:30.195]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.195]                       if (muffled) 
[16:20:30.195]                         invokeRestart("muffleMessage")
[16:20:30.195]                     }
[16:20:30.195]                     else if (inherits(cond, "warning")) {
[16:20:30.195]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.195]                       if (muffled) 
[16:20:30.195]                         invokeRestart("muffleWarning")
[16:20:30.195]                     }
[16:20:30.195]                     else if (inherits(cond, "condition")) {
[16:20:30.195]                       if (!is.null(pattern)) {
[16:20:30.195]                         computeRestarts <- base::computeRestarts
[16:20:30.195]                         grepl <- base::grepl
[16:20:30.195]                         restarts <- computeRestarts(cond)
[16:20:30.195]                         for (restart in restarts) {
[16:20:30.195]                           name <- restart$name
[16:20:30.195]                           if (is.null(name)) 
[16:20:30.195]                             next
[16:20:30.195]                           if (!grepl(pattern, name)) 
[16:20:30.195]                             next
[16:20:30.195]                           invokeRestart(restart)
[16:20:30.195]                           muffled <- TRUE
[16:20:30.195]                           break
[16:20:30.195]                         }
[16:20:30.195]                       }
[16:20:30.195]                     }
[16:20:30.195]                     invisible(muffled)
[16:20:30.195]                   }
[16:20:30.195]                   muffleCondition(cond)
[16:20:30.195]                 })
[16:20:30.195]             }))
[16:20:30.195]             future::FutureResult(value = ...future.value$value, 
[16:20:30.195]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.195]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.195]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.195]                     ...future.globalenv.names))
[16:20:30.195]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.195]         }, condition = base::local({
[16:20:30.195]             c <- base::c
[16:20:30.195]             inherits <- base::inherits
[16:20:30.195]             invokeRestart <- base::invokeRestart
[16:20:30.195]             length <- base::length
[16:20:30.195]             list <- base::list
[16:20:30.195]             seq.int <- base::seq.int
[16:20:30.195]             signalCondition <- base::signalCondition
[16:20:30.195]             sys.calls <- base::sys.calls
[16:20:30.195]             `[[` <- base::`[[`
[16:20:30.195]             `+` <- base::`+`
[16:20:30.195]             `<<-` <- base::`<<-`
[16:20:30.195]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.195]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.195]                   3L)]
[16:20:30.195]             }
[16:20:30.195]             function(cond) {
[16:20:30.195]                 is_error <- inherits(cond, "error")
[16:20:30.195]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.195]                   NULL)
[16:20:30.195]                 if (is_error) {
[16:20:30.195]                   sessionInformation <- function() {
[16:20:30.195]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.195]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.195]                       search = base::search(), system = base::Sys.info())
[16:20:30.195]                   }
[16:20:30.195]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.195]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.195]                     cond$call), session = sessionInformation(), 
[16:20:30.195]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.195]                   signalCondition(cond)
[16:20:30.195]                 }
[16:20:30.195]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.195]                 "immediateCondition"))) {
[16:20:30.195]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.195]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.195]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.195]                   if (TRUE && !signal) {
[16:20:30.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.195]                     {
[16:20:30.195]                       inherits <- base::inherits
[16:20:30.195]                       invokeRestart <- base::invokeRestart
[16:20:30.195]                       is.null <- base::is.null
[16:20:30.195]                       muffled <- FALSE
[16:20:30.195]                       if (inherits(cond, "message")) {
[16:20:30.195]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.195]                         if (muffled) 
[16:20:30.195]                           invokeRestart("muffleMessage")
[16:20:30.195]                       }
[16:20:30.195]                       else if (inherits(cond, "warning")) {
[16:20:30.195]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.195]                         if (muffled) 
[16:20:30.195]                           invokeRestart("muffleWarning")
[16:20:30.195]                       }
[16:20:30.195]                       else if (inherits(cond, "condition")) {
[16:20:30.195]                         if (!is.null(pattern)) {
[16:20:30.195]                           computeRestarts <- base::computeRestarts
[16:20:30.195]                           grepl <- base::grepl
[16:20:30.195]                           restarts <- computeRestarts(cond)
[16:20:30.195]                           for (restart in restarts) {
[16:20:30.195]                             name <- restart$name
[16:20:30.195]                             if (is.null(name)) 
[16:20:30.195]                               next
[16:20:30.195]                             if (!grepl(pattern, name)) 
[16:20:30.195]                               next
[16:20:30.195]                             invokeRestart(restart)
[16:20:30.195]                             muffled <- TRUE
[16:20:30.195]                             break
[16:20:30.195]                           }
[16:20:30.195]                         }
[16:20:30.195]                       }
[16:20:30.195]                       invisible(muffled)
[16:20:30.195]                     }
[16:20:30.195]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.195]                   }
[16:20:30.195]                 }
[16:20:30.195]                 else {
[16:20:30.195]                   if (TRUE) {
[16:20:30.195]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.195]                     {
[16:20:30.195]                       inherits <- base::inherits
[16:20:30.195]                       invokeRestart <- base::invokeRestart
[16:20:30.195]                       is.null <- base::is.null
[16:20:30.195]                       muffled <- FALSE
[16:20:30.195]                       if (inherits(cond, "message")) {
[16:20:30.195]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.195]                         if (muffled) 
[16:20:30.195]                           invokeRestart("muffleMessage")
[16:20:30.195]                       }
[16:20:30.195]                       else if (inherits(cond, "warning")) {
[16:20:30.195]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.195]                         if (muffled) 
[16:20:30.195]                           invokeRestart("muffleWarning")
[16:20:30.195]                       }
[16:20:30.195]                       else if (inherits(cond, "condition")) {
[16:20:30.195]                         if (!is.null(pattern)) {
[16:20:30.195]                           computeRestarts <- base::computeRestarts
[16:20:30.195]                           grepl <- base::grepl
[16:20:30.195]                           restarts <- computeRestarts(cond)
[16:20:30.195]                           for (restart in restarts) {
[16:20:30.195]                             name <- restart$name
[16:20:30.195]                             if (is.null(name)) 
[16:20:30.195]                               next
[16:20:30.195]                             if (!grepl(pattern, name)) 
[16:20:30.195]                               next
[16:20:30.195]                             invokeRestart(restart)
[16:20:30.195]                             muffled <- TRUE
[16:20:30.195]                             break
[16:20:30.195]                           }
[16:20:30.195]                         }
[16:20:30.195]                       }
[16:20:30.195]                       invisible(muffled)
[16:20:30.195]                     }
[16:20:30.195]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.195]                   }
[16:20:30.195]                 }
[16:20:30.195]             }
[16:20:30.195]         }))
[16:20:30.195]     }, error = function(ex) {
[16:20:30.195]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.195]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.195]                 ...future.rng), started = ...future.startTime, 
[16:20:30.195]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.195]             version = "1.8"), class = "FutureResult")
[16:20:30.195]     }, finally = {
[16:20:30.195]         if (!identical(...future.workdir, getwd())) 
[16:20:30.195]             setwd(...future.workdir)
[16:20:30.195]         {
[16:20:30.195]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.195]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.195]             }
[16:20:30.195]             base::options(...future.oldOptions)
[16:20:30.195]             if (.Platform$OS.type == "windows") {
[16:20:30.195]                 old_names <- names(...future.oldEnvVars)
[16:20:30.195]                 envs <- base::Sys.getenv()
[16:20:30.195]                 names <- names(envs)
[16:20:30.195]                 common <- intersect(names, old_names)
[16:20:30.195]                 added <- setdiff(names, old_names)
[16:20:30.195]                 removed <- setdiff(old_names, names)
[16:20:30.195]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.195]                   envs[common]]
[16:20:30.195]                 NAMES <- toupper(changed)
[16:20:30.195]                 args <- list()
[16:20:30.195]                 for (kk in seq_along(NAMES)) {
[16:20:30.195]                   name <- changed[[kk]]
[16:20:30.195]                   NAME <- NAMES[[kk]]
[16:20:30.195]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.195]                     next
[16:20:30.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.195]                 }
[16:20:30.195]                 NAMES <- toupper(added)
[16:20:30.195]                 for (kk in seq_along(NAMES)) {
[16:20:30.195]                   name <- added[[kk]]
[16:20:30.195]                   NAME <- NAMES[[kk]]
[16:20:30.195]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.195]                     next
[16:20:30.195]                   args[[name]] <- ""
[16:20:30.195]                 }
[16:20:30.195]                 NAMES <- toupper(removed)
[16:20:30.195]                 for (kk in seq_along(NAMES)) {
[16:20:30.195]                   name <- removed[[kk]]
[16:20:30.195]                   NAME <- NAMES[[kk]]
[16:20:30.195]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.195]                     next
[16:20:30.195]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.195]                 }
[16:20:30.195]                 if (length(args) > 0) 
[16:20:30.195]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.195]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.195]             }
[16:20:30.195]             else {
[16:20:30.195]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.195]             }
[16:20:30.195]             {
[16:20:30.195]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.195]                   0L) {
[16:20:30.195]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.195]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.195]                   base::options(opts)
[16:20:30.195]                 }
[16:20:30.195]                 {
[16:20:30.195]                   {
[16:20:30.195]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.195]                     NULL
[16:20:30.195]                   }
[16:20:30.195]                   options(future.plan = NULL)
[16:20:30.195]                   if (is.na(NA_character_)) 
[16:20:30.195]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.195]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.195]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.195]                     .init = FALSE)
[16:20:30.195]                 }
[16:20:30.195]             }
[16:20:30.195]         }
[16:20:30.195]     })
[16:20:30.195]     if (TRUE) {
[16:20:30.195]         base::sink(type = "output", split = FALSE)
[16:20:30.195]         if (TRUE) {
[16:20:30.195]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.195]         }
[16:20:30.195]         else {
[16:20:30.195]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.195]         }
[16:20:30.195]         base::close(...future.stdout)
[16:20:30.195]         ...future.stdout <- NULL
[16:20:30.195]     }
[16:20:30.195]     ...future.result$conditions <- ...future.conditions
[16:20:30.195]     ...future.result$finished <- base::Sys.time()
[16:20:30.195]     ...future.result
[16:20:30.195] }
[16:20:30.199] MultisessionFuture started
[16:20:30.199] - Launch lazy future ... done
[16:20:30.199] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.200] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.200] - Validating connection of MultisessionFuture
[16:20:30.201] - received message: FutureResult
[16:20:30.201] - Received FutureResult
[16:20:30.201] - Erased future from FutureRegistry
[16:20:30.201] result() for ClusterFuture ...
[16:20:30.201] - result already collected: FutureResult
[16:20:30.201] result() for ClusterFuture ... done
[16:20:30.201] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.201] result() for ClusterFuture ...
[16:20:30.202] - result already collected: FutureResult
[16:20:30.202] result() for ClusterFuture ... done
[16:20:30.202] result() for ClusterFuture ...
[16:20:30.202] - result already collected: FutureResult
[16:20:30.202] result() for ClusterFuture ... done
[16:20:30.202] getGlobalsAndPackages() ...
[16:20:30.203] Searching for globals...
[16:20:30.203] - globals found: [1] ‘{’
[16:20:30.203] Searching for globals ... DONE
[16:20:30.204] Resolving globals: FALSE
[16:20:30.204] 
[16:20:30.204] 
[16:20:30.204] getGlobalsAndPackages() ... DONE
[16:20:30.204] run() for ‘Future’ ...
[16:20:30.205] - state: ‘created’
[16:20:30.205] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:30.219] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.219] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:30.219]   - Field: ‘node’
[16:20:30.219]   - Field: ‘label’
[16:20:30.219]   - Field: ‘local’
[16:20:30.219]   - Field: ‘owner’
[16:20:30.220]   - Field: ‘envir’
[16:20:30.220]   - Field: ‘workers’
[16:20:30.220]   - Field: ‘packages’
[16:20:30.220]   - Field: ‘gc’
[16:20:30.220]   - Field: ‘conditions’
[16:20:30.220]   - Field: ‘persistent’
[16:20:30.220]   - Field: ‘expr’
[16:20:30.220]   - Field: ‘uuid’
[16:20:30.220]   - Field: ‘seed’
[16:20:30.221]   - Field: ‘version’
[16:20:30.221]   - Field: ‘result’
[16:20:30.221]   - Field: ‘asynchronous’
[16:20:30.221]   - Field: ‘calls’
[16:20:30.221]   - Field: ‘globals’
[16:20:30.221]   - Field: ‘stdout’
[16:20:30.221]   - Field: ‘earlySignal’
[16:20:30.221]   - Field: ‘lazy’
[16:20:30.221]   - Field: ‘state’
[16:20:30.222] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:30.222] - Launch lazy future ...
[16:20:30.222] Packages needed by the future expression (n = 0): <none>
[16:20:30.222] Packages needed by future strategies (n = 0): <none>
[16:20:30.223] {
[16:20:30.223]     {
[16:20:30.223]         {
[16:20:30.223]             ...future.startTime <- base::Sys.time()
[16:20:30.223]             {
[16:20:30.223]                 {
[16:20:30.223]                   {
[16:20:30.223]                     {
[16:20:30.223]                       base::local({
[16:20:30.223]                         has_future <- base::requireNamespace("future", 
[16:20:30.223]                           quietly = TRUE)
[16:20:30.223]                         if (has_future) {
[16:20:30.223]                           ns <- base::getNamespace("future")
[16:20:30.223]                           version <- ns[[".package"]][["version"]]
[16:20:30.223]                           if (is.null(version)) 
[16:20:30.223]                             version <- utils::packageVersion("future")
[16:20:30.223]                         }
[16:20:30.223]                         else {
[16:20:30.223]                           version <- NULL
[16:20:30.223]                         }
[16:20:30.223]                         if (!has_future || version < "1.8.0") {
[16:20:30.223]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.223]                             "", base::R.version$version.string), 
[16:20:30.223]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.223]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.223]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.223]                               "release", "version")], collapse = " "), 
[16:20:30.223]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.223]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.223]                             info)
[16:20:30.223]                           info <- base::paste(info, collapse = "; ")
[16:20:30.223]                           if (!has_future) {
[16:20:30.223]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.223]                               info)
[16:20:30.223]                           }
[16:20:30.223]                           else {
[16:20:30.223]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.223]                               info, version)
[16:20:30.223]                           }
[16:20:30.223]                           base::stop(msg)
[16:20:30.223]                         }
[16:20:30.223]                       })
[16:20:30.223]                     }
[16:20:30.223]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.223]                     base::options(mc.cores = 1L)
[16:20:30.223]                   }
[16:20:30.223]                   ...future.strategy.old <- future::plan("list")
[16:20:30.223]                   options(future.plan = NULL)
[16:20:30.223]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.223]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.223]                 }
[16:20:30.223]                 ...future.workdir <- getwd()
[16:20:30.223]             }
[16:20:30.223]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.223]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.223]         }
[16:20:30.223]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.223]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.223]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.223]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.223]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.223]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.223]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.223]             base::names(...future.oldOptions))
[16:20:30.223]     }
[16:20:30.223]     if (FALSE) {
[16:20:30.223]     }
[16:20:30.223]     else {
[16:20:30.223]         if (TRUE) {
[16:20:30.223]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.223]                 open = "w")
[16:20:30.223]         }
[16:20:30.223]         else {
[16:20:30.223]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.223]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.223]         }
[16:20:30.223]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.223]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.223]             base::sink(type = "output", split = FALSE)
[16:20:30.223]             base::close(...future.stdout)
[16:20:30.223]         }, add = TRUE)
[16:20:30.223]     }
[16:20:30.223]     ...future.frame <- base::sys.nframe()
[16:20:30.223]     ...future.conditions <- base::list()
[16:20:30.223]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.223]     if (FALSE) {
[16:20:30.223]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.223]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.223]     }
[16:20:30.223]     ...future.result <- base::tryCatch({
[16:20:30.223]         base::withCallingHandlers({
[16:20:30.223]             ...future.value <- base::withVisible(base::local({
[16:20:30.223]                 ...future.makeSendCondition <- base::local({
[16:20:30.223]                   sendCondition <- NULL
[16:20:30.223]                   function(frame = 1L) {
[16:20:30.223]                     if (is.function(sendCondition)) 
[16:20:30.223]                       return(sendCondition)
[16:20:30.223]                     ns <- getNamespace("parallel")
[16:20:30.223]                     if (exists("sendData", mode = "function", 
[16:20:30.223]                       envir = ns)) {
[16:20:30.223]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.223]                         envir = ns)
[16:20:30.223]                       envir <- sys.frame(frame)
[16:20:30.223]                       master <- NULL
[16:20:30.223]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.223]                         !identical(envir, emptyenv())) {
[16:20:30.223]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.223]                           inherits = FALSE)) {
[16:20:30.223]                           master <- get("master", mode = "list", 
[16:20:30.223]                             envir = envir, inherits = FALSE)
[16:20:30.223]                           if (inherits(master, c("SOCKnode", 
[16:20:30.223]                             "SOCK0node"))) {
[16:20:30.223]                             sendCondition <<- function(cond) {
[16:20:30.223]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.223]                                 success = TRUE)
[16:20:30.223]                               parallel_sendData(master, data)
[16:20:30.223]                             }
[16:20:30.223]                             return(sendCondition)
[16:20:30.223]                           }
[16:20:30.223]                         }
[16:20:30.223]                         frame <- frame + 1L
[16:20:30.223]                         envir <- sys.frame(frame)
[16:20:30.223]                       }
[16:20:30.223]                     }
[16:20:30.223]                     sendCondition <<- function(cond) NULL
[16:20:30.223]                   }
[16:20:30.223]                 })
[16:20:30.223]                 withCallingHandlers({
[16:20:30.223]                   {
[16:20:30.223]                     42
[16:20:30.223]                   }
[16:20:30.223]                 }, immediateCondition = function(cond) {
[16:20:30.223]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.223]                   sendCondition(cond)
[16:20:30.223]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.223]                   {
[16:20:30.223]                     inherits <- base::inherits
[16:20:30.223]                     invokeRestart <- base::invokeRestart
[16:20:30.223]                     is.null <- base::is.null
[16:20:30.223]                     muffled <- FALSE
[16:20:30.223]                     if (inherits(cond, "message")) {
[16:20:30.223]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.223]                       if (muffled) 
[16:20:30.223]                         invokeRestart("muffleMessage")
[16:20:30.223]                     }
[16:20:30.223]                     else if (inherits(cond, "warning")) {
[16:20:30.223]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.223]                       if (muffled) 
[16:20:30.223]                         invokeRestart("muffleWarning")
[16:20:30.223]                     }
[16:20:30.223]                     else if (inherits(cond, "condition")) {
[16:20:30.223]                       if (!is.null(pattern)) {
[16:20:30.223]                         computeRestarts <- base::computeRestarts
[16:20:30.223]                         grepl <- base::grepl
[16:20:30.223]                         restarts <- computeRestarts(cond)
[16:20:30.223]                         for (restart in restarts) {
[16:20:30.223]                           name <- restart$name
[16:20:30.223]                           if (is.null(name)) 
[16:20:30.223]                             next
[16:20:30.223]                           if (!grepl(pattern, name)) 
[16:20:30.223]                             next
[16:20:30.223]                           invokeRestart(restart)
[16:20:30.223]                           muffled <- TRUE
[16:20:30.223]                           break
[16:20:30.223]                         }
[16:20:30.223]                       }
[16:20:30.223]                     }
[16:20:30.223]                     invisible(muffled)
[16:20:30.223]                   }
[16:20:30.223]                   muffleCondition(cond)
[16:20:30.223]                 })
[16:20:30.223]             }))
[16:20:30.223]             future::FutureResult(value = ...future.value$value, 
[16:20:30.223]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.223]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.223]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.223]                     ...future.globalenv.names))
[16:20:30.223]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.223]         }, condition = base::local({
[16:20:30.223]             c <- base::c
[16:20:30.223]             inherits <- base::inherits
[16:20:30.223]             invokeRestart <- base::invokeRestart
[16:20:30.223]             length <- base::length
[16:20:30.223]             list <- base::list
[16:20:30.223]             seq.int <- base::seq.int
[16:20:30.223]             signalCondition <- base::signalCondition
[16:20:30.223]             sys.calls <- base::sys.calls
[16:20:30.223]             `[[` <- base::`[[`
[16:20:30.223]             `+` <- base::`+`
[16:20:30.223]             `<<-` <- base::`<<-`
[16:20:30.223]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.223]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.223]                   3L)]
[16:20:30.223]             }
[16:20:30.223]             function(cond) {
[16:20:30.223]                 is_error <- inherits(cond, "error")
[16:20:30.223]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.223]                   NULL)
[16:20:30.223]                 if (is_error) {
[16:20:30.223]                   sessionInformation <- function() {
[16:20:30.223]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.223]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.223]                       search = base::search(), system = base::Sys.info())
[16:20:30.223]                   }
[16:20:30.223]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.223]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.223]                     cond$call), session = sessionInformation(), 
[16:20:30.223]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.223]                   signalCondition(cond)
[16:20:30.223]                 }
[16:20:30.223]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.223]                 "immediateCondition"))) {
[16:20:30.223]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.223]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.223]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.223]                   if (TRUE && !signal) {
[16:20:30.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.223]                     {
[16:20:30.223]                       inherits <- base::inherits
[16:20:30.223]                       invokeRestart <- base::invokeRestart
[16:20:30.223]                       is.null <- base::is.null
[16:20:30.223]                       muffled <- FALSE
[16:20:30.223]                       if (inherits(cond, "message")) {
[16:20:30.223]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.223]                         if (muffled) 
[16:20:30.223]                           invokeRestart("muffleMessage")
[16:20:30.223]                       }
[16:20:30.223]                       else if (inherits(cond, "warning")) {
[16:20:30.223]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.223]                         if (muffled) 
[16:20:30.223]                           invokeRestart("muffleWarning")
[16:20:30.223]                       }
[16:20:30.223]                       else if (inherits(cond, "condition")) {
[16:20:30.223]                         if (!is.null(pattern)) {
[16:20:30.223]                           computeRestarts <- base::computeRestarts
[16:20:30.223]                           grepl <- base::grepl
[16:20:30.223]                           restarts <- computeRestarts(cond)
[16:20:30.223]                           for (restart in restarts) {
[16:20:30.223]                             name <- restart$name
[16:20:30.223]                             if (is.null(name)) 
[16:20:30.223]                               next
[16:20:30.223]                             if (!grepl(pattern, name)) 
[16:20:30.223]                               next
[16:20:30.223]                             invokeRestart(restart)
[16:20:30.223]                             muffled <- TRUE
[16:20:30.223]                             break
[16:20:30.223]                           }
[16:20:30.223]                         }
[16:20:30.223]                       }
[16:20:30.223]                       invisible(muffled)
[16:20:30.223]                     }
[16:20:30.223]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.223]                   }
[16:20:30.223]                 }
[16:20:30.223]                 else {
[16:20:30.223]                   if (TRUE) {
[16:20:30.223]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.223]                     {
[16:20:30.223]                       inherits <- base::inherits
[16:20:30.223]                       invokeRestart <- base::invokeRestart
[16:20:30.223]                       is.null <- base::is.null
[16:20:30.223]                       muffled <- FALSE
[16:20:30.223]                       if (inherits(cond, "message")) {
[16:20:30.223]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.223]                         if (muffled) 
[16:20:30.223]                           invokeRestart("muffleMessage")
[16:20:30.223]                       }
[16:20:30.223]                       else if (inherits(cond, "warning")) {
[16:20:30.223]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.223]                         if (muffled) 
[16:20:30.223]                           invokeRestart("muffleWarning")
[16:20:30.223]                       }
[16:20:30.223]                       else if (inherits(cond, "condition")) {
[16:20:30.223]                         if (!is.null(pattern)) {
[16:20:30.223]                           computeRestarts <- base::computeRestarts
[16:20:30.223]                           grepl <- base::grepl
[16:20:30.223]                           restarts <- computeRestarts(cond)
[16:20:30.223]                           for (restart in restarts) {
[16:20:30.223]                             name <- restart$name
[16:20:30.223]                             if (is.null(name)) 
[16:20:30.223]                               next
[16:20:30.223]                             if (!grepl(pattern, name)) 
[16:20:30.223]                               next
[16:20:30.223]                             invokeRestart(restart)
[16:20:30.223]                             muffled <- TRUE
[16:20:30.223]                             break
[16:20:30.223]                           }
[16:20:30.223]                         }
[16:20:30.223]                       }
[16:20:30.223]                       invisible(muffled)
[16:20:30.223]                     }
[16:20:30.223]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.223]                   }
[16:20:30.223]                 }
[16:20:30.223]             }
[16:20:30.223]         }))
[16:20:30.223]     }, error = function(ex) {
[16:20:30.223]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.223]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.223]                 ...future.rng), started = ...future.startTime, 
[16:20:30.223]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.223]             version = "1.8"), class = "FutureResult")
[16:20:30.223]     }, finally = {
[16:20:30.223]         if (!identical(...future.workdir, getwd())) 
[16:20:30.223]             setwd(...future.workdir)
[16:20:30.223]         {
[16:20:30.223]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.223]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.223]             }
[16:20:30.223]             base::options(...future.oldOptions)
[16:20:30.223]             if (.Platform$OS.type == "windows") {
[16:20:30.223]                 old_names <- names(...future.oldEnvVars)
[16:20:30.223]                 envs <- base::Sys.getenv()
[16:20:30.223]                 names <- names(envs)
[16:20:30.223]                 common <- intersect(names, old_names)
[16:20:30.223]                 added <- setdiff(names, old_names)
[16:20:30.223]                 removed <- setdiff(old_names, names)
[16:20:30.223]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.223]                   envs[common]]
[16:20:30.223]                 NAMES <- toupper(changed)
[16:20:30.223]                 args <- list()
[16:20:30.223]                 for (kk in seq_along(NAMES)) {
[16:20:30.223]                   name <- changed[[kk]]
[16:20:30.223]                   NAME <- NAMES[[kk]]
[16:20:30.223]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.223]                     next
[16:20:30.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.223]                 }
[16:20:30.223]                 NAMES <- toupper(added)
[16:20:30.223]                 for (kk in seq_along(NAMES)) {
[16:20:30.223]                   name <- added[[kk]]
[16:20:30.223]                   NAME <- NAMES[[kk]]
[16:20:30.223]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.223]                     next
[16:20:30.223]                   args[[name]] <- ""
[16:20:30.223]                 }
[16:20:30.223]                 NAMES <- toupper(removed)
[16:20:30.223]                 for (kk in seq_along(NAMES)) {
[16:20:30.223]                   name <- removed[[kk]]
[16:20:30.223]                   NAME <- NAMES[[kk]]
[16:20:30.223]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.223]                     next
[16:20:30.223]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.223]                 }
[16:20:30.223]                 if (length(args) > 0) 
[16:20:30.223]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.223]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.223]             }
[16:20:30.223]             else {
[16:20:30.223]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.223]             }
[16:20:30.223]             {
[16:20:30.223]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.223]                   0L) {
[16:20:30.223]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.223]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.223]                   base::options(opts)
[16:20:30.223]                 }
[16:20:30.223]                 {
[16:20:30.223]                   {
[16:20:30.223]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.223]                     NULL
[16:20:30.223]                   }
[16:20:30.223]                   options(future.plan = NULL)
[16:20:30.223]                   if (is.na(NA_character_)) 
[16:20:30.223]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.223]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.223]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.223]                     .init = FALSE)
[16:20:30.223]                 }
[16:20:30.223]             }
[16:20:30.223]         }
[16:20:30.223]     })
[16:20:30.223]     if (TRUE) {
[16:20:30.223]         base::sink(type = "output", split = FALSE)
[16:20:30.223]         if (TRUE) {
[16:20:30.223]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.223]         }
[16:20:30.223]         else {
[16:20:30.223]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.223]         }
[16:20:30.223]         base::close(...future.stdout)
[16:20:30.223]         ...future.stdout <- NULL
[16:20:30.223]     }
[16:20:30.223]     ...future.result$conditions <- ...future.conditions
[16:20:30.223]     ...future.result$finished <- base::Sys.time()
[16:20:30.223]     ...future.result
[16:20:30.223] }
[16:20:30.226] MultisessionFuture started
[16:20:30.226] - Launch lazy future ... done
[16:20:30.226] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.227] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.227] - Validating connection of MultisessionFuture
[16:20:30.228] - received message: FutureResult
[16:20:30.228] - Received FutureResult
[16:20:30.228] - Erased future from FutureRegistry
[16:20:30.228] result() for ClusterFuture ...
[16:20:30.228] - result already collected: FutureResult
[16:20:30.228] result() for ClusterFuture ... done
[16:20:30.228] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.229] result() for ClusterFuture ...
[16:20:30.229] - result already collected: FutureResult
[16:20:30.229] result() for ClusterFuture ... done
[16:20:30.229] result() for ClusterFuture ...
[16:20:30.229] - result already collected: FutureResult
[16:20:30.229] result() for ClusterFuture ... done
[16:20:30.233] getGlobalsAndPackages() ...
[16:20:30.233] 
[16:20:30.233] - globals: [0] <none>
[16:20:30.233] getGlobalsAndPackages() ... DONE
[16:20:30.244] Packages needed by the future expression (n = 0): <none>
[16:20:30.244] Packages needed by future strategies (n = 0): <none>
[16:20:30.247] {
[16:20:30.247]     {
[16:20:30.247]         {
[16:20:30.247]             ...future.startTime <- base::Sys.time()
[16:20:30.247]             {
[16:20:30.247]                 {
[16:20:30.247]                   {
[16:20:30.247]                     {
[16:20:30.247]                       base::local({
[16:20:30.247]                         has_future <- base::requireNamespace("future", 
[16:20:30.247]                           quietly = TRUE)
[16:20:30.247]                         if (has_future) {
[16:20:30.247]                           ns <- base::getNamespace("future")
[16:20:30.247]                           version <- ns[[".package"]][["version"]]
[16:20:30.247]                           if (is.null(version)) 
[16:20:30.247]                             version <- utils::packageVersion("future")
[16:20:30.247]                         }
[16:20:30.247]                         else {
[16:20:30.247]                           version <- NULL
[16:20:30.247]                         }
[16:20:30.247]                         if (!has_future || version < "1.8.0") {
[16:20:30.247]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.247]                             "", base::R.version$version.string), 
[16:20:30.247]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.247]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.247]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.247]                               "release", "version")], collapse = " "), 
[16:20:30.247]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.247]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.247]                             info)
[16:20:30.247]                           info <- base::paste(info, collapse = "; ")
[16:20:30.247]                           if (!has_future) {
[16:20:30.247]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.247]                               info)
[16:20:30.247]                           }
[16:20:30.247]                           else {
[16:20:30.247]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.247]                               info, version)
[16:20:30.247]                           }
[16:20:30.247]                           base::stop(msg)
[16:20:30.247]                         }
[16:20:30.247]                       })
[16:20:30.247]                     }
[16:20:30.247]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.247]                     base::options(mc.cores = 1L)
[16:20:30.247]                   }
[16:20:30.247]                   ...future.strategy.old <- future::plan("list")
[16:20:30.247]                   options(future.plan = NULL)
[16:20:30.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.247]                 }
[16:20:30.247]                 ...future.workdir <- getwd()
[16:20:30.247]             }
[16:20:30.247]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.247]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.247]         }
[16:20:30.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.247]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.247]             base::names(...future.oldOptions))
[16:20:30.247]     }
[16:20:30.247]     if (FALSE) {
[16:20:30.247]     }
[16:20:30.247]     else {
[16:20:30.247]         if (TRUE) {
[16:20:30.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.247]                 open = "w")
[16:20:30.247]         }
[16:20:30.247]         else {
[16:20:30.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.247]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.247]         }
[16:20:30.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.247]             base::sink(type = "output", split = FALSE)
[16:20:30.247]             base::close(...future.stdout)
[16:20:30.247]         }, add = TRUE)
[16:20:30.247]     }
[16:20:30.247]     ...future.frame <- base::sys.nframe()
[16:20:30.247]     ...future.conditions <- base::list()
[16:20:30.247]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.247]     if (FALSE) {
[16:20:30.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.247]     }
[16:20:30.247]     ...future.result <- base::tryCatch({
[16:20:30.247]         base::withCallingHandlers({
[16:20:30.247]             ...future.value <- base::withVisible(base::local({
[16:20:30.247]                 ...future.makeSendCondition <- base::local({
[16:20:30.247]                   sendCondition <- NULL
[16:20:30.247]                   function(frame = 1L) {
[16:20:30.247]                     if (is.function(sendCondition)) 
[16:20:30.247]                       return(sendCondition)
[16:20:30.247]                     ns <- getNamespace("parallel")
[16:20:30.247]                     if (exists("sendData", mode = "function", 
[16:20:30.247]                       envir = ns)) {
[16:20:30.247]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.247]                         envir = ns)
[16:20:30.247]                       envir <- sys.frame(frame)
[16:20:30.247]                       master <- NULL
[16:20:30.247]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.247]                         !identical(envir, emptyenv())) {
[16:20:30.247]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.247]                           inherits = FALSE)) {
[16:20:30.247]                           master <- get("master", mode = "list", 
[16:20:30.247]                             envir = envir, inherits = FALSE)
[16:20:30.247]                           if (inherits(master, c("SOCKnode", 
[16:20:30.247]                             "SOCK0node"))) {
[16:20:30.247]                             sendCondition <<- function(cond) {
[16:20:30.247]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.247]                                 success = TRUE)
[16:20:30.247]                               parallel_sendData(master, data)
[16:20:30.247]                             }
[16:20:30.247]                             return(sendCondition)
[16:20:30.247]                           }
[16:20:30.247]                         }
[16:20:30.247]                         frame <- frame + 1L
[16:20:30.247]                         envir <- sys.frame(frame)
[16:20:30.247]                       }
[16:20:30.247]                     }
[16:20:30.247]                     sendCondition <<- function(cond) NULL
[16:20:30.247]                   }
[16:20:30.247]                 })
[16:20:30.247]                 withCallingHandlers({
[16:20:30.247]                   42
[16:20:30.247]                 }, immediateCondition = function(cond) {
[16:20:30.247]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.247]                   sendCondition(cond)
[16:20:30.247]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.247]                   {
[16:20:30.247]                     inherits <- base::inherits
[16:20:30.247]                     invokeRestart <- base::invokeRestart
[16:20:30.247]                     is.null <- base::is.null
[16:20:30.247]                     muffled <- FALSE
[16:20:30.247]                     if (inherits(cond, "message")) {
[16:20:30.247]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.247]                       if (muffled) 
[16:20:30.247]                         invokeRestart("muffleMessage")
[16:20:30.247]                     }
[16:20:30.247]                     else if (inherits(cond, "warning")) {
[16:20:30.247]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.247]                       if (muffled) 
[16:20:30.247]                         invokeRestart("muffleWarning")
[16:20:30.247]                     }
[16:20:30.247]                     else if (inherits(cond, "condition")) {
[16:20:30.247]                       if (!is.null(pattern)) {
[16:20:30.247]                         computeRestarts <- base::computeRestarts
[16:20:30.247]                         grepl <- base::grepl
[16:20:30.247]                         restarts <- computeRestarts(cond)
[16:20:30.247]                         for (restart in restarts) {
[16:20:30.247]                           name <- restart$name
[16:20:30.247]                           if (is.null(name)) 
[16:20:30.247]                             next
[16:20:30.247]                           if (!grepl(pattern, name)) 
[16:20:30.247]                             next
[16:20:30.247]                           invokeRestart(restart)
[16:20:30.247]                           muffled <- TRUE
[16:20:30.247]                           break
[16:20:30.247]                         }
[16:20:30.247]                       }
[16:20:30.247]                     }
[16:20:30.247]                     invisible(muffled)
[16:20:30.247]                   }
[16:20:30.247]                   muffleCondition(cond)
[16:20:30.247]                 })
[16:20:30.247]             }))
[16:20:30.247]             future::FutureResult(value = ...future.value$value, 
[16:20:30.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.247]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.247]                     ...future.globalenv.names))
[16:20:30.247]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.247]         }, condition = base::local({
[16:20:30.247]             c <- base::c
[16:20:30.247]             inherits <- base::inherits
[16:20:30.247]             invokeRestart <- base::invokeRestart
[16:20:30.247]             length <- base::length
[16:20:30.247]             list <- base::list
[16:20:30.247]             seq.int <- base::seq.int
[16:20:30.247]             signalCondition <- base::signalCondition
[16:20:30.247]             sys.calls <- base::sys.calls
[16:20:30.247]             `[[` <- base::`[[`
[16:20:30.247]             `+` <- base::`+`
[16:20:30.247]             `<<-` <- base::`<<-`
[16:20:30.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.247]                   3L)]
[16:20:30.247]             }
[16:20:30.247]             function(cond) {
[16:20:30.247]                 is_error <- inherits(cond, "error")
[16:20:30.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.247]                   NULL)
[16:20:30.247]                 if (is_error) {
[16:20:30.247]                   sessionInformation <- function() {
[16:20:30.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.247]                       search = base::search(), system = base::Sys.info())
[16:20:30.247]                   }
[16:20:30.247]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.247]                     cond$call), session = sessionInformation(), 
[16:20:30.247]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.247]                   signalCondition(cond)
[16:20:30.247]                 }
[16:20:30.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.247]                 "immediateCondition"))) {
[16:20:30.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.247]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.247]                   if (TRUE && !signal) {
[16:20:30.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.247]                     {
[16:20:30.247]                       inherits <- base::inherits
[16:20:30.247]                       invokeRestart <- base::invokeRestart
[16:20:30.247]                       is.null <- base::is.null
[16:20:30.247]                       muffled <- FALSE
[16:20:30.247]                       if (inherits(cond, "message")) {
[16:20:30.247]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.247]                         if (muffled) 
[16:20:30.247]                           invokeRestart("muffleMessage")
[16:20:30.247]                       }
[16:20:30.247]                       else if (inherits(cond, "warning")) {
[16:20:30.247]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.247]                         if (muffled) 
[16:20:30.247]                           invokeRestart("muffleWarning")
[16:20:30.247]                       }
[16:20:30.247]                       else if (inherits(cond, "condition")) {
[16:20:30.247]                         if (!is.null(pattern)) {
[16:20:30.247]                           computeRestarts <- base::computeRestarts
[16:20:30.247]                           grepl <- base::grepl
[16:20:30.247]                           restarts <- computeRestarts(cond)
[16:20:30.247]                           for (restart in restarts) {
[16:20:30.247]                             name <- restart$name
[16:20:30.247]                             if (is.null(name)) 
[16:20:30.247]                               next
[16:20:30.247]                             if (!grepl(pattern, name)) 
[16:20:30.247]                               next
[16:20:30.247]                             invokeRestart(restart)
[16:20:30.247]                             muffled <- TRUE
[16:20:30.247]                             break
[16:20:30.247]                           }
[16:20:30.247]                         }
[16:20:30.247]                       }
[16:20:30.247]                       invisible(muffled)
[16:20:30.247]                     }
[16:20:30.247]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.247]                   }
[16:20:30.247]                 }
[16:20:30.247]                 else {
[16:20:30.247]                   if (TRUE) {
[16:20:30.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.247]                     {
[16:20:30.247]                       inherits <- base::inherits
[16:20:30.247]                       invokeRestart <- base::invokeRestart
[16:20:30.247]                       is.null <- base::is.null
[16:20:30.247]                       muffled <- FALSE
[16:20:30.247]                       if (inherits(cond, "message")) {
[16:20:30.247]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.247]                         if (muffled) 
[16:20:30.247]                           invokeRestart("muffleMessage")
[16:20:30.247]                       }
[16:20:30.247]                       else if (inherits(cond, "warning")) {
[16:20:30.247]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.247]                         if (muffled) 
[16:20:30.247]                           invokeRestart("muffleWarning")
[16:20:30.247]                       }
[16:20:30.247]                       else if (inherits(cond, "condition")) {
[16:20:30.247]                         if (!is.null(pattern)) {
[16:20:30.247]                           computeRestarts <- base::computeRestarts
[16:20:30.247]                           grepl <- base::grepl
[16:20:30.247]                           restarts <- computeRestarts(cond)
[16:20:30.247]                           for (restart in restarts) {
[16:20:30.247]                             name <- restart$name
[16:20:30.247]                             if (is.null(name)) 
[16:20:30.247]                               next
[16:20:30.247]                             if (!grepl(pattern, name)) 
[16:20:30.247]                               next
[16:20:30.247]                             invokeRestart(restart)
[16:20:30.247]                             muffled <- TRUE
[16:20:30.247]                             break
[16:20:30.247]                           }
[16:20:30.247]                         }
[16:20:30.247]                       }
[16:20:30.247]                       invisible(muffled)
[16:20:30.247]                     }
[16:20:30.247]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.247]                   }
[16:20:30.247]                 }
[16:20:30.247]             }
[16:20:30.247]         }))
[16:20:30.247]     }, error = function(ex) {
[16:20:30.247]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.247]                 ...future.rng), started = ...future.startTime, 
[16:20:30.247]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.247]             version = "1.8"), class = "FutureResult")
[16:20:30.247]     }, finally = {
[16:20:30.247]         if (!identical(...future.workdir, getwd())) 
[16:20:30.247]             setwd(...future.workdir)
[16:20:30.247]         {
[16:20:30.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.247]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.247]             }
[16:20:30.247]             base::options(...future.oldOptions)
[16:20:30.247]             if (.Platform$OS.type == "windows") {
[16:20:30.247]                 old_names <- names(...future.oldEnvVars)
[16:20:30.247]                 envs <- base::Sys.getenv()
[16:20:30.247]                 names <- names(envs)
[16:20:30.247]                 common <- intersect(names, old_names)
[16:20:30.247]                 added <- setdiff(names, old_names)
[16:20:30.247]                 removed <- setdiff(old_names, names)
[16:20:30.247]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.247]                   envs[common]]
[16:20:30.247]                 NAMES <- toupper(changed)
[16:20:30.247]                 args <- list()
[16:20:30.247]                 for (kk in seq_along(NAMES)) {
[16:20:30.247]                   name <- changed[[kk]]
[16:20:30.247]                   NAME <- NAMES[[kk]]
[16:20:30.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.247]                     next
[16:20:30.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.247]                 }
[16:20:30.247]                 NAMES <- toupper(added)
[16:20:30.247]                 for (kk in seq_along(NAMES)) {
[16:20:30.247]                   name <- added[[kk]]
[16:20:30.247]                   NAME <- NAMES[[kk]]
[16:20:30.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.247]                     next
[16:20:30.247]                   args[[name]] <- ""
[16:20:30.247]                 }
[16:20:30.247]                 NAMES <- toupper(removed)
[16:20:30.247]                 for (kk in seq_along(NAMES)) {
[16:20:30.247]                   name <- removed[[kk]]
[16:20:30.247]                   NAME <- NAMES[[kk]]
[16:20:30.247]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.247]                     next
[16:20:30.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.247]                 }
[16:20:30.247]                 if (length(args) > 0) 
[16:20:30.247]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.247]             }
[16:20:30.247]             else {
[16:20:30.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.247]             }
[16:20:30.247]             {
[16:20:30.247]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.247]                   0L) {
[16:20:30.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.247]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.247]                   base::options(opts)
[16:20:30.247]                 }
[16:20:30.247]                 {
[16:20:30.247]                   {
[16:20:30.247]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.247]                     NULL
[16:20:30.247]                   }
[16:20:30.247]                   options(future.plan = NULL)
[16:20:30.247]                   if (is.na(NA_character_)) 
[16:20:30.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.247]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.247]                     .init = FALSE)
[16:20:30.247]                 }
[16:20:30.247]             }
[16:20:30.247]         }
[16:20:30.247]     })
[16:20:30.247]     if (TRUE) {
[16:20:30.247]         base::sink(type = "output", split = FALSE)
[16:20:30.247]         if (TRUE) {
[16:20:30.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.247]         }
[16:20:30.247]         else {
[16:20:30.247]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.247]         }
[16:20:30.247]         base::close(...future.stdout)
[16:20:30.247]         ...future.stdout <- NULL
[16:20:30.247]     }
[16:20:30.247]     ...future.result$conditions <- ...future.conditions
[16:20:30.247]     ...future.result$finished <- base::Sys.time()
[16:20:30.247]     ...future.result
[16:20:30.247] }
[16:20:30.250] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.252] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.252] - Validating connection of MultisessionFuture
[16:20:30.252] - received message: FutureResult
[16:20:30.252] - Received FutureResult
[16:20:30.252] - Erased future from FutureRegistry
[16:20:30.252] result() for ClusterFuture ...
[16:20:30.252] - result already collected: FutureResult
[16:20:30.252] result() for ClusterFuture ... done
[16:20:30.252] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.253] result() for ClusterFuture ...
[16:20:30.253] - result already collected: FutureResult
[16:20:30.253] result() for ClusterFuture ... done
[16:20:30.253] result() for ClusterFuture ...
[16:20:30.253] - result already collected: FutureResult
[16:20:30.253] result() for ClusterFuture ... done
[16:20:30.253] getGlobalsAndPackages() ...
[16:20:30.253] Searching for globals...
[16:20:30.254] 
[16:20:30.254] Searching for globals ... DONE
[16:20:30.254] - globals: [0] <none>
[16:20:30.254] getGlobalsAndPackages() ... DONE
[16:20:30.254] run() for ‘Future’ ...
[16:20:30.254] - state: ‘created’
[16:20:30.254] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:30.268] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.268] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:30.268]   - Field: ‘node’
[16:20:30.268]   - Field: ‘label’
[16:20:30.268]   - Field: ‘local’
[16:20:30.268]   - Field: ‘owner’
[16:20:30.268]   - Field: ‘envir’
[16:20:30.269]   - Field: ‘workers’
[16:20:30.269]   - Field: ‘packages’
[16:20:30.269]   - Field: ‘gc’
[16:20:30.269]   - Field: ‘conditions’
[16:20:30.269]   - Field: ‘persistent’
[16:20:30.269]   - Field: ‘expr’
[16:20:30.269]   - Field: ‘uuid’
[16:20:30.269]   - Field: ‘seed’
[16:20:30.269]   - Field: ‘version’
[16:20:30.269]   - Field: ‘result’
[16:20:30.269]   - Field: ‘asynchronous’
[16:20:30.270]   - Field: ‘calls’
[16:20:30.270]   - Field: ‘globals’
[16:20:30.270]   - Field: ‘stdout’
[16:20:30.270]   - Field: ‘earlySignal’
[16:20:30.270]   - Field: ‘lazy’
[16:20:30.270]   - Field: ‘state’
[16:20:30.270] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:30.270] - Launch lazy future ...
[16:20:30.270] Packages needed by the future expression (n = 0): <none>
[16:20:30.270] Packages needed by future strategies (n = 0): <none>
[16:20:30.271] {
[16:20:30.271]     {
[16:20:30.271]         {
[16:20:30.271]             ...future.startTime <- base::Sys.time()
[16:20:30.271]             {
[16:20:30.271]                 {
[16:20:30.271]                   {
[16:20:30.271]                     {
[16:20:30.271]                       base::local({
[16:20:30.271]                         has_future <- base::requireNamespace("future", 
[16:20:30.271]                           quietly = TRUE)
[16:20:30.271]                         if (has_future) {
[16:20:30.271]                           ns <- base::getNamespace("future")
[16:20:30.271]                           version <- ns[[".package"]][["version"]]
[16:20:30.271]                           if (is.null(version)) 
[16:20:30.271]                             version <- utils::packageVersion("future")
[16:20:30.271]                         }
[16:20:30.271]                         else {
[16:20:30.271]                           version <- NULL
[16:20:30.271]                         }
[16:20:30.271]                         if (!has_future || version < "1.8.0") {
[16:20:30.271]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.271]                             "", base::R.version$version.string), 
[16:20:30.271]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.271]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.271]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.271]                               "release", "version")], collapse = " "), 
[16:20:30.271]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.271]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.271]                             info)
[16:20:30.271]                           info <- base::paste(info, collapse = "; ")
[16:20:30.271]                           if (!has_future) {
[16:20:30.271]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.271]                               info)
[16:20:30.271]                           }
[16:20:30.271]                           else {
[16:20:30.271]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.271]                               info, version)
[16:20:30.271]                           }
[16:20:30.271]                           base::stop(msg)
[16:20:30.271]                         }
[16:20:30.271]                       })
[16:20:30.271]                     }
[16:20:30.271]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.271]                     base::options(mc.cores = 1L)
[16:20:30.271]                   }
[16:20:30.271]                   ...future.strategy.old <- future::plan("list")
[16:20:30.271]                   options(future.plan = NULL)
[16:20:30.271]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.271]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.271]                 }
[16:20:30.271]                 ...future.workdir <- getwd()
[16:20:30.271]             }
[16:20:30.271]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.271]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.271]         }
[16:20:30.271]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.271]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.271]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.271]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.271]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.271]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.271]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.271]             base::names(...future.oldOptions))
[16:20:30.271]     }
[16:20:30.271]     if (FALSE) {
[16:20:30.271]     }
[16:20:30.271]     else {
[16:20:30.271]         if (TRUE) {
[16:20:30.271]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.271]                 open = "w")
[16:20:30.271]         }
[16:20:30.271]         else {
[16:20:30.271]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.271]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.271]         }
[16:20:30.271]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.271]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.271]             base::sink(type = "output", split = FALSE)
[16:20:30.271]             base::close(...future.stdout)
[16:20:30.271]         }, add = TRUE)
[16:20:30.271]     }
[16:20:30.271]     ...future.frame <- base::sys.nframe()
[16:20:30.271]     ...future.conditions <- base::list()
[16:20:30.271]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.271]     if (FALSE) {
[16:20:30.271]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.271]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.271]     }
[16:20:30.271]     ...future.result <- base::tryCatch({
[16:20:30.271]         base::withCallingHandlers({
[16:20:30.271]             ...future.value <- base::withVisible(base::local({
[16:20:30.271]                 ...future.makeSendCondition <- base::local({
[16:20:30.271]                   sendCondition <- NULL
[16:20:30.271]                   function(frame = 1L) {
[16:20:30.271]                     if (is.function(sendCondition)) 
[16:20:30.271]                       return(sendCondition)
[16:20:30.271]                     ns <- getNamespace("parallel")
[16:20:30.271]                     if (exists("sendData", mode = "function", 
[16:20:30.271]                       envir = ns)) {
[16:20:30.271]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.271]                         envir = ns)
[16:20:30.271]                       envir <- sys.frame(frame)
[16:20:30.271]                       master <- NULL
[16:20:30.271]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.271]                         !identical(envir, emptyenv())) {
[16:20:30.271]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.271]                           inherits = FALSE)) {
[16:20:30.271]                           master <- get("master", mode = "list", 
[16:20:30.271]                             envir = envir, inherits = FALSE)
[16:20:30.271]                           if (inherits(master, c("SOCKnode", 
[16:20:30.271]                             "SOCK0node"))) {
[16:20:30.271]                             sendCondition <<- function(cond) {
[16:20:30.271]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.271]                                 success = TRUE)
[16:20:30.271]                               parallel_sendData(master, data)
[16:20:30.271]                             }
[16:20:30.271]                             return(sendCondition)
[16:20:30.271]                           }
[16:20:30.271]                         }
[16:20:30.271]                         frame <- frame + 1L
[16:20:30.271]                         envir <- sys.frame(frame)
[16:20:30.271]                       }
[16:20:30.271]                     }
[16:20:30.271]                     sendCondition <<- function(cond) NULL
[16:20:30.271]                   }
[16:20:30.271]                 })
[16:20:30.271]                 withCallingHandlers({
[16:20:30.271]                   42
[16:20:30.271]                 }, immediateCondition = function(cond) {
[16:20:30.271]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.271]                   sendCondition(cond)
[16:20:30.271]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.271]                   {
[16:20:30.271]                     inherits <- base::inherits
[16:20:30.271]                     invokeRestart <- base::invokeRestart
[16:20:30.271]                     is.null <- base::is.null
[16:20:30.271]                     muffled <- FALSE
[16:20:30.271]                     if (inherits(cond, "message")) {
[16:20:30.271]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.271]                       if (muffled) 
[16:20:30.271]                         invokeRestart("muffleMessage")
[16:20:30.271]                     }
[16:20:30.271]                     else if (inherits(cond, "warning")) {
[16:20:30.271]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.271]                       if (muffled) 
[16:20:30.271]                         invokeRestart("muffleWarning")
[16:20:30.271]                     }
[16:20:30.271]                     else if (inherits(cond, "condition")) {
[16:20:30.271]                       if (!is.null(pattern)) {
[16:20:30.271]                         computeRestarts <- base::computeRestarts
[16:20:30.271]                         grepl <- base::grepl
[16:20:30.271]                         restarts <- computeRestarts(cond)
[16:20:30.271]                         for (restart in restarts) {
[16:20:30.271]                           name <- restart$name
[16:20:30.271]                           if (is.null(name)) 
[16:20:30.271]                             next
[16:20:30.271]                           if (!grepl(pattern, name)) 
[16:20:30.271]                             next
[16:20:30.271]                           invokeRestart(restart)
[16:20:30.271]                           muffled <- TRUE
[16:20:30.271]                           break
[16:20:30.271]                         }
[16:20:30.271]                       }
[16:20:30.271]                     }
[16:20:30.271]                     invisible(muffled)
[16:20:30.271]                   }
[16:20:30.271]                   muffleCondition(cond)
[16:20:30.271]                 })
[16:20:30.271]             }))
[16:20:30.271]             future::FutureResult(value = ...future.value$value, 
[16:20:30.271]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.271]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.271]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.271]                     ...future.globalenv.names))
[16:20:30.271]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.271]         }, condition = base::local({
[16:20:30.271]             c <- base::c
[16:20:30.271]             inherits <- base::inherits
[16:20:30.271]             invokeRestart <- base::invokeRestart
[16:20:30.271]             length <- base::length
[16:20:30.271]             list <- base::list
[16:20:30.271]             seq.int <- base::seq.int
[16:20:30.271]             signalCondition <- base::signalCondition
[16:20:30.271]             sys.calls <- base::sys.calls
[16:20:30.271]             `[[` <- base::`[[`
[16:20:30.271]             `+` <- base::`+`
[16:20:30.271]             `<<-` <- base::`<<-`
[16:20:30.271]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.271]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.271]                   3L)]
[16:20:30.271]             }
[16:20:30.271]             function(cond) {
[16:20:30.271]                 is_error <- inherits(cond, "error")
[16:20:30.271]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.271]                   NULL)
[16:20:30.271]                 if (is_error) {
[16:20:30.271]                   sessionInformation <- function() {
[16:20:30.271]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.271]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.271]                       search = base::search(), system = base::Sys.info())
[16:20:30.271]                   }
[16:20:30.271]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.271]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.271]                     cond$call), session = sessionInformation(), 
[16:20:30.271]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.271]                   signalCondition(cond)
[16:20:30.271]                 }
[16:20:30.271]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.271]                 "immediateCondition"))) {
[16:20:30.271]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.271]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.271]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.271]                   if (TRUE && !signal) {
[16:20:30.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.271]                     {
[16:20:30.271]                       inherits <- base::inherits
[16:20:30.271]                       invokeRestart <- base::invokeRestart
[16:20:30.271]                       is.null <- base::is.null
[16:20:30.271]                       muffled <- FALSE
[16:20:30.271]                       if (inherits(cond, "message")) {
[16:20:30.271]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.271]                         if (muffled) 
[16:20:30.271]                           invokeRestart("muffleMessage")
[16:20:30.271]                       }
[16:20:30.271]                       else if (inherits(cond, "warning")) {
[16:20:30.271]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.271]                         if (muffled) 
[16:20:30.271]                           invokeRestart("muffleWarning")
[16:20:30.271]                       }
[16:20:30.271]                       else if (inherits(cond, "condition")) {
[16:20:30.271]                         if (!is.null(pattern)) {
[16:20:30.271]                           computeRestarts <- base::computeRestarts
[16:20:30.271]                           grepl <- base::grepl
[16:20:30.271]                           restarts <- computeRestarts(cond)
[16:20:30.271]                           for (restart in restarts) {
[16:20:30.271]                             name <- restart$name
[16:20:30.271]                             if (is.null(name)) 
[16:20:30.271]                               next
[16:20:30.271]                             if (!grepl(pattern, name)) 
[16:20:30.271]                               next
[16:20:30.271]                             invokeRestart(restart)
[16:20:30.271]                             muffled <- TRUE
[16:20:30.271]                             break
[16:20:30.271]                           }
[16:20:30.271]                         }
[16:20:30.271]                       }
[16:20:30.271]                       invisible(muffled)
[16:20:30.271]                     }
[16:20:30.271]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.271]                   }
[16:20:30.271]                 }
[16:20:30.271]                 else {
[16:20:30.271]                   if (TRUE) {
[16:20:30.271]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.271]                     {
[16:20:30.271]                       inherits <- base::inherits
[16:20:30.271]                       invokeRestart <- base::invokeRestart
[16:20:30.271]                       is.null <- base::is.null
[16:20:30.271]                       muffled <- FALSE
[16:20:30.271]                       if (inherits(cond, "message")) {
[16:20:30.271]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.271]                         if (muffled) 
[16:20:30.271]                           invokeRestart("muffleMessage")
[16:20:30.271]                       }
[16:20:30.271]                       else if (inherits(cond, "warning")) {
[16:20:30.271]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.271]                         if (muffled) 
[16:20:30.271]                           invokeRestart("muffleWarning")
[16:20:30.271]                       }
[16:20:30.271]                       else if (inherits(cond, "condition")) {
[16:20:30.271]                         if (!is.null(pattern)) {
[16:20:30.271]                           computeRestarts <- base::computeRestarts
[16:20:30.271]                           grepl <- base::grepl
[16:20:30.271]                           restarts <- computeRestarts(cond)
[16:20:30.271]                           for (restart in restarts) {
[16:20:30.271]                             name <- restart$name
[16:20:30.271]                             if (is.null(name)) 
[16:20:30.271]                               next
[16:20:30.271]                             if (!grepl(pattern, name)) 
[16:20:30.271]                               next
[16:20:30.271]                             invokeRestart(restart)
[16:20:30.271]                             muffled <- TRUE
[16:20:30.271]                             break
[16:20:30.271]                           }
[16:20:30.271]                         }
[16:20:30.271]                       }
[16:20:30.271]                       invisible(muffled)
[16:20:30.271]                     }
[16:20:30.271]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.271]                   }
[16:20:30.271]                 }
[16:20:30.271]             }
[16:20:30.271]         }))
[16:20:30.271]     }, error = function(ex) {
[16:20:30.271]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.271]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.271]                 ...future.rng), started = ...future.startTime, 
[16:20:30.271]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.271]             version = "1.8"), class = "FutureResult")
[16:20:30.271]     }, finally = {
[16:20:30.271]         if (!identical(...future.workdir, getwd())) 
[16:20:30.271]             setwd(...future.workdir)
[16:20:30.271]         {
[16:20:30.271]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.271]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.271]             }
[16:20:30.271]             base::options(...future.oldOptions)
[16:20:30.271]             if (.Platform$OS.type == "windows") {
[16:20:30.271]                 old_names <- names(...future.oldEnvVars)
[16:20:30.271]                 envs <- base::Sys.getenv()
[16:20:30.271]                 names <- names(envs)
[16:20:30.271]                 common <- intersect(names, old_names)
[16:20:30.271]                 added <- setdiff(names, old_names)
[16:20:30.271]                 removed <- setdiff(old_names, names)
[16:20:30.271]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.271]                   envs[common]]
[16:20:30.271]                 NAMES <- toupper(changed)
[16:20:30.271]                 args <- list()
[16:20:30.271]                 for (kk in seq_along(NAMES)) {
[16:20:30.271]                   name <- changed[[kk]]
[16:20:30.271]                   NAME <- NAMES[[kk]]
[16:20:30.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.271]                     next
[16:20:30.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.271]                 }
[16:20:30.271]                 NAMES <- toupper(added)
[16:20:30.271]                 for (kk in seq_along(NAMES)) {
[16:20:30.271]                   name <- added[[kk]]
[16:20:30.271]                   NAME <- NAMES[[kk]]
[16:20:30.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.271]                     next
[16:20:30.271]                   args[[name]] <- ""
[16:20:30.271]                 }
[16:20:30.271]                 NAMES <- toupper(removed)
[16:20:30.271]                 for (kk in seq_along(NAMES)) {
[16:20:30.271]                   name <- removed[[kk]]
[16:20:30.271]                   NAME <- NAMES[[kk]]
[16:20:30.271]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.271]                     next
[16:20:30.271]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.271]                 }
[16:20:30.271]                 if (length(args) > 0) 
[16:20:30.271]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.271]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.271]             }
[16:20:30.271]             else {
[16:20:30.271]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.271]             }
[16:20:30.271]             {
[16:20:30.271]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.271]                   0L) {
[16:20:30.271]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.271]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.271]                   base::options(opts)
[16:20:30.271]                 }
[16:20:30.271]                 {
[16:20:30.271]                   {
[16:20:30.271]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.271]                     NULL
[16:20:30.271]                   }
[16:20:30.271]                   options(future.plan = NULL)
[16:20:30.271]                   if (is.na(NA_character_)) 
[16:20:30.271]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.271]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.271]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.271]                     .init = FALSE)
[16:20:30.271]                 }
[16:20:30.271]             }
[16:20:30.271]         }
[16:20:30.271]     })
[16:20:30.271]     if (TRUE) {
[16:20:30.271]         base::sink(type = "output", split = FALSE)
[16:20:30.271]         if (TRUE) {
[16:20:30.271]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.271]         }
[16:20:30.271]         else {
[16:20:30.271]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.271]         }
[16:20:30.271]         base::close(...future.stdout)
[16:20:30.271]         ...future.stdout <- NULL
[16:20:30.271]     }
[16:20:30.271]     ...future.result$conditions <- ...future.conditions
[16:20:30.271]     ...future.result$finished <- base::Sys.time()
[16:20:30.271]     ...future.result
[16:20:30.271] }
[16:20:30.274] MultisessionFuture started
[16:20:30.274] - Launch lazy future ... done
[16:20:30.274] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.275] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.275] - Validating connection of MultisessionFuture
[16:20:30.275] - received message: FutureResult
[16:20:30.276] - Received FutureResult
[16:20:30.276] - Erased future from FutureRegistry
[16:20:30.276] result() for ClusterFuture ...
[16:20:30.276] - result already collected: FutureResult
[16:20:30.276] result() for ClusterFuture ... done
[16:20:30.276] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.276] result() for ClusterFuture ...
[16:20:30.276] - result already collected: FutureResult
[16:20:30.276] result() for ClusterFuture ... done
[16:20:30.276] result() for ClusterFuture ...
[16:20:30.277] - result already collected: FutureResult
[16:20:30.277] result() for ClusterFuture ... done
[16:20:30.277] getGlobalsAndPackages() ...
[16:20:30.277] Searching for globals...
[16:20:30.278] - globals found: [1] ‘{’
[16:20:30.278] Searching for globals ... DONE
[16:20:30.278] Resolving globals: FALSE
[16:20:30.278] 
[16:20:30.278] 
[16:20:30.278] getGlobalsAndPackages() ... DONE
[16:20:30.279] run() for ‘Future’ ...
[16:20:30.279] - state: ‘created’
[16:20:30.279] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:20:30.292] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.292] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:20:30.292]   - Field: ‘node’
[16:20:30.293]   - Field: ‘label’
[16:20:30.293]   - Field: ‘local’
[16:20:30.293]   - Field: ‘owner’
[16:20:30.293]   - Field: ‘envir’
[16:20:30.293]   - Field: ‘workers’
[16:20:30.293]   - Field: ‘packages’
[16:20:30.293]   - Field: ‘gc’
[16:20:30.293]   - Field: ‘conditions’
[16:20:30.293]   - Field: ‘persistent’
[16:20:30.293]   - Field: ‘expr’
[16:20:30.294]   - Field: ‘uuid’
[16:20:30.294]   - Field: ‘seed’
[16:20:30.294]   - Field: ‘version’
[16:20:30.294]   - Field: ‘result’
[16:20:30.294]   - Field: ‘asynchronous’
[16:20:30.294]   - Field: ‘calls’
[16:20:30.294]   - Field: ‘globals’
[16:20:30.294]   - Field: ‘stdout’
[16:20:30.294]   - Field: ‘earlySignal’
[16:20:30.294]   - Field: ‘lazy’
[16:20:30.294]   - Field: ‘state’
[16:20:30.295] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:20:30.295] - Launch lazy future ...
[16:20:30.295] Packages needed by the future expression (n = 0): <none>
[16:20:30.295] Packages needed by future strategies (n = 0): <none>
[16:20:30.295] {
[16:20:30.295]     {
[16:20:30.295]         {
[16:20:30.295]             ...future.startTime <- base::Sys.time()
[16:20:30.295]             {
[16:20:30.295]                 {
[16:20:30.295]                   {
[16:20:30.295]                     {
[16:20:30.295]                       base::local({
[16:20:30.295]                         has_future <- base::requireNamespace("future", 
[16:20:30.295]                           quietly = TRUE)
[16:20:30.295]                         if (has_future) {
[16:20:30.295]                           ns <- base::getNamespace("future")
[16:20:30.295]                           version <- ns[[".package"]][["version"]]
[16:20:30.295]                           if (is.null(version)) 
[16:20:30.295]                             version <- utils::packageVersion("future")
[16:20:30.295]                         }
[16:20:30.295]                         else {
[16:20:30.295]                           version <- NULL
[16:20:30.295]                         }
[16:20:30.295]                         if (!has_future || version < "1.8.0") {
[16:20:30.295]                           info <- base::c(r_version = base::gsub("R version ", 
[16:20:30.295]                             "", base::R.version$version.string), 
[16:20:30.295]                             platform = base::sprintf("%s (%s-bit)", 
[16:20:30.295]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:20:30.295]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:20:30.295]                               "release", "version")], collapse = " "), 
[16:20:30.295]                             hostname = base::Sys.info()[["nodename"]])
[16:20:30.295]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:20:30.295]                             info)
[16:20:30.295]                           info <- base::paste(info, collapse = "; ")
[16:20:30.295]                           if (!has_future) {
[16:20:30.295]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:20:30.295]                               info)
[16:20:30.295]                           }
[16:20:30.295]                           else {
[16:20:30.295]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:20:30.295]                               info, version)
[16:20:30.295]                           }
[16:20:30.295]                           base::stop(msg)
[16:20:30.295]                         }
[16:20:30.295]                       })
[16:20:30.295]                     }
[16:20:30.295]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:20:30.295]                     base::options(mc.cores = 1L)
[16:20:30.295]                   }
[16:20:30.295]                   ...future.strategy.old <- future::plan("list")
[16:20:30.295]                   options(future.plan = NULL)
[16:20:30.295]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.295]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:20:30.295]                 }
[16:20:30.295]                 ...future.workdir <- getwd()
[16:20:30.295]             }
[16:20:30.295]             ...future.oldOptions <- base::as.list(base::.Options)
[16:20:30.295]             ...future.oldEnvVars <- base::Sys.getenv()
[16:20:30.295]         }
[16:20:30.295]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:20:30.295]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:20:30.295]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:20:30.295]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:20:30.295]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:20:30.295]             future.stdout.windows.reencode = NULL, width = 80L)
[16:20:30.295]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:20:30.295]             base::names(...future.oldOptions))
[16:20:30.295]     }
[16:20:30.295]     if (FALSE) {
[16:20:30.295]     }
[16:20:30.295]     else {
[16:20:30.295]         if (TRUE) {
[16:20:30.295]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:20:30.295]                 open = "w")
[16:20:30.295]         }
[16:20:30.295]         else {
[16:20:30.295]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:20:30.295]                 windows = "NUL", "/dev/null"), open = "w")
[16:20:30.295]         }
[16:20:30.295]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:20:30.295]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:20:30.295]             base::sink(type = "output", split = FALSE)
[16:20:30.295]             base::close(...future.stdout)
[16:20:30.295]         }, add = TRUE)
[16:20:30.295]     }
[16:20:30.295]     ...future.frame <- base::sys.nframe()
[16:20:30.295]     ...future.conditions <- base::list()
[16:20:30.295]     ...future.rng <- base::globalenv()$.Random.seed
[16:20:30.295]     if (FALSE) {
[16:20:30.295]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:20:30.295]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:20:30.295]     }
[16:20:30.295]     ...future.result <- base::tryCatch({
[16:20:30.295]         base::withCallingHandlers({
[16:20:30.295]             ...future.value <- base::withVisible(base::local({
[16:20:30.295]                 ...future.makeSendCondition <- base::local({
[16:20:30.295]                   sendCondition <- NULL
[16:20:30.295]                   function(frame = 1L) {
[16:20:30.295]                     if (is.function(sendCondition)) 
[16:20:30.295]                       return(sendCondition)
[16:20:30.295]                     ns <- getNamespace("parallel")
[16:20:30.295]                     if (exists("sendData", mode = "function", 
[16:20:30.295]                       envir = ns)) {
[16:20:30.295]                       parallel_sendData <- get("sendData", mode = "function", 
[16:20:30.295]                         envir = ns)
[16:20:30.295]                       envir <- sys.frame(frame)
[16:20:30.295]                       master <- NULL
[16:20:30.295]                       while (!identical(envir, .GlobalEnv) && 
[16:20:30.295]                         !identical(envir, emptyenv())) {
[16:20:30.295]                         if (exists("master", mode = "list", envir = envir, 
[16:20:30.295]                           inherits = FALSE)) {
[16:20:30.295]                           master <- get("master", mode = "list", 
[16:20:30.295]                             envir = envir, inherits = FALSE)
[16:20:30.295]                           if (inherits(master, c("SOCKnode", 
[16:20:30.295]                             "SOCK0node"))) {
[16:20:30.295]                             sendCondition <<- function(cond) {
[16:20:30.295]                               data <- list(type = "VALUE", value = cond, 
[16:20:30.295]                                 success = TRUE)
[16:20:30.295]                               parallel_sendData(master, data)
[16:20:30.295]                             }
[16:20:30.295]                             return(sendCondition)
[16:20:30.295]                           }
[16:20:30.295]                         }
[16:20:30.295]                         frame <- frame + 1L
[16:20:30.295]                         envir <- sys.frame(frame)
[16:20:30.295]                       }
[16:20:30.295]                     }
[16:20:30.295]                     sendCondition <<- function(cond) NULL
[16:20:30.295]                   }
[16:20:30.295]                 })
[16:20:30.295]                 withCallingHandlers({
[16:20:30.295]                   {
[16:20:30.295]                     42
[16:20:30.295]                   }
[16:20:30.295]                 }, immediateCondition = function(cond) {
[16:20:30.295]                   sendCondition <- ...future.makeSendCondition()
[16:20:30.295]                   sendCondition(cond)
[16:20:30.295]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.295]                   {
[16:20:30.295]                     inherits <- base::inherits
[16:20:30.295]                     invokeRestart <- base::invokeRestart
[16:20:30.295]                     is.null <- base::is.null
[16:20:30.295]                     muffled <- FALSE
[16:20:30.295]                     if (inherits(cond, "message")) {
[16:20:30.295]                       muffled <- grepl(pattern, "muffleMessage")
[16:20:30.295]                       if (muffled) 
[16:20:30.295]                         invokeRestart("muffleMessage")
[16:20:30.295]                     }
[16:20:30.295]                     else if (inherits(cond, "warning")) {
[16:20:30.295]                       muffled <- grepl(pattern, "muffleWarning")
[16:20:30.295]                       if (muffled) 
[16:20:30.295]                         invokeRestart("muffleWarning")
[16:20:30.295]                     }
[16:20:30.295]                     else if (inherits(cond, "condition")) {
[16:20:30.295]                       if (!is.null(pattern)) {
[16:20:30.295]                         computeRestarts <- base::computeRestarts
[16:20:30.295]                         grepl <- base::grepl
[16:20:30.295]                         restarts <- computeRestarts(cond)
[16:20:30.295]                         for (restart in restarts) {
[16:20:30.295]                           name <- restart$name
[16:20:30.295]                           if (is.null(name)) 
[16:20:30.295]                             next
[16:20:30.295]                           if (!grepl(pattern, name)) 
[16:20:30.295]                             next
[16:20:30.295]                           invokeRestart(restart)
[16:20:30.295]                           muffled <- TRUE
[16:20:30.295]                           break
[16:20:30.295]                         }
[16:20:30.295]                       }
[16:20:30.295]                     }
[16:20:30.295]                     invisible(muffled)
[16:20:30.295]                   }
[16:20:30.295]                   muffleCondition(cond)
[16:20:30.295]                 })
[16:20:30.295]             }))
[16:20:30.295]             future::FutureResult(value = ...future.value$value, 
[16:20:30.295]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.295]                   ...future.rng), globalenv = if (FALSE) 
[16:20:30.295]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:20:30.295]                     ...future.globalenv.names))
[16:20:30.295]                 else NULL, started = ...future.startTime, version = "1.8")
[16:20:30.295]         }, condition = base::local({
[16:20:30.295]             c <- base::c
[16:20:30.295]             inherits <- base::inherits
[16:20:30.295]             invokeRestart <- base::invokeRestart
[16:20:30.295]             length <- base::length
[16:20:30.295]             list <- base::list
[16:20:30.295]             seq.int <- base::seq.int
[16:20:30.295]             signalCondition <- base::signalCondition
[16:20:30.295]             sys.calls <- base::sys.calls
[16:20:30.295]             `[[` <- base::`[[`
[16:20:30.295]             `+` <- base::`+`
[16:20:30.295]             `<<-` <- base::`<<-`
[16:20:30.295]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:20:30.295]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:20:30.295]                   3L)]
[16:20:30.295]             }
[16:20:30.295]             function(cond) {
[16:20:30.295]                 is_error <- inherits(cond, "error")
[16:20:30.295]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:20:30.295]                   NULL)
[16:20:30.295]                 if (is_error) {
[16:20:30.295]                   sessionInformation <- function() {
[16:20:30.295]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:20:30.295]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:20:30.295]                       search = base::search(), system = base::Sys.info())
[16:20:30.295]                   }
[16:20:30.295]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.295]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:20:30.295]                     cond$call), session = sessionInformation(), 
[16:20:30.295]                     timestamp = base::Sys.time(), signaled = 0L)
[16:20:30.295]                   signalCondition(cond)
[16:20:30.295]                 }
[16:20:30.295]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:20:30.295]                 "immediateCondition"))) {
[16:20:30.295]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:20:30.295]                   ...future.conditions[[length(...future.conditions) + 
[16:20:30.295]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:20:30.295]                   if (TRUE && !signal) {
[16:20:30.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.295]                     {
[16:20:30.295]                       inherits <- base::inherits
[16:20:30.295]                       invokeRestart <- base::invokeRestart
[16:20:30.295]                       is.null <- base::is.null
[16:20:30.295]                       muffled <- FALSE
[16:20:30.295]                       if (inherits(cond, "message")) {
[16:20:30.295]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.295]                         if (muffled) 
[16:20:30.295]                           invokeRestart("muffleMessage")
[16:20:30.295]                       }
[16:20:30.295]                       else if (inherits(cond, "warning")) {
[16:20:30.295]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.295]                         if (muffled) 
[16:20:30.295]                           invokeRestart("muffleWarning")
[16:20:30.295]                       }
[16:20:30.295]                       else if (inherits(cond, "condition")) {
[16:20:30.295]                         if (!is.null(pattern)) {
[16:20:30.295]                           computeRestarts <- base::computeRestarts
[16:20:30.295]                           grepl <- base::grepl
[16:20:30.295]                           restarts <- computeRestarts(cond)
[16:20:30.295]                           for (restart in restarts) {
[16:20:30.295]                             name <- restart$name
[16:20:30.295]                             if (is.null(name)) 
[16:20:30.295]                               next
[16:20:30.295]                             if (!grepl(pattern, name)) 
[16:20:30.295]                               next
[16:20:30.295]                             invokeRestart(restart)
[16:20:30.295]                             muffled <- TRUE
[16:20:30.295]                             break
[16:20:30.295]                           }
[16:20:30.295]                         }
[16:20:30.295]                       }
[16:20:30.295]                       invisible(muffled)
[16:20:30.295]                     }
[16:20:30.295]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.295]                   }
[16:20:30.295]                 }
[16:20:30.295]                 else {
[16:20:30.295]                   if (TRUE) {
[16:20:30.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:20:30.295]                     {
[16:20:30.295]                       inherits <- base::inherits
[16:20:30.295]                       invokeRestart <- base::invokeRestart
[16:20:30.295]                       is.null <- base::is.null
[16:20:30.295]                       muffled <- FALSE
[16:20:30.295]                       if (inherits(cond, "message")) {
[16:20:30.295]                         muffled <- grepl(pattern, "muffleMessage")
[16:20:30.295]                         if (muffled) 
[16:20:30.295]                           invokeRestart("muffleMessage")
[16:20:30.295]                       }
[16:20:30.295]                       else if (inherits(cond, "warning")) {
[16:20:30.295]                         muffled <- grepl(pattern, "muffleWarning")
[16:20:30.295]                         if (muffled) 
[16:20:30.295]                           invokeRestart("muffleWarning")
[16:20:30.295]                       }
[16:20:30.295]                       else if (inherits(cond, "condition")) {
[16:20:30.295]                         if (!is.null(pattern)) {
[16:20:30.295]                           computeRestarts <- base::computeRestarts
[16:20:30.295]                           grepl <- base::grepl
[16:20:30.295]                           restarts <- computeRestarts(cond)
[16:20:30.295]                           for (restart in restarts) {
[16:20:30.295]                             name <- restart$name
[16:20:30.295]                             if (is.null(name)) 
[16:20:30.295]                               next
[16:20:30.295]                             if (!grepl(pattern, name)) 
[16:20:30.295]                               next
[16:20:30.295]                             invokeRestart(restart)
[16:20:30.295]                             muffled <- TRUE
[16:20:30.295]                             break
[16:20:30.295]                           }
[16:20:30.295]                         }
[16:20:30.295]                       }
[16:20:30.295]                       invisible(muffled)
[16:20:30.295]                     }
[16:20:30.295]                     muffleCondition(cond, pattern = "^muffle")
[16:20:30.295]                   }
[16:20:30.295]                 }
[16:20:30.295]             }
[16:20:30.295]         }))
[16:20:30.295]     }, error = function(ex) {
[16:20:30.295]         base::structure(base::list(value = NULL, visible = NULL, 
[16:20:30.295]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:20:30.295]                 ...future.rng), started = ...future.startTime, 
[16:20:30.295]             finished = Sys.time(), session_uuid = NA_character_, 
[16:20:30.295]             version = "1.8"), class = "FutureResult")
[16:20:30.295]     }, finally = {
[16:20:30.295]         if (!identical(...future.workdir, getwd())) 
[16:20:30.295]             setwd(...future.workdir)
[16:20:30.295]         {
[16:20:30.295]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:20:30.295]                 ...future.oldOptions$nwarnings <- NULL
[16:20:30.295]             }
[16:20:30.295]             base::options(...future.oldOptions)
[16:20:30.295]             if (.Platform$OS.type == "windows") {
[16:20:30.295]                 old_names <- names(...future.oldEnvVars)
[16:20:30.295]                 envs <- base::Sys.getenv()
[16:20:30.295]                 names <- names(envs)
[16:20:30.295]                 common <- intersect(names, old_names)
[16:20:30.295]                 added <- setdiff(names, old_names)
[16:20:30.295]                 removed <- setdiff(old_names, names)
[16:20:30.295]                 changed <- common[...future.oldEnvVars[common] != 
[16:20:30.295]                   envs[common]]
[16:20:30.295]                 NAMES <- toupper(changed)
[16:20:30.295]                 args <- list()
[16:20:30.295]                 for (kk in seq_along(NAMES)) {
[16:20:30.295]                   name <- changed[[kk]]
[16:20:30.295]                   NAME <- NAMES[[kk]]
[16:20:30.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.295]                     next
[16:20:30.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.295]                 }
[16:20:30.295]                 NAMES <- toupper(added)
[16:20:30.295]                 for (kk in seq_along(NAMES)) {
[16:20:30.295]                   name <- added[[kk]]
[16:20:30.295]                   NAME <- NAMES[[kk]]
[16:20:30.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.295]                     next
[16:20:30.295]                   args[[name]] <- ""
[16:20:30.295]                 }
[16:20:30.295]                 NAMES <- toupper(removed)
[16:20:30.295]                 for (kk in seq_along(NAMES)) {
[16:20:30.295]                   name <- removed[[kk]]
[16:20:30.295]                   NAME <- NAMES[[kk]]
[16:20:30.295]                   if (name != NAME && is.element(NAME, old_names)) 
[16:20:30.295]                     next
[16:20:30.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:20:30.295]                 }
[16:20:30.295]                 if (length(args) > 0) 
[16:20:30.295]                   base::do.call(base::Sys.setenv, args = args)
[16:20:30.295]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:20:30.295]             }
[16:20:30.295]             else {
[16:20:30.295]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:20:30.295]             }
[16:20:30.295]             {
[16:20:30.295]                 if (base::length(...future.futureOptionsAdded) > 
[16:20:30.295]                   0L) {
[16:20:30.295]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:20:30.295]                   base::names(opts) <- ...future.futureOptionsAdded
[16:20:30.295]                   base::options(opts)
[16:20:30.295]                 }
[16:20:30.295]                 {
[16:20:30.295]                   {
[16:20:30.295]                     base::options(mc.cores = ...future.mc.cores.old)
[16:20:30.295]                     NULL
[16:20:30.295]                   }
[16:20:30.295]                   options(future.plan = NULL)
[16:20:30.295]                   if (is.na(NA_character_)) 
[16:20:30.295]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:20:30.295]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:20:30.295]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:20:30.295]                     .init = FALSE)
[16:20:30.295]                 }
[16:20:30.295]             }
[16:20:30.295]         }
[16:20:30.295]     })
[16:20:30.295]     if (TRUE) {
[16:20:30.295]         base::sink(type = "output", split = FALSE)
[16:20:30.295]         if (TRUE) {
[16:20:30.295]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:20:30.295]         }
[16:20:30.295]         else {
[16:20:30.295]             ...future.result["stdout"] <- base::list(NULL)
[16:20:30.295]         }
[16:20:30.295]         base::close(...future.stdout)
[16:20:30.295]         ...future.stdout <- NULL
[16:20:30.295]     }
[16:20:30.295]     ...future.result$conditions <- ...future.conditions
[16:20:30.295]     ...future.result$finished <- base::Sys.time()
[16:20:30.295]     ...future.result
[16:20:30.295] }
[16:20:30.298] MultisessionFuture started
[16:20:30.298] - Launch lazy future ... done
[16:20:30.298] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[16:20:30.300] receiveMessageFromWorker() for ClusterFuture ...
[16:20:30.300] - Validating connection of MultisessionFuture
[16:20:30.300] - received message: FutureResult
[16:20:30.300] - Received FutureResult
[16:20:30.300] - Erased future from FutureRegistry
[16:20:30.300] result() for ClusterFuture ...
[16:20:30.300] - result already collected: FutureResult
[16:20:30.300] result() for ClusterFuture ... done
[16:20:30.300] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 50a291c3-e4f5-3c05-836c-3b9e64410a6b
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:20:30.301] result() for ClusterFuture ...
[16:20:30.301] - result already collected: FutureResult
[16:20:30.301] result() for ClusterFuture ... done
[16:20:30.301] result() for ClusterFuture ...
[16:20:30.301] - result already collected: FutureResult
[16:20:30.301] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[16:20:30.302] plan(): Setting new future strategy stack:
[16:20:30.302] List of future strategies:
[16:20:30.302] 1. FutureStrategy:
[16:20:30.302]    - args: function (..., envir = parent.frame())
[16:20:30.302]    - tweaked: FALSE
[16:20:30.302]    - call: future::plan(oplan)
[16:20:30.303] plan(): nbrOfWorkers() = 1
> 
