
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:36:21.998] plan(): Setting new future strategy stack:
[13:36:21.999] List of future strategies:
[13:36:21.999] 1. sequential:
[13:36:21.999]    - args: function (..., envir = parent.frame())
[13:36:21.999]    - tweaked: FALSE
[13:36:21.999]    - call: future::plan("sequential")
[13:36:22.012] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[13:36:22.035] plan(): Setting new future strategy stack:
[13:36:22.035] List of future strategies:
[13:36:22.035] 1. sequential:
[13:36:22.035]    - args: function (..., envir = parent.frame())
[13:36:22.035]    - tweaked: FALSE
[13:36:22.035]    - call: plan(strategy)
[13:36:22.046] plan(): nbrOfWorkers() = 1
[13:36:22.047] getGlobalsAndPackages() ...
[13:36:22.047] Searching for globals...
[13:36:22.049] 
[13:36:22.050] Searching for globals ... DONE
[13:36:22.050] - globals: [0] <none>
[13:36:22.050] getGlobalsAndPackages() ... DONE
[13:36:22.051] Packages needed by the future expression (n = 0): <none>
[13:36:22.051] Packages needed by future strategies (n = 0): <none>
[13:36:22.052] {
[13:36:22.052]     {
[13:36:22.052]         {
[13:36:22.052]             ...future.startTime <- base::Sys.time()
[13:36:22.052]             {
[13:36:22.052]                 {
[13:36:22.052]                   {
[13:36:22.052]                     base::local({
[13:36:22.052]                       has_future <- base::requireNamespace("future", 
[13:36:22.052]                         quietly = TRUE)
[13:36:22.052]                       if (has_future) {
[13:36:22.052]                         ns <- base::getNamespace("future")
[13:36:22.052]                         version <- ns[[".package"]][["version"]]
[13:36:22.052]                         if (is.null(version)) 
[13:36:22.052]                           version <- utils::packageVersion("future")
[13:36:22.052]                       }
[13:36:22.052]                       else {
[13:36:22.052]                         version <- NULL
[13:36:22.052]                       }
[13:36:22.052]                       if (!has_future || version < "1.8.0") {
[13:36:22.052]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.052]                           "", base::R.version$version.string), 
[13:36:22.052]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.052]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.052]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.052]                             "release", "version")], collapse = " "), 
[13:36:22.052]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.052]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.052]                           info)
[13:36:22.052]                         info <- base::paste(info, collapse = "; ")
[13:36:22.052]                         if (!has_future) {
[13:36:22.052]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.052]                             info)
[13:36:22.052]                         }
[13:36:22.052]                         else {
[13:36:22.052]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.052]                             info, version)
[13:36:22.052]                         }
[13:36:22.052]                         base::stop(msg)
[13:36:22.052]                       }
[13:36:22.052]                     })
[13:36:22.052]                   }
[13:36:22.052]                   ...future.strategy.old <- future::plan("list")
[13:36:22.052]                   options(future.plan = NULL)
[13:36:22.052]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.052]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.052]                 }
[13:36:22.052]                 ...future.workdir <- getwd()
[13:36:22.052]             }
[13:36:22.052]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.052]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.052]         }
[13:36:22.052]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.052]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.052]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.052]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.052]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.052]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.052]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.052]             base::names(...future.oldOptions))
[13:36:22.052]     }
[13:36:22.052]     if (FALSE) {
[13:36:22.052]     }
[13:36:22.052]     else {
[13:36:22.052]         if (TRUE) {
[13:36:22.052]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.052]                 open = "w")
[13:36:22.052]         }
[13:36:22.052]         else {
[13:36:22.052]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.052]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.052]         }
[13:36:22.052]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.052]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.052]             base::sink(type = "output", split = FALSE)
[13:36:22.052]             base::close(...future.stdout)
[13:36:22.052]         }, add = TRUE)
[13:36:22.052]     }
[13:36:22.052]     ...future.frame <- base::sys.nframe()
[13:36:22.052]     ...future.conditions <- base::list()
[13:36:22.052]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.052]     if (FALSE) {
[13:36:22.052]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.052]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.052]     }
[13:36:22.052]     ...future.result <- base::tryCatch({
[13:36:22.052]         base::withCallingHandlers({
[13:36:22.052]             ...future.value <- base::withVisible(base::local(42))
[13:36:22.052]             future::FutureResult(value = ...future.value$value, 
[13:36:22.052]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.052]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.052]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.052]                     ...future.globalenv.names))
[13:36:22.052]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.052]         }, condition = base::local({
[13:36:22.052]             c <- base::c
[13:36:22.052]             inherits <- base::inherits
[13:36:22.052]             invokeRestart <- base::invokeRestart
[13:36:22.052]             length <- base::length
[13:36:22.052]             list <- base::list
[13:36:22.052]             seq.int <- base::seq.int
[13:36:22.052]             signalCondition <- base::signalCondition
[13:36:22.052]             sys.calls <- base::sys.calls
[13:36:22.052]             `[[` <- base::`[[`
[13:36:22.052]             `+` <- base::`+`
[13:36:22.052]             `<<-` <- base::`<<-`
[13:36:22.052]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.052]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.052]                   3L)]
[13:36:22.052]             }
[13:36:22.052]             function(cond) {
[13:36:22.052]                 is_error <- inherits(cond, "error")
[13:36:22.052]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.052]                   NULL)
[13:36:22.052]                 if (is_error) {
[13:36:22.052]                   sessionInformation <- function() {
[13:36:22.052]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.052]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.052]                       search = base::search(), system = base::Sys.info())
[13:36:22.052]                   }
[13:36:22.052]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.052]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.052]                     cond$call), session = sessionInformation(), 
[13:36:22.052]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.052]                   signalCondition(cond)
[13:36:22.052]                 }
[13:36:22.052]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.052]                 "immediateCondition"))) {
[13:36:22.052]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.052]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.052]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.052]                   if (TRUE && !signal) {
[13:36:22.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.052]                     {
[13:36:22.052]                       inherits <- base::inherits
[13:36:22.052]                       invokeRestart <- base::invokeRestart
[13:36:22.052]                       is.null <- base::is.null
[13:36:22.052]                       muffled <- FALSE
[13:36:22.052]                       if (inherits(cond, "message")) {
[13:36:22.052]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.052]                         if (muffled) 
[13:36:22.052]                           invokeRestart("muffleMessage")
[13:36:22.052]                       }
[13:36:22.052]                       else if (inherits(cond, "warning")) {
[13:36:22.052]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.052]                         if (muffled) 
[13:36:22.052]                           invokeRestart("muffleWarning")
[13:36:22.052]                       }
[13:36:22.052]                       else if (inherits(cond, "condition")) {
[13:36:22.052]                         if (!is.null(pattern)) {
[13:36:22.052]                           computeRestarts <- base::computeRestarts
[13:36:22.052]                           grepl <- base::grepl
[13:36:22.052]                           restarts <- computeRestarts(cond)
[13:36:22.052]                           for (restart in restarts) {
[13:36:22.052]                             name <- restart$name
[13:36:22.052]                             if (is.null(name)) 
[13:36:22.052]                               next
[13:36:22.052]                             if (!grepl(pattern, name)) 
[13:36:22.052]                               next
[13:36:22.052]                             invokeRestart(restart)
[13:36:22.052]                             muffled <- TRUE
[13:36:22.052]                             break
[13:36:22.052]                           }
[13:36:22.052]                         }
[13:36:22.052]                       }
[13:36:22.052]                       invisible(muffled)
[13:36:22.052]                     }
[13:36:22.052]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.052]                   }
[13:36:22.052]                 }
[13:36:22.052]                 else {
[13:36:22.052]                   if (TRUE) {
[13:36:22.052]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.052]                     {
[13:36:22.052]                       inherits <- base::inherits
[13:36:22.052]                       invokeRestart <- base::invokeRestart
[13:36:22.052]                       is.null <- base::is.null
[13:36:22.052]                       muffled <- FALSE
[13:36:22.052]                       if (inherits(cond, "message")) {
[13:36:22.052]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.052]                         if (muffled) 
[13:36:22.052]                           invokeRestart("muffleMessage")
[13:36:22.052]                       }
[13:36:22.052]                       else if (inherits(cond, "warning")) {
[13:36:22.052]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.052]                         if (muffled) 
[13:36:22.052]                           invokeRestart("muffleWarning")
[13:36:22.052]                       }
[13:36:22.052]                       else if (inherits(cond, "condition")) {
[13:36:22.052]                         if (!is.null(pattern)) {
[13:36:22.052]                           computeRestarts <- base::computeRestarts
[13:36:22.052]                           grepl <- base::grepl
[13:36:22.052]                           restarts <- computeRestarts(cond)
[13:36:22.052]                           for (restart in restarts) {
[13:36:22.052]                             name <- restart$name
[13:36:22.052]                             if (is.null(name)) 
[13:36:22.052]                               next
[13:36:22.052]                             if (!grepl(pattern, name)) 
[13:36:22.052]                               next
[13:36:22.052]                             invokeRestart(restart)
[13:36:22.052]                             muffled <- TRUE
[13:36:22.052]                             break
[13:36:22.052]                           }
[13:36:22.052]                         }
[13:36:22.052]                       }
[13:36:22.052]                       invisible(muffled)
[13:36:22.052]                     }
[13:36:22.052]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.052]                   }
[13:36:22.052]                 }
[13:36:22.052]             }
[13:36:22.052]         }))
[13:36:22.052]     }, error = function(ex) {
[13:36:22.052]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.052]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.052]                 ...future.rng), started = ...future.startTime, 
[13:36:22.052]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.052]             version = "1.8"), class = "FutureResult")
[13:36:22.052]     }, finally = {
[13:36:22.052]         if (!identical(...future.workdir, getwd())) 
[13:36:22.052]             setwd(...future.workdir)
[13:36:22.052]         {
[13:36:22.052]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.052]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.052]             }
[13:36:22.052]             base::options(...future.oldOptions)
[13:36:22.052]             if (.Platform$OS.type == "windows") {
[13:36:22.052]                 old_names <- names(...future.oldEnvVars)
[13:36:22.052]                 envs <- base::Sys.getenv()
[13:36:22.052]                 names <- names(envs)
[13:36:22.052]                 common <- intersect(names, old_names)
[13:36:22.052]                 added <- setdiff(names, old_names)
[13:36:22.052]                 removed <- setdiff(old_names, names)
[13:36:22.052]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.052]                   envs[common]]
[13:36:22.052]                 NAMES <- toupper(changed)
[13:36:22.052]                 args <- list()
[13:36:22.052]                 for (kk in seq_along(NAMES)) {
[13:36:22.052]                   name <- changed[[kk]]
[13:36:22.052]                   NAME <- NAMES[[kk]]
[13:36:22.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.052]                     next
[13:36:22.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.052]                 }
[13:36:22.052]                 NAMES <- toupper(added)
[13:36:22.052]                 for (kk in seq_along(NAMES)) {
[13:36:22.052]                   name <- added[[kk]]
[13:36:22.052]                   NAME <- NAMES[[kk]]
[13:36:22.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.052]                     next
[13:36:22.052]                   args[[name]] <- ""
[13:36:22.052]                 }
[13:36:22.052]                 NAMES <- toupper(removed)
[13:36:22.052]                 for (kk in seq_along(NAMES)) {
[13:36:22.052]                   name <- removed[[kk]]
[13:36:22.052]                   NAME <- NAMES[[kk]]
[13:36:22.052]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.052]                     next
[13:36:22.052]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.052]                 }
[13:36:22.052]                 if (length(args) > 0) 
[13:36:22.052]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.052]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.052]             }
[13:36:22.052]             else {
[13:36:22.052]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.052]             }
[13:36:22.052]             {
[13:36:22.052]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.052]                   0L) {
[13:36:22.052]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.052]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.052]                   base::options(opts)
[13:36:22.052]                 }
[13:36:22.052]                 {
[13:36:22.052]                   {
[13:36:22.052]                     NULL
[13:36:22.052]                     RNGkind("Mersenne-Twister")
[13:36:22.052]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.052]                       inherits = FALSE)
[13:36:22.052]                   }
[13:36:22.052]                   options(future.plan = NULL)
[13:36:22.052]                   if (is.na(NA_character_)) 
[13:36:22.052]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.052]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.052]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.052]                     .init = FALSE)
[13:36:22.052]                 }
[13:36:22.052]             }
[13:36:22.052]         }
[13:36:22.052]     })
[13:36:22.052]     if (TRUE) {
[13:36:22.052]         base::sink(type = "output", split = FALSE)
[13:36:22.052]         if (TRUE) {
[13:36:22.052]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.052]         }
[13:36:22.052]         else {
[13:36:22.052]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.052]         }
[13:36:22.052]         base::close(...future.stdout)
[13:36:22.052]         ...future.stdout <- NULL
[13:36:22.052]     }
[13:36:22.052]     ...future.result$conditions <- ...future.conditions
[13:36:22.052]     ...future.result$finished <- base::Sys.time()
[13:36:22.052]     ...future.result
[13:36:22.052] }
[13:36:22.054] plan(): Setting new future strategy stack:
[13:36:22.054] List of future strategies:
[13:36:22.054] 1. sequential:
[13:36:22.054]    - args: function (..., envir = parent.frame())
[13:36:22.054]    - tweaked: FALSE
[13:36:22.054]    - call: NULL
[13:36:22.054] plan(): nbrOfWorkers() = 1
[13:36:22.055] plan(): Setting new future strategy stack:
[13:36:22.055] List of future strategies:
[13:36:22.055] 1. sequential:
[13:36:22.055]    - args: function (..., envir = parent.frame())
[13:36:22.055]    - tweaked: FALSE
[13:36:22.055]    - call: plan(strategy)
[13:36:22.056] plan(): nbrOfWorkers() = 1
[13:36:22.056] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.057] getGlobalsAndPackages() ...
[13:36:22.058] Searching for globals...
[13:36:22.058] 
[13:36:22.058] Searching for globals ... DONE
[13:36:22.058] - globals: [0] <none>
[13:36:22.058] getGlobalsAndPackages() ... DONE
[13:36:22.059] run() for ‘Future’ ...
[13:36:22.059] - state: ‘created’
[13:36:22.059] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:22.059] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.059] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:22.059]   - Field: ‘label’
[13:36:22.059]   - Field: ‘local’
[13:36:22.059]   - Field: ‘owner’
[13:36:22.060]   - Field: ‘envir’
[13:36:22.060]   - Field: ‘packages’
[13:36:22.060]   - Field: ‘gc’
[13:36:22.060]   - Field: ‘conditions’
[13:36:22.060]   - Field: ‘expr’
[13:36:22.060]   - Field: ‘uuid’
[13:36:22.060]   - Field: ‘seed’
[13:36:22.060]   - Field: ‘version’
[13:36:22.060]   - Field: ‘result’
[13:36:22.060]   - Field: ‘asynchronous’
[13:36:22.060]   - Field: ‘calls’
[13:36:22.060]   - Field: ‘globals’
[13:36:22.061]   - Field: ‘stdout’
[13:36:22.061]   - Field: ‘earlySignal’
[13:36:22.061]   - Field: ‘lazy’
[13:36:22.061]   - Field: ‘state’
[13:36:22.061] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:22.061] - Launch lazy future ...
[13:36:22.061] Packages needed by the future expression (n = 0): <none>
[13:36:22.061] Packages needed by future strategies (n = 0): <none>
[13:36:22.062] {
[13:36:22.062]     {
[13:36:22.062]         {
[13:36:22.062]             ...future.startTime <- base::Sys.time()
[13:36:22.062]             {
[13:36:22.062]                 {
[13:36:22.062]                   {
[13:36:22.062]                     base::local({
[13:36:22.062]                       has_future <- base::requireNamespace("future", 
[13:36:22.062]                         quietly = TRUE)
[13:36:22.062]                       if (has_future) {
[13:36:22.062]                         ns <- base::getNamespace("future")
[13:36:22.062]                         version <- ns[[".package"]][["version"]]
[13:36:22.062]                         if (is.null(version)) 
[13:36:22.062]                           version <- utils::packageVersion("future")
[13:36:22.062]                       }
[13:36:22.062]                       else {
[13:36:22.062]                         version <- NULL
[13:36:22.062]                       }
[13:36:22.062]                       if (!has_future || version < "1.8.0") {
[13:36:22.062]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.062]                           "", base::R.version$version.string), 
[13:36:22.062]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.062]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.062]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.062]                             "release", "version")], collapse = " "), 
[13:36:22.062]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.062]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.062]                           info)
[13:36:22.062]                         info <- base::paste(info, collapse = "; ")
[13:36:22.062]                         if (!has_future) {
[13:36:22.062]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.062]                             info)
[13:36:22.062]                         }
[13:36:22.062]                         else {
[13:36:22.062]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.062]                             info, version)
[13:36:22.062]                         }
[13:36:22.062]                         base::stop(msg)
[13:36:22.062]                       }
[13:36:22.062]                     })
[13:36:22.062]                   }
[13:36:22.062]                   ...future.strategy.old <- future::plan("list")
[13:36:22.062]                   options(future.plan = NULL)
[13:36:22.062]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.062]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.062]                 }
[13:36:22.062]                 ...future.workdir <- getwd()
[13:36:22.062]             }
[13:36:22.062]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.062]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.062]         }
[13:36:22.062]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.062]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.062]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.062]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.062]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.062]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.062]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.062]             base::names(...future.oldOptions))
[13:36:22.062]     }
[13:36:22.062]     if (FALSE) {
[13:36:22.062]     }
[13:36:22.062]     else {
[13:36:22.062]         if (TRUE) {
[13:36:22.062]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.062]                 open = "w")
[13:36:22.062]         }
[13:36:22.062]         else {
[13:36:22.062]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.062]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.062]         }
[13:36:22.062]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.062]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.062]             base::sink(type = "output", split = FALSE)
[13:36:22.062]             base::close(...future.stdout)
[13:36:22.062]         }, add = TRUE)
[13:36:22.062]     }
[13:36:22.062]     ...future.frame <- base::sys.nframe()
[13:36:22.062]     ...future.conditions <- base::list()
[13:36:22.062]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.062]     if (FALSE) {
[13:36:22.062]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.062]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.062]     }
[13:36:22.062]     ...future.result <- base::tryCatch({
[13:36:22.062]         base::withCallingHandlers({
[13:36:22.062]             ...future.value <- base::withVisible(base::local(42))
[13:36:22.062]             future::FutureResult(value = ...future.value$value, 
[13:36:22.062]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.062]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.062]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.062]                     ...future.globalenv.names))
[13:36:22.062]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.062]         }, condition = base::local({
[13:36:22.062]             c <- base::c
[13:36:22.062]             inherits <- base::inherits
[13:36:22.062]             invokeRestart <- base::invokeRestart
[13:36:22.062]             length <- base::length
[13:36:22.062]             list <- base::list
[13:36:22.062]             seq.int <- base::seq.int
[13:36:22.062]             signalCondition <- base::signalCondition
[13:36:22.062]             sys.calls <- base::sys.calls
[13:36:22.062]             `[[` <- base::`[[`
[13:36:22.062]             `+` <- base::`+`
[13:36:22.062]             `<<-` <- base::`<<-`
[13:36:22.062]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.062]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.062]                   3L)]
[13:36:22.062]             }
[13:36:22.062]             function(cond) {
[13:36:22.062]                 is_error <- inherits(cond, "error")
[13:36:22.062]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.062]                   NULL)
[13:36:22.062]                 if (is_error) {
[13:36:22.062]                   sessionInformation <- function() {
[13:36:22.062]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.062]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.062]                       search = base::search(), system = base::Sys.info())
[13:36:22.062]                   }
[13:36:22.062]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.062]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.062]                     cond$call), session = sessionInformation(), 
[13:36:22.062]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.062]                   signalCondition(cond)
[13:36:22.062]                 }
[13:36:22.062]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.062]                 "immediateCondition"))) {
[13:36:22.062]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.062]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.062]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.062]                   if (TRUE && !signal) {
[13:36:22.062]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.062]                     {
[13:36:22.062]                       inherits <- base::inherits
[13:36:22.062]                       invokeRestart <- base::invokeRestart
[13:36:22.062]                       is.null <- base::is.null
[13:36:22.062]                       muffled <- FALSE
[13:36:22.062]                       if (inherits(cond, "message")) {
[13:36:22.062]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.062]                         if (muffled) 
[13:36:22.062]                           invokeRestart("muffleMessage")
[13:36:22.062]                       }
[13:36:22.062]                       else if (inherits(cond, "warning")) {
[13:36:22.062]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.062]                         if (muffled) 
[13:36:22.062]                           invokeRestart("muffleWarning")
[13:36:22.062]                       }
[13:36:22.062]                       else if (inherits(cond, "condition")) {
[13:36:22.062]                         if (!is.null(pattern)) {
[13:36:22.062]                           computeRestarts <- base::computeRestarts
[13:36:22.062]                           grepl <- base::grepl
[13:36:22.062]                           restarts <- computeRestarts(cond)
[13:36:22.062]                           for (restart in restarts) {
[13:36:22.062]                             name <- restart$name
[13:36:22.062]                             if (is.null(name)) 
[13:36:22.062]                               next
[13:36:22.062]                             if (!grepl(pattern, name)) 
[13:36:22.062]                               next
[13:36:22.062]                             invokeRestart(restart)
[13:36:22.062]                             muffled <- TRUE
[13:36:22.062]                             break
[13:36:22.062]                           }
[13:36:22.062]                         }
[13:36:22.062]                       }
[13:36:22.062]                       invisible(muffled)
[13:36:22.062]                     }
[13:36:22.062]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.062]                   }
[13:36:22.062]                 }
[13:36:22.062]                 else {
[13:36:22.062]                   if (TRUE) {
[13:36:22.062]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.062]                     {
[13:36:22.062]                       inherits <- base::inherits
[13:36:22.062]                       invokeRestart <- base::invokeRestart
[13:36:22.062]                       is.null <- base::is.null
[13:36:22.062]                       muffled <- FALSE
[13:36:22.062]                       if (inherits(cond, "message")) {
[13:36:22.062]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.062]                         if (muffled) 
[13:36:22.062]                           invokeRestart("muffleMessage")
[13:36:22.062]                       }
[13:36:22.062]                       else if (inherits(cond, "warning")) {
[13:36:22.062]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.062]                         if (muffled) 
[13:36:22.062]                           invokeRestart("muffleWarning")
[13:36:22.062]                       }
[13:36:22.062]                       else if (inherits(cond, "condition")) {
[13:36:22.062]                         if (!is.null(pattern)) {
[13:36:22.062]                           computeRestarts <- base::computeRestarts
[13:36:22.062]                           grepl <- base::grepl
[13:36:22.062]                           restarts <- computeRestarts(cond)
[13:36:22.062]                           for (restart in restarts) {
[13:36:22.062]                             name <- restart$name
[13:36:22.062]                             if (is.null(name)) 
[13:36:22.062]                               next
[13:36:22.062]                             if (!grepl(pattern, name)) 
[13:36:22.062]                               next
[13:36:22.062]                             invokeRestart(restart)
[13:36:22.062]                             muffled <- TRUE
[13:36:22.062]                             break
[13:36:22.062]                           }
[13:36:22.062]                         }
[13:36:22.062]                       }
[13:36:22.062]                       invisible(muffled)
[13:36:22.062]                     }
[13:36:22.062]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.062]                   }
[13:36:22.062]                 }
[13:36:22.062]             }
[13:36:22.062]         }))
[13:36:22.062]     }, error = function(ex) {
[13:36:22.062]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.062]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.062]                 ...future.rng), started = ...future.startTime, 
[13:36:22.062]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.062]             version = "1.8"), class = "FutureResult")
[13:36:22.062]     }, finally = {
[13:36:22.062]         if (!identical(...future.workdir, getwd())) 
[13:36:22.062]             setwd(...future.workdir)
[13:36:22.062]         {
[13:36:22.062]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.062]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.062]             }
[13:36:22.062]             base::options(...future.oldOptions)
[13:36:22.062]             if (.Platform$OS.type == "windows") {
[13:36:22.062]                 old_names <- names(...future.oldEnvVars)
[13:36:22.062]                 envs <- base::Sys.getenv()
[13:36:22.062]                 names <- names(envs)
[13:36:22.062]                 common <- intersect(names, old_names)
[13:36:22.062]                 added <- setdiff(names, old_names)
[13:36:22.062]                 removed <- setdiff(old_names, names)
[13:36:22.062]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.062]                   envs[common]]
[13:36:22.062]                 NAMES <- toupper(changed)
[13:36:22.062]                 args <- list()
[13:36:22.062]                 for (kk in seq_along(NAMES)) {
[13:36:22.062]                   name <- changed[[kk]]
[13:36:22.062]                   NAME <- NAMES[[kk]]
[13:36:22.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.062]                     next
[13:36:22.062]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.062]                 }
[13:36:22.062]                 NAMES <- toupper(added)
[13:36:22.062]                 for (kk in seq_along(NAMES)) {
[13:36:22.062]                   name <- added[[kk]]
[13:36:22.062]                   NAME <- NAMES[[kk]]
[13:36:22.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.062]                     next
[13:36:22.062]                   args[[name]] <- ""
[13:36:22.062]                 }
[13:36:22.062]                 NAMES <- toupper(removed)
[13:36:22.062]                 for (kk in seq_along(NAMES)) {
[13:36:22.062]                   name <- removed[[kk]]
[13:36:22.062]                   NAME <- NAMES[[kk]]
[13:36:22.062]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.062]                     next
[13:36:22.062]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.062]                 }
[13:36:22.062]                 if (length(args) > 0) 
[13:36:22.062]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.062]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.062]             }
[13:36:22.062]             else {
[13:36:22.062]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.062]             }
[13:36:22.062]             {
[13:36:22.062]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.062]                   0L) {
[13:36:22.062]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.062]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.062]                   base::options(opts)
[13:36:22.062]                 }
[13:36:22.062]                 {
[13:36:22.062]                   {
[13:36:22.062]                     NULL
[13:36:22.062]                     RNGkind("Mersenne-Twister")
[13:36:22.062]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.062]                       inherits = FALSE)
[13:36:22.062]                   }
[13:36:22.062]                   options(future.plan = NULL)
[13:36:22.062]                   if (is.na(NA_character_)) 
[13:36:22.062]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.062]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.062]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.062]                     .init = FALSE)
[13:36:22.062]                 }
[13:36:22.062]             }
[13:36:22.062]         }
[13:36:22.062]     })
[13:36:22.062]     if (TRUE) {
[13:36:22.062]         base::sink(type = "output", split = FALSE)
[13:36:22.062]         if (TRUE) {
[13:36:22.062]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.062]         }
[13:36:22.062]         else {
[13:36:22.062]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.062]         }
[13:36:22.062]         base::close(...future.stdout)
[13:36:22.062]         ...future.stdout <- NULL
[13:36:22.062]     }
[13:36:22.062]     ...future.result$conditions <- ...future.conditions
[13:36:22.062]     ...future.result$finished <- base::Sys.time()
[13:36:22.062]     ...future.result
[13:36:22.062] }
[13:36:22.063] plan(): Setting new future strategy stack:
[13:36:22.063] List of future strategies:
[13:36:22.063] 1. sequential:
[13:36:22.063]    - args: function (..., envir = parent.frame())
[13:36:22.063]    - tweaked: FALSE
[13:36:22.063]    - call: NULL
[13:36:22.064] plan(): nbrOfWorkers() = 1
[13:36:22.064] plan(): Setting new future strategy stack:
[13:36:22.065] List of future strategies:
[13:36:22.065] 1. sequential:
[13:36:22.065]    - args: function (..., envir = parent.frame())
[13:36:22.065]    - tweaked: FALSE
[13:36:22.065]    - call: plan(strategy)
[13:36:22.065] plan(): nbrOfWorkers() = 1
[13:36:22.065] SequentialFuture started (and completed)
[13:36:22.065] - Launch lazy future ... done
[13:36:22.065] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.067] getGlobalsAndPackages() ...
[13:36:22.067] Searching for globals...
[13:36:22.068] - globals found: [1] ‘{’
[13:36:22.068] Searching for globals ... DONE
[13:36:22.068] Resolving globals: FALSE
[13:36:22.069] 
[13:36:22.069] 
[13:36:22.069] getGlobalsAndPackages() ... DONE
[13:36:22.069] run() for ‘Future’ ...
[13:36:22.069] - state: ‘created’
[13:36:22.069] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:22.070] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.070] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:22.070]   - Field: ‘label’
[13:36:22.070]   - Field: ‘local’
[13:36:22.070]   - Field: ‘owner’
[13:36:22.070]   - Field: ‘envir’
[13:36:22.070]   - Field: ‘packages’
[13:36:22.070]   - Field: ‘gc’
[13:36:22.070]   - Field: ‘conditions’
[13:36:22.070]   - Field: ‘expr’
[13:36:22.071]   - Field: ‘uuid’
[13:36:22.071]   - Field: ‘seed’
[13:36:22.071]   - Field: ‘version’
[13:36:22.071]   - Field: ‘result’
[13:36:22.071]   - Field: ‘asynchronous’
[13:36:22.071]   - Field: ‘calls’
[13:36:22.071]   - Field: ‘globals’
[13:36:22.071]   - Field: ‘stdout’
[13:36:22.071]   - Field: ‘earlySignal’
[13:36:22.071]   - Field: ‘lazy’
[13:36:22.071]   - Field: ‘state’
[13:36:22.072] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:22.072] - Launch lazy future ...
[13:36:22.072] Packages needed by the future expression (n = 0): <none>
[13:36:22.072] Packages needed by future strategies (n = 0): <none>
[13:36:22.072] {
[13:36:22.072]     {
[13:36:22.072]         {
[13:36:22.072]             ...future.startTime <- base::Sys.time()
[13:36:22.072]             {
[13:36:22.072]                 {
[13:36:22.072]                   {
[13:36:22.072]                     base::local({
[13:36:22.072]                       has_future <- base::requireNamespace("future", 
[13:36:22.072]                         quietly = TRUE)
[13:36:22.072]                       if (has_future) {
[13:36:22.072]                         ns <- base::getNamespace("future")
[13:36:22.072]                         version <- ns[[".package"]][["version"]]
[13:36:22.072]                         if (is.null(version)) 
[13:36:22.072]                           version <- utils::packageVersion("future")
[13:36:22.072]                       }
[13:36:22.072]                       else {
[13:36:22.072]                         version <- NULL
[13:36:22.072]                       }
[13:36:22.072]                       if (!has_future || version < "1.8.0") {
[13:36:22.072]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.072]                           "", base::R.version$version.string), 
[13:36:22.072]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.072]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.072]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.072]                             "release", "version")], collapse = " "), 
[13:36:22.072]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.072]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.072]                           info)
[13:36:22.072]                         info <- base::paste(info, collapse = "; ")
[13:36:22.072]                         if (!has_future) {
[13:36:22.072]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.072]                             info)
[13:36:22.072]                         }
[13:36:22.072]                         else {
[13:36:22.072]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.072]                             info, version)
[13:36:22.072]                         }
[13:36:22.072]                         base::stop(msg)
[13:36:22.072]                       }
[13:36:22.072]                     })
[13:36:22.072]                   }
[13:36:22.072]                   ...future.strategy.old <- future::plan("list")
[13:36:22.072]                   options(future.plan = NULL)
[13:36:22.072]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.072]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.072]                 }
[13:36:22.072]                 ...future.workdir <- getwd()
[13:36:22.072]             }
[13:36:22.072]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.072]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.072]         }
[13:36:22.072]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.072]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.072]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.072]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.072]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.072]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.072]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.072]             base::names(...future.oldOptions))
[13:36:22.072]     }
[13:36:22.072]     if (FALSE) {
[13:36:22.072]     }
[13:36:22.072]     else {
[13:36:22.072]         if (TRUE) {
[13:36:22.072]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.072]                 open = "w")
[13:36:22.072]         }
[13:36:22.072]         else {
[13:36:22.072]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.072]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.072]         }
[13:36:22.072]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.072]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.072]             base::sink(type = "output", split = FALSE)
[13:36:22.072]             base::close(...future.stdout)
[13:36:22.072]         }, add = TRUE)
[13:36:22.072]     }
[13:36:22.072]     ...future.frame <- base::sys.nframe()
[13:36:22.072]     ...future.conditions <- base::list()
[13:36:22.072]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.072]     if (FALSE) {
[13:36:22.072]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.072]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.072]     }
[13:36:22.072]     ...future.result <- base::tryCatch({
[13:36:22.072]         base::withCallingHandlers({
[13:36:22.072]             ...future.value <- base::withVisible(base::local({
[13:36:22.072]                 42
[13:36:22.072]             }))
[13:36:22.072]             future::FutureResult(value = ...future.value$value, 
[13:36:22.072]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.072]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.072]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.072]                     ...future.globalenv.names))
[13:36:22.072]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.072]         }, condition = base::local({
[13:36:22.072]             c <- base::c
[13:36:22.072]             inherits <- base::inherits
[13:36:22.072]             invokeRestart <- base::invokeRestart
[13:36:22.072]             length <- base::length
[13:36:22.072]             list <- base::list
[13:36:22.072]             seq.int <- base::seq.int
[13:36:22.072]             signalCondition <- base::signalCondition
[13:36:22.072]             sys.calls <- base::sys.calls
[13:36:22.072]             `[[` <- base::`[[`
[13:36:22.072]             `+` <- base::`+`
[13:36:22.072]             `<<-` <- base::`<<-`
[13:36:22.072]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.072]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.072]                   3L)]
[13:36:22.072]             }
[13:36:22.072]             function(cond) {
[13:36:22.072]                 is_error <- inherits(cond, "error")
[13:36:22.072]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.072]                   NULL)
[13:36:22.072]                 if (is_error) {
[13:36:22.072]                   sessionInformation <- function() {
[13:36:22.072]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.072]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.072]                       search = base::search(), system = base::Sys.info())
[13:36:22.072]                   }
[13:36:22.072]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.072]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.072]                     cond$call), session = sessionInformation(), 
[13:36:22.072]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.072]                   signalCondition(cond)
[13:36:22.072]                 }
[13:36:22.072]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.072]                 "immediateCondition"))) {
[13:36:22.072]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.072]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.072]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.072]                   if (TRUE && !signal) {
[13:36:22.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.072]                     {
[13:36:22.072]                       inherits <- base::inherits
[13:36:22.072]                       invokeRestart <- base::invokeRestart
[13:36:22.072]                       is.null <- base::is.null
[13:36:22.072]                       muffled <- FALSE
[13:36:22.072]                       if (inherits(cond, "message")) {
[13:36:22.072]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.072]                         if (muffled) 
[13:36:22.072]                           invokeRestart("muffleMessage")
[13:36:22.072]                       }
[13:36:22.072]                       else if (inherits(cond, "warning")) {
[13:36:22.072]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.072]                         if (muffled) 
[13:36:22.072]                           invokeRestart("muffleWarning")
[13:36:22.072]                       }
[13:36:22.072]                       else if (inherits(cond, "condition")) {
[13:36:22.072]                         if (!is.null(pattern)) {
[13:36:22.072]                           computeRestarts <- base::computeRestarts
[13:36:22.072]                           grepl <- base::grepl
[13:36:22.072]                           restarts <- computeRestarts(cond)
[13:36:22.072]                           for (restart in restarts) {
[13:36:22.072]                             name <- restart$name
[13:36:22.072]                             if (is.null(name)) 
[13:36:22.072]                               next
[13:36:22.072]                             if (!grepl(pattern, name)) 
[13:36:22.072]                               next
[13:36:22.072]                             invokeRestart(restart)
[13:36:22.072]                             muffled <- TRUE
[13:36:22.072]                             break
[13:36:22.072]                           }
[13:36:22.072]                         }
[13:36:22.072]                       }
[13:36:22.072]                       invisible(muffled)
[13:36:22.072]                     }
[13:36:22.072]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.072]                   }
[13:36:22.072]                 }
[13:36:22.072]                 else {
[13:36:22.072]                   if (TRUE) {
[13:36:22.072]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.072]                     {
[13:36:22.072]                       inherits <- base::inherits
[13:36:22.072]                       invokeRestart <- base::invokeRestart
[13:36:22.072]                       is.null <- base::is.null
[13:36:22.072]                       muffled <- FALSE
[13:36:22.072]                       if (inherits(cond, "message")) {
[13:36:22.072]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.072]                         if (muffled) 
[13:36:22.072]                           invokeRestart("muffleMessage")
[13:36:22.072]                       }
[13:36:22.072]                       else if (inherits(cond, "warning")) {
[13:36:22.072]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.072]                         if (muffled) 
[13:36:22.072]                           invokeRestart("muffleWarning")
[13:36:22.072]                       }
[13:36:22.072]                       else if (inherits(cond, "condition")) {
[13:36:22.072]                         if (!is.null(pattern)) {
[13:36:22.072]                           computeRestarts <- base::computeRestarts
[13:36:22.072]                           grepl <- base::grepl
[13:36:22.072]                           restarts <- computeRestarts(cond)
[13:36:22.072]                           for (restart in restarts) {
[13:36:22.072]                             name <- restart$name
[13:36:22.072]                             if (is.null(name)) 
[13:36:22.072]                               next
[13:36:22.072]                             if (!grepl(pattern, name)) 
[13:36:22.072]                               next
[13:36:22.072]                             invokeRestart(restart)
[13:36:22.072]                             muffled <- TRUE
[13:36:22.072]                             break
[13:36:22.072]                           }
[13:36:22.072]                         }
[13:36:22.072]                       }
[13:36:22.072]                       invisible(muffled)
[13:36:22.072]                     }
[13:36:22.072]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.072]                   }
[13:36:22.072]                 }
[13:36:22.072]             }
[13:36:22.072]         }))
[13:36:22.072]     }, error = function(ex) {
[13:36:22.072]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.072]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.072]                 ...future.rng), started = ...future.startTime, 
[13:36:22.072]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.072]             version = "1.8"), class = "FutureResult")
[13:36:22.072]     }, finally = {
[13:36:22.072]         if (!identical(...future.workdir, getwd())) 
[13:36:22.072]             setwd(...future.workdir)
[13:36:22.072]         {
[13:36:22.072]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.072]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.072]             }
[13:36:22.072]             base::options(...future.oldOptions)
[13:36:22.072]             if (.Platform$OS.type == "windows") {
[13:36:22.072]                 old_names <- names(...future.oldEnvVars)
[13:36:22.072]                 envs <- base::Sys.getenv()
[13:36:22.072]                 names <- names(envs)
[13:36:22.072]                 common <- intersect(names, old_names)
[13:36:22.072]                 added <- setdiff(names, old_names)
[13:36:22.072]                 removed <- setdiff(old_names, names)
[13:36:22.072]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.072]                   envs[common]]
[13:36:22.072]                 NAMES <- toupper(changed)
[13:36:22.072]                 args <- list()
[13:36:22.072]                 for (kk in seq_along(NAMES)) {
[13:36:22.072]                   name <- changed[[kk]]
[13:36:22.072]                   NAME <- NAMES[[kk]]
[13:36:22.072]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.072]                     next
[13:36:22.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.072]                 }
[13:36:22.072]                 NAMES <- toupper(added)
[13:36:22.072]                 for (kk in seq_along(NAMES)) {
[13:36:22.072]                   name <- added[[kk]]
[13:36:22.072]                   NAME <- NAMES[[kk]]
[13:36:22.072]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.072]                     next
[13:36:22.072]                   args[[name]] <- ""
[13:36:22.072]                 }
[13:36:22.072]                 NAMES <- toupper(removed)
[13:36:22.072]                 for (kk in seq_along(NAMES)) {
[13:36:22.072]                   name <- removed[[kk]]
[13:36:22.072]                   NAME <- NAMES[[kk]]
[13:36:22.072]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.072]                     next
[13:36:22.072]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.072]                 }
[13:36:22.072]                 if (length(args) > 0) 
[13:36:22.072]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.072]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.072]             }
[13:36:22.072]             else {
[13:36:22.072]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.072]             }
[13:36:22.072]             {
[13:36:22.072]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.072]                   0L) {
[13:36:22.072]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.072]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.072]                   base::options(opts)
[13:36:22.072]                 }
[13:36:22.072]                 {
[13:36:22.072]                   {
[13:36:22.072]                     NULL
[13:36:22.072]                     RNGkind("Mersenne-Twister")
[13:36:22.072]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.072]                       inherits = FALSE)
[13:36:22.072]                   }
[13:36:22.072]                   options(future.plan = NULL)
[13:36:22.072]                   if (is.na(NA_character_)) 
[13:36:22.072]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.072]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.072]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.072]                     .init = FALSE)
[13:36:22.072]                 }
[13:36:22.072]             }
[13:36:22.072]         }
[13:36:22.072]     })
[13:36:22.072]     if (TRUE) {
[13:36:22.072]         base::sink(type = "output", split = FALSE)
[13:36:22.072]         if (TRUE) {
[13:36:22.072]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.072]         }
[13:36:22.072]         else {
[13:36:22.072]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.072]         }
[13:36:22.072]         base::close(...future.stdout)
[13:36:22.072]         ...future.stdout <- NULL
[13:36:22.072]     }
[13:36:22.072]     ...future.result$conditions <- ...future.conditions
[13:36:22.072]     ...future.result$finished <- base::Sys.time()
[13:36:22.072]     ...future.result
[13:36:22.072] }
[13:36:22.074] plan(): Setting new future strategy stack:
[13:36:22.074] List of future strategies:
[13:36:22.074] 1. sequential:
[13:36:22.074]    - args: function (..., envir = parent.frame())
[13:36:22.074]    - tweaked: FALSE
[13:36:22.074]    - call: NULL
[13:36:22.074] plan(): nbrOfWorkers() = 1
[13:36:22.075] plan(): Setting new future strategy stack:
[13:36:22.075] List of future strategies:
[13:36:22.075] 1. sequential:
[13:36:22.075]    - args: function (..., envir = parent.frame())
[13:36:22.075]    - tweaked: FALSE
[13:36:22.075]    - call: plan(strategy)
[13:36:22.075] plan(): nbrOfWorkers() = 1
[13:36:22.076] SequentialFuture started (and completed)
[13:36:22.076] - Launch lazy future ... done
[13:36:22.076] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.077] getGlobalsAndPackages() ...
[13:36:22.077] Searching for globals...
[13:36:22.077] 
[13:36:22.077] Searching for globals ... DONE
[13:36:22.077] - globals: [0] <none>
[13:36:22.077] getGlobalsAndPackages() ... DONE
[13:36:22.077] Packages needed by the future expression (n = 0): <none>
[13:36:22.078] Packages needed by future strategies (n = 0): <none>
[13:36:22.078] {
[13:36:22.078]     {
[13:36:22.078]         {
[13:36:22.078]             ...future.startTime <- base::Sys.time()
[13:36:22.078]             {
[13:36:22.078]                 {
[13:36:22.078]                   {
[13:36:22.078]                     base::local({
[13:36:22.078]                       has_future <- base::requireNamespace("future", 
[13:36:22.078]                         quietly = TRUE)
[13:36:22.078]                       if (has_future) {
[13:36:22.078]                         ns <- base::getNamespace("future")
[13:36:22.078]                         version <- ns[[".package"]][["version"]]
[13:36:22.078]                         if (is.null(version)) 
[13:36:22.078]                           version <- utils::packageVersion("future")
[13:36:22.078]                       }
[13:36:22.078]                       else {
[13:36:22.078]                         version <- NULL
[13:36:22.078]                       }
[13:36:22.078]                       if (!has_future || version < "1.8.0") {
[13:36:22.078]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.078]                           "", base::R.version$version.string), 
[13:36:22.078]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.078]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.078]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.078]                             "release", "version")], collapse = " "), 
[13:36:22.078]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.078]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.078]                           info)
[13:36:22.078]                         info <- base::paste(info, collapse = "; ")
[13:36:22.078]                         if (!has_future) {
[13:36:22.078]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.078]                             info)
[13:36:22.078]                         }
[13:36:22.078]                         else {
[13:36:22.078]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.078]                             info, version)
[13:36:22.078]                         }
[13:36:22.078]                         base::stop(msg)
[13:36:22.078]                       }
[13:36:22.078]                     })
[13:36:22.078]                   }
[13:36:22.078]                   ...future.strategy.old <- future::plan("list")
[13:36:22.078]                   options(future.plan = NULL)
[13:36:22.078]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.078]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.078]                 }
[13:36:22.078]                 ...future.workdir <- getwd()
[13:36:22.078]             }
[13:36:22.078]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.078]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.078]         }
[13:36:22.078]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.078]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.078]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.078]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.078]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.078]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.078]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.078]             base::names(...future.oldOptions))
[13:36:22.078]     }
[13:36:22.078]     if (FALSE) {
[13:36:22.078]     }
[13:36:22.078]     else {
[13:36:22.078]         if (TRUE) {
[13:36:22.078]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.078]                 open = "w")
[13:36:22.078]         }
[13:36:22.078]         else {
[13:36:22.078]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.078]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.078]         }
[13:36:22.078]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.078]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.078]             base::sink(type = "output", split = FALSE)
[13:36:22.078]             base::close(...future.stdout)
[13:36:22.078]         }, add = TRUE)
[13:36:22.078]     }
[13:36:22.078]     ...future.frame <- base::sys.nframe()
[13:36:22.078]     ...future.conditions <- base::list()
[13:36:22.078]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.078]     if (FALSE) {
[13:36:22.078]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.078]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.078]     }
[13:36:22.078]     ...future.result <- base::tryCatch({
[13:36:22.078]         base::withCallingHandlers({
[13:36:22.078]             ...future.value <- base::withVisible(base::local(42))
[13:36:22.078]             future::FutureResult(value = ...future.value$value, 
[13:36:22.078]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.078]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.078]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.078]                     ...future.globalenv.names))
[13:36:22.078]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.078]         }, condition = base::local({
[13:36:22.078]             c <- base::c
[13:36:22.078]             inherits <- base::inherits
[13:36:22.078]             invokeRestart <- base::invokeRestart
[13:36:22.078]             length <- base::length
[13:36:22.078]             list <- base::list
[13:36:22.078]             seq.int <- base::seq.int
[13:36:22.078]             signalCondition <- base::signalCondition
[13:36:22.078]             sys.calls <- base::sys.calls
[13:36:22.078]             `[[` <- base::`[[`
[13:36:22.078]             `+` <- base::`+`
[13:36:22.078]             `<<-` <- base::`<<-`
[13:36:22.078]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.078]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.078]                   3L)]
[13:36:22.078]             }
[13:36:22.078]             function(cond) {
[13:36:22.078]                 is_error <- inherits(cond, "error")
[13:36:22.078]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.078]                   NULL)
[13:36:22.078]                 if (is_error) {
[13:36:22.078]                   sessionInformation <- function() {
[13:36:22.078]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.078]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.078]                       search = base::search(), system = base::Sys.info())
[13:36:22.078]                   }
[13:36:22.078]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.078]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.078]                     cond$call), session = sessionInformation(), 
[13:36:22.078]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.078]                   signalCondition(cond)
[13:36:22.078]                 }
[13:36:22.078]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.078]                 "immediateCondition"))) {
[13:36:22.078]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.078]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.078]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.078]                   if (TRUE && !signal) {
[13:36:22.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.078]                     {
[13:36:22.078]                       inherits <- base::inherits
[13:36:22.078]                       invokeRestart <- base::invokeRestart
[13:36:22.078]                       is.null <- base::is.null
[13:36:22.078]                       muffled <- FALSE
[13:36:22.078]                       if (inherits(cond, "message")) {
[13:36:22.078]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.078]                         if (muffled) 
[13:36:22.078]                           invokeRestart("muffleMessage")
[13:36:22.078]                       }
[13:36:22.078]                       else if (inherits(cond, "warning")) {
[13:36:22.078]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.078]                         if (muffled) 
[13:36:22.078]                           invokeRestart("muffleWarning")
[13:36:22.078]                       }
[13:36:22.078]                       else if (inherits(cond, "condition")) {
[13:36:22.078]                         if (!is.null(pattern)) {
[13:36:22.078]                           computeRestarts <- base::computeRestarts
[13:36:22.078]                           grepl <- base::grepl
[13:36:22.078]                           restarts <- computeRestarts(cond)
[13:36:22.078]                           for (restart in restarts) {
[13:36:22.078]                             name <- restart$name
[13:36:22.078]                             if (is.null(name)) 
[13:36:22.078]                               next
[13:36:22.078]                             if (!grepl(pattern, name)) 
[13:36:22.078]                               next
[13:36:22.078]                             invokeRestart(restart)
[13:36:22.078]                             muffled <- TRUE
[13:36:22.078]                             break
[13:36:22.078]                           }
[13:36:22.078]                         }
[13:36:22.078]                       }
[13:36:22.078]                       invisible(muffled)
[13:36:22.078]                     }
[13:36:22.078]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.078]                   }
[13:36:22.078]                 }
[13:36:22.078]                 else {
[13:36:22.078]                   if (TRUE) {
[13:36:22.078]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.078]                     {
[13:36:22.078]                       inherits <- base::inherits
[13:36:22.078]                       invokeRestart <- base::invokeRestart
[13:36:22.078]                       is.null <- base::is.null
[13:36:22.078]                       muffled <- FALSE
[13:36:22.078]                       if (inherits(cond, "message")) {
[13:36:22.078]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.078]                         if (muffled) 
[13:36:22.078]                           invokeRestart("muffleMessage")
[13:36:22.078]                       }
[13:36:22.078]                       else if (inherits(cond, "warning")) {
[13:36:22.078]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.078]                         if (muffled) 
[13:36:22.078]                           invokeRestart("muffleWarning")
[13:36:22.078]                       }
[13:36:22.078]                       else if (inherits(cond, "condition")) {
[13:36:22.078]                         if (!is.null(pattern)) {
[13:36:22.078]                           computeRestarts <- base::computeRestarts
[13:36:22.078]                           grepl <- base::grepl
[13:36:22.078]                           restarts <- computeRestarts(cond)
[13:36:22.078]                           for (restart in restarts) {
[13:36:22.078]                             name <- restart$name
[13:36:22.078]                             if (is.null(name)) 
[13:36:22.078]                               next
[13:36:22.078]                             if (!grepl(pattern, name)) 
[13:36:22.078]                               next
[13:36:22.078]                             invokeRestart(restart)
[13:36:22.078]                             muffled <- TRUE
[13:36:22.078]                             break
[13:36:22.078]                           }
[13:36:22.078]                         }
[13:36:22.078]                       }
[13:36:22.078]                       invisible(muffled)
[13:36:22.078]                     }
[13:36:22.078]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.078]                   }
[13:36:22.078]                 }
[13:36:22.078]             }
[13:36:22.078]         }))
[13:36:22.078]     }, error = function(ex) {
[13:36:22.078]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.078]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.078]                 ...future.rng), started = ...future.startTime, 
[13:36:22.078]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.078]             version = "1.8"), class = "FutureResult")
[13:36:22.078]     }, finally = {
[13:36:22.078]         if (!identical(...future.workdir, getwd())) 
[13:36:22.078]             setwd(...future.workdir)
[13:36:22.078]         {
[13:36:22.078]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.078]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.078]             }
[13:36:22.078]             base::options(...future.oldOptions)
[13:36:22.078]             if (.Platform$OS.type == "windows") {
[13:36:22.078]                 old_names <- names(...future.oldEnvVars)
[13:36:22.078]                 envs <- base::Sys.getenv()
[13:36:22.078]                 names <- names(envs)
[13:36:22.078]                 common <- intersect(names, old_names)
[13:36:22.078]                 added <- setdiff(names, old_names)
[13:36:22.078]                 removed <- setdiff(old_names, names)
[13:36:22.078]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.078]                   envs[common]]
[13:36:22.078]                 NAMES <- toupper(changed)
[13:36:22.078]                 args <- list()
[13:36:22.078]                 for (kk in seq_along(NAMES)) {
[13:36:22.078]                   name <- changed[[kk]]
[13:36:22.078]                   NAME <- NAMES[[kk]]
[13:36:22.078]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.078]                     next
[13:36:22.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.078]                 }
[13:36:22.078]                 NAMES <- toupper(added)
[13:36:22.078]                 for (kk in seq_along(NAMES)) {
[13:36:22.078]                   name <- added[[kk]]
[13:36:22.078]                   NAME <- NAMES[[kk]]
[13:36:22.078]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.078]                     next
[13:36:22.078]                   args[[name]] <- ""
[13:36:22.078]                 }
[13:36:22.078]                 NAMES <- toupper(removed)
[13:36:22.078]                 for (kk in seq_along(NAMES)) {
[13:36:22.078]                   name <- removed[[kk]]
[13:36:22.078]                   NAME <- NAMES[[kk]]
[13:36:22.078]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.078]                     next
[13:36:22.078]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.078]                 }
[13:36:22.078]                 if (length(args) > 0) 
[13:36:22.078]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.078]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.078]             }
[13:36:22.078]             else {
[13:36:22.078]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.078]             }
[13:36:22.078]             {
[13:36:22.078]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.078]                   0L) {
[13:36:22.078]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.078]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.078]                   base::options(opts)
[13:36:22.078]                 }
[13:36:22.078]                 {
[13:36:22.078]                   {
[13:36:22.078]                     NULL
[13:36:22.078]                     RNGkind("Mersenne-Twister")
[13:36:22.078]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.078]                       inherits = FALSE)
[13:36:22.078]                   }
[13:36:22.078]                   options(future.plan = NULL)
[13:36:22.078]                   if (is.na(NA_character_)) 
[13:36:22.078]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.078]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.078]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.078]                     .init = FALSE)
[13:36:22.078]                 }
[13:36:22.078]             }
[13:36:22.078]         }
[13:36:22.078]     })
[13:36:22.078]     if (TRUE) {
[13:36:22.078]         base::sink(type = "output", split = FALSE)
[13:36:22.078]         if (TRUE) {
[13:36:22.078]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.078]         }
[13:36:22.078]         else {
[13:36:22.078]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.078]         }
[13:36:22.078]         base::close(...future.stdout)
[13:36:22.078]         ...future.stdout <- NULL
[13:36:22.078]     }
[13:36:22.078]     ...future.result$conditions <- ...future.conditions
[13:36:22.078]     ...future.result$finished <- base::Sys.time()
[13:36:22.078]     ...future.result
[13:36:22.078] }
[13:36:22.080] plan(): Setting new future strategy stack:
[13:36:22.080] List of future strategies:
[13:36:22.080] 1. sequential:
[13:36:22.080]    - args: function (..., envir = parent.frame())
[13:36:22.080]    - tweaked: FALSE
[13:36:22.080]    - call: NULL
[13:36:22.080] plan(): nbrOfWorkers() = 1
[13:36:22.081] plan(): Setting new future strategy stack:
[13:36:22.081] List of future strategies:
[13:36:22.081] 1. sequential:
[13:36:22.081]    - args: function (..., envir = parent.frame())
[13:36:22.081]    - tweaked: FALSE
[13:36:22.081]    - call: plan(strategy)
[13:36:22.081] plan(): nbrOfWorkers() = 1
[13:36:22.081] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.082] getGlobalsAndPackages() ...
[13:36:22.082] Searching for globals...
[13:36:22.082] 
[13:36:22.082] Searching for globals ... DONE
[13:36:22.083] - globals: [0] <none>
[13:36:22.083] getGlobalsAndPackages() ... DONE
[13:36:22.083] run() for ‘Future’ ...
[13:36:22.083] - state: ‘created’
[13:36:22.083] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:22.083] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.083] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:22.085]   - Field: ‘label’
[13:36:22.085]   - Field: ‘local’
[13:36:22.085]   - Field: ‘owner’
[13:36:22.085]   - Field: ‘envir’
[13:36:22.086]   - Field: ‘packages’
[13:36:22.086]   - Field: ‘gc’
[13:36:22.086]   - Field: ‘conditions’
[13:36:22.086]   - Field: ‘expr’
[13:36:22.086]   - Field: ‘uuid’
[13:36:22.086]   - Field: ‘seed’
[13:36:22.086]   - Field: ‘version’
[13:36:22.086]   - Field: ‘result’
[13:36:22.086]   - Field: ‘asynchronous’
[13:36:22.086]   - Field: ‘calls’
[13:36:22.087]   - Field: ‘globals’
[13:36:22.087]   - Field: ‘stdout’
[13:36:22.087]   - Field: ‘earlySignal’
[13:36:22.087]   - Field: ‘lazy’
[13:36:22.087]   - Field: ‘state’
[13:36:22.087] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:22.087] - Launch lazy future ...
[13:36:22.087] Packages needed by the future expression (n = 0): <none>
[13:36:22.087] Packages needed by future strategies (n = 0): <none>
[13:36:22.088] {
[13:36:22.088]     {
[13:36:22.088]         {
[13:36:22.088]             ...future.startTime <- base::Sys.time()
[13:36:22.088]             {
[13:36:22.088]                 {
[13:36:22.088]                   {
[13:36:22.088]                     base::local({
[13:36:22.088]                       has_future <- base::requireNamespace("future", 
[13:36:22.088]                         quietly = TRUE)
[13:36:22.088]                       if (has_future) {
[13:36:22.088]                         ns <- base::getNamespace("future")
[13:36:22.088]                         version <- ns[[".package"]][["version"]]
[13:36:22.088]                         if (is.null(version)) 
[13:36:22.088]                           version <- utils::packageVersion("future")
[13:36:22.088]                       }
[13:36:22.088]                       else {
[13:36:22.088]                         version <- NULL
[13:36:22.088]                       }
[13:36:22.088]                       if (!has_future || version < "1.8.0") {
[13:36:22.088]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.088]                           "", base::R.version$version.string), 
[13:36:22.088]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.088]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.088]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.088]                             "release", "version")], collapse = " "), 
[13:36:22.088]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.088]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.088]                           info)
[13:36:22.088]                         info <- base::paste(info, collapse = "; ")
[13:36:22.088]                         if (!has_future) {
[13:36:22.088]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.088]                             info)
[13:36:22.088]                         }
[13:36:22.088]                         else {
[13:36:22.088]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.088]                             info, version)
[13:36:22.088]                         }
[13:36:22.088]                         base::stop(msg)
[13:36:22.088]                       }
[13:36:22.088]                     })
[13:36:22.088]                   }
[13:36:22.088]                   ...future.strategy.old <- future::plan("list")
[13:36:22.088]                   options(future.plan = NULL)
[13:36:22.088]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.088]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.088]                 }
[13:36:22.088]                 ...future.workdir <- getwd()
[13:36:22.088]             }
[13:36:22.088]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.088]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.088]         }
[13:36:22.088]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.088]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.088]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.088]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.088]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.088]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.088]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.088]             base::names(...future.oldOptions))
[13:36:22.088]     }
[13:36:22.088]     if (FALSE) {
[13:36:22.088]     }
[13:36:22.088]     else {
[13:36:22.088]         if (TRUE) {
[13:36:22.088]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.088]                 open = "w")
[13:36:22.088]         }
[13:36:22.088]         else {
[13:36:22.088]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.088]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.088]         }
[13:36:22.088]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.088]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.088]             base::sink(type = "output", split = FALSE)
[13:36:22.088]             base::close(...future.stdout)
[13:36:22.088]         }, add = TRUE)
[13:36:22.088]     }
[13:36:22.088]     ...future.frame <- base::sys.nframe()
[13:36:22.088]     ...future.conditions <- base::list()
[13:36:22.088]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.088]     if (FALSE) {
[13:36:22.088]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.088]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.088]     }
[13:36:22.088]     ...future.result <- base::tryCatch({
[13:36:22.088]         base::withCallingHandlers({
[13:36:22.088]             ...future.value <- base::withVisible(base::local(42))
[13:36:22.088]             future::FutureResult(value = ...future.value$value, 
[13:36:22.088]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.088]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.088]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.088]                     ...future.globalenv.names))
[13:36:22.088]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.088]         }, condition = base::local({
[13:36:22.088]             c <- base::c
[13:36:22.088]             inherits <- base::inherits
[13:36:22.088]             invokeRestart <- base::invokeRestart
[13:36:22.088]             length <- base::length
[13:36:22.088]             list <- base::list
[13:36:22.088]             seq.int <- base::seq.int
[13:36:22.088]             signalCondition <- base::signalCondition
[13:36:22.088]             sys.calls <- base::sys.calls
[13:36:22.088]             `[[` <- base::`[[`
[13:36:22.088]             `+` <- base::`+`
[13:36:22.088]             `<<-` <- base::`<<-`
[13:36:22.088]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.088]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.088]                   3L)]
[13:36:22.088]             }
[13:36:22.088]             function(cond) {
[13:36:22.088]                 is_error <- inherits(cond, "error")
[13:36:22.088]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.088]                   NULL)
[13:36:22.088]                 if (is_error) {
[13:36:22.088]                   sessionInformation <- function() {
[13:36:22.088]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.088]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.088]                       search = base::search(), system = base::Sys.info())
[13:36:22.088]                   }
[13:36:22.088]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.088]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.088]                     cond$call), session = sessionInformation(), 
[13:36:22.088]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.088]                   signalCondition(cond)
[13:36:22.088]                 }
[13:36:22.088]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.088]                 "immediateCondition"))) {
[13:36:22.088]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.088]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.088]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.088]                   if (TRUE && !signal) {
[13:36:22.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.088]                     {
[13:36:22.088]                       inherits <- base::inherits
[13:36:22.088]                       invokeRestart <- base::invokeRestart
[13:36:22.088]                       is.null <- base::is.null
[13:36:22.088]                       muffled <- FALSE
[13:36:22.088]                       if (inherits(cond, "message")) {
[13:36:22.088]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.088]                         if (muffled) 
[13:36:22.088]                           invokeRestart("muffleMessage")
[13:36:22.088]                       }
[13:36:22.088]                       else if (inherits(cond, "warning")) {
[13:36:22.088]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.088]                         if (muffled) 
[13:36:22.088]                           invokeRestart("muffleWarning")
[13:36:22.088]                       }
[13:36:22.088]                       else if (inherits(cond, "condition")) {
[13:36:22.088]                         if (!is.null(pattern)) {
[13:36:22.088]                           computeRestarts <- base::computeRestarts
[13:36:22.088]                           grepl <- base::grepl
[13:36:22.088]                           restarts <- computeRestarts(cond)
[13:36:22.088]                           for (restart in restarts) {
[13:36:22.088]                             name <- restart$name
[13:36:22.088]                             if (is.null(name)) 
[13:36:22.088]                               next
[13:36:22.088]                             if (!grepl(pattern, name)) 
[13:36:22.088]                               next
[13:36:22.088]                             invokeRestart(restart)
[13:36:22.088]                             muffled <- TRUE
[13:36:22.088]                             break
[13:36:22.088]                           }
[13:36:22.088]                         }
[13:36:22.088]                       }
[13:36:22.088]                       invisible(muffled)
[13:36:22.088]                     }
[13:36:22.088]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.088]                   }
[13:36:22.088]                 }
[13:36:22.088]                 else {
[13:36:22.088]                   if (TRUE) {
[13:36:22.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.088]                     {
[13:36:22.088]                       inherits <- base::inherits
[13:36:22.088]                       invokeRestart <- base::invokeRestart
[13:36:22.088]                       is.null <- base::is.null
[13:36:22.088]                       muffled <- FALSE
[13:36:22.088]                       if (inherits(cond, "message")) {
[13:36:22.088]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.088]                         if (muffled) 
[13:36:22.088]                           invokeRestart("muffleMessage")
[13:36:22.088]                       }
[13:36:22.088]                       else if (inherits(cond, "warning")) {
[13:36:22.088]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.088]                         if (muffled) 
[13:36:22.088]                           invokeRestart("muffleWarning")
[13:36:22.088]                       }
[13:36:22.088]                       else if (inherits(cond, "condition")) {
[13:36:22.088]                         if (!is.null(pattern)) {
[13:36:22.088]                           computeRestarts <- base::computeRestarts
[13:36:22.088]                           grepl <- base::grepl
[13:36:22.088]                           restarts <- computeRestarts(cond)
[13:36:22.088]                           for (restart in restarts) {
[13:36:22.088]                             name <- restart$name
[13:36:22.088]                             if (is.null(name)) 
[13:36:22.088]                               next
[13:36:22.088]                             if (!grepl(pattern, name)) 
[13:36:22.088]                               next
[13:36:22.088]                             invokeRestart(restart)
[13:36:22.088]                             muffled <- TRUE
[13:36:22.088]                             break
[13:36:22.088]                           }
[13:36:22.088]                         }
[13:36:22.088]                       }
[13:36:22.088]                       invisible(muffled)
[13:36:22.088]                     }
[13:36:22.088]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.088]                   }
[13:36:22.088]                 }
[13:36:22.088]             }
[13:36:22.088]         }))
[13:36:22.088]     }, error = function(ex) {
[13:36:22.088]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.088]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.088]                 ...future.rng), started = ...future.startTime, 
[13:36:22.088]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.088]             version = "1.8"), class = "FutureResult")
[13:36:22.088]     }, finally = {
[13:36:22.088]         if (!identical(...future.workdir, getwd())) 
[13:36:22.088]             setwd(...future.workdir)
[13:36:22.088]         {
[13:36:22.088]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.088]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.088]             }
[13:36:22.088]             base::options(...future.oldOptions)
[13:36:22.088]             if (.Platform$OS.type == "windows") {
[13:36:22.088]                 old_names <- names(...future.oldEnvVars)
[13:36:22.088]                 envs <- base::Sys.getenv()
[13:36:22.088]                 names <- names(envs)
[13:36:22.088]                 common <- intersect(names, old_names)
[13:36:22.088]                 added <- setdiff(names, old_names)
[13:36:22.088]                 removed <- setdiff(old_names, names)
[13:36:22.088]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.088]                   envs[common]]
[13:36:22.088]                 NAMES <- toupper(changed)
[13:36:22.088]                 args <- list()
[13:36:22.088]                 for (kk in seq_along(NAMES)) {
[13:36:22.088]                   name <- changed[[kk]]
[13:36:22.088]                   NAME <- NAMES[[kk]]
[13:36:22.088]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.088]                     next
[13:36:22.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.088]                 }
[13:36:22.088]                 NAMES <- toupper(added)
[13:36:22.088]                 for (kk in seq_along(NAMES)) {
[13:36:22.088]                   name <- added[[kk]]
[13:36:22.088]                   NAME <- NAMES[[kk]]
[13:36:22.088]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.088]                     next
[13:36:22.088]                   args[[name]] <- ""
[13:36:22.088]                 }
[13:36:22.088]                 NAMES <- toupper(removed)
[13:36:22.088]                 for (kk in seq_along(NAMES)) {
[13:36:22.088]                   name <- removed[[kk]]
[13:36:22.088]                   NAME <- NAMES[[kk]]
[13:36:22.088]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.088]                     next
[13:36:22.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.088]                 }
[13:36:22.088]                 if (length(args) > 0) 
[13:36:22.088]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.088]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.088]             }
[13:36:22.088]             else {
[13:36:22.088]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.088]             }
[13:36:22.088]             {
[13:36:22.088]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.088]                   0L) {
[13:36:22.088]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.088]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.088]                   base::options(opts)
[13:36:22.088]                 }
[13:36:22.088]                 {
[13:36:22.088]                   {
[13:36:22.088]                     NULL
[13:36:22.088]                     RNGkind("Mersenne-Twister")
[13:36:22.088]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.088]                       inherits = FALSE)
[13:36:22.088]                   }
[13:36:22.088]                   options(future.plan = NULL)
[13:36:22.088]                   if (is.na(NA_character_)) 
[13:36:22.088]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.088]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.088]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.088]                     .init = FALSE)
[13:36:22.088]                 }
[13:36:22.088]             }
[13:36:22.088]         }
[13:36:22.088]     })
[13:36:22.088]     if (TRUE) {
[13:36:22.088]         base::sink(type = "output", split = FALSE)
[13:36:22.088]         if (TRUE) {
[13:36:22.088]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.088]         }
[13:36:22.088]         else {
[13:36:22.088]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.088]         }
[13:36:22.088]         base::close(...future.stdout)
[13:36:22.088]         ...future.stdout <- NULL
[13:36:22.088]     }
[13:36:22.088]     ...future.result$conditions <- ...future.conditions
[13:36:22.088]     ...future.result$finished <- base::Sys.time()
[13:36:22.088]     ...future.result
[13:36:22.088] }
[13:36:22.089] plan(): Setting new future strategy stack:
[13:36:22.089] List of future strategies:
[13:36:22.089] 1. sequential:
[13:36:22.089]    - args: function (..., envir = parent.frame())
[13:36:22.089]    - tweaked: FALSE
[13:36:22.089]    - call: NULL
[13:36:22.090] plan(): nbrOfWorkers() = 1
[13:36:22.090] plan(): Setting new future strategy stack:
[13:36:22.091] List of future strategies:
[13:36:22.091] 1. sequential:
[13:36:22.091]    - args: function (..., envir = parent.frame())
[13:36:22.091]    - tweaked: FALSE
[13:36:22.091]    - call: plan(strategy)
[13:36:22.091] plan(): nbrOfWorkers() = 1
[13:36:22.091] SequentialFuture started (and completed)
[13:36:22.091] - Launch lazy future ... done
[13:36:22.091] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.092] getGlobalsAndPackages() ...
[13:36:22.092] Searching for globals...
[13:36:22.093] - globals found: [1] ‘{’
[13:36:22.093] Searching for globals ... DONE
[13:36:22.093] Resolving globals: FALSE
[13:36:22.093] 
[13:36:22.093] 
[13:36:22.093] getGlobalsAndPackages() ... DONE
[13:36:22.093] run() for ‘Future’ ...
[13:36:22.093] - state: ‘created’
[13:36:22.094] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:36:22.094] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:36:22.094] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:36:22.094]   - Field: ‘label’
[13:36:22.094]   - Field: ‘local’
[13:36:22.094]   - Field: ‘owner’
[13:36:22.094]   - Field: ‘envir’
[13:36:22.094]   - Field: ‘packages’
[13:36:22.094]   - Field: ‘gc’
[13:36:22.095]   - Field: ‘conditions’
[13:36:22.095]   - Field: ‘expr’
[13:36:22.095]   - Field: ‘uuid’
[13:36:22.095]   - Field: ‘seed’
[13:36:22.095]   - Field: ‘version’
[13:36:22.095]   - Field: ‘result’
[13:36:22.095]   - Field: ‘asynchronous’
[13:36:22.095]   - Field: ‘calls’
[13:36:22.095]   - Field: ‘globals’
[13:36:22.095]   - Field: ‘stdout’
[13:36:22.095]   - Field: ‘earlySignal’
[13:36:22.096]   - Field: ‘lazy’
[13:36:22.096]   - Field: ‘state’
[13:36:22.096] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:36:22.096] - Launch lazy future ...
[13:36:22.096] Packages needed by the future expression (n = 0): <none>
[13:36:22.096] Packages needed by future strategies (n = 0): <none>
[13:36:22.096] {
[13:36:22.096]     {
[13:36:22.096]         {
[13:36:22.096]             ...future.startTime <- base::Sys.time()
[13:36:22.096]             {
[13:36:22.096]                 {
[13:36:22.096]                   {
[13:36:22.096]                     base::local({
[13:36:22.096]                       has_future <- base::requireNamespace("future", 
[13:36:22.096]                         quietly = TRUE)
[13:36:22.096]                       if (has_future) {
[13:36:22.096]                         ns <- base::getNamespace("future")
[13:36:22.096]                         version <- ns[[".package"]][["version"]]
[13:36:22.096]                         if (is.null(version)) 
[13:36:22.096]                           version <- utils::packageVersion("future")
[13:36:22.096]                       }
[13:36:22.096]                       else {
[13:36:22.096]                         version <- NULL
[13:36:22.096]                       }
[13:36:22.096]                       if (!has_future || version < "1.8.0") {
[13:36:22.096]                         info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.096]                           "", base::R.version$version.string), 
[13:36:22.096]                           platform = base::sprintf("%s (%s-bit)", 
[13:36:22.096]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.096]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.096]                             "release", "version")], collapse = " "), 
[13:36:22.096]                           hostname = base::Sys.info()[["nodename"]])
[13:36:22.096]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.096]                           info)
[13:36:22.096]                         info <- base::paste(info, collapse = "; ")
[13:36:22.096]                         if (!has_future) {
[13:36:22.096]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.096]                             info)
[13:36:22.096]                         }
[13:36:22.096]                         else {
[13:36:22.096]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.096]                             info, version)
[13:36:22.096]                         }
[13:36:22.096]                         base::stop(msg)
[13:36:22.096]                       }
[13:36:22.096]                     })
[13:36:22.096]                   }
[13:36:22.096]                   ...future.strategy.old <- future::plan("list")
[13:36:22.096]                   options(future.plan = NULL)
[13:36:22.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.096]                 }
[13:36:22.096]                 ...future.workdir <- getwd()
[13:36:22.096]             }
[13:36:22.096]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.096]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.096]         }
[13:36:22.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.096]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.096]             base::names(...future.oldOptions))
[13:36:22.096]     }
[13:36:22.096]     if (FALSE) {
[13:36:22.096]     }
[13:36:22.096]     else {
[13:36:22.096]         if (TRUE) {
[13:36:22.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.096]                 open = "w")
[13:36:22.096]         }
[13:36:22.096]         else {
[13:36:22.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.096]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.096]         }
[13:36:22.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.096]             base::sink(type = "output", split = FALSE)
[13:36:22.096]             base::close(...future.stdout)
[13:36:22.096]         }, add = TRUE)
[13:36:22.096]     }
[13:36:22.096]     ...future.frame <- base::sys.nframe()
[13:36:22.096]     ...future.conditions <- base::list()
[13:36:22.096]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.096]     if (FALSE) {
[13:36:22.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.096]     }
[13:36:22.096]     ...future.result <- base::tryCatch({
[13:36:22.096]         base::withCallingHandlers({
[13:36:22.096]             ...future.value <- base::withVisible(base::local({
[13:36:22.096]                 42
[13:36:22.096]             }))
[13:36:22.096]             future::FutureResult(value = ...future.value$value, 
[13:36:22.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.096]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.096]                     ...future.globalenv.names))
[13:36:22.096]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.096]         }, condition = base::local({
[13:36:22.096]             c <- base::c
[13:36:22.096]             inherits <- base::inherits
[13:36:22.096]             invokeRestart <- base::invokeRestart
[13:36:22.096]             length <- base::length
[13:36:22.096]             list <- base::list
[13:36:22.096]             seq.int <- base::seq.int
[13:36:22.096]             signalCondition <- base::signalCondition
[13:36:22.096]             sys.calls <- base::sys.calls
[13:36:22.096]             `[[` <- base::`[[`
[13:36:22.096]             `+` <- base::`+`
[13:36:22.096]             `<<-` <- base::`<<-`
[13:36:22.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.096]                   3L)]
[13:36:22.096]             }
[13:36:22.096]             function(cond) {
[13:36:22.096]                 is_error <- inherits(cond, "error")
[13:36:22.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.096]                   NULL)
[13:36:22.096]                 if (is_error) {
[13:36:22.096]                   sessionInformation <- function() {
[13:36:22.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.096]                       search = base::search(), system = base::Sys.info())
[13:36:22.096]                   }
[13:36:22.096]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.096]                     cond$call), session = sessionInformation(), 
[13:36:22.096]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.096]                   signalCondition(cond)
[13:36:22.096]                 }
[13:36:22.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.096]                 "immediateCondition"))) {
[13:36:22.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.096]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.096]                   if (TRUE && !signal) {
[13:36:22.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.096]                     {
[13:36:22.096]                       inherits <- base::inherits
[13:36:22.096]                       invokeRestart <- base::invokeRestart
[13:36:22.096]                       is.null <- base::is.null
[13:36:22.096]                       muffled <- FALSE
[13:36:22.096]                       if (inherits(cond, "message")) {
[13:36:22.096]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.096]                         if (muffled) 
[13:36:22.096]                           invokeRestart("muffleMessage")
[13:36:22.096]                       }
[13:36:22.096]                       else if (inherits(cond, "warning")) {
[13:36:22.096]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.096]                         if (muffled) 
[13:36:22.096]                           invokeRestart("muffleWarning")
[13:36:22.096]                       }
[13:36:22.096]                       else if (inherits(cond, "condition")) {
[13:36:22.096]                         if (!is.null(pattern)) {
[13:36:22.096]                           computeRestarts <- base::computeRestarts
[13:36:22.096]                           grepl <- base::grepl
[13:36:22.096]                           restarts <- computeRestarts(cond)
[13:36:22.096]                           for (restart in restarts) {
[13:36:22.096]                             name <- restart$name
[13:36:22.096]                             if (is.null(name)) 
[13:36:22.096]                               next
[13:36:22.096]                             if (!grepl(pattern, name)) 
[13:36:22.096]                               next
[13:36:22.096]                             invokeRestart(restart)
[13:36:22.096]                             muffled <- TRUE
[13:36:22.096]                             break
[13:36:22.096]                           }
[13:36:22.096]                         }
[13:36:22.096]                       }
[13:36:22.096]                       invisible(muffled)
[13:36:22.096]                     }
[13:36:22.096]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.096]                   }
[13:36:22.096]                 }
[13:36:22.096]                 else {
[13:36:22.096]                   if (TRUE) {
[13:36:22.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.096]                     {
[13:36:22.096]                       inherits <- base::inherits
[13:36:22.096]                       invokeRestart <- base::invokeRestart
[13:36:22.096]                       is.null <- base::is.null
[13:36:22.096]                       muffled <- FALSE
[13:36:22.096]                       if (inherits(cond, "message")) {
[13:36:22.096]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.096]                         if (muffled) 
[13:36:22.096]                           invokeRestart("muffleMessage")
[13:36:22.096]                       }
[13:36:22.096]                       else if (inherits(cond, "warning")) {
[13:36:22.096]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.096]                         if (muffled) 
[13:36:22.096]                           invokeRestart("muffleWarning")
[13:36:22.096]                       }
[13:36:22.096]                       else if (inherits(cond, "condition")) {
[13:36:22.096]                         if (!is.null(pattern)) {
[13:36:22.096]                           computeRestarts <- base::computeRestarts
[13:36:22.096]                           grepl <- base::grepl
[13:36:22.096]                           restarts <- computeRestarts(cond)
[13:36:22.096]                           for (restart in restarts) {
[13:36:22.096]                             name <- restart$name
[13:36:22.096]                             if (is.null(name)) 
[13:36:22.096]                               next
[13:36:22.096]                             if (!grepl(pattern, name)) 
[13:36:22.096]                               next
[13:36:22.096]                             invokeRestart(restart)
[13:36:22.096]                             muffled <- TRUE
[13:36:22.096]                             break
[13:36:22.096]                           }
[13:36:22.096]                         }
[13:36:22.096]                       }
[13:36:22.096]                       invisible(muffled)
[13:36:22.096]                     }
[13:36:22.096]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.096]                   }
[13:36:22.096]                 }
[13:36:22.096]             }
[13:36:22.096]         }))
[13:36:22.096]     }, error = function(ex) {
[13:36:22.096]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.096]                 ...future.rng), started = ...future.startTime, 
[13:36:22.096]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.096]             version = "1.8"), class = "FutureResult")
[13:36:22.096]     }, finally = {
[13:36:22.096]         if (!identical(...future.workdir, getwd())) 
[13:36:22.096]             setwd(...future.workdir)
[13:36:22.096]         {
[13:36:22.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.096]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.096]             }
[13:36:22.096]             base::options(...future.oldOptions)
[13:36:22.096]             if (.Platform$OS.type == "windows") {
[13:36:22.096]                 old_names <- names(...future.oldEnvVars)
[13:36:22.096]                 envs <- base::Sys.getenv()
[13:36:22.096]                 names <- names(envs)
[13:36:22.096]                 common <- intersect(names, old_names)
[13:36:22.096]                 added <- setdiff(names, old_names)
[13:36:22.096]                 removed <- setdiff(old_names, names)
[13:36:22.096]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.096]                   envs[common]]
[13:36:22.096]                 NAMES <- toupper(changed)
[13:36:22.096]                 args <- list()
[13:36:22.096]                 for (kk in seq_along(NAMES)) {
[13:36:22.096]                   name <- changed[[kk]]
[13:36:22.096]                   NAME <- NAMES[[kk]]
[13:36:22.096]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.096]                     next
[13:36:22.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.096]                 }
[13:36:22.096]                 NAMES <- toupper(added)
[13:36:22.096]                 for (kk in seq_along(NAMES)) {
[13:36:22.096]                   name <- added[[kk]]
[13:36:22.096]                   NAME <- NAMES[[kk]]
[13:36:22.096]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.096]                     next
[13:36:22.096]                   args[[name]] <- ""
[13:36:22.096]                 }
[13:36:22.096]                 NAMES <- toupper(removed)
[13:36:22.096]                 for (kk in seq_along(NAMES)) {
[13:36:22.096]                   name <- removed[[kk]]
[13:36:22.096]                   NAME <- NAMES[[kk]]
[13:36:22.096]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.096]                     next
[13:36:22.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.096]                 }
[13:36:22.096]                 if (length(args) > 0) 
[13:36:22.096]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.096]             }
[13:36:22.096]             else {
[13:36:22.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.096]             }
[13:36:22.096]             {
[13:36:22.096]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.096]                   0L) {
[13:36:22.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.096]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.096]                   base::options(opts)
[13:36:22.096]                 }
[13:36:22.096]                 {
[13:36:22.096]                   {
[13:36:22.096]                     NULL
[13:36:22.096]                     RNGkind("Mersenne-Twister")
[13:36:22.096]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:36:22.096]                       inherits = FALSE)
[13:36:22.096]                   }
[13:36:22.096]                   options(future.plan = NULL)
[13:36:22.096]                   if (is.na(NA_character_)) 
[13:36:22.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.096]                     .init = FALSE)
[13:36:22.096]                 }
[13:36:22.096]             }
[13:36:22.096]         }
[13:36:22.096]     })
[13:36:22.096]     if (TRUE) {
[13:36:22.096]         base::sink(type = "output", split = FALSE)
[13:36:22.096]         if (TRUE) {
[13:36:22.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.096]         }
[13:36:22.096]         else {
[13:36:22.096]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.096]         }
[13:36:22.096]         base::close(...future.stdout)
[13:36:22.096]         ...future.stdout <- NULL
[13:36:22.096]     }
[13:36:22.096]     ...future.result$conditions <- ...future.conditions
[13:36:22.096]     ...future.result$finished <- base::Sys.time()
[13:36:22.096]     ...future.result
[13:36:22.096] }
[13:36:22.098] plan(): Setting new future strategy stack:
[13:36:22.098] List of future strategies:
[13:36:22.098] 1. sequential:
[13:36:22.098]    - args: function (..., envir = parent.frame())
[13:36:22.098]    - tweaked: FALSE
[13:36:22.098]    - call: NULL
[13:36:22.099] plan(): nbrOfWorkers() = 1
[13:36:22.099] plan(): Setting new future strategy stack:
[13:36:22.099] List of future strategies:
[13:36:22.099] 1. sequential:
[13:36:22.099]    - args: function (..., envir = parent.frame())
[13:36:22.099]    - tweaked: FALSE
[13:36:22.099]    - call: plan(strategy)
[13:36:22.100] plan(): nbrOfWorkers() = 1
[13:36:22.100] SequentialFuture started (and completed)
[13:36:22.100] - Launch lazy future ... done
[13:36:22.100] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[13:36:22.101] plan(): Setting new future strategy stack:
[13:36:22.101] List of future strategies:
[13:36:22.101] 1. multicore:
[13:36:22.101]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.101]    - tweaked: FALSE
[13:36:22.101]    - call: plan(strategy)
[13:36:22.105] plan(): nbrOfWorkers() = 2
[13:36:22.108] getGlobalsAndPackages() ...
[13:36:22.108] 
[13:36:22.109] - globals: [0] <none>
[13:36:22.109] getGlobalsAndPackages() ... DONE
[13:36:22.110] Packages needed by the future expression (n = 0): <none>
[13:36:22.110] Packages needed by future strategies (n = 0): <none>
[13:36:22.111] {
[13:36:22.111]     {
[13:36:22.111]         {
[13:36:22.111]             ...future.startTime <- base::Sys.time()
[13:36:22.111]             {
[13:36:22.111]                 {
[13:36:22.111]                   {
[13:36:22.111]                     {
[13:36:22.111]                       base::local({
[13:36:22.111]                         has_future <- base::requireNamespace("future", 
[13:36:22.111]                           quietly = TRUE)
[13:36:22.111]                         if (has_future) {
[13:36:22.111]                           ns <- base::getNamespace("future")
[13:36:22.111]                           version <- ns[[".package"]][["version"]]
[13:36:22.111]                           if (is.null(version)) 
[13:36:22.111]                             version <- utils::packageVersion("future")
[13:36:22.111]                         }
[13:36:22.111]                         else {
[13:36:22.111]                           version <- NULL
[13:36:22.111]                         }
[13:36:22.111]                         if (!has_future || version < "1.8.0") {
[13:36:22.111]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.111]                             "", base::R.version$version.string), 
[13:36:22.111]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.111]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.111]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.111]                               "release", "version")], collapse = " "), 
[13:36:22.111]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.111]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.111]                             info)
[13:36:22.111]                           info <- base::paste(info, collapse = "; ")
[13:36:22.111]                           if (!has_future) {
[13:36:22.111]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.111]                               info)
[13:36:22.111]                           }
[13:36:22.111]                           else {
[13:36:22.111]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.111]                               info, version)
[13:36:22.111]                           }
[13:36:22.111]                           base::stop(msg)
[13:36:22.111]                         }
[13:36:22.111]                       })
[13:36:22.111]                     }
[13:36:22.111]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.111]                     base::options(mc.cores = 1L)
[13:36:22.111]                   }
[13:36:22.111]                   ...future.strategy.old <- future::plan("list")
[13:36:22.111]                   options(future.plan = NULL)
[13:36:22.111]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.111]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.111]                 }
[13:36:22.111]                 ...future.workdir <- getwd()
[13:36:22.111]             }
[13:36:22.111]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.111]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.111]         }
[13:36:22.111]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.111]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.111]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.111]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.111]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.111]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.111]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.111]             base::names(...future.oldOptions))
[13:36:22.111]     }
[13:36:22.111]     if (FALSE) {
[13:36:22.111]     }
[13:36:22.111]     else {
[13:36:22.111]         if (TRUE) {
[13:36:22.111]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.111]                 open = "w")
[13:36:22.111]         }
[13:36:22.111]         else {
[13:36:22.111]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.111]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.111]         }
[13:36:22.111]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.111]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.111]             base::sink(type = "output", split = FALSE)
[13:36:22.111]             base::close(...future.stdout)
[13:36:22.111]         }, add = TRUE)
[13:36:22.111]     }
[13:36:22.111]     ...future.frame <- base::sys.nframe()
[13:36:22.111]     ...future.conditions <- base::list()
[13:36:22.111]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.111]     if (FALSE) {
[13:36:22.111]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.111]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.111]     }
[13:36:22.111]     ...future.result <- base::tryCatch({
[13:36:22.111]         base::withCallingHandlers({
[13:36:22.111]             ...future.value <- base::withVisible(base::local({
[13:36:22.111]                 withCallingHandlers({
[13:36:22.111]                   42
[13:36:22.111]                 }, immediateCondition = function(cond) {
[13:36:22.111]                   save_rds <- function (object, pathname, ...) 
[13:36:22.111]                   {
[13:36:22.111]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.111]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.111]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.111]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.111]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.111]                         fi_tmp[["mtime"]])
[13:36:22.111]                     }
[13:36:22.111]                     tryCatch({
[13:36:22.111]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.111]                     }, error = function(ex) {
[13:36:22.111]                       msg <- conditionMessage(ex)
[13:36:22.111]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.111]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.111]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.111]                         fi_tmp[["mtime"]], msg)
[13:36:22.111]                       ex$message <- msg
[13:36:22.111]                       stop(ex)
[13:36:22.111]                     })
[13:36:22.111]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.111]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.111]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.111]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.111]                       fi <- file.info(pathname)
[13:36:22.111]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.111]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.111]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.111]                         fi[["size"]], fi[["mtime"]])
[13:36:22.111]                       stop(msg)
[13:36:22.111]                     }
[13:36:22.111]                     invisible(pathname)
[13:36:22.111]                   }
[13:36:22.111]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.111]                     rootPath = tempdir()) 
[13:36:22.111]                   {
[13:36:22.111]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.111]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.111]                       tmpdir = path, fileext = ".rds")
[13:36:22.111]                     save_rds(obj, file)
[13:36:22.111]                   }
[13:36:22.111]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.111]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.111]                   {
[13:36:22.111]                     inherits <- base::inherits
[13:36:22.111]                     invokeRestart <- base::invokeRestart
[13:36:22.111]                     is.null <- base::is.null
[13:36:22.111]                     muffled <- FALSE
[13:36:22.111]                     if (inherits(cond, "message")) {
[13:36:22.111]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.111]                       if (muffled) 
[13:36:22.111]                         invokeRestart("muffleMessage")
[13:36:22.111]                     }
[13:36:22.111]                     else if (inherits(cond, "warning")) {
[13:36:22.111]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.111]                       if (muffled) 
[13:36:22.111]                         invokeRestart("muffleWarning")
[13:36:22.111]                     }
[13:36:22.111]                     else if (inherits(cond, "condition")) {
[13:36:22.111]                       if (!is.null(pattern)) {
[13:36:22.111]                         computeRestarts <- base::computeRestarts
[13:36:22.111]                         grepl <- base::grepl
[13:36:22.111]                         restarts <- computeRestarts(cond)
[13:36:22.111]                         for (restart in restarts) {
[13:36:22.111]                           name <- restart$name
[13:36:22.111]                           if (is.null(name)) 
[13:36:22.111]                             next
[13:36:22.111]                           if (!grepl(pattern, name)) 
[13:36:22.111]                             next
[13:36:22.111]                           invokeRestart(restart)
[13:36:22.111]                           muffled <- TRUE
[13:36:22.111]                           break
[13:36:22.111]                         }
[13:36:22.111]                       }
[13:36:22.111]                     }
[13:36:22.111]                     invisible(muffled)
[13:36:22.111]                   }
[13:36:22.111]                   muffleCondition(cond)
[13:36:22.111]                 })
[13:36:22.111]             }))
[13:36:22.111]             future::FutureResult(value = ...future.value$value, 
[13:36:22.111]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.111]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.111]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.111]                     ...future.globalenv.names))
[13:36:22.111]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.111]         }, condition = base::local({
[13:36:22.111]             c <- base::c
[13:36:22.111]             inherits <- base::inherits
[13:36:22.111]             invokeRestart <- base::invokeRestart
[13:36:22.111]             length <- base::length
[13:36:22.111]             list <- base::list
[13:36:22.111]             seq.int <- base::seq.int
[13:36:22.111]             signalCondition <- base::signalCondition
[13:36:22.111]             sys.calls <- base::sys.calls
[13:36:22.111]             `[[` <- base::`[[`
[13:36:22.111]             `+` <- base::`+`
[13:36:22.111]             `<<-` <- base::`<<-`
[13:36:22.111]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.111]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.111]                   3L)]
[13:36:22.111]             }
[13:36:22.111]             function(cond) {
[13:36:22.111]                 is_error <- inherits(cond, "error")
[13:36:22.111]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.111]                   NULL)
[13:36:22.111]                 if (is_error) {
[13:36:22.111]                   sessionInformation <- function() {
[13:36:22.111]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.111]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.111]                       search = base::search(), system = base::Sys.info())
[13:36:22.111]                   }
[13:36:22.111]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.111]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.111]                     cond$call), session = sessionInformation(), 
[13:36:22.111]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.111]                   signalCondition(cond)
[13:36:22.111]                 }
[13:36:22.111]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.111]                 "immediateCondition"))) {
[13:36:22.111]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.111]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.111]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.111]                   if (TRUE && !signal) {
[13:36:22.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.111]                     {
[13:36:22.111]                       inherits <- base::inherits
[13:36:22.111]                       invokeRestart <- base::invokeRestart
[13:36:22.111]                       is.null <- base::is.null
[13:36:22.111]                       muffled <- FALSE
[13:36:22.111]                       if (inherits(cond, "message")) {
[13:36:22.111]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.111]                         if (muffled) 
[13:36:22.111]                           invokeRestart("muffleMessage")
[13:36:22.111]                       }
[13:36:22.111]                       else if (inherits(cond, "warning")) {
[13:36:22.111]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.111]                         if (muffled) 
[13:36:22.111]                           invokeRestart("muffleWarning")
[13:36:22.111]                       }
[13:36:22.111]                       else if (inherits(cond, "condition")) {
[13:36:22.111]                         if (!is.null(pattern)) {
[13:36:22.111]                           computeRestarts <- base::computeRestarts
[13:36:22.111]                           grepl <- base::grepl
[13:36:22.111]                           restarts <- computeRestarts(cond)
[13:36:22.111]                           for (restart in restarts) {
[13:36:22.111]                             name <- restart$name
[13:36:22.111]                             if (is.null(name)) 
[13:36:22.111]                               next
[13:36:22.111]                             if (!grepl(pattern, name)) 
[13:36:22.111]                               next
[13:36:22.111]                             invokeRestart(restart)
[13:36:22.111]                             muffled <- TRUE
[13:36:22.111]                             break
[13:36:22.111]                           }
[13:36:22.111]                         }
[13:36:22.111]                       }
[13:36:22.111]                       invisible(muffled)
[13:36:22.111]                     }
[13:36:22.111]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.111]                   }
[13:36:22.111]                 }
[13:36:22.111]                 else {
[13:36:22.111]                   if (TRUE) {
[13:36:22.111]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.111]                     {
[13:36:22.111]                       inherits <- base::inherits
[13:36:22.111]                       invokeRestart <- base::invokeRestart
[13:36:22.111]                       is.null <- base::is.null
[13:36:22.111]                       muffled <- FALSE
[13:36:22.111]                       if (inherits(cond, "message")) {
[13:36:22.111]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.111]                         if (muffled) 
[13:36:22.111]                           invokeRestart("muffleMessage")
[13:36:22.111]                       }
[13:36:22.111]                       else if (inherits(cond, "warning")) {
[13:36:22.111]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.111]                         if (muffled) 
[13:36:22.111]                           invokeRestart("muffleWarning")
[13:36:22.111]                       }
[13:36:22.111]                       else if (inherits(cond, "condition")) {
[13:36:22.111]                         if (!is.null(pattern)) {
[13:36:22.111]                           computeRestarts <- base::computeRestarts
[13:36:22.111]                           grepl <- base::grepl
[13:36:22.111]                           restarts <- computeRestarts(cond)
[13:36:22.111]                           for (restart in restarts) {
[13:36:22.111]                             name <- restart$name
[13:36:22.111]                             if (is.null(name)) 
[13:36:22.111]                               next
[13:36:22.111]                             if (!grepl(pattern, name)) 
[13:36:22.111]                               next
[13:36:22.111]                             invokeRestart(restart)
[13:36:22.111]                             muffled <- TRUE
[13:36:22.111]                             break
[13:36:22.111]                           }
[13:36:22.111]                         }
[13:36:22.111]                       }
[13:36:22.111]                       invisible(muffled)
[13:36:22.111]                     }
[13:36:22.111]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.111]                   }
[13:36:22.111]                 }
[13:36:22.111]             }
[13:36:22.111]         }))
[13:36:22.111]     }, error = function(ex) {
[13:36:22.111]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.111]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.111]                 ...future.rng), started = ...future.startTime, 
[13:36:22.111]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.111]             version = "1.8"), class = "FutureResult")
[13:36:22.111]     }, finally = {
[13:36:22.111]         if (!identical(...future.workdir, getwd())) 
[13:36:22.111]             setwd(...future.workdir)
[13:36:22.111]         {
[13:36:22.111]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.111]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.111]             }
[13:36:22.111]             base::options(...future.oldOptions)
[13:36:22.111]             if (.Platform$OS.type == "windows") {
[13:36:22.111]                 old_names <- names(...future.oldEnvVars)
[13:36:22.111]                 envs <- base::Sys.getenv()
[13:36:22.111]                 names <- names(envs)
[13:36:22.111]                 common <- intersect(names, old_names)
[13:36:22.111]                 added <- setdiff(names, old_names)
[13:36:22.111]                 removed <- setdiff(old_names, names)
[13:36:22.111]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.111]                   envs[common]]
[13:36:22.111]                 NAMES <- toupper(changed)
[13:36:22.111]                 args <- list()
[13:36:22.111]                 for (kk in seq_along(NAMES)) {
[13:36:22.111]                   name <- changed[[kk]]
[13:36:22.111]                   NAME <- NAMES[[kk]]
[13:36:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.111]                     next
[13:36:22.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.111]                 }
[13:36:22.111]                 NAMES <- toupper(added)
[13:36:22.111]                 for (kk in seq_along(NAMES)) {
[13:36:22.111]                   name <- added[[kk]]
[13:36:22.111]                   NAME <- NAMES[[kk]]
[13:36:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.111]                     next
[13:36:22.111]                   args[[name]] <- ""
[13:36:22.111]                 }
[13:36:22.111]                 NAMES <- toupper(removed)
[13:36:22.111]                 for (kk in seq_along(NAMES)) {
[13:36:22.111]                   name <- removed[[kk]]
[13:36:22.111]                   NAME <- NAMES[[kk]]
[13:36:22.111]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.111]                     next
[13:36:22.111]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.111]                 }
[13:36:22.111]                 if (length(args) > 0) 
[13:36:22.111]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.111]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.111]             }
[13:36:22.111]             else {
[13:36:22.111]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.111]             }
[13:36:22.111]             {
[13:36:22.111]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.111]                   0L) {
[13:36:22.111]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.111]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.111]                   base::options(opts)
[13:36:22.111]                 }
[13:36:22.111]                 {
[13:36:22.111]                   {
[13:36:22.111]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.111]                     NULL
[13:36:22.111]                   }
[13:36:22.111]                   options(future.plan = NULL)
[13:36:22.111]                   if (is.na(NA_character_)) 
[13:36:22.111]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.111]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.111]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.111]                     .init = FALSE)
[13:36:22.111]                 }
[13:36:22.111]             }
[13:36:22.111]         }
[13:36:22.111]     })
[13:36:22.111]     if (TRUE) {
[13:36:22.111]         base::sink(type = "output", split = FALSE)
[13:36:22.111]         if (TRUE) {
[13:36:22.111]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.111]         }
[13:36:22.111]         else {
[13:36:22.111]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.111]         }
[13:36:22.111]         base::close(...future.stdout)
[13:36:22.111]         ...future.stdout <- NULL
[13:36:22.111]     }
[13:36:22.111]     ...future.result$conditions <- ...future.conditions
[13:36:22.111]     ...future.result$finished <- base::Sys.time()
[13:36:22.111]     ...future.result
[13:36:22.111] }
[13:36:22.113] requestCore(): workers = 2
[13:36:22.116] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:36:22.117] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.117] List of future strategies:
[13:36:22.117] 1. sequential:
[13:36:22.117]    - args: function (..., envir = parent.frame())
[13:36:22.117]    - tweaked: FALSE
[13:36:22.117]    - call: NULL
[13:36:22.118] plan(): nbrOfWorkers() = 1
[13:36:22.120] plan(): Setting new future strategy stack:
[13:36:22.120] List of future strategies:
[13:36:22.120] 1. multicore:
[13:36:22.120]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.120]    - tweaked: FALSE
[13:36:22.120]    - call: plan(strategy)
[13:36:22.124] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.126] result() for MulticoreFuture ...
[13:36:22.131] result() for MulticoreFuture ...
[13:36:22.131] result() for MulticoreFuture ... done
[13:36:22.131] result() for MulticoreFuture ... done
[13:36:22.131] result() for MulticoreFuture ...
[13:36:22.131] result() for MulticoreFuture ... done
[13:36:22.132] getGlobalsAndPackages() ...
[13:36:22.132] Searching for globals...
[13:36:22.132] 
[13:36:22.132] Searching for globals ... DONE
[13:36:22.132] - globals: [0] <none>
[13:36:22.133] getGlobalsAndPackages() ... DONE
[13:36:22.133] run() for ‘Future’ ...
[13:36:22.133] - state: ‘created’
[13:36:22.133] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.137] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.137] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:22.137]   - Field: ‘label’
[13:36:22.137]   - Field: ‘local’
[13:36:22.138]   - Field: ‘owner’
[13:36:22.138]   - Field: ‘envir’
[13:36:22.138]   - Field: ‘workers’
[13:36:22.138]   - Field: ‘packages’
[13:36:22.138]   - Field: ‘gc’
[13:36:22.138]   - Field: ‘job’
[13:36:22.138]   - Field: ‘conditions’
[13:36:22.138]   - Field: ‘expr’
[13:36:22.138]   - Field: ‘uuid’
[13:36:22.139]   - Field: ‘seed’
[13:36:22.139]   - Field: ‘version’
[13:36:22.139]   - Field: ‘result’
[13:36:22.139]   - Field: ‘asynchronous’
[13:36:22.139]   - Field: ‘calls’
[13:36:22.142]   - Field: ‘globals’
[13:36:22.142]   - Field: ‘stdout’
[13:36:22.142]   - Field: ‘earlySignal’
[13:36:22.142]   - Field: ‘lazy’
[13:36:22.142]   - Field: ‘state’
[13:36:22.142] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:22.142] - Launch lazy future ...
[13:36:22.143] Packages needed by the future expression (n = 0): <none>
[13:36:22.143] Packages needed by future strategies (n = 0): <none>
[13:36:22.144] {
[13:36:22.144]     {
[13:36:22.144]         {
[13:36:22.144]             ...future.startTime <- base::Sys.time()
[13:36:22.144]             {
[13:36:22.144]                 {
[13:36:22.144]                   {
[13:36:22.144]                     {
[13:36:22.144]                       base::local({
[13:36:22.144]                         has_future <- base::requireNamespace("future", 
[13:36:22.144]                           quietly = TRUE)
[13:36:22.144]                         if (has_future) {
[13:36:22.144]                           ns <- base::getNamespace("future")
[13:36:22.144]                           version <- ns[[".package"]][["version"]]
[13:36:22.144]                           if (is.null(version)) 
[13:36:22.144]                             version <- utils::packageVersion("future")
[13:36:22.144]                         }
[13:36:22.144]                         else {
[13:36:22.144]                           version <- NULL
[13:36:22.144]                         }
[13:36:22.144]                         if (!has_future || version < "1.8.0") {
[13:36:22.144]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.144]                             "", base::R.version$version.string), 
[13:36:22.144]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.144]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.144]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.144]                               "release", "version")], collapse = " "), 
[13:36:22.144]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.144]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.144]                             info)
[13:36:22.144]                           info <- base::paste(info, collapse = "; ")
[13:36:22.144]                           if (!has_future) {
[13:36:22.144]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.144]                               info)
[13:36:22.144]                           }
[13:36:22.144]                           else {
[13:36:22.144]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.144]                               info, version)
[13:36:22.144]                           }
[13:36:22.144]                           base::stop(msg)
[13:36:22.144]                         }
[13:36:22.144]                       })
[13:36:22.144]                     }
[13:36:22.144]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.144]                     base::options(mc.cores = 1L)
[13:36:22.144]                   }
[13:36:22.144]                   ...future.strategy.old <- future::plan("list")
[13:36:22.144]                   options(future.plan = NULL)
[13:36:22.144]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.144]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.144]                 }
[13:36:22.144]                 ...future.workdir <- getwd()
[13:36:22.144]             }
[13:36:22.144]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.144]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.144]         }
[13:36:22.144]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.144]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.144]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.144]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.144]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.144]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.144]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.144]             base::names(...future.oldOptions))
[13:36:22.144]     }
[13:36:22.144]     if (FALSE) {
[13:36:22.144]     }
[13:36:22.144]     else {
[13:36:22.144]         if (TRUE) {
[13:36:22.144]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.144]                 open = "w")
[13:36:22.144]         }
[13:36:22.144]         else {
[13:36:22.144]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.144]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.144]         }
[13:36:22.144]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.144]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.144]             base::sink(type = "output", split = FALSE)
[13:36:22.144]             base::close(...future.stdout)
[13:36:22.144]         }, add = TRUE)
[13:36:22.144]     }
[13:36:22.144]     ...future.frame <- base::sys.nframe()
[13:36:22.144]     ...future.conditions <- base::list()
[13:36:22.144]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.144]     if (FALSE) {
[13:36:22.144]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.144]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.144]     }
[13:36:22.144]     ...future.result <- base::tryCatch({
[13:36:22.144]         base::withCallingHandlers({
[13:36:22.144]             ...future.value <- base::withVisible(base::local({
[13:36:22.144]                 withCallingHandlers({
[13:36:22.144]                   42
[13:36:22.144]                 }, immediateCondition = function(cond) {
[13:36:22.144]                   save_rds <- function (object, pathname, ...) 
[13:36:22.144]                   {
[13:36:22.144]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.144]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.144]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.144]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.144]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.144]                         fi_tmp[["mtime"]])
[13:36:22.144]                     }
[13:36:22.144]                     tryCatch({
[13:36:22.144]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.144]                     }, error = function(ex) {
[13:36:22.144]                       msg <- conditionMessage(ex)
[13:36:22.144]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.144]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.144]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.144]                         fi_tmp[["mtime"]], msg)
[13:36:22.144]                       ex$message <- msg
[13:36:22.144]                       stop(ex)
[13:36:22.144]                     })
[13:36:22.144]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.144]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.144]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.144]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.144]                       fi <- file.info(pathname)
[13:36:22.144]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.144]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.144]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.144]                         fi[["size"]], fi[["mtime"]])
[13:36:22.144]                       stop(msg)
[13:36:22.144]                     }
[13:36:22.144]                     invisible(pathname)
[13:36:22.144]                   }
[13:36:22.144]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.144]                     rootPath = tempdir()) 
[13:36:22.144]                   {
[13:36:22.144]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.144]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.144]                       tmpdir = path, fileext = ".rds")
[13:36:22.144]                     save_rds(obj, file)
[13:36:22.144]                   }
[13:36:22.144]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.144]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.144]                   {
[13:36:22.144]                     inherits <- base::inherits
[13:36:22.144]                     invokeRestart <- base::invokeRestart
[13:36:22.144]                     is.null <- base::is.null
[13:36:22.144]                     muffled <- FALSE
[13:36:22.144]                     if (inherits(cond, "message")) {
[13:36:22.144]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.144]                       if (muffled) 
[13:36:22.144]                         invokeRestart("muffleMessage")
[13:36:22.144]                     }
[13:36:22.144]                     else if (inherits(cond, "warning")) {
[13:36:22.144]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.144]                       if (muffled) 
[13:36:22.144]                         invokeRestart("muffleWarning")
[13:36:22.144]                     }
[13:36:22.144]                     else if (inherits(cond, "condition")) {
[13:36:22.144]                       if (!is.null(pattern)) {
[13:36:22.144]                         computeRestarts <- base::computeRestarts
[13:36:22.144]                         grepl <- base::grepl
[13:36:22.144]                         restarts <- computeRestarts(cond)
[13:36:22.144]                         for (restart in restarts) {
[13:36:22.144]                           name <- restart$name
[13:36:22.144]                           if (is.null(name)) 
[13:36:22.144]                             next
[13:36:22.144]                           if (!grepl(pattern, name)) 
[13:36:22.144]                             next
[13:36:22.144]                           invokeRestart(restart)
[13:36:22.144]                           muffled <- TRUE
[13:36:22.144]                           break
[13:36:22.144]                         }
[13:36:22.144]                       }
[13:36:22.144]                     }
[13:36:22.144]                     invisible(muffled)
[13:36:22.144]                   }
[13:36:22.144]                   muffleCondition(cond)
[13:36:22.144]                 })
[13:36:22.144]             }))
[13:36:22.144]             future::FutureResult(value = ...future.value$value, 
[13:36:22.144]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.144]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.144]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.144]                     ...future.globalenv.names))
[13:36:22.144]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.144]         }, condition = base::local({
[13:36:22.144]             c <- base::c
[13:36:22.144]             inherits <- base::inherits
[13:36:22.144]             invokeRestart <- base::invokeRestart
[13:36:22.144]             length <- base::length
[13:36:22.144]             list <- base::list
[13:36:22.144]             seq.int <- base::seq.int
[13:36:22.144]             signalCondition <- base::signalCondition
[13:36:22.144]             sys.calls <- base::sys.calls
[13:36:22.144]             `[[` <- base::`[[`
[13:36:22.144]             `+` <- base::`+`
[13:36:22.144]             `<<-` <- base::`<<-`
[13:36:22.144]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.144]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.144]                   3L)]
[13:36:22.144]             }
[13:36:22.144]             function(cond) {
[13:36:22.144]                 is_error <- inherits(cond, "error")
[13:36:22.144]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.144]                   NULL)
[13:36:22.144]                 if (is_error) {
[13:36:22.144]                   sessionInformation <- function() {
[13:36:22.144]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.144]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.144]                       search = base::search(), system = base::Sys.info())
[13:36:22.144]                   }
[13:36:22.144]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.144]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.144]                     cond$call), session = sessionInformation(), 
[13:36:22.144]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.144]                   signalCondition(cond)
[13:36:22.144]                 }
[13:36:22.144]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.144]                 "immediateCondition"))) {
[13:36:22.144]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.144]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.144]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.144]                   if (TRUE && !signal) {
[13:36:22.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.144]                     {
[13:36:22.144]                       inherits <- base::inherits
[13:36:22.144]                       invokeRestart <- base::invokeRestart
[13:36:22.144]                       is.null <- base::is.null
[13:36:22.144]                       muffled <- FALSE
[13:36:22.144]                       if (inherits(cond, "message")) {
[13:36:22.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.144]                         if (muffled) 
[13:36:22.144]                           invokeRestart("muffleMessage")
[13:36:22.144]                       }
[13:36:22.144]                       else if (inherits(cond, "warning")) {
[13:36:22.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.144]                         if (muffled) 
[13:36:22.144]                           invokeRestart("muffleWarning")
[13:36:22.144]                       }
[13:36:22.144]                       else if (inherits(cond, "condition")) {
[13:36:22.144]                         if (!is.null(pattern)) {
[13:36:22.144]                           computeRestarts <- base::computeRestarts
[13:36:22.144]                           grepl <- base::grepl
[13:36:22.144]                           restarts <- computeRestarts(cond)
[13:36:22.144]                           for (restart in restarts) {
[13:36:22.144]                             name <- restart$name
[13:36:22.144]                             if (is.null(name)) 
[13:36:22.144]                               next
[13:36:22.144]                             if (!grepl(pattern, name)) 
[13:36:22.144]                               next
[13:36:22.144]                             invokeRestart(restart)
[13:36:22.144]                             muffled <- TRUE
[13:36:22.144]                             break
[13:36:22.144]                           }
[13:36:22.144]                         }
[13:36:22.144]                       }
[13:36:22.144]                       invisible(muffled)
[13:36:22.144]                     }
[13:36:22.144]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.144]                   }
[13:36:22.144]                 }
[13:36:22.144]                 else {
[13:36:22.144]                   if (TRUE) {
[13:36:22.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.144]                     {
[13:36:22.144]                       inherits <- base::inherits
[13:36:22.144]                       invokeRestart <- base::invokeRestart
[13:36:22.144]                       is.null <- base::is.null
[13:36:22.144]                       muffled <- FALSE
[13:36:22.144]                       if (inherits(cond, "message")) {
[13:36:22.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.144]                         if (muffled) 
[13:36:22.144]                           invokeRestart("muffleMessage")
[13:36:22.144]                       }
[13:36:22.144]                       else if (inherits(cond, "warning")) {
[13:36:22.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.144]                         if (muffled) 
[13:36:22.144]                           invokeRestart("muffleWarning")
[13:36:22.144]                       }
[13:36:22.144]                       else if (inherits(cond, "condition")) {
[13:36:22.144]                         if (!is.null(pattern)) {
[13:36:22.144]                           computeRestarts <- base::computeRestarts
[13:36:22.144]                           grepl <- base::grepl
[13:36:22.144]                           restarts <- computeRestarts(cond)
[13:36:22.144]                           for (restart in restarts) {
[13:36:22.144]                             name <- restart$name
[13:36:22.144]                             if (is.null(name)) 
[13:36:22.144]                               next
[13:36:22.144]                             if (!grepl(pattern, name)) 
[13:36:22.144]                               next
[13:36:22.144]                             invokeRestart(restart)
[13:36:22.144]                             muffled <- TRUE
[13:36:22.144]                             break
[13:36:22.144]                           }
[13:36:22.144]                         }
[13:36:22.144]                       }
[13:36:22.144]                       invisible(muffled)
[13:36:22.144]                     }
[13:36:22.144]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.144]                   }
[13:36:22.144]                 }
[13:36:22.144]             }
[13:36:22.144]         }))
[13:36:22.144]     }, error = function(ex) {
[13:36:22.144]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.144]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.144]                 ...future.rng), started = ...future.startTime, 
[13:36:22.144]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.144]             version = "1.8"), class = "FutureResult")
[13:36:22.144]     }, finally = {
[13:36:22.144]         if (!identical(...future.workdir, getwd())) 
[13:36:22.144]             setwd(...future.workdir)
[13:36:22.144]         {
[13:36:22.144]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.144]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.144]             }
[13:36:22.144]             base::options(...future.oldOptions)
[13:36:22.144]             if (.Platform$OS.type == "windows") {
[13:36:22.144]                 old_names <- names(...future.oldEnvVars)
[13:36:22.144]                 envs <- base::Sys.getenv()
[13:36:22.144]                 names <- names(envs)
[13:36:22.144]                 common <- intersect(names, old_names)
[13:36:22.144]                 added <- setdiff(names, old_names)
[13:36:22.144]                 removed <- setdiff(old_names, names)
[13:36:22.144]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.144]                   envs[common]]
[13:36:22.144]                 NAMES <- toupper(changed)
[13:36:22.144]                 args <- list()
[13:36:22.144]                 for (kk in seq_along(NAMES)) {
[13:36:22.144]                   name <- changed[[kk]]
[13:36:22.144]                   NAME <- NAMES[[kk]]
[13:36:22.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.144]                     next
[13:36:22.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.144]                 }
[13:36:22.144]                 NAMES <- toupper(added)
[13:36:22.144]                 for (kk in seq_along(NAMES)) {
[13:36:22.144]                   name <- added[[kk]]
[13:36:22.144]                   NAME <- NAMES[[kk]]
[13:36:22.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.144]                     next
[13:36:22.144]                   args[[name]] <- ""
[13:36:22.144]                 }
[13:36:22.144]                 NAMES <- toupper(removed)
[13:36:22.144]                 for (kk in seq_along(NAMES)) {
[13:36:22.144]                   name <- removed[[kk]]
[13:36:22.144]                   NAME <- NAMES[[kk]]
[13:36:22.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.144]                     next
[13:36:22.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.144]                 }
[13:36:22.144]                 if (length(args) > 0) 
[13:36:22.144]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.144]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.144]             }
[13:36:22.144]             else {
[13:36:22.144]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.144]             }
[13:36:22.144]             {
[13:36:22.144]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.144]                   0L) {
[13:36:22.144]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.144]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.144]                   base::options(opts)
[13:36:22.144]                 }
[13:36:22.144]                 {
[13:36:22.144]                   {
[13:36:22.144]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.144]                     NULL
[13:36:22.144]                   }
[13:36:22.144]                   options(future.plan = NULL)
[13:36:22.144]                   if (is.na(NA_character_)) 
[13:36:22.144]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.144]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.144]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.144]                     .init = FALSE)
[13:36:22.144]                 }
[13:36:22.144]             }
[13:36:22.144]         }
[13:36:22.144]     })
[13:36:22.144]     if (TRUE) {
[13:36:22.144]         base::sink(type = "output", split = FALSE)
[13:36:22.144]         if (TRUE) {
[13:36:22.144]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.144]         }
[13:36:22.144]         else {
[13:36:22.144]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.144]         }
[13:36:22.144]         base::close(...future.stdout)
[13:36:22.144]         ...future.stdout <- NULL
[13:36:22.144]     }
[13:36:22.144]     ...future.result$conditions <- ...future.conditions
[13:36:22.144]     ...future.result$finished <- base::Sys.time()
[13:36:22.144]     ...future.result
[13:36:22.144] }
[13:36:22.146] requestCore(): workers = 2
[13:36:22.148] MulticoreFuture started
[13:36:22.149] - Launch lazy future ... done
[13:36:22.149] plan(): Setting new future strategy stack:
[13:36:22.149] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.149] List of future strategies:
[13:36:22.149] 1. sequential:
[13:36:22.149]    - args: function (..., envir = parent.frame())
[13:36:22.149]    - tweaked: FALSE
[13:36:22.149]    - call: NULL
[13:36:22.150] plan(): nbrOfWorkers() = 1
[13:36:22.152] plan(): Setting new future strategy stack:
[13:36:22.153] List of future strategies:
[13:36:22.153] 1. multicore:
[13:36:22.153]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.153]    - tweaked: FALSE
[13:36:22.153]    - call: plan(strategy)
[13:36:22.158] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.158] result() for MulticoreFuture ...
[13:36:22.159] result() for MulticoreFuture ...
[13:36:22.159] result() for MulticoreFuture ... done
[13:36:22.160] result() for MulticoreFuture ... done
[13:36:22.160] result() for MulticoreFuture ...
[13:36:22.160] result() for MulticoreFuture ... done
[13:36:22.160] getGlobalsAndPackages() ...
[13:36:22.161] Searching for globals...
[13:36:22.161] - globals found: [1] ‘{’
[13:36:22.162] Searching for globals ... DONE
[13:36:22.162] Resolving globals: FALSE
[13:36:22.162] 
[13:36:22.162] 
[13:36:22.162] getGlobalsAndPackages() ... DONE
[13:36:22.163] run() for ‘Future’ ...
[13:36:22.163] - state: ‘created’
[13:36:22.163] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.167] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.167] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:22.167]   - Field: ‘label’
[13:36:22.167]   - Field: ‘local’
[13:36:22.167]   - Field: ‘owner’
[13:36:22.167]   - Field: ‘envir’
[13:36:22.168]   - Field: ‘workers’
[13:36:22.168]   - Field: ‘packages’
[13:36:22.168]   - Field: ‘gc’
[13:36:22.168]   - Field: ‘job’
[13:36:22.168]   - Field: ‘conditions’
[13:36:22.168]   - Field: ‘expr’
[13:36:22.168]   - Field: ‘uuid’
[13:36:22.168]   - Field: ‘seed’
[13:36:22.169]   - Field: ‘version’
[13:36:22.169]   - Field: ‘result’
[13:36:22.169]   - Field: ‘asynchronous’
[13:36:22.169]   - Field: ‘calls’
[13:36:22.169]   - Field: ‘globals’
[13:36:22.169]   - Field: ‘stdout’
[13:36:22.169]   - Field: ‘earlySignal’
[13:36:22.169]   - Field: ‘lazy’
[13:36:22.169]   - Field: ‘state’
[13:36:22.169] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:22.170] - Launch lazy future ...
[13:36:22.170] Packages needed by the future expression (n = 0): <none>
[13:36:22.170] Packages needed by future strategies (n = 0): <none>
[13:36:22.171] {
[13:36:22.171]     {
[13:36:22.171]         {
[13:36:22.171]             ...future.startTime <- base::Sys.time()
[13:36:22.171]             {
[13:36:22.171]                 {
[13:36:22.171]                   {
[13:36:22.171]                     {
[13:36:22.171]                       base::local({
[13:36:22.171]                         has_future <- base::requireNamespace("future", 
[13:36:22.171]                           quietly = TRUE)
[13:36:22.171]                         if (has_future) {
[13:36:22.171]                           ns <- base::getNamespace("future")
[13:36:22.171]                           version <- ns[[".package"]][["version"]]
[13:36:22.171]                           if (is.null(version)) 
[13:36:22.171]                             version <- utils::packageVersion("future")
[13:36:22.171]                         }
[13:36:22.171]                         else {
[13:36:22.171]                           version <- NULL
[13:36:22.171]                         }
[13:36:22.171]                         if (!has_future || version < "1.8.0") {
[13:36:22.171]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.171]                             "", base::R.version$version.string), 
[13:36:22.171]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.171]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.171]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.171]                               "release", "version")], collapse = " "), 
[13:36:22.171]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.171]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.171]                             info)
[13:36:22.171]                           info <- base::paste(info, collapse = "; ")
[13:36:22.171]                           if (!has_future) {
[13:36:22.171]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.171]                               info)
[13:36:22.171]                           }
[13:36:22.171]                           else {
[13:36:22.171]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.171]                               info, version)
[13:36:22.171]                           }
[13:36:22.171]                           base::stop(msg)
[13:36:22.171]                         }
[13:36:22.171]                       })
[13:36:22.171]                     }
[13:36:22.171]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.171]                     base::options(mc.cores = 1L)
[13:36:22.171]                   }
[13:36:22.171]                   ...future.strategy.old <- future::plan("list")
[13:36:22.171]                   options(future.plan = NULL)
[13:36:22.171]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.171]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.171]                 }
[13:36:22.171]                 ...future.workdir <- getwd()
[13:36:22.171]             }
[13:36:22.171]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.171]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.171]         }
[13:36:22.171]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.171]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.171]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.171]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.171]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.171]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.171]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.171]             base::names(...future.oldOptions))
[13:36:22.171]     }
[13:36:22.171]     if (FALSE) {
[13:36:22.171]     }
[13:36:22.171]     else {
[13:36:22.171]         if (TRUE) {
[13:36:22.171]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.171]                 open = "w")
[13:36:22.171]         }
[13:36:22.171]         else {
[13:36:22.171]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.171]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.171]         }
[13:36:22.171]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.171]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.171]             base::sink(type = "output", split = FALSE)
[13:36:22.171]             base::close(...future.stdout)
[13:36:22.171]         }, add = TRUE)
[13:36:22.171]     }
[13:36:22.171]     ...future.frame <- base::sys.nframe()
[13:36:22.171]     ...future.conditions <- base::list()
[13:36:22.171]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.171]     if (FALSE) {
[13:36:22.171]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.171]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.171]     }
[13:36:22.171]     ...future.result <- base::tryCatch({
[13:36:22.171]         base::withCallingHandlers({
[13:36:22.171]             ...future.value <- base::withVisible(base::local({
[13:36:22.171]                 withCallingHandlers({
[13:36:22.171]                   {
[13:36:22.171]                     42
[13:36:22.171]                   }
[13:36:22.171]                 }, immediateCondition = function(cond) {
[13:36:22.171]                   save_rds <- function (object, pathname, ...) 
[13:36:22.171]                   {
[13:36:22.171]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.171]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.171]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.171]                         fi_tmp[["mtime"]])
[13:36:22.171]                     }
[13:36:22.171]                     tryCatch({
[13:36:22.171]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.171]                     }, error = function(ex) {
[13:36:22.171]                       msg <- conditionMessage(ex)
[13:36:22.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.171]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.171]                         fi_tmp[["mtime"]], msg)
[13:36:22.171]                       ex$message <- msg
[13:36:22.171]                       stop(ex)
[13:36:22.171]                     })
[13:36:22.171]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.171]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.171]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.171]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.171]                       fi <- file.info(pathname)
[13:36:22.171]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.171]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.171]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.171]                         fi[["size"]], fi[["mtime"]])
[13:36:22.171]                       stop(msg)
[13:36:22.171]                     }
[13:36:22.171]                     invisible(pathname)
[13:36:22.171]                   }
[13:36:22.171]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.171]                     rootPath = tempdir()) 
[13:36:22.171]                   {
[13:36:22.171]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.171]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.171]                       tmpdir = path, fileext = ".rds")
[13:36:22.171]                     save_rds(obj, file)
[13:36:22.171]                   }
[13:36:22.171]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.171]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.171]                   {
[13:36:22.171]                     inherits <- base::inherits
[13:36:22.171]                     invokeRestart <- base::invokeRestart
[13:36:22.171]                     is.null <- base::is.null
[13:36:22.171]                     muffled <- FALSE
[13:36:22.171]                     if (inherits(cond, "message")) {
[13:36:22.171]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.171]                       if (muffled) 
[13:36:22.171]                         invokeRestart("muffleMessage")
[13:36:22.171]                     }
[13:36:22.171]                     else if (inherits(cond, "warning")) {
[13:36:22.171]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.171]                       if (muffled) 
[13:36:22.171]                         invokeRestart("muffleWarning")
[13:36:22.171]                     }
[13:36:22.171]                     else if (inherits(cond, "condition")) {
[13:36:22.171]                       if (!is.null(pattern)) {
[13:36:22.171]                         computeRestarts <- base::computeRestarts
[13:36:22.171]                         grepl <- base::grepl
[13:36:22.171]                         restarts <- computeRestarts(cond)
[13:36:22.171]                         for (restart in restarts) {
[13:36:22.171]                           name <- restart$name
[13:36:22.171]                           if (is.null(name)) 
[13:36:22.171]                             next
[13:36:22.171]                           if (!grepl(pattern, name)) 
[13:36:22.171]                             next
[13:36:22.171]                           invokeRestart(restart)
[13:36:22.171]                           muffled <- TRUE
[13:36:22.171]                           break
[13:36:22.171]                         }
[13:36:22.171]                       }
[13:36:22.171]                     }
[13:36:22.171]                     invisible(muffled)
[13:36:22.171]                   }
[13:36:22.171]                   muffleCondition(cond)
[13:36:22.171]                 })
[13:36:22.171]             }))
[13:36:22.171]             future::FutureResult(value = ...future.value$value, 
[13:36:22.171]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.171]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.171]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.171]                     ...future.globalenv.names))
[13:36:22.171]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.171]         }, condition = base::local({
[13:36:22.171]             c <- base::c
[13:36:22.171]             inherits <- base::inherits
[13:36:22.171]             invokeRestart <- base::invokeRestart
[13:36:22.171]             length <- base::length
[13:36:22.171]             list <- base::list
[13:36:22.171]             seq.int <- base::seq.int
[13:36:22.171]             signalCondition <- base::signalCondition
[13:36:22.171]             sys.calls <- base::sys.calls
[13:36:22.171]             `[[` <- base::`[[`
[13:36:22.171]             `+` <- base::`+`
[13:36:22.171]             `<<-` <- base::`<<-`
[13:36:22.171]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.171]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.171]                   3L)]
[13:36:22.171]             }
[13:36:22.171]             function(cond) {
[13:36:22.171]                 is_error <- inherits(cond, "error")
[13:36:22.171]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.171]                   NULL)
[13:36:22.171]                 if (is_error) {
[13:36:22.171]                   sessionInformation <- function() {
[13:36:22.171]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.171]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.171]                       search = base::search(), system = base::Sys.info())
[13:36:22.171]                   }
[13:36:22.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.171]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.171]                     cond$call), session = sessionInformation(), 
[13:36:22.171]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.171]                   signalCondition(cond)
[13:36:22.171]                 }
[13:36:22.171]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.171]                 "immediateCondition"))) {
[13:36:22.171]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.171]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.171]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.171]                   if (TRUE && !signal) {
[13:36:22.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.171]                     {
[13:36:22.171]                       inherits <- base::inherits
[13:36:22.171]                       invokeRestart <- base::invokeRestart
[13:36:22.171]                       is.null <- base::is.null
[13:36:22.171]                       muffled <- FALSE
[13:36:22.171]                       if (inherits(cond, "message")) {
[13:36:22.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.171]                         if (muffled) 
[13:36:22.171]                           invokeRestart("muffleMessage")
[13:36:22.171]                       }
[13:36:22.171]                       else if (inherits(cond, "warning")) {
[13:36:22.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.171]                         if (muffled) 
[13:36:22.171]                           invokeRestart("muffleWarning")
[13:36:22.171]                       }
[13:36:22.171]                       else if (inherits(cond, "condition")) {
[13:36:22.171]                         if (!is.null(pattern)) {
[13:36:22.171]                           computeRestarts <- base::computeRestarts
[13:36:22.171]                           grepl <- base::grepl
[13:36:22.171]                           restarts <- computeRestarts(cond)
[13:36:22.171]                           for (restart in restarts) {
[13:36:22.171]                             name <- restart$name
[13:36:22.171]                             if (is.null(name)) 
[13:36:22.171]                               next
[13:36:22.171]                             if (!grepl(pattern, name)) 
[13:36:22.171]                               next
[13:36:22.171]                             invokeRestart(restart)
[13:36:22.171]                             muffled <- TRUE
[13:36:22.171]                             break
[13:36:22.171]                           }
[13:36:22.171]                         }
[13:36:22.171]                       }
[13:36:22.171]                       invisible(muffled)
[13:36:22.171]                     }
[13:36:22.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.171]                   }
[13:36:22.171]                 }
[13:36:22.171]                 else {
[13:36:22.171]                   if (TRUE) {
[13:36:22.171]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.171]                     {
[13:36:22.171]                       inherits <- base::inherits
[13:36:22.171]                       invokeRestart <- base::invokeRestart
[13:36:22.171]                       is.null <- base::is.null
[13:36:22.171]                       muffled <- FALSE
[13:36:22.171]                       if (inherits(cond, "message")) {
[13:36:22.171]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.171]                         if (muffled) 
[13:36:22.171]                           invokeRestart("muffleMessage")
[13:36:22.171]                       }
[13:36:22.171]                       else if (inherits(cond, "warning")) {
[13:36:22.171]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.171]                         if (muffled) 
[13:36:22.171]                           invokeRestart("muffleWarning")
[13:36:22.171]                       }
[13:36:22.171]                       else if (inherits(cond, "condition")) {
[13:36:22.171]                         if (!is.null(pattern)) {
[13:36:22.171]                           computeRestarts <- base::computeRestarts
[13:36:22.171]                           grepl <- base::grepl
[13:36:22.171]                           restarts <- computeRestarts(cond)
[13:36:22.171]                           for (restart in restarts) {
[13:36:22.171]                             name <- restart$name
[13:36:22.171]                             if (is.null(name)) 
[13:36:22.171]                               next
[13:36:22.171]                             if (!grepl(pattern, name)) 
[13:36:22.171]                               next
[13:36:22.171]                             invokeRestart(restart)
[13:36:22.171]                             muffled <- TRUE
[13:36:22.171]                             break
[13:36:22.171]                           }
[13:36:22.171]                         }
[13:36:22.171]                       }
[13:36:22.171]                       invisible(muffled)
[13:36:22.171]                     }
[13:36:22.171]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.171]                   }
[13:36:22.171]                 }
[13:36:22.171]             }
[13:36:22.171]         }))
[13:36:22.171]     }, error = function(ex) {
[13:36:22.171]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.171]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.171]                 ...future.rng), started = ...future.startTime, 
[13:36:22.171]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.171]             version = "1.8"), class = "FutureResult")
[13:36:22.171]     }, finally = {
[13:36:22.171]         if (!identical(...future.workdir, getwd())) 
[13:36:22.171]             setwd(...future.workdir)
[13:36:22.171]         {
[13:36:22.171]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.171]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.171]             }
[13:36:22.171]             base::options(...future.oldOptions)
[13:36:22.171]             if (.Platform$OS.type == "windows") {
[13:36:22.171]                 old_names <- names(...future.oldEnvVars)
[13:36:22.171]                 envs <- base::Sys.getenv()
[13:36:22.171]                 names <- names(envs)
[13:36:22.171]                 common <- intersect(names, old_names)
[13:36:22.171]                 added <- setdiff(names, old_names)
[13:36:22.171]                 removed <- setdiff(old_names, names)
[13:36:22.171]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.171]                   envs[common]]
[13:36:22.171]                 NAMES <- toupper(changed)
[13:36:22.171]                 args <- list()
[13:36:22.171]                 for (kk in seq_along(NAMES)) {
[13:36:22.171]                   name <- changed[[kk]]
[13:36:22.171]                   NAME <- NAMES[[kk]]
[13:36:22.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.171]                     next
[13:36:22.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.171]                 }
[13:36:22.171]                 NAMES <- toupper(added)
[13:36:22.171]                 for (kk in seq_along(NAMES)) {
[13:36:22.171]                   name <- added[[kk]]
[13:36:22.171]                   NAME <- NAMES[[kk]]
[13:36:22.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.171]                     next
[13:36:22.171]                   args[[name]] <- ""
[13:36:22.171]                 }
[13:36:22.171]                 NAMES <- toupper(removed)
[13:36:22.171]                 for (kk in seq_along(NAMES)) {
[13:36:22.171]                   name <- removed[[kk]]
[13:36:22.171]                   NAME <- NAMES[[kk]]
[13:36:22.171]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.171]                     next
[13:36:22.171]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.171]                 }
[13:36:22.171]                 if (length(args) > 0) 
[13:36:22.171]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.171]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.171]             }
[13:36:22.171]             else {
[13:36:22.171]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.171]             }
[13:36:22.171]             {
[13:36:22.171]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.171]                   0L) {
[13:36:22.171]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.171]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.171]                   base::options(opts)
[13:36:22.171]                 }
[13:36:22.171]                 {
[13:36:22.171]                   {
[13:36:22.171]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.171]                     NULL
[13:36:22.171]                   }
[13:36:22.171]                   options(future.plan = NULL)
[13:36:22.171]                   if (is.na(NA_character_)) 
[13:36:22.171]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.171]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.171]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.171]                     .init = FALSE)
[13:36:22.171]                 }
[13:36:22.171]             }
[13:36:22.171]         }
[13:36:22.171]     })
[13:36:22.171]     if (TRUE) {
[13:36:22.171]         base::sink(type = "output", split = FALSE)
[13:36:22.171]         if (TRUE) {
[13:36:22.171]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.171]         }
[13:36:22.171]         else {
[13:36:22.171]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.171]         }
[13:36:22.171]         base::close(...future.stdout)
[13:36:22.171]         ...future.stdout <- NULL
[13:36:22.171]     }
[13:36:22.171]     ...future.result$conditions <- ...future.conditions
[13:36:22.171]     ...future.result$finished <- base::Sys.time()
[13:36:22.171]     ...future.result
[13:36:22.171] }
[13:36:22.173] requestCore(): workers = 2
[13:36:22.175] MulticoreFuture started
[13:36:22.175] - Launch lazy future ... done
[13:36:22.175] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[13:36:22.176] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.176] List of future strategies:
[13:36:22.176] 1. sequential:
[13:36:22.176]    - args: function (..., envir = parent.frame())
[13:36:22.176]    - tweaked: FALSE
[13:36:22.176]    - call: NULL
[13:36:22.177] plan(): nbrOfWorkers() = 1
[13:36:22.179] plan(): Setting new future strategy stack:
[13:36:22.179] List of future strategies:
[13:36:22.179] 1. multicore:
[13:36:22.179]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.179]    - tweaked: FALSE
[13:36:22.179]    - call: plan(strategy)
[13:36:22.184] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.185] result() for MulticoreFuture ...
[13:36:22.186] result() for MulticoreFuture ...
[13:36:22.186] result() for MulticoreFuture ... done
[13:36:22.186] result() for MulticoreFuture ... done
[13:36:22.186] result() for MulticoreFuture ...
[13:36:22.186] result() for MulticoreFuture ... done
[13:36:22.190] getGlobalsAndPackages() ...
[13:36:22.190] 
[13:36:22.190] - globals: [0] <none>
[13:36:22.191] getGlobalsAndPackages() ... DONE
[13:36:22.191] Packages needed by the future expression (n = 0): <none>
[13:36:22.191] Packages needed by future strategies (n = 0): <none>
[13:36:22.192] {
[13:36:22.192]     {
[13:36:22.192]         {
[13:36:22.192]             ...future.startTime <- base::Sys.time()
[13:36:22.192]             {
[13:36:22.192]                 {
[13:36:22.192]                   {
[13:36:22.192]                     {
[13:36:22.192]                       base::local({
[13:36:22.192]                         has_future <- base::requireNamespace("future", 
[13:36:22.192]                           quietly = TRUE)
[13:36:22.192]                         if (has_future) {
[13:36:22.192]                           ns <- base::getNamespace("future")
[13:36:22.192]                           version <- ns[[".package"]][["version"]]
[13:36:22.192]                           if (is.null(version)) 
[13:36:22.192]                             version <- utils::packageVersion("future")
[13:36:22.192]                         }
[13:36:22.192]                         else {
[13:36:22.192]                           version <- NULL
[13:36:22.192]                         }
[13:36:22.192]                         if (!has_future || version < "1.8.0") {
[13:36:22.192]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.192]                             "", base::R.version$version.string), 
[13:36:22.192]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.192]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.192]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.192]                               "release", "version")], collapse = " "), 
[13:36:22.192]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.192]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.192]                             info)
[13:36:22.192]                           info <- base::paste(info, collapse = "; ")
[13:36:22.192]                           if (!has_future) {
[13:36:22.192]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.192]                               info)
[13:36:22.192]                           }
[13:36:22.192]                           else {
[13:36:22.192]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.192]                               info, version)
[13:36:22.192]                           }
[13:36:22.192]                           base::stop(msg)
[13:36:22.192]                         }
[13:36:22.192]                       })
[13:36:22.192]                     }
[13:36:22.192]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.192]                     base::options(mc.cores = 1L)
[13:36:22.192]                   }
[13:36:22.192]                   ...future.strategy.old <- future::plan("list")
[13:36:22.192]                   options(future.plan = NULL)
[13:36:22.192]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.192]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.192]                 }
[13:36:22.192]                 ...future.workdir <- getwd()
[13:36:22.192]             }
[13:36:22.192]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.192]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.192]         }
[13:36:22.192]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.192]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.192]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.192]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.192]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.192]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.192]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.192]             base::names(...future.oldOptions))
[13:36:22.192]     }
[13:36:22.192]     if (FALSE) {
[13:36:22.192]     }
[13:36:22.192]     else {
[13:36:22.192]         if (TRUE) {
[13:36:22.192]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.192]                 open = "w")
[13:36:22.192]         }
[13:36:22.192]         else {
[13:36:22.192]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.192]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.192]         }
[13:36:22.192]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.192]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.192]             base::sink(type = "output", split = FALSE)
[13:36:22.192]             base::close(...future.stdout)
[13:36:22.192]         }, add = TRUE)
[13:36:22.192]     }
[13:36:22.192]     ...future.frame <- base::sys.nframe()
[13:36:22.192]     ...future.conditions <- base::list()
[13:36:22.192]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.192]     if (FALSE) {
[13:36:22.192]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.192]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.192]     }
[13:36:22.192]     ...future.result <- base::tryCatch({
[13:36:22.192]         base::withCallingHandlers({
[13:36:22.192]             ...future.value <- base::withVisible(base::local({
[13:36:22.192]                 withCallingHandlers({
[13:36:22.192]                   42
[13:36:22.192]                 }, immediateCondition = function(cond) {
[13:36:22.192]                   save_rds <- function (object, pathname, ...) 
[13:36:22.192]                   {
[13:36:22.192]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.192]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.192]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.192]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.192]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.192]                         fi_tmp[["mtime"]])
[13:36:22.192]                     }
[13:36:22.192]                     tryCatch({
[13:36:22.192]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.192]                     }, error = function(ex) {
[13:36:22.192]                       msg <- conditionMessage(ex)
[13:36:22.192]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.192]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.192]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.192]                         fi_tmp[["mtime"]], msg)
[13:36:22.192]                       ex$message <- msg
[13:36:22.192]                       stop(ex)
[13:36:22.192]                     })
[13:36:22.192]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.192]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.192]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.192]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.192]                       fi <- file.info(pathname)
[13:36:22.192]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.192]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.192]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.192]                         fi[["size"]], fi[["mtime"]])
[13:36:22.192]                       stop(msg)
[13:36:22.192]                     }
[13:36:22.192]                     invisible(pathname)
[13:36:22.192]                   }
[13:36:22.192]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.192]                     rootPath = tempdir()) 
[13:36:22.192]                   {
[13:36:22.192]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.192]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.192]                       tmpdir = path, fileext = ".rds")
[13:36:22.192]                     save_rds(obj, file)
[13:36:22.192]                   }
[13:36:22.192]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.192]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.192]                   {
[13:36:22.192]                     inherits <- base::inherits
[13:36:22.192]                     invokeRestart <- base::invokeRestart
[13:36:22.192]                     is.null <- base::is.null
[13:36:22.192]                     muffled <- FALSE
[13:36:22.192]                     if (inherits(cond, "message")) {
[13:36:22.192]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.192]                       if (muffled) 
[13:36:22.192]                         invokeRestart("muffleMessage")
[13:36:22.192]                     }
[13:36:22.192]                     else if (inherits(cond, "warning")) {
[13:36:22.192]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.192]                       if (muffled) 
[13:36:22.192]                         invokeRestart("muffleWarning")
[13:36:22.192]                     }
[13:36:22.192]                     else if (inherits(cond, "condition")) {
[13:36:22.192]                       if (!is.null(pattern)) {
[13:36:22.192]                         computeRestarts <- base::computeRestarts
[13:36:22.192]                         grepl <- base::grepl
[13:36:22.192]                         restarts <- computeRestarts(cond)
[13:36:22.192]                         for (restart in restarts) {
[13:36:22.192]                           name <- restart$name
[13:36:22.192]                           if (is.null(name)) 
[13:36:22.192]                             next
[13:36:22.192]                           if (!grepl(pattern, name)) 
[13:36:22.192]                             next
[13:36:22.192]                           invokeRestart(restart)
[13:36:22.192]                           muffled <- TRUE
[13:36:22.192]                           break
[13:36:22.192]                         }
[13:36:22.192]                       }
[13:36:22.192]                     }
[13:36:22.192]                     invisible(muffled)
[13:36:22.192]                   }
[13:36:22.192]                   muffleCondition(cond)
[13:36:22.192]                 })
[13:36:22.192]             }))
[13:36:22.192]             future::FutureResult(value = ...future.value$value, 
[13:36:22.192]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.192]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.192]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.192]                     ...future.globalenv.names))
[13:36:22.192]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.192]         }, condition = base::local({
[13:36:22.192]             c <- base::c
[13:36:22.192]             inherits <- base::inherits
[13:36:22.192]             invokeRestart <- base::invokeRestart
[13:36:22.192]             length <- base::length
[13:36:22.192]             list <- base::list
[13:36:22.192]             seq.int <- base::seq.int
[13:36:22.192]             signalCondition <- base::signalCondition
[13:36:22.192]             sys.calls <- base::sys.calls
[13:36:22.192]             `[[` <- base::`[[`
[13:36:22.192]             `+` <- base::`+`
[13:36:22.192]             `<<-` <- base::`<<-`
[13:36:22.192]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.192]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.192]                   3L)]
[13:36:22.192]             }
[13:36:22.192]             function(cond) {
[13:36:22.192]                 is_error <- inherits(cond, "error")
[13:36:22.192]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.192]                   NULL)
[13:36:22.192]                 if (is_error) {
[13:36:22.192]                   sessionInformation <- function() {
[13:36:22.192]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.192]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.192]                       search = base::search(), system = base::Sys.info())
[13:36:22.192]                   }
[13:36:22.192]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.192]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.192]                     cond$call), session = sessionInformation(), 
[13:36:22.192]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.192]                   signalCondition(cond)
[13:36:22.192]                 }
[13:36:22.192]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.192]                 "immediateCondition"))) {
[13:36:22.192]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.192]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.192]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.192]                   if (TRUE && !signal) {
[13:36:22.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.192]                     {
[13:36:22.192]                       inherits <- base::inherits
[13:36:22.192]                       invokeRestart <- base::invokeRestart
[13:36:22.192]                       is.null <- base::is.null
[13:36:22.192]                       muffled <- FALSE
[13:36:22.192]                       if (inherits(cond, "message")) {
[13:36:22.192]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.192]                         if (muffled) 
[13:36:22.192]                           invokeRestart("muffleMessage")
[13:36:22.192]                       }
[13:36:22.192]                       else if (inherits(cond, "warning")) {
[13:36:22.192]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.192]                         if (muffled) 
[13:36:22.192]                           invokeRestart("muffleWarning")
[13:36:22.192]                       }
[13:36:22.192]                       else if (inherits(cond, "condition")) {
[13:36:22.192]                         if (!is.null(pattern)) {
[13:36:22.192]                           computeRestarts <- base::computeRestarts
[13:36:22.192]                           grepl <- base::grepl
[13:36:22.192]                           restarts <- computeRestarts(cond)
[13:36:22.192]                           for (restart in restarts) {
[13:36:22.192]                             name <- restart$name
[13:36:22.192]                             if (is.null(name)) 
[13:36:22.192]                               next
[13:36:22.192]                             if (!grepl(pattern, name)) 
[13:36:22.192]                               next
[13:36:22.192]                             invokeRestart(restart)
[13:36:22.192]                             muffled <- TRUE
[13:36:22.192]                             break
[13:36:22.192]                           }
[13:36:22.192]                         }
[13:36:22.192]                       }
[13:36:22.192]                       invisible(muffled)
[13:36:22.192]                     }
[13:36:22.192]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.192]                   }
[13:36:22.192]                 }
[13:36:22.192]                 else {
[13:36:22.192]                   if (TRUE) {
[13:36:22.192]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.192]                     {
[13:36:22.192]                       inherits <- base::inherits
[13:36:22.192]                       invokeRestart <- base::invokeRestart
[13:36:22.192]                       is.null <- base::is.null
[13:36:22.192]                       muffled <- FALSE
[13:36:22.192]                       if (inherits(cond, "message")) {
[13:36:22.192]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.192]                         if (muffled) 
[13:36:22.192]                           invokeRestart("muffleMessage")
[13:36:22.192]                       }
[13:36:22.192]                       else if (inherits(cond, "warning")) {
[13:36:22.192]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.192]                         if (muffled) 
[13:36:22.192]                           invokeRestart("muffleWarning")
[13:36:22.192]                       }
[13:36:22.192]                       else if (inherits(cond, "condition")) {
[13:36:22.192]                         if (!is.null(pattern)) {
[13:36:22.192]                           computeRestarts <- base::computeRestarts
[13:36:22.192]                           grepl <- base::grepl
[13:36:22.192]                           restarts <- computeRestarts(cond)
[13:36:22.192]                           for (restart in restarts) {
[13:36:22.192]                             name <- restart$name
[13:36:22.192]                             if (is.null(name)) 
[13:36:22.192]                               next
[13:36:22.192]                             if (!grepl(pattern, name)) 
[13:36:22.192]                               next
[13:36:22.192]                             invokeRestart(restart)
[13:36:22.192]                             muffled <- TRUE
[13:36:22.192]                             break
[13:36:22.192]                           }
[13:36:22.192]                         }
[13:36:22.192]                       }
[13:36:22.192]                       invisible(muffled)
[13:36:22.192]                     }
[13:36:22.192]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.192]                   }
[13:36:22.192]                 }
[13:36:22.192]             }
[13:36:22.192]         }))
[13:36:22.192]     }, error = function(ex) {
[13:36:22.192]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.192]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.192]                 ...future.rng), started = ...future.startTime, 
[13:36:22.192]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.192]             version = "1.8"), class = "FutureResult")
[13:36:22.192]     }, finally = {
[13:36:22.192]         if (!identical(...future.workdir, getwd())) 
[13:36:22.192]             setwd(...future.workdir)
[13:36:22.192]         {
[13:36:22.192]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.192]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.192]             }
[13:36:22.192]             base::options(...future.oldOptions)
[13:36:22.192]             if (.Platform$OS.type == "windows") {
[13:36:22.192]                 old_names <- names(...future.oldEnvVars)
[13:36:22.192]                 envs <- base::Sys.getenv()
[13:36:22.192]                 names <- names(envs)
[13:36:22.192]                 common <- intersect(names, old_names)
[13:36:22.192]                 added <- setdiff(names, old_names)
[13:36:22.192]                 removed <- setdiff(old_names, names)
[13:36:22.192]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.192]                   envs[common]]
[13:36:22.192]                 NAMES <- toupper(changed)
[13:36:22.192]                 args <- list()
[13:36:22.192]                 for (kk in seq_along(NAMES)) {
[13:36:22.192]                   name <- changed[[kk]]
[13:36:22.192]                   NAME <- NAMES[[kk]]
[13:36:22.192]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.192]                     next
[13:36:22.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.192]                 }
[13:36:22.192]                 NAMES <- toupper(added)
[13:36:22.192]                 for (kk in seq_along(NAMES)) {
[13:36:22.192]                   name <- added[[kk]]
[13:36:22.192]                   NAME <- NAMES[[kk]]
[13:36:22.192]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.192]                     next
[13:36:22.192]                   args[[name]] <- ""
[13:36:22.192]                 }
[13:36:22.192]                 NAMES <- toupper(removed)
[13:36:22.192]                 for (kk in seq_along(NAMES)) {
[13:36:22.192]                   name <- removed[[kk]]
[13:36:22.192]                   NAME <- NAMES[[kk]]
[13:36:22.192]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.192]                     next
[13:36:22.192]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.192]                 }
[13:36:22.192]                 if (length(args) > 0) 
[13:36:22.192]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.192]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.192]             }
[13:36:22.192]             else {
[13:36:22.192]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.192]             }
[13:36:22.192]             {
[13:36:22.192]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.192]                   0L) {
[13:36:22.192]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.192]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.192]                   base::options(opts)
[13:36:22.192]                 }
[13:36:22.192]                 {
[13:36:22.192]                   {
[13:36:22.192]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.192]                     NULL
[13:36:22.192]                   }
[13:36:22.192]                   options(future.plan = NULL)
[13:36:22.192]                   if (is.na(NA_character_)) 
[13:36:22.192]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.192]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.192]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.192]                     .init = FALSE)
[13:36:22.192]                 }
[13:36:22.192]             }
[13:36:22.192]         }
[13:36:22.192]     })
[13:36:22.192]     if (TRUE) {
[13:36:22.192]         base::sink(type = "output", split = FALSE)
[13:36:22.192]         if (TRUE) {
[13:36:22.192]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.192]         }
[13:36:22.192]         else {
[13:36:22.192]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.192]         }
[13:36:22.192]         base::close(...future.stdout)
[13:36:22.192]         ...future.stdout <- NULL
[13:36:22.192]     }
[13:36:22.192]     ...future.result$conditions <- ...future.conditions
[13:36:22.192]     ...future.result$finished <- base::Sys.time()
[13:36:22.192]     ...future.result
[13:36:22.192] }
[13:36:22.194] requestCore(): workers = 2
[13:36:22.196] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.197] plan(): Setting new future strategy stack:
[13:36:22.197] List of future strategies:
[13:36:22.197] 1. sequential:
[13:36:22.197]    - args: function (..., envir = parent.frame())
[13:36:22.197]    - tweaked: FALSE
[13:36:22.197]    - call: NULL
[13:36:22.198] plan(): nbrOfWorkers() = 1
[13:36:22.200] plan(): Setting new future strategy stack:
[13:36:22.200] List of future strategies:
[13:36:22.200] 1. multicore:
[13:36:22.200]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.200]    - tweaked: FALSE
[13:36:22.200]    - call: plan(strategy)
[13:36:22.205] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.206] result() for MulticoreFuture ...
[13:36:22.207] result() for MulticoreFuture ...
[13:36:22.207] result() for MulticoreFuture ... done
[13:36:22.207] result() for MulticoreFuture ... done
[13:36:22.207] result() for MulticoreFuture ...
[13:36:22.207] result() for MulticoreFuture ... done
[13:36:22.208] getGlobalsAndPackages() ...
[13:36:22.208] Searching for globals...
[13:36:22.208] 
[13:36:22.208] Searching for globals ... DONE
[13:36:22.209] - globals: [0] <none>
[13:36:22.209] getGlobalsAndPackages() ... DONE
[13:36:22.209] run() for ‘Future’ ...
[13:36:22.209] - state: ‘created’
[13:36:22.209] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.213] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.214] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:22.214]   - Field: ‘label’
[13:36:22.214]   - Field: ‘local’
[13:36:22.214]   - Field: ‘owner’
[13:36:22.214]   - Field: ‘envir’
[13:36:22.214]   - Field: ‘workers’
[13:36:22.214]   - Field: ‘packages’
[13:36:22.215]   - Field: ‘gc’
[13:36:22.215]   - Field: ‘job’
[13:36:22.215]   - Field: ‘conditions’
[13:36:22.215]   - Field: ‘expr’
[13:36:22.215]   - Field: ‘uuid’
[13:36:22.215]   - Field: ‘seed’
[13:36:22.215]   - Field: ‘version’
[13:36:22.215]   - Field: ‘result’
[13:36:22.215]   - Field: ‘asynchronous’
[13:36:22.216]   - Field: ‘calls’
[13:36:22.216]   - Field: ‘globals’
[13:36:22.216]   - Field: ‘stdout’
[13:36:22.216]   - Field: ‘earlySignal’
[13:36:22.216]   - Field: ‘lazy’
[13:36:22.216]   - Field: ‘state’
[13:36:22.216] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:22.216] - Launch lazy future ...
[13:36:22.217] Packages needed by the future expression (n = 0): <none>
[13:36:22.217] Packages needed by future strategies (n = 0): <none>
[13:36:22.217] {
[13:36:22.217]     {
[13:36:22.217]         {
[13:36:22.217]             ...future.startTime <- base::Sys.time()
[13:36:22.217]             {
[13:36:22.217]                 {
[13:36:22.217]                   {
[13:36:22.217]                     {
[13:36:22.217]                       base::local({
[13:36:22.217]                         has_future <- base::requireNamespace("future", 
[13:36:22.217]                           quietly = TRUE)
[13:36:22.217]                         if (has_future) {
[13:36:22.217]                           ns <- base::getNamespace("future")
[13:36:22.217]                           version <- ns[[".package"]][["version"]]
[13:36:22.217]                           if (is.null(version)) 
[13:36:22.217]                             version <- utils::packageVersion("future")
[13:36:22.217]                         }
[13:36:22.217]                         else {
[13:36:22.217]                           version <- NULL
[13:36:22.217]                         }
[13:36:22.217]                         if (!has_future || version < "1.8.0") {
[13:36:22.217]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.217]                             "", base::R.version$version.string), 
[13:36:22.217]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.217]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.217]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.217]                               "release", "version")], collapse = " "), 
[13:36:22.217]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.217]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.217]                             info)
[13:36:22.217]                           info <- base::paste(info, collapse = "; ")
[13:36:22.217]                           if (!has_future) {
[13:36:22.217]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.217]                               info)
[13:36:22.217]                           }
[13:36:22.217]                           else {
[13:36:22.217]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.217]                               info, version)
[13:36:22.217]                           }
[13:36:22.217]                           base::stop(msg)
[13:36:22.217]                         }
[13:36:22.217]                       })
[13:36:22.217]                     }
[13:36:22.217]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.217]                     base::options(mc.cores = 1L)
[13:36:22.217]                   }
[13:36:22.217]                   ...future.strategy.old <- future::plan("list")
[13:36:22.217]                   options(future.plan = NULL)
[13:36:22.217]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.217]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.217]                 }
[13:36:22.217]                 ...future.workdir <- getwd()
[13:36:22.217]             }
[13:36:22.217]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.217]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.217]         }
[13:36:22.217]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.217]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.217]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.217]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.217]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.217]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.217]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.217]             base::names(...future.oldOptions))
[13:36:22.217]     }
[13:36:22.217]     if (FALSE) {
[13:36:22.217]     }
[13:36:22.217]     else {
[13:36:22.217]         if (TRUE) {
[13:36:22.217]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.217]                 open = "w")
[13:36:22.217]         }
[13:36:22.217]         else {
[13:36:22.217]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.217]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.217]         }
[13:36:22.217]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.217]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.217]             base::sink(type = "output", split = FALSE)
[13:36:22.217]             base::close(...future.stdout)
[13:36:22.217]         }, add = TRUE)
[13:36:22.217]     }
[13:36:22.217]     ...future.frame <- base::sys.nframe()
[13:36:22.217]     ...future.conditions <- base::list()
[13:36:22.217]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.217]     if (FALSE) {
[13:36:22.217]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.217]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.217]     }
[13:36:22.217]     ...future.result <- base::tryCatch({
[13:36:22.217]         base::withCallingHandlers({
[13:36:22.217]             ...future.value <- base::withVisible(base::local({
[13:36:22.217]                 withCallingHandlers({
[13:36:22.217]                   42
[13:36:22.217]                 }, immediateCondition = function(cond) {
[13:36:22.217]                   save_rds <- function (object, pathname, ...) 
[13:36:22.217]                   {
[13:36:22.217]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.217]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.217]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.217]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.217]                         fi_tmp[["mtime"]])
[13:36:22.217]                     }
[13:36:22.217]                     tryCatch({
[13:36:22.217]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.217]                     }, error = function(ex) {
[13:36:22.217]                       msg <- conditionMessage(ex)
[13:36:22.217]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.217]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.217]                         fi_tmp[["mtime"]], msg)
[13:36:22.217]                       ex$message <- msg
[13:36:22.217]                       stop(ex)
[13:36:22.217]                     })
[13:36:22.217]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.217]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.217]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.217]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.217]                       fi <- file.info(pathname)
[13:36:22.217]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.217]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.217]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.217]                         fi[["size"]], fi[["mtime"]])
[13:36:22.217]                       stop(msg)
[13:36:22.217]                     }
[13:36:22.217]                     invisible(pathname)
[13:36:22.217]                   }
[13:36:22.217]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.217]                     rootPath = tempdir()) 
[13:36:22.217]                   {
[13:36:22.217]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.217]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.217]                       tmpdir = path, fileext = ".rds")
[13:36:22.217]                     save_rds(obj, file)
[13:36:22.217]                   }
[13:36:22.217]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.217]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.217]                   {
[13:36:22.217]                     inherits <- base::inherits
[13:36:22.217]                     invokeRestart <- base::invokeRestart
[13:36:22.217]                     is.null <- base::is.null
[13:36:22.217]                     muffled <- FALSE
[13:36:22.217]                     if (inherits(cond, "message")) {
[13:36:22.217]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.217]                       if (muffled) 
[13:36:22.217]                         invokeRestart("muffleMessage")
[13:36:22.217]                     }
[13:36:22.217]                     else if (inherits(cond, "warning")) {
[13:36:22.217]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.217]                       if (muffled) 
[13:36:22.217]                         invokeRestart("muffleWarning")
[13:36:22.217]                     }
[13:36:22.217]                     else if (inherits(cond, "condition")) {
[13:36:22.217]                       if (!is.null(pattern)) {
[13:36:22.217]                         computeRestarts <- base::computeRestarts
[13:36:22.217]                         grepl <- base::grepl
[13:36:22.217]                         restarts <- computeRestarts(cond)
[13:36:22.217]                         for (restart in restarts) {
[13:36:22.217]                           name <- restart$name
[13:36:22.217]                           if (is.null(name)) 
[13:36:22.217]                             next
[13:36:22.217]                           if (!grepl(pattern, name)) 
[13:36:22.217]                             next
[13:36:22.217]                           invokeRestart(restart)
[13:36:22.217]                           muffled <- TRUE
[13:36:22.217]                           break
[13:36:22.217]                         }
[13:36:22.217]                       }
[13:36:22.217]                     }
[13:36:22.217]                     invisible(muffled)
[13:36:22.217]                   }
[13:36:22.217]                   muffleCondition(cond)
[13:36:22.217]                 })
[13:36:22.217]             }))
[13:36:22.217]             future::FutureResult(value = ...future.value$value, 
[13:36:22.217]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.217]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.217]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.217]                     ...future.globalenv.names))
[13:36:22.217]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.217]         }, condition = base::local({
[13:36:22.217]             c <- base::c
[13:36:22.217]             inherits <- base::inherits
[13:36:22.217]             invokeRestart <- base::invokeRestart
[13:36:22.217]             length <- base::length
[13:36:22.217]             list <- base::list
[13:36:22.217]             seq.int <- base::seq.int
[13:36:22.217]             signalCondition <- base::signalCondition
[13:36:22.217]             sys.calls <- base::sys.calls
[13:36:22.217]             `[[` <- base::`[[`
[13:36:22.217]             `+` <- base::`+`
[13:36:22.217]             `<<-` <- base::`<<-`
[13:36:22.217]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.217]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.217]                   3L)]
[13:36:22.217]             }
[13:36:22.217]             function(cond) {
[13:36:22.217]                 is_error <- inherits(cond, "error")
[13:36:22.217]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.217]                   NULL)
[13:36:22.217]                 if (is_error) {
[13:36:22.217]                   sessionInformation <- function() {
[13:36:22.217]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.217]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.217]                       search = base::search(), system = base::Sys.info())
[13:36:22.217]                   }
[13:36:22.217]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.217]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.217]                     cond$call), session = sessionInformation(), 
[13:36:22.217]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.217]                   signalCondition(cond)
[13:36:22.217]                 }
[13:36:22.217]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.217]                 "immediateCondition"))) {
[13:36:22.217]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.217]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.217]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.217]                   if (TRUE && !signal) {
[13:36:22.217]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.217]                     {
[13:36:22.217]                       inherits <- base::inherits
[13:36:22.217]                       invokeRestart <- base::invokeRestart
[13:36:22.217]                       is.null <- base::is.null
[13:36:22.217]                       muffled <- FALSE
[13:36:22.217]                       if (inherits(cond, "message")) {
[13:36:22.217]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.217]                         if (muffled) 
[13:36:22.217]                           invokeRestart("muffleMessage")
[13:36:22.217]                       }
[13:36:22.217]                       else if (inherits(cond, "warning")) {
[13:36:22.217]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.217]                         if (muffled) 
[13:36:22.217]                           invokeRestart("muffleWarning")
[13:36:22.217]                       }
[13:36:22.217]                       else if (inherits(cond, "condition")) {
[13:36:22.217]                         if (!is.null(pattern)) {
[13:36:22.217]                           computeRestarts <- base::computeRestarts
[13:36:22.217]                           grepl <- base::grepl
[13:36:22.217]                           restarts <- computeRestarts(cond)
[13:36:22.217]                           for (restart in restarts) {
[13:36:22.217]                             name <- restart$name
[13:36:22.217]                             if (is.null(name)) 
[13:36:22.217]                               next
[13:36:22.217]                             if (!grepl(pattern, name)) 
[13:36:22.217]                               next
[13:36:22.217]                             invokeRestart(restart)
[13:36:22.217]                             muffled <- TRUE
[13:36:22.217]                             break
[13:36:22.217]                           }
[13:36:22.217]                         }
[13:36:22.217]                       }
[13:36:22.217]                       invisible(muffled)
[13:36:22.217]                     }
[13:36:22.217]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.217]                   }
[13:36:22.217]                 }
[13:36:22.217]                 else {
[13:36:22.217]                   if (TRUE) {
[13:36:22.217]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.217]                     {
[13:36:22.217]                       inherits <- base::inherits
[13:36:22.217]                       invokeRestart <- base::invokeRestart
[13:36:22.217]                       is.null <- base::is.null
[13:36:22.217]                       muffled <- FALSE
[13:36:22.217]                       if (inherits(cond, "message")) {
[13:36:22.217]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.217]                         if (muffled) 
[13:36:22.217]                           invokeRestart("muffleMessage")
[13:36:22.217]                       }
[13:36:22.217]                       else if (inherits(cond, "warning")) {
[13:36:22.217]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.217]                         if (muffled) 
[13:36:22.217]                           invokeRestart("muffleWarning")
[13:36:22.217]                       }
[13:36:22.217]                       else if (inherits(cond, "condition")) {
[13:36:22.217]                         if (!is.null(pattern)) {
[13:36:22.217]                           computeRestarts <- base::computeRestarts
[13:36:22.217]                           grepl <- base::grepl
[13:36:22.217]                           restarts <- computeRestarts(cond)
[13:36:22.217]                           for (restart in restarts) {
[13:36:22.217]                             name <- restart$name
[13:36:22.217]                             if (is.null(name)) 
[13:36:22.217]                               next
[13:36:22.217]                             if (!grepl(pattern, name)) 
[13:36:22.217]                               next
[13:36:22.217]                             invokeRestart(restart)
[13:36:22.217]                             muffled <- TRUE
[13:36:22.217]                             break
[13:36:22.217]                           }
[13:36:22.217]                         }
[13:36:22.217]                       }
[13:36:22.217]                       invisible(muffled)
[13:36:22.217]                     }
[13:36:22.217]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.217]                   }
[13:36:22.217]                 }
[13:36:22.217]             }
[13:36:22.217]         }))
[13:36:22.217]     }, error = function(ex) {
[13:36:22.217]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.217]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.217]                 ...future.rng), started = ...future.startTime, 
[13:36:22.217]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.217]             version = "1.8"), class = "FutureResult")
[13:36:22.217]     }, finally = {
[13:36:22.217]         if (!identical(...future.workdir, getwd())) 
[13:36:22.217]             setwd(...future.workdir)
[13:36:22.217]         {
[13:36:22.217]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.217]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.217]             }
[13:36:22.217]             base::options(...future.oldOptions)
[13:36:22.217]             if (.Platform$OS.type == "windows") {
[13:36:22.217]                 old_names <- names(...future.oldEnvVars)
[13:36:22.217]                 envs <- base::Sys.getenv()
[13:36:22.217]                 names <- names(envs)
[13:36:22.217]                 common <- intersect(names, old_names)
[13:36:22.217]                 added <- setdiff(names, old_names)
[13:36:22.217]                 removed <- setdiff(old_names, names)
[13:36:22.217]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.217]                   envs[common]]
[13:36:22.217]                 NAMES <- toupper(changed)
[13:36:22.217]                 args <- list()
[13:36:22.217]                 for (kk in seq_along(NAMES)) {
[13:36:22.217]                   name <- changed[[kk]]
[13:36:22.217]                   NAME <- NAMES[[kk]]
[13:36:22.217]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.217]                     next
[13:36:22.217]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.217]                 }
[13:36:22.217]                 NAMES <- toupper(added)
[13:36:22.217]                 for (kk in seq_along(NAMES)) {
[13:36:22.217]                   name <- added[[kk]]
[13:36:22.217]                   NAME <- NAMES[[kk]]
[13:36:22.217]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.217]                     next
[13:36:22.217]                   args[[name]] <- ""
[13:36:22.217]                 }
[13:36:22.217]                 NAMES <- toupper(removed)
[13:36:22.217]                 for (kk in seq_along(NAMES)) {
[13:36:22.217]                   name <- removed[[kk]]
[13:36:22.217]                   NAME <- NAMES[[kk]]
[13:36:22.217]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.217]                     next
[13:36:22.217]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.217]                 }
[13:36:22.217]                 if (length(args) > 0) 
[13:36:22.217]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.217]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.217]             }
[13:36:22.217]             else {
[13:36:22.217]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.217]             }
[13:36:22.217]             {
[13:36:22.217]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.217]                   0L) {
[13:36:22.217]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.217]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.217]                   base::options(opts)
[13:36:22.217]                 }
[13:36:22.217]                 {
[13:36:22.217]                   {
[13:36:22.217]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.217]                     NULL
[13:36:22.217]                   }
[13:36:22.217]                   options(future.plan = NULL)
[13:36:22.217]                   if (is.na(NA_character_)) 
[13:36:22.217]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.217]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.217]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.217]                     .init = FALSE)
[13:36:22.217]                 }
[13:36:22.217]             }
[13:36:22.217]         }
[13:36:22.217]     })
[13:36:22.217]     if (TRUE) {
[13:36:22.217]         base::sink(type = "output", split = FALSE)
[13:36:22.217]         if (TRUE) {
[13:36:22.217]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.217]         }
[13:36:22.217]         else {
[13:36:22.217]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.217]         }
[13:36:22.217]         base::close(...future.stdout)
[13:36:22.217]         ...future.stdout <- NULL
[13:36:22.217]     }
[13:36:22.217]     ...future.result$conditions <- ...future.conditions
[13:36:22.217]     ...future.result$finished <- base::Sys.time()
[13:36:22.217]     ...future.result
[13:36:22.217] }
[13:36:22.220] requestCore(): workers = 2
[13:36:22.222] MulticoreFuture started
[13:36:22.222] - Launch lazy future ... done
[13:36:22.222] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.223] plan(): Setting new future strategy stack:
[13:36:22.223] List of future strategies:
[13:36:22.223] 1. sequential:
[13:36:22.223]    - args: function (..., envir = parent.frame())
[13:36:22.223]    - tweaked: FALSE
[13:36:22.223]    - call: NULL
[13:36:22.224] plan(): nbrOfWorkers() = 1
[13:36:22.226] plan(): Setting new future strategy stack:
[13:36:22.226] List of future strategies:
[13:36:22.226] 1. multicore:
[13:36:22.226]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.226]    - tweaked: FALSE
[13:36:22.226]    - call: plan(strategy)
[13:36:22.230] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.231] result() for MulticoreFuture ...
[13:36:22.232] result() for MulticoreFuture ...
[13:36:22.232] result() for MulticoreFuture ... done
[13:36:22.232] result() for MulticoreFuture ... done
[13:36:22.232] result() for MulticoreFuture ...
[13:36:22.232] result() for MulticoreFuture ... done
[13:36:22.233] getGlobalsAndPackages() ...
[13:36:22.233] Searching for globals...
[13:36:22.234] - globals found: [1] ‘{’
[13:36:22.234] Searching for globals ... DONE
[13:36:22.234] Resolving globals: FALSE
[13:36:22.235] 
[13:36:22.235] 
[13:36:22.235] getGlobalsAndPackages() ... DONE
[13:36:22.235] run() for ‘Future’ ...
[13:36:22.235] - state: ‘created’
[13:36:22.235] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.242] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.243] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:36:22.243]   - Field: ‘label’
[13:36:22.243]   - Field: ‘local’
[13:36:22.243]   - Field: ‘owner’
[13:36:22.243]   - Field: ‘envir’
[13:36:22.243]   - Field: ‘workers’
[13:36:22.243]   - Field: ‘packages’
[13:36:22.244]   - Field: ‘gc’
[13:36:22.244]   - Field: ‘job’
[13:36:22.244]   - Field: ‘conditions’
[13:36:22.244]   - Field: ‘expr’
[13:36:22.244]   - Field: ‘uuid’
[13:36:22.244]   - Field: ‘seed’
[13:36:22.244]   - Field: ‘version’
[13:36:22.245]   - Field: ‘result’
[13:36:22.245]   - Field: ‘asynchronous’
[13:36:22.245]   - Field: ‘calls’
[13:36:22.245]   - Field: ‘globals’
[13:36:22.245]   - Field: ‘stdout’
[13:36:22.245]   - Field: ‘earlySignal’
[13:36:22.245]   - Field: ‘lazy’
[13:36:22.245]   - Field: ‘state’
[13:36:22.246] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:36:22.246] - Launch lazy future ...
[13:36:22.246] Packages needed by the future expression (n = 0): <none>
[13:36:22.246] Packages needed by future strategies (n = 0): <none>
[13:36:22.247] {
[13:36:22.247]     {
[13:36:22.247]         {
[13:36:22.247]             ...future.startTime <- base::Sys.time()
[13:36:22.247]             {
[13:36:22.247]                 {
[13:36:22.247]                   {
[13:36:22.247]                     {
[13:36:22.247]                       base::local({
[13:36:22.247]                         has_future <- base::requireNamespace("future", 
[13:36:22.247]                           quietly = TRUE)
[13:36:22.247]                         if (has_future) {
[13:36:22.247]                           ns <- base::getNamespace("future")
[13:36:22.247]                           version <- ns[[".package"]][["version"]]
[13:36:22.247]                           if (is.null(version)) 
[13:36:22.247]                             version <- utils::packageVersion("future")
[13:36:22.247]                         }
[13:36:22.247]                         else {
[13:36:22.247]                           version <- NULL
[13:36:22.247]                         }
[13:36:22.247]                         if (!has_future || version < "1.8.0") {
[13:36:22.247]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.247]                             "", base::R.version$version.string), 
[13:36:22.247]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.247]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.247]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.247]                               "release", "version")], collapse = " "), 
[13:36:22.247]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.247]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.247]                             info)
[13:36:22.247]                           info <- base::paste(info, collapse = "; ")
[13:36:22.247]                           if (!has_future) {
[13:36:22.247]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.247]                               info)
[13:36:22.247]                           }
[13:36:22.247]                           else {
[13:36:22.247]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.247]                               info, version)
[13:36:22.247]                           }
[13:36:22.247]                           base::stop(msg)
[13:36:22.247]                         }
[13:36:22.247]                       })
[13:36:22.247]                     }
[13:36:22.247]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.247]                     base::options(mc.cores = 1L)
[13:36:22.247]                   }
[13:36:22.247]                   ...future.strategy.old <- future::plan("list")
[13:36:22.247]                   options(future.plan = NULL)
[13:36:22.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.247]                 }
[13:36:22.247]                 ...future.workdir <- getwd()
[13:36:22.247]             }
[13:36:22.247]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.247]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.247]         }
[13:36:22.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.247]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.247]             base::names(...future.oldOptions))
[13:36:22.247]     }
[13:36:22.247]     if (FALSE) {
[13:36:22.247]     }
[13:36:22.247]     else {
[13:36:22.247]         if (TRUE) {
[13:36:22.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.247]                 open = "w")
[13:36:22.247]         }
[13:36:22.247]         else {
[13:36:22.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.247]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.247]         }
[13:36:22.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.247]             base::sink(type = "output", split = FALSE)
[13:36:22.247]             base::close(...future.stdout)
[13:36:22.247]         }, add = TRUE)
[13:36:22.247]     }
[13:36:22.247]     ...future.frame <- base::sys.nframe()
[13:36:22.247]     ...future.conditions <- base::list()
[13:36:22.247]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.247]     if (FALSE) {
[13:36:22.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.247]     }
[13:36:22.247]     ...future.result <- base::tryCatch({
[13:36:22.247]         base::withCallingHandlers({
[13:36:22.247]             ...future.value <- base::withVisible(base::local({
[13:36:22.247]                 withCallingHandlers({
[13:36:22.247]                   {
[13:36:22.247]                     42
[13:36:22.247]                   }
[13:36:22.247]                 }, immediateCondition = function(cond) {
[13:36:22.247]                   save_rds <- function (object, pathname, ...) 
[13:36:22.247]                   {
[13:36:22.247]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:36:22.247]                     if (file_test("-f", pathname_tmp)) {
[13:36:22.247]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.247]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:36:22.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.247]                         fi_tmp[["mtime"]])
[13:36:22.247]                     }
[13:36:22.247]                     tryCatch({
[13:36:22.247]                       saveRDS(object, file = pathname_tmp, ...)
[13:36:22.247]                     }, error = function(ex) {
[13:36:22.247]                       msg <- conditionMessage(ex)
[13:36:22.247]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.247]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:36:22.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.247]                         fi_tmp[["mtime"]], msg)
[13:36:22.247]                       ex$message <- msg
[13:36:22.247]                       stop(ex)
[13:36:22.247]                     })
[13:36:22.247]                     stopifnot(file_test("-f", pathname_tmp))
[13:36:22.247]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:36:22.247]                     if (!res || file_test("-f", pathname_tmp)) {
[13:36:22.247]                       fi_tmp <- file.info(pathname_tmp)
[13:36:22.247]                       fi <- file.info(pathname)
[13:36:22.247]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:36:22.247]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:36:22.247]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:36:22.247]                         fi[["size"]], fi[["mtime"]])
[13:36:22.247]                       stop(msg)
[13:36:22.247]                     }
[13:36:22.247]                     invisible(pathname)
[13:36:22.247]                   }
[13:36:22.247]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:36:22.247]                     rootPath = tempdir()) 
[13:36:22.247]                   {
[13:36:22.247]                     obj <- list(time = Sys.time(), condition = cond)
[13:36:22.247]                     file <- tempfile(pattern = class(cond)[1], 
[13:36:22.247]                       tmpdir = path, fileext = ".rds")
[13:36:22.247]                     save_rds(obj, file)
[13:36:22.247]                   }
[13:36:22.247]                   saveImmediateCondition(cond, path = "/tmp/RtmpZ4rv1o/.future/immediateConditions")
[13:36:22.247]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.247]                   {
[13:36:22.247]                     inherits <- base::inherits
[13:36:22.247]                     invokeRestart <- base::invokeRestart
[13:36:22.247]                     is.null <- base::is.null
[13:36:22.247]                     muffled <- FALSE
[13:36:22.247]                     if (inherits(cond, "message")) {
[13:36:22.247]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.247]                       if (muffled) 
[13:36:22.247]                         invokeRestart("muffleMessage")
[13:36:22.247]                     }
[13:36:22.247]                     else if (inherits(cond, "warning")) {
[13:36:22.247]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.247]                       if (muffled) 
[13:36:22.247]                         invokeRestart("muffleWarning")
[13:36:22.247]                     }
[13:36:22.247]                     else if (inherits(cond, "condition")) {
[13:36:22.247]                       if (!is.null(pattern)) {
[13:36:22.247]                         computeRestarts <- base::computeRestarts
[13:36:22.247]                         grepl <- base::grepl
[13:36:22.247]                         restarts <- computeRestarts(cond)
[13:36:22.247]                         for (restart in restarts) {
[13:36:22.247]                           name <- restart$name
[13:36:22.247]                           if (is.null(name)) 
[13:36:22.247]                             next
[13:36:22.247]                           if (!grepl(pattern, name)) 
[13:36:22.247]                             next
[13:36:22.247]                           invokeRestart(restart)
[13:36:22.247]                           muffled <- TRUE
[13:36:22.247]                           break
[13:36:22.247]                         }
[13:36:22.247]                       }
[13:36:22.247]                     }
[13:36:22.247]                     invisible(muffled)
[13:36:22.247]                   }
[13:36:22.247]                   muffleCondition(cond)
[13:36:22.247]                 })
[13:36:22.247]             }))
[13:36:22.247]             future::FutureResult(value = ...future.value$value, 
[13:36:22.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.247]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.247]                     ...future.globalenv.names))
[13:36:22.247]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.247]         }, condition = base::local({
[13:36:22.247]             c <- base::c
[13:36:22.247]             inherits <- base::inherits
[13:36:22.247]             invokeRestart <- base::invokeRestart
[13:36:22.247]             length <- base::length
[13:36:22.247]             list <- base::list
[13:36:22.247]             seq.int <- base::seq.int
[13:36:22.247]             signalCondition <- base::signalCondition
[13:36:22.247]             sys.calls <- base::sys.calls
[13:36:22.247]             `[[` <- base::`[[`
[13:36:22.247]             `+` <- base::`+`
[13:36:22.247]             `<<-` <- base::`<<-`
[13:36:22.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.247]                   3L)]
[13:36:22.247]             }
[13:36:22.247]             function(cond) {
[13:36:22.247]                 is_error <- inherits(cond, "error")
[13:36:22.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.247]                   NULL)
[13:36:22.247]                 if (is_error) {
[13:36:22.247]                   sessionInformation <- function() {
[13:36:22.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.247]                       search = base::search(), system = base::Sys.info())
[13:36:22.247]                   }
[13:36:22.247]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.247]                     cond$call), session = sessionInformation(), 
[13:36:22.247]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.247]                   signalCondition(cond)
[13:36:22.247]                 }
[13:36:22.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.247]                 "immediateCondition"))) {
[13:36:22.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.247]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.247]                   if (TRUE && !signal) {
[13:36:22.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.247]                     {
[13:36:22.247]                       inherits <- base::inherits
[13:36:22.247]                       invokeRestart <- base::invokeRestart
[13:36:22.247]                       is.null <- base::is.null
[13:36:22.247]                       muffled <- FALSE
[13:36:22.247]                       if (inherits(cond, "message")) {
[13:36:22.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.247]                         if (muffled) 
[13:36:22.247]                           invokeRestart("muffleMessage")
[13:36:22.247]                       }
[13:36:22.247]                       else if (inherits(cond, "warning")) {
[13:36:22.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.247]                         if (muffled) 
[13:36:22.247]                           invokeRestart("muffleWarning")
[13:36:22.247]                       }
[13:36:22.247]                       else if (inherits(cond, "condition")) {
[13:36:22.247]                         if (!is.null(pattern)) {
[13:36:22.247]                           computeRestarts <- base::computeRestarts
[13:36:22.247]                           grepl <- base::grepl
[13:36:22.247]                           restarts <- computeRestarts(cond)
[13:36:22.247]                           for (restart in restarts) {
[13:36:22.247]                             name <- restart$name
[13:36:22.247]                             if (is.null(name)) 
[13:36:22.247]                               next
[13:36:22.247]                             if (!grepl(pattern, name)) 
[13:36:22.247]                               next
[13:36:22.247]                             invokeRestart(restart)
[13:36:22.247]                             muffled <- TRUE
[13:36:22.247]                             break
[13:36:22.247]                           }
[13:36:22.247]                         }
[13:36:22.247]                       }
[13:36:22.247]                       invisible(muffled)
[13:36:22.247]                     }
[13:36:22.247]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.247]                   }
[13:36:22.247]                 }
[13:36:22.247]                 else {
[13:36:22.247]                   if (TRUE) {
[13:36:22.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.247]                     {
[13:36:22.247]                       inherits <- base::inherits
[13:36:22.247]                       invokeRestart <- base::invokeRestart
[13:36:22.247]                       is.null <- base::is.null
[13:36:22.247]                       muffled <- FALSE
[13:36:22.247]                       if (inherits(cond, "message")) {
[13:36:22.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.247]                         if (muffled) 
[13:36:22.247]                           invokeRestart("muffleMessage")
[13:36:22.247]                       }
[13:36:22.247]                       else if (inherits(cond, "warning")) {
[13:36:22.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.247]                         if (muffled) 
[13:36:22.247]                           invokeRestart("muffleWarning")
[13:36:22.247]                       }
[13:36:22.247]                       else if (inherits(cond, "condition")) {
[13:36:22.247]                         if (!is.null(pattern)) {
[13:36:22.247]                           computeRestarts <- base::computeRestarts
[13:36:22.247]                           grepl <- base::grepl
[13:36:22.247]                           restarts <- computeRestarts(cond)
[13:36:22.247]                           for (restart in restarts) {
[13:36:22.247]                             name <- restart$name
[13:36:22.247]                             if (is.null(name)) 
[13:36:22.247]                               next
[13:36:22.247]                             if (!grepl(pattern, name)) 
[13:36:22.247]                               next
[13:36:22.247]                             invokeRestart(restart)
[13:36:22.247]                             muffled <- TRUE
[13:36:22.247]                             break
[13:36:22.247]                           }
[13:36:22.247]                         }
[13:36:22.247]                       }
[13:36:22.247]                       invisible(muffled)
[13:36:22.247]                     }
[13:36:22.247]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.247]                   }
[13:36:22.247]                 }
[13:36:22.247]             }
[13:36:22.247]         }))
[13:36:22.247]     }, error = function(ex) {
[13:36:22.247]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.247]                 ...future.rng), started = ...future.startTime, 
[13:36:22.247]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.247]             version = "1.8"), class = "FutureResult")
[13:36:22.247]     }, finally = {
[13:36:22.247]         if (!identical(...future.workdir, getwd())) 
[13:36:22.247]             setwd(...future.workdir)
[13:36:22.247]         {
[13:36:22.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.247]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.247]             }
[13:36:22.247]             base::options(...future.oldOptions)
[13:36:22.247]             if (.Platform$OS.type == "windows") {
[13:36:22.247]                 old_names <- names(...future.oldEnvVars)
[13:36:22.247]                 envs <- base::Sys.getenv()
[13:36:22.247]                 names <- names(envs)
[13:36:22.247]                 common <- intersect(names, old_names)
[13:36:22.247]                 added <- setdiff(names, old_names)
[13:36:22.247]                 removed <- setdiff(old_names, names)
[13:36:22.247]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.247]                   envs[common]]
[13:36:22.247]                 NAMES <- toupper(changed)
[13:36:22.247]                 args <- list()
[13:36:22.247]                 for (kk in seq_along(NAMES)) {
[13:36:22.247]                   name <- changed[[kk]]
[13:36:22.247]                   NAME <- NAMES[[kk]]
[13:36:22.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.247]                     next
[13:36:22.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.247]                 }
[13:36:22.247]                 NAMES <- toupper(added)
[13:36:22.247]                 for (kk in seq_along(NAMES)) {
[13:36:22.247]                   name <- added[[kk]]
[13:36:22.247]                   NAME <- NAMES[[kk]]
[13:36:22.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.247]                     next
[13:36:22.247]                   args[[name]] <- ""
[13:36:22.247]                 }
[13:36:22.247]                 NAMES <- toupper(removed)
[13:36:22.247]                 for (kk in seq_along(NAMES)) {
[13:36:22.247]                   name <- removed[[kk]]
[13:36:22.247]                   NAME <- NAMES[[kk]]
[13:36:22.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.247]                     next
[13:36:22.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.247]                 }
[13:36:22.247]                 if (length(args) > 0) 
[13:36:22.247]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.247]             }
[13:36:22.247]             else {
[13:36:22.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.247]             }
[13:36:22.247]             {
[13:36:22.247]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.247]                   0L) {
[13:36:22.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.247]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.247]                   base::options(opts)
[13:36:22.247]                 }
[13:36:22.247]                 {
[13:36:22.247]                   {
[13:36:22.247]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.247]                     NULL
[13:36:22.247]                   }
[13:36:22.247]                   options(future.plan = NULL)
[13:36:22.247]                   if (is.na(NA_character_)) 
[13:36:22.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.247]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.247]                     .init = FALSE)
[13:36:22.247]                 }
[13:36:22.247]             }
[13:36:22.247]         }
[13:36:22.247]     })
[13:36:22.247]     if (TRUE) {
[13:36:22.247]         base::sink(type = "output", split = FALSE)
[13:36:22.247]         if (TRUE) {
[13:36:22.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.247]         }
[13:36:22.247]         else {
[13:36:22.247]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.247]         }
[13:36:22.247]         base::close(...future.stdout)
[13:36:22.247]         ...future.stdout <- NULL
[13:36:22.247]     }
[13:36:22.247]     ...future.result$conditions <- ...future.conditions
[13:36:22.247]     ...future.result$finished <- base::Sys.time()
[13:36:22.247]     ...future.result
[13:36:22.247] }
[13:36:22.249] requestCore(): workers = 2
[13:36:22.251] MulticoreFuture started
[13:36:22.251] - Launch lazy future ... done
[13:36:22.251] run() for ‘MulticoreFuture’ ... done
[13:36:22.252] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.252] List of future strategies:
[13:36:22.252] 1. sequential:
[13:36:22.252]    - args: function (..., envir = parent.frame())
[13:36:22.252]    - tweaked: FALSE
[13:36:22.252]    - call: NULL
[13:36:22.253] plan(): nbrOfWorkers() = 1
[13:36:22.255] plan(): Setting new future strategy stack:
[13:36:22.255] List of future strategies:
[13:36:22.255] 1. multicore:
[13:36:22.255]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:36:22.255]    - tweaked: FALSE
[13:36:22.255]    - call: plan(strategy)
[13:36:22.260] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.260] result() for MulticoreFuture ...
[13:36:22.261] result() for MulticoreFuture ...
[13:36:22.261] result() for MulticoreFuture ... done
[13:36:22.262] result() for MulticoreFuture ... done
[13:36:22.262] result() for MulticoreFuture ...
[13:36:22.262] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[13:36:22.263] plan(): Setting new future strategy stack:
[13:36:22.263] List of future strategies:
[13:36:22.263] 1. multisession:
[13:36:22.263]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:22.263]    - tweaked: FALSE
[13:36:22.263]    - call: plan(strategy)
[13:36:22.263] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:36:22.263] multisession:
[13:36:22.263] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:36:22.263] - tweaked: FALSE
[13:36:22.263] - call: plan(strategy)
[13:36:22.270] getGlobalsAndPackages() ...
[13:36:22.270] Not searching for globals
[13:36:22.270] - globals: [0] <none>
[13:36:22.271] getGlobalsAndPackages() ... DONE
[13:36:22.271] [local output] makeClusterPSOCK() ...
[13:36:22.314] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:36:22.315] [local output] Base port: 11422
[13:36:22.315] [local output] Getting setup options for 2 cluster nodes ...
[13:36:22.315] [local output]  - Node 1 of 2 ...
[13:36:22.316] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:22.316] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ4rv1o/worker.rank=1.parallelly.parent=81279.13d7f7721659d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZ4rv1o/worker.rank=1.parallelly.parent=81279.13d7f7721659d.pid")'’
[13:36:22.504] - Possible to infer worker's PID: TRUE
[13:36:22.504] [local output] Rscript port: 11422

[13:36:22.505] [local output]  - Node 2 of 2 ...
[13:36:22.505] [local output] localMachine=TRUE => revtunnel=FALSE

[13:36:22.506] [local output] Rscript port: 11422

[13:36:22.506] [local output] Getting setup options for 2 cluster nodes ... done
[13:36:22.506] [local output]  - Parallel setup requested for some PSOCK nodes
[13:36:22.507] [local output] Setting up PSOCK nodes in parallel
[13:36:22.507] List of 36
[13:36:22.507]  $ worker          : chr "localhost"
[13:36:22.507]   ..- attr(*, "localhost")= logi TRUE
[13:36:22.507]  $ master          : chr "localhost"
[13:36:22.507]  $ port            : int 11422
[13:36:22.507]  $ connectTimeout  : num 120
[13:36:22.507]  $ timeout         : num 2592000
[13:36:22.507]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:36:22.507]  $ homogeneous     : logi TRUE
[13:36:22.507]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:36:22.507]  $ rscript_envs    : NULL
[13:36:22.507]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:22.507]  $ rscript_startup : NULL
[13:36:22.507]  $ rscript_sh      : chr "sh"
[13:36:22.507]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:22.507]  $ methods         : logi TRUE
[13:36:22.507]  $ socketOptions   : chr "no-delay"
[13:36:22.507]  $ useXDR          : logi FALSE
[13:36:22.507]  $ outfile         : chr "/dev/null"
[13:36:22.507]  $ renice          : int NA
[13:36:22.507]  $ rshcmd          : NULL
[13:36:22.507]  $ user            : chr(0) 
[13:36:22.507]  $ revtunnel       : logi FALSE
[13:36:22.507]  $ rshlogfile      : NULL
[13:36:22.507]  $ rshopts         : chr(0) 
[13:36:22.507]  $ rank            : int 1
[13:36:22.507]  $ manual          : logi FALSE
[13:36:22.507]  $ dryrun          : logi FALSE
[13:36:22.507]  $ quiet           : logi FALSE
[13:36:22.507]  $ setup_strategy  : chr "parallel"
[13:36:22.507]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:22.507]  $ pidfile         : chr "/tmp/RtmpZ4rv1o/worker.rank=1.parallelly.parent=81279.13d7f7721659d.pid"
[13:36:22.507]  $ rshcmd_label    : NULL
[13:36:22.507]  $ rsh_call        : NULL
[13:36:22.507]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:36:22.507]  $ localMachine    : logi TRUE
[13:36:22.507]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:36:22.507]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:36:22.507]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:36:22.507]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:36:22.507]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:36:22.507]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:36:22.507]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:36:22.507]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:36:22.507]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:36:22.507]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:36:22.507]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:36:22.507]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:36:22.507]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:36:22.507]  $ arguments       :List of 28
[13:36:22.507]   ..$ worker          : chr "localhost"
[13:36:22.507]   ..$ master          : NULL
[13:36:22.507]   ..$ port            : int 11422
[13:36:22.507]   ..$ connectTimeout  : num 120
[13:36:22.507]   ..$ timeout         : num 2592000
[13:36:22.507]   ..$ rscript         : NULL
[13:36:22.507]   ..$ homogeneous     : NULL
[13:36:22.507]   ..$ rscript_args    : NULL
[13:36:22.507]   ..$ rscript_envs    : NULL
[13:36:22.507]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:36:22.507]   ..$ rscript_startup : NULL
[13:36:22.507]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:36:22.507]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:36:22.507]   ..$ methods         : logi TRUE
[13:36:22.507]   ..$ socketOptions   : chr "no-delay"
[13:36:22.507]   ..$ useXDR          : logi FALSE
[13:36:22.507]   ..$ outfile         : chr "/dev/null"
[13:36:22.507]   ..$ renice          : int NA
[13:36:22.507]   ..$ rshcmd          : NULL
[13:36:22.507]   ..$ user            : NULL
[13:36:22.507]   ..$ revtunnel       : logi NA
[13:36:22.507]   ..$ rshlogfile      : NULL
[13:36:22.507]   ..$ rshopts         : NULL
[13:36:22.507]   ..$ rank            : int 1
[13:36:22.507]   ..$ manual          : logi FALSE
[13:36:22.507]   ..$ dryrun          : logi FALSE
[13:36:22.507]   ..$ quiet           : logi FALSE
[13:36:22.507]   ..$ setup_strategy  : chr "parallel"
[13:36:22.507]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:36:22.526] [local output] System call to launch all workers:
[13:36:22.526] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZ4rv1o/worker.rank=1.parallelly.parent=81279.13d7f7721659d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11422 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:36:22.526] [local output] Starting PSOCK main server
[13:36:22.532] [local output] Workers launched
[13:36:22.532] [local output] Waiting for workers to connect back
[13:36:22.532]  - [local output] 0 workers out of 2 ready
[13:36:22.797]  - [local output] 0 workers out of 2 ready
[13:36:22.798]  - [local output] 1 workers out of 2 ready
[13:36:22.807]  - [local output] 1 workers out of 2 ready
[13:36:22.807]  - [local output] 2 workers out of 2 ready
[13:36:22.807] [local output] Launching of workers completed
[13:36:22.807] [local output] Collecting session information from workers
[13:36:22.808] [local output]  - Worker #1 of 2
[13:36:22.809] [local output]  - Worker #2 of 2
[13:36:22.809] [local output] makeClusterPSOCK() ... done
[13:36:22.820] Packages needed by the future expression (n = 0): <none>
[13:36:22.820] Packages needed by future strategies (n = 0): <none>
[13:36:22.821] {
[13:36:22.821]     {
[13:36:22.821]         {
[13:36:22.821]             ...future.startTime <- base::Sys.time()
[13:36:22.821]             {
[13:36:22.821]                 {
[13:36:22.821]                   {
[13:36:22.821]                     {
[13:36:22.821]                       base::local({
[13:36:22.821]                         has_future <- base::requireNamespace("future", 
[13:36:22.821]                           quietly = TRUE)
[13:36:22.821]                         if (has_future) {
[13:36:22.821]                           ns <- base::getNamespace("future")
[13:36:22.821]                           version <- ns[[".package"]][["version"]]
[13:36:22.821]                           if (is.null(version)) 
[13:36:22.821]                             version <- utils::packageVersion("future")
[13:36:22.821]                         }
[13:36:22.821]                         else {
[13:36:22.821]                           version <- NULL
[13:36:22.821]                         }
[13:36:22.821]                         if (!has_future || version < "1.8.0") {
[13:36:22.821]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.821]                             "", base::R.version$version.string), 
[13:36:22.821]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.821]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.821]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.821]                               "release", "version")], collapse = " "), 
[13:36:22.821]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.821]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.821]                             info)
[13:36:22.821]                           info <- base::paste(info, collapse = "; ")
[13:36:22.821]                           if (!has_future) {
[13:36:22.821]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.821]                               info)
[13:36:22.821]                           }
[13:36:22.821]                           else {
[13:36:22.821]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.821]                               info, version)
[13:36:22.821]                           }
[13:36:22.821]                           base::stop(msg)
[13:36:22.821]                         }
[13:36:22.821]                       })
[13:36:22.821]                     }
[13:36:22.821]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.821]                     base::options(mc.cores = 1L)
[13:36:22.821]                   }
[13:36:22.821]                   ...future.strategy.old <- future::plan("list")
[13:36:22.821]                   options(future.plan = NULL)
[13:36:22.821]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.821]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.821]                 }
[13:36:22.821]                 ...future.workdir <- getwd()
[13:36:22.821]             }
[13:36:22.821]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.821]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.821]         }
[13:36:22.821]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.821]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.821]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.821]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.821]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.821]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.821]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.821]             base::names(...future.oldOptions))
[13:36:22.821]     }
[13:36:22.821]     if (FALSE) {
[13:36:22.821]     }
[13:36:22.821]     else {
[13:36:22.821]         if (TRUE) {
[13:36:22.821]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.821]                 open = "w")
[13:36:22.821]         }
[13:36:22.821]         else {
[13:36:22.821]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.821]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.821]         }
[13:36:22.821]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.821]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.821]             base::sink(type = "output", split = FALSE)
[13:36:22.821]             base::close(...future.stdout)
[13:36:22.821]         }, add = TRUE)
[13:36:22.821]     }
[13:36:22.821]     ...future.frame <- base::sys.nframe()
[13:36:22.821]     ...future.conditions <- base::list()
[13:36:22.821]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.821]     if (FALSE) {
[13:36:22.821]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.821]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.821]     }
[13:36:22.821]     ...future.result <- base::tryCatch({
[13:36:22.821]         base::withCallingHandlers({
[13:36:22.821]             ...future.value <- base::withVisible(base::local({
[13:36:22.821]                 ...future.makeSendCondition <- base::local({
[13:36:22.821]                   sendCondition <- NULL
[13:36:22.821]                   function(frame = 1L) {
[13:36:22.821]                     if (is.function(sendCondition)) 
[13:36:22.821]                       return(sendCondition)
[13:36:22.821]                     ns <- getNamespace("parallel")
[13:36:22.821]                     if (exists("sendData", mode = "function", 
[13:36:22.821]                       envir = ns)) {
[13:36:22.821]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:22.821]                         envir = ns)
[13:36:22.821]                       envir <- sys.frame(frame)
[13:36:22.821]                       master <- NULL
[13:36:22.821]                       while (!identical(envir, .GlobalEnv) && 
[13:36:22.821]                         !identical(envir, emptyenv())) {
[13:36:22.821]                         if (exists("master", mode = "list", envir = envir, 
[13:36:22.821]                           inherits = FALSE)) {
[13:36:22.821]                           master <- get("master", mode = "list", 
[13:36:22.821]                             envir = envir, inherits = FALSE)
[13:36:22.821]                           if (inherits(master, c("SOCKnode", 
[13:36:22.821]                             "SOCK0node"))) {
[13:36:22.821]                             sendCondition <<- function(cond) {
[13:36:22.821]                               data <- list(type = "VALUE", value = cond, 
[13:36:22.821]                                 success = TRUE)
[13:36:22.821]                               parallel_sendData(master, data)
[13:36:22.821]                             }
[13:36:22.821]                             return(sendCondition)
[13:36:22.821]                           }
[13:36:22.821]                         }
[13:36:22.821]                         frame <- frame + 1L
[13:36:22.821]                         envir <- sys.frame(frame)
[13:36:22.821]                       }
[13:36:22.821]                     }
[13:36:22.821]                     sendCondition <<- function(cond) NULL
[13:36:22.821]                   }
[13:36:22.821]                 })
[13:36:22.821]                 withCallingHandlers({
[13:36:22.821]                   NA
[13:36:22.821]                 }, immediateCondition = function(cond) {
[13:36:22.821]                   sendCondition <- ...future.makeSendCondition()
[13:36:22.821]                   sendCondition(cond)
[13:36:22.821]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.821]                   {
[13:36:22.821]                     inherits <- base::inherits
[13:36:22.821]                     invokeRestart <- base::invokeRestart
[13:36:22.821]                     is.null <- base::is.null
[13:36:22.821]                     muffled <- FALSE
[13:36:22.821]                     if (inherits(cond, "message")) {
[13:36:22.821]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.821]                       if (muffled) 
[13:36:22.821]                         invokeRestart("muffleMessage")
[13:36:22.821]                     }
[13:36:22.821]                     else if (inherits(cond, "warning")) {
[13:36:22.821]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.821]                       if (muffled) 
[13:36:22.821]                         invokeRestart("muffleWarning")
[13:36:22.821]                     }
[13:36:22.821]                     else if (inherits(cond, "condition")) {
[13:36:22.821]                       if (!is.null(pattern)) {
[13:36:22.821]                         computeRestarts <- base::computeRestarts
[13:36:22.821]                         grepl <- base::grepl
[13:36:22.821]                         restarts <- computeRestarts(cond)
[13:36:22.821]                         for (restart in restarts) {
[13:36:22.821]                           name <- restart$name
[13:36:22.821]                           if (is.null(name)) 
[13:36:22.821]                             next
[13:36:22.821]                           if (!grepl(pattern, name)) 
[13:36:22.821]                             next
[13:36:22.821]                           invokeRestart(restart)
[13:36:22.821]                           muffled <- TRUE
[13:36:22.821]                           break
[13:36:22.821]                         }
[13:36:22.821]                       }
[13:36:22.821]                     }
[13:36:22.821]                     invisible(muffled)
[13:36:22.821]                   }
[13:36:22.821]                   muffleCondition(cond)
[13:36:22.821]                 })
[13:36:22.821]             }))
[13:36:22.821]             future::FutureResult(value = ...future.value$value, 
[13:36:22.821]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.821]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.821]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.821]                     ...future.globalenv.names))
[13:36:22.821]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.821]         }, condition = base::local({
[13:36:22.821]             c <- base::c
[13:36:22.821]             inherits <- base::inherits
[13:36:22.821]             invokeRestart <- base::invokeRestart
[13:36:22.821]             length <- base::length
[13:36:22.821]             list <- base::list
[13:36:22.821]             seq.int <- base::seq.int
[13:36:22.821]             signalCondition <- base::signalCondition
[13:36:22.821]             sys.calls <- base::sys.calls
[13:36:22.821]             `[[` <- base::`[[`
[13:36:22.821]             `+` <- base::`+`
[13:36:22.821]             `<<-` <- base::`<<-`
[13:36:22.821]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.821]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.821]                   3L)]
[13:36:22.821]             }
[13:36:22.821]             function(cond) {
[13:36:22.821]                 is_error <- inherits(cond, "error")
[13:36:22.821]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.821]                   NULL)
[13:36:22.821]                 if (is_error) {
[13:36:22.821]                   sessionInformation <- function() {
[13:36:22.821]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.821]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.821]                       search = base::search(), system = base::Sys.info())
[13:36:22.821]                   }
[13:36:22.821]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.821]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.821]                     cond$call), session = sessionInformation(), 
[13:36:22.821]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.821]                   signalCondition(cond)
[13:36:22.821]                 }
[13:36:22.821]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.821]                 "immediateCondition"))) {
[13:36:22.821]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.821]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.821]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.821]                   if (TRUE && !signal) {
[13:36:22.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.821]                     {
[13:36:22.821]                       inherits <- base::inherits
[13:36:22.821]                       invokeRestart <- base::invokeRestart
[13:36:22.821]                       is.null <- base::is.null
[13:36:22.821]                       muffled <- FALSE
[13:36:22.821]                       if (inherits(cond, "message")) {
[13:36:22.821]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.821]                         if (muffled) 
[13:36:22.821]                           invokeRestart("muffleMessage")
[13:36:22.821]                       }
[13:36:22.821]                       else if (inherits(cond, "warning")) {
[13:36:22.821]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.821]                         if (muffled) 
[13:36:22.821]                           invokeRestart("muffleWarning")
[13:36:22.821]                       }
[13:36:22.821]                       else if (inherits(cond, "condition")) {
[13:36:22.821]                         if (!is.null(pattern)) {
[13:36:22.821]                           computeRestarts <- base::computeRestarts
[13:36:22.821]                           grepl <- base::grepl
[13:36:22.821]                           restarts <- computeRestarts(cond)
[13:36:22.821]                           for (restart in restarts) {
[13:36:22.821]                             name <- restart$name
[13:36:22.821]                             if (is.null(name)) 
[13:36:22.821]                               next
[13:36:22.821]                             if (!grepl(pattern, name)) 
[13:36:22.821]                               next
[13:36:22.821]                             invokeRestart(restart)
[13:36:22.821]                             muffled <- TRUE
[13:36:22.821]                             break
[13:36:22.821]                           }
[13:36:22.821]                         }
[13:36:22.821]                       }
[13:36:22.821]                       invisible(muffled)
[13:36:22.821]                     }
[13:36:22.821]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.821]                   }
[13:36:22.821]                 }
[13:36:22.821]                 else {
[13:36:22.821]                   if (TRUE) {
[13:36:22.821]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.821]                     {
[13:36:22.821]                       inherits <- base::inherits
[13:36:22.821]                       invokeRestart <- base::invokeRestart
[13:36:22.821]                       is.null <- base::is.null
[13:36:22.821]                       muffled <- FALSE
[13:36:22.821]                       if (inherits(cond, "message")) {
[13:36:22.821]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.821]                         if (muffled) 
[13:36:22.821]                           invokeRestart("muffleMessage")
[13:36:22.821]                       }
[13:36:22.821]                       else if (inherits(cond, "warning")) {
[13:36:22.821]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.821]                         if (muffled) 
[13:36:22.821]                           invokeRestart("muffleWarning")
[13:36:22.821]                       }
[13:36:22.821]                       else if (inherits(cond, "condition")) {
[13:36:22.821]                         if (!is.null(pattern)) {
[13:36:22.821]                           computeRestarts <- base::computeRestarts
[13:36:22.821]                           grepl <- base::grepl
[13:36:22.821]                           restarts <- computeRestarts(cond)
[13:36:22.821]                           for (restart in restarts) {
[13:36:22.821]                             name <- restart$name
[13:36:22.821]                             if (is.null(name)) 
[13:36:22.821]                               next
[13:36:22.821]                             if (!grepl(pattern, name)) 
[13:36:22.821]                               next
[13:36:22.821]                             invokeRestart(restart)
[13:36:22.821]                             muffled <- TRUE
[13:36:22.821]                             break
[13:36:22.821]                           }
[13:36:22.821]                         }
[13:36:22.821]                       }
[13:36:22.821]                       invisible(muffled)
[13:36:22.821]                     }
[13:36:22.821]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.821]                   }
[13:36:22.821]                 }
[13:36:22.821]             }
[13:36:22.821]         }))
[13:36:22.821]     }, error = function(ex) {
[13:36:22.821]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.821]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.821]                 ...future.rng), started = ...future.startTime, 
[13:36:22.821]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.821]             version = "1.8"), class = "FutureResult")
[13:36:22.821]     }, finally = {
[13:36:22.821]         if (!identical(...future.workdir, getwd())) 
[13:36:22.821]             setwd(...future.workdir)
[13:36:22.821]         {
[13:36:22.821]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.821]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.821]             }
[13:36:22.821]             base::options(...future.oldOptions)
[13:36:22.821]             if (.Platform$OS.type == "windows") {
[13:36:22.821]                 old_names <- names(...future.oldEnvVars)
[13:36:22.821]                 envs <- base::Sys.getenv()
[13:36:22.821]                 names <- names(envs)
[13:36:22.821]                 common <- intersect(names, old_names)
[13:36:22.821]                 added <- setdiff(names, old_names)
[13:36:22.821]                 removed <- setdiff(old_names, names)
[13:36:22.821]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.821]                   envs[common]]
[13:36:22.821]                 NAMES <- toupper(changed)
[13:36:22.821]                 args <- list()
[13:36:22.821]                 for (kk in seq_along(NAMES)) {
[13:36:22.821]                   name <- changed[[kk]]
[13:36:22.821]                   NAME <- NAMES[[kk]]
[13:36:22.821]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.821]                     next
[13:36:22.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.821]                 }
[13:36:22.821]                 NAMES <- toupper(added)
[13:36:22.821]                 for (kk in seq_along(NAMES)) {
[13:36:22.821]                   name <- added[[kk]]
[13:36:22.821]                   NAME <- NAMES[[kk]]
[13:36:22.821]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.821]                     next
[13:36:22.821]                   args[[name]] <- ""
[13:36:22.821]                 }
[13:36:22.821]                 NAMES <- toupper(removed)
[13:36:22.821]                 for (kk in seq_along(NAMES)) {
[13:36:22.821]                   name <- removed[[kk]]
[13:36:22.821]                   NAME <- NAMES[[kk]]
[13:36:22.821]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.821]                     next
[13:36:22.821]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.821]                 }
[13:36:22.821]                 if (length(args) > 0) 
[13:36:22.821]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.821]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.821]             }
[13:36:22.821]             else {
[13:36:22.821]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.821]             }
[13:36:22.821]             {
[13:36:22.821]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.821]                   0L) {
[13:36:22.821]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.821]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.821]                   base::options(opts)
[13:36:22.821]                 }
[13:36:22.821]                 {
[13:36:22.821]                   {
[13:36:22.821]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.821]                     NULL
[13:36:22.821]                   }
[13:36:22.821]                   options(future.plan = NULL)
[13:36:22.821]                   if (is.na(NA_character_)) 
[13:36:22.821]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.821]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.821]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.821]                     .init = FALSE)
[13:36:22.821]                 }
[13:36:22.821]             }
[13:36:22.821]         }
[13:36:22.821]     })
[13:36:22.821]     if (TRUE) {
[13:36:22.821]         base::sink(type = "output", split = FALSE)
[13:36:22.821]         if (TRUE) {
[13:36:22.821]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.821]         }
[13:36:22.821]         else {
[13:36:22.821]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.821]         }
[13:36:22.821]         base::close(...future.stdout)
[13:36:22.821]         ...future.stdout <- NULL
[13:36:22.821]     }
[13:36:22.821]     ...future.result$conditions <- ...future.conditions
[13:36:22.821]     ...future.result$finished <- base::Sys.time()
[13:36:22.821]     ...future.result
[13:36:22.821] }
[13:36:22.874] MultisessionFuture started
[13:36:22.875] result() for ClusterFuture ...
[13:36:22.875] receiveMessageFromWorker() for ClusterFuture ...
[13:36:22.875] - Validating connection of MultisessionFuture
[13:36:22.908] - received message: FutureResult
[13:36:22.908] - Received FutureResult
[13:36:22.908] - Erased future from FutureRegistry
[13:36:22.908] result() for ClusterFuture ...
[13:36:22.908] - result already collected: FutureResult
[13:36:22.909] result() for ClusterFuture ... done
[13:36:22.909] receiveMessageFromWorker() for ClusterFuture ... done
[13:36:22.909] result() for ClusterFuture ... done
[13:36:22.909] result() for ClusterFuture ...
[13:36:22.909] - result already collected: FutureResult
[13:36:22.909] result() for ClusterFuture ... done
[13:36:22.909] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:36:22.913] plan(): nbrOfWorkers() = 2
[13:36:22.917] getGlobalsAndPackages() ...
[13:36:22.917] 
[13:36:22.917] - globals: [0] <none>
[13:36:22.917] getGlobalsAndPackages() ... DONE
[13:36:22.929] Packages needed by the future expression (n = 0): <none>
[13:36:22.929] Packages needed by future strategies (n = 0): <none>
[13:36:22.929] {
[13:36:22.929]     {
[13:36:22.929]         {
[13:36:22.929]             ...future.startTime <- base::Sys.time()
[13:36:22.929]             {
[13:36:22.929]                 {
[13:36:22.929]                   {
[13:36:22.929]                     {
[13:36:22.929]                       base::local({
[13:36:22.929]                         has_future <- base::requireNamespace("future", 
[13:36:22.929]                           quietly = TRUE)
[13:36:22.929]                         if (has_future) {
[13:36:22.929]                           ns <- base::getNamespace("future")
[13:36:22.929]                           version <- ns[[".package"]][["version"]]
[13:36:22.929]                           if (is.null(version)) 
[13:36:22.929]                             version <- utils::packageVersion("future")
[13:36:22.929]                         }
[13:36:22.929]                         else {
[13:36:22.929]                           version <- NULL
[13:36:22.929]                         }
[13:36:22.929]                         if (!has_future || version < "1.8.0") {
[13:36:22.929]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.929]                             "", base::R.version$version.string), 
[13:36:22.929]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.929]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.929]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.929]                               "release", "version")], collapse = " "), 
[13:36:22.929]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.929]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.929]                             info)
[13:36:22.929]                           info <- base::paste(info, collapse = "; ")
[13:36:22.929]                           if (!has_future) {
[13:36:22.929]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.929]                               info)
[13:36:22.929]                           }
[13:36:22.929]                           else {
[13:36:22.929]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.929]                               info, version)
[13:36:22.929]                           }
[13:36:22.929]                           base::stop(msg)
[13:36:22.929]                         }
[13:36:22.929]                       })
[13:36:22.929]                     }
[13:36:22.929]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.929]                     base::options(mc.cores = 1L)
[13:36:22.929]                   }
[13:36:22.929]                   ...future.strategy.old <- future::plan("list")
[13:36:22.929]                   options(future.plan = NULL)
[13:36:22.929]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.929]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.929]                 }
[13:36:22.929]                 ...future.workdir <- getwd()
[13:36:22.929]             }
[13:36:22.929]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.929]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.929]         }
[13:36:22.929]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.929]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.929]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.929]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.929]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.929]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.929]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.929]             base::names(...future.oldOptions))
[13:36:22.929]     }
[13:36:22.929]     if (FALSE) {
[13:36:22.929]     }
[13:36:22.929]     else {
[13:36:22.929]         if (TRUE) {
[13:36:22.929]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.929]                 open = "w")
[13:36:22.929]         }
[13:36:22.929]         else {
[13:36:22.929]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.929]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.929]         }
[13:36:22.929]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.929]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.929]             base::sink(type = "output", split = FALSE)
[13:36:22.929]             base::close(...future.stdout)
[13:36:22.929]         }, add = TRUE)
[13:36:22.929]     }
[13:36:22.929]     ...future.frame <- base::sys.nframe()
[13:36:22.929]     ...future.conditions <- base::list()
[13:36:22.929]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.929]     if (FALSE) {
[13:36:22.929]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.929]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.929]     }
[13:36:22.929]     ...future.result <- base::tryCatch({
[13:36:22.929]         base::withCallingHandlers({
[13:36:22.929]             ...future.value <- base::withVisible(base::local({
[13:36:22.929]                 ...future.makeSendCondition <- base::local({
[13:36:22.929]                   sendCondition <- NULL
[13:36:22.929]                   function(frame = 1L) {
[13:36:22.929]                     if (is.function(sendCondition)) 
[13:36:22.929]                       return(sendCondition)
[13:36:22.929]                     ns <- getNamespace("parallel")
[13:36:22.929]                     if (exists("sendData", mode = "function", 
[13:36:22.929]                       envir = ns)) {
[13:36:22.929]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:22.929]                         envir = ns)
[13:36:22.929]                       envir <- sys.frame(frame)
[13:36:22.929]                       master <- NULL
[13:36:22.929]                       while (!identical(envir, .GlobalEnv) && 
[13:36:22.929]                         !identical(envir, emptyenv())) {
[13:36:22.929]                         if (exists("master", mode = "list", envir = envir, 
[13:36:22.929]                           inherits = FALSE)) {
[13:36:22.929]                           master <- get("master", mode = "list", 
[13:36:22.929]                             envir = envir, inherits = FALSE)
[13:36:22.929]                           if (inherits(master, c("SOCKnode", 
[13:36:22.929]                             "SOCK0node"))) {
[13:36:22.929]                             sendCondition <<- function(cond) {
[13:36:22.929]                               data <- list(type = "VALUE", value = cond, 
[13:36:22.929]                                 success = TRUE)
[13:36:22.929]                               parallel_sendData(master, data)
[13:36:22.929]                             }
[13:36:22.929]                             return(sendCondition)
[13:36:22.929]                           }
[13:36:22.929]                         }
[13:36:22.929]                         frame <- frame + 1L
[13:36:22.929]                         envir <- sys.frame(frame)
[13:36:22.929]                       }
[13:36:22.929]                     }
[13:36:22.929]                     sendCondition <<- function(cond) NULL
[13:36:22.929]                   }
[13:36:22.929]                 })
[13:36:22.929]                 withCallingHandlers({
[13:36:22.929]                   42
[13:36:22.929]                 }, immediateCondition = function(cond) {
[13:36:22.929]                   sendCondition <- ...future.makeSendCondition()
[13:36:22.929]                   sendCondition(cond)
[13:36:22.929]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.929]                   {
[13:36:22.929]                     inherits <- base::inherits
[13:36:22.929]                     invokeRestart <- base::invokeRestart
[13:36:22.929]                     is.null <- base::is.null
[13:36:22.929]                     muffled <- FALSE
[13:36:22.929]                     if (inherits(cond, "message")) {
[13:36:22.929]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.929]                       if (muffled) 
[13:36:22.929]                         invokeRestart("muffleMessage")
[13:36:22.929]                     }
[13:36:22.929]                     else if (inherits(cond, "warning")) {
[13:36:22.929]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.929]                       if (muffled) 
[13:36:22.929]                         invokeRestart("muffleWarning")
[13:36:22.929]                     }
[13:36:22.929]                     else if (inherits(cond, "condition")) {
[13:36:22.929]                       if (!is.null(pattern)) {
[13:36:22.929]                         computeRestarts <- base::computeRestarts
[13:36:22.929]                         grepl <- base::grepl
[13:36:22.929]                         restarts <- computeRestarts(cond)
[13:36:22.929]                         for (restart in restarts) {
[13:36:22.929]                           name <- restart$name
[13:36:22.929]                           if (is.null(name)) 
[13:36:22.929]                             next
[13:36:22.929]                           if (!grepl(pattern, name)) 
[13:36:22.929]                             next
[13:36:22.929]                           invokeRestart(restart)
[13:36:22.929]                           muffled <- TRUE
[13:36:22.929]                           break
[13:36:22.929]                         }
[13:36:22.929]                       }
[13:36:22.929]                     }
[13:36:22.929]                     invisible(muffled)
[13:36:22.929]                   }
[13:36:22.929]                   muffleCondition(cond)
[13:36:22.929]                 })
[13:36:22.929]             }))
[13:36:22.929]             future::FutureResult(value = ...future.value$value, 
[13:36:22.929]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.929]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.929]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.929]                     ...future.globalenv.names))
[13:36:22.929]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.929]         }, condition = base::local({
[13:36:22.929]             c <- base::c
[13:36:22.929]             inherits <- base::inherits
[13:36:22.929]             invokeRestart <- base::invokeRestart
[13:36:22.929]             length <- base::length
[13:36:22.929]             list <- base::list
[13:36:22.929]             seq.int <- base::seq.int
[13:36:22.929]             signalCondition <- base::signalCondition
[13:36:22.929]             sys.calls <- base::sys.calls
[13:36:22.929]             `[[` <- base::`[[`
[13:36:22.929]             `+` <- base::`+`
[13:36:22.929]             `<<-` <- base::`<<-`
[13:36:22.929]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.929]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.929]                   3L)]
[13:36:22.929]             }
[13:36:22.929]             function(cond) {
[13:36:22.929]                 is_error <- inherits(cond, "error")
[13:36:22.929]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.929]                   NULL)
[13:36:22.929]                 if (is_error) {
[13:36:22.929]                   sessionInformation <- function() {
[13:36:22.929]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.929]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.929]                       search = base::search(), system = base::Sys.info())
[13:36:22.929]                   }
[13:36:22.929]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.929]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.929]                     cond$call), session = sessionInformation(), 
[13:36:22.929]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.929]                   signalCondition(cond)
[13:36:22.929]                 }
[13:36:22.929]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.929]                 "immediateCondition"))) {
[13:36:22.929]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.929]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.929]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.929]                   if (TRUE && !signal) {
[13:36:22.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.929]                     {
[13:36:22.929]                       inherits <- base::inherits
[13:36:22.929]                       invokeRestart <- base::invokeRestart
[13:36:22.929]                       is.null <- base::is.null
[13:36:22.929]                       muffled <- FALSE
[13:36:22.929]                       if (inherits(cond, "message")) {
[13:36:22.929]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.929]                         if (muffled) 
[13:36:22.929]                           invokeRestart("muffleMessage")
[13:36:22.929]                       }
[13:36:22.929]                       else if (inherits(cond, "warning")) {
[13:36:22.929]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.929]                         if (muffled) 
[13:36:22.929]                           invokeRestart("muffleWarning")
[13:36:22.929]                       }
[13:36:22.929]                       else if (inherits(cond, "condition")) {
[13:36:22.929]                         if (!is.null(pattern)) {
[13:36:22.929]                           computeRestarts <- base::computeRestarts
[13:36:22.929]                           grepl <- base::grepl
[13:36:22.929]                           restarts <- computeRestarts(cond)
[13:36:22.929]                           for (restart in restarts) {
[13:36:22.929]                             name <- restart$name
[13:36:22.929]                             if (is.null(name)) 
[13:36:22.929]                               next
[13:36:22.929]                             if (!grepl(pattern, name)) 
[13:36:22.929]                               next
[13:36:22.929]                             invokeRestart(restart)
[13:36:22.929]                             muffled <- TRUE
[13:36:22.929]                             break
[13:36:22.929]                           }
[13:36:22.929]                         }
[13:36:22.929]                       }
[13:36:22.929]                       invisible(muffled)
[13:36:22.929]                     }
[13:36:22.929]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.929]                   }
[13:36:22.929]                 }
[13:36:22.929]                 else {
[13:36:22.929]                   if (TRUE) {
[13:36:22.929]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.929]                     {
[13:36:22.929]                       inherits <- base::inherits
[13:36:22.929]                       invokeRestart <- base::invokeRestart
[13:36:22.929]                       is.null <- base::is.null
[13:36:22.929]                       muffled <- FALSE
[13:36:22.929]                       if (inherits(cond, "message")) {
[13:36:22.929]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.929]                         if (muffled) 
[13:36:22.929]                           invokeRestart("muffleMessage")
[13:36:22.929]                       }
[13:36:22.929]                       else if (inherits(cond, "warning")) {
[13:36:22.929]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.929]                         if (muffled) 
[13:36:22.929]                           invokeRestart("muffleWarning")
[13:36:22.929]                       }
[13:36:22.929]                       else if (inherits(cond, "condition")) {
[13:36:22.929]                         if (!is.null(pattern)) {
[13:36:22.929]                           computeRestarts <- base::computeRestarts
[13:36:22.929]                           grepl <- base::grepl
[13:36:22.929]                           restarts <- computeRestarts(cond)
[13:36:22.929]                           for (restart in restarts) {
[13:36:22.929]                             name <- restart$name
[13:36:22.929]                             if (is.null(name)) 
[13:36:22.929]                               next
[13:36:22.929]                             if (!grepl(pattern, name)) 
[13:36:22.929]                               next
[13:36:22.929]                             invokeRestart(restart)
[13:36:22.929]                             muffled <- TRUE
[13:36:22.929]                             break
[13:36:22.929]                           }
[13:36:22.929]                         }
[13:36:22.929]                       }
[13:36:22.929]                       invisible(muffled)
[13:36:22.929]                     }
[13:36:22.929]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.929]                   }
[13:36:22.929]                 }
[13:36:22.929]             }
[13:36:22.929]         }))
[13:36:22.929]     }, error = function(ex) {
[13:36:22.929]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.929]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.929]                 ...future.rng), started = ...future.startTime, 
[13:36:22.929]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.929]             version = "1.8"), class = "FutureResult")
[13:36:22.929]     }, finally = {
[13:36:22.929]         if (!identical(...future.workdir, getwd())) 
[13:36:22.929]             setwd(...future.workdir)
[13:36:22.929]         {
[13:36:22.929]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.929]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.929]             }
[13:36:22.929]             base::options(...future.oldOptions)
[13:36:22.929]             if (.Platform$OS.type == "windows") {
[13:36:22.929]                 old_names <- names(...future.oldEnvVars)
[13:36:22.929]                 envs <- base::Sys.getenv()
[13:36:22.929]                 names <- names(envs)
[13:36:22.929]                 common <- intersect(names, old_names)
[13:36:22.929]                 added <- setdiff(names, old_names)
[13:36:22.929]                 removed <- setdiff(old_names, names)
[13:36:22.929]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.929]                   envs[common]]
[13:36:22.929]                 NAMES <- toupper(changed)
[13:36:22.929]                 args <- list()
[13:36:22.929]                 for (kk in seq_along(NAMES)) {
[13:36:22.929]                   name <- changed[[kk]]
[13:36:22.929]                   NAME <- NAMES[[kk]]
[13:36:22.929]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.929]                     next
[13:36:22.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.929]                 }
[13:36:22.929]                 NAMES <- toupper(added)
[13:36:22.929]                 for (kk in seq_along(NAMES)) {
[13:36:22.929]                   name <- added[[kk]]
[13:36:22.929]                   NAME <- NAMES[[kk]]
[13:36:22.929]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.929]                     next
[13:36:22.929]                   args[[name]] <- ""
[13:36:22.929]                 }
[13:36:22.929]                 NAMES <- toupper(removed)
[13:36:22.929]                 for (kk in seq_along(NAMES)) {
[13:36:22.929]                   name <- removed[[kk]]
[13:36:22.929]                   NAME <- NAMES[[kk]]
[13:36:22.929]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.929]                     next
[13:36:22.929]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.929]                 }
[13:36:22.929]                 if (length(args) > 0) 
[13:36:22.929]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.929]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.929]             }
[13:36:22.929]             else {
[13:36:22.929]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.929]             }
[13:36:22.929]             {
[13:36:22.929]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.929]                   0L) {
[13:36:22.929]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.929]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.929]                   base::options(opts)
[13:36:22.929]                 }
[13:36:22.929]                 {
[13:36:22.929]                   {
[13:36:22.929]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.929]                     NULL
[13:36:22.929]                   }
[13:36:22.929]                   options(future.plan = NULL)
[13:36:22.929]                   if (is.na(NA_character_)) 
[13:36:22.929]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.929]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.929]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.929]                     .init = FALSE)
[13:36:22.929]                 }
[13:36:22.929]             }
[13:36:22.929]         }
[13:36:22.929]     })
[13:36:22.929]     if (TRUE) {
[13:36:22.929]         base::sink(type = "output", split = FALSE)
[13:36:22.929]         if (TRUE) {
[13:36:22.929]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.929]         }
[13:36:22.929]         else {
[13:36:22.929]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.929]         }
[13:36:22.929]         base::close(...future.stdout)
[13:36:22.929]         ...future.stdout <- NULL
[13:36:22.929]     }
[13:36:22.929]     ...future.result$conditions <- ...future.conditions
[13:36:22.929]     ...future.result$finished <- base::Sys.time()
[13:36:22.929]     ...future.result
[13:36:22.929] }
[13:36:22.933] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.937] receiveMessageFromWorker() for ClusterFuture ...
[13:36:22.937] - Validating connection of MultisessionFuture
[13:36:22.938] - received message: FutureResult
[13:36:22.938] - Received FutureResult
[13:36:22.938] - Erased future from FutureRegistry
[13:36:22.938] result() for ClusterFuture ...
[13:36:22.938] - result already collected: FutureResult
[13:36:22.938] result() for ClusterFuture ... done
[13:36:22.939] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.939] result() for ClusterFuture ...
[13:36:22.939] - result already collected: FutureResult
[13:36:22.939] result() for ClusterFuture ... done
[13:36:22.939] result() for ClusterFuture ...
[13:36:22.939] - result already collected: FutureResult
[13:36:22.939] result() for ClusterFuture ... done
[13:36:22.940] getGlobalsAndPackages() ...
[13:36:22.940] Searching for globals...
[13:36:22.940] 
[13:36:22.940] Searching for globals ... DONE
[13:36:22.940] - globals: [0] <none>
[13:36:22.940] getGlobalsAndPackages() ... DONE
[13:36:22.941] run() for ‘Future’ ...
[13:36:22.941] - state: ‘created’
[13:36:22.941] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.956] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.956] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:22.956]   - Field: ‘node’
[13:36:22.956]   - Field: ‘label’
[13:36:22.956]   - Field: ‘local’
[13:36:22.956]   - Field: ‘owner’
[13:36:22.956]   - Field: ‘envir’
[13:36:22.956]   - Field: ‘workers’
[13:36:22.957]   - Field: ‘packages’
[13:36:22.957]   - Field: ‘gc’
[13:36:22.957]   - Field: ‘conditions’
[13:36:22.957]   - Field: ‘persistent’
[13:36:22.957]   - Field: ‘expr’
[13:36:22.957]   - Field: ‘uuid’
[13:36:22.957]   - Field: ‘seed’
[13:36:22.957]   - Field: ‘version’
[13:36:22.958]   - Field: ‘result’
[13:36:22.958]   - Field: ‘asynchronous’
[13:36:22.958]   - Field: ‘calls’
[13:36:22.958]   - Field: ‘globals’
[13:36:22.958]   - Field: ‘stdout’
[13:36:22.958]   - Field: ‘earlySignal’
[13:36:22.958]   - Field: ‘lazy’
[13:36:22.958]   - Field: ‘state’
[13:36:22.959] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:22.959] - Launch lazy future ...
[13:36:22.959] Packages needed by the future expression (n = 0): <none>
[13:36:22.959] Packages needed by future strategies (n = 0): <none>
[13:36:22.960] {
[13:36:22.960]     {
[13:36:22.960]         {
[13:36:22.960]             ...future.startTime <- base::Sys.time()
[13:36:22.960]             {
[13:36:22.960]                 {
[13:36:22.960]                   {
[13:36:22.960]                     {
[13:36:22.960]                       base::local({
[13:36:22.960]                         has_future <- base::requireNamespace("future", 
[13:36:22.960]                           quietly = TRUE)
[13:36:22.960]                         if (has_future) {
[13:36:22.960]                           ns <- base::getNamespace("future")
[13:36:22.960]                           version <- ns[[".package"]][["version"]]
[13:36:22.960]                           if (is.null(version)) 
[13:36:22.960]                             version <- utils::packageVersion("future")
[13:36:22.960]                         }
[13:36:22.960]                         else {
[13:36:22.960]                           version <- NULL
[13:36:22.960]                         }
[13:36:22.960]                         if (!has_future || version < "1.8.0") {
[13:36:22.960]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.960]                             "", base::R.version$version.string), 
[13:36:22.960]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.960]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.960]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.960]                               "release", "version")], collapse = " "), 
[13:36:22.960]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.960]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.960]                             info)
[13:36:22.960]                           info <- base::paste(info, collapse = "; ")
[13:36:22.960]                           if (!has_future) {
[13:36:22.960]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.960]                               info)
[13:36:22.960]                           }
[13:36:22.960]                           else {
[13:36:22.960]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.960]                               info, version)
[13:36:22.960]                           }
[13:36:22.960]                           base::stop(msg)
[13:36:22.960]                         }
[13:36:22.960]                       })
[13:36:22.960]                     }
[13:36:22.960]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.960]                     base::options(mc.cores = 1L)
[13:36:22.960]                   }
[13:36:22.960]                   ...future.strategy.old <- future::plan("list")
[13:36:22.960]                   options(future.plan = NULL)
[13:36:22.960]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.960]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.960]                 }
[13:36:22.960]                 ...future.workdir <- getwd()
[13:36:22.960]             }
[13:36:22.960]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.960]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.960]         }
[13:36:22.960]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.960]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.960]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.960]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.960]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.960]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.960]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.960]             base::names(...future.oldOptions))
[13:36:22.960]     }
[13:36:22.960]     if (FALSE) {
[13:36:22.960]     }
[13:36:22.960]     else {
[13:36:22.960]         if (TRUE) {
[13:36:22.960]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.960]                 open = "w")
[13:36:22.960]         }
[13:36:22.960]         else {
[13:36:22.960]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.960]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.960]         }
[13:36:22.960]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.960]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.960]             base::sink(type = "output", split = FALSE)
[13:36:22.960]             base::close(...future.stdout)
[13:36:22.960]         }, add = TRUE)
[13:36:22.960]     }
[13:36:22.960]     ...future.frame <- base::sys.nframe()
[13:36:22.960]     ...future.conditions <- base::list()
[13:36:22.960]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.960]     if (FALSE) {
[13:36:22.960]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.960]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.960]     }
[13:36:22.960]     ...future.result <- base::tryCatch({
[13:36:22.960]         base::withCallingHandlers({
[13:36:22.960]             ...future.value <- base::withVisible(base::local({
[13:36:22.960]                 ...future.makeSendCondition <- base::local({
[13:36:22.960]                   sendCondition <- NULL
[13:36:22.960]                   function(frame = 1L) {
[13:36:22.960]                     if (is.function(sendCondition)) 
[13:36:22.960]                       return(sendCondition)
[13:36:22.960]                     ns <- getNamespace("parallel")
[13:36:22.960]                     if (exists("sendData", mode = "function", 
[13:36:22.960]                       envir = ns)) {
[13:36:22.960]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:22.960]                         envir = ns)
[13:36:22.960]                       envir <- sys.frame(frame)
[13:36:22.960]                       master <- NULL
[13:36:22.960]                       while (!identical(envir, .GlobalEnv) && 
[13:36:22.960]                         !identical(envir, emptyenv())) {
[13:36:22.960]                         if (exists("master", mode = "list", envir = envir, 
[13:36:22.960]                           inherits = FALSE)) {
[13:36:22.960]                           master <- get("master", mode = "list", 
[13:36:22.960]                             envir = envir, inherits = FALSE)
[13:36:22.960]                           if (inherits(master, c("SOCKnode", 
[13:36:22.960]                             "SOCK0node"))) {
[13:36:22.960]                             sendCondition <<- function(cond) {
[13:36:22.960]                               data <- list(type = "VALUE", value = cond, 
[13:36:22.960]                                 success = TRUE)
[13:36:22.960]                               parallel_sendData(master, data)
[13:36:22.960]                             }
[13:36:22.960]                             return(sendCondition)
[13:36:22.960]                           }
[13:36:22.960]                         }
[13:36:22.960]                         frame <- frame + 1L
[13:36:22.960]                         envir <- sys.frame(frame)
[13:36:22.960]                       }
[13:36:22.960]                     }
[13:36:22.960]                     sendCondition <<- function(cond) NULL
[13:36:22.960]                   }
[13:36:22.960]                 })
[13:36:22.960]                 withCallingHandlers({
[13:36:22.960]                   42
[13:36:22.960]                 }, immediateCondition = function(cond) {
[13:36:22.960]                   sendCondition <- ...future.makeSendCondition()
[13:36:22.960]                   sendCondition(cond)
[13:36:22.960]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.960]                   {
[13:36:22.960]                     inherits <- base::inherits
[13:36:22.960]                     invokeRestart <- base::invokeRestart
[13:36:22.960]                     is.null <- base::is.null
[13:36:22.960]                     muffled <- FALSE
[13:36:22.960]                     if (inherits(cond, "message")) {
[13:36:22.960]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.960]                       if (muffled) 
[13:36:22.960]                         invokeRestart("muffleMessage")
[13:36:22.960]                     }
[13:36:22.960]                     else if (inherits(cond, "warning")) {
[13:36:22.960]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.960]                       if (muffled) 
[13:36:22.960]                         invokeRestart("muffleWarning")
[13:36:22.960]                     }
[13:36:22.960]                     else if (inherits(cond, "condition")) {
[13:36:22.960]                       if (!is.null(pattern)) {
[13:36:22.960]                         computeRestarts <- base::computeRestarts
[13:36:22.960]                         grepl <- base::grepl
[13:36:22.960]                         restarts <- computeRestarts(cond)
[13:36:22.960]                         for (restart in restarts) {
[13:36:22.960]                           name <- restart$name
[13:36:22.960]                           if (is.null(name)) 
[13:36:22.960]                             next
[13:36:22.960]                           if (!grepl(pattern, name)) 
[13:36:22.960]                             next
[13:36:22.960]                           invokeRestart(restart)
[13:36:22.960]                           muffled <- TRUE
[13:36:22.960]                           break
[13:36:22.960]                         }
[13:36:22.960]                       }
[13:36:22.960]                     }
[13:36:22.960]                     invisible(muffled)
[13:36:22.960]                   }
[13:36:22.960]                   muffleCondition(cond)
[13:36:22.960]                 })
[13:36:22.960]             }))
[13:36:22.960]             future::FutureResult(value = ...future.value$value, 
[13:36:22.960]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.960]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.960]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.960]                     ...future.globalenv.names))
[13:36:22.960]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.960]         }, condition = base::local({
[13:36:22.960]             c <- base::c
[13:36:22.960]             inherits <- base::inherits
[13:36:22.960]             invokeRestart <- base::invokeRestart
[13:36:22.960]             length <- base::length
[13:36:22.960]             list <- base::list
[13:36:22.960]             seq.int <- base::seq.int
[13:36:22.960]             signalCondition <- base::signalCondition
[13:36:22.960]             sys.calls <- base::sys.calls
[13:36:22.960]             `[[` <- base::`[[`
[13:36:22.960]             `+` <- base::`+`
[13:36:22.960]             `<<-` <- base::`<<-`
[13:36:22.960]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.960]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.960]                   3L)]
[13:36:22.960]             }
[13:36:22.960]             function(cond) {
[13:36:22.960]                 is_error <- inherits(cond, "error")
[13:36:22.960]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.960]                   NULL)
[13:36:22.960]                 if (is_error) {
[13:36:22.960]                   sessionInformation <- function() {
[13:36:22.960]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.960]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.960]                       search = base::search(), system = base::Sys.info())
[13:36:22.960]                   }
[13:36:22.960]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.960]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.960]                     cond$call), session = sessionInformation(), 
[13:36:22.960]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.960]                   signalCondition(cond)
[13:36:22.960]                 }
[13:36:22.960]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.960]                 "immediateCondition"))) {
[13:36:22.960]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.960]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.960]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.960]                   if (TRUE && !signal) {
[13:36:22.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.960]                     {
[13:36:22.960]                       inherits <- base::inherits
[13:36:22.960]                       invokeRestart <- base::invokeRestart
[13:36:22.960]                       is.null <- base::is.null
[13:36:22.960]                       muffled <- FALSE
[13:36:22.960]                       if (inherits(cond, "message")) {
[13:36:22.960]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.960]                         if (muffled) 
[13:36:22.960]                           invokeRestart("muffleMessage")
[13:36:22.960]                       }
[13:36:22.960]                       else if (inherits(cond, "warning")) {
[13:36:22.960]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.960]                         if (muffled) 
[13:36:22.960]                           invokeRestart("muffleWarning")
[13:36:22.960]                       }
[13:36:22.960]                       else if (inherits(cond, "condition")) {
[13:36:22.960]                         if (!is.null(pattern)) {
[13:36:22.960]                           computeRestarts <- base::computeRestarts
[13:36:22.960]                           grepl <- base::grepl
[13:36:22.960]                           restarts <- computeRestarts(cond)
[13:36:22.960]                           for (restart in restarts) {
[13:36:22.960]                             name <- restart$name
[13:36:22.960]                             if (is.null(name)) 
[13:36:22.960]                               next
[13:36:22.960]                             if (!grepl(pattern, name)) 
[13:36:22.960]                               next
[13:36:22.960]                             invokeRestart(restart)
[13:36:22.960]                             muffled <- TRUE
[13:36:22.960]                             break
[13:36:22.960]                           }
[13:36:22.960]                         }
[13:36:22.960]                       }
[13:36:22.960]                       invisible(muffled)
[13:36:22.960]                     }
[13:36:22.960]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.960]                   }
[13:36:22.960]                 }
[13:36:22.960]                 else {
[13:36:22.960]                   if (TRUE) {
[13:36:22.960]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.960]                     {
[13:36:22.960]                       inherits <- base::inherits
[13:36:22.960]                       invokeRestart <- base::invokeRestart
[13:36:22.960]                       is.null <- base::is.null
[13:36:22.960]                       muffled <- FALSE
[13:36:22.960]                       if (inherits(cond, "message")) {
[13:36:22.960]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.960]                         if (muffled) 
[13:36:22.960]                           invokeRestart("muffleMessage")
[13:36:22.960]                       }
[13:36:22.960]                       else if (inherits(cond, "warning")) {
[13:36:22.960]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.960]                         if (muffled) 
[13:36:22.960]                           invokeRestart("muffleWarning")
[13:36:22.960]                       }
[13:36:22.960]                       else if (inherits(cond, "condition")) {
[13:36:22.960]                         if (!is.null(pattern)) {
[13:36:22.960]                           computeRestarts <- base::computeRestarts
[13:36:22.960]                           grepl <- base::grepl
[13:36:22.960]                           restarts <- computeRestarts(cond)
[13:36:22.960]                           for (restart in restarts) {
[13:36:22.960]                             name <- restart$name
[13:36:22.960]                             if (is.null(name)) 
[13:36:22.960]                               next
[13:36:22.960]                             if (!grepl(pattern, name)) 
[13:36:22.960]                               next
[13:36:22.960]                             invokeRestart(restart)
[13:36:22.960]                             muffled <- TRUE
[13:36:22.960]                             break
[13:36:22.960]                           }
[13:36:22.960]                         }
[13:36:22.960]                       }
[13:36:22.960]                       invisible(muffled)
[13:36:22.960]                     }
[13:36:22.960]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.960]                   }
[13:36:22.960]                 }
[13:36:22.960]             }
[13:36:22.960]         }))
[13:36:22.960]     }, error = function(ex) {
[13:36:22.960]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.960]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.960]                 ...future.rng), started = ...future.startTime, 
[13:36:22.960]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.960]             version = "1.8"), class = "FutureResult")
[13:36:22.960]     }, finally = {
[13:36:22.960]         if (!identical(...future.workdir, getwd())) 
[13:36:22.960]             setwd(...future.workdir)
[13:36:22.960]         {
[13:36:22.960]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.960]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.960]             }
[13:36:22.960]             base::options(...future.oldOptions)
[13:36:22.960]             if (.Platform$OS.type == "windows") {
[13:36:22.960]                 old_names <- names(...future.oldEnvVars)
[13:36:22.960]                 envs <- base::Sys.getenv()
[13:36:22.960]                 names <- names(envs)
[13:36:22.960]                 common <- intersect(names, old_names)
[13:36:22.960]                 added <- setdiff(names, old_names)
[13:36:22.960]                 removed <- setdiff(old_names, names)
[13:36:22.960]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.960]                   envs[common]]
[13:36:22.960]                 NAMES <- toupper(changed)
[13:36:22.960]                 args <- list()
[13:36:22.960]                 for (kk in seq_along(NAMES)) {
[13:36:22.960]                   name <- changed[[kk]]
[13:36:22.960]                   NAME <- NAMES[[kk]]
[13:36:22.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.960]                     next
[13:36:22.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.960]                 }
[13:36:22.960]                 NAMES <- toupper(added)
[13:36:22.960]                 for (kk in seq_along(NAMES)) {
[13:36:22.960]                   name <- added[[kk]]
[13:36:22.960]                   NAME <- NAMES[[kk]]
[13:36:22.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.960]                     next
[13:36:22.960]                   args[[name]] <- ""
[13:36:22.960]                 }
[13:36:22.960]                 NAMES <- toupper(removed)
[13:36:22.960]                 for (kk in seq_along(NAMES)) {
[13:36:22.960]                   name <- removed[[kk]]
[13:36:22.960]                   NAME <- NAMES[[kk]]
[13:36:22.960]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.960]                     next
[13:36:22.960]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.960]                 }
[13:36:22.960]                 if (length(args) > 0) 
[13:36:22.960]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.960]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.960]             }
[13:36:22.960]             else {
[13:36:22.960]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.960]             }
[13:36:22.960]             {
[13:36:22.960]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.960]                   0L) {
[13:36:22.960]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.960]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.960]                   base::options(opts)
[13:36:22.960]                 }
[13:36:22.960]                 {
[13:36:22.960]                   {
[13:36:22.960]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.960]                     NULL
[13:36:22.960]                   }
[13:36:22.960]                   options(future.plan = NULL)
[13:36:22.960]                   if (is.na(NA_character_)) 
[13:36:22.960]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.960]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.960]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.960]                     .init = FALSE)
[13:36:22.960]                 }
[13:36:22.960]             }
[13:36:22.960]         }
[13:36:22.960]     })
[13:36:22.960]     if (TRUE) {
[13:36:22.960]         base::sink(type = "output", split = FALSE)
[13:36:22.960]         if (TRUE) {
[13:36:22.960]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.960]         }
[13:36:22.960]         else {
[13:36:22.960]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.960]         }
[13:36:22.960]         base::close(...future.stdout)
[13:36:22.960]         ...future.stdout <- NULL
[13:36:22.960]     }
[13:36:22.960]     ...future.result$conditions <- ...future.conditions
[13:36:22.960]     ...future.result$finished <- base::Sys.time()
[13:36:22.960]     ...future.result
[13:36:22.960] }
[13:36:22.963] MultisessionFuture started
[13:36:22.963] - Launch lazy future ... done
[13:36:22.963] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.964] receiveMessageFromWorker() for ClusterFuture ...
[13:36:22.964] - Validating connection of MultisessionFuture
[13:36:22.965] - received message: FutureResult
[13:36:22.965] - Received FutureResult
[13:36:22.965] - Erased future from FutureRegistry
[13:36:22.965] result() for ClusterFuture ...
[13:36:22.965] - result already collected: FutureResult
[13:36:22.965] result() for ClusterFuture ... done
[13:36:22.965] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.965] result() for ClusterFuture ...
[13:36:22.966] - result already collected: FutureResult
[13:36:22.966] result() for ClusterFuture ... done
[13:36:22.966] result() for ClusterFuture ...
[13:36:22.966] - result already collected: FutureResult
[13:36:22.966] result() for ClusterFuture ... done
[13:36:22.966] getGlobalsAndPackages() ...
[13:36:22.967] Searching for globals...
[13:36:22.967] - globals found: [1] ‘{’
[13:36:22.967] Searching for globals ... DONE
[13:36:22.968] Resolving globals: FALSE
[13:36:22.968] 
[13:36:22.968] 
[13:36:22.968] getGlobalsAndPackages() ... DONE
[13:36:22.968] run() for ‘Future’ ...
[13:36:22.969] - state: ‘created’
[13:36:22.969] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:22.983] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.983] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:22.983]   - Field: ‘node’
[13:36:22.983]   - Field: ‘label’
[13:36:22.983]   - Field: ‘local’
[13:36:22.983]   - Field: ‘owner’
[13:36:22.983]   - Field: ‘envir’
[13:36:22.984]   - Field: ‘workers’
[13:36:22.984]   - Field: ‘packages’
[13:36:22.984]   - Field: ‘gc’
[13:36:22.984]   - Field: ‘conditions’
[13:36:22.984]   - Field: ‘persistent’
[13:36:22.984]   - Field: ‘expr’
[13:36:22.984]   - Field: ‘uuid’
[13:36:22.984]   - Field: ‘seed’
[13:36:22.984]   - Field: ‘version’
[13:36:22.985]   - Field: ‘result’
[13:36:22.985]   - Field: ‘asynchronous’
[13:36:22.985]   - Field: ‘calls’
[13:36:22.985]   - Field: ‘globals’
[13:36:22.985]   - Field: ‘stdout’
[13:36:22.985]   - Field: ‘earlySignal’
[13:36:22.985]   - Field: ‘lazy’
[13:36:22.985]   - Field: ‘state’
[13:36:22.985] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:22.986] - Launch lazy future ...
[13:36:22.986] Packages needed by the future expression (n = 0): <none>
[13:36:22.986] Packages needed by future strategies (n = 0): <none>
[13:36:22.987] {
[13:36:22.987]     {
[13:36:22.987]         {
[13:36:22.987]             ...future.startTime <- base::Sys.time()
[13:36:22.987]             {
[13:36:22.987]                 {
[13:36:22.987]                   {
[13:36:22.987]                     {
[13:36:22.987]                       base::local({
[13:36:22.987]                         has_future <- base::requireNamespace("future", 
[13:36:22.987]                           quietly = TRUE)
[13:36:22.987]                         if (has_future) {
[13:36:22.987]                           ns <- base::getNamespace("future")
[13:36:22.987]                           version <- ns[[".package"]][["version"]]
[13:36:22.987]                           if (is.null(version)) 
[13:36:22.987]                             version <- utils::packageVersion("future")
[13:36:22.987]                         }
[13:36:22.987]                         else {
[13:36:22.987]                           version <- NULL
[13:36:22.987]                         }
[13:36:22.987]                         if (!has_future || version < "1.8.0") {
[13:36:22.987]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:22.987]                             "", base::R.version$version.string), 
[13:36:22.987]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:22.987]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:22.987]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:22.987]                               "release", "version")], collapse = " "), 
[13:36:22.987]                             hostname = base::Sys.info()[["nodename"]])
[13:36:22.987]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:22.987]                             info)
[13:36:22.987]                           info <- base::paste(info, collapse = "; ")
[13:36:22.987]                           if (!has_future) {
[13:36:22.987]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:22.987]                               info)
[13:36:22.987]                           }
[13:36:22.987]                           else {
[13:36:22.987]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:22.987]                               info, version)
[13:36:22.987]                           }
[13:36:22.987]                           base::stop(msg)
[13:36:22.987]                         }
[13:36:22.987]                       })
[13:36:22.987]                     }
[13:36:22.987]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:22.987]                     base::options(mc.cores = 1L)
[13:36:22.987]                   }
[13:36:22.987]                   ...future.strategy.old <- future::plan("list")
[13:36:22.987]                   options(future.plan = NULL)
[13:36:22.987]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.987]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:22.987]                 }
[13:36:22.987]                 ...future.workdir <- getwd()
[13:36:22.987]             }
[13:36:22.987]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:22.987]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:22.987]         }
[13:36:22.987]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:22.987]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:22.987]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:22.987]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:22.987]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:22.987]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:22.987]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:22.987]             base::names(...future.oldOptions))
[13:36:22.987]     }
[13:36:22.987]     if (FALSE) {
[13:36:22.987]     }
[13:36:22.987]     else {
[13:36:22.987]         if (TRUE) {
[13:36:22.987]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:22.987]                 open = "w")
[13:36:22.987]         }
[13:36:22.987]         else {
[13:36:22.987]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:22.987]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:22.987]         }
[13:36:22.987]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:22.987]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:22.987]             base::sink(type = "output", split = FALSE)
[13:36:22.987]             base::close(...future.stdout)
[13:36:22.987]         }, add = TRUE)
[13:36:22.987]     }
[13:36:22.987]     ...future.frame <- base::sys.nframe()
[13:36:22.987]     ...future.conditions <- base::list()
[13:36:22.987]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:22.987]     if (FALSE) {
[13:36:22.987]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:22.987]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:22.987]     }
[13:36:22.987]     ...future.result <- base::tryCatch({
[13:36:22.987]         base::withCallingHandlers({
[13:36:22.987]             ...future.value <- base::withVisible(base::local({
[13:36:22.987]                 ...future.makeSendCondition <- base::local({
[13:36:22.987]                   sendCondition <- NULL
[13:36:22.987]                   function(frame = 1L) {
[13:36:22.987]                     if (is.function(sendCondition)) 
[13:36:22.987]                       return(sendCondition)
[13:36:22.987]                     ns <- getNamespace("parallel")
[13:36:22.987]                     if (exists("sendData", mode = "function", 
[13:36:22.987]                       envir = ns)) {
[13:36:22.987]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:22.987]                         envir = ns)
[13:36:22.987]                       envir <- sys.frame(frame)
[13:36:22.987]                       master <- NULL
[13:36:22.987]                       while (!identical(envir, .GlobalEnv) && 
[13:36:22.987]                         !identical(envir, emptyenv())) {
[13:36:22.987]                         if (exists("master", mode = "list", envir = envir, 
[13:36:22.987]                           inherits = FALSE)) {
[13:36:22.987]                           master <- get("master", mode = "list", 
[13:36:22.987]                             envir = envir, inherits = FALSE)
[13:36:22.987]                           if (inherits(master, c("SOCKnode", 
[13:36:22.987]                             "SOCK0node"))) {
[13:36:22.987]                             sendCondition <<- function(cond) {
[13:36:22.987]                               data <- list(type = "VALUE", value = cond, 
[13:36:22.987]                                 success = TRUE)
[13:36:22.987]                               parallel_sendData(master, data)
[13:36:22.987]                             }
[13:36:22.987]                             return(sendCondition)
[13:36:22.987]                           }
[13:36:22.987]                         }
[13:36:22.987]                         frame <- frame + 1L
[13:36:22.987]                         envir <- sys.frame(frame)
[13:36:22.987]                       }
[13:36:22.987]                     }
[13:36:22.987]                     sendCondition <<- function(cond) NULL
[13:36:22.987]                   }
[13:36:22.987]                 })
[13:36:22.987]                 withCallingHandlers({
[13:36:22.987]                   {
[13:36:22.987]                     42
[13:36:22.987]                   }
[13:36:22.987]                 }, immediateCondition = function(cond) {
[13:36:22.987]                   sendCondition <- ...future.makeSendCondition()
[13:36:22.987]                   sendCondition(cond)
[13:36:22.987]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.987]                   {
[13:36:22.987]                     inherits <- base::inherits
[13:36:22.987]                     invokeRestart <- base::invokeRestart
[13:36:22.987]                     is.null <- base::is.null
[13:36:22.987]                     muffled <- FALSE
[13:36:22.987]                     if (inherits(cond, "message")) {
[13:36:22.987]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:22.987]                       if (muffled) 
[13:36:22.987]                         invokeRestart("muffleMessage")
[13:36:22.987]                     }
[13:36:22.987]                     else if (inherits(cond, "warning")) {
[13:36:22.987]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:22.987]                       if (muffled) 
[13:36:22.987]                         invokeRestart("muffleWarning")
[13:36:22.987]                     }
[13:36:22.987]                     else if (inherits(cond, "condition")) {
[13:36:22.987]                       if (!is.null(pattern)) {
[13:36:22.987]                         computeRestarts <- base::computeRestarts
[13:36:22.987]                         grepl <- base::grepl
[13:36:22.987]                         restarts <- computeRestarts(cond)
[13:36:22.987]                         for (restart in restarts) {
[13:36:22.987]                           name <- restart$name
[13:36:22.987]                           if (is.null(name)) 
[13:36:22.987]                             next
[13:36:22.987]                           if (!grepl(pattern, name)) 
[13:36:22.987]                             next
[13:36:22.987]                           invokeRestart(restart)
[13:36:22.987]                           muffled <- TRUE
[13:36:22.987]                           break
[13:36:22.987]                         }
[13:36:22.987]                       }
[13:36:22.987]                     }
[13:36:22.987]                     invisible(muffled)
[13:36:22.987]                   }
[13:36:22.987]                   muffleCondition(cond)
[13:36:22.987]                 })
[13:36:22.987]             }))
[13:36:22.987]             future::FutureResult(value = ...future.value$value, 
[13:36:22.987]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.987]                   ...future.rng), globalenv = if (FALSE) 
[13:36:22.987]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:22.987]                     ...future.globalenv.names))
[13:36:22.987]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:22.987]         }, condition = base::local({
[13:36:22.987]             c <- base::c
[13:36:22.987]             inherits <- base::inherits
[13:36:22.987]             invokeRestart <- base::invokeRestart
[13:36:22.987]             length <- base::length
[13:36:22.987]             list <- base::list
[13:36:22.987]             seq.int <- base::seq.int
[13:36:22.987]             signalCondition <- base::signalCondition
[13:36:22.987]             sys.calls <- base::sys.calls
[13:36:22.987]             `[[` <- base::`[[`
[13:36:22.987]             `+` <- base::`+`
[13:36:22.987]             `<<-` <- base::`<<-`
[13:36:22.987]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:22.987]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:22.987]                   3L)]
[13:36:22.987]             }
[13:36:22.987]             function(cond) {
[13:36:22.987]                 is_error <- inherits(cond, "error")
[13:36:22.987]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:22.987]                   NULL)
[13:36:22.987]                 if (is_error) {
[13:36:22.987]                   sessionInformation <- function() {
[13:36:22.987]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:22.987]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:22.987]                       search = base::search(), system = base::Sys.info())
[13:36:22.987]                   }
[13:36:22.987]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.987]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:22.987]                     cond$call), session = sessionInformation(), 
[13:36:22.987]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:22.987]                   signalCondition(cond)
[13:36:22.987]                 }
[13:36:22.987]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:22.987]                 "immediateCondition"))) {
[13:36:22.987]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:22.987]                   ...future.conditions[[length(...future.conditions) + 
[13:36:22.987]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:22.987]                   if (TRUE && !signal) {
[13:36:22.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.987]                     {
[13:36:22.987]                       inherits <- base::inherits
[13:36:22.987]                       invokeRestart <- base::invokeRestart
[13:36:22.987]                       is.null <- base::is.null
[13:36:22.987]                       muffled <- FALSE
[13:36:22.987]                       if (inherits(cond, "message")) {
[13:36:22.987]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.987]                         if (muffled) 
[13:36:22.987]                           invokeRestart("muffleMessage")
[13:36:22.987]                       }
[13:36:22.987]                       else if (inherits(cond, "warning")) {
[13:36:22.987]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.987]                         if (muffled) 
[13:36:22.987]                           invokeRestart("muffleWarning")
[13:36:22.987]                       }
[13:36:22.987]                       else if (inherits(cond, "condition")) {
[13:36:22.987]                         if (!is.null(pattern)) {
[13:36:22.987]                           computeRestarts <- base::computeRestarts
[13:36:22.987]                           grepl <- base::grepl
[13:36:22.987]                           restarts <- computeRestarts(cond)
[13:36:22.987]                           for (restart in restarts) {
[13:36:22.987]                             name <- restart$name
[13:36:22.987]                             if (is.null(name)) 
[13:36:22.987]                               next
[13:36:22.987]                             if (!grepl(pattern, name)) 
[13:36:22.987]                               next
[13:36:22.987]                             invokeRestart(restart)
[13:36:22.987]                             muffled <- TRUE
[13:36:22.987]                             break
[13:36:22.987]                           }
[13:36:22.987]                         }
[13:36:22.987]                       }
[13:36:22.987]                       invisible(muffled)
[13:36:22.987]                     }
[13:36:22.987]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.987]                   }
[13:36:22.987]                 }
[13:36:22.987]                 else {
[13:36:22.987]                   if (TRUE) {
[13:36:22.987]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:22.987]                     {
[13:36:22.987]                       inherits <- base::inherits
[13:36:22.987]                       invokeRestart <- base::invokeRestart
[13:36:22.987]                       is.null <- base::is.null
[13:36:22.987]                       muffled <- FALSE
[13:36:22.987]                       if (inherits(cond, "message")) {
[13:36:22.987]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:22.987]                         if (muffled) 
[13:36:22.987]                           invokeRestart("muffleMessage")
[13:36:22.987]                       }
[13:36:22.987]                       else if (inherits(cond, "warning")) {
[13:36:22.987]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:22.987]                         if (muffled) 
[13:36:22.987]                           invokeRestart("muffleWarning")
[13:36:22.987]                       }
[13:36:22.987]                       else if (inherits(cond, "condition")) {
[13:36:22.987]                         if (!is.null(pattern)) {
[13:36:22.987]                           computeRestarts <- base::computeRestarts
[13:36:22.987]                           grepl <- base::grepl
[13:36:22.987]                           restarts <- computeRestarts(cond)
[13:36:22.987]                           for (restart in restarts) {
[13:36:22.987]                             name <- restart$name
[13:36:22.987]                             if (is.null(name)) 
[13:36:22.987]                               next
[13:36:22.987]                             if (!grepl(pattern, name)) 
[13:36:22.987]                               next
[13:36:22.987]                             invokeRestart(restart)
[13:36:22.987]                             muffled <- TRUE
[13:36:22.987]                             break
[13:36:22.987]                           }
[13:36:22.987]                         }
[13:36:22.987]                       }
[13:36:22.987]                       invisible(muffled)
[13:36:22.987]                     }
[13:36:22.987]                     muffleCondition(cond, pattern = "^muffle")
[13:36:22.987]                   }
[13:36:22.987]                 }
[13:36:22.987]             }
[13:36:22.987]         }))
[13:36:22.987]     }, error = function(ex) {
[13:36:22.987]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:22.987]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:22.987]                 ...future.rng), started = ...future.startTime, 
[13:36:22.987]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:22.987]             version = "1.8"), class = "FutureResult")
[13:36:22.987]     }, finally = {
[13:36:22.987]         if (!identical(...future.workdir, getwd())) 
[13:36:22.987]             setwd(...future.workdir)
[13:36:22.987]         {
[13:36:22.987]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:22.987]                 ...future.oldOptions$nwarnings <- NULL
[13:36:22.987]             }
[13:36:22.987]             base::options(...future.oldOptions)
[13:36:22.987]             if (.Platform$OS.type == "windows") {
[13:36:22.987]                 old_names <- names(...future.oldEnvVars)
[13:36:22.987]                 envs <- base::Sys.getenv()
[13:36:22.987]                 names <- names(envs)
[13:36:22.987]                 common <- intersect(names, old_names)
[13:36:22.987]                 added <- setdiff(names, old_names)
[13:36:22.987]                 removed <- setdiff(old_names, names)
[13:36:22.987]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:22.987]                   envs[common]]
[13:36:22.987]                 NAMES <- toupper(changed)
[13:36:22.987]                 args <- list()
[13:36:22.987]                 for (kk in seq_along(NAMES)) {
[13:36:22.987]                   name <- changed[[kk]]
[13:36:22.987]                   NAME <- NAMES[[kk]]
[13:36:22.987]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.987]                     next
[13:36:22.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.987]                 }
[13:36:22.987]                 NAMES <- toupper(added)
[13:36:22.987]                 for (kk in seq_along(NAMES)) {
[13:36:22.987]                   name <- added[[kk]]
[13:36:22.987]                   NAME <- NAMES[[kk]]
[13:36:22.987]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.987]                     next
[13:36:22.987]                   args[[name]] <- ""
[13:36:22.987]                 }
[13:36:22.987]                 NAMES <- toupper(removed)
[13:36:22.987]                 for (kk in seq_along(NAMES)) {
[13:36:22.987]                   name <- removed[[kk]]
[13:36:22.987]                   NAME <- NAMES[[kk]]
[13:36:22.987]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:22.987]                     next
[13:36:22.987]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:22.987]                 }
[13:36:22.987]                 if (length(args) > 0) 
[13:36:22.987]                   base::do.call(base::Sys.setenv, args = args)
[13:36:22.987]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:22.987]             }
[13:36:22.987]             else {
[13:36:22.987]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:22.987]             }
[13:36:22.987]             {
[13:36:22.987]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:22.987]                   0L) {
[13:36:22.987]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:22.987]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:22.987]                   base::options(opts)
[13:36:22.987]                 }
[13:36:22.987]                 {
[13:36:22.987]                   {
[13:36:22.987]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:22.987]                     NULL
[13:36:22.987]                   }
[13:36:22.987]                   options(future.plan = NULL)
[13:36:22.987]                   if (is.na(NA_character_)) 
[13:36:22.987]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:22.987]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:22.987]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:22.987]                     .init = FALSE)
[13:36:22.987]                 }
[13:36:22.987]             }
[13:36:22.987]         }
[13:36:22.987]     })
[13:36:22.987]     if (TRUE) {
[13:36:22.987]         base::sink(type = "output", split = FALSE)
[13:36:22.987]         if (TRUE) {
[13:36:22.987]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:22.987]         }
[13:36:22.987]         else {
[13:36:22.987]             ...future.result["stdout"] <- base::list(NULL)
[13:36:22.987]         }
[13:36:22.987]         base::close(...future.stdout)
[13:36:22.987]         ...future.stdout <- NULL
[13:36:22.987]     }
[13:36:22.987]     ...future.result$conditions <- ...future.conditions
[13:36:22.987]     ...future.result$finished <- base::Sys.time()
[13:36:22.987]     ...future.result
[13:36:22.987] }
[13:36:22.990] MultisessionFuture started
[13:36:22.990] - Launch lazy future ... done
[13:36:22.990] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:22.991] receiveMessageFromWorker() for ClusterFuture ...
[13:36:22.991] - Validating connection of MultisessionFuture
[13:36:22.992] - received message: FutureResult
[13:36:22.992] - Received FutureResult
[13:36:22.992] - Erased future from FutureRegistry
[13:36:22.992] result() for ClusterFuture ...
[13:36:22.992] - result already collected: FutureResult
[13:36:22.992] result() for ClusterFuture ... done
[13:36:22.992] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:22.992] result() for ClusterFuture ...
[13:36:22.993] - result already collected: FutureResult
[13:36:22.993] result() for ClusterFuture ... done
[13:36:22.993] result() for ClusterFuture ...
[13:36:22.993] - result already collected: FutureResult
[13:36:22.993] result() for ClusterFuture ... done
[13:36:22.997] getGlobalsAndPackages() ...
[13:36:22.997] 
[13:36:22.997] - globals: [0] <none>
[13:36:22.997] getGlobalsAndPackages() ... DONE
[13:36:23.008] Packages needed by the future expression (n = 0): <none>
[13:36:23.008] Packages needed by future strategies (n = 0): <none>
[13:36:23.011] {
[13:36:23.011]     {
[13:36:23.011]         {
[13:36:23.011]             ...future.startTime <- base::Sys.time()
[13:36:23.011]             {
[13:36:23.011]                 {
[13:36:23.011]                   {
[13:36:23.011]                     {
[13:36:23.011]                       base::local({
[13:36:23.011]                         has_future <- base::requireNamespace("future", 
[13:36:23.011]                           quietly = TRUE)
[13:36:23.011]                         if (has_future) {
[13:36:23.011]                           ns <- base::getNamespace("future")
[13:36:23.011]                           version <- ns[[".package"]][["version"]]
[13:36:23.011]                           if (is.null(version)) 
[13:36:23.011]                             version <- utils::packageVersion("future")
[13:36:23.011]                         }
[13:36:23.011]                         else {
[13:36:23.011]                           version <- NULL
[13:36:23.011]                         }
[13:36:23.011]                         if (!has_future || version < "1.8.0") {
[13:36:23.011]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:23.011]                             "", base::R.version$version.string), 
[13:36:23.011]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:23.011]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:23.011]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:23.011]                               "release", "version")], collapse = " "), 
[13:36:23.011]                             hostname = base::Sys.info()[["nodename"]])
[13:36:23.011]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:23.011]                             info)
[13:36:23.011]                           info <- base::paste(info, collapse = "; ")
[13:36:23.011]                           if (!has_future) {
[13:36:23.011]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:23.011]                               info)
[13:36:23.011]                           }
[13:36:23.011]                           else {
[13:36:23.011]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:23.011]                               info, version)
[13:36:23.011]                           }
[13:36:23.011]                           base::stop(msg)
[13:36:23.011]                         }
[13:36:23.011]                       })
[13:36:23.011]                     }
[13:36:23.011]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:23.011]                     base::options(mc.cores = 1L)
[13:36:23.011]                   }
[13:36:23.011]                   ...future.strategy.old <- future::plan("list")
[13:36:23.011]                   options(future.plan = NULL)
[13:36:23.011]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.011]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:23.011]                 }
[13:36:23.011]                 ...future.workdir <- getwd()
[13:36:23.011]             }
[13:36:23.011]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:23.011]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:23.011]         }
[13:36:23.011]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:23.011]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:23.011]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:23.011]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:23.011]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:23.011]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:23.011]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:23.011]             base::names(...future.oldOptions))
[13:36:23.011]     }
[13:36:23.011]     if (FALSE) {
[13:36:23.011]     }
[13:36:23.011]     else {
[13:36:23.011]         if (TRUE) {
[13:36:23.011]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:23.011]                 open = "w")
[13:36:23.011]         }
[13:36:23.011]         else {
[13:36:23.011]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:23.011]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:23.011]         }
[13:36:23.011]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:23.011]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:23.011]             base::sink(type = "output", split = FALSE)
[13:36:23.011]             base::close(...future.stdout)
[13:36:23.011]         }, add = TRUE)
[13:36:23.011]     }
[13:36:23.011]     ...future.frame <- base::sys.nframe()
[13:36:23.011]     ...future.conditions <- base::list()
[13:36:23.011]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:23.011]     if (FALSE) {
[13:36:23.011]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:23.011]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:23.011]     }
[13:36:23.011]     ...future.result <- base::tryCatch({
[13:36:23.011]         base::withCallingHandlers({
[13:36:23.011]             ...future.value <- base::withVisible(base::local({
[13:36:23.011]                 ...future.makeSendCondition <- base::local({
[13:36:23.011]                   sendCondition <- NULL
[13:36:23.011]                   function(frame = 1L) {
[13:36:23.011]                     if (is.function(sendCondition)) 
[13:36:23.011]                       return(sendCondition)
[13:36:23.011]                     ns <- getNamespace("parallel")
[13:36:23.011]                     if (exists("sendData", mode = "function", 
[13:36:23.011]                       envir = ns)) {
[13:36:23.011]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:23.011]                         envir = ns)
[13:36:23.011]                       envir <- sys.frame(frame)
[13:36:23.011]                       master <- NULL
[13:36:23.011]                       while (!identical(envir, .GlobalEnv) && 
[13:36:23.011]                         !identical(envir, emptyenv())) {
[13:36:23.011]                         if (exists("master", mode = "list", envir = envir, 
[13:36:23.011]                           inherits = FALSE)) {
[13:36:23.011]                           master <- get("master", mode = "list", 
[13:36:23.011]                             envir = envir, inherits = FALSE)
[13:36:23.011]                           if (inherits(master, c("SOCKnode", 
[13:36:23.011]                             "SOCK0node"))) {
[13:36:23.011]                             sendCondition <<- function(cond) {
[13:36:23.011]                               data <- list(type = "VALUE", value = cond, 
[13:36:23.011]                                 success = TRUE)
[13:36:23.011]                               parallel_sendData(master, data)
[13:36:23.011]                             }
[13:36:23.011]                             return(sendCondition)
[13:36:23.011]                           }
[13:36:23.011]                         }
[13:36:23.011]                         frame <- frame + 1L
[13:36:23.011]                         envir <- sys.frame(frame)
[13:36:23.011]                       }
[13:36:23.011]                     }
[13:36:23.011]                     sendCondition <<- function(cond) NULL
[13:36:23.011]                   }
[13:36:23.011]                 })
[13:36:23.011]                 withCallingHandlers({
[13:36:23.011]                   42
[13:36:23.011]                 }, immediateCondition = function(cond) {
[13:36:23.011]                   sendCondition <- ...future.makeSendCondition()
[13:36:23.011]                   sendCondition(cond)
[13:36:23.011]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.011]                   {
[13:36:23.011]                     inherits <- base::inherits
[13:36:23.011]                     invokeRestart <- base::invokeRestart
[13:36:23.011]                     is.null <- base::is.null
[13:36:23.011]                     muffled <- FALSE
[13:36:23.011]                     if (inherits(cond, "message")) {
[13:36:23.011]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:23.011]                       if (muffled) 
[13:36:23.011]                         invokeRestart("muffleMessage")
[13:36:23.011]                     }
[13:36:23.011]                     else if (inherits(cond, "warning")) {
[13:36:23.011]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:23.011]                       if (muffled) 
[13:36:23.011]                         invokeRestart("muffleWarning")
[13:36:23.011]                     }
[13:36:23.011]                     else if (inherits(cond, "condition")) {
[13:36:23.011]                       if (!is.null(pattern)) {
[13:36:23.011]                         computeRestarts <- base::computeRestarts
[13:36:23.011]                         grepl <- base::grepl
[13:36:23.011]                         restarts <- computeRestarts(cond)
[13:36:23.011]                         for (restart in restarts) {
[13:36:23.011]                           name <- restart$name
[13:36:23.011]                           if (is.null(name)) 
[13:36:23.011]                             next
[13:36:23.011]                           if (!grepl(pattern, name)) 
[13:36:23.011]                             next
[13:36:23.011]                           invokeRestart(restart)
[13:36:23.011]                           muffled <- TRUE
[13:36:23.011]                           break
[13:36:23.011]                         }
[13:36:23.011]                       }
[13:36:23.011]                     }
[13:36:23.011]                     invisible(muffled)
[13:36:23.011]                   }
[13:36:23.011]                   muffleCondition(cond)
[13:36:23.011]                 })
[13:36:23.011]             }))
[13:36:23.011]             future::FutureResult(value = ...future.value$value, 
[13:36:23.011]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.011]                   ...future.rng), globalenv = if (FALSE) 
[13:36:23.011]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:23.011]                     ...future.globalenv.names))
[13:36:23.011]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:23.011]         }, condition = base::local({
[13:36:23.011]             c <- base::c
[13:36:23.011]             inherits <- base::inherits
[13:36:23.011]             invokeRestart <- base::invokeRestart
[13:36:23.011]             length <- base::length
[13:36:23.011]             list <- base::list
[13:36:23.011]             seq.int <- base::seq.int
[13:36:23.011]             signalCondition <- base::signalCondition
[13:36:23.011]             sys.calls <- base::sys.calls
[13:36:23.011]             `[[` <- base::`[[`
[13:36:23.011]             `+` <- base::`+`
[13:36:23.011]             `<<-` <- base::`<<-`
[13:36:23.011]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:23.011]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:23.011]                   3L)]
[13:36:23.011]             }
[13:36:23.011]             function(cond) {
[13:36:23.011]                 is_error <- inherits(cond, "error")
[13:36:23.011]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:23.011]                   NULL)
[13:36:23.011]                 if (is_error) {
[13:36:23.011]                   sessionInformation <- function() {
[13:36:23.011]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:23.011]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:23.011]                       search = base::search(), system = base::Sys.info())
[13:36:23.011]                   }
[13:36:23.011]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.011]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:23.011]                     cond$call), session = sessionInformation(), 
[13:36:23.011]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:23.011]                   signalCondition(cond)
[13:36:23.011]                 }
[13:36:23.011]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:23.011]                 "immediateCondition"))) {
[13:36:23.011]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:23.011]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.011]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:23.011]                   if (TRUE && !signal) {
[13:36:23.011]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.011]                     {
[13:36:23.011]                       inherits <- base::inherits
[13:36:23.011]                       invokeRestart <- base::invokeRestart
[13:36:23.011]                       is.null <- base::is.null
[13:36:23.011]                       muffled <- FALSE
[13:36:23.011]                       if (inherits(cond, "message")) {
[13:36:23.011]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.011]                         if (muffled) 
[13:36:23.011]                           invokeRestart("muffleMessage")
[13:36:23.011]                       }
[13:36:23.011]                       else if (inherits(cond, "warning")) {
[13:36:23.011]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.011]                         if (muffled) 
[13:36:23.011]                           invokeRestart("muffleWarning")
[13:36:23.011]                       }
[13:36:23.011]                       else if (inherits(cond, "condition")) {
[13:36:23.011]                         if (!is.null(pattern)) {
[13:36:23.011]                           computeRestarts <- base::computeRestarts
[13:36:23.011]                           grepl <- base::grepl
[13:36:23.011]                           restarts <- computeRestarts(cond)
[13:36:23.011]                           for (restart in restarts) {
[13:36:23.011]                             name <- restart$name
[13:36:23.011]                             if (is.null(name)) 
[13:36:23.011]                               next
[13:36:23.011]                             if (!grepl(pattern, name)) 
[13:36:23.011]                               next
[13:36:23.011]                             invokeRestart(restart)
[13:36:23.011]                             muffled <- TRUE
[13:36:23.011]                             break
[13:36:23.011]                           }
[13:36:23.011]                         }
[13:36:23.011]                       }
[13:36:23.011]                       invisible(muffled)
[13:36:23.011]                     }
[13:36:23.011]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.011]                   }
[13:36:23.011]                 }
[13:36:23.011]                 else {
[13:36:23.011]                   if (TRUE) {
[13:36:23.011]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.011]                     {
[13:36:23.011]                       inherits <- base::inherits
[13:36:23.011]                       invokeRestart <- base::invokeRestart
[13:36:23.011]                       is.null <- base::is.null
[13:36:23.011]                       muffled <- FALSE
[13:36:23.011]                       if (inherits(cond, "message")) {
[13:36:23.011]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.011]                         if (muffled) 
[13:36:23.011]                           invokeRestart("muffleMessage")
[13:36:23.011]                       }
[13:36:23.011]                       else if (inherits(cond, "warning")) {
[13:36:23.011]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.011]                         if (muffled) 
[13:36:23.011]                           invokeRestart("muffleWarning")
[13:36:23.011]                       }
[13:36:23.011]                       else if (inherits(cond, "condition")) {
[13:36:23.011]                         if (!is.null(pattern)) {
[13:36:23.011]                           computeRestarts <- base::computeRestarts
[13:36:23.011]                           grepl <- base::grepl
[13:36:23.011]                           restarts <- computeRestarts(cond)
[13:36:23.011]                           for (restart in restarts) {
[13:36:23.011]                             name <- restart$name
[13:36:23.011]                             if (is.null(name)) 
[13:36:23.011]                               next
[13:36:23.011]                             if (!grepl(pattern, name)) 
[13:36:23.011]                               next
[13:36:23.011]                             invokeRestart(restart)
[13:36:23.011]                             muffled <- TRUE
[13:36:23.011]                             break
[13:36:23.011]                           }
[13:36:23.011]                         }
[13:36:23.011]                       }
[13:36:23.011]                       invisible(muffled)
[13:36:23.011]                     }
[13:36:23.011]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.011]                   }
[13:36:23.011]                 }
[13:36:23.011]             }
[13:36:23.011]         }))
[13:36:23.011]     }, error = function(ex) {
[13:36:23.011]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:23.011]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.011]                 ...future.rng), started = ...future.startTime, 
[13:36:23.011]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:23.011]             version = "1.8"), class = "FutureResult")
[13:36:23.011]     }, finally = {
[13:36:23.011]         if (!identical(...future.workdir, getwd())) 
[13:36:23.011]             setwd(...future.workdir)
[13:36:23.011]         {
[13:36:23.011]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:23.011]                 ...future.oldOptions$nwarnings <- NULL
[13:36:23.011]             }
[13:36:23.011]             base::options(...future.oldOptions)
[13:36:23.011]             if (.Platform$OS.type == "windows") {
[13:36:23.011]                 old_names <- names(...future.oldEnvVars)
[13:36:23.011]                 envs <- base::Sys.getenv()
[13:36:23.011]                 names <- names(envs)
[13:36:23.011]                 common <- intersect(names, old_names)
[13:36:23.011]                 added <- setdiff(names, old_names)
[13:36:23.011]                 removed <- setdiff(old_names, names)
[13:36:23.011]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:23.011]                   envs[common]]
[13:36:23.011]                 NAMES <- toupper(changed)
[13:36:23.011]                 args <- list()
[13:36:23.011]                 for (kk in seq_along(NAMES)) {
[13:36:23.011]                   name <- changed[[kk]]
[13:36:23.011]                   NAME <- NAMES[[kk]]
[13:36:23.011]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.011]                     next
[13:36:23.011]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.011]                 }
[13:36:23.011]                 NAMES <- toupper(added)
[13:36:23.011]                 for (kk in seq_along(NAMES)) {
[13:36:23.011]                   name <- added[[kk]]
[13:36:23.011]                   NAME <- NAMES[[kk]]
[13:36:23.011]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.011]                     next
[13:36:23.011]                   args[[name]] <- ""
[13:36:23.011]                 }
[13:36:23.011]                 NAMES <- toupper(removed)
[13:36:23.011]                 for (kk in seq_along(NAMES)) {
[13:36:23.011]                   name <- removed[[kk]]
[13:36:23.011]                   NAME <- NAMES[[kk]]
[13:36:23.011]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.011]                     next
[13:36:23.011]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.011]                 }
[13:36:23.011]                 if (length(args) > 0) 
[13:36:23.011]                   base::do.call(base::Sys.setenv, args = args)
[13:36:23.011]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:23.011]             }
[13:36:23.011]             else {
[13:36:23.011]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:23.011]             }
[13:36:23.011]             {
[13:36:23.011]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:23.011]                   0L) {
[13:36:23.011]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:23.011]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:23.011]                   base::options(opts)
[13:36:23.011]                 }
[13:36:23.011]                 {
[13:36:23.011]                   {
[13:36:23.011]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:23.011]                     NULL
[13:36:23.011]                   }
[13:36:23.011]                   options(future.plan = NULL)
[13:36:23.011]                   if (is.na(NA_character_)) 
[13:36:23.011]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.011]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:23.011]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:23.011]                     .init = FALSE)
[13:36:23.011]                 }
[13:36:23.011]             }
[13:36:23.011]         }
[13:36:23.011]     })
[13:36:23.011]     if (TRUE) {
[13:36:23.011]         base::sink(type = "output", split = FALSE)
[13:36:23.011]         if (TRUE) {
[13:36:23.011]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:23.011]         }
[13:36:23.011]         else {
[13:36:23.011]             ...future.result["stdout"] <- base::list(NULL)
[13:36:23.011]         }
[13:36:23.011]         base::close(...future.stdout)
[13:36:23.011]         ...future.stdout <- NULL
[13:36:23.011]     }
[13:36:23.011]     ...future.result$conditions <- ...future.conditions
[13:36:23.011]     ...future.result$finished <- base::Sys.time()
[13:36:23.011]     ...future.result
[13:36:23.011] }
[13:36:23.014] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:23.016] receiveMessageFromWorker() for ClusterFuture ...
[13:36:23.016] - Validating connection of MultisessionFuture
[13:36:23.016] - received message: FutureResult
[13:36:23.016] - Received FutureResult
[13:36:23.016] - Erased future from FutureRegistry
[13:36:23.016] result() for ClusterFuture ...
[13:36:23.016] - result already collected: FutureResult
[13:36:23.016] result() for ClusterFuture ... done
[13:36:23.016] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:23.017] result() for ClusterFuture ...
[13:36:23.017] - result already collected: FutureResult
[13:36:23.017] result() for ClusterFuture ... done
[13:36:23.017] result() for ClusterFuture ...
[13:36:23.017] - result already collected: FutureResult
[13:36:23.017] result() for ClusterFuture ... done
[13:36:23.017] getGlobalsAndPackages() ...
[13:36:23.017] Searching for globals...
[13:36:23.017] 
[13:36:23.018] Searching for globals ... DONE
[13:36:23.018] - globals: [0] <none>
[13:36:23.018] getGlobalsAndPackages() ... DONE
[13:36:23.018] run() for ‘Future’ ...
[13:36:23.018] - state: ‘created’
[13:36:23.018] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:23.031] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:23.032] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:23.032]   - Field: ‘node’
[13:36:23.032]   - Field: ‘label’
[13:36:23.032]   - Field: ‘local’
[13:36:23.032]   - Field: ‘owner’
[13:36:23.032]   - Field: ‘envir’
[13:36:23.032]   - Field: ‘workers’
[13:36:23.032]   - Field: ‘packages’
[13:36:23.032]   - Field: ‘gc’
[13:36:23.032]   - Field: ‘conditions’
[13:36:23.032]   - Field: ‘persistent’
[13:36:23.033]   - Field: ‘expr’
[13:36:23.033]   - Field: ‘uuid’
[13:36:23.033]   - Field: ‘seed’
[13:36:23.033]   - Field: ‘version’
[13:36:23.033]   - Field: ‘result’
[13:36:23.033]   - Field: ‘asynchronous’
[13:36:23.033]   - Field: ‘calls’
[13:36:23.033]   - Field: ‘globals’
[13:36:23.033]   - Field: ‘stdout’
[13:36:23.033]   - Field: ‘earlySignal’
[13:36:23.033]   - Field: ‘lazy’
[13:36:23.034]   - Field: ‘state’
[13:36:23.034] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:23.034] - Launch lazy future ...
[13:36:23.034] Packages needed by the future expression (n = 0): <none>
[13:36:23.034] Packages needed by future strategies (n = 0): <none>
[13:36:23.035] {
[13:36:23.035]     {
[13:36:23.035]         {
[13:36:23.035]             ...future.startTime <- base::Sys.time()
[13:36:23.035]             {
[13:36:23.035]                 {
[13:36:23.035]                   {
[13:36:23.035]                     {
[13:36:23.035]                       base::local({
[13:36:23.035]                         has_future <- base::requireNamespace("future", 
[13:36:23.035]                           quietly = TRUE)
[13:36:23.035]                         if (has_future) {
[13:36:23.035]                           ns <- base::getNamespace("future")
[13:36:23.035]                           version <- ns[[".package"]][["version"]]
[13:36:23.035]                           if (is.null(version)) 
[13:36:23.035]                             version <- utils::packageVersion("future")
[13:36:23.035]                         }
[13:36:23.035]                         else {
[13:36:23.035]                           version <- NULL
[13:36:23.035]                         }
[13:36:23.035]                         if (!has_future || version < "1.8.0") {
[13:36:23.035]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:23.035]                             "", base::R.version$version.string), 
[13:36:23.035]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:23.035]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:23.035]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:23.035]                               "release", "version")], collapse = " "), 
[13:36:23.035]                             hostname = base::Sys.info()[["nodename"]])
[13:36:23.035]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:23.035]                             info)
[13:36:23.035]                           info <- base::paste(info, collapse = "; ")
[13:36:23.035]                           if (!has_future) {
[13:36:23.035]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:23.035]                               info)
[13:36:23.035]                           }
[13:36:23.035]                           else {
[13:36:23.035]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:23.035]                               info, version)
[13:36:23.035]                           }
[13:36:23.035]                           base::stop(msg)
[13:36:23.035]                         }
[13:36:23.035]                       })
[13:36:23.035]                     }
[13:36:23.035]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:23.035]                     base::options(mc.cores = 1L)
[13:36:23.035]                   }
[13:36:23.035]                   ...future.strategy.old <- future::plan("list")
[13:36:23.035]                   options(future.plan = NULL)
[13:36:23.035]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.035]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:23.035]                 }
[13:36:23.035]                 ...future.workdir <- getwd()
[13:36:23.035]             }
[13:36:23.035]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:23.035]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:23.035]         }
[13:36:23.035]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:23.035]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:23.035]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:23.035]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:23.035]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:23.035]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:23.035]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:23.035]             base::names(...future.oldOptions))
[13:36:23.035]     }
[13:36:23.035]     if (FALSE) {
[13:36:23.035]     }
[13:36:23.035]     else {
[13:36:23.035]         if (TRUE) {
[13:36:23.035]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:23.035]                 open = "w")
[13:36:23.035]         }
[13:36:23.035]         else {
[13:36:23.035]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:23.035]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:23.035]         }
[13:36:23.035]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:23.035]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:23.035]             base::sink(type = "output", split = FALSE)
[13:36:23.035]             base::close(...future.stdout)
[13:36:23.035]         }, add = TRUE)
[13:36:23.035]     }
[13:36:23.035]     ...future.frame <- base::sys.nframe()
[13:36:23.035]     ...future.conditions <- base::list()
[13:36:23.035]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:23.035]     if (FALSE) {
[13:36:23.035]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:23.035]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:23.035]     }
[13:36:23.035]     ...future.result <- base::tryCatch({
[13:36:23.035]         base::withCallingHandlers({
[13:36:23.035]             ...future.value <- base::withVisible(base::local({
[13:36:23.035]                 ...future.makeSendCondition <- base::local({
[13:36:23.035]                   sendCondition <- NULL
[13:36:23.035]                   function(frame = 1L) {
[13:36:23.035]                     if (is.function(sendCondition)) 
[13:36:23.035]                       return(sendCondition)
[13:36:23.035]                     ns <- getNamespace("parallel")
[13:36:23.035]                     if (exists("sendData", mode = "function", 
[13:36:23.035]                       envir = ns)) {
[13:36:23.035]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:23.035]                         envir = ns)
[13:36:23.035]                       envir <- sys.frame(frame)
[13:36:23.035]                       master <- NULL
[13:36:23.035]                       while (!identical(envir, .GlobalEnv) && 
[13:36:23.035]                         !identical(envir, emptyenv())) {
[13:36:23.035]                         if (exists("master", mode = "list", envir = envir, 
[13:36:23.035]                           inherits = FALSE)) {
[13:36:23.035]                           master <- get("master", mode = "list", 
[13:36:23.035]                             envir = envir, inherits = FALSE)
[13:36:23.035]                           if (inherits(master, c("SOCKnode", 
[13:36:23.035]                             "SOCK0node"))) {
[13:36:23.035]                             sendCondition <<- function(cond) {
[13:36:23.035]                               data <- list(type = "VALUE", value = cond, 
[13:36:23.035]                                 success = TRUE)
[13:36:23.035]                               parallel_sendData(master, data)
[13:36:23.035]                             }
[13:36:23.035]                             return(sendCondition)
[13:36:23.035]                           }
[13:36:23.035]                         }
[13:36:23.035]                         frame <- frame + 1L
[13:36:23.035]                         envir <- sys.frame(frame)
[13:36:23.035]                       }
[13:36:23.035]                     }
[13:36:23.035]                     sendCondition <<- function(cond) NULL
[13:36:23.035]                   }
[13:36:23.035]                 })
[13:36:23.035]                 withCallingHandlers({
[13:36:23.035]                   42
[13:36:23.035]                 }, immediateCondition = function(cond) {
[13:36:23.035]                   sendCondition <- ...future.makeSendCondition()
[13:36:23.035]                   sendCondition(cond)
[13:36:23.035]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.035]                   {
[13:36:23.035]                     inherits <- base::inherits
[13:36:23.035]                     invokeRestart <- base::invokeRestart
[13:36:23.035]                     is.null <- base::is.null
[13:36:23.035]                     muffled <- FALSE
[13:36:23.035]                     if (inherits(cond, "message")) {
[13:36:23.035]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:23.035]                       if (muffled) 
[13:36:23.035]                         invokeRestart("muffleMessage")
[13:36:23.035]                     }
[13:36:23.035]                     else if (inherits(cond, "warning")) {
[13:36:23.035]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:23.035]                       if (muffled) 
[13:36:23.035]                         invokeRestart("muffleWarning")
[13:36:23.035]                     }
[13:36:23.035]                     else if (inherits(cond, "condition")) {
[13:36:23.035]                       if (!is.null(pattern)) {
[13:36:23.035]                         computeRestarts <- base::computeRestarts
[13:36:23.035]                         grepl <- base::grepl
[13:36:23.035]                         restarts <- computeRestarts(cond)
[13:36:23.035]                         for (restart in restarts) {
[13:36:23.035]                           name <- restart$name
[13:36:23.035]                           if (is.null(name)) 
[13:36:23.035]                             next
[13:36:23.035]                           if (!grepl(pattern, name)) 
[13:36:23.035]                             next
[13:36:23.035]                           invokeRestart(restart)
[13:36:23.035]                           muffled <- TRUE
[13:36:23.035]                           break
[13:36:23.035]                         }
[13:36:23.035]                       }
[13:36:23.035]                     }
[13:36:23.035]                     invisible(muffled)
[13:36:23.035]                   }
[13:36:23.035]                   muffleCondition(cond)
[13:36:23.035]                 })
[13:36:23.035]             }))
[13:36:23.035]             future::FutureResult(value = ...future.value$value, 
[13:36:23.035]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.035]                   ...future.rng), globalenv = if (FALSE) 
[13:36:23.035]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:23.035]                     ...future.globalenv.names))
[13:36:23.035]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:23.035]         }, condition = base::local({
[13:36:23.035]             c <- base::c
[13:36:23.035]             inherits <- base::inherits
[13:36:23.035]             invokeRestart <- base::invokeRestart
[13:36:23.035]             length <- base::length
[13:36:23.035]             list <- base::list
[13:36:23.035]             seq.int <- base::seq.int
[13:36:23.035]             signalCondition <- base::signalCondition
[13:36:23.035]             sys.calls <- base::sys.calls
[13:36:23.035]             `[[` <- base::`[[`
[13:36:23.035]             `+` <- base::`+`
[13:36:23.035]             `<<-` <- base::`<<-`
[13:36:23.035]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:23.035]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:23.035]                   3L)]
[13:36:23.035]             }
[13:36:23.035]             function(cond) {
[13:36:23.035]                 is_error <- inherits(cond, "error")
[13:36:23.035]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:23.035]                   NULL)
[13:36:23.035]                 if (is_error) {
[13:36:23.035]                   sessionInformation <- function() {
[13:36:23.035]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:23.035]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:23.035]                       search = base::search(), system = base::Sys.info())
[13:36:23.035]                   }
[13:36:23.035]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.035]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:23.035]                     cond$call), session = sessionInformation(), 
[13:36:23.035]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:23.035]                   signalCondition(cond)
[13:36:23.035]                 }
[13:36:23.035]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:23.035]                 "immediateCondition"))) {
[13:36:23.035]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:23.035]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.035]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:23.035]                   if (TRUE && !signal) {
[13:36:23.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.035]                     {
[13:36:23.035]                       inherits <- base::inherits
[13:36:23.035]                       invokeRestart <- base::invokeRestart
[13:36:23.035]                       is.null <- base::is.null
[13:36:23.035]                       muffled <- FALSE
[13:36:23.035]                       if (inherits(cond, "message")) {
[13:36:23.035]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.035]                         if (muffled) 
[13:36:23.035]                           invokeRestart("muffleMessage")
[13:36:23.035]                       }
[13:36:23.035]                       else if (inherits(cond, "warning")) {
[13:36:23.035]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.035]                         if (muffled) 
[13:36:23.035]                           invokeRestart("muffleWarning")
[13:36:23.035]                       }
[13:36:23.035]                       else if (inherits(cond, "condition")) {
[13:36:23.035]                         if (!is.null(pattern)) {
[13:36:23.035]                           computeRestarts <- base::computeRestarts
[13:36:23.035]                           grepl <- base::grepl
[13:36:23.035]                           restarts <- computeRestarts(cond)
[13:36:23.035]                           for (restart in restarts) {
[13:36:23.035]                             name <- restart$name
[13:36:23.035]                             if (is.null(name)) 
[13:36:23.035]                               next
[13:36:23.035]                             if (!grepl(pattern, name)) 
[13:36:23.035]                               next
[13:36:23.035]                             invokeRestart(restart)
[13:36:23.035]                             muffled <- TRUE
[13:36:23.035]                             break
[13:36:23.035]                           }
[13:36:23.035]                         }
[13:36:23.035]                       }
[13:36:23.035]                       invisible(muffled)
[13:36:23.035]                     }
[13:36:23.035]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.035]                   }
[13:36:23.035]                 }
[13:36:23.035]                 else {
[13:36:23.035]                   if (TRUE) {
[13:36:23.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.035]                     {
[13:36:23.035]                       inherits <- base::inherits
[13:36:23.035]                       invokeRestart <- base::invokeRestart
[13:36:23.035]                       is.null <- base::is.null
[13:36:23.035]                       muffled <- FALSE
[13:36:23.035]                       if (inherits(cond, "message")) {
[13:36:23.035]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.035]                         if (muffled) 
[13:36:23.035]                           invokeRestart("muffleMessage")
[13:36:23.035]                       }
[13:36:23.035]                       else if (inherits(cond, "warning")) {
[13:36:23.035]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.035]                         if (muffled) 
[13:36:23.035]                           invokeRestart("muffleWarning")
[13:36:23.035]                       }
[13:36:23.035]                       else if (inherits(cond, "condition")) {
[13:36:23.035]                         if (!is.null(pattern)) {
[13:36:23.035]                           computeRestarts <- base::computeRestarts
[13:36:23.035]                           grepl <- base::grepl
[13:36:23.035]                           restarts <- computeRestarts(cond)
[13:36:23.035]                           for (restart in restarts) {
[13:36:23.035]                             name <- restart$name
[13:36:23.035]                             if (is.null(name)) 
[13:36:23.035]                               next
[13:36:23.035]                             if (!grepl(pattern, name)) 
[13:36:23.035]                               next
[13:36:23.035]                             invokeRestart(restart)
[13:36:23.035]                             muffled <- TRUE
[13:36:23.035]                             break
[13:36:23.035]                           }
[13:36:23.035]                         }
[13:36:23.035]                       }
[13:36:23.035]                       invisible(muffled)
[13:36:23.035]                     }
[13:36:23.035]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.035]                   }
[13:36:23.035]                 }
[13:36:23.035]             }
[13:36:23.035]         }))
[13:36:23.035]     }, error = function(ex) {
[13:36:23.035]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:23.035]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.035]                 ...future.rng), started = ...future.startTime, 
[13:36:23.035]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:23.035]             version = "1.8"), class = "FutureResult")
[13:36:23.035]     }, finally = {
[13:36:23.035]         if (!identical(...future.workdir, getwd())) 
[13:36:23.035]             setwd(...future.workdir)
[13:36:23.035]         {
[13:36:23.035]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:23.035]                 ...future.oldOptions$nwarnings <- NULL
[13:36:23.035]             }
[13:36:23.035]             base::options(...future.oldOptions)
[13:36:23.035]             if (.Platform$OS.type == "windows") {
[13:36:23.035]                 old_names <- names(...future.oldEnvVars)
[13:36:23.035]                 envs <- base::Sys.getenv()
[13:36:23.035]                 names <- names(envs)
[13:36:23.035]                 common <- intersect(names, old_names)
[13:36:23.035]                 added <- setdiff(names, old_names)
[13:36:23.035]                 removed <- setdiff(old_names, names)
[13:36:23.035]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:23.035]                   envs[common]]
[13:36:23.035]                 NAMES <- toupper(changed)
[13:36:23.035]                 args <- list()
[13:36:23.035]                 for (kk in seq_along(NAMES)) {
[13:36:23.035]                   name <- changed[[kk]]
[13:36:23.035]                   NAME <- NAMES[[kk]]
[13:36:23.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.035]                     next
[13:36:23.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.035]                 }
[13:36:23.035]                 NAMES <- toupper(added)
[13:36:23.035]                 for (kk in seq_along(NAMES)) {
[13:36:23.035]                   name <- added[[kk]]
[13:36:23.035]                   NAME <- NAMES[[kk]]
[13:36:23.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.035]                     next
[13:36:23.035]                   args[[name]] <- ""
[13:36:23.035]                 }
[13:36:23.035]                 NAMES <- toupper(removed)
[13:36:23.035]                 for (kk in seq_along(NAMES)) {
[13:36:23.035]                   name <- removed[[kk]]
[13:36:23.035]                   NAME <- NAMES[[kk]]
[13:36:23.035]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.035]                     next
[13:36:23.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.035]                 }
[13:36:23.035]                 if (length(args) > 0) 
[13:36:23.035]                   base::do.call(base::Sys.setenv, args = args)
[13:36:23.035]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:23.035]             }
[13:36:23.035]             else {
[13:36:23.035]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:23.035]             }
[13:36:23.035]             {
[13:36:23.035]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:23.035]                   0L) {
[13:36:23.035]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:23.035]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:23.035]                   base::options(opts)
[13:36:23.035]                 }
[13:36:23.035]                 {
[13:36:23.035]                   {
[13:36:23.035]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:23.035]                     NULL
[13:36:23.035]                   }
[13:36:23.035]                   options(future.plan = NULL)
[13:36:23.035]                   if (is.na(NA_character_)) 
[13:36:23.035]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.035]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:23.035]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:23.035]                     .init = FALSE)
[13:36:23.035]                 }
[13:36:23.035]             }
[13:36:23.035]         }
[13:36:23.035]     })
[13:36:23.035]     if (TRUE) {
[13:36:23.035]         base::sink(type = "output", split = FALSE)
[13:36:23.035]         if (TRUE) {
[13:36:23.035]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:23.035]         }
[13:36:23.035]         else {
[13:36:23.035]             ...future.result["stdout"] <- base::list(NULL)
[13:36:23.035]         }
[13:36:23.035]         base::close(...future.stdout)
[13:36:23.035]         ...future.stdout <- NULL
[13:36:23.035]     }
[13:36:23.035]     ...future.result$conditions <- ...future.conditions
[13:36:23.035]     ...future.result$finished <- base::Sys.time()
[13:36:23.035]     ...future.result
[13:36:23.035] }
[13:36:23.037] MultisessionFuture started
[13:36:23.037] - Launch lazy future ... done
[13:36:23.037] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:23.039] receiveMessageFromWorker() for ClusterFuture ...
[13:36:23.039] - Validating connection of MultisessionFuture
[13:36:23.039] - received message: FutureResult
[13:36:23.039] - Received FutureResult
[13:36:23.039] - Erased future from FutureRegistry
[13:36:23.039] result() for ClusterFuture ...
[13:36:23.039] - result already collected: FutureResult
[13:36:23.039] result() for ClusterFuture ... done
[13:36:23.039] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:23.040] result() for ClusterFuture ...
[13:36:23.040] - result already collected: FutureResult
[13:36:23.040] result() for ClusterFuture ... done
[13:36:23.040] result() for ClusterFuture ...
[13:36:23.040] - result already collected: FutureResult
[13:36:23.040] result() for ClusterFuture ... done
[13:36:23.040] getGlobalsAndPackages() ...
[13:36:23.040] Searching for globals...
[13:36:23.041] - globals found: [1] ‘{’
[13:36:23.041] Searching for globals ... DONE
[13:36:23.041] Resolving globals: FALSE
[13:36:23.041] 
[13:36:23.042] 
[13:36:23.042] getGlobalsAndPackages() ... DONE
[13:36:23.042] run() for ‘Future’ ...
[13:36:23.042] - state: ‘created’
[13:36:23.042] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:36:23.055] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:23.056] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:36:23.056]   - Field: ‘node’
[13:36:23.056]   - Field: ‘label’
[13:36:23.056]   - Field: ‘local’
[13:36:23.056]   - Field: ‘owner’
[13:36:23.056]   - Field: ‘envir’
[13:36:23.056]   - Field: ‘workers’
[13:36:23.056]   - Field: ‘packages’
[13:36:23.056]   - Field: ‘gc’
[13:36:23.056]   - Field: ‘conditions’
[13:36:23.056]   - Field: ‘persistent’
[13:36:23.057]   - Field: ‘expr’
[13:36:23.057]   - Field: ‘uuid’
[13:36:23.057]   - Field: ‘seed’
[13:36:23.057]   - Field: ‘version’
[13:36:23.057]   - Field: ‘result’
[13:36:23.057]   - Field: ‘asynchronous’
[13:36:23.057]   - Field: ‘calls’
[13:36:23.057]   - Field: ‘globals’
[13:36:23.057]   - Field: ‘stdout’
[13:36:23.057]   - Field: ‘earlySignal’
[13:36:23.057]   - Field: ‘lazy’
[13:36:23.058]   - Field: ‘state’
[13:36:23.058] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:36:23.058] - Launch lazy future ...
[13:36:23.058] Packages needed by the future expression (n = 0): <none>
[13:36:23.058] Packages needed by future strategies (n = 0): <none>
[13:36:23.059] {
[13:36:23.059]     {
[13:36:23.059]         {
[13:36:23.059]             ...future.startTime <- base::Sys.time()
[13:36:23.059]             {
[13:36:23.059]                 {
[13:36:23.059]                   {
[13:36:23.059]                     {
[13:36:23.059]                       base::local({
[13:36:23.059]                         has_future <- base::requireNamespace("future", 
[13:36:23.059]                           quietly = TRUE)
[13:36:23.059]                         if (has_future) {
[13:36:23.059]                           ns <- base::getNamespace("future")
[13:36:23.059]                           version <- ns[[".package"]][["version"]]
[13:36:23.059]                           if (is.null(version)) 
[13:36:23.059]                             version <- utils::packageVersion("future")
[13:36:23.059]                         }
[13:36:23.059]                         else {
[13:36:23.059]                           version <- NULL
[13:36:23.059]                         }
[13:36:23.059]                         if (!has_future || version < "1.8.0") {
[13:36:23.059]                           info <- base::c(r_version = base::gsub("R version ", 
[13:36:23.059]                             "", base::R.version$version.string), 
[13:36:23.059]                             platform = base::sprintf("%s (%s-bit)", 
[13:36:23.059]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:36:23.059]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:36:23.059]                               "release", "version")], collapse = " "), 
[13:36:23.059]                             hostname = base::Sys.info()[["nodename"]])
[13:36:23.059]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:36:23.059]                             info)
[13:36:23.059]                           info <- base::paste(info, collapse = "; ")
[13:36:23.059]                           if (!has_future) {
[13:36:23.059]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:36:23.059]                               info)
[13:36:23.059]                           }
[13:36:23.059]                           else {
[13:36:23.059]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:36:23.059]                               info, version)
[13:36:23.059]                           }
[13:36:23.059]                           base::stop(msg)
[13:36:23.059]                         }
[13:36:23.059]                       })
[13:36:23.059]                     }
[13:36:23.059]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:36:23.059]                     base::options(mc.cores = 1L)
[13:36:23.059]                   }
[13:36:23.059]                   ...future.strategy.old <- future::plan("list")
[13:36:23.059]                   options(future.plan = NULL)
[13:36:23.059]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.059]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:36:23.059]                 }
[13:36:23.059]                 ...future.workdir <- getwd()
[13:36:23.059]             }
[13:36:23.059]             ...future.oldOptions <- base::as.list(base::.Options)
[13:36:23.059]             ...future.oldEnvVars <- base::Sys.getenv()
[13:36:23.059]         }
[13:36:23.059]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:36:23.059]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:36:23.059]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:36:23.059]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:36:23.059]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:36:23.059]             future.stdout.windows.reencode = NULL, width = 80L)
[13:36:23.059]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:36:23.059]             base::names(...future.oldOptions))
[13:36:23.059]     }
[13:36:23.059]     if (FALSE) {
[13:36:23.059]     }
[13:36:23.059]     else {
[13:36:23.059]         if (TRUE) {
[13:36:23.059]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:36:23.059]                 open = "w")
[13:36:23.059]         }
[13:36:23.059]         else {
[13:36:23.059]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:36:23.059]                 windows = "NUL", "/dev/null"), open = "w")
[13:36:23.059]         }
[13:36:23.059]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:36:23.059]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:36:23.059]             base::sink(type = "output", split = FALSE)
[13:36:23.059]             base::close(...future.stdout)
[13:36:23.059]         }, add = TRUE)
[13:36:23.059]     }
[13:36:23.059]     ...future.frame <- base::sys.nframe()
[13:36:23.059]     ...future.conditions <- base::list()
[13:36:23.059]     ...future.rng <- base::globalenv()$.Random.seed
[13:36:23.059]     if (FALSE) {
[13:36:23.059]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:36:23.059]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:36:23.059]     }
[13:36:23.059]     ...future.result <- base::tryCatch({
[13:36:23.059]         base::withCallingHandlers({
[13:36:23.059]             ...future.value <- base::withVisible(base::local({
[13:36:23.059]                 ...future.makeSendCondition <- base::local({
[13:36:23.059]                   sendCondition <- NULL
[13:36:23.059]                   function(frame = 1L) {
[13:36:23.059]                     if (is.function(sendCondition)) 
[13:36:23.059]                       return(sendCondition)
[13:36:23.059]                     ns <- getNamespace("parallel")
[13:36:23.059]                     if (exists("sendData", mode = "function", 
[13:36:23.059]                       envir = ns)) {
[13:36:23.059]                       parallel_sendData <- get("sendData", mode = "function", 
[13:36:23.059]                         envir = ns)
[13:36:23.059]                       envir <- sys.frame(frame)
[13:36:23.059]                       master <- NULL
[13:36:23.059]                       while (!identical(envir, .GlobalEnv) && 
[13:36:23.059]                         !identical(envir, emptyenv())) {
[13:36:23.059]                         if (exists("master", mode = "list", envir = envir, 
[13:36:23.059]                           inherits = FALSE)) {
[13:36:23.059]                           master <- get("master", mode = "list", 
[13:36:23.059]                             envir = envir, inherits = FALSE)
[13:36:23.059]                           if (inherits(master, c("SOCKnode", 
[13:36:23.059]                             "SOCK0node"))) {
[13:36:23.059]                             sendCondition <<- function(cond) {
[13:36:23.059]                               data <- list(type = "VALUE", value = cond, 
[13:36:23.059]                                 success = TRUE)
[13:36:23.059]                               parallel_sendData(master, data)
[13:36:23.059]                             }
[13:36:23.059]                             return(sendCondition)
[13:36:23.059]                           }
[13:36:23.059]                         }
[13:36:23.059]                         frame <- frame + 1L
[13:36:23.059]                         envir <- sys.frame(frame)
[13:36:23.059]                       }
[13:36:23.059]                     }
[13:36:23.059]                     sendCondition <<- function(cond) NULL
[13:36:23.059]                   }
[13:36:23.059]                 })
[13:36:23.059]                 withCallingHandlers({
[13:36:23.059]                   {
[13:36:23.059]                     42
[13:36:23.059]                   }
[13:36:23.059]                 }, immediateCondition = function(cond) {
[13:36:23.059]                   sendCondition <- ...future.makeSendCondition()
[13:36:23.059]                   sendCondition(cond)
[13:36:23.059]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.059]                   {
[13:36:23.059]                     inherits <- base::inherits
[13:36:23.059]                     invokeRestart <- base::invokeRestart
[13:36:23.059]                     is.null <- base::is.null
[13:36:23.059]                     muffled <- FALSE
[13:36:23.059]                     if (inherits(cond, "message")) {
[13:36:23.059]                       muffled <- grepl(pattern, "muffleMessage")
[13:36:23.059]                       if (muffled) 
[13:36:23.059]                         invokeRestart("muffleMessage")
[13:36:23.059]                     }
[13:36:23.059]                     else if (inherits(cond, "warning")) {
[13:36:23.059]                       muffled <- grepl(pattern, "muffleWarning")
[13:36:23.059]                       if (muffled) 
[13:36:23.059]                         invokeRestart("muffleWarning")
[13:36:23.059]                     }
[13:36:23.059]                     else if (inherits(cond, "condition")) {
[13:36:23.059]                       if (!is.null(pattern)) {
[13:36:23.059]                         computeRestarts <- base::computeRestarts
[13:36:23.059]                         grepl <- base::grepl
[13:36:23.059]                         restarts <- computeRestarts(cond)
[13:36:23.059]                         for (restart in restarts) {
[13:36:23.059]                           name <- restart$name
[13:36:23.059]                           if (is.null(name)) 
[13:36:23.059]                             next
[13:36:23.059]                           if (!grepl(pattern, name)) 
[13:36:23.059]                             next
[13:36:23.059]                           invokeRestart(restart)
[13:36:23.059]                           muffled <- TRUE
[13:36:23.059]                           break
[13:36:23.059]                         }
[13:36:23.059]                       }
[13:36:23.059]                     }
[13:36:23.059]                     invisible(muffled)
[13:36:23.059]                   }
[13:36:23.059]                   muffleCondition(cond)
[13:36:23.059]                 })
[13:36:23.059]             }))
[13:36:23.059]             future::FutureResult(value = ...future.value$value, 
[13:36:23.059]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.059]                   ...future.rng), globalenv = if (FALSE) 
[13:36:23.059]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:36:23.059]                     ...future.globalenv.names))
[13:36:23.059]                 else NULL, started = ...future.startTime, version = "1.8")
[13:36:23.059]         }, condition = base::local({
[13:36:23.059]             c <- base::c
[13:36:23.059]             inherits <- base::inherits
[13:36:23.059]             invokeRestart <- base::invokeRestart
[13:36:23.059]             length <- base::length
[13:36:23.059]             list <- base::list
[13:36:23.059]             seq.int <- base::seq.int
[13:36:23.059]             signalCondition <- base::signalCondition
[13:36:23.059]             sys.calls <- base::sys.calls
[13:36:23.059]             `[[` <- base::`[[`
[13:36:23.059]             `+` <- base::`+`
[13:36:23.059]             `<<-` <- base::`<<-`
[13:36:23.059]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:36:23.059]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:36:23.059]                   3L)]
[13:36:23.059]             }
[13:36:23.059]             function(cond) {
[13:36:23.059]                 is_error <- inherits(cond, "error")
[13:36:23.059]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:36:23.059]                   NULL)
[13:36:23.059]                 if (is_error) {
[13:36:23.059]                   sessionInformation <- function() {
[13:36:23.059]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:36:23.059]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:36:23.059]                       search = base::search(), system = base::Sys.info())
[13:36:23.059]                   }
[13:36:23.059]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.059]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:36:23.059]                     cond$call), session = sessionInformation(), 
[13:36:23.059]                     timestamp = base::Sys.time(), signaled = 0L)
[13:36:23.059]                   signalCondition(cond)
[13:36:23.059]                 }
[13:36:23.059]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:36:23.059]                 "immediateCondition"))) {
[13:36:23.059]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:36:23.059]                   ...future.conditions[[length(...future.conditions) + 
[13:36:23.059]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:36:23.059]                   if (TRUE && !signal) {
[13:36:23.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.059]                     {
[13:36:23.059]                       inherits <- base::inherits
[13:36:23.059]                       invokeRestart <- base::invokeRestart
[13:36:23.059]                       is.null <- base::is.null
[13:36:23.059]                       muffled <- FALSE
[13:36:23.059]                       if (inherits(cond, "message")) {
[13:36:23.059]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.059]                         if (muffled) 
[13:36:23.059]                           invokeRestart("muffleMessage")
[13:36:23.059]                       }
[13:36:23.059]                       else if (inherits(cond, "warning")) {
[13:36:23.059]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.059]                         if (muffled) 
[13:36:23.059]                           invokeRestart("muffleWarning")
[13:36:23.059]                       }
[13:36:23.059]                       else if (inherits(cond, "condition")) {
[13:36:23.059]                         if (!is.null(pattern)) {
[13:36:23.059]                           computeRestarts <- base::computeRestarts
[13:36:23.059]                           grepl <- base::grepl
[13:36:23.059]                           restarts <- computeRestarts(cond)
[13:36:23.059]                           for (restart in restarts) {
[13:36:23.059]                             name <- restart$name
[13:36:23.059]                             if (is.null(name)) 
[13:36:23.059]                               next
[13:36:23.059]                             if (!grepl(pattern, name)) 
[13:36:23.059]                               next
[13:36:23.059]                             invokeRestart(restart)
[13:36:23.059]                             muffled <- TRUE
[13:36:23.059]                             break
[13:36:23.059]                           }
[13:36:23.059]                         }
[13:36:23.059]                       }
[13:36:23.059]                       invisible(muffled)
[13:36:23.059]                     }
[13:36:23.059]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.059]                   }
[13:36:23.059]                 }
[13:36:23.059]                 else {
[13:36:23.059]                   if (TRUE) {
[13:36:23.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:36:23.059]                     {
[13:36:23.059]                       inherits <- base::inherits
[13:36:23.059]                       invokeRestart <- base::invokeRestart
[13:36:23.059]                       is.null <- base::is.null
[13:36:23.059]                       muffled <- FALSE
[13:36:23.059]                       if (inherits(cond, "message")) {
[13:36:23.059]                         muffled <- grepl(pattern, "muffleMessage")
[13:36:23.059]                         if (muffled) 
[13:36:23.059]                           invokeRestart("muffleMessage")
[13:36:23.059]                       }
[13:36:23.059]                       else if (inherits(cond, "warning")) {
[13:36:23.059]                         muffled <- grepl(pattern, "muffleWarning")
[13:36:23.059]                         if (muffled) 
[13:36:23.059]                           invokeRestart("muffleWarning")
[13:36:23.059]                       }
[13:36:23.059]                       else if (inherits(cond, "condition")) {
[13:36:23.059]                         if (!is.null(pattern)) {
[13:36:23.059]                           computeRestarts <- base::computeRestarts
[13:36:23.059]                           grepl <- base::grepl
[13:36:23.059]                           restarts <- computeRestarts(cond)
[13:36:23.059]                           for (restart in restarts) {
[13:36:23.059]                             name <- restart$name
[13:36:23.059]                             if (is.null(name)) 
[13:36:23.059]                               next
[13:36:23.059]                             if (!grepl(pattern, name)) 
[13:36:23.059]                               next
[13:36:23.059]                             invokeRestart(restart)
[13:36:23.059]                             muffled <- TRUE
[13:36:23.059]                             break
[13:36:23.059]                           }
[13:36:23.059]                         }
[13:36:23.059]                       }
[13:36:23.059]                       invisible(muffled)
[13:36:23.059]                     }
[13:36:23.059]                     muffleCondition(cond, pattern = "^muffle")
[13:36:23.059]                   }
[13:36:23.059]                 }
[13:36:23.059]             }
[13:36:23.059]         }))
[13:36:23.059]     }, error = function(ex) {
[13:36:23.059]         base::structure(base::list(value = NULL, visible = NULL, 
[13:36:23.059]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:36:23.059]                 ...future.rng), started = ...future.startTime, 
[13:36:23.059]             finished = Sys.time(), session_uuid = NA_character_, 
[13:36:23.059]             version = "1.8"), class = "FutureResult")
[13:36:23.059]     }, finally = {
[13:36:23.059]         if (!identical(...future.workdir, getwd())) 
[13:36:23.059]             setwd(...future.workdir)
[13:36:23.059]         {
[13:36:23.059]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:36:23.059]                 ...future.oldOptions$nwarnings <- NULL
[13:36:23.059]             }
[13:36:23.059]             base::options(...future.oldOptions)
[13:36:23.059]             if (.Platform$OS.type == "windows") {
[13:36:23.059]                 old_names <- names(...future.oldEnvVars)
[13:36:23.059]                 envs <- base::Sys.getenv()
[13:36:23.059]                 names <- names(envs)
[13:36:23.059]                 common <- intersect(names, old_names)
[13:36:23.059]                 added <- setdiff(names, old_names)
[13:36:23.059]                 removed <- setdiff(old_names, names)
[13:36:23.059]                 changed <- common[...future.oldEnvVars[common] != 
[13:36:23.059]                   envs[common]]
[13:36:23.059]                 NAMES <- toupper(changed)
[13:36:23.059]                 args <- list()
[13:36:23.059]                 for (kk in seq_along(NAMES)) {
[13:36:23.059]                   name <- changed[[kk]]
[13:36:23.059]                   NAME <- NAMES[[kk]]
[13:36:23.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.059]                     next
[13:36:23.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.059]                 }
[13:36:23.059]                 NAMES <- toupper(added)
[13:36:23.059]                 for (kk in seq_along(NAMES)) {
[13:36:23.059]                   name <- added[[kk]]
[13:36:23.059]                   NAME <- NAMES[[kk]]
[13:36:23.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.059]                     next
[13:36:23.059]                   args[[name]] <- ""
[13:36:23.059]                 }
[13:36:23.059]                 NAMES <- toupper(removed)
[13:36:23.059]                 for (kk in seq_along(NAMES)) {
[13:36:23.059]                   name <- removed[[kk]]
[13:36:23.059]                   NAME <- NAMES[[kk]]
[13:36:23.059]                   if (name != NAME && is.element(NAME, old_names)) 
[13:36:23.059]                     next
[13:36:23.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:36:23.059]                 }
[13:36:23.059]                 if (length(args) > 0) 
[13:36:23.059]                   base::do.call(base::Sys.setenv, args = args)
[13:36:23.059]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:36:23.059]             }
[13:36:23.059]             else {
[13:36:23.059]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:36:23.059]             }
[13:36:23.059]             {
[13:36:23.059]                 if (base::length(...future.futureOptionsAdded) > 
[13:36:23.059]                   0L) {
[13:36:23.059]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:36:23.059]                   base::names(opts) <- ...future.futureOptionsAdded
[13:36:23.059]                   base::options(opts)
[13:36:23.059]                 }
[13:36:23.059]                 {
[13:36:23.059]                   {
[13:36:23.059]                     base::options(mc.cores = ...future.mc.cores.old)
[13:36:23.059]                     NULL
[13:36:23.059]                   }
[13:36:23.059]                   options(future.plan = NULL)
[13:36:23.059]                   if (is.na(NA_character_)) 
[13:36:23.059]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:36:23.059]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:36:23.059]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:36:23.059]                     .init = FALSE)
[13:36:23.059]                 }
[13:36:23.059]             }
[13:36:23.059]         }
[13:36:23.059]     })
[13:36:23.059]     if (TRUE) {
[13:36:23.059]         base::sink(type = "output", split = FALSE)
[13:36:23.059]         if (TRUE) {
[13:36:23.059]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:36:23.059]         }
[13:36:23.059]         else {
[13:36:23.059]             ...future.result["stdout"] <- base::list(NULL)
[13:36:23.059]         }
[13:36:23.059]         base::close(...future.stdout)
[13:36:23.059]         ...future.stdout <- NULL
[13:36:23.059]     }
[13:36:23.059]     ...future.result$conditions <- ...future.conditions
[13:36:23.059]     ...future.result$finished <- base::Sys.time()
[13:36:23.059]     ...future.result
[13:36:23.059] }
[13:36:23.061] MultisessionFuture started
[13:36:23.061] - Launch lazy future ... done
[13:36:23.061] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:36:23.063] receiveMessageFromWorker() for ClusterFuture ...
[13:36:23.063] - Validating connection of MultisessionFuture
[13:36:23.063] - received message: FutureResult
[13:36:23.063] - Received FutureResult
[13:36:23.063] - Erased future from FutureRegistry
[13:36:23.063] result() for ClusterFuture ...
[13:36:23.063] - result already collected: FutureResult
[13:36:23.063] result() for ClusterFuture ... done
[13:36:23.063] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 51dfd128-caa1-e432-2142-a9bd6a534cbe
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:36:23.064] result() for ClusterFuture ...
[13:36:23.064] - result already collected: FutureResult
[13:36:23.064] result() for ClusterFuture ... done
[13:36:23.064] result() for ClusterFuture ...
[13:36:23.064] - result already collected: FutureResult
[13:36:23.064] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[13:36:23.065] plan(): Setting new future strategy stack:
[13:36:23.065] List of future strategies:
[13:36:23.065] 1. FutureStrategy:
[13:36:23.065]    - args: function (..., envir = parent.frame())
[13:36:23.065]    - tweaked: FALSE
[13:36:23.065]    - call: future::plan(oplan)
[13:36:23.066] plan(): nbrOfWorkers() = 1
> 
