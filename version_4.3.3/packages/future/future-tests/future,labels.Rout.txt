
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:32:38.214] plan(): Setting new future strategy stack:
[10:32:38.215] List of future strategies:
[10:32:38.215] 1. sequential:
[10:32:38.215]    - args: function (..., envir = parent.frame())
[10:32:38.215]    - tweaked: FALSE
[10:32:38.215]    - call: future::plan("sequential")
[10:32:38.228] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[10:32:38.251] plan(): Setting new future strategy stack:
[10:32:38.252] List of future strategies:
[10:32:38.252] 1. sequential:
[10:32:38.252]    - args: function (..., envir = parent.frame())
[10:32:38.252]    - tweaked: FALSE
[10:32:38.252]    - call: plan(strategy)
[10:32:38.263] plan(): nbrOfWorkers() = 1
[10:32:38.264] getGlobalsAndPackages() ...
[10:32:38.264] Searching for globals...
[10:32:38.267] 
[10:32:38.267] Searching for globals ... DONE
[10:32:38.267] - globals: [0] <none>
[10:32:38.267] getGlobalsAndPackages() ... DONE
[10:32:38.268] Packages needed by the future expression (n = 0): <none>
[10:32:38.268] Packages needed by future strategies (n = 0): <none>
[10:32:38.269] {
[10:32:38.269]     {
[10:32:38.269]         {
[10:32:38.269]             ...future.startTime <- base::Sys.time()
[10:32:38.269]             {
[10:32:38.269]                 {
[10:32:38.269]                   {
[10:32:38.269]                     base::local({
[10:32:38.269]                       has_future <- base::requireNamespace("future", 
[10:32:38.269]                         quietly = TRUE)
[10:32:38.269]                       if (has_future) {
[10:32:38.269]                         ns <- base::getNamespace("future")
[10:32:38.269]                         version <- ns[[".package"]][["version"]]
[10:32:38.269]                         if (is.null(version)) 
[10:32:38.269]                           version <- utils::packageVersion("future")
[10:32:38.269]                       }
[10:32:38.269]                       else {
[10:32:38.269]                         version <- NULL
[10:32:38.269]                       }
[10:32:38.269]                       if (!has_future || version < "1.8.0") {
[10:32:38.269]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.269]                           "", base::R.version$version.string), 
[10:32:38.269]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.269]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.269]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.269]                             "release", "version")], collapse = " "), 
[10:32:38.269]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.269]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.269]                           info)
[10:32:38.269]                         info <- base::paste(info, collapse = "; ")
[10:32:38.269]                         if (!has_future) {
[10:32:38.269]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.269]                             info)
[10:32:38.269]                         }
[10:32:38.269]                         else {
[10:32:38.269]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.269]                             info, version)
[10:32:38.269]                         }
[10:32:38.269]                         base::stop(msg)
[10:32:38.269]                       }
[10:32:38.269]                     })
[10:32:38.269]                   }
[10:32:38.269]                   ...future.strategy.old <- future::plan("list")
[10:32:38.269]                   options(future.plan = NULL)
[10:32:38.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.269]                 }
[10:32:38.269]                 ...future.workdir <- getwd()
[10:32:38.269]             }
[10:32:38.269]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.269]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.269]         }
[10:32:38.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.269]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.269]             base::names(...future.oldOptions))
[10:32:38.269]     }
[10:32:38.269]     if (FALSE) {
[10:32:38.269]     }
[10:32:38.269]     else {
[10:32:38.269]         if (TRUE) {
[10:32:38.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.269]                 open = "w")
[10:32:38.269]         }
[10:32:38.269]         else {
[10:32:38.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.269]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.269]         }
[10:32:38.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.269]             base::sink(type = "output", split = FALSE)
[10:32:38.269]             base::close(...future.stdout)
[10:32:38.269]         }, add = TRUE)
[10:32:38.269]     }
[10:32:38.269]     ...future.frame <- base::sys.nframe()
[10:32:38.269]     ...future.conditions <- base::list()
[10:32:38.269]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.269]     if (FALSE) {
[10:32:38.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.269]     }
[10:32:38.269]     ...future.result <- base::tryCatch({
[10:32:38.269]         base::withCallingHandlers({
[10:32:38.269]             ...future.value <- base::withVisible(base::local(42))
[10:32:38.269]             future::FutureResult(value = ...future.value$value, 
[10:32:38.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.269]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.269]                     ...future.globalenv.names))
[10:32:38.269]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.269]         }, condition = base::local({
[10:32:38.269]             c <- base::c
[10:32:38.269]             inherits <- base::inherits
[10:32:38.269]             invokeRestart <- base::invokeRestart
[10:32:38.269]             length <- base::length
[10:32:38.269]             list <- base::list
[10:32:38.269]             seq.int <- base::seq.int
[10:32:38.269]             signalCondition <- base::signalCondition
[10:32:38.269]             sys.calls <- base::sys.calls
[10:32:38.269]             `[[` <- base::`[[`
[10:32:38.269]             `+` <- base::`+`
[10:32:38.269]             `<<-` <- base::`<<-`
[10:32:38.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.269]                   3L)]
[10:32:38.269]             }
[10:32:38.269]             function(cond) {
[10:32:38.269]                 is_error <- inherits(cond, "error")
[10:32:38.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.269]                   NULL)
[10:32:38.269]                 if (is_error) {
[10:32:38.269]                   sessionInformation <- function() {
[10:32:38.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.269]                       search = base::search(), system = base::Sys.info())
[10:32:38.269]                   }
[10:32:38.269]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.269]                     cond$call), session = sessionInformation(), 
[10:32:38.269]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.269]                   signalCondition(cond)
[10:32:38.269]                 }
[10:32:38.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.269]                 "immediateCondition"))) {
[10:32:38.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.269]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.269]                   if (TRUE && !signal) {
[10:32:38.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.269]                     {
[10:32:38.269]                       inherits <- base::inherits
[10:32:38.269]                       invokeRestart <- base::invokeRestart
[10:32:38.269]                       is.null <- base::is.null
[10:32:38.269]                       muffled <- FALSE
[10:32:38.269]                       if (inherits(cond, "message")) {
[10:32:38.269]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.269]                         if (muffled) 
[10:32:38.269]                           invokeRestart("muffleMessage")
[10:32:38.269]                       }
[10:32:38.269]                       else if (inherits(cond, "warning")) {
[10:32:38.269]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.269]                         if (muffled) 
[10:32:38.269]                           invokeRestart("muffleWarning")
[10:32:38.269]                       }
[10:32:38.269]                       else if (inherits(cond, "condition")) {
[10:32:38.269]                         if (!is.null(pattern)) {
[10:32:38.269]                           computeRestarts <- base::computeRestarts
[10:32:38.269]                           grepl <- base::grepl
[10:32:38.269]                           restarts <- computeRestarts(cond)
[10:32:38.269]                           for (restart in restarts) {
[10:32:38.269]                             name <- restart$name
[10:32:38.269]                             if (is.null(name)) 
[10:32:38.269]                               next
[10:32:38.269]                             if (!grepl(pattern, name)) 
[10:32:38.269]                               next
[10:32:38.269]                             invokeRestart(restart)
[10:32:38.269]                             muffled <- TRUE
[10:32:38.269]                             break
[10:32:38.269]                           }
[10:32:38.269]                         }
[10:32:38.269]                       }
[10:32:38.269]                       invisible(muffled)
[10:32:38.269]                     }
[10:32:38.269]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.269]                   }
[10:32:38.269]                 }
[10:32:38.269]                 else {
[10:32:38.269]                   if (TRUE) {
[10:32:38.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.269]                     {
[10:32:38.269]                       inherits <- base::inherits
[10:32:38.269]                       invokeRestart <- base::invokeRestart
[10:32:38.269]                       is.null <- base::is.null
[10:32:38.269]                       muffled <- FALSE
[10:32:38.269]                       if (inherits(cond, "message")) {
[10:32:38.269]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.269]                         if (muffled) 
[10:32:38.269]                           invokeRestart("muffleMessage")
[10:32:38.269]                       }
[10:32:38.269]                       else if (inherits(cond, "warning")) {
[10:32:38.269]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.269]                         if (muffled) 
[10:32:38.269]                           invokeRestart("muffleWarning")
[10:32:38.269]                       }
[10:32:38.269]                       else if (inherits(cond, "condition")) {
[10:32:38.269]                         if (!is.null(pattern)) {
[10:32:38.269]                           computeRestarts <- base::computeRestarts
[10:32:38.269]                           grepl <- base::grepl
[10:32:38.269]                           restarts <- computeRestarts(cond)
[10:32:38.269]                           for (restart in restarts) {
[10:32:38.269]                             name <- restart$name
[10:32:38.269]                             if (is.null(name)) 
[10:32:38.269]                               next
[10:32:38.269]                             if (!grepl(pattern, name)) 
[10:32:38.269]                               next
[10:32:38.269]                             invokeRestart(restart)
[10:32:38.269]                             muffled <- TRUE
[10:32:38.269]                             break
[10:32:38.269]                           }
[10:32:38.269]                         }
[10:32:38.269]                       }
[10:32:38.269]                       invisible(muffled)
[10:32:38.269]                     }
[10:32:38.269]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.269]                   }
[10:32:38.269]                 }
[10:32:38.269]             }
[10:32:38.269]         }))
[10:32:38.269]     }, error = function(ex) {
[10:32:38.269]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.269]                 ...future.rng), started = ...future.startTime, 
[10:32:38.269]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.269]             version = "1.8"), class = "FutureResult")
[10:32:38.269]     }, finally = {
[10:32:38.269]         if (!identical(...future.workdir, getwd())) 
[10:32:38.269]             setwd(...future.workdir)
[10:32:38.269]         {
[10:32:38.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.269]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.269]             }
[10:32:38.269]             base::options(...future.oldOptions)
[10:32:38.269]             if (.Platform$OS.type == "windows") {
[10:32:38.269]                 old_names <- names(...future.oldEnvVars)
[10:32:38.269]                 envs <- base::Sys.getenv()
[10:32:38.269]                 names <- names(envs)
[10:32:38.269]                 common <- intersect(names, old_names)
[10:32:38.269]                 added <- setdiff(names, old_names)
[10:32:38.269]                 removed <- setdiff(old_names, names)
[10:32:38.269]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.269]                   envs[common]]
[10:32:38.269]                 NAMES <- toupper(changed)
[10:32:38.269]                 args <- list()
[10:32:38.269]                 for (kk in seq_along(NAMES)) {
[10:32:38.269]                   name <- changed[[kk]]
[10:32:38.269]                   NAME <- NAMES[[kk]]
[10:32:38.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.269]                     next
[10:32:38.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.269]                 }
[10:32:38.269]                 NAMES <- toupper(added)
[10:32:38.269]                 for (kk in seq_along(NAMES)) {
[10:32:38.269]                   name <- added[[kk]]
[10:32:38.269]                   NAME <- NAMES[[kk]]
[10:32:38.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.269]                     next
[10:32:38.269]                   args[[name]] <- ""
[10:32:38.269]                 }
[10:32:38.269]                 NAMES <- toupper(removed)
[10:32:38.269]                 for (kk in seq_along(NAMES)) {
[10:32:38.269]                   name <- removed[[kk]]
[10:32:38.269]                   NAME <- NAMES[[kk]]
[10:32:38.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.269]                     next
[10:32:38.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.269]                 }
[10:32:38.269]                 if (length(args) > 0) 
[10:32:38.269]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.269]             }
[10:32:38.269]             else {
[10:32:38.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.269]             }
[10:32:38.269]             {
[10:32:38.269]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.269]                   0L) {
[10:32:38.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.269]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.269]                   base::options(opts)
[10:32:38.269]                 }
[10:32:38.269]                 {
[10:32:38.269]                   {
[10:32:38.269]                     NULL
[10:32:38.269]                     RNGkind("Mersenne-Twister")
[10:32:38.269]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.269]                       inherits = FALSE)
[10:32:38.269]                   }
[10:32:38.269]                   options(future.plan = NULL)
[10:32:38.269]                   if (is.na(NA_character_)) 
[10:32:38.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.269]                     .init = FALSE)
[10:32:38.269]                 }
[10:32:38.269]             }
[10:32:38.269]         }
[10:32:38.269]     })
[10:32:38.269]     if (TRUE) {
[10:32:38.269]         base::sink(type = "output", split = FALSE)
[10:32:38.269]         if (TRUE) {
[10:32:38.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.269]         }
[10:32:38.269]         else {
[10:32:38.269]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.269]         }
[10:32:38.269]         base::close(...future.stdout)
[10:32:38.269]         ...future.stdout <- NULL
[10:32:38.269]     }
[10:32:38.269]     ...future.result$conditions <- ...future.conditions
[10:32:38.269]     ...future.result$finished <- base::Sys.time()
[10:32:38.269]     ...future.result
[10:32:38.269] }
[10:32:38.271] plan(): Setting new future strategy stack:
[10:32:38.271] List of future strategies:
[10:32:38.271] 1. sequential:
[10:32:38.271]    - args: function (..., envir = parent.frame())
[10:32:38.271]    - tweaked: FALSE
[10:32:38.271]    - call: NULL
[10:32:38.271] plan(): nbrOfWorkers() = 1
[10:32:38.272] plan(): Setting new future strategy stack:
[10:32:38.272] List of future strategies:
[10:32:38.272] 1. sequential:
[10:32:38.272]    - args: function (..., envir = parent.frame())
[10:32:38.272]    - tweaked: FALSE
[10:32:38.272]    - call: plan(strategy)
[10:32:38.273] plan(): nbrOfWorkers() = 1
[10:32:38.273] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.275] getGlobalsAndPackages() ...
[10:32:38.275] Searching for globals...
[10:32:38.275] 
[10:32:38.275] Searching for globals ... DONE
[10:32:38.275] - globals: [0] <none>
[10:32:38.275] getGlobalsAndPackages() ... DONE
[10:32:38.276] run() for ‘Future’ ...
[10:32:38.276] - state: ‘created’
[10:32:38.276] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:38.276] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.276] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:38.277]   - Field: ‘label’
[10:32:38.277]   - Field: ‘local’
[10:32:38.277]   - Field: ‘owner’
[10:32:38.277]   - Field: ‘envir’
[10:32:38.277]   - Field: ‘packages’
[10:32:38.277]   - Field: ‘gc’
[10:32:38.277]   - Field: ‘conditions’
[10:32:38.277]   - Field: ‘expr’
[10:32:38.277]   - Field: ‘uuid’
[10:32:38.277]   - Field: ‘seed’
[10:32:38.278]   - Field: ‘version’
[10:32:38.278]   - Field: ‘result’
[10:32:38.278]   - Field: ‘asynchronous’
[10:32:38.278]   - Field: ‘calls’
[10:32:38.278]   - Field: ‘globals’
[10:32:38.278]   - Field: ‘stdout’
[10:32:38.278]   - Field: ‘earlySignal’
[10:32:38.278]   - Field: ‘lazy’
[10:32:38.278]   - Field: ‘state’
[10:32:38.278] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:38.278] - Launch lazy future ...
[10:32:38.279] Packages needed by the future expression (n = 0): <none>
[10:32:38.279] Packages needed by future strategies (n = 0): <none>
[10:32:38.279] {
[10:32:38.279]     {
[10:32:38.279]         {
[10:32:38.279]             ...future.startTime <- base::Sys.time()
[10:32:38.279]             {
[10:32:38.279]                 {
[10:32:38.279]                   {
[10:32:38.279]                     base::local({
[10:32:38.279]                       has_future <- base::requireNamespace("future", 
[10:32:38.279]                         quietly = TRUE)
[10:32:38.279]                       if (has_future) {
[10:32:38.279]                         ns <- base::getNamespace("future")
[10:32:38.279]                         version <- ns[[".package"]][["version"]]
[10:32:38.279]                         if (is.null(version)) 
[10:32:38.279]                           version <- utils::packageVersion("future")
[10:32:38.279]                       }
[10:32:38.279]                       else {
[10:32:38.279]                         version <- NULL
[10:32:38.279]                       }
[10:32:38.279]                       if (!has_future || version < "1.8.0") {
[10:32:38.279]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.279]                           "", base::R.version$version.string), 
[10:32:38.279]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.279]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.279]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.279]                             "release", "version")], collapse = " "), 
[10:32:38.279]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.279]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.279]                           info)
[10:32:38.279]                         info <- base::paste(info, collapse = "; ")
[10:32:38.279]                         if (!has_future) {
[10:32:38.279]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.279]                             info)
[10:32:38.279]                         }
[10:32:38.279]                         else {
[10:32:38.279]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.279]                             info, version)
[10:32:38.279]                         }
[10:32:38.279]                         base::stop(msg)
[10:32:38.279]                       }
[10:32:38.279]                     })
[10:32:38.279]                   }
[10:32:38.279]                   ...future.strategy.old <- future::plan("list")
[10:32:38.279]                   options(future.plan = NULL)
[10:32:38.279]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.279]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.279]                 }
[10:32:38.279]                 ...future.workdir <- getwd()
[10:32:38.279]             }
[10:32:38.279]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.279]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.279]         }
[10:32:38.279]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.279]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.279]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.279]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.279]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.279]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.279]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.279]             base::names(...future.oldOptions))
[10:32:38.279]     }
[10:32:38.279]     if (FALSE) {
[10:32:38.279]     }
[10:32:38.279]     else {
[10:32:38.279]         if (TRUE) {
[10:32:38.279]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.279]                 open = "w")
[10:32:38.279]         }
[10:32:38.279]         else {
[10:32:38.279]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.279]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.279]         }
[10:32:38.279]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.279]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.279]             base::sink(type = "output", split = FALSE)
[10:32:38.279]             base::close(...future.stdout)
[10:32:38.279]         }, add = TRUE)
[10:32:38.279]     }
[10:32:38.279]     ...future.frame <- base::sys.nframe()
[10:32:38.279]     ...future.conditions <- base::list()
[10:32:38.279]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.279]     if (FALSE) {
[10:32:38.279]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.279]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.279]     }
[10:32:38.279]     ...future.result <- base::tryCatch({
[10:32:38.279]         base::withCallingHandlers({
[10:32:38.279]             ...future.value <- base::withVisible(base::local(42))
[10:32:38.279]             future::FutureResult(value = ...future.value$value, 
[10:32:38.279]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.279]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.279]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.279]                     ...future.globalenv.names))
[10:32:38.279]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.279]         }, condition = base::local({
[10:32:38.279]             c <- base::c
[10:32:38.279]             inherits <- base::inherits
[10:32:38.279]             invokeRestart <- base::invokeRestart
[10:32:38.279]             length <- base::length
[10:32:38.279]             list <- base::list
[10:32:38.279]             seq.int <- base::seq.int
[10:32:38.279]             signalCondition <- base::signalCondition
[10:32:38.279]             sys.calls <- base::sys.calls
[10:32:38.279]             `[[` <- base::`[[`
[10:32:38.279]             `+` <- base::`+`
[10:32:38.279]             `<<-` <- base::`<<-`
[10:32:38.279]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.279]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.279]                   3L)]
[10:32:38.279]             }
[10:32:38.279]             function(cond) {
[10:32:38.279]                 is_error <- inherits(cond, "error")
[10:32:38.279]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.279]                   NULL)
[10:32:38.279]                 if (is_error) {
[10:32:38.279]                   sessionInformation <- function() {
[10:32:38.279]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.279]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.279]                       search = base::search(), system = base::Sys.info())
[10:32:38.279]                   }
[10:32:38.279]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.279]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.279]                     cond$call), session = sessionInformation(), 
[10:32:38.279]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.279]                   signalCondition(cond)
[10:32:38.279]                 }
[10:32:38.279]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.279]                 "immediateCondition"))) {
[10:32:38.279]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.279]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.279]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.279]                   if (TRUE && !signal) {
[10:32:38.279]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.279]                     {
[10:32:38.279]                       inherits <- base::inherits
[10:32:38.279]                       invokeRestart <- base::invokeRestart
[10:32:38.279]                       is.null <- base::is.null
[10:32:38.279]                       muffled <- FALSE
[10:32:38.279]                       if (inherits(cond, "message")) {
[10:32:38.279]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.279]                         if (muffled) 
[10:32:38.279]                           invokeRestart("muffleMessage")
[10:32:38.279]                       }
[10:32:38.279]                       else if (inherits(cond, "warning")) {
[10:32:38.279]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.279]                         if (muffled) 
[10:32:38.279]                           invokeRestart("muffleWarning")
[10:32:38.279]                       }
[10:32:38.279]                       else if (inherits(cond, "condition")) {
[10:32:38.279]                         if (!is.null(pattern)) {
[10:32:38.279]                           computeRestarts <- base::computeRestarts
[10:32:38.279]                           grepl <- base::grepl
[10:32:38.279]                           restarts <- computeRestarts(cond)
[10:32:38.279]                           for (restart in restarts) {
[10:32:38.279]                             name <- restart$name
[10:32:38.279]                             if (is.null(name)) 
[10:32:38.279]                               next
[10:32:38.279]                             if (!grepl(pattern, name)) 
[10:32:38.279]                               next
[10:32:38.279]                             invokeRestart(restart)
[10:32:38.279]                             muffled <- TRUE
[10:32:38.279]                             break
[10:32:38.279]                           }
[10:32:38.279]                         }
[10:32:38.279]                       }
[10:32:38.279]                       invisible(muffled)
[10:32:38.279]                     }
[10:32:38.279]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.279]                   }
[10:32:38.279]                 }
[10:32:38.279]                 else {
[10:32:38.279]                   if (TRUE) {
[10:32:38.279]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.279]                     {
[10:32:38.279]                       inherits <- base::inherits
[10:32:38.279]                       invokeRestart <- base::invokeRestart
[10:32:38.279]                       is.null <- base::is.null
[10:32:38.279]                       muffled <- FALSE
[10:32:38.279]                       if (inherits(cond, "message")) {
[10:32:38.279]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.279]                         if (muffled) 
[10:32:38.279]                           invokeRestart("muffleMessage")
[10:32:38.279]                       }
[10:32:38.279]                       else if (inherits(cond, "warning")) {
[10:32:38.279]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.279]                         if (muffled) 
[10:32:38.279]                           invokeRestart("muffleWarning")
[10:32:38.279]                       }
[10:32:38.279]                       else if (inherits(cond, "condition")) {
[10:32:38.279]                         if (!is.null(pattern)) {
[10:32:38.279]                           computeRestarts <- base::computeRestarts
[10:32:38.279]                           grepl <- base::grepl
[10:32:38.279]                           restarts <- computeRestarts(cond)
[10:32:38.279]                           for (restart in restarts) {
[10:32:38.279]                             name <- restart$name
[10:32:38.279]                             if (is.null(name)) 
[10:32:38.279]                               next
[10:32:38.279]                             if (!grepl(pattern, name)) 
[10:32:38.279]                               next
[10:32:38.279]                             invokeRestart(restart)
[10:32:38.279]                             muffled <- TRUE
[10:32:38.279]                             break
[10:32:38.279]                           }
[10:32:38.279]                         }
[10:32:38.279]                       }
[10:32:38.279]                       invisible(muffled)
[10:32:38.279]                     }
[10:32:38.279]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.279]                   }
[10:32:38.279]                 }
[10:32:38.279]             }
[10:32:38.279]         }))
[10:32:38.279]     }, error = function(ex) {
[10:32:38.279]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.279]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.279]                 ...future.rng), started = ...future.startTime, 
[10:32:38.279]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.279]             version = "1.8"), class = "FutureResult")
[10:32:38.279]     }, finally = {
[10:32:38.279]         if (!identical(...future.workdir, getwd())) 
[10:32:38.279]             setwd(...future.workdir)
[10:32:38.279]         {
[10:32:38.279]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.279]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.279]             }
[10:32:38.279]             base::options(...future.oldOptions)
[10:32:38.279]             if (.Platform$OS.type == "windows") {
[10:32:38.279]                 old_names <- names(...future.oldEnvVars)
[10:32:38.279]                 envs <- base::Sys.getenv()
[10:32:38.279]                 names <- names(envs)
[10:32:38.279]                 common <- intersect(names, old_names)
[10:32:38.279]                 added <- setdiff(names, old_names)
[10:32:38.279]                 removed <- setdiff(old_names, names)
[10:32:38.279]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.279]                   envs[common]]
[10:32:38.279]                 NAMES <- toupper(changed)
[10:32:38.279]                 args <- list()
[10:32:38.279]                 for (kk in seq_along(NAMES)) {
[10:32:38.279]                   name <- changed[[kk]]
[10:32:38.279]                   NAME <- NAMES[[kk]]
[10:32:38.279]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.279]                     next
[10:32:38.279]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.279]                 }
[10:32:38.279]                 NAMES <- toupper(added)
[10:32:38.279]                 for (kk in seq_along(NAMES)) {
[10:32:38.279]                   name <- added[[kk]]
[10:32:38.279]                   NAME <- NAMES[[kk]]
[10:32:38.279]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.279]                     next
[10:32:38.279]                   args[[name]] <- ""
[10:32:38.279]                 }
[10:32:38.279]                 NAMES <- toupper(removed)
[10:32:38.279]                 for (kk in seq_along(NAMES)) {
[10:32:38.279]                   name <- removed[[kk]]
[10:32:38.279]                   NAME <- NAMES[[kk]]
[10:32:38.279]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.279]                     next
[10:32:38.279]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.279]                 }
[10:32:38.279]                 if (length(args) > 0) 
[10:32:38.279]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.279]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.279]             }
[10:32:38.279]             else {
[10:32:38.279]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.279]             }
[10:32:38.279]             {
[10:32:38.279]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.279]                   0L) {
[10:32:38.279]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.279]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.279]                   base::options(opts)
[10:32:38.279]                 }
[10:32:38.279]                 {
[10:32:38.279]                   {
[10:32:38.279]                     NULL
[10:32:38.279]                     RNGkind("Mersenne-Twister")
[10:32:38.279]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.279]                       inherits = FALSE)
[10:32:38.279]                   }
[10:32:38.279]                   options(future.plan = NULL)
[10:32:38.279]                   if (is.na(NA_character_)) 
[10:32:38.279]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.279]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.279]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.279]                     .init = FALSE)
[10:32:38.279]                 }
[10:32:38.279]             }
[10:32:38.279]         }
[10:32:38.279]     })
[10:32:38.279]     if (TRUE) {
[10:32:38.279]         base::sink(type = "output", split = FALSE)
[10:32:38.279]         if (TRUE) {
[10:32:38.279]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.279]         }
[10:32:38.279]         else {
[10:32:38.279]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.279]         }
[10:32:38.279]         base::close(...future.stdout)
[10:32:38.279]         ...future.stdout <- NULL
[10:32:38.279]     }
[10:32:38.279]     ...future.result$conditions <- ...future.conditions
[10:32:38.279]     ...future.result$finished <- base::Sys.time()
[10:32:38.279]     ...future.result
[10:32:38.279] }
[10:32:38.281] plan(): Setting new future strategy stack:
[10:32:38.281] List of future strategies:
[10:32:38.281] 1. sequential:
[10:32:38.281]    - args: function (..., envir = parent.frame())
[10:32:38.281]    - tweaked: FALSE
[10:32:38.281]    - call: NULL
[10:32:38.281] plan(): nbrOfWorkers() = 1
[10:32:38.282] plan(): Setting new future strategy stack:
[10:32:38.282] List of future strategies:
[10:32:38.282] 1. sequential:
[10:32:38.282]    - args: function (..., envir = parent.frame())
[10:32:38.282]    - tweaked: FALSE
[10:32:38.282]    - call: plan(strategy)
[10:32:38.282] plan(): nbrOfWorkers() = 1
[10:32:38.282] SequentialFuture started (and completed)
[10:32:38.283] - Launch lazy future ... done
[10:32:38.283] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.284] getGlobalsAndPackages() ...
[10:32:38.284] Searching for globals...
[10:32:38.285] - globals found: [1] ‘{’
[10:32:38.286] Searching for globals ... DONE
[10:32:38.286] Resolving globals: FALSE
[10:32:38.286] 
[10:32:38.286] 
[10:32:38.286] getGlobalsAndPackages() ... DONE
[10:32:38.287] run() for ‘Future’ ...
[10:32:38.287] - state: ‘created’
[10:32:38.287] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:38.287] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.287] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:38.287]   - Field: ‘label’
[10:32:38.287]   - Field: ‘local’
[10:32:38.287]   - Field: ‘owner’
[10:32:38.288]   - Field: ‘envir’
[10:32:38.288]   - Field: ‘packages’
[10:32:38.288]   - Field: ‘gc’
[10:32:38.288]   - Field: ‘conditions’
[10:32:38.288]   - Field: ‘expr’
[10:32:38.288]   - Field: ‘uuid’
[10:32:38.288]   - Field: ‘seed’
[10:32:38.288]   - Field: ‘version’
[10:32:38.288]   - Field: ‘result’
[10:32:38.288]   - Field: ‘asynchronous’
[10:32:38.288]   - Field: ‘calls’
[10:32:38.288]   - Field: ‘globals’
[10:32:38.289]   - Field: ‘stdout’
[10:32:38.289]   - Field: ‘earlySignal’
[10:32:38.289]   - Field: ‘lazy’
[10:32:38.289]   - Field: ‘state’
[10:32:38.289] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:38.289] - Launch lazy future ...
[10:32:38.289] Packages needed by the future expression (n = 0): <none>
[10:32:38.289] Packages needed by future strategies (n = 0): <none>
[10:32:38.290] {
[10:32:38.290]     {
[10:32:38.290]         {
[10:32:38.290]             ...future.startTime <- base::Sys.time()
[10:32:38.290]             {
[10:32:38.290]                 {
[10:32:38.290]                   {
[10:32:38.290]                     base::local({
[10:32:38.290]                       has_future <- base::requireNamespace("future", 
[10:32:38.290]                         quietly = TRUE)
[10:32:38.290]                       if (has_future) {
[10:32:38.290]                         ns <- base::getNamespace("future")
[10:32:38.290]                         version <- ns[[".package"]][["version"]]
[10:32:38.290]                         if (is.null(version)) 
[10:32:38.290]                           version <- utils::packageVersion("future")
[10:32:38.290]                       }
[10:32:38.290]                       else {
[10:32:38.290]                         version <- NULL
[10:32:38.290]                       }
[10:32:38.290]                       if (!has_future || version < "1.8.0") {
[10:32:38.290]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.290]                           "", base::R.version$version.string), 
[10:32:38.290]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.290]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.290]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.290]                             "release", "version")], collapse = " "), 
[10:32:38.290]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.290]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.290]                           info)
[10:32:38.290]                         info <- base::paste(info, collapse = "; ")
[10:32:38.290]                         if (!has_future) {
[10:32:38.290]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.290]                             info)
[10:32:38.290]                         }
[10:32:38.290]                         else {
[10:32:38.290]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.290]                             info, version)
[10:32:38.290]                         }
[10:32:38.290]                         base::stop(msg)
[10:32:38.290]                       }
[10:32:38.290]                     })
[10:32:38.290]                   }
[10:32:38.290]                   ...future.strategy.old <- future::plan("list")
[10:32:38.290]                   options(future.plan = NULL)
[10:32:38.290]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.290]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.290]                 }
[10:32:38.290]                 ...future.workdir <- getwd()
[10:32:38.290]             }
[10:32:38.290]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.290]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.290]         }
[10:32:38.290]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.290]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.290]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.290]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.290]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.290]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.290]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.290]             base::names(...future.oldOptions))
[10:32:38.290]     }
[10:32:38.290]     if (FALSE) {
[10:32:38.290]     }
[10:32:38.290]     else {
[10:32:38.290]         if (TRUE) {
[10:32:38.290]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.290]                 open = "w")
[10:32:38.290]         }
[10:32:38.290]         else {
[10:32:38.290]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.290]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.290]         }
[10:32:38.290]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.290]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.290]             base::sink(type = "output", split = FALSE)
[10:32:38.290]             base::close(...future.stdout)
[10:32:38.290]         }, add = TRUE)
[10:32:38.290]     }
[10:32:38.290]     ...future.frame <- base::sys.nframe()
[10:32:38.290]     ...future.conditions <- base::list()
[10:32:38.290]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.290]     if (FALSE) {
[10:32:38.290]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.290]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.290]     }
[10:32:38.290]     ...future.result <- base::tryCatch({
[10:32:38.290]         base::withCallingHandlers({
[10:32:38.290]             ...future.value <- base::withVisible(base::local({
[10:32:38.290]                 42
[10:32:38.290]             }))
[10:32:38.290]             future::FutureResult(value = ...future.value$value, 
[10:32:38.290]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.290]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.290]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.290]                     ...future.globalenv.names))
[10:32:38.290]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.290]         }, condition = base::local({
[10:32:38.290]             c <- base::c
[10:32:38.290]             inherits <- base::inherits
[10:32:38.290]             invokeRestart <- base::invokeRestart
[10:32:38.290]             length <- base::length
[10:32:38.290]             list <- base::list
[10:32:38.290]             seq.int <- base::seq.int
[10:32:38.290]             signalCondition <- base::signalCondition
[10:32:38.290]             sys.calls <- base::sys.calls
[10:32:38.290]             `[[` <- base::`[[`
[10:32:38.290]             `+` <- base::`+`
[10:32:38.290]             `<<-` <- base::`<<-`
[10:32:38.290]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.290]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.290]                   3L)]
[10:32:38.290]             }
[10:32:38.290]             function(cond) {
[10:32:38.290]                 is_error <- inherits(cond, "error")
[10:32:38.290]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.290]                   NULL)
[10:32:38.290]                 if (is_error) {
[10:32:38.290]                   sessionInformation <- function() {
[10:32:38.290]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.290]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.290]                       search = base::search(), system = base::Sys.info())
[10:32:38.290]                   }
[10:32:38.290]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.290]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.290]                     cond$call), session = sessionInformation(), 
[10:32:38.290]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.290]                   signalCondition(cond)
[10:32:38.290]                 }
[10:32:38.290]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.290]                 "immediateCondition"))) {
[10:32:38.290]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.290]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.290]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.290]                   if (TRUE && !signal) {
[10:32:38.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.290]                     {
[10:32:38.290]                       inherits <- base::inherits
[10:32:38.290]                       invokeRestart <- base::invokeRestart
[10:32:38.290]                       is.null <- base::is.null
[10:32:38.290]                       muffled <- FALSE
[10:32:38.290]                       if (inherits(cond, "message")) {
[10:32:38.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.290]                         if (muffled) 
[10:32:38.290]                           invokeRestart("muffleMessage")
[10:32:38.290]                       }
[10:32:38.290]                       else if (inherits(cond, "warning")) {
[10:32:38.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.290]                         if (muffled) 
[10:32:38.290]                           invokeRestart("muffleWarning")
[10:32:38.290]                       }
[10:32:38.290]                       else if (inherits(cond, "condition")) {
[10:32:38.290]                         if (!is.null(pattern)) {
[10:32:38.290]                           computeRestarts <- base::computeRestarts
[10:32:38.290]                           grepl <- base::grepl
[10:32:38.290]                           restarts <- computeRestarts(cond)
[10:32:38.290]                           for (restart in restarts) {
[10:32:38.290]                             name <- restart$name
[10:32:38.290]                             if (is.null(name)) 
[10:32:38.290]                               next
[10:32:38.290]                             if (!grepl(pattern, name)) 
[10:32:38.290]                               next
[10:32:38.290]                             invokeRestart(restart)
[10:32:38.290]                             muffled <- TRUE
[10:32:38.290]                             break
[10:32:38.290]                           }
[10:32:38.290]                         }
[10:32:38.290]                       }
[10:32:38.290]                       invisible(muffled)
[10:32:38.290]                     }
[10:32:38.290]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.290]                   }
[10:32:38.290]                 }
[10:32:38.290]                 else {
[10:32:38.290]                   if (TRUE) {
[10:32:38.290]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.290]                     {
[10:32:38.290]                       inherits <- base::inherits
[10:32:38.290]                       invokeRestart <- base::invokeRestart
[10:32:38.290]                       is.null <- base::is.null
[10:32:38.290]                       muffled <- FALSE
[10:32:38.290]                       if (inherits(cond, "message")) {
[10:32:38.290]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.290]                         if (muffled) 
[10:32:38.290]                           invokeRestart("muffleMessage")
[10:32:38.290]                       }
[10:32:38.290]                       else if (inherits(cond, "warning")) {
[10:32:38.290]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.290]                         if (muffled) 
[10:32:38.290]                           invokeRestart("muffleWarning")
[10:32:38.290]                       }
[10:32:38.290]                       else if (inherits(cond, "condition")) {
[10:32:38.290]                         if (!is.null(pattern)) {
[10:32:38.290]                           computeRestarts <- base::computeRestarts
[10:32:38.290]                           grepl <- base::grepl
[10:32:38.290]                           restarts <- computeRestarts(cond)
[10:32:38.290]                           for (restart in restarts) {
[10:32:38.290]                             name <- restart$name
[10:32:38.290]                             if (is.null(name)) 
[10:32:38.290]                               next
[10:32:38.290]                             if (!grepl(pattern, name)) 
[10:32:38.290]                               next
[10:32:38.290]                             invokeRestart(restart)
[10:32:38.290]                             muffled <- TRUE
[10:32:38.290]                             break
[10:32:38.290]                           }
[10:32:38.290]                         }
[10:32:38.290]                       }
[10:32:38.290]                       invisible(muffled)
[10:32:38.290]                     }
[10:32:38.290]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.290]                   }
[10:32:38.290]                 }
[10:32:38.290]             }
[10:32:38.290]         }))
[10:32:38.290]     }, error = function(ex) {
[10:32:38.290]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.290]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.290]                 ...future.rng), started = ...future.startTime, 
[10:32:38.290]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.290]             version = "1.8"), class = "FutureResult")
[10:32:38.290]     }, finally = {
[10:32:38.290]         if (!identical(...future.workdir, getwd())) 
[10:32:38.290]             setwd(...future.workdir)
[10:32:38.290]         {
[10:32:38.290]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.290]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.290]             }
[10:32:38.290]             base::options(...future.oldOptions)
[10:32:38.290]             if (.Platform$OS.type == "windows") {
[10:32:38.290]                 old_names <- names(...future.oldEnvVars)
[10:32:38.290]                 envs <- base::Sys.getenv()
[10:32:38.290]                 names <- names(envs)
[10:32:38.290]                 common <- intersect(names, old_names)
[10:32:38.290]                 added <- setdiff(names, old_names)
[10:32:38.290]                 removed <- setdiff(old_names, names)
[10:32:38.290]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.290]                   envs[common]]
[10:32:38.290]                 NAMES <- toupper(changed)
[10:32:38.290]                 args <- list()
[10:32:38.290]                 for (kk in seq_along(NAMES)) {
[10:32:38.290]                   name <- changed[[kk]]
[10:32:38.290]                   NAME <- NAMES[[kk]]
[10:32:38.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.290]                     next
[10:32:38.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.290]                 }
[10:32:38.290]                 NAMES <- toupper(added)
[10:32:38.290]                 for (kk in seq_along(NAMES)) {
[10:32:38.290]                   name <- added[[kk]]
[10:32:38.290]                   NAME <- NAMES[[kk]]
[10:32:38.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.290]                     next
[10:32:38.290]                   args[[name]] <- ""
[10:32:38.290]                 }
[10:32:38.290]                 NAMES <- toupper(removed)
[10:32:38.290]                 for (kk in seq_along(NAMES)) {
[10:32:38.290]                   name <- removed[[kk]]
[10:32:38.290]                   NAME <- NAMES[[kk]]
[10:32:38.290]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.290]                     next
[10:32:38.290]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.290]                 }
[10:32:38.290]                 if (length(args) > 0) 
[10:32:38.290]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.290]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.290]             }
[10:32:38.290]             else {
[10:32:38.290]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.290]             }
[10:32:38.290]             {
[10:32:38.290]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.290]                   0L) {
[10:32:38.290]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.290]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.290]                   base::options(opts)
[10:32:38.290]                 }
[10:32:38.290]                 {
[10:32:38.290]                   {
[10:32:38.290]                     NULL
[10:32:38.290]                     RNGkind("Mersenne-Twister")
[10:32:38.290]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.290]                       inherits = FALSE)
[10:32:38.290]                   }
[10:32:38.290]                   options(future.plan = NULL)
[10:32:38.290]                   if (is.na(NA_character_)) 
[10:32:38.290]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.290]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.290]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.290]                     .init = FALSE)
[10:32:38.290]                 }
[10:32:38.290]             }
[10:32:38.290]         }
[10:32:38.290]     })
[10:32:38.290]     if (TRUE) {
[10:32:38.290]         base::sink(type = "output", split = FALSE)
[10:32:38.290]         if (TRUE) {
[10:32:38.290]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.290]         }
[10:32:38.290]         else {
[10:32:38.290]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.290]         }
[10:32:38.290]         base::close(...future.stdout)
[10:32:38.290]         ...future.stdout <- NULL
[10:32:38.290]     }
[10:32:38.290]     ...future.result$conditions <- ...future.conditions
[10:32:38.290]     ...future.result$finished <- base::Sys.time()
[10:32:38.290]     ...future.result
[10:32:38.290] }
[10:32:38.291] plan(): Setting new future strategy stack:
[10:32:38.291] List of future strategies:
[10:32:38.291] 1. sequential:
[10:32:38.291]    - args: function (..., envir = parent.frame())
[10:32:38.291]    - tweaked: FALSE
[10:32:38.291]    - call: NULL
[10:32:38.292] plan(): nbrOfWorkers() = 1
[10:32:38.293] plan(): Setting new future strategy stack:
[10:32:38.293] List of future strategies:
[10:32:38.293] 1. sequential:
[10:32:38.293]    - args: function (..., envir = parent.frame())
[10:32:38.293]    - tweaked: FALSE
[10:32:38.293]    - call: plan(strategy)
[10:32:38.293] plan(): nbrOfWorkers() = 1
[10:32:38.293] SequentialFuture started (and completed)
[10:32:38.293] - Launch lazy future ... done
[10:32:38.293] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.294] getGlobalsAndPackages() ...
[10:32:38.294] Searching for globals...
[10:32:38.294] 
[10:32:38.294] Searching for globals ... DONE
[10:32:38.295] - globals: [0] <none>
[10:32:38.295] getGlobalsAndPackages() ... DONE
[10:32:38.295] Packages needed by the future expression (n = 0): <none>
[10:32:38.295] Packages needed by future strategies (n = 0): <none>
[10:32:38.295] {
[10:32:38.295]     {
[10:32:38.295]         {
[10:32:38.295]             ...future.startTime <- base::Sys.time()
[10:32:38.295]             {
[10:32:38.295]                 {
[10:32:38.295]                   {
[10:32:38.295]                     base::local({
[10:32:38.295]                       has_future <- base::requireNamespace("future", 
[10:32:38.295]                         quietly = TRUE)
[10:32:38.295]                       if (has_future) {
[10:32:38.295]                         ns <- base::getNamespace("future")
[10:32:38.295]                         version <- ns[[".package"]][["version"]]
[10:32:38.295]                         if (is.null(version)) 
[10:32:38.295]                           version <- utils::packageVersion("future")
[10:32:38.295]                       }
[10:32:38.295]                       else {
[10:32:38.295]                         version <- NULL
[10:32:38.295]                       }
[10:32:38.295]                       if (!has_future || version < "1.8.0") {
[10:32:38.295]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.295]                           "", base::R.version$version.string), 
[10:32:38.295]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.295]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.295]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.295]                             "release", "version")], collapse = " "), 
[10:32:38.295]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.295]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.295]                           info)
[10:32:38.295]                         info <- base::paste(info, collapse = "; ")
[10:32:38.295]                         if (!has_future) {
[10:32:38.295]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.295]                             info)
[10:32:38.295]                         }
[10:32:38.295]                         else {
[10:32:38.295]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.295]                             info, version)
[10:32:38.295]                         }
[10:32:38.295]                         base::stop(msg)
[10:32:38.295]                       }
[10:32:38.295]                     })
[10:32:38.295]                   }
[10:32:38.295]                   ...future.strategy.old <- future::plan("list")
[10:32:38.295]                   options(future.plan = NULL)
[10:32:38.295]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.295]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.295]                 }
[10:32:38.295]                 ...future.workdir <- getwd()
[10:32:38.295]             }
[10:32:38.295]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.295]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.295]         }
[10:32:38.295]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.295]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.295]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.295]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.295]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.295]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.295]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.295]             base::names(...future.oldOptions))
[10:32:38.295]     }
[10:32:38.295]     if (FALSE) {
[10:32:38.295]     }
[10:32:38.295]     else {
[10:32:38.295]         if (TRUE) {
[10:32:38.295]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.295]                 open = "w")
[10:32:38.295]         }
[10:32:38.295]         else {
[10:32:38.295]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.295]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.295]         }
[10:32:38.295]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.295]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.295]             base::sink(type = "output", split = FALSE)
[10:32:38.295]             base::close(...future.stdout)
[10:32:38.295]         }, add = TRUE)
[10:32:38.295]     }
[10:32:38.295]     ...future.frame <- base::sys.nframe()
[10:32:38.295]     ...future.conditions <- base::list()
[10:32:38.295]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.295]     if (FALSE) {
[10:32:38.295]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.295]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.295]     }
[10:32:38.295]     ...future.result <- base::tryCatch({
[10:32:38.295]         base::withCallingHandlers({
[10:32:38.295]             ...future.value <- base::withVisible(base::local(42))
[10:32:38.295]             future::FutureResult(value = ...future.value$value, 
[10:32:38.295]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.295]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.295]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.295]                     ...future.globalenv.names))
[10:32:38.295]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.295]         }, condition = base::local({
[10:32:38.295]             c <- base::c
[10:32:38.295]             inherits <- base::inherits
[10:32:38.295]             invokeRestart <- base::invokeRestart
[10:32:38.295]             length <- base::length
[10:32:38.295]             list <- base::list
[10:32:38.295]             seq.int <- base::seq.int
[10:32:38.295]             signalCondition <- base::signalCondition
[10:32:38.295]             sys.calls <- base::sys.calls
[10:32:38.295]             `[[` <- base::`[[`
[10:32:38.295]             `+` <- base::`+`
[10:32:38.295]             `<<-` <- base::`<<-`
[10:32:38.295]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.295]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.295]                   3L)]
[10:32:38.295]             }
[10:32:38.295]             function(cond) {
[10:32:38.295]                 is_error <- inherits(cond, "error")
[10:32:38.295]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.295]                   NULL)
[10:32:38.295]                 if (is_error) {
[10:32:38.295]                   sessionInformation <- function() {
[10:32:38.295]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.295]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.295]                       search = base::search(), system = base::Sys.info())
[10:32:38.295]                   }
[10:32:38.295]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.295]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.295]                     cond$call), session = sessionInformation(), 
[10:32:38.295]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.295]                   signalCondition(cond)
[10:32:38.295]                 }
[10:32:38.295]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.295]                 "immediateCondition"))) {
[10:32:38.295]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.295]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.295]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.295]                   if (TRUE && !signal) {
[10:32:38.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.295]                     {
[10:32:38.295]                       inherits <- base::inherits
[10:32:38.295]                       invokeRestart <- base::invokeRestart
[10:32:38.295]                       is.null <- base::is.null
[10:32:38.295]                       muffled <- FALSE
[10:32:38.295]                       if (inherits(cond, "message")) {
[10:32:38.295]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.295]                         if (muffled) 
[10:32:38.295]                           invokeRestart("muffleMessage")
[10:32:38.295]                       }
[10:32:38.295]                       else if (inherits(cond, "warning")) {
[10:32:38.295]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.295]                         if (muffled) 
[10:32:38.295]                           invokeRestart("muffleWarning")
[10:32:38.295]                       }
[10:32:38.295]                       else if (inherits(cond, "condition")) {
[10:32:38.295]                         if (!is.null(pattern)) {
[10:32:38.295]                           computeRestarts <- base::computeRestarts
[10:32:38.295]                           grepl <- base::grepl
[10:32:38.295]                           restarts <- computeRestarts(cond)
[10:32:38.295]                           for (restart in restarts) {
[10:32:38.295]                             name <- restart$name
[10:32:38.295]                             if (is.null(name)) 
[10:32:38.295]                               next
[10:32:38.295]                             if (!grepl(pattern, name)) 
[10:32:38.295]                               next
[10:32:38.295]                             invokeRestart(restart)
[10:32:38.295]                             muffled <- TRUE
[10:32:38.295]                             break
[10:32:38.295]                           }
[10:32:38.295]                         }
[10:32:38.295]                       }
[10:32:38.295]                       invisible(muffled)
[10:32:38.295]                     }
[10:32:38.295]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.295]                   }
[10:32:38.295]                 }
[10:32:38.295]                 else {
[10:32:38.295]                   if (TRUE) {
[10:32:38.295]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.295]                     {
[10:32:38.295]                       inherits <- base::inherits
[10:32:38.295]                       invokeRestart <- base::invokeRestart
[10:32:38.295]                       is.null <- base::is.null
[10:32:38.295]                       muffled <- FALSE
[10:32:38.295]                       if (inherits(cond, "message")) {
[10:32:38.295]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.295]                         if (muffled) 
[10:32:38.295]                           invokeRestart("muffleMessage")
[10:32:38.295]                       }
[10:32:38.295]                       else if (inherits(cond, "warning")) {
[10:32:38.295]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.295]                         if (muffled) 
[10:32:38.295]                           invokeRestart("muffleWarning")
[10:32:38.295]                       }
[10:32:38.295]                       else if (inherits(cond, "condition")) {
[10:32:38.295]                         if (!is.null(pattern)) {
[10:32:38.295]                           computeRestarts <- base::computeRestarts
[10:32:38.295]                           grepl <- base::grepl
[10:32:38.295]                           restarts <- computeRestarts(cond)
[10:32:38.295]                           for (restart in restarts) {
[10:32:38.295]                             name <- restart$name
[10:32:38.295]                             if (is.null(name)) 
[10:32:38.295]                               next
[10:32:38.295]                             if (!grepl(pattern, name)) 
[10:32:38.295]                               next
[10:32:38.295]                             invokeRestart(restart)
[10:32:38.295]                             muffled <- TRUE
[10:32:38.295]                             break
[10:32:38.295]                           }
[10:32:38.295]                         }
[10:32:38.295]                       }
[10:32:38.295]                       invisible(muffled)
[10:32:38.295]                     }
[10:32:38.295]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.295]                   }
[10:32:38.295]                 }
[10:32:38.295]             }
[10:32:38.295]         }))
[10:32:38.295]     }, error = function(ex) {
[10:32:38.295]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.295]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.295]                 ...future.rng), started = ...future.startTime, 
[10:32:38.295]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.295]             version = "1.8"), class = "FutureResult")
[10:32:38.295]     }, finally = {
[10:32:38.295]         if (!identical(...future.workdir, getwd())) 
[10:32:38.295]             setwd(...future.workdir)
[10:32:38.295]         {
[10:32:38.295]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.295]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.295]             }
[10:32:38.295]             base::options(...future.oldOptions)
[10:32:38.295]             if (.Platform$OS.type == "windows") {
[10:32:38.295]                 old_names <- names(...future.oldEnvVars)
[10:32:38.295]                 envs <- base::Sys.getenv()
[10:32:38.295]                 names <- names(envs)
[10:32:38.295]                 common <- intersect(names, old_names)
[10:32:38.295]                 added <- setdiff(names, old_names)
[10:32:38.295]                 removed <- setdiff(old_names, names)
[10:32:38.295]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.295]                   envs[common]]
[10:32:38.295]                 NAMES <- toupper(changed)
[10:32:38.295]                 args <- list()
[10:32:38.295]                 for (kk in seq_along(NAMES)) {
[10:32:38.295]                   name <- changed[[kk]]
[10:32:38.295]                   NAME <- NAMES[[kk]]
[10:32:38.295]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.295]                     next
[10:32:38.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.295]                 }
[10:32:38.295]                 NAMES <- toupper(added)
[10:32:38.295]                 for (kk in seq_along(NAMES)) {
[10:32:38.295]                   name <- added[[kk]]
[10:32:38.295]                   NAME <- NAMES[[kk]]
[10:32:38.295]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.295]                     next
[10:32:38.295]                   args[[name]] <- ""
[10:32:38.295]                 }
[10:32:38.295]                 NAMES <- toupper(removed)
[10:32:38.295]                 for (kk in seq_along(NAMES)) {
[10:32:38.295]                   name <- removed[[kk]]
[10:32:38.295]                   NAME <- NAMES[[kk]]
[10:32:38.295]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.295]                     next
[10:32:38.295]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.295]                 }
[10:32:38.295]                 if (length(args) > 0) 
[10:32:38.295]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.295]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.295]             }
[10:32:38.295]             else {
[10:32:38.295]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.295]             }
[10:32:38.295]             {
[10:32:38.295]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.295]                   0L) {
[10:32:38.295]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.295]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.295]                   base::options(opts)
[10:32:38.295]                 }
[10:32:38.295]                 {
[10:32:38.295]                   {
[10:32:38.295]                     NULL
[10:32:38.295]                     RNGkind("Mersenne-Twister")
[10:32:38.295]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.295]                       inherits = FALSE)
[10:32:38.295]                   }
[10:32:38.295]                   options(future.plan = NULL)
[10:32:38.295]                   if (is.na(NA_character_)) 
[10:32:38.295]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.295]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.295]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.295]                     .init = FALSE)
[10:32:38.295]                 }
[10:32:38.295]             }
[10:32:38.295]         }
[10:32:38.295]     })
[10:32:38.295]     if (TRUE) {
[10:32:38.295]         base::sink(type = "output", split = FALSE)
[10:32:38.295]         if (TRUE) {
[10:32:38.295]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.295]         }
[10:32:38.295]         else {
[10:32:38.295]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.295]         }
[10:32:38.295]         base::close(...future.stdout)
[10:32:38.295]         ...future.stdout <- NULL
[10:32:38.295]     }
[10:32:38.295]     ...future.result$conditions <- ...future.conditions
[10:32:38.295]     ...future.result$finished <- base::Sys.time()
[10:32:38.295]     ...future.result
[10:32:38.295] }
[10:32:38.297] plan(): Setting new future strategy stack:
[10:32:38.297] List of future strategies:
[10:32:38.297] 1. sequential:
[10:32:38.297]    - args: function (..., envir = parent.frame())
[10:32:38.297]    - tweaked: FALSE
[10:32:38.297]    - call: NULL
[10:32:38.298] plan(): nbrOfWorkers() = 1
[10:32:38.298] plan(): Setting new future strategy stack:
[10:32:38.298] List of future strategies:
[10:32:38.298] 1. sequential:
[10:32:38.298]    - args: function (..., envir = parent.frame())
[10:32:38.298]    - tweaked: FALSE
[10:32:38.298]    - call: plan(strategy)
[10:32:38.299] plan(): nbrOfWorkers() = 1
[10:32:38.299] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.299] getGlobalsAndPackages() ...
[10:32:38.299] Searching for globals...
[10:32:38.300] 
[10:32:38.300] Searching for globals ... DONE
[10:32:38.300] - globals: [0] <none>
[10:32:38.300] getGlobalsAndPackages() ... DONE
[10:32:38.300] run() for ‘Future’ ...
[10:32:38.300] - state: ‘created’
[10:32:38.301] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:38.301] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.301] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:38.303]   - Field: ‘label’
[10:32:38.303]   - Field: ‘local’
[10:32:38.303]   - Field: ‘owner’
[10:32:38.303]   - Field: ‘envir’
[10:32:38.303]   - Field: ‘packages’
[10:32:38.303]   - Field: ‘gc’
[10:32:38.303]   - Field: ‘conditions’
[10:32:38.303]   - Field: ‘expr’
[10:32:38.303]   - Field: ‘uuid’
[10:32:38.303]   - Field: ‘seed’
[10:32:38.304]   - Field: ‘version’
[10:32:38.304]   - Field: ‘result’
[10:32:38.304]   - Field: ‘asynchronous’
[10:32:38.304]   - Field: ‘calls’
[10:32:38.304]   - Field: ‘globals’
[10:32:38.304]   - Field: ‘stdout’
[10:32:38.304]   - Field: ‘earlySignal’
[10:32:38.304]   - Field: ‘lazy’
[10:32:38.304]   - Field: ‘state’
[10:32:38.304] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:38.304] - Launch lazy future ...
[10:32:38.305] Packages needed by the future expression (n = 0): <none>
[10:32:38.305] Packages needed by future strategies (n = 0): <none>
[10:32:38.305] {
[10:32:38.305]     {
[10:32:38.305]         {
[10:32:38.305]             ...future.startTime <- base::Sys.time()
[10:32:38.305]             {
[10:32:38.305]                 {
[10:32:38.305]                   {
[10:32:38.305]                     base::local({
[10:32:38.305]                       has_future <- base::requireNamespace("future", 
[10:32:38.305]                         quietly = TRUE)
[10:32:38.305]                       if (has_future) {
[10:32:38.305]                         ns <- base::getNamespace("future")
[10:32:38.305]                         version <- ns[[".package"]][["version"]]
[10:32:38.305]                         if (is.null(version)) 
[10:32:38.305]                           version <- utils::packageVersion("future")
[10:32:38.305]                       }
[10:32:38.305]                       else {
[10:32:38.305]                         version <- NULL
[10:32:38.305]                       }
[10:32:38.305]                       if (!has_future || version < "1.8.0") {
[10:32:38.305]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.305]                           "", base::R.version$version.string), 
[10:32:38.305]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.305]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.305]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.305]                             "release", "version")], collapse = " "), 
[10:32:38.305]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.305]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.305]                           info)
[10:32:38.305]                         info <- base::paste(info, collapse = "; ")
[10:32:38.305]                         if (!has_future) {
[10:32:38.305]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.305]                             info)
[10:32:38.305]                         }
[10:32:38.305]                         else {
[10:32:38.305]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.305]                             info, version)
[10:32:38.305]                         }
[10:32:38.305]                         base::stop(msg)
[10:32:38.305]                       }
[10:32:38.305]                     })
[10:32:38.305]                   }
[10:32:38.305]                   ...future.strategy.old <- future::plan("list")
[10:32:38.305]                   options(future.plan = NULL)
[10:32:38.305]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.305]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.305]                 }
[10:32:38.305]                 ...future.workdir <- getwd()
[10:32:38.305]             }
[10:32:38.305]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.305]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.305]         }
[10:32:38.305]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.305]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.305]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.305]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.305]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.305]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.305]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.305]             base::names(...future.oldOptions))
[10:32:38.305]     }
[10:32:38.305]     if (FALSE) {
[10:32:38.305]     }
[10:32:38.305]     else {
[10:32:38.305]         if (TRUE) {
[10:32:38.305]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.305]                 open = "w")
[10:32:38.305]         }
[10:32:38.305]         else {
[10:32:38.305]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.305]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.305]         }
[10:32:38.305]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.305]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.305]             base::sink(type = "output", split = FALSE)
[10:32:38.305]             base::close(...future.stdout)
[10:32:38.305]         }, add = TRUE)
[10:32:38.305]     }
[10:32:38.305]     ...future.frame <- base::sys.nframe()
[10:32:38.305]     ...future.conditions <- base::list()
[10:32:38.305]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.305]     if (FALSE) {
[10:32:38.305]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.305]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.305]     }
[10:32:38.305]     ...future.result <- base::tryCatch({
[10:32:38.305]         base::withCallingHandlers({
[10:32:38.305]             ...future.value <- base::withVisible(base::local(42))
[10:32:38.305]             future::FutureResult(value = ...future.value$value, 
[10:32:38.305]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.305]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.305]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.305]                     ...future.globalenv.names))
[10:32:38.305]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.305]         }, condition = base::local({
[10:32:38.305]             c <- base::c
[10:32:38.305]             inherits <- base::inherits
[10:32:38.305]             invokeRestart <- base::invokeRestart
[10:32:38.305]             length <- base::length
[10:32:38.305]             list <- base::list
[10:32:38.305]             seq.int <- base::seq.int
[10:32:38.305]             signalCondition <- base::signalCondition
[10:32:38.305]             sys.calls <- base::sys.calls
[10:32:38.305]             `[[` <- base::`[[`
[10:32:38.305]             `+` <- base::`+`
[10:32:38.305]             `<<-` <- base::`<<-`
[10:32:38.305]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.305]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.305]                   3L)]
[10:32:38.305]             }
[10:32:38.305]             function(cond) {
[10:32:38.305]                 is_error <- inherits(cond, "error")
[10:32:38.305]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.305]                   NULL)
[10:32:38.305]                 if (is_error) {
[10:32:38.305]                   sessionInformation <- function() {
[10:32:38.305]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.305]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.305]                       search = base::search(), system = base::Sys.info())
[10:32:38.305]                   }
[10:32:38.305]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.305]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.305]                     cond$call), session = sessionInformation(), 
[10:32:38.305]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.305]                   signalCondition(cond)
[10:32:38.305]                 }
[10:32:38.305]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.305]                 "immediateCondition"))) {
[10:32:38.305]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.305]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.305]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.305]                   if (TRUE && !signal) {
[10:32:38.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.305]                     {
[10:32:38.305]                       inherits <- base::inherits
[10:32:38.305]                       invokeRestart <- base::invokeRestart
[10:32:38.305]                       is.null <- base::is.null
[10:32:38.305]                       muffled <- FALSE
[10:32:38.305]                       if (inherits(cond, "message")) {
[10:32:38.305]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.305]                         if (muffled) 
[10:32:38.305]                           invokeRestart("muffleMessage")
[10:32:38.305]                       }
[10:32:38.305]                       else if (inherits(cond, "warning")) {
[10:32:38.305]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.305]                         if (muffled) 
[10:32:38.305]                           invokeRestart("muffleWarning")
[10:32:38.305]                       }
[10:32:38.305]                       else if (inherits(cond, "condition")) {
[10:32:38.305]                         if (!is.null(pattern)) {
[10:32:38.305]                           computeRestarts <- base::computeRestarts
[10:32:38.305]                           grepl <- base::grepl
[10:32:38.305]                           restarts <- computeRestarts(cond)
[10:32:38.305]                           for (restart in restarts) {
[10:32:38.305]                             name <- restart$name
[10:32:38.305]                             if (is.null(name)) 
[10:32:38.305]                               next
[10:32:38.305]                             if (!grepl(pattern, name)) 
[10:32:38.305]                               next
[10:32:38.305]                             invokeRestart(restart)
[10:32:38.305]                             muffled <- TRUE
[10:32:38.305]                             break
[10:32:38.305]                           }
[10:32:38.305]                         }
[10:32:38.305]                       }
[10:32:38.305]                       invisible(muffled)
[10:32:38.305]                     }
[10:32:38.305]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.305]                   }
[10:32:38.305]                 }
[10:32:38.305]                 else {
[10:32:38.305]                   if (TRUE) {
[10:32:38.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.305]                     {
[10:32:38.305]                       inherits <- base::inherits
[10:32:38.305]                       invokeRestart <- base::invokeRestart
[10:32:38.305]                       is.null <- base::is.null
[10:32:38.305]                       muffled <- FALSE
[10:32:38.305]                       if (inherits(cond, "message")) {
[10:32:38.305]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.305]                         if (muffled) 
[10:32:38.305]                           invokeRestart("muffleMessage")
[10:32:38.305]                       }
[10:32:38.305]                       else if (inherits(cond, "warning")) {
[10:32:38.305]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.305]                         if (muffled) 
[10:32:38.305]                           invokeRestart("muffleWarning")
[10:32:38.305]                       }
[10:32:38.305]                       else if (inherits(cond, "condition")) {
[10:32:38.305]                         if (!is.null(pattern)) {
[10:32:38.305]                           computeRestarts <- base::computeRestarts
[10:32:38.305]                           grepl <- base::grepl
[10:32:38.305]                           restarts <- computeRestarts(cond)
[10:32:38.305]                           for (restart in restarts) {
[10:32:38.305]                             name <- restart$name
[10:32:38.305]                             if (is.null(name)) 
[10:32:38.305]                               next
[10:32:38.305]                             if (!grepl(pattern, name)) 
[10:32:38.305]                               next
[10:32:38.305]                             invokeRestart(restart)
[10:32:38.305]                             muffled <- TRUE
[10:32:38.305]                             break
[10:32:38.305]                           }
[10:32:38.305]                         }
[10:32:38.305]                       }
[10:32:38.305]                       invisible(muffled)
[10:32:38.305]                     }
[10:32:38.305]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.305]                   }
[10:32:38.305]                 }
[10:32:38.305]             }
[10:32:38.305]         }))
[10:32:38.305]     }, error = function(ex) {
[10:32:38.305]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.305]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.305]                 ...future.rng), started = ...future.startTime, 
[10:32:38.305]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.305]             version = "1.8"), class = "FutureResult")
[10:32:38.305]     }, finally = {
[10:32:38.305]         if (!identical(...future.workdir, getwd())) 
[10:32:38.305]             setwd(...future.workdir)
[10:32:38.305]         {
[10:32:38.305]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.305]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.305]             }
[10:32:38.305]             base::options(...future.oldOptions)
[10:32:38.305]             if (.Platform$OS.type == "windows") {
[10:32:38.305]                 old_names <- names(...future.oldEnvVars)
[10:32:38.305]                 envs <- base::Sys.getenv()
[10:32:38.305]                 names <- names(envs)
[10:32:38.305]                 common <- intersect(names, old_names)
[10:32:38.305]                 added <- setdiff(names, old_names)
[10:32:38.305]                 removed <- setdiff(old_names, names)
[10:32:38.305]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.305]                   envs[common]]
[10:32:38.305]                 NAMES <- toupper(changed)
[10:32:38.305]                 args <- list()
[10:32:38.305]                 for (kk in seq_along(NAMES)) {
[10:32:38.305]                   name <- changed[[kk]]
[10:32:38.305]                   NAME <- NAMES[[kk]]
[10:32:38.305]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.305]                     next
[10:32:38.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.305]                 }
[10:32:38.305]                 NAMES <- toupper(added)
[10:32:38.305]                 for (kk in seq_along(NAMES)) {
[10:32:38.305]                   name <- added[[kk]]
[10:32:38.305]                   NAME <- NAMES[[kk]]
[10:32:38.305]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.305]                     next
[10:32:38.305]                   args[[name]] <- ""
[10:32:38.305]                 }
[10:32:38.305]                 NAMES <- toupper(removed)
[10:32:38.305]                 for (kk in seq_along(NAMES)) {
[10:32:38.305]                   name <- removed[[kk]]
[10:32:38.305]                   NAME <- NAMES[[kk]]
[10:32:38.305]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.305]                     next
[10:32:38.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.305]                 }
[10:32:38.305]                 if (length(args) > 0) 
[10:32:38.305]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.305]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.305]             }
[10:32:38.305]             else {
[10:32:38.305]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.305]             }
[10:32:38.305]             {
[10:32:38.305]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.305]                   0L) {
[10:32:38.305]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.305]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.305]                   base::options(opts)
[10:32:38.305]                 }
[10:32:38.305]                 {
[10:32:38.305]                   {
[10:32:38.305]                     NULL
[10:32:38.305]                     RNGkind("Mersenne-Twister")
[10:32:38.305]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.305]                       inherits = FALSE)
[10:32:38.305]                   }
[10:32:38.305]                   options(future.plan = NULL)
[10:32:38.305]                   if (is.na(NA_character_)) 
[10:32:38.305]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.305]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.305]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.305]                     .init = FALSE)
[10:32:38.305]                 }
[10:32:38.305]             }
[10:32:38.305]         }
[10:32:38.305]     })
[10:32:38.305]     if (TRUE) {
[10:32:38.305]         base::sink(type = "output", split = FALSE)
[10:32:38.305]         if (TRUE) {
[10:32:38.305]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.305]         }
[10:32:38.305]         else {
[10:32:38.305]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.305]         }
[10:32:38.305]         base::close(...future.stdout)
[10:32:38.305]         ...future.stdout <- NULL
[10:32:38.305]     }
[10:32:38.305]     ...future.result$conditions <- ...future.conditions
[10:32:38.305]     ...future.result$finished <- base::Sys.time()
[10:32:38.305]     ...future.result
[10:32:38.305] }
[10:32:38.307] plan(): Setting new future strategy stack:
[10:32:38.307] List of future strategies:
[10:32:38.307] 1. sequential:
[10:32:38.307]    - args: function (..., envir = parent.frame())
[10:32:38.307]    - tweaked: FALSE
[10:32:38.307]    - call: NULL
[10:32:38.307] plan(): nbrOfWorkers() = 1
[10:32:38.308] plan(): Setting new future strategy stack:
[10:32:38.308] List of future strategies:
[10:32:38.308] 1. sequential:
[10:32:38.308]    - args: function (..., envir = parent.frame())
[10:32:38.308]    - tweaked: FALSE
[10:32:38.308]    - call: plan(strategy)
[10:32:38.308] plan(): nbrOfWorkers() = 1
[10:32:38.308] SequentialFuture started (and completed)
[10:32:38.309] - Launch lazy future ... done
[10:32:38.309] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.309] getGlobalsAndPackages() ...
[10:32:38.309] Searching for globals...
[10:32:38.310] - globals found: [1] ‘{’
[10:32:38.310] Searching for globals ... DONE
[10:32:38.310] Resolving globals: FALSE
[10:32:38.310] 
[10:32:38.311] 
[10:32:38.311] getGlobalsAndPackages() ... DONE
[10:32:38.311] run() for ‘Future’ ...
[10:32:38.311] - state: ‘created’
[10:32:38.311] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:32:38.311] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:32:38.311] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:32:38.312]   - Field: ‘label’
[10:32:38.312]   - Field: ‘local’
[10:32:38.312]   - Field: ‘owner’
[10:32:38.312]   - Field: ‘envir’
[10:32:38.312]   - Field: ‘packages’
[10:32:38.312]   - Field: ‘gc’
[10:32:38.312]   - Field: ‘conditions’
[10:32:38.312]   - Field: ‘expr’
[10:32:38.312]   - Field: ‘uuid’
[10:32:38.312]   - Field: ‘seed’
[10:32:38.312]   - Field: ‘version’
[10:32:38.313]   - Field: ‘result’
[10:32:38.313]   - Field: ‘asynchronous’
[10:32:38.313]   - Field: ‘calls’
[10:32:38.313]   - Field: ‘globals’
[10:32:38.313]   - Field: ‘stdout’
[10:32:38.313]   - Field: ‘earlySignal’
[10:32:38.313]   - Field: ‘lazy’
[10:32:38.313]   - Field: ‘state’
[10:32:38.313] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:32:38.313] - Launch lazy future ...
[10:32:38.314] Packages needed by the future expression (n = 0): <none>
[10:32:38.314] Packages needed by future strategies (n = 0): <none>
[10:32:38.314] {
[10:32:38.314]     {
[10:32:38.314]         {
[10:32:38.314]             ...future.startTime <- base::Sys.time()
[10:32:38.314]             {
[10:32:38.314]                 {
[10:32:38.314]                   {
[10:32:38.314]                     base::local({
[10:32:38.314]                       has_future <- base::requireNamespace("future", 
[10:32:38.314]                         quietly = TRUE)
[10:32:38.314]                       if (has_future) {
[10:32:38.314]                         ns <- base::getNamespace("future")
[10:32:38.314]                         version <- ns[[".package"]][["version"]]
[10:32:38.314]                         if (is.null(version)) 
[10:32:38.314]                           version <- utils::packageVersion("future")
[10:32:38.314]                       }
[10:32:38.314]                       else {
[10:32:38.314]                         version <- NULL
[10:32:38.314]                       }
[10:32:38.314]                       if (!has_future || version < "1.8.0") {
[10:32:38.314]                         info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.314]                           "", base::R.version$version.string), 
[10:32:38.314]                           platform = base::sprintf("%s (%s-bit)", 
[10:32:38.314]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.314]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.314]                             "release", "version")], collapse = " "), 
[10:32:38.314]                           hostname = base::Sys.info()[["nodename"]])
[10:32:38.314]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.314]                           info)
[10:32:38.314]                         info <- base::paste(info, collapse = "; ")
[10:32:38.314]                         if (!has_future) {
[10:32:38.314]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.314]                             info)
[10:32:38.314]                         }
[10:32:38.314]                         else {
[10:32:38.314]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.314]                             info, version)
[10:32:38.314]                         }
[10:32:38.314]                         base::stop(msg)
[10:32:38.314]                       }
[10:32:38.314]                     })
[10:32:38.314]                   }
[10:32:38.314]                   ...future.strategy.old <- future::plan("list")
[10:32:38.314]                   options(future.plan = NULL)
[10:32:38.314]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.314]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.314]                 }
[10:32:38.314]                 ...future.workdir <- getwd()
[10:32:38.314]             }
[10:32:38.314]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.314]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.314]         }
[10:32:38.314]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.314]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.314]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.314]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.314]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.314]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.314]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.314]             base::names(...future.oldOptions))
[10:32:38.314]     }
[10:32:38.314]     if (FALSE) {
[10:32:38.314]     }
[10:32:38.314]     else {
[10:32:38.314]         if (TRUE) {
[10:32:38.314]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.314]                 open = "w")
[10:32:38.314]         }
[10:32:38.314]         else {
[10:32:38.314]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.314]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.314]         }
[10:32:38.314]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.314]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.314]             base::sink(type = "output", split = FALSE)
[10:32:38.314]             base::close(...future.stdout)
[10:32:38.314]         }, add = TRUE)
[10:32:38.314]     }
[10:32:38.314]     ...future.frame <- base::sys.nframe()
[10:32:38.314]     ...future.conditions <- base::list()
[10:32:38.314]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.314]     if (FALSE) {
[10:32:38.314]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.314]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.314]     }
[10:32:38.314]     ...future.result <- base::tryCatch({
[10:32:38.314]         base::withCallingHandlers({
[10:32:38.314]             ...future.value <- base::withVisible(base::local({
[10:32:38.314]                 42
[10:32:38.314]             }))
[10:32:38.314]             future::FutureResult(value = ...future.value$value, 
[10:32:38.314]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.314]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.314]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.314]                     ...future.globalenv.names))
[10:32:38.314]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.314]         }, condition = base::local({
[10:32:38.314]             c <- base::c
[10:32:38.314]             inherits <- base::inherits
[10:32:38.314]             invokeRestart <- base::invokeRestart
[10:32:38.314]             length <- base::length
[10:32:38.314]             list <- base::list
[10:32:38.314]             seq.int <- base::seq.int
[10:32:38.314]             signalCondition <- base::signalCondition
[10:32:38.314]             sys.calls <- base::sys.calls
[10:32:38.314]             `[[` <- base::`[[`
[10:32:38.314]             `+` <- base::`+`
[10:32:38.314]             `<<-` <- base::`<<-`
[10:32:38.314]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.314]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.314]                   3L)]
[10:32:38.314]             }
[10:32:38.314]             function(cond) {
[10:32:38.314]                 is_error <- inherits(cond, "error")
[10:32:38.314]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.314]                   NULL)
[10:32:38.314]                 if (is_error) {
[10:32:38.314]                   sessionInformation <- function() {
[10:32:38.314]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.314]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.314]                       search = base::search(), system = base::Sys.info())
[10:32:38.314]                   }
[10:32:38.314]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.314]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.314]                     cond$call), session = sessionInformation(), 
[10:32:38.314]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.314]                   signalCondition(cond)
[10:32:38.314]                 }
[10:32:38.314]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.314]                 "immediateCondition"))) {
[10:32:38.314]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.314]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.314]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.314]                   if (TRUE && !signal) {
[10:32:38.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.314]                     {
[10:32:38.314]                       inherits <- base::inherits
[10:32:38.314]                       invokeRestart <- base::invokeRestart
[10:32:38.314]                       is.null <- base::is.null
[10:32:38.314]                       muffled <- FALSE
[10:32:38.314]                       if (inherits(cond, "message")) {
[10:32:38.314]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.314]                         if (muffled) 
[10:32:38.314]                           invokeRestart("muffleMessage")
[10:32:38.314]                       }
[10:32:38.314]                       else if (inherits(cond, "warning")) {
[10:32:38.314]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.314]                         if (muffled) 
[10:32:38.314]                           invokeRestart("muffleWarning")
[10:32:38.314]                       }
[10:32:38.314]                       else if (inherits(cond, "condition")) {
[10:32:38.314]                         if (!is.null(pattern)) {
[10:32:38.314]                           computeRestarts <- base::computeRestarts
[10:32:38.314]                           grepl <- base::grepl
[10:32:38.314]                           restarts <- computeRestarts(cond)
[10:32:38.314]                           for (restart in restarts) {
[10:32:38.314]                             name <- restart$name
[10:32:38.314]                             if (is.null(name)) 
[10:32:38.314]                               next
[10:32:38.314]                             if (!grepl(pattern, name)) 
[10:32:38.314]                               next
[10:32:38.314]                             invokeRestart(restart)
[10:32:38.314]                             muffled <- TRUE
[10:32:38.314]                             break
[10:32:38.314]                           }
[10:32:38.314]                         }
[10:32:38.314]                       }
[10:32:38.314]                       invisible(muffled)
[10:32:38.314]                     }
[10:32:38.314]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.314]                   }
[10:32:38.314]                 }
[10:32:38.314]                 else {
[10:32:38.314]                   if (TRUE) {
[10:32:38.314]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.314]                     {
[10:32:38.314]                       inherits <- base::inherits
[10:32:38.314]                       invokeRestart <- base::invokeRestart
[10:32:38.314]                       is.null <- base::is.null
[10:32:38.314]                       muffled <- FALSE
[10:32:38.314]                       if (inherits(cond, "message")) {
[10:32:38.314]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.314]                         if (muffled) 
[10:32:38.314]                           invokeRestart("muffleMessage")
[10:32:38.314]                       }
[10:32:38.314]                       else if (inherits(cond, "warning")) {
[10:32:38.314]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.314]                         if (muffled) 
[10:32:38.314]                           invokeRestart("muffleWarning")
[10:32:38.314]                       }
[10:32:38.314]                       else if (inherits(cond, "condition")) {
[10:32:38.314]                         if (!is.null(pattern)) {
[10:32:38.314]                           computeRestarts <- base::computeRestarts
[10:32:38.314]                           grepl <- base::grepl
[10:32:38.314]                           restarts <- computeRestarts(cond)
[10:32:38.314]                           for (restart in restarts) {
[10:32:38.314]                             name <- restart$name
[10:32:38.314]                             if (is.null(name)) 
[10:32:38.314]                               next
[10:32:38.314]                             if (!grepl(pattern, name)) 
[10:32:38.314]                               next
[10:32:38.314]                             invokeRestart(restart)
[10:32:38.314]                             muffled <- TRUE
[10:32:38.314]                             break
[10:32:38.314]                           }
[10:32:38.314]                         }
[10:32:38.314]                       }
[10:32:38.314]                       invisible(muffled)
[10:32:38.314]                     }
[10:32:38.314]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.314]                   }
[10:32:38.314]                 }
[10:32:38.314]             }
[10:32:38.314]         }))
[10:32:38.314]     }, error = function(ex) {
[10:32:38.314]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.314]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.314]                 ...future.rng), started = ...future.startTime, 
[10:32:38.314]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.314]             version = "1.8"), class = "FutureResult")
[10:32:38.314]     }, finally = {
[10:32:38.314]         if (!identical(...future.workdir, getwd())) 
[10:32:38.314]             setwd(...future.workdir)
[10:32:38.314]         {
[10:32:38.314]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.314]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.314]             }
[10:32:38.314]             base::options(...future.oldOptions)
[10:32:38.314]             if (.Platform$OS.type == "windows") {
[10:32:38.314]                 old_names <- names(...future.oldEnvVars)
[10:32:38.314]                 envs <- base::Sys.getenv()
[10:32:38.314]                 names <- names(envs)
[10:32:38.314]                 common <- intersect(names, old_names)
[10:32:38.314]                 added <- setdiff(names, old_names)
[10:32:38.314]                 removed <- setdiff(old_names, names)
[10:32:38.314]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.314]                   envs[common]]
[10:32:38.314]                 NAMES <- toupper(changed)
[10:32:38.314]                 args <- list()
[10:32:38.314]                 for (kk in seq_along(NAMES)) {
[10:32:38.314]                   name <- changed[[kk]]
[10:32:38.314]                   NAME <- NAMES[[kk]]
[10:32:38.314]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.314]                     next
[10:32:38.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.314]                 }
[10:32:38.314]                 NAMES <- toupper(added)
[10:32:38.314]                 for (kk in seq_along(NAMES)) {
[10:32:38.314]                   name <- added[[kk]]
[10:32:38.314]                   NAME <- NAMES[[kk]]
[10:32:38.314]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.314]                     next
[10:32:38.314]                   args[[name]] <- ""
[10:32:38.314]                 }
[10:32:38.314]                 NAMES <- toupper(removed)
[10:32:38.314]                 for (kk in seq_along(NAMES)) {
[10:32:38.314]                   name <- removed[[kk]]
[10:32:38.314]                   NAME <- NAMES[[kk]]
[10:32:38.314]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.314]                     next
[10:32:38.314]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.314]                 }
[10:32:38.314]                 if (length(args) > 0) 
[10:32:38.314]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.314]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.314]             }
[10:32:38.314]             else {
[10:32:38.314]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.314]             }
[10:32:38.314]             {
[10:32:38.314]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.314]                   0L) {
[10:32:38.314]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.314]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.314]                   base::options(opts)
[10:32:38.314]                 }
[10:32:38.314]                 {
[10:32:38.314]                   {
[10:32:38.314]                     NULL
[10:32:38.314]                     RNGkind("Mersenne-Twister")
[10:32:38.314]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:32:38.314]                       inherits = FALSE)
[10:32:38.314]                   }
[10:32:38.314]                   options(future.plan = NULL)
[10:32:38.314]                   if (is.na(NA_character_)) 
[10:32:38.314]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.314]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.314]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.314]                     .init = FALSE)
[10:32:38.314]                 }
[10:32:38.314]             }
[10:32:38.314]         }
[10:32:38.314]     })
[10:32:38.314]     if (TRUE) {
[10:32:38.314]         base::sink(type = "output", split = FALSE)
[10:32:38.314]         if (TRUE) {
[10:32:38.314]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.314]         }
[10:32:38.314]         else {
[10:32:38.314]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.314]         }
[10:32:38.314]         base::close(...future.stdout)
[10:32:38.314]         ...future.stdout <- NULL
[10:32:38.314]     }
[10:32:38.314]     ...future.result$conditions <- ...future.conditions
[10:32:38.314]     ...future.result$finished <- base::Sys.time()
[10:32:38.314]     ...future.result
[10:32:38.314] }
[10:32:38.316] plan(): Setting new future strategy stack:
[10:32:38.316] List of future strategies:
[10:32:38.316] 1. sequential:
[10:32:38.316]    - args: function (..., envir = parent.frame())
[10:32:38.316]    - tweaked: FALSE
[10:32:38.316]    - call: NULL
[10:32:38.316] plan(): nbrOfWorkers() = 1
[10:32:38.317] plan(): Setting new future strategy stack:
[10:32:38.317] List of future strategies:
[10:32:38.317] 1. sequential:
[10:32:38.317]    - args: function (..., envir = parent.frame())
[10:32:38.317]    - tweaked: FALSE
[10:32:38.317]    - call: plan(strategy)
[10:32:38.317] plan(): nbrOfWorkers() = 1
[10:32:38.317] SequentialFuture started (and completed)
[10:32:38.318] - Launch lazy future ... done
[10:32:38.318] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[10:32:38.319] plan(): Setting new future strategy stack:
[10:32:38.319] List of future strategies:
[10:32:38.319] 1. multicore:
[10:32:38.319]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.319]    - tweaked: FALSE
[10:32:38.319]    - call: plan(strategy)
[10:32:38.323] plan(): nbrOfWorkers() = 2
[10:32:38.326] getGlobalsAndPackages() ...
[10:32:38.326] 
[10:32:38.327] - globals: [0] <none>
[10:32:38.327] getGlobalsAndPackages() ... DONE
[10:32:38.328] Packages needed by the future expression (n = 0): <none>
[10:32:38.328] Packages needed by future strategies (n = 0): <none>
[10:32:38.328] {
[10:32:38.328]     {
[10:32:38.328]         {
[10:32:38.328]             ...future.startTime <- base::Sys.time()
[10:32:38.328]             {
[10:32:38.328]                 {
[10:32:38.328]                   {
[10:32:38.328]                     {
[10:32:38.328]                       base::local({
[10:32:38.328]                         has_future <- base::requireNamespace("future", 
[10:32:38.328]                           quietly = TRUE)
[10:32:38.328]                         if (has_future) {
[10:32:38.328]                           ns <- base::getNamespace("future")
[10:32:38.328]                           version <- ns[[".package"]][["version"]]
[10:32:38.328]                           if (is.null(version)) 
[10:32:38.328]                             version <- utils::packageVersion("future")
[10:32:38.328]                         }
[10:32:38.328]                         else {
[10:32:38.328]                           version <- NULL
[10:32:38.328]                         }
[10:32:38.328]                         if (!has_future || version < "1.8.0") {
[10:32:38.328]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.328]                             "", base::R.version$version.string), 
[10:32:38.328]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.328]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.328]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.328]                               "release", "version")], collapse = " "), 
[10:32:38.328]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.328]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.328]                             info)
[10:32:38.328]                           info <- base::paste(info, collapse = "; ")
[10:32:38.328]                           if (!has_future) {
[10:32:38.328]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.328]                               info)
[10:32:38.328]                           }
[10:32:38.328]                           else {
[10:32:38.328]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.328]                               info, version)
[10:32:38.328]                           }
[10:32:38.328]                           base::stop(msg)
[10:32:38.328]                         }
[10:32:38.328]                       })
[10:32:38.328]                     }
[10:32:38.328]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.328]                     base::options(mc.cores = 1L)
[10:32:38.328]                   }
[10:32:38.328]                   ...future.strategy.old <- future::plan("list")
[10:32:38.328]                   options(future.plan = NULL)
[10:32:38.328]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.328]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.328]                 }
[10:32:38.328]                 ...future.workdir <- getwd()
[10:32:38.328]             }
[10:32:38.328]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.328]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.328]         }
[10:32:38.328]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.328]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.328]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.328]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.328]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.328]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.328]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.328]             base::names(...future.oldOptions))
[10:32:38.328]     }
[10:32:38.328]     if (FALSE) {
[10:32:38.328]     }
[10:32:38.328]     else {
[10:32:38.328]         if (TRUE) {
[10:32:38.328]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.328]                 open = "w")
[10:32:38.328]         }
[10:32:38.328]         else {
[10:32:38.328]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.328]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.328]         }
[10:32:38.328]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.328]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.328]             base::sink(type = "output", split = FALSE)
[10:32:38.328]             base::close(...future.stdout)
[10:32:38.328]         }, add = TRUE)
[10:32:38.328]     }
[10:32:38.328]     ...future.frame <- base::sys.nframe()
[10:32:38.328]     ...future.conditions <- base::list()
[10:32:38.328]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.328]     if (FALSE) {
[10:32:38.328]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.328]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.328]     }
[10:32:38.328]     ...future.result <- base::tryCatch({
[10:32:38.328]         base::withCallingHandlers({
[10:32:38.328]             ...future.value <- base::withVisible(base::local({
[10:32:38.328]                 withCallingHandlers({
[10:32:38.328]                   42
[10:32:38.328]                 }, immediateCondition = function(cond) {
[10:32:38.328]                   save_rds <- function (object, pathname, ...) 
[10:32:38.328]                   {
[10:32:38.328]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.328]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.328]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.328]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.328]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.328]                         fi_tmp[["mtime"]])
[10:32:38.328]                     }
[10:32:38.328]                     tryCatch({
[10:32:38.328]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.328]                     }, error = function(ex) {
[10:32:38.328]                       msg <- conditionMessage(ex)
[10:32:38.328]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.328]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.328]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.328]                         fi_tmp[["mtime"]], msg)
[10:32:38.328]                       ex$message <- msg
[10:32:38.328]                       stop(ex)
[10:32:38.328]                     })
[10:32:38.328]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.328]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.328]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.328]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.328]                       fi <- file.info(pathname)
[10:32:38.328]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.328]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.328]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.328]                         fi[["size"]], fi[["mtime"]])
[10:32:38.328]                       stop(msg)
[10:32:38.328]                     }
[10:32:38.328]                     invisible(pathname)
[10:32:38.328]                   }
[10:32:38.328]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.328]                     rootPath = tempdir()) 
[10:32:38.328]                   {
[10:32:38.328]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.328]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.328]                       tmpdir = path, fileext = ".rds")
[10:32:38.328]                     save_rds(obj, file)
[10:32:38.328]                   }
[10:32:38.328]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.328]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.328]                   {
[10:32:38.328]                     inherits <- base::inherits
[10:32:38.328]                     invokeRestart <- base::invokeRestart
[10:32:38.328]                     is.null <- base::is.null
[10:32:38.328]                     muffled <- FALSE
[10:32:38.328]                     if (inherits(cond, "message")) {
[10:32:38.328]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.328]                       if (muffled) 
[10:32:38.328]                         invokeRestart("muffleMessage")
[10:32:38.328]                     }
[10:32:38.328]                     else if (inherits(cond, "warning")) {
[10:32:38.328]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.328]                       if (muffled) 
[10:32:38.328]                         invokeRestart("muffleWarning")
[10:32:38.328]                     }
[10:32:38.328]                     else if (inherits(cond, "condition")) {
[10:32:38.328]                       if (!is.null(pattern)) {
[10:32:38.328]                         computeRestarts <- base::computeRestarts
[10:32:38.328]                         grepl <- base::grepl
[10:32:38.328]                         restarts <- computeRestarts(cond)
[10:32:38.328]                         for (restart in restarts) {
[10:32:38.328]                           name <- restart$name
[10:32:38.328]                           if (is.null(name)) 
[10:32:38.328]                             next
[10:32:38.328]                           if (!grepl(pattern, name)) 
[10:32:38.328]                             next
[10:32:38.328]                           invokeRestart(restart)
[10:32:38.328]                           muffled <- TRUE
[10:32:38.328]                           break
[10:32:38.328]                         }
[10:32:38.328]                       }
[10:32:38.328]                     }
[10:32:38.328]                     invisible(muffled)
[10:32:38.328]                   }
[10:32:38.328]                   muffleCondition(cond)
[10:32:38.328]                 })
[10:32:38.328]             }))
[10:32:38.328]             future::FutureResult(value = ...future.value$value, 
[10:32:38.328]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.328]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.328]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.328]                     ...future.globalenv.names))
[10:32:38.328]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.328]         }, condition = base::local({
[10:32:38.328]             c <- base::c
[10:32:38.328]             inherits <- base::inherits
[10:32:38.328]             invokeRestart <- base::invokeRestart
[10:32:38.328]             length <- base::length
[10:32:38.328]             list <- base::list
[10:32:38.328]             seq.int <- base::seq.int
[10:32:38.328]             signalCondition <- base::signalCondition
[10:32:38.328]             sys.calls <- base::sys.calls
[10:32:38.328]             `[[` <- base::`[[`
[10:32:38.328]             `+` <- base::`+`
[10:32:38.328]             `<<-` <- base::`<<-`
[10:32:38.328]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.328]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.328]                   3L)]
[10:32:38.328]             }
[10:32:38.328]             function(cond) {
[10:32:38.328]                 is_error <- inherits(cond, "error")
[10:32:38.328]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.328]                   NULL)
[10:32:38.328]                 if (is_error) {
[10:32:38.328]                   sessionInformation <- function() {
[10:32:38.328]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.328]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.328]                       search = base::search(), system = base::Sys.info())
[10:32:38.328]                   }
[10:32:38.328]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.328]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.328]                     cond$call), session = sessionInformation(), 
[10:32:38.328]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.328]                   signalCondition(cond)
[10:32:38.328]                 }
[10:32:38.328]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.328]                 "immediateCondition"))) {
[10:32:38.328]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.328]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.328]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.328]                   if (TRUE && !signal) {
[10:32:38.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.328]                     {
[10:32:38.328]                       inherits <- base::inherits
[10:32:38.328]                       invokeRestart <- base::invokeRestart
[10:32:38.328]                       is.null <- base::is.null
[10:32:38.328]                       muffled <- FALSE
[10:32:38.328]                       if (inherits(cond, "message")) {
[10:32:38.328]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.328]                         if (muffled) 
[10:32:38.328]                           invokeRestart("muffleMessage")
[10:32:38.328]                       }
[10:32:38.328]                       else if (inherits(cond, "warning")) {
[10:32:38.328]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.328]                         if (muffled) 
[10:32:38.328]                           invokeRestart("muffleWarning")
[10:32:38.328]                       }
[10:32:38.328]                       else if (inherits(cond, "condition")) {
[10:32:38.328]                         if (!is.null(pattern)) {
[10:32:38.328]                           computeRestarts <- base::computeRestarts
[10:32:38.328]                           grepl <- base::grepl
[10:32:38.328]                           restarts <- computeRestarts(cond)
[10:32:38.328]                           for (restart in restarts) {
[10:32:38.328]                             name <- restart$name
[10:32:38.328]                             if (is.null(name)) 
[10:32:38.328]                               next
[10:32:38.328]                             if (!grepl(pattern, name)) 
[10:32:38.328]                               next
[10:32:38.328]                             invokeRestart(restart)
[10:32:38.328]                             muffled <- TRUE
[10:32:38.328]                             break
[10:32:38.328]                           }
[10:32:38.328]                         }
[10:32:38.328]                       }
[10:32:38.328]                       invisible(muffled)
[10:32:38.328]                     }
[10:32:38.328]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.328]                   }
[10:32:38.328]                 }
[10:32:38.328]                 else {
[10:32:38.328]                   if (TRUE) {
[10:32:38.328]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.328]                     {
[10:32:38.328]                       inherits <- base::inherits
[10:32:38.328]                       invokeRestart <- base::invokeRestart
[10:32:38.328]                       is.null <- base::is.null
[10:32:38.328]                       muffled <- FALSE
[10:32:38.328]                       if (inherits(cond, "message")) {
[10:32:38.328]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.328]                         if (muffled) 
[10:32:38.328]                           invokeRestart("muffleMessage")
[10:32:38.328]                       }
[10:32:38.328]                       else if (inherits(cond, "warning")) {
[10:32:38.328]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.328]                         if (muffled) 
[10:32:38.328]                           invokeRestart("muffleWarning")
[10:32:38.328]                       }
[10:32:38.328]                       else if (inherits(cond, "condition")) {
[10:32:38.328]                         if (!is.null(pattern)) {
[10:32:38.328]                           computeRestarts <- base::computeRestarts
[10:32:38.328]                           grepl <- base::grepl
[10:32:38.328]                           restarts <- computeRestarts(cond)
[10:32:38.328]                           for (restart in restarts) {
[10:32:38.328]                             name <- restart$name
[10:32:38.328]                             if (is.null(name)) 
[10:32:38.328]                               next
[10:32:38.328]                             if (!grepl(pattern, name)) 
[10:32:38.328]                               next
[10:32:38.328]                             invokeRestart(restart)
[10:32:38.328]                             muffled <- TRUE
[10:32:38.328]                             break
[10:32:38.328]                           }
[10:32:38.328]                         }
[10:32:38.328]                       }
[10:32:38.328]                       invisible(muffled)
[10:32:38.328]                     }
[10:32:38.328]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.328]                   }
[10:32:38.328]                 }
[10:32:38.328]             }
[10:32:38.328]         }))
[10:32:38.328]     }, error = function(ex) {
[10:32:38.328]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.328]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.328]                 ...future.rng), started = ...future.startTime, 
[10:32:38.328]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.328]             version = "1.8"), class = "FutureResult")
[10:32:38.328]     }, finally = {
[10:32:38.328]         if (!identical(...future.workdir, getwd())) 
[10:32:38.328]             setwd(...future.workdir)
[10:32:38.328]         {
[10:32:38.328]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.328]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.328]             }
[10:32:38.328]             base::options(...future.oldOptions)
[10:32:38.328]             if (.Platform$OS.type == "windows") {
[10:32:38.328]                 old_names <- names(...future.oldEnvVars)
[10:32:38.328]                 envs <- base::Sys.getenv()
[10:32:38.328]                 names <- names(envs)
[10:32:38.328]                 common <- intersect(names, old_names)
[10:32:38.328]                 added <- setdiff(names, old_names)
[10:32:38.328]                 removed <- setdiff(old_names, names)
[10:32:38.328]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.328]                   envs[common]]
[10:32:38.328]                 NAMES <- toupper(changed)
[10:32:38.328]                 args <- list()
[10:32:38.328]                 for (kk in seq_along(NAMES)) {
[10:32:38.328]                   name <- changed[[kk]]
[10:32:38.328]                   NAME <- NAMES[[kk]]
[10:32:38.328]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.328]                     next
[10:32:38.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.328]                 }
[10:32:38.328]                 NAMES <- toupper(added)
[10:32:38.328]                 for (kk in seq_along(NAMES)) {
[10:32:38.328]                   name <- added[[kk]]
[10:32:38.328]                   NAME <- NAMES[[kk]]
[10:32:38.328]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.328]                     next
[10:32:38.328]                   args[[name]] <- ""
[10:32:38.328]                 }
[10:32:38.328]                 NAMES <- toupper(removed)
[10:32:38.328]                 for (kk in seq_along(NAMES)) {
[10:32:38.328]                   name <- removed[[kk]]
[10:32:38.328]                   NAME <- NAMES[[kk]]
[10:32:38.328]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.328]                     next
[10:32:38.328]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.328]                 }
[10:32:38.328]                 if (length(args) > 0) 
[10:32:38.328]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.328]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.328]             }
[10:32:38.328]             else {
[10:32:38.328]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.328]             }
[10:32:38.328]             {
[10:32:38.328]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.328]                   0L) {
[10:32:38.328]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.328]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.328]                   base::options(opts)
[10:32:38.328]                 }
[10:32:38.328]                 {
[10:32:38.328]                   {
[10:32:38.328]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.328]                     NULL
[10:32:38.328]                   }
[10:32:38.328]                   options(future.plan = NULL)
[10:32:38.328]                   if (is.na(NA_character_)) 
[10:32:38.328]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.328]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.328]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.328]                     .init = FALSE)
[10:32:38.328]                 }
[10:32:38.328]             }
[10:32:38.328]         }
[10:32:38.328]     })
[10:32:38.328]     if (TRUE) {
[10:32:38.328]         base::sink(type = "output", split = FALSE)
[10:32:38.328]         if (TRUE) {
[10:32:38.328]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.328]         }
[10:32:38.328]         else {
[10:32:38.328]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.328]         }
[10:32:38.328]         base::close(...future.stdout)
[10:32:38.328]         ...future.stdout <- NULL
[10:32:38.328]     }
[10:32:38.328]     ...future.result$conditions <- ...future.conditions
[10:32:38.328]     ...future.result$finished <- base::Sys.time()
[10:32:38.328]     ...future.result
[10:32:38.328] }
[10:32:38.330] requestCore(): workers = 2
[10:32:38.333] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[10:32:38.334] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.334] List of future strategies:
[10:32:38.334] 1. sequential:
[10:32:38.334]    - args: function (..., envir = parent.frame())
[10:32:38.334]    - tweaked: FALSE
[10:32:38.334]    - call: NULL
[10:32:38.335] plan(): nbrOfWorkers() = 1
[10:32:38.337] plan(): Setting new future strategy stack:
[10:32:38.337] List of future strategies:
[10:32:38.337] 1. multicore:
[10:32:38.337]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.337]    - tweaked: FALSE
[10:32:38.337]    - call: plan(strategy)
[10:32:38.342] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.343] result() for MulticoreFuture ...
[10:32:38.348] result() for MulticoreFuture ...
[10:32:38.348] result() for MulticoreFuture ... done
[10:32:38.348] result() for MulticoreFuture ... done
[10:32:38.348] result() for MulticoreFuture ...
[10:32:38.348] result() for MulticoreFuture ... done
[10:32:38.348] getGlobalsAndPackages() ...
[10:32:38.349] Searching for globals...
[10:32:38.349] 
[10:32:38.349] Searching for globals ... DONE
[10:32:38.349] - globals: [0] <none>
[10:32:38.349] getGlobalsAndPackages() ... DONE
[10:32:38.350] run() for ‘Future’ ...
[10:32:38.350] - state: ‘created’
[10:32:38.350] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:38.354] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.354] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:38.354]   - Field: ‘label’
[10:32:38.354]   - Field: ‘local’
[10:32:38.355]   - Field: ‘owner’
[10:32:38.355]   - Field: ‘envir’
[10:32:38.355]   - Field: ‘workers’
[10:32:38.355]   - Field: ‘packages’
[10:32:38.355]   - Field: ‘gc’
[10:32:38.355]   - Field: ‘job’
[10:32:38.355]   - Field: ‘conditions’
[10:32:38.355]   - Field: ‘expr’
[10:32:38.355]   - Field: ‘uuid’
[10:32:38.356]   - Field: ‘seed’
[10:32:38.356]   - Field: ‘version’
[10:32:38.356]   - Field: ‘result’
[10:32:38.356]   - Field: ‘asynchronous’
[10:32:38.356]   - Field: ‘calls’
[10:32:38.359]   - Field: ‘globals’
[10:32:38.359]   - Field: ‘stdout’
[10:32:38.359]   - Field: ‘earlySignal’
[10:32:38.359]   - Field: ‘lazy’
[10:32:38.359]   - Field: ‘state’
[10:32:38.359] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:38.360] - Launch lazy future ...
[10:32:38.360] Packages needed by the future expression (n = 0): <none>
[10:32:38.360] Packages needed by future strategies (n = 0): <none>
[10:32:38.361] {
[10:32:38.361]     {
[10:32:38.361]         {
[10:32:38.361]             ...future.startTime <- base::Sys.time()
[10:32:38.361]             {
[10:32:38.361]                 {
[10:32:38.361]                   {
[10:32:38.361]                     {
[10:32:38.361]                       base::local({
[10:32:38.361]                         has_future <- base::requireNamespace("future", 
[10:32:38.361]                           quietly = TRUE)
[10:32:38.361]                         if (has_future) {
[10:32:38.361]                           ns <- base::getNamespace("future")
[10:32:38.361]                           version <- ns[[".package"]][["version"]]
[10:32:38.361]                           if (is.null(version)) 
[10:32:38.361]                             version <- utils::packageVersion("future")
[10:32:38.361]                         }
[10:32:38.361]                         else {
[10:32:38.361]                           version <- NULL
[10:32:38.361]                         }
[10:32:38.361]                         if (!has_future || version < "1.8.0") {
[10:32:38.361]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.361]                             "", base::R.version$version.string), 
[10:32:38.361]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.361]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.361]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.361]                               "release", "version")], collapse = " "), 
[10:32:38.361]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.361]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.361]                             info)
[10:32:38.361]                           info <- base::paste(info, collapse = "; ")
[10:32:38.361]                           if (!has_future) {
[10:32:38.361]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.361]                               info)
[10:32:38.361]                           }
[10:32:38.361]                           else {
[10:32:38.361]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.361]                               info, version)
[10:32:38.361]                           }
[10:32:38.361]                           base::stop(msg)
[10:32:38.361]                         }
[10:32:38.361]                       })
[10:32:38.361]                     }
[10:32:38.361]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.361]                     base::options(mc.cores = 1L)
[10:32:38.361]                   }
[10:32:38.361]                   ...future.strategy.old <- future::plan("list")
[10:32:38.361]                   options(future.plan = NULL)
[10:32:38.361]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.361]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.361]                 }
[10:32:38.361]                 ...future.workdir <- getwd()
[10:32:38.361]             }
[10:32:38.361]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.361]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.361]         }
[10:32:38.361]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.361]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.361]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.361]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.361]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.361]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.361]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.361]             base::names(...future.oldOptions))
[10:32:38.361]     }
[10:32:38.361]     if (FALSE) {
[10:32:38.361]     }
[10:32:38.361]     else {
[10:32:38.361]         if (TRUE) {
[10:32:38.361]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.361]                 open = "w")
[10:32:38.361]         }
[10:32:38.361]         else {
[10:32:38.361]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.361]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.361]         }
[10:32:38.361]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.361]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.361]             base::sink(type = "output", split = FALSE)
[10:32:38.361]             base::close(...future.stdout)
[10:32:38.361]         }, add = TRUE)
[10:32:38.361]     }
[10:32:38.361]     ...future.frame <- base::sys.nframe()
[10:32:38.361]     ...future.conditions <- base::list()
[10:32:38.361]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.361]     if (FALSE) {
[10:32:38.361]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.361]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.361]     }
[10:32:38.361]     ...future.result <- base::tryCatch({
[10:32:38.361]         base::withCallingHandlers({
[10:32:38.361]             ...future.value <- base::withVisible(base::local({
[10:32:38.361]                 withCallingHandlers({
[10:32:38.361]                   42
[10:32:38.361]                 }, immediateCondition = function(cond) {
[10:32:38.361]                   save_rds <- function (object, pathname, ...) 
[10:32:38.361]                   {
[10:32:38.361]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.361]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.361]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.361]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.361]                         fi_tmp[["mtime"]])
[10:32:38.361]                     }
[10:32:38.361]                     tryCatch({
[10:32:38.361]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.361]                     }, error = function(ex) {
[10:32:38.361]                       msg <- conditionMessage(ex)
[10:32:38.361]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.361]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.361]                         fi_tmp[["mtime"]], msg)
[10:32:38.361]                       ex$message <- msg
[10:32:38.361]                       stop(ex)
[10:32:38.361]                     })
[10:32:38.361]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.361]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.361]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.361]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.361]                       fi <- file.info(pathname)
[10:32:38.361]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.361]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.361]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.361]                         fi[["size"]], fi[["mtime"]])
[10:32:38.361]                       stop(msg)
[10:32:38.361]                     }
[10:32:38.361]                     invisible(pathname)
[10:32:38.361]                   }
[10:32:38.361]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.361]                     rootPath = tempdir()) 
[10:32:38.361]                   {
[10:32:38.361]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.361]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.361]                       tmpdir = path, fileext = ".rds")
[10:32:38.361]                     save_rds(obj, file)
[10:32:38.361]                   }
[10:32:38.361]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.361]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.361]                   {
[10:32:38.361]                     inherits <- base::inherits
[10:32:38.361]                     invokeRestart <- base::invokeRestart
[10:32:38.361]                     is.null <- base::is.null
[10:32:38.361]                     muffled <- FALSE
[10:32:38.361]                     if (inherits(cond, "message")) {
[10:32:38.361]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.361]                       if (muffled) 
[10:32:38.361]                         invokeRestart("muffleMessage")
[10:32:38.361]                     }
[10:32:38.361]                     else if (inherits(cond, "warning")) {
[10:32:38.361]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.361]                       if (muffled) 
[10:32:38.361]                         invokeRestart("muffleWarning")
[10:32:38.361]                     }
[10:32:38.361]                     else if (inherits(cond, "condition")) {
[10:32:38.361]                       if (!is.null(pattern)) {
[10:32:38.361]                         computeRestarts <- base::computeRestarts
[10:32:38.361]                         grepl <- base::grepl
[10:32:38.361]                         restarts <- computeRestarts(cond)
[10:32:38.361]                         for (restart in restarts) {
[10:32:38.361]                           name <- restart$name
[10:32:38.361]                           if (is.null(name)) 
[10:32:38.361]                             next
[10:32:38.361]                           if (!grepl(pattern, name)) 
[10:32:38.361]                             next
[10:32:38.361]                           invokeRestart(restart)
[10:32:38.361]                           muffled <- TRUE
[10:32:38.361]                           break
[10:32:38.361]                         }
[10:32:38.361]                       }
[10:32:38.361]                     }
[10:32:38.361]                     invisible(muffled)
[10:32:38.361]                   }
[10:32:38.361]                   muffleCondition(cond)
[10:32:38.361]                 })
[10:32:38.361]             }))
[10:32:38.361]             future::FutureResult(value = ...future.value$value, 
[10:32:38.361]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.361]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.361]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.361]                     ...future.globalenv.names))
[10:32:38.361]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.361]         }, condition = base::local({
[10:32:38.361]             c <- base::c
[10:32:38.361]             inherits <- base::inherits
[10:32:38.361]             invokeRestart <- base::invokeRestart
[10:32:38.361]             length <- base::length
[10:32:38.361]             list <- base::list
[10:32:38.361]             seq.int <- base::seq.int
[10:32:38.361]             signalCondition <- base::signalCondition
[10:32:38.361]             sys.calls <- base::sys.calls
[10:32:38.361]             `[[` <- base::`[[`
[10:32:38.361]             `+` <- base::`+`
[10:32:38.361]             `<<-` <- base::`<<-`
[10:32:38.361]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.361]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.361]                   3L)]
[10:32:38.361]             }
[10:32:38.361]             function(cond) {
[10:32:38.361]                 is_error <- inherits(cond, "error")
[10:32:38.361]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.361]                   NULL)
[10:32:38.361]                 if (is_error) {
[10:32:38.361]                   sessionInformation <- function() {
[10:32:38.361]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.361]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.361]                       search = base::search(), system = base::Sys.info())
[10:32:38.361]                   }
[10:32:38.361]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.361]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.361]                     cond$call), session = sessionInformation(), 
[10:32:38.361]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.361]                   signalCondition(cond)
[10:32:38.361]                 }
[10:32:38.361]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.361]                 "immediateCondition"))) {
[10:32:38.361]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.361]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.361]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.361]                   if (TRUE && !signal) {
[10:32:38.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.361]                     {
[10:32:38.361]                       inherits <- base::inherits
[10:32:38.361]                       invokeRestart <- base::invokeRestart
[10:32:38.361]                       is.null <- base::is.null
[10:32:38.361]                       muffled <- FALSE
[10:32:38.361]                       if (inherits(cond, "message")) {
[10:32:38.361]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.361]                         if (muffled) 
[10:32:38.361]                           invokeRestart("muffleMessage")
[10:32:38.361]                       }
[10:32:38.361]                       else if (inherits(cond, "warning")) {
[10:32:38.361]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.361]                         if (muffled) 
[10:32:38.361]                           invokeRestart("muffleWarning")
[10:32:38.361]                       }
[10:32:38.361]                       else if (inherits(cond, "condition")) {
[10:32:38.361]                         if (!is.null(pattern)) {
[10:32:38.361]                           computeRestarts <- base::computeRestarts
[10:32:38.361]                           grepl <- base::grepl
[10:32:38.361]                           restarts <- computeRestarts(cond)
[10:32:38.361]                           for (restart in restarts) {
[10:32:38.361]                             name <- restart$name
[10:32:38.361]                             if (is.null(name)) 
[10:32:38.361]                               next
[10:32:38.361]                             if (!grepl(pattern, name)) 
[10:32:38.361]                               next
[10:32:38.361]                             invokeRestart(restart)
[10:32:38.361]                             muffled <- TRUE
[10:32:38.361]                             break
[10:32:38.361]                           }
[10:32:38.361]                         }
[10:32:38.361]                       }
[10:32:38.361]                       invisible(muffled)
[10:32:38.361]                     }
[10:32:38.361]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.361]                   }
[10:32:38.361]                 }
[10:32:38.361]                 else {
[10:32:38.361]                   if (TRUE) {
[10:32:38.361]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.361]                     {
[10:32:38.361]                       inherits <- base::inherits
[10:32:38.361]                       invokeRestart <- base::invokeRestart
[10:32:38.361]                       is.null <- base::is.null
[10:32:38.361]                       muffled <- FALSE
[10:32:38.361]                       if (inherits(cond, "message")) {
[10:32:38.361]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.361]                         if (muffled) 
[10:32:38.361]                           invokeRestart("muffleMessage")
[10:32:38.361]                       }
[10:32:38.361]                       else if (inherits(cond, "warning")) {
[10:32:38.361]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.361]                         if (muffled) 
[10:32:38.361]                           invokeRestart("muffleWarning")
[10:32:38.361]                       }
[10:32:38.361]                       else if (inherits(cond, "condition")) {
[10:32:38.361]                         if (!is.null(pattern)) {
[10:32:38.361]                           computeRestarts <- base::computeRestarts
[10:32:38.361]                           grepl <- base::grepl
[10:32:38.361]                           restarts <- computeRestarts(cond)
[10:32:38.361]                           for (restart in restarts) {
[10:32:38.361]                             name <- restart$name
[10:32:38.361]                             if (is.null(name)) 
[10:32:38.361]                               next
[10:32:38.361]                             if (!grepl(pattern, name)) 
[10:32:38.361]                               next
[10:32:38.361]                             invokeRestart(restart)
[10:32:38.361]                             muffled <- TRUE
[10:32:38.361]                             break
[10:32:38.361]                           }
[10:32:38.361]                         }
[10:32:38.361]                       }
[10:32:38.361]                       invisible(muffled)
[10:32:38.361]                     }
[10:32:38.361]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.361]                   }
[10:32:38.361]                 }
[10:32:38.361]             }
[10:32:38.361]         }))
[10:32:38.361]     }, error = function(ex) {
[10:32:38.361]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.361]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.361]                 ...future.rng), started = ...future.startTime, 
[10:32:38.361]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.361]             version = "1.8"), class = "FutureResult")
[10:32:38.361]     }, finally = {
[10:32:38.361]         if (!identical(...future.workdir, getwd())) 
[10:32:38.361]             setwd(...future.workdir)
[10:32:38.361]         {
[10:32:38.361]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.361]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.361]             }
[10:32:38.361]             base::options(...future.oldOptions)
[10:32:38.361]             if (.Platform$OS.type == "windows") {
[10:32:38.361]                 old_names <- names(...future.oldEnvVars)
[10:32:38.361]                 envs <- base::Sys.getenv()
[10:32:38.361]                 names <- names(envs)
[10:32:38.361]                 common <- intersect(names, old_names)
[10:32:38.361]                 added <- setdiff(names, old_names)
[10:32:38.361]                 removed <- setdiff(old_names, names)
[10:32:38.361]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.361]                   envs[common]]
[10:32:38.361]                 NAMES <- toupper(changed)
[10:32:38.361]                 args <- list()
[10:32:38.361]                 for (kk in seq_along(NAMES)) {
[10:32:38.361]                   name <- changed[[kk]]
[10:32:38.361]                   NAME <- NAMES[[kk]]
[10:32:38.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.361]                     next
[10:32:38.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.361]                 }
[10:32:38.361]                 NAMES <- toupper(added)
[10:32:38.361]                 for (kk in seq_along(NAMES)) {
[10:32:38.361]                   name <- added[[kk]]
[10:32:38.361]                   NAME <- NAMES[[kk]]
[10:32:38.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.361]                     next
[10:32:38.361]                   args[[name]] <- ""
[10:32:38.361]                 }
[10:32:38.361]                 NAMES <- toupper(removed)
[10:32:38.361]                 for (kk in seq_along(NAMES)) {
[10:32:38.361]                   name <- removed[[kk]]
[10:32:38.361]                   NAME <- NAMES[[kk]]
[10:32:38.361]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.361]                     next
[10:32:38.361]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.361]                 }
[10:32:38.361]                 if (length(args) > 0) 
[10:32:38.361]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.361]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.361]             }
[10:32:38.361]             else {
[10:32:38.361]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.361]             }
[10:32:38.361]             {
[10:32:38.361]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.361]                   0L) {
[10:32:38.361]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.361]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.361]                   base::options(opts)
[10:32:38.361]                 }
[10:32:38.361]                 {
[10:32:38.361]                   {
[10:32:38.361]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.361]                     NULL
[10:32:38.361]                   }
[10:32:38.361]                   options(future.plan = NULL)
[10:32:38.361]                   if (is.na(NA_character_)) 
[10:32:38.361]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.361]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.361]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.361]                     .init = FALSE)
[10:32:38.361]                 }
[10:32:38.361]             }
[10:32:38.361]         }
[10:32:38.361]     })
[10:32:38.361]     if (TRUE) {
[10:32:38.361]         base::sink(type = "output", split = FALSE)
[10:32:38.361]         if (TRUE) {
[10:32:38.361]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.361]         }
[10:32:38.361]         else {
[10:32:38.361]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.361]         }
[10:32:38.361]         base::close(...future.stdout)
[10:32:38.361]         ...future.stdout <- NULL
[10:32:38.361]     }
[10:32:38.361]     ...future.result$conditions <- ...future.conditions
[10:32:38.361]     ...future.result$finished <- base::Sys.time()
[10:32:38.361]     ...future.result
[10:32:38.361] }
[10:32:38.363] requestCore(): workers = 2
[10:32:38.365] MulticoreFuture started
[10:32:38.366] - Launch lazy future ... done
[10:32:38.366] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
[10:32:38.366] plan(): Setting new future strategy stack:
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.366] List of future strategies:
[10:32:38.366] 1. sequential:
[10:32:38.366]    - args: function (..., envir = parent.frame())
[10:32:38.366]    - tweaked: FALSE
[10:32:38.366]    - call: NULL
[10:32:38.367] plan(): nbrOfWorkers() = 1
[10:32:38.369] plan(): Setting new future strategy stack:
[10:32:38.370] List of future strategies:
[10:32:38.370] 1. multicore:
[10:32:38.370]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.370]    - tweaked: FALSE
[10:32:38.370]    - call: plan(strategy)
[10:32:38.375] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.375] result() for MulticoreFuture ...
[10:32:38.376] result() for MulticoreFuture ...
[10:32:38.377] result() for MulticoreFuture ... done
[10:32:38.377] result() for MulticoreFuture ... done
[10:32:38.377] result() for MulticoreFuture ...
[10:32:38.377] result() for MulticoreFuture ... done
[10:32:38.377] getGlobalsAndPackages() ...
[10:32:38.378] Searching for globals...
[10:32:38.379] - globals found: [1] ‘{’
[10:32:38.379] Searching for globals ... DONE
[10:32:38.379] Resolving globals: FALSE
[10:32:38.379] 
[10:32:38.379] 
[10:32:38.380] getGlobalsAndPackages() ... DONE
[10:32:38.380] run() for ‘Future’ ...
[10:32:38.380] - state: ‘created’
[10:32:38.380] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:38.384] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.384] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:38.384]   - Field: ‘label’
[10:32:38.385]   - Field: ‘local’
[10:32:38.385]   - Field: ‘owner’
[10:32:38.385]   - Field: ‘envir’
[10:32:38.385]   - Field: ‘workers’
[10:32:38.385]   - Field: ‘packages’
[10:32:38.385]   - Field: ‘gc’
[10:32:38.385]   - Field: ‘job’
[10:32:38.385]   - Field: ‘conditions’
[10:32:38.386]   - Field: ‘expr’
[10:32:38.386]   - Field: ‘uuid’
[10:32:38.386]   - Field: ‘seed’
[10:32:38.386]   - Field: ‘version’
[10:32:38.386]   - Field: ‘result’
[10:32:38.386]   - Field: ‘asynchronous’
[10:32:38.386]   - Field: ‘calls’
[10:32:38.386]   - Field: ‘globals’
[10:32:38.386]   - Field: ‘stdout’
[10:32:38.387]   - Field: ‘earlySignal’
[10:32:38.387]   - Field: ‘lazy’
[10:32:38.387]   - Field: ‘state’
[10:32:38.387] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:38.387] - Launch lazy future ...
[10:32:38.387] Packages needed by the future expression (n = 0): <none>
[10:32:38.387] Packages needed by future strategies (n = 0): <none>
[10:32:38.388] {
[10:32:38.388]     {
[10:32:38.388]         {
[10:32:38.388]             ...future.startTime <- base::Sys.time()
[10:32:38.388]             {
[10:32:38.388]                 {
[10:32:38.388]                   {
[10:32:38.388]                     {
[10:32:38.388]                       base::local({
[10:32:38.388]                         has_future <- base::requireNamespace("future", 
[10:32:38.388]                           quietly = TRUE)
[10:32:38.388]                         if (has_future) {
[10:32:38.388]                           ns <- base::getNamespace("future")
[10:32:38.388]                           version <- ns[[".package"]][["version"]]
[10:32:38.388]                           if (is.null(version)) 
[10:32:38.388]                             version <- utils::packageVersion("future")
[10:32:38.388]                         }
[10:32:38.388]                         else {
[10:32:38.388]                           version <- NULL
[10:32:38.388]                         }
[10:32:38.388]                         if (!has_future || version < "1.8.0") {
[10:32:38.388]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.388]                             "", base::R.version$version.string), 
[10:32:38.388]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.388]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.388]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.388]                               "release", "version")], collapse = " "), 
[10:32:38.388]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.388]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.388]                             info)
[10:32:38.388]                           info <- base::paste(info, collapse = "; ")
[10:32:38.388]                           if (!has_future) {
[10:32:38.388]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.388]                               info)
[10:32:38.388]                           }
[10:32:38.388]                           else {
[10:32:38.388]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.388]                               info, version)
[10:32:38.388]                           }
[10:32:38.388]                           base::stop(msg)
[10:32:38.388]                         }
[10:32:38.388]                       })
[10:32:38.388]                     }
[10:32:38.388]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.388]                     base::options(mc.cores = 1L)
[10:32:38.388]                   }
[10:32:38.388]                   ...future.strategy.old <- future::plan("list")
[10:32:38.388]                   options(future.plan = NULL)
[10:32:38.388]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.388]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.388]                 }
[10:32:38.388]                 ...future.workdir <- getwd()
[10:32:38.388]             }
[10:32:38.388]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.388]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.388]         }
[10:32:38.388]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.388]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.388]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.388]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.388]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.388]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.388]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.388]             base::names(...future.oldOptions))
[10:32:38.388]     }
[10:32:38.388]     if (FALSE) {
[10:32:38.388]     }
[10:32:38.388]     else {
[10:32:38.388]         if (TRUE) {
[10:32:38.388]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.388]                 open = "w")
[10:32:38.388]         }
[10:32:38.388]         else {
[10:32:38.388]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.388]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.388]         }
[10:32:38.388]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.388]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.388]             base::sink(type = "output", split = FALSE)
[10:32:38.388]             base::close(...future.stdout)
[10:32:38.388]         }, add = TRUE)
[10:32:38.388]     }
[10:32:38.388]     ...future.frame <- base::sys.nframe()
[10:32:38.388]     ...future.conditions <- base::list()
[10:32:38.388]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.388]     if (FALSE) {
[10:32:38.388]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.388]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.388]     }
[10:32:38.388]     ...future.result <- base::tryCatch({
[10:32:38.388]         base::withCallingHandlers({
[10:32:38.388]             ...future.value <- base::withVisible(base::local({
[10:32:38.388]                 withCallingHandlers({
[10:32:38.388]                   {
[10:32:38.388]                     42
[10:32:38.388]                   }
[10:32:38.388]                 }, immediateCondition = function(cond) {
[10:32:38.388]                   save_rds <- function (object, pathname, ...) 
[10:32:38.388]                   {
[10:32:38.388]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.388]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.388]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.388]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.388]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.388]                         fi_tmp[["mtime"]])
[10:32:38.388]                     }
[10:32:38.388]                     tryCatch({
[10:32:38.388]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.388]                     }, error = function(ex) {
[10:32:38.388]                       msg <- conditionMessage(ex)
[10:32:38.388]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.388]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.388]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.388]                         fi_tmp[["mtime"]], msg)
[10:32:38.388]                       ex$message <- msg
[10:32:38.388]                       stop(ex)
[10:32:38.388]                     })
[10:32:38.388]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.388]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.388]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.388]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.388]                       fi <- file.info(pathname)
[10:32:38.388]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.388]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.388]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.388]                         fi[["size"]], fi[["mtime"]])
[10:32:38.388]                       stop(msg)
[10:32:38.388]                     }
[10:32:38.388]                     invisible(pathname)
[10:32:38.388]                   }
[10:32:38.388]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.388]                     rootPath = tempdir()) 
[10:32:38.388]                   {
[10:32:38.388]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.388]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.388]                       tmpdir = path, fileext = ".rds")
[10:32:38.388]                     save_rds(obj, file)
[10:32:38.388]                   }
[10:32:38.388]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.388]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.388]                   {
[10:32:38.388]                     inherits <- base::inherits
[10:32:38.388]                     invokeRestart <- base::invokeRestart
[10:32:38.388]                     is.null <- base::is.null
[10:32:38.388]                     muffled <- FALSE
[10:32:38.388]                     if (inherits(cond, "message")) {
[10:32:38.388]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.388]                       if (muffled) 
[10:32:38.388]                         invokeRestart("muffleMessage")
[10:32:38.388]                     }
[10:32:38.388]                     else if (inherits(cond, "warning")) {
[10:32:38.388]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.388]                       if (muffled) 
[10:32:38.388]                         invokeRestart("muffleWarning")
[10:32:38.388]                     }
[10:32:38.388]                     else if (inherits(cond, "condition")) {
[10:32:38.388]                       if (!is.null(pattern)) {
[10:32:38.388]                         computeRestarts <- base::computeRestarts
[10:32:38.388]                         grepl <- base::grepl
[10:32:38.388]                         restarts <- computeRestarts(cond)
[10:32:38.388]                         for (restart in restarts) {
[10:32:38.388]                           name <- restart$name
[10:32:38.388]                           if (is.null(name)) 
[10:32:38.388]                             next
[10:32:38.388]                           if (!grepl(pattern, name)) 
[10:32:38.388]                             next
[10:32:38.388]                           invokeRestart(restart)
[10:32:38.388]                           muffled <- TRUE
[10:32:38.388]                           break
[10:32:38.388]                         }
[10:32:38.388]                       }
[10:32:38.388]                     }
[10:32:38.388]                     invisible(muffled)
[10:32:38.388]                   }
[10:32:38.388]                   muffleCondition(cond)
[10:32:38.388]                 })
[10:32:38.388]             }))
[10:32:38.388]             future::FutureResult(value = ...future.value$value, 
[10:32:38.388]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.388]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.388]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.388]                     ...future.globalenv.names))
[10:32:38.388]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.388]         }, condition = base::local({
[10:32:38.388]             c <- base::c
[10:32:38.388]             inherits <- base::inherits
[10:32:38.388]             invokeRestart <- base::invokeRestart
[10:32:38.388]             length <- base::length
[10:32:38.388]             list <- base::list
[10:32:38.388]             seq.int <- base::seq.int
[10:32:38.388]             signalCondition <- base::signalCondition
[10:32:38.388]             sys.calls <- base::sys.calls
[10:32:38.388]             `[[` <- base::`[[`
[10:32:38.388]             `+` <- base::`+`
[10:32:38.388]             `<<-` <- base::`<<-`
[10:32:38.388]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.388]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.388]                   3L)]
[10:32:38.388]             }
[10:32:38.388]             function(cond) {
[10:32:38.388]                 is_error <- inherits(cond, "error")
[10:32:38.388]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.388]                   NULL)
[10:32:38.388]                 if (is_error) {
[10:32:38.388]                   sessionInformation <- function() {
[10:32:38.388]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.388]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.388]                       search = base::search(), system = base::Sys.info())
[10:32:38.388]                   }
[10:32:38.388]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.388]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.388]                     cond$call), session = sessionInformation(), 
[10:32:38.388]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.388]                   signalCondition(cond)
[10:32:38.388]                 }
[10:32:38.388]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.388]                 "immediateCondition"))) {
[10:32:38.388]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.388]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.388]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.388]                   if (TRUE && !signal) {
[10:32:38.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.388]                     {
[10:32:38.388]                       inherits <- base::inherits
[10:32:38.388]                       invokeRestart <- base::invokeRestart
[10:32:38.388]                       is.null <- base::is.null
[10:32:38.388]                       muffled <- FALSE
[10:32:38.388]                       if (inherits(cond, "message")) {
[10:32:38.388]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.388]                         if (muffled) 
[10:32:38.388]                           invokeRestart("muffleMessage")
[10:32:38.388]                       }
[10:32:38.388]                       else if (inherits(cond, "warning")) {
[10:32:38.388]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.388]                         if (muffled) 
[10:32:38.388]                           invokeRestart("muffleWarning")
[10:32:38.388]                       }
[10:32:38.388]                       else if (inherits(cond, "condition")) {
[10:32:38.388]                         if (!is.null(pattern)) {
[10:32:38.388]                           computeRestarts <- base::computeRestarts
[10:32:38.388]                           grepl <- base::grepl
[10:32:38.388]                           restarts <- computeRestarts(cond)
[10:32:38.388]                           for (restart in restarts) {
[10:32:38.388]                             name <- restart$name
[10:32:38.388]                             if (is.null(name)) 
[10:32:38.388]                               next
[10:32:38.388]                             if (!grepl(pattern, name)) 
[10:32:38.388]                               next
[10:32:38.388]                             invokeRestart(restart)
[10:32:38.388]                             muffled <- TRUE
[10:32:38.388]                             break
[10:32:38.388]                           }
[10:32:38.388]                         }
[10:32:38.388]                       }
[10:32:38.388]                       invisible(muffled)
[10:32:38.388]                     }
[10:32:38.388]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.388]                   }
[10:32:38.388]                 }
[10:32:38.388]                 else {
[10:32:38.388]                   if (TRUE) {
[10:32:38.388]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.388]                     {
[10:32:38.388]                       inherits <- base::inherits
[10:32:38.388]                       invokeRestart <- base::invokeRestart
[10:32:38.388]                       is.null <- base::is.null
[10:32:38.388]                       muffled <- FALSE
[10:32:38.388]                       if (inherits(cond, "message")) {
[10:32:38.388]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.388]                         if (muffled) 
[10:32:38.388]                           invokeRestart("muffleMessage")
[10:32:38.388]                       }
[10:32:38.388]                       else if (inherits(cond, "warning")) {
[10:32:38.388]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.388]                         if (muffled) 
[10:32:38.388]                           invokeRestart("muffleWarning")
[10:32:38.388]                       }
[10:32:38.388]                       else if (inherits(cond, "condition")) {
[10:32:38.388]                         if (!is.null(pattern)) {
[10:32:38.388]                           computeRestarts <- base::computeRestarts
[10:32:38.388]                           grepl <- base::grepl
[10:32:38.388]                           restarts <- computeRestarts(cond)
[10:32:38.388]                           for (restart in restarts) {
[10:32:38.388]                             name <- restart$name
[10:32:38.388]                             if (is.null(name)) 
[10:32:38.388]                               next
[10:32:38.388]                             if (!grepl(pattern, name)) 
[10:32:38.388]                               next
[10:32:38.388]                             invokeRestart(restart)
[10:32:38.388]                             muffled <- TRUE
[10:32:38.388]                             break
[10:32:38.388]                           }
[10:32:38.388]                         }
[10:32:38.388]                       }
[10:32:38.388]                       invisible(muffled)
[10:32:38.388]                     }
[10:32:38.388]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.388]                   }
[10:32:38.388]                 }
[10:32:38.388]             }
[10:32:38.388]         }))
[10:32:38.388]     }, error = function(ex) {
[10:32:38.388]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.388]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.388]                 ...future.rng), started = ...future.startTime, 
[10:32:38.388]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.388]             version = "1.8"), class = "FutureResult")
[10:32:38.388]     }, finally = {
[10:32:38.388]         if (!identical(...future.workdir, getwd())) 
[10:32:38.388]             setwd(...future.workdir)
[10:32:38.388]         {
[10:32:38.388]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.388]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.388]             }
[10:32:38.388]             base::options(...future.oldOptions)
[10:32:38.388]             if (.Platform$OS.type == "windows") {
[10:32:38.388]                 old_names <- names(...future.oldEnvVars)
[10:32:38.388]                 envs <- base::Sys.getenv()
[10:32:38.388]                 names <- names(envs)
[10:32:38.388]                 common <- intersect(names, old_names)
[10:32:38.388]                 added <- setdiff(names, old_names)
[10:32:38.388]                 removed <- setdiff(old_names, names)
[10:32:38.388]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.388]                   envs[common]]
[10:32:38.388]                 NAMES <- toupper(changed)
[10:32:38.388]                 args <- list()
[10:32:38.388]                 for (kk in seq_along(NAMES)) {
[10:32:38.388]                   name <- changed[[kk]]
[10:32:38.388]                   NAME <- NAMES[[kk]]
[10:32:38.388]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.388]                     next
[10:32:38.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.388]                 }
[10:32:38.388]                 NAMES <- toupper(added)
[10:32:38.388]                 for (kk in seq_along(NAMES)) {
[10:32:38.388]                   name <- added[[kk]]
[10:32:38.388]                   NAME <- NAMES[[kk]]
[10:32:38.388]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.388]                     next
[10:32:38.388]                   args[[name]] <- ""
[10:32:38.388]                 }
[10:32:38.388]                 NAMES <- toupper(removed)
[10:32:38.388]                 for (kk in seq_along(NAMES)) {
[10:32:38.388]                   name <- removed[[kk]]
[10:32:38.388]                   NAME <- NAMES[[kk]]
[10:32:38.388]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.388]                     next
[10:32:38.388]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.388]                 }
[10:32:38.388]                 if (length(args) > 0) 
[10:32:38.388]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.388]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.388]             }
[10:32:38.388]             else {
[10:32:38.388]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.388]             }
[10:32:38.388]             {
[10:32:38.388]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.388]                   0L) {
[10:32:38.388]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.388]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.388]                   base::options(opts)
[10:32:38.388]                 }
[10:32:38.388]                 {
[10:32:38.388]                   {
[10:32:38.388]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.388]                     NULL
[10:32:38.388]                   }
[10:32:38.388]                   options(future.plan = NULL)
[10:32:38.388]                   if (is.na(NA_character_)) 
[10:32:38.388]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.388]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.388]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.388]                     .init = FALSE)
[10:32:38.388]                 }
[10:32:38.388]             }
[10:32:38.388]         }
[10:32:38.388]     })
[10:32:38.388]     if (TRUE) {
[10:32:38.388]         base::sink(type = "output", split = FALSE)
[10:32:38.388]         if (TRUE) {
[10:32:38.388]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.388]         }
[10:32:38.388]         else {
[10:32:38.388]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.388]         }
[10:32:38.388]         base::close(...future.stdout)
[10:32:38.388]         ...future.stdout <- NULL
[10:32:38.388]     }
[10:32:38.388]     ...future.result$conditions <- ...future.conditions
[10:32:38.388]     ...future.result$finished <- base::Sys.time()
[10:32:38.388]     ...future.result
[10:32:38.388] }
[10:32:38.391] requestCore(): workers = 2
[10:32:38.393] MulticoreFuture started
[10:32:38.393] - Launch lazy future ... done
[10:32:38.393] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[10:32:38.394] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.394] List of future strategies:
[10:32:38.394] 1. sequential:
[10:32:38.394]    - args: function (..., envir = parent.frame())
[10:32:38.394]    - tweaked: FALSE
[10:32:38.394]    - call: NULL
[10:32:38.395] plan(): nbrOfWorkers() = 1
[10:32:38.397] plan(): Setting new future strategy stack:
[10:32:38.397] List of future strategies:
[10:32:38.397] 1. multicore:
[10:32:38.397]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.397]    - tweaked: FALSE
[10:32:38.397]    - call: plan(strategy)
[10:32:38.402] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.403] result() for MulticoreFuture ...
[10:32:38.404] result() for MulticoreFuture ...
[10:32:38.404] result() for MulticoreFuture ... done
[10:32:38.404] result() for MulticoreFuture ... done
[10:32:38.404] result() for MulticoreFuture ...
[10:32:38.404] result() for MulticoreFuture ... done
[10:32:38.408] getGlobalsAndPackages() ...
[10:32:38.408] 
[10:32:38.408] - globals: [0] <none>
[10:32:38.408] getGlobalsAndPackages() ... DONE
[10:32:38.409] Packages needed by the future expression (n = 0): <none>
[10:32:38.409] Packages needed by future strategies (n = 0): <none>
[10:32:38.409] {
[10:32:38.409]     {
[10:32:38.409]         {
[10:32:38.409]             ...future.startTime <- base::Sys.time()
[10:32:38.409]             {
[10:32:38.409]                 {
[10:32:38.409]                   {
[10:32:38.409]                     {
[10:32:38.409]                       base::local({
[10:32:38.409]                         has_future <- base::requireNamespace("future", 
[10:32:38.409]                           quietly = TRUE)
[10:32:38.409]                         if (has_future) {
[10:32:38.409]                           ns <- base::getNamespace("future")
[10:32:38.409]                           version <- ns[[".package"]][["version"]]
[10:32:38.409]                           if (is.null(version)) 
[10:32:38.409]                             version <- utils::packageVersion("future")
[10:32:38.409]                         }
[10:32:38.409]                         else {
[10:32:38.409]                           version <- NULL
[10:32:38.409]                         }
[10:32:38.409]                         if (!has_future || version < "1.8.0") {
[10:32:38.409]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.409]                             "", base::R.version$version.string), 
[10:32:38.409]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.409]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.409]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.409]                               "release", "version")], collapse = " "), 
[10:32:38.409]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.409]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.409]                             info)
[10:32:38.409]                           info <- base::paste(info, collapse = "; ")
[10:32:38.409]                           if (!has_future) {
[10:32:38.409]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.409]                               info)
[10:32:38.409]                           }
[10:32:38.409]                           else {
[10:32:38.409]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.409]                               info, version)
[10:32:38.409]                           }
[10:32:38.409]                           base::stop(msg)
[10:32:38.409]                         }
[10:32:38.409]                       })
[10:32:38.409]                     }
[10:32:38.409]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.409]                     base::options(mc.cores = 1L)
[10:32:38.409]                   }
[10:32:38.409]                   ...future.strategy.old <- future::plan("list")
[10:32:38.409]                   options(future.plan = NULL)
[10:32:38.409]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.409]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.409]                 }
[10:32:38.409]                 ...future.workdir <- getwd()
[10:32:38.409]             }
[10:32:38.409]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.409]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.409]         }
[10:32:38.409]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.409]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.409]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.409]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.409]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.409]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.409]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.409]             base::names(...future.oldOptions))
[10:32:38.409]     }
[10:32:38.409]     if (FALSE) {
[10:32:38.409]     }
[10:32:38.409]     else {
[10:32:38.409]         if (TRUE) {
[10:32:38.409]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.409]                 open = "w")
[10:32:38.409]         }
[10:32:38.409]         else {
[10:32:38.409]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.409]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.409]         }
[10:32:38.409]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.409]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.409]             base::sink(type = "output", split = FALSE)
[10:32:38.409]             base::close(...future.stdout)
[10:32:38.409]         }, add = TRUE)
[10:32:38.409]     }
[10:32:38.409]     ...future.frame <- base::sys.nframe()
[10:32:38.409]     ...future.conditions <- base::list()
[10:32:38.409]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.409]     if (FALSE) {
[10:32:38.409]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.409]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.409]     }
[10:32:38.409]     ...future.result <- base::tryCatch({
[10:32:38.409]         base::withCallingHandlers({
[10:32:38.409]             ...future.value <- base::withVisible(base::local({
[10:32:38.409]                 withCallingHandlers({
[10:32:38.409]                   42
[10:32:38.409]                 }, immediateCondition = function(cond) {
[10:32:38.409]                   save_rds <- function (object, pathname, ...) 
[10:32:38.409]                   {
[10:32:38.409]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.409]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.409]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.409]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.409]                         fi_tmp[["mtime"]])
[10:32:38.409]                     }
[10:32:38.409]                     tryCatch({
[10:32:38.409]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.409]                     }, error = function(ex) {
[10:32:38.409]                       msg <- conditionMessage(ex)
[10:32:38.409]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.409]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.409]                         fi_tmp[["mtime"]], msg)
[10:32:38.409]                       ex$message <- msg
[10:32:38.409]                       stop(ex)
[10:32:38.409]                     })
[10:32:38.409]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.409]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.409]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.409]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.409]                       fi <- file.info(pathname)
[10:32:38.409]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.409]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.409]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.409]                         fi[["size"]], fi[["mtime"]])
[10:32:38.409]                       stop(msg)
[10:32:38.409]                     }
[10:32:38.409]                     invisible(pathname)
[10:32:38.409]                   }
[10:32:38.409]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.409]                     rootPath = tempdir()) 
[10:32:38.409]                   {
[10:32:38.409]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.409]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.409]                       tmpdir = path, fileext = ".rds")
[10:32:38.409]                     save_rds(obj, file)
[10:32:38.409]                   }
[10:32:38.409]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.409]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.409]                   {
[10:32:38.409]                     inherits <- base::inherits
[10:32:38.409]                     invokeRestart <- base::invokeRestart
[10:32:38.409]                     is.null <- base::is.null
[10:32:38.409]                     muffled <- FALSE
[10:32:38.409]                     if (inherits(cond, "message")) {
[10:32:38.409]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.409]                       if (muffled) 
[10:32:38.409]                         invokeRestart("muffleMessage")
[10:32:38.409]                     }
[10:32:38.409]                     else if (inherits(cond, "warning")) {
[10:32:38.409]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.409]                       if (muffled) 
[10:32:38.409]                         invokeRestart("muffleWarning")
[10:32:38.409]                     }
[10:32:38.409]                     else if (inherits(cond, "condition")) {
[10:32:38.409]                       if (!is.null(pattern)) {
[10:32:38.409]                         computeRestarts <- base::computeRestarts
[10:32:38.409]                         grepl <- base::grepl
[10:32:38.409]                         restarts <- computeRestarts(cond)
[10:32:38.409]                         for (restart in restarts) {
[10:32:38.409]                           name <- restart$name
[10:32:38.409]                           if (is.null(name)) 
[10:32:38.409]                             next
[10:32:38.409]                           if (!grepl(pattern, name)) 
[10:32:38.409]                             next
[10:32:38.409]                           invokeRestart(restart)
[10:32:38.409]                           muffled <- TRUE
[10:32:38.409]                           break
[10:32:38.409]                         }
[10:32:38.409]                       }
[10:32:38.409]                     }
[10:32:38.409]                     invisible(muffled)
[10:32:38.409]                   }
[10:32:38.409]                   muffleCondition(cond)
[10:32:38.409]                 })
[10:32:38.409]             }))
[10:32:38.409]             future::FutureResult(value = ...future.value$value, 
[10:32:38.409]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.409]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.409]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.409]                     ...future.globalenv.names))
[10:32:38.409]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.409]         }, condition = base::local({
[10:32:38.409]             c <- base::c
[10:32:38.409]             inherits <- base::inherits
[10:32:38.409]             invokeRestart <- base::invokeRestart
[10:32:38.409]             length <- base::length
[10:32:38.409]             list <- base::list
[10:32:38.409]             seq.int <- base::seq.int
[10:32:38.409]             signalCondition <- base::signalCondition
[10:32:38.409]             sys.calls <- base::sys.calls
[10:32:38.409]             `[[` <- base::`[[`
[10:32:38.409]             `+` <- base::`+`
[10:32:38.409]             `<<-` <- base::`<<-`
[10:32:38.409]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.409]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.409]                   3L)]
[10:32:38.409]             }
[10:32:38.409]             function(cond) {
[10:32:38.409]                 is_error <- inherits(cond, "error")
[10:32:38.409]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.409]                   NULL)
[10:32:38.409]                 if (is_error) {
[10:32:38.409]                   sessionInformation <- function() {
[10:32:38.409]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.409]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.409]                       search = base::search(), system = base::Sys.info())
[10:32:38.409]                   }
[10:32:38.409]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.409]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.409]                     cond$call), session = sessionInformation(), 
[10:32:38.409]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.409]                   signalCondition(cond)
[10:32:38.409]                 }
[10:32:38.409]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.409]                 "immediateCondition"))) {
[10:32:38.409]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.409]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.409]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.409]                   if (TRUE && !signal) {
[10:32:38.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.409]                     {
[10:32:38.409]                       inherits <- base::inherits
[10:32:38.409]                       invokeRestart <- base::invokeRestart
[10:32:38.409]                       is.null <- base::is.null
[10:32:38.409]                       muffled <- FALSE
[10:32:38.409]                       if (inherits(cond, "message")) {
[10:32:38.409]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.409]                         if (muffled) 
[10:32:38.409]                           invokeRestart("muffleMessage")
[10:32:38.409]                       }
[10:32:38.409]                       else if (inherits(cond, "warning")) {
[10:32:38.409]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.409]                         if (muffled) 
[10:32:38.409]                           invokeRestart("muffleWarning")
[10:32:38.409]                       }
[10:32:38.409]                       else if (inherits(cond, "condition")) {
[10:32:38.409]                         if (!is.null(pattern)) {
[10:32:38.409]                           computeRestarts <- base::computeRestarts
[10:32:38.409]                           grepl <- base::grepl
[10:32:38.409]                           restarts <- computeRestarts(cond)
[10:32:38.409]                           for (restart in restarts) {
[10:32:38.409]                             name <- restart$name
[10:32:38.409]                             if (is.null(name)) 
[10:32:38.409]                               next
[10:32:38.409]                             if (!grepl(pattern, name)) 
[10:32:38.409]                               next
[10:32:38.409]                             invokeRestart(restart)
[10:32:38.409]                             muffled <- TRUE
[10:32:38.409]                             break
[10:32:38.409]                           }
[10:32:38.409]                         }
[10:32:38.409]                       }
[10:32:38.409]                       invisible(muffled)
[10:32:38.409]                     }
[10:32:38.409]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.409]                   }
[10:32:38.409]                 }
[10:32:38.409]                 else {
[10:32:38.409]                   if (TRUE) {
[10:32:38.409]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.409]                     {
[10:32:38.409]                       inherits <- base::inherits
[10:32:38.409]                       invokeRestart <- base::invokeRestart
[10:32:38.409]                       is.null <- base::is.null
[10:32:38.409]                       muffled <- FALSE
[10:32:38.409]                       if (inherits(cond, "message")) {
[10:32:38.409]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.409]                         if (muffled) 
[10:32:38.409]                           invokeRestart("muffleMessage")
[10:32:38.409]                       }
[10:32:38.409]                       else if (inherits(cond, "warning")) {
[10:32:38.409]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.409]                         if (muffled) 
[10:32:38.409]                           invokeRestart("muffleWarning")
[10:32:38.409]                       }
[10:32:38.409]                       else if (inherits(cond, "condition")) {
[10:32:38.409]                         if (!is.null(pattern)) {
[10:32:38.409]                           computeRestarts <- base::computeRestarts
[10:32:38.409]                           grepl <- base::grepl
[10:32:38.409]                           restarts <- computeRestarts(cond)
[10:32:38.409]                           for (restart in restarts) {
[10:32:38.409]                             name <- restart$name
[10:32:38.409]                             if (is.null(name)) 
[10:32:38.409]                               next
[10:32:38.409]                             if (!grepl(pattern, name)) 
[10:32:38.409]                               next
[10:32:38.409]                             invokeRestart(restart)
[10:32:38.409]                             muffled <- TRUE
[10:32:38.409]                             break
[10:32:38.409]                           }
[10:32:38.409]                         }
[10:32:38.409]                       }
[10:32:38.409]                       invisible(muffled)
[10:32:38.409]                     }
[10:32:38.409]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.409]                   }
[10:32:38.409]                 }
[10:32:38.409]             }
[10:32:38.409]         }))
[10:32:38.409]     }, error = function(ex) {
[10:32:38.409]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.409]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.409]                 ...future.rng), started = ...future.startTime, 
[10:32:38.409]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.409]             version = "1.8"), class = "FutureResult")
[10:32:38.409]     }, finally = {
[10:32:38.409]         if (!identical(...future.workdir, getwd())) 
[10:32:38.409]             setwd(...future.workdir)
[10:32:38.409]         {
[10:32:38.409]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.409]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.409]             }
[10:32:38.409]             base::options(...future.oldOptions)
[10:32:38.409]             if (.Platform$OS.type == "windows") {
[10:32:38.409]                 old_names <- names(...future.oldEnvVars)
[10:32:38.409]                 envs <- base::Sys.getenv()
[10:32:38.409]                 names <- names(envs)
[10:32:38.409]                 common <- intersect(names, old_names)
[10:32:38.409]                 added <- setdiff(names, old_names)
[10:32:38.409]                 removed <- setdiff(old_names, names)
[10:32:38.409]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.409]                   envs[common]]
[10:32:38.409]                 NAMES <- toupper(changed)
[10:32:38.409]                 args <- list()
[10:32:38.409]                 for (kk in seq_along(NAMES)) {
[10:32:38.409]                   name <- changed[[kk]]
[10:32:38.409]                   NAME <- NAMES[[kk]]
[10:32:38.409]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.409]                     next
[10:32:38.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.409]                 }
[10:32:38.409]                 NAMES <- toupper(added)
[10:32:38.409]                 for (kk in seq_along(NAMES)) {
[10:32:38.409]                   name <- added[[kk]]
[10:32:38.409]                   NAME <- NAMES[[kk]]
[10:32:38.409]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.409]                     next
[10:32:38.409]                   args[[name]] <- ""
[10:32:38.409]                 }
[10:32:38.409]                 NAMES <- toupper(removed)
[10:32:38.409]                 for (kk in seq_along(NAMES)) {
[10:32:38.409]                   name <- removed[[kk]]
[10:32:38.409]                   NAME <- NAMES[[kk]]
[10:32:38.409]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.409]                     next
[10:32:38.409]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.409]                 }
[10:32:38.409]                 if (length(args) > 0) 
[10:32:38.409]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.409]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.409]             }
[10:32:38.409]             else {
[10:32:38.409]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.409]             }
[10:32:38.409]             {
[10:32:38.409]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.409]                   0L) {
[10:32:38.409]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.409]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.409]                   base::options(opts)
[10:32:38.409]                 }
[10:32:38.409]                 {
[10:32:38.409]                   {
[10:32:38.409]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.409]                     NULL
[10:32:38.409]                   }
[10:32:38.409]                   options(future.plan = NULL)
[10:32:38.409]                   if (is.na(NA_character_)) 
[10:32:38.409]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.409]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.409]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.409]                     .init = FALSE)
[10:32:38.409]                 }
[10:32:38.409]             }
[10:32:38.409]         }
[10:32:38.409]     })
[10:32:38.409]     if (TRUE) {
[10:32:38.409]         base::sink(type = "output", split = FALSE)
[10:32:38.409]         if (TRUE) {
[10:32:38.409]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.409]         }
[10:32:38.409]         else {
[10:32:38.409]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.409]         }
[10:32:38.409]         base::close(...future.stdout)
[10:32:38.409]         ...future.stdout <- NULL
[10:32:38.409]     }
[10:32:38.409]     ...future.result$conditions <- ...future.conditions
[10:32:38.409]     ...future.result$finished <- base::Sys.time()
[10:32:38.409]     ...future.result
[10:32:38.409] }
[10:32:38.412] requestCore(): workers = 2
[10:32:38.414] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.415] plan(): Setting new future strategy stack:
[10:32:38.415] List of future strategies:
[10:32:38.415] 1. sequential:
[10:32:38.415]    - args: function (..., envir = parent.frame())
[10:32:38.415]    - tweaked: FALSE
[10:32:38.415]    - call: NULL
[10:32:38.416] plan(): nbrOfWorkers() = 1
[10:32:38.418] plan(): Setting new future strategy stack:
[10:32:38.418] List of future strategies:
[10:32:38.418] 1. multicore:
[10:32:38.418]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.418]    - tweaked: FALSE
[10:32:38.418]    - call: plan(strategy)
[10:32:38.423] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.424] result() for MulticoreFuture ...
[10:32:38.425] result() for MulticoreFuture ...
[10:32:38.425] result() for MulticoreFuture ... done
[10:32:38.425] result() for MulticoreFuture ... done
[10:32:38.425] result() for MulticoreFuture ...
[10:32:38.425] result() for MulticoreFuture ... done
[10:32:38.426] getGlobalsAndPackages() ...
[10:32:38.426] Searching for globals...
[10:32:38.426] 
[10:32:38.426] Searching for globals ... DONE
[10:32:38.426] - globals: [0] <none>
[10:32:38.427] getGlobalsAndPackages() ... DONE
[10:32:38.427] run() for ‘Future’ ...
[10:32:38.427] - state: ‘created’
[10:32:38.427] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:38.431] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.431] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:38.432]   - Field: ‘label’
[10:32:38.432]   - Field: ‘local’
[10:32:38.432]   - Field: ‘owner’
[10:32:38.432]   - Field: ‘envir’
[10:32:38.432]   - Field: ‘workers’
[10:32:38.432]   - Field: ‘packages’
[10:32:38.432]   - Field: ‘gc’
[10:32:38.432]   - Field: ‘job’
[10:32:38.432]   - Field: ‘conditions’
[10:32:38.433]   - Field: ‘expr’
[10:32:38.433]   - Field: ‘uuid’
[10:32:38.433]   - Field: ‘seed’
[10:32:38.433]   - Field: ‘version’
[10:32:38.433]   - Field: ‘result’
[10:32:38.433]   - Field: ‘asynchronous’
[10:32:38.433]   - Field: ‘calls’
[10:32:38.433]   - Field: ‘globals’
[10:32:38.434]   - Field: ‘stdout’
[10:32:38.434]   - Field: ‘earlySignal’
[10:32:38.434]   - Field: ‘lazy’
[10:32:38.434]   - Field: ‘state’
[10:32:38.434] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:38.434] - Launch lazy future ...
[10:32:38.434] Packages needed by the future expression (n = 0): <none>
[10:32:38.435] Packages needed by future strategies (n = 0): <none>
[10:32:38.435] {
[10:32:38.435]     {
[10:32:38.435]         {
[10:32:38.435]             ...future.startTime <- base::Sys.time()
[10:32:38.435]             {
[10:32:38.435]                 {
[10:32:38.435]                   {
[10:32:38.435]                     {
[10:32:38.435]                       base::local({
[10:32:38.435]                         has_future <- base::requireNamespace("future", 
[10:32:38.435]                           quietly = TRUE)
[10:32:38.435]                         if (has_future) {
[10:32:38.435]                           ns <- base::getNamespace("future")
[10:32:38.435]                           version <- ns[[".package"]][["version"]]
[10:32:38.435]                           if (is.null(version)) 
[10:32:38.435]                             version <- utils::packageVersion("future")
[10:32:38.435]                         }
[10:32:38.435]                         else {
[10:32:38.435]                           version <- NULL
[10:32:38.435]                         }
[10:32:38.435]                         if (!has_future || version < "1.8.0") {
[10:32:38.435]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.435]                             "", base::R.version$version.string), 
[10:32:38.435]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.435]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.435]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.435]                               "release", "version")], collapse = " "), 
[10:32:38.435]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.435]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.435]                             info)
[10:32:38.435]                           info <- base::paste(info, collapse = "; ")
[10:32:38.435]                           if (!has_future) {
[10:32:38.435]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.435]                               info)
[10:32:38.435]                           }
[10:32:38.435]                           else {
[10:32:38.435]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.435]                               info, version)
[10:32:38.435]                           }
[10:32:38.435]                           base::stop(msg)
[10:32:38.435]                         }
[10:32:38.435]                       })
[10:32:38.435]                     }
[10:32:38.435]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.435]                     base::options(mc.cores = 1L)
[10:32:38.435]                   }
[10:32:38.435]                   ...future.strategy.old <- future::plan("list")
[10:32:38.435]                   options(future.plan = NULL)
[10:32:38.435]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.435]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.435]                 }
[10:32:38.435]                 ...future.workdir <- getwd()
[10:32:38.435]             }
[10:32:38.435]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.435]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.435]         }
[10:32:38.435]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.435]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.435]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.435]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.435]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.435]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.435]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.435]             base::names(...future.oldOptions))
[10:32:38.435]     }
[10:32:38.435]     if (FALSE) {
[10:32:38.435]     }
[10:32:38.435]     else {
[10:32:38.435]         if (TRUE) {
[10:32:38.435]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.435]                 open = "w")
[10:32:38.435]         }
[10:32:38.435]         else {
[10:32:38.435]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.435]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.435]         }
[10:32:38.435]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.435]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.435]             base::sink(type = "output", split = FALSE)
[10:32:38.435]             base::close(...future.stdout)
[10:32:38.435]         }, add = TRUE)
[10:32:38.435]     }
[10:32:38.435]     ...future.frame <- base::sys.nframe()
[10:32:38.435]     ...future.conditions <- base::list()
[10:32:38.435]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.435]     if (FALSE) {
[10:32:38.435]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.435]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.435]     }
[10:32:38.435]     ...future.result <- base::tryCatch({
[10:32:38.435]         base::withCallingHandlers({
[10:32:38.435]             ...future.value <- base::withVisible(base::local({
[10:32:38.435]                 withCallingHandlers({
[10:32:38.435]                   42
[10:32:38.435]                 }, immediateCondition = function(cond) {
[10:32:38.435]                   save_rds <- function (object, pathname, ...) 
[10:32:38.435]                   {
[10:32:38.435]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.435]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.435]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.435]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.435]                         fi_tmp[["mtime"]])
[10:32:38.435]                     }
[10:32:38.435]                     tryCatch({
[10:32:38.435]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.435]                     }, error = function(ex) {
[10:32:38.435]                       msg <- conditionMessage(ex)
[10:32:38.435]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.435]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.435]                         fi_tmp[["mtime"]], msg)
[10:32:38.435]                       ex$message <- msg
[10:32:38.435]                       stop(ex)
[10:32:38.435]                     })
[10:32:38.435]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.435]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.435]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.435]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.435]                       fi <- file.info(pathname)
[10:32:38.435]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.435]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.435]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.435]                         fi[["size"]], fi[["mtime"]])
[10:32:38.435]                       stop(msg)
[10:32:38.435]                     }
[10:32:38.435]                     invisible(pathname)
[10:32:38.435]                   }
[10:32:38.435]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.435]                     rootPath = tempdir()) 
[10:32:38.435]                   {
[10:32:38.435]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.435]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.435]                       tmpdir = path, fileext = ".rds")
[10:32:38.435]                     save_rds(obj, file)
[10:32:38.435]                   }
[10:32:38.435]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.435]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.435]                   {
[10:32:38.435]                     inherits <- base::inherits
[10:32:38.435]                     invokeRestart <- base::invokeRestart
[10:32:38.435]                     is.null <- base::is.null
[10:32:38.435]                     muffled <- FALSE
[10:32:38.435]                     if (inherits(cond, "message")) {
[10:32:38.435]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.435]                       if (muffled) 
[10:32:38.435]                         invokeRestart("muffleMessage")
[10:32:38.435]                     }
[10:32:38.435]                     else if (inherits(cond, "warning")) {
[10:32:38.435]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.435]                       if (muffled) 
[10:32:38.435]                         invokeRestart("muffleWarning")
[10:32:38.435]                     }
[10:32:38.435]                     else if (inherits(cond, "condition")) {
[10:32:38.435]                       if (!is.null(pattern)) {
[10:32:38.435]                         computeRestarts <- base::computeRestarts
[10:32:38.435]                         grepl <- base::grepl
[10:32:38.435]                         restarts <- computeRestarts(cond)
[10:32:38.435]                         for (restart in restarts) {
[10:32:38.435]                           name <- restart$name
[10:32:38.435]                           if (is.null(name)) 
[10:32:38.435]                             next
[10:32:38.435]                           if (!grepl(pattern, name)) 
[10:32:38.435]                             next
[10:32:38.435]                           invokeRestart(restart)
[10:32:38.435]                           muffled <- TRUE
[10:32:38.435]                           break
[10:32:38.435]                         }
[10:32:38.435]                       }
[10:32:38.435]                     }
[10:32:38.435]                     invisible(muffled)
[10:32:38.435]                   }
[10:32:38.435]                   muffleCondition(cond)
[10:32:38.435]                 })
[10:32:38.435]             }))
[10:32:38.435]             future::FutureResult(value = ...future.value$value, 
[10:32:38.435]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.435]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.435]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.435]                     ...future.globalenv.names))
[10:32:38.435]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.435]         }, condition = base::local({
[10:32:38.435]             c <- base::c
[10:32:38.435]             inherits <- base::inherits
[10:32:38.435]             invokeRestart <- base::invokeRestart
[10:32:38.435]             length <- base::length
[10:32:38.435]             list <- base::list
[10:32:38.435]             seq.int <- base::seq.int
[10:32:38.435]             signalCondition <- base::signalCondition
[10:32:38.435]             sys.calls <- base::sys.calls
[10:32:38.435]             `[[` <- base::`[[`
[10:32:38.435]             `+` <- base::`+`
[10:32:38.435]             `<<-` <- base::`<<-`
[10:32:38.435]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.435]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.435]                   3L)]
[10:32:38.435]             }
[10:32:38.435]             function(cond) {
[10:32:38.435]                 is_error <- inherits(cond, "error")
[10:32:38.435]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.435]                   NULL)
[10:32:38.435]                 if (is_error) {
[10:32:38.435]                   sessionInformation <- function() {
[10:32:38.435]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.435]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.435]                       search = base::search(), system = base::Sys.info())
[10:32:38.435]                   }
[10:32:38.435]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.435]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.435]                     cond$call), session = sessionInformation(), 
[10:32:38.435]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.435]                   signalCondition(cond)
[10:32:38.435]                 }
[10:32:38.435]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.435]                 "immediateCondition"))) {
[10:32:38.435]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.435]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.435]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.435]                   if (TRUE && !signal) {
[10:32:38.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.435]                     {
[10:32:38.435]                       inherits <- base::inherits
[10:32:38.435]                       invokeRestart <- base::invokeRestart
[10:32:38.435]                       is.null <- base::is.null
[10:32:38.435]                       muffled <- FALSE
[10:32:38.435]                       if (inherits(cond, "message")) {
[10:32:38.435]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.435]                         if (muffled) 
[10:32:38.435]                           invokeRestart("muffleMessage")
[10:32:38.435]                       }
[10:32:38.435]                       else if (inherits(cond, "warning")) {
[10:32:38.435]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.435]                         if (muffled) 
[10:32:38.435]                           invokeRestart("muffleWarning")
[10:32:38.435]                       }
[10:32:38.435]                       else if (inherits(cond, "condition")) {
[10:32:38.435]                         if (!is.null(pattern)) {
[10:32:38.435]                           computeRestarts <- base::computeRestarts
[10:32:38.435]                           grepl <- base::grepl
[10:32:38.435]                           restarts <- computeRestarts(cond)
[10:32:38.435]                           for (restart in restarts) {
[10:32:38.435]                             name <- restart$name
[10:32:38.435]                             if (is.null(name)) 
[10:32:38.435]                               next
[10:32:38.435]                             if (!grepl(pattern, name)) 
[10:32:38.435]                               next
[10:32:38.435]                             invokeRestart(restart)
[10:32:38.435]                             muffled <- TRUE
[10:32:38.435]                             break
[10:32:38.435]                           }
[10:32:38.435]                         }
[10:32:38.435]                       }
[10:32:38.435]                       invisible(muffled)
[10:32:38.435]                     }
[10:32:38.435]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.435]                   }
[10:32:38.435]                 }
[10:32:38.435]                 else {
[10:32:38.435]                   if (TRUE) {
[10:32:38.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.435]                     {
[10:32:38.435]                       inherits <- base::inherits
[10:32:38.435]                       invokeRestart <- base::invokeRestart
[10:32:38.435]                       is.null <- base::is.null
[10:32:38.435]                       muffled <- FALSE
[10:32:38.435]                       if (inherits(cond, "message")) {
[10:32:38.435]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.435]                         if (muffled) 
[10:32:38.435]                           invokeRestart("muffleMessage")
[10:32:38.435]                       }
[10:32:38.435]                       else if (inherits(cond, "warning")) {
[10:32:38.435]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.435]                         if (muffled) 
[10:32:38.435]                           invokeRestart("muffleWarning")
[10:32:38.435]                       }
[10:32:38.435]                       else if (inherits(cond, "condition")) {
[10:32:38.435]                         if (!is.null(pattern)) {
[10:32:38.435]                           computeRestarts <- base::computeRestarts
[10:32:38.435]                           grepl <- base::grepl
[10:32:38.435]                           restarts <- computeRestarts(cond)
[10:32:38.435]                           for (restart in restarts) {
[10:32:38.435]                             name <- restart$name
[10:32:38.435]                             if (is.null(name)) 
[10:32:38.435]                               next
[10:32:38.435]                             if (!grepl(pattern, name)) 
[10:32:38.435]                               next
[10:32:38.435]                             invokeRestart(restart)
[10:32:38.435]                             muffled <- TRUE
[10:32:38.435]                             break
[10:32:38.435]                           }
[10:32:38.435]                         }
[10:32:38.435]                       }
[10:32:38.435]                       invisible(muffled)
[10:32:38.435]                     }
[10:32:38.435]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.435]                   }
[10:32:38.435]                 }
[10:32:38.435]             }
[10:32:38.435]         }))
[10:32:38.435]     }, error = function(ex) {
[10:32:38.435]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.435]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.435]                 ...future.rng), started = ...future.startTime, 
[10:32:38.435]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.435]             version = "1.8"), class = "FutureResult")
[10:32:38.435]     }, finally = {
[10:32:38.435]         if (!identical(...future.workdir, getwd())) 
[10:32:38.435]             setwd(...future.workdir)
[10:32:38.435]         {
[10:32:38.435]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.435]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.435]             }
[10:32:38.435]             base::options(...future.oldOptions)
[10:32:38.435]             if (.Platform$OS.type == "windows") {
[10:32:38.435]                 old_names <- names(...future.oldEnvVars)
[10:32:38.435]                 envs <- base::Sys.getenv()
[10:32:38.435]                 names <- names(envs)
[10:32:38.435]                 common <- intersect(names, old_names)
[10:32:38.435]                 added <- setdiff(names, old_names)
[10:32:38.435]                 removed <- setdiff(old_names, names)
[10:32:38.435]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.435]                   envs[common]]
[10:32:38.435]                 NAMES <- toupper(changed)
[10:32:38.435]                 args <- list()
[10:32:38.435]                 for (kk in seq_along(NAMES)) {
[10:32:38.435]                   name <- changed[[kk]]
[10:32:38.435]                   NAME <- NAMES[[kk]]
[10:32:38.435]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.435]                     next
[10:32:38.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.435]                 }
[10:32:38.435]                 NAMES <- toupper(added)
[10:32:38.435]                 for (kk in seq_along(NAMES)) {
[10:32:38.435]                   name <- added[[kk]]
[10:32:38.435]                   NAME <- NAMES[[kk]]
[10:32:38.435]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.435]                     next
[10:32:38.435]                   args[[name]] <- ""
[10:32:38.435]                 }
[10:32:38.435]                 NAMES <- toupper(removed)
[10:32:38.435]                 for (kk in seq_along(NAMES)) {
[10:32:38.435]                   name <- removed[[kk]]
[10:32:38.435]                   NAME <- NAMES[[kk]]
[10:32:38.435]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.435]                     next
[10:32:38.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.435]                 }
[10:32:38.435]                 if (length(args) > 0) 
[10:32:38.435]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.435]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.435]             }
[10:32:38.435]             else {
[10:32:38.435]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.435]             }
[10:32:38.435]             {
[10:32:38.435]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.435]                   0L) {
[10:32:38.435]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.435]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.435]                   base::options(opts)
[10:32:38.435]                 }
[10:32:38.435]                 {
[10:32:38.435]                   {
[10:32:38.435]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.435]                     NULL
[10:32:38.435]                   }
[10:32:38.435]                   options(future.plan = NULL)
[10:32:38.435]                   if (is.na(NA_character_)) 
[10:32:38.435]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.435]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.435]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.435]                     .init = FALSE)
[10:32:38.435]                 }
[10:32:38.435]             }
[10:32:38.435]         }
[10:32:38.435]     })
[10:32:38.435]     if (TRUE) {
[10:32:38.435]         base::sink(type = "output", split = FALSE)
[10:32:38.435]         if (TRUE) {
[10:32:38.435]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.435]         }
[10:32:38.435]         else {
[10:32:38.435]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.435]         }
[10:32:38.435]         base::close(...future.stdout)
[10:32:38.435]         ...future.stdout <- NULL
[10:32:38.435]     }
[10:32:38.435]     ...future.result$conditions <- ...future.conditions
[10:32:38.435]     ...future.result$finished <- base::Sys.time()
[10:32:38.435]     ...future.result
[10:32:38.435] }
[10:32:38.438] requestCore(): workers = 2
[10:32:38.439] MulticoreFuture started
[10:32:38.440] - Launch lazy future ... done
[10:32:38.440] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.441] plan(): Setting new future strategy stack:
[10:32:38.441] List of future strategies:
[10:32:38.441] 1. sequential:
[10:32:38.441]    - args: function (..., envir = parent.frame())
[10:32:38.441]    - tweaked: FALSE
[10:32:38.441]    - call: NULL
[10:32:38.442] plan(): nbrOfWorkers() = 1
[10:32:38.444] plan(): Setting new future strategy stack:
[10:32:38.444] List of future strategies:
[10:32:38.444] 1. multicore:
[10:32:38.444]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.444]    - tweaked: FALSE
[10:32:38.444]    - call: plan(strategy)
[10:32:38.448] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.449] result() for MulticoreFuture ...
[10:32:38.450] result() for MulticoreFuture ...
[10:32:38.450] result() for MulticoreFuture ... done
[10:32:38.450] result() for MulticoreFuture ... done
[10:32:38.450] result() for MulticoreFuture ...
[10:32:38.451] result() for MulticoreFuture ... done
[10:32:38.451] getGlobalsAndPackages() ...
[10:32:38.451] Searching for globals...
[10:32:38.452] - globals found: [1] ‘{’
[10:32:38.452] Searching for globals ... DONE
[10:32:38.452] Resolving globals: FALSE
[10:32:38.453] 
[10:32:38.453] 
[10:32:38.453] getGlobalsAndPackages() ... DONE
[10:32:38.453] run() for ‘Future’ ...
[10:32:38.453] - state: ‘created’
[10:32:38.454] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:32:38.460] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.460] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:32:38.461]   - Field: ‘label’
[10:32:38.461]   - Field: ‘local’
[10:32:38.461]   - Field: ‘owner’
[10:32:38.461]   - Field: ‘envir’
[10:32:38.461]   - Field: ‘workers’
[10:32:38.461]   - Field: ‘packages’
[10:32:38.462]   - Field: ‘gc’
[10:32:38.462]   - Field: ‘job’
[10:32:38.462]   - Field: ‘conditions’
[10:32:38.462]   - Field: ‘expr’
[10:32:38.462]   - Field: ‘uuid’
[10:32:38.462]   - Field: ‘seed’
[10:32:38.462]   - Field: ‘version’
[10:32:38.462]   - Field: ‘result’
[10:32:38.463]   - Field: ‘asynchronous’
[10:32:38.463]   - Field: ‘calls’
[10:32:38.463]   - Field: ‘globals’
[10:32:38.463]   - Field: ‘stdout’
[10:32:38.463]   - Field: ‘earlySignal’
[10:32:38.463]   - Field: ‘lazy’
[10:32:38.463]   - Field: ‘state’
[10:32:38.463] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:32:38.464] - Launch lazy future ...
[10:32:38.464] Packages needed by the future expression (n = 0): <none>
[10:32:38.464] Packages needed by future strategies (n = 0): <none>
[10:32:38.465] {
[10:32:38.465]     {
[10:32:38.465]         {
[10:32:38.465]             ...future.startTime <- base::Sys.time()
[10:32:38.465]             {
[10:32:38.465]                 {
[10:32:38.465]                   {
[10:32:38.465]                     {
[10:32:38.465]                       base::local({
[10:32:38.465]                         has_future <- base::requireNamespace("future", 
[10:32:38.465]                           quietly = TRUE)
[10:32:38.465]                         if (has_future) {
[10:32:38.465]                           ns <- base::getNamespace("future")
[10:32:38.465]                           version <- ns[[".package"]][["version"]]
[10:32:38.465]                           if (is.null(version)) 
[10:32:38.465]                             version <- utils::packageVersion("future")
[10:32:38.465]                         }
[10:32:38.465]                         else {
[10:32:38.465]                           version <- NULL
[10:32:38.465]                         }
[10:32:38.465]                         if (!has_future || version < "1.8.0") {
[10:32:38.465]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:38.465]                             "", base::R.version$version.string), 
[10:32:38.465]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:38.465]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:38.465]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:38.465]                               "release", "version")], collapse = " "), 
[10:32:38.465]                             hostname = base::Sys.info()[["nodename"]])
[10:32:38.465]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:38.465]                             info)
[10:32:38.465]                           info <- base::paste(info, collapse = "; ")
[10:32:38.465]                           if (!has_future) {
[10:32:38.465]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:38.465]                               info)
[10:32:38.465]                           }
[10:32:38.465]                           else {
[10:32:38.465]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:38.465]                               info, version)
[10:32:38.465]                           }
[10:32:38.465]                           base::stop(msg)
[10:32:38.465]                         }
[10:32:38.465]                       })
[10:32:38.465]                     }
[10:32:38.465]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:38.465]                     base::options(mc.cores = 1L)
[10:32:38.465]                   }
[10:32:38.465]                   ...future.strategy.old <- future::plan("list")
[10:32:38.465]                   options(future.plan = NULL)
[10:32:38.465]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.465]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:38.465]                 }
[10:32:38.465]                 ...future.workdir <- getwd()
[10:32:38.465]             }
[10:32:38.465]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:38.465]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:38.465]         }
[10:32:38.465]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:38.465]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:38.465]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:38.465]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:38.465]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:38.465]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:38.465]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:38.465]             base::names(...future.oldOptions))
[10:32:38.465]     }
[10:32:38.465]     if (FALSE) {
[10:32:38.465]     }
[10:32:38.465]     else {
[10:32:38.465]         if (TRUE) {
[10:32:38.465]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:38.465]                 open = "w")
[10:32:38.465]         }
[10:32:38.465]         else {
[10:32:38.465]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:38.465]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:38.465]         }
[10:32:38.465]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:38.465]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:38.465]             base::sink(type = "output", split = FALSE)
[10:32:38.465]             base::close(...future.stdout)
[10:32:38.465]         }, add = TRUE)
[10:32:38.465]     }
[10:32:38.465]     ...future.frame <- base::sys.nframe()
[10:32:38.465]     ...future.conditions <- base::list()
[10:32:38.465]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:38.465]     if (FALSE) {
[10:32:38.465]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:38.465]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:38.465]     }
[10:32:38.465]     ...future.result <- base::tryCatch({
[10:32:38.465]         base::withCallingHandlers({
[10:32:38.465]             ...future.value <- base::withVisible(base::local({
[10:32:38.465]                 withCallingHandlers({
[10:32:38.465]                   {
[10:32:38.465]                     42
[10:32:38.465]                   }
[10:32:38.465]                 }, immediateCondition = function(cond) {
[10:32:38.465]                   save_rds <- function (object, pathname, ...) 
[10:32:38.465]                   {
[10:32:38.465]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:32:38.465]                     if (file_test("-f", pathname_tmp)) {
[10:32:38.465]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.465]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:32:38.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.465]                         fi_tmp[["mtime"]])
[10:32:38.465]                     }
[10:32:38.465]                     tryCatch({
[10:32:38.465]                       saveRDS(object, file = pathname_tmp, ...)
[10:32:38.465]                     }, error = function(ex) {
[10:32:38.465]                       msg <- conditionMessage(ex)
[10:32:38.465]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.465]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:32:38.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.465]                         fi_tmp[["mtime"]], msg)
[10:32:38.465]                       ex$message <- msg
[10:32:38.465]                       stop(ex)
[10:32:38.465]                     })
[10:32:38.465]                     stopifnot(file_test("-f", pathname_tmp))
[10:32:38.465]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:32:38.465]                     if (!res || file_test("-f", pathname_tmp)) {
[10:32:38.465]                       fi_tmp <- file.info(pathname_tmp)
[10:32:38.465]                       fi <- file.info(pathname)
[10:32:38.465]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:32:38.465]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:32:38.465]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:32:38.465]                         fi[["size"]], fi[["mtime"]])
[10:32:38.465]                       stop(msg)
[10:32:38.465]                     }
[10:32:38.465]                     invisible(pathname)
[10:32:38.465]                   }
[10:32:38.465]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:32:38.465]                     rootPath = tempdir()) 
[10:32:38.465]                   {
[10:32:38.465]                     obj <- list(time = Sys.time(), condition = cond)
[10:32:38.465]                     file <- tempfile(pattern = class(cond)[1], 
[10:32:38.465]                       tmpdir = path, fileext = ".rds")
[10:32:38.465]                     save_rds(obj, file)
[10:32:38.465]                   }
[10:32:38.465]                   saveImmediateCondition(cond, path = "/tmp/Rtmp3XRr04/.future/immediateConditions")
[10:32:38.465]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.465]                   {
[10:32:38.465]                     inherits <- base::inherits
[10:32:38.465]                     invokeRestart <- base::invokeRestart
[10:32:38.465]                     is.null <- base::is.null
[10:32:38.465]                     muffled <- FALSE
[10:32:38.465]                     if (inherits(cond, "message")) {
[10:32:38.465]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:38.465]                       if (muffled) 
[10:32:38.465]                         invokeRestart("muffleMessage")
[10:32:38.465]                     }
[10:32:38.465]                     else if (inherits(cond, "warning")) {
[10:32:38.465]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:38.465]                       if (muffled) 
[10:32:38.465]                         invokeRestart("muffleWarning")
[10:32:38.465]                     }
[10:32:38.465]                     else if (inherits(cond, "condition")) {
[10:32:38.465]                       if (!is.null(pattern)) {
[10:32:38.465]                         computeRestarts <- base::computeRestarts
[10:32:38.465]                         grepl <- base::grepl
[10:32:38.465]                         restarts <- computeRestarts(cond)
[10:32:38.465]                         for (restart in restarts) {
[10:32:38.465]                           name <- restart$name
[10:32:38.465]                           if (is.null(name)) 
[10:32:38.465]                             next
[10:32:38.465]                           if (!grepl(pattern, name)) 
[10:32:38.465]                             next
[10:32:38.465]                           invokeRestart(restart)
[10:32:38.465]                           muffled <- TRUE
[10:32:38.465]                           break
[10:32:38.465]                         }
[10:32:38.465]                       }
[10:32:38.465]                     }
[10:32:38.465]                     invisible(muffled)
[10:32:38.465]                   }
[10:32:38.465]                   muffleCondition(cond)
[10:32:38.465]                 })
[10:32:38.465]             }))
[10:32:38.465]             future::FutureResult(value = ...future.value$value, 
[10:32:38.465]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.465]                   ...future.rng), globalenv = if (FALSE) 
[10:32:38.465]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:38.465]                     ...future.globalenv.names))
[10:32:38.465]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:38.465]         }, condition = base::local({
[10:32:38.465]             c <- base::c
[10:32:38.465]             inherits <- base::inherits
[10:32:38.465]             invokeRestart <- base::invokeRestart
[10:32:38.465]             length <- base::length
[10:32:38.465]             list <- base::list
[10:32:38.465]             seq.int <- base::seq.int
[10:32:38.465]             signalCondition <- base::signalCondition
[10:32:38.465]             sys.calls <- base::sys.calls
[10:32:38.465]             `[[` <- base::`[[`
[10:32:38.465]             `+` <- base::`+`
[10:32:38.465]             `<<-` <- base::`<<-`
[10:32:38.465]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:38.465]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:38.465]                   3L)]
[10:32:38.465]             }
[10:32:38.465]             function(cond) {
[10:32:38.465]                 is_error <- inherits(cond, "error")
[10:32:38.465]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:38.465]                   NULL)
[10:32:38.465]                 if (is_error) {
[10:32:38.465]                   sessionInformation <- function() {
[10:32:38.465]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:38.465]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:38.465]                       search = base::search(), system = base::Sys.info())
[10:32:38.465]                   }
[10:32:38.465]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.465]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:38.465]                     cond$call), session = sessionInformation(), 
[10:32:38.465]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:38.465]                   signalCondition(cond)
[10:32:38.465]                 }
[10:32:38.465]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:38.465]                 "immediateCondition"))) {
[10:32:38.465]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:38.465]                   ...future.conditions[[length(...future.conditions) + 
[10:32:38.465]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:38.465]                   if (TRUE && !signal) {
[10:32:38.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.465]                     {
[10:32:38.465]                       inherits <- base::inherits
[10:32:38.465]                       invokeRestart <- base::invokeRestart
[10:32:38.465]                       is.null <- base::is.null
[10:32:38.465]                       muffled <- FALSE
[10:32:38.465]                       if (inherits(cond, "message")) {
[10:32:38.465]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.465]                         if (muffled) 
[10:32:38.465]                           invokeRestart("muffleMessage")
[10:32:38.465]                       }
[10:32:38.465]                       else if (inherits(cond, "warning")) {
[10:32:38.465]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.465]                         if (muffled) 
[10:32:38.465]                           invokeRestart("muffleWarning")
[10:32:38.465]                       }
[10:32:38.465]                       else if (inherits(cond, "condition")) {
[10:32:38.465]                         if (!is.null(pattern)) {
[10:32:38.465]                           computeRestarts <- base::computeRestarts
[10:32:38.465]                           grepl <- base::grepl
[10:32:38.465]                           restarts <- computeRestarts(cond)
[10:32:38.465]                           for (restart in restarts) {
[10:32:38.465]                             name <- restart$name
[10:32:38.465]                             if (is.null(name)) 
[10:32:38.465]                               next
[10:32:38.465]                             if (!grepl(pattern, name)) 
[10:32:38.465]                               next
[10:32:38.465]                             invokeRestart(restart)
[10:32:38.465]                             muffled <- TRUE
[10:32:38.465]                             break
[10:32:38.465]                           }
[10:32:38.465]                         }
[10:32:38.465]                       }
[10:32:38.465]                       invisible(muffled)
[10:32:38.465]                     }
[10:32:38.465]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.465]                   }
[10:32:38.465]                 }
[10:32:38.465]                 else {
[10:32:38.465]                   if (TRUE) {
[10:32:38.465]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:38.465]                     {
[10:32:38.465]                       inherits <- base::inherits
[10:32:38.465]                       invokeRestart <- base::invokeRestart
[10:32:38.465]                       is.null <- base::is.null
[10:32:38.465]                       muffled <- FALSE
[10:32:38.465]                       if (inherits(cond, "message")) {
[10:32:38.465]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:38.465]                         if (muffled) 
[10:32:38.465]                           invokeRestart("muffleMessage")
[10:32:38.465]                       }
[10:32:38.465]                       else if (inherits(cond, "warning")) {
[10:32:38.465]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:38.465]                         if (muffled) 
[10:32:38.465]                           invokeRestart("muffleWarning")
[10:32:38.465]                       }
[10:32:38.465]                       else if (inherits(cond, "condition")) {
[10:32:38.465]                         if (!is.null(pattern)) {
[10:32:38.465]                           computeRestarts <- base::computeRestarts
[10:32:38.465]                           grepl <- base::grepl
[10:32:38.465]                           restarts <- computeRestarts(cond)
[10:32:38.465]                           for (restart in restarts) {
[10:32:38.465]                             name <- restart$name
[10:32:38.465]                             if (is.null(name)) 
[10:32:38.465]                               next
[10:32:38.465]                             if (!grepl(pattern, name)) 
[10:32:38.465]                               next
[10:32:38.465]                             invokeRestart(restart)
[10:32:38.465]                             muffled <- TRUE
[10:32:38.465]                             break
[10:32:38.465]                           }
[10:32:38.465]                         }
[10:32:38.465]                       }
[10:32:38.465]                       invisible(muffled)
[10:32:38.465]                     }
[10:32:38.465]                     muffleCondition(cond, pattern = "^muffle")
[10:32:38.465]                   }
[10:32:38.465]                 }
[10:32:38.465]             }
[10:32:38.465]         }))
[10:32:38.465]     }, error = function(ex) {
[10:32:38.465]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:38.465]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:38.465]                 ...future.rng), started = ...future.startTime, 
[10:32:38.465]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:38.465]             version = "1.8"), class = "FutureResult")
[10:32:38.465]     }, finally = {
[10:32:38.465]         if (!identical(...future.workdir, getwd())) 
[10:32:38.465]             setwd(...future.workdir)
[10:32:38.465]         {
[10:32:38.465]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:38.465]                 ...future.oldOptions$nwarnings <- NULL
[10:32:38.465]             }
[10:32:38.465]             base::options(...future.oldOptions)
[10:32:38.465]             if (.Platform$OS.type == "windows") {
[10:32:38.465]                 old_names <- names(...future.oldEnvVars)
[10:32:38.465]                 envs <- base::Sys.getenv()
[10:32:38.465]                 names <- names(envs)
[10:32:38.465]                 common <- intersect(names, old_names)
[10:32:38.465]                 added <- setdiff(names, old_names)
[10:32:38.465]                 removed <- setdiff(old_names, names)
[10:32:38.465]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:38.465]                   envs[common]]
[10:32:38.465]                 NAMES <- toupper(changed)
[10:32:38.465]                 args <- list()
[10:32:38.465]                 for (kk in seq_along(NAMES)) {
[10:32:38.465]                   name <- changed[[kk]]
[10:32:38.465]                   NAME <- NAMES[[kk]]
[10:32:38.465]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.465]                     next
[10:32:38.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.465]                 }
[10:32:38.465]                 NAMES <- toupper(added)
[10:32:38.465]                 for (kk in seq_along(NAMES)) {
[10:32:38.465]                   name <- added[[kk]]
[10:32:38.465]                   NAME <- NAMES[[kk]]
[10:32:38.465]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.465]                     next
[10:32:38.465]                   args[[name]] <- ""
[10:32:38.465]                 }
[10:32:38.465]                 NAMES <- toupper(removed)
[10:32:38.465]                 for (kk in seq_along(NAMES)) {
[10:32:38.465]                   name <- removed[[kk]]
[10:32:38.465]                   NAME <- NAMES[[kk]]
[10:32:38.465]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:38.465]                     next
[10:32:38.465]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:38.465]                 }
[10:32:38.465]                 if (length(args) > 0) 
[10:32:38.465]                   base::do.call(base::Sys.setenv, args = args)
[10:32:38.465]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:38.465]             }
[10:32:38.465]             else {
[10:32:38.465]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:38.465]             }
[10:32:38.465]             {
[10:32:38.465]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:38.465]                   0L) {
[10:32:38.465]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:38.465]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:38.465]                   base::options(opts)
[10:32:38.465]                 }
[10:32:38.465]                 {
[10:32:38.465]                   {
[10:32:38.465]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:38.465]                     NULL
[10:32:38.465]                   }
[10:32:38.465]                   options(future.plan = NULL)
[10:32:38.465]                   if (is.na(NA_character_)) 
[10:32:38.465]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:38.465]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:38.465]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:38.465]                     .init = FALSE)
[10:32:38.465]                 }
[10:32:38.465]             }
[10:32:38.465]         }
[10:32:38.465]     })
[10:32:38.465]     if (TRUE) {
[10:32:38.465]         base::sink(type = "output", split = FALSE)
[10:32:38.465]         if (TRUE) {
[10:32:38.465]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:38.465]         }
[10:32:38.465]         else {
[10:32:38.465]             ...future.result["stdout"] <- base::list(NULL)
[10:32:38.465]         }
[10:32:38.465]         base::close(...future.stdout)
[10:32:38.465]         ...future.stdout <- NULL
[10:32:38.465]     }
[10:32:38.465]     ...future.result$conditions <- ...future.conditions
[10:32:38.465]     ...future.result$finished <- base::Sys.time()
[10:32:38.465]     ...future.result
[10:32:38.465] }
[10:32:38.467] requestCore(): workers = 2
[10:32:38.469] MulticoreFuture started
[10:32:38.469] - Launch lazy future ... done
[10:32:38.469] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[10:32:38.470] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:38.470] List of future strategies:
[10:32:38.470] 1. sequential:
[10:32:38.470]    - args: function (..., envir = parent.frame())
[10:32:38.470]    - tweaked: FALSE
[10:32:38.470]    - call: NULL
[10:32:38.471] plan(): nbrOfWorkers() = 1
[10:32:38.473] plan(): Setting new future strategy stack:
[10:32:38.473] List of future strategies:
[10:32:38.473] 1. multicore:
[10:32:38.473]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:32:38.473]    - tweaked: FALSE
[10:32:38.473]    - call: plan(strategy)
[10:32:38.478] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:38.478] result() for MulticoreFuture ...
[10:32:38.479] result() for MulticoreFuture ...
[10:32:38.480] result() for MulticoreFuture ... done
[10:32:38.480] result() for MulticoreFuture ... done
[10:32:38.480] result() for MulticoreFuture ...
[10:32:38.480] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[10:32:38.481] plan(): Setting new future strategy stack:
[10:32:38.481] List of future strategies:
[10:32:38.481] 1. multisession:
[10:32:38.481]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:38.481]    - tweaked: FALSE
[10:32:38.481]    - call: plan(strategy)
[10:32:38.481] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:32:38.481] multisession:
[10:32:38.481] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:32:38.481] - tweaked: FALSE
[10:32:38.481] - call: plan(strategy)
[10:32:38.488] getGlobalsAndPackages() ...
[10:32:38.488] Not searching for globals
[10:32:38.488] - globals: [0] <none>
[10:32:38.488] getGlobalsAndPackages() ... DONE
[10:32:38.489] [local output] makeClusterPSOCK() ...
[10:32:38.529] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:32:38.531] [local output] Base port: 11695
[10:32:38.531] [local output] Getting setup options for 2 cluster nodes ...
[10:32:38.531] [local output]  - Node 1 of 2 ...
[10:32:38.531] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:38.532] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3XRr04/worker.rank=1.parallelly.parent=80441.13a39207842fc.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp3XRr04/worker.rank=1.parallelly.parent=80441.13a39207842fc.pid")'’
[10:32:38.721] - Possible to infer worker's PID: TRUE
[10:32:38.721] [local output] Rscript port: 11695

[10:32:38.722] [local output]  - Node 2 of 2 ...
[10:32:38.722] [local output] localMachine=TRUE => revtunnel=FALSE

[10:32:38.723] [local output] Rscript port: 11695

[10:32:38.723] [local output] Getting setup options for 2 cluster nodes ... done
[10:32:38.723] [local output]  - Parallel setup requested for some PSOCK nodes
[10:32:38.724] [local output] Setting up PSOCK nodes in parallel
[10:32:38.724] List of 36
[10:32:38.724]  $ worker          : chr "localhost"
[10:32:38.724]   ..- attr(*, "localhost")= logi TRUE
[10:32:38.724]  $ master          : chr "localhost"
[10:32:38.724]  $ port            : int 11695
[10:32:38.724]  $ connectTimeout  : num 120
[10:32:38.724]  $ timeout         : num 2592000
[10:32:38.724]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:32:38.724]  $ homogeneous     : logi TRUE
[10:32:38.724]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:32:38.724]  $ rscript_envs    : NULL
[10:32:38.724]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:38.724]  $ rscript_startup : NULL
[10:32:38.724]  $ rscript_sh      : chr "sh"
[10:32:38.724]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:38.724]  $ methods         : logi TRUE
[10:32:38.724]  $ socketOptions   : chr "no-delay"
[10:32:38.724]  $ useXDR          : logi FALSE
[10:32:38.724]  $ outfile         : chr "/dev/null"
[10:32:38.724]  $ renice          : int NA
[10:32:38.724]  $ rshcmd          : NULL
[10:32:38.724]  $ user            : chr(0) 
[10:32:38.724]  $ revtunnel       : logi FALSE
[10:32:38.724]  $ rshlogfile      : NULL
[10:32:38.724]  $ rshopts         : chr(0) 
[10:32:38.724]  $ rank            : int 1
[10:32:38.724]  $ manual          : logi FALSE
[10:32:38.724]  $ dryrun          : logi FALSE
[10:32:38.724]  $ quiet           : logi FALSE
[10:32:38.724]  $ setup_strategy  : chr "parallel"
[10:32:38.724]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:38.724]  $ pidfile         : chr "/tmp/Rtmp3XRr04/worker.rank=1.parallelly.parent=80441.13a39207842fc.pid"
[10:32:38.724]  $ rshcmd_label    : NULL
[10:32:38.724]  $ rsh_call        : NULL
[10:32:38.724]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:32:38.724]  $ localMachine    : logi TRUE
[10:32:38.724]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:32:38.724]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:32:38.724]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:32:38.724]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:32:38.724]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:32:38.724]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:32:38.724]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:32:38.724]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:32:38.724]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:32:38.724]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:32:38.724]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:32:38.724]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:32:38.724]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:32:38.724]  $ arguments       :List of 28
[10:32:38.724]   ..$ worker          : chr "localhost"
[10:32:38.724]   ..$ master          : NULL
[10:32:38.724]   ..$ port            : int 11695
[10:32:38.724]   ..$ connectTimeout  : num 120
[10:32:38.724]   ..$ timeout         : num 2592000
[10:32:38.724]   ..$ rscript         : NULL
[10:32:38.724]   ..$ homogeneous     : NULL
[10:32:38.724]   ..$ rscript_args    : NULL
[10:32:38.724]   ..$ rscript_envs    : NULL
[10:32:38.724]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:32:38.724]   ..$ rscript_startup : NULL
[10:32:38.724]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:32:38.724]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:32:38.724]   ..$ methods         : logi TRUE
[10:32:38.724]   ..$ socketOptions   : chr "no-delay"
[10:32:38.724]   ..$ useXDR          : logi FALSE
[10:32:38.724]   ..$ outfile         : chr "/dev/null"
[10:32:38.724]   ..$ renice          : int NA
[10:32:38.724]   ..$ rshcmd          : NULL
[10:32:38.724]   ..$ user            : NULL
[10:32:38.724]   ..$ revtunnel       : logi NA
[10:32:38.724]   ..$ rshlogfile      : NULL
[10:32:38.724]   ..$ rshopts         : NULL
[10:32:38.724]   ..$ rank            : int 1
[10:32:38.724]   ..$ manual          : logi FALSE
[10:32:38.724]   ..$ dryrun          : logi FALSE
[10:32:38.724]   ..$ quiet           : logi FALSE
[10:32:38.724]   ..$ setup_strategy  : chr "parallel"
[10:32:38.724]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:32:38.743] [local output] System call to launch all workers:
[10:32:38.743] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp3XRr04/worker.rank=1.parallelly.parent=80441.13a39207842fc.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11695 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:32:38.743] [local output] Starting PSOCK main server
[10:32:38.749] [local output] Workers launched
[10:32:38.749] [local output] Waiting for workers to connect back
[10:32:38.749]  - [local output] 0 workers out of 2 ready
[10:32:39.016]  - [local output] 0 workers out of 2 ready
[10:32:39.017]  - [local output] 1 workers out of 2 ready
[10:32:39.017]  - [local output] 1 workers out of 2 ready
[10:32:39.018]  - [local output] 2 workers out of 2 ready
[10:32:39.018] [local output] Launching of workers completed
[10:32:39.018] [local output] Collecting session information from workers
[10:32:39.019] [local output]  - Worker #1 of 2
[10:32:39.020] [local output]  - Worker #2 of 2
[10:32:39.020] [local output] makeClusterPSOCK() ... done
[10:32:39.031] Packages needed by the future expression (n = 0): <none>
[10:32:39.032] Packages needed by future strategies (n = 0): <none>
[10:32:39.032] {
[10:32:39.032]     {
[10:32:39.032]         {
[10:32:39.032]             ...future.startTime <- base::Sys.time()
[10:32:39.032]             {
[10:32:39.032]                 {
[10:32:39.032]                   {
[10:32:39.032]                     {
[10:32:39.032]                       base::local({
[10:32:39.032]                         has_future <- base::requireNamespace("future", 
[10:32:39.032]                           quietly = TRUE)
[10:32:39.032]                         if (has_future) {
[10:32:39.032]                           ns <- base::getNamespace("future")
[10:32:39.032]                           version <- ns[[".package"]][["version"]]
[10:32:39.032]                           if (is.null(version)) 
[10:32:39.032]                             version <- utils::packageVersion("future")
[10:32:39.032]                         }
[10:32:39.032]                         else {
[10:32:39.032]                           version <- NULL
[10:32:39.032]                         }
[10:32:39.032]                         if (!has_future || version < "1.8.0") {
[10:32:39.032]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.032]                             "", base::R.version$version.string), 
[10:32:39.032]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.032]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.032]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.032]                               "release", "version")], collapse = " "), 
[10:32:39.032]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.032]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.032]                             info)
[10:32:39.032]                           info <- base::paste(info, collapse = "; ")
[10:32:39.032]                           if (!has_future) {
[10:32:39.032]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.032]                               info)
[10:32:39.032]                           }
[10:32:39.032]                           else {
[10:32:39.032]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.032]                               info, version)
[10:32:39.032]                           }
[10:32:39.032]                           base::stop(msg)
[10:32:39.032]                         }
[10:32:39.032]                       })
[10:32:39.032]                     }
[10:32:39.032]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.032]                     base::options(mc.cores = 1L)
[10:32:39.032]                   }
[10:32:39.032]                   ...future.strategy.old <- future::plan("list")
[10:32:39.032]                   options(future.plan = NULL)
[10:32:39.032]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.032]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.032]                 }
[10:32:39.032]                 ...future.workdir <- getwd()
[10:32:39.032]             }
[10:32:39.032]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.032]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.032]         }
[10:32:39.032]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.032]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.032]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.032]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.032]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.032]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.032]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.032]             base::names(...future.oldOptions))
[10:32:39.032]     }
[10:32:39.032]     if (FALSE) {
[10:32:39.032]     }
[10:32:39.032]     else {
[10:32:39.032]         if (TRUE) {
[10:32:39.032]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.032]                 open = "w")
[10:32:39.032]         }
[10:32:39.032]         else {
[10:32:39.032]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.032]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.032]         }
[10:32:39.032]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.032]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.032]             base::sink(type = "output", split = FALSE)
[10:32:39.032]             base::close(...future.stdout)
[10:32:39.032]         }, add = TRUE)
[10:32:39.032]     }
[10:32:39.032]     ...future.frame <- base::sys.nframe()
[10:32:39.032]     ...future.conditions <- base::list()
[10:32:39.032]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.032]     if (FALSE) {
[10:32:39.032]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.032]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.032]     }
[10:32:39.032]     ...future.result <- base::tryCatch({
[10:32:39.032]         base::withCallingHandlers({
[10:32:39.032]             ...future.value <- base::withVisible(base::local({
[10:32:39.032]                 ...future.makeSendCondition <- base::local({
[10:32:39.032]                   sendCondition <- NULL
[10:32:39.032]                   function(frame = 1L) {
[10:32:39.032]                     if (is.function(sendCondition)) 
[10:32:39.032]                       return(sendCondition)
[10:32:39.032]                     ns <- getNamespace("parallel")
[10:32:39.032]                     if (exists("sendData", mode = "function", 
[10:32:39.032]                       envir = ns)) {
[10:32:39.032]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.032]                         envir = ns)
[10:32:39.032]                       envir <- sys.frame(frame)
[10:32:39.032]                       master <- NULL
[10:32:39.032]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.032]                         !identical(envir, emptyenv())) {
[10:32:39.032]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.032]                           inherits = FALSE)) {
[10:32:39.032]                           master <- get("master", mode = "list", 
[10:32:39.032]                             envir = envir, inherits = FALSE)
[10:32:39.032]                           if (inherits(master, c("SOCKnode", 
[10:32:39.032]                             "SOCK0node"))) {
[10:32:39.032]                             sendCondition <<- function(cond) {
[10:32:39.032]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.032]                                 success = TRUE)
[10:32:39.032]                               parallel_sendData(master, data)
[10:32:39.032]                             }
[10:32:39.032]                             return(sendCondition)
[10:32:39.032]                           }
[10:32:39.032]                         }
[10:32:39.032]                         frame <- frame + 1L
[10:32:39.032]                         envir <- sys.frame(frame)
[10:32:39.032]                       }
[10:32:39.032]                     }
[10:32:39.032]                     sendCondition <<- function(cond) NULL
[10:32:39.032]                   }
[10:32:39.032]                 })
[10:32:39.032]                 withCallingHandlers({
[10:32:39.032]                   NA
[10:32:39.032]                 }, immediateCondition = function(cond) {
[10:32:39.032]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.032]                   sendCondition(cond)
[10:32:39.032]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.032]                   {
[10:32:39.032]                     inherits <- base::inherits
[10:32:39.032]                     invokeRestart <- base::invokeRestart
[10:32:39.032]                     is.null <- base::is.null
[10:32:39.032]                     muffled <- FALSE
[10:32:39.032]                     if (inherits(cond, "message")) {
[10:32:39.032]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.032]                       if (muffled) 
[10:32:39.032]                         invokeRestart("muffleMessage")
[10:32:39.032]                     }
[10:32:39.032]                     else if (inherits(cond, "warning")) {
[10:32:39.032]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.032]                       if (muffled) 
[10:32:39.032]                         invokeRestart("muffleWarning")
[10:32:39.032]                     }
[10:32:39.032]                     else if (inherits(cond, "condition")) {
[10:32:39.032]                       if (!is.null(pattern)) {
[10:32:39.032]                         computeRestarts <- base::computeRestarts
[10:32:39.032]                         grepl <- base::grepl
[10:32:39.032]                         restarts <- computeRestarts(cond)
[10:32:39.032]                         for (restart in restarts) {
[10:32:39.032]                           name <- restart$name
[10:32:39.032]                           if (is.null(name)) 
[10:32:39.032]                             next
[10:32:39.032]                           if (!grepl(pattern, name)) 
[10:32:39.032]                             next
[10:32:39.032]                           invokeRestart(restart)
[10:32:39.032]                           muffled <- TRUE
[10:32:39.032]                           break
[10:32:39.032]                         }
[10:32:39.032]                       }
[10:32:39.032]                     }
[10:32:39.032]                     invisible(muffled)
[10:32:39.032]                   }
[10:32:39.032]                   muffleCondition(cond)
[10:32:39.032]                 })
[10:32:39.032]             }))
[10:32:39.032]             future::FutureResult(value = ...future.value$value, 
[10:32:39.032]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.032]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.032]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.032]                     ...future.globalenv.names))
[10:32:39.032]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.032]         }, condition = base::local({
[10:32:39.032]             c <- base::c
[10:32:39.032]             inherits <- base::inherits
[10:32:39.032]             invokeRestart <- base::invokeRestart
[10:32:39.032]             length <- base::length
[10:32:39.032]             list <- base::list
[10:32:39.032]             seq.int <- base::seq.int
[10:32:39.032]             signalCondition <- base::signalCondition
[10:32:39.032]             sys.calls <- base::sys.calls
[10:32:39.032]             `[[` <- base::`[[`
[10:32:39.032]             `+` <- base::`+`
[10:32:39.032]             `<<-` <- base::`<<-`
[10:32:39.032]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.032]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.032]                   3L)]
[10:32:39.032]             }
[10:32:39.032]             function(cond) {
[10:32:39.032]                 is_error <- inherits(cond, "error")
[10:32:39.032]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.032]                   NULL)
[10:32:39.032]                 if (is_error) {
[10:32:39.032]                   sessionInformation <- function() {
[10:32:39.032]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.032]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.032]                       search = base::search(), system = base::Sys.info())
[10:32:39.032]                   }
[10:32:39.032]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.032]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.032]                     cond$call), session = sessionInformation(), 
[10:32:39.032]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.032]                   signalCondition(cond)
[10:32:39.032]                 }
[10:32:39.032]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.032]                 "immediateCondition"))) {
[10:32:39.032]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.032]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.032]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.032]                   if (TRUE && !signal) {
[10:32:39.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.032]                     {
[10:32:39.032]                       inherits <- base::inherits
[10:32:39.032]                       invokeRestart <- base::invokeRestart
[10:32:39.032]                       is.null <- base::is.null
[10:32:39.032]                       muffled <- FALSE
[10:32:39.032]                       if (inherits(cond, "message")) {
[10:32:39.032]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.032]                         if (muffled) 
[10:32:39.032]                           invokeRestart("muffleMessage")
[10:32:39.032]                       }
[10:32:39.032]                       else if (inherits(cond, "warning")) {
[10:32:39.032]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.032]                         if (muffled) 
[10:32:39.032]                           invokeRestart("muffleWarning")
[10:32:39.032]                       }
[10:32:39.032]                       else if (inherits(cond, "condition")) {
[10:32:39.032]                         if (!is.null(pattern)) {
[10:32:39.032]                           computeRestarts <- base::computeRestarts
[10:32:39.032]                           grepl <- base::grepl
[10:32:39.032]                           restarts <- computeRestarts(cond)
[10:32:39.032]                           for (restart in restarts) {
[10:32:39.032]                             name <- restart$name
[10:32:39.032]                             if (is.null(name)) 
[10:32:39.032]                               next
[10:32:39.032]                             if (!grepl(pattern, name)) 
[10:32:39.032]                               next
[10:32:39.032]                             invokeRestart(restart)
[10:32:39.032]                             muffled <- TRUE
[10:32:39.032]                             break
[10:32:39.032]                           }
[10:32:39.032]                         }
[10:32:39.032]                       }
[10:32:39.032]                       invisible(muffled)
[10:32:39.032]                     }
[10:32:39.032]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.032]                   }
[10:32:39.032]                 }
[10:32:39.032]                 else {
[10:32:39.032]                   if (TRUE) {
[10:32:39.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.032]                     {
[10:32:39.032]                       inherits <- base::inherits
[10:32:39.032]                       invokeRestart <- base::invokeRestart
[10:32:39.032]                       is.null <- base::is.null
[10:32:39.032]                       muffled <- FALSE
[10:32:39.032]                       if (inherits(cond, "message")) {
[10:32:39.032]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.032]                         if (muffled) 
[10:32:39.032]                           invokeRestart("muffleMessage")
[10:32:39.032]                       }
[10:32:39.032]                       else if (inherits(cond, "warning")) {
[10:32:39.032]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.032]                         if (muffled) 
[10:32:39.032]                           invokeRestart("muffleWarning")
[10:32:39.032]                       }
[10:32:39.032]                       else if (inherits(cond, "condition")) {
[10:32:39.032]                         if (!is.null(pattern)) {
[10:32:39.032]                           computeRestarts <- base::computeRestarts
[10:32:39.032]                           grepl <- base::grepl
[10:32:39.032]                           restarts <- computeRestarts(cond)
[10:32:39.032]                           for (restart in restarts) {
[10:32:39.032]                             name <- restart$name
[10:32:39.032]                             if (is.null(name)) 
[10:32:39.032]                               next
[10:32:39.032]                             if (!grepl(pattern, name)) 
[10:32:39.032]                               next
[10:32:39.032]                             invokeRestart(restart)
[10:32:39.032]                             muffled <- TRUE
[10:32:39.032]                             break
[10:32:39.032]                           }
[10:32:39.032]                         }
[10:32:39.032]                       }
[10:32:39.032]                       invisible(muffled)
[10:32:39.032]                     }
[10:32:39.032]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.032]                   }
[10:32:39.032]                 }
[10:32:39.032]             }
[10:32:39.032]         }))
[10:32:39.032]     }, error = function(ex) {
[10:32:39.032]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.032]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.032]                 ...future.rng), started = ...future.startTime, 
[10:32:39.032]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.032]             version = "1.8"), class = "FutureResult")
[10:32:39.032]     }, finally = {
[10:32:39.032]         if (!identical(...future.workdir, getwd())) 
[10:32:39.032]             setwd(...future.workdir)
[10:32:39.032]         {
[10:32:39.032]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.032]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.032]             }
[10:32:39.032]             base::options(...future.oldOptions)
[10:32:39.032]             if (.Platform$OS.type == "windows") {
[10:32:39.032]                 old_names <- names(...future.oldEnvVars)
[10:32:39.032]                 envs <- base::Sys.getenv()
[10:32:39.032]                 names <- names(envs)
[10:32:39.032]                 common <- intersect(names, old_names)
[10:32:39.032]                 added <- setdiff(names, old_names)
[10:32:39.032]                 removed <- setdiff(old_names, names)
[10:32:39.032]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.032]                   envs[common]]
[10:32:39.032]                 NAMES <- toupper(changed)
[10:32:39.032]                 args <- list()
[10:32:39.032]                 for (kk in seq_along(NAMES)) {
[10:32:39.032]                   name <- changed[[kk]]
[10:32:39.032]                   NAME <- NAMES[[kk]]
[10:32:39.032]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.032]                     next
[10:32:39.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.032]                 }
[10:32:39.032]                 NAMES <- toupper(added)
[10:32:39.032]                 for (kk in seq_along(NAMES)) {
[10:32:39.032]                   name <- added[[kk]]
[10:32:39.032]                   NAME <- NAMES[[kk]]
[10:32:39.032]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.032]                     next
[10:32:39.032]                   args[[name]] <- ""
[10:32:39.032]                 }
[10:32:39.032]                 NAMES <- toupper(removed)
[10:32:39.032]                 for (kk in seq_along(NAMES)) {
[10:32:39.032]                   name <- removed[[kk]]
[10:32:39.032]                   NAME <- NAMES[[kk]]
[10:32:39.032]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.032]                     next
[10:32:39.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.032]                 }
[10:32:39.032]                 if (length(args) > 0) 
[10:32:39.032]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.032]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.032]             }
[10:32:39.032]             else {
[10:32:39.032]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.032]             }
[10:32:39.032]             {
[10:32:39.032]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.032]                   0L) {
[10:32:39.032]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.032]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.032]                   base::options(opts)
[10:32:39.032]                 }
[10:32:39.032]                 {
[10:32:39.032]                   {
[10:32:39.032]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.032]                     NULL
[10:32:39.032]                   }
[10:32:39.032]                   options(future.plan = NULL)
[10:32:39.032]                   if (is.na(NA_character_)) 
[10:32:39.032]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.032]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.032]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.032]                     .init = FALSE)
[10:32:39.032]                 }
[10:32:39.032]             }
[10:32:39.032]         }
[10:32:39.032]     })
[10:32:39.032]     if (TRUE) {
[10:32:39.032]         base::sink(type = "output", split = FALSE)
[10:32:39.032]         if (TRUE) {
[10:32:39.032]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.032]         }
[10:32:39.032]         else {
[10:32:39.032]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.032]         }
[10:32:39.032]         base::close(...future.stdout)
[10:32:39.032]         ...future.stdout <- NULL
[10:32:39.032]     }
[10:32:39.032]     ...future.result$conditions <- ...future.conditions
[10:32:39.032]     ...future.result$finished <- base::Sys.time()
[10:32:39.032]     ...future.result
[10:32:39.032] }
[10:32:39.084] MultisessionFuture started
[10:32:39.085] result() for ClusterFuture ...
[10:32:39.085] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.085] - Validating connection of MultisessionFuture
[10:32:39.117] - received message: FutureResult
[10:32:39.118] - Received FutureResult
[10:32:39.118] - Erased future from FutureRegistry
[10:32:39.118] result() for ClusterFuture ...
[10:32:39.118] - result already collected: FutureResult
[10:32:39.118] result() for ClusterFuture ... done
[10:32:39.118] receiveMessageFromWorker() for ClusterFuture ... done
[10:32:39.118] result() for ClusterFuture ... done
[10:32:39.118] result() for ClusterFuture ...
[10:32:39.118] - result already collected: FutureResult
[10:32:39.119] result() for ClusterFuture ... done
[10:32:39.119] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:32:39.123] plan(): nbrOfWorkers() = 2
[10:32:39.126] getGlobalsAndPackages() ...
[10:32:39.126] 
[10:32:39.126] - globals: [0] <none>
[10:32:39.127] getGlobalsAndPackages() ... DONE
[10:32:39.138] Packages needed by the future expression (n = 0): <none>
[10:32:39.138] Packages needed by future strategies (n = 0): <none>
[10:32:39.138] {
[10:32:39.138]     {
[10:32:39.138]         {
[10:32:39.138]             ...future.startTime <- base::Sys.time()
[10:32:39.138]             {
[10:32:39.138]                 {
[10:32:39.138]                   {
[10:32:39.138]                     {
[10:32:39.138]                       base::local({
[10:32:39.138]                         has_future <- base::requireNamespace("future", 
[10:32:39.138]                           quietly = TRUE)
[10:32:39.138]                         if (has_future) {
[10:32:39.138]                           ns <- base::getNamespace("future")
[10:32:39.138]                           version <- ns[[".package"]][["version"]]
[10:32:39.138]                           if (is.null(version)) 
[10:32:39.138]                             version <- utils::packageVersion("future")
[10:32:39.138]                         }
[10:32:39.138]                         else {
[10:32:39.138]                           version <- NULL
[10:32:39.138]                         }
[10:32:39.138]                         if (!has_future || version < "1.8.0") {
[10:32:39.138]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.138]                             "", base::R.version$version.string), 
[10:32:39.138]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.138]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.138]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.138]                               "release", "version")], collapse = " "), 
[10:32:39.138]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.138]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.138]                             info)
[10:32:39.138]                           info <- base::paste(info, collapse = "; ")
[10:32:39.138]                           if (!has_future) {
[10:32:39.138]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.138]                               info)
[10:32:39.138]                           }
[10:32:39.138]                           else {
[10:32:39.138]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.138]                               info, version)
[10:32:39.138]                           }
[10:32:39.138]                           base::stop(msg)
[10:32:39.138]                         }
[10:32:39.138]                       })
[10:32:39.138]                     }
[10:32:39.138]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.138]                     base::options(mc.cores = 1L)
[10:32:39.138]                   }
[10:32:39.138]                   ...future.strategy.old <- future::plan("list")
[10:32:39.138]                   options(future.plan = NULL)
[10:32:39.138]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.138]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.138]                 }
[10:32:39.138]                 ...future.workdir <- getwd()
[10:32:39.138]             }
[10:32:39.138]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.138]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.138]         }
[10:32:39.138]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.138]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.138]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.138]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.138]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.138]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.138]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.138]             base::names(...future.oldOptions))
[10:32:39.138]     }
[10:32:39.138]     if (FALSE) {
[10:32:39.138]     }
[10:32:39.138]     else {
[10:32:39.138]         if (TRUE) {
[10:32:39.138]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.138]                 open = "w")
[10:32:39.138]         }
[10:32:39.138]         else {
[10:32:39.138]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.138]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.138]         }
[10:32:39.138]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.138]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.138]             base::sink(type = "output", split = FALSE)
[10:32:39.138]             base::close(...future.stdout)
[10:32:39.138]         }, add = TRUE)
[10:32:39.138]     }
[10:32:39.138]     ...future.frame <- base::sys.nframe()
[10:32:39.138]     ...future.conditions <- base::list()
[10:32:39.138]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.138]     if (FALSE) {
[10:32:39.138]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.138]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.138]     }
[10:32:39.138]     ...future.result <- base::tryCatch({
[10:32:39.138]         base::withCallingHandlers({
[10:32:39.138]             ...future.value <- base::withVisible(base::local({
[10:32:39.138]                 ...future.makeSendCondition <- base::local({
[10:32:39.138]                   sendCondition <- NULL
[10:32:39.138]                   function(frame = 1L) {
[10:32:39.138]                     if (is.function(sendCondition)) 
[10:32:39.138]                       return(sendCondition)
[10:32:39.138]                     ns <- getNamespace("parallel")
[10:32:39.138]                     if (exists("sendData", mode = "function", 
[10:32:39.138]                       envir = ns)) {
[10:32:39.138]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.138]                         envir = ns)
[10:32:39.138]                       envir <- sys.frame(frame)
[10:32:39.138]                       master <- NULL
[10:32:39.138]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.138]                         !identical(envir, emptyenv())) {
[10:32:39.138]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.138]                           inherits = FALSE)) {
[10:32:39.138]                           master <- get("master", mode = "list", 
[10:32:39.138]                             envir = envir, inherits = FALSE)
[10:32:39.138]                           if (inherits(master, c("SOCKnode", 
[10:32:39.138]                             "SOCK0node"))) {
[10:32:39.138]                             sendCondition <<- function(cond) {
[10:32:39.138]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.138]                                 success = TRUE)
[10:32:39.138]                               parallel_sendData(master, data)
[10:32:39.138]                             }
[10:32:39.138]                             return(sendCondition)
[10:32:39.138]                           }
[10:32:39.138]                         }
[10:32:39.138]                         frame <- frame + 1L
[10:32:39.138]                         envir <- sys.frame(frame)
[10:32:39.138]                       }
[10:32:39.138]                     }
[10:32:39.138]                     sendCondition <<- function(cond) NULL
[10:32:39.138]                   }
[10:32:39.138]                 })
[10:32:39.138]                 withCallingHandlers({
[10:32:39.138]                   42
[10:32:39.138]                 }, immediateCondition = function(cond) {
[10:32:39.138]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.138]                   sendCondition(cond)
[10:32:39.138]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.138]                   {
[10:32:39.138]                     inherits <- base::inherits
[10:32:39.138]                     invokeRestart <- base::invokeRestart
[10:32:39.138]                     is.null <- base::is.null
[10:32:39.138]                     muffled <- FALSE
[10:32:39.138]                     if (inherits(cond, "message")) {
[10:32:39.138]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.138]                       if (muffled) 
[10:32:39.138]                         invokeRestart("muffleMessage")
[10:32:39.138]                     }
[10:32:39.138]                     else if (inherits(cond, "warning")) {
[10:32:39.138]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.138]                       if (muffled) 
[10:32:39.138]                         invokeRestart("muffleWarning")
[10:32:39.138]                     }
[10:32:39.138]                     else if (inherits(cond, "condition")) {
[10:32:39.138]                       if (!is.null(pattern)) {
[10:32:39.138]                         computeRestarts <- base::computeRestarts
[10:32:39.138]                         grepl <- base::grepl
[10:32:39.138]                         restarts <- computeRestarts(cond)
[10:32:39.138]                         for (restart in restarts) {
[10:32:39.138]                           name <- restart$name
[10:32:39.138]                           if (is.null(name)) 
[10:32:39.138]                             next
[10:32:39.138]                           if (!grepl(pattern, name)) 
[10:32:39.138]                             next
[10:32:39.138]                           invokeRestart(restart)
[10:32:39.138]                           muffled <- TRUE
[10:32:39.138]                           break
[10:32:39.138]                         }
[10:32:39.138]                       }
[10:32:39.138]                     }
[10:32:39.138]                     invisible(muffled)
[10:32:39.138]                   }
[10:32:39.138]                   muffleCondition(cond)
[10:32:39.138]                 })
[10:32:39.138]             }))
[10:32:39.138]             future::FutureResult(value = ...future.value$value, 
[10:32:39.138]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.138]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.138]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.138]                     ...future.globalenv.names))
[10:32:39.138]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.138]         }, condition = base::local({
[10:32:39.138]             c <- base::c
[10:32:39.138]             inherits <- base::inherits
[10:32:39.138]             invokeRestart <- base::invokeRestart
[10:32:39.138]             length <- base::length
[10:32:39.138]             list <- base::list
[10:32:39.138]             seq.int <- base::seq.int
[10:32:39.138]             signalCondition <- base::signalCondition
[10:32:39.138]             sys.calls <- base::sys.calls
[10:32:39.138]             `[[` <- base::`[[`
[10:32:39.138]             `+` <- base::`+`
[10:32:39.138]             `<<-` <- base::`<<-`
[10:32:39.138]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.138]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.138]                   3L)]
[10:32:39.138]             }
[10:32:39.138]             function(cond) {
[10:32:39.138]                 is_error <- inherits(cond, "error")
[10:32:39.138]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.138]                   NULL)
[10:32:39.138]                 if (is_error) {
[10:32:39.138]                   sessionInformation <- function() {
[10:32:39.138]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.138]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.138]                       search = base::search(), system = base::Sys.info())
[10:32:39.138]                   }
[10:32:39.138]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.138]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.138]                     cond$call), session = sessionInformation(), 
[10:32:39.138]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.138]                   signalCondition(cond)
[10:32:39.138]                 }
[10:32:39.138]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.138]                 "immediateCondition"))) {
[10:32:39.138]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.138]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.138]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.138]                   if (TRUE && !signal) {
[10:32:39.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.138]                     {
[10:32:39.138]                       inherits <- base::inherits
[10:32:39.138]                       invokeRestart <- base::invokeRestart
[10:32:39.138]                       is.null <- base::is.null
[10:32:39.138]                       muffled <- FALSE
[10:32:39.138]                       if (inherits(cond, "message")) {
[10:32:39.138]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.138]                         if (muffled) 
[10:32:39.138]                           invokeRestart("muffleMessage")
[10:32:39.138]                       }
[10:32:39.138]                       else if (inherits(cond, "warning")) {
[10:32:39.138]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.138]                         if (muffled) 
[10:32:39.138]                           invokeRestart("muffleWarning")
[10:32:39.138]                       }
[10:32:39.138]                       else if (inherits(cond, "condition")) {
[10:32:39.138]                         if (!is.null(pattern)) {
[10:32:39.138]                           computeRestarts <- base::computeRestarts
[10:32:39.138]                           grepl <- base::grepl
[10:32:39.138]                           restarts <- computeRestarts(cond)
[10:32:39.138]                           for (restart in restarts) {
[10:32:39.138]                             name <- restart$name
[10:32:39.138]                             if (is.null(name)) 
[10:32:39.138]                               next
[10:32:39.138]                             if (!grepl(pattern, name)) 
[10:32:39.138]                               next
[10:32:39.138]                             invokeRestart(restart)
[10:32:39.138]                             muffled <- TRUE
[10:32:39.138]                             break
[10:32:39.138]                           }
[10:32:39.138]                         }
[10:32:39.138]                       }
[10:32:39.138]                       invisible(muffled)
[10:32:39.138]                     }
[10:32:39.138]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.138]                   }
[10:32:39.138]                 }
[10:32:39.138]                 else {
[10:32:39.138]                   if (TRUE) {
[10:32:39.138]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.138]                     {
[10:32:39.138]                       inherits <- base::inherits
[10:32:39.138]                       invokeRestart <- base::invokeRestart
[10:32:39.138]                       is.null <- base::is.null
[10:32:39.138]                       muffled <- FALSE
[10:32:39.138]                       if (inherits(cond, "message")) {
[10:32:39.138]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.138]                         if (muffled) 
[10:32:39.138]                           invokeRestart("muffleMessage")
[10:32:39.138]                       }
[10:32:39.138]                       else if (inherits(cond, "warning")) {
[10:32:39.138]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.138]                         if (muffled) 
[10:32:39.138]                           invokeRestart("muffleWarning")
[10:32:39.138]                       }
[10:32:39.138]                       else if (inherits(cond, "condition")) {
[10:32:39.138]                         if (!is.null(pattern)) {
[10:32:39.138]                           computeRestarts <- base::computeRestarts
[10:32:39.138]                           grepl <- base::grepl
[10:32:39.138]                           restarts <- computeRestarts(cond)
[10:32:39.138]                           for (restart in restarts) {
[10:32:39.138]                             name <- restart$name
[10:32:39.138]                             if (is.null(name)) 
[10:32:39.138]                               next
[10:32:39.138]                             if (!grepl(pattern, name)) 
[10:32:39.138]                               next
[10:32:39.138]                             invokeRestart(restart)
[10:32:39.138]                             muffled <- TRUE
[10:32:39.138]                             break
[10:32:39.138]                           }
[10:32:39.138]                         }
[10:32:39.138]                       }
[10:32:39.138]                       invisible(muffled)
[10:32:39.138]                     }
[10:32:39.138]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.138]                   }
[10:32:39.138]                 }
[10:32:39.138]             }
[10:32:39.138]         }))
[10:32:39.138]     }, error = function(ex) {
[10:32:39.138]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.138]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.138]                 ...future.rng), started = ...future.startTime, 
[10:32:39.138]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.138]             version = "1.8"), class = "FutureResult")
[10:32:39.138]     }, finally = {
[10:32:39.138]         if (!identical(...future.workdir, getwd())) 
[10:32:39.138]             setwd(...future.workdir)
[10:32:39.138]         {
[10:32:39.138]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.138]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.138]             }
[10:32:39.138]             base::options(...future.oldOptions)
[10:32:39.138]             if (.Platform$OS.type == "windows") {
[10:32:39.138]                 old_names <- names(...future.oldEnvVars)
[10:32:39.138]                 envs <- base::Sys.getenv()
[10:32:39.138]                 names <- names(envs)
[10:32:39.138]                 common <- intersect(names, old_names)
[10:32:39.138]                 added <- setdiff(names, old_names)
[10:32:39.138]                 removed <- setdiff(old_names, names)
[10:32:39.138]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.138]                   envs[common]]
[10:32:39.138]                 NAMES <- toupper(changed)
[10:32:39.138]                 args <- list()
[10:32:39.138]                 for (kk in seq_along(NAMES)) {
[10:32:39.138]                   name <- changed[[kk]]
[10:32:39.138]                   NAME <- NAMES[[kk]]
[10:32:39.138]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.138]                     next
[10:32:39.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.138]                 }
[10:32:39.138]                 NAMES <- toupper(added)
[10:32:39.138]                 for (kk in seq_along(NAMES)) {
[10:32:39.138]                   name <- added[[kk]]
[10:32:39.138]                   NAME <- NAMES[[kk]]
[10:32:39.138]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.138]                     next
[10:32:39.138]                   args[[name]] <- ""
[10:32:39.138]                 }
[10:32:39.138]                 NAMES <- toupper(removed)
[10:32:39.138]                 for (kk in seq_along(NAMES)) {
[10:32:39.138]                   name <- removed[[kk]]
[10:32:39.138]                   NAME <- NAMES[[kk]]
[10:32:39.138]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.138]                     next
[10:32:39.138]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.138]                 }
[10:32:39.138]                 if (length(args) > 0) 
[10:32:39.138]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.138]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.138]             }
[10:32:39.138]             else {
[10:32:39.138]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.138]             }
[10:32:39.138]             {
[10:32:39.138]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.138]                   0L) {
[10:32:39.138]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.138]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.138]                   base::options(opts)
[10:32:39.138]                 }
[10:32:39.138]                 {
[10:32:39.138]                   {
[10:32:39.138]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.138]                     NULL
[10:32:39.138]                   }
[10:32:39.138]                   options(future.plan = NULL)
[10:32:39.138]                   if (is.na(NA_character_)) 
[10:32:39.138]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.138]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.138]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.138]                     .init = FALSE)
[10:32:39.138]                 }
[10:32:39.138]             }
[10:32:39.138]         }
[10:32:39.138]     })
[10:32:39.138]     if (TRUE) {
[10:32:39.138]         base::sink(type = "output", split = FALSE)
[10:32:39.138]         if (TRUE) {
[10:32:39.138]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.138]         }
[10:32:39.138]         else {
[10:32:39.138]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.138]         }
[10:32:39.138]         base::close(...future.stdout)
[10:32:39.138]         ...future.stdout <- NULL
[10:32:39.138]     }
[10:32:39.138]     ...future.result$conditions <- ...future.conditions
[10:32:39.138]     ...future.result$finished <- base::Sys.time()
[10:32:39.138]     ...future.result
[10:32:39.138] }
[10:32:39.141] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.146] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.146] - Validating connection of MultisessionFuture
[10:32:39.146] - received message: FutureResult
[10:32:39.146] - Received FutureResult
[10:32:39.146] - Erased future from FutureRegistry
[10:32:39.147] result() for ClusterFuture ...
[10:32:39.147] - result already collected: FutureResult
[10:32:39.147] result() for ClusterFuture ... done
[10:32:39.147] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.147] result() for ClusterFuture ...
[10:32:39.147] - result already collected: FutureResult
[10:32:39.147] result() for ClusterFuture ... done
[10:32:39.147] result() for ClusterFuture ...
[10:32:39.147] - result already collected: FutureResult
[10:32:39.148] result() for ClusterFuture ... done
[10:32:39.148] getGlobalsAndPackages() ...
[10:32:39.148] Searching for globals...
[10:32:39.148] 
[10:32:39.148] Searching for globals ... DONE
[10:32:39.149] - globals: [0] <none>
[10:32:39.149] getGlobalsAndPackages() ... DONE
[10:32:39.149] run() for ‘Future’ ...
[10:32:39.149] - state: ‘created’
[10:32:39.149] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:39.163] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.163] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:39.164]   - Field: ‘node’
[10:32:39.164]   - Field: ‘label’
[10:32:39.164]   - Field: ‘local’
[10:32:39.164]   - Field: ‘owner’
[10:32:39.164]   - Field: ‘envir’
[10:32:39.164]   - Field: ‘workers’
[10:32:39.164]   - Field: ‘packages’
[10:32:39.164]   - Field: ‘gc’
[10:32:39.164]   - Field: ‘conditions’
[10:32:39.164]   - Field: ‘persistent’
[10:32:39.165]   - Field: ‘expr’
[10:32:39.165]   - Field: ‘uuid’
[10:32:39.165]   - Field: ‘seed’
[10:32:39.165]   - Field: ‘version’
[10:32:39.165]   - Field: ‘result’
[10:32:39.165]   - Field: ‘asynchronous’
[10:32:39.165]   - Field: ‘calls’
[10:32:39.165]   - Field: ‘globals’
[10:32:39.166]   - Field: ‘stdout’
[10:32:39.166]   - Field: ‘earlySignal’
[10:32:39.166]   - Field: ‘lazy’
[10:32:39.166]   - Field: ‘state’
[10:32:39.166] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:39.166] - Launch lazy future ...
[10:32:39.166] Packages needed by the future expression (n = 0): <none>
[10:32:39.167] Packages needed by future strategies (n = 0): <none>
[10:32:39.167] {
[10:32:39.167]     {
[10:32:39.167]         {
[10:32:39.167]             ...future.startTime <- base::Sys.time()
[10:32:39.167]             {
[10:32:39.167]                 {
[10:32:39.167]                   {
[10:32:39.167]                     {
[10:32:39.167]                       base::local({
[10:32:39.167]                         has_future <- base::requireNamespace("future", 
[10:32:39.167]                           quietly = TRUE)
[10:32:39.167]                         if (has_future) {
[10:32:39.167]                           ns <- base::getNamespace("future")
[10:32:39.167]                           version <- ns[[".package"]][["version"]]
[10:32:39.167]                           if (is.null(version)) 
[10:32:39.167]                             version <- utils::packageVersion("future")
[10:32:39.167]                         }
[10:32:39.167]                         else {
[10:32:39.167]                           version <- NULL
[10:32:39.167]                         }
[10:32:39.167]                         if (!has_future || version < "1.8.0") {
[10:32:39.167]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.167]                             "", base::R.version$version.string), 
[10:32:39.167]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.167]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.167]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.167]                               "release", "version")], collapse = " "), 
[10:32:39.167]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.167]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.167]                             info)
[10:32:39.167]                           info <- base::paste(info, collapse = "; ")
[10:32:39.167]                           if (!has_future) {
[10:32:39.167]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.167]                               info)
[10:32:39.167]                           }
[10:32:39.167]                           else {
[10:32:39.167]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.167]                               info, version)
[10:32:39.167]                           }
[10:32:39.167]                           base::stop(msg)
[10:32:39.167]                         }
[10:32:39.167]                       })
[10:32:39.167]                     }
[10:32:39.167]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.167]                     base::options(mc.cores = 1L)
[10:32:39.167]                   }
[10:32:39.167]                   ...future.strategy.old <- future::plan("list")
[10:32:39.167]                   options(future.plan = NULL)
[10:32:39.167]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.167]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.167]                 }
[10:32:39.167]                 ...future.workdir <- getwd()
[10:32:39.167]             }
[10:32:39.167]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.167]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.167]         }
[10:32:39.167]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.167]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.167]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.167]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.167]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.167]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.167]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.167]             base::names(...future.oldOptions))
[10:32:39.167]     }
[10:32:39.167]     if (FALSE) {
[10:32:39.167]     }
[10:32:39.167]     else {
[10:32:39.167]         if (TRUE) {
[10:32:39.167]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.167]                 open = "w")
[10:32:39.167]         }
[10:32:39.167]         else {
[10:32:39.167]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.167]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.167]         }
[10:32:39.167]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.167]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.167]             base::sink(type = "output", split = FALSE)
[10:32:39.167]             base::close(...future.stdout)
[10:32:39.167]         }, add = TRUE)
[10:32:39.167]     }
[10:32:39.167]     ...future.frame <- base::sys.nframe()
[10:32:39.167]     ...future.conditions <- base::list()
[10:32:39.167]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.167]     if (FALSE) {
[10:32:39.167]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.167]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.167]     }
[10:32:39.167]     ...future.result <- base::tryCatch({
[10:32:39.167]         base::withCallingHandlers({
[10:32:39.167]             ...future.value <- base::withVisible(base::local({
[10:32:39.167]                 ...future.makeSendCondition <- base::local({
[10:32:39.167]                   sendCondition <- NULL
[10:32:39.167]                   function(frame = 1L) {
[10:32:39.167]                     if (is.function(sendCondition)) 
[10:32:39.167]                       return(sendCondition)
[10:32:39.167]                     ns <- getNamespace("parallel")
[10:32:39.167]                     if (exists("sendData", mode = "function", 
[10:32:39.167]                       envir = ns)) {
[10:32:39.167]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.167]                         envir = ns)
[10:32:39.167]                       envir <- sys.frame(frame)
[10:32:39.167]                       master <- NULL
[10:32:39.167]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.167]                         !identical(envir, emptyenv())) {
[10:32:39.167]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.167]                           inherits = FALSE)) {
[10:32:39.167]                           master <- get("master", mode = "list", 
[10:32:39.167]                             envir = envir, inherits = FALSE)
[10:32:39.167]                           if (inherits(master, c("SOCKnode", 
[10:32:39.167]                             "SOCK0node"))) {
[10:32:39.167]                             sendCondition <<- function(cond) {
[10:32:39.167]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.167]                                 success = TRUE)
[10:32:39.167]                               parallel_sendData(master, data)
[10:32:39.167]                             }
[10:32:39.167]                             return(sendCondition)
[10:32:39.167]                           }
[10:32:39.167]                         }
[10:32:39.167]                         frame <- frame + 1L
[10:32:39.167]                         envir <- sys.frame(frame)
[10:32:39.167]                       }
[10:32:39.167]                     }
[10:32:39.167]                     sendCondition <<- function(cond) NULL
[10:32:39.167]                   }
[10:32:39.167]                 })
[10:32:39.167]                 withCallingHandlers({
[10:32:39.167]                   42
[10:32:39.167]                 }, immediateCondition = function(cond) {
[10:32:39.167]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.167]                   sendCondition(cond)
[10:32:39.167]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.167]                   {
[10:32:39.167]                     inherits <- base::inherits
[10:32:39.167]                     invokeRestart <- base::invokeRestart
[10:32:39.167]                     is.null <- base::is.null
[10:32:39.167]                     muffled <- FALSE
[10:32:39.167]                     if (inherits(cond, "message")) {
[10:32:39.167]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.167]                       if (muffled) 
[10:32:39.167]                         invokeRestart("muffleMessage")
[10:32:39.167]                     }
[10:32:39.167]                     else if (inherits(cond, "warning")) {
[10:32:39.167]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.167]                       if (muffled) 
[10:32:39.167]                         invokeRestart("muffleWarning")
[10:32:39.167]                     }
[10:32:39.167]                     else if (inherits(cond, "condition")) {
[10:32:39.167]                       if (!is.null(pattern)) {
[10:32:39.167]                         computeRestarts <- base::computeRestarts
[10:32:39.167]                         grepl <- base::grepl
[10:32:39.167]                         restarts <- computeRestarts(cond)
[10:32:39.167]                         for (restart in restarts) {
[10:32:39.167]                           name <- restart$name
[10:32:39.167]                           if (is.null(name)) 
[10:32:39.167]                             next
[10:32:39.167]                           if (!grepl(pattern, name)) 
[10:32:39.167]                             next
[10:32:39.167]                           invokeRestart(restart)
[10:32:39.167]                           muffled <- TRUE
[10:32:39.167]                           break
[10:32:39.167]                         }
[10:32:39.167]                       }
[10:32:39.167]                     }
[10:32:39.167]                     invisible(muffled)
[10:32:39.167]                   }
[10:32:39.167]                   muffleCondition(cond)
[10:32:39.167]                 })
[10:32:39.167]             }))
[10:32:39.167]             future::FutureResult(value = ...future.value$value, 
[10:32:39.167]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.167]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.167]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.167]                     ...future.globalenv.names))
[10:32:39.167]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.167]         }, condition = base::local({
[10:32:39.167]             c <- base::c
[10:32:39.167]             inherits <- base::inherits
[10:32:39.167]             invokeRestart <- base::invokeRestart
[10:32:39.167]             length <- base::length
[10:32:39.167]             list <- base::list
[10:32:39.167]             seq.int <- base::seq.int
[10:32:39.167]             signalCondition <- base::signalCondition
[10:32:39.167]             sys.calls <- base::sys.calls
[10:32:39.167]             `[[` <- base::`[[`
[10:32:39.167]             `+` <- base::`+`
[10:32:39.167]             `<<-` <- base::`<<-`
[10:32:39.167]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.167]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.167]                   3L)]
[10:32:39.167]             }
[10:32:39.167]             function(cond) {
[10:32:39.167]                 is_error <- inherits(cond, "error")
[10:32:39.167]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.167]                   NULL)
[10:32:39.167]                 if (is_error) {
[10:32:39.167]                   sessionInformation <- function() {
[10:32:39.167]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.167]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.167]                       search = base::search(), system = base::Sys.info())
[10:32:39.167]                   }
[10:32:39.167]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.167]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.167]                     cond$call), session = sessionInformation(), 
[10:32:39.167]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.167]                   signalCondition(cond)
[10:32:39.167]                 }
[10:32:39.167]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.167]                 "immediateCondition"))) {
[10:32:39.167]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.167]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.167]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.167]                   if (TRUE && !signal) {
[10:32:39.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.167]                     {
[10:32:39.167]                       inherits <- base::inherits
[10:32:39.167]                       invokeRestart <- base::invokeRestart
[10:32:39.167]                       is.null <- base::is.null
[10:32:39.167]                       muffled <- FALSE
[10:32:39.167]                       if (inherits(cond, "message")) {
[10:32:39.167]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.167]                         if (muffled) 
[10:32:39.167]                           invokeRestart("muffleMessage")
[10:32:39.167]                       }
[10:32:39.167]                       else if (inherits(cond, "warning")) {
[10:32:39.167]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.167]                         if (muffled) 
[10:32:39.167]                           invokeRestart("muffleWarning")
[10:32:39.167]                       }
[10:32:39.167]                       else if (inherits(cond, "condition")) {
[10:32:39.167]                         if (!is.null(pattern)) {
[10:32:39.167]                           computeRestarts <- base::computeRestarts
[10:32:39.167]                           grepl <- base::grepl
[10:32:39.167]                           restarts <- computeRestarts(cond)
[10:32:39.167]                           for (restart in restarts) {
[10:32:39.167]                             name <- restart$name
[10:32:39.167]                             if (is.null(name)) 
[10:32:39.167]                               next
[10:32:39.167]                             if (!grepl(pattern, name)) 
[10:32:39.167]                               next
[10:32:39.167]                             invokeRestart(restart)
[10:32:39.167]                             muffled <- TRUE
[10:32:39.167]                             break
[10:32:39.167]                           }
[10:32:39.167]                         }
[10:32:39.167]                       }
[10:32:39.167]                       invisible(muffled)
[10:32:39.167]                     }
[10:32:39.167]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.167]                   }
[10:32:39.167]                 }
[10:32:39.167]                 else {
[10:32:39.167]                   if (TRUE) {
[10:32:39.167]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.167]                     {
[10:32:39.167]                       inherits <- base::inherits
[10:32:39.167]                       invokeRestart <- base::invokeRestart
[10:32:39.167]                       is.null <- base::is.null
[10:32:39.167]                       muffled <- FALSE
[10:32:39.167]                       if (inherits(cond, "message")) {
[10:32:39.167]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.167]                         if (muffled) 
[10:32:39.167]                           invokeRestart("muffleMessage")
[10:32:39.167]                       }
[10:32:39.167]                       else if (inherits(cond, "warning")) {
[10:32:39.167]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.167]                         if (muffled) 
[10:32:39.167]                           invokeRestart("muffleWarning")
[10:32:39.167]                       }
[10:32:39.167]                       else if (inherits(cond, "condition")) {
[10:32:39.167]                         if (!is.null(pattern)) {
[10:32:39.167]                           computeRestarts <- base::computeRestarts
[10:32:39.167]                           grepl <- base::grepl
[10:32:39.167]                           restarts <- computeRestarts(cond)
[10:32:39.167]                           for (restart in restarts) {
[10:32:39.167]                             name <- restart$name
[10:32:39.167]                             if (is.null(name)) 
[10:32:39.167]                               next
[10:32:39.167]                             if (!grepl(pattern, name)) 
[10:32:39.167]                               next
[10:32:39.167]                             invokeRestart(restart)
[10:32:39.167]                             muffled <- TRUE
[10:32:39.167]                             break
[10:32:39.167]                           }
[10:32:39.167]                         }
[10:32:39.167]                       }
[10:32:39.167]                       invisible(muffled)
[10:32:39.167]                     }
[10:32:39.167]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.167]                   }
[10:32:39.167]                 }
[10:32:39.167]             }
[10:32:39.167]         }))
[10:32:39.167]     }, error = function(ex) {
[10:32:39.167]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.167]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.167]                 ...future.rng), started = ...future.startTime, 
[10:32:39.167]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.167]             version = "1.8"), class = "FutureResult")
[10:32:39.167]     }, finally = {
[10:32:39.167]         if (!identical(...future.workdir, getwd())) 
[10:32:39.167]             setwd(...future.workdir)
[10:32:39.167]         {
[10:32:39.167]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.167]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.167]             }
[10:32:39.167]             base::options(...future.oldOptions)
[10:32:39.167]             if (.Platform$OS.type == "windows") {
[10:32:39.167]                 old_names <- names(...future.oldEnvVars)
[10:32:39.167]                 envs <- base::Sys.getenv()
[10:32:39.167]                 names <- names(envs)
[10:32:39.167]                 common <- intersect(names, old_names)
[10:32:39.167]                 added <- setdiff(names, old_names)
[10:32:39.167]                 removed <- setdiff(old_names, names)
[10:32:39.167]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.167]                   envs[common]]
[10:32:39.167]                 NAMES <- toupper(changed)
[10:32:39.167]                 args <- list()
[10:32:39.167]                 for (kk in seq_along(NAMES)) {
[10:32:39.167]                   name <- changed[[kk]]
[10:32:39.167]                   NAME <- NAMES[[kk]]
[10:32:39.167]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.167]                     next
[10:32:39.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.167]                 }
[10:32:39.167]                 NAMES <- toupper(added)
[10:32:39.167]                 for (kk in seq_along(NAMES)) {
[10:32:39.167]                   name <- added[[kk]]
[10:32:39.167]                   NAME <- NAMES[[kk]]
[10:32:39.167]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.167]                     next
[10:32:39.167]                   args[[name]] <- ""
[10:32:39.167]                 }
[10:32:39.167]                 NAMES <- toupper(removed)
[10:32:39.167]                 for (kk in seq_along(NAMES)) {
[10:32:39.167]                   name <- removed[[kk]]
[10:32:39.167]                   NAME <- NAMES[[kk]]
[10:32:39.167]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.167]                     next
[10:32:39.167]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.167]                 }
[10:32:39.167]                 if (length(args) > 0) 
[10:32:39.167]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.167]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.167]             }
[10:32:39.167]             else {
[10:32:39.167]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.167]             }
[10:32:39.167]             {
[10:32:39.167]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.167]                   0L) {
[10:32:39.167]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.167]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.167]                   base::options(opts)
[10:32:39.167]                 }
[10:32:39.167]                 {
[10:32:39.167]                   {
[10:32:39.167]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.167]                     NULL
[10:32:39.167]                   }
[10:32:39.167]                   options(future.plan = NULL)
[10:32:39.167]                   if (is.na(NA_character_)) 
[10:32:39.167]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.167]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.167]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.167]                     .init = FALSE)
[10:32:39.167]                 }
[10:32:39.167]             }
[10:32:39.167]         }
[10:32:39.167]     })
[10:32:39.167]     if (TRUE) {
[10:32:39.167]         base::sink(type = "output", split = FALSE)
[10:32:39.167]         if (TRUE) {
[10:32:39.167]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.167]         }
[10:32:39.167]         else {
[10:32:39.167]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.167]         }
[10:32:39.167]         base::close(...future.stdout)
[10:32:39.167]         ...future.stdout <- NULL
[10:32:39.167]     }
[10:32:39.167]     ...future.result$conditions <- ...future.conditions
[10:32:39.167]     ...future.result$finished <- base::Sys.time()
[10:32:39.167]     ...future.result
[10:32:39.167] }
[10:32:39.170] MultisessionFuture started
[10:32:39.171] - Launch lazy future ... done
[10:32:39.171] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.172] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.173] - Validating connection of MultisessionFuture
[10:32:39.173] - received message: FutureResult
[10:32:39.173] - Received FutureResult
[10:32:39.173] - Erased future from FutureRegistry
[10:32:39.173] result() for ClusterFuture ...
[10:32:39.173] - result already collected: FutureResult
[10:32:39.173] result() for ClusterFuture ... done
[10:32:39.174] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.174] result() for ClusterFuture ...
[10:32:39.174] - result already collected: FutureResult
[10:32:39.174] result() for ClusterFuture ... done
[10:32:39.174] result() for ClusterFuture ...
[10:32:39.174] - result already collected: FutureResult
[10:32:39.174] result() for ClusterFuture ... done
[10:32:39.175] getGlobalsAndPackages() ...
[10:32:39.175] Searching for globals...
[10:32:39.176] - globals found: [1] ‘{’
[10:32:39.176] Searching for globals ... DONE
[10:32:39.176] Resolving globals: FALSE
[10:32:39.176] 
[10:32:39.176] 
[10:32:39.176] getGlobalsAndPackages() ... DONE
[10:32:39.177] run() for ‘Future’ ...
[10:32:39.177] - state: ‘created’
[10:32:39.177] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:39.192] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.192] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:39.192]   - Field: ‘node’
[10:32:39.192]   - Field: ‘label’
[10:32:39.193]   - Field: ‘local’
[10:32:39.193]   - Field: ‘owner’
[10:32:39.193]   - Field: ‘envir’
[10:32:39.193]   - Field: ‘workers’
[10:32:39.193]   - Field: ‘packages’
[10:32:39.193]   - Field: ‘gc’
[10:32:39.193]   - Field: ‘conditions’
[10:32:39.193]   - Field: ‘persistent’
[10:32:39.194]   - Field: ‘expr’
[10:32:39.194]   - Field: ‘uuid’
[10:32:39.194]   - Field: ‘seed’
[10:32:39.194]   - Field: ‘version’
[10:32:39.194]   - Field: ‘result’
[10:32:39.194]   - Field: ‘asynchronous’
[10:32:39.194]   - Field: ‘calls’
[10:32:39.194]   - Field: ‘globals’
[10:32:39.194]   - Field: ‘stdout’
[10:32:39.195]   - Field: ‘earlySignal’
[10:32:39.195]   - Field: ‘lazy’
[10:32:39.195]   - Field: ‘state’
[10:32:39.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:39.195] - Launch lazy future ...
[10:32:39.195] Packages needed by the future expression (n = 0): <none>
[10:32:39.196] Packages needed by future strategies (n = 0): <none>
[10:32:39.196] {
[10:32:39.196]     {
[10:32:39.196]         {
[10:32:39.196]             ...future.startTime <- base::Sys.time()
[10:32:39.196]             {
[10:32:39.196]                 {
[10:32:39.196]                   {
[10:32:39.196]                     {
[10:32:39.196]                       base::local({
[10:32:39.196]                         has_future <- base::requireNamespace("future", 
[10:32:39.196]                           quietly = TRUE)
[10:32:39.196]                         if (has_future) {
[10:32:39.196]                           ns <- base::getNamespace("future")
[10:32:39.196]                           version <- ns[[".package"]][["version"]]
[10:32:39.196]                           if (is.null(version)) 
[10:32:39.196]                             version <- utils::packageVersion("future")
[10:32:39.196]                         }
[10:32:39.196]                         else {
[10:32:39.196]                           version <- NULL
[10:32:39.196]                         }
[10:32:39.196]                         if (!has_future || version < "1.8.0") {
[10:32:39.196]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.196]                             "", base::R.version$version.string), 
[10:32:39.196]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.196]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.196]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.196]                               "release", "version")], collapse = " "), 
[10:32:39.196]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.196]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.196]                             info)
[10:32:39.196]                           info <- base::paste(info, collapse = "; ")
[10:32:39.196]                           if (!has_future) {
[10:32:39.196]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.196]                               info)
[10:32:39.196]                           }
[10:32:39.196]                           else {
[10:32:39.196]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.196]                               info, version)
[10:32:39.196]                           }
[10:32:39.196]                           base::stop(msg)
[10:32:39.196]                         }
[10:32:39.196]                       })
[10:32:39.196]                     }
[10:32:39.196]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.196]                     base::options(mc.cores = 1L)
[10:32:39.196]                   }
[10:32:39.196]                   ...future.strategy.old <- future::plan("list")
[10:32:39.196]                   options(future.plan = NULL)
[10:32:39.196]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.196]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.196]                 }
[10:32:39.196]                 ...future.workdir <- getwd()
[10:32:39.196]             }
[10:32:39.196]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.196]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.196]         }
[10:32:39.196]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.196]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.196]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.196]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.196]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.196]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.196]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.196]             base::names(...future.oldOptions))
[10:32:39.196]     }
[10:32:39.196]     if (FALSE) {
[10:32:39.196]     }
[10:32:39.196]     else {
[10:32:39.196]         if (TRUE) {
[10:32:39.196]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.196]                 open = "w")
[10:32:39.196]         }
[10:32:39.196]         else {
[10:32:39.196]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.196]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.196]         }
[10:32:39.196]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.196]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.196]             base::sink(type = "output", split = FALSE)
[10:32:39.196]             base::close(...future.stdout)
[10:32:39.196]         }, add = TRUE)
[10:32:39.196]     }
[10:32:39.196]     ...future.frame <- base::sys.nframe()
[10:32:39.196]     ...future.conditions <- base::list()
[10:32:39.196]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.196]     if (FALSE) {
[10:32:39.196]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.196]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.196]     }
[10:32:39.196]     ...future.result <- base::tryCatch({
[10:32:39.196]         base::withCallingHandlers({
[10:32:39.196]             ...future.value <- base::withVisible(base::local({
[10:32:39.196]                 ...future.makeSendCondition <- base::local({
[10:32:39.196]                   sendCondition <- NULL
[10:32:39.196]                   function(frame = 1L) {
[10:32:39.196]                     if (is.function(sendCondition)) 
[10:32:39.196]                       return(sendCondition)
[10:32:39.196]                     ns <- getNamespace("parallel")
[10:32:39.196]                     if (exists("sendData", mode = "function", 
[10:32:39.196]                       envir = ns)) {
[10:32:39.196]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.196]                         envir = ns)
[10:32:39.196]                       envir <- sys.frame(frame)
[10:32:39.196]                       master <- NULL
[10:32:39.196]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.196]                         !identical(envir, emptyenv())) {
[10:32:39.196]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.196]                           inherits = FALSE)) {
[10:32:39.196]                           master <- get("master", mode = "list", 
[10:32:39.196]                             envir = envir, inherits = FALSE)
[10:32:39.196]                           if (inherits(master, c("SOCKnode", 
[10:32:39.196]                             "SOCK0node"))) {
[10:32:39.196]                             sendCondition <<- function(cond) {
[10:32:39.196]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.196]                                 success = TRUE)
[10:32:39.196]                               parallel_sendData(master, data)
[10:32:39.196]                             }
[10:32:39.196]                             return(sendCondition)
[10:32:39.196]                           }
[10:32:39.196]                         }
[10:32:39.196]                         frame <- frame + 1L
[10:32:39.196]                         envir <- sys.frame(frame)
[10:32:39.196]                       }
[10:32:39.196]                     }
[10:32:39.196]                     sendCondition <<- function(cond) NULL
[10:32:39.196]                   }
[10:32:39.196]                 })
[10:32:39.196]                 withCallingHandlers({
[10:32:39.196]                   {
[10:32:39.196]                     42
[10:32:39.196]                   }
[10:32:39.196]                 }, immediateCondition = function(cond) {
[10:32:39.196]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.196]                   sendCondition(cond)
[10:32:39.196]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.196]                   {
[10:32:39.196]                     inherits <- base::inherits
[10:32:39.196]                     invokeRestart <- base::invokeRestart
[10:32:39.196]                     is.null <- base::is.null
[10:32:39.196]                     muffled <- FALSE
[10:32:39.196]                     if (inherits(cond, "message")) {
[10:32:39.196]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.196]                       if (muffled) 
[10:32:39.196]                         invokeRestart("muffleMessage")
[10:32:39.196]                     }
[10:32:39.196]                     else if (inherits(cond, "warning")) {
[10:32:39.196]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.196]                       if (muffled) 
[10:32:39.196]                         invokeRestart("muffleWarning")
[10:32:39.196]                     }
[10:32:39.196]                     else if (inherits(cond, "condition")) {
[10:32:39.196]                       if (!is.null(pattern)) {
[10:32:39.196]                         computeRestarts <- base::computeRestarts
[10:32:39.196]                         grepl <- base::grepl
[10:32:39.196]                         restarts <- computeRestarts(cond)
[10:32:39.196]                         for (restart in restarts) {
[10:32:39.196]                           name <- restart$name
[10:32:39.196]                           if (is.null(name)) 
[10:32:39.196]                             next
[10:32:39.196]                           if (!grepl(pattern, name)) 
[10:32:39.196]                             next
[10:32:39.196]                           invokeRestart(restart)
[10:32:39.196]                           muffled <- TRUE
[10:32:39.196]                           break
[10:32:39.196]                         }
[10:32:39.196]                       }
[10:32:39.196]                     }
[10:32:39.196]                     invisible(muffled)
[10:32:39.196]                   }
[10:32:39.196]                   muffleCondition(cond)
[10:32:39.196]                 })
[10:32:39.196]             }))
[10:32:39.196]             future::FutureResult(value = ...future.value$value, 
[10:32:39.196]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.196]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.196]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.196]                     ...future.globalenv.names))
[10:32:39.196]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.196]         }, condition = base::local({
[10:32:39.196]             c <- base::c
[10:32:39.196]             inherits <- base::inherits
[10:32:39.196]             invokeRestart <- base::invokeRestart
[10:32:39.196]             length <- base::length
[10:32:39.196]             list <- base::list
[10:32:39.196]             seq.int <- base::seq.int
[10:32:39.196]             signalCondition <- base::signalCondition
[10:32:39.196]             sys.calls <- base::sys.calls
[10:32:39.196]             `[[` <- base::`[[`
[10:32:39.196]             `+` <- base::`+`
[10:32:39.196]             `<<-` <- base::`<<-`
[10:32:39.196]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.196]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.196]                   3L)]
[10:32:39.196]             }
[10:32:39.196]             function(cond) {
[10:32:39.196]                 is_error <- inherits(cond, "error")
[10:32:39.196]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.196]                   NULL)
[10:32:39.196]                 if (is_error) {
[10:32:39.196]                   sessionInformation <- function() {
[10:32:39.196]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.196]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.196]                       search = base::search(), system = base::Sys.info())
[10:32:39.196]                   }
[10:32:39.196]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.196]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.196]                     cond$call), session = sessionInformation(), 
[10:32:39.196]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.196]                   signalCondition(cond)
[10:32:39.196]                 }
[10:32:39.196]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.196]                 "immediateCondition"))) {
[10:32:39.196]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.196]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.196]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.196]                   if (TRUE && !signal) {
[10:32:39.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.196]                     {
[10:32:39.196]                       inherits <- base::inherits
[10:32:39.196]                       invokeRestart <- base::invokeRestart
[10:32:39.196]                       is.null <- base::is.null
[10:32:39.196]                       muffled <- FALSE
[10:32:39.196]                       if (inherits(cond, "message")) {
[10:32:39.196]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.196]                         if (muffled) 
[10:32:39.196]                           invokeRestart("muffleMessage")
[10:32:39.196]                       }
[10:32:39.196]                       else if (inherits(cond, "warning")) {
[10:32:39.196]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.196]                         if (muffled) 
[10:32:39.196]                           invokeRestart("muffleWarning")
[10:32:39.196]                       }
[10:32:39.196]                       else if (inherits(cond, "condition")) {
[10:32:39.196]                         if (!is.null(pattern)) {
[10:32:39.196]                           computeRestarts <- base::computeRestarts
[10:32:39.196]                           grepl <- base::grepl
[10:32:39.196]                           restarts <- computeRestarts(cond)
[10:32:39.196]                           for (restart in restarts) {
[10:32:39.196]                             name <- restart$name
[10:32:39.196]                             if (is.null(name)) 
[10:32:39.196]                               next
[10:32:39.196]                             if (!grepl(pattern, name)) 
[10:32:39.196]                               next
[10:32:39.196]                             invokeRestart(restart)
[10:32:39.196]                             muffled <- TRUE
[10:32:39.196]                             break
[10:32:39.196]                           }
[10:32:39.196]                         }
[10:32:39.196]                       }
[10:32:39.196]                       invisible(muffled)
[10:32:39.196]                     }
[10:32:39.196]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.196]                   }
[10:32:39.196]                 }
[10:32:39.196]                 else {
[10:32:39.196]                   if (TRUE) {
[10:32:39.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.196]                     {
[10:32:39.196]                       inherits <- base::inherits
[10:32:39.196]                       invokeRestart <- base::invokeRestart
[10:32:39.196]                       is.null <- base::is.null
[10:32:39.196]                       muffled <- FALSE
[10:32:39.196]                       if (inherits(cond, "message")) {
[10:32:39.196]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.196]                         if (muffled) 
[10:32:39.196]                           invokeRestart("muffleMessage")
[10:32:39.196]                       }
[10:32:39.196]                       else if (inherits(cond, "warning")) {
[10:32:39.196]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.196]                         if (muffled) 
[10:32:39.196]                           invokeRestart("muffleWarning")
[10:32:39.196]                       }
[10:32:39.196]                       else if (inherits(cond, "condition")) {
[10:32:39.196]                         if (!is.null(pattern)) {
[10:32:39.196]                           computeRestarts <- base::computeRestarts
[10:32:39.196]                           grepl <- base::grepl
[10:32:39.196]                           restarts <- computeRestarts(cond)
[10:32:39.196]                           for (restart in restarts) {
[10:32:39.196]                             name <- restart$name
[10:32:39.196]                             if (is.null(name)) 
[10:32:39.196]                               next
[10:32:39.196]                             if (!grepl(pattern, name)) 
[10:32:39.196]                               next
[10:32:39.196]                             invokeRestart(restart)
[10:32:39.196]                             muffled <- TRUE
[10:32:39.196]                             break
[10:32:39.196]                           }
[10:32:39.196]                         }
[10:32:39.196]                       }
[10:32:39.196]                       invisible(muffled)
[10:32:39.196]                     }
[10:32:39.196]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.196]                   }
[10:32:39.196]                 }
[10:32:39.196]             }
[10:32:39.196]         }))
[10:32:39.196]     }, error = function(ex) {
[10:32:39.196]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.196]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.196]                 ...future.rng), started = ...future.startTime, 
[10:32:39.196]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.196]             version = "1.8"), class = "FutureResult")
[10:32:39.196]     }, finally = {
[10:32:39.196]         if (!identical(...future.workdir, getwd())) 
[10:32:39.196]             setwd(...future.workdir)
[10:32:39.196]         {
[10:32:39.196]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.196]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.196]             }
[10:32:39.196]             base::options(...future.oldOptions)
[10:32:39.196]             if (.Platform$OS.type == "windows") {
[10:32:39.196]                 old_names <- names(...future.oldEnvVars)
[10:32:39.196]                 envs <- base::Sys.getenv()
[10:32:39.196]                 names <- names(envs)
[10:32:39.196]                 common <- intersect(names, old_names)
[10:32:39.196]                 added <- setdiff(names, old_names)
[10:32:39.196]                 removed <- setdiff(old_names, names)
[10:32:39.196]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.196]                   envs[common]]
[10:32:39.196]                 NAMES <- toupper(changed)
[10:32:39.196]                 args <- list()
[10:32:39.196]                 for (kk in seq_along(NAMES)) {
[10:32:39.196]                   name <- changed[[kk]]
[10:32:39.196]                   NAME <- NAMES[[kk]]
[10:32:39.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.196]                     next
[10:32:39.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.196]                 }
[10:32:39.196]                 NAMES <- toupper(added)
[10:32:39.196]                 for (kk in seq_along(NAMES)) {
[10:32:39.196]                   name <- added[[kk]]
[10:32:39.196]                   NAME <- NAMES[[kk]]
[10:32:39.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.196]                     next
[10:32:39.196]                   args[[name]] <- ""
[10:32:39.196]                 }
[10:32:39.196]                 NAMES <- toupper(removed)
[10:32:39.196]                 for (kk in seq_along(NAMES)) {
[10:32:39.196]                   name <- removed[[kk]]
[10:32:39.196]                   NAME <- NAMES[[kk]]
[10:32:39.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.196]                     next
[10:32:39.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.196]                 }
[10:32:39.196]                 if (length(args) > 0) 
[10:32:39.196]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.196]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.196]             }
[10:32:39.196]             else {
[10:32:39.196]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.196]             }
[10:32:39.196]             {
[10:32:39.196]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.196]                   0L) {
[10:32:39.196]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.196]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.196]                   base::options(opts)
[10:32:39.196]                 }
[10:32:39.196]                 {
[10:32:39.196]                   {
[10:32:39.196]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.196]                     NULL
[10:32:39.196]                   }
[10:32:39.196]                   options(future.plan = NULL)
[10:32:39.196]                   if (is.na(NA_character_)) 
[10:32:39.196]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.196]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.196]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.196]                     .init = FALSE)
[10:32:39.196]                 }
[10:32:39.196]             }
[10:32:39.196]         }
[10:32:39.196]     })
[10:32:39.196]     if (TRUE) {
[10:32:39.196]         base::sink(type = "output", split = FALSE)
[10:32:39.196]         if (TRUE) {
[10:32:39.196]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.196]         }
[10:32:39.196]         else {
[10:32:39.196]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.196]         }
[10:32:39.196]         base::close(...future.stdout)
[10:32:39.196]         ...future.stdout <- NULL
[10:32:39.196]     }
[10:32:39.196]     ...future.result$conditions <- ...future.conditions
[10:32:39.196]     ...future.result$finished <- base::Sys.time()
[10:32:39.196]     ...future.result
[10:32:39.196] }
[10:32:39.199] MultisessionFuture started
[10:32:39.199] - Launch lazy future ... done
[10:32:39.200] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.201] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.201] - Validating connection of MultisessionFuture
[10:32:39.202] - received message: FutureResult
[10:32:39.202] - Received FutureResult
[10:32:39.202] - Erased future from FutureRegistry
[10:32:39.202] result() for ClusterFuture ...
[10:32:39.202] - result already collected: FutureResult
[10:32:39.202] result() for ClusterFuture ... done
[10:32:39.202] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.202] result() for ClusterFuture ...
[10:32:39.203] - result already collected: FutureResult
[10:32:39.203] result() for ClusterFuture ... done
[10:32:39.203] result() for ClusterFuture ...
[10:32:39.203] - result already collected: FutureResult
[10:32:39.203] result() for ClusterFuture ... done
[10:32:39.207] getGlobalsAndPackages() ...
[10:32:39.207] 
[10:32:39.207] - globals: [0] <none>
[10:32:39.207] getGlobalsAndPackages() ... DONE
[10:32:39.218] Packages needed by the future expression (n = 0): <none>
[10:32:39.219] Packages needed by future strategies (n = 0): <none>
[10:32:39.221] {
[10:32:39.221]     {
[10:32:39.221]         {
[10:32:39.221]             ...future.startTime <- base::Sys.time()
[10:32:39.221]             {
[10:32:39.221]                 {
[10:32:39.221]                   {
[10:32:39.221]                     {
[10:32:39.221]                       base::local({
[10:32:39.221]                         has_future <- base::requireNamespace("future", 
[10:32:39.221]                           quietly = TRUE)
[10:32:39.221]                         if (has_future) {
[10:32:39.221]                           ns <- base::getNamespace("future")
[10:32:39.221]                           version <- ns[[".package"]][["version"]]
[10:32:39.221]                           if (is.null(version)) 
[10:32:39.221]                             version <- utils::packageVersion("future")
[10:32:39.221]                         }
[10:32:39.221]                         else {
[10:32:39.221]                           version <- NULL
[10:32:39.221]                         }
[10:32:39.221]                         if (!has_future || version < "1.8.0") {
[10:32:39.221]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.221]                             "", base::R.version$version.string), 
[10:32:39.221]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.221]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.221]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.221]                               "release", "version")], collapse = " "), 
[10:32:39.221]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.221]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.221]                             info)
[10:32:39.221]                           info <- base::paste(info, collapse = "; ")
[10:32:39.221]                           if (!has_future) {
[10:32:39.221]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.221]                               info)
[10:32:39.221]                           }
[10:32:39.221]                           else {
[10:32:39.221]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.221]                               info, version)
[10:32:39.221]                           }
[10:32:39.221]                           base::stop(msg)
[10:32:39.221]                         }
[10:32:39.221]                       })
[10:32:39.221]                     }
[10:32:39.221]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.221]                     base::options(mc.cores = 1L)
[10:32:39.221]                   }
[10:32:39.221]                   ...future.strategy.old <- future::plan("list")
[10:32:39.221]                   options(future.plan = NULL)
[10:32:39.221]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.221]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.221]                 }
[10:32:39.221]                 ...future.workdir <- getwd()
[10:32:39.221]             }
[10:32:39.221]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.221]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.221]         }
[10:32:39.221]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.221]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.221]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.221]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.221]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.221]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.221]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.221]             base::names(...future.oldOptions))
[10:32:39.221]     }
[10:32:39.221]     if (FALSE) {
[10:32:39.221]     }
[10:32:39.221]     else {
[10:32:39.221]         if (TRUE) {
[10:32:39.221]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.221]                 open = "w")
[10:32:39.221]         }
[10:32:39.221]         else {
[10:32:39.221]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.221]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.221]         }
[10:32:39.221]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.221]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.221]             base::sink(type = "output", split = FALSE)
[10:32:39.221]             base::close(...future.stdout)
[10:32:39.221]         }, add = TRUE)
[10:32:39.221]     }
[10:32:39.221]     ...future.frame <- base::sys.nframe()
[10:32:39.221]     ...future.conditions <- base::list()
[10:32:39.221]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.221]     if (FALSE) {
[10:32:39.221]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.221]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.221]     }
[10:32:39.221]     ...future.result <- base::tryCatch({
[10:32:39.221]         base::withCallingHandlers({
[10:32:39.221]             ...future.value <- base::withVisible(base::local({
[10:32:39.221]                 ...future.makeSendCondition <- base::local({
[10:32:39.221]                   sendCondition <- NULL
[10:32:39.221]                   function(frame = 1L) {
[10:32:39.221]                     if (is.function(sendCondition)) 
[10:32:39.221]                       return(sendCondition)
[10:32:39.221]                     ns <- getNamespace("parallel")
[10:32:39.221]                     if (exists("sendData", mode = "function", 
[10:32:39.221]                       envir = ns)) {
[10:32:39.221]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.221]                         envir = ns)
[10:32:39.221]                       envir <- sys.frame(frame)
[10:32:39.221]                       master <- NULL
[10:32:39.221]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.221]                         !identical(envir, emptyenv())) {
[10:32:39.221]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.221]                           inherits = FALSE)) {
[10:32:39.221]                           master <- get("master", mode = "list", 
[10:32:39.221]                             envir = envir, inherits = FALSE)
[10:32:39.221]                           if (inherits(master, c("SOCKnode", 
[10:32:39.221]                             "SOCK0node"))) {
[10:32:39.221]                             sendCondition <<- function(cond) {
[10:32:39.221]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.221]                                 success = TRUE)
[10:32:39.221]                               parallel_sendData(master, data)
[10:32:39.221]                             }
[10:32:39.221]                             return(sendCondition)
[10:32:39.221]                           }
[10:32:39.221]                         }
[10:32:39.221]                         frame <- frame + 1L
[10:32:39.221]                         envir <- sys.frame(frame)
[10:32:39.221]                       }
[10:32:39.221]                     }
[10:32:39.221]                     sendCondition <<- function(cond) NULL
[10:32:39.221]                   }
[10:32:39.221]                 })
[10:32:39.221]                 withCallingHandlers({
[10:32:39.221]                   42
[10:32:39.221]                 }, immediateCondition = function(cond) {
[10:32:39.221]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.221]                   sendCondition(cond)
[10:32:39.221]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.221]                   {
[10:32:39.221]                     inherits <- base::inherits
[10:32:39.221]                     invokeRestart <- base::invokeRestart
[10:32:39.221]                     is.null <- base::is.null
[10:32:39.221]                     muffled <- FALSE
[10:32:39.221]                     if (inherits(cond, "message")) {
[10:32:39.221]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.221]                       if (muffled) 
[10:32:39.221]                         invokeRestart("muffleMessage")
[10:32:39.221]                     }
[10:32:39.221]                     else if (inherits(cond, "warning")) {
[10:32:39.221]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.221]                       if (muffled) 
[10:32:39.221]                         invokeRestart("muffleWarning")
[10:32:39.221]                     }
[10:32:39.221]                     else if (inherits(cond, "condition")) {
[10:32:39.221]                       if (!is.null(pattern)) {
[10:32:39.221]                         computeRestarts <- base::computeRestarts
[10:32:39.221]                         grepl <- base::grepl
[10:32:39.221]                         restarts <- computeRestarts(cond)
[10:32:39.221]                         for (restart in restarts) {
[10:32:39.221]                           name <- restart$name
[10:32:39.221]                           if (is.null(name)) 
[10:32:39.221]                             next
[10:32:39.221]                           if (!grepl(pattern, name)) 
[10:32:39.221]                             next
[10:32:39.221]                           invokeRestart(restart)
[10:32:39.221]                           muffled <- TRUE
[10:32:39.221]                           break
[10:32:39.221]                         }
[10:32:39.221]                       }
[10:32:39.221]                     }
[10:32:39.221]                     invisible(muffled)
[10:32:39.221]                   }
[10:32:39.221]                   muffleCondition(cond)
[10:32:39.221]                 })
[10:32:39.221]             }))
[10:32:39.221]             future::FutureResult(value = ...future.value$value, 
[10:32:39.221]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.221]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.221]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.221]                     ...future.globalenv.names))
[10:32:39.221]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.221]         }, condition = base::local({
[10:32:39.221]             c <- base::c
[10:32:39.221]             inherits <- base::inherits
[10:32:39.221]             invokeRestart <- base::invokeRestart
[10:32:39.221]             length <- base::length
[10:32:39.221]             list <- base::list
[10:32:39.221]             seq.int <- base::seq.int
[10:32:39.221]             signalCondition <- base::signalCondition
[10:32:39.221]             sys.calls <- base::sys.calls
[10:32:39.221]             `[[` <- base::`[[`
[10:32:39.221]             `+` <- base::`+`
[10:32:39.221]             `<<-` <- base::`<<-`
[10:32:39.221]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.221]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.221]                   3L)]
[10:32:39.221]             }
[10:32:39.221]             function(cond) {
[10:32:39.221]                 is_error <- inherits(cond, "error")
[10:32:39.221]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.221]                   NULL)
[10:32:39.221]                 if (is_error) {
[10:32:39.221]                   sessionInformation <- function() {
[10:32:39.221]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.221]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.221]                       search = base::search(), system = base::Sys.info())
[10:32:39.221]                   }
[10:32:39.221]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.221]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.221]                     cond$call), session = sessionInformation(), 
[10:32:39.221]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.221]                   signalCondition(cond)
[10:32:39.221]                 }
[10:32:39.221]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.221]                 "immediateCondition"))) {
[10:32:39.221]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.221]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.221]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.221]                   if (TRUE && !signal) {
[10:32:39.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.221]                     {
[10:32:39.221]                       inherits <- base::inherits
[10:32:39.221]                       invokeRestart <- base::invokeRestart
[10:32:39.221]                       is.null <- base::is.null
[10:32:39.221]                       muffled <- FALSE
[10:32:39.221]                       if (inherits(cond, "message")) {
[10:32:39.221]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.221]                         if (muffled) 
[10:32:39.221]                           invokeRestart("muffleMessage")
[10:32:39.221]                       }
[10:32:39.221]                       else if (inherits(cond, "warning")) {
[10:32:39.221]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.221]                         if (muffled) 
[10:32:39.221]                           invokeRestart("muffleWarning")
[10:32:39.221]                       }
[10:32:39.221]                       else if (inherits(cond, "condition")) {
[10:32:39.221]                         if (!is.null(pattern)) {
[10:32:39.221]                           computeRestarts <- base::computeRestarts
[10:32:39.221]                           grepl <- base::grepl
[10:32:39.221]                           restarts <- computeRestarts(cond)
[10:32:39.221]                           for (restart in restarts) {
[10:32:39.221]                             name <- restart$name
[10:32:39.221]                             if (is.null(name)) 
[10:32:39.221]                               next
[10:32:39.221]                             if (!grepl(pattern, name)) 
[10:32:39.221]                               next
[10:32:39.221]                             invokeRestart(restart)
[10:32:39.221]                             muffled <- TRUE
[10:32:39.221]                             break
[10:32:39.221]                           }
[10:32:39.221]                         }
[10:32:39.221]                       }
[10:32:39.221]                       invisible(muffled)
[10:32:39.221]                     }
[10:32:39.221]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.221]                   }
[10:32:39.221]                 }
[10:32:39.221]                 else {
[10:32:39.221]                   if (TRUE) {
[10:32:39.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.221]                     {
[10:32:39.221]                       inherits <- base::inherits
[10:32:39.221]                       invokeRestart <- base::invokeRestart
[10:32:39.221]                       is.null <- base::is.null
[10:32:39.221]                       muffled <- FALSE
[10:32:39.221]                       if (inherits(cond, "message")) {
[10:32:39.221]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.221]                         if (muffled) 
[10:32:39.221]                           invokeRestart("muffleMessage")
[10:32:39.221]                       }
[10:32:39.221]                       else if (inherits(cond, "warning")) {
[10:32:39.221]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.221]                         if (muffled) 
[10:32:39.221]                           invokeRestart("muffleWarning")
[10:32:39.221]                       }
[10:32:39.221]                       else if (inherits(cond, "condition")) {
[10:32:39.221]                         if (!is.null(pattern)) {
[10:32:39.221]                           computeRestarts <- base::computeRestarts
[10:32:39.221]                           grepl <- base::grepl
[10:32:39.221]                           restarts <- computeRestarts(cond)
[10:32:39.221]                           for (restart in restarts) {
[10:32:39.221]                             name <- restart$name
[10:32:39.221]                             if (is.null(name)) 
[10:32:39.221]                               next
[10:32:39.221]                             if (!grepl(pattern, name)) 
[10:32:39.221]                               next
[10:32:39.221]                             invokeRestart(restart)
[10:32:39.221]                             muffled <- TRUE
[10:32:39.221]                             break
[10:32:39.221]                           }
[10:32:39.221]                         }
[10:32:39.221]                       }
[10:32:39.221]                       invisible(muffled)
[10:32:39.221]                     }
[10:32:39.221]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.221]                   }
[10:32:39.221]                 }
[10:32:39.221]             }
[10:32:39.221]         }))
[10:32:39.221]     }, error = function(ex) {
[10:32:39.221]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.221]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.221]                 ...future.rng), started = ...future.startTime, 
[10:32:39.221]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.221]             version = "1.8"), class = "FutureResult")
[10:32:39.221]     }, finally = {
[10:32:39.221]         if (!identical(...future.workdir, getwd())) 
[10:32:39.221]             setwd(...future.workdir)
[10:32:39.221]         {
[10:32:39.221]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.221]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.221]             }
[10:32:39.221]             base::options(...future.oldOptions)
[10:32:39.221]             if (.Platform$OS.type == "windows") {
[10:32:39.221]                 old_names <- names(...future.oldEnvVars)
[10:32:39.221]                 envs <- base::Sys.getenv()
[10:32:39.221]                 names <- names(envs)
[10:32:39.221]                 common <- intersect(names, old_names)
[10:32:39.221]                 added <- setdiff(names, old_names)
[10:32:39.221]                 removed <- setdiff(old_names, names)
[10:32:39.221]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.221]                   envs[common]]
[10:32:39.221]                 NAMES <- toupper(changed)
[10:32:39.221]                 args <- list()
[10:32:39.221]                 for (kk in seq_along(NAMES)) {
[10:32:39.221]                   name <- changed[[kk]]
[10:32:39.221]                   NAME <- NAMES[[kk]]
[10:32:39.221]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.221]                     next
[10:32:39.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.221]                 }
[10:32:39.221]                 NAMES <- toupper(added)
[10:32:39.221]                 for (kk in seq_along(NAMES)) {
[10:32:39.221]                   name <- added[[kk]]
[10:32:39.221]                   NAME <- NAMES[[kk]]
[10:32:39.221]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.221]                     next
[10:32:39.221]                   args[[name]] <- ""
[10:32:39.221]                 }
[10:32:39.221]                 NAMES <- toupper(removed)
[10:32:39.221]                 for (kk in seq_along(NAMES)) {
[10:32:39.221]                   name <- removed[[kk]]
[10:32:39.221]                   NAME <- NAMES[[kk]]
[10:32:39.221]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.221]                     next
[10:32:39.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.221]                 }
[10:32:39.221]                 if (length(args) > 0) 
[10:32:39.221]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.221]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.221]             }
[10:32:39.221]             else {
[10:32:39.221]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.221]             }
[10:32:39.221]             {
[10:32:39.221]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.221]                   0L) {
[10:32:39.221]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.221]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.221]                   base::options(opts)
[10:32:39.221]                 }
[10:32:39.221]                 {
[10:32:39.221]                   {
[10:32:39.221]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.221]                     NULL
[10:32:39.221]                   }
[10:32:39.221]                   options(future.plan = NULL)
[10:32:39.221]                   if (is.na(NA_character_)) 
[10:32:39.221]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.221]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.221]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.221]                     .init = FALSE)
[10:32:39.221]                 }
[10:32:39.221]             }
[10:32:39.221]         }
[10:32:39.221]     })
[10:32:39.221]     if (TRUE) {
[10:32:39.221]         base::sink(type = "output", split = FALSE)
[10:32:39.221]         if (TRUE) {
[10:32:39.221]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.221]         }
[10:32:39.221]         else {
[10:32:39.221]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.221]         }
[10:32:39.221]         base::close(...future.stdout)
[10:32:39.221]         ...future.stdout <- NULL
[10:32:39.221]     }
[10:32:39.221]     ...future.result$conditions <- ...future.conditions
[10:32:39.221]     ...future.result$finished <- base::Sys.time()
[10:32:39.221]     ...future.result
[10:32:39.221] }
[10:32:39.224] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.225] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.226] - Validating connection of MultisessionFuture
[10:32:39.226] - received message: FutureResult
[10:32:39.226] - Received FutureResult
[10:32:39.226] - Erased future from FutureRegistry
[10:32:39.226] result() for ClusterFuture ...
[10:32:39.226] - result already collected: FutureResult
[10:32:39.226] result() for ClusterFuture ... done
[10:32:39.226] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.227] result() for ClusterFuture ...
[10:32:39.227] - result already collected: FutureResult
[10:32:39.227] result() for ClusterFuture ... done
[10:32:39.227] result() for ClusterFuture ...
[10:32:39.227] - result already collected: FutureResult
[10:32:39.227] result() for ClusterFuture ... done
[10:32:39.227] getGlobalsAndPackages() ...
[10:32:39.227] Searching for globals...
[10:32:39.227] 
[10:32:39.228] Searching for globals ... DONE
[10:32:39.228] - globals: [0] <none>
[10:32:39.228] getGlobalsAndPackages() ... DONE
[10:32:39.228] run() for ‘Future’ ...
[10:32:39.228] - state: ‘created’
[10:32:39.228] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:39.242] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.242] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:39.242]   - Field: ‘node’
[10:32:39.242]   - Field: ‘label’
[10:32:39.242]   - Field: ‘local’
[10:32:39.242]   - Field: ‘owner’
[10:32:39.242]   - Field: ‘envir’
[10:32:39.242]   - Field: ‘workers’
[10:32:39.242]   - Field: ‘packages’
[10:32:39.242]   - Field: ‘gc’
[10:32:39.243]   - Field: ‘conditions’
[10:32:39.243]   - Field: ‘persistent’
[10:32:39.243]   - Field: ‘expr’
[10:32:39.243]   - Field: ‘uuid’
[10:32:39.243]   - Field: ‘seed’
[10:32:39.243]   - Field: ‘version’
[10:32:39.243]   - Field: ‘result’
[10:32:39.243]   - Field: ‘asynchronous’
[10:32:39.243]   - Field: ‘calls’
[10:32:39.243]   - Field: ‘globals’
[10:32:39.243]   - Field: ‘stdout’
[10:32:39.243]   - Field: ‘earlySignal’
[10:32:39.244]   - Field: ‘lazy’
[10:32:39.244]   - Field: ‘state’
[10:32:39.244] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:39.244] - Launch lazy future ...
[10:32:39.244] Packages needed by the future expression (n = 0): <none>
[10:32:39.244] Packages needed by future strategies (n = 0): <none>
[10:32:39.245] {
[10:32:39.245]     {
[10:32:39.245]         {
[10:32:39.245]             ...future.startTime <- base::Sys.time()
[10:32:39.245]             {
[10:32:39.245]                 {
[10:32:39.245]                   {
[10:32:39.245]                     {
[10:32:39.245]                       base::local({
[10:32:39.245]                         has_future <- base::requireNamespace("future", 
[10:32:39.245]                           quietly = TRUE)
[10:32:39.245]                         if (has_future) {
[10:32:39.245]                           ns <- base::getNamespace("future")
[10:32:39.245]                           version <- ns[[".package"]][["version"]]
[10:32:39.245]                           if (is.null(version)) 
[10:32:39.245]                             version <- utils::packageVersion("future")
[10:32:39.245]                         }
[10:32:39.245]                         else {
[10:32:39.245]                           version <- NULL
[10:32:39.245]                         }
[10:32:39.245]                         if (!has_future || version < "1.8.0") {
[10:32:39.245]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.245]                             "", base::R.version$version.string), 
[10:32:39.245]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.245]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.245]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.245]                               "release", "version")], collapse = " "), 
[10:32:39.245]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.245]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.245]                             info)
[10:32:39.245]                           info <- base::paste(info, collapse = "; ")
[10:32:39.245]                           if (!has_future) {
[10:32:39.245]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.245]                               info)
[10:32:39.245]                           }
[10:32:39.245]                           else {
[10:32:39.245]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.245]                               info, version)
[10:32:39.245]                           }
[10:32:39.245]                           base::stop(msg)
[10:32:39.245]                         }
[10:32:39.245]                       })
[10:32:39.245]                     }
[10:32:39.245]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.245]                     base::options(mc.cores = 1L)
[10:32:39.245]                   }
[10:32:39.245]                   ...future.strategy.old <- future::plan("list")
[10:32:39.245]                   options(future.plan = NULL)
[10:32:39.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.245]                 }
[10:32:39.245]                 ...future.workdir <- getwd()
[10:32:39.245]             }
[10:32:39.245]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.245]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.245]         }
[10:32:39.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.245]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.245]             base::names(...future.oldOptions))
[10:32:39.245]     }
[10:32:39.245]     if (FALSE) {
[10:32:39.245]     }
[10:32:39.245]     else {
[10:32:39.245]         if (TRUE) {
[10:32:39.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.245]                 open = "w")
[10:32:39.245]         }
[10:32:39.245]         else {
[10:32:39.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.245]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.245]         }
[10:32:39.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.245]             base::sink(type = "output", split = FALSE)
[10:32:39.245]             base::close(...future.stdout)
[10:32:39.245]         }, add = TRUE)
[10:32:39.245]     }
[10:32:39.245]     ...future.frame <- base::sys.nframe()
[10:32:39.245]     ...future.conditions <- base::list()
[10:32:39.245]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.245]     if (FALSE) {
[10:32:39.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.245]     }
[10:32:39.245]     ...future.result <- base::tryCatch({
[10:32:39.245]         base::withCallingHandlers({
[10:32:39.245]             ...future.value <- base::withVisible(base::local({
[10:32:39.245]                 ...future.makeSendCondition <- base::local({
[10:32:39.245]                   sendCondition <- NULL
[10:32:39.245]                   function(frame = 1L) {
[10:32:39.245]                     if (is.function(sendCondition)) 
[10:32:39.245]                       return(sendCondition)
[10:32:39.245]                     ns <- getNamespace("parallel")
[10:32:39.245]                     if (exists("sendData", mode = "function", 
[10:32:39.245]                       envir = ns)) {
[10:32:39.245]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.245]                         envir = ns)
[10:32:39.245]                       envir <- sys.frame(frame)
[10:32:39.245]                       master <- NULL
[10:32:39.245]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.245]                         !identical(envir, emptyenv())) {
[10:32:39.245]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.245]                           inherits = FALSE)) {
[10:32:39.245]                           master <- get("master", mode = "list", 
[10:32:39.245]                             envir = envir, inherits = FALSE)
[10:32:39.245]                           if (inherits(master, c("SOCKnode", 
[10:32:39.245]                             "SOCK0node"))) {
[10:32:39.245]                             sendCondition <<- function(cond) {
[10:32:39.245]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.245]                                 success = TRUE)
[10:32:39.245]                               parallel_sendData(master, data)
[10:32:39.245]                             }
[10:32:39.245]                             return(sendCondition)
[10:32:39.245]                           }
[10:32:39.245]                         }
[10:32:39.245]                         frame <- frame + 1L
[10:32:39.245]                         envir <- sys.frame(frame)
[10:32:39.245]                       }
[10:32:39.245]                     }
[10:32:39.245]                     sendCondition <<- function(cond) NULL
[10:32:39.245]                   }
[10:32:39.245]                 })
[10:32:39.245]                 withCallingHandlers({
[10:32:39.245]                   42
[10:32:39.245]                 }, immediateCondition = function(cond) {
[10:32:39.245]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.245]                   sendCondition(cond)
[10:32:39.245]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.245]                   {
[10:32:39.245]                     inherits <- base::inherits
[10:32:39.245]                     invokeRestart <- base::invokeRestart
[10:32:39.245]                     is.null <- base::is.null
[10:32:39.245]                     muffled <- FALSE
[10:32:39.245]                     if (inherits(cond, "message")) {
[10:32:39.245]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.245]                       if (muffled) 
[10:32:39.245]                         invokeRestart("muffleMessage")
[10:32:39.245]                     }
[10:32:39.245]                     else if (inherits(cond, "warning")) {
[10:32:39.245]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.245]                       if (muffled) 
[10:32:39.245]                         invokeRestart("muffleWarning")
[10:32:39.245]                     }
[10:32:39.245]                     else if (inherits(cond, "condition")) {
[10:32:39.245]                       if (!is.null(pattern)) {
[10:32:39.245]                         computeRestarts <- base::computeRestarts
[10:32:39.245]                         grepl <- base::grepl
[10:32:39.245]                         restarts <- computeRestarts(cond)
[10:32:39.245]                         for (restart in restarts) {
[10:32:39.245]                           name <- restart$name
[10:32:39.245]                           if (is.null(name)) 
[10:32:39.245]                             next
[10:32:39.245]                           if (!grepl(pattern, name)) 
[10:32:39.245]                             next
[10:32:39.245]                           invokeRestart(restart)
[10:32:39.245]                           muffled <- TRUE
[10:32:39.245]                           break
[10:32:39.245]                         }
[10:32:39.245]                       }
[10:32:39.245]                     }
[10:32:39.245]                     invisible(muffled)
[10:32:39.245]                   }
[10:32:39.245]                   muffleCondition(cond)
[10:32:39.245]                 })
[10:32:39.245]             }))
[10:32:39.245]             future::FutureResult(value = ...future.value$value, 
[10:32:39.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.245]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.245]                     ...future.globalenv.names))
[10:32:39.245]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.245]         }, condition = base::local({
[10:32:39.245]             c <- base::c
[10:32:39.245]             inherits <- base::inherits
[10:32:39.245]             invokeRestart <- base::invokeRestart
[10:32:39.245]             length <- base::length
[10:32:39.245]             list <- base::list
[10:32:39.245]             seq.int <- base::seq.int
[10:32:39.245]             signalCondition <- base::signalCondition
[10:32:39.245]             sys.calls <- base::sys.calls
[10:32:39.245]             `[[` <- base::`[[`
[10:32:39.245]             `+` <- base::`+`
[10:32:39.245]             `<<-` <- base::`<<-`
[10:32:39.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.245]                   3L)]
[10:32:39.245]             }
[10:32:39.245]             function(cond) {
[10:32:39.245]                 is_error <- inherits(cond, "error")
[10:32:39.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.245]                   NULL)
[10:32:39.245]                 if (is_error) {
[10:32:39.245]                   sessionInformation <- function() {
[10:32:39.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.245]                       search = base::search(), system = base::Sys.info())
[10:32:39.245]                   }
[10:32:39.245]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.245]                     cond$call), session = sessionInformation(), 
[10:32:39.245]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.245]                   signalCondition(cond)
[10:32:39.245]                 }
[10:32:39.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.245]                 "immediateCondition"))) {
[10:32:39.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.245]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.245]                   if (TRUE && !signal) {
[10:32:39.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.245]                     {
[10:32:39.245]                       inherits <- base::inherits
[10:32:39.245]                       invokeRestart <- base::invokeRestart
[10:32:39.245]                       is.null <- base::is.null
[10:32:39.245]                       muffled <- FALSE
[10:32:39.245]                       if (inherits(cond, "message")) {
[10:32:39.245]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.245]                         if (muffled) 
[10:32:39.245]                           invokeRestart("muffleMessage")
[10:32:39.245]                       }
[10:32:39.245]                       else if (inherits(cond, "warning")) {
[10:32:39.245]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.245]                         if (muffled) 
[10:32:39.245]                           invokeRestart("muffleWarning")
[10:32:39.245]                       }
[10:32:39.245]                       else if (inherits(cond, "condition")) {
[10:32:39.245]                         if (!is.null(pattern)) {
[10:32:39.245]                           computeRestarts <- base::computeRestarts
[10:32:39.245]                           grepl <- base::grepl
[10:32:39.245]                           restarts <- computeRestarts(cond)
[10:32:39.245]                           for (restart in restarts) {
[10:32:39.245]                             name <- restart$name
[10:32:39.245]                             if (is.null(name)) 
[10:32:39.245]                               next
[10:32:39.245]                             if (!grepl(pattern, name)) 
[10:32:39.245]                               next
[10:32:39.245]                             invokeRestart(restart)
[10:32:39.245]                             muffled <- TRUE
[10:32:39.245]                             break
[10:32:39.245]                           }
[10:32:39.245]                         }
[10:32:39.245]                       }
[10:32:39.245]                       invisible(muffled)
[10:32:39.245]                     }
[10:32:39.245]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.245]                   }
[10:32:39.245]                 }
[10:32:39.245]                 else {
[10:32:39.245]                   if (TRUE) {
[10:32:39.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.245]                     {
[10:32:39.245]                       inherits <- base::inherits
[10:32:39.245]                       invokeRestart <- base::invokeRestart
[10:32:39.245]                       is.null <- base::is.null
[10:32:39.245]                       muffled <- FALSE
[10:32:39.245]                       if (inherits(cond, "message")) {
[10:32:39.245]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.245]                         if (muffled) 
[10:32:39.245]                           invokeRestart("muffleMessage")
[10:32:39.245]                       }
[10:32:39.245]                       else if (inherits(cond, "warning")) {
[10:32:39.245]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.245]                         if (muffled) 
[10:32:39.245]                           invokeRestart("muffleWarning")
[10:32:39.245]                       }
[10:32:39.245]                       else if (inherits(cond, "condition")) {
[10:32:39.245]                         if (!is.null(pattern)) {
[10:32:39.245]                           computeRestarts <- base::computeRestarts
[10:32:39.245]                           grepl <- base::grepl
[10:32:39.245]                           restarts <- computeRestarts(cond)
[10:32:39.245]                           for (restart in restarts) {
[10:32:39.245]                             name <- restart$name
[10:32:39.245]                             if (is.null(name)) 
[10:32:39.245]                               next
[10:32:39.245]                             if (!grepl(pattern, name)) 
[10:32:39.245]                               next
[10:32:39.245]                             invokeRestart(restart)
[10:32:39.245]                             muffled <- TRUE
[10:32:39.245]                             break
[10:32:39.245]                           }
[10:32:39.245]                         }
[10:32:39.245]                       }
[10:32:39.245]                       invisible(muffled)
[10:32:39.245]                     }
[10:32:39.245]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.245]                   }
[10:32:39.245]                 }
[10:32:39.245]             }
[10:32:39.245]         }))
[10:32:39.245]     }, error = function(ex) {
[10:32:39.245]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.245]                 ...future.rng), started = ...future.startTime, 
[10:32:39.245]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.245]             version = "1.8"), class = "FutureResult")
[10:32:39.245]     }, finally = {
[10:32:39.245]         if (!identical(...future.workdir, getwd())) 
[10:32:39.245]             setwd(...future.workdir)
[10:32:39.245]         {
[10:32:39.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.245]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.245]             }
[10:32:39.245]             base::options(...future.oldOptions)
[10:32:39.245]             if (.Platform$OS.type == "windows") {
[10:32:39.245]                 old_names <- names(...future.oldEnvVars)
[10:32:39.245]                 envs <- base::Sys.getenv()
[10:32:39.245]                 names <- names(envs)
[10:32:39.245]                 common <- intersect(names, old_names)
[10:32:39.245]                 added <- setdiff(names, old_names)
[10:32:39.245]                 removed <- setdiff(old_names, names)
[10:32:39.245]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.245]                   envs[common]]
[10:32:39.245]                 NAMES <- toupper(changed)
[10:32:39.245]                 args <- list()
[10:32:39.245]                 for (kk in seq_along(NAMES)) {
[10:32:39.245]                   name <- changed[[kk]]
[10:32:39.245]                   NAME <- NAMES[[kk]]
[10:32:39.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.245]                     next
[10:32:39.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.245]                 }
[10:32:39.245]                 NAMES <- toupper(added)
[10:32:39.245]                 for (kk in seq_along(NAMES)) {
[10:32:39.245]                   name <- added[[kk]]
[10:32:39.245]                   NAME <- NAMES[[kk]]
[10:32:39.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.245]                     next
[10:32:39.245]                   args[[name]] <- ""
[10:32:39.245]                 }
[10:32:39.245]                 NAMES <- toupper(removed)
[10:32:39.245]                 for (kk in seq_along(NAMES)) {
[10:32:39.245]                   name <- removed[[kk]]
[10:32:39.245]                   NAME <- NAMES[[kk]]
[10:32:39.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.245]                     next
[10:32:39.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.245]                 }
[10:32:39.245]                 if (length(args) > 0) 
[10:32:39.245]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.245]             }
[10:32:39.245]             else {
[10:32:39.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.245]             }
[10:32:39.245]             {
[10:32:39.245]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.245]                   0L) {
[10:32:39.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.245]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.245]                   base::options(opts)
[10:32:39.245]                 }
[10:32:39.245]                 {
[10:32:39.245]                   {
[10:32:39.245]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.245]                     NULL
[10:32:39.245]                   }
[10:32:39.245]                   options(future.plan = NULL)
[10:32:39.245]                   if (is.na(NA_character_)) 
[10:32:39.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.245]                     .init = FALSE)
[10:32:39.245]                 }
[10:32:39.245]             }
[10:32:39.245]         }
[10:32:39.245]     })
[10:32:39.245]     if (TRUE) {
[10:32:39.245]         base::sink(type = "output", split = FALSE)
[10:32:39.245]         if (TRUE) {
[10:32:39.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.245]         }
[10:32:39.245]         else {
[10:32:39.245]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.245]         }
[10:32:39.245]         base::close(...future.stdout)
[10:32:39.245]         ...future.stdout <- NULL
[10:32:39.245]     }
[10:32:39.245]     ...future.result$conditions <- ...future.conditions
[10:32:39.245]     ...future.result$finished <- base::Sys.time()
[10:32:39.245]     ...future.result
[10:32:39.245] }
[10:32:39.247] MultisessionFuture started
[10:32:39.247] - Launch lazy future ... done
[10:32:39.247] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.249] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.249] - Validating connection of MultisessionFuture
[10:32:39.249] - received message: FutureResult
[10:32:39.249] - Received FutureResult
[10:32:39.249] - Erased future from FutureRegistry
[10:32:39.249] result() for ClusterFuture ...
[10:32:39.249] - result already collected: FutureResult
[10:32:39.250] result() for ClusterFuture ... done
[10:32:39.250] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.250] result() for ClusterFuture ...
[10:32:39.250] - result already collected: FutureResult
[10:32:39.250] result() for ClusterFuture ... done
[10:32:39.250] result() for ClusterFuture ...
[10:32:39.250] - result already collected: FutureResult
[10:32:39.250] result() for ClusterFuture ... done
[10:32:39.251] getGlobalsAndPackages() ...
[10:32:39.251] Searching for globals...
[10:32:39.251] - globals found: [1] ‘{’
[10:32:39.251] Searching for globals ... DONE
[10:32:39.251] Resolving globals: FALSE
[10:32:39.252] 
[10:32:39.252] 
[10:32:39.252] getGlobalsAndPackages() ... DONE
[10:32:39.252] run() for ‘Future’ ...
[10:32:39.252] - state: ‘created’
[10:32:39.252] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:32:39.266] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.266] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:32:39.266]   - Field: ‘node’
[10:32:39.266]   - Field: ‘label’
[10:32:39.266]   - Field: ‘local’
[10:32:39.266]   - Field: ‘owner’
[10:32:39.266]   - Field: ‘envir’
[10:32:39.267]   - Field: ‘workers’
[10:32:39.267]   - Field: ‘packages’
[10:32:39.267]   - Field: ‘gc’
[10:32:39.267]   - Field: ‘conditions’
[10:32:39.267]   - Field: ‘persistent’
[10:32:39.267]   - Field: ‘expr’
[10:32:39.267]   - Field: ‘uuid’
[10:32:39.267]   - Field: ‘seed’
[10:32:39.267]   - Field: ‘version’
[10:32:39.267]   - Field: ‘result’
[10:32:39.267]   - Field: ‘asynchronous’
[10:32:39.268]   - Field: ‘calls’
[10:32:39.268]   - Field: ‘globals’
[10:32:39.268]   - Field: ‘stdout’
[10:32:39.268]   - Field: ‘earlySignal’
[10:32:39.268]   - Field: ‘lazy’
[10:32:39.268]   - Field: ‘state’
[10:32:39.268] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:32:39.268] - Launch lazy future ...
[10:32:39.268] Packages needed by the future expression (n = 0): <none>
[10:32:39.269] Packages needed by future strategies (n = 0): <none>
[10:32:39.269] {
[10:32:39.269]     {
[10:32:39.269]         {
[10:32:39.269]             ...future.startTime <- base::Sys.time()
[10:32:39.269]             {
[10:32:39.269]                 {
[10:32:39.269]                   {
[10:32:39.269]                     {
[10:32:39.269]                       base::local({
[10:32:39.269]                         has_future <- base::requireNamespace("future", 
[10:32:39.269]                           quietly = TRUE)
[10:32:39.269]                         if (has_future) {
[10:32:39.269]                           ns <- base::getNamespace("future")
[10:32:39.269]                           version <- ns[[".package"]][["version"]]
[10:32:39.269]                           if (is.null(version)) 
[10:32:39.269]                             version <- utils::packageVersion("future")
[10:32:39.269]                         }
[10:32:39.269]                         else {
[10:32:39.269]                           version <- NULL
[10:32:39.269]                         }
[10:32:39.269]                         if (!has_future || version < "1.8.0") {
[10:32:39.269]                           info <- base::c(r_version = base::gsub("R version ", 
[10:32:39.269]                             "", base::R.version$version.string), 
[10:32:39.269]                             platform = base::sprintf("%s (%s-bit)", 
[10:32:39.269]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:32:39.269]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:32:39.269]                               "release", "version")], collapse = " "), 
[10:32:39.269]                             hostname = base::Sys.info()[["nodename"]])
[10:32:39.269]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:32:39.269]                             info)
[10:32:39.269]                           info <- base::paste(info, collapse = "; ")
[10:32:39.269]                           if (!has_future) {
[10:32:39.269]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:32:39.269]                               info)
[10:32:39.269]                           }
[10:32:39.269]                           else {
[10:32:39.269]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:32:39.269]                               info, version)
[10:32:39.269]                           }
[10:32:39.269]                           base::stop(msg)
[10:32:39.269]                         }
[10:32:39.269]                       })
[10:32:39.269]                     }
[10:32:39.269]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:32:39.269]                     base::options(mc.cores = 1L)
[10:32:39.269]                   }
[10:32:39.269]                   ...future.strategy.old <- future::plan("list")
[10:32:39.269]                   options(future.plan = NULL)
[10:32:39.269]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.269]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:32:39.269]                 }
[10:32:39.269]                 ...future.workdir <- getwd()
[10:32:39.269]             }
[10:32:39.269]             ...future.oldOptions <- base::as.list(base::.Options)
[10:32:39.269]             ...future.oldEnvVars <- base::Sys.getenv()
[10:32:39.269]         }
[10:32:39.269]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:32:39.269]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:32:39.269]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:32:39.269]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:32:39.269]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:32:39.269]             future.stdout.windows.reencode = NULL, width = 80L)
[10:32:39.269]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:32:39.269]             base::names(...future.oldOptions))
[10:32:39.269]     }
[10:32:39.269]     if (FALSE) {
[10:32:39.269]     }
[10:32:39.269]     else {
[10:32:39.269]         if (TRUE) {
[10:32:39.269]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:32:39.269]                 open = "w")
[10:32:39.269]         }
[10:32:39.269]         else {
[10:32:39.269]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:32:39.269]                 windows = "NUL", "/dev/null"), open = "w")
[10:32:39.269]         }
[10:32:39.269]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:32:39.269]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:32:39.269]             base::sink(type = "output", split = FALSE)
[10:32:39.269]             base::close(...future.stdout)
[10:32:39.269]         }, add = TRUE)
[10:32:39.269]     }
[10:32:39.269]     ...future.frame <- base::sys.nframe()
[10:32:39.269]     ...future.conditions <- base::list()
[10:32:39.269]     ...future.rng <- base::globalenv()$.Random.seed
[10:32:39.269]     if (FALSE) {
[10:32:39.269]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:32:39.269]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:32:39.269]     }
[10:32:39.269]     ...future.result <- base::tryCatch({
[10:32:39.269]         base::withCallingHandlers({
[10:32:39.269]             ...future.value <- base::withVisible(base::local({
[10:32:39.269]                 ...future.makeSendCondition <- base::local({
[10:32:39.269]                   sendCondition <- NULL
[10:32:39.269]                   function(frame = 1L) {
[10:32:39.269]                     if (is.function(sendCondition)) 
[10:32:39.269]                       return(sendCondition)
[10:32:39.269]                     ns <- getNamespace("parallel")
[10:32:39.269]                     if (exists("sendData", mode = "function", 
[10:32:39.269]                       envir = ns)) {
[10:32:39.269]                       parallel_sendData <- get("sendData", mode = "function", 
[10:32:39.269]                         envir = ns)
[10:32:39.269]                       envir <- sys.frame(frame)
[10:32:39.269]                       master <- NULL
[10:32:39.269]                       while (!identical(envir, .GlobalEnv) && 
[10:32:39.269]                         !identical(envir, emptyenv())) {
[10:32:39.269]                         if (exists("master", mode = "list", envir = envir, 
[10:32:39.269]                           inherits = FALSE)) {
[10:32:39.269]                           master <- get("master", mode = "list", 
[10:32:39.269]                             envir = envir, inherits = FALSE)
[10:32:39.269]                           if (inherits(master, c("SOCKnode", 
[10:32:39.269]                             "SOCK0node"))) {
[10:32:39.269]                             sendCondition <<- function(cond) {
[10:32:39.269]                               data <- list(type = "VALUE", value = cond, 
[10:32:39.269]                                 success = TRUE)
[10:32:39.269]                               parallel_sendData(master, data)
[10:32:39.269]                             }
[10:32:39.269]                             return(sendCondition)
[10:32:39.269]                           }
[10:32:39.269]                         }
[10:32:39.269]                         frame <- frame + 1L
[10:32:39.269]                         envir <- sys.frame(frame)
[10:32:39.269]                       }
[10:32:39.269]                     }
[10:32:39.269]                     sendCondition <<- function(cond) NULL
[10:32:39.269]                   }
[10:32:39.269]                 })
[10:32:39.269]                 withCallingHandlers({
[10:32:39.269]                   {
[10:32:39.269]                     42
[10:32:39.269]                   }
[10:32:39.269]                 }, immediateCondition = function(cond) {
[10:32:39.269]                   sendCondition <- ...future.makeSendCondition()
[10:32:39.269]                   sendCondition(cond)
[10:32:39.269]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.269]                   {
[10:32:39.269]                     inherits <- base::inherits
[10:32:39.269]                     invokeRestart <- base::invokeRestart
[10:32:39.269]                     is.null <- base::is.null
[10:32:39.269]                     muffled <- FALSE
[10:32:39.269]                     if (inherits(cond, "message")) {
[10:32:39.269]                       muffled <- grepl(pattern, "muffleMessage")
[10:32:39.269]                       if (muffled) 
[10:32:39.269]                         invokeRestart("muffleMessage")
[10:32:39.269]                     }
[10:32:39.269]                     else if (inherits(cond, "warning")) {
[10:32:39.269]                       muffled <- grepl(pattern, "muffleWarning")
[10:32:39.269]                       if (muffled) 
[10:32:39.269]                         invokeRestart("muffleWarning")
[10:32:39.269]                     }
[10:32:39.269]                     else if (inherits(cond, "condition")) {
[10:32:39.269]                       if (!is.null(pattern)) {
[10:32:39.269]                         computeRestarts <- base::computeRestarts
[10:32:39.269]                         grepl <- base::grepl
[10:32:39.269]                         restarts <- computeRestarts(cond)
[10:32:39.269]                         for (restart in restarts) {
[10:32:39.269]                           name <- restart$name
[10:32:39.269]                           if (is.null(name)) 
[10:32:39.269]                             next
[10:32:39.269]                           if (!grepl(pattern, name)) 
[10:32:39.269]                             next
[10:32:39.269]                           invokeRestart(restart)
[10:32:39.269]                           muffled <- TRUE
[10:32:39.269]                           break
[10:32:39.269]                         }
[10:32:39.269]                       }
[10:32:39.269]                     }
[10:32:39.269]                     invisible(muffled)
[10:32:39.269]                   }
[10:32:39.269]                   muffleCondition(cond)
[10:32:39.269]                 })
[10:32:39.269]             }))
[10:32:39.269]             future::FutureResult(value = ...future.value$value, 
[10:32:39.269]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.269]                   ...future.rng), globalenv = if (FALSE) 
[10:32:39.269]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:32:39.269]                     ...future.globalenv.names))
[10:32:39.269]                 else NULL, started = ...future.startTime, version = "1.8")
[10:32:39.269]         }, condition = base::local({
[10:32:39.269]             c <- base::c
[10:32:39.269]             inherits <- base::inherits
[10:32:39.269]             invokeRestart <- base::invokeRestart
[10:32:39.269]             length <- base::length
[10:32:39.269]             list <- base::list
[10:32:39.269]             seq.int <- base::seq.int
[10:32:39.269]             signalCondition <- base::signalCondition
[10:32:39.269]             sys.calls <- base::sys.calls
[10:32:39.269]             `[[` <- base::`[[`
[10:32:39.269]             `+` <- base::`+`
[10:32:39.269]             `<<-` <- base::`<<-`
[10:32:39.269]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:32:39.269]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:32:39.269]                   3L)]
[10:32:39.269]             }
[10:32:39.269]             function(cond) {
[10:32:39.269]                 is_error <- inherits(cond, "error")
[10:32:39.269]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:32:39.269]                   NULL)
[10:32:39.269]                 if (is_error) {
[10:32:39.269]                   sessionInformation <- function() {
[10:32:39.269]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:32:39.269]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:32:39.269]                       search = base::search(), system = base::Sys.info())
[10:32:39.269]                   }
[10:32:39.269]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.269]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:32:39.269]                     cond$call), session = sessionInformation(), 
[10:32:39.269]                     timestamp = base::Sys.time(), signaled = 0L)
[10:32:39.269]                   signalCondition(cond)
[10:32:39.269]                 }
[10:32:39.269]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:32:39.269]                 "immediateCondition"))) {
[10:32:39.269]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:32:39.269]                   ...future.conditions[[length(...future.conditions) + 
[10:32:39.269]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:32:39.269]                   if (TRUE && !signal) {
[10:32:39.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.269]                     {
[10:32:39.269]                       inherits <- base::inherits
[10:32:39.269]                       invokeRestart <- base::invokeRestart
[10:32:39.269]                       is.null <- base::is.null
[10:32:39.269]                       muffled <- FALSE
[10:32:39.269]                       if (inherits(cond, "message")) {
[10:32:39.269]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.269]                         if (muffled) 
[10:32:39.269]                           invokeRestart("muffleMessage")
[10:32:39.269]                       }
[10:32:39.269]                       else if (inherits(cond, "warning")) {
[10:32:39.269]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.269]                         if (muffled) 
[10:32:39.269]                           invokeRestart("muffleWarning")
[10:32:39.269]                       }
[10:32:39.269]                       else if (inherits(cond, "condition")) {
[10:32:39.269]                         if (!is.null(pattern)) {
[10:32:39.269]                           computeRestarts <- base::computeRestarts
[10:32:39.269]                           grepl <- base::grepl
[10:32:39.269]                           restarts <- computeRestarts(cond)
[10:32:39.269]                           for (restart in restarts) {
[10:32:39.269]                             name <- restart$name
[10:32:39.269]                             if (is.null(name)) 
[10:32:39.269]                               next
[10:32:39.269]                             if (!grepl(pattern, name)) 
[10:32:39.269]                               next
[10:32:39.269]                             invokeRestart(restart)
[10:32:39.269]                             muffled <- TRUE
[10:32:39.269]                             break
[10:32:39.269]                           }
[10:32:39.269]                         }
[10:32:39.269]                       }
[10:32:39.269]                       invisible(muffled)
[10:32:39.269]                     }
[10:32:39.269]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.269]                   }
[10:32:39.269]                 }
[10:32:39.269]                 else {
[10:32:39.269]                   if (TRUE) {
[10:32:39.269]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:32:39.269]                     {
[10:32:39.269]                       inherits <- base::inherits
[10:32:39.269]                       invokeRestart <- base::invokeRestart
[10:32:39.269]                       is.null <- base::is.null
[10:32:39.269]                       muffled <- FALSE
[10:32:39.269]                       if (inherits(cond, "message")) {
[10:32:39.269]                         muffled <- grepl(pattern, "muffleMessage")
[10:32:39.269]                         if (muffled) 
[10:32:39.269]                           invokeRestart("muffleMessage")
[10:32:39.269]                       }
[10:32:39.269]                       else if (inherits(cond, "warning")) {
[10:32:39.269]                         muffled <- grepl(pattern, "muffleWarning")
[10:32:39.269]                         if (muffled) 
[10:32:39.269]                           invokeRestart("muffleWarning")
[10:32:39.269]                       }
[10:32:39.269]                       else if (inherits(cond, "condition")) {
[10:32:39.269]                         if (!is.null(pattern)) {
[10:32:39.269]                           computeRestarts <- base::computeRestarts
[10:32:39.269]                           grepl <- base::grepl
[10:32:39.269]                           restarts <- computeRestarts(cond)
[10:32:39.269]                           for (restart in restarts) {
[10:32:39.269]                             name <- restart$name
[10:32:39.269]                             if (is.null(name)) 
[10:32:39.269]                               next
[10:32:39.269]                             if (!grepl(pattern, name)) 
[10:32:39.269]                               next
[10:32:39.269]                             invokeRestart(restart)
[10:32:39.269]                             muffled <- TRUE
[10:32:39.269]                             break
[10:32:39.269]                           }
[10:32:39.269]                         }
[10:32:39.269]                       }
[10:32:39.269]                       invisible(muffled)
[10:32:39.269]                     }
[10:32:39.269]                     muffleCondition(cond, pattern = "^muffle")
[10:32:39.269]                   }
[10:32:39.269]                 }
[10:32:39.269]             }
[10:32:39.269]         }))
[10:32:39.269]     }, error = function(ex) {
[10:32:39.269]         base::structure(base::list(value = NULL, visible = NULL, 
[10:32:39.269]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:32:39.269]                 ...future.rng), started = ...future.startTime, 
[10:32:39.269]             finished = Sys.time(), session_uuid = NA_character_, 
[10:32:39.269]             version = "1.8"), class = "FutureResult")
[10:32:39.269]     }, finally = {
[10:32:39.269]         if (!identical(...future.workdir, getwd())) 
[10:32:39.269]             setwd(...future.workdir)
[10:32:39.269]         {
[10:32:39.269]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:32:39.269]                 ...future.oldOptions$nwarnings <- NULL
[10:32:39.269]             }
[10:32:39.269]             base::options(...future.oldOptions)
[10:32:39.269]             if (.Platform$OS.type == "windows") {
[10:32:39.269]                 old_names <- names(...future.oldEnvVars)
[10:32:39.269]                 envs <- base::Sys.getenv()
[10:32:39.269]                 names <- names(envs)
[10:32:39.269]                 common <- intersect(names, old_names)
[10:32:39.269]                 added <- setdiff(names, old_names)
[10:32:39.269]                 removed <- setdiff(old_names, names)
[10:32:39.269]                 changed <- common[...future.oldEnvVars[common] != 
[10:32:39.269]                   envs[common]]
[10:32:39.269]                 NAMES <- toupper(changed)
[10:32:39.269]                 args <- list()
[10:32:39.269]                 for (kk in seq_along(NAMES)) {
[10:32:39.269]                   name <- changed[[kk]]
[10:32:39.269]                   NAME <- NAMES[[kk]]
[10:32:39.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.269]                     next
[10:32:39.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.269]                 }
[10:32:39.269]                 NAMES <- toupper(added)
[10:32:39.269]                 for (kk in seq_along(NAMES)) {
[10:32:39.269]                   name <- added[[kk]]
[10:32:39.269]                   NAME <- NAMES[[kk]]
[10:32:39.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.269]                     next
[10:32:39.269]                   args[[name]] <- ""
[10:32:39.269]                 }
[10:32:39.269]                 NAMES <- toupper(removed)
[10:32:39.269]                 for (kk in seq_along(NAMES)) {
[10:32:39.269]                   name <- removed[[kk]]
[10:32:39.269]                   NAME <- NAMES[[kk]]
[10:32:39.269]                   if (name != NAME && is.element(NAME, old_names)) 
[10:32:39.269]                     next
[10:32:39.269]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:32:39.269]                 }
[10:32:39.269]                 if (length(args) > 0) 
[10:32:39.269]                   base::do.call(base::Sys.setenv, args = args)
[10:32:39.269]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:32:39.269]             }
[10:32:39.269]             else {
[10:32:39.269]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:32:39.269]             }
[10:32:39.269]             {
[10:32:39.269]                 if (base::length(...future.futureOptionsAdded) > 
[10:32:39.269]                   0L) {
[10:32:39.269]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:32:39.269]                   base::names(opts) <- ...future.futureOptionsAdded
[10:32:39.269]                   base::options(opts)
[10:32:39.269]                 }
[10:32:39.269]                 {
[10:32:39.269]                   {
[10:32:39.269]                     base::options(mc.cores = ...future.mc.cores.old)
[10:32:39.269]                     NULL
[10:32:39.269]                   }
[10:32:39.269]                   options(future.plan = NULL)
[10:32:39.269]                   if (is.na(NA_character_)) 
[10:32:39.269]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:32:39.269]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:32:39.269]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:32:39.269]                     .init = FALSE)
[10:32:39.269]                 }
[10:32:39.269]             }
[10:32:39.269]         }
[10:32:39.269]     })
[10:32:39.269]     if (TRUE) {
[10:32:39.269]         base::sink(type = "output", split = FALSE)
[10:32:39.269]         if (TRUE) {
[10:32:39.269]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:32:39.269]         }
[10:32:39.269]         else {
[10:32:39.269]             ...future.result["stdout"] <- base::list(NULL)
[10:32:39.269]         }
[10:32:39.269]         base::close(...future.stdout)
[10:32:39.269]         ...future.stdout <- NULL
[10:32:39.269]     }
[10:32:39.269]     ...future.result$conditions <- ...future.conditions
[10:32:39.269]     ...future.result$finished <- base::Sys.time()
[10:32:39.269]     ...future.result
[10:32:39.269] }
[10:32:39.272] MultisessionFuture started
[10:32:39.272] - Launch lazy future ... done
[10:32:39.272] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[10:32:39.273] receiveMessageFromWorker() for ClusterFuture ...
[10:32:39.273] - Validating connection of MultisessionFuture
[10:32:39.273] - received message: FutureResult
[10:32:39.273] - Received FutureResult
[10:32:39.274] - Erased future from FutureRegistry
[10:32:39.274] result() for ClusterFuture ...
[10:32:39.274] - result already collected: FutureResult
[10:32:39.274] result() for ClusterFuture ... done
[10:32:39.274] receiveMessageFromWorker() for ClusterFuture ... done
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 657320bd-11a5-6215-5564-36417817f844
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:32:39.274] result() for ClusterFuture ...
[10:32:39.274] - result already collected: FutureResult
[10:32:39.274] result() for ClusterFuture ... done
[10:32:39.274] result() for ClusterFuture ...
[10:32:39.274] - result already collected: FutureResult
[10:32:39.275] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[10:32:39.275] plan(): Setting new future strategy stack:
[10:32:39.275] List of future strategies:
[10:32:39.275] 1. FutureStrategy:
[10:32:39.275]    - args: function (..., envir = parent.frame())
[10:32:39.275]    - tweaked: FALSE
[10:32:39.275]    - call: future::plan(oplan)
[10:32:39.276] plan(): nbrOfWorkers() = 1
> 
