
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[13:38:31.409] plan(): Setting new future strategy stack:
[13:38:31.410] List of future strategies:
[13:38:31.410] 1. sequential:
[13:38:31.410]    - args: function (..., envir = parent.frame())
[13:38:31.410]    - tweaked: FALSE
[13:38:31.410]    - call: future::plan("sequential")
[13:38:31.421] plan(): nbrOfWorkers() = 1
> 
> message("*** utils ...")
*** utils ...
> 
> message("*** hpaste() ...")
*** hpaste() ...
> 
> # Some vectors
> x <- 1:6
> y <- 10:1
> z <- LETTERS[x]
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Abbreviation of output vector
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> printf("x = %s.\n", hpaste(x))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 2))
x = 1, 2, ..., 6.
> ## x = 1, 2, ..., 6.
> 
> printf("x = %s.\n", hpaste(x, maxHead = 3)) # Default
x = 1, 2, 3, ..., 6.
> ## x = 1, 2, 3, ..., 6.
> 
> # It will never output 1, 2, 3, 4, ..., 6
> printf("x = %s.\n", hpaste(x, maxHead = 4))
x = 1, 2, 3, 4, 5, 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # Showing the tail
> printf("x = %s.\n", hpaste(x, maxHead = 1, maxTail = 2))
x = 1, ..., 5, 6.
> ## x = 1, ..., 5, 6.
> 
> # Turning off abbreviation
> printf("y = %s.\n", hpaste(y, maxHead = Inf))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> ## ...or simply
> printf("y = %s.\n", paste(y, collapse = ", "))
y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1.
> ## y = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
> 
> # Change last separator
> printf("x = %s.\n", hpaste(x, lastCollapse = " and "))
x = 1, 2, 3, 4, 5 and 6.
> ## x = 1, 2, 3, 4, 5 and 6.
> 
> # No collapse
> stopifnot(all(hpaste(x, collapse = NULL) == x))
> 
> # Empty input
> stopifnot(identical(hpaste(character(0)), character(0)))
> 
> message("*** hpaste() ... DONE")
*** hpaste() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # asIEC()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** asIEC() ...")
*** asIEC() ...
> 
> for (size in c(0, 10 ^ (0:20))) {
+   cat(sprintf("Size: %.f bytes = %s\n", size, asIEC(size)))
+ }
Size: 0 bytes = 0 bytes
Size: 1 bytes = 1 bytes
Size: 10 bytes = 10 bytes
Size: 100 bytes = 100 bytes
Size: 1000 bytes = 0.98 KiB
Size: 10000 bytes = 9.77 KiB
Size: 100000 bytes = 97.66 KiB
Size: 1000000 bytes = 976.56 KiB
Size: 10000000 bytes = 9.54 MiB
Size: 100000000 bytes = 95.37 MiB
Size: 1000000000 bytes = 953.67 MiB
Size: 10000000000 bytes = 9.31 GiB
Size: 100000000000 bytes = 93.13 GiB
Size: 1000000000000 bytes = 931.32 GiB
Size: 10000000000000 bytes = 9.09 TiB
Size: 100000000000000 bytes = 90.95 TiB
Size: 1000000000000000 bytes = 909.49 TiB
Size: 10000000000000000 bytes = 8.88 PiB
Size: 100000000000000000 bytes = 88.82 PiB
Size: 1000000000000000000 bytes = 888.18 PiB
Size: 10000000000000000000 bytes = 8.67 EiB
Size: 100000000000000000000 bytes = 86.74 EiB
> 
> message("*** asIEC() ... DONE")
*** asIEC() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # .length()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** .length() ...")
*** .length() ...
> .length <- future:::.length
> 
> objs <- list(
+   a = 1:3,
+   b = as.list(1:3),
+   c = structure(as.list(1:3), class = c("foo", "list")),
+   d = data.frame(a = 1:3),
+   e = as.environment(list(a = 1:3))
+ )
> truth <- c(a = 3L, b = 3L, c = 3L, d = 1L, e = 1L)
> 
> ## Special case: length(x) == 5, but .length(x) == 2
> ## BUG FIX: https://github.com/HenrikBengtsson/future/issues/164
> if (requireNamespace("tools")) {
+   objs[["f"]] <- structure(list("foo", length = 5L), class = "pdf_doc")
+   truth["f"] <- 2L
+ }
> 
> for (name in names(objs)) {
+   obj <- objs[[name]]
+   len <- length(obj)
+   .len <- .length(obj)
+   cat(sprintf("%s: length = %d, .length = %d, expected = %d\n",
+               name, len, .len, truth[name]))
+   stopifnot(.len == truth[name])
+ }
a: length = 3, .length = 3, expected = 3
b: length = 3, .length = 3, expected = 3
c: length = 3, .length = 3, expected = 3
d: length = 1, .length = 1, expected = 1
e: length = 1, .length = 1, expected = 1
f: length = 2, .length = 2, expected = 2
> 
> message("*** .length() ... DONE")
*** .length() ... DONE
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # debug()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** mdebug() ...")
*** mdebug() ...
> 
> mdebug("Hello #", 1)
[13:38:31.445] Hello #1
> mdebugf("Hello #%d", 1)
[13:38:31.445] Hello #1
> options(future.debug = TRUE)
> 
> mdebug("Hello #", 2)
[13:38:31.445] Hello #2
> mdebugf("Hello #%d", 2)
[13:38:31.445] Hello #2
> options(future.debug = FALSE)
> 
> mdebug("Hello #", 3)
NULL
> mdebugf("Hello #%d", 3)
NULL
> 
> message("*** mdebug() ... DONE")
*** mdebug() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # geval() et al.
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** geval() et al. ...")
*** geval() et al. ...
> 
> gls <- function(..., envir = .GlobalEnv) ls(..., envir = envir)
> 
> message("- gls() ...")
- gls() ...
> genv <- new.env(parent = globalenv())
> vars <- gls(envir = genv)
> print(vars)
character(0)
> stopifnot(length(vars) == 0)
> 
> message("- gassign() ...")
- gassign() ...
> gassign("a", 1, envir = genv)
> vars <- gls(envir = genv)
> print(vars)
[1] "a"
> stopifnot(length(vars) == 1)
> 
> message("- grmall() ...")
- grmall() ...
> grmall(envir = genv)
> vars <- gls(envir = genv)
> print(vars)
character(0)
> stopifnot(length(vars) == 0)
> 
> message("- geval() ...")
- geval() ...
> gassign("a", 1, envir = genv)
> res <- geval(substitute(a), envir = genv)
> print(res)
[1] 1
> vars <- gls(envir = genv)
> print(vars)
[1] "a"
> stopifnot(length(vars) == 1)
> 
> 
> message("*** geval() et al. ... DONE")
*** geval() et al. ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # requirePackages()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** requirePackages() ...")
*** requirePackages() ...
> 
> res <- requirePackages("future")
Loading required package: future
> res <- requirePackages(c("future", "listenv"))
Loading required package: listenv
> 
> res <- try(requirePackages("<unknown package>"), silent = TRUE)
Loading required package: <unknown package>
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘<unknown package>’
> stopifnot(inherits(res, "try-error"))
> 
> message("*** requirePackages() ... DONE")
*** requirePackages() ... DONE
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> # importParallel()
> # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> message("*** importParallel() ...")
*** importParallel() ...
> 
> mclapply <- importParallel("mclapply")
> stopifnot(identical(mclapply, parallel::mclapply))
> 
> ns <- getNamespace("parallel")
> if (exists("sendCall", envir = ns, mode = "function")) {
+   sendCall <- importParallel("sendCall")
+   stopifnot(identical(sendCall, parallel:::sendCall))
+ } else {
+   res <- try(importParallel("sendCall"), silent = TRUE)
+   stopifnot(inherits(res, "try-error"))
+ }
> 
> res <- try(importParallel("<unknown function>"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** importParallel() ... DONE")
*** importParallel() ... DONE
> 
> message("*** utils ... DONE")
*** utils ... DONE
> 
> source("incl/end.R")
> 
