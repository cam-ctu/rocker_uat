
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:38:28.368] plan(): Setting new future strategy stack:
[13:38:28.369] List of future strategies:
[13:38:28.369] 1. sequential:
[13:38:28.369]    - args: function (..., envir = parent.frame())
[13:38:28.369]    - tweaked: FALSE
[13:38:28.369]    - call: future::plan("sequential")
[13:38:28.383] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[13:38:28.429] plan(): Setting new future strategy stack:
[13:38:28.429] List of future strategies:
[13:38:28.429] 1. sequential:
[13:38:28.429]    - args: function (..., envir = parent.frame())
[13:38:28.429]    - tweaked: FALSE
[13:38:28.429]    - call: plan(strategy)
[13:38:28.440] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[13:38:28.441] getGlobalsAndPackages() ...
[13:38:28.441] Searching for globals...
[13:38:28.451] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.451] Searching for globals ... DONE
[13:38:28.451] Resolving globals: FALSE
[13:38:28.452] 
[13:38:28.452] - packages: [1] ‘utils’
[13:38:28.452] getGlobalsAndPackages() ... DONE
[13:38:28.453] run() for ‘Future’ ...
[13:38:28.453] - state: ‘created’
[13:38:28.454] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.454] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.454]   - Field: ‘label’
[13:38:28.454]   - Field: ‘local’
[13:38:28.454]   - Field: ‘owner’
[13:38:28.454]   - Field: ‘envir’
[13:38:28.455]   - Field: ‘packages’
[13:38:28.455]   - Field: ‘gc’
[13:38:28.455]   - Field: ‘conditions’
[13:38:28.455]   - Field: ‘expr’
[13:38:28.455]   - Field: ‘uuid’
[13:38:28.455]   - Field: ‘seed’
[13:38:28.455]   - Field: ‘version’
[13:38:28.455]   - Field: ‘result’
[13:38:28.455]   - Field: ‘asynchronous’
[13:38:28.455]   - Field: ‘calls’
[13:38:28.455]   - Field: ‘globals’
[13:38:28.456]   - Field: ‘stdout’
[13:38:28.456]   - Field: ‘earlySignal’
[13:38:28.456]   - Field: ‘lazy’
[13:38:28.456]   - Field: ‘state’
[13:38:28.456] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.456] - Launch lazy future ...
[13:38:28.457] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.457] Packages needed by future strategies (n = 0): <none>
[13:38:28.458] {
[13:38:28.458]     {
[13:38:28.458]         {
[13:38:28.458]             ...future.startTime <- base::Sys.time()
[13:38:28.458]             {
[13:38:28.458]                 {
[13:38:28.458]                   {
[13:38:28.458]                     {
[13:38:28.458]                       base::local({
[13:38:28.458]                         has_future <- base::requireNamespace("future", 
[13:38:28.458]                           quietly = TRUE)
[13:38:28.458]                         if (has_future) {
[13:38:28.458]                           ns <- base::getNamespace("future")
[13:38:28.458]                           version <- ns[[".package"]][["version"]]
[13:38:28.458]                           if (is.null(version)) 
[13:38:28.458]                             version <- utils::packageVersion("future")
[13:38:28.458]                         }
[13:38:28.458]                         else {
[13:38:28.458]                           version <- NULL
[13:38:28.458]                         }
[13:38:28.458]                         if (!has_future || version < "1.8.0") {
[13:38:28.458]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.458]                             "", base::R.version$version.string), 
[13:38:28.458]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.458]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.458]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.458]                               "release", "version")], collapse = " "), 
[13:38:28.458]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.458]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.458]                             info)
[13:38:28.458]                           info <- base::paste(info, collapse = "; ")
[13:38:28.458]                           if (!has_future) {
[13:38:28.458]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.458]                               info)
[13:38:28.458]                           }
[13:38:28.458]                           else {
[13:38:28.458]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.458]                               info, version)
[13:38:28.458]                           }
[13:38:28.458]                           base::stop(msg)
[13:38:28.458]                         }
[13:38:28.458]                       })
[13:38:28.458]                     }
[13:38:28.458]                     base::local({
[13:38:28.458]                       for (pkg in "utils") {
[13:38:28.458]                         base::loadNamespace(pkg)
[13:38:28.458]                         base::library(pkg, character.only = TRUE)
[13:38:28.458]                       }
[13:38:28.458]                     })
[13:38:28.458]                   }
[13:38:28.458]                   ...future.strategy.old <- future::plan("list")
[13:38:28.458]                   options(future.plan = NULL)
[13:38:28.458]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.458]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.458]                 }
[13:38:28.458]                 ...future.workdir <- getwd()
[13:38:28.458]             }
[13:38:28.458]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.458]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.458]         }
[13:38:28.458]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.458]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.458]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.458]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.458]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.458]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.458]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.458]             base::names(...future.oldOptions))
[13:38:28.458]     }
[13:38:28.458]     if (FALSE) {
[13:38:28.458]     }
[13:38:28.458]     else {
[13:38:28.458]         if (TRUE) {
[13:38:28.458]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.458]                 open = "w")
[13:38:28.458]         }
[13:38:28.458]         else {
[13:38:28.458]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.458]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.458]         }
[13:38:28.458]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.458]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.458]             base::sink(type = "output", split = FALSE)
[13:38:28.458]             base::close(...future.stdout)
[13:38:28.458]         }, add = TRUE)
[13:38:28.458]     }
[13:38:28.458]     ...future.frame <- base::sys.nframe()
[13:38:28.458]     ...future.conditions <- base::list()
[13:38:28.458]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.458]     if (FALSE) {
[13:38:28.458]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.458]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.458]     }
[13:38:28.458]     ...future.result <- base::tryCatch({
[13:38:28.458]         base::withCallingHandlers({
[13:38:28.458]             ...future.value <- base::withVisible(base::local({
[13:38:28.458]                 print(1:50)
[13:38:28.458]                 str(1:50)
[13:38:28.458]                 cat(letters, sep = "-")
[13:38:28.458]                 cat(1:6, collapse = "\n")
[13:38:28.458]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.458]                 42L
[13:38:28.458]             }))
[13:38:28.458]             future::FutureResult(value = ...future.value$value, 
[13:38:28.458]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.458]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.458]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.458]                     ...future.globalenv.names))
[13:38:28.458]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.458]         }, condition = base::local({
[13:38:28.458]             c <- base::c
[13:38:28.458]             inherits <- base::inherits
[13:38:28.458]             invokeRestart <- base::invokeRestart
[13:38:28.458]             length <- base::length
[13:38:28.458]             list <- base::list
[13:38:28.458]             seq.int <- base::seq.int
[13:38:28.458]             signalCondition <- base::signalCondition
[13:38:28.458]             sys.calls <- base::sys.calls
[13:38:28.458]             `[[` <- base::`[[`
[13:38:28.458]             `+` <- base::`+`
[13:38:28.458]             `<<-` <- base::`<<-`
[13:38:28.458]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.458]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.458]                   3L)]
[13:38:28.458]             }
[13:38:28.458]             function(cond) {
[13:38:28.458]                 is_error <- inherits(cond, "error")
[13:38:28.458]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.458]                   NULL)
[13:38:28.458]                 if (is_error) {
[13:38:28.458]                   sessionInformation <- function() {
[13:38:28.458]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.458]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.458]                       search = base::search(), system = base::Sys.info())
[13:38:28.458]                   }
[13:38:28.458]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.458]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.458]                     cond$call), session = sessionInformation(), 
[13:38:28.458]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.458]                   signalCondition(cond)
[13:38:28.458]                 }
[13:38:28.458]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.458]                 "immediateCondition"))) {
[13:38:28.458]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.458]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.458]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.458]                   if (TRUE && !signal) {
[13:38:28.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.458]                     {
[13:38:28.458]                       inherits <- base::inherits
[13:38:28.458]                       invokeRestart <- base::invokeRestart
[13:38:28.458]                       is.null <- base::is.null
[13:38:28.458]                       muffled <- FALSE
[13:38:28.458]                       if (inherits(cond, "message")) {
[13:38:28.458]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.458]                         if (muffled) 
[13:38:28.458]                           invokeRestart("muffleMessage")
[13:38:28.458]                       }
[13:38:28.458]                       else if (inherits(cond, "warning")) {
[13:38:28.458]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.458]                         if (muffled) 
[13:38:28.458]                           invokeRestart("muffleWarning")
[13:38:28.458]                       }
[13:38:28.458]                       else if (inherits(cond, "condition")) {
[13:38:28.458]                         if (!is.null(pattern)) {
[13:38:28.458]                           computeRestarts <- base::computeRestarts
[13:38:28.458]                           grepl <- base::grepl
[13:38:28.458]                           restarts <- computeRestarts(cond)
[13:38:28.458]                           for (restart in restarts) {
[13:38:28.458]                             name <- restart$name
[13:38:28.458]                             if (is.null(name)) 
[13:38:28.458]                               next
[13:38:28.458]                             if (!grepl(pattern, name)) 
[13:38:28.458]                               next
[13:38:28.458]                             invokeRestart(restart)
[13:38:28.458]                             muffled <- TRUE
[13:38:28.458]                             break
[13:38:28.458]                           }
[13:38:28.458]                         }
[13:38:28.458]                       }
[13:38:28.458]                       invisible(muffled)
[13:38:28.458]                     }
[13:38:28.458]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.458]                   }
[13:38:28.458]                 }
[13:38:28.458]                 else {
[13:38:28.458]                   if (TRUE) {
[13:38:28.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.458]                     {
[13:38:28.458]                       inherits <- base::inherits
[13:38:28.458]                       invokeRestart <- base::invokeRestart
[13:38:28.458]                       is.null <- base::is.null
[13:38:28.458]                       muffled <- FALSE
[13:38:28.458]                       if (inherits(cond, "message")) {
[13:38:28.458]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.458]                         if (muffled) 
[13:38:28.458]                           invokeRestart("muffleMessage")
[13:38:28.458]                       }
[13:38:28.458]                       else if (inherits(cond, "warning")) {
[13:38:28.458]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.458]                         if (muffled) 
[13:38:28.458]                           invokeRestart("muffleWarning")
[13:38:28.458]                       }
[13:38:28.458]                       else if (inherits(cond, "condition")) {
[13:38:28.458]                         if (!is.null(pattern)) {
[13:38:28.458]                           computeRestarts <- base::computeRestarts
[13:38:28.458]                           grepl <- base::grepl
[13:38:28.458]                           restarts <- computeRestarts(cond)
[13:38:28.458]                           for (restart in restarts) {
[13:38:28.458]                             name <- restart$name
[13:38:28.458]                             if (is.null(name)) 
[13:38:28.458]                               next
[13:38:28.458]                             if (!grepl(pattern, name)) 
[13:38:28.458]                               next
[13:38:28.458]                             invokeRestart(restart)
[13:38:28.458]                             muffled <- TRUE
[13:38:28.458]                             break
[13:38:28.458]                           }
[13:38:28.458]                         }
[13:38:28.458]                       }
[13:38:28.458]                       invisible(muffled)
[13:38:28.458]                     }
[13:38:28.458]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.458]                   }
[13:38:28.458]                 }
[13:38:28.458]             }
[13:38:28.458]         }))
[13:38:28.458]     }, error = function(ex) {
[13:38:28.458]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.458]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.458]                 ...future.rng), started = ...future.startTime, 
[13:38:28.458]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.458]             version = "1.8"), class = "FutureResult")
[13:38:28.458]     }, finally = {
[13:38:28.458]         if (!identical(...future.workdir, getwd())) 
[13:38:28.458]             setwd(...future.workdir)
[13:38:28.458]         {
[13:38:28.458]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.458]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.458]             }
[13:38:28.458]             base::options(...future.oldOptions)
[13:38:28.458]             if (.Platform$OS.type == "windows") {
[13:38:28.458]                 old_names <- names(...future.oldEnvVars)
[13:38:28.458]                 envs <- base::Sys.getenv()
[13:38:28.458]                 names <- names(envs)
[13:38:28.458]                 common <- intersect(names, old_names)
[13:38:28.458]                 added <- setdiff(names, old_names)
[13:38:28.458]                 removed <- setdiff(old_names, names)
[13:38:28.458]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.458]                   envs[common]]
[13:38:28.458]                 NAMES <- toupper(changed)
[13:38:28.458]                 args <- list()
[13:38:28.458]                 for (kk in seq_along(NAMES)) {
[13:38:28.458]                   name <- changed[[kk]]
[13:38:28.458]                   NAME <- NAMES[[kk]]
[13:38:28.458]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.458]                     next
[13:38:28.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.458]                 }
[13:38:28.458]                 NAMES <- toupper(added)
[13:38:28.458]                 for (kk in seq_along(NAMES)) {
[13:38:28.458]                   name <- added[[kk]]
[13:38:28.458]                   NAME <- NAMES[[kk]]
[13:38:28.458]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.458]                     next
[13:38:28.458]                   args[[name]] <- ""
[13:38:28.458]                 }
[13:38:28.458]                 NAMES <- toupper(removed)
[13:38:28.458]                 for (kk in seq_along(NAMES)) {
[13:38:28.458]                   name <- removed[[kk]]
[13:38:28.458]                   NAME <- NAMES[[kk]]
[13:38:28.458]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.458]                     next
[13:38:28.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.458]                 }
[13:38:28.458]                 if (length(args) > 0) 
[13:38:28.458]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.458]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.458]             }
[13:38:28.458]             else {
[13:38:28.458]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.458]             }
[13:38:28.458]             {
[13:38:28.458]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.458]                   0L) {
[13:38:28.458]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.458]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.458]                   base::options(opts)
[13:38:28.458]                 }
[13:38:28.458]                 {
[13:38:28.458]                   {
[13:38:28.458]                     NULL
[13:38:28.458]                     RNGkind("Mersenne-Twister")
[13:38:28.458]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.458]                       inherits = FALSE)
[13:38:28.458]                   }
[13:38:28.458]                   options(future.plan = NULL)
[13:38:28.458]                   if (is.na(NA_character_)) 
[13:38:28.458]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.458]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.458]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.458]                     .init = FALSE)
[13:38:28.458]                 }
[13:38:28.458]             }
[13:38:28.458]         }
[13:38:28.458]     })
[13:38:28.458]     if (TRUE) {
[13:38:28.458]         base::sink(type = "output", split = FALSE)
[13:38:28.458]         if (TRUE) {
[13:38:28.458]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.458]         }
[13:38:28.458]         else {
[13:38:28.458]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.458]         }
[13:38:28.458]         base::close(...future.stdout)
[13:38:28.458]         ...future.stdout <- NULL
[13:38:28.458]     }
[13:38:28.458]     ...future.result$conditions <- ...future.conditions
[13:38:28.458]     ...future.result$finished <- base::Sys.time()
[13:38:28.458]     ...future.result
[13:38:28.458] }
[13:38:28.460] plan(): Setting new future strategy stack:
[13:38:28.460] List of future strategies:
[13:38:28.460] 1. sequential:
[13:38:28.460]    - args: function (..., envir = parent.frame())
[13:38:28.460]    - tweaked: FALSE
[13:38:28.460]    - call: NULL
[13:38:28.461] plan(): nbrOfWorkers() = 1
[13:38:28.462] plan(): Setting new future strategy stack:
[13:38:28.463] List of future strategies:
[13:38:28.463] 1. sequential:
[13:38:28.463]    - args: function (..., envir = parent.frame())
[13:38:28.463]    - tweaked: FALSE
[13:38:28.463]    - call: plan(strategy)
[13:38:28.463] plan(): nbrOfWorkers() = 1
[13:38:28.463] SequentialFuture started (and completed)
[13:38:28.464] - Launch lazy future ... done
[13:38:28.464] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "0d5a888a-6fed-d505-4c34-84f1338acd7c"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90952
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.00332737 secs (started 2025-01-07 13:38:28.460208)
version: 1.8
[13:38:28.474] getGlobalsAndPackages() ...
[13:38:28.474] Searching for globals...
[13:38:28.479] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.479] Searching for globals ... DONE
[13:38:28.479] Resolving globals: FALSE
[13:38:28.480] 
[13:38:28.480] - packages: [1] ‘utils’
[13:38:28.480] getGlobalsAndPackages() ... DONE
[13:38:28.480] run() for ‘Future’ ...
[13:38:28.480] - state: ‘created’
[13:38:28.481] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.481] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.481] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.481]   - Field: ‘label’
[13:38:28.481]   - Field: ‘local’
[13:38:28.481]   - Field: ‘owner’
[13:38:28.481]   - Field: ‘envir’
[13:38:28.481]   - Field: ‘packages’
[13:38:28.482]   - Field: ‘gc’
[13:38:28.482]   - Field: ‘conditions’
[13:38:28.482]   - Field: ‘expr’
[13:38:28.482]   - Field: ‘uuid’
[13:38:28.482]   - Field: ‘seed’
[13:38:28.482]   - Field: ‘version’
[13:38:28.482]   - Field: ‘result’
[13:38:28.482]   - Field: ‘asynchronous’
[13:38:28.482]   - Field: ‘calls’
[13:38:28.482]   - Field: ‘globals’
[13:38:28.482]   - Field: ‘stdout’
[13:38:28.483]   - Field: ‘earlySignal’
[13:38:28.483]   - Field: ‘lazy’
[13:38:28.483]   - Field: ‘state’
[13:38:28.483] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.483] - Launch lazy future ...
[13:38:28.483] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.483] Packages needed by future strategies (n = 0): <none>
[13:38:28.484] {
[13:38:28.484]     {
[13:38:28.484]         {
[13:38:28.484]             ...future.startTime <- base::Sys.time()
[13:38:28.484]             {
[13:38:28.484]                 {
[13:38:28.484]                   {
[13:38:28.484]                     {
[13:38:28.484]                       base::local({
[13:38:28.484]                         has_future <- base::requireNamespace("future", 
[13:38:28.484]                           quietly = TRUE)
[13:38:28.484]                         if (has_future) {
[13:38:28.484]                           ns <- base::getNamespace("future")
[13:38:28.484]                           version <- ns[[".package"]][["version"]]
[13:38:28.484]                           if (is.null(version)) 
[13:38:28.484]                             version <- utils::packageVersion("future")
[13:38:28.484]                         }
[13:38:28.484]                         else {
[13:38:28.484]                           version <- NULL
[13:38:28.484]                         }
[13:38:28.484]                         if (!has_future || version < "1.8.0") {
[13:38:28.484]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.484]                             "", base::R.version$version.string), 
[13:38:28.484]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.484]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.484]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.484]                               "release", "version")], collapse = " "), 
[13:38:28.484]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.484]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.484]                             info)
[13:38:28.484]                           info <- base::paste(info, collapse = "; ")
[13:38:28.484]                           if (!has_future) {
[13:38:28.484]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.484]                               info)
[13:38:28.484]                           }
[13:38:28.484]                           else {
[13:38:28.484]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.484]                               info, version)
[13:38:28.484]                           }
[13:38:28.484]                           base::stop(msg)
[13:38:28.484]                         }
[13:38:28.484]                       })
[13:38:28.484]                     }
[13:38:28.484]                     base::local({
[13:38:28.484]                       for (pkg in "utils") {
[13:38:28.484]                         base::loadNamespace(pkg)
[13:38:28.484]                         base::library(pkg, character.only = TRUE)
[13:38:28.484]                       }
[13:38:28.484]                     })
[13:38:28.484]                   }
[13:38:28.484]                   ...future.strategy.old <- future::plan("list")
[13:38:28.484]                   options(future.plan = NULL)
[13:38:28.484]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.484]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.484]                 }
[13:38:28.484]                 ...future.workdir <- getwd()
[13:38:28.484]             }
[13:38:28.484]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.484]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.484]         }
[13:38:28.484]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.484]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.484]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.484]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.484]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.484]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.484]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.484]             base::names(...future.oldOptions))
[13:38:28.484]     }
[13:38:28.484]     if (FALSE) {
[13:38:28.484]     }
[13:38:28.484]     else {
[13:38:28.484]         if (TRUE) {
[13:38:28.484]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.484]                 open = "w")
[13:38:28.484]         }
[13:38:28.484]         else {
[13:38:28.484]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.484]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.484]         }
[13:38:28.484]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.484]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.484]             base::sink(type = "output", split = FALSE)
[13:38:28.484]             base::close(...future.stdout)
[13:38:28.484]         }, add = TRUE)
[13:38:28.484]     }
[13:38:28.484]     ...future.frame <- base::sys.nframe()
[13:38:28.484]     ...future.conditions <- base::list()
[13:38:28.484]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.484]     if (FALSE) {
[13:38:28.484]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.484]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.484]     }
[13:38:28.484]     ...future.result <- base::tryCatch({
[13:38:28.484]         base::withCallingHandlers({
[13:38:28.484]             ...future.value <- base::withVisible(base::local({
[13:38:28.484]                 print(1:50)
[13:38:28.484]                 str(1:50)
[13:38:28.484]                 cat(letters, sep = "-")
[13:38:28.484]                 cat(1:6, collapse = "\n")
[13:38:28.484]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.484]                 42L
[13:38:28.484]             }))
[13:38:28.484]             future::FutureResult(value = ...future.value$value, 
[13:38:28.484]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.484]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.484]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.484]                     ...future.globalenv.names))
[13:38:28.484]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.484]         }, condition = base::local({
[13:38:28.484]             c <- base::c
[13:38:28.484]             inherits <- base::inherits
[13:38:28.484]             invokeRestart <- base::invokeRestart
[13:38:28.484]             length <- base::length
[13:38:28.484]             list <- base::list
[13:38:28.484]             seq.int <- base::seq.int
[13:38:28.484]             signalCondition <- base::signalCondition
[13:38:28.484]             sys.calls <- base::sys.calls
[13:38:28.484]             `[[` <- base::`[[`
[13:38:28.484]             `+` <- base::`+`
[13:38:28.484]             `<<-` <- base::`<<-`
[13:38:28.484]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.484]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.484]                   3L)]
[13:38:28.484]             }
[13:38:28.484]             function(cond) {
[13:38:28.484]                 is_error <- inherits(cond, "error")
[13:38:28.484]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.484]                   NULL)
[13:38:28.484]                 if (is_error) {
[13:38:28.484]                   sessionInformation <- function() {
[13:38:28.484]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.484]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.484]                       search = base::search(), system = base::Sys.info())
[13:38:28.484]                   }
[13:38:28.484]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.484]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.484]                     cond$call), session = sessionInformation(), 
[13:38:28.484]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.484]                   signalCondition(cond)
[13:38:28.484]                 }
[13:38:28.484]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.484]                 "immediateCondition"))) {
[13:38:28.484]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.484]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.484]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.484]                   if (TRUE && !signal) {
[13:38:28.484]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.484]                     {
[13:38:28.484]                       inherits <- base::inherits
[13:38:28.484]                       invokeRestart <- base::invokeRestart
[13:38:28.484]                       is.null <- base::is.null
[13:38:28.484]                       muffled <- FALSE
[13:38:28.484]                       if (inherits(cond, "message")) {
[13:38:28.484]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.484]                         if (muffled) 
[13:38:28.484]                           invokeRestart("muffleMessage")
[13:38:28.484]                       }
[13:38:28.484]                       else if (inherits(cond, "warning")) {
[13:38:28.484]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.484]                         if (muffled) 
[13:38:28.484]                           invokeRestart("muffleWarning")
[13:38:28.484]                       }
[13:38:28.484]                       else if (inherits(cond, "condition")) {
[13:38:28.484]                         if (!is.null(pattern)) {
[13:38:28.484]                           computeRestarts <- base::computeRestarts
[13:38:28.484]                           grepl <- base::grepl
[13:38:28.484]                           restarts <- computeRestarts(cond)
[13:38:28.484]                           for (restart in restarts) {
[13:38:28.484]                             name <- restart$name
[13:38:28.484]                             if (is.null(name)) 
[13:38:28.484]                               next
[13:38:28.484]                             if (!grepl(pattern, name)) 
[13:38:28.484]                               next
[13:38:28.484]                             invokeRestart(restart)
[13:38:28.484]                             muffled <- TRUE
[13:38:28.484]                             break
[13:38:28.484]                           }
[13:38:28.484]                         }
[13:38:28.484]                       }
[13:38:28.484]                       invisible(muffled)
[13:38:28.484]                     }
[13:38:28.484]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.484]                   }
[13:38:28.484]                 }
[13:38:28.484]                 else {
[13:38:28.484]                   if (TRUE) {
[13:38:28.484]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.484]                     {
[13:38:28.484]                       inherits <- base::inherits
[13:38:28.484]                       invokeRestart <- base::invokeRestart
[13:38:28.484]                       is.null <- base::is.null
[13:38:28.484]                       muffled <- FALSE
[13:38:28.484]                       if (inherits(cond, "message")) {
[13:38:28.484]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.484]                         if (muffled) 
[13:38:28.484]                           invokeRestart("muffleMessage")
[13:38:28.484]                       }
[13:38:28.484]                       else if (inherits(cond, "warning")) {
[13:38:28.484]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.484]                         if (muffled) 
[13:38:28.484]                           invokeRestart("muffleWarning")
[13:38:28.484]                       }
[13:38:28.484]                       else if (inherits(cond, "condition")) {
[13:38:28.484]                         if (!is.null(pattern)) {
[13:38:28.484]                           computeRestarts <- base::computeRestarts
[13:38:28.484]                           grepl <- base::grepl
[13:38:28.484]                           restarts <- computeRestarts(cond)
[13:38:28.484]                           for (restart in restarts) {
[13:38:28.484]                             name <- restart$name
[13:38:28.484]                             if (is.null(name)) 
[13:38:28.484]                               next
[13:38:28.484]                             if (!grepl(pattern, name)) 
[13:38:28.484]                               next
[13:38:28.484]                             invokeRestart(restart)
[13:38:28.484]                             muffled <- TRUE
[13:38:28.484]                             break
[13:38:28.484]                           }
[13:38:28.484]                         }
[13:38:28.484]                       }
[13:38:28.484]                       invisible(muffled)
[13:38:28.484]                     }
[13:38:28.484]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.484]                   }
[13:38:28.484]                 }
[13:38:28.484]             }
[13:38:28.484]         }))
[13:38:28.484]     }, error = function(ex) {
[13:38:28.484]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.484]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.484]                 ...future.rng), started = ...future.startTime, 
[13:38:28.484]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.484]             version = "1.8"), class = "FutureResult")
[13:38:28.484]     }, finally = {
[13:38:28.484]         if (!identical(...future.workdir, getwd())) 
[13:38:28.484]             setwd(...future.workdir)
[13:38:28.484]         {
[13:38:28.484]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.484]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.484]             }
[13:38:28.484]             base::options(...future.oldOptions)
[13:38:28.484]             if (.Platform$OS.type == "windows") {
[13:38:28.484]                 old_names <- names(...future.oldEnvVars)
[13:38:28.484]                 envs <- base::Sys.getenv()
[13:38:28.484]                 names <- names(envs)
[13:38:28.484]                 common <- intersect(names, old_names)
[13:38:28.484]                 added <- setdiff(names, old_names)
[13:38:28.484]                 removed <- setdiff(old_names, names)
[13:38:28.484]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.484]                   envs[common]]
[13:38:28.484]                 NAMES <- toupper(changed)
[13:38:28.484]                 args <- list()
[13:38:28.484]                 for (kk in seq_along(NAMES)) {
[13:38:28.484]                   name <- changed[[kk]]
[13:38:28.484]                   NAME <- NAMES[[kk]]
[13:38:28.484]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.484]                     next
[13:38:28.484]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.484]                 }
[13:38:28.484]                 NAMES <- toupper(added)
[13:38:28.484]                 for (kk in seq_along(NAMES)) {
[13:38:28.484]                   name <- added[[kk]]
[13:38:28.484]                   NAME <- NAMES[[kk]]
[13:38:28.484]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.484]                     next
[13:38:28.484]                   args[[name]] <- ""
[13:38:28.484]                 }
[13:38:28.484]                 NAMES <- toupper(removed)
[13:38:28.484]                 for (kk in seq_along(NAMES)) {
[13:38:28.484]                   name <- removed[[kk]]
[13:38:28.484]                   NAME <- NAMES[[kk]]
[13:38:28.484]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.484]                     next
[13:38:28.484]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.484]                 }
[13:38:28.484]                 if (length(args) > 0) 
[13:38:28.484]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.484]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.484]             }
[13:38:28.484]             else {
[13:38:28.484]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.484]             }
[13:38:28.484]             {
[13:38:28.484]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.484]                   0L) {
[13:38:28.484]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.484]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.484]                   base::options(opts)
[13:38:28.484]                 }
[13:38:28.484]                 {
[13:38:28.484]                   {
[13:38:28.484]                     NULL
[13:38:28.484]                     RNGkind("Mersenne-Twister")
[13:38:28.484]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.484]                       inherits = FALSE)
[13:38:28.484]                   }
[13:38:28.484]                   options(future.plan = NULL)
[13:38:28.484]                   if (is.na(NA_character_)) 
[13:38:28.484]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.484]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.484]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.484]                     .init = FALSE)
[13:38:28.484]                 }
[13:38:28.484]             }
[13:38:28.484]         }
[13:38:28.484]     })
[13:38:28.484]     if (TRUE) {
[13:38:28.484]         base::sink(type = "output", split = FALSE)
[13:38:28.484]         if (TRUE) {
[13:38:28.484]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.484]         }
[13:38:28.484]         else {
[13:38:28.484]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.484]         }
[13:38:28.484]         base::close(...future.stdout)
[13:38:28.484]         ...future.stdout <- NULL
[13:38:28.484]     }
[13:38:28.484]     ...future.result$conditions <- ...future.conditions
[13:38:28.484]     ...future.result$finished <- base::Sys.time()
[13:38:28.484]     ...future.result
[13:38:28.484] }
[13:38:28.486] plan(): Setting new future strategy stack:
[13:38:28.486] List of future strategies:
[13:38:28.486] 1. sequential:
[13:38:28.486]    - args: function (..., envir = parent.frame())
[13:38:28.486]    - tweaked: FALSE
[13:38:28.486]    - call: NULL
[13:38:28.486] plan(): nbrOfWorkers() = 1
[13:38:28.487] plan(): Setting new future strategy stack:
[13:38:28.488] List of future strategies:
[13:38:28.488] 1. sequential:
[13:38:28.488]    - args: function (..., envir = parent.frame())
[13:38:28.488]    - tweaked: FALSE
[13:38:28.488]    - call: plan(strategy)
[13:38:28.488] plan(): nbrOfWorkers() = 1
[13:38:28.488] SequentialFuture started (and completed)
[13:38:28.488] - Launch lazy future ... done
[13:38:28.488] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.489] getGlobalsAndPackages() ...
[13:38:28.489] Searching for globals...
[13:38:28.489] - globals found: [1] ‘print’
[13:38:28.489] Searching for globals ... DONE
[13:38:28.490] Resolving globals: FALSE
[13:38:28.490] 
[13:38:28.490] 
[13:38:28.490] getGlobalsAndPackages() ... DONE
[13:38:28.490] run() for ‘Future’ ...
[13:38:28.490] - state: ‘created’
[13:38:28.490] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.491] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.491] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.491]   - Field: ‘label’
[13:38:28.491]   - Field: ‘local’
[13:38:28.491]   - Field: ‘owner’
[13:38:28.491]   - Field: ‘envir’
[13:38:28.491]   - Field: ‘packages’
[13:38:28.491]   - Field: ‘gc’
[13:38:28.492]   - Field: ‘conditions’
[13:38:28.492]   - Field: ‘expr’
[13:38:28.492]   - Field: ‘uuid’
[13:38:28.492]   - Field: ‘seed’
[13:38:28.492]   - Field: ‘version’
[13:38:28.492]   - Field: ‘result’
[13:38:28.492]   - Field: ‘asynchronous’
[13:38:28.492]   - Field: ‘calls’
[13:38:28.492]   - Field: ‘globals’
[13:38:28.492]   - Field: ‘stdout’
[13:38:28.492]   - Field: ‘earlySignal’
[13:38:28.493]   - Field: ‘lazy’
[13:38:28.493]   - Field: ‘state’
[13:38:28.493] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.493] - Launch lazy future ...
[13:38:28.493] Packages needed by the future expression (n = 0): <none>
[13:38:28.493] Packages needed by future strategies (n = 0): <none>
[13:38:28.493] {
[13:38:28.493]     {
[13:38:28.493]         {
[13:38:28.493]             ...future.startTime <- base::Sys.time()
[13:38:28.493]             {
[13:38:28.493]                 {
[13:38:28.493]                   {
[13:38:28.493]                     base::local({
[13:38:28.493]                       has_future <- base::requireNamespace("future", 
[13:38:28.493]                         quietly = TRUE)
[13:38:28.493]                       if (has_future) {
[13:38:28.493]                         ns <- base::getNamespace("future")
[13:38:28.493]                         version <- ns[[".package"]][["version"]]
[13:38:28.493]                         if (is.null(version)) 
[13:38:28.493]                           version <- utils::packageVersion("future")
[13:38:28.493]                       }
[13:38:28.493]                       else {
[13:38:28.493]                         version <- NULL
[13:38:28.493]                       }
[13:38:28.493]                       if (!has_future || version < "1.8.0") {
[13:38:28.493]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.493]                           "", base::R.version$version.string), 
[13:38:28.493]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.493]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.493]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.493]                             "release", "version")], collapse = " "), 
[13:38:28.493]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.493]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.493]                           info)
[13:38:28.493]                         info <- base::paste(info, collapse = "; ")
[13:38:28.493]                         if (!has_future) {
[13:38:28.493]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.493]                             info)
[13:38:28.493]                         }
[13:38:28.493]                         else {
[13:38:28.493]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.493]                             info, version)
[13:38:28.493]                         }
[13:38:28.493]                         base::stop(msg)
[13:38:28.493]                       }
[13:38:28.493]                     })
[13:38:28.493]                   }
[13:38:28.493]                   ...future.strategy.old <- future::plan("list")
[13:38:28.493]                   options(future.plan = NULL)
[13:38:28.493]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.493]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.493]                 }
[13:38:28.493]                 ...future.workdir <- getwd()
[13:38:28.493]             }
[13:38:28.493]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.493]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.493]         }
[13:38:28.493]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.493]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.493]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.493]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.493]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.493]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.493]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.493]             base::names(...future.oldOptions))
[13:38:28.493]     }
[13:38:28.493]     if (FALSE) {
[13:38:28.493]     }
[13:38:28.493]     else {
[13:38:28.493]         if (TRUE) {
[13:38:28.493]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.493]                 open = "w")
[13:38:28.493]         }
[13:38:28.493]         else {
[13:38:28.493]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.493]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.493]         }
[13:38:28.493]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.493]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.493]             base::sink(type = "output", split = FALSE)
[13:38:28.493]             base::close(...future.stdout)
[13:38:28.493]         }, add = TRUE)
[13:38:28.493]     }
[13:38:28.493]     ...future.frame <- base::sys.nframe()
[13:38:28.493]     ...future.conditions <- base::list()
[13:38:28.493]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.493]     if (FALSE) {
[13:38:28.493]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.493]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.493]     }
[13:38:28.493]     ...future.result <- base::tryCatch({
[13:38:28.493]         base::withCallingHandlers({
[13:38:28.493]             ...future.value <- base::withVisible(base::local(print(42)))
[13:38:28.493]             future::FutureResult(value = ...future.value$value, 
[13:38:28.493]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.493]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.493]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.493]                     ...future.globalenv.names))
[13:38:28.493]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.493]         }, condition = base::local({
[13:38:28.493]             c <- base::c
[13:38:28.493]             inherits <- base::inherits
[13:38:28.493]             invokeRestart <- base::invokeRestart
[13:38:28.493]             length <- base::length
[13:38:28.493]             list <- base::list
[13:38:28.493]             seq.int <- base::seq.int
[13:38:28.493]             signalCondition <- base::signalCondition
[13:38:28.493]             sys.calls <- base::sys.calls
[13:38:28.493]             `[[` <- base::`[[`
[13:38:28.493]             `+` <- base::`+`
[13:38:28.493]             `<<-` <- base::`<<-`
[13:38:28.493]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.493]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.493]                   3L)]
[13:38:28.493]             }
[13:38:28.493]             function(cond) {
[13:38:28.493]                 is_error <- inherits(cond, "error")
[13:38:28.493]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.493]                   NULL)
[13:38:28.493]                 if (is_error) {
[13:38:28.493]                   sessionInformation <- function() {
[13:38:28.493]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.493]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.493]                       search = base::search(), system = base::Sys.info())
[13:38:28.493]                   }
[13:38:28.493]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.493]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.493]                     cond$call), session = sessionInformation(), 
[13:38:28.493]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.493]                   signalCondition(cond)
[13:38:28.493]                 }
[13:38:28.493]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.493]                 "immediateCondition"))) {
[13:38:28.493]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.493]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.493]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.493]                   if (TRUE && !signal) {
[13:38:28.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.493]                     {
[13:38:28.493]                       inherits <- base::inherits
[13:38:28.493]                       invokeRestart <- base::invokeRestart
[13:38:28.493]                       is.null <- base::is.null
[13:38:28.493]                       muffled <- FALSE
[13:38:28.493]                       if (inherits(cond, "message")) {
[13:38:28.493]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.493]                         if (muffled) 
[13:38:28.493]                           invokeRestart("muffleMessage")
[13:38:28.493]                       }
[13:38:28.493]                       else if (inherits(cond, "warning")) {
[13:38:28.493]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.493]                         if (muffled) 
[13:38:28.493]                           invokeRestart("muffleWarning")
[13:38:28.493]                       }
[13:38:28.493]                       else if (inherits(cond, "condition")) {
[13:38:28.493]                         if (!is.null(pattern)) {
[13:38:28.493]                           computeRestarts <- base::computeRestarts
[13:38:28.493]                           grepl <- base::grepl
[13:38:28.493]                           restarts <- computeRestarts(cond)
[13:38:28.493]                           for (restart in restarts) {
[13:38:28.493]                             name <- restart$name
[13:38:28.493]                             if (is.null(name)) 
[13:38:28.493]                               next
[13:38:28.493]                             if (!grepl(pattern, name)) 
[13:38:28.493]                               next
[13:38:28.493]                             invokeRestart(restart)
[13:38:28.493]                             muffled <- TRUE
[13:38:28.493]                             break
[13:38:28.493]                           }
[13:38:28.493]                         }
[13:38:28.493]                       }
[13:38:28.493]                       invisible(muffled)
[13:38:28.493]                     }
[13:38:28.493]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.493]                   }
[13:38:28.493]                 }
[13:38:28.493]                 else {
[13:38:28.493]                   if (TRUE) {
[13:38:28.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.493]                     {
[13:38:28.493]                       inherits <- base::inherits
[13:38:28.493]                       invokeRestart <- base::invokeRestart
[13:38:28.493]                       is.null <- base::is.null
[13:38:28.493]                       muffled <- FALSE
[13:38:28.493]                       if (inherits(cond, "message")) {
[13:38:28.493]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.493]                         if (muffled) 
[13:38:28.493]                           invokeRestart("muffleMessage")
[13:38:28.493]                       }
[13:38:28.493]                       else if (inherits(cond, "warning")) {
[13:38:28.493]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.493]                         if (muffled) 
[13:38:28.493]                           invokeRestart("muffleWarning")
[13:38:28.493]                       }
[13:38:28.493]                       else if (inherits(cond, "condition")) {
[13:38:28.493]                         if (!is.null(pattern)) {
[13:38:28.493]                           computeRestarts <- base::computeRestarts
[13:38:28.493]                           grepl <- base::grepl
[13:38:28.493]                           restarts <- computeRestarts(cond)
[13:38:28.493]                           for (restart in restarts) {
[13:38:28.493]                             name <- restart$name
[13:38:28.493]                             if (is.null(name)) 
[13:38:28.493]                               next
[13:38:28.493]                             if (!grepl(pattern, name)) 
[13:38:28.493]                               next
[13:38:28.493]                             invokeRestart(restart)
[13:38:28.493]                             muffled <- TRUE
[13:38:28.493]                             break
[13:38:28.493]                           }
[13:38:28.493]                         }
[13:38:28.493]                       }
[13:38:28.493]                       invisible(muffled)
[13:38:28.493]                     }
[13:38:28.493]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.493]                   }
[13:38:28.493]                 }
[13:38:28.493]             }
[13:38:28.493]         }))
[13:38:28.493]     }, error = function(ex) {
[13:38:28.493]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.493]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.493]                 ...future.rng), started = ...future.startTime, 
[13:38:28.493]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.493]             version = "1.8"), class = "FutureResult")
[13:38:28.493]     }, finally = {
[13:38:28.493]         if (!identical(...future.workdir, getwd())) 
[13:38:28.493]             setwd(...future.workdir)
[13:38:28.493]         {
[13:38:28.493]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.493]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.493]             }
[13:38:28.493]             base::options(...future.oldOptions)
[13:38:28.493]             if (.Platform$OS.type == "windows") {
[13:38:28.493]                 old_names <- names(...future.oldEnvVars)
[13:38:28.493]                 envs <- base::Sys.getenv()
[13:38:28.493]                 names <- names(envs)
[13:38:28.493]                 common <- intersect(names, old_names)
[13:38:28.493]                 added <- setdiff(names, old_names)
[13:38:28.493]                 removed <- setdiff(old_names, names)
[13:38:28.493]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.493]                   envs[common]]
[13:38:28.493]                 NAMES <- toupper(changed)
[13:38:28.493]                 args <- list()
[13:38:28.493]                 for (kk in seq_along(NAMES)) {
[13:38:28.493]                   name <- changed[[kk]]
[13:38:28.493]                   NAME <- NAMES[[kk]]
[13:38:28.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.493]                     next
[13:38:28.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.493]                 }
[13:38:28.493]                 NAMES <- toupper(added)
[13:38:28.493]                 for (kk in seq_along(NAMES)) {
[13:38:28.493]                   name <- added[[kk]]
[13:38:28.493]                   NAME <- NAMES[[kk]]
[13:38:28.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.493]                     next
[13:38:28.493]                   args[[name]] <- ""
[13:38:28.493]                 }
[13:38:28.493]                 NAMES <- toupper(removed)
[13:38:28.493]                 for (kk in seq_along(NAMES)) {
[13:38:28.493]                   name <- removed[[kk]]
[13:38:28.493]                   NAME <- NAMES[[kk]]
[13:38:28.493]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.493]                     next
[13:38:28.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.493]                 }
[13:38:28.493]                 if (length(args) > 0) 
[13:38:28.493]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.493]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.493]             }
[13:38:28.493]             else {
[13:38:28.493]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.493]             }
[13:38:28.493]             {
[13:38:28.493]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.493]                   0L) {
[13:38:28.493]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.493]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.493]                   base::options(opts)
[13:38:28.493]                 }
[13:38:28.493]                 {
[13:38:28.493]                   {
[13:38:28.493]                     NULL
[13:38:28.493]                     RNGkind("Mersenne-Twister")
[13:38:28.493]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.493]                       inherits = FALSE)
[13:38:28.493]                   }
[13:38:28.493]                   options(future.plan = NULL)
[13:38:28.493]                   if (is.na(NA_character_)) 
[13:38:28.493]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.493]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.493]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.493]                     .init = FALSE)
[13:38:28.493]                 }
[13:38:28.493]             }
[13:38:28.493]         }
[13:38:28.493]     })
[13:38:28.493]     if (TRUE) {
[13:38:28.493]         base::sink(type = "output", split = FALSE)
[13:38:28.493]         if (TRUE) {
[13:38:28.493]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.493]         }
[13:38:28.493]         else {
[13:38:28.493]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.493]         }
[13:38:28.493]         base::close(...future.stdout)
[13:38:28.493]         ...future.stdout <- NULL
[13:38:28.493]     }
[13:38:28.493]     ...future.result$conditions <- ...future.conditions
[13:38:28.493]     ...future.result$finished <- base::Sys.time()
[13:38:28.493]     ...future.result
[13:38:28.493] }
[13:38:28.495] plan(): Setting new future strategy stack:
[13:38:28.495] List of future strategies:
[13:38:28.495] 1. sequential:
[13:38:28.495]    - args: function (..., envir = parent.frame())
[13:38:28.495]    - tweaked: FALSE
[13:38:28.495]    - call: NULL
[13:38:28.496] plan(): nbrOfWorkers() = 1
[13:38:28.496] plan(): Setting new future strategy stack:
[13:38:28.496] List of future strategies:
[13:38:28.496] 1. sequential:
[13:38:28.496]    - args: function (..., envir = parent.frame())
[13:38:28.496]    - tweaked: FALSE
[13:38:28.496]    - call: plan(strategy)
[13:38:28.497] plan(): nbrOfWorkers() = 1
[13:38:28.497] SequentialFuture started (and completed)
[13:38:28.497] - Launch lazy future ... done
[13:38:28.497] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[13:38:28.497] getGlobalsAndPackages() ...
[13:38:28.498] Searching for globals...
[13:38:28.500] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.500] Searching for globals ... DONE
[13:38:28.500] Resolving globals: FALSE
[13:38:28.501] 
[13:38:28.501] - packages: [1] ‘utils’
[13:38:28.501] getGlobalsAndPackages() ... DONE
[13:38:28.501] run() for ‘Future’ ...
[13:38:28.501] - state: ‘created’
[13:38:28.502] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.502] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.502] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.502]   - Field: ‘label’
[13:38:28.502]   - Field: ‘local’
[13:38:28.502]   - Field: ‘owner’
[13:38:28.502]   - Field: ‘envir’
[13:38:28.502]   - Field: ‘packages’
[13:38:28.503]   - Field: ‘gc’
[13:38:28.503]   - Field: ‘conditions’
[13:38:28.503]   - Field: ‘expr’
[13:38:28.503]   - Field: ‘uuid’
[13:38:28.503]   - Field: ‘seed’
[13:38:28.503]   - Field: ‘version’
[13:38:28.503]   - Field: ‘result’
[13:38:28.503]   - Field: ‘asynchronous’
[13:38:28.503]   - Field: ‘calls’
[13:38:28.503]   - Field: ‘globals’
[13:38:28.503]   - Field: ‘stdout’
[13:38:28.504]   - Field: ‘earlySignal’
[13:38:28.504]   - Field: ‘lazy’
[13:38:28.504]   - Field: ‘state’
[13:38:28.504] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.504] - Launch lazy future ...
[13:38:28.504] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.504] Packages needed by future strategies (n = 0): <none>
[13:38:28.506] {
[13:38:28.506]     {
[13:38:28.506]         {
[13:38:28.506]             ...future.startTime <- base::Sys.time()
[13:38:28.506]             {
[13:38:28.506]                 {
[13:38:28.506]                   {
[13:38:28.506]                     {
[13:38:28.506]                       base::local({
[13:38:28.506]                         has_future <- base::requireNamespace("future", 
[13:38:28.506]                           quietly = TRUE)
[13:38:28.506]                         if (has_future) {
[13:38:28.506]                           ns <- base::getNamespace("future")
[13:38:28.506]                           version <- ns[[".package"]][["version"]]
[13:38:28.506]                           if (is.null(version)) 
[13:38:28.506]                             version <- utils::packageVersion("future")
[13:38:28.506]                         }
[13:38:28.506]                         else {
[13:38:28.506]                           version <- NULL
[13:38:28.506]                         }
[13:38:28.506]                         if (!has_future || version < "1.8.0") {
[13:38:28.506]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.506]                             "", base::R.version$version.string), 
[13:38:28.506]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.506]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.506]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.506]                               "release", "version")], collapse = " "), 
[13:38:28.506]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.506]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.506]                             info)
[13:38:28.506]                           info <- base::paste(info, collapse = "; ")
[13:38:28.506]                           if (!has_future) {
[13:38:28.506]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.506]                               info)
[13:38:28.506]                           }
[13:38:28.506]                           else {
[13:38:28.506]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.506]                               info, version)
[13:38:28.506]                           }
[13:38:28.506]                           base::stop(msg)
[13:38:28.506]                         }
[13:38:28.506]                       })
[13:38:28.506]                     }
[13:38:28.506]                     base::local({
[13:38:28.506]                       for (pkg in "utils") {
[13:38:28.506]                         base::loadNamespace(pkg)
[13:38:28.506]                         base::library(pkg, character.only = TRUE)
[13:38:28.506]                       }
[13:38:28.506]                     })
[13:38:28.506]                   }
[13:38:28.506]                   ...future.strategy.old <- future::plan("list")
[13:38:28.506]                   options(future.plan = NULL)
[13:38:28.506]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.506]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.506]                 }
[13:38:28.506]                 ...future.workdir <- getwd()
[13:38:28.506]             }
[13:38:28.506]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.506]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.506]         }
[13:38:28.506]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.506]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.506]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.506]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.506]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.506]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.506]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.506]             base::names(...future.oldOptions))
[13:38:28.506]     }
[13:38:28.506]     if (FALSE) {
[13:38:28.506]     }
[13:38:28.506]     else {
[13:38:28.506]         if (FALSE) {
[13:38:28.506]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.506]                 open = "w")
[13:38:28.506]         }
[13:38:28.506]         else {
[13:38:28.506]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.506]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.506]         }
[13:38:28.506]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.506]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.506]             base::sink(type = "output", split = FALSE)
[13:38:28.506]             base::close(...future.stdout)
[13:38:28.506]         }, add = TRUE)
[13:38:28.506]     }
[13:38:28.506]     ...future.frame <- base::sys.nframe()
[13:38:28.506]     ...future.conditions <- base::list()
[13:38:28.506]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.506]     if (FALSE) {
[13:38:28.506]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.506]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.506]     }
[13:38:28.506]     ...future.result <- base::tryCatch({
[13:38:28.506]         base::withCallingHandlers({
[13:38:28.506]             ...future.value <- base::withVisible(base::local({
[13:38:28.506]                 print(1:50)
[13:38:28.506]                 str(1:50)
[13:38:28.506]                 cat(letters, sep = "-")
[13:38:28.506]                 cat(1:6, collapse = "\n")
[13:38:28.506]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.506]                 42L
[13:38:28.506]             }))
[13:38:28.506]             future::FutureResult(value = ...future.value$value, 
[13:38:28.506]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.506]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.506]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.506]                     ...future.globalenv.names))
[13:38:28.506]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.506]         }, condition = base::local({
[13:38:28.506]             c <- base::c
[13:38:28.506]             inherits <- base::inherits
[13:38:28.506]             invokeRestart <- base::invokeRestart
[13:38:28.506]             length <- base::length
[13:38:28.506]             list <- base::list
[13:38:28.506]             seq.int <- base::seq.int
[13:38:28.506]             signalCondition <- base::signalCondition
[13:38:28.506]             sys.calls <- base::sys.calls
[13:38:28.506]             `[[` <- base::`[[`
[13:38:28.506]             `+` <- base::`+`
[13:38:28.506]             `<<-` <- base::`<<-`
[13:38:28.506]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.506]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.506]                   3L)]
[13:38:28.506]             }
[13:38:28.506]             function(cond) {
[13:38:28.506]                 is_error <- inherits(cond, "error")
[13:38:28.506]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.506]                   NULL)
[13:38:28.506]                 if (is_error) {
[13:38:28.506]                   sessionInformation <- function() {
[13:38:28.506]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.506]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.506]                       search = base::search(), system = base::Sys.info())
[13:38:28.506]                   }
[13:38:28.506]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.506]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.506]                     cond$call), session = sessionInformation(), 
[13:38:28.506]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.506]                   signalCondition(cond)
[13:38:28.506]                 }
[13:38:28.506]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.506]                 "immediateCondition"))) {
[13:38:28.506]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.506]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.506]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.506]                   if (TRUE && !signal) {
[13:38:28.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.506]                     {
[13:38:28.506]                       inherits <- base::inherits
[13:38:28.506]                       invokeRestart <- base::invokeRestart
[13:38:28.506]                       is.null <- base::is.null
[13:38:28.506]                       muffled <- FALSE
[13:38:28.506]                       if (inherits(cond, "message")) {
[13:38:28.506]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.506]                         if (muffled) 
[13:38:28.506]                           invokeRestart("muffleMessage")
[13:38:28.506]                       }
[13:38:28.506]                       else if (inherits(cond, "warning")) {
[13:38:28.506]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.506]                         if (muffled) 
[13:38:28.506]                           invokeRestart("muffleWarning")
[13:38:28.506]                       }
[13:38:28.506]                       else if (inherits(cond, "condition")) {
[13:38:28.506]                         if (!is.null(pattern)) {
[13:38:28.506]                           computeRestarts <- base::computeRestarts
[13:38:28.506]                           grepl <- base::grepl
[13:38:28.506]                           restarts <- computeRestarts(cond)
[13:38:28.506]                           for (restart in restarts) {
[13:38:28.506]                             name <- restart$name
[13:38:28.506]                             if (is.null(name)) 
[13:38:28.506]                               next
[13:38:28.506]                             if (!grepl(pattern, name)) 
[13:38:28.506]                               next
[13:38:28.506]                             invokeRestart(restart)
[13:38:28.506]                             muffled <- TRUE
[13:38:28.506]                             break
[13:38:28.506]                           }
[13:38:28.506]                         }
[13:38:28.506]                       }
[13:38:28.506]                       invisible(muffled)
[13:38:28.506]                     }
[13:38:28.506]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.506]                   }
[13:38:28.506]                 }
[13:38:28.506]                 else {
[13:38:28.506]                   if (TRUE) {
[13:38:28.506]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.506]                     {
[13:38:28.506]                       inherits <- base::inherits
[13:38:28.506]                       invokeRestart <- base::invokeRestart
[13:38:28.506]                       is.null <- base::is.null
[13:38:28.506]                       muffled <- FALSE
[13:38:28.506]                       if (inherits(cond, "message")) {
[13:38:28.506]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.506]                         if (muffled) 
[13:38:28.506]                           invokeRestart("muffleMessage")
[13:38:28.506]                       }
[13:38:28.506]                       else if (inherits(cond, "warning")) {
[13:38:28.506]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.506]                         if (muffled) 
[13:38:28.506]                           invokeRestart("muffleWarning")
[13:38:28.506]                       }
[13:38:28.506]                       else if (inherits(cond, "condition")) {
[13:38:28.506]                         if (!is.null(pattern)) {
[13:38:28.506]                           computeRestarts <- base::computeRestarts
[13:38:28.506]                           grepl <- base::grepl
[13:38:28.506]                           restarts <- computeRestarts(cond)
[13:38:28.506]                           for (restart in restarts) {
[13:38:28.506]                             name <- restart$name
[13:38:28.506]                             if (is.null(name)) 
[13:38:28.506]                               next
[13:38:28.506]                             if (!grepl(pattern, name)) 
[13:38:28.506]                               next
[13:38:28.506]                             invokeRestart(restart)
[13:38:28.506]                             muffled <- TRUE
[13:38:28.506]                             break
[13:38:28.506]                           }
[13:38:28.506]                         }
[13:38:28.506]                       }
[13:38:28.506]                       invisible(muffled)
[13:38:28.506]                     }
[13:38:28.506]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.506]                   }
[13:38:28.506]                 }
[13:38:28.506]             }
[13:38:28.506]         }))
[13:38:28.506]     }, error = function(ex) {
[13:38:28.506]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.506]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.506]                 ...future.rng), started = ...future.startTime, 
[13:38:28.506]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.506]             version = "1.8"), class = "FutureResult")
[13:38:28.506]     }, finally = {
[13:38:28.506]         if (!identical(...future.workdir, getwd())) 
[13:38:28.506]             setwd(...future.workdir)
[13:38:28.506]         {
[13:38:28.506]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.506]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.506]             }
[13:38:28.506]             base::options(...future.oldOptions)
[13:38:28.506]             if (.Platform$OS.type == "windows") {
[13:38:28.506]                 old_names <- names(...future.oldEnvVars)
[13:38:28.506]                 envs <- base::Sys.getenv()
[13:38:28.506]                 names <- names(envs)
[13:38:28.506]                 common <- intersect(names, old_names)
[13:38:28.506]                 added <- setdiff(names, old_names)
[13:38:28.506]                 removed <- setdiff(old_names, names)
[13:38:28.506]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.506]                   envs[common]]
[13:38:28.506]                 NAMES <- toupper(changed)
[13:38:28.506]                 args <- list()
[13:38:28.506]                 for (kk in seq_along(NAMES)) {
[13:38:28.506]                   name <- changed[[kk]]
[13:38:28.506]                   NAME <- NAMES[[kk]]
[13:38:28.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.506]                     next
[13:38:28.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.506]                 }
[13:38:28.506]                 NAMES <- toupper(added)
[13:38:28.506]                 for (kk in seq_along(NAMES)) {
[13:38:28.506]                   name <- added[[kk]]
[13:38:28.506]                   NAME <- NAMES[[kk]]
[13:38:28.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.506]                     next
[13:38:28.506]                   args[[name]] <- ""
[13:38:28.506]                 }
[13:38:28.506]                 NAMES <- toupper(removed)
[13:38:28.506]                 for (kk in seq_along(NAMES)) {
[13:38:28.506]                   name <- removed[[kk]]
[13:38:28.506]                   NAME <- NAMES[[kk]]
[13:38:28.506]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.506]                     next
[13:38:28.506]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.506]                 }
[13:38:28.506]                 if (length(args) > 0) 
[13:38:28.506]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.506]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.506]             }
[13:38:28.506]             else {
[13:38:28.506]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.506]             }
[13:38:28.506]             {
[13:38:28.506]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.506]                   0L) {
[13:38:28.506]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.506]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.506]                   base::options(opts)
[13:38:28.506]                 }
[13:38:28.506]                 {
[13:38:28.506]                   {
[13:38:28.506]                     NULL
[13:38:28.506]                     RNGkind("Mersenne-Twister")
[13:38:28.506]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.506]                       inherits = FALSE)
[13:38:28.506]                   }
[13:38:28.506]                   options(future.plan = NULL)
[13:38:28.506]                   if (is.na(NA_character_)) 
[13:38:28.506]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.506]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.506]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.506]                     .init = FALSE)
[13:38:28.506]                 }
[13:38:28.506]             }
[13:38:28.506]         }
[13:38:28.506]     })
[13:38:28.506]     if (TRUE) {
[13:38:28.506]         base::sink(type = "output", split = FALSE)
[13:38:28.506]         if (FALSE) {
[13:38:28.506]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.506]         }
[13:38:28.506]         else {
[13:38:28.506]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.506]         }
[13:38:28.506]         base::close(...future.stdout)
[13:38:28.506]         ...future.stdout <- NULL
[13:38:28.506]     }
[13:38:28.506]     ...future.result$conditions <- ...future.conditions
[13:38:28.506]     ...future.result$finished <- base::Sys.time()
[13:38:28.506]     ...future.result
[13:38:28.506] }
[13:38:28.508] plan(): Setting new future strategy stack:
[13:38:28.508] List of future strategies:
[13:38:28.508] 1. sequential:
[13:38:28.508]    - args: function (..., envir = parent.frame())
[13:38:28.508]    - tweaked: FALSE
[13:38:28.508]    - call: NULL
[13:38:28.509] plan(): nbrOfWorkers() = 1
[13:38:28.510] plan(): Setting new future strategy stack:
[13:38:28.510] List of future strategies:
[13:38:28.510] 1. sequential:
[13:38:28.510]    - args: function (..., envir = parent.frame())
[13:38:28.510]    - tweaked: FALSE
[13:38:28.510]    - call: plan(strategy)
[13:38:28.510] plan(): nbrOfWorkers() = 1
[13:38:28.511] SequentialFuture started (and completed)
[13:38:28.511] - Launch lazy future ... done
[13:38:28.511] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "0d5a888a-6fed-d505-4c34-84f1338acd7c"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90952
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:28.519] getGlobalsAndPackages() ...
[13:38:28.519] Searching for globals...
[13:38:28.521] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.521] Searching for globals ... DONE
[13:38:28.522] Resolving globals: FALSE
[13:38:28.522] 
[13:38:28.522] - packages: [1] ‘utils’
[13:38:28.522] getGlobalsAndPackages() ... DONE
[13:38:28.523] run() for ‘Future’ ...
[13:38:28.523] - state: ‘created’
[13:38:28.523] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.523] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.523] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.523]   - Field: ‘label’
[13:38:28.523]   - Field: ‘local’
[13:38:28.523]   - Field: ‘owner’
[13:38:28.524]   - Field: ‘envir’
[13:38:28.524]   - Field: ‘packages’
[13:38:28.524]   - Field: ‘gc’
[13:38:28.524]   - Field: ‘conditions’
[13:38:28.524]   - Field: ‘expr’
[13:38:28.524]   - Field: ‘uuid’
[13:38:28.524]   - Field: ‘seed’
[13:38:28.524]   - Field: ‘version’
[13:38:28.524]   - Field: ‘result’
[13:38:28.524]   - Field: ‘asynchronous’
[13:38:28.524]   - Field: ‘calls’
[13:38:28.525]   - Field: ‘globals’
[13:38:28.525]   - Field: ‘stdout’
[13:38:28.525]   - Field: ‘earlySignal’
[13:38:28.525]   - Field: ‘lazy’
[13:38:28.525]   - Field: ‘state’
[13:38:28.525] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.525] - Launch lazy future ...
[13:38:28.525] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.525] Packages needed by future strategies (n = 0): <none>
[13:38:28.526] {
[13:38:28.526]     {
[13:38:28.526]         {
[13:38:28.526]             ...future.startTime <- base::Sys.time()
[13:38:28.526]             {
[13:38:28.526]                 {
[13:38:28.526]                   {
[13:38:28.526]                     {
[13:38:28.526]                       base::local({
[13:38:28.526]                         has_future <- base::requireNamespace("future", 
[13:38:28.526]                           quietly = TRUE)
[13:38:28.526]                         if (has_future) {
[13:38:28.526]                           ns <- base::getNamespace("future")
[13:38:28.526]                           version <- ns[[".package"]][["version"]]
[13:38:28.526]                           if (is.null(version)) 
[13:38:28.526]                             version <- utils::packageVersion("future")
[13:38:28.526]                         }
[13:38:28.526]                         else {
[13:38:28.526]                           version <- NULL
[13:38:28.526]                         }
[13:38:28.526]                         if (!has_future || version < "1.8.0") {
[13:38:28.526]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.526]                             "", base::R.version$version.string), 
[13:38:28.526]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.526]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.526]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.526]                               "release", "version")], collapse = " "), 
[13:38:28.526]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.526]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.526]                             info)
[13:38:28.526]                           info <- base::paste(info, collapse = "; ")
[13:38:28.526]                           if (!has_future) {
[13:38:28.526]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.526]                               info)
[13:38:28.526]                           }
[13:38:28.526]                           else {
[13:38:28.526]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.526]                               info, version)
[13:38:28.526]                           }
[13:38:28.526]                           base::stop(msg)
[13:38:28.526]                         }
[13:38:28.526]                       })
[13:38:28.526]                     }
[13:38:28.526]                     base::local({
[13:38:28.526]                       for (pkg in "utils") {
[13:38:28.526]                         base::loadNamespace(pkg)
[13:38:28.526]                         base::library(pkg, character.only = TRUE)
[13:38:28.526]                       }
[13:38:28.526]                     })
[13:38:28.526]                   }
[13:38:28.526]                   ...future.strategy.old <- future::plan("list")
[13:38:28.526]                   options(future.plan = NULL)
[13:38:28.526]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.526]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.526]                 }
[13:38:28.526]                 ...future.workdir <- getwd()
[13:38:28.526]             }
[13:38:28.526]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.526]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.526]         }
[13:38:28.526]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.526]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.526]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.526]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.526]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.526]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.526]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.526]             base::names(...future.oldOptions))
[13:38:28.526]     }
[13:38:28.526]     if (FALSE) {
[13:38:28.526]     }
[13:38:28.526]     else {
[13:38:28.526]         if (FALSE) {
[13:38:28.526]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.526]                 open = "w")
[13:38:28.526]         }
[13:38:28.526]         else {
[13:38:28.526]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.526]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.526]         }
[13:38:28.526]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.526]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.526]             base::sink(type = "output", split = FALSE)
[13:38:28.526]             base::close(...future.stdout)
[13:38:28.526]         }, add = TRUE)
[13:38:28.526]     }
[13:38:28.526]     ...future.frame <- base::sys.nframe()
[13:38:28.526]     ...future.conditions <- base::list()
[13:38:28.526]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.526]     if (FALSE) {
[13:38:28.526]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.526]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.526]     }
[13:38:28.526]     ...future.result <- base::tryCatch({
[13:38:28.526]         base::withCallingHandlers({
[13:38:28.526]             ...future.value <- base::withVisible(base::local({
[13:38:28.526]                 print(1:50)
[13:38:28.526]                 str(1:50)
[13:38:28.526]                 cat(letters, sep = "-")
[13:38:28.526]                 cat(1:6, collapse = "\n")
[13:38:28.526]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.526]                 42L
[13:38:28.526]             }))
[13:38:28.526]             future::FutureResult(value = ...future.value$value, 
[13:38:28.526]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.526]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.526]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.526]                     ...future.globalenv.names))
[13:38:28.526]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.526]         }, condition = base::local({
[13:38:28.526]             c <- base::c
[13:38:28.526]             inherits <- base::inherits
[13:38:28.526]             invokeRestart <- base::invokeRestart
[13:38:28.526]             length <- base::length
[13:38:28.526]             list <- base::list
[13:38:28.526]             seq.int <- base::seq.int
[13:38:28.526]             signalCondition <- base::signalCondition
[13:38:28.526]             sys.calls <- base::sys.calls
[13:38:28.526]             `[[` <- base::`[[`
[13:38:28.526]             `+` <- base::`+`
[13:38:28.526]             `<<-` <- base::`<<-`
[13:38:28.526]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.526]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.526]                   3L)]
[13:38:28.526]             }
[13:38:28.526]             function(cond) {
[13:38:28.526]                 is_error <- inherits(cond, "error")
[13:38:28.526]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.526]                   NULL)
[13:38:28.526]                 if (is_error) {
[13:38:28.526]                   sessionInformation <- function() {
[13:38:28.526]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.526]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.526]                       search = base::search(), system = base::Sys.info())
[13:38:28.526]                   }
[13:38:28.526]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.526]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.526]                     cond$call), session = sessionInformation(), 
[13:38:28.526]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.526]                   signalCondition(cond)
[13:38:28.526]                 }
[13:38:28.526]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.526]                 "immediateCondition"))) {
[13:38:28.526]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.526]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.526]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.526]                   if (TRUE && !signal) {
[13:38:28.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.526]                     {
[13:38:28.526]                       inherits <- base::inherits
[13:38:28.526]                       invokeRestart <- base::invokeRestart
[13:38:28.526]                       is.null <- base::is.null
[13:38:28.526]                       muffled <- FALSE
[13:38:28.526]                       if (inherits(cond, "message")) {
[13:38:28.526]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.526]                         if (muffled) 
[13:38:28.526]                           invokeRestart("muffleMessage")
[13:38:28.526]                       }
[13:38:28.526]                       else if (inherits(cond, "warning")) {
[13:38:28.526]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.526]                         if (muffled) 
[13:38:28.526]                           invokeRestart("muffleWarning")
[13:38:28.526]                       }
[13:38:28.526]                       else if (inherits(cond, "condition")) {
[13:38:28.526]                         if (!is.null(pattern)) {
[13:38:28.526]                           computeRestarts <- base::computeRestarts
[13:38:28.526]                           grepl <- base::grepl
[13:38:28.526]                           restarts <- computeRestarts(cond)
[13:38:28.526]                           for (restart in restarts) {
[13:38:28.526]                             name <- restart$name
[13:38:28.526]                             if (is.null(name)) 
[13:38:28.526]                               next
[13:38:28.526]                             if (!grepl(pattern, name)) 
[13:38:28.526]                               next
[13:38:28.526]                             invokeRestart(restart)
[13:38:28.526]                             muffled <- TRUE
[13:38:28.526]                             break
[13:38:28.526]                           }
[13:38:28.526]                         }
[13:38:28.526]                       }
[13:38:28.526]                       invisible(muffled)
[13:38:28.526]                     }
[13:38:28.526]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.526]                   }
[13:38:28.526]                 }
[13:38:28.526]                 else {
[13:38:28.526]                   if (TRUE) {
[13:38:28.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.526]                     {
[13:38:28.526]                       inherits <- base::inherits
[13:38:28.526]                       invokeRestart <- base::invokeRestart
[13:38:28.526]                       is.null <- base::is.null
[13:38:28.526]                       muffled <- FALSE
[13:38:28.526]                       if (inherits(cond, "message")) {
[13:38:28.526]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.526]                         if (muffled) 
[13:38:28.526]                           invokeRestart("muffleMessage")
[13:38:28.526]                       }
[13:38:28.526]                       else if (inherits(cond, "warning")) {
[13:38:28.526]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.526]                         if (muffled) 
[13:38:28.526]                           invokeRestart("muffleWarning")
[13:38:28.526]                       }
[13:38:28.526]                       else if (inherits(cond, "condition")) {
[13:38:28.526]                         if (!is.null(pattern)) {
[13:38:28.526]                           computeRestarts <- base::computeRestarts
[13:38:28.526]                           grepl <- base::grepl
[13:38:28.526]                           restarts <- computeRestarts(cond)
[13:38:28.526]                           for (restart in restarts) {
[13:38:28.526]                             name <- restart$name
[13:38:28.526]                             if (is.null(name)) 
[13:38:28.526]                               next
[13:38:28.526]                             if (!grepl(pattern, name)) 
[13:38:28.526]                               next
[13:38:28.526]                             invokeRestart(restart)
[13:38:28.526]                             muffled <- TRUE
[13:38:28.526]                             break
[13:38:28.526]                           }
[13:38:28.526]                         }
[13:38:28.526]                       }
[13:38:28.526]                       invisible(muffled)
[13:38:28.526]                     }
[13:38:28.526]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.526]                   }
[13:38:28.526]                 }
[13:38:28.526]             }
[13:38:28.526]         }))
[13:38:28.526]     }, error = function(ex) {
[13:38:28.526]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.526]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.526]                 ...future.rng), started = ...future.startTime, 
[13:38:28.526]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.526]             version = "1.8"), class = "FutureResult")
[13:38:28.526]     }, finally = {
[13:38:28.526]         if (!identical(...future.workdir, getwd())) 
[13:38:28.526]             setwd(...future.workdir)
[13:38:28.526]         {
[13:38:28.526]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.526]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.526]             }
[13:38:28.526]             base::options(...future.oldOptions)
[13:38:28.526]             if (.Platform$OS.type == "windows") {
[13:38:28.526]                 old_names <- names(...future.oldEnvVars)
[13:38:28.526]                 envs <- base::Sys.getenv()
[13:38:28.526]                 names <- names(envs)
[13:38:28.526]                 common <- intersect(names, old_names)
[13:38:28.526]                 added <- setdiff(names, old_names)
[13:38:28.526]                 removed <- setdiff(old_names, names)
[13:38:28.526]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.526]                   envs[common]]
[13:38:28.526]                 NAMES <- toupper(changed)
[13:38:28.526]                 args <- list()
[13:38:28.526]                 for (kk in seq_along(NAMES)) {
[13:38:28.526]                   name <- changed[[kk]]
[13:38:28.526]                   NAME <- NAMES[[kk]]
[13:38:28.526]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.526]                     next
[13:38:28.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.526]                 }
[13:38:28.526]                 NAMES <- toupper(added)
[13:38:28.526]                 for (kk in seq_along(NAMES)) {
[13:38:28.526]                   name <- added[[kk]]
[13:38:28.526]                   NAME <- NAMES[[kk]]
[13:38:28.526]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.526]                     next
[13:38:28.526]                   args[[name]] <- ""
[13:38:28.526]                 }
[13:38:28.526]                 NAMES <- toupper(removed)
[13:38:28.526]                 for (kk in seq_along(NAMES)) {
[13:38:28.526]                   name <- removed[[kk]]
[13:38:28.526]                   NAME <- NAMES[[kk]]
[13:38:28.526]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.526]                     next
[13:38:28.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.526]                 }
[13:38:28.526]                 if (length(args) > 0) 
[13:38:28.526]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.526]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.526]             }
[13:38:28.526]             else {
[13:38:28.526]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.526]             }
[13:38:28.526]             {
[13:38:28.526]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.526]                   0L) {
[13:38:28.526]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.526]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.526]                   base::options(opts)
[13:38:28.526]                 }
[13:38:28.526]                 {
[13:38:28.526]                   {
[13:38:28.526]                     NULL
[13:38:28.526]                     RNGkind("Mersenne-Twister")
[13:38:28.526]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.526]                       inherits = FALSE)
[13:38:28.526]                   }
[13:38:28.526]                   options(future.plan = NULL)
[13:38:28.526]                   if (is.na(NA_character_)) 
[13:38:28.526]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.526]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.526]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.526]                     .init = FALSE)
[13:38:28.526]                 }
[13:38:28.526]             }
[13:38:28.526]         }
[13:38:28.526]     })
[13:38:28.526]     if (TRUE) {
[13:38:28.526]         base::sink(type = "output", split = FALSE)
[13:38:28.526]         if (FALSE) {
[13:38:28.526]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.526]         }
[13:38:28.526]         else {
[13:38:28.526]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.526]         }
[13:38:28.526]         base::close(...future.stdout)
[13:38:28.526]         ...future.stdout <- NULL
[13:38:28.526]     }
[13:38:28.526]     ...future.result$conditions <- ...future.conditions
[13:38:28.526]     ...future.result$finished <- base::Sys.time()
[13:38:28.526]     ...future.result
[13:38:28.526] }
[13:38:28.528] plan(): Setting new future strategy stack:
[13:38:28.528] List of future strategies:
[13:38:28.528] 1. sequential:
[13:38:28.528]    - args: function (..., envir = parent.frame())
[13:38:28.528]    - tweaked: FALSE
[13:38:28.528]    - call: NULL
[13:38:28.528] plan(): nbrOfWorkers() = 1
[13:38:28.530] plan(): Setting new future strategy stack:
[13:38:28.530] List of future strategies:
[13:38:28.530] 1. sequential:
[13:38:28.530]    - args: function (..., envir = parent.frame())
[13:38:28.530]    - tweaked: FALSE
[13:38:28.530]    - call: plan(strategy)
[13:38:28.530] plan(): nbrOfWorkers() = 1
[13:38:28.530] SequentialFuture started (and completed)
[13:38:28.530] - Launch lazy future ... done
[13:38:28.531] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.531] getGlobalsAndPackages() ...
[13:38:28.531] Searching for globals...
[13:38:28.531] - globals found: [1] ‘print’
[13:38:28.532] Searching for globals ... DONE
[13:38:28.532] Resolving globals: FALSE
[13:38:28.532] 
[13:38:28.532] 
[13:38:28.532] getGlobalsAndPackages() ... DONE
[13:38:28.532] run() for ‘Future’ ...
[13:38:28.534] - state: ‘created’
[13:38:28.535] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.535] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.535] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.535]   - Field: ‘label’
[13:38:28.535]   - Field: ‘local’
[13:38:28.535]   - Field: ‘owner’
[13:38:28.535]   - Field: ‘envir’
[13:38:28.535]   - Field: ‘packages’
[13:38:28.536]   - Field: ‘gc’
[13:38:28.536]   - Field: ‘conditions’
[13:38:28.536]   - Field: ‘expr’
[13:38:28.536]   - Field: ‘uuid’
[13:38:28.536]   - Field: ‘seed’
[13:38:28.536]   - Field: ‘version’
[13:38:28.536]   - Field: ‘result’
[13:38:28.536]   - Field: ‘asynchronous’
[13:38:28.536]   - Field: ‘calls’
[13:38:28.536]   - Field: ‘globals’
[13:38:28.536]   - Field: ‘stdout’
[13:38:28.537]   - Field: ‘earlySignal’
[13:38:28.537]   - Field: ‘lazy’
[13:38:28.537]   - Field: ‘state’
[13:38:28.537] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.537] - Launch lazy future ...
[13:38:28.537] Packages needed by the future expression (n = 0): <none>
[13:38:28.537] Packages needed by future strategies (n = 0): <none>
[13:38:28.538] {
[13:38:28.538]     {
[13:38:28.538]         {
[13:38:28.538]             ...future.startTime <- base::Sys.time()
[13:38:28.538]             {
[13:38:28.538]                 {
[13:38:28.538]                   {
[13:38:28.538]                     base::local({
[13:38:28.538]                       has_future <- base::requireNamespace("future", 
[13:38:28.538]                         quietly = TRUE)
[13:38:28.538]                       if (has_future) {
[13:38:28.538]                         ns <- base::getNamespace("future")
[13:38:28.538]                         version <- ns[[".package"]][["version"]]
[13:38:28.538]                         if (is.null(version)) 
[13:38:28.538]                           version <- utils::packageVersion("future")
[13:38:28.538]                       }
[13:38:28.538]                       else {
[13:38:28.538]                         version <- NULL
[13:38:28.538]                       }
[13:38:28.538]                       if (!has_future || version < "1.8.0") {
[13:38:28.538]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.538]                           "", base::R.version$version.string), 
[13:38:28.538]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.538]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.538]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.538]                             "release", "version")], collapse = " "), 
[13:38:28.538]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.538]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.538]                           info)
[13:38:28.538]                         info <- base::paste(info, collapse = "; ")
[13:38:28.538]                         if (!has_future) {
[13:38:28.538]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.538]                             info)
[13:38:28.538]                         }
[13:38:28.538]                         else {
[13:38:28.538]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.538]                             info, version)
[13:38:28.538]                         }
[13:38:28.538]                         base::stop(msg)
[13:38:28.538]                       }
[13:38:28.538]                     })
[13:38:28.538]                   }
[13:38:28.538]                   ...future.strategy.old <- future::plan("list")
[13:38:28.538]                   options(future.plan = NULL)
[13:38:28.538]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.538]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.538]                 }
[13:38:28.538]                 ...future.workdir <- getwd()
[13:38:28.538]             }
[13:38:28.538]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.538]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.538]         }
[13:38:28.538]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.538]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.538]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.538]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.538]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.538]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.538]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.538]             base::names(...future.oldOptions))
[13:38:28.538]     }
[13:38:28.538]     if (FALSE) {
[13:38:28.538]     }
[13:38:28.538]     else {
[13:38:28.538]         if (TRUE) {
[13:38:28.538]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.538]                 open = "w")
[13:38:28.538]         }
[13:38:28.538]         else {
[13:38:28.538]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.538]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.538]         }
[13:38:28.538]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.538]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.538]             base::sink(type = "output", split = FALSE)
[13:38:28.538]             base::close(...future.stdout)
[13:38:28.538]         }, add = TRUE)
[13:38:28.538]     }
[13:38:28.538]     ...future.frame <- base::sys.nframe()
[13:38:28.538]     ...future.conditions <- base::list()
[13:38:28.538]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.538]     if (FALSE) {
[13:38:28.538]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.538]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.538]     }
[13:38:28.538]     ...future.result <- base::tryCatch({
[13:38:28.538]         base::withCallingHandlers({
[13:38:28.538]             ...future.value <- base::withVisible(base::local(print(42)))
[13:38:28.538]             future::FutureResult(value = ...future.value$value, 
[13:38:28.538]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.538]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.538]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.538]                     ...future.globalenv.names))
[13:38:28.538]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.538]         }, condition = base::local({
[13:38:28.538]             c <- base::c
[13:38:28.538]             inherits <- base::inherits
[13:38:28.538]             invokeRestart <- base::invokeRestart
[13:38:28.538]             length <- base::length
[13:38:28.538]             list <- base::list
[13:38:28.538]             seq.int <- base::seq.int
[13:38:28.538]             signalCondition <- base::signalCondition
[13:38:28.538]             sys.calls <- base::sys.calls
[13:38:28.538]             `[[` <- base::`[[`
[13:38:28.538]             `+` <- base::`+`
[13:38:28.538]             `<<-` <- base::`<<-`
[13:38:28.538]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.538]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.538]                   3L)]
[13:38:28.538]             }
[13:38:28.538]             function(cond) {
[13:38:28.538]                 is_error <- inherits(cond, "error")
[13:38:28.538]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.538]                   NULL)
[13:38:28.538]                 if (is_error) {
[13:38:28.538]                   sessionInformation <- function() {
[13:38:28.538]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.538]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.538]                       search = base::search(), system = base::Sys.info())
[13:38:28.538]                   }
[13:38:28.538]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.538]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.538]                     cond$call), session = sessionInformation(), 
[13:38:28.538]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.538]                   signalCondition(cond)
[13:38:28.538]                 }
[13:38:28.538]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.538]                 "immediateCondition"))) {
[13:38:28.538]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.538]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.538]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.538]                   if (TRUE && !signal) {
[13:38:28.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.538]                     {
[13:38:28.538]                       inherits <- base::inherits
[13:38:28.538]                       invokeRestart <- base::invokeRestart
[13:38:28.538]                       is.null <- base::is.null
[13:38:28.538]                       muffled <- FALSE
[13:38:28.538]                       if (inherits(cond, "message")) {
[13:38:28.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.538]                         if (muffled) 
[13:38:28.538]                           invokeRestart("muffleMessage")
[13:38:28.538]                       }
[13:38:28.538]                       else if (inherits(cond, "warning")) {
[13:38:28.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.538]                         if (muffled) 
[13:38:28.538]                           invokeRestart("muffleWarning")
[13:38:28.538]                       }
[13:38:28.538]                       else if (inherits(cond, "condition")) {
[13:38:28.538]                         if (!is.null(pattern)) {
[13:38:28.538]                           computeRestarts <- base::computeRestarts
[13:38:28.538]                           grepl <- base::grepl
[13:38:28.538]                           restarts <- computeRestarts(cond)
[13:38:28.538]                           for (restart in restarts) {
[13:38:28.538]                             name <- restart$name
[13:38:28.538]                             if (is.null(name)) 
[13:38:28.538]                               next
[13:38:28.538]                             if (!grepl(pattern, name)) 
[13:38:28.538]                               next
[13:38:28.538]                             invokeRestart(restart)
[13:38:28.538]                             muffled <- TRUE
[13:38:28.538]                             break
[13:38:28.538]                           }
[13:38:28.538]                         }
[13:38:28.538]                       }
[13:38:28.538]                       invisible(muffled)
[13:38:28.538]                     }
[13:38:28.538]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.538]                   }
[13:38:28.538]                 }
[13:38:28.538]                 else {
[13:38:28.538]                   if (TRUE) {
[13:38:28.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.538]                     {
[13:38:28.538]                       inherits <- base::inherits
[13:38:28.538]                       invokeRestart <- base::invokeRestart
[13:38:28.538]                       is.null <- base::is.null
[13:38:28.538]                       muffled <- FALSE
[13:38:28.538]                       if (inherits(cond, "message")) {
[13:38:28.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.538]                         if (muffled) 
[13:38:28.538]                           invokeRestart("muffleMessage")
[13:38:28.538]                       }
[13:38:28.538]                       else if (inherits(cond, "warning")) {
[13:38:28.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.538]                         if (muffled) 
[13:38:28.538]                           invokeRestart("muffleWarning")
[13:38:28.538]                       }
[13:38:28.538]                       else if (inherits(cond, "condition")) {
[13:38:28.538]                         if (!is.null(pattern)) {
[13:38:28.538]                           computeRestarts <- base::computeRestarts
[13:38:28.538]                           grepl <- base::grepl
[13:38:28.538]                           restarts <- computeRestarts(cond)
[13:38:28.538]                           for (restart in restarts) {
[13:38:28.538]                             name <- restart$name
[13:38:28.538]                             if (is.null(name)) 
[13:38:28.538]                               next
[13:38:28.538]                             if (!grepl(pattern, name)) 
[13:38:28.538]                               next
[13:38:28.538]                             invokeRestart(restart)
[13:38:28.538]                             muffled <- TRUE
[13:38:28.538]                             break
[13:38:28.538]                           }
[13:38:28.538]                         }
[13:38:28.538]                       }
[13:38:28.538]                       invisible(muffled)
[13:38:28.538]                     }
[13:38:28.538]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.538]                   }
[13:38:28.538]                 }
[13:38:28.538]             }
[13:38:28.538]         }))
[13:38:28.538]     }, error = function(ex) {
[13:38:28.538]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.538]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.538]                 ...future.rng), started = ...future.startTime, 
[13:38:28.538]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.538]             version = "1.8"), class = "FutureResult")
[13:38:28.538]     }, finally = {
[13:38:28.538]         if (!identical(...future.workdir, getwd())) 
[13:38:28.538]             setwd(...future.workdir)
[13:38:28.538]         {
[13:38:28.538]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.538]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.538]             }
[13:38:28.538]             base::options(...future.oldOptions)
[13:38:28.538]             if (.Platform$OS.type == "windows") {
[13:38:28.538]                 old_names <- names(...future.oldEnvVars)
[13:38:28.538]                 envs <- base::Sys.getenv()
[13:38:28.538]                 names <- names(envs)
[13:38:28.538]                 common <- intersect(names, old_names)
[13:38:28.538]                 added <- setdiff(names, old_names)
[13:38:28.538]                 removed <- setdiff(old_names, names)
[13:38:28.538]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.538]                   envs[common]]
[13:38:28.538]                 NAMES <- toupper(changed)
[13:38:28.538]                 args <- list()
[13:38:28.538]                 for (kk in seq_along(NAMES)) {
[13:38:28.538]                   name <- changed[[kk]]
[13:38:28.538]                   NAME <- NAMES[[kk]]
[13:38:28.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.538]                     next
[13:38:28.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.538]                 }
[13:38:28.538]                 NAMES <- toupper(added)
[13:38:28.538]                 for (kk in seq_along(NAMES)) {
[13:38:28.538]                   name <- added[[kk]]
[13:38:28.538]                   NAME <- NAMES[[kk]]
[13:38:28.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.538]                     next
[13:38:28.538]                   args[[name]] <- ""
[13:38:28.538]                 }
[13:38:28.538]                 NAMES <- toupper(removed)
[13:38:28.538]                 for (kk in seq_along(NAMES)) {
[13:38:28.538]                   name <- removed[[kk]]
[13:38:28.538]                   NAME <- NAMES[[kk]]
[13:38:28.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.538]                     next
[13:38:28.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.538]                 }
[13:38:28.538]                 if (length(args) > 0) 
[13:38:28.538]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.538]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.538]             }
[13:38:28.538]             else {
[13:38:28.538]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.538]             }
[13:38:28.538]             {
[13:38:28.538]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.538]                   0L) {
[13:38:28.538]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.538]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.538]                   base::options(opts)
[13:38:28.538]                 }
[13:38:28.538]                 {
[13:38:28.538]                   {
[13:38:28.538]                     NULL
[13:38:28.538]                     RNGkind("Mersenne-Twister")
[13:38:28.538]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.538]                       inherits = FALSE)
[13:38:28.538]                   }
[13:38:28.538]                   options(future.plan = NULL)
[13:38:28.538]                   if (is.na(NA_character_)) 
[13:38:28.538]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.538]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.538]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.538]                     .init = FALSE)
[13:38:28.538]                 }
[13:38:28.538]             }
[13:38:28.538]         }
[13:38:28.538]     })
[13:38:28.538]     if (TRUE) {
[13:38:28.538]         base::sink(type = "output", split = FALSE)
[13:38:28.538]         if (TRUE) {
[13:38:28.538]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.538]         }
[13:38:28.538]         else {
[13:38:28.538]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.538]         }
[13:38:28.538]         base::close(...future.stdout)
[13:38:28.538]         ...future.stdout <- NULL
[13:38:28.538]     }
[13:38:28.538]     ...future.result$conditions <- ...future.conditions
[13:38:28.538]     ...future.result$finished <- base::Sys.time()
[13:38:28.538]     ...future.result
[13:38:28.538] }
[13:38:28.539] plan(): Setting new future strategy stack:
[13:38:28.539] List of future strategies:
[13:38:28.539] 1. sequential:
[13:38:28.539]    - args: function (..., envir = parent.frame())
[13:38:28.539]    - tweaked: FALSE
[13:38:28.539]    - call: NULL
[13:38:28.540] plan(): nbrOfWorkers() = 1
[13:38:28.541] plan(): Setting new future strategy stack:
[13:38:28.541] List of future strategies:
[13:38:28.541] 1. sequential:
[13:38:28.541]    - args: function (..., envir = parent.frame())
[13:38:28.541]    - tweaked: FALSE
[13:38:28.541]    - call: plan(strategy)
[13:38:28.541] plan(): nbrOfWorkers() = 1
[13:38:28.541] SequentialFuture started (and completed)
[13:38:28.541] - Launch lazy future ... done
[13:38:28.541] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[13:38:28.542] getGlobalsAndPackages() ...
[13:38:28.542] Searching for globals...
[13:38:28.545] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.545] Searching for globals ... DONE
[13:38:28.545] Resolving globals: FALSE
[13:38:28.545] 
[13:38:28.546] - packages: [1] ‘utils’
[13:38:28.546] getGlobalsAndPackages() ... DONE
[13:38:28.546] run() for ‘Future’ ...
[13:38:28.546] - state: ‘created’
[13:38:28.546] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.546] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.546] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.547]   - Field: ‘label’
[13:38:28.547]   - Field: ‘local’
[13:38:28.547]   - Field: ‘owner’
[13:38:28.547]   - Field: ‘envir’
[13:38:28.547]   - Field: ‘packages’
[13:38:28.547]   - Field: ‘gc’
[13:38:28.547]   - Field: ‘conditions’
[13:38:28.547]   - Field: ‘expr’
[13:38:28.547]   - Field: ‘uuid’
[13:38:28.547]   - Field: ‘seed’
[13:38:28.547]   - Field: ‘version’
[13:38:28.548]   - Field: ‘result’
[13:38:28.548]   - Field: ‘asynchronous’
[13:38:28.548]   - Field: ‘calls’
[13:38:28.548]   - Field: ‘globals’
[13:38:28.548]   - Field: ‘stdout’
[13:38:28.548]   - Field: ‘earlySignal’
[13:38:28.548]   - Field: ‘lazy’
[13:38:28.548]   - Field: ‘state’
[13:38:28.548] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.548] - Launch lazy future ...
[13:38:28.549] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.549] Packages needed by future strategies (n = 0): <none>
[13:38:28.549] {
[13:38:28.549]     {
[13:38:28.549]         {
[13:38:28.549]             ...future.startTime <- base::Sys.time()
[13:38:28.549]             {
[13:38:28.549]                 {
[13:38:28.549]                   {
[13:38:28.549]                     {
[13:38:28.549]                       base::local({
[13:38:28.549]                         has_future <- base::requireNamespace("future", 
[13:38:28.549]                           quietly = TRUE)
[13:38:28.549]                         if (has_future) {
[13:38:28.549]                           ns <- base::getNamespace("future")
[13:38:28.549]                           version <- ns[[".package"]][["version"]]
[13:38:28.549]                           if (is.null(version)) 
[13:38:28.549]                             version <- utils::packageVersion("future")
[13:38:28.549]                         }
[13:38:28.549]                         else {
[13:38:28.549]                           version <- NULL
[13:38:28.549]                         }
[13:38:28.549]                         if (!has_future || version < "1.8.0") {
[13:38:28.549]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.549]                             "", base::R.version$version.string), 
[13:38:28.549]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.549]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.549]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.549]                               "release", "version")], collapse = " "), 
[13:38:28.549]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.549]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.549]                             info)
[13:38:28.549]                           info <- base::paste(info, collapse = "; ")
[13:38:28.549]                           if (!has_future) {
[13:38:28.549]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.549]                               info)
[13:38:28.549]                           }
[13:38:28.549]                           else {
[13:38:28.549]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.549]                               info, version)
[13:38:28.549]                           }
[13:38:28.549]                           base::stop(msg)
[13:38:28.549]                         }
[13:38:28.549]                       })
[13:38:28.549]                     }
[13:38:28.549]                     base::local({
[13:38:28.549]                       for (pkg in "utils") {
[13:38:28.549]                         base::loadNamespace(pkg)
[13:38:28.549]                         base::library(pkg, character.only = TRUE)
[13:38:28.549]                       }
[13:38:28.549]                     })
[13:38:28.549]                   }
[13:38:28.549]                   ...future.strategy.old <- future::plan("list")
[13:38:28.549]                   options(future.plan = NULL)
[13:38:28.549]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.549]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.549]                 }
[13:38:28.549]                 ...future.workdir <- getwd()
[13:38:28.549]             }
[13:38:28.549]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.549]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.549]         }
[13:38:28.549]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.549]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.549]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.549]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.549]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.549]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.549]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.549]             base::names(...future.oldOptions))
[13:38:28.549]     }
[13:38:28.549]     if (TRUE) {
[13:38:28.549]     }
[13:38:28.549]     else {
[13:38:28.549]         if (NA) {
[13:38:28.549]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.549]                 open = "w")
[13:38:28.549]         }
[13:38:28.549]         else {
[13:38:28.549]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.549]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.549]         }
[13:38:28.549]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.549]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.549]             base::sink(type = "output", split = FALSE)
[13:38:28.549]             base::close(...future.stdout)
[13:38:28.549]         }, add = TRUE)
[13:38:28.549]     }
[13:38:28.549]     ...future.frame <- base::sys.nframe()
[13:38:28.549]     ...future.conditions <- base::list()
[13:38:28.549]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.549]     if (FALSE) {
[13:38:28.549]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.549]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.549]     }
[13:38:28.549]     ...future.result <- base::tryCatch({
[13:38:28.549]         base::withCallingHandlers({
[13:38:28.549]             ...future.value <- base::withVisible(base::local({
[13:38:28.549]                 print(1:50)
[13:38:28.549]                 str(1:50)
[13:38:28.549]                 cat(letters, sep = "-")
[13:38:28.549]                 cat(1:6, collapse = "\n")
[13:38:28.549]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.549]                 42L
[13:38:28.549]             }))
[13:38:28.549]             future::FutureResult(value = ...future.value$value, 
[13:38:28.549]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.549]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.549]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.549]                     ...future.globalenv.names))
[13:38:28.549]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.549]         }, condition = base::local({
[13:38:28.549]             c <- base::c
[13:38:28.549]             inherits <- base::inherits
[13:38:28.549]             invokeRestart <- base::invokeRestart
[13:38:28.549]             length <- base::length
[13:38:28.549]             list <- base::list
[13:38:28.549]             seq.int <- base::seq.int
[13:38:28.549]             signalCondition <- base::signalCondition
[13:38:28.549]             sys.calls <- base::sys.calls
[13:38:28.549]             `[[` <- base::`[[`
[13:38:28.549]             `+` <- base::`+`
[13:38:28.549]             `<<-` <- base::`<<-`
[13:38:28.549]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.549]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.549]                   3L)]
[13:38:28.549]             }
[13:38:28.549]             function(cond) {
[13:38:28.549]                 is_error <- inherits(cond, "error")
[13:38:28.549]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.549]                   NULL)
[13:38:28.549]                 if (is_error) {
[13:38:28.549]                   sessionInformation <- function() {
[13:38:28.549]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.549]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.549]                       search = base::search(), system = base::Sys.info())
[13:38:28.549]                   }
[13:38:28.549]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.549]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.549]                     cond$call), session = sessionInformation(), 
[13:38:28.549]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.549]                   signalCondition(cond)
[13:38:28.549]                 }
[13:38:28.549]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.549]                 "immediateCondition"))) {
[13:38:28.549]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.549]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.549]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.549]                   if (TRUE && !signal) {
[13:38:28.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.549]                     {
[13:38:28.549]                       inherits <- base::inherits
[13:38:28.549]                       invokeRestart <- base::invokeRestart
[13:38:28.549]                       is.null <- base::is.null
[13:38:28.549]                       muffled <- FALSE
[13:38:28.549]                       if (inherits(cond, "message")) {
[13:38:28.549]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.549]                         if (muffled) 
[13:38:28.549]                           invokeRestart("muffleMessage")
[13:38:28.549]                       }
[13:38:28.549]                       else if (inherits(cond, "warning")) {
[13:38:28.549]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.549]                         if (muffled) 
[13:38:28.549]                           invokeRestart("muffleWarning")
[13:38:28.549]                       }
[13:38:28.549]                       else if (inherits(cond, "condition")) {
[13:38:28.549]                         if (!is.null(pattern)) {
[13:38:28.549]                           computeRestarts <- base::computeRestarts
[13:38:28.549]                           grepl <- base::grepl
[13:38:28.549]                           restarts <- computeRestarts(cond)
[13:38:28.549]                           for (restart in restarts) {
[13:38:28.549]                             name <- restart$name
[13:38:28.549]                             if (is.null(name)) 
[13:38:28.549]                               next
[13:38:28.549]                             if (!grepl(pattern, name)) 
[13:38:28.549]                               next
[13:38:28.549]                             invokeRestart(restart)
[13:38:28.549]                             muffled <- TRUE
[13:38:28.549]                             break
[13:38:28.549]                           }
[13:38:28.549]                         }
[13:38:28.549]                       }
[13:38:28.549]                       invisible(muffled)
[13:38:28.549]                     }
[13:38:28.549]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.549]                   }
[13:38:28.549]                 }
[13:38:28.549]                 else {
[13:38:28.549]                   if (TRUE) {
[13:38:28.549]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.549]                     {
[13:38:28.549]                       inherits <- base::inherits
[13:38:28.549]                       invokeRestart <- base::invokeRestart
[13:38:28.549]                       is.null <- base::is.null
[13:38:28.549]                       muffled <- FALSE
[13:38:28.549]                       if (inherits(cond, "message")) {
[13:38:28.549]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.549]                         if (muffled) 
[13:38:28.549]                           invokeRestart("muffleMessage")
[13:38:28.549]                       }
[13:38:28.549]                       else if (inherits(cond, "warning")) {
[13:38:28.549]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.549]                         if (muffled) 
[13:38:28.549]                           invokeRestart("muffleWarning")
[13:38:28.549]                       }
[13:38:28.549]                       else if (inherits(cond, "condition")) {
[13:38:28.549]                         if (!is.null(pattern)) {
[13:38:28.549]                           computeRestarts <- base::computeRestarts
[13:38:28.549]                           grepl <- base::grepl
[13:38:28.549]                           restarts <- computeRestarts(cond)
[13:38:28.549]                           for (restart in restarts) {
[13:38:28.549]                             name <- restart$name
[13:38:28.549]                             if (is.null(name)) 
[13:38:28.549]                               next
[13:38:28.549]                             if (!grepl(pattern, name)) 
[13:38:28.549]                               next
[13:38:28.549]                             invokeRestart(restart)
[13:38:28.549]                             muffled <- TRUE
[13:38:28.549]                             break
[13:38:28.549]                           }
[13:38:28.549]                         }
[13:38:28.549]                       }
[13:38:28.549]                       invisible(muffled)
[13:38:28.549]                     }
[13:38:28.549]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.549]                   }
[13:38:28.549]                 }
[13:38:28.549]             }
[13:38:28.549]         }))
[13:38:28.549]     }, error = function(ex) {
[13:38:28.549]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.549]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.549]                 ...future.rng), started = ...future.startTime, 
[13:38:28.549]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.549]             version = "1.8"), class = "FutureResult")
[13:38:28.549]     }, finally = {
[13:38:28.549]         if (!identical(...future.workdir, getwd())) 
[13:38:28.549]             setwd(...future.workdir)
[13:38:28.549]         {
[13:38:28.549]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.549]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.549]             }
[13:38:28.549]             base::options(...future.oldOptions)
[13:38:28.549]             if (.Platform$OS.type == "windows") {
[13:38:28.549]                 old_names <- names(...future.oldEnvVars)
[13:38:28.549]                 envs <- base::Sys.getenv()
[13:38:28.549]                 names <- names(envs)
[13:38:28.549]                 common <- intersect(names, old_names)
[13:38:28.549]                 added <- setdiff(names, old_names)
[13:38:28.549]                 removed <- setdiff(old_names, names)
[13:38:28.549]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.549]                   envs[common]]
[13:38:28.549]                 NAMES <- toupper(changed)
[13:38:28.549]                 args <- list()
[13:38:28.549]                 for (kk in seq_along(NAMES)) {
[13:38:28.549]                   name <- changed[[kk]]
[13:38:28.549]                   NAME <- NAMES[[kk]]
[13:38:28.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.549]                     next
[13:38:28.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.549]                 }
[13:38:28.549]                 NAMES <- toupper(added)
[13:38:28.549]                 for (kk in seq_along(NAMES)) {
[13:38:28.549]                   name <- added[[kk]]
[13:38:28.549]                   NAME <- NAMES[[kk]]
[13:38:28.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.549]                     next
[13:38:28.549]                   args[[name]] <- ""
[13:38:28.549]                 }
[13:38:28.549]                 NAMES <- toupper(removed)
[13:38:28.549]                 for (kk in seq_along(NAMES)) {
[13:38:28.549]                   name <- removed[[kk]]
[13:38:28.549]                   NAME <- NAMES[[kk]]
[13:38:28.549]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.549]                     next
[13:38:28.549]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.549]                 }
[13:38:28.549]                 if (length(args) > 0) 
[13:38:28.549]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.549]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.549]             }
[13:38:28.549]             else {
[13:38:28.549]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.549]             }
[13:38:28.549]             {
[13:38:28.549]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.549]                   0L) {
[13:38:28.549]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.549]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.549]                   base::options(opts)
[13:38:28.549]                 }
[13:38:28.549]                 {
[13:38:28.549]                   {
[13:38:28.549]                     NULL
[13:38:28.549]                     RNGkind("Mersenne-Twister")
[13:38:28.549]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.549]                       inherits = FALSE)
[13:38:28.549]                   }
[13:38:28.549]                   options(future.plan = NULL)
[13:38:28.549]                   if (is.na(NA_character_)) 
[13:38:28.549]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.549]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.549]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.549]                     .init = FALSE)
[13:38:28.549]                 }
[13:38:28.549]             }
[13:38:28.549]         }
[13:38:28.549]     })
[13:38:28.549]     if (FALSE) {
[13:38:28.549]         base::sink(type = "output", split = FALSE)
[13:38:28.549]         if (NA) {
[13:38:28.549]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.549]         }
[13:38:28.549]         else {
[13:38:28.549]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.549]         }
[13:38:28.549]         base::close(...future.stdout)
[13:38:28.549]         ...future.stdout <- NULL
[13:38:28.549]     }
[13:38:28.549]     ...future.result$conditions <- ...future.conditions
[13:38:28.549]     ...future.result$finished <- base::Sys.time()
[13:38:28.549]     ...future.result
[13:38:28.549] }
[13:38:28.551] plan(): Setting new future strategy stack:
[13:38:28.551] List of future strategies:
[13:38:28.551] 1. sequential:
[13:38:28.551]    - args: function (..., envir = parent.frame())
[13:38:28.551]    - tweaked: FALSE
[13:38:28.551]    - call: NULL
[13:38:28.552] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:38:28.553] plan(): Setting new future strategy stack:
[13:38:28.553] List of future strategies:
[13:38:28.553] 1. sequential:
[13:38:28.553]    - args: function (..., envir = parent.frame())
[13:38:28.553]    - tweaked: FALSE
[13:38:28.553]    - call: plan(strategy)
[13:38:28.554] plan(): nbrOfWorkers() = 1
[13:38:28.554] SequentialFuture started (and completed)
[13:38:28.554] - Launch lazy future ... done
[13:38:28.554] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "0d5a888a-6fed-d505-4c34-84f1338acd7c"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90952
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:28.564] getGlobalsAndPackages() ...
[13:38:28.564] Searching for globals...
[13:38:28.567] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.567] Searching for globals ... DONE
[13:38:28.567] Resolving globals: FALSE
[13:38:28.567] 
[13:38:28.567] - packages: [1] ‘utils’
[13:38:28.568] getGlobalsAndPackages() ... DONE
[13:38:28.568] run() for ‘Future’ ...
[13:38:28.568] - state: ‘created’
[13:38:28.568] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.568] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.568] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.568]   - Field: ‘label’
[13:38:28.569]   - Field: ‘local’
[13:38:28.569]   - Field: ‘owner’
[13:38:28.569]   - Field: ‘envir’
[13:38:28.569]   - Field: ‘packages’
[13:38:28.569]   - Field: ‘gc’
[13:38:28.569]   - Field: ‘conditions’
[13:38:28.569]   - Field: ‘expr’
[13:38:28.569]   - Field: ‘uuid’
[13:38:28.569]   - Field: ‘seed’
[13:38:28.569]   - Field: ‘version’
[13:38:28.570]   - Field: ‘result’
[13:38:28.570]   - Field: ‘asynchronous’
[13:38:28.570]   - Field: ‘calls’
[13:38:28.570]   - Field: ‘globals’
[13:38:28.570]   - Field: ‘stdout’
[13:38:28.570]   - Field: ‘earlySignal’
[13:38:28.570]   - Field: ‘lazy’
[13:38:28.570]   - Field: ‘state’
[13:38:28.570] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.570] - Launch lazy future ...
[13:38:28.571] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.571] Packages needed by future strategies (n = 0): <none>
[13:38:28.571] {
[13:38:28.571]     {
[13:38:28.571]         {
[13:38:28.571]             ...future.startTime <- base::Sys.time()
[13:38:28.571]             {
[13:38:28.571]                 {
[13:38:28.571]                   {
[13:38:28.571]                     {
[13:38:28.571]                       base::local({
[13:38:28.571]                         has_future <- base::requireNamespace("future", 
[13:38:28.571]                           quietly = TRUE)
[13:38:28.571]                         if (has_future) {
[13:38:28.571]                           ns <- base::getNamespace("future")
[13:38:28.571]                           version <- ns[[".package"]][["version"]]
[13:38:28.571]                           if (is.null(version)) 
[13:38:28.571]                             version <- utils::packageVersion("future")
[13:38:28.571]                         }
[13:38:28.571]                         else {
[13:38:28.571]                           version <- NULL
[13:38:28.571]                         }
[13:38:28.571]                         if (!has_future || version < "1.8.0") {
[13:38:28.571]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.571]                             "", base::R.version$version.string), 
[13:38:28.571]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.571]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.571]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.571]                               "release", "version")], collapse = " "), 
[13:38:28.571]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.571]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.571]                             info)
[13:38:28.571]                           info <- base::paste(info, collapse = "; ")
[13:38:28.571]                           if (!has_future) {
[13:38:28.571]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.571]                               info)
[13:38:28.571]                           }
[13:38:28.571]                           else {
[13:38:28.571]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.571]                               info, version)
[13:38:28.571]                           }
[13:38:28.571]                           base::stop(msg)
[13:38:28.571]                         }
[13:38:28.571]                       })
[13:38:28.571]                     }
[13:38:28.571]                     base::local({
[13:38:28.571]                       for (pkg in "utils") {
[13:38:28.571]                         base::loadNamespace(pkg)
[13:38:28.571]                         base::library(pkg, character.only = TRUE)
[13:38:28.571]                       }
[13:38:28.571]                     })
[13:38:28.571]                   }
[13:38:28.571]                   ...future.strategy.old <- future::plan("list")
[13:38:28.571]                   options(future.plan = NULL)
[13:38:28.571]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.571]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.571]                 }
[13:38:28.571]                 ...future.workdir <- getwd()
[13:38:28.571]             }
[13:38:28.571]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.571]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.571]         }
[13:38:28.571]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.571]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.571]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.571]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.571]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.571]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.571]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.571]             base::names(...future.oldOptions))
[13:38:28.571]     }
[13:38:28.571]     if (TRUE) {
[13:38:28.571]     }
[13:38:28.571]     else {
[13:38:28.571]         if (NA) {
[13:38:28.571]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.571]                 open = "w")
[13:38:28.571]         }
[13:38:28.571]         else {
[13:38:28.571]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.571]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.571]         }
[13:38:28.571]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.571]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.571]             base::sink(type = "output", split = FALSE)
[13:38:28.571]             base::close(...future.stdout)
[13:38:28.571]         }, add = TRUE)
[13:38:28.571]     }
[13:38:28.571]     ...future.frame <- base::sys.nframe()
[13:38:28.571]     ...future.conditions <- base::list()
[13:38:28.571]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.571]     if (FALSE) {
[13:38:28.571]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.571]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.571]     }
[13:38:28.571]     ...future.result <- base::tryCatch({
[13:38:28.571]         base::withCallingHandlers({
[13:38:28.571]             ...future.value <- base::withVisible(base::local({
[13:38:28.571]                 print(1:50)
[13:38:28.571]                 str(1:50)
[13:38:28.571]                 cat(letters, sep = "-")
[13:38:28.571]                 cat(1:6, collapse = "\n")
[13:38:28.571]                 write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.571]                 42L
[13:38:28.571]             }))
[13:38:28.571]             future::FutureResult(value = ...future.value$value, 
[13:38:28.571]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.571]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.571]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.571]                     ...future.globalenv.names))
[13:38:28.571]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.571]         }, condition = base::local({
[13:38:28.571]             c <- base::c
[13:38:28.571]             inherits <- base::inherits
[13:38:28.571]             invokeRestart <- base::invokeRestart
[13:38:28.571]             length <- base::length
[13:38:28.571]             list <- base::list
[13:38:28.571]             seq.int <- base::seq.int
[13:38:28.571]             signalCondition <- base::signalCondition
[13:38:28.571]             sys.calls <- base::sys.calls
[13:38:28.571]             `[[` <- base::`[[`
[13:38:28.571]             `+` <- base::`+`
[13:38:28.571]             `<<-` <- base::`<<-`
[13:38:28.571]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.571]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.571]                   3L)]
[13:38:28.571]             }
[13:38:28.571]             function(cond) {
[13:38:28.571]                 is_error <- inherits(cond, "error")
[13:38:28.571]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.571]                   NULL)
[13:38:28.571]                 if (is_error) {
[13:38:28.571]                   sessionInformation <- function() {
[13:38:28.571]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.571]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.571]                       search = base::search(), system = base::Sys.info())
[13:38:28.571]                   }
[13:38:28.571]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.571]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.571]                     cond$call), session = sessionInformation(), 
[13:38:28.571]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.571]                   signalCondition(cond)
[13:38:28.571]                 }
[13:38:28.571]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.571]                 "immediateCondition"))) {
[13:38:28.571]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.571]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.571]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.571]                   if (TRUE && !signal) {
[13:38:28.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.571]                     {
[13:38:28.571]                       inherits <- base::inherits
[13:38:28.571]                       invokeRestart <- base::invokeRestart
[13:38:28.571]                       is.null <- base::is.null
[13:38:28.571]                       muffled <- FALSE
[13:38:28.571]                       if (inherits(cond, "message")) {
[13:38:28.571]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.571]                         if (muffled) 
[13:38:28.571]                           invokeRestart("muffleMessage")
[13:38:28.571]                       }
[13:38:28.571]                       else if (inherits(cond, "warning")) {
[13:38:28.571]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.571]                         if (muffled) 
[13:38:28.571]                           invokeRestart("muffleWarning")
[13:38:28.571]                       }
[13:38:28.571]                       else if (inherits(cond, "condition")) {
[13:38:28.571]                         if (!is.null(pattern)) {
[13:38:28.571]                           computeRestarts <- base::computeRestarts
[13:38:28.571]                           grepl <- base::grepl
[13:38:28.571]                           restarts <- computeRestarts(cond)
[13:38:28.571]                           for (restart in restarts) {
[13:38:28.571]                             name <- restart$name
[13:38:28.571]                             if (is.null(name)) 
[13:38:28.571]                               next
[13:38:28.571]                             if (!grepl(pattern, name)) 
[13:38:28.571]                               next
[13:38:28.571]                             invokeRestart(restart)
[13:38:28.571]                             muffled <- TRUE
[13:38:28.571]                             break
[13:38:28.571]                           }
[13:38:28.571]                         }
[13:38:28.571]                       }
[13:38:28.571]                       invisible(muffled)
[13:38:28.571]                     }
[13:38:28.571]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.571]                   }
[13:38:28.571]                 }
[13:38:28.571]                 else {
[13:38:28.571]                   if (TRUE) {
[13:38:28.571]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.571]                     {
[13:38:28.571]                       inherits <- base::inherits
[13:38:28.571]                       invokeRestart <- base::invokeRestart
[13:38:28.571]                       is.null <- base::is.null
[13:38:28.571]                       muffled <- FALSE
[13:38:28.571]                       if (inherits(cond, "message")) {
[13:38:28.571]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.571]                         if (muffled) 
[13:38:28.571]                           invokeRestart("muffleMessage")
[13:38:28.571]                       }
[13:38:28.571]                       else if (inherits(cond, "warning")) {
[13:38:28.571]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.571]                         if (muffled) 
[13:38:28.571]                           invokeRestart("muffleWarning")
[13:38:28.571]                       }
[13:38:28.571]                       else if (inherits(cond, "condition")) {
[13:38:28.571]                         if (!is.null(pattern)) {
[13:38:28.571]                           computeRestarts <- base::computeRestarts
[13:38:28.571]                           grepl <- base::grepl
[13:38:28.571]                           restarts <- computeRestarts(cond)
[13:38:28.571]                           for (restart in restarts) {
[13:38:28.571]                             name <- restart$name
[13:38:28.571]                             if (is.null(name)) 
[13:38:28.571]                               next
[13:38:28.571]                             if (!grepl(pattern, name)) 
[13:38:28.571]                               next
[13:38:28.571]                             invokeRestart(restart)
[13:38:28.571]                             muffled <- TRUE
[13:38:28.571]                             break
[13:38:28.571]                           }
[13:38:28.571]                         }
[13:38:28.571]                       }
[13:38:28.571]                       invisible(muffled)
[13:38:28.571]                     }
[13:38:28.571]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.571]                   }
[13:38:28.571]                 }
[13:38:28.571]             }
[13:38:28.571]         }))
[13:38:28.571]     }, error = function(ex) {
[13:38:28.571]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.571]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.571]                 ...future.rng), started = ...future.startTime, 
[13:38:28.571]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.571]             version = "1.8"), class = "FutureResult")
[13:38:28.571]     }, finally = {
[13:38:28.571]         if (!identical(...future.workdir, getwd())) 
[13:38:28.571]             setwd(...future.workdir)
[13:38:28.571]         {
[13:38:28.571]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.571]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.571]             }
[13:38:28.571]             base::options(...future.oldOptions)
[13:38:28.571]             if (.Platform$OS.type == "windows") {
[13:38:28.571]                 old_names <- names(...future.oldEnvVars)
[13:38:28.571]                 envs <- base::Sys.getenv()
[13:38:28.571]                 names <- names(envs)
[13:38:28.571]                 common <- intersect(names, old_names)
[13:38:28.571]                 added <- setdiff(names, old_names)
[13:38:28.571]                 removed <- setdiff(old_names, names)
[13:38:28.571]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.571]                   envs[common]]
[13:38:28.571]                 NAMES <- toupper(changed)
[13:38:28.571]                 args <- list()
[13:38:28.571]                 for (kk in seq_along(NAMES)) {
[13:38:28.571]                   name <- changed[[kk]]
[13:38:28.571]                   NAME <- NAMES[[kk]]
[13:38:28.571]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.571]                     next
[13:38:28.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.571]                 }
[13:38:28.571]                 NAMES <- toupper(added)
[13:38:28.571]                 for (kk in seq_along(NAMES)) {
[13:38:28.571]                   name <- added[[kk]]
[13:38:28.571]                   NAME <- NAMES[[kk]]
[13:38:28.571]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.571]                     next
[13:38:28.571]                   args[[name]] <- ""
[13:38:28.571]                 }
[13:38:28.571]                 NAMES <- toupper(removed)
[13:38:28.571]                 for (kk in seq_along(NAMES)) {
[13:38:28.571]                   name <- removed[[kk]]
[13:38:28.571]                   NAME <- NAMES[[kk]]
[13:38:28.571]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.571]                     next
[13:38:28.571]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.571]                 }
[13:38:28.571]                 if (length(args) > 0) 
[13:38:28.571]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.571]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.571]             }
[13:38:28.571]             else {
[13:38:28.571]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.571]             }
[13:38:28.571]             {
[13:38:28.571]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.571]                   0L) {
[13:38:28.571]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.571]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.571]                   base::options(opts)
[13:38:28.571]                 }
[13:38:28.571]                 {
[13:38:28.571]                   {
[13:38:28.571]                     NULL
[13:38:28.571]                     RNGkind("Mersenne-Twister")
[13:38:28.571]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.571]                       inherits = FALSE)
[13:38:28.571]                   }
[13:38:28.571]                   options(future.plan = NULL)
[13:38:28.571]                   if (is.na(NA_character_)) 
[13:38:28.571]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.571]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.571]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.571]                     .init = FALSE)
[13:38:28.571]                 }
[13:38:28.571]             }
[13:38:28.571]         }
[13:38:28.571]     })
[13:38:28.571]     if (FALSE) {
[13:38:28.571]         base::sink(type = "output", split = FALSE)
[13:38:28.571]         if (NA) {
[13:38:28.571]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.571]         }
[13:38:28.571]         else {
[13:38:28.571]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.571]         }
[13:38:28.571]         base::close(...future.stdout)
[13:38:28.571]         ...future.stdout <- NULL
[13:38:28.571]     }
[13:38:28.571]     ...future.result$conditions <- ...future.conditions
[13:38:28.571]     ...future.result$finished <- base::Sys.time()
[13:38:28.571]     ...future.result
[13:38:28.571] }
[13:38:28.573] plan(): Setting new future strategy stack:
[13:38:28.573] List of future strategies:
[13:38:28.573] 1. sequential:
[13:38:28.573]    - args: function (..., envir = parent.frame())
[13:38:28.573]    - tweaked: FALSE
[13:38:28.573]    - call: NULL
[13:38:28.574] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:38:28.575] plan(): Setting new future strategy stack:
[13:38:28.575] List of future strategies:
[13:38:28.575] 1. sequential:
[13:38:28.575]    - args: function (..., envir = parent.frame())
[13:38:28.575]    - tweaked: FALSE
[13:38:28.575]    - call: plan(strategy)
[13:38:28.576] plan(): nbrOfWorkers() = 1
[13:38:28.576] SequentialFuture started (and completed)
[13:38:28.576] - Launch lazy future ... done
[13:38:28.576] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.576] getGlobalsAndPackages() ...
[13:38:28.576] Searching for globals...
[13:38:28.577] - globals found: [1] ‘print’
[13:38:28.577] Searching for globals ... DONE
[13:38:28.577] Resolving globals: FALSE
[13:38:28.577] 
[13:38:28.577] 
[13:38:28.577] getGlobalsAndPackages() ... DONE
[13:38:28.578] run() for ‘Future’ ...
[13:38:28.578] - state: ‘created’
[13:38:28.578] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:38:28.578] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:38:28.578] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:38:28.578]   - Field: ‘label’
[13:38:28.579]   - Field: ‘local’
[13:38:28.579]   - Field: ‘owner’
[13:38:28.579]   - Field: ‘envir’
[13:38:28.579]   - Field: ‘packages’
[13:38:28.579]   - Field: ‘gc’
[13:38:28.579]   - Field: ‘conditions’
[13:38:28.579]   - Field: ‘expr’
[13:38:28.579]   - Field: ‘uuid’
[13:38:28.579]   - Field: ‘seed’
[13:38:28.579]   - Field: ‘version’
[13:38:28.579]   - Field: ‘result’
[13:38:28.580]   - Field: ‘asynchronous’
[13:38:28.580]   - Field: ‘calls’
[13:38:28.580]   - Field: ‘globals’
[13:38:28.580]   - Field: ‘stdout’
[13:38:28.580]   - Field: ‘earlySignal’
[13:38:28.580]   - Field: ‘lazy’
[13:38:28.580]   - Field: ‘state’
[13:38:28.580] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:38:28.580] - Launch lazy future ...
[13:38:28.580] Packages needed by the future expression (n = 0): <none>
[13:38:28.580] Packages needed by future strategies (n = 0): <none>
[13:38:28.581] {
[13:38:28.581]     {
[13:38:28.581]         {
[13:38:28.581]             ...future.startTime <- base::Sys.time()
[13:38:28.581]             {
[13:38:28.581]                 {
[13:38:28.581]                   {
[13:38:28.581]                     base::local({
[13:38:28.581]                       has_future <- base::requireNamespace("future", 
[13:38:28.581]                         quietly = TRUE)
[13:38:28.581]                       if (has_future) {
[13:38:28.581]                         ns <- base::getNamespace("future")
[13:38:28.581]                         version <- ns[[".package"]][["version"]]
[13:38:28.581]                         if (is.null(version)) 
[13:38:28.581]                           version <- utils::packageVersion("future")
[13:38:28.581]                       }
[13:38:28.581]                       else {
[13:38:28.581]                         version <- NULL
[13:38:28.581]                       }
[13:38:28.581]                       if (!has_future || version < "1.8.0") {
[13:38:28.581]                         info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.581]                           "", base::R.version$version.string), 
[13:38:28.581]                           platform = base::sprintf("%s (%s-bit)", 
[13:38:28.581]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.581]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.581]                             "release", "version")], collapse = " "), 
[13:38:28.581]                           hostname = base::Sys.info()[["nodename"]])
[13:38:28.581]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.581]                           info)
[13:38:28.581]                         info <- base::paste(info, collapse = "; ")
[13:38:28.581]                         if (!has_future) {
[13:38:28.581]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.581]                             info)
[13:38:28.581]                         }
[13:38:28.581]                         else {
[13:38:28.581]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.581]                             info, version)
[13:38:28.581]                         }
[13:38:28.581]                         base::stop(msg)
[13:38:28.581]                       }
[13:38:28.581]                     })
[13:38:28.581]                   }
[13:38:28.581]                   ...future.strategy.old <- future::plan("list")
[13:38:28.581]                   options(future.plan = NULL)
[13:38:28.581]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.581]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.581]                 }
[13:38:28.581]                 ...future.workdir <- getwd()
[13:38:28.581]             }
[13:38:28.581]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.581]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.581]         }
[13:38:28.581]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.581]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.581]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.581]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.581]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.581]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.581]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.581]             base::names(...future.oldOptions))
[13:38:28.581]     }
[13:38:28.581]     if (FALSE) {
[13:38:28.581]     }
[13:38:28.581]     else {
[13:38:28.581]         if (TRUE) {
[13:38:28.581]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.581]                 open = "w")
[13:38:28.581]         }
[13:38:28.581]         else {
[13:38:28.581]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.581]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.581]         }
[13:38:28.581]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.581]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.581]             base::sink(type = "output", split = FALSE)
[13:38:28.581]             base::close(...future.stdout)
[13:38:28.581]         }, add = TRUE)
[13:38:28.581]     }
[13:38:28.581]     ...future.frame <- base::sys.nframe()
[13:38:28.581]     ...future.conditions <- base::list()
[13:38:28.581]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.581]     if (FALSE) {
[13:38:28.581]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.581]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.581]     }
[13:38:28.581]     ...future.result <- base::tryCatch({
[13:38:28.581]         base::withCallingHandlers({
[13:38:28.581]             ...future.value <- base::withVisible(base::local(print(42)))
[13:38:28.581]             future::FutureResult(value = ...future.value$value, 
[13:38:28.581]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.581]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.581]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.581]                     ...future.globalenv.names))
[13:38:28.581]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.581]         }, condition = base::local({
[13:38:28.581]             c <- base::c
[13:38:28.581]             inherits <- base::inherits
[13:38:28.581]             invokeRestart <- base::invokeRestart
[13:38:28.581]             length <- base::length
[13:38:28.581]             list <- base::list
[13:38:28.581]             seq.int <- base::seq.int
[13:38:28.581]             signalCondition <- base::signalCondition
[13:38:28.581]             sys.calls <- base::sys.calls
[13:38:28.581]             `[[` <- base::`[[`
[13:38:28.581]             `+` <- base::`+`
[13:38:28.581]             `<<-` <- base::`<<-`
[13:38:28.581]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.581]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.581]                   3L)]
[13:38:28.581]             }
[13:38:28.581]             function(cond) {
[13:38:28.581]                 is_error <- inherits(cond, "error")
[13:38:28.581]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.581]                   NULL)
[13:38:28.581]                 if (is_error) {
[13:38:28.581]                   sessionInformation <- function() {
[13:38:28.581]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.581]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.581]                       search = base::search(), system = base::Sys.info())
[13:38:28.581]                   }
[13:38:28.581]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.581]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.581]                     cond$call), session = sessionInformation(), 
[13:38:28.581]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.581]                   signalCondition(cond)
[13:38:28.581]                 }
[13:38:28.581]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.581]                 "immediateCondition"))) {
[13:38:28.581]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.581]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.581]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.581]                   if (TRUE && !signal) {
[13:38:28.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.581]                     {
[13:38:28.581]                       inherits <- base::inherits
[13:38:28.581]                       invokeRestart <- base::invokeRestart
[13:38:28.581]                       is.null <- base::is.null
[13:38:28.581]                       muffled <- FALSE
[13:38:28.581]                       if (inherits(cond, "message")) {
[13:38:28.581]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.581]                         if (muffled) 
[13:38:28.581]                           invokeRestart("muffleMessage")
[13:38:28.581]                       }
[13:38:28.581]                       else if (inherits(cond, "warning")) {
[13:38:28.581]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.581]                         if (muffled) 
[13:38:28.581]                           invokeRestart("muffleWarning")
[13:38:28.581]                       }
[13:38:28.581]                       else if (inherits(cond, "condition")) {
[13:38:28.581]                         if (!is.null(pattern)) {
[13:38:28.581]                           computeRestarts <- base::computeRestarts
[13:38:28.581]                           grepl <- base::grepl
[13:38:28.581]                           restarts <- computeRestarts(cond)
[13:38:28.581]                           for (restart in restarts) {
[13:38:28.581]                             name <- restart$name
[13:38:28.581]                             if (is.null(name)) 
[13:38:28.581]                               next
[13:38:28.581]                             if (!grepl(pattern, name)) 
[13:38:28.581]                               next
[13:38:28.581]                             invokeRestart(restart)
[13:38:28.581]                             muffled <- TRUE
[13:38:28.581]                             break
[13:38:28.581]                           }
[13:38:28.581]                         }
[13:38:28.581]                       }
[13:38:28.581]                       invisible(muffled)
[13:38:28.581]                     }
[13:38:28.581]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.581]                   }
[13:38:28.581]                 }
[13:38:28.581]                 else {
[13:38:28.581]                   if (TRUE) {
[13:38:28.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.581]                     {
[13:38:28.581]                       inherits <- base::inherits
[13:38:28.581]                       invokeRestart <- base::invokeRestart
[13:38:28.581]                       is.null <- base::is.null
[13:38:28.581]                       muffled <- FALSE
[13:38:28.581]                       if (inherits(cond, "message")) {
[13:38:28.581]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.581]                         if (muffled) 
[13:38:28.581]                           invokeRestart("muffleMessage")
[13:38:28.581]                       }
[13:38:28.581]                       else if (inherits(cond, "warning")) {
[13:38:28.581]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.581]                         if (muffled) 
[13:38:28.581]                           invokeRestart("muffleWarning")
[13:38:28.581]                       }
[13:38:28.581]                       else if (inherits(cond, "condition")) {
[13:38:28.581]                         if (!is.null(pattern)) {
[13:38:28.581]                           computeRestarts <- base::computeRestarts
[13:38:28.581]                           grepl <- base::grepl
[13:38:28.581]                           restarts <- computeRestarts(cond)
[13:38:28.581]                           for (restart in restarts) {
[13:38:28.581]                             name <- restart$name
[13:38:28.581]                             if (is.null(name)) 
[13:38:28.581]                               next
[13:38:28.581]                             if (!grepl(pattern, name)) 
[13:38:28.581]                               next
[13:38:28.581]                             invokeRestart(restart)
[13:38:28.581]                             muffled <- TRUE
[13:38:28.581]                             break
[13:38:28.581]                           }
[13:38:28.581]                         }
[13:38:28.581]                       }
[13:38:28.581]                       invisible(muffled)
[13:38:28.581]                     }
[13:38:28.581]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.581]                   }
[13:38:28.581]                 }
[13:38:28.581]             }
[13:38:28.581]         }))
[13:38:28.581]     }, error = function(ex) {
[13:38:28.581]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.581]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.581]                 ...future.rng), started = ...future.startTime, 
[13:38:28.581]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.581]             version = "1.8"), class = "FutureResult")
[13:38:28.581]     }, finally = {
[13:38:28.581]         if (!identical(...future.workdir, getwd())) 
[13:38:28.581]             setwd(...future.workdir)
[13:38:28.581]         {
[13:38:28.581]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.581]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.581]             }
[13:38:28.581]             base::options(...future.oldOptions)
[13:38:28.581]             if (.Platform$OS.type == "windows") {
[13:38:28.581]                 old_names <- names(...future.oldEnvVars)
[13:38:28.581]                 envs <- base::Sys.getenv()
[13:38:28.581]                 names <- names(envs)
[13:38:28.581]                 common <- intersect(names, old_names)
[13:38:28.581]                 added <- setdiff(names, old_names)
[13:38:28.581]                 removed <- setdiff(old_names, names)
[13:38:28.581]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.581]                   envs[common]]
[13:38:28.581]                 NAMES <- toupper(changed)
[13:38:28.581]                 args <- list()
[13:38:28.581]                 for (kk in seq_along(NAMES)) {
[13:38:28.581]                   name <- changed[[kk]]
[13:38:28.581]                   NAME <- NAMES[[kk]]
[13:38:28.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.581]                     next
[13:38:28.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.581]                 }
[13:38:28.581]                 NAMES <- toupper(added)
[13:38:28.581]                 for (kk in seq_along(NAMES)) {
[13:38:28.581]                   name <- added[[kk]]
[13:38:28.581]                   NAME <- NAMES[[kk]]
[13:38:28.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.581]                     next
[13:38:28.581]                   args[[name]] <- ""
[13:38:28.581]                 }
[13:38:28.581]                 NAMES <- toupper(removed)
[13:38:28.581]                 for (kk in seq_along(NAMES)) {
[13:38:28.581]                   name <- removed[[kk]]
[13:38:28.581]                   NAME <- NAMES[[kk]]
[13:38:28.581]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.581]                     next
[13:38:28.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.581]                 }
[13:38:28.581]                 if (length(args) > 0) 
[13:38:28.581]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.581]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.581]             }
[13:38:28.581]             else {
[13:38:28.581]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.581]             }
[13:38:28.581]             {
[13:38:28.581]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.581]                   0L) {
[13:38:28.581]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.581]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.581]                   base::options(opts)
[13:38:28.581]                 }
[13:38:28.581]                 {
[13:38:28.581]                   {
[13:38:28.581]                     NULL
[13:38:28.581]                     RNGkind("Mersenne-Twister")
[13:38:28.581]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:38:28.581]                       inherits = FALSE)
[13:38:28.581]                   }
[13:38:28.581]                   options(future.plan = NULL)
[13:38:28.581]                   if (is.na(NA_character_)) 
[13:38:28.581]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.581]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.581]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.581]                     .init = FALSE)
[13:38:28.581]                 }
[13:38:28.581]             }
[13:38:28.581]         }
[13:38:28.581]     })
[13:38:28.581]     if (TRUE) {
[13:38:28.581]         base::sink(type = "output", split = FALSE)
[13:38:28.581]         if (TRUE) {
[13:38:28.581]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.581]         }
[13:38:28.581]         else {
[13:38:28.581]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.581]         }
[13:38:28.581]         base::close(...future.stdout)
[13:38:28.581]         ...future.stdout <- NULL
[13:38:28.581]     }
[13:38:28.581]     ...future.result$conditions <- ...future.conditions
[13:38:28.581]     ...future.result$finished <- base::Sys.time()
[13:38:28.581]     ...future.result
[13:38:28.581] }
[13:38:28.583] plan(): Setting new future strategy stack:
[13:38:28.583] List of future strategies:
[13:38:28.583] 1. sequential:
[13:38:28.583]    - args: function (..., envir = parent.frame())
[13:38:28.583]    - tweaked: FALSE
[13:38:28.583]    - call: NULL
[13:38:28.583] plan(): nbrOfWorkers() = 1
[13:38:28.584] plan(): Setting new future strategy stack:
[13:38:28.584] List of future strategies:
[13:38:28.584] 1. sequential:
[13:38:28.584]    - args: function (..., envir = parent.frame())
[13:38:28.584]    - tweaked: FALSE
[13:38:28.584]    - call: plan(strategy)
[13:38:28.584] plan(): nbrOfWorkers() = 1
[13:38:28.584] SequentialFuture started (and completed)
[13:38:28.584] - Launch lazy future ... done
[13:38:28.585] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[13:38:28.592] plan(): Setting new future strategy stack:
[13:38:28.592] List of future strategies:
[13:38:28.592] 1. multicore:
[13:38:28.592]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.592]    - tweaked: FALSE
[13:38:28.592]    - call: plan(strategy)
[13:38:28.596] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[13:38:28.596] getGlobalsAndPackages() ...
[13:38:28.596] Searching for globals...
[13:38:28.599] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.599] Searching for globals ... DONE
[13:38:28.599] Resolving globals: FALSE
[13:38:28.600] 
[13:38:28.600] - packages: [1] ‘utils’
[13:38:28.600] getGlobalsAndPackages() ... DONE
[13:38:28.600] run() for ‘Future’ ...
[13:38:28.600] - state: ‘created’
[13:38:28.601] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.604] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.605] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.605]   - Field: ‘label’
[13:38:28.605]   - Field: ‘local’
[13:38:28.605]   - Field: ‘owner’
[13:38:28.605]   - Field: ‘envir’
[13:38:28.605]   - Field: ‘workers’
[13:38:28.605]   - Field: ‘packages’
[13:38:28.605]   - Field: ‘gc’
[13:38:28.605]   - Field: ‘job’
[13:38:28.605]   - Field: ‘conditions’
[13:38:28.606]   - Field: ‘expr’
[13:38:28.606]   - Field: ‘uuid’
[13:38:28.606]   - Field: ‘seed’
[13:38:28.606]   - Field: ‘version’
[13:38:28.606]   - Field: ‘result’
[13:38:28.606]   - Field: ‘asynchronous’
[13:38:28.606]   - Field: ‘calls’
[13:38:28.606]   - Field: ‘globals’
[13:38:28.606]   - Field: ‘stdout’
[13:38:28.606]   - Field: ‘earlySignal’
[13:38:28.607]   - Field: ‘lazy’
[13:38:28.607]   - Field: ‘state’
[13:38:28.607] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.607] - Launch lazy future ...
[13:38:28.608] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.608] Packages needed by future strategies (n = 0): <none>
[13:38:28.609] {
[13:38:28.609]     {
[13:38:28.609]         {
[13:38:28.609]             ...future.startTime <- base::Sys.time()
[13:38:28.609]             {
[13:38:28.609]                 {
[13:38:28.609]                   {
[13:38:28.609]                     {
[13:38:28.609]                       {
[13:38:28.609]                         base::local({
[13:38:28.609]                           has_future <- base::requireNamespace("future", 
[13:38:28.609]                             quietly = TRUE)
[13:38:28.609]                           if (has_future) {
[13:38:28.609]                             ns <- base::getNamespace("future")
[13:38:28.609]                             version <- ns[[".package"]][["version"]]
[13:38:28.609]                             if (is.null(version)) 
[13:38:28.609]                               version <- utils::packageVersion("future")
[13:38:28.609]                           }
[13:38:28.609]                           else {
[13:38:28.609]                             version <- NULL
[13:38:28.609]                           }
[13:38:28.609]                           if (!has_future || version < "1.8.0") {
[13:38:28.609]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.609]                               "", base::R.version$version.string), 
[13:38:28.609]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.609]                                 base::R.version$platform, 8 * 
[13:38:28.609]                                   base::.Machine$sizeof.pointer), 
[13:38:28.609]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.609]                                 "release", "version")], collapse = " "), 
[13:38:28.609]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.609]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.609]                               info)
[13:38:28.609]                             info <- base::paste(info, collapse = "; ")
[13:38:28.609]                             if (!has_future) {
[13:38:28.609]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.609]                                 info)
[13:38:28.609]                             }
[13:38:28.609]                             else {
[13:38:28.609]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.609]                                 info, version)
[13:38:28.609]                             }
[13:38:28.609]                             base::stop(msg)
[13:38:28.609]                           }
[13:38:28.609]                         })
[13:38:28.609]                       }
[13:38:28.609]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.609]                       base::options(mc.cores = 1L)
[13:38:28.609]                     }
[13:38:28.609]                     base::local({
[13:38:28.609]                       for (pkg in "utils") {
[13:38:28.609]                         base::loadNamespace(pkg)
[13:38:28.609]                         base::library(pkg, character.only = TRUE)
[13:38:28.609]                       }
[13:38:28.609]                     })
[13:38:28.609]                   }
[13:38:28.609]                   ...future.strategy.old <- future::plan("list")
[13:38:28.609]                   options(future.plan = NULL)
[13:38:28.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.609]                 }
[13:38:28.609]                 ...future.workdir <- getwd()
[13:38:28.609]             }
[13:38:28.609]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.609]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.609]         }
[13:38:28.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.609]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.609]             base::names(...future.oldOptions))
[13:38:28.609]     }
[13:38:28.609]     if (FALSE) {
[13:38:28.609]     }
[13:38:28.609]     else {
[13:38:28.609]         if (TRUE) {
[13:38:28.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.609]                 open = "w")
[13:38:28.609]         }
[13:38:28.609]         else {
[13:38:28.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.609]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.609]         }
[13:38:28.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.609]             base::sink(type = "output", split = FALSE)
[13:38:28.609]             base::close(...future.stdout)
[13:38:28.609]         }, add = TRUE)
[13:38:28.609]     }
[13:38:28.609]     ...future.frame <- base::sys.nframe()
[13:38:28.609]     ...future.conditions <- base::list()
[13:38:28.609]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.609]     if (FALSE) {
[13:38:28.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.609]     }
[13:38:28.609]     ...future.result <- base::tryCatch({
[13:38:28.609]         base::withCallingHandlers({
[13:38:28.609]             ...future.value <- base::withVisible(base::local({
[13:38:28.609]                 withCallingHandlers({
[13:38:28.609]                   {
[13:38:28.609]                     print(1:50)
[13:38:28.609]                     str(1:50)
[13:38:28.609]                     cat(letters, sep = "-")
[13:38:28.609]                     cat(1:6, collapse = "\n")
[13:38:28.609]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.609]                     42L
[13:38:28.609]                   }
[13:38:28.609]                 }, immediateCondition = function(cond) {
[13:38:28.609]                   save_rds <- function (object, pathname, ...) 
[13:38:28.609]                   {
[13:38:28.609]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.609]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.609]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.609]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.609]                         fi_tmp[["mtime"]])
[13:38:28.609]                     }
[13:38:28.609]                     tryCatch({
[13:38:28.609]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.609]                     }, error = function(ex) {
[13:38:28.609]                       msg <- conditionMessage(ex)
[13:38:28.609]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.609]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.609]                         fi_tmp[["mtime"]], msg)
[13:38:28.609]                       ex$message <- msg
[13:38:28.609]                       stop(ex)
[13:38:28.609]                     })
[13:38:28.609]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.609]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.609]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.609]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.609]                       fi <- file.info(pathname)
[13:38:28.609]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.609]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.609]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.609]                         fi[["size"]], fi[["mtime"]])
[13:38:28.609]                       stop(msg)
[13:38:28.609]                     }
[13:38:28.609]                     invisible(pathname)
[13:38:28.609]                   }
[13:38:28.609]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.609]                     rootPath = tempdir()) 
[13:38:28.609]                   {
[13:38:28.609]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.609]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.609]                       tmpdir = path, fileext = ".rds")
[13:38:28.609]                     save_rds(obj, file)
[13:38:28.609]                   }
[13:38:28.609]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.609]                   {
[13:38:28.609]                     inherits <- base::inherits
[13:38:28.609]                     invokeRestart <- base::invokeRestart
[13:38:28.609]                     is.null <- base::is.null
[13:38:28.609]                     muffled <- FALSE
[13:38:28.609]                     if (inherits(cond, "message")) {
[13:38:28.609]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.609]                       if (muffled) 
[13:38:28.609]                         invokeRestart("muffleMessage")
[13:38:28.609]                     }
[13:38:28.609]                     else if (inherits(cond, "warning")) {
[13:38:28.609]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.609]                       if (muffled) 
[13:38:28.609]                         invokeRestart("muffleWarning")
[13:38:28.609]                     }
[13:38:28.609]                     else if (inherits(cond, "condition")) {
[13:38:28.609]                       if (!is.null(pattern)) {
[13:38:28.609]                         computeRestarts <- base::computeRestarts
[13:38:28.609]                         grepl <- base::grepl
[13:38:28.609]                         restarts <- computeRestarts(cond)
[13:38:28.609]                         for (restart in restarts) {
[13:38:28.609]                           name <- restart$name
[13:38:28.609]                           if (is.null(name)) 
[13:38:28.609]                             next
[13:38:28.609]                           if (!grepl(pattern, name)) 
[13:38:28.609]                             next
[13:38:28.609]                           invokeRestart(restart)
[13:38:28.609]                           muffled <- TRUE
[13:38:28.609]                           break
[13:38:28.609]                         }
[13:38:28.609]                       }
[13:38:28.609]                     }
[13:38:28.609]                     invisible(muffled)
[13:38:28.609]                   }
[13:38:28.609]                   muffleCondition(cond)
[13:38:28.609]                 })
[13:38:28.609]             }))
[13:38:28.609]             future::FutureResult(value = ...future.value$value, 
[13:38:28.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.609]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.609]                     ...future.globalenv.names))
[13:38:28.609]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.609]         }, condition = base::local({
[13:38:28.609]             c <- base::c
[13:38:28.609]             inherits <- base::inherits
[13:38:28.609]             invokeRestart <- base::invokeRestart
[13:38:28.609]             length <- base::length
[13:38:28.609]             list <- base::list
[13:38:28.609]             seq.int <- base::seq.int
[13:38:28.609]             signalCondition <- base::signalCondition
[13:38:28.609]             sys.calls <- base::sys.calls
[13:38:28.609]             `[[` <- base::`[[`
[13:38:28.609]             `+` <- base::`+`
[13:38:28.609]             `<<-` <- base::`<<-`
[13:38:28.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.609]                   3L)]
[13:38:28.609]             }
[13:38:28.609]             function(cond) {
[13:38:28.609]                 is_error <- inherits(cond, "error")
[13:38:28.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.609]                   NULL)
[13:38:28.609]                 if (is_error) {
[13:38:28.609]                   sessionInformation <- function() {
[13:38:28.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.609]                       search = base::search(), system = base::Sys.info())
[13:38:28.609]                   }
[13:38:28.609]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.609]                     cond$call), session = sessionInformation(), 
[13:38:28.609]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.609]                   signalCondition(cond)
[13:38:28.609]                 }
[13:38:28.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.609]                 "immediateCondition"))) {
[13:38:28.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.609]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.609]                   if (TRUE && !signal) {
[13:38:28.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.609]                     {
[13:38:28.609]                       inherits <- base::inherits
[13:38:28.609]                       invokeRestart <- base::invokeRestart
[13:38:28.609]                       is.null <- base::is.null
[13:38:28.609]                       muffled <- FALSE
[13:38:28.609]                       if (inherits(cond, "message")) {
[13:38:28.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.609]                         if (muffled) 
[13:38:28.609]                           invokeRestart("muffleMessage")
[13:38:28.609]                       }
[13:38:28.609]                       else if (inherits(cond, "warning")) {
[13:38:28.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.609]                         if (muffled) 
[13:38:28.609]                           invokeRestart("muffleWarning")
[13:38:28.609]                       }
[13:38:28.609]                       else if (inherits(cond, "condition")) {
[13:38:28.609]                         if (!is.null(pattern)) {
[13:38:28.609]                           computeRestarts <- base::computeRestarts
[13:38:28.609]                           grepl <- base::grepl
[13:38:28.609]                           restarts <- computeRestarts(cond)
[13:38:28.609]                           for (restart in restarts) {
[13:38:28.609]                             name <- restart$name
[13:38:28.609]                             if (is.null(name)) 
[13:38:28.609]                               next
[13:38:28.609]                             if (!grepl(pattern, name)) 
[13:38:28.609]                               next
[13:38:28.609]                             invokeRestart(restart)
[13:38:28.609]                             muffled <- TRUE
[13:38:28.609]                             break
[13:38:28.609]                           }
[13:38:28.609]                         }
[13:38:28.609]                       }
[13:38:28.609]                       invisible(muffled)
[13:38:28.609]                     }
[13:38:28.609]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.609]                   }
[13:38:28.609]                 }
[13:38:28.609]                 else {
[13:38:28.609]                   if (TRUE) {
[13:38:28.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.609]                     {
[13:38:28.609]                       inherits <- base::inherits
[13:38:28.609]                       invokeRestart <- base::invokeRestart
[13:38:28.609]                       is.null <- base::is.null
[13:38:28.609]                       muffled <- FALSE
[13:38:28.609]                       if (inherits(cond, "message")) {
[13:38:28.609]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.609]                         if (muffled) 
[13:38:28.609]                           invokeRestart("muffleMessage")
[13:38:28.609]                       }
[13:38:28.609]                       else if (inherits(cond, "warning")) {
[13:38:28.609]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.609]                         if (muffled) 
[13:38:28.609]                           invokeRestart("muffleWarning")
[13:38:28.609]                       }
[13:38:28.609]                       else if (inherits(cond, "condition")) {
[13:38:28.609]                         if (!is.null(pattern)) {
[13:38:28.609]                           computeRestarts <- base::computeRestarts
[13:38:28.609]                           grepl <- base::grepl
[13:38:28.609]                           restarts <- computeRestarts(cond)
[13:38:28.609]                           for (restart in restarts) {
[13:38:28.609]                             name <- restart$name
[13:38:28.609]                             if (is.null(name)) 
[13:38:28.609]                               next
[13:38:28.609]                             if (!grepl(pattern, name)) 
[13:38:28.609]                               next
[13:38:28.609]                             invokeRestart(restart)
[13:38:28.609]                             muffled <- TRUE
[13:38:28.609]                             break
[13:38:28.609]                           }
[13:38:28.609]                         }
[13:38:28.609]                       }
[13:38:28.609]                       invisible(muffled)
[13:38:28.609]                     }
[13:38:28.609]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.609]                   }
[13:38:28.609]                 }
[13:38:28.609]             }
[13:38:28.609]         }))
[13:38:28.609]     }, error = function(ex) {
[13:38:28.609]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.609]                 ...future.rng), started = ...future.startTime, 
[13:38:28.609]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.609]             version = "1.8"), class = "FutureResult")
[13:38:28.609]     }, finally = {
[13:38:28.609]         if (!identical(...future.workdir, getwd())) 
[13:38:28.609]             setwd(...future.workdir)
[13:38:28.609]         {
[13:38:28.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.609]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.609]             }
[13:38:28.609]             base::options(...future.oldOptions)
[13:38:28.609]             if (.Platform$OS.type == "windows") {
[13:38:28.609]                 old_names <- names(...future.oldEnvVars)
[13:38:28.609]                 envs <- base::Sys.getenv()
[13:38:28.609]                 names <- names(envs)
[13:38:28.609]                 common <- intersect(names, old_names)
[13:38:28.609]                 added <- setdiff(names, old_names)
[13:38:28.609]                 removed <- setdiff(old_names, names)
[13:38:28.609]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.609]                   envs[common]]
[13:38:28.609]                 NAMES <- toupper(changed)
[13:38:28.609]                 args <- list()
[13:38:28.609]                 for (kk in seq_along(NAMES)) {
[13:38:28.609]                   name <- changed[[kk]]
[13:38:28.609]                   NAME <- NAMES[[kk]]
[13:38:28.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.609]                     next
[13:38:28.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.609]                 }
[13:38:28.609]                 NAMES <- toupper(added)
[13:38:28.609]                 for (kk in seq_along(NAMES)) {
[13:38:28.609]                   name <- added[[kk]]
[13:38:28.609]                   NAME <- NAMES[[kk]]
[13:38:28.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.609]                     next
[13:38:28.609]                   args[[name]] <- ""
[13:38:28.609]                 }
[13:38:28.609]                 NAMES <- toupper(removed)
[13:38:28.609]                 for (kk in seq_along(NAMES)) {
[13:38:28.609]                   name <- removed[[kk]]
[13:38:28.609]                   NAME <- NAMES[[kk]]
[13:38:28.609]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.609]                     next
[13:38:28.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.609]                 }
[13:38:28.609]                 if (length(args) > 0) 
[13:38:28.609]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.609]             }
[13:38:28.609]             else {
[13:38:28.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.609]             }
[13:38:28.609]             {
[13:38:28.609]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.609]                   0L) {
[13:38:28.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.609]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.609]                   base::options(opts)
[13:38:28.609]                 }
[13:38:28.609]                 {
[13:38:28.609]                   {
[13:38:28.609]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.609]                     NULL
[13:38:28.609]                   }
[13:38:28.609]                   options(future.plan = NULL)
[13:38:28.609]                   if (is.na(NA_character_)) 
[13:38:28.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.609]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.609]                     .init = FALSE)
[13:38:28.609]                 }
[13:38:28.609]             }
[13:38:28.609]         }
[13:38:28.609]     })
[13:38:28.609]     if (TRUE) {
[13:38:28.609]         base::sink(type = "output", split = FALSE)
[13:38:28.609]         if (TRUE) {
[13:38:28.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.609]         }
[13:38:28.609]         else {
[13:38:28.609]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.609]         }
[13:38:28.609]         base::close(...future.stdout)
[13:38:28.609]         ...future.stdout <- NULL
[13:38:28.609]     }
[13:38:28.609]     ...future.result$conditions <- ...future.conditions
[13:38:28.609]     ...future.result$finished <- base::Sys.time()
[13:38:28.609]     ...future.result
[13:38:28.609] }
[13:38:28.611] requestCore(): workers = 2
[13:38:28.614] MulticoreFuture started
[13:38:28.615] - Launch lazy future ... done
[13:38:28.615] run() for ‘MulticoreFuture’ ... done
[13:38:28.615] plan(): Setting new future strategy stack:
[13:38:28.616] result() for MulticoreFuture ...
[13:38:28.616] List of future strategies:
[13:38:28.616] 1. sequential:
[13:38:28.616]    - args: function (..., envir = parent.frame())
[13:38:28.616]    - tweaked: FALSE
[13:38:28.616]    - call: NULL
[13:38:28.616] plan(): nbrOfWorkers() = 1
[13:38:28.620] plan(): Setting new future strategy stack:
[13:38:28.620] List of future strategies:
[13:38:28.620] 1. multicore:
[13:38:28.620]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.620]    - tweaked: FALSE
[13:38:28.620]    - call: plan(strategy)
[13:38:28.625] plan(): nbrOfWorkers() = 2
[13:38:28.630] result() for MulticoreFuture ...
[13:38:28.630] result() for MulticoreFuture ... done
[13:38:28.630] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "474d986d-bb98-8981-59a7-afb2f4ca0103"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90976
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:28.644] result() for MulticoreFuture ...
[13:38:28.644] result() for MulticoreFuture ... done
[13:38:28.645] result() for MulticoreFuture ...
[13:38:28.645] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01103997 secs (started 2025-01-07 13:38:28.614748)
version: 1.8
[13:38:28.646] getGlobalsAndPackages() ...
[13:38:28.646] Searching for globals...
[13:38:28.650] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.650] Searching for globals ... DONE
[13:38:28.650] Resolving globals: FALSE
[13:38:28.650] 
[13:38:28.651] - packages: [1] ‘utils’
[13:38:28.651] getGlobalsAndPackages() ... DONE
[13:38:28.651] run() for ‘Future’ ...
[13:38:28.651] - state: ‘created’
[13:38:28.651] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.656] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.656] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.656]   - Field: ‘label’
[13:38:28.656]   - Field: ‘local’
[13:38:28.657]   - Field: ‘owner’
[13:38:28.657]   - Field: ‘envir’
[13:38:28.657]   - Field: ‘workers’
[13:38:28.657]   - Field: ‘packages’
[13:38:28.657]   - Field: ‘gc’
[13:38:28.657]   - Field: ‘job’
[13:38:28.657]   - Field: ‘conditions’
[13:38:28.657]   - Field: ‘expr’
[13:38:28.658]   - Field: ‘uuid’
[13:38:28.658]   - Field: ‘seed’
[13:38:28.658]   - Field: ‘version’
[13:38:28.658]   - Field: ‘result’
[13:38:28.658]   - Field: ‘asynchronous’
[13:38:28.658]   - Field: ‘calls’
[13:38:28.658]   - Field: ‘globals’
[13:38:28.658]   - Field: ‘stdout’
[13:38:28.659]   - Field: ‘earlySignal’
[13:38:28.659]   - Field: ‘lazy’
[13:38:28.659]   - Field: ‘state’
[13:38:28.659] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.659] - Launch lazy future ...
[13:38:28.659] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.659] Packages needed by future strategies (n = 0): <none>
[13:38:28.660] {
[13:38:28.660]     {
[13:38:28.660]         {
[13:38:28.660]             ...future.startTime <- base::Sys.time()
[13:38:28.660]             {
[13:38:28.660]                 {
[13:38:28.660]                   {
[13:38:28.660]                     {
[13:38:28.660]                       {
[13:38:28.660]                         base::local({
[13:38:28.660]                           has_future <- base::requireNamespace("future", 
[13:38:28.660]                             quietly = TRUE)
[13:38:28.660]                           if (has_future) {
[13:38:28.660]                             ns <- base::getNamespace("future")
[13:38:28.660]                             version <- ns[[".package"]][["version"]]
[13:38:28.660]                             if (is.null(version)) 
[13:38:28.660]                               version <- utils::packageVersion("future")
[13:38:28.660]                           }
[13:38:28.660]                           else {
[13:38:28.660]                             version <- NULL
[13:38:28.660]                           }
[13:38:28.660]                           if (!has_future || version < "1.8.0") {
[13:38:28.660]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.660]                               "", base::R.version$version.string), 
[13:38:28.660]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.660]                                 base::R.version$platform, 8 * 
[13:38:28.660]                                   base::.Machine$sizeof.pointer), 
[13:38:28.660]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.660]                                 "release", "version")], collapse = " "), 
[13:38:28.660]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.660]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.660]                               info)
[13:38:28.660]                             info <- base::paste(info, collapse = "; ")
[13:38:28.660]                             if (!has_future) {
[13:38:28.660]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.660]                                 info)
[13:38:28.660]                             }
[13:38:28.660]                             else {
[13:38:28.660]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.660]                                 info, version)
[13:38:28.660]                             }
[13:38:28.660]                             base::stop(msg)
[13:38:28.660]                           }
[13:38:28.660]                         })
[13:38:28.660]                       }
[13:38:28.660]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.660]                       base::options(mc.cores = 1L)
[13:38:28.660]                     }
[13:38:28.660]                     base::local({
[13:38:28.660]                       for (pkg in "utils") {
[13:38:28.660]                         base::loadNamespace(pkg)
[13:38:28.660]                         base::library(pkg, character.only = TRUE)
[13:38:28.660]                       }
[13:38:28.660]                     })
[13:38:28.660]                   }
[13:38:28.660]                   ...future.strategy.old <- future::plan("list")
[13:38:28.660]                   options(future.plan = NULL)
[13:38:28.660]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.660]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.660]                 }
[13:38:28.660]                 ...future.workdir <- getwd()
[13:38:28.660]             }
[13:38:28.660]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.660]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.660]         }
[13:38:28.660]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.660]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.660]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.660]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.660]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.660]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.660]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.660]             base::names(...future.oldOptions))
[13:38:28.660]     }
[13:38:28.660]     if (FALSE) {
[13:38:28.660]     }
[13:38:28.660]     else {
[13:38:28.660]         if (TRUE) {
[13:38:28.660]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.660]                 open = "w")
[13:38:28.660]         }
[13:38:28.660]         else {
[13:38:28.660]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.660]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.660]         }
[13:38:28.660]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.660]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.660]             base::sink(type = "output", split = FALSE)
[13:38:28.660]             base::close(...future.stdout)
[13:38:28.660]         }, add = TRUE)
[13:38:28.660]     }
[13:38:28.660]     ...future.frame <- base::sys.nframe()
[13:38:28.660]     ...future.conditions <- base::list()
[13:38:28.660]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.660]     if (FALSE) {
[13:38:28.660]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.660]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.660]     }
[13:38:28.660]     ...future.result <- base::tryCatch({
[13:38:28.660]         base::withCallingHandlers({
[13:38:28.660]             ...future.value <- base::withVisible(base::local({
[13:38:28.660]                 withCallingHandlers({
[13:38:28.660]                   {
[13:38:28.660]                     print(1:50)
[13:38:28.660]                     str(1:50)
[13:38:28.660]                     cat(letters, sep = "-")
[13:38:28.660]                     cat(1:6, collapse = "\n")
[13:38:28.660]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.660]                     42L
[13:38:28.660]                   }
[13:38:28.660]                 }, immediateCondition = function(cond) {
[13:38:28.660]                   save_rds <- function (object, pathname, ...) 
[13:38:28.660]                   {
[13:38:28.660]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.660]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.660]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.660]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.660]                         fi_tmp[["mtime"]])
[13:38:28.660]                     }
[13:38:28.660]                     tryCatch({
[13:38:28.660]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.660]                     }, error = function(ex) {
[13:38:28.660]                       msg <- conditionMessage(ex)
[13:38:28.660]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.660]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.660]                         fi_tmp[["mtime"]], msg)
[13:38:28.660]                       ex$message <- msg
[13:38:28.660]                       stop(ex)
[13:38:28.660]                     })
[13:38:28.660]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.660]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.660]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.660]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.660]                       fi <- file.info(pathname)
[13:38:28.660]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.660]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.660]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.660]                         fi[["size"]], fi[["mtime"]])
[13:38:28.660]                       stop(msg)
[13:38:28.660]                     }
[13:38:28.660]                     invisible(pathname)
[13:38:28.660]                   }
[13:38:28.660]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.660]                     rootPath = tempdir()) 
[13:38:28.660]                   {
[13:38:28.660]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.660]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.660]                       tmpdir = path, fileext = ".rds")
[13:38:28.660]                     save_rds(obj, file)
[13:38:28.660]                   }
[13:38:28.660]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.660]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.660]                   {
[13:38:28.660]                     inherits <- base::inherits
[13:38:28.660]                     invokeRestart <- base::invokeRestart
[13:38:28.660]                     is.null <- base::is.null
[13:38:28.660]                     muffled <- FALSE
[13:38:28.660]                     if (inherits(cond, "message")) {
[13:38:28.660]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.660]                       if (muffled) 
[13:38:28.660]                         invokeRestart("muffleMessage")
[13:38:28.660]                     }
[13:38:28.660]                     else if (inherits(cond, "warning")) {
[13:38:28.660]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.660]                       if (muffled) 
[13:38:28.660]                         invokeRestart("muffleWarning")
[13:38:28.660]                     }
[13:38:28.660]                     else if (inherits(cond, "condition")) {
[13:38:28.660]                       if (!is.null(pattern)) {
[13:38:28.660]                         computeRestarts <- base::computeRestarts
[13:38:28.660]                         grepl <- base::grepl
[13:38:28.660]                         restarts <- computeRestarts(cond)
[13:38:28.660]                         for (restart in restarts) {
[13:38:28.660]                           name <- restart$name
[13:38:28.660]                           if (is.null(name)) 
[13:38:28.660]                             next
[13:38:28.660]                           if (!grepl(pattern, name)) 
[13:38:28.660]                             next
[13:38:28.660]                           invokeRestart(restart)
[13:38:28.660]                           muffled <- TRUE
[13:38:28.660]                           break
[13:38:28.660]                         }
[13:38:28.660]                       }
[13:38:28.660]                     }
[13:38:28.660]                     invisible(muffled)
[13:38:28.660]                   }
[13:38:28.660]                   muffleCondition(cond)
[13:38:28.660]                 })
[13:38:28.660]             }))
[13:38:28.660]             future::FutureResult(value = ...future.value$value, 
[13:38:28.660]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.660]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.660]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.660]                     ...future.globalenv.names))
[13:38:28.660]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.660]         }, condition = base::local({
[13:38:28.660]             c <- base::c
[13:38:28.660]             inherits <- base::inherits
[13:38:28.660]             invokeRestart <- base::invokeRestart
[13:38:28.660]             length <- base::length
[13:38:28.660]             list <- base::list
[13:38:28.660]             seq.int <- base::seq.int
[13:38:28.660]             signalCondition <- base::signalCondition
[13:38:28.660]             sys.calls <- base::sys.calls
[13:38:28.660]             `[[` <- base::`[[`
[13:38:28.660]             `+` <- base::`+`
[13:38:28.660]             `<<-` <- base::`<<-`
[13:38:28.660]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.660]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.660]                   3L)]
[13:38:28.660]             }
[13:38:28.660]             function(cond) {
[13:38:28.660]                 is_error <- inherits(cond, "error")
[13:38:28.660]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.660]                   NULL)
[13:38:28.660]                 if (is_error) {
[13:38:28.660]                   sessionInformation <- function() {
[13:38:28.660]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.660]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.660]                       search = base::search(), system = base::Sys.info())
[13:38:28.660]                   }
[13:38:28.660]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.660]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.660]                     cond$call), session = sessionInformation(), 
[13:38:28.660]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.660]                   signalCondition(cond)
[13:38:28.660]                 }
[13:38:28.660]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.660]                 "immediateCondition"))) {
[13:38:28.660]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.660]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.660]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.660]                   if (TRUE && !signal) {
[13:38:28.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.660]                     {
[13:38:28.660]                       inherits <- base::inherits
[13:38:28.660]                       invokeRestart <- base::invokeRestart
[13:38:28.660]                       is.null <- base::is.null
[13:38:28.660]                       muffled <- FALSE
[13:38:28.660]                       if (inherits(cond, "message")) {
[13:38:28.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.660]                         if (muffled) 
[13:38:28.660]                           invokeRestart("muffleMessage")
[13:38:28.660]                       }
[13:38:28.660]                       else if (inherits(cond, "warning")) {
[13:38:28.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.660]                         if (muffled) 
[13:38:28.660]                           invokeRestart("muffleWarning")
[13:38:28.660]                       }
[13:38:28.660]                       else if (inherits(cond, "condition")) {
[13:38:28.660]                         if (!is.null(pattern)) {
[13:38:28.660]                           computeRestarts <- base::computeRestarts
[13:38:28.660]                           grepl <- base::grepl
[13:38:28.660]                           restarts <- computeRestarts(cond)
[13:38:28.660]                           for (restart in restarts) {
[13:38:28.660]                             name <- restart$name
[13:38:28.660]                             if (is.null(name)) 
[13:38:28.660]                               next
[13:38:28.660]                             if (!grepl(pattern, name)) 
[13:38:28.660]                               next
[13:38:28.660]                             invokeRestart(restart)
[13:38:28.660]                             muffled <- TRUE
[13:38:28.660]                             break
[13:38:28.660]                           }
[13:38:28.660]                         }
[13:38:28.660]                       }
[13:38:28.660]                       invisible(muffled)
[13:38:28.660]                     }
[13:38:28.660]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.660]                   }
[13:38:28.660]                 }
[13:38:28.660]                 else {
[13:38:28.660]                   if (TRUE) {
[13:38:28.660]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.660]                     {
[13:38:28.660]                       inherits <- base::inherits
[13:38:28.660]                       invokeRestart <- base::invokeRestart
[13:38:28.660]                       is.null <- base::is.null
[13:38:28.660]                       muffled <- FALSE
[13:38:28.660]                       if (inherits(cond, "message")) {
[13:38:28.660]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.660]                         if (muffled) 
[13:38:28.660]                           invokeRestart("muffleMessage")
[13:38:28.660]                       }
[13:38:28.660]                       else if (inherits(cond, "warning")) {
[13:38:28.660]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.660]                         if (muffled) 
[13:38:28.660]                           invokeRestart("muffleWarning")
[13:38:28.660]                       }
[13:38:28.660]                       else if (inherits(cond, "condition")) {
[13:38:28.660]                         if (!is.null(pattern)) {
[13:38:28.660]                           computeRestarts <- base::computeRestarts
[13:38:28.660]                           grepl <- base::grepl
[13:38:28.660]                           restarts <- computeRestarts(cond)
[13:38:28.660]                           for (restart in restarts) {
[13:38:28.660]                             name <- restart$name
[13:38:28.660]                             if (is.null(name)) 
[13:38:28.660]                               next
[13:38:28.660]                             if (!grepl(pattern, name)) 
[13:38:28.660]                               next
[13:38:28.660]                             invokeRestart(restart)
[13:38:28.660]                             muffled <- TRUE
[13:38:28.660]                             break
[13:38:28.660]                           }
[13:38:28.660]                         }
[13:38:28.660]                       }
[13:38:28.660]                       invisible(muffled)
[13:38:28.660]                     }
[13:38:28.660]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.660]                   }
[13:38:28.660]                 }
[13:38:28.660]             }
[13:38:28.660]         }))
[13:38:28.660]     }, error = function(ex) {
[13:38:28.660]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.660]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.660]                 ...future.rng), started = ...future.startTime, 
[13:38:28.660]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.660]             version = "1.8"), class = "FutureResult")
[13:38:28.660]     }, finally = {
[13:38:28.660]         if (!identical(...future.workdir, getwd())) 
[13:38:28.660]             setwd(...future.workdir)
[13:38:28.660]         {
[13:38:28.660]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.660]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.660]             }
[13:38:28.660]             base::options(...future.oldOptions)
[13:38:28.660]             if (.Platform$OS.type == "windows") {
[13:38:28.660]                 old_names <- names(...future.oldEnvVars)
[13:38:28.660]                 envs <- base::Sys.getenv()
[13:38:28.660]                 names <- names(envs)
[13:38:28.660]                 common <- intersect(names, old_names)
[13:38:28.660]                 added <- setdiff(names, old_names)
[13:38:28.660]                 removed <- setdiff(old_names, names)
[13:38:28.660]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.660]                   envs[common]]
[13:38:28.660]                 NAMES <- toupper(changed)
[13:38:28.660]                 args <- list()
[13:38:28.660]                 for (kk in seq_along(NAMES)) {
[13:38:28.660]                   name <- changed[[kk]]
[13:38:28.660]                   NAME <- NAMES[[kk]]
[13:38:28.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.660]                     next
[13:38:28.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.660]                 }
[13:38:28.660]                 NAMES <- toupper(added)
[13:38:28.660]                 for (kk in seq_along(NAMES)) {
[13:38:28.660]                   name <- added[[kk]]
[13:38:28.660]                   NAME <- NAMES[[kk]]
[13:38:28.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.660]                     next
[13:38:28.660]                   args[[name]] <- ""
[13:38:28.660]                 }
[13:38:28.660]                 NAMES <- toupper(removed)
[13:38:28.660]                 for (kk in seq_along(NAMES)) {
[13:38:28.660]                   name <- removed[[kk]]
[13:38:28.660]                   NAME <- NAMES[[kk]]
[13:38:28.660]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.660]                     next
[13:38:28.660]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.660]                 }
[13:38:28.660]                 if (length(args) > 0) 
[13:38:28.660]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.660]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.660]             }
[13:38:28.660]             else {
[13:38:28.660]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.660]             }
[13:38:28.660]             {
[13:38:28.660]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.660]                   0L) {
[13:38:28.660]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.660]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.660]                   base::options(opts)
[13:38:28.660]                 }
[13:38:28.660]                 {
[13:38:28.660]                   {
[13:38:28.660]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.660]                     NULL
[13:38:28.660]                   }
[13:38:28.660]                   options(future.plan = NULL)
[13:38:28.660]                   if (is.na(NA_character_)) 
[13:38:28.660]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.660]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.660]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.660]                     .init = FALSE)
[13:38:28.660]                 }
[13:38:28.660]             }
[13:38:28.660]         }
[13:38:28.660]     })
[13:38:28.660]     if (TRUE) {
[13:38:28.660]         base::sink(type = "output", split = FALSE)
[13:38:28.660]         if (TRUE) {
[13:38:28.660]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.660]         }
[13:38:28.660]         else {
[13:38:28.660]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.660]         }
[13:38:28.660]         base::close(...future.stdout)
[13:38:28.660]         ...future.stdout <- NULL
[13:38:28.660]     }
[13:38:28.660]     ...future.result$conditions <- ...future.conditions
[13:38:28.660]     ...future.result$finished <- base::Sys.time()
[13:38:28.660]     ...future.result
[13:38:28.660] }
[13:38:28.663] requestCore(): workers = 2
[13:38:28.665] MulticoreFuture started
[13:38:28.665] - Launch lazy future ... done
[13:38:28.665] run() for ‘MulticoreFuture’ ... done
[13:38:28.666] result() for MulticoreFuture ...
[13:38:28.666] plan(): Setting new future strategy stack:
[13:38:28.667] List of future strategies:
[13:38:28.667] 1. sequential:
[13:38:28.667]    - args: function (..., envir = parent.frame())
[13:38:28.667]    - tweaked: FALSE
[13:38:28.667]    - call: NULL
[13:38:28.667] plan(): nbrOfWorkers() = 1
[13:38:28.671] plan(): Setting new future strategy stack:
[13:38:28.671] List of future strategies:
[13:38:28.671] 1. multicore:
[13:38:28.671]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.671]    - tweaked: FALSE
[13:38:28.671]    - call: plan(strategy)
[13:38:28.676] plan(): nbrOfWorkers() = 2
[13:38:28.677] result() for MulticoreFuture ...
[13:38:28.677] result() for MulticoreFuture ... done
[13:38:28.677] result() for MulticoreFuture ... done
[13:38:28.678] result() for MulticoreFuture ...
[13:38:28.678] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.679] getGlobalsAndPackages() ...
[13:38:28.679] Searching for globals...
[13:38:28.680] - globals found: [1] ‘print’
[13:38:28.680] Searching for globals ... DONE
[13:38:28.680] Resolving globals: FALSE
[13:38:28.681] 
[13:38:28.681] 
[13:38:28.681] getGlobalsAndPackages() ... DONE
[13:38:28.681] run() for ‘Future’ ...
[13:38:28.681] - state: ‘created’
[13:38:28.682] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.686] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.686] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.686]   - Field: ‘label’
[13:38:28.686]   - Field: ‘local’
[13:38:28.686]   - Field: ‘owner’
[13:38:28.687]   - Field: ‘envir’
[13:38:28.687]   - Field: ‘workers’
[13:38:28.687]   - Field: ‘packages’
[13:38:28.687]   - Field: ‘gc’
[13:38:28.687]   - Field: ‘job’
[13:38:28.687]   - Field: ‘conditions’
[13:38:28.687]   - Field: ‘expr’
[13:38:28.687]   - Field: ‘uuid’
[13:38:28.687]   - Field: ‘seed’
[13:38:28.688]   - Field: ‘version’
[13:38:28.688]   - Field: ‘result’
[13:38:28.688]   - Field: ‘asynchronous’
[13:38:28.688]   - Field: ‘calls’
[13:38:28.688]   - Field: ‘globals’
[13:38:28.688]   - Field: ‘stdout’
[13:38:28.688]   - Field: ‘earlySignal’
[13:38:28.688]   - Field: ‘lazy’
[13:38:28.688]   - Field: ‘state’
[13:38:28.689] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.689] - Launch lazy future ...
[13:38:28.689] Packages needed by the future expression (n = 0): <none>
[13:38:28.689] Packages needed by future strategies (n = 0): <none>
[13:38:28.690] {
[13:38:28.690]     {
[13:38:28.690]         {
[13:38:28.690]             ...future.startTime <- base::Sys.time()
[13:38:28.690]             {
[13:38:28.690]                 {
[13:38:28.690]                   {
[13:38:28.690]                     {
[13:38:28.690]                       base::local({
[13:38:28.690]                         has_future <- base::requireNamespace("future", 
[13:38:28.690]                           quietly = TRUE)
[13:38:28.690]                         if (has_future) {
[13:38:28.690]                           ns <- base::getNamespace("future")
[13:38:28.690]                           version <- ns[[".package"]][["version"]]
[13:38:28.690]                           if (is.null(version)) 
[13:38:28.690]                             version <- utils::packageVersion("future")
[13:38:28.690]                         }
[13:38:28.690]                         else {
[13:38:28.690]                           version <- NULL
[13:38:28.690]                         }
[13:38:28.690]                         if (!has_future || version < "1.8.0") {
[13:38:28.690]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.690]                             "", base::R.version$version.string), 
[13:38:28.690]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.690]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.690]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.690]                               "release", "version")], collapse = " "), 
[13:38:28.690]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.690]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.690]                             info)
[13:38:28.690]                           info <- base::paste(info, collapse = "; ")
[13:38:28.690]                           if (!has_future) {
[13:38:28.690]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.690]                               info)
[13:38:28.690]                           }
[13:38:28.690]                           else {
[13:38:28.690]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.690]                               info, version)
[13:38:28.690]                           }
[13:38:28.690]                           base::stop(msg)
[13:38:28.690]                         }
[13:38:28.690]                       })
[13:38:28.690]                     }
[13:38:28.690]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.690]                     base::options(mc.cores = 1L)
[13:38:28.690]                   }
[13:38:28.690]                   ...future.strategy.old <- future::plan("list")
[13:38:28.690]                   options(future.plan = NULL)
[13:38:28.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.690]                 }
[13:38:28.690]                 ...future.workdir <- getwd()
[13:38:28.690]             }
[13:38:28.690]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.690]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.690]         }
[13:38:28.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.690]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.690]             base::names(...future.oldOptions))
[13:38:28.690]     }
[13:38:28.690]     if (FALSE) {
[13:38:28.690]     }
[13:38:28.690]     else {
[13:38:28.690]         if (TRUE) {
[13:38:28.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.690]                 open = "w")
[13:38:28.690]         }
[13:38:28.690]         else {
[13:38:28.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.690]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.690]         }
[13:38:28.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.690]             base::sink(type = "output", split = FALSE)
[13:38:28.690]             base::close(...future.stdout)
[13:38:28.690]         }, add = TRUE)
[13:38:28.690]     }
[13:38:28.690]     ...future.frame <- base::sys.nframe()
[13:38:28.690]     ...future.conditions <- base::list()
[13:38:28.690]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.690]     if (FALSE) {
[13:38:28.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.690]     }
[13:38:28.690]     ...future.result <- base::tryCatch({
[13:38:28.690]         base::withCallingHandlers({
[13:38:28.690]             ...future.value <- base::withVisible(base::local({
[13:38:28.690]                 withCallingHandlers({
[13:38:28.690]                   print(42)
[13:38:28.690]                 }, immediateCondition = function(cond) {
[13:38:28.690]                   save_rds <- function (object, pathname, ...) 
[13:38:28.690]                   {
[13:38:28.690]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.690]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.690]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.690]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.690]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.690]                         fi_tmp[["mtime"]])
[13:38:28.690]                     }
[13:38:28.690]                     tryCatch({
[13:38:28.690]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.690]                     }, error = function(ex) {
[13:38:28.690]                       msg <- conditionMessage(ex)
[13:38:28.690]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.690]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.690]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.690]                         fi_tmp[["mtime"]], msg)
[13:38:28.690]                       ex$message <- msg
[13:38:28.690]                       stop(ex)
[13:38:28.690]                     })
[13:38:28.690]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.690]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.690]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.690]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.690]                       fi <- file.info(pathname)
[13:38:28.690]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.690]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.690]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.690]                         fi[["size"]], fi[["mtime"]])
[13:38:28.690]                       stop(msg)
[13:38:28.690]                     }
[13:38:28.690]                     invisible(pathname)
[13:38:28.690]                   }
[13:38:28.690]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.690]                     rootPath = tempdir()) 
[13:38:28.690]                   {
[13:38:28.690]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.690]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.690]                       tmpdir = path, fileext = ".rds")
[13:38:28.690]                     save_rds(obj, file)
[13:38:28.690]                   }
[13:38:28.690]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.690]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.690]                   {
[13:38:28.690]                     inherits <- base::inherits
[13:38:28.690]                     invokeRestart <- base::invokeRestart
[13:38:28.690]                     is.null <- base::is.null
[13:38:28.690]                     muffled <- FALSE
[13:38:28.690]                     if (inherits(cond, "message")) {
[13:38:28.690]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.690]                       if (muffled) 
[13:38:28.690]                         invokeRestart("muffleMessage")
[13:38:28.690]                     }
[13:38:28.690]                     else if (inherits(cond, "warning")) {
[13:38:28.690]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.690]                       if (muffled) 
[13:38:28.690]                         invokeRestart("muffleWarning")
[13:38:28.690]                     }
[13:38:28.690]                     else if (inherits(cond, "condition")) {
[13:38:28.690]                       if (!is.null(pattern)) {
[13:38:28.690]                         computeRestarts <- base::computeRestarts
[13:38:28.690]                         grepl <- base::grepl
[13:38:28.690]                         restarts <- computeRestarts(cond)
[13:38:28.690]                         for (restart in restarts) {
[13:38:28.690]                           name <- restart$name
[13:38:28.690]                           if (is.null(name)) 
[13:38:28.690]                             next
[13:38:28.690]                           if (!grepl(pattern, name)) 
[13:38:28.690]                             next
[13:38:28.690]                           invokeRestart(restart)
[13:38:28.690]                           muffled <- TRUE
[13:38:28.690]                           break
[13:38:28.690]                         }
[13:38:28.690]                       }
[13:38:28.690]                     }
[13:38:28.690]                     invisible(muffled)
[13:38:28.690]                   }
[13:38:28.690]                   muffleCondition(cond)
[13:38:28.690]                 })
[13:38:28.690]             }))
[13:38:28.690]             future::FutureResult(value = ...future.value$value, 
[13:38:28.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.690]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.690]                     ...future.globalenv.names))
[13:38:28.690]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.690]         }, condition = base::local({
[13:38:28.690]             c <- base::c
[13:38:28.690]             inherits <- base::inherits
[13:38:28.690]             invokeRestart <- base::invokeRestart
[13:38:28.690]             length <- base::length
[13:38:28.690]             list <- base::list
[13:38:28.690]             seq.int <- base::seq.int
[13:38:28.690]             signalCondition <- base::signalCondition
[13:38:28.690]             sys.calls <- base::sys.calls
[13:38:28.690]             `[[` <- base::`[[`
[13:38:28.690]             `+` <- base::`+`
[13:38:28.690]             `<<-` <- base::`<<-`
[13:38:28.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.690]                   3L)]
[13:38:28.690]             }
[13:38:28.690]             function(cond) {
[13:38:28.690]                 is_error <- inherits(cond, "error")
[13:38:28.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.690]                   NULL)
[13:38:28.690]                 if (is_error) {
[13:38:28.690]                   sessionInformation <- function() {
[13:38:28.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.690]                       search = base::search(), system = base::Sys.info())
[13:38:28.690]                   }
[13:38:28.690]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.690]                     cond$call), session = sessionInformation(), 
[13:38:28.690]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.690]                   signalCondition(cond)
[13:38:28.690]                 }
[13:38:28.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.690]                 "immediateCondition"))) {
[13:38:28.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.690]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.690]                   if (TRUE && !signal) {
[13:38:28.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.690]                     {
[13:38:28.690]                       inherits <- base::inherits
[13:38:28.690]                       invokeRestart <- base::invokeRestart
[13:38:28.690]                       is.null <- base::is.null
[13:38:28.690]                       muffled <- FALSE
[13:38:28.690]                       if (inherits(cond, "message")) {
[13:38:28.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.690]                         if (muffled) 
[13:38:28.690]                           invokeRestart("muffleMessage")
[13:38:28.690]                       }
[13:38:28.690]                       else if (inherits(cond, "warning")) {
[13:38:28.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.690]                         if (muffled) 
[13:38:28.690]                           invokeRestart("muffleWarning")
[13:38:28.690]                       }
[13:38:28.690]                       else if (inherits(cond, "condition")) {
[13:38:28.690]                         if (!is.null(pattern)) {
[13:38:28.690]                           computeRestarts <- base::computeRestarts
[13:38:28.690]                           grepl <- base::grepl
[13:38:28.690]                           restarts <- computeRestarts(cond)
[13:38:28.690]                           for (restart in restarts) {
[13:38:28.690]                             name <- restart$name
[13:38:28.690]                             if (is.null(name)) 
[13:38:28.690]                               next
[13:38:28.690]                             if (!grepl(pattern, name)) 
[13:38:28.690]                               next
[13:38:28.690]                             invokeRestart(restart)
[13:38:28.690]                             muffled <- TRUE
[13:38:28.690]                             break
[13:38:28.690]                           }
[13:38:28.690]                         }
[13:38:28.690]                       }
[13:38:28.690]                       invisible(muffled)
[13:38:28.690]                     }
[13:38:28.690]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.690]                   }
[13:38:28.690]                 }
[13:38:28.690]                 else {
[13:38:28.690]                   if (TRUE) {
[13:38:28.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.690]                     {
[13:38:28.690]                       inherits <- base::inherits
[13:38:28.690]                       invokeRestart <- base::invokeRestart
[13:38:28.690]                       is.null <- base::is.null
[13:38:28.690]                       muffled <- FALSE
[13:38:28.690]                       if (inherits(cond, "message")) {
[13:38:28.690]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.690]                         if (muffled) 
[13:38:28.690]                           invokeRestart("muffleMessage")
[13:38:28.690]                       }
[13:38:28.690]                       else if (inherits(cond, "warning")) {
[13:38:28.690]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.690]                         if (muffled) 
[13:38:28.690]                           invokeRestart("muffleWarning")
[13:38:28.690]                       }
[13:38:28.690]                       else if (inherits(cond, "condition")) {
[13:38:28.690]                         if (!is.null(pattern)) {
[13:38:28.690]                           computeRestarts <- base::computeRestarts
[13:38:28.690]                           grepl <- base::grepl
[13:38:28.690]                           restarts <- computeRestarts(cond)
[13:38:28.690]                           for (restart in restarts) {
[13:38:28.690]                             name <- restart$name
[13:38:28.690]                             if (is.null(name)) 
[13:38:28.690]                               next
[13:38:28.690]                             if (!grepl(pattern, name)) 
[13:38:28.690]                               next
[13:38:28.690]                             invokeRestart(restart)
[13:38:28.690]                             muffled <- TRUE
[13:38:28.690]                             break
[13:38:28.690]                           }
[13:38:28.690]                         }
[13:38:28.690]                       }
[13:38:28.690]                       invisible(muffled)
[13:38:28.690]                     }
[13:38:28.690]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.690]                   }
[13:38:28.690]                 }
[13:38:28.690]             }
[13:38:28.690]         }))
[13:38:28.690]     }, error = function(ex) {
[13:38:28.690]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.690]                 ...future.rng), started = ...future.startTime, 
[13:38:28.690]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.690]             version = "1.8"), class = "FutureResult")
[13:38:28.690]     }, finally = {
[13:38:28.690]         if (!identical(...future.workdir, getwd())) 
[13:38:28.690]             setwd(...future.workdir)
[13:38:28.690]         {
[13:38:28.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.690]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.690]             }
[13:38:28.690]             base::options(...future.oldOptions)
[13:38:28.690]             if (.Platform$OS.type == "windows") {
[13:38:28.690]                 old_names <- names(...future.oldEnvVars)
[13:38:28.690]                 envs <- base::Sys.getenv()
[13:38:28.690]                 names <- names(envs)
[13:38:28.690]                 common <- intersect(names, old_names)
[13:38:28.690]                 added <- setdiff(names, old_names)
[13:38:28.690]                 removed <- setdiff(old_names, names)
[13:38:28.690]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.690]                   envs[common]]
[13:38:28.690]                 NAMES <- toupper(changed)
[13:38:28.690]                 args <- list()
[13:38:28.690]                 for (kk in seq_along(NAMES)) {
[13:38:28.690]                   name <- changed[[kk]]
[13:38:28.690]                   NAME <- NAMES[[kk]]
[13:38:28.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.690]                     next
[13:38:28.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.690]                 }
[13:38:28.690]                 NAMES <- toupper(added)
[13:38:28.690]                 for (kk in seq_along(NAMES)) {
[13:38:28.690]                   name <- added[[kk]]
[13:38:28.690]                   NAME <- NAMES[[kk]]
[13:38:28.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.690]                     next
[13:38:28.690]                   args[[name]] <- ""
[13:38:28.690]                 }
[13:38:28.690]                 NAMES <- toupper(removed)
[13:38:28.690]                 for (kk in seq_along(NAMES)) {
[13:38:28.690]                   name <- removed[[kk]]
[13:38:28.690]                   NAME <- NAMES[[kk]]
[13:38:28.690]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.690]                     next
[13:38:28.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.690]                 }
[13:38:28.690]                 if (length(args) > 0) 
[13:38:28.690]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.690]             }
[13:38:28.690]             else {
[13:38:28.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.690]             }
[13:38:28.690]             {
[13:38:28.690]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.690]                   0L) {
[13:38:28.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.690]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.690]                   base::options(opts)
[13:38:28.690]                 }
[13:38:28.690]                 {
[13:38:28.690]                   {
[13:38:28.690]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.690]                     NULL
[13:38:28.690]                   }
[13:38:28.690]                   options(future.plan = NULL)
[13:38:28.690]                   if (is.na(NA_character_)) 
[13:38:28.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.690]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.690]                     .init = FALSE)
[13:38:28.690]                 }
[13:38:28.690]             }
[13:38:28.690]         }
[13:38:28.690]     })
[13:38:28.690]     if (TRUE) {
[13:38:28.690]         base::sink(type = "output", split = FALSE)
[13:38:28.690]         if (TRUE) {
[13:38:28.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.690]         }
[13:38:28.690]         else {
[13:38:28.690]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.690]         }
[13:38:28.690]         base::close(...future.stdout)
[13:38:28.690]         ...future.stdout <- NULL
[13:38:28.690]     }
[13:38:28.690]     ...future.result$conditions <- ...future.conditions
[13:38:28.690]     ...future.result$finished <- base::Sys.time()
[13:38:28.690]     ...future.result
[13:38:28.690] }
[13:38:28.692] requestCore(): workers = 2
[13:38:28.694] MulticoreFuture started
[13:38:28.699] - Launch lazy future ... done
[13:38:28.699] plan(): Setting new future strategy stack:
[13:38:28.699] run() for ‘MulticoreFuture’ ... done
[13:38:28.700] result() for MulticoreFuture ...
[13:38:28.700] List of future strategies:
[13:38:28.700] 1. sequential:
[13:38:28.700]    - args: function (..., envir = parent.frame())
[13:38:28.700]    - tweaked: FALSE
[13:38:28.700]    - call: NULL
[13:38:28.700] plan(): nbrOfWorkers() = 1
[13:38:28.703] plan(): Setting new future strategy stack:
[13:38:28.703] List of future strategies:
[13:38:28.703] 1. multicore:
[13:38:28.703]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.703]    - tweaked: FALSE
[13:38:28.703]    - call: plan(strategy)
[13:38:28.708] plan(): nbrOfWorkers() = 2
[13:38:28.708] result() for MulticoreFuture ...
[13:38:28.709] result() for MulticoreFuture ... done
[13:38:28.709] result() for MulticoreFuture ... done
[13:38:28.709] result() for MulticoreFuture ...
[13:38:28.709] result() for MulticoreFuture ... done
[13:38:28.709] result() for MulticoreFuture ...
[13:38:28.709] result() for MulticoreFuture ... done
[1] 42
[13:38:28.710] result() for MulticoreFuture ...
[13:38:28.710] result() for MulticoreFuture ... done
- stdout = FALSE
[13:38:28.710] getGlobalsAndPackages() ...
[13:38:28.710] Searching for globals...
[13:38:28.714] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.714] Searching for globals ... DONE
[13:38:28.715] Resolving globals: FALSE
[13:38:28.715] 
[13:38:28.715] - packages: [1] ‘utils’
[13:38:28.715] getGlobalsAndPackages() ... DONE
[13:38:28.716] run() for ‘Future’ ...
[13:38:28.716] - state: ‘created’
[13:38:28.716] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.720] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.720] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.720]   - Field: ‘label’
[13:38:28.720]   - Field: ‘local’
[13:38:28.721]   - Field: ‘owner’
[13:38:28.721]   - Field: ‘envir’
[13:38:28.721]   - Field: ‘workers’
[13:38:28.721]   - Field: ‘packages’
[13:38:28.721]   - Field: ‘gc’
[13:38:28.721]   - Field: ‘job’
[13:38:28.721]   - Field: ‘conditions’
[13:38:28.721]   - Field: ‘expr’
[13:38:28.721]   - Field: ‘uuid’
[13:38:28.722]   - Field: ‘seed’
[13:38:28.722]   - Field: ‘version’
[13:38:28.722]   - Field: ‘result’
[13:38:28.722]   - Field: ‘asynchronous’
[13:38:28.722]   - Field: ‘calls’
[13:38:28.722]   - Field: ‘globals’
[13:38:28.722]   - Field: ‘stdout’
[13:38:28.722]   - Field: ‘earlySignal’
[13:38:28.723]   - Field: ‘lazy’
[13:38:28.723]   - Field: ‘state’
[13:38:28.723] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.723] - Launch lazy future ...
[13:38:28.723] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.723] Packages needed by future strategies (n = 0): <none>
[13:38:28.724] {
[13:38:28.724]     {
[13:38:28.724]         {
[13:38:28.724]             ...future.startTime <- base::Sys.time()
[13:38:28.724]             {
[13:38:28.724]                 {
[13:38:28.724]                   {
[13:38:28.724]                     {
[13:38:28.724]                       {
[13:38:28.724]                         base::local({
[13:38:28.724]                           has_future <- base::requireNamespace("future", 
[13:38:28.724]                             quietly = TRUE)
[13:38:28.724]                           if (has_future) {
[13:38:28.724]                             ns <- base::getNamespace("future")
[13:38:28.724]                             version <- ns[[".package"]][["version"]]
[13:38:28.724]                             if (is.null(version)) 
[13:38:28.724]                               version <- utils::packageVersion("future")
[13:38:28.724]                           }
[13:38:28.724]                           else {
[13:38:28.724]                             version <- NULL
[13:38:28.724]                           }
[13:38:28.724]                           if (!has_future || version < "1.8.0") {
[13:38:28.724]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.724]                               "", base::R.version$version.string), 
[13:38:28.724]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.724]                                 base::R.version$platform, 8 * 
[13:38:28.724]                                   base::.Machine$sizeof.pointer), 
[13:38:28.724]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.724]                                 "release", "version")], collapse = " "), 
[13:38:28.724]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.724]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.724]                               info)
[13:38:28.724]                             info <- base::paste(info, collapse = "; ")
[13:38:28.724]                             if (!has_future) {
[13:38:28.724]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.724]                                 info)
[13:38:28.724]                             }
[13:38:28.724]                             else {
[13:38:28.724]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.724]                                 info, version)
[13:38:28.724]                             }
[13:38:28.724]                             base::stop(msg)
[13:38:28.724]                           }
[13:38:28.724]                         })
[13:38:28.724]                       }
[13:38:28.724]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.724]                       base::options(mc.cores = 1L)
[13:38:28.724]                     }
[13:38:28.724]                     base::local({
[13:38:28.724]                       for (pkg in "utils") {
[13:38:28.724]                         base::loadNamespace(pkg)
[13:38:28.724]                         base::library(pkg, character.only = TRUE)
[13:38:28.724]                       }
[13:38:28.724]                     })
[13:38:28.724]                   }
[13:38:28.724]                   ...future.strategy.old <- future::plan("list")
[13:38:28.724]                   options(future.plan = NULL)
[13:38:28.724]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.724]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.724]                 }
[13:38:28.724]                 ...future.workdir <- getwd()
[13:38:28.724]             }
[13:38:28.724]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.724]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.724]         }
[13:38:28.724]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.724]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.724]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.724]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.724]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.724]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.724]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.724]             base::names(...future.oldOptions))
[13:38:28.724]     }
[13:38:28.724]     if (FALSE) {
[13:38:28.724]     }
[13:38:28.724]     else {
[13:38:28.724]         if (FALSE) {
[13:38:28.724]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.724]                 open = "w")
[13:38:28.724]         }
[13:38:28.724]         else {
[13:38:28.724]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.724]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.724]         }
[13:38:28.724]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.724]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.724]             base::sink(type = "output", split = FALSE)
[13:38:28.724]             base::close(...future.stdout)
[13:38:28.724]         }, add = TRUE)
[13:38:28.724]     }
[13:38:28.724]     ...future.frame <- base::sys.nframe()
[13:38:28.724]     ...future.conditions <- base::list()
[13:38:28.724]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.724]     if (FALSE) {
[13:38:28.724]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.724]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.724]     }
[13:38:28.724]     ...future.result <- base::tryCatch({
[13:38:28.724]         base::withCallingHandlers({
[13:38:28.724]             ...future.value <- base::withVisible(base::local({
[13:38:28.724]                 withCallingHandlers({
[13:38:28.724]                   {
[13:38:28.724]                     print(1:50)
[13:38:28.724]                     str(1:50)
[13:38:28.724]                     cat(letters, sep = "-")
[13:38:28.724]                     cat(1:6, collapse = "\n")
[13:38:28.724]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.724]                     42L
[13:38:28.724]                   }
[13:38:28.724]                 }, immediateCondition = function(cond) {
[13:38:28.724]                   save_rds <- function (object, pathname, ...) 
[13:38:28.724]                   {
[13:38:28.724]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.724]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.724]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.724]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.724]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.724]                         fi_tmp[["mtime"]])
[13:38:28.724]                     }
[13:38:28.724]                     tryCatch({
[13:38:28.724]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.724]                     }, error = function(ex) {
[13:38:28.724]                       msg <- conditionMessage(ex)
[13:38:28.724]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.724]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.724]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.724]                         fi_tmp[["mtime"]], msg)
[13:38:28.724]                       ex$message <- msg
[13:38:28.724]                       stop(ex)
[13:38:28.724]                     })
[13:38:28.724]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.724]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.724]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.724]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.724]                       fi <- file.info(pathname)
[13:38:28.724]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.724]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.724]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.724]                         fi[["size"]], fi[["mtime"]])
[13:38:28.724]                       stop(msg)
[13:38:28.724]                     }
[13:38:28.724]                     invisible(pathname)
[13:38:28.724]                   }
[13:38:28.724]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.724]                     rootPath = tempdir()) 
[13:38:28.724]                   {
[13:38:28.724]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.724]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.724]                       tmpdir = path, fileext = ".rds")
[13:38:28.724]                     save_rds(obj, file)
[13:38:28.724]                   }
[13:38:28.724]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.724]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.724]                   {
[13:38:28.724]                     inherits <- base::inherits
[13:38:28.724]                     invokeRestart <- base::invokeRestart
[13:38:28.724]                     is.null <- base::is.null
[13:38:28.724]                     muffled <- FALSE
[13:38:28.724]                     if (inherits(cond, "message")) {
[13:38:28.724]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.724]                       if (muffled) 
[13:38:28.724]                         invokeRestart("muffleMessage")
[13:38:28.724]                     }
[13:38:28.724]                     else if (inherits(cond, "warning")) {
[13:38:28.724]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.724]                       if (muffled) 
[13:38:28.724]                         invokeRestart("muffleWarning")
[13:38:28.724]                     }
[13:38:28.724]                     else if (inherits(cond, "condition")) {
[13:38:28.724]                       if (!is.null(pattern)) {
[13:38:28.724]                         computeRestarts <- base::computeRestarts
[13:38:28.724]                         grepl <- base::grepl
[13:38:28.724]                         restarts <- computeRestarts(cond)
[13:38:28.724]                         for (restart in restarts) {
[13:38:28.724]                           name <- restart$name
[13:38:28.724]                           if (is.null(name)) 
[13:38:28.724]                             next
[13:38:28.724]                           if (!grepl(pattern, name)) 
[13:38:28.724]                             next
[13:38:28.724]                           invokeRestart(restart)
[13:38:28.724]                           muffled <- TRUE
[13:38:28.724]                           break
[13:38:28.724]                         }
[13:38:28.724]                       }
[13:38:28.724]                     }
[13:38:28.724]                     invisible(muffled)
[13:38:28.724]                   }
[13:38:28.724]                   muffleCondition(cond)
[13:38:28.724]                 })
[13:38:28.724]             }))
[13:38:28.724]             future::FutureResult(value = ...future.value$value, 
[13:38:28.724]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.724]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.724]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.724]                     ...future.globalenv.names))
[13:38:28.724]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.724]         }, condition = base::local({
[13:38:28.724]             c <- base::c
[13:38:28.724]             inherits <- base::inherits
[13:38:28.724]             invokeRestart <- base::invokeRestart
[13:38:28.724]             length <- base::length
[13:38:28.724]             list <- base::list
[13:38:28.724]             seq.int <- base::seq.int
[13:38:28.724]             signalCondition <- base::signalCondition
[13:38:28.724]             sys.calls <- base::sys.calls
[13:38:28.724]             `[[` <- base::`[[`
[13:38:28.724]             `+` <- base::`+`
[13:38:28.724]             `<<-` <- base::`<<-`
[13:38:28.724]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.724]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.724]                   3L)]
[13:38:28.724]             }
[13:38:28.724]             function(cond) {
[13:38:28.724]                 is_error <- inherits(cond, "error")
[13:38:28.724]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.724]                   NULL)
[13:38:28.724]                 if (is_error) {
[13:38:28.724]                   sessionInformation <- function() {
[13:38:28.724]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.724]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.724]                       search = base::search(), system = base::Sys.info())
[13:38:28.724]                   }
[13:38:28.724]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.724]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.724]                     cond$call), session = sessionInformation(), 
[13:38:28.724]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.724]                   signalCondition(cond)
[13:38:28.724]                 }
[13:38:28.724]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.724]                 "immediateCondition"))) {
[13:38:28.724]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.724]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.724]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.724]                   if (TRUE && !signal) {
[13:38:28.724]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.724]                     {
[13:38:28.724]                       inherits <- base::inherits
[13:38:28.724]                       invokeRestart <- base::invokeRestart
[13:38:28.724]                       is.null <- base::is.null
[13:38:28.724]                       muffled <- FALSE
[13:38:28.724]                       if (inherits(cond, "message")) {
[13:38:28.724]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.724]                         if (muffled) 
[13:38:28.724]                           invokeRestart("muffleMessage")
[13:38:28.724]                       }
[13:38:28.724]                       else if (inherits(cond, "warning")) {
[13:38:28.724]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.724]                         if (muffled) 
[13:38:28.724]                           invokeRestart("muffleWarning")
[13:38:28.724]                       }
[13:38:28.724]                       else if (inherits(cond, "condition")) {
[13:38:28.724]                         if (!is.null(pattern)) {
[13:38:28.724]                           computeRestarts <- base::computeRestarts
[13:38:28.724]                           grepl <- base::grepl
[13:38:28.724]                           restarts <- computeRestarts(cond)
[13:38:28.724]                           for (restart in restarts) {
[13:38:28.724]                             name <- restart$name
[13:38:28.724]                             if (is.null(name)) 
[13:38:28.724]                               next
[13:38:28.724]                             if (!grepl(pattern, name)) 
[13:38:28.724]                               next
[13:38:28.724]                             invokeRestart(restart)
[13:38:28.724]                             muffled <- TRUE
[13:38:28.724]                             break
[13:38:28.724]                           }
[13:38:28.724]                         }
[13:38:28.724]                       }
[13:38:28.724]                       invisible(muffled)
[13:38:28.724]                     }
[13:38:28.724]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.724]                   }
[13:38:28.724]                 }
[13:38:28.724]                 else {
[13:38:28.724]                   if (TRUE) {
[13:38:28.724]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.724]                     {
[13:38:28.724]                       inherits <- base::inherits
[13:38:28.724]                       invokeRestart <- base::invokeRestart
[13:38:28.724]                       is.null <- base::is.null
[13:38:28.724]                       muffled <- FALSE
[13:38:28.724]                       if (inherits(cond, "message")) {
[13:38:28.724]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.724]                         if (muffled) 
[13:38:28.724]                           invokeRestart("muffleMessage")
[13:38:28.724]                       }
[13:38:28.724]                       else if (inherits(cond, "warning")) {
[13:38:28.724]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.724]                         if (muffled) 
[13:38:28.724]                           invokeRestart("muffleWarning")
[13:38:28.724]                       }
[13:38:28.724]                       else if (inherits(cond, "condition")) {
[13:38:28.724]                         if (!is.null(pattern)) {
[13:38:28.724]                           computeRestarts <- base::computeRestarts
[13:38:28.724]                           grepl <- base::grepl
[13:38:28.724]                           restarts <- computeRestarts(cond)
[13:38:28.724]                           for (restart in restarts) {
[13:38:28.724]                             name <- restart$name
[13:38:28.724]                             if (is.null(name)) 
[13:38:28.724]                               next
[13:38:28.724]                             if (!grepl(pattern, name)) 
[13:38:28.724]                               next
[13:38:28.724]                             invokeRestart(restart)
[13:38:28.724]                             muffled <- TRUE
[13:38:28.724]                             break
[13:38:28.724]                           }
[13:38:28.724]                         }
[13:38:28.724]                       }
[13:38:28.724]                       invisible(muffled)
[13:38:28.724]                     }
[13:38:28.724]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.724]                   }
[13:38:28.724]                 }
[13:38:28.724]             }
[13:38:28.724]         }))
[13:38:28.724]     }, error = function(ex) {
[13:38:28.724]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.724]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.724]                 ...future.rng), started = ...future.startTime, 
[13:38:28.724]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.724]             version = "1.8"), class = "FutureResult")
[13:38:28.724]     }, finally = {
[13:38:28.724]         if (!identical(...future.workdir, getwd())) 
[13:38:28.724]             setwd(...future.workdir)
[13:38:28.724]         {
[13:38:28.724]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.724]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.724]             }
[13:38:28.724]             base::options(...future.oldOptions)
[13:38:28.724]             if (.Platform$OS.type == "windows") {
[13:38:28.724]                 old_names <- names(...future.oldEnvVars)
[13:38:28.724]                 envs <- base::Sys.getenv()
[13:38:28.724]                 names <- names(envs)
[13:38:28.724]                 common <- intersect(names, old_names)
[13:38:28.724]                 added <- setdiff(names, old_names)
[13:38:28.724]                 removed <- setdiff(old_names, names)
[13:38:28.724]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.724]                   envs[common]]
[13:38:28.724]                 NAMES <- toupper(changed)
[13:38:28.724]                 args <- list()
[13:38:28.724]                 for (kk in seq_along(NAMES)) {
[13:38:28.724]                   name <- changed[[kk]]
[13:38:28.724]                   NAME <- NAMES[[kk]]
[13:38:28.724]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.724]                     next
[13:38:28.724]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.724]                 }
[13:38:28.724]                 NAMES <- toupper(added)
[13:38:28.724]                 for (kk in seq_along(NAMES)) {
[13:38:28.724]                   name <- added[[kk]]
[13:38:28.724]                   NAME <- NAMES[[kk]]
[13:38:28.724]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.724]                     next
[13:38:28.724]                   args[[name]] <- ""
[13:38:28.724]                 }
[13:38:28.724]                 NAMES <- toupper(removed)
[13:38:28.724]                 for (kk in seq_along(NAMES)) {
[13:38:28.724]                   name <- removed[[kk]]
[13:38:28.724]                   NAME <- NAMES[[kk]]
[13:38:28.724]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.724]                     next
[13:38:28.724]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.724]                 }
[13:38:28.724]                 if (length(args) > 0) 
[13:38:28.724]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.724]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.724]             }
[13:38:28.724]             else {
[13:38:28.724]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.724]             }
[13:38:28.724]             {
[13:38:28.724]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.724]                   0L) {
[13:38:28.724]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.724]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.724]                   base::options(opts)
[13:38:28.724]                 }
[13:38:28.724]                 {
[13:38:28.724]                   {
[13:38:28.724]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.724]                     NULL
[13:38:28.724]                   }
[13:38:28.724]                   options(future.plan = NULL)
[13:38:28.724]                   if (is.na(NA_character_)) 
[13:38:28.724]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.724]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.724]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.724]                     .init = FALSE)
[13:38:28.724]                 }
[13:38:28.724]             }
[13:38:28.724]         }
[13:38:28.724]     })
[13:38:28.724]     if (TRUE) {
[13:38:28.724]         base::sink(type = "output", split = FALSE)
[13:38:28.724]         if (FALSE) {
[13:38:28.724]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.724]         }
[13:38:28.724]         else {
[13:38:28.724]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.724]         }
[13:38:28.724]         base::close(...future.stdout)
[13:38:28.724]         ...future.stdout <- NULL
[13:38:28.724]     }
[13:38:28.724]     ...future.result$conditions <- ...future.conditions
[13:38:28.724]     ...future.result$finished <- base::Sys.time()
[13:38:28.724]     ...future.result
[13:38:28.724] }
[13:38:28.726] requestCore(): workers = 2
[13:38:28.728] MulticoreFuture started
[13:38:28.729] - Launch lazy future ... done
[13:38:28.729] run() for ‘MulticoreFuture’ ... done
[13:38:28.729] result() for MulticoreFuture ...
[13:38:28.730] plan(): Setting new future strategy stack:
[13:38:28.730] List of future strategies:
[13:38:28.730] 1. sequential:
[13:38:28.730]    - args: function (..., envir = parent.frame())
[13:38:28.730]    - tweaked: FALSE
[13:38:28.730]    - call: NULL
[13:38:28.731] plan(): nbrOfWorkers() = 1
[13:38:28.734] plan(): Setting new future strategy stack:
[13:38:28.735] List of future strategies:
[13:38:28.735] 1. multicore:
[13:38:28.735]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.735]    - tweaked: FALSE
[13:38:28.735]    - call: plan(strategy)
[13:38:28.740] plan(): nbrOfWorkers() = 2
[13:38:28.741] result() for MulticoreFuture ...
[13:38:28.741] result() for MulticoreFuture ... done
[13:38:28.741] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "9555e302-c67e-053f-af44-9fd1a0620cb5"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90991
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:28.751] result() for MulticoreFuture ...
[13:38:28.751] result() for MulticoreFuture ... done
[13:38:28.751] result() for MulticoreFuture ...
[13:38:28.751] result() for MulticoreFuture ... done
[13:38:28.752] getGlobalsAndPackages() ...
[13:38:28.752] Searching for globals...
[13:38:28.759] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.759] Searching for globals ... DONE
[13:38:28.759] Resolving globals: FALSE
[13:38:28.759] 
[13:38:28.760] - packages: [1] ‘utils’
[13:38:28.760] getGlobalsAndPackages() ... DONE
[13:38:28.760] run() for ‘Future’ ...
[13:38:28.760] - state: ‘created’
[13:38:28.760] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.765] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.765] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.765]   - Field: ‘label’
[13:38:28.765]   - Field: ‘local’
[13:38:28.765]   - Field: ‘owner’
[13:38:28.766]   - Field: ‘envir’
[13:38:28.766]   - Field: ‘workers’
[13:38:28.766]   - Field: ‘packages’
[13:38:28.766]   - Field: ‘gc’
[13:38:28.766]   - Field: ‘job’
[13:38:28.766]   - Field: ‘conditions’
[13:38:28.766]   - Field: ‘expr’
[13:38:28.766]   - Field: ‘uuid’
[13:38:28.767]   - Field: ‘seed’
[13:38:28.767]   - Field: ‘version’
[13:38:28.767]   - Field: ‘result’
[13:38:28.767]   - Field: ‘asynchronous’
[13:38:28.767]   - Field: ‘calls’
[13:38:28.767]   - Field: ‘globals’
[13:38:28.767]   - Field: ‘stdout’
[13:38:28.767]   - Field: ‘earlySignal’
[13:38:28.767]   - Field: ‘lazy’
[13:38:28.768]   - Field: ‘state’
[13:38:28.768] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.768] - Launch lazy future ...
[13:38:28.768] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.768] Packages needed by future strategies (n = 0): <none>
[13:38:28.769] {
[13:38:28.769]     {
[13:38:28.769]         {
[13:38:28.769]             ...future.startTime <- base::Sys.time()
[13:38:28.769]             {
[13:38:28.769]                 {
[13:38:28.769]                   {
[13:38:28.769]                     {
[13:38:28.769]                       {
[13:38:28.769]                         base::local({
[13:38:28.769]                           has_future <- base::requireNamespace("future", 
[13:38:28.769]                             quietly = TRUE)
[13:38:28.769]                           if (has_future) {
[13:38:28.769]                             ns <- base::getNamespace("future")
[13:38:28.769]                             version <- ns[[".package"]][["version"]]
[13:38:28.769]                             if (is.null(version)) 
[13:38:28.769]                               version <- utils::packageVersion("future")
[13:38:28.769]                           }
[13:38:28.769]                           else {
[13:38:28.769]                             version <- NULL
[13:38:28.769]                           }
[13:38:28.769]                           if (!has_future || version < "1.8.0") {
[13:38:28.769]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.769]                               "", base::R.version$version.string), 
[13:38:28.769]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.769]                                 base::R.version$platform, 8 * 
[13:38:28.769]                                   base::.Machine$sizeof.pointer), 
[13:38:28.769]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.769]                                 "release", "version")], collapse = " "), 
[13:38:28.769]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.769]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.769]                               info)
[13:38:28.769]                             info <- base::paste(info, collapse = "; ")
[13:38:28.769]                             if (!has_future) {
[13:38:28.769]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.769]                                 info)
[13:38:28.769]                             }
[13:38:28.769]                             else {
[13:38:28.769]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.769]                                 info, version)
[13:38:28.769]                             }
[13:38:28.769]                             base::stop(msg)
[13:38:28.769]                           }
[13:38:28.769]                         })
[13:38:28.769]                       }
[13:38:28.769]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.769]                       base::options(mc.cores = 1L)
[13:38:28.769]                     }
[13:38:28.769]                     base::local({
[13:38:28.769]                       for (pkg in "utils") {
[13:38:28.769]                         base::loadNamespace(pkg)
[13:38:28.769]                         base::library(pkg, character.only = TRUE)
[13:38:28.769]                       }
[13:38:28.769]                     })
[13:38:28.769]                   }
[13:38:28.769]                   ...future.strategy.old <- future::plan("list")
[13:38:28.769]                   options(future.plan = NULL)
[13:38:28.769]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.769]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.769]                 }
[13:38:28.769]                 ...future.workdir <- getwd()
[13:38:28.769]             }
[13:38:28.769]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.769]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.769]         }
[13:38:28.769]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.769]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.769]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.769]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.769]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.769]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.769]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.769]             base::names(...future.oldOptions))
[13:38:28.769]     }
[13:38:28.769]     if (FALSE) {
[13:38:28.769]     }
[13:38:28.769]     else {
[13:38:28.769]         if (FALSE) {
[13:38:28.769]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.769]                 open = "w")
[13:38:28.769]         }
[13:38:28.769]         else {
[13:38:28.769]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.769]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.769]         }
[13:38:28.769]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.769]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.769]             base::sink(type = "output", split = FALSE)
[13:38:28.769]             base::close(...future.stdout)
[13:38:28.769]         }, add = TRUE)
[13:38:28.769]     }
[13:38:28.769]     ...future.frame <- base::sys.nframe()
[13:38:28.769]     ...future.conditions <- base::list()
[13:38:28.769]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.769]     if (FALSE) {
[13:38:28.769]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.769]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.769]     }
[13:38:28.769]     ...future.result <- base::tryCatch({
[13:38:28.769]         base::withCallingHandlers({
[13:38:28.769]             ...future.value <- base::withVisible(base::local({
[13:38:28.769]                 withCallingHandlers({
[13:38:28.769]                   {
[13:38:28.769]                     print(1:50)
[13:38:28.769]                     str(1:50)
[13:38:28.769]                     cat(letters, sep = "-")
[13:38:28.769]                     cat(1:6, collapse = "\n")
[13:38:28.769]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.769]                     42L
[13:38:28.769]                   }
[13:38:28.769]                 }, immediateCondition = function(cond) {
[13:38:28.769]                   save_rds <- function (object, pathname, ...) 
[13:38:28.769]                   {
[13:38:28.769]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.769]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.769]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.769]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.769]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.769]                         fi_tmp[["mtime"]])
[13:38:28.769]                     }
[13:38:28.769]                     tryCatch({
[13:38:28.769]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.769]                     }, error = function(ex) {
[13:38:28.769]                       msg <- conditionMessage(ex)
[13:38:28.769]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.769]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.769]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.769]                         fi_tmp[["mtime"]], msg)
[13:38:28.769]                       ex$message <- msg
[13:38:28.769]                       stop(ex)
[13:38:28.769]                     })
[13:38:28.769]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.769]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.769]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.769]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.769]                       fi <- file.info(pathname)
[13:38:28.769]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.769]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.769]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.769]                         fi[["size"]], fi[["mtime"]])
[13:38:28.769]                       stop(msg)
[13:38:28.769]                     }
[13:38:28.769]                     invisible(pathname)
[13:38:28.769]                   }
[13:38:28.769]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.769]                     rootPath = tempdir()) 
[13:38:28.769]                   {
[13:38:28.769]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.769]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.769]                       tmpdir = path, fileext = ".rds")
[13:38:28.769]                     save_rds(obj, file)
[13:38:28.769]                   }
[13:38:28.769]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.769]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.769]                   {
[13:38:28.769]                     inherits <- base::inherits
[13:38:28.769]                     invokeRestart <- base::invokeRestart
[13:38:28.769]                     is.null <- base::is.null
[13:38:28.769]                     muffled <- FALSE
[13:38:28.769]                     if (inherits(cond, "message")) {
[13:38:28.769]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.769]                       if (muffled) 
[13:38:28.769]                         invokeRestart("muffleMessage")
[13:38:28.769]                     }
[13:38:28.769]                     else if (inherits(cond, "warning")) {
[13:38:28.769]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.769]                       if (muffled) 
[13:38:28.769]                         invokeRestart("muffleWarning")
[13:38:28.769]                     }
[13:38:28.769]                     else if (inherits(cond, "condition")) {
[13:38:28.769]                       if (!is.null(pattern)) {
[13:38:28.769]                         computeRestarts <- base::computeRestarts
[13:38:28.769]                         grepl <- base::grepl
[13:38:28.769]                         restarts <- computeRestarts(cond)
[13:38:28.769]                         for (restart in restarts) {
[13:38:28.769]                           name <- restart$name
[13:38:28.769]                           if (is.null(name)) 
[13:38:28.769]                             next
[13:38:28.769]                           if (!grepl(pattern, name)) 
[13:38:28.769]                             next
[13:38:28.769]                           invokeRestart(restart)
[13:38:28.769]                           muffled <- TRUE
[13:38:28.769]                           break
[13:38:28.769]                         }
[13:38:28.769]                       }
[13:38:28.769]                     }
[13:38:28.769]                     invisible(muffled)
[13:38:28.769]                   }
[13:38:28.769]                   muffleCondition(cond)
[13:38:28.769]                 })
[13:38:28.769]             }))
[13:38:28.769]             future::FutureResult(value = ...future.value$value, 
[13:38:28.769]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.769]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.769]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.769]                     ...future.globalenv.names))
[13:38:28.769]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.769]         }, condition = base::local({
[13:38:28.769]             c <- base::c
[13:38:28.769]             inherits <- base::inherits
[13:38:28.769]             invokeRestart <- base::invokeRestart
[13:38:28.769]             length <- base::length
[13:38:28.769]             list <- base::list
[13:38:28.769]             seq.int <- base::seq.int
[13:38:28.769]             signalCondition <- base::signalCondition
[13:38:28.769]             sys.calls <- base::sys.calls
[13:38:28.769]             `[[` <- base::`[[`
[13:38:28.769]             `+` <- base::`+`
[13:38:28.769]             `<<-` <- base::`<<-`
[13:38:28.769]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.769]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.769]                   3L)]
[13:38:28.769]             }
[13:38:28.769]             function(cond) {
[13:38:28.769]                 is_error <- inherits(cond, "error")
[13:38:28.769]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.769]                   NULL)
[13:38:28.769]                 if (is_error) {
[13:38:28.769]                   sessionInformation <- function() {
[13:38:28.769]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.769]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.769]                       search = base::search(), system = base::Sys.info())
[13:38:28.769]                   }
[13:38:28.769]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.769]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.769]                     cond$call), session = sessionInformation(), 
[13:38:28.769]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.769]                   signalCondition(cond)
[13:38:28.769]                 }
[13:38:28.769]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.769]                 "immediateCondition"))) {
[13:38:28.769]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.769]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.769]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.769]                   if (TRUE && !signal) {
[13:38:28.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.769]                     {
[13:38:28.769]                       inherits <- base::inherits
[13:38:28.769]                       invokeRestart <- base::invokeRestart
[13:38:28.769]                       is.null <- base::is.null
[13:38:28.769]                       muffled <- FALSE
[13:38:28.769]                       if (inherits(cond, "message")) {
[13:38:28.769]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.769]                         if (muffled) 
[13:38:28.769]                           invokeRestart("muffleMessage")
[13:38:28.769]                       }
[13:38:28.769]                       else if (inherits(cond, "warning")) {
[13:38:28.769]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.769]                         if (muffled) 
[13:38:28.769]                           invokeRestart("muffleWarning")
[13:38:28.769]                       }
[13:38:28.769]                       else if (inherits(cond, "condition")) {
[13:38:28.769]                         if (!is.null(pattern)) {
[13:38:28.769]                           computeRestarts <- base::computeRestarts
[13:38:28.769]                           grepl <- base::grepl
[13:38:28.769]                           restarts <- computeRestarts(cond)
[13:38:28.769]                           for (restart in restarts) {
[13:38:28.769]                             name <- restart$name
[13:38:28.769]                             if (is.null(name)) 
[13:38:28.769]                               next
[13:38:28.769]                             if (!grepl(pattern, name)) 
[13:38:28.769]                               next
[13:38:28.769]                             invokeRestart(restart)
[13:38:28.769]                             muffled <- TRUE
[13:38:28.769]                             break
[13:38:28.769]                           }
[13:38:28.769]                         }
[13:38:28.769]                       }
[13:38:28.769]                       invisible(muffled)
[13:38:28.769]                     }
[13:38:28.769]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.769]                   }
[13:38:28.769]                 }
[13:38:28.769]                 else {
[13:38:28.769]                   if (TRUE) {
[13:38:28.769]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.769]                     {
[13:38:28.769]                       inherits <- base::inherits
[13:38:28.769]                       invokeRestart <- base::invokeRestart
[13:38:28.769]                       is.null <- base::is.null
[13:38:28.769]                       muffled <- FALSE
[13:38:28.769]                       if (inherits(cond, "message")) {
[13:38:28.769]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.769]                         if (muffled) 
[13:38:28.769]                           invokeRestart("muffleMessage")
[13:38:28.769]                       }
[13:38:28.769]                       else if (inherits(cond, "warning")) {
[13:38:28.769]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.769]                         if (muffled) 
[13:38:28.769]                           invokeRestart("muffleWarning")
[13:38:28.769]                       }
[13:38:28.769]                       else if (inherits(cond, "condition")) {
[13:38:28.769]                         if (!is.null(pattern)) {
[13:38:28.769]                           computeRestarts <- base::computeRestarts
[13:38:28.769]                           grepl <- base::grepl
[13:38:28.769]                           restarts <- computeRestarts(cond)
[13:38:28.769]                           for (restart in restarts) {
[13:38:28.769]                             name <- restart$name
[13:38:28.769]                             if (is.null(name)) 
[13:38:28.769]                               next
[13:38:28.769]                             if (!grepl(pattern, name)) 
[13:38:28.769]                               next
[13:38:28.769]                             invokeRestart(restart)
[13:38:28.769]                             muffled <- TRUE
[13:38:28.769]                             break
[13:38:28.769]                           }
[13:38:28.769]                         }
[13:38:28.769]                       }
[13:38:28.769]                       invisible(muffled)
[13:38:28.769]                     }
[13:38:28.769]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.769]                   }
[13:38:28.769]                 }
[13:38:28.769]             }
[13:38:28.769]         }))
[13:38:28.769]     }, error = function(ex) {
[13:38:28.769]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.769]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.769]                 ...future.rng), started = ...future.startTime, 
[13:38:28.769]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.769]             version = "1.8"), class = "FutureResult")
[13:38:28.769]     }, finally = {
[13:38:28.769]         if (!identical(...future.workdir, getwd())) 
[13:38:28.769]             setwd(...future.workdir)
[13:38:28.769]         {
[13:38:28.769]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.769]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.769]             }
[13:38:28.769]             base::options(...future.oldOptions)
[13:38:28.769]             if (.Platform$OS.type == "windows") {
[13:38:28.769]                 old_names <- names(...future.oldEnvVars)
[13:38:28.769]                 envs <- base::Sys.getenv()
[13:38:28.769]                 names <- names(envs)
[13:38:28.769]                 common <- intersect(names, old_names)
[13:38:28.769]                 added <- setdiff(names, old_names)
[13:38:28.769]                 removed <- setdiff(old_names, names)
[13:38:28.769]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.769]                   envs[common]]
[13:38:28.769]                 NAMES <- toupper(changed)
[13:38:28.769]                 args <- list()
[13:38:28.769]                 for (kk in seq_along(NAMES)) {
[13:38:28.769]                   name <- changed[[kk]]
[13:38:28.769]                   NAME <- NAMES[[kk]]
[13:38:28.769]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.769]                     next
[13:38:28.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.769]                 }
[13:38:28.769]                 NAMES <- toupper(added)
[13:38:28.769]                 for (kk in seq_along(NAMES)) {
[13:38:28.769]                   name <- added[[kk]]
[13:38:28.769]                   NAME <- NAMES[[kk]]
[13:38:28.769]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.769]                     next
[13:38:28.769]                   args[[name]] <- ""
[13:38:28.769]                 }
[13:38:28.769]                 NAMES <- toupper(removed)
[13:38:28.769]                 for (kk in seq_along(NAMES)) {
[13:38:28.769]                   name <- removed[[kk]]
[13:38:28.769]                   NAME <- NAMES[[kk]]
[13:38:28.769]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.769]                     next
[13:38:28.769]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.769]                 }
[13:38:28.769]                 if (length(args) > 0) 
[13:38:28.769]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.769]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.769]             }
[13:38:28.769]             else {
[13:38:28.769]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.769]             }
[13:38:28.769]             {
[13:38:28.769]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.769]                   0L) {
[13:38:28.769]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.769]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.769]                   base::options(opts)
[13:38:28.769]                 }
[13:38:28.769]                 {
[13:38:28.769]                   {
[13:38:28.769]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.769]                     NULL
[13:38:28.769]                   }
[13:38:28.769]                   options(future.plan = NULL)
[13:38:28.769]                   if (is.na(NA_character_)) 
[13:38:28.769]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.769]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.769]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.769]                     .init = FALSE)
[13:38:28.769]                 }
[13:38:28.769]             }
[13:38:28.769]         }
[13:38:28.769]     })
[13:38:28.769]     if (TRUE) {
[13:38:28.769]         base::sink(type = "output", split = FALSE)
[13:38:28.769]         if (FALSE) {
[13:38:28.769]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.769]         }
[13:38:28.769]         else {
[13:38:28.769]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.769]         }
[13:38:28.769]         base::close(...future.stdout)
[13:38:28.769]         ...future.stdout <- NULL
[13:38:28.769]     }
[13:38:28.769]     ...future.result$conditions <- ...future.conditions
[13:38:28.769]     ...future.result$finished <- base::Sys.time()
[13:38:28.769]     ...future.result
[13:38:28.769] }
[13:38:28.771] requestCore(): workers = 2
[13:38:28.773] MulticoreFuture started
[13:38:28.773] - Launch lazy future ... done
[13:38:28.774] run() for ‘MulticoreFuture’ ... done
[13:38:28.774] result() for MulticoreFuture ...
[13:38:28.775] plan(): Setting new future strategy stack:
[13:38:28.775] List of future strategies:
[13:38:28.775] 1. sequential:
[13:38:28.775]    - args: function (..., envir = parent.frame())
[13:38:28.775]    - tweaked: FALSE
[13:38:28.775]    - call: NULL
[13:38:28.776] plan(): nbrOfWorkers() = 1
[13:38:28.779] plan(): Setting new future strategy stack:
[13:38:28.779] List of future strategies:
[13:38:28.779] 1. multicore:
[13:38:28.779]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.779]    - tweaked: FALSE
[13:38:28.779]    - call: plan(strategy)
[13:38:28.784] plan(): nbrOfWorkers() = 2
[13:38:28.785] result() for MulticoreFuture ...
[13:38:28.785] result() for MulticoreFuture ... done
[13:38:28.785] result() for MulticoreFuture ... done
[13:38:28.786] result() for MulticoreFuture ...
[13:38:28.786] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.786] getGlobalsAndPackages() ...
[13:38:28.786] Searching for globals...
[13:38:28.787] - globals found: [1] ‘print’
[13:38:28.787] Searching for globals ... DONE
[13:38:28.787] Resolving globals: FALSE
[13:38:28.788] 
[13:38:28.788] 
[13:38:28.788] getGlobalsAndPackages() ... DONE
[13:38:28.788] run() for ‘Future’ ...
[13:38:28.789] - state: ‘created’
[13:38:28.789] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.793] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.793] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.793]   - Field: ‘label’
[13:38:28.793]   - Field: ‘local’
[13:38:28.793]   - Field: ‘owner’
[13:38:28.793]   - Field: ‘envir’
[13:38:28.794]   - Field: ‘workers’
[13:38:28.794]   - Field: ‘packages’
[13:38:28.794]   - Field: ‘gc’
[13:38:28.794]   - Field: ‘job’
[13:38:28.794]   - Field: ‘conditions’
[13:38:28.794]   - Field: ‘expr’
[13:38:28.794]   - Field: ‘uuid’
[13:38:28.794]   - Field: ‘seed’
[13:38:28.795]   - Field: ‘version’
[13:38:28.795]   - Field: ‘result’
[13:38:28.795]   - Field: ‘asynchronous’
[13:38:28.795]   - Field: ‘calls’
[13:38:28.795]   - Field: ‘globals’
[13:38:28.795]   - Field: ‘stdout’
[13:38:28.795]   - Field: ‘earlySignal’
[13:38:28.795]   - Field: ‘lazy’
[13:38:28.795]   - Field: ‘state’
[13:38:28.796] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.796] - Launch lazy future ...
[13:38:28.796] Packages needed by the future expression (n = 0): <none>
[13:38:28.796] Packages needed by future strategies (n = 0): <none>
[13:38:28.797] {
[13:38:28.797]     {
[13:38:28.797]         {
[13:38:28.797]             ...future.startTime <- base::Sys.time()
[13:38:28.797]             {
[13:38:28.797]                 {
[13:38:28.797]                   {
[13:38:28.797]                     {
[13:38:28.797]                       base::local({
[13:38:28.797]                         has_future <- base::requireNamespace("future", 
[13:38:28.797]                           quietly = TRUE)
[13:38:28.797]                         if (has_future) {
[13:38:28.797]                           ns <- base::getNamespace("future")
[13:38:28.797]                           version <- ns[[".package"]][["version"]]
[13:38:28.797]                           if (is.null(version)) 
[13:38:28.797]                             version <- utils::packageVersion("future")
[13:38:28.797]                         }
[13:38:28.797]                         else {
[13:38:28.797]                           version <- NULL
[13:38:28.797]                         }
[13:38:28.797]                         if (!has_future || version < "1.8.0") {
[13:38:28.797]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.797]                             "", base::R.version$version.string), 
[13:38:28.797]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.797]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.797]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.797]                               "release", "version")], collapse = " "), 
[13:38:28.797]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.797]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.797]                             info)
[13:38:28.797]                           info <- base::paste(info, collapse = "; ")
[13:38:28.797]                           if (!has_future) {
[13:38:28.797]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.797]                               info)
[13:38:28.797]                           }
[13:38:28.797]                           else {
[13:38:28.797]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.797]                               info, version)
[13:38:28.797]                           }
[13:38:28.797]                           base::stop(msg)
[13:38:28.797]                         }
[13:38:28.797]                       })
[13:38:28.797]                     }
[13:38:28.797]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.797]                     base::options(mc.cores = 1L)
[13:38:28.797]                   }
[13:38:28.797]                   ...future.strategy.old <- future::plan("list")
[13:38:28.797]                   options(future.plan = NULL)
[13:38:28.797]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.797]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.797]                 }
[13:38:28.797]                 ...future.workdir <- getwd()
[13:38:28.797]             }
[13:38:28.797]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.797]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.797]         }
[13:38:28.797]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.797]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.797]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.797]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.797]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.797]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.797]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.797]             base::names(...future.oldOptions))
[13:38:28.797]     }
[13:38:28.797]     if (FALSE) {
[13:38:28.797]     }
[13:38:28.797]     else {
[13:38:28.797]         if (TRUE) {
[13:38:28.797]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.797]                 open = "w")
[13:38:28.797]         }
[13:38:28.797]         else {
[13:38:28.797]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.797]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.797]         }
[13:38:28.797]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.797]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.797]             base::sink(type = "output", split = FALSE)
[13:38:28.797]             base::close(...future.stdout)
[13:38:28.797]         }, add = TRUE)
[13:38:28.797]     }
[13:38:28.797]     ...future.frame <- base::sys.nframe()
[13:38:28.797]     ...future.conditions <- base::list()
[13:38:28.797]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.797]     if (FALSE) {
[13:38:28.797]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.797]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.797]     }
[13:38:28.797]     ...future.result <- base::tryCatch({
[13:38:28.797]         base::withCallingHandlers({
[13:38:28.797]             ...future.value <- base::withVisible(base::local({
[13:38:28.797]                 withCallingHandlers({
[13:38:28.797]                   print(42)
[13:38:28.797]                 }, immediateCondition = function(cond) {
[13:38:28.797]                   save_rds <- function (object, pathname, ...) 
[13:38:28.797]                   {
[13:38:28.797]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.797]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.797]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.797]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.797]                         fi_tmp[["mtime"]])
[13:38:28.797]                     }
[13:38:28.797]                     tryCatch({
[13:38:28.797]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.797]                     }, error = function(ex) {
[13:38:28.797]                       msg <- conditionMessage(ex)
[13:38:28.797]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.797]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.797]                         fi_tmp[["mtime"]], msg)
[13:38:28.797]                       ex$message <- msg
[13:38:28.797]                       stop(ex)
[13:38:28.797]                     })
[13:38:28.797]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.797]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.797]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.797]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.797]                       fi <- file.info(pathname)
[13:38:28.797]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.797]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.797]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.797]                         fi[["size"]], fi[["mtime"]])
[13:38:28.797]                       stop(msg)
[13:38:28.797]                     }
[13:38:28.797]                     invisible(pathname)
[13:38:28.797]                   }
[13:38:28.797]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.797]                     rootPath = tempdir()) 
[13:38:28.797]                   {
[13:38:28.797]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.797]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.797]                       tmpdir = path, fileext = ".rds")
[13:38:28.797]                     save_rds(obj, file)
[13:38:28.797]                   }
[13:38:28.797]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.797]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.797]                   {
[13:38:28.797]                     inherits <- base::inherits
[13:38:28.797]                     invokeRestart <- base::invokeRestart
[13:38:28.797]                     is.null <- base::is.null
[13:38:28.797]                     muffled <- FALSE
[13:38:28.797]                     if (inherits(cond, "message")) {
[13:38:28.797]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.797]                       if (muffled) 
[13:38:28.797]                         invokeRestart("muffleMessage")
[13:38:28.797]                     }
[13:38:28.797]                     else if (inherits(cond, "warning")) {
[13:38:28.797]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.797]                       if (muffled) 
[13:38:28.797]                         invokeRestart("muffleWarning")
[13:38:28.797]                     }
[13:38:28.797]                     else if (inherits(cond, "condition")) {
[13:38:28.797]                       if (!is.null(pattern)) {
[13:38:28.797]                         computeRestarts <- base::computeRestarts
[13:38:28.797]                         grepl <- base::grepl
[13:38:28.797]                         restarts <- computeRestarts(cond)
[13:38:28.797]                         for (restart in restarts) {
[13:38:28.797]                           name <- restart$name
[13:38:28.797]                           if (is.null(name)) 
[13:38:28.797]                             next
[13:38:28.797]                           if (!grepl(pattern, name)) 
[13:38:28.797]                             next
[13:38:28.797]                           invokeRestart(restart)
[13:38:28.797]                           muffled <- TRUE
[13:38:28.797]                           break
[13:38:28.797]                         }
[13:38:28.797]                       }
[13:38:28.797]                     }
[13:38:28.797]                     invisible(muffled)
[13:38:28.797]                   }
[13:38:28.797]                   muffleCondition(cond)
[13:38:28.797]                 })
[13:38:28.797]             }))
[13:38:28.797]             future::FutureResult(value = ...future.value$value, 
[13:38:28.797]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.797]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.797]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.797]                     ...future.globalenv.names))
[13:38:28.797]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.797]         }, condition = base::local({
[13:38:28.797]             c <- base::c
[13:38:28.797]             inherits <- base::inherits
[13:38:28.797]             invokeRestart <- base::invokeRestart
[13:38:28.797]             length <- base::length
[13:38:28.797]             list <- base::list
[13:38:28.797]             seq.int <- base::seq.int
[13:38:28.797]             signalCondition <- base::signalCondition
[13:38:28.797]             sys.calls <- base::sys.calls
[13:38:28.797]             `[[` <- base::`[[`
[13:38:28.797]             `+` <- base::`+`
[13:38:28.797]             `<<-` <- base::`<<-`
[13:38:28.797]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.797]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.797]                   3L)]
[13:38:28.797]             }
[13:38:28.797]             function(cond) {
[13:38:28.797]                 is_error <- inherits(cond, "error")
[13:38:28.797]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.797]                   NULL)
[13:38:28.797]                 if (is_error) {
[13:38:28.797]                   sessionInformation <- function() {
[13:38:28.797]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.797]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.797]                       search = base::search(), system = base::Sys.info())
[13:38:28.797]                   }
[13:38:28.797]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.797]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.797]                     cond$call), session = sessionInformation(), 
[13:38:28.797]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.797]                   signalCondition(cond)
[13:38:28.797]                 }
[13:38:28.797]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.797]                 "immediateCondition"))) {
[13:38:28.797]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.797]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.797]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.797]                   if (TRUE && !signal) {
[13:38:28.797]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.797]                     {
[13:38:28.797]                       inherits <- base::inherits
[13:38:28.797]                       invokeRestart <- base::invokeRestart
[13:38:28.797]                       is.null <- base::is.null
[13:38:28.797]                       muffled <- FALSE
[13:38:28.797]                       if (inherits(cond, "message")) {
[13:38:28.797]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.797]                         if (muffled) 
[13:38:28.797]                           invokeRestart("muffleMessage")
[13:38:28.797]                       }
[13:38:28.797]                       else if (inherits(cond, "warning")) {
[13:38:28.797]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.797]                         if (muffled) 
[13:38:28.797]                           invokeRestart("muffleWarning")
[13:38:28.797]                       }
[13:38:28.797]                       else if (inherits(cond, "condition")) {
[13:38:28.797]                         if (!is.null(pattern)) {
[13:38:28.797]                           computeRestarts <- base::computeRestarts
[13:38:28.797]                           grepl <- base::grepl
[13:38:28.797]                           restarts <- computeRestarts(cond)
[13:38:28.797]                           for (restart in restarts) {
[13:38:28.797]                             name <- restart$name
[13:38:28.797]                             if (is.null(name)) 
[13:38:28.797]                               next
[13:38:28.797]                             if (!grepl(pattern, name)) 
[13:38:28.797]                               next
[13:38:28.797]                             invokeRestart(restart)
[13:38:28.797]                             muffled <- TRUE
[13:38:28.797]                             break
[13:38:28.797]                           }
[13:38:28.797]                         }
[13:38:28.797]                       }
[13:38:28.797]                       invisible(muffled)
[13:38:28.797]                     }
[13:38:28.797]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.797]                   }
[13:38:28.797]                 }
[13:38:28.797]                 else {
[13:38:28.797]                   if (TRUE) {
[13:38:28.797]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.797]                     {
[13:38:28.797]                       inherits <- base::inherits
[13:38:28.797]                       invokeRestart <- base::invokeRestart
[13:38:28.797]                       is.null <- base::is.null
[13:38:28.797]                       muffled <- FALSE
[13:38:28.797]                       if (inherits(cond, "message")) {
[13:38:28.797]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.797]                         if (muffled) 
[13:38:28.797]                           invokeRestart("muffleMessage")
[13:38:28.797]                       }
[13:38:28.797]                       else if (inherits(cond, "warning")) {
[13:38:28.797]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.797]                         if (muffled) 
[13:38:28.797]                           invokeRestart("muffleWarning")
[13:38:28.797]                       }
[13:38:28.797]                       else if (inherits(cond, "condition")) {
[13:38:28.797]                         if (!is.null(pattern)) {
[13:38:28.797]                           computeRestarts <- base::computeRestarts
[13:38:28.797]                           grepl <- base::grepl
[13:38:28.797]                           restarts <- computeRestarts(cond)
[13:38:28.797]                           for (restart in restarts) {
[13:38:28.797]                             name <- restart$name
[13:38:28.797]                             if (is.null(name)) 
[13:38:28.797]                               next
[13:38:28.797]                             if (!grepl(pattern, name)) 
[13:38:28.797]                               next
[13:38:28.797]                             invokeRestart(restart)
[13:38:28.797]                             muffled <- TRUE
[13:38:28.797]                             break
[13:38:28.797]                           }
[13:38:28.797]                         }
[13:38:28.797]                       }
[13:38:28.797]                       invisible(muffled)
[13:38:28.797]                     }
[13:38:28.797]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.797]                   }
[13:38:28.797]                 }
[13:38:28.797]             }
[13:38:28.797]         }))
[13:38:28.797]     }, error = function(ex) {
[13:38:28.797]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.797]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.797]                 ...future.rng), started = ...future.startTime, 
[13:38:28.797]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.797]             version = "1.8"), class = "FutureResult")
[13:38:28.797]     }, finally = {
[13:38:28.797]         if (!identical(...future.workdir, getwd())) 
[13:38:28.797]             setwd(...future.workdir)
[13:38:28.797]         {
[13:38:28.797]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.797]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.797]             }
[13:38:28.797]             base::options(...future.oldOptions)
[13:38:28.797]             if (.Platform$OS.type == "windows") {
[13:38:28.797]                 old_names <- names(...future.oldEnvVars)
[13:38:28.797]                 envs <- base::Sys.getenv()
[13:38:28.797]                 names <- names(envs)
[13:38:28.797]                 common <- intersect(names, old_names)
[13:38:28.797]                 added <- setdiff(names, old_names)
[13:38:28.797]                 removed <- setdiff(old_names, names)
[13:38:28.797]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.797]                   envs[common]]
[13:38:28.797]                 NAMES <- toupper(changed)
[13:38:28.797]                 args <- list()
[13:38:28.797]                 for (kk in seq_along(NAMES)) {
[13:38:28.797]                   name <- changed[[kk]]
[13:38:28.797]                   NAME <- NAMES[[kk]]
[13:38:28.797]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.797]                     next
[13:38:28.797]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.797]                 }
[13:38:28.797]                 NAMES <- toupper(added)
[13:38:28.797]                 for (kk in seq_along(NAMES)) {
[13:38:28.797]                   name <- added[[kk]]
[13:38:28.797]                   NAME <- NAMES[[kk]]
[13:38:28.797]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.797]                     next
[13:38:28.797]                   args[[name]] <- ""
[13:38:28.797]                 }
[13:38:28.797]                 NAMES <- toupper(removed)
[13:38:28.797]                 for (kk in seq_along(NAMES)) {
[13:38:28.797]                   name <- removed[[kk]]
[13:38:28.797]                   NAME <- NAMES[[kk]]
[13:38:28.797]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.797]                     next
[13:38:28.797]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.797]                 }
[13:38:28.797]                 if (length(args) > 0) 
[13:38:28.797]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.797]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.797]             }
[13:38:28.797]             else {
[13:38:28.797]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.797]             }
[13:38:28.797]             {
[13:38:28.797]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.797]                   0L) {
[13:38:28.797]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.797]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.797]                   base::options(opts)
[13:38:28.797]                 }
[13:38:28.797]                 {
[13:38:28.797]                   {
[13:38:28.797]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.797]                     NULL
[13:38:28.797]                   }
[13:38:28.797]                   options(future.plan = NULL)
[13:38:28.797]                   if (is.na(NA_character_)) 
[13:38:28.797]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.797]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.797]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.797]                     .init = FALSE)
[13:38:28.797]                 }
[13:38:28.797]             }
[13:38:28.797]         }
[13:38:28.797]     })
[13:38:28.797]     if (TRUE) {
[13:38:28.797]         base::sink(type = "output", split = FALSE)
[13:38:28.797]         if (TRUE) {
[13:38:28.797]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.797]         }
[13:38:28.797]         else {
[13:38:28.797]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.797]         }
[13:38:28.797]         base::close(...future.stdout)
[13:38:28.797]         ...future.stdout <- NULL
[13:38:28.797]     }
[13:38:28.797]     ...future.result$conditions <- ...future.conditions
[13:38:28.797]     ...future.result$finished <- base::Sys.time()
[13:38:28.797]     ...future.result
[13:38:28.797] }
[13:38:28.799] requestCore(): workers = 2
[13:38:28.801] MulticoreFuture started
[13:38:28.802] - Launch lazy future ... done
[13:38:28.802] run() for ‘MulticoreFuture’ ... done
[13:38:28.802] result() for MulticoreFuture ...
[13:38:28.802] plan(): Setting new future strategy stack:
[13:38:28.803] List of future strategies:
[13:38:28.803] 1. sequential:
[13:38:28.803]    - args: function (..., envir = parent.frame())
[13:38:28.803]    - tweaked: FALSE
[13:38:28.803]    - call: NULL
[13:38:28.803] plan(): nbrOfWorkers() = 1
[13:38:28.805] plan(): Setting new future strategy stack:
[13:38:28.806] List of future strategies:
[13:38:28.806] 1. multicore:
[13:38:28.806]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.806]    - tweaked: FALSE
[13:38:28.806]    - call: plan(strategy)
[13:38:28.811] plan(): nbrOfWorkers() = 2
[13:38:28.812] result() for MulticoreFuture ...
[13:38:28.812] result() for MulticoreFuture ... done
[13:38:28.812] result() for MulticoreFuture ... done
[13:38:28.812] result() for MulticoreFuture ...
[13:38:28.812] result() for MulticoreFuture ... done
[13:38:28.813] result() for MulticoreFuture ...
[13:38:28.813] result() for MulticoreFuture ... done
[1] 42
[13:38:28.813] result() for MulticoreFuture ...
[13:38:28.813] result() for MulticoreFuture ... done
- stdout = NA
[13:38:28.814] getGlobalsAndPackages() ...
[13:38:28.814] Searching for globals...
[13:38:28.821] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.821] Searching for globals ... DONE
[13:38:28.821] Resolving globals: FALSE
[13:38:28.822] 
[13:38:28.822] - packages: [1] ‘utils’
[13:38:28.822] getGlobalsAndPackages() ... DONE
[13:38:28.823] run() for ‘Future’ ...
[13:38:28.823] - state: ‘created’
[13:38:28.823] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.827] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.827] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.827]   - Field: ‘label’
[13:38:28.827]   - Field: ‘local’
[13:38:28.827]   - Field: ‘owner’
[13:38:28.828]   - Field: ‘envir’
[13:38:28.828]   - Field: ‘workers’
[13:38:28.828]   - Field: ‘packages’
[13:38:28.828]   - Field: ‘gc’
[13:38:28.828]   - Field: ‘job’
[13:38:28.828]   - Field: ‘conditions’
[13:38:28.828]   - Field: ‘expr’
[13:38:28.828]   - Field: ‘uuid’
[13:38:28.828]   - Field: ‘seed’
[13:38:28.829]   - Field: ‘version’
[13:38:28.829]   - Field: ‘result’
[13:38:28.829]   - Field: ‘asynchronous’
[13:38:28.829]   - Field: ‘calls’
[13:38:28.829]   - Field: ‘globals’
[13:38:28.829]   - Field: ‘stdout’
[13:38:28.829]   - Field: ‘earlySignal’
[13:38:28.829]   - Field: ‘lazy’
[13:38:28.829]   - Field: ‘state’
[13:38:28.830] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.830] - Launch lazy future ...
[13:38:28.830] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.830] Packages needed by future strategies (n = 0): <none>
[13:38:28.831] {
[13:38:28.831]     {
[13:38:28.831]         {
[13:38:28.831]             ...future.startTime <- base::Sys.time()
[13:38:28.831]             {
[13:38:28.831]                 {
[13:38:28.831]                   {
[13:38:28.831]                     {
[13:38:28.831]                       {
[13:38:28.831]                         base::local({
[13:38:28.831]                           has_future <- base::requireNamespace("future", 
[13:38:28.831]                             quietly = TRUE)
[13:38:28.831]                           if (has_future) {
[13:38:28.831]                             ns <- base::getNamespace("future")
[13:38:28.831]                             version <- ns[[".package"]][["version"]]
[13:38:28.831]                             if (is.null(version)) 
[13:38:28.831]                               version <- utils::packageVersion("future")
[13:38:28.831]                           }
[13:38:28.831]                           else {
[13:38:28.831]                             version <- NULL
[13:38:28.831]                           }
[13:38:28.831]                           if (!has_future || version < "1.8.0") {
[13:38:28.831]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.831]                               "", base::R.version$version.string), 
[13:38:28.831]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.831]                                 base::R.version$platform, 8 * 
[13:38:28.831]                                   base::.Machine$sizeof.pointer), 
[13:38:28.831]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.831]                                 "release", "version")], collapse = " "), 
[13:38:28.831]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.831]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.831]                               info)
[13:38:28.831]                             info <- base::paste(info, collapse = "; ")
[13:38:28.831]                             if (!has_future) {
[13:38:28.831]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.831]                                 info)
[13:38:28.831]                             }
[13:38:28.831]                             else {
[13:38:28.831]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.831]                                 info, version)
[13:38:28.831]                             }
[13:38:28.831]                             base::stop(msg)
[13:38:28.831]                           }
[13:38:28.831]                         })
[13:38:28.831]                       }
[13:38:28.831]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.831]                       base::options(mc.cores = 1L)
[13:38:28.831]                     }
[13:38:28.831]                     base::local({
[13:38:28.831]                       for (pkg in "utils") {
[13:38:28.831]                         base::loadNamespace(pkg)
[13:38:28.831]                         base::library(pkg, character.only = TRUE)
[13:38:28.831]                       }
[13:38:28.831]                     })
[13:38:28.831]                   }
[13:38:28.831]                   ...future.strategy.old <- future::plan("list")
[13:38:28.831]                   options(future.plan = NULL)
[13:38:28.831]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.831]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.831]                 }
[13:38:28.831]                 ...future.workdir <- getwd()
[13:38:28.831]             }
[13:38:28.831]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.831]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.831]         }
[13:38:28.831]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.831]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.831]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.831]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.831]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.831]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.831]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.831]             base::names(...future.oldOptions))
[13:38:28.831]     }
[13:38:28.831]     if (TRUE) {
[13:38:28.831]     }
[13:38:28.831]     else {
[13:38:28.831]         if (NA) {
[13:38:28.831]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.831]                 open = "w")
[13:38:28.831]         }
[13:38:28.831]         else {
[13:38:28.831]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.831]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.831]         }
[13:38:28.831]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.831]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.831]             base::sink(type = "output", split = FALSE)
[13:38:28.831]             base::close(...future.stdout)
[13:38:28.831]         }, add = TRUE)
[13:38:28.831]     }
[13:38:28.831]     ...future.frame <- base::sys.nframe()
[13:38:28.831]     ...future.conditions <- base::list()
[13:38:28.831]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.831]     if (FALSE) {
[13:38:28.831]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.831]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.831]     }
[13:38:28.831]     ...future.result <- base::tryCatch({
[13:38:28.831]         base::withCallingHandlers({
[13:38:28.831]             ...future.value <- base::withVisible(base::local({
[13:38:28.831]                 withCallingHandlers({
[13:38:28.831]                   {
[13:38:28.831]                     print(1:50)
[13:38:28.831]                     str(1:50)
[13:38:28.831]                     cat(letters, sep = "-")
[13:38:28.831]                     cat(1:6, collapse = "\n")
[13:38:28.831]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.831]                     42L
[13:38:28.831]                   }
[13:38:28.831]                 }, immediateCondition = function(cond) {
[13:38:28.831]                   save_rds <- function (object, pathname, ...) 
[13:38:28.831]                   {
[13:38:28.831]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.831]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.831]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.831]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.831]                         fi_tmp[["mtime"]])
[13:38:28.831]                     }
[13:38:28.831]                     tryCatch({
[13:38:28.831]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.831]                     }, error = function(ex) {
[13:38:28.831]                       msg <- conditionMessage(ex)
[13:38:28.831]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.831]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.831]                         fi_tmp[["mtime"]], msg)
[13:38:28.831]                       ex$message <- msg
[13:38:28.831]                       stop(ex)
[13:38:28.831]                     })
[13:38:28.831]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.831]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.831]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.831]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.831]                       fi <- file.info(pathname)
[13:38:28.831]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.831]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.831]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.831]                         fi[["size"]], fi[["mtime"]])
[13:38:28.831]                       stop(msg)
[13:38:28.831]                     }
[13:38:28.831]                     invisible(pathname)
[13:38:28.831]                   }
[13:38:28.831]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.831]                     rootPath = tempdir()) 
[13:38:28.831]                   {
[13:38:28.831]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.831]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.831]                       tmpdir = path, fileext = ".rds")
[13:38:28.831]                     save_rds(obj, file)
[13:38:28.831]                   }
[13:38:28.831]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.831]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.831]                   {
[13:38:28.831]                     inherits <- base::inherits
[13:38:28.831]                     invokeRestart <- base::invokeRestart
[13:38:28.831]                     is.null <- base::is.null
[13:38:28.831]                     muffled <- FALSE
[13:38:28.831]                     if (inherits(cond, "message")) {
[13:38:28.831]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.831]                       if (muffled) 
[13:38:28.831]                         invokeRestart("muffleMessage")
[13:38:28.831]                     }
[13:38:28.831]                     else if (inherits(cond, "warning")) {
[13:38:28.831]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.831]                       if (muffled) 
[13:38:28.831]                         invokeRestart("muffleWarning")
[13:38:28.831]                     }
[13:38:28.831]                     else if (inherits(cond, "condition")) {
[13:38:28.831]                       if (!is.null(pattern)) {
[13:38:28.831]                         computeRestarts <- base::computeRestarts
[13:38:28.831]                         grepl <- base::grepl
[13:38:28.831]                         restarts <- computeRestarts(cond)
[13:38:28.831]                         for (restart in restarts) {
[13:38:28.831]                           name <- restart$name
[13:38:28.831]                           if (is.null(name)) 
[13:38:28.831]                             next
[13:38:28.831]                           if (!grepl(pattern, name)) 
[13:38:28.831]                             next
[13:38:28.831]                           invokeRestart(restart)
[13:38:28.831]                           muffled <- TRUE
[13:38:28.831]                           break
[13:38:28.831]                         }
[13:38:28.831]                       }
[13:38:28.831]                     }
[13:38:28.831]                     invisible(muffled)
[13:38:28.831]                   }
[13:38:28.831]                   muffleCondition(cond)
[13:38:28.831]                 })
[13:38:28.831]             }))
[13:38:28.831]             future::FutureResult(value = ...future.value$value, 
[13:38:28.831]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.831]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.831]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.831]                     ...future.globalenv.names))
[13:38:28.831]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.831]         }, condition = base::local({
[13:38:28.831]             c <- base::c
[13:38:28.831]             inherits <- base::inherits
[13:38:28.831]             invokeRestart <- base::invokeRestart
[13:38:28.831]             length <- base::length
[13:38:28.831]             list <- base::list
[13:38:28.831]             seq.int <- base::seq.int
[13:38:28.831]             signalCondition <- base::signalCondition
[13:38:28.831]             sys.calls <- base::sys.calls
[13:38:28.831]             `[[` <- base::`[[`
[13:38:28.831]             `+` <- base::`+`
[13:38:28.831]             `<<-` <- base::`<<-`
[13:38:28.831]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.831]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.831]                   3L)]
[13:38:28.831]             }
[13:38:28.831]             function(cond) {
[13:38:28.831]                 is_error <- inherits(cond, "error")
[13:38:28.831]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.831]                   NULL)
[13:38:28.831]                 if (is_error) {
[13:38:28.831]                   sessionInformation <- function() {
[13:38:28.831]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.831]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.831]                       search = base::search(), system = base::Sys.info())
[13:38:28.831]                   }
[13:38:28.831]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.831]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.831]                     cond$call), session = sessionInformation(), 
[13:38:28.831]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.831]                   signalCondition(cond)
[13:38:28.831]                 }
[13:38:28.831]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.831]                 "immediateCondition"))) {
[13:38:28.831]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.831]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.831]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.831]                   if (TRUE && !signal) {
[13:38:28.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.831]                     {
[13:38:28.831]                       inherits <- base::inherits
[13:38:28.831]                       invokeRestart <- base::invokeRestart
[13:38:28.831]                       is.null <- base::is.null
[13:38:28.831]                       muffled <- FALSE
[13:38:28.831]                       if (inherits(cond, "message")) {
[13:38:28.831]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.831]                         if (muffled) 
[13:38:28.831]                           invokeRestart("muffleMessage")
[13:38:28.831]                       }
[13:38:28.831]                       else if (inherits(cond, "warning")) {
[13:38:28.831]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.831]                         if (muffled) 
[13:38:28.831]                           invokeRestart("muffleWarning")
[13:38:28.831]                       }
[13:38:28.831]                       else if (inherits(cond, "condition")) {
[13:38:28.831]                         if (!is.null(pattern)) {
[13:38:28.831]                           computeRestarts <- base::computeRestarts
[13:38:28.831]                           grepl <- base::grepl
[13:38:28.831]                           restarts <- computeRestarts(cond)
[13:38:28.831]                           for (restart in restarts) {
[13:38:28.831]                             name <- restart$name
[13:38:28.831]                             if (is.null(name)) 
[13:38:28.831]                               next
[13:38:28.831]                             if (!grepl(pattern, name)) 
[13:38:28.831]                               next
[13:38:28.831]                             invokeRestart(restart)
[13:38:28.831]                             muffled <- TRUE
[13:38:28.831]                             break
[13:38:28.831]                           }
[13:38:28.831]                         }
[13:38:28.831]                       }
[13:38:28.831]                       invisible(muffled)
[13:38:28.831]                     }
[13:38:28.831]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.831]                   }
[13:38:28.831]                 }
[13:38:28.831]                 else {
[13:38:28.831]                   if (TRUE) {
[13:38:28.831]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.831]                     {
[13:38:28.831]                       inherits <- base::inherits
[13:38:28.831]                       invokeRestart <- base::invokeRestart
[13:38:28.831]                       is.null <- base::is.null
[13:38:28.831]                       muffled <- FALSE
[13:38:28.831]                       if (inherits(cond, "message")) {
[13:38:28.831]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.831]                         if (muffled) 
[13:38:28.831]                           invokeRestart("muffleMessage")
[13:38:28.831]                       }
[13:38:28.831]                       else if (inherits(cond, "warning")) {
[13:38:28.831]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.831]                         if (muffled) 
[13:38:28.831]                           invokeRestart("muffleWarning")
[13:38:28.831]                       }
[13:38:28.831]                       else if (inherits(cond, "condition")) {
[13:38:28.831]                         if (!is.null(pattern)) {
[13:38:28.831]                           computeRestarts <- base::computeRestarts
[13:38:28.831]                           grepl <- base::grepl
[13:38:28.831]                           restarts <- computeRestarts(cond)
[13:38:28.831]                           for (restart in restarts) {
[13:38:28.831]                             name <- restart$name
[13:38:28.831]                             if (is.null(name)) 
[13:38:28.831]                               next
[13:38:28.831]                             if (!grepl(pattern, name)) 
[13:38:28.831]                               next
[13:38:28.831]                             invokeRestart(restart)
[13:38:28.831]                             muffled <- TRUE
[13:38:28.831]                             break
[13:38:28.831]                           }
[13:38:28.831]                         }
[13:38:28.831]                       }
[13:38:28.831]                       invisible(muffled)
[13:38:28.831]                     }
[13:38:28.831]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.831]                   }
[13:38:28.831]                 }
[13:38:28.831]             }
[13:38:28.831]         }))
[13:38:28.831]     }, error = function(ex) {
[13:38:28.831]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.831]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.831]                 ...future.rng), started = ...future.startTime, 
[13:38:28.831]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.831]             version = "1.8"), class = "FutureResult")
[13:38:28.831]     }, finally = {
[13:38:28.831]         if (!identical(...future.workdir, getwd())) 
[13:38:28.831]             setwd(...future.workdir)
[13:38:28.831]         {
[13:38:28.831]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.831]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.831]             }
[13:38:28.831]             base::options(...future.oldOptions)
[13:38:28.831]             if (.Platform$OS.type == "windows") {
[13:38:28.831]                 old_names <- names(...future.oldEnvVars)
[13:38:28.831]                 envs <- base::Sys.getenv()
[13:38:28.831]                 names <- names(envs)
[13:38:28.831]                 common <- intersect(names, old_names)
[13:38:28.831]                 added <- setdiff(names, old_names)
[13:38:28.831]                 removed <- setdiff(old_names, names)
[13:38:28.831]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.831]                   envs[common]]
[13:38:28.831]                 NAMES <- toupper(changed)
[13:38:28.831]                 args <- list()
[13:38:28.831]                 for (kk in seq_along(NAMES)) {
[13:38:28.831]                   name <- changed[[kk]]
[13:38:28.831]                   NAME <- NAMES[[kk]]
[13:38:28.831]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.831]                     next
[13:38:28.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.831]                 }
[13:38:28.831]                 NAMES <- toupper(added)
[13:38:28.831]                 for (kk in seq_along(NAMES)) {
[13:38:28.831]                   name <- added[[kk]]
[13:38:28.831]                   NAME <- NAMES[[kk]]
[13:38:28.831]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.831]                     next
[13:38:28.831]                   args[[name]] <- ""
[13:38:28.831]                 }
[13:38:28.831]                 NAMES <- toupper(removed)
[13:38:28.831]                 for (kk in seq_along(NAMES)) {
[13:38:28.831]                   name <- removed[[kk]]
[13:38:28.831]                   NAME <- NAMES[[kk]]
[13:38:28.831]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.831]                     next
[13:38:28.831]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.831]                 }
[13:38:28.831]                 if (length(args) > 0) 
[13:38:28.831]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.831]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.831]             }
[13:38:28.831]             else {
[13:38:28.831]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.831]             }
[13:38:28.831]             {
[13:38:28.831]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.831]                   0L) {
[13:38:28.831]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.831]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.831]                   base::options(opts)
[13:38:28.831]                 }
[13:38:28.831]                 {
[13:38:28.831]                   {
[13:38:28.831]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.831]                     NULL
[13:38:28.831]                   }
[13:38:28.831]                   options(future.plan = NULL)
[13:38:28.831]                   if (is.na(NA_character_)) 
[13:38:28.831]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.831]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.831]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.831]                     .init = FALSE)
[13:38:28.831]                 }
[13:38:28.831]             }
[13:38:28.831]         }
[13:38:28.831]     })
[13:38:28.831]     if (FALSE) {
[13:38:28.831]         base::sink(type = "output", split = FALSE)
[13:38:28.831]         if (NA) {
[13:38:28.831]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.831]         }
[13:38:28.831]         else {
[13:38:28.831]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.831]         }
[13:38:28.831]         base::close(...future.stdout)
[13:38:28.831]         ...future.stdout <- NULL
[13:38:28.831]     }
[13:38:28.831]     ...future.result$conditions <- ...future.conditions
[13:38:28.831]     ...future.result$finished <- base::Sys.time()
[13:38:28.831]     ...future.result
[13:38:28.831] }
[13:38:28.833] requestCore(): workers = 2
[13:38:28.835] MulticoreFuture started
[13:38:28.836] - Launch lazy future ... done
[13:38:28.836] run() for ‘MulticoreFuture’ ... done
[13:38:28.836] result() for MulticoreFuture ...
[13:38:28.837] plan(): Setting new future strategy stack:
[13:38:28.837] List of future strategies:
[13:38:28.837] 1. sequential:
[13:38:28.837]    - args: function (..., envir = parent.frame())
[13:38:28.837]    - tweaked: FALSE
[13:38:28.837]    - call: NULL
[13:38:28.838] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:38:28.841] plan(): Setting new future strategy stack:
[13:38:28.842] List of future strategies:
[13:38:28.842] 1. multicore:
[13:38:28.842]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.842]    - tweaked: FALSE
[13:38:28.842]    - call: plan(strategy)
[13:38:28.847] plan(): nbrOfWorkers() = 2
[13:38:28.848] result() for MulticoreFuture ...
[13:38:28.848] result() for MulticoreFuture ... done
[13:38:28.848] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:28"
 $ session_uuid: chr "8f2bddb1-80ab-1149-e029-200e6dd8da46"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 91006
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:28"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:28.858] result() for MulticoreFuture ...
[13:38:28.858] result() for MulticoreFuture ... done
[13:38:28.858] result() for MulticoreFuture ...
[13:38:28.858] result() for MulticoreFuture ... done
[13:38:28.858] getGlobalsAndPackages() ...
[13:38:28.859] Searching for globals...
[13:38:28.862] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:28.863] Searching for globals ... DONE
[13:38:28.863] Resolving globals: FALSE
[13:38:28.863] 
[13:38:28.863] - packages: [1] ‘utils’
[13:38:28.864] getGlobalsAndPackages() ... DONE
[13:38:28.864] run() for ‘Future’ ...
[13:38:28.864] - state: ‘created’
[13:38:28.864] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.871] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.871] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.871]   - Field: ‘label’
[13:38:28.871]   - Field: ‘local’
[13:38:28.872]   - Field: ‘owner’
[13:38:28.872]   - Field: ‘envir’
[13:38:28.872]   - Field: ‘workers’
[13:38:28.872]   - Field: ‘packages’
[13:38:28.872]   - Field: ‘gc’
[13:38:28.872]   - Field: ‘job’
[13:38:28.872]   - Field: ‘conditions’
[13:38:28.872]   - Field: ‘expr’
[13:38:28.873]   - Field: ‘uuid’
[13:38:28.873]   - Field: ‘seed’
[13:38:28.873]   - Field: ‘version’
[13:38:28.873]   - Field: ‘result’
[13:38:28.873]   - Field: ‘asynchronous’
[13:38:28.873]   - Field: ‘calls’
[13:38:28.873]   - Field: ‘globals’
[13:38:28.873]   - Field: ‘stdout’
[13:38:28.873]   - Field: ‘earlySignal’
[13:38:28.874]   - Field: ‘lazy’
[13:38:28.874]   - Field: ‘state’
[13:38:28.874] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.874] - Launch lazy future ...
[13:38:28.874] Packages needed by the future expression (n = 1): ‘utils’
[13:38:28.874] Packages needed by future strategies (n = 0): <none>
[13:38:28.875] {
[13:38:28.875]     {
[13:38:28.875]         {
[13:38:28.875]             ...future.startTime <- base::Sys.time()
[13:38:28.875]             {
[13:38:28.875]                 {
[13:38:28.875]                   {
[13:38:28.875]                     {
[13:38:28.875]                       {
[13:38:28.875]                         base::local({
[13:38:28.875]                           has_future <- base::requireNamespace("future", 
[13:38:28.875]                             quietly = TRUE)
[13:38:28.875]                           if (has_future) {
[13:38:28.875]                             ns <- base::getNamespace("future")
[13:38:28.875]                             version <- ns[[".package"]][["version"]]
[13:38:28.875]                             if (is.null(version)) 
[13:38:28.875]                               version <- utils::packageVersion("future")
[13:38:28.875]                           }
[13:38:28.875]                           else {
[13:38:28.875]                             version <- NULL
[13:38:28.875]                           }
[13:38:28.875]                           if (!has_future || version < "1.8.0") {
[13:38:28.875]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.875]                               "", base::R.version$version.string), 
[13:38:28.875]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:28.875]                                 base::R.version$platform, 8 * 
[13:38:28.875]                                   base::.Machine$sizeof.pointer), 
[13:38:28.875]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.875]                                 "release", "version")], collapse = " "), 
[13:38:28.875]                               hostname = base::Sys.info()[["nodename"]])
[13:38:28.875]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.875]                               info)
[13:38:28.875]                             info <- base::paste(info, collapse = "; ")
[13:38:28.875]                             if (!has_future) {
[13:38:28.875]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.875]                                 info)
[13:38:28.875]                             }
[13:38:28.875]                             else {
[13:38:28.875]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.875]                                 info, version)
[13:38:28.875]                             }
[13:38:28.875]                             base::stop(msg)
[13:38:28.875]                           }
[13:38:28.875]                         })
[13:38:28.875]                       }
[13:38:28.875]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.875]                       base::options(mc.cores = 1L)
[13:38:28.875]                     }
[13:38:28.875]                     base::local({
[13:38:28.875]                       for (pkg in "utils") {
[13:38:28.875]                         base::loadNamespace(pkg)
[13:38:28.875]                         base::library(pkg, character.only = TRUE)
[13:38:28.875]                       }
[13:38:28.875]                     })
[13:38:28.875]                   }
[13:38:28.875]                   ...future.strategy.old <- future::plan("list")
[13:38:28.875]                   options(future.plan = NULL)
[13:38:28.875]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.875]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.875]                 }
[13:38:28.875]                 ...future.workdir <- getwd()
[13:38:28.875]             }
[13:38:28.875]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.875]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.875]         }
[13:38:28.875]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.875]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.875]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.875]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.875]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.875]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.875]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.875]             base::names(...future.oldOptions))
[13:38:28.875]     }
[13:38:28.875]     if (TRUE) {
[13:38:28.875]     }
[13:38:28.875]     else {
[13:38:28.875]         if (NA) {
[13:38:28.875]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.875]                 open = "w")
[13:38:28.875]         }
[13:38:28.875]         else {
[13:38:28.875]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.875]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.875]         }
[13:38:28.875]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.875]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.875]             base::sink(type = "output", split = FALSE)
[13:38:28.875]             base::close(...future.stdout)
[13:38:28.875]         }, add = TRUE)
[13:38:28.875]     }
[13:38:28.875]     ...future.frame <- base::sys.nframe()
[13:38:28.875]     ...future.conditions <- base::list()
[13:38:28.875]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.875]     if (FALSE) {
[13:38:28.875]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.875]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.875]     }
[13:38:28.875]     ...future.result <- base::tryCatch({
[13:38:28.875]         base::withCallingHandlers({
[13:38:28.875]             ...future.value <- base::withVisible(base::local({
[13:38:28.875]                 withCallingHandlers({
[13:38:28.875]                   {
[13:38:28.875]                     print(1:50)
[13:38:28.875]                     str(1:50)
[13:38:28.875]                     cat(letters, sep = "-")
[13:38:28.875]                     cat(1:6, collapse = "\n")
[13:38:28.875]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:28.875]                     42L
[13:38:28.875]                   }
[13:38:28.875]                 }, immediateCondition = function(cond) {
[13:38:28.875]                   save_rds <- function (object, pathname, ...) 
[13:38:28.875]                   {
[13:38:28.875]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.875]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.875]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.875]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.875]                         fi_tmp[["mtime"]])
[13:38:28.875]                     }
[13:38:28.875]                     tryCatch({
[13:38:28.875]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.875]                     }, error = function(ex) {
[13:38:28.875]                       msg <- conditionMessage(ex)
[13:38:28.875]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.875]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.875]                         fi_tmp[["mtime"]], msg)
[13:38:28.875]                       ex$message <- msg
[13:38:28.875]                       stop(ex)
[13:38:28.875]                     })
[13:38:28.875]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.875]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.875]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.875]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.875]                       fi <- file.info(pathname)
[13:38:28.875]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.875]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.875]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.875]                         fi[["size"]], fi[["mtime"]])
[13:38:28.875]                       stop(msg)
[13:38:28.875]                     }
[13:38:28.875]                     invisible(pathname)
[13:38:28.875]                   }
[13:38:28.875]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.875]                     rootPath = tempdir()) 
[13:38:28.875]                   {
[13:38:28.875]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.875]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.875]                       tmpdir = path, fileext = ".rds")
[13:38:28.875]                     save_rds(obj, file)
[13:38:28.875]                   }
[13:38:28.875]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.875]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.875]                   {
[13:38:28.875]                     inherits <- base::inherits
[13:38:28.875]                     invokeRestart <- base::invokeRestart
[13:38:28.875]                     is.null <- base::is.null
[13:38:28.875]                     muffled <- FALSE
[13:38:28.875]                     if (inherits(cond, "message")) {
[13:38:28.875]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.875]                       if (muffled) 
[13:38:28.875]                         invokeRestart("muffleMessage")
[13:38:28.875]                     }
[13:38:28.875]                     else if (inherits(cond, "warning")) {
[13:38:28.875]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.875]                       if (muffled) 
[13:38:28.875]                         invokeRestart("muffleWarning")
[13:38:28.875]                     }
[13:38:28.875]                     else if (inherits(cond, "condition")) {
[13:38:28.875]                       if (!is.null(pattern)) {
[13:38:28.875]                         computeRestarts <- base::computeRestarts
[13:38:28.875]                         grepl <- base::grepl
[13:38:28.875]                         restarts <- computeRestarts(cond)
[13:38:28.875]                         for (restart in restarts) {
[13:38:28.875]                           name <- restart$name
[13:38:28.875]                           if (is.null(name)) 
[13:38:28.875]                             next
[13:38:28.875]                           if (!grepl(pattern, name)) 
[13:38:28.875]                             next
[13:38:28.875]                           invokeRestart(restart)
[13:38:28.875]                           muffled <- TRUE
[13:38:28.875]                           break
[13:38:28.875]                         }
[13:38:28.875]                       }
[13:38:28.875]                     }
[13:38:28.875]                     invisible(muffled)
[13:38:28.875]                   }
[13:38:28.875]                   muffleCondition(cond)
[13:38:28.875]                 })
[13:38:28.875]             }))
[13:38:28.875]             future::FutureResult(value = ...future.value$value, 
[13:38:28.875]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.875]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.875]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.875]                     ...future.globalenv.names))
[13:38:28.875]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.875]         }, condition = base::local({
[13:38:28.875]             c <- base::c
[13:38:28.875]             inherits <- base::inherits
[13:38:28.875]             invokeRestart <- base::invokeRestart
[13:38:28.875]             length <- base::length
[13:38:28.875]             list <- base::list
[13:38:28.875]             seq.int <- base::seq.int
[13:38:28.875]             signalCondition <- base::signalCondition
[13:38:28.875]             sys.calls <- base::sys.calls
[13:38:28.875]             `[[` <- base::`[[`
[13:38:28.875]             `+` <- base::`+`
[13:38:28.875]             `<<-` <- base::`<<-`
[13:38:28.875]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.875]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.875]                   3L)]
[13:38:28.875]             }
[13:38:28.875]             function(cond) {
[13:38:28.875]                 is_error <- inherits(cond, "error")
[13:38:28.875]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.875]                   NULL)
[13:38:28.875]                 if (is_error) {
[13:38:28.875]                   sessionInformation <- function() {
[13:38:28.875]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.875]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.875]                       search = base::search(), system = base::Sys.info())
[13:38:28.875]                   }
[13:38:28.875]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.875]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.875]                     cond$call), session = sessionInformation(), 
[13:38:28.875]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.875]                   signalCondition(cond)
[13:38:28.875]                 }
[13:38:28.875]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.875]                 "immediateCondition"))) {
[13:38:28.875]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.875]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.875]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.875]                   if (TRUE && !signal) {
[13:38:28.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.875]                     {
[13:38:28.875]                       inherits <- base::inherits
[13:38:28.875]                       invokeRestart <- base::invokeRestart
[13:38:28.875]                       is.null <- base::is.null
[13:38:28.875]                       muffled <- FALSE
[13:38:28.875]                       if (inherits(cond, "message")) {
[13:38:28.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.875]                         if (muffled) 
[13:38:28.875]                           invokeRestart("muffleMessage")
[13:38:28.875]                       }
[13:38:28.875]                       else if (inherits(cond, "warning")) {
[13:38:28.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.875]                         if (muffled) 
[13:38:28.875]                           invokeRestart("muffleWarning")
[13:38:28.875]                       }
[13:38:28.875]                       else if (inherits(cond, "condition")) {
[13:38:28.875]                         if (!is.null(pattern)) {
[13:38:28.875]                           computeRestarts <- base::computeRestarts
[13:38:28.875]                           grepl <- base::grepl
[13:38:28.875]                           restarts <- computeRestarts(cond)
[13:38:28.875]                           for (restart in restarts) {
[13:38:28.875]                             name <- restart$name
[13:38:28.875]                             if (is.null(name)) 
[13:38:28.875]                               next
[13:38:28.875]                             if (!grepl(pattern, name)) 
[13:38:28.875]                               next
[13:38:28.875]                             invokeRestart(restart)
[13:38:28.875]                             muffled <- TRUE
[13:38:28.875]                             break
[13:38:28.875]                           }
[13:38:28.875]                         }
[13:38:28.875]                       }
[13:38:28.875]                       invisible(muffled)
[13:38:28.875]                     }
[13:38:28.875]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.875]                   }
[13:38:28.875]                 }
[13:38:28.875]                 else {
[13:38:28.875]                   if (TRUE) {
[13:38:28.875]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.875]                     {
[13:38:28.875]                       inherits <- base::inherits
[13:38:28.875]                       invokeRestart <- base::invokeRestart
[13:38:28.875]                       is.null <- base::is.null
[13:38:28.875]                       muffled <- FALSE
[13:38:28.875]                       if (inherits(cond, "message")) {
[13:38:28.875]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.875]                         if (muffled) 
[13:38:28.875]                           invokeRestart("muffleMessage")
[13:38:28.875]                       }
[13:38:28.875]                       else if (inherits(cond, "warning")) {
[13:38:28.875]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.875]                         if (muffled) 
[13:38:28.875]                           invokeRestart("muffleWarning")
[13:38:28.875]                       }
[13:38:28.875]                       else if (inherits(cond, "condition")) {
[13:38:28.875]                         if (!is.null(pattern)) {
[13:38:28.875]                           computeRestarts <- base::computeRestarts
[13:38:28.875]                           grepl <- base::grepl
[13:38:28.875]                           restarts <- computeRestarts(cond)
[13:38:28.875]                           for (restart in restarts) {
[13:38:28.875]                             name <- restart$name
[13:38:28.875]                             if (is.null(name)) 
[13:38:28.875]                               next
[13:38:28.875]                             if (!grepl(pattern, name)) 
[13:38:28.875]                               next
[13:38:28.875]                             invokeRestart(restart)
[13:38:28.875]                             muffled <- TRUE
[13:38:28.875]                             break
[13:38:28.875]                           }
[13:38:28.875]                         }
[13:38:28.875]                       }
[13:38:28.875]                       invisible(muffled)
[13:38:28.875]                     }
[13:38:28.875]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.875]                   }
[13:38:28.875]                 }
[13:38:28.875]             }
[13:38:28.875]         }))
[13:38:28.875]     }, error = function(ex) {
[13:38:28.875]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.875]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.875]                 ...future.rng), started = ...future.startTime, 
[13:38:28.875]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.875]             version = "1.8"), class = "FutureResult")
[13:38:28.875]     }, finally = {
[13:38:28.875]         if (!identical(...future.workdir, getwd())) 
[13:38:28.875]             setwd(...future.workdir)
[13:38:28.875]         {
[13:38:28.875]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.875]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.875]             }
[13:38:28.875]             base::options(...future.oldOptions)
[13:38:28.875]             if (.Platform$OS.type == "windows") {
[13:38:28.875]                 old_names <- names(...future.oldEnvVars)
[13:38:28.875]                 envs <- base::Sys.getenv()
[13:38:28.875]                 names <- names(envs)
[13:38:28.875]                 common <- intersect(names, old_names)
[13:38:28.875]                 added <- setdiff(names, old_names)
[13:38:28.875]                 removed <- setdiff(old_names, names)
[13:38:28.875]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.875]                   envs[common]]
[13:38:28.875]                 NAMES <- toupper(changed)
[13:38:28.875]                 args <- list()
[13:38:28.875]                 for (kk in seq_along(NAMES)) {
[13:38:28.875]                   name <- changed[[kk]]
[13:38:28.875]                   NAME <- NAMES[[kk]]
[13:38:28.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.875]                     next
[13:38:28.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.875]                 }
[13:38:28.875]                 NAMES <- toupper(added)
[13:38:28.875]                 for (kk in seq_along(NAMES)) {
[13:38:28.875]                   name <- added[[kk]]
[13:38:28.875]                   NAME <- NAMES[[kk]]
[13:38:28.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.875]                     next
[13:38:28.875]                   args[[name]] <- ""
[13:38:28.875]                 }
[13:38:28.875]                 NAMES <- toupper(removed)
[13:38:28.875]                 for (kk in seq_along(NAMES)) {
[13:38:28.875]                   name <- removed[[kk]]
[13:38:28.875]                   NAME <- NAMES[[kk]]
[13:38:28.875]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.875]                     next
[13:38:28.875]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.875]                 }
[13:38:28.875]                 if (length(args) > 0) 
[13:38:28.875]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.875]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.875]             }
[13:38:28.875]             else {
[13:38:28.875]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.875]             }
[13:38:28.875]             {
[13:38:28.875]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.875]                   0L) {
[13:38:28.875]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.875]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.875]                   base::options(opts)
[13:38:28.875]                 }
[13:38:28.875]                 {
[13:38:28.875]                   {
[13:38:28.875]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.875]                     NULL
[13:38:28.875]                   }
[13:38:28.875]                   options(future.plan = NULL)
[13:38:28.875]                   if (is.na(NA_character_)) 
[13:38:28.875]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.875]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.875]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.875]                     .init = FALSE)
[13:38:28.875]                 }
[13:38:28.875]             }
[13:38:28.875]         }
[13:38:28.875]     })
[13:38:28.875]     if (FALSE) {
[13:38:28.875]         base::sink(type = "output", split = FALSE)
[13:38:28.875]         if (NA) {
[13:38:28.875]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.875]         }
[13:38:28.875]         else {
[13:38:28.875]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.875]         }
[13:38:28.875]         base::close(...future.stdout)
[13:38:28.875]         ...future.stdout <- NULL
[13:38:28.875]     }
[13:38:28.875]     ...future.result$conditions <- ...future.conditions
[13:38:28.875]     ...future.result$finished <- base::Sys.time()
[13:38:28.875]     ...future.result
[13:38:28.875] }
[13:38:28.878] requestCore(): workers = 2
[13:38:28.880] MulticoreFuture started
[13:38:28.880] - Launch lazy future ... done
[13:38:28.880] run() for ‘MulticoreFuture’ ... done
[13:38:28.881] result() for MulticoreFuture ...
[13:38:28.881] plan(): Setting new future strategy stack:
[13:38:28.881] List of future strategies:
[13:38:28.881] 1. sequential:
[13:38:28.881]    - args: function (..., envir = parent.frame())
[13:38:28.881]    - tweaked: FALSE
[13:38:28.881]    - call: NULL
[13:38:28.882] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[13:38:28.886] plan(): Setting new future strategy stack:
[13:38:28.886] List of future strategies:
[13:38:28.886] 1. multicore:
[13:38:28.886]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.886]    - tweaked: FALSE
[13:38:28.886]    - call: plan(strategy)
[13:38:28.891] plan(): nbrOfWorkers() = 2
[13:38:28.892] result() for MulticoreFuture ...
[13:38:28.892] result() for MulticoreFuture ... done
[13:38:28.892] result() for MulticoreFuture ... done
[13:38:28.892] result() for MulticoreFuture ...
[13:38:28.893] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:28.893] getGlobalsAndPackages() ...
[13:38:28.893] Searching for globals...
[13:38:28.894] - globals found: [1] ‘print’
[13:38:28.894] Searching for globals ... DONE
[13:38:28.894] Resolving globals: FALSE
[13:38:28.895] 
[13:38:28.895] 
[13:38:28.895] getGlobalsAndPackages() ... DONE
[13:38:28.895] run() for ‘Future’ ...
[13:38:28.895] - state: ‘created’
[13:38:28.895] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:38:28.900] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:28.900] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:38:28.900]   - Field: ‘label’
[13:38:28.900]   - Field: ‘local’
[13:38:28.900]   - Field: ‘owner’
[13:38:28.900]   - Field: ‘envir’
[13:38:28.900]   - Field: ‘workers’
[13:38:28.900]   - Field: ‘packages’
[13:38:28.901]   - Field: ‘gc’
[13:38:28.901]   - Field: ‘job’
[13:38:28.901]   - Field: ‘conditions’
[13:38:28.901]   - Field: ‘expr’
[13:38:28.901]   - Field: ‘uuid’
[13:38:28.901]   - Field: ‘seed’
[13:38:28.901]   - Field: ‘version’
[13:38:28.901]   - Field: ‘result’
[13:38:28.901]   - Field: ‘asynchronous’
[13:38:28.902]   - Field: ‘calls’
[13:38:28.902]   - Field: ‘globals’
[13:38:28.902]   - Field: ‘stdout’
[13:38:28.902]   - Field: ‘earlySignal’
[13:38:28.902]   - Field: ‘lazy’
[13:38:28.902]   - Field: ‘state’
[13:38:28.902] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:38:28.902] - Launch lazy future ...
[13:38:28.903] Packages needed by the future expression (n = 0): <none>
[13:38:28.903] Packages needed by future strategies (n = 0): <none>
[13:38:28.903] {
[13:38:28.903]     {
[13:38:28.903]         {
[13:38:28.903]             ...future.startTime <- base::Sys.time()
[13:38:28.903]             {
[13:38:28.903]                 {
[13:38:28.903]                   {
[13:38:28.903]                     {
[13:38:28.903]                       base::local({
[13:38:28.903]                         has_future <- base::requireNamespace("future", 
[13:38:28.903]                           quietly = TRUE)
[13:38:28.903]                         if (has_future) {
[13:38:28.903]                           ns <- base::getNamespace("future")
[13:38:28.903]                           version <- ns[[".package"]][["version"]]
[13:38:28.903]                           if (is.null(version)) 
[13:38:28.903]                             version <- utils::packageVersion("future")
[13:38:28.903]                         }
[13:38:28.903]                         else {
[13:38:28.903]                           version <- NULL
[13:38:28.903]                         }
[13:38:28.903]                         if (!has_future || version < "1.8.0") {
[13:38:28.903]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:28.903]                             "", base::R.version$version.string), 
[13:38:28.903]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:28.903]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:28.903]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:28.903]                               "release", "version")], collapse = " "), 
[13:38:28.903]                             hostname = base::Sys.info()[["nodename"]])
[13:38:28.903]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:28.903]                             info)
[13:38:28.903]                           info <- base::paste(info, collapse = "; ")
[13:38:28.903]                           if (!has_future) {
[13:38:28.903]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:28.903]                               info)
[13:38:28.903]                           }
[13:38:28.903]                           else {
[13:38:28.903]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:28.903]                               info, version)
[13:38:28.903]                           }
[13:38:28.903]                           base::stop(msg)
[13:38:28.903]                         }
[13:38:28.903]                       })
[13:38:28.903]                     }
[13:38:28.903]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:28.903]                     base::options(mc.cores = 1L)
[13:38:28.903]                   }
[13:38:28.903]                   ...future.strategy.old <- future::plan("list")
[13:38:28.903]                   options(future.plan = NULL)
[13:38:28.903]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.903]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:28.903]                 }
[13:38:28.903]                 ...future.workdir <- getwd()
[13:38:28.903]             }
[13:38:28.903]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:28.903]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:28.903]         }
[13:38:28.903]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:28.903]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:28.903]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:28.903]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:28.903]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:28.903]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:28.903]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:28.903]             base::names(...future.oldOptions))
[13:38:28.903]     }
[13:38:28.903]     if (FALSE) {
[13:38:28.903]     }
[13:38:28.903]     else {
[13:38:28.903]         if (TRUE) {
[13:38:28.903]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:28.903]                 open = "w")
[13:38:28.903]         }
[13:38:28.903]         else {
[13:38:28.903]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:28.903]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:28.903]         }
[13:38:28.903]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:28.903]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:28.903]             base::sink(type = "output", split = FALSE)
[13:38:28.903]             base::close(...future.stdout)
[13:38:28.903]         }, add = TRUE)
[13:38:28.903]     }
[13:38:28.903]     ...future.frame <- base::sys.nframe()
[13:38:28.903]     ...future.conditions <- base::list()
[13:38:28.903]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:28.903]     if (FALSE) {
[13:38:28.903]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:28.903]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:28.903]     }
[13:38:28.903]     ...future.result <- base::tryCatch({
[13:38:28.903]         base::withCallingHandlers({
[13:38:28.903]             ...future.value <- base::withVisible(base::local({
[13:38:28.903]                 withCallingHandlers({
[13:38:28.903]                   print(42)
[13:38:28.903]                 }, immediateCondition = function(cond) {
[13:38:28.903]                   save_rds <- function (object, pathname, ...) 
[13:38:28.903]                   {
[13:38:28.903]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:38:28.903]                     if (file_test("-f", pathname_tmp)) {
[13:38:28.903]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.903]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:38:28.903]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.903]                         fi_tmp[["mtime"]])
[13:38:28.903]                     }
[13:38:28.903]                     tryCatch({
[13:38:28.903]                       saveRDS(object, file = pathname_tmp, ...)
[13:38:28.903]                     }, error = function(ex) {
[13:38:28.903]                       msg <- conditionMessage(ex)
[13:38:28.903]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.903]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:38:28.903]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.903]                         fi_tmp[["mtime"]], msg)
[13:38:28.903]                       ex$message <- msg
[13:38:28.903]                       stop(ex)
[13:38:28.903]                     })
[13:38:28.903]                     stopifnot(file_test("-f", pathname_tmp))
[13:38:28.903]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:38:28.903]                     if (!res || file_test("-f", pathname_tmp)) {
[13:38:28.903]                       fi_tmp <- file.info(pathname_tmp)
[13:38:28.903]                       fi <- file.info(pathname)
[13:38:28.903]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:38:28.903]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:38:28.903]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:38:28.903]                         fi[["size"]], fi[["mtime"]])
[13:38:28.903]                       stop(msg)
[13:38:28.903]                     }
[13:38:28.903]                     invisible(pathname)
[13:38:28.903]                   }
[13:38:28.903]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:38:28.903]                     rootPath = tempdir()) 
[13:38:28.903]                   {
[13:38:28.903]                     obj <- list(time = Sys.time(), condition = cond)
[13:38:28.903]                     file <- tempfile(pattern = class(cond)[1], 
[13:38:28.903]                       tmpdir = path, fileext = ".rds")
[13:38:28.903]                     save_rds(obj, file)
[13:38:28.903]                   }
[13:38:28.903]                   saveImmediateCondition(cond, path = "/tmp/RtmpjB70aP/.future/immediateConditions")
[13:38:28.903]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.903]                   {
[13:38:28.903]                     inherits <- base::inherits
[13:38:28.903]                     invokeRestart <- base::invokeRestart
[13:38:28.903]                     is.null <- base::is.null
[13:38:28.903]                     muffled <- FALSE
[13:38:28.903]                     if (inherits(cond, "message")) {
[13:38:28.903]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:28.903]                       if (muffled) 
[13:38:28.903]                         invokeRestart("muffleMessage")
[13:38:28.903]                     }
[13:38:28.903]                     else if (inherits(cond, "warning")) {
[13:38:28.903]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:28.903]                       if (muffled) 
[13:38:28.903]                         invokeRestart("muffleWarning")
[13:38:28.903]                     }
[13:38:28.903]                     else if (inherits(cond, "condition")) {
[13:38:28.903]                       if (!is.null(pattern)) {
[13:38:28.903]                         computeRestarts <- base::computeRestarts
[13:38:28.903]                         grepl <- base::grepl
[13:38:28.903]                         restarts <- computeRestarts(cond)
[13:38:28.903]                         for (restart in restarts) {
[13:38:28.903]                           name <- restart$name
[13:38:28.903]                           if (is.null(name)) 
[13:38:28.903]                             next
[13:38:28.903]                           if (!grepl(pattern, name)) 
[13:38:28.903]                             next
[13:38:28.903]                           invokeRestart(restart)
[13:38:28.903]                           muffled <- TRUE
[13:38:28.903]                           break
[13:38:28.903]                         }
[13:38:28.903]                       }
[13:38:28.903]                     }
[13:38:28.903]                     invisible(muffled)
[13:38:28.903]                   }
[13:38:28.903]                   muffleCondition(cond)
[13:38:28.903]                 })
[13:38:28.903]             }))
[13:38:28.903]             future::FutureResult(value = ...future.value$value, 
[13:38:28.903]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.903]                   ...future.rng), globalenv = if (FALSE) 
[13:38:28.903]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:28.903]                     ...future.globalenv.names))
[13:38:28.903]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:28.903]         }, condition = base::local({
[13:38:28.903]             c <- base::c
[13:38:28.903]             inherits <- base::inherits
[13:38:28.903]             invokeRestart <- base::invokeRestart
[13:38:28.903]             length <- base::length
[13:38:28.903]             list <- base::list
[13:38:28.903]             seq.int <- base::seq.int
[13:38:28.903]             signalCondition <- base::signalCondition
[13:38:28.903]             sys.calls <- base::sys.calls
[13:38:28.903]             `[[` <- base::`[[`
[13:38:28.903]             `+` <- base::`+`
[13:38:28.903]             `<<-` <- base::`<<-`
[13:38:28.903]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:28.903]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:28.903]                   3L)]
[13:38:28.903]             }
[13:38:28.903]             function(cond) {
[13:38:28.903]                 is_error <- inherits(cond, "error")
[13:38:28.903]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:28.903]                   NULL)
[13:38:28.903]                 if (is_error) {
[13:38:28.903]                   sessionInformation <- function() {
[13:38:28.903]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:28.903]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:28.903]                       search = base::search(), system = base::Sys.info())
[13:38:28.903]                   }
[13:38:28.903]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.903]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:28.903]                     cond$call), session = sessionInformation(), 
[13:38:28.903]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:28.903]                   signalCondition(cond)
[13:38:28.903]                 }
[13:38:28.903]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:28.903]                 "immediateCondition"))) {
[13:38:28.903]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:28.903]                   ...future.conditions[[length(...future.conditions) + 
[13:38:28.903]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:28.903]                   if (TRUE && !signal) {
[13:38:28.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.903]                     {
[13:38:28.903]                       inherits <- base::inherits
[13:38:28.903]                       invokeRestart <- base::invokeRestart
[13:38:28.903]                       is.null <- base::is.null
[13:38:28.903]                       muffled <- FALSE
[13:38:28.903]                       if (inherits(cond, "message")) {
[13:38:28.903]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.903]                         if (muffled) 
[13:38:28.903]                           invokeRestart("muffleMessage")
[13:38:28.903]                       }
[13:38:28.903]                       else if (inherits(cond, "warning")) {
[13:38:28.903]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.903]                         if (muffled) 
[13:38:28.903]                           invokeRestart("muffleWarning")
[13:38:28.903]                       }
[13:38:28.903]                       else if (inherits(cond, "condition")) {
[13:38:28.903]                         if (!is.null(pattern)) {
[13:38:28.903]                           computeRestarts <- base::computeRestarts
[13:38:28.903]                           grepl <- base::grepl
[13:38:28.903]                           restarts <- computeRestarts(cond)
[13:38:28.903]                           for (restart in restarts) {
[13:38:28.903]                             name <- restart$name
[13:38:28.903]                             if (is.null(name)) 
[13:38:28.903]                               next
[13:38:28.903]                             if (!grepl(pattern, name)) 
[13:38:28.903]                               next
[13:38:28.903]                             invokeRestart(restart)
[13:38:28.903]                             muffled <- TRUE
[13:38:28.903]                             break
[13:38:28.903]                           }
[13:38:28.903]                         }
[13:38:28.903]                       }
[13:38:28.903]                       invisible(muffled)
[13:38:28.903]                     }
[13:38:28.903]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.903]                   }
[13:38:28.903]                 }
[13:38:28.903]                 else {
[13:38:28.903]                   if (TRUE) {
[13:38:28.903]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:28.903]                     {
[13:38:28.903]                       inherits <- base::inherits
[13:38:28.903]                       invokeRestart <- base::invokeRestart
[13:38:28.903]                       is.null <- base::is.null
[13:38:28.903]                       muffled <- FALSE
[13:38:28.903]                       if (inherits(cond, "message")) {
[13:38:28.903]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:28.903]                         if (muffled) 
[13:38:28.903]                           invokeRestart("muffleMessage")
[13:38:28.903]                       }
[13:38:28.903]                       else if (inherits(cond, "warning")) {
[13:38:28.903]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:28.903]                         if (muffled) 
[13:38:28.903]                           invokeRestart("muffleWarning")
[13:38:28.903]                       }
[13:38:28.903]                       else if (inherits(cond, "condition")) {
[13:38:28.903]                         if (!is.null(pattern)) {
[13:38:28.903]                           computeRestarts <- base::computeRestarts
[13:38:28.903]                           grepl <- base::grepl
[13:38:28.903]                           restarts <- computeRestarts(cond)
[13:38:28.903]                           for (restart in restarts) {
[13:38:28.903]                             name <- restart$name
[13:38:28.903]                             if (is.null(name)) 
[13:38:28.903]                               next
[13:38:28.903]                             if (!grepl(pattern, name)) 
[13:38:28.903]                               next
[13:38:28.903]                             invokeRestart(restart)
[13:38:28.903]                             muffled <- TRUE
[13:38:28.903]                             break
[13:38:28.903]                           }
[13:38:28.903]                         }
[13:38:28.903]                       }
[13:38:28.903]                       invisible(muffled)
[13:38:28.903]                     }
[13:38:28.903]                     muffleCondition(cond, pattern = "^muffle")
[13:38:28.903]                   }
[13:38:28.903]                 }
[13:38:28.903]             }
[13:38:28.903]         }))
[13:38:28.903]     }, error = function(ex) {
[13:38:28.903]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:28.903]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:28.903]                 ...future.rng), started = ...future.startTime, 
[13:38:28.903]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:28.903]             version = "1.8"), class = "FutureResult")
[13:38:28.903]     }, finally = {
[13:38:28.903]         if (!identical(...future.workdir, getwd())) 
[13:38:28.903]             setwd(...future.workdir)
[13:38:28.903]         {
[13:38:28.903]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:28.903]                 ...future.oldOptions$nwarnings <- NULL
[13:38:28.903]             }
[13:38:28.903]             base::options(...future.oldOptions)
[13:38:28.903]             if (.Platform$OS.type == "windows") {
[13:38:28.903]                 old_names <- names(...future.oldEnvVars)
[13:38:28.903]                 envs <- base::Sys.getenv()
[13:38:28.903]                 names <- names(envs)
[13:38:28.903]                 common <- intersect(names, old_names)
[13:38:28.903]                 added <- setdiff(names, old_names)
[13:38:28.903]                 removed <- setdiff(old_names, names)
[13:38:28.903]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:28.903]                   envs[common]]
[13:38:28.903]                 NAMES <- toupper(changed)
[13:38:28.903]                 args <- list()
[13:38:28.903]                 for (kk in seq_along(NAMES)) {
[13:38:28.903]                   name <- changed[[kk]]
[13:38:28.903]                   NAME <- NAMES[[kk]]
[13:38:28.903]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.903]                     next
[13:38:28.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.903]                 }
[13:38:28.903]                 NAMES <- toupper(added)
[13:38:28.903]                 for (kk in seq_along(NAMES)) {
[13:38:28.903]                   name <- added[[kk]]
[13:38:28.903]                   NAME <- NAMES[[kk]]
[13:38:28.903]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.903]                     next
[13:38:28.903]                   args[[name]] <- ""
[13:38:28.903]                 }
[13:38:28.903]                 NAMES <- toupper(removed)
[13:38:28.903]                 for (kk in seq_along(NAMES)) {
[13:38:28.903]                   name <- removed[[kk]]
[13:38:28.903]                   NAME <- NAMES[[kk]]
[13:38:28.903]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:28.903]                     next
[13:38:28.903]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:28.903]                 }
[13:38:28.903]                 if (length(args) > 0) 
[13:38:28.903]                   base::do.call(base::Sys.setenv, args = args)
[13:38:28.903]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:28.903]             }
[13:38:28.903]             else {
[13:38:28.903]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:28.903]             }
[13:38:28.903]             {
[13:38:28.903]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:28.903]                   0L) {
[13:38:28.903]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:28.903]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:28.903]                   base::options(opts)
[13:38:28.903]                 }
[13:38:28.903]                 {
[13:38:28.903]                   {
[13:38:28.903]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:28.903]                     NULL
[13:38:28.903]                   }
[13:38:28.903]                   options(future.plan = NULL)
[13:38:28.903]                   if (is.na(NA_character_)) 
[13:38:28.903]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:28.903]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:28.903]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:28.903]                     .init = FALSE)
[13:38:28.903]                 }
[13:38:28.903]             }
[13:38:28.903]         }
[13:38:28.903]     })
[13:38:28.903]     if (TRUE) {
[13:38:28.903]         base::sink(type = "output", split = FALSE)
[13:38:28.903]         if (TRUE) {
[13:38:28.903]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:28.903]         }
[13:38:28.903]         else {
[13:38:28.903]             ...future.result["stdout"] <- base::list(NULL)
[13:38:28.903]         }
[13:38:28.903]         base::close(...future.stdout)
[13:38:28.903]         ...future.stdout <- NULL
[13:38:28.903]     }
[13:38:28.903]     ...future.result$conditions <- ...future.conditions
[13:38:28.903]     ...future.result$finished <- base::Sys.time()
[13:38:28.903]     ...future.result
[13:38:28.903] }
[13:38:28.906] requestCore(): workers = 2
[13:38:28.908] MulticoreFuture started
[13:38:28.908] - Launch lazy future ... done
[13:38:28.908] run() for ‘MulticoreFuture’ ... done
[13:38:28.909] result() for MulticoreFuture ...
[13:38:28.909] plan(): Setting new future strategy stack:
[13:38:28.909] List of future strategies:
[13:38:28.909] 1. sequential:
[13:38:28.909]    - args: function (..., envir = parent.frame())
[13:38:28.909]    - tweaked: FALSE
[13:38:28.909]    - call: NULL
[13:38:28.910] plan(): nbrOfWorkers() = 1
[13:38:28.912] plan(): Setting new future strategy stack:
[13:38:28.912] List of future strategies:
[13:38:28.912] 1. multicore:
[13:38:28.912]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:38:28.912]    - tweaked: FALSE
[13:38:28.912]    - call: plan(strategy)
[13:38:28.917] plan(): nbrOfWorkers() = 2
[13:38:28.918] result() for MulticoreFuture ...
[13:38:28.918] result() for MulticoreFuture ... done
[13:38:28.918] result() for MulticoreFuture ... done
[13:38:28.918] result() for MulticoreFuture ...
[13:38:28.919] result() for MulticoreFuture ... done
[13:38:28.919] result() for MulticoreFuture ...
[13:38:28.919] result() for MulticoreFuture ... done
[1] 42
[13:38:28.919] result() for MulticoreFuture ...
[13:38:28.919] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[13:38:28.920] plan(): Setting new future strategy stack:
[13:38:28.920] List of future strategies:
[13:38:28.920] 1. multisession:
[13:38:28.920]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.920]    - tweaked: FALSE
[13:38:28.920]    - call: plan(strategy)
[13:38:28.921] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:38:28.921] multisession:
[13:38:28.921] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:38:28.921] - tweaked: FALSE
[13:38:28.921] - call: plan(strategy)
[13:38:28.928] getGlobalsAndPackages() ...
[13:38:28.928] Not searching for globals
[13:38:28.928] - globals: [0] <none>
[13:38:28.928] getGlobalsAndPackages() ... DONE
[13:38:28.929] [local output] makeClusterPSOCK() ...
[13:38:28.979] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:38:28.980] [local output] Base port: 11157
[13:38:28.980] [local output] Getting setup options for 2 cluster nodes ...
[13:38:28.980] [local output]  - Node 1 of 2 ...
[13:38:28.980] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:28.981] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpjB70aP/worker.rank=1.parallelly.parent=90952.1634859d3a361.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpjB70aP/worker.rank=1.parallelly.parent=90952.1634859d3a361.pid")'’
[13:38:29.171] - Possible to infer worker's PID: TRUE
[13:38:29.171] [local output] Rscript port: 11157

[13:38:29.172] [local output]  - Node 2 of 2 ...
[13:38:29.172] [local output] localMachine=TRUE => revtunnel=FALSE

[13:38:29.173] [local output] Rscript port: 11157

[13:38:29.173] [local output] Getting setup options for 2 cluster nodes ... done
[13:38:29.173] [local output]  - Parallel setup requested for some PSOCK nodes
[13:38:29.173] [local output] Setting up PSOCK nodes in parallel
[13:38:29.174] List of 36
[13:38:29.174]  $ worker          : chr "localhost"
[13:38:29.174]   ..- attr(*, "localhost")= logi TRUE
[13:38:29.174]  $ master          : chr "localhost"
[13:38:29.174]  $ port            : int 11157
[13:38:29.174]  $ connectTimeout  : num 120
[13:38:29.174]  $ timeout         : num 2592000
[13:38:29.174]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:38:29.174]  $ homogeneous     : logi TRUE
[13:38:29.174]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:38:29.174]  $ rscript_envs    : NULL
[13:38:29.174]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:29.174]  $ rscript_startup : NULL
[13:38:29.174]  $ rscript_sh      : chr "sh"
[13:38:29.174]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:29.174]  $ methods         : logi TRUE
[13:38:29.174]  $ socketOptions   : chr "no-delay"
[13:38:29.174]  $ useXDR          : logi FALSE
[13:38:29.174]  $ outfile         : chr "/dev/null"
[13:38:29.174]  $ renice          : int NA
[13:38:29.174]  $ rshcmd          : NULL
[13:38:29.174]  $ user            : chr(0) 
[13:38:29.174]  $ revtunnel       : logi FALSE
[13:38:29.174]  $ rshlogfile      : NULL
[13:38:29.174]  $ rshopts         : chr(0) 
[13:38:29.174]  $ rank            : int 1
[13:38:29.174]  $ manual          : logi FALSE
[13:38:29.174]  $ dryrun          : logi FALSE
[13:38:29.174]  $ quiet           : logi FALSE
[13:38:29.174]  $ setup_strategy  : chr "parallel"
[13:38:29.174]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:29.174]  $ pidfile         : chr "/tmp/RtmpjB70aP/worker.rank=1.parallelly.parent=90952.1634859d3a361.pid"
[13:38:29.174]  $ rshcmd_label    : NULL
[13:38:29.174]  $ rsh_call        : NULL
[13:38:29.174]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:38:29.174]  $ localMachine    : logi TRUE
[13:38:29.174]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:38:29.174]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:38:29.174]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:38:29.174]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:38:29.174]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:38:29.174]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:38:29.174]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:38:29.174]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:38:29.174]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:38:29.174]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:38:29.174]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:38:29.174]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:38:29.174]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:38:29.174]  $ arguments       :List of 28
[13:38:29.174]   ..$ worker          : chr "localhost"
[13:38:29.174]   ..$ master          : NULL
[13:38:29.174]   ..$ port            : int 11157
[13:38:29.174]   ..$ connectTimeout  : num 120
[13:38:29.174]   ..$ timeout         : num 2592000
[13:38:29.174]   ..$ rscript         : NULL
[13:38:29.174]   ..$ homogeneous     : NULL
[13:38:29.174]   ..$ rscript_args    : NULL
[13:38:29.174]   ..$ rscript_envs    : NULL
[13:38:29.174]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:38:29.174]   ..$ rscript_startup : NULL
[13:38:29.174]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:38:29.174]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:38:29.174]   ..$ methods         : logi TRUE
[13:38:29.174]   ..$ socketOptions   : chr "no-delay"
[13:38:29.174]   ..$ useXDR          : logi FALSE
[13:38:29.174]   ..$ outfile         : chr "/dev/null"
[13:38:29.174]   ..$ renice          : int NA
[13:38:29.174]   ..$ rshcmd          : NULL
[13:38:29.174]   ..$ user            : NULL
[13:38:29.174]   ..$ revtunnel       : logi NA
[13:38:29.174]   ..$ rshlogfile      : NULL
[13:38:29.174]   ..$ rshopts         : NULL
[13:38:29.174]   ..$ rank            : int 1
[13:38:29.174]   ..$ manual          : logi FALSE
[13:38:29.174]   ..$ dryrun          : logi FALSE
[13:38:29.174]   ..$ quiet           : logi FALSE
[13:38:29.174]   ..$ setup_strategy  : chr "parallel"
[13:38:29.174]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:38:29.190] [local output] System call to launch all workers:
[13:38:29.190] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpjB70aP/worker.rank=1.parallelly.parent=90952.1634859d3a361.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11157 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:38:29.190] [local output] Starting PSOCK main server
[13:38:29.196] [local output] Workers launched
[13:38:29.196] [local output] Waiting for workers to connect back
[13:38:29.196]  - [local output] 0 workers out of 2 ready
[13:38:29.485]  - [local output] 0 workers out of 2 ready
[13:38:29.485]  - [local output] 1 workers out of 2 ready
[13:38:29.502]  - [local output] 1 workers out of 2 ready
[13:38:29.502]  - [local output] 2 workers out of 2 ready
[13:38:29.502] [local output] Launching of workers completed
[13:38:29.503] [local output] Collecting session information from workers
[13:38:29.503] [local output]  - Worker #1 of 2
[13:38:29.504] [local output]  - Worker #2 of 2
[13:38:29.504] [local output] makeClusterPSOCK() ... done
[13:38:29.515] Packages needed by the future expression (n = 0): <none>
[13:38:29.516] Packages needed by future strategies (n = 0): <none>
[13:38:29.516] {
[13:38:29.516]     {
[13:38:29.516]         {
[13:38:29.516]             ...future.startTime <- base::Sys.time()
[13:38:29.516]             {
[13:38:29.516]                 {
[13:38:29.516]                   {
[13:38:29.516]                     {
[13:38:29.516]                       base::local({
[13:38:29.516]                         has_future <- base::requireNamespace("future", 
[13:38:29.516]                           quietly = TRUE)
[13:38:29.516]                         if (has_future) {
[13:38:29.516]                           ns <- base::getNamespace("future")
[13:38:29.516]                           version <- ns[[".package"]][["version"]]
[13:38:29.516]                           if (is.null(version)) 
[13:38:29.516]                             version <- utils::packageVersion("future")
[13:38:29.516]                         }
[13:38:29.516]                         else {
[13:38:29.516]                           version <- NULL
[13:38:29.516]                         }
[13:38:29.516]                         if (!has_future || version < "1.8.0") {
[13:38:29.516]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.516]                             "", base::R.version$version.string), 
[13:38:29.516]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:29.516]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:29.516]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.516]                               "release", "version")], collapse = " "), 
[13:38:29.516]                             hostname = base::Sys.info()[["nodename"]])
[13:38:29.516]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.516]                             info)
[13:38:29.516]                           info <- base::paste(info, collapse = "; ")
[13:38:29.516]                           if (!has_future) {
[13:38:29.516]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.516]                               info)
[13:38:29.516]                           }
[13:38:29.516]                           else {
[13:38:29.516]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.516]                               info, version)
[13:38:29.516]                           }
[13:38:29.516]                           base::stop(msg)
[13:38:29.516]                         }
[13:38:29.516]                       })
[13:38:29.516]                     }
[13:38:29.516]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.516]                     base::options(mc.cores = 1L)
[13:38:29.516]                   }
[13:38:29.516]                   ...future.strategy.old <- future::plan("list")
[13:38:29.516]                   options(future.plan = NULL)
[13:38:29.516]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.516]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.516]                 }
[13:38:29.516]                 ...future.workdir <- getwd()
[13:38:29.516]             }
[13:38:29.516]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.516]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.516]         }
[13:38:29.516]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.516]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.516]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.516]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.516]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.516]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.516]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.516]             base::names(...future.oldOptions))
[13:38:29.516]     }
[13:38:29.516]     if (FALSE) {
[13:38:29.516]     }
[13:38:29.516]     else {
[13:38:29.516]         if (TRUE) {
[13:38:29.516]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.516]                 open = "w")
[13:38:29.516]         }
[13:38:29.516]         else {
[13:38:29.516]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.516]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.516]         }
[13:38:29.516]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.516]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.516]             base::sink(type = "output", split = FALSE)
[13:38:29.516]             base::close(...future.stdout)
[13:38:29.516]         }, add = TRUE)
[13:38:29.516]     }
[13:38:29.516]     ...future.frame <- base::sys.nframe()
[13:38:29.516]     ...future.conditions <- base::list()
[13:38:29.516]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.516]     if (FALSE) {
[13:38:29.516]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.516]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.516]     }
[13:38:29.516]     ...future.result <- base::tryCatch({
[13:38:29.516]         base::withCallingHandlers({
[13:38:29.516]             ...future.value <- base::withVisible(base::local({
[13:38:29.516]                 ...future.makeSendCondition <- base::local({
[13:38:29.516]                   sendCondition <- NULL
[13:38:29.516]                   function(frame = 1L) {
[13:38:29.516]                     if (is.function(sendCondition)) 
[13:38:29.516]                       return(sendCondition)
[13:38:29.516]                     ns <- getNamespace("parallel")
[13:38:29.516]                     if (exists("sendData", mode = "function", 
[13:38:29.516]                       envir = ns)) {
[13:38:29.516]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.516]                         envir = ns)
[13:38:29.516]                       envir <- sys.frame(frame)
[13:38:29.516]                       master <- NULL
[13:38:29.516]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.516]                         !identical(envir, emptyenv())) {
[13:38:29.516]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.516]                           inherits = FALSE)) {
[13:38:29.516]                           master <- get("master", mode = "list", 
[13:38:29.516]                             envir = envir, inherits = FALSE)
[13:38:29.516]                           if (inherits(master, c("SOCKnode", 
[13:38:29.516]                             "SOCK0node"))) {
[13:38:29.516]                             sendCondition <<- function(cond) {
[13:38:29.516]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.516]                                 success = TRUE)
[13:38:29.516]                               parallel_sendData(master, data)
[13:38:29.516]                             }
[13:38:29.516]                             return(sendCondition)
[13:38:29.516]                           }
[13:38:29.516]                         }
[13:38:29.516]                         frame <- frame + 1L
[13:38:29.516]                         envir <- sys.frame(frame)
[13:38:29.516]                       }
[13:38:29.516]                     }
[13:38:29.516]                     sendCondition <<- function(cond) NULL
[13:38:29.516]                   }
[13:38:29.516]                 })
[13:38:29.516]                 withCallingHandlers({
[13:38:29.516]                   NA
[13:38:29.516]                 }, immediateCondition = function(cond) {
[13:38:29.516]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.516]                   sendCondition(cond)
[13:38:29.516]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.516]                   {
[13:38:29.516]                     inherits <- base::inherits
[13:38:29.516]                     invokeRestart <- base::invokeRestart
[13:38:29.516]                     is.null <- base::is.null
[13:38:29.516]                     muffled <- FALSE
[13:38:29.516]                     if (inherits(cond, "message")) {
[13:38:29.516]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.516]                       if (muffled) 
[13:38:29.516]                         invokeRestart("muffleMessage")
[13:38:29.516]                     }
[13:38:29.516]                     else if (inherits(cond, "warning")) {
[13:38:29.516]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.516]                       if (muffled) 
[13:38:29.516]                         invokeRestart("muffleWarning")
[13:38:29.516]                     }
[13:38:29.516]                     else if (inherits(cond, "condition")) {
[13:38:29.516]                       if (!is.null(pattern)) {
[13:38:29.516]                         computeRestarts <- base::computeRestarts
[13:38:29.516]                         grepl <- base::grepl
[13:38:29.516]                         restarts <- computeRestarts(cond)
[13:38:29.516]                         for (restart in restarts) {
[13:38:29.516]                           name <- restart$name
[13:38:29.516]                           if (is.null(name)) 
[13:38:29.516]                             next
[13:38:29.516]                           if (!grepl(pattern, name)) 
[13:38:29.516]                             next
[13:38:29.516]                           invokeRestart(restart)
[13:38:29.516]                           muffled <- TRUE
[13:38:29.516]                           break
[13:38:29.516]                         }
[13:38:29.516]                       }
[13:38:29.516]                     }
[13:38:29.516]                     invisible(muffled)
[13:38:29.516]                   }
[13:38:29.516]                   muffleCondition(cond)
[13:38:29.516]                 })
[13:38:29.516]             }))
[13:38:29.516]             future::FutureResult(value = ...future.value$value, 
[13:38:29.516]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.516]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.516]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.516]                     ...future.globalenv.names))
[13:38:29.516]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.516]         }, condition = base::local({
[13:38:29.516]             c <- base::c
[13:38:29.516]             inherits <- base::inherits
[13:38:29.516]             invokeRestart <- base::invokeRestart
[13:38:29.516]             length <- base::length
[13:38:29.516]             list <- base::list
[13:38:29.516]             seq.int <- base::seq.int
[13:38:29.516]             signalCondition <- base::signalCondition
[13:38:29.516]             sys.calls <- base::sys.calls
[13:38:29.516]             `[[` <- base::`[[`
[13:38:29.516]             `+` <- base::`+`
[13:38:29.516]             `<<-` <- base::`<<-`
[13:38:29.516]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.516]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.516]                   3L)]
[13:38:29.516]             }
[13:38:29.516]             function(cond) {
[13:38:29.516]                 is_error <- inherits(cond, "error")
[13:38:29.516]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.516]                   NULL)
[13:38:29.516]                 if (is_error) {
[13:38:29.516]                   sessionInformation <- function() {
[13:38:29.516]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.516]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.516]                       search = base::search(), system = base::Sys.info())
[13:38:29.516]                   }
[13:38:29.516]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.516]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.516]                     cond$call), session = sessionInformation(), 
[13:38:29.516]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.516]                   signalCondition(cond)
[13:38:29.516]                 }
[13:38:29.516]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.516]                 "immediateCondition"))) {
[13:38:29.516]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.516]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.516]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.516]                   if (TRUE && !signal) {
[13:38:29.516]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.516]                     {
[13:38:29.516]                       inherits <- base::inherits
[13:38:29.516]                       invokeRestart <- base::invokeRestart
[13:38:29.516]                       is.null <- base::is.null
[13:38:29.516]                       muffled <- FALSE
[13:38:29.516]                       if (inherits(cond, "message")) {
[13:38:29.516]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.516]                         if (muffled) 
[13:38:29.516]                           invokeRestart("muffleMessage")
[13:38:29.516]                       }
[13:38:29.516]                       else if (inherits(cond, "warning")) {
[13:38:29.516]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.516]                         if (muffled) 
[13:38:29.516]                           invokeRestart("muffleWarning")
[13:38:29.516]                       }
[13:38:29.516]                       else if (inherits(cond, "condition")) {
[13:38:29.516]                         if (!is.null(pattern)) {
[13:38:29.516]                           computeRestarts <- base::computeRestarts
[13:38:29.516]                           grepl <- base::grepl
[13:38:29.516]                           restarts <- computeRestarts(cond)
[13:38:29.516]                           for (restart in restarts) {
[13:38:29.516]                             name <- restart$name
[13:38:29.516]                             if (is.null(name)) 
[13:38:29.516]                               next
[13:38:29.516]                             if (!grepl(pattern, name)) 
[13:38:29.516]                               next
[13:38:29.516]                             invokeRestart(restart)
[13:38:29.516]                             muffled <- TRUE
[13:38:29.516]                             break
[13:38:29.516]                           }
[13:38:29.516]                         }
[13:38:29.516]                       }
[13:38:29.516]                       invisible(muffled)
[13:38:29.516]                     }
[13:38:29.516]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.516]                   }
[13:38:29.516]                 }
[13:38:29.516]                 else {
[13:38:29.516]                   if (TRUE) {
[13:38:29.516]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.516]                     {
[13:38:29.516]                       inherits <- base::inherits
[13:38:29.516]                       invokeRestart <- base::invokeRestart
[13:38:29.516]                       is.null <- base::is.null
[13:38:29.516]                       muffled <- FALSE
[13:38:29.516]                       if (inherits(cond, "message")) {
[13:38:29.516]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.516]                         if (muffled) 
[13:38:29.516]                           invokeRestart("muffleMessage")
[13:38:29.516]                       }
[13:38:29.516]                       else if (inherits(cond, "warning")) {
[13:38:29.516]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.516]                         if (muffled) 
[13:38:29.516]                           invokeRestart("muffleWarning")
[13:38:29.516]                       }
[13:38:29.516]                       else if (inherits(cond, "condition")) {
[13:38:29.516]                         if (!is.null(pattern)) {
[13:38:29.516]                           computeRestarts <- base::computeRestarts
[13:38:29.516]                           grepl <- base::grepl
[13:38:29.516]                           restarts <- computeRestarts(cond)
[13:38:29.516]                           for (restart in restarts) {
[13:38:29.516]                             name <- restart$name
[13:38:29.516]                             if (is.null(name)) 
[13:38:29.516]                               next
[13:38:29.516]                             if (!grepl(pattern, name)) 
[13:38:29.516]                               next
[13:38:29.516]                             invokeRestart(restart)
[13:38:29.516]                             muffled <- TRUE
[13:38:29.516]                             break
[13:38:29.516]                           }
[13:38:29.516]                         }
[13:38:29.516]                       }
[13:38:29.516]                       invisible(muffled)
[13:38:29.516]                     }
[13:38:29.516]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.516]                   }
[13:38:29.516]                 }
[13:38:29.516]             }
[13:38:29.516]         }))
[13:38:29.516]     }, error = function(ex) {
[13:38:29.516]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.516]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.516]                 ...future.rng), started = ...future.startTime, 
[13:38:29.516]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.516]             version = "1.8"), class = "FutureResult")
[13:38:29.516]     }, finally = {
[13:38:29.516]         if (!identical(...future.workdir, getwd())) 
[13:38:29.516]             setwd(...future.workdir)
[13:38:29.516]         {
[13:38:29.516]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.516]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.516]             }
[13:38:29.516]             base::options(...future.oldOptions)
[13:38:29.516]             if (.Platform$OS.type == "windows") {
[13:38:29.516]                 old_names <- names(...future.oldEnvVars)
[13:38:29.516]                 envs <- base::Sys.getenv()
[13:38:29.516]                 names <- names(envs)
[13:38:29.516]                 common <- intersect(names, old_names)
[13:38:29.516]                 added <- setdiff(names, old_names)
[13:38:29.516]                 removed <- setdiff(old_names, names)
[13:38:29.516]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.516]                   envs[common]]
[13:38:29.516]                 NAMES <- toupper(changed)
[13:38:29.516]                 args <- list()
[13:38:29.516]                 for (kk in seq_along(NAMES)) {
[13:38:29.516]                   name <- changed[[kk]]
[13:38:29.516]                   NAME <- NAMES[[kk]]
[13:38:29.516]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.516]                     next
[13:38:29.516]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.516]                 }
[13:38:29.516]                 NAMES <- toupper(added)
[13:38:29.516]                 for (kk in seq_along(NAMES)) {
[13:38:29.516]                   name <- added[[kk]]
[13:38:29.516]                   NAME <- NAMES[[kk]]
[13:38:29.516]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.516]                     next
[13:38:29.516]                   args[[name]] <- ""
[13:38:29.516]                 }
[13:38:29.516]                 NAMES <- toupper(removed)
[13:38:29.516]                 for (kk in seq_along(NAMES)) {
[13:38:29.516]                   name <- removed[[kk]]
[13:38:29.516]                   NAME <- NAMES[[kk]]
[13:38:29.516]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.516]                     next
[13:38:29.516]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.516]                 }
[13:38:29.516]                 if (length(args) > 0) 
[13:38:29.516]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.516]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.516]             }
[13:38:29.516]             else {
[13:38:29.516]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.516]             }
[13:38:29.516]             {
[13:38:29.516]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.516]                   0L) {
[13:38:29.516]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.516]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.516]                   base::options(opts)
[13:38:29.516]                 }
[13:38:29.516]                 {
[13:38:29.516]                   {
[13:38:29.516]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.516]                     NULL
[13:38:29.516]                   }
[13:38:29.516]                   options(future.plan = NULL)
[13:38:29.516]                   if (is.na(NA_character_)) 
[13:38:29.516]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.516]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.516]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.516]                     .init = FALSE)
[13:38:29.516]                 }
[13:38:29.516]             }
[13:38:29.516]         }
[13:38:29.516]     })
[13:38:29.516]     if (TRUE) {
[13:38:29.516]         base::sink(type = "output", split = FALSE)
[13:38:29.516]         if (TRUE) {
[13:38:29.516]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.516]         }
[13:38:29.516]         else {
[13:38:29.516]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.516]         }
[13:38:29.516]         base::close(...future.stdout)
[13:38:29.516]         ...future.stdout <- NULL
[13:38:29.516]     }
[13:38:29.516]     ...future.result$conditions <- ...future.conditions
[13:38:29.516]     ...future.result$finished <- base::Sys.time()
[13:38:29.516]     ...future.result
[13:38:29.516] }
[13:38:29.571] MultisessionFuture started
[13:38:29.571] result() for ClusterFuture ...
[13:38:29.572] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.572] - Validating connection of MultisessionFuture
[13:38:29.608] - received message: FutureResult
[13:38:29.609] - Received FutureResult
[13:38:29.609] - Erased future from FutureRegistry
[13:38:29.609] result() for ClusterFuture ...
[13:38:29.609] - result already collected: FutureResult
[13:38:29.609] result() for ClusterFuture ... done
[13:38:29.609] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.609] result() for ClusterFuture ... done
[13:38:29.610] result() for ClusterFuture ...
[13:38:29.610] - result already collected: FutureResult
[13:38:29.610] result() for ClusterFuture ... done
[13:38:29.610] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:38:29.615] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[13:38:29.615] getGlobalsAndPackages() ...
[13:38:29.615] Searching for globals...
[13:38:29.620] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:29.620] Searching for globals ... DONE
[13:38:29.620] Resolving globals: FALSE
[13:38:29.621] 
[13:38:29.621] - packages: [1] ‘utils’
[13:38:29.621] getGlobalsAndPackages() ... DONE
[13:38:29.621] run() for ‘Future’ ...
[13:38:29.621] - state: ‘created’
[13:38:29.621] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.636] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.636] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.636]   - Field: ‘node’
[13:38:29.636]   - Field: ‘label’
[13:38:29.637]   - Field: ‘local’
[13:38:29.637]   - Field: ‘owner’
[13:38:29.637]   - Field: ‘envir’
[13:38:29.637]   - Field: ‘workers’
[13:38:29.637]   - Field: ‘packages’
[13:38:29.637]   - Field: ‘gc’
[13:38:29.637]   - Field: ‘conditions’
[13:38:29.637]   - Field: ‘persistent’
[13:38:29.637]   - Field: ‘expr’
[13:38:29.637]   - Field: ‘uuid’
[13:38:29.638]   - Field: ‘seed’
[13:38:29.638]   - Field: ‘version’
[13:38:29.638]   - Field: ‘result’
[13:38:29.638]   - Field: ‘asynchronous’
[13:38:29.638]   - Field: ‘calls’
[13:38:29.638]   - Field: ‘globals’
[13:38:29.638]   - Field: ‘stdout’
[13:38:29.638]   - Field: ‘earlySignal’
[13:38:29.639]   - Field: ‘lazy’
[13:38:29.639]   - Field: ‘state’
[13:38:29.639] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.639] - Launch lazy future ...
[13:38:29.639] Packages needed by the future expression (n = 1): ‘utils’
[13:38:29.639] Packages needed by future strategies (n = 0): <none>
[13:38:29.640] {
[13:38:29.640]     {
[13:38:29.640]         {
[13:38:29.640]             ...future.startTime <- base::Sys.time()
[13:38:29.640]             {
[13:38:29.640]                 {
[13:38:29.640]                   {
[13:38:29.640]                     {
[13:38:29.640]                       {
[13:38:29.640]                         base::local({
[13:38:29.640]                           has_future <- base::requireNamespace("future", 
[13:38:29.640]                             quietly = TRUE)
[13:38:29.640]                           if (has_future) {
[13:38:29.640]                             ns <- base::getNamespace("future")
[13:38:29.640]                             version <- ns[[".package"]][["version"]]
[13:38:29.640]                             if (is.null(version)) 
[13:38:29.640]                               version <- utils::packageVersion("future")
[13:38:29.640]                           }
[13:38:29.640]                           else {
[13:38:29.640]                             version <- NULL
[13:38:29.640]                           }
[13:38:29.640]                           if (!has_future || version < "1.8.0") {
[13:38:29.640]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.640]                               "", base::R.version$version.string), 
[13:38:29.640]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:29.640]                                 base::R.version$platform, 8 * 
[13:38:29.640]                                   base::.Machine$sizeof.pointer), 
[13:38:29.640]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.640]                                 "release", "version")], collapse = " "), 
[13:38:29.640]                               hostname = base::Sys.info()[["nodename"]])
[13:38:29.640]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.640]                               info)
[13:38:29.640]                             info <- base::paste(info, collapse = "; ")
[13:38:29.640]                             if (!has_future) {
[13:38:29.640]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.640]                                 info)
[13:38:29.640]                             }
[13:38:29.640]                             else {
[13:38:29.640]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.640]                                 info, version)
[13:38:29.640]                             }
[13:38:29.640]                             base::stop(msg)
[13:38:29.640]                           }
[13:38:29.640]                         })
[13:38:29.640]                       }
[13:38:29.640]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.640]                       base::options(mc.cores = 1L)
[13:38:29.640]                     }
[13:38:29.640]                     base::local({
[13:38:29.640]                       for (pkg in "utils") {
[13:38:29.640]                         base::loadNamespace(pkg)
[13:38:29.640]                         base::library(pkg, character.only = TRUE)
[13:38:29.640]                       }
[13:38:29.640]                     })
[13:38:29.640]                   }
[13:38:29.640]                   ...future.strategy.old <- future::plan("list")
[13:38:29.640]                   options(future.plan = NULL)
[13:38:29.640]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.640]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.640]                 }
[13:38:29.640]                 ...future.workdir <- getwd()
[13:38:29.640]             }
[13:38:29.640]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.640]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.640]         }
[13:38:29.640]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.640]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.640]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.640]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.640]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.640]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.640]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.640]             base::names(...future.oldOptions))
[13:38:29.640]     }
[13:38:29.640]     if (FALSE) {
[13:38:29.640]     }
[13:38:29.640]     else {
[13:38:29.640]         if (TRUE) {
[13:38:29.640]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.640]                 open = "w")
[13:38:29.640]         }
[13:38:29.640]         else {
[13:38:29.640]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.640]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.640]         }
[13:38:29.640]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.640]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.640]             base::sink(type = "output", split = FALSE)
[13:38:29.640]             base::close(...future.stdout)
[13:38:29.640]         }, add = TRUE)
[13:38:29.640]     }
[13:38:29.640]     ...future.frame <- base::sys.nframe()
[13:38:29.640]     ...future.conditions <- base::list()
[13:38:29.640]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.640]     if (FALSE) {
[13:38:29.640]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.640]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.640]     }
[13:38:29.640]     ...future.result <- base::tryCatch({
[13:38:29.640]         base::withCallingHandlers({
[13:38:29.640]             ...future.value <- base::withVisible(base::local({
[13:38:29.640]                 ...future.makeSendCondition <- base::local({
[13:38:29.640]                   sendCondition <- NULL
[13:38:29.640]                   function(frame = 1L) {
[13:38:29.640]                     if (is.function(sendCondition)) 
[13:38:29.640]                       return(sendCondition)
[13:38:29.640]                     ns <- getNamespace("parallel")
[13:38:29.640]                     if (exists("sendData", mode = "function", 
[13:38:29.640]                       envir = ns)) {
[13:38:29.640]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.640]                         envir = ns)
[13:38:29.640]                       envir <- sys.frame(frame)
[13:38:29.640]                       master <- NULL
[13:38:29.640]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.640]                         !identical(envir, emptyenv())) {
[13:38:29.640]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.640]                           inherits = FALSE)) {
[13:38:29.640]                           master <- get("master", mode = "list", 
[13:38:29.640]                             envir = envir, inherits = FALSE)
[13:38:29.640]                           if (inherits(master, c("SOCKnode", 
[13:38:29.640]                             "SOCK0node"))) {
[13:38:29.640]                             sendCondition <<- function(cond) {
[13:38:29.640]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.640]                                 success = TRUE)
[13:38:29.640]                               parallel_sendData(master, data)
[13:38:29.640]                             }
[13:38:29.640]                             return(sendCondition)
[13:38:29.640]                           }
[13:38:29.640]                         }
[13:38:29.640]                         frame <- frame + 1L
[13:38:29.640]                         envir <- sys.frame(frame)
[13:38:29.640]                       }
[13:38:29.640]                     }
[13:38:29.640]                     sendCondition <<- function(cond) NULL
[13:38:29.640]                   }
[13:38:29.640]                 })
[13:38:29.640]                 withCallingHandlers({
[13:38:29.640]                   {
[13:38:29.640]                     print(1:50)
[13:38:29.640]                     str(1:50)
[13:38:29.640]                     cat(letters, sep = "-")
[13:38:29.640]                     cat(1:6, collapse = "\n")
[13:38:29.640]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:29.640]                     42L
[13:38:29.640]                   }
[13:38:29.640]                 }, immediateCondition = function(cond) {
[13:38:29.640]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.640]                   sendCondition(cond)
[13:38:29.640]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.640]                   {
[13:38:29.640]                     inherits <- base::inherits
[13:38:29.640]                     invokeRestart <- base::invokeRestart
[13:38:29.640]                     is.null <- base::is.null
[13:38:29.640]                     muffled <- FALSE
[13:38:29.640]                     if (inherits(cond, "message")) {
[13:38:29.640]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.640]                       if (muffled) 
[13:38:29.640]                         invokeRestart("muffleMessage")
[13:38:29.640]                     }
[13:38:29.640]                     else if (inherits(cond, "warning")) {
[13:38:29.640]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.640]                       if (muffled) 
[13:38:29.640]                         invokeRestart("muffleWarning")
[13:38:29.640]                     }
[13:38:29.640]                     else if (inherits(cond, "condition")) {
[13:38:29.640]                       if (!is.null(pattern)) {
[13:38:29.640]                         computeRestarts <- base::computeRestarts
[13:38:29.640]                         grepl <- base::grepl
[13:38:29.640]                         restarts <- computeRestarts(cond)
[13:38:29.640]                         for (restart in restarts) {
[13:38:29.640]                           name <- restart$name
[13:38:29.640]                           if (is.null(name)) 
[13:38:29.640]                             next
[13:38:29.640]                           if (!grepl(pattern, name)) 
[13:38:29.640]                             next
[13:38:29.640]                           invokeRestart(restart)
[13:38:29.640]                           muffled <- TRUE
[13:38:29.640]                           break
[13:38:29.640]                         }
[13:38:29.640]                       }
[13:38:29.640]                     }
[13:38:29.640]                     invisible(muffled)
[13:38:29.640]                   }
[13:38:29.640]                   muffleCondition(cond)
[13:38:29.640]                 })
[13:38:29.640]             }))
[13:38:29.640]             future::FutureResult(value = ...future.value$value, 
[13:38:29.640]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.640]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.640]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.640]                     ...future.globalenv.names))
[13:38:29.640]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.640]         }, condition = base::local({
[13:38:29.640]             c <- base::c
[13:38:29.640]             inherits <- base::inherits
[13:38:29.640]             invokeRestart <- base::invokeRestart
[13:38:29.640]             length <- base::length
[13:38:29.640]             list <- base::list
[13:38:29.640]             seq.int <- base::seq.int
[13:38:29.640]             signalCondition <- base::signalCondition
[13:38:29.640]             sys.calls <- base::sys.calls
[13:38:29.640]             `[[` <- base::`[[`
[13:38:29.640]             `+` <- base::`+`
[13:38:29.640]             `<<-` <- base::`<<-`
[13:38:29.640]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.640]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.640]                   3L)]
[13:38:29.640]             }
[13:38:29.640]             function(cond) {
[13:38:29.640]                 is_error <- inherits(cond, "error")
[13:38:29.640]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.640]                   NULL)
[13:38:29.640]                 if (is_error) {
[13:38:29.640]                   sessionInformation <- function() {
[13:38:29.640]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.640]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.640]                       search = base::search(), system = base::Sys.info())
[13:38:29.640]                   }
[13:38:29.640]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.640]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.640]                     cond$call), session = sessionInformation(), 
[13:38:29.640]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.640]                   signalCondition(cond)
[13:38:29.640]                 }
[13:38:29.640]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.640]                 "immediateCondition"))) {
[13:38:29.640]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.640]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.640]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.640]                   if (TRUE && !signal) {
[13:38:29.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.640]                     {
[13:38:29.640]                       inherits <- base::inherits
[13:38:29.640]                       invokeRestart <- base::invokeRestart
[13:38:29.640]                       is.null <- base::is.null
[13:38:29.640]                       muffled <- FALSE
[13:38:29.640]                       if (inherits(cond, "message")) {
[13:38:29.640]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.640]                         if (muffled) 
[13:38:29.640]                           invokeRestart("muffleMessage")
[13:38:29.640]                       }
[13:38:29.640]                       else if (inherits(cond, "warning")) {
[13:38:29.640]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.640]                         if (muffled) 
[13:38:29.640]                           invokeRestart("muffleWarning")
[13:38:29.640]                       }
[13:38:29.640]                       else if (inherits(cond, "condition")) {
[13:38:29.640]                         if (!is.null(pattern)) {
[13:38:29.640]                           computeRestarts <- base::computeRestarts
[13:38:29.640]                           grepl <- base::grepl
[13:38:29.640]                           restarts <- computeRestarts(cond)
[13:38:29.640]                           for (restart in restarts) {
[13:38:29.640]                             name <- restart$name
[13:38:29.640]                             if (is.null(name)) 
[13:38:29.640]                               next
[13:38:29.640]                             if (!grepl(pattern, name)) 
[13:38:29.640]                               next
[13:38:29.640]                             invokeRestart(restart)
[13:38:29.640]                             muffled <- TRUE
[13:38:29.640]                             break
[13:38:29.640]                           }
[13:38:29.640]                         }
[13:38:29.640]                       }
[13:38:29.640]                       invisible(muffled)
[13:38:29.640]                     }
[13:38:29.640]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.640]                   }
[13:38:29.640]                 }
[13:38:29.640]                 else {
[13:38:29.640]                   if (TRUE) {
[13:38:29.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.640]                     {
[13:38:29.640]                       inherits <- base::inherits
[13:38:29.640]                       invokeRestart <- base::invokeRestart
[13:38:29.640]                       is.null <- base::is.null
[13:38:29.640]                       muffled <- FALSE
[13:38:29.640]                       if (inherits(cond, "message")) {
[13:38:29.640]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.640]                         if (muffled) 
[13:38:29.640]                           invokeRestart("muffleMessage")
[13:38:29.640]                       }
[13:38:29.640]                       else if (inherits(cond, "warning")) {
[13:38:29.640]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.640]                         if (muffled) 
[13:38:29.640]                           invokeRestart("muffleWarning")
[13:38:29.640]                       }
[13:38:29.640]                       else if (inherits(cond, "condition")) {
[13:38:29.640]                         if (!is.null(pattern)) {
[13:38:29.640]                           computeRestarts <- base::computeRestarts
[13:38:29.640]                           grepl <- base::grepl
[13:38:29.640]                           restarts <- computeRestarts(cond)
[13:38:29.640]                           for (restart in restarts) {
[13:38:29.640]                             name <- restart$name
[13:38:29.640]                             if (is.null(name)) 
[13:38:29.640]                               next
[13:38:29.640]                             if (!grepl(pattern, name)) 
[13:38:29.640]                               next
[13:38:29.640]                             invokeRestart(restart)
[13:38:29.640]                             muffled <- TRUE
[13:38:29.640]                             break
[13:38:29.640]                           }
[13:38:29.640]                         }
[13:38:29.640]                       }
[13:38:29.640]                       invisible(muffled)
[13:38:29.640]                     }
[13:38:29.640]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.640]                   }
[13:38:29.640]                 }
[13:38:29.640]             }
[13:38:29.640]         }))
[13:38:29.640]     }, error = function(ex) {
[13:38:29.640]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.640]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.640]                 ...future.rng), started = ...future.startTime, 
[13:38:29.640]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.640]             version = "1.8"), class = "FutureResult")
[13:38:29.640]     }, finally = {
[13:38:29.640]         if (!identical(...future.workdir, getwd())) 
[13:38:29.640]             setwd(...future.workdir)
[13:38:29.640]         {
[13:38:29.640]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.640]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.640]             }
[13:38:29.640]             base::options(...future.oldOptions)
[13:38:29.640]             if (.Platform$OS.type == "windows") {
[13:38:29.640]                 old_names <- names(...future.oldEnvVars)
[13:38:29.640]                 envs <- base::Sys.getenv()
[13:38:29.640]                 names <- names(envs)
[13:38:29.640]                 common <- intersect(names, old_names)
[13:38:29.640]                 added <- setdiff(names, old_names)
[13:38:29.640]                 removed <- setdiff(old_names, names)
[13:38:29.640]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.640]                   envs[common]]
[13:38:29.640]                 NAMES <- toupper(changed)
[13:38:29.640]                 args <- list()
[13:38:29.640]                 for (kk in seq_along(NAMES)) {
[13:38:29.640]                   name <- changed[[kk]]
[13:38:29.640]                   NAME <- NAMES[[kk]]
[13:38:29.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.640]                     next
[13:38:29.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.640]                 }
[13:38:29.640]                 NAMES <- toupper(added)
[13:38:29.640]                 for (kk in seq_along(NAMES)) {
[13:38:29.640]                   name <- added[[kk]]
[13:38:29.640]                   NAME <- NAMES[[kk]]
[13:38:29.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.640]                     next
[13:38:29.640]                   args[[name]] <- ""
[13:38:29.640]                 }
[13:38:29.640]                 NAMES <- toupper(removed)
[13:38:29.640]                 for (kk in seq_along(NAMES)) {
[13:38:29.640]                   name <- removed[[kk]]
[13:38:29.640]                   NAME <- NAMES[[kk]]
[13:38:29.640]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.640]                     next
[13:38:29.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.640]                 }
[13:38:29.640]                 if (length(args) > 0) 
[13:38:29.640]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.640]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.640]             }
[13:38:29.640]             else {
[13:38:29.640]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.640]             }
[13:38:29.640]             {
[13:38:29.640]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.640]                   0L) {
[13:38:29.640]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.640]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.640]                   base::options(opts)
[13:38:29.640]                 }
[13:38:29.640]                 {
[13:38:29.640]                   {
[13:38:29.640]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.640]                     NULL
[13:38:29.640]                   }
[13:38:29.640]                   options(future.plan = NULL)
[13:38:29.640]                   if (is.na(NA_character_)) 
[13:38:29.640]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.640]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.640]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.640]                     .init = FALSE)
[13:38:29.640]                 }
[13:38:29.640]             }
[13:38:29.640]         }
[13:38:29.640]     })
[13:38:29.640]     if (TRUE) {
[13:38:29.640]         base::sink(type = "output", split = FALSE)
[13:38:29.640]         if (TRUE) {
[13:38:29.640]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.640]         }
[13:38:29.640]         else {
[13:38:29.640]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.640]         }
[13:38:29.640]         base::close(...future.stdout)
[13:38:29.640]         ...future.stdout <- NULL
[13:38:29.640]     }
[13:38:29.640]     ...future.result$conditions <- ...future.conditions
[13:38:29.640]     ...future.result$finished <- base::Sys.time()
[13:38:29.640]     ...future.result
[13:38:29.640] }
[13:38:29.643] MultisessionFuture started
[13:38:29.644] - Launch lazy future ... done
[13:38:29.644] run() for ‘MultisessionFuture’ ... done
[13:38:29.644] result() for ClusterFuture ...
[13:38:29.644] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.644] - Validating connection of MultisessionFuture
[13:38:29.696] - received message: FutureResult
[13:38:29.696] - Received FutureResult
[13:38:29.696] - Erased future from FutureRegistry
[13:38:29.696] result() for ClusterFuture ...
[13:38:29.696] - result already collected: FutureResult
[13:38:29.697] result() for ClusterFuture ... done
[13:38:29.697] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.697] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:29"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:29"
 $ session_uuid: chr "b6b0fdf8-e44b-8abe-f924-81309e53fd71"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 91055
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:29"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:29.706] result() for ClusterFuture ...
[13:38:29.707] - result already collected: FutureResult
[13:38:29.707] result() for ClusterFuture ... done
[13:38:29.707] result() for ClusterFuture ...
[13:38:29.707] - result already collected: FutureResult
[13:38:29.707] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.009346724 secs (started 2025-01-07 13:38:29.68682)
version: 1.8
[13:38:29.708] getGlobalsAndPackages() ...
[13:38:29.708] Searching for globals...
[13:38:29.712] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:29.712] Searching for globals ... DONE
[13:38:29.712] Resolving globals: FALSE
[13:38:29.713] 
[13:38:29.713] - packages: [1] ‘utils’
[13:38:29.713] getGlobalsAndPackages() ... DONE
[13:38:29.713] run() for ‘Future’ ...
[13:38:29.713] - state: ‘created’
[13:38:29.714] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.729] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.729] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.729]   - Field: ‘node’
[13:38:29.729]   - Field: ‘label’
[13:38:29.729]   - Field: ‘local’
[13:38:29.729]   - Field: ‘owner’
[13:38:29.729]   - Field: ‘envir’
[13:38:29.729]   - Field: ‘workers’
[13:38:29.729]   - Field: ‘packages’
[13:38:29.730]   - Field: ‘gc’
[13:38:29.730]   - Field: ‘conditions’
[13:38:29.730]   - Field: ‘persistent’
[13:38:29.730]   - Field: ‘expr’
[13:38:29.730]   - Field: ‘uuid’
[13:38:29.730]   - Field: ‘seed’
[13:38:29.730]   - Field: ‘version’
[13:38:29.730]   - Field: ‘result’
[13:38:29.731]   - Field: ‘asynchronous’
[13:38:29.731]   - Field: ‘calls’
[13:38:29.731]   - Field: ‘globals’
[13:38:29.731]   - Field: ‘stdout’
[13:38:29.731]   - Field: ‘earlySignal’
[13:38:29.731]   - Field: ‘lazy’
[13:38:29.731]   - Field: ‘state’
[13:38:29.731] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.732] - Launch lazy future ...
[13:38:29.732] Packages needed by the future expression (n = 1): ‘utils’
[13:38:29.732] Packages needed by future strategies (n = 0): <none>
[13:38:29.733] {
[13:38:29.733]     {
[13:38:29.733]         {
[13:38:29.733]             ...future.startTime <- base::Sys.time()
[13:38:29.733]             {
[13:38:29.733]                 {
[13:38:29.733]                   {
[13:38:29.733]                     {
[13:38:29.733]                       {
[13:38:29.733]                         base::local({
[13:38:29.733]                           has_future <- base::requireNamespace("future", 
[13:38:29.733]                             quietly = TRUE)
[13:38:29.733]                           if (has_future) {
[13:38:29.733]                             ns <- base::getNamespace("future")
[13:38:29.733]                             version <- ns[[".package"]][["version"]]
[13:38:29.733]                             if (is.null(version)) 
[13:38:29.733]                               version <- utils::packageVersion("future")
[13:38:29.733]                           }
[13:38:29.733]                           else {
[13:38:29.733]                             version <- NULL
[13:38:29.733]                           }
[13:38:29.733]                           if (!has_future || version < "1.8.0") {
[13:38:29.733]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.733]                               "", base::R.version$version.string), 
[13:38:29.733]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:29.733]                                 base::R.version$platform, 8 * 
[13:38:29.733]                                   base::.Machine$sizeof.pointer), 
[13:38:29.733]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.733]                                 "release", "version")], collapse = " "), 
[13:38:29.733]                               hostname = base::Sys.info()[["nodename"]])
[13:38:29.733]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.733]                               info)
[13:38:29.733]                             info <- base::paste(info, collapse = "; ")
[13:38:29.733]                             if (!has_future) {
[13:38:29.733]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.733]                                 info)
[13:38:29.733]                             }
[13:38:29.733]                             else {
[13:38:29.733]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.733]                                 info, version)
[13:38:29.733]                             }
[13:38:29.733]                             base::stop(msg)
[13:38:29.733]                           }
[13:38:29.733]                         })
[13:38:29.733]                       }
[13:38:29.733]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.733]                       base::options(mc.cores = 1L)
[13:38:29.733]                     }
[13:38:29.733]                     base::local({
[13:38:29.733]                       for (pkg in "utils") {
[13:38:29.733]                         base::loadNamespace(pkg)
[13:38:29.733]                         base::library(pkg, character.only = TRUE)
[13:38:29.733]                       }
[13:38:29.733]                     })
[13:38:29.733]                   }
[13:38:29.733]                   ...future.strategy.old <- future::plan("list")
[13:38:29.733]                   options(future.plan = NULL)
[13:38:29.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.733]                 }
[13:38:29.733]                 ...future.workdir <- getwd()
[13:38:29.733]             }
[13:38:29.733]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.733]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.733]         }
[13:38:29.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.733]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.733]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.733]             base::names(...future.oldOptions))
[13:38:29.733]     }
[13:38:29.733]     if (FALSE) {
[13:38:29.733]     }
[13:38:29.733]     else {
[13:38:29.733]         if (TRUE) {
[13:38:29.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.733]                 open = "w")
[13:38:29.733]         }
[13:38:29.733]         else {
[13:38:29.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.733]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.733]         }
[13:38:29.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.733]             base::sink(type = "output", split = FALSE)
[13:38:29.733]             base::close(...future.stdout)
[13:38:29.733]         }, add = TRUE)
[13:38:29.733]     }
[13:38:29.733]     ...future.frame <- base::sys.nframe()
[13:38:29.733]     ...future.conditions <- base::list()
[13:38:29.733]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.733]     if (FALSE) {
[13:38:29.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.733]     }
[13:38:29.733]     ...future.result <- base::tryCatch({
[13:38:29.733]         base::withCallingHandlers({
[13:38:29.733]             ...future.value <- base::withVisible(base::local({
[13:38:29.733]                 ...future.makeSendCondition <- base::local({
[13:38:29.733]                   sendCondition <- NULL
[13:38:29.733]                   function(frame = 1L) {
[13:38:29.733]                     if (is.function(sendCondition)) 
[13:38:29.733]                       return(sendCondition)
[13:38:29.733]                     ns <- getNamespace("parallel")
[13:38:29.733]                     if (exists("sendData", mode = "function", 
[13:38:29.733]                       envir = ns)) {
[13:38:29.733]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.733]                         envir = ns)
[13:38:29.733]                       envir <- sys.frame(frame)
[13:38:29.733]                       master <- NULL
[13:38:29.733]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.733]                         !identical(envir, emptyenv())) {
[13:38:29.733]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.733]                           inherits = FALSE)) {
[13:38:29.733]                           master <- get("master", mode = "list", 
[13:38:29.733]                             envir = envir, inherits = FALSE)
[13:38:29.733]                           if (inherits(master, c("SOCKnode", 
[13:38:29.733]                             "SOCK0node"))) {
[13:38:29.733]                             sendCondition <<- function(cond) {
[13:38:29.733]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.733]                                 success = TRUE)
[13:38:29.733]                               parallel_sendData(master, data)
[13:38:29.733]                             }
[13:38:29.733]                             return(sendCondition)
[13:38:29.733]                           }
[13:38:29.733]                         }
[13:38:29.733]                         frame <- frame + 1L
[13:38:29.733]                         envir <- sys.frame(frame)
[13:38:29.733]                       }
[13:38:29.733]                     }
[13:38:29.733]                     sendCondition <<- function(cond) NULL
[13:38:29.733]                   }
[13:38:29.733]                 })
[13:38:29.733]                 withCallingHandlers({
[13:38:29.733]                   {
[13:38:29.733]                     print(1:50)
[13:38:29.733]                     str(1:50)
[13:38:29.733]                     cat(letters, sep = "-")
[13:38:29.733]                     cat(1:6, collapse = "\n")
[13:38:29.733]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:29.733]                     42L
[13:38:29.733]                   }
[13:38:29.733]                 }, immediateCondition = function(cond) {
[13:38:29.733]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.733]                   sendCondition(cond)
[13:38:29.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.733]                   {
[13:38:29.733]                     inherits <- base::inherits
[13:38:29.733]                     invokeRestart <- base::invokeRestart
[13:38:29.733]                     is.null <- base::is.null
[13:38:29.733]                     muffled <- FALSE
[13:38:29.733]                     if (inherits(cond, "message")) {
[13:38:29.733]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.733]                       if (muffled) 
[13:38:29.733]                         invokeRestart("muffleMessage")
[13:38:29.733]                     }
[13:38:29.733]                     else if (inherits(cond, "warning")) {
[13:38:29.733]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.733]                       if (muffled) 
[13:38:29.733]                         invokeRestart("muffleWarning")
[13:38:29.733]                     }
[13:38:29.733]                     else if (inherits(cond, "condition")) {
[13:38:29.733]                       if (!is.null(pattern)) {
[13:38:29.733]                         computeRestarts <- base::computeRestarts
[13:38:29.733]                         grepl <- base::grepl
[13:38:29.733]                         restarts <- computeRestarts(cond)
[13:38:29.733]                         for (restart in restarts) {
[13:38:29.733]                           name <- restart$name
[13:38:29.733]                           if (is.null(name)) 
[13:38:29.733]                             next
[13:38:29.733]                           if (!grepl(pattern, name)) 
[13:38:29.733]                             next
[13:38:29.733]                           invokeRestart(restart)
[13:38:29.733]                           muffled <- TRUE
[13:38:29.733]                           break
[13:38:29.733]                         }
[13:38:29.733]                       }
[13:38:29.733]                     }
[13:38:29.733]                     invisible(muffled)
[13:38:29.733]                   }
[13:38:29.733]                   muffleCondition(cond)
[13:38:29.733]                 })
[13:38:29.733]             }))
[13:38:29.733]             future::FutureResult(value = ...future.value$value, 
[13:38:29.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.733]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.733]                     ...future.globalenv.names))
[13:38:29.733]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.733]         }, condition = base::local({
[13:38:29.733]             c <- base::c
[13:38:29.733]             inherits <- base::inherits
[13:38:29.733]             invokeRestart <- base::invokeRestart
[13:38:29.733]             length <- base::length
[13:38:29.733]             list <- base::list
[13:38:29.733]             seq.int <- base::seq.int
[13:38:29.733]             signalCondition <- base::signalCondition
[13:38:29.733]             sys.calls <- base::sys.calls
[13:38:29.733]             `[[` <- base::`[[`
[13:38:29.733]             `+` <- base::`+`
[13:38:29.733]             `<<-` <- base::`<<-`
[13:38:29.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.733]                   3L)]
[13:38:29.733]             }
[13:38:29.733]             function(cond) {
[13:38:29.733]                 is_error <- inherits(cond, "error")
[13:38:29.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.733]                   NULL)
[13:38:29.733]                 if (is_error) {
[13:38:29.733]                   sessionInformation <- function() {
[13:38:29.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.733]                       search = base::search(), system = base::Sys.info())
[13:38:29.733]                   }
[13:38:29.733]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.733]                     cond$call), session = sessionInformation(), 
[13:38:29.733]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.733]                   signalCondition(cond)
[13:38:29.733]                 }
[13:38:29.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.733]                 "immediateCondition"))) {
[13:38:29.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.733]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.733]                   if (TRUE && !signal) {
[13:38:29.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.733]                     {
[13:38:29.733]                       inherits <- base::inherits
[13:38:29.733]                       invokeRestart <- base::invokeRestart
[13:38:29.733]                       is.null <- base::is.null
[13:38:29.733]                       muffled <- FALSE
[13:38:29.733]                       if (inherits(cond, "message")) {
[13:38:29.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.733]                         if (muffled) 
[13:38:29.733]                           invokeRestart("muffleMessage")
[13:38:29.733]                       }
[13:38:29.733]                       else if (inherits(cond, "warning")) {
[13:38:29.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.733]                         if (muffled) 
[13:38:29.733]                           invokeRestart("muffleWarning")
[13:38:29.733]                       }
[13:38:29.733]                       else if (inherits(cond, "condition")) {
[13:38:29.733]                         if (!is.null(pattern)) {
[13:38:29.733]                           computeRestarts <- base::computeRestarts
[13:38:29.733]                           grepl <- base::grepl
[13:38:29.733]                           restarts <- computeRestarts(cond)
[13:38:29.733]                           for (restart in restarts) {
[13:38:29.733]                             name <- restart$name
[13:38:29.733]                             if (is.null(name)) 
[13:38:29.733]                               next
[13:38:29.733]                             if (!grepl(pattern, name)) 
[13:38:29.733]                               next
[13:38:29.733]                             invokeRestart(restart)
[13:38:29.733]                             muffled <- TRUE
[13:38:29.733]                             break
[13:38:29.733]                           }
[13:38:29.733]                         }
[13:38:29.733]                       }
[13:38:29.733]                       invisible(muffled)
[13:38:29.733]                     }
[13:38:29.733]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.733]                   }
[13:38:29.733]                 }
[13:38:29.733]                 else {
[13:38:29.733]                   if (TRUE) {
[13:38:29.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.733]                     {
[13:38:29.733]                       inherits <- base::inherits
[13:38:29.733]                       invokeRestart <- base::invokeRestart
[13:38:29.733]                       is.null <- base::is.null
[13:38:29.733]                       muffled <- FALSE
[13:38:29.733]                       if (inherits(cond, "message")) {
[13:38:29.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.733]                         if (muffled) 
[13:38:29.733]                           invokeRestart("muffleMessage")
[13:38:29.733]                       }
[13:38:29.733]                       else if (inherits(cond, "warning")) {
[13:38:29.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.733]                         if (muffled) 
[13:38:29.733]                           invokeRestart("muffleWarning")
[13:38:29.733]                       }
[13:38:29.733]                       else if (inherits(cond, "condition")) {
[13:38:29.733]                         if (!is.null(pattern)) {
[13:38:29.733]                           computeRestarts <- base::computeRestarts
[13:38:29.733]                           grepl <- base::grepl
[13:38:29.733]                           restarts <- computeRestarts(cond)
[13:38:29.733]                           for (restart in restarts) {
[13:38:29.733]                             name <- restart$name
[13:38:29.733]                             if (is.null(name)) 
[13:38:29.733]                               next
[13:38:29.733]                             if (!grepl(pattern, name)) 
[13:38:29.733]                               next
[13:38:29.733]                             invokeRestart(restart)
[13:38:29.733]                             muffled <- TRUE
[13:38:29.733]                             break
[13:38:29.733]                           }
[13:38:29.733]                         }
[13:38:29.733]                       }
[13:38:29.733]                       invisible(muffled)
[13:38:29.733]                     }
[13:38:29.733]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.733]                   }
[13:38:29.733]                 }
[13:38:29.733]             }
[13:38:29.733]         }))
[13:38:29.733]     }, error = function(ex) {
[13:38:29.733]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.733]                 ...future.rng), started = ...future.startTime, 
[13:38:29.733]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.733]             version = "1.8"), class = "FutureResult")
[13:38:29.733]     }, finally = {
[13:38:29.733]         if (!identical(...future.workdir, getwd())) 
[13:38:29.733]             setwd(...future.workdir)
[13:38:29.733]         {
[13:38:29.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.733]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.733]             }
[13:38:29.733]             base::options(...future.oldOptions)
[13:38:29.733]             if (.Platform$OS.type == "windows") {
[13:38:29.733]                 old_names <- names(...future.oldEnvVars)
[13:38:29.733]                 envs <- base::Sys.getenv()
[13:38:29.733]                 names <- names(envs)
[13:38:29.733]                 common <- intersect(names, old_names)
[13:38:29.733]                 added <- setdiff(names, old_names)
[13:38:29.733]                 removed <- setdiff(old_names, names)
[13:38:29.733]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.733]                   envs[common]]
[13:38:29.733]                 NAMES <- toupper(changed)
[13:38:29.733]                 args <- list()
[13:38:29.733]                 for (kk in seq_along(NAMES)) {
[13:38:29.733]                   name <- changed[[kk]]
[13:38:29.733]                   NAME <- NAMES[[kk]]
[13:38:29.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.733]                     next
[13:38:29.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.733]                 }
[13:38:29.733]                 NAMES <- toupper(added)
[13:38:29.733]                 for (kk in seq_along(NAMES)) {
[13:38:29.733]                   name <- added[[kk]]
[13:38:29.733]                   NAME <- NAMES[[kk]]
[13:38:29.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.733]                     next
[13:38:29.733]                   args[[name]] <- ""
[13:38:29.733]                 }
[13:38:29.733]                 NAMES <- toupper(removed)
[13:38:29.733]                 for (kk in seq_along(NAMES)) {
[13:38:29.733]                   name <- removed[[kk]]
[13:38:29.733]                   NAME <- NAMES[[kk]]
[13:38:29.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.733]                     next
[13:38:29.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.733]                 }
[13:38:29.733]                 if (length(args) > 0) 
[13:38:29.733]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.733]             }
[13:38:29.733]             else {
[13:38:29.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.733]             }
[13:38:29.733]             {
[13:38:29.733]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.733]                   0L) {
[13:38:29.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.733]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.733]                   base::options(opts)
[13:38:29.733]                 }
[13:38:29.733]                 {
[13:38:29.733]                   {
[13:38:29.733]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.733]                     NULL
[13:38:29.733]                   }
[13:38:29.733]                   options(future.plan = NULL)
[13:38:29.733]                   if (is.na(NA_character_)) 
[13:38:29.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.733]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.733]                     .init = FALSE)
[13:38:29.733]                 }
[13:38:29.733]             }
[13:38:29.733]         }
[13:38:29.733]     })
[13:38:29.733]     if (TRUE) {
[13:38:29.733]         base::sink(type = "output", split = FALSE)
[13:38:29.733]         if (TRUE) {
[13:38:29.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.733]         }
[13:38:29.733]         else {
[13:38:29.733]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.733]         }
[13:38:29.733]         base::close(...future.stdout)
[13:38:29.733]         ...future.stdout <- NULL
[13:38:29.733]     }
[13:38:29.733]     ...future.result$conditions <- ...future.conditions
[13:38:29.733]     ...future.result$finished <- base::Sys.time()
[13:38:29.733]     ...future.result
[13:38:29.733] }
[13:38:29.736] MultisessionFuture started
[13:38:29.736] - Launch lazy future ... done
[13:38:29.736] run() for ‘MultisessionFuture’ ... done
[13:38:29.737] result() for ClusterFuture ...
[13:38:29.737] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.737] - Validating connection of MultisessionFuture
[13:38:29.781] - received message: FutureResult
[13:38:29.781] - Received FutureResult
[13:38:29.783] - Erased future from FutureRegistry
[13:38:29.784] result() for ClusterFuture ...
[13:38:29.784] - result already collected: FutureResult
[13:38:29.784] result() for ClusterFuture ... done
[13:38:29.784] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.784] result() for ClusterFuture ... done
[13:38:29.784] result() for ClusterFuture ...
[13:38:29.784] - result already collected: FutureResult
[13:38:29.784] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[13:38:29.785] getGlobalsAndPackages() ...
[13:38:29.785] Searching for globals...
[13:38:29.785] - globals found: [1] ‘print’
[13:38:29.785] Searching for globals ... DONE
[13:38:29.785] Resolving globals: FALSE
[13:38:29.786] 
[13:38:29.786] 
[13:38:29.786] getGlobalsAndPackages() ... DONE
[13:38:29.786] run() for ‘Future’ ...
[13:38:29.786] - state: ‘created’
[13:38:29.786] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.800] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.800] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.800]   - Field: ‘node’
[13:38:29.800]   - Field: ‘label’
[13:38:29.801]   - Field: ‘local’
[13:38:29.801]   - Field: ‘owner’
[13:38:29.801]   - Field: ‘envir’
[13:38:29.801]   - Field: ‘workers’
[13:38:29.801]   - Field: ‘packages’
[13:38:29.801]   - Field: ‘gc’
[13:38:29.801]   - Field: ‘conditions’
[13:38:29.801]   - Field: ‘persistent’
[13:38:29.801]   - Field: ‘expr’
[13:38:29.801]   - Field: ‘uuid’
[13:38:29.801]   - Field: ‘seed’
[13:38:29.802]   - Field: ‘version’
[13:38:29.802]   - Field: ‘result’
[13:38:29.802]   - Field: ‘asynchronous’
[13:38:29.802]   - Field: ‘calls’
[13:38:29.802]   - Field: ‘globals’
[13:38:29.802]   - Field: ‘stdout’
[13:38:29.802]   - Field: ‘earlySignal’
[13:38:29.802]   - Field: ‘lazy’
[13:38:29.802]   - Field: ‘state’
[13:38:29.802] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.802] - Launch lazy future ...
[13:38:29.803] Packages needed by the future expression (n = 0): <none>
[13:38:29.803] Packages needed by future strategies (n = 0): <none>
[13:38:29.803] {
[13:38:29.803]     {
[13:38:29.803]         {
[13:38:29.803]             ...future.startTime <- base::Sys.time()
[13:38:29.803]             {
[13:38:29.803]                 {
[13:38:29.803]                   {
[13:38:29.803]                     {
[13:38:29.803]                       base::local({
[13:38:29.803]                         has_future <- base::requireNamespace("future", 
[13:38:29.803]                           quietly = TRUE)
[13:38:29.803]                         if (has_future) {
[13:38:29.803]                           ns <- base::getNamespace("future")
[13:38:29.803]                           version <- ns[[".package"]][["version"]]
[13:38:29.803]                           if (is.null(version)) 
[13:38:29.803]                             version <- utils::packageVersion("future")
[13:38:29.803]                         }
[13:38:29.803]                         else {
[13:38:29.803]                           version <- NULL
[13:38:29.803]                         }
[13:38:29.803]                         if (!has_future || version < "1.8.0") {
[13:38:29.803]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.803]                             "", base::R.version$version.string), 
[13:38:29.803]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:29.803]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:29.803]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.803]                               "release", "version")], collapse = " "), 
[13:38:29.803]                             hostname = base::Sys.info()[["nodename"]])
[13:38:29.803]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.803]                             info)
[13:38:29.803]                           info <- base::paste(info, collapse = "; ")
[13:38:29.803]                           if (!has_future) {
[13:38:29.803]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.803]                               info)
[13:38:29.803]                           }
[13:38:29.803]                           else {
[13:38:29.803]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.803]                               info, version)
[13:38:29.803]                           }
[13:38:29.803]                           base::stop(msg)
[13:38:29.803]                         }
[13:38:29.803]                       })
[13:38:29.803]                     }
[13:38:29.803]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.803]                     base::options(mc.cores = 1L)
[13:38:29.803]                   }
[13:38:29.803]                   ...future.strategy.old <- future::plan("list")
[13:38:29.803]                   options(future.plan = NULL)
[13:38:29.803]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.803]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.803]                 }
[13:38:29.803]                 ...future.workdir <- getwd()
[13:38:29.803]             }
[13:38:29.803]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.803]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.803]         }
[13:38:29.803]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.803]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.803]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.803]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.803]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.803]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.803]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.803]             base::names(...future.oldOptions))
[13:38:29.803]     }
[13:38:29.803]     if (FALSE) {
[13:38:29.803]     }
[13:38:29.803]     else {
[13:38:29.803]         if (TRUE) {
[13:38:29.803]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.803]                 open = "w")
[13:38:29.803]         }
[13:38:29.803]         else {
[13:38:29.803]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.803]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.803]         }
[13:38:29.803]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.803]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.803]             base::sink(type = "output", split = FALSE)
[13:38:29.803]             base::close(...future.stdout)
[13:38:29.803]         }, add = TRUE)
[13:38:29.803]     }
[13:38:29.803]     ...future.frame <- base::sys.nframe()
[13:38:29.803]     ...future.conditions <- base::list()
[13:38:29.803]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.803]     if (FALSE) {
[13:38:29.803]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.803]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.803]     }
[13:38:29.803]     ...future.result <- base::tryCatch({
[13:38:29.803]         base::withCallingHandlers({
[13:38:29.803]             ...future.value <- base::withVisible(base::local({
[13:38:29.803]                 ...future.makeSendCondition <- base::local({
[13:38:29.803]                   sendCondition <- NULL
[13:38:29.803]                   function(frame = 1L) {
[13:38:29.803]                     if (is.function(sendCondition)) 
[13:38:29.803]                       return(sendCondition)
[13:38:29.803]                     ns <- getNamespace("parallel")
[13:38:29.803]                     if (exists("sendData", mode = "function", 
[13:38:29.803]                       envir = ns)) {
[13:38:29.803]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.803]                         envir = ns)
[13:38:29.803]                       envir <- sys.frame(frame)
[13:38:29.803]                       master <- NULL
[13:38:29.803]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.803]                         !identical(envir, emptyenv())) {
[13:38:29.803]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.803]                           inherits = FALSE)) {
[13:38:29.803]                           master <- get("master", mode = "list", 
[13:38:29.803]                             envir = envir, inherits = FALSE)
[13:38:29.803]                           if (inherits(master, c("SOCKnode", 
[13:38:29.803]                             "SOCK0node"))) {
[13:38:29.803]                             sendCondition <<- function(cond) {
[13:38:29.803]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.803]                                 success = TRUE)
[13:38:29.803]                               parallel_sendData(master, data)
[13:38:29.803]                             }
[13:38:29.803]                             return(sendCondition)
[13:38:29.803]                           }
[13:38:29.803]                         }
[13:38:29.803]                         frame <- frame + 1L
[13:38:29.803]                         envir <- sys.frame(frame)
[13:38:29.803]                       }
[13:38:29.803]                     }
[13:38:29.803]                     sendCondition <<- function(cond) NULL
[13:38:29.803]                   }
[13:38:29.803]                 })
[13:38:29.803]                 withCallingHandlers({
[13:38:29.803]                   print(42)
[13:38:29.803]                 }, immediateCondition = function(cond) {
[13:38:29.803]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.803]                   sendCondition(cond)
[13:38:29.803]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.803]                   {
[13:38:29.803]                     inherits <- base::inherits
[13:38:29.803]                     invokeRestart <- base::invokeRestart
[13:38:29.803]                     is.null <- base::is.null
[13:38:29.803]                     muffled <- FALSE
[13:38:29.803]                     if (inherits(cond, "message")) {
[13:38:29.803]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.803]                       if (muffled) 
[13:38:29.803]                         invokeRestart("muffleMessage")
[13:38:29.803]                     }
[13:38:29.803]                     else if (inherits(cond, "warning")) {
[13:38:29.803]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.803]                       if (muffled) 
[13:38:29.803]                         invokeRestart("muffleWarning")
[13:38:29.803]                     }
[13:38:29.803]                     else if (inherits(cond, "condition")) {
[13:38:29.803]                       if (!is.null(pattern)) {
[13:38:29.803]                         computeRestarts <- base::computeRestarts
[13:38:29.803]                         grepl <- base::grepl
[13:38:29.803]                         restarts <- computeRestarts(cond)
[13:38:29.803]                         for (restart in restarts) {
[13:38:29.803]                           name <- restart$name
[13:38:29.803]                           if (is.null(name)) 
[13:38:29.803]                             next
[13:38:29.803]                           if (!grepl(pattern, name)) 
[13:38:29.803]                             next
[13:38:29.803]                           invokeRestart(restart)
[13:38:29.803]                           muffled <- TRUE
[13:38:29.803]                           break
[13:38:29.803]                         }
[13:38:29.803]                       }
[13:38:29.803]                     }
[13:38:29.803]                     invisible(muffled)
[13:38:29.803]                   }
[13:38:29.803]                   muffleCondition(cond)
[13:38:29.803]                 })
[13:38:29.803]             }))
[13:38:29.803]             future::FutureResult(value = ...future.value$value, 
[13:38:29.803]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.803]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.803]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.803]                     ...future.globalenv.names))
[13:38:29.803]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.803]         }, condition = base::local({
[13:38:29.803]             c <- base::c
[13:38:29.803]             inherits <- base::inherits
[13:38:29.803]             invokeRestart <- base::invokeRestart
[13:38:29.803]             length <- base::length
[13:38:29.803]             list <- base::list
[13:38:29.803]             seq.int <- base::seq.int
[13:38:29.803]             signalCondition <- base::signalCondition
[13:38:29.803]             sys.calls <- base::sys.calls
[13:38:29.803]             `[[` <- base::`[[`
[13:38:29.803]             `+` <- base::`+`
[13:38:29.803]             `<<-` <- base::`<<-`
[13:38:29.803]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.803]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.803]                   3L)]
[13:38:29.803]             }
[13:38:29.803]             function(cond) {
[13:38:29.803]                 is_error <- inherits(cond, "error")
[13:38:29.803]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.803]                   NULL)
[13:38:29.803]                 if (is_error) {
[13:38:29.803]                   sessionInformation <- function() {
[13:38:29.803]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.803]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.803]                       search = base::search(), system = base::Sys.info())
[13:38:29.803]                   }
[13:38:29.803]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.803]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.803]                     cond$call), session = sessionInformation(), 
[13:38:29.803]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.803]                   signalCondition(cond)
[13:38:29.803]                 }
[13:38:29.803]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.803]                 "immediateCondition"))) {
[13:38:29.803]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.803]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.803]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.803]                   if (TRUE && !signal) {
[13:38:29.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.803]                     {
[13:38:29.803]                       inherits <- base::inherits
[13:38:29.803]                       invokeRestart <- base::invokeRestart
[13:38:29.803]                       is.null <- base::is.null
[13:38:29.803]                       muffled <- FALSE
[13:38:29.803]                       if (inherits(cond, "message")) {
[13:38:29.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.803]                         if (muffled) 
[13:38:29.803]                           invokeRestart("muffleMessage")
[13:38:29.803]                       }
[13:38:29.803]                       else if (inherits(cond, "warning")) {
[13:38:29.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.803]                         if (muffled) 
[13:38:29.803]                           invokeRestart("muffleWarning")
[13:38:29.803]                       }
[13:38:29.803]                       else if (inherits(cond, "condition")) {
[13:38:29.803]                         if (!is.null(pattern)) {
[13:38:29.803]                           computeRestarts <- base::computeRestarts
[13:38:29.803]                           grepl <- base::grepl
[13:38:29.803]                           restarts <- computeRestarts(cond)
[13:38:29.803]                           for (restart in restarts) {
[13:38:29.803]                             name <- restart$name
[13:38:29.803]                             if (is.null(name)) 
[13:38:29.803]                               next
[13:38:29.803]                             if (!grepl(pattern, name)) 
[13:38:29.803]                               next
[13:38:29.803]                             invokeRestart(restart)
[13:38:29.803]                             muffled <- TRUE
[13:38:29.803]                             break
[13:38:29.803]                           }
[13:38:29.803]                         }
[13:38:29.803]                       }
[13:38:29.803]                       invisible(muffled)
[13:38:29.803]                     }
[13:38:29.803]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.803]                   }
[13:38:29.803]                 }
[13:38:29.803]                 else {
[13:38:29.803]                   if (TRUE) {
[13:38:29.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.803]                     {
[13:38:29.803]                       inherits <- base::inherits
[13:38:29.803]                       invokeRestart <- base::invokeRestart
[13:38:29.803]                       is.null <- base::is.null
[13:38:29.803]                       muffled <- FALSE
[13:38:29.803]                       if (inherits(cond, "message")) {
[13:38:29.803]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.803]                         if (muffled) 
[13:38:29.803]                           invokeRestart("muffleMessage")
[13:38:29.803]                       }
[13:38:29.803]                       else if (inherits(cond, "warning")) {
[13:38:29.803]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.803]                         if (muffled) 
[13:38:29.803]                           invokeRestart("muffleWarning")
[13:38:29.803]                       }
[13:38:29.803]                       else if (inherits(cond, "condition")) {
[13:38:29.803]                         if (!is.null(pattern)) {
[13:38:29.803]                           computeRestarts <- base::computeRestarts
[13:38:29.803]                           grepl <- base::grepl
[13:38:29.803]                           restarts <- computeRestarts(cond)
[13:38:29.803]                           for (restart in restarts) {
[13:38:29.803]                             name <- restart$name
[13:38:29.803]                             if (is.null(name)) 
[13:38:29.803]                               next
[13:38:29.803]                             if (!grepl(pattern, name)) 
[13:38:29.803]                               next
[13:38:29.803]                             invokeRestart(restart)
[13:38:29.803]                             muffled <- TRUE
[13:38:29.803]                             break
[13:38:29.803]                           }
[13:38:29.803]                         }
[13:38:29.803]                       }
[13:38:29.803]                       invisible(muffled)
[13:38:29.803]                     }
[13:38:29.803]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.803]                   }
[13:38:29.803]                 }
[13:38:29.803]             }
[13:38:29.803]         }))
[13:38:29.803]     }, error = function(ex) {
[13:38:29.803]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.803]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.803]                 ...future.rng), started = ...future.startTime, 
[13:38:29.803]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.803]             version = "1.8"), class = "FutureResult")
[13:38:29.803]     }, finally = {
[13:38:29.803]         if (!identical(...future.workdir, getwd())) 
[13:38:29.803]             setwd(...future.workdir)
[13:38:29.803]         {
[13:38:29.803]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.803]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.803]             }
[13:38:29.803]             base::options(...future.oldOptions)
[13:38:29.803]             if (.Platform$OS.type == "windows") {
[13:38:29.803]                 old_names <- names(...future.oldEnvVars)
[13:38:29.803]                 envs <- base::Sys.getenv()
[13:38:29.803]                 names <- names(envs)
[13:38:29.803]                 common <- intersect(names, old_names)
[13:38:29.803]                 added <- setdiff(names, old_names)
[13:38:29.803]                 removed <- setdiff(old_names, names)
[13:38:29.803]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.803]                   envs[common]]
[13:38:29.803]                 NAMES <- toupper(changed)
[13:38:29.803]                 args <- list()
[13:38:29.803]                 for (kk in seq_along(NAMES)) {
[13:38:29.803]                   name <- changed[[kk]]
[13:38:29.803]                   NAME <- NAMES[[kk]]
[13:38:29.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.803]                     next
[13:38:29.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.803]                 }
[13:38:29.803]                 NAMES <- toupper(added)
[13:38:29.803]                 for (kk in seq_along(NAMES)) {
[13:38:29.803]                   name <- added[[kk]]
[13:38:29.803]                   NAME <- NAMES[[kk]]
[13:38:29.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.803]                     next
[13:38:29.803]                   args[[name]] <- ""
[13:38:29.803]                 }
[13:38:29.803]                 NAMES <- toupper(removed)
[13:38:29.803]                 for (kk in seq_along(NAMES)) {
[13:38:29.803]                   name <- removed[[kk]]
[13:38:29.803]                   NAME <- NAMES[[kk]]
[13:38:29.803]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.803]                     next
[13:38:29.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.803]                 }
[13:38:29.803]                 if (length(args) > 0) 
[13:38:29.803]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.803]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.803]             }
[13:38:29.803]             else {
[13:38:29.803]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.803]             }
[13:38:29.803]             {
[13:38:29.803]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.803]                   0L) {
[13:38:29.803]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.803]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.803]                   base::options(opts)
[13:38:29.803]                 }
[13:38:29.803]                 {
[13:38:29.803]                   {
[13:38:29.803]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.803]                     NULL
[13:38:29.803]                   }
[13:38:29.803]                   options(future.plan = NULL)
[13:38:29.803]                   if (is.na(NA_character_)) 
[13:38:29.803]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.803]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.803]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.803]                     .init = FALSE)
[13:38:29.803]                 }
[13:38:29.803]             }
[13:38:29.803]         }
[13:38:29.803]     })
[13:38:29.803]     if (TRUE) {
[13:38:29.803]         base::sink(type = "output", split = FALSE)
[13:38:29.803]         if (TRUE) {
[13:38:29.803]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.803]         }
[13:38:29.803]         else {
[13:38:29.803]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.803]         }
[13:38:29.803]         base::close(...future.stdout)
[13:38:29.803]         ...future.stdout <- NULL
[13:38:29.803]     }
[13:38:29.803]     ...future.result$conditions <- ...future.conditions
[13:38:29.803]     ...future.result$finished <- base::Sys.time()
[13:38:29.803]     ...future.result
[13:38:29.803] }
[13:38:29.806] MultisessionFuture started
[13:38:29.806] - Launch lazy future ... done
[13:38:29.806] run() for ‘MultisessionFuture’ ... done
[13:38:29.807] result() for ClusterFuture ...
[13:38:29.807] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.807] - Validating connection of MultisessionFuture
[13:38:29.808] - received message: FutureResult
[13:38:29.808] - Received FutureResult
[13:38:29.808] - Erased future from FutureRegistry
[13:38:29.808] result() for ClusterFuture ...
[13:38:29.808] - result already collected: FutureResult
[13:38:29.808] result() for ClusterFuture ... done
[13:38:29.809] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.809] result() for ClusterFuture ... done
[13:38:29.809] result() for ClusterFuture ...
[13:38:29.809] - result already collected: FutureResult
[13:38:29.809] result() for ClusterFuture ... done
[13:38:29.809] result() for ClusterFuture ...
[13:38:29.809] - result already collected: FutureResult
[13:38:29.809] result() for ClusterFuture ... done
[1] 42
[13:38:29.809] result() for ClusterFuture ...
[13:38:29.809] - result already collected: FutureResult
[13:38:29.809] result() for ClusterFuture ... done
- stdout = FALSE
[13:38:29.810] getGlobalsAndPackages() ...
[13:38:29.810] Searching for globals...
[13:38:29.812] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:29.813] Searching for globals ... DONE
[13:38:29.813] Resolving globals: FALSE
[13:38:29.813] 
[13:38:29.813] - packages: [1] ‘utils’
[13:38:29.813] getGlobalsAndPackages() ... DONE
[13:38:29.814] run() for ‘Future’ ...
[13:38:29.814] - state: ‘created’
[13:38:29.814] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.827] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.827] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.827]   - Field: ‘node’
[13:38:29.827]   - Field: ‘label’
[13:38:29.828]   - Field: ‘local’
[13:38:29.828]   - Field: ‘owner’
[13:38:29.828]   - Field: ‘envir’
[13:38:29.828]   - Field: ‘workers’
[13:38:29.828]   - Field: ‘packages’
[13:38:29.828]   - Field: ‘gc’
[13:38:29.828]   - Field: ‘conditions’
[13:38:29.828]   - Field: ‘persistent’
[13:38:29.828]   - Field: ‘expr’
[13:38:29.828]   - Field: ‘uuid’
[13:38:29.829]   - Field: ‘seed’
[13:38:29.829]   - Field: ‘version’
[13:38:29.829]   - Field: ‘result’
[13:38:29.829]   - Field: ‘asynchronous’
[13:38:29.829]   - Field: ‘calls’
[13:38:29.829]   - Field: ‘globals’
[13:38:29.829]   - Field: ‘stdout’
[13:38:29.829]   - Field: ‘earlySignal’
[13:38:29.829]   - Field: ‘lazy’
[13:38:29.829]   - Field: ‘state’
[13:38:29.829] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.829] - Launch lazy future ...
[13:38:29.830] Packages needed by the future expression (n = 1): ‘utils’
[13:38:29.830] Packages needed by future strategies (n = 0): <none>
[13:38:29.830] {
[13:38:29.830]     {
[13:38:29.830]         {
[13:38:29.830]             ...future.startTime <- base::Sys.time()
[13:38:29.830]             {
[13:38:29.830]                 {
[13:38:29.830]                   {
[13:38:29.830]                     {
[13:38:29.830]                       {
[13:38:29.830]                         base::local({
[13:38:29.830]                           has_future <- base::requireNamespace("future", 
[13:38:29.830]                             quietly = TRUE)
[13:38:29.830]                           if (has_future) {
[13:38:29.830]                             ns <- base::getNamespace("future")
[13:38:29.830]                             version <- ns[[".package"]][["version"]]
[13:38:29.830]                             if (is.null(version)) 
[13:38:29.830]                               version <- utils::packageVersion("future")
[13:38:29.830]                           }
[13:38:29.830]                           else {
[13:38:29.830]                             version <- NULL
[13:38:29.830]                           }
[13:38:29.830]                           if (!has_future || version < "1.8.0") {
[13:38:29.830]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.830]                               "", base::R.version$version.string), 
[13:38:29.830]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:29.830]                                 base::R.version$platform, 8 * 
[13:38:29.830]                                   base::.Machine$sizeof.pointer), 
[13:38:29.830]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.830]                                 "release", "version")], collapse = " "), 
[13:38:29.830]                               hostname = base::Sys.info()[["nodename"]])
[13:38:29.830]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.830]                               info)
[13:38:29.830]                             info <- base::paste(info, collapse = "; ")
[13:38:29.830]                             if (!has_future) {
[13:38:29.830]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.830]                                 info)
[13:38:29.830]                             }
[13:38:29.830]                             else {
[13:38:29.830]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.830]                                 info, version)
[13:38:29.830]                             }
[13:38:29.830]                             base::stop(msg)
[13:38:29.830]                           }
[13:38:29.830]                         })
[13:38:29.830]                       }
[13:38:29.830]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.830]                       base::options(mc.cores = 1L)
[13:38:29.830]                     }
[13:38:29.830]                     base::local({
[13:38:29.830]                       for (pkg in "utils") {
[13:38:29.830]                         base::loadNamespace(pkg)
[13:38:29.830]                         base::library(pkg, character.only = TRUE)
[13:38:29.830]                       }
[13:38:29.830]                     })
[13:38:29.830]                   }
[13:38:29.830]                   ...future.strategy.old <- future::plan("list")
[13:38:29.830]                   options(future.plan = NULL)
[13:38:29.830]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.830]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.830]                 }
[13:38:29.830]                 ...future.workdir <- getwd()
[13:38:29.830]             }
[13:38:29.830]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.830]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.830]         }
[13:38:29.830]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.830]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.830]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.830]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.830]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.830]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.830]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.830]             base::names(...future.oldOptions))
[13:38:29.830]     }
[13:38:29.830]     if (FALSE) {
[13:38:29.830]     }
[13:38:29.830]     else {
[13:38:29.830]         if (FALSE) {
[13:38:29.830]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.830]                 open = "w")
[13:38:29.830]         }
[13:38:29.830]         else {
[13:38:29.830]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.830]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.830]         }
[13:38:29.830]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.830]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.830]             base::sink(type = "output", split = FALSE)
[13:38:29.830]             base::close(...future.stdout)
[13:38:29.830]         }, add = TRUE)
[13:38:29.830]     }
[13:38:29.830]     ...future.frame <- base::sys.nframe()
[13:38:29.830]     ...future.conditions <- base::list()
[13:38:29.830]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.830]     if (FALSE) {
[13:38:29.830]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.830]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.830]     }
[13:38:29.830]     ...future.result <- base::tryCatch({
[13:38:29.830]         base::withCallingHandlers({
[13:38:29.830]             ...future.value <- base::withVisible(base::local({
[13:38:29.830]                 ...future.makeSendCondition <- base::local({
[13:38:29.830]                   sendCondition <- NULL
[13:38:29.830]                   function(frame = 1L) {
[13:38:29.830]                     if (is.function(sendCondition)) 
[13:38:29.830]                       return(sendCondition)
[13:38:29.830]                     ns <- getNamespace("parallel")
[13:38:29.830]                     if (exists("sendData", mode = "function", 
[13:38:29.830]                       envir = ns)) {
[13:38:29.830]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.830]                         envir = ns)
[13:38:29.830]                       envir <- sys.frame(frame)
[13:38:29.830]                       master <- NULL
[13:38:29.830]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.830]                         !identical(envir, emptyenv())) {
[13:38:29.830]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.830]                           inherits = FALSE)) {
[13:38:29.830]                           master <- get("master", mode = "list", 
[13:38:29.830]                             envir = envir, inherits = FALSE)
[13:38:29.830]                           if (inherits(master, c("SOCKnode", 
[13:38:29.830]                             "SOCK0node"))) {
[13:38:29.830]                             sendCondition <<- function(cond) {
[13:38:29.830]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.830]                                 success = TRUE)
[13:38:29.830]                               parallel_sendData(master, data)
[13:38:29.830]                             }
[13:38:29.830]                             return(sendCondition)
[13:38:29.830]                           }
[13:38:29.830]                         }
[13:38:29.830]                         frame <- frame + 1L
[13:38:29.830]                         envir <- sys.frame(frame)
[13:38:29.830]                       }
[13:38:29.830]                     }
[13:38:29.830]                     sendCondition <<- function(cond) NULL
[13:38:29.830]                   }
[13:38:29.830]                 })
[13:38:29.830]                 withCallingHandlers({
[13:38:29.830]                   {
[13:38:29.830]                     print(1:50)
[13:38:29.830]                     str(1:50)
[13:38:29.830]                     cat(letters, sep = "-")
[13:38:29.830]                     cat(1:6, collapse = "\n")
[13:38:29.830]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:29.830]                     42L
[13:38:29.830]                   }
[13:38:29.830]                 }, immediateCondition = function(cond) {
[13:38:29.830]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.830]                   sendCondition(cond)
[13:38:29.830]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.830]                   {
[13:38:29.830]                     inherits <- base::inherits
[13:38:29.830]                     invokeRestart <- base::invokeRestart
[13:38:29.830]                     is.null <- base::is.null
[13:38:29.830]                     muffled <- FALSE
[13:38:29.830]                     if (inherits(cond, "message")) {
[13:38:29.830]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.830]                       if (muffled) 
[13:38:29.830]                         invokeRestart("muffleMessage")
[13:38:29.830]                     }
[13:38:29.830]                     else if (inherits(cond, "warning")) {
[13:38:29.830]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.830]                       if (muffled) 
[13:38:29.830]                         invokeRestart("muffleWarning")
[13:38:29.830]                     }
[13:38:29.830]                     else if (inherits(cond, "condition")) {
[13:38:29.830]                       if (!is.null(pattern)) {
[13:38:29.830]                         computeRestarts <- base::computeRestarts
[13:38:29.830]                         grepl <- base::grepl
[13:38:29.830]                         restarts <- computeRestarts(cond)
[13:38:29.830]                         for (restart in restarts) {
[13:38:29.830]                           name <- restart$name
[13:38:29.830]                           if (is.null(name)) 
[13:38:29.830]                             next
[13:38:29.830]                           if (!grepl(pattern, name)) 
[13:38:29.830]                             next
[13:38:29.830]                           invokeRestart(restart)
[13:38:29.830]                           muffled <- TRUE
[13:38:29.830]                           break
[13:38:29.830]                         }
[13:38:29.830]                       }
[13:38:29.830]                     }
[13:38:29.830]                     invisible(muffled)
[13:38:29.830]                   }
[13:38:29.830]                   muffleCondition(cond)
[13:38:29.830]                 })
[13:38:29.830]             }))
[13:38:29.830]             future::FutureResult(value = ...future.value$value, 
[13:38:29.830]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.830]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.830]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.830]                     ...future.globalenv.names))
[13:38:29.830]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.830]         }, condition = base::local({
[13:38:29.830]             c <- base::c
[13:38:29.830]             inherits <- base::inherits
[13:38:29.830]             invokeRestart <- base::invokeRestart
[13:38:29.830]             length <- base::length
[13:38:29.830]             list <- base::list
[13:38:29.830]             seq.int <- base::seq.int
[13:38:29.830]             signalCondition <- base::signalCondition
[13:38:29.830]             sys.calls <- base::sys.calls
[13:38:29.830]             `[[` <- base::`[[`
[13:38:29.830]             `+` <- base::`+`
[13:38:29.830]             `<<-` <- base::`<<-`
[13:38:29.830]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.830]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.830]                   3L)]
[13:38:29.830]             }
[13:38:29.830]             function(cond) {
[13:38:29.830]                 is_error <- inherits(cond, "error")
[13:38:29.830]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.830]                   NULL)
[13:38:29.830]                 if (is_error) {
[13:38:29.830]                   sessionInformation <- function() {
[13:38:29.830]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.830]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.830]                       search = base::search(), system = base::Sys.info())
[13:38:29.830]                   }
[13:38:29.830]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.830]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.830]                     cond$call), session = sessionInformation(), 
[13:38:29.830]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.830]                   signalCondition(cond)
[13:38:29.830]                 }
[13:38:29.830]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.830]                 "immediateCondition"))) {
[13:38:29.830]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.830]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.830]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.830]                   if (TRUE && !signal) {
[13:38:29.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.830]                     {
[13:38:29.830]                       inherits <- base::inherits
[13:38:29.830]                       invokeRestart <- base::invokeRestart
[13:38:29.830]                       is.null <- base::is.null
[13:38:29.830]                       muffled <- FALSE
[13:38:29.830]                       if (inherits(cond, "message")) {
[13:38:29.830]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.830]                         if (muffled) 
[13:38:29.830]                           invokeRestart("muffleMessage")
[13:38:29.830]                       }
[13:38:29.830]                       else if (inherits(cond, "warning")) {
[13:38:29.830]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.830]                         if (muffled) 
[13:38:29.830]                           invokeRestart("muffleWarning")
[13:38:29.830]                       }
[13:38:29.830]                       else if (inherits(cond, "condition")) {
[13:38:29.830]                         if (!is.null(pattern)) {
[13:38:29.830]                           computeRestarts <- base::computeRestarts
[13:38:29.830]                           grepl <- base::grepl
[13:38:29.830]                           restarts <- computeRestarts(cond)
[13:38:29.830]                           for (restart in restarts) {
[13:38:29.830]                             name <- restart$name
[13:38:29.830]                             if (is.null(name)) 
[13:38:29.830]                               next
[13:38:29.830]                             if (!grepl(pattern, name)) 
[13:38:29.830]                               next
[13:38:29.830]                             invokeRestart(restart)
[13:38:29.830]                             muffled <- TRUE
[13:38:29.830]                             break
[13:38:29.830]                           }
[13:38:29.830]                         }
[13:38:29.830]                       }
[13:38:29.830]                       invisible(muffled)
[13:38:29.830]                     }
[13:38:29.830]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.830]                   }
[13:38:29.830]                 }
[13:38:29.830]                 else {
[13:38:29.830]                   if (TRUE) {
[13:38:29.830]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.830]                     {
[13:38:29.830]                       inherits <- base::inherits
[13:38:29.830]                       invokeRestart <- base::invokeRestart
[13:38:29.830]                       is.null <- base::is.null
[13:38:29.830]                       muffled <- FALSE
[13:38:29.830]                       if (inherits(cond, "message")) {
[13:38:29.830]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.830]                         if (muffled) 
[13:38:29.830]                           invokeRestart("muffleMessage")
[13:38:29.830]                       }
[13:38:29.830]                       else if (inherits(cond, "warning")) {
[13:38:29.830]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.830]                         if (muffled) 
[13:38:29.830]                           invokeRestart("muffleWarning")
[13:38:29.830]                       }
[13:38:29.830]                       else if (inherits(cond, "condition")) {
[13:38:29.830]                         if (!is.null(pattern)) {
[13:38:29.830]                           computeRestarts <- base::computeRestarts
[13:38:29.830]                           grepl <- base::grepl
[13:38:29.830]                           restarts <- computeRestarts(cond)
[13:38:29.830]                           for (restart in restarts) {
[13:38:29.830]                             name <- restart$name
[13:38:29.830]                             if (is.null(name)) 
[13:38:29.830]                               next
[13:38:29.830]                             if (!grepl(pattern, name)) 
[13:38:29.830]                               next
[13:38:29.830]                             invokeRestart(restart)
[13:38:29.830]                             muffled <- TRUE
[13:38:29.830]                             break
[13:38:29.830]                           }
[13:38:29.830]                         }
[13:38:29.830]                       }
[13:38:29.830]                       invisible(muffled)
[13:38:29.830]                     }
[13:38:29.830]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.830]                   }
[13:38:29.830]                 }
[13:38:29.830]             }
[13:38:29.830]         }))
[13:38:29.830]     }, error = function(ex) {
[13:38:29.830]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.830]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.830]                 ...future.rng), started = ...future.startTime, 
[13:38:29.830]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.830]             version = "1.8"), class = "FutureResult")
[13:38:29.830]     }, finally = {
[13:38:29.830]         if (!identical(...future.workdir, getwd())) 
[13:38:29.830]             setwd(...future.workdir)
[13:38:29.830]         {
[13:38:29.830]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.830]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.830]             }
[13:38:29.830]             base::options(...future.oldOptions)
[13:38:29.830]             if (.Platform$OS.type == "windows") {
[13:38:29.830]                 old_names <- names(...future.oldEnvVars)
[13:38:29.830]                 envs <- base::Sys.getenv()
[13:38:29.830]                 names <- names(envs)
[13:38:29.830]                 common <- intersect(names, old_names)
[13:38:29.830]                 added <- setdiff(names, old_names)
[13:38:29.830]                 removed <- setdiff(old_names, names)
[13:38:29.830]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.830]                   envs[common]]
[13:38:29.830]                 NAMES <- toupper(changed)
[13:38:29.830]                 args <- list()
[13:38:29.830]                 for (kk in seq_along(NAMES)) {
[13:38:29.830]                   name <- changed[[kk]]
[13:38:29.830]                   NAME <- NAMES[[kk]]
[13:38:29.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.830]                     next
[13:38:29.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.830]                 }
[13:38:29.830]                 NAMES <- toupper(added)
[13:38:29.830]                 for (kk in seq_along(NAMES)) {
[13:38:29.830]                   name <- added[[kk]]
[13:38:29.830]                   NAME <- NAMES[[kk]]
[13:38:29.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.830]                     next
[13:38:29.830]                   args[[name]] <- ""
[13:38:29.830]                 }
[13:38:29.830]                 NAMES <- toupper(removed)
[13:38:29.830]                 for (kk in seq_along(NAMES)) {
[13:38:29.830]                   name <- removed[[kk]]
[13:38:29.830]                   NAME <- NAMES[[kk]]
[13:38:29.830]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.830]                     next
[13:38:29.830]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.830]                 }
[13:38:29.830]                 if (length(args) > 0) 
[13:38:29.830]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.830]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.830]             }
[13:38:29.830]             else {
[13:38:29.830]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.830]             }
[13:38:29.830]             {
[13:38:29.830]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.830]                   0L) {
[13:38:29.830]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.830]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.830]                   base::options(opts)
[13:38:29.830]                 }
[13:38:29.830]                 {
[13:38:29.830]                   {
[13:38:29.830]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.830]                     NULL
[13:38:29.830]                   }
[13:38:29.830]                   options(future.plan = NULL)
[13:38:29.830]                   if (is.na(NA_character_)) 
[13:38:29.830]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.830]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.830]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.830]                     .init = FALSE)
[13:38:29.830]                 }
[13:38:29.830]             }
[13:38:29.830]         }
[13:38:29.830]     })
[13:38:29.830]     if (TRUE) {
[13:38:29.830]         base::sink(type = "output", split = FALSE)
[13:38:29.830]         if (FALSE) {
[13:38:29.830]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.830]         }
[13:38:29.830]         else {
[13:38:29.830]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.830]         }
[13:38:29.830]         base::close(...future.stdout)
[13:38:29.830]         ...future.stdout <- NULL
[13:38:29.830]     }
[13:38:29.830]     ...future.result$conditions <- ...future.conditions
[13:38:29.830]     ...future.result$finished <- base::Sys.time()
[13:38:29.830]     ...future.result
[13:38:29.830] }
[13:38:29.833] MultisessionFuture started
[13:38:29.833] - Launch lazy future ... done
[13:38:29.834] run() for ‘MultisessionFuture’ ... done
[13:38:29.834] result() for ClusterFuture ...
[13:38:29.834] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.834] - Validating connection of MultisessionFuture
[13:38:29.876] - received message: FutureResult
[13:38:29.877] - Received FutureResult
[13:38:29.877] - Erased future from FutureRegistry
[13:38:29.877] result() for ClusterFuture ...
[13:38:29.877] - result already collected: FutureResult
[13:38:29.877] result() for ClusterFuture ... done
[13:38:29.877] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.877] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:29"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:29"
 $ session_uuid: chr "b6b0fdf8-e44b-8abe-f924-81309e53fd71"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 91055
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:29"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:29.885] result() for ClusterFuture ...
[13:38:29.885] - result already collected: FutureResult
[13:38:29.885] result() for ClusterFuture ... done
[13:38:29.885] result() for ClusterFuture ...
[13:38:29.885] - result already collected: FutureResult
[13:38:29.885] result() for ClusterFuture ... done
[13:38:29.886] getGlobalsAndPackages() ...
[13:38:29.886] Searching for globals...
[13:38:29.888] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:29.889] Searching for globals ... DONE
[13:38:29.889] Resolving globals: FALSE
[13:38:29.889] 
[13:38:29.889] - packages: [1] ‘utils’
[13:38:29.889] getGlobalsAndPackages() ... DONE
[13:38:29.890] run() for ‘Future’ ...
[13:38:29.890] - state: ‘created’
[13:38:29.890] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.903] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.903] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.903]   - Field: ‘node’
[13:38:29.904]   - Field: ‘label’
[13:38:29.904]   - Field: ‘local’
[13:38:29.904]   - Field: ‘owner’
[13:38:29.904]   - Field: ‘envir’
[13:38:29.904]   - Field: ‘workers’
[13:38:29.904]   - Field: ‘packages’
[13:38:29.904]   - Field: ‘gc’
[13:38:29.904]   - Field: ‘conditions’
[13:38:29.904]   - Field: ‘persistent’
[13:38:29.904]   - Field: ‘expr’
[13:38:29.905]   - Field: ‘uuid’
[13:38:29.905]   - Field: ‘seed’
[13:38:29.905]   - Field: ‘version’
[13:38:29.905]   - Field: ‘result’
[13:38:29.905]   - Field: ‘asynchronous’
[13:38:29.905]   - Field: ‘calls’
[13:38:29.905]   - Field: ‘globals’
[13:38:29.905]   - Field: ‘stdout’
[13:38:29.905]   - Field: ‘earlySignal’
[13:38:29.905]   - Field: ‘lazy’
[13:38:29.905]   - Field: ‘state’
[13:38:29.905] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.906] - Launch lazy future ...
[13:38:29.906] Packages needed by the future expression (n = 1): ‘utils’
[13:38:29.906] Packages needed by future strategies (n = 0): <none>
[13:38:29.906] {
[13:38:29.906]     {
[13:38:29.906]         {
[13:38:29.906]             ...future.startTime <- base::Sys.time()
[13:38:29.906]             {
[13:38:29.906]                 {
[13:38:29.906]                   {
[13:38:29.906]                     {
[13:38:29.906]                       {
[13:38:29.906]                         base::local({
[13:38:29.906]                           has_future <- base::requireNamespace("future", 
[13:38:29.906]                             quietly = TRUE)
[13:38:29.906]                           if (has_future) {
[13:38:29.906]                             ns <- base::getNamespace("future")
[13:38:29.906]                             version <- ns[[".package"]][["version"]]
[13:38:29.906]                             if (is.null(version)) 
[13:38:29.906]                               version <- utils::packageVersion("future")
[13:38:29.906]                           }
[13:38:29.906]                           else {
[13:38:29.906]                             version <- NULL
[13:38:29.906]                           }
[13:38:29.906]                           if (!has_future || version < "1.8.0") {
[13:38:29.906]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.906]                               "", base::R.version$version.string), 
[13:38:29.906]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:29.906]                                 base::R.version$platform, 8 * 
[13:38:29.906]                                   base::.Machine$sizeof.pointer), 
[13:38:29.906]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.906]                                 "release", "version")], collapse = " "), 
[13:38:29.906]                               hostname = base::Sys.info()[["nodename"]])
[13:38:29.906]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.906]                               info)
[13:38:29.906]                             info <- base::paste(info, collapse = "; ")
[13:38:29.906]                             if (!has_future) {
[13:38:29.906]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.906]                                 info)
[13:38:29.906]                             }
[13:38:29.906]                             else {
[13:38:29.906]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.906]                                 info, version)
[13:38:29.906]                             }
[13:38:29.906]                             base::stop(msg)
[13:38:29.906]                           }
[13:38:29.906]                         })
[13:38:29.906]                       }
[13:38:29.906]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.906]                       base::options(mc.cores = 1L)
[13:38:29.906]                     }
[13:38:29.906]                     base::local({
[13:38:29.906]                       for (pkg in "utils") {
[13:38:29.906]                         base::loadNamespace(pkg)
[13:38:29.906]                         base::library(pkg, character.only = TRUE)
[13:38:29.906]                       }
[13:38:29.906]                     })
[13:38:29.906]                   }
[13:38:29.906]                   ...future.strategy.old <- future::plan("list")
[13:38:29.906]                   options(future.plan = NULL)
[13:38:29.906]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.906]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.906]                 }
[13:38:29.906]                 ...future.workdir <- getwd()
[13:38:29.906]             }
[13:38:29.906]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.906]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.906]         }
[13:38:29.906]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.906]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.906]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.906]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.906]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.906]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.906]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.906]             base::names(...future.oldOptions))
[13:38:29.906]     }
[13:38:29.906]     if (FALSE) {
[13:38:29.906]     }
[13:38:29.906]     else {
[13:38:29.906]         if (FALSE) {
[13:38:29.906]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.906]                 open = "w")
[13:38:29.906]         }
[13:38:29.906]         else {
[13:38:29.906]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.906]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.906]         }
[13:38:29.906]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.906]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.906]             base::sink(type = "output", split = FALSE)
[13:38:29.906]             base::close(...future.stdout)
[13:38:29.906]         }, add = TRUE)
[13:38:29.906]     }
[13:38:29.906]     ...future.frame <- base::sys.nframe()
[13:38:29.906]     ...future.conditions <- base::list()
[13:38:29.906]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.906]     if (FALSE) {
[13:38:29.906]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.906]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.906]     }
[13:38:29.906]     ...future.result <- base::tryCatch({
[13:38:29.906]         base::withCallingHandlers({
[13:38:29.906]             ...future.value <- base::withVisible(base::local({
[13:38:29.906]                 ...future.makeSendCondition <- base::local({
[13:38:29.906]                   sendCondition <- NULL
[13:38:29.906]                   function(frame = 1L) {
[13:38:29.906]                     if (is.function(sendCondition)) 
[13:38:29.906]                       return(sendCondition)
[13:38:29.906]                     ns <- getNamespace("parallel")
[13:38:29.906]                     if (exists("sendData", mode = "function", 
[13:38:29.906]                       envir = ns)) {
[13:38:29.906]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.906]                         envir = ns)
[13:38:29.906]                       envir <- sys.frame(frame)
[13:38:29.906]                       master <- NULL
[13:38:29.906]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.906]                         !identical(envir, emptyenv())) {
[13:38:29.906]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.906]                           inherits = FALSE)) {
[13:38:29.906]                           master <- get("master", mode = "list", 
[13:38:29.906]                             envir = envir, inherits = FALSE)
[13:38:29.906]                           if (inherits(master, c("SOCKnode", 
[13:38:29.906]                             "SOCK0node"))) {
[13:38:29.906]                             sendCondition <<- function(cond) {
[13:38:29.906]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.906]                                 success = TRUE)
[13:38:29.906]                               parallel_sendData(master, data)
[13:38:29.906]                             }
[13:38:29.906]                             return(sendCondition)
[13:38:29.906]                           }
[13:38:29.906]                         }
[13:38:29.906]                         frame <- frame + 1L
[13:38:29.906]                         envir <- sys.frame(frame)
[13:38:29.906]                       }
[13:38:29.906]                     }
[13:38:29.906]                     sendCondition <<- function(cond) NULL
[13:38:29.906]                   }
[13:38:29.906]                 })
[13:38:29.906]                 withCallingHandlers({
[13:38:29.906]                   {
[13:38:29.906]                     print(1:50)
[13:38:29.906]                     str(1:50)
[13:38:29.906]                     cat(letters, sep = "-")
[13:38:29.906]                     cat(1:6, collapse = "\n")
[13:38:29.906]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:29.906]                     42L
[13:38:29.906]                   }
[13:38:29.906]                 }, immediateCondition = function(cond) {
[13:38:29.906]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.906]                   sendCondition(cond)
[13:38:29.906]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.906]                   {
[13:38:29.906]                     inherits <- base::inherits
[13:38:29.906]                     invokeRestart <- base::invokeRestart
[13:38:29.906]                     is.null <- base::is.null
[13:38:29.906]                     muffled <- FALSE
[13:38:29.906]                     if (inherits(cond, "message")) {
[13:38:29.906]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.906]                       if (muffled) 
[13:38:29.906]                         invokeRestart("muffleMessage")
[13:38:29.906]                     }
[13:38:29.906]                     else if (inherits(cond, "warning")) {
[13:38:29.906]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.906]                       if (muffled) 
[13:38:29.906]                         invokeRestart("muffleWarning")
[13:38:29.906]                     }
[13:38:29.906]                     else if (inherits(cond, "condition")) {
[13:38:29.906]                       if (!is.null(pattern)) {
[13:38:29.906]                         computeRestarts <- base::computeRestarts
[13:38:29.906]                         grepl <- base::grepl
[13:38:29.906]                         restarts <- computeRestarts(cond)
[13:38:29.906]                         for (restart in restarts) {
[13:38:29.906]                           name <- restart$name
[13:38:29.906]                           if (is.null(name)) 
[13:38:29.906]                             next
[13:38:29.906]                           if (!grepl(pattern, name)) 
[13:38:29.906]                             next
[13:38:29.906]                           invokeRestart(restart)
[13:38:29.906]                           muffled <- TRUE
[13:38:29.906]                           break
[13:38:29.906]                         }
[13:38:29.906]                       }
[13:38:29.906]                     }
[13:38:29.906]                     invisible(muffled)
[13:38:29.906]                   }
[13:38:29.906]                   muffleCondition(cond)
[13:38:29.906]                 })
[13:38:29.906]             }))
[13:38:29.906]             future::FutureResult(value = ...future.value$value, 
[13:38:29.906]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.906]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.906]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.906]                     ...future.globalenv.names))
[13:38:29.906]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.906]         }, condition = base::local({
[13:38:29.906]             c <- base::c
[13:38:29.906]             inherits <- base::inherits
[13:38:29.906]             invokeRestart <- base::invokeRestart
[13:38:29.906]             length <- base::length
[13:38:29.906]             list <- base::list
[13:38:29.906]             seq.int <- base::seq.int
[13:38:29.906]             signalCondition <- base::signalCondition
[13:38:29.906]             sys.calls <- base::sys.calls
[13:38:29.906]             `[[` <- base::`[[`
[13:38:29.906]             `+` <- base::`+`
[13:38:29.906]             `<<-` <- base::`<<-`
[13:38:29.906]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.906]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.906]                   3L)]
[13:38:29.906]             }
[13:38:29.906]             function(cond) {
[13:38:29.906]                 is_error <- inherits(cond, "error")
[13:38:29.906]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.906]                   NULL)
[13:38:29.906]                 if (is_error) {
[13:38:29.906]                   sessionInformation <- function() {
[13:38:29.906]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.906]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.906]                       search = base::search(), system = base::Sys.info())
[13:38:29.906]                   }
[13:38:29.906]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.906]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.906]                     cond$call), session = sessionInformation(), 
[13:38:29.906]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.906]                   signalCondition(cond)
[13:38:29.906]                 }
[13:38:29.906]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.906]                 "immediateCondition"))) {
[13:38:29.906]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.906]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.906]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.906]                   if (TRUE && !signal) {
[13:38:29.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.906]                     {
[13:38:29.906]                       inherits <- base::inherits
[13:38:29.906]                       invokeRestart <- base::invokeRestart
[13:38:29.906]                       is.null <- base::is.null
[13:38:29.906]                       muffled <- FALSE
[13:38:29.906]                       if (inherits(cond, "message")) {
[13:38:29.906]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.906]                         if (muffled) 
[13:38:29.906]                           invokeRestart("muffleMessage")
[13:38:29.906]                       }
[13:38:29.906]                       else if (inherits(cond, "warning")) {
[13:38:29.906]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.906]                         if (muffled) 
[13:38:29.906]                           invokeRestart("muffleWarning")
[13:38:29.906]                       }
[13:38:29.906]                       else if (inherits(cond, "condition")) {
[13:38:29.906]                         if (!is.null(pattern)) {
[13:38:29.906]                           computeRestarts <- base::computeRestarts
[13:38:29.906]                           grepl <- base::grepl
[13:38:29.906]                           restarts <- computeRestarts(cond)
[13:38:29.906]                           for (restart in restarts) {
[13:38:29.906]                             name <- restart$name
[13:38:29.906]                             if (is.null(name)) 
[13:38:29.906]                               next
[13:38:29.906]                             if (!grepl(pattern, name)) 
[13:38:29.906]                               next
[13:38:29.906]                             invokeRestart(restart)
[13:38:29.906]                             muffled <- TRUE
[13:38:29.906]                             break
[13:38:29.906]                           }
[13:38:29.906]                         }
[13:38:29.906]                       }
[13:38:29.906]                       invisible(muffled)
[13:38:29.906]                     }
[13:38:29.906]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.906]                   }
[13:38:29.906]                 }
[13:38:29.906]                 else {
[13:38:29.906]                   if (TRUE) {
[13:38:29.906]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.906]                     {
[13:38:29.906]                       inherits <- base::inherits
[13:38:29.906]                       invokeRestart <- base::invokeRestart
[13:38:29.906]                       is.null <- base::is.null
[13:38:29.906]                       muffled <- FALSE
[13:38:29.906]                       if (inherits(cond, "message")) {
[13:38:29.906]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.906]                         if (muffled) 
[13:38:29.906]                           invokeRestart("muffleMessage")
[13:38:29.906]                       }
[13:38:29.906]                       else if (inherits(cond, "warning")) {
[13:38:29.906]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.906]                         if (muffled) 
[13:38:29.906]                           invokeRestart("muffleWarning")
[13:38:29.906]                       }
[13:38:29.906]                       else if (inherits(cond, "condition")) {
[13:38:29.906]                         if (!is.null(pattern)) {
[13:38:29.906]                           computeRestarts <- base::computeRestarts
[13:38:29.906]                           grepl <- base::grepl
[13:38:29.906]                           restarts <- computeRestarts(cond)
[13:38:29.906]                           for (restart in restarts) {
[13:38:29.906]                             name <- restart$name
[13:38:29.906]                             if (is.null(name)) 
[13:38:29.906]                               next
[13:38:29.906]                             if (!grepl(pattern, name)) 
[13:38:29.906]                               next
[13:38:29.906]                             invokeRestart(restart)
[13:38:29.906]                             muffled <- TRUE
[13:38:29.906]                             break
[13:38:29.906]                           }
[13:38:29.906]                         }
[13:38:29.906]                       }
[13:38:29.906]                       invisible(muffled)
[13:38:29.906]                     }
[13:38:29.906]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.906]                   }
[13:38:29.906]                 }
[13:38:29.906]             }
[13:38:29.906]         }))
[13:38:29.906]     }, error = function(ex) {
[13:38:29.906]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.906]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.906]                 ...future.rng), started = ...future.startTime, 
[13:38:29.906]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.906]             version = "1.8"), class = "FutureResult")
[13:38:29.906]     }, finally = {
[13:38:29.906]         if (!identical(...future.workdir, getwd())) 
[13:38:29.906]             setwd(...future.workdir)
[13:38:29.906]         {
[13:38:29.906]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.906]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.906]             }
[13:38:29.906]             base::options(...future.oldOptions)
[13:38:29.906]             if (.Platform$OS.type == "windows") {
[13:38:29.906]                 old_names <- names(...future.oldEnvVars)
[13:38:29.906]                 envs <- base::Sys.getenv()
[13:38:29.906]                 names <- names(envs)
[13:38:29.906]                 common <- intersect(names, old_names)
[13:38:29.906]                 added <- setdiff(names, old_names)
[13:38:29.906]                 removed <- setdiff(old_names, names)
[13:38:29.906]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.906]                   envs[common]]
[13:38:29.906]                 NAMES <- toupper(changed)
[13:38:29.906]                 args <- list()
[13:38:29.906]                 for (kk in seq_along(NAMES)) {
[13:38:29.906]                   name <- changed[[kk]]
[13:38:29.906]                   NAME <- NAMES[[kk]]
[13:38:29.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.906]                     next
[13:38:29.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.906]                 }
[13:38:29.906]                 NAMES <- toupper(added)
[13:38:29.906]                 for (kk in seq_along(NAMES)) {
[13:38:29.906]                   name <- added[[kk]]
[13:38:29.906]                   NAME <- NAMES[[kk]]
[13:38:29.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.906]                     next
[13:38:29.906]                   args[[name]] <- ""
[13:38:29.906]                 }
[13:38:29.906]                 NAMES <- toupper(removed)
[13:38:29.906]                 for (kk in seq_along(NAMES)) {
[13:38:29.906]                   name <- removed[[kk]]
[13:38:29.906]                   NAME <- NAMES[[kk]]
[13:38:29.906]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.906]                     next
[13:38:29.906]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.906]                 }
[13:38:29.906]                 if (length(args) > 0) 
[13:38:29.906]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.906]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.906]             }
[13:38:29.906]             else {
[13:38:29.906]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.906]             }
[13:38:29.906]             {
[13:38:29.906]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.906]                   0L) {
[13:38:29.906]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.906]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.906]                   base::options(opts)
[13:38:29.906]                 }
[13:38:29.906]                 {
[13:38:29.906]                   {
[13:38:29.906]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.906]                     NULL
[13:38:29.906]                   }
[13:38:29.906]                   options(future.plan = NULL)
[13:38:29.906]                   if (is.na(NA_character_)) 
[13:38:29.906]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.906]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.906]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.906]                     .init = FALSE)
[13:38:29.906]                 }
[13:38:29.906]             }
[13:38:29.906]         }
[13:38:29.906]     })
[13:38:29.906]     if (TRUE) {
[13:38:29.906]         base::sink(type = "output", split = FALSE)
[13:38:29.906]         if (FALSE) {
[13:38:29.906]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.906]         }
[13:38:29.906]         else {
[13:38:29.906]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.906]         }
[13:38:29.906]         base::close(...future.stdout)
[13:38:29.906]         ...future.stdout <- NULL
[13:38:29.906]     }
[13:38:29.906]     ...future.result$conditions <- ...future.conditions
[13:38:29.906]     ...future.result$finished <- base::Sys.time()
[13:38:29.906]     ...future.result
[13:38:29.906] }
[13:38:29.909] MultisessionFuture started
[13:38:29.909] - Launch lazy future ... done
[13:38:29.910] run() for ‘MultisessionFuture’ ... done
[13:38:29.910] result() for ClusterFuture ...
[13:38:29.910] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.910] - Validating connection of MultisessionFuture
[13:38:29.952] - received message: FutureResult
[13:38:29.953] - Received FutureResult
[13:38:29.953] - Erased future from FutureRegistry
[13:38:29.953] result() for ClusterFuture ...
[13:38:29.953] - result already collected: FutureResult
[13:38:29.953] result() for ClusterFuture ... done
[13:38:29.953] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.953] result() for ClusterFuture ... done
[13:38:29.953] result() for ClusterFuture ...
[13:38:29.953] - result already collected: FutureResult
[13:38:29.953] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:29.954] getGlobalsAndPackages() ...
[13:38:29.954] Searching for globals...
[13:38:29.954] - globals found: [1] ‘print’
[13:38:29.954] Searching for globals ... DONE
[13:38:29.954] Resolving globals: FALSE
[13:38:29.955] 
[13:38:29.955] 
[13:38:29.955] getGlobalsAndPackages() ... DONE
[13:38:29.955] run() for ‘Future’ ...
[13:38:29.955] - state: ‘created’
[13:38:29.955] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.969] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.969] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.969]   - Field: ‘node’
[13:38:29.969]   - Field: ‘label’
[13:38:29.969]   - Field: ‘local’
[13:38:29.969]   - Field: ‘owner’
[13:38:29.969]   - Field: ‘envir’
[13:38:29.969]   - Field: ‘workers’
[13:38:29.969]   - Field: ‘packages’
[13:38:29.970]   - Field: ‘gc’
[13:38:29.970]   - Field: ‘conditions’
[13:38:29.970]   - Field: ‘persistent’
[13:38:29.970]   - Field: ‘expr’
[13:38:29.970]   - Field: ‘uuid’
[13:38:29.970]   - Field: ‘seed’
[13:38:29.970]   - Field: ‘version’
[13:38:29.970]   - Field: ‘result’
[13:38:29.970]   - Field: ‘asynchronous’
[13:38:29.970]   - Field: ‘calls’
[13:38:29.971]   - Field: ‘globals’
[13:38:29.971]   - Field: ‘stdout’
[13:38:29.971]   - Field: ‘earlySignal’
[13:38:29.971]   - Field: ‘lazy’
[13:38:29.971]   - Field: ‘state’
[13:38:29.971] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:29.971] - Launch lazy future ...
[13:38:29.971] Packages needed by the future expression (n = 0): <none>
[13:38:29.971] Packages needed by future strategies (n = 0): <none>
[13:38:29.972] {
[13:38:29.972]     {
[13:38:29.972]         {
[13:38:29.972]             ...future.startTime <- base::Sys.time()
[13:38:29.972]             {
[13:38:29.972]                 {
[13:38:29.972]                   {
[13:38:29.972]                     {
[13:38:29.972]                       base::local({
[13:38:29.972]                         has_future <- base::requireNamespace("future", 
[13:38:29.972]                           quietly = TRUE)
[13:38:29.972]                         if (has_future) {
[13:38:29.972]                           ns <- base::getNamespace("future")
[13:38:29.972]                           version <- ns[[".package"]][["version"]]
[13:38:29.972]                           if (is.null(version)) 
[13:38:29.972]                             version <- utils::packageVersion("future")
[13:38:29.972]                         }
[13:38:29.972]                         else {
[13:38:29.972]                           version <- NULL
[13:38:29.972]                         }
[13:38:29.972]                         if (!has_future || version < "1.8.0") {
[13:38:29.972]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:29.972]                             "", base::R.version$version.string), 
[13:38:29.972]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:29.972]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:29.972]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:29.972]                               "release", "version")], collapse = " "), 
[13:38:29.972]                             hostname = base::Sys.info()[["nodename"]])
[13:38:29.972]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:29.972]                             info)
[13:38:29.972]                           info <- base::paste(info, collapse = "; ")
[13:38:29.972]                           if (!has_future) {
[13:38:29.972]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:29.972]                               info)
[13:38:29.972]                           }
[13:38:29.972]                           else {
[13:38:29.972]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:29.972]                               info, version)
[13:38:29.972]                           }
[13:38:29.972]                           base::stop(msg)
[13:38:29.972]                         }
[13:38:29.972]                       })
[13:38:29.972]                     }
[13:38:29.972]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:29.972]                     base::options(mc.cores = 1L)
[13:38:29.972]                   }
[13:38:29.972]                   ...future.strategy.old <- future::plan("list")
[13:38:29.972]                   options(future.plan = NULL)
[13:38:29.972]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.972]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:29.972]                 }
[13:38:29.972]                 ...future.workdir <- getwd()
[13:38:29.972]             }
[13:38:29.972]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:29.972]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:29.972]         }
[13:38:29.972]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:29.972]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:29.972]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:29.972]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:29.972]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:29.972]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:29.972]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:29.972]             base::names(...future.oldOptions))
[13:38:29.972]     }
[13:38:29.972]     if (FALSE) {
[13:38:29.972]     }
[13:38:29.972]     else {
[13:38:29.972]         if (TRUE) {
[13:38:29.972]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:29.972]                 open = "w")
[13:38:29.972]         }
[13:38:29.972]         else {
[13:38:29.972]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:29.972]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:29.972]         }
[13:38:29.972]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:29.972]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:29.972]             base::sink(type = "output", split = FALSE)
[13:38:29.972]             base::close(...future.stdout)
[13:38:29.972]         }, add = TRUE)
[13:38:29.972]     }
[13:38:29.972]     ...future.frame <- base::sys.nframe()
[13:38:29.972]     ...future.conditions <- base::list()
[13:38:29.972]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:29.972]     if (FALSE) {
[13:38:29.972]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:29.972]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:29.972]     }
[13:38:29.972]     ...future.result <- base::tryCatch({
[13:38:29.972]         base::withCallingHandlers({
[13:38:29.972]             ...future.value <- base::withVisible(base::local({
[13:38:29.972]                 ...future.makeSendCondition <- base::local({
[13:38:29.972]                   sendCondition <- NULL
[13:38:29.972]                   function(frame = 1L) {
[13:38:29.972]                     if (is.function(sendCondition)) 
[13:38:29.972]                       return(sendCondition)
[13:38:29.972]                     ns <- getNamespace("parallel")
[13:38:29.972]                     if (exists("sendData", mode = "function", 
[13:38:29.972]                       envir = ns)) {
[13:38:29.972]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:29.972]                         envir = ns)
[13:38:29.972]                       envir <- sys.frame(frame)
[13:38:29.972]                       master <- NULL
[13:38:29.972]                       while (!identical(envir, .GlobalEnv) && 
[13:38:29.972]                         !identical(envir, emptyenv())) {
[13:38:29.972]                         if (exists("master", mode = "list", envir = envir, 
[13:38:29.972]                           inherits = FALSE)) {
[13:38:29.972]                           master <- get("master", mode = "list", 
[13:38:29.972]                             envir = envir, inherits = FALSE)
[13:38:29.972]                           if (inherits(master, c("SOCKnode", 
[13:38:29.972]                             "SOCK0node"))) {
[13:38:29.972]                             sendCondition <<- function(cond) {
[13:38:29.972]                               data <- list(type = "VALUE", value = cond, 
[13:38:29.972]                                 success = TRUE)
[13:38:29.972]                               parallel_sendData(master, data)
[13:38:29.972]                             }
[13:38:29.972]                             return(sendCondition)
[13:38:29.972]                           }
[13:38:29.972]                         }
[13:38:29.972]                         frame <- frame + 1L
[13:38:29.972]                         envir <- sys.frame(frame)
[13:38:29.972]                       }
[13:38:29.972]                     }
[13:38:29.972]                     sendCondition <<- function(cond) NULL
[13:38:29.972]                   }
[13:38:29.972]                 })
[13:38:29.972]                 withCallingHandlers({
[13:38:29.972]                   print(42)
[13:38:29.972]                 }, immediateCondition = function(cond) {
[13:38:29.972]                   sendCondition <- ...future.makeSendCondition()
[13:38:29.972]                   sendCondition(cond)
[13:38:29.972]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.972]                   {
[13:38:29.972]                     inherits <- base::inherits
[13:38:29.972]                     invokeRestart <- base::invokeRestart
[13:38:29.972]                     is.null <- base::is.null
[13:38:29.972]                     muffled <- FALSE
[13:38:29.972]                     if (inherits(cond, "message")) {
[13:38:29.972]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:29.972]                       if (muffled) 
[13:38:29.972]                         invokeRestart("muffleMessage")
[13:38:29.972]                     }
[13:38:29.972]                     else if (inherits(cond, "warning")) {
[13:38:29.972]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:29.972]                       if (muffled) 
[13:38:29.972]                         invokeRestart("muffleWarning")
[13:38:29.972]                     }
[13:38:29.972]                     else if (inherits(cond, "condition")) {
[13:38:29.972]                       if (!is.null(pattern)) {
[13:38:29.972]                         computeRestarts <- base::computeRestarts
[13:38:29.972]                         grepl <- base::grepl
[13:38:29.972]                         restarts <- computeRestarts(cond)
[13:38:29.972]                         for (restart in restarts) {
[13:38:29.972]                           name <- restart$name
[13:38:29.972]                           if (is.null(name)) 
[13:38:29.972]                             next
[13:38:29.972]                           if (!grepl(pattern, name)) 
[13:38:29.972]                             next
[13:38:29.972]                           invokeRestart(restart)
[13:38:29.972]                           muffled <- TRUE
[13:38:29.972]                           break
[13:38:29.972]                         }
[13:38:29.972]                       }
[13:38:29.972]                     }
[13:38:29.972]                     invisible(muffled)
[13:38:29.972]                   }
[13:38:29.972]                   muffleCondition(cond)
[13:38:29.972]                 })
[13:38:29.972]             }))
[13:38:29.972]             future::FutureResult(value = ...future.value$value, 
[13:38:29.972]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.972]                   ...future.rng), globalenv = if (FALSE) 
[13:38:29.972]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:29.972]                     ...future.globalenv.names))
[13:38:29.972]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:29.972]         }, condition = base::local({
[13:38:29.972]             c <- base::c
[13:38:29.972]             inherits <- base::inherits
[13:38:29.972]             invokeRestart <- base::invokeRestart
[13:38:29.972]             length <- base::length
[13:38:29.972]             list <- base::list
[13:38:29.972]             seq.int <- base::seq.int
[13:38:29.972]             signalCondition <- base::signalCondition
[13:38:29.972]             sys.calls <- base::sys.calls
[13:38:29.972]             `[[` <- base::`[[`
[13:38:29.972]             `+` <- base::`+`
[13:38:29.972]             `<<-` <- base::`<<-`
[13:38:29.972]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:29.972]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:29.972]                   3L)]
[13:38:29.972]             }
[13:38:29.972]             function(cond) {
[13:38:29.972]                 is_error <- inherits(cond, "error")
[13:38:29.972]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:29.972]                   NULL)
[13:38:29.972]                 if (is_error) {
[13:38:29.972]                   sessionInformation <- function() {
[13:38:29.972]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:29.972]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:29.972]                       search = base::search(), system = base::Sys.info())
[13:38:29.972]                   }
[13:38:29.972]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.972]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:29.972]                     cond$call), session = sessionInformation(), 
[13:38:29.972]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:29.972]                   signalCondition(cond)
[13:38:29.972]                 }
[13:38:29.972]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:29.972]                 "immediateCondition"))) {
[13:38:29.972]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:29.972]                   ...future.conditions[[length(...future.conditions) + 
[13:38:29.972]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:29.972]                   if (TRUE && !signal) {
[13:38:29.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.972]                     {
[13:38:29.972]                       inherits <- base::inherits
[13:38:29.972]                       invokeRestart <- base::invokeRestart
[13:38:29.972]                       is.null <- base::is.null
[13:38:29.972]                       muffled <- FALSE
[13:38:29.972]                       if (inherits(cond, "message")) {
[13:38:29.972]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.972]                         if (muffled) 
[13:38:29.972]                           invokeRestart("muffleMessage")
[13:38:29.972]                       }
[13:38:29.972]                       else if (inherits(cond, "warning")) {
[13:38:29.972]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.972]                         if (muffled) 
[13:38:29.972]                           invokeRestart("muffleWarning")
[13:38:29.972]                       }
[13:38:29.972]                       else if (inherits(cond, "condition")) {
[13:38:29.972]                         if (!is.null(pattern)) {
[13:38:29.972]                           computeRestarts <- base::computeRestarts
[13:38:29.972]                           grepl <- base::grepl
[13:38:29.972]                           restarts <- computeRestarts(cond)
[13:38:29.972]                           for (restart in restarts) {
[13:38:29.972]                             name <- restart$name
[13:38:29.972]                             if (is.null(name)) 
[13:38:29.972]                               next
[13:38:29.972]                             if (!grepl(pattern, name)) 
[13:38:29.972]                               next
[13:38:29.972]                             invokeRestart(restart)
[13:38:29.972]                             muffled <- TRUE
[13:38:29.972]                             break
[13:38:29.972]                           }
[13:38:29.972]                         }
[13:38:29.972]                       }
[13:38:29.972]                       invisible(muffled)
[13:38:29.972]                     }
[13:38:29.972]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.972]                   }
[13:38:29.972]                 }
[13:38:29.972]                 else {
[13:38:29.972]                   if (TRUE) {
[13:38:29.972]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:29.972]                     {
[13:38:29.972]                       inherits <- base::inherits
[13:38:29.972]                       invokeRestart <- base::invokeRestart
[13:38:29.972]                       is.null <- base::is.null
[13:38:29.972]                       muffled <- FALSE
[13:38:29.972]                       if (inherits(cond, "message")) {
[13:38:29.972]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:29.972]                         if (muffled) 
[13:38:29.972]                           invokeRestart("muffleMessage")
[13:38:29.972]                       }
[13:38:29.972]                       else if (inherits(cond, "warning")) {
[13:38:29.972]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:29.972]                         if (muffled) 
[13:38:29.972]                           invokeRestart("muffleWarning")
[13:38:29.972]                       }
[13:38:29.972]                       else if (inherits(cond, "condition")) {
[13:38:29.972]                         if (!is.null(pattern)) {
[13:38:29.972]                           computeRestarts <- base::computeRestarts
[13:38:29.972]                           grepl <- base::grepl
[13:38:29.972]                           restarts <- computeRestarts(cond)
[13:38:29.972]                           for (restart in restarts) {
[13:38:29.972]                             name <- restart$name
[13:38:29.972]                             if (is.null(name)) 
[13:38:29.972]                               next
[13:38:29.972]                             if (!grepl(pattern, name)) 
[13:38:29.972]                               next
[13:38:29.972]                             invokeRestart(restart)
[13:38:29.972]                             muffled <- TRUE
[13:38:29.972]                             break
[13:38:29.972]                           }
[13:38:29.972]                         }
[13:38:29.972]                       }
[13:38:29.972]                       invisible(muffled)
[13:38:29.972]                     }
[13:38:29.972]                     muffleCondition(cond, pattern = "^muffle")
[13:38:29.972]                   }
[13:38:29.972]                 }
[13:38:29.972]             }
[13:38:29.972]         }))
[13:38:29.972]     }, error = function(ex) {
[13:38:29.972]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:29.972]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:29.972]                 ...future.rng), started = ...future.startTime, 
[13:38:29.972]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:29.972]             version = "1.8"), class = "FutureResult")
[13:38:29.972]     }, finally = {
[13:38:29.972]         if (!identical(...future.workdir, getwd())) 
[13:38:29.972]             setwd(...future.workdir)
[13:38:29.972]         {
[13:38:29.972]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:29.972]                 ...future.oldOptions$nwarnings <- NULL
[13:38:29.972]             }
[13:38:29.972]             base::options(...future.oldOptions)
[13:38:29.972]             if (.Platform$OS.type == "windows") {
[13:38:29.972]                 old_names <- names(...future.oldEnvVars)
[13:38:29.972]                 envs <- base::Sys.getenv()
[13:38:29.972]                 names <- names(envs)
[13:38:29.972]                 common <- intersect(names, old_names)
[13:38:29.972]                 added <- setdiff(names, old_names)
[13:38:29.972]                 removed <- setdiff(old_names, names)
[13:38:29.972]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:29.972]                   envs[common]]
[13:38:29.972]                 NAMES <- toupper(changed)
[13:38:29.972]                 args <- list()
[13:38:29.972]                 for (kk in seq_along(NAMES)) {
[13:38:29.972]                   name <- changed[[kk]]
[13:38:29.972]                   NAME <- NAMES[[kk]]
[13:38:29.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.972]                     next
[13:38:29.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.972]                 }
[13:38:29.972]                 NAMES <- toupper(added)
[13:38:29.972]                 for (kk in seq_along(NAMES)) {
[13:38:29.972]                   name <- added[[kk]]
[13:38:29.972]                   NAME <- NAMES[[kk]]
[13:38:29.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.972]                     next
[13:38:29.972]                   args[[name]] <- ""
[13:38:29.972]                 }
[13:38:29.972]                 NAMES <- toupper(removed)
[13:38:29.972]                 for (kk in seq_along(NAMES)) {
[13:38:29.972]                   name <- removed[[kk]]
[13:38:29.972]                   NAME <- NAMES[[kk]]
[13:38:29.972]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:29.972]                     next
[13:38:29.972]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:29.972]                 }
[13:38:29.972]                 if (length(args) > 0) 
[13:38:29.972]                   base::do.call(base::Sys.setenv, args = args)
[13:38:29.972]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:29.972]             }
[13:38:29.972]             else {
[13:38:29.972]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:29.972]             }
[13:38:29.972]             {
[13:38:29.972]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:29.972]                   0L) {
[13:38:29.972]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:29.972]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:29.972]                   base::options(opts)
[13:38:29.972]                 }
[13:38:29.972]                 {
[13:38:29.972]                   {
[13:38:29.972]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:29.972]                     NULL
[13:38:29.972]                   }
[13:38:29.972]                   options(future.plan = NULL)
[13:38:29.972]                   if (is.na(NA_character_)) 
[13:38:29.972]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:29.972]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:29.972]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:29.972]                     .init = FALSE)
[13:38:29.972]                 }
[13:38:29.972]             }
[13:38:29.972]         }
[13:38:29.972]     })
[13:38:29.972]     if (TRUE) {
[13:38:29.972]         base::sink(type = "output", split = FALSE)
[13:38:29.972]         if (TRUE) {
[13:38:29.972]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:29.972]         }
[13:38:29.972]         else {
[13:38:29.972]             ...future.result["stdout"] <- base::list(NULL)
[13:38:29.972]         }
[13:38:29.972]         base::close(...future.stdout)
[13:38:29.972]         ...future.stdout <- NULL
[13:38:29.972]     }
[13:38:29.972]     ...future.result$conditions <- ...future.conditions
[13:38:29.972]     ...future.result$finished <- base::Sys.time()
[13:38:29.972]     ...future.result
[13:38:29.972] }
[13:38:29.975] MultisessionFuture started
[13:38:29.975] - Launch lazy future ... done
[13:38:29.975] run() for ‘MultisessionFuture’ ... done
[13:38:29.975] result() for ClusterFuture ...
[13:38:29.975] receiveMessageFromWorker() for ClusterFuture ...
[13:38:29.976] - Validating connection of MultisessionFuture
[13:38:29.977] - received message: FutureResult
[13:38:29.977] - Received FutureResult
[13:38:29.977] - Erased future from FutureRegistry
[13:38:29.977] result() for ClusterFuture ...
[13:38:29.977] - result already collected: FutureResult
[13:38:29.977] result() for ClusterFuture ... done
[13:38:29.977] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:29.977] result() for ClusterFuture ... done
[13:38:29.977] result() for ClusterFuture ...
[13:38:29.978] - result already collected: FutureResult
[13:38:29.978] result() for ClusterFuture ... done
[13:38:29.978] result() for ClusterFuture ...
[13:38:29.978] - result already collected: FutureResult
[13:38:29.978] result() for ClusterFuture ... done
[1] 42
[13:38:29.978] result() for ClusterFuture ...
[13:38:29.978] - result already collected: FutureResult
[13:38:29.978] result() for ClusterFuture ... done
- stdout = NA
[13:38:29.978] getGlobalsAndPackages() ...
[13:38:29.979] Searching for globals...
[13:38:29.981] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:29.982] Searching for globals ... DONE
[13:38:29.982] Resolving globals: FALSE
[13:38:29.982] 
[13:38:29.982] - packages: [1] ‘utils’
[13:38:29.982] getGlobalsAndPackages() ... DONE
[13:38:29.983] run() for ‘Future’ ...
[13:38:29.983] - state: ‘created’
[13:38:29.983] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:29.997] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:29.997] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:29.997]   - Field: ‘node’
[13:38:29.997]   - Field: ‘label’
[13:38:29.997]   - Field: ‘local’
[13:38:29.997]   - Field: ‘owner’
[13:38:29.997]   - Field: ‘envir’
[13:38:29.997]   - Field: ‘workers’
[13:38:29.997]   - Field: ‘packages’
[13:38:29.997]   - Field: ‘gc’
[13:38:29.998]   - Field: ‘conditions’
[13:38:29.998]   - Field: ‘persistent’
[13:38:30.000]   - Field: ‘expr’
[13:38:30.000]   - Field: ‘uuid’
[13:38:30.000]   - Field: ‘seed’
[13:38:30.000]   - Field: ‘version’
[13:38:30.000]   - Field: ‘result’
[13:38:30.000]   - Field: ‘asynchronous’
[13:38:30.000]   - Field: ‘calls’
[13:38:30.000]   - Field: ‘globals’
[13:38:30.001]   - Field: ‘stdout’
[13:38:30.001]   - Field: ‘earlySignal’
[13:38:30.001]   - Field: ‘lazy’
[13:38:30.001]   - Field: ‘state’
[13:38:30.001] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:30.001] - Launch lazy future ...
[13:38:30.001] Packages needed by the future expression (n = 1): ‘utils’
[13:38:30.001] Packages needed by future strategies (n = 0): <none>
[13:38:30.002] {
[13:38:30.002]     {
[13:38:30.002]         {
[13:38:30.002]             ...future.startTime <- base::Sys.time()
[13:38:30.002]             {
[13:38:30.002]                 {
[13:38:30.002]                   {
[13:38:30.002]                     {
[13:38:30.002]                       {
[13:38:30.002]                         base::local({
[13:38:30.002]                           has_future <- base::requireNamespace("future", 
[13:38:30.002]                             quietly = TRUE)
[13:38:30.002]                           if (has_future) {
[13:38:30.002]                             ns <- base::getNamespace("future")
[13:38:30.002]                             version <- ns[[".package"]][["version"]]
[13:38:30.002]                             if (is.null(version)) 
[13:38:30.002]                               version <- utils::packageVersion("future")
[13:38:30.002]                           }
[13:38:30.002]                           else {
[13:38:30.002]                             version <- NULL
[13:38:30.002]                           }
[13:38:30.002]                           if (!has_future || version < "1.8.0") {
[13:38:30.002]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:30.002]                               "", base::R.version$version.string), 
[13:38:30.002]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:30.002]                                 base::R.version$platform, 8 * 
[13:38:30.002]                                   base::.Machine$sizeof.pointer), 
[13:38:30.002]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:30.002]                                 "release", "version")], collapse = " "), 
[13:38:30.002]                               hostname = base::Sys.info()[["nodename"]])
[13:38:30.002]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:30.002]                               info)
[13:38:30.002]                             info <- base::paste(info, collapse = "; ")
[13:38:30.002]                             if (!has_future) {
[13:38:30.002]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:30.002]                                 info)
[13:38:30.002]                             }
[13:38:30.002]                             else {
[13:38:30.002]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:30.002]                                 info, version)
[13:38:30.002]                             }
[13:38:30.002]                             base::stop(msg)
[13:38:30.002]                           }
[13:38:30.002]                         })
[13:38:30.002]                       }
[13:38:30.002]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:30.002]                       base::options(mc.cores = 1L)
[13:38:30.002]                     }
[13:38:30.002]                     base::local({
[13:38:30.002]                       for (pkg in "utils") {
[13:38:30.002]                         base::loadNamespace(pkg)
[13:38:30.002]                         base::library(pkg, character.only = TRUE)
[13:38:30.002]                       }
[13:38:30.002]                     })
[13:38:30.002]                   }
[13:38:30.002]                   ...future.strategy.old <- future::plan("list")
[13:38:30.002]                   options(future.plan = NULL)
[13:38:30.002]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.002]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:30.002]                 }
[13:38:30.002]                 ...future.workdir <- getwd()
[13:38:30.002]             }
[13:38:30.002]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:30.002]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:30.002]         }
[13:38:30.002]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:30.002]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:30.002]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:30.002]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:30.002]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:30.002]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:30.002]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:30.002]             base::names(...future.oldOptions))
[13:38:30.002]     }
[13:38:30.002]     if (TRUE) {
[13:38:30.002]     }
[13:38:30.002]     else {
[13:38:30.002]         if (NA) {
[13:38:30.002]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:30.002]                 open = "w")
[13:38:30.002]         }
[13:38:30.002]         else {
[13:38:30.002]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:30.002]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:30.002]         }
[13:38:30.002]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:30.002]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:30.002]             base::sink(type = "output", split = FALSE)
[13:38:30.002]             base::close(...future.stdout)
[13:38:30.002]         }, add = TRUE)
[13:38:30.002]     }
[13:38:30.002]     ...future.frame <- base::sys.nframe()
[13:38:30.002]     ...future.conditions <- base::list()
[13:38:30.002]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:30.002]     if (FALSE) {
[13:38:30.002]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:30.002]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:30.002]     }
[13:38:30.002]     ...future.result <- base::tryCatch({
[13:38:30.002]         base::withCallingHandlers({
[13:38:30.002]             ...future.value <- base::withVisible(base::local({
[13:38:30.002]                 ...future.makeSendCondition <- base::local({
[13:38:30.002]                   sendCondition <- NULL
[13:38:30.002]                   function(frame = 1L) {
[13:38:30.002]                     if (is.function(sendCondition)) 
[13:38:30.002]                       return(sendCondition)
[13:38:30.002]                     ns <- getNamespace("parallel")
[13:38:30.002]                     if (exists("sendData", mode = "function", 
[13:38:30.002]                       envir = ns)) {
[13:38:30.002]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:30.002]                         envir = ns)
[13:38:30.002]                       envir <- sys.frame(frame)
[13:38:30.002]                       master <- NULL
[13:38:30.002]                       while (!identical(envir, .GlobalEnv) && 
[13:38:30.002]                         !identical(envir, emptyenv())) {
[13:38:30.002]                         if (exists("master", mode = "list", envir = envir, 
[13:38:30.002]                           inherits = FALSE)) {
[13:38:30.002]                           master <- get("master", mode = "list", 
[13:38:30.002]                             envir = envir, inherits = FALSE)
[13:38:30.002]                           if (inherits(master, c("SOCKnode", 
[13:38:30.002]                             "SOCK0node"))) {
[13:38:30.002]                             sendCondition <<- function(cond) {
[13:38:30.002]                               data <- list(type = "VALUE", value = cond, 
[13:38:30.002]                                 success = TRUE)
[13:38:30.002]                               parallel_sendData(master, data)
[13:38:30.002]                             }
[13:38:30.002]                             return(sendCondition)
[13:38:30.002]                           }
[13:38:30.002]                         }
[13:38:30.002]                         frame <- frame + 1L
[13:38:30.002]                         envir <- sys.frame(frame)
[13:38:30.002]                       }
[13:38:30.002]                     }
[13:38:30.002]                     sendCondition <<- function(cond) NULL
[13:38:30.002]                   }
[13:38:30.002]                 })
[13:38:30.002]                 withCallingHandlers({
[13:38:30.002]                   {
[13:38:30.002]                     print(1:50)
[13:38:30.002]                     str(1:50)
[13:38:30.002]                     cat(letters, sep = "-")
[13:38:30.002]                     cat(1:6, collapse = "\n")
[13:38:30.002]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:30.002]                     42L
[13:38:30.002]                   }
[13:38:30.002]                 }, immediateCondition = function(cond) {
[13:38:30.002]                   sendCondition <- ...future.makeSendCondition()
[13:38:30.002]                   sendCondition(cond)
[13:38:30.002]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.002]                   {
[13:38:30.002]                     inherits <- base::inherits
[13:38:30.002]                     invokeRestart <- base::invokeRestart
[13:38:30.002]                     is.null <- base::is.null
[13:38:30.002]                     muffled <- FALSE
[13:38:30.002]                     if (inherits(cond, "message")) {
[13:38:30.002]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:30.002]                       if (muffled) 
[13:38:30.002]                         invokeRestart("muffleMessage")
[13:38:30.002]                     }
[13:38:30.002]                     else if (inherits(cond, "warning")) {
[13:38:30.002]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:30.002]                       if (muffled) 
[13:38:30.002]                         invokeRestart("muffleWarning")
[13:38:30.002]                     }
[13:38:30.002]                     else if (inherits(cond, "condition")) {
[13:38:30.002]                       if (!is.null(pattern)) {
[13:38:30.002]                         computeRestarts <- base::computeRestarts
[13:38:30.002]                         grepl <- base::grepl
[13:38:30.002]                         restarts <- computeRestarts(cond)
[13:38:30.002]                         for (restart in restarts) {
[13:38:30.002]                           name <- restart$name
[13:38:30.002]                           if (is.null(name)) 
[13:38:30.002]                             next
[13:38:30.002]                           if (!grepl(pattern, name)) 
[13:38:30.002]                             next
[13:38:30.002]                           invokeRestart(restart)
[13:38:30.002]                           muffled <- TRUE
[13:38:30.002]                           break
[13:38:30.002]                         }
[13:38:30.002]                       }
[13:38:30.002]                     }
[13:38:30.002]                     invisible(muffled)
[13:38:30.002]                   }
[13:38:30.002]                   muffleCondition(cond)
[13:38:30.002]                 })
[13:38:30.002]             }))
[13:38:30.002]             future::FutureResult(value = ...future.value$value, 
[13:38:30.002]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.002]                   ...future.rng), globalenv = if (FALSE) 
[13:38:30.002]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:30.002]                     ...future.globalenv.names))
[13:38:30.002]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:30.002]         }, condition = base::local({
[13:38:30.002]             c <- base::c
[13:38:30.002]             inherits <- base::inherits
[13:38:30.002]             invokeRestart <- base::invokeRestart
[13:38:30.002]             length <- base::length
[13:38:30.002]             list <- base::list
[13:38:30.002]             seq.int <- base::seq.int
[13:38:30.002]             signalCondition <- base::signalCondition
[13:38:30.002]             sys.calls <- base::sys.calls
[13:38:30.002]             `[[` <- base::`[[`
[13:38:30.002]             `+` <- base::`+`
[13:38:30.002]             `<<-` <- base::`<<-`
[13:38:30.002]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:30.002]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:30.002]                   3L)]
[13:38:30.002]             }
[13:38:30.002]             function(cond) {
[13:38:30.002]                 is_error <- inherits(cond, "error")
[13:38:30.002]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:30.002]                   NULL)
[13:38:30.002]                 if (is_error) {
[13:38:30.002]                   sessionInformation <- function() {
[13:38:30.002]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:30.002]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:30.002]                       search = base::search(), system = base::Sys.info())
[13:38:30.002]                   }
[13:38:30.002]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.002]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:30.002]                     cond$call), session = sessionInformation(), 
[13:38:30.002]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:30.002]                   signalCondition(cond)
[13:38:30.002]                 }
[13:38:30.002]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:30.002]                 "immediateCondition"))) {
[13:38:30.002]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:30.002]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.002]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:30.002]                   if (TRUE && !signal) {
[13:38:30.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.002]                     {
[13:38:30.002]                       inherits <- base::inherits
[13:38:30.002]                       invokeRestart <- base::invokeRestart
[13:38:30.002]                       is.null <- base::is.null
[13:38:30.002]                       muffled <- FALSE
[13:38:30.002]                       if (inherits(cond, "message")) {
[13:38:30.002]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.002]                         if (muffled) 
[13:38:30.002]                           invokeRestart("muffleMessage")
[13:38:30.002]                       }
[13:38:30.002]                       else if (inherits(cond, "warning")) {
[13:38:30.002]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.002]                         if (muffled) 
[13:38:30.002]                           invokeRestart("muffleWarning")
[13:38:30.002]                       }
[13:38:30.002]                       else if (inherits(cond, "condition")) {
[13:38:30.002]                         if (!is.null(pattern)) {
[13:38:30.002]                           computeRestarts <- base::computeRestarts
[13:38:30.002]                           grepl <- base::grepl
[13:38:30.002]                           restarts <- computeRestarts(cond)
[13:38:30.002]                           for (restart in restarts) {
[13:38:30.002]                             name <- restart$name
[13:38:30.002]                             if (is.null(name)) 
[13:38:30.002]                               next
[13:38:30.002]                             if (!grepl(pattern, name)) 
[13:38:30.002]                               next
[13:38:30.002]                             invokeRestart(restart)
[13:38:30.002]                             muffled <- TRUE
[13:38:30.002]                             break
[13:38:30.002]                           }
[13:38:30.002]                         }
[13:38:30.002]                       }
[13:38:30.002]                       invisible(muffled)
[13:38:30.002]                     }
[13:38:30.002]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.002]                   }
[13:38:30.002]                 }
[13:38:30.002]                 else {
[13:38:30.002]                   if (TRUE) {
[13:38:30.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.002]                     {
[13:38:30.002]                       inherits <- base::inherits
[13:38:30.002]                       invokeRestart <- base::invokeRestart
[13:38:30.002]                       is.null <- base::is.null
[13:38:30.002]                       muffled <- FALSE
[13:38:30.002]                       if (inherits(cond, "message")) {
[13:38:30.002]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.002]                         if (muffled) 
[13:38:30.002]                           invokeRestart("muffleMessage")
[13:38:30.002]                       }
[13:38:30.002]                       else if (inherits(cond, "warning")) {
[13:38:30.002]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.002]                         if (muffled) 
[13:38:30.002]                           invokeRestart("muffleWarning")
[13:38:30.002]                       }
[13:38:30.002]                       else if (inherits(cond, "condition")) {
[13:38:30.002]                         if (!is.null(pattern)) {
[13:38:30.002]                           computeRestarts <- base::computeRestarts
[13:38:30.002]                           grepl <- base::grepl
[13:38:30.002]                           restarts <- computeRestarts(cond)
[13:38:30.002]                           for (restart in restarts) {
[13:38:30.002]                             name <- restart$name
[13:38:30.002]                             if (is.null(name)) 
[13:38:30.002]                               next
[13:38:30.002]                             if (!grepl(pattern, name)) 
[13:38:30.002]                               next
[13:38:30.002]                             invokeRestart(restart)
[13:38:30.002]                             muffled <- TRUE
[13:38:30.002]                             break
[13:38:30.002]                           }
[13:38:30.002]                         }
[13:38:30.002]                       }
[13:38:30.002]                       invisible(muffled)
[13:38:30.002]                     }
[13:38:30.002]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.002]                   }
[13:38:30.002]                 }
[13:38:30.002]             }
[13:38:30.002]         }))
[13:38:30.002]     }, error = function(ex) {
[13:38:30.002]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:30.002]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.002]                 ...future.rng), started = ...future.startTime, 
[13:38:30.002]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:30.002]             version = "1.8"), class = "FutureResult")
[13:38:30.002]     }, finally = {
[13:38:30.002]         if (!identical(...future.workdir, getwd())) 
[13:38:30.002]             setwd(...future.workdir)
[13:38:30.002]         {
[13:38:30.002]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:30.002]                 ...future.oldOptions$nwarnings <- NULL
[13:38:30.002]             }
[13:38:30.002]             base::options(...future.oldOptions)
[13:38:30.002]             if (.Platform$OS.type == "windows") {
[13:38:30.002]                 old_names <- names(...future.oldEnvVars)
[13:38:30.002]                 envs <- base::Sys.getenv()
[13:38:30.002]                 names <- names(envs)
[13:38:30.002]                 common <- intersect(names, old_names)
[13:38:30.002]                 added <- setdiff(names, old_names)
[13:38:30.002]                 removed <- setdiff(old_names, names)
[13:38:30.002]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:30.002]                   envs[common]]
[13:38:30.002]                 NAMES <- toupper(changed)
[13:38:30.002]                 args <- list()
[13:38:30.002]                 for (kk in seq_along(NAMES)) {
[13:38:30.002]                   name <- changed[[kk]]
[13:38:30.002]                   NAME <- NAMES[[kk]]
[13:38:30.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.002]                     next
[13:38:30.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.002]                 }
[13:38:30.002]                 NAMES <- toupper(added)
[13:38:30.002]                 for (kk in seq_along(NAMES)) {
[13:38:30.002]                   name <- added[[kk]]
[13:38:30.002]                   NAME <- NAMES[[kk]]
[13:38:30.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.002]                     next
[13:38:30.002]                   args[[name]] <- ""
[13:38:30.002]                 }
[13:38:30.002]                 NAMES <- toupper(removed)
[13:38:30.002]                 for (kk in seq_along(NAMES)) {
[13:38:30.002]                   name <- removed[[kk]]
[13:38:30.002]                   NAME <- NAMES[[kk]]
[13:38:30.002]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.002]                     next
[13:38:30.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.002]                 }
[13:38:30.002]                 if (length(args) > 0) 
[13:38:30.002]                   base::do.call(base::Sys.setenv, args = args)
[13:38:30.002]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:30.002]             }
[13:38:30.002]             else {
[13:38:30.002]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:30.002]             }
[13:38:30.002]             {
[13:38:30.002]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:30.002]                   0L) {
[13:38:30.002]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:30.002]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:30.002]                   base::options(opts)
[13:38:30.002]                 }
[13:38:30.002]                 {
[13:38:30.002]                   {
[13:38:30.002]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:30.002]                     NULL
[13:38:30.002]                   }
[13:38:30.002]                   options(future.plan = NULL)
[13:38:30.002]                   if (is.na(NA_character_)) 
[13:38:30.002]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.002]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:30.002]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:30.002]                     .init = FALSE)
[13:38:30.002]                 }
[13:38:30.002]             }
[13:38:30.002]         }
[13:38:30.002]     })
[13:38:30.002]     if (FALSE) {
[13:38:30.002]         base::sink(type = "output", split = FALSE)
[13:38:30.002]         if (NA) {
[13:38:30.002]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:30.002]         }
[13:38:30.002]         else {
[13:38:30.002]             ...future.result["stdout"] <- base::list(NULL)
[13:38:30.002]         }
[13:38:30.002]         base::close(...future.stdout)
[13:38:30.002]         ...future.stdout <- NULL
[13:38:30.002]     }
[13:38:30.002]     ...future.result$conditions <- ...future.conditions
[13:38:30.002]     ...future.result$finished <- base::Sys.time()
[13:38:30.002]     ...future.result
[13:38:30.002] }
[13:38:30.005] MultisessionFuture started
[13:38:30.005] - Launch lazy future ... done
[13:38:30.005] run() for ‘MultisessionFuture’ ... done
[13:38:30.005] result() for ClusterFuture ...
[13:38:30.005] receiveMessageFromWorker() for ClusterFuture ...
[13:38:30.005] - Validating connection of MultisessionFuture
[13:38:30.048] - received message: FutureResult
[13:38:30.049] - Received FutureResult
[13:38:30.049] - Erased future from FutureRegistry
[13:38:30.049] result() for ClusterFuture ...
[13:38:30.049] - result already collected: FutureResult
[13:38:30.049] result() for ClusterFuture ... done
[13:38:30.049] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:30.049] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 13:38:30"
 $ finished    : POSIXct[1:1], format: "2025-01-07 13:38:30"
 $ session_uuid: chr "b6b0fdf8-e44b-8abe-f924-81309e53fd71"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "57e9b94e809f"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "57e9b94e809f" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 91055
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 13:38:29"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[13:38:30.057] result() for ClusterFuture ...
[13:38:30.057] - result already collected: FutureResult
[13:38:30.057] result() for ClusterFuture ... done
[13:38:30.057] result() for ClusterFuture ...
[13:38:30.057] - result already collected: FutureResult
[13:38:30.057] result() for ClusterFuture ... done
[13:38:30.058] getGlobalsAndPackages() ...
[13:38:30.058] Searching for globals...
[13:38:30.060] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[13:38:30.061] Searching for globals ... DONE
[13:38:30.061] Resolving globals: FALSE
[13:38:30.061] 
[13:38:30.061] - packages: [1] ‘utils’
[13:38:30.061] getGlobalsAndPackages() ... DONE
[13:38:30.062] run() for ‘Future’ ...
[13:38:30.062] - state: ‘created’
[13:38:30.062] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:30.076] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:30.076] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:30.076]   - Field: ‘node’
[13:38:30.076]   - Field: ‘label’
[13:38:30.076]   - Field: ‘local’
[13:38:30.076]   - Field: ‘owner’
[13:38:30.076]   - Field: ‘envir’
[13:38:30.076]   - Field: ‘workers’
[13:38:30.076]   - Field: ‘packages’
[13:38:30.076]   - Field: ‘gc’
[13:38:30.077]   - Field: ‘conditions’
[13:38:30.077]   - Field: ‘persistent’
[13:38:30.077]   - Field: ‘expr’
[13:38:30.077]   - Field: ‘uuid’
[13:38:30.077]   - Field: ‘seed’
[13:38:30.077]   - Field: ‘version’
[13:38:30.077]   - Field: ‘result’
[13:38:30.077]   - Field: ‘asynchronous’
[13:38:30.077]   - Field: ‘calls’
[13:38:30.077]   - Field: ‘globals’
[13:38:30.077]   - Field: ‘stdout’
[13:38:30.078]   - Field: ‘earlySignal’
[13:38:30.078]   - Field: ‘lazy’
[13:38:30.078]   - Field: ‘state’
[13:38:30.078] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:30.078] - Launch lazy future ...
[13:38:30.078] Packages needed by the future expression (n = 1): ‘utils’
[13:38:30.078] Packages needed by future strategies (n = 0): <none>
[13:38:30.079] {
[13:38:30.079]     {
[13:38:30.079]         {
[13:38:30.079]             ...future.startTime <- base::Sys.time()
[13:38:30.079]             {
[13:38:30.079]                 {
[13:38:30.079]                   {
[13:38:30.079]                     {
[13:38:30.079]                       {
[13:38:30.079]                         base::local({
[13:38:30.079]                           has_future <- base::requireNamespace("future", 
[13:38:30.079]                             quietly = TRUE)
[13:38:30.079]                           if (has_future) {
[13:38:30.079]                             ns <- base::getNamespace("future")
[13:38:30.079]                             version <- ns[[".package"]][["version"]]
[13:38:30.079]                             if (is.null(version)) 
[13:38:30.079]                               version <- utils::packageVersion("future")
[13:38:30.079]                           }
[13:38:30.079]                           else {
[13:38:30.079]                             version <- NULL
[13:38:30.079]                           }
[13:38:30.079]                           if (!has_future || version < "1.8.0") {
[13:38:30.079]                             info <- base::c(r_version = base::gsub("R version ", 
[13:38:30.079]                               "", base::R.version$version.string), 
[13:38:30.079]                               platform = base::sprintf("%s (%s-bit)", 
[13:38:30.079]                                 base::R.version$platform, 8 * 
[13:38:30.079]                                   base::.Machine$sizeof.pointer), 
[13:38:30.079]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:30.079]                                 "release", "version")], collapse = " "), 
[13:38:30.079]                               hostname = base::Sys.info()[["nodename"]])
[13:38:30.079]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:38:30.079]                               info)
[13:38:30.079]                             info <- base::paste(info, collapse = "; ")
[13:38:30.079]                             if (!has_future) {
[13:38:30.079]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:30.079]                                 info)
[13:38:30.079]                             }
[13:38:30.079]                             else {
[13:38:30.079]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:30.079]                                 info, version)
[13:38:30.079]                             }
[13:38:30.079]                             base::stop(msg)
[13:38:30.079]                           }
[13:38:30.079]                         })
[13:38:30.079]                       }
[13:38:30.079]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:30.079]                       base::options(mc.cores = 1L)
[13:38:30.079]                     }
[13:38:30.079]                     base::local({
[13:38:30.079]                       for (pkg in "utils") {
[13:38:30.079]                         base::loadNamespace(pkg)
[13:38:30.079]                         base::library(pkg, character.only = TRUE)
[13:38:30.079]                       }
[13:38:30.079]                     })
[13:38:30.079]                   }
[13:38:30.079]                   ...future.strategy.old <- future::plan("list")
[13:38:30.079]                   options(future.plan = NULL)
[13:38:30.079]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.079]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:30.079]                 }
[13:38:30.079]                 ...future.workdir <- getwd()
[13:38:30.079]             }
[13:38:30.079]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:30.079]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:30.079]         }
[13:38:30.079]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:30.079]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:30.079]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:30.079]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:30.079]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:30.079]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:30.079]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:30.079]             base::names(...future.oldOptions))
[13:38:30.079]     }
[13:38:30.079]     if (TRUE) {
[13:38:30.079]     }
[13:38:30.079]     else {
[13:38:30.079]         if (NA) {
[13:38:30.079]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:30.079]                 open = "w")
[13:38:30.079]         }
[13:38:30.079]         else {
[13:38:30.079]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:30.079]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:30.079]         }
[13:38:30.079]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:30.079]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:30.079]             base::sink(type = "output", split = FALSE)
[13:38:30.079]             base::close(...future.stdout)
[13:38:30.079]         }, add = TRUE)
[13:38:30.079]     }
[13:38:30.079]     ...future.frame <- base::sys.nframe()
[13:38:30.079]     ...future.conditions <- base::list()
[13:38:30.079]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:30.079]     if (FALSE) {
[13:38:30.079]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:30.079]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:30.079]     }
[13:38:30.079]     ...future.result <- base::tryCatch({
[13:38:30.079]         base::withCallingHandlers({
[13:38:30.079]             ...future.value <- base::withVisible(base::local({
[13:38:30.079]                 ...future.makeSendCondition <- base::local({
[13:38:30.079]                   sendCondition <- NULL
[13:38:30.079]                   function(frame = 1L) {
[13:38:30.079]                     if (is.function(sendCondition)) 
[13:38:30.079]                       return(sendCondition)
[13:38:30.079]                     ns <- getNamespace("parallel")
[13:38:30.079]                     if (exists("sendData", mode = "function", 
[13:38:30.079]                       envir = ns)) {
[13:38:30.079]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:30.079]                         envir = ns)
[13:38:30.079]                       envir <- sys.frame(frame)
[13:38:30.079]                       master <- NULL
[13:38:30.079]                       while (!identical(envir, .GlobalEnv) && 
[13:38:30.079]                         !identical(envir, emptyenv())) {
[13:38:30.079]                         if (exists("master", mode = "list", envir = envir, 
[13:38:30.079]                           inherits = FALSE)) {
[13:38:30.079]                           master <- get("master", mode = "list", 
[13:38:30.079]                             envir = envir, inherits = FALSE)
[13:38:30.079]                           if (inherits(master, c("SOCKnode", 
[13:38:30.079]                             "SOCK0node"))) {
[13:38:30.079]                             sendCondition <<- function(cond) {
[13:38:30.079]                               data <- list(type = "VALUE", value = cond, 
[13:38:30.079]                                 success = TRUE)
[13:38:30.079]                               parallel_sendData(master, data)
[13:38:30.079]                             }
[13:38:30.079]                             return(sendCondition)
[13:38:30.079]                           }
[13:38:30.079]                         }
[13:38:30.079]                         frame <- frame + 1L
[13:38:30.079]                         envir <- sys.frame(frame)
[13:38:30.079]                       }
[13:38:30.079]                     }
[13:38:30.079]                     sendCondition <<- function(cond) NULL
[13:38:30.079]                   }
[13:38:30.079]                 })
[13:38:30.079]                 withCallingHandlers({
[13:38:30.079]                   {
[13:38:30.079]                     print(1:50)
[13:38:30.079]                     str(1:50)
[13:38:30.079]                     cat(letters, sep = "-")
[13:38:30.079]                     cat(1:6, collapse = "\n")
[13:38:30.079]                     write.table(datasets::iris[1:10, ], sep = "\t")
[13:38:30.079]                     42L
[13:38:30.079]                   }
[13:38:30.079]                 }, immediateCondition = function(cond) {
[13:38:30.079]                   sendCondition <- ...future.makeSendCondition()
[13:38:30.079]                   sendCondition(cond)
[13:38:30.079]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.079]                   {
[13:38:30.079]                     inherits <- base::inherits
[13:38:30.079]                     invokeRestart <- base::invokeRestart
[13:38:30.079]                     is.null <- base::is.null
[13:38:30.079]                     muffled <- FALSE
[13:38:30.079]                     if (inherits(cond, "message")) {
[13:38:30.079]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:30.079]                       if (muffled) 
[13:38:30.079]                         invokeRestart("muffleMessage")
[13:38:30.079]                     }
[13:38:30.079]                     else if (inherits(cond, "warning")) {
[13:38:30.079]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:30.079]                       if (muffled) 
[13:38:30.079]                         invokeRestart("muffleWarning")
[13:38:30.079]                     }
[13:38:30.079]                     else if (inherits(cond, "condition")) {
[13:38:30.079]                       if (!is.null(pattern)) {
[13:38:30.079]                         computeRestarts <- base::computeRestarts
[13:38:30.079]                         grepl <- base::grepl
[13:38:30.079]                         restarts <- computeRestarts(cond)
[13:38:30.079]                         for (restart in restarts) {
[13:38:30.079]                           name <- restart$name
[13:38:30.079]                           if (is.null(name)) 
[13:38:30.079]                             next
[13:38:30.079]                           if (!grepl(pattern, name)) 
[13:38:30.079]                             next
[13:38:30.079]                           invokeRestart(restart)
[13:38:30.079]                           muffled <- TRUE
[13:38:30.079]                           break
[13:38:30.079]                         }
[13:38:30.079]                       }
[13:38:30.079]                     }
[13:38:30.079]                     invisible(muffled)
[13:38:30.079]                   }
[13:38:30.079]                   muffleCondition(cond)
[13:38:30.079]                 })
[13:38:30.079]             }))
[13:38:30.079]             future::FutureResult(value = ...future.value$value, 
[13:38:30.079]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.079]                   ...future.rng), globalenv = if (FALSE) 
[13:38:30.079]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:30.079]                     ...future.globalenv.names))
[13:38:30.079]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:30.079]         }, condition = base::local({
[13:38:30.079]             c <- base::c
[13:38:30.079]             inherits <- base::inherits
[13:38:30.079]             invokeRestart <- base::invokeRestart
[13:38:30.079]             length <- base::length
[13:38:30.079]             list <- base::list
[13:38:30.079]             seq.int <- base::seq.int
[13:38:30.079]             signalCondition <- base::signalCondition
[13:38:30.079]             sys.calls <- base::sys.calls
[13:38:30.079]             `[[` <- base::`[[`
[13:38:30.079]             `+` <- base::`+`
[13:38:30.079]             `<<-` <- base::`<<-`
[13:38:30.079]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:30.079]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:30.079]                   3L)]
[13:38:30.079]             }
[13:38:30.079]             function(cond) {
[13:38:30.079]                 is_error <- inherits(cond, "error")
[13:38:30.079]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:30.079]                   NULL)
[13:38:30.079]                 if (is_error) {
[13:38:30.079]                   sessionInformation <- function() {
[13:38:30.079]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:30.079]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:30.079]                       search = base::search(), system = base::Sys.info())
[13:38:30.079]                   }
[13:38:30.079]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.079]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:30.079]                     cond$call), session = sessionInformation(), 
[13:38:30.079]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:30.079]                   signalCondition(cond)
[13:38:30.079]                 }
[13:38:30.079]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:30.079]                 "immediateCondition"))) {
[13:38:30.079]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:30.079]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.079]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:30.079]                   if (TRUE && !signal) {
[13:38:30.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.079]                     {
[13:38:30.079]                       inherits <- base::inherits
[13:38:30.079]                       invokeRestart <- base::invokeRestart
[13:38:30.079]                       is.null <- base::is.null
[13:38:30.079]                       muffled <- FALSE
[13:38:30.079]                       if (inherits(cond, "message")) {
[13:38:30.079]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.079]                         if (muffled) 
[13:38:30.079]                           invokeRestart("muffleMessage")
[13:38:30.079]                       }
[13:38:30.079]                       else if (inherits(cond, "warning")) {
[13:38:30.079]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.079]                         if (muffled) 
[13:38:30.079]                           invokeRestart("muffleWarning")
[13:38:30.079]                       }
[13:38:30.079]                       else if (inherits(cond, "condition")) {
[13:38:30.079]                         if (!is.null(pattern)) {
[13:38:30.079]                           computeRestarts <- base::computeRestarts
[13:38:30.079]                           grepl <- base::grepl
[13:38:30.079]                           restarts <- computeRestarts(cond)
[13:38:30.079]                           for (restart in restarts) {
[13:38:30.079]                             name <- restart$name
[13:38:30.079]                             if (is.null(name)) 
[13:38:30.079]                               next
[13:38:30.079]                             if (!grepl(pattern, name)) 
[13:38:30.079]                               next
[13:38:30.079]                             invokeRestart(restart)
[13:38:30.079]                             muffled <- TRUE
[13:38:30.079]                             break
[13:38:30.079]                           }
[13:38:30.079]                         }
[13:38:30.079]                       }
[13:38:30.079]                       invisible(muffled)
[13:38:30.079]                     }
[13:38:30.079]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.079]                   }
[13:38:30.079]                 }
[13:38:30.079]                 else {
[13:38:30.079]                   if (TRUE) {
[13:38:30.079]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.079]                     {
[13:38:30.079]                       inherits <- base::inherits
[13:38:30.079]                       invokeRestart <- base::invokeRestart
[13:38:30.079]                       is.null <- base::is.null
[13:38:30.079]                       muffled <- FALSE
[13:38:30.079]                       if (inherits(cond, "message")) {
[13:38:30.079]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.079]                         if (muffled) 
[13:38:30.079]                           invokeRestart("muffleMessage")
[13:38:30.079]                       }
[13:38:30.079]                       else if (inherits(cond, "warning")) {
[13:38:30.079]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.079]                         if (muffled) 
[13:38:30.079]                           invokeRestart("muffleWarning")
[13:38:30.079]                       }
[13:38:30.079]                       else if (inherits(cond, "condition")) {
[13:38:30.079]                         if (!is.null(pattern)) {
[13:38:30.079]                           computeRestarts <- base::computeRestarts
[13:38:30.079]                           grepl <- base::grepl
[13:38:30.079]                           restarts <- computeRestarts(cond)
[13:38:30.079]                           for (restart in restarts) {
[13:38:30.079]                             name <- restart$name
[13:38:30.079]                             if (is.null(name)) 
[13:38:30.079]                               next
[13:38:30.079]                             if (!grepl(pattern, name)) 
[13:38:30.079]                               next
[13:38:30.079]                             invokeRestart(restart)
[13:38:30.079]                             muffled <- TRUE
[13:38:30.079]                             break
[13:38:30.079]                           }
[13:38:30.079]                         }
[13:38:30.079]                       }
[13:38:30.079]                       invisible(muffled)
[13:38:30.079]                     }
[13:38:30.079]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.079]                   }
[13:38:30.079]                 }
[13:38:30.079]             }
[13:38:30.079]         }))
[13:38:30.079]     }, error = function(ex) {
[13:38:30.079]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:30.079]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.079]                 ...future.rng), started = ...future.startTime, 
[13:38:30.079]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:30.079]             version = "1.8"), class = "FutureResult")
[13:38:30.079]     }, finally = {
[13:38:30.079]         if (!identical(...future.workdir, getwd())) 
[13:38:30.079]             setwd(...future.workdir)
[13:38:30.079]         {
[13:38:30.079]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:30.079]                 ...future.oldOptions$nwarnings <- NULL
[13:38:30.079]             }
[13:38:30.079]             base::options(...future.oldOptions)
[13:38:30.079]             if (.Platform$OS.type == "windows") {
[13:38:30.079]                 old_names <- names(...future.oldEnvVars)
[13:38:30.079]                 envs <- base::Sys.getenv()
[13:38:30.079]                 names <- names(envs)
[13:38:30.079]                 common <- intersect(names, old_names)
[13:38:30.079]                 added <- setdiff(names, old_names)
[13:38:30.079]                 removed <- setdiff(old_names, names)
[13:38:30.079]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:30.079]                   envs[common]]
[13:38:30.079]                 NAMES <- toupper(changed)
[13:38:30.079]                 args <- list()
[13:38:30.079]                 for (kk in seq_along(NAMES)) {
[13:38:30.079]                   name <- changed[[kk]]
[13:38:30.079]                   NAME <- NAMES[[kk]]
[13:38:30.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.079]                     next
[13:38:30.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.079]                 }
[13:38:30.079]                 NAMES <- toupper(added)
[13:38:30.079]                 for (kk in seq_along(NAMES)) {
[13:38:30.079]                   name <- added[[kk]]
[13:38:30.079]                   NAME <- NAMES[[kk]]
[13:38:30.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.079]                     next
[13:38:30.079]                   args[[name]] <- ""
[13:38:30.079]                 }
[13:38:30.079]                 NAMES <- toupper(removed)
[13:38:30.079]                 for (kk in seq_along(NAMES)) {
[13:38:30.079]                   name <- removed[[kk]]
[13:38:30.079]                   NAME <- NAMES[[kk]]
[13:38:30.079]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.079]                     next
[13:38:30.079]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.079]                 }
[13:38:30.079]                 if (length(args) > 0) 
[13:38:30.079]                   base::do.call(base::Sys.setenv, args = args)
[13:38:30.079]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:30.079]             }
[13:38:30.079]             else {
[13:38:30.079]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:30.079]             }
[13:38:30.079]             {
[13:38:30.079]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:30.079]                   0L) {
[13:38:30.079]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:30.079]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:30.079]                   base::options(opts)
[13:38:30.079]                 }
[13:38:30.079]                 {
[13:38:30.079]                   {
[13:38:30.079]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:30.079]                     NULL
[13:38:30.079]                   }
[13:38:30.079]                   options(future.plan = NULL)
[13:38:30.079]                   if (is.na(NA_character_)) 
[13:38:30.079]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.079]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:30.079]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:30.079]                     .init = FALSE)
[13:38:30.079]                 }
[13:38:30.079]             }
[13:38:30.079]         }
[13:38:30.079]     })
[13:38:30.079]     if (FALSE) {
[13:38:30.079]         base::sink(type = "output", split = FALSE)
[13:38:30.079]         if (NA) {
[13:38:30.079]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:30.079]         }
[13:38:30.079]         else {
[13:38:30.079]             ...future.result["stdout"] <- base::list(NULL)
[13:38:30.079]         }
[13:38:30.079]         base::close(...future.stdout)
[13:38:30.079]         ...future.stdout <- NULL
[13:38:30.079]     }
[13:38:30.079]     ...future.result$conditions <- ...future.conditions
[13:38:30.079]     ...future.result$finished <- base::Sys.time()
[13:38:30.079]     ...future.result
[13:38:30.079] }
[13:38:30.082] MultisessionFuture started
[13:38:30.082] - Launch lazy future ... done
[13:38:30.082] run() for ‘MultisessionFuture’ ... done
[13:38:30.083] result() for ClusterFuture ...
[13:38:30.083] receiveMessageFromWorker() for ClusterFuture ...
[13:38:30.083] - Validating connection of MultisessionFuture
[13:38:30.125] - received message: FutureResult
[13:38:30.125] - Received FutureResult
[13:38:30.125] - Erased future from FutureRegistry
[13:38:30.125] result() for ClusterFuture ...
[13:38:30.125] - result already collected: FutureResult
[13:38:30.125] result() for ClusterFuture ... done
[13:38:30.125] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:30.125] result() for ClusterFuture ... done
[13:38:30.125] result() for ClusterFuture ...
[13:38:30.125] - result already collected: FutureResult
[13:38:30.126] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[13:38:30.126] getGlobalsAndPackages() ...
[13:38:30.126] Searching for globals...
[13:38:30.126] - globals found: [1] ‘print’
[13:38:30.127] Searching for globals ... DONE
[13:38:30.127] Resolving globals: FALSE
[13:38:30.127] 
[13:38:30.127] 
[13:38:30.127] getGlobalsAndPackages() ... DONE
[13:38:30.127] run() for ‘Future’ ...
[13:38:30.127] - state: ‘created’
[13:38:30.128] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:38:30.141] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:38:30.141] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:38:30.141]   - Field: ‘node’
[13:38:30.142]   - Field: ‘label’
[13:38:30.142]   - Field: ‘local’
[13:38:30.142]   - Field: ‘owner’
[13:38:30.142]   - Field: ‘envir’
[13:38:30.142]   - Field: ‘workers’
[13:38:30.142]   - Field: ‘packages’
[13:38:30.142]   - Field: ‘gc’
[13:38:30.142]   - Field: ‘conditions’
[13:38:30.142]   - Field: ‘persistent’
[13:38:30.142]   - Field: ‘expr’
[13:38:30.143]   - Field: ‘uuid’
[13:38:30.143]   - Field: ‘seed’
[13:38:30.143]   - Field: ‘version’
[13:38:30.143]   - Field: ‘result’
[13:38:30.143]   - Field: ‘asynchronous’
[13:38:30.143]   - Field: ‘calls’
[13:38:30.143]   - Field: ‘globals’
[13:38:30.143]   - Field: ‘stdout’
[13:38:30.143]   - Field: ‘earlySignal’
[13:38:30.143]   - Field: ‘lazy’
[13:38:30.144]   - Field: ‘state’
[13:38:30.144] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:38:30.144] - Launch lazy future ...
[13:38:30.144] Packages needed by the future expression (n = 0): <none>
[13:38:30.144] Packages needed by future strategies (n = 0): <none>
[13:38:30.144] {
[13:38:30.144]     {
[13:38:30.144]         {
[13:38:30.144]             ...future.startTime <- base::Sys.time()
[13:38:30.144]             {
[13:38:30.144]                 {
[13:38:30.144]                   {
[13:38:30.144]                     {
[13:38:30.144]                       base::local({
[13:38:30.144]                         has_future <- base::requireNamespace("future", 
[13:38:30.144]                           quietly = TRUE)
[13:38:30.144]                         if (has_future) {
[13:38:30.144]                           ns <- base::getNamespace("future")
[13:38:30.144]                           version <- ns[[".package"]][["version"]]
[13:38:30.144]                           if (is.null(version)) 
[13:38:30.144]                             version <- utils::packageVersion("future")
[13:38:30.144]                         }
[13:38:30.144]                         else {
[13:38:30.144]                           version <- NULL
[13:38:30.144]                         }
[13:38:30.144]                         if (!has_future || version < "1.8.0") {
[13:38:30.144]                           info <- base::c(r_version = base::gsub("R version ", 
[13:38:30.144]                             "", base::R.version$version.string), 
[13:38:30.144]                             platform = base::sprintf("%s (%s-bit)", 
[13:38:30.144]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:38:30.144]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:38:30.144]                               "release", "version")], collapse = " "), 
[13:38:30.144]                             hostname = base::Sys.info()[["nodename"]])
[13:38:30.144]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:38:30.144]                             info)
[13:38:30.144]                           info <- base::paste(info, collapse = "; ")
[13:38:30.144]                           if (!has_future) {
[13:38:30.144]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:38:30.144]                               info)
[13:38:30.144]                           }
[13:38:30.144]                           else {
[13:38:30.144]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:38:30.144]                               info, version)
[13:38:30.144]                           }
[13:38:30.144]                           base::stop(msg)
[13:38:30.144]                         }
[13:38:30.144]                       })
[13:38:30.144]                     }
[13:38:30.144]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:38:30.144]                     base::options(mc.cores = 1L)
[13:38:30.144]                   }
[13:38:30.144]                   ...future.strategy.old <- future::plan("list")
[13:38:30.144]                   options(future.plan = NULL)
[13:38:30.144]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.144]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:38:30.144]                 }
[13:38:30.144]                 ...future.workdir <- getwd()
[13:38:30.144]             }
[13:38:30.144]             ...future.oldOptions <- base::as.list(base::.Options)
[13:38:30.144]             ...future.oldEnvVars <- base::Sys.getenv()
[13:38:30.144]         }
[13:38:30.144]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:38:30.144]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:38:30.144]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:38:30.144]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:38:30.144]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:38:30.144]             future.stdout.windows.reencode = NULL, width = 80L)
[13:38:30.144]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:38:30.144]             base::names(...future.oldOptions))
[13:38:30.144]     }
[13:38:30.144]     if (FALSE) {
[13:38:30.144]     }
[13:38:30.144]     else {
[13:38:30.144]         if (TRUE) {
[13:38:30.144]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:38:30.144]                 open = "w")
[13:38:30.144]         }
[13:38:30.144]         else {
[13:38:30.144]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:38:30.144]                 windows = "NUL", "/dev/null"), open = "w")
[13:38:30.144]         }
[13:38:30.144]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:38:30.144]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:38:30.144]             base::sink(type = "output", split = FALSE)
[13:38:30.144]             base::close(...future.stdout)
[13:38:30.144]         }, add = TRUE)
[13:38:30.144]     }
[13:38:30.144]     ...future.frame <- base::sys.nframe()
[13:38:30.144]     ...future.conditions <- base::list()
[13:38:30.144]     ...future.rng <- base::globalenv()$.Random.seed
[13:38:30.144]     if (FALSE) {
[13:38:30.144]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:38:30.144]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:38:30.144]     }
[13:38:30.144]     ...future.result <- base::tryCatch({
[13:38:30.144]         base::withCallingHandlers({
[13:38:30.144]             ...future.value <- base::withVisible(base::local({
[13:38:30.144]                 ...future.makeSendCondition <- base::local({
[13:38:30.144]                   sendCondition <- NULL
[13:38:30.144]                   function(frame = 1L) {
[13:38:30.144]                     if (is.function(sendCondition)) 
[13:38:30.144]                       return(sendCondition)
[13:38:30.144]                     ns <- getNamespace("parallel")
[13:38:30.144]                     if (exists("sendData", mode = "function", 
[13:38:30.144]                       envir = ns)) {
[13:38:30.144]                       parallel_sendData <- get("sendData", mode = "function", 
[13:38:30.144]                         envir = ns)
[13:38:30.144]                       envir <- sys.frame(frame)
[13:38:30.144]                       master <- NULL
[13:38:30.144]                       while (!identical(envir, .GlobalEnv) && 
[13:38:30.144]                         !identical(envir, emptyenv())) {
[13:38:30.144]                         if (exists("master", mode = "list", envir = envir, 
[13:38:30.144]                           inherits = FALSE)) {
[13:38:30.144]                           master <- get("master", mode = "list", 
[13:38:30.144]                             envir = envir, inherits = FALSE)
[13:38:30.144]                           if (inherits(master, c("SOCKnode", 
[13:38:30.144]                             "SOCK0node"))) {
[13:38:30.144]                             sendCondition <<- function(cond) {
[13:38:30.144]                               data <- list(type = "VALUE", value = cond, 
[13:38:30.144]                                 success = TRUE)
[13:38:30.144]                               parallel_sendData(master, data)
[13:38:30.144]                             }
[13:38:30.144]                             return(sendCondition)
[13:38:30.144]                           }
[13:38:30.144]                         }
[13:38:30.144]                         frame <- frame + 1L
[13:38:30.144]                         envir <- sys.frame(frame)
[13:38:30.144]                       }
[13:38:30.144]                     }
[13:38:30.144]                     sendCondition <<- function(cond) NULL
[13:38:30.144]                   }
[13:38:30.144]                 })
[13:38:30.144]                 withCallingHandlers({
[13:38:30.144]                   print(42)
[13:38:30.144]                 }, immediateCondition = function(cond) {
[13:38:30.144]                   sendCondition <- ...future.makeSendCondition()
[13:38:30.144]                   sendCondition(cond)
[13:38:30.144]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.144]                   {
[13:38:30.144]                     inherits <- base::inherits
[13:38:30.144]                     invokeRestart <- base::invokeRestart
[13:38:30.144]                     is.null <- base::is.null
[13:38:30.144]                     muffled <- FALSE
[13:38:30.144]                     if (inherits(cond, "message")) {
[13:38:30.144]                       muffled <- grepl(pattern, "muffleMessage")
[13:38:30.144]                       if (muffled) 
[13:38:30.144]                         invokeRestart("muffleMessage")
[13:38:30.144]                     }
[13:38:30.144]                     else if (inherits(cond, "warning")) {
[13:38:30.144]                       muffled <- grepl(pattern, "muffleWarning")
[13:38:30.144]                       if (muffled) 
[13:38:30.144]                         invokeRestart("muffleWarning")
[13:38:30.144]                     }
[13:38:30.144]                     else if (inherits(cond, "condition")) {
[13:38:30.144]                       if (!is.null(pattern)) {
[13:38:30.144]                         computeRestarts <- base::computeRestarts
[13:38:30.144]                         grepl <- base::grepl
[13:38:30.144]                         restarts <- computeRestarts(cond)
[13:38:30.144]                         for (restart in restarts) {
[13:38:30.144]                           name <- restart$name
[13:38:30.144]                           if (is.null(name)) 
[13:38:30.144]                             next
[13:38:30.144]                           if (!grepl(pattern, name)) 
[13:38:30.144]                             next
[13:38:30.144]                           invokeRestart(restart)
[13:38:30.144]                           muffled <- TRUE
[13:38:30.144]                           break
[13:38:30.144]                         }
[13:38:30.144]                       }
[13:38:30.144]                     }
[13:38:30.144]                     invisible(muffled)
[13:38:30.144]                   }
[13:38:30.144]                   muffleCondition(cond)
[13:38:30.144]                 })
[13:38:30.144]             }))
[13:38:30.144]             future::FutureResult(value = ...future.value$value, 
[13:38:30.144]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.144]                   ...future.rng), globalenv = if (FALSE) 
[13:38:30.144]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:38:30.144]                     ...future.globalenv.names))
[13:38:30.144]                 else NULL, started = ...future.startTime, version = "1.8")
[13:38:30.144]         }, condition = base::local({
[13:38:30.144]             c <- base::c
[13:38:30.144]             inherits <- base::inherits
[13:38:30.144]             invokeRestart <- base::invokeRestart
[13:38:30.144]             length <- base::length
[13:38:30.144]             list <- base::list
[13:38:30.144]             seq.int <- base::seq.int
[13:38:30.144]             signalCondition <- base::signalCondition
[13:38:30.144]             sys.calls <- base::sys.calls
[13:38:30.144]             `[[` <- base::`[[`
[13:38:30.144]             `+` <- base::`+`
[13:38:30.144]             `<<-` <- base::`<<-`
[13:38:30.144]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:38:30.144]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:38:30.144]                   3L)]
[13:38:30.144]             }
[13:38:30.144]             function(cond) {
[13:38:30.144]                 is_error <- inherits(cond, "error")
[13:38:30.144]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:38:30.144]                   NULL)
[13:38:30.144]                 if (is_error) {
[13:38:30.144]                   sessionInformation <- function() {
[13:38:30.144]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:38:30.144]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:38:30.144]                       search = base::search(), system = base::Sys.info())
[13:38:30.144]                   }
[13:38:30.144]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.144]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:38:30.144]                     cond$call), session = sessionInformation(), 
[13:38:30.144]                     timestamp = base::Sys.time(), signaled = 0L)
[13:38:30.144]                   signalCondition(cond)
[13:38:30.144]                 }
[13:38:30.144]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:38:30.144]                 "immediateCondition"))) {
[13:38:30.144]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:38:30.144]                   ...future.conditions[[length(...future.conditions) + 
[13:38:30.144]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:38:30.144]                   if (TRUE && !signal) {
[13:38:30.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.144]                     {
[13:38:30.144]                       inherits <- base::inherits
[13:38:30.144]                       invokeRestart <- base::invokeRestart
[13:38:30.144]                       is.null <- base::is.null
[13:38:30.144]                       muffled <- FALSE
[13:38:30.144]                       if (inherits(cond, "message")) {
[13:38:30.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.144]                         if (muffled) 
[13:38:30.144]                           invokeRestart("muffleMessage")
[13:38:30.144]                       }
[13:38:30.144]                       else if (inherits(cond, "warning")) {
[13:38:30.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.144]                         if (muffled) 
[13:38:30.144]                           invokeRestart("muffleWarning")
[13:38:30.144]                       }
[13:38:30.144]                       else if (inherits(cond, "condition")) {
[13:38:30.144]                         if (!is.null(pattern)) {
[13:38:30.144]                           computeRestarts <- base::computeRestarts
[13:38:30.144]                           grepl <- base::grepl
[13:38:30.144]                           restarts <- computeRestarts(cond)
[13:38:30.144]                           for (restart in restarts) {
[13:38:30.144]                             name <- restart$name
[13:38:30.144]                             if (is.null(name)) 
[13:38:30.144]                               next
[13:38:30.144]                             if (!grepl(pattern, name)) 
[13:38:30.144]                               next
[13:38:30.144]                             invokeRestart(restart)
[13:38:30.144]                             muffled <- TRUE
[13:38:30.144]                             break
[13:38:30.144]                           }
[13:38:30.144]                         }
[13:38:30.144]                       }
[13:38:30.144]                       invisible(muffled)
[13:38:30.144]                     }
[13:38:30.144]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.144]                   }
[13:38:30.144]                 }
[13:38:30.144]                 else {
[13:38:30.144]                   if (TRUE) {
[13:38:30.144]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:38:30.144]                     {
[13:38:30.144]                       inherits <- base::inherits
[13:38:30.144]                       invokeRestart <- base::invokeRestart
[13:38:30.144]                       is.null <- base::is.null
[13:38:30.144]                       muffled <- FALSE
[13:38:30.144]                       if (inherits(cond, "message")) {
[13:38:30.144]                         muffled <- grepl(pattern, "muffleMessage")
[13:38:30.144]                         if (muffled) 
[13:38:30.144]                           invokeRestart("muffleMessage")
[13:38:30.144]                       }
[13:38:30.144]                       else if (inherits(cond, "warning")) {
[13:38:30.144]                         muffled <- grepl(pattern, "muffleWarning")
[13:38:30.144]                         if (muffled) 
[13:38:30.144]                           invokeRestart("muffleWarning")
[13:38:30.144]                       }
[13:38:30.144]                       else if (inherits(cond, "condition")) {
[13:38:30.144]                         if (!is.null(pattern)) {
[13:38:30.144]                           computeRestarts <- base::computeRestarts
[13:38:30.144]                           grepl <- base::grepl
[13:38:30.144]                           restarts <- computeRestarts(cond)
[13:38:30.144]                           for (restart in restarts) {
[13:38:30.144]                             name <- restart$name
[13:38:30.144]                             if (is.null(name)) 
[13:38:30.144]                               next
[13:38:30.144]                             if (!grepl(pattern, name)) 
[13:38:30.144]                               next
[13:38:30.144]                             invokeRestart(restart)
[13:38:30.144]                             muffled <- TRUE
[13:38:30.144]                             break
[13:38:30.144]                           }
[13:38:30.144]                         }
[13:38:30.144]                       }
[13:38:30.144]                       invisible(muffled)
[13:38:30.144]                     }
[13:38:30.144]                     muffleCondition(cond, pattern = "^muffle")
[13:38:30.144]                   }
[13:38:30.144]                 }
[13:38:30.144]             }
[13:38:30.144]         }))
[13:38:30.144]     }, error = function(ex) {
[13:38:30.144]         base::structure(base::list(value = NULL, visible = NULL, 
[13:38:30.144]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:38:30.144]                 ...future.rng), started = ...future.startTime, 
[13:38:30.144]             finished = Sys.time(), session_uuid = NA_character_, 
[13:38:30.144]             version = "1.8"), class = "FutureResult")
[13:38:30.144]     }, finally = {
[13:38:30.144]         if (!identical(...future.workdir, getwd())) 
[13:38:30.144]             setwd(...future.workdir)
[13:38:30.144]         {
[13:38:30.144]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:38:30.144]                 ...future.oldOptions$nwarnings <- NULL
[13:38:30.144]             }
[13:38:30.144]             base::options(...future.oldOptions)
[13:38:30.144]             if (.Platform$OS.type == "windows") {
[13:38:30.144]                 old_names <- names(...future.oldEnvVars)
[13:38:30.144]                 envs <- base::Sys.getenv()
[13:38:30.144]                 names <- names(envs)
[13:38:30.144]                 common <- intersect(names, old_names)
[13:38:30.144]                 added <- setdiff(names, old_names)
[13:38:30.144]                 removed <- setdiff(old_names, names)
[13:38:30.144]                 changed <- common[...future.oldEnvVars[common] != 
[13:38:30.144]                   envs[common]]
[13:38:30.144]                 NAMES <- toupper(changed)
[13:38:30.144]                 args <- list()
[13:38:30.144]                 for (kk in seq_along(NAMES)) {
[13:38:30.144]                   name <- changed[[kk]]
[13:38:30.144]                   NAME <- NAMES[[kk]]
[13:38:30.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.144]                     next
[13:38:30.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.144]                 }
[13:38:30.144]                 NAMES <- toupper(added)
[13:38:30.144]                 for (kk in seq_along(NAMES)) {
[13:38:30.144]                   name <- added[[kk]]
[13:38:30.144]                   NAME <- NAMES[[kk]]
[13:38:30.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.144]                     next
[13:38:30.144]                   args[[name]] <- ""
[13:38:30.144]                 }
[13:38:30.144]                 NAMES <- toupper(removed)
[13:38:30.144]                 for (kk in seq_along(NAMES)) {
[13:38:30.144]                   name <- removed[[kk]]
[13:38:30.144]                   NAME <- NAMES[[kk]]
[13:38:30.144]                   if (name != NAME && is.element(NAME, old_names)) 
[13:38:30.144]                     next
[13:38:30.144]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:38:30.144]                 }
[13:38:30.144]                 if (length(args) > 0) 
[13:38:30.144]                   base::do.call(base::Sys.setenv, args = args)
[13:38:30.144]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:38:30.144]             }
[13:38:30.144]             else {
[13:38:30.144]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:38:30.144]             }
[13:38:30.144]             {
[13:38:30.144]                 if (base::length(...future.futureOptionsAdded) > 
[13:38:30.144]                   0L) {
[13:38:30.144]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:38:30.144]                   base::names(opts) <- ...future.futureOptionsAdded
[13:38:30.144]                   base::options(opts)
[13:38:30.144]                 }
[13:38:30.144]                 {
[13:38:30.144]                   {
[13:38:30.144]                     base::options(mc.cores = ...future.mc.cores.old)
[13:38:30.144]                     NULL
[13:38:30.144]                   }
[13:38:30.144]                   options(future.plan = NULL)
[13:38:30.144]                   if (is.na(NA_character_)) 
[13:38:30.144]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:38:30.144]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:38:30.144]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[13:38:30.144]                     .init = FALSE)
[13:38:30.144]                 }
[13:38:30.144]             }
[13:38:30.144]         }
[13:38:30.144]     })
[13:38:30.144]     if (TRUE) {
[13:38:30.144]         base::sink(type = "output", split = FALSE)
[13:38:30.144]         if (TRUE) {
[13:38:30.144]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:38:30.144]         }
[13:38:30.144]         else {
[13:38:30.144]             ...future.result["stdout"] <- base::list(NULL)
[13:38:30.144]         }
[13:38:30.144]         base::close(...future.stdout)
[13:38:30.144]         ...future.stdout <- NULL
[13:38:30.144]     }
[13:38:30.144]     ...future.result$conditions <- ...future.conditions
[13:38:30.144]     ...future.result$finished <- base::Sys.time()
[13:38:30.144]     ...future.result
[13:38:30.144] }
[13:38:30.147] MultisessionFuture started
[13:38:30.147] - Launch lazy future ... done
[13:38:30.148] run() for ‘MultisessionFuture’ ... done
[13:38:30.148] result() for ClusterFuture ...
[13:38:30.148] receiveMessageFromWorker() for ClusterFuture ...
[13:38:30.148] - Validating connection of MultisessionFuture
[13:38:30.149] - received message: FutureResult
[13:38:30.149] - Received FutureResult
[13:38:30.149] - Erased future from FutureRegistry
[13:38:30.150] result() for ClusterFuture ...
[13:38:30.150] - result already collected: FutureResult
[13:38:30.150] result() for ClusterFuture ... done
[13:38:30.150] receiveMessageFromWorker() for ClusterFuture ... done
[13:38:30.150] result() for ClusterFuture ... done
[13:38:30.150] result() for ClusterFuture ...
[13:38:30.150] - result already collected: FutureResult
[13:38:30.150] result() for ClusterFuture ... done
[13:38:30.150] result() for ClusterFuture ...
[13:38:30.150] - result already collected: FutureResult
[13:38:30.150] result() for ClusterFuture ... done
[1] 42
[13:38:30.151] result() for ClusterFuture ...
[13:38:30.151] - result already collected: FutureResult
[13:38:30.151] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[13:38:30.152] plan(): Setting new future strategy stack:
[13:38:30.152] List of future strategies:
[13:38:30.152] 1. FutureStrategy:
[13:38:30.152]    - args: function (..., envir = parent.frame())
[13:38:30.152]    - tweaked: FALSE
[13:38:30.152]    - call: future::plan(oplan)
[13:38:30.152] plan(): nbrOfWorkers() = 1
> 
