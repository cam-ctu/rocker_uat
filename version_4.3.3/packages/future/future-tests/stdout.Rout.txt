
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:34:44.000] plan(): Setting new future strategy stack:
[10:34:44.001] List of future strategies:
[10:34:44.001] 1. sequential:
[10:34:44.001]    - args: function (..., envir = parent.frame())
[10:34:44.001]    - tweaked: FALSE
[10:34:44.001]    - call: future::plan("sequential")
[10:34:44.014] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[10:34:44.060] plan(): Setting new future strategy stack:
[10:34:44.060] List of future strategies:
[10:34:44.060] 1. sequential:
[10:34:44.060]    - args: function (..., envir = parent.frame())
[10:34:44.060]    - tweaked: FALSE
[10:34:44.060]    - call: plan(strategy)
[10:34:44.071] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[10:34:44.072] getGlobalsAndPackages() ...
[10:34:44.072] Searching for globals...
[10:34:44.082] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.082] Searching for globals ... DONE
[10:34:44.082] Resolving globals: FALSE
[10:34:44.083] 
[10:34:44.083] - packages: [1] ‘utils’
[10:34:44.083] getGlobalsAndPackages() ... DONE
[10:34:44.084] run() for ‘Future’ ...
[10:34:44.084] - state: ‘created’
[10:34:44.084] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.084] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.085]   - Field: ‘label’
[10:34:44.085]   - Field: ‘local’
[10:34:44.085]   - Field: ‘owner’
[10:34:44.085]   - Field: ‘envir’
[10:34:44.085]   - Field: ‘packages’
[10:34:44.085]   - Field: ‘gc’
[10:34:44.085]   - Field: ‘conditions’
[10:34:44.085]   - Field: ‘expr’
[10:34:44.085]   - Field: ‘uuid’
[10:34:44.085]   - Field: ‘seed’
[10:34:44.085]   - Field: ‘version’
[10:34:44.086]   - Field: ‘result’
[10:34:44.086]   - Field: ‘asynchronous’
[10:34:44.086]   - Field: ‘calls’
[10:34:44.086]   - Field: ‘globals’
[10:34:44.086]   - Field: ‘stdout’
[10:34:44.086]   - Field: ‘earlySignal’
[10:34:44.086]   - Field: ‘lazy’
[10:34:44.086]   - Field: ‘state’
[10:34:44.086] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.086] - Launch lazy future ...
[10:34:44.087] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.087] Packages needed by future strategies (n = 0): <none>
[10:34:44.088] {
[10:34:44.088]     {
[10:34:44.088]         {
[10:34:44.088]             ...future.startTime <- base::Sys.time()
[10:34:44.088]             {
[10:34:44.088]                 {
[10:34:44.088]                   {
[10:34:44.088]                     {
[10:34:44.088]                       base::local({
[10:34:44.088]                         has_future <- base::requireNamespace("future", 
[10:34:44.088]                           quietly = TRUE)
[10:34:44.088]                         if (has_future) {
[10:34:44.088]                           ns <- base::getNamespace("future")
[10:34:44.088]                           version <- ns[[".package"]][["version"]]
[10:34:44.088]                           if (is.null(version)) 
[10:34:44.088]                             version <- utils::packageVersion("future")
[10:34:44.088]                         }
[10:34:44.088]                         else {
[10:34:44.088]                           version <- NULL
[10:34:44.088]                         }
[10:34:44.088]                         if (!has_future || version < "1.8.0") {
[10:34:44.088]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.088]                             "", base::R.version$version.string), 
[10:34:44.088]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.088]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.088]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.088]                               "release", "version")], collapse = " "), 
[10:34:44.088]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.088]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.088]                             info)
[10:34:44.088]                           info <- base::paste(info, collapse = "; ")
[10:34:44.088]                           if (!has_future) {
[10:34:44.088]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.088]                               info)
[10:34:44.088]                           }
[10:34:44.088]                           else {
[10:34:44.088]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.088]                               info, version)
[10:34:44.088]                           }
[10:34:44.088]                           base::stop(msg)
[10:34:44.088]                         }
[10:34:44.088]                       })
[10:34:44.088]                     }
[10:34:44.088]                     base::local({
[10:34:44.088]                       for (pkg in "utils") {
[10:34:44.088]                         base::loadNamespace(pkg)
[10:34:44.088]                         base::library(pkg, character.only = TRUE)
[10:34:44.088]                       }
[10:34:44.088]                     })
[10:34:44.088]                   }
[10:34:44.088]                   ...future.strategy.old <- future::plan("list")
[10:34:44.088]                   options(future.plan = NULL)
[10:34:44.088]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.088]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.088]                 }
[10:34:44.088]                 ...future.workdir <- getwd()
[10:34:44.088]             }
[10:34:44.088]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.088]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.088]         }
[10:34:44.088]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.088]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.088]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.088]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.088]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.088]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.088]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.088]             base::names(...future.oldOptions))
[10:34:44.088]     }
[10:34:44.088]     if (FALSE) {
[10:34:44.088]     }
[10:34:44.088]     else {
[10:34:44.088]         if (TRUE) {
[10:34:44.088]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.088]                 open = "w")
[10:34:44.088]         }
[10:34:44.088]         else {
[10:34:44.088]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.088]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.088]         }
[10:34:44.088]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.088]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.088]             base::sink(type = "output", split = FALSE)
[10:34:44.088]             base::close(...future.stdout)
[10:34:44.088]         }, add = TRUE)
[10:34:44.088]     }
[10:34:44.088]     ...future.frame <- base::sys.nframe()
[10:34:44.088]     ...future.conditions <- base::list()
[10:34:44.088]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.088]     if (FALSE) {
[10:34:44.088]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.088]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.088]     }
[10:34:44.088]     ...future.result <- base::tryCatch({
[10:34:44.088]         base::withCallingHandlers({
[10:34:44.088]             ...future.value <- base::withVisible(base::local({
[10:34:44.088]                 print(1:50)
[10:34:44.088]                 str(1:50)
[10:34:44.088]                 cat(letters, sep = "-")
[10:34:44.088]                 cat(1:6, collapse = "\n")
[10:34:44.088]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.088]                 42L
[10:34:44.088]             }))
[10:34:44.088]             future::FutureResult(value = ...future.value$value, 
[10:34:44.088]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.088]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.088]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.088]                     ...future.globalenv.names))
[10:34:44.088]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.088]         }, condition = base::local({
[10:34:44.088]             c <- base::c
[10:34:44.088]             inherits <- base::inherits
[10:34:44.088]             invokeRestart <- base::invokeRestart
[10:34:44.088]             length <- base::length
[10:34:44.088]             list <- base::list
[10:34:44.088]             seq.int <- base::seq.int
[10:34:44.088]             signalCondition <- base::signalCondition
[10:34:44.088]             sys.calls <- base::sys.calls
[10:34:44.088]             `[[` <- base::`[[`
[10:34:44.088]             `+` <- base::`+`
[10:34:44.088]             `<<-` <- base::`<<-`
[10:34:44.088]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.088]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.088]                   3L)]
[10:34:44.088]             }
[10:34:44.088]             function(cond) {
[10:34:44.088]                 is_error <- inherits(cond, "error")
[10:34:44.088]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.088]                   NULL)
[10:34:44.088]                 if (is_error) {
[10:34:44.088]                   sessionInformation <- function() {
[10:34:44.088]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.088]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.088]                       search = base::search(), system = base::Sys.info())
[10:34:44.088]                   }
[10:34:44.088]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.088]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.088]                     cond$call), session = sessionInformation(), 
[10:34:44.088]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.088]                   signalCondition(cond)
[10:34:44.088]                 }
[10:34:44.088]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.088]                 "immediateCondition"))) {
[10:34:44.088]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.088]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.088]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.088]                   if (TRUE && !signal) {
[10:34:44.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.088]                     {
[10:34:44.088]                       inherits <- base::inherits
[10:34:44.088]                       invokeRestart <- base::invokeRestart
[10:34:44.088]                       is.null <- base::is.null
[10:34:44.088]                       muffled <- FALSE
[10:34:44.088]                       if (inherits(cond, "message")) {
[10:34:44.088]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.088]                         if (muffled) 
[10:34:44.088]                           invokeRestart("muffleMessage")
[10:34:44.088]                       }
[10:34:44.088]                       else if (inherits(cond, "warning")) {
[10:34:44.088]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.088]                         if (muffled) 
[10:34:44.088]                           invokeRestart("muffleWarning")
[10:34:44.088]                       }
[10:34:44.088]                       else if (inherits(cond, "condition")) {
[10:34:44.088]                         if (!is.null(pattern)) {
[10:34:44.088]                           computeRestarts <- base::computeRestarts
[10:34:44.088]                           grepl <- base::grepl
[10:34:44.088]                           restarts <- computeRestarts(cond)
[10:34:44.088]                           for (restart in restarts) {
[10:34:44.088]                             name <- restart$name
[10:34:44.088]                             if (is.null(name)) 
[10:34:44.088]                               next
[10:34:44.088]                             if (!grepl(pattern, name)) 
[10:34:44.088]                               next
[10:34:44.088]                             invokeRestart(restart)
[10:34:44.088]                             muffled <- TRUE
[10:34:44.088]                             break
[10:34:44.088]                           }
[10:34:44.088]                         }
[10:34:44.088]                       }
[10:34:44.088]                       invisible(muffled)
[10:34:44.088]                     }
[10:34:44.088]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.088]                   }
[10:34:44.088]                 }
[10:34:44.088]                 else {
[10:34:44.088]                   if (TRUE) {
[10:34:44.088]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.088]                     {
[10:34:44.088]                       inherits <- base::inherits
[10:34:44.088]                       invokeRestart <- base::invokeRestart
[10:34:44.088]                       is.null <- base::is.null
[10:34:44.088]                       muffled <- FALSE
[10:34:44.088]                       if (inherits(cond, "message")) {
[10:34:44.088]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.088]                         if (muffled) 
[10:34:44.088]                           invokeRestart("muffleMessage")
[10:34:44.088]                       }
[10:34:44.088]                       else if (inherits(cond, "warning")) {
[10:34:44.088]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.088]                         if (muffled) 
[10:34:44.088]                           invokeRestart("muffleWarning")
[10:34:44.088]                       }
[10:34:44.088]                       else if (inherits(cond, "condition")) {
[10:34:44.088]                         if (!is.null(pattern)) {
[10:34:44.088]                           computeRestarts <- base::computeRestarts
[10:34:44.088]                           grepl <- base::grepl
[10:34:44.088]                           restarts <- computeRestarts(cond)
[10:34:44.088]                           for (restart in restarts) {
[10:34:44.088]                             name <- restart$name
[10:34:44.088]                             if (is.null(name)) 
[10:34:44.088]                               next
[10:34:44.088]                             if (!grepl(pattern, name)) 
[10:34:44.088]                               next
[10:34:44.088]                             invokeRestart(restart)
[10:34:44.088]                             muffled <- TRUE
[10:34:44.088]                             break
[10:34:44.088]                           }
[10:34:44.088]                         }
[10:34:44.088]                       }
[10:34:44.088]                       invisible(muffled)
[10:34:44.088]                     }
[10:34:44.088]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.088]                   }
[10:34:44.088]                 }
[10:34:44.088]             }
[10:34:44.088]         }))
[10:34:44.088]     }, error = function(ex) {
[10:34:44.088]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.088]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.088]                 ...future.rng), started = ...future.startTime, 
[10:34:44.088]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.088]             version = "1.8"), class = "FutureResult")
[10:34:44.088]     }, finally = {
[10:34:44.088]         if (!identical(...future.workdir, getwd())) 
[10:34:44.088]             setwd(...future.workdir)
[10:34:44.088]         {
[10:34:44.088]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.088]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.088]             }
[10:34:44.088]             base::options(...future.oldOptions)
[10:34:44.088]             if (.Platform$OS.type == "windows") {
[10:34:44.088]                 old_names <- names(...future.oldEnvVars)
[10:34:44.088]                 envs <- base::Sys.getenv()
[10:34:44.088]                 names <- names(envs)
[10:34:44.088]                 common <- intersect(names, old_names)
[10:34:44.088]                 added <- setdiff(names, old_names)
[10:34:44.088]                 removed <- setdiff(old_names, names)
[10:34:44.088]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.088]                   envs[common]]
[10:34:44.088]                 NAMES <- toupper(changed)
[10:34:44.088]                 args <- list()
[10:34:44.088]                 for (kk in seq_along(NAMES)) {
[10:34:44.088]                   name <- changed[[kk]]
[10:34:44.088]                   NAME <- NAMES[[kk]]
[10:34:44.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.088]                     next
[10:34:44.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.088]                 }
[10:34:44.088]                 NAMES <- toupper(added)
[10:34:44.088]                 for (kk in seq_along(NAMES)) {
[10:34:44.088]                   name <- added[[kk]]
[10:34:44.088]                   NAME <- NAMES[[kk]]
[10:34:44.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.088]                     next
[10:34:44.088]                   args[[name]] <- ""
[10:34:44.088]                 }
[10:34:44.088]                 NAMES <- toupper(removed)
[10:34:44.088]                 for (kk in seq_along(NAMES)) {
[10:34:44.088]                   name <- removed[[kk]]
[10:34:44.088]                   NAME <- NAMES[[kk]]
[10:34:44.088]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.088]                     next
[10:34:44.088]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.088]                 }
[10:34:44.088]                 if (length(args) > 0) 
[10:34:44.088]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.088]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.088]             }
[10:34:44.088]             else {
[10:34:44.088]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.088]             }
[10:34:44.088]             {
[10:34:44.088]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.088]                   0L) {
[10:34:44.088]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.088]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.088]                   base::options(opts)
[10:34:44.088]                 }
[10:34:44.088]                 {
[10:34:44.088]                   {
[10:34:44.088]                     NULL
[10:34:44.088]                     RNGkind("Mersenne-Twister")
[10:34:44.088]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.088]                       inherits = FALSE)
[10:34:44.088]                   }
[10:34:44.088]                   options(future.plan = NULL)
[10:34:44.088]                   if (is.na(NA_character_)) 
[10:34:44.088]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.088]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.088]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.088]                     .init = FALSE)
[10:34:44.088]                 }
[10:34:44.088]             }
[10:34:44.088]         }
[10:34:44.088]     })
[10:34:44.088]     if (TRUE) {
[10:34:44.088]         base::sink(type = "output", split = FALSE)
[10:34:44.088]         if (TRUE) {
[10:34:44.088]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.088]         }
[10:34:44.088]         else {
[10:34:44.088]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.088]         }
[10:34:44.088]         base::close(...future.stdout)
[10:34:44.088]         ...future.stdout <- NULL
[10:34:44.088]     }
[10:34:44.088]     ...future.result$conditions <- ...future.conditions
[10:34:44.088]     ...future.result$finished <- base::Sys.time()
[10:34:44.088]     ...future.result
[10:34:44.088] }
[10:34:44.090] plan(): Setting new future strategy stack:
[10:34:44.090] List of future strategies:
[10:34:44.090] 1. sequential:
[10:34:44.090]    - args: function (..., envir = parent.frame())
[10:34:44.090]    - tweaked: FALSE
[10:34:44.090]    - call: NULL
[10:34:44.091] plan(): nbrOfWorkers() = 1
[10:34:44.093] plan(): Setting new future strategy stack:
[10:34:44.093] List of future strategies:
[10:34:44.093] 1. sequential:
[10:34:44.093]    - args: function (..., envir = parent.frame())
[10:34:44.093]    - tweaked: FALSE
[10:34:44.093]    - call: plan(strategy)
[10:34:44.093] plan(): nbrOfWorkers() = 1
[10:34:44.093] SequentialFuture started (and completed)
[10:34:44.094] - Launch lazy future ... done
[10:34:44.094] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "28208280-3ab2-da24-9824-2c6e0517d440"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90114
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:43"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.00315237 secs (started 2025-01-07 10:34:44.090507)
version: 1.8
[10:34:44.104] getGlobalsAndPackages() ...
[10:34:44.104] Searching for globals...
[10:34:44.108] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.108] Searching for globals ... DONE
[10:34:44.108] Resolving globals: FALSE
[10:34:44.109] 
[10:34:44.109] - packages: [1] ‘utils’
[10:34:44.109] getGlobalsAndPackages() ... DONE
[10:34:44.109] run() for ‘Future’ ...
[10:34:44.110] - state: ‘created’
[10:34:44.110] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.110] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.110] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.110]   - Field: ‘label’
[10:34:44.110]   - Field: ‘local’
[10:34:44.110]   - Field: ‘owner’
[10:34:44.110]   - Field: ‘envir’
[10:34:44.110]   - Field: ‘packages’
[10:34:44.111]   - Field: ‘gc’
[10:34:44.111]   - Field: ‘conditions’
[10:34:44.111]   - Field: ‘expr’
[10:34:44.111]   - Field: ‘uuid’
[10:34:44.111]   - Field: ‘seed’
[10:34:44.111]   - Field: ‘version’
[10:34:44.111]   - Field: ‘result’
[10:34:44.111]   - Field: ‘asynchronous’
[10:34:44.111]   - Field: ‘calls’
[10:34:44.111]   - Field: ‘globals’
[10:34:44.111]   - Field: ‘stdout’
[10:34:44.112]   - Field: ‘earlySignal’
[10:34:44.112]   - Field: ‘lazy’
[10:34:44.112]   - Field: ‘state’
[10:34:44.112] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.112] - Launch lazy future ...
[10:34:44.112] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.112] Packages needed by future strategies (n = 0): <none>
[10:34:44.113] {
[10:34:44.113]     {
[10:34:44.113]         {
[10:34:44.113]             ...future.startTime <- base::Sys.time()
[10:34:44.113]             {
[10:34:44.113]                 {
[10:34:44.113]                   {
[10:34:44.113]                     {
[10:34:44.113]                       base::local({
[10:34:44.113]                         has_future <- base::requireNamespace("future", 
[10:34:44.113]                           quietly = TRUE)
[10:34:44.113]                         if (has_future) {
[10:34:44.113]                           ns <- base::getNamespace("future")
[10:34:44.113]                           version <- ns[[".package"]][["version"]]
[10:34:44.113]                           if (is.null(version)) 
[10:34:44.113]                             version <- utils::packageVersion("future")
[10:34:44.113]                         }
[10:34:44.113]                         else {
[10:34:44.113]                           version <- NULL
[10:34:44.113]                         }
[10:34:44.113]                         if (!has_future || version < "1.8.0") {
[10:34:44.113]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.113]                             "", base::R.version$version.string), 
[10:34:44.113]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.113]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.113]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.113]                               "release", "version")], collapse = " "), 
[10:34:44.113]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.113]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.113]                             info)
[10:34:44.113]                           info <- base::paste(info, collapse = "; ")
[10:34:44.113]                           if (!has_future) {
[10:34:44.113]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.113]                               info)
[10:34:44.113]                           }
[10:34:44.113]                           else {
[10:34:44.113]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.113]                               info, version)
[10:34:44.113]                           }
[10:34:44.113]                           base::stop(msg)
[10:34:44.113]                         }
[10:34:44.113]                       })
[10:34:44.113]                     }
[10:34:44.113]                     base::local({
[10:34:44.113]                       for (pkg in "utils") {
[10:34:44.113]                         base::loadNamespace(pkg)
[10:34:44.113]                         base::library(pkg, character.only = TRUE)
[10:34:44.113]                       }
[10:34:44.113]                     })
[10:34:44.113]                   }
[10:34:44.113]                   ...future.strategy.old <- future::plan("list")
[10:34:44.113]                   options(future.plan = NULL)
[10:34:44.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.113]                 }
[10:34:44.113]                 ...future.workdir <- getwd()
[10:34:44.113]             }
[10:34:44.113]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.113]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.113]         }
[10:34:44.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.113]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.113]             base::names(...future.oldOptions))
[10:34:44.113]     }
[10:34:44.113]     if (FALSE) {
[10:34:44.113]     }
[10:34:44.113]     else {
[10:34:44.113]         if (TRUE) {
[10:34:44.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.113]                 open = "w")
[10:34:44.113]         }
[10:34:44.113]         else {
[10:34:44.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.113]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.113]         }
[10:34:44.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.113]             base::sink(type = "output", split = FALSE)
[10:34:44.113]             base::close(...future.stdout)
[10:34:44.113]         }, add = TRUE)
[10:34:44.113]     }
[10:34:44.113]     ...future.frame <- base::sys.nframe()
[10:34:44.113]     ...future.conditions <- base::list()
[10:34:44.113]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.113]     if (FALSE) {
[10:34:44.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.113]     }
[10:34:44.113]     ...future.result <- base::tryCatch({
[10:34:44.113]         base::withCallingHandlers({
[10:34:44.113]             ...future.value <- base::withVisible(base::local({
[10:34:44.113]                 print(1:50)
[10:34:44.113]                 str(1:50)
[10:34:44.113]                 cat(letters, sep = "-")
[10:34:44.113]                 cat(1:6, collapse = "\n")
[10:34:44.113]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.113]                 42L
[10:34:44.113]             }))
[10:34:44.113]             future::FutureResult(value = ...future.value$value, 
[10:34:44.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.113]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.113]                     ...future.globalenv.names))
[10:34:44.113]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.113]         }, condition = base::local({
[10:34:44.113]             c <- base::c
[10:34:44.113]             inherits <- base::inherits
[10:34:44.113]             invokeRestart <- base::invokeRestart
[10:34:44.113]             length <- base::length
[10:34:44.113]             list <- base::list
[10:34:44.113]             seq.int <- base::seq.int
[10:34:44.113]             signalCondition <- base::signalCondition
[10:34:44.113]             sys.calls <- base::sys.calls
[10:34:44.113]             `[[` <- base::`[[`
[10:34:44.113]             `+` <- base::`+`
[10:34:44.113]             `<<-` <- base::`<<-`
[10:34:44.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.113]                   3L)]
[10:34:44.113]             }
[10:34:44.113]             function(cond) {
[10:34:44.113]                 is_error <- inherits(cond, "error")
[10:34:44.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.113]                   NULL)
[10:34:44.113]                 if (is_error) {
[10:34:44.113]                   sessionInformation <- function() {
[10:34:44.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.113]                       search = base::search(), system = base::Sys.info())
[10:34:44.113]                   }
[10:34:44.113]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.113]                     cond$call), session = sessionInformation(), 
[10:34:44.113]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.113]                   signalCondition(cond)
[10:34:44.113]                 }
[10:34:44.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.113]                 "immediateCondition"))) {
[10:34:44.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.113]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.113]                   if (TRUE && !signal) {
[10:34:44.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.113]                     {
[10:34:44.113]                       inherits <- base::inherits
[10:34:44.113]                       invokeRestart <- base::invokeRestart
[10:34:44.113]                       is.null <- base::is.null
[10:34:44.113]                       muffled <- FALSE
[10:34:44.113]                       if (inherits(cond, "message")) {
[10:34:44.113]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.113]                         if (muffled) 
[10:34:44.113]                           invokeRestart("muffleMessage")
[10:34:44.113]                       }
[10:34:44.113]                       else if (inherits(cond, "warning")) {
[10:34:44.113]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.113]                         if (muffled) 
[10:34:44.113]                           invokeRestart("muffleWarning")
[10:34:44.113]                       }
[10:34:44.113]                       else if (inherits(cond, "condition")) {
[10:34:44.113]                         if (!is.null(pattern)) {
[10:34:44.113]                           computeRestarts <- base::computeRestarts
[10:34:44.113]                           grepl <- base::grepl
[10:34:44.113]                           restarts <- computeRestarts(cond)
[10:34:44.113]                           for (restart in restarts) {
[10:34:44.113]                             name <- restart$name
[10:34:44.113]                             if (is.null(name)) 
[10:34:44.113]                               next
[10:34:44.113]                             if (!grepl(pattern, name)) 
[10:34:44.113]                               next
[10:34:44.113]                             invokeRestart(restart)
[10:34:44.113]                             muffled <- TRUE
[10:34:44.113]                             break
[10:34:44.113]                           }
[10:34:44.113]                         }
[10:34:44.113]                       }
[10:34:44.113]                       invisible(muffled)
[10:34:44.113]                     }
[10:34:44.113]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.113]                   }
[10:34:44.113]                 }
[10:34:44.113]                 else {
[10:34:44.113]                   if (TRUE) {
[10:34:44.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.113]                     {
[10:34:44.113]                       inherits <- base::inherits
[10:34:44.113]                       invokeRestart <- base::invokeRestart
[10:34:44.113]                       is.null <- base::is.null
[10:34:44.113]                       muffled <- FALSE
[10:34:44.113]                       if (inherits(cond, "message")) {
[10:34:44.113]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.113]                         if (muffled) 
[10:34:44.113]                           invokeRestart("muffleMessage")
[10:34:44.113]                       }
[10:34:44.113]                       else if (inherits(cond, "warning")) {
[10:34:44.113]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.113]                         if (muffled) 
[10:34:44.113]                           invokeRestart("muffleWarning")
[10:34:44.113]                       }
[10:34:44.113]                       else if (inherits(cond, "condition")) {
[10:34:44.113]                         if (!is.null(pattern)) {
[10:34:44.113]                           computeRestarts <- base::computeRestarts
[10:34:44.113]                           grepl <- base::grepl
[10:34:44.113]                           restarts <- computeRestarts(cond)
[10:34:44.113]                           for (restart in restarts) {
[10:34:44.113]                             name <- restart$name
[10:34:44.113]                             if (is.null(name)) 
[10:34:44.113]                               next
[10:34:44.113]                             if (!grepl(pattern, name)) 
[10:34:44.113]                               next
[10:34:44.113]                             invokeRestart(restart)
[10:34:44.113]                             muffled <- TRUE
[10:34:44.113]                             break
[10:34:44.113]                           }
[10:34:44.113]                         }
[10:34:44.113]                       }
[10:34:44.113]                       invisible(muffled)
[10:34:44.113]                     }
[10:34:44.113]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.113]                   }
[10:34:44.113]                 }
[10:34:44.113]             }
[10:34:44.113]         }))
[10:34:44.113]     }, error = function(ex) {
[10:34:44.113]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.113]                 ...future.rng), started = ...future.startTime, 
[10:34:44.113]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.113]             version = "1.8"), class = "FutureResult")
[10:34:44.113]     }, finally = {
[10:34:44.113]         if (!identical(...future.workdir, getwd())) 
[10:34:44.113]             setwd(...future.workdir)
[10:34:44.113]         {
[10:34:44.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.113]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.113]             }
[10:34:44.113]             base::options(...future.oldOptions)
[10:34:44.113]             if (.Platform$OS.type == "windows") {
[10:34:44.113]                 old_names <- names(...future.oldEnvVars)
[10:34:44.113]                 envs <- base::Sys.getenv()
[10:34:44.113]                 names <- names(envs)
[10:34:44.113]                 common <- intersect(names, old_names)
[10:34:44.113]                 added <- setdiff(names, old_names)
[10:34:44.113]                 removed <- setdiff(old_names, names)
[10:34:44.113]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.113]                   envs[common]]
[10:34:44.113]                 NAMES <- toupper(changed)
[10:34:44.113]                 args <- list()
[10:34:44.113]                 for (kk in seq_along(NAMES)) {
[10:34:44.113]                   name <- changed[[kk]]
[10:34:44.113]                   NAME <- NAMES[[kk]]
[10:34:44.113]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.113]                     next
[10:34:44.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.113]                 }
[10:34:44.113]                 NAMES <- toupper(added)
[10:34:44.113]                 for (kk in seq_along(NAMES)) {
[10:34:44.113]                   name <- added[[kk]]
[10:34:44.113]                   NAME <- NAMES[[kk]]
[10:34:44.113]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.113]                     next
[10:34:44.113]                   args[[name]] <- ""
[10:34:44.113]                 }
[10:34:44.113]                 NAMES <- toupper(removed)
[10:34:44.113]                 for (kk in seq_along(NAMES)) {
[10:34:44.113]                   name <- removed[[kk]]
[10:34:44.113]                   NAME <- NAMES[[kk]]
[10:34:44.113]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.113]                     next
[10:34:44.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.113]                 }
[10:34:44.113]                 if (length(args) > 0) 
[10:34:44.113]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.113]             }
[10:34:44.113]             else {
[10:34:44.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.113]             }
[10:34:44.113]             {
[10:34:44.113]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.113]                   0L) {
[10:34:44.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.113]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.113]                   base::options(opts)
[10:34:44.113]                 }
[10:34:44.113]                 {
[10:34:44.113]                   {
[10:34:44.113]                     NULL
[10:34:44.113]                     RNGkind("Mersenne-Twister")
[10:34:44.113]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.113]                       inherits = FALSE)
[10:34:44.113]                   }
[10:34:44.113]                   options(future.plan = NULL)
[10:34:44.113]                   if (is.na(NA_character_)) 
[10:34:44.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.113]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.113]                     .init = FALSE)
[10:34:44.113]                 }
[10:34:44.113]             }
[10:34:44.113]         }
[10:34:44.113]     })
[10:34:44.113]     if (TRUE) {
[10:34:44.113]         base::sink(type = "output", split = FALSE)
[10:34:44.113]         if (TRUE) {
[10:34:44.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.113]         }
[10:34:44.113]         else {
[10:34:44.113]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.113]         }
[10:34:44.113]         base::close(...future.stdout)
[10:34:44.113]         ...future.stdout <- NULL
[10:34:44.113]     }
[10:34:44.113]     ...future.result$conditions <- ...future.conditions
[10:34:44.113]     ...future.result$finished <- base::Sys.time()
[10:34:44.113]     ...future.result
[10:34:44.113] }
[10:34:44.115] plan(): Setting new future strategy stack:
[10:34:44.115] List of future strategies:
[10:34:44.115] 1. sequential:
[10:34:44.115]    - args: function (..., envir = parent.frame())
[10:34:44.115]    - tweaked: FALSE
[10:34:44.115]    - call: NULL
[10:34:44.115] plan(): nbrOfWorkers() = 1
[10:34:44.116] plan(): Setting new future strategy stack:
[10:34:44.116] List of future strategies:
[10:34:44.116] 1. sequential:
[10:34:44.116]    - args: function (..., envir = parent.frame())
[10:34:44.116]    - tweaked: FALSE
[10:34:44.116]    - call: plan(strategy)
[10:34:44.117] plan(): nbrOfWorkers() = 1
[10:34:44.117] SequentialFuture started (and completed)
[10:34:44.117] - Launch lazy future ... done
[10:34:44.117] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.118] getGlobalsAndPackages() ...
[10:34:44.118] Searching for globals...
[10:34:44.118] - globals found: [1] ‘print’
[10:34:44.118] Searching for globals ... DONE
[10:34:44.118] Resolving globals: FALSE
[10:34:44.119] 
[10:34:44.119] 
[10:34:44.119] getGlobalsAndPackages() ... DONE
[10:34:44.119] run() for ‘Future’ ...
[10:34:44.119] - state: ‘created’
[10:34:44.119] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.120] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.120] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.120]   - Field: ‘label’
[10:34:44.120]   - Field: ‘local’
[10:34:44.120]   - Field: ‘owner’
[10:34:44.120]   - Field: ‘envir’
[10:34:44.120]   - Field: ‘packages’
[10:34:44.120]   - Field: ‘gc’
[10:34:44.120]   - Field: ‘conditions’
[10:34:44.120]   - Field: ‘expr’
[10:34:44.121]   - Field: ‘uuid’
[10:34:44.121]   - Field: ‘seed’
[10:34:44.121]   - Field: ‘version’
[10:34:44.121]   - Field: ‘result’
[10:34:44.121]   - Field: ‘asynchronous’
[10:34:44.121]   - Field: ‘calls’
[10:34:44.121]   - Field: ‘globals’
[10:34:44.121]   - Field: ‘stdout’
[10:34:44.121]   - Field: ‘earlySignal’
[10:34:44.121]   - Field: ‘lazy’
[10:34:44.121]   - Field: ‘state’
[10:34:44.122] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.122] - Launch lazy future ...
[10:34:44.122] Packages needed by the future expression (n = 0): <none>
[10:34:44.122] Packages needed by future strategies (n = 0): <none>
[10:34:44.122] {
[10:34:44.122]     {
[10:34:44.122]         {
[10:34:44.122]             ...future.startTime <- base::Sys.time()
[10:34:44.122]             {
[10:34:44.122]                 {
[10:34:44.122]                   {
[10:34:44.122]                     base::local({
[10:34:44.122]                       has_future <- base::requireNamespace("future", 
[10:34:44.122]                         quietly = TRUE)
[10:34:44.122]                       if (has_future) {
[10:34:44.122]                         ns <- base::getNamespace("future")
[10:34:44.122]                         version <- ns[[".package"]][["version"]]
[10:34:44.122]                         if (is.null(version)) 
[10:34:44.122]                           version <- utils::packageVersion("future")
[10:34:44.122]                       }
[10:34:44.122]                       else {
[10:34:44.122]                         version <- NULL
[10:34:44.122]                       }
[10:34:44.122]                       if (!has_future || version < "1.8.0") {
[10:34:44.122]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.122]                           "", base::R.version$version.string), 
[10:34:44.122]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:44.122]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.122]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.122]                             "release", "version")], collapse = " "), 
[10:34:44.122]                           hostname = base::Sys.info()[["nodename"]])
[10:34:44.122]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.122]                           info)
[10:34:44.122]                         info <- base::paste(info, collapse = "; ")
[10:34:44.122]                         if (!has_future) {
[10:34:44.122]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.122]                             info)
[10:34:44.122]                         }
[10:34:44.122]                         else {
[10:34:44.122]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.122]                             info, version)
[10:34:44.122]                         }
[10:34:44.122]                         base::stop(msg)
[10:34:44.122]                       }
[10:34:44.122]                     })
[10:34:44.122]                   }
[10:34:44.122]                   ...future.strategy.old <- future::plan("list")
[10:34:44.122]                   options(future.plan = NULL)
[10:34:44.122]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.122]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.122]                 }
[10:34:44.122]                 ...future.workdir <- getwd()
[10:34:44.122]             }
[10:34:44.122]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.122]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.122]         }
[10:34:44.122]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.122]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.122]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.122]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.122]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.122]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.122]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.122]             base::names(...future.oldOptions))
[10:34:44.122]     }
[10:34:44.122]     if (FALSE) {
[10:34:44.122]     }
[10:34:44.122]     else {
[10:34:44.122]         if (TRUE) {
[10:34:44.122]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.122]                 open = "w")
[10:34:44.122]         }
[10:34:44.122]         else {
[10:34:44.122]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.122]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.122]         }
[10:34:44.122]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.122]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.122]             base::sink(type = "output", split = FALSE)
[10:34:44.122]             base::close(...future.stdout)
[10:34:44.122]         }, add = TRUE)
[10:34:44.122]     }
[10:34:44.122]     ...future.frame <- base::sys.nframe()
[10:34:44.122]     ...future.conditions <- base::list()
[10:34:44.122]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.122]     if (FALSE) {
[10:34:44.122]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.122]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.122]     }
[10:34:44.122]     ...future.result <- base::tryCatch({
[10:34:44.122]         base::withCallingHandlers({
[10:34:44.122]             ...future.value <- base::withVisible(base::local(print(42)))
[10:34:44.122]             future::FutureResult(value = ...future.value$value, 
[10:34:44.122]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.122]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.122]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.122]                     ...future.globalenv.names))
[10:34:44.122]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.122]         }, condition = base::local({
[10:34:44.122]             c <- base::c
[10:34:44.122]             inherits <- base::inherits
[10:34:44.122]             invokeRestart <- base::invokeRestart
[10:34:44.122]             length <- base::length
[10:34:44.122]             list <- base::list
[10:34:44.122]             seq.int <- base::seq.int
[10:34:44.122]             signalCondition <- base::signalCondition
[10:34:44.122]             sys.calls <- base::sys.calls
[10:34:44.122]             `[[` <- base::`[[`
[10:34:44.122]             `+` <- base::`+`
[10:34:44.122]             `<<-` <- base::`<<-`
[10:34:44.122]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.122]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.122]                   3L)]
[10:34:44.122]             }
[10:34:44.122]             function(cond) {
[10:34:44.122]                 is_error <- inherits(cond, "error")
[10:34:44.122]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.122]                   NULL)
[10:34:44.122]                 if (is_error) {
[10:34:44.122]                   sessionInformation <- function() {
[10:34:44.122]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.122]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.122]                       search = base::search(), system = base::Sys.info())
[10:34:44.122]                   }
[10:34:44.122]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.122]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.122]                     cond$call), session = sessionInformation(), 
[10:34:44.122]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.122]                   signalCondition(cond)
[10:34:44.122]                 }
[10:34:44.122]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.122]                 "immediateCondition"))) {
[10:34:44.122]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.122]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.122]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.122]                   if (TRUE && !signal) {
[10:34:44.122]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.122]                     {
[10:34:44.122]                       inherits <- base::inherits
[10:34:44.122]                       invokeRestart <- base::invokeRestart
[10:34:44.122]                       is.null <- base::is.null
[10:34:44.122]                       muffled <- FALSE
[10:34:44.122]                       if (inherits(cond, "message")) {
[10:34:44.122]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.122]                         if (muffled) 
[10:34:44.122]                           invokeRestart("muffleMessage")
[10:34:44.122]                       }
[10:34:44.122]                       else if (inherits(cond, "warning")) {
[10:34:44.122]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.122]                         if (muffled) 
[10:34:44.122]                           invokeRestart("muffleWarning")
[10:34:44.122]                       }
[10:34:44.122]                       else if (inherits(cond, "condition")) {
[10:34:44.122]                         if (!is.null(pattern)) {
[10:34:44.122]                           computeRestarts <- base::computeRestarts
[10:34:44.122]                           grepl <- base::grepl
[10:34:44.122]                           restarts <- computeRestarts(cond)
[10:34:44.122]                           for (restart in restarts) {
[10:34:44.122]                             name <- restart$name
[10:34:44.122]                             if (is.null(name)) 
[10:34:44.122]                               next
[10:34:44.122]                             if (!grepl(pattern, name)) 
[10:34:44.122]                               next
[10:34:44.122]                             invokeRestart(restart)
[10:34:44.122]                             muffled <- TRUE
[10:34:44.122]                             break
[10:34:44.122]                           }
[10:34:44.122]                         }
[10:34:44.122]                       }
[10:34:44.122]                       invisible(muffled)
[10:34:44.122]                     }
[10:34:44.122]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.122]                   }
[10:34:44.122]                 }
[10:34:44.122]                 else {
[10:34:44.122]                   if (TRUE) {
[10:34:44.122]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.122]                     {
[10:34:44.122]                       inherits <- base::inherits
[10:34:44.122]                       invokeRestart <- base::invokeRestart
[10:34:44.122]                       is.null <- base::is.null
[10:34:44.122]                       muffled <- FALSE
[10:34:44.122]                       if (inherits(cond, "message")) {
[10:34:44.122]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.122]                         if (muffled) 
[10:34:44.122]                           invokeRestart("muffleMessage")
[10:34:44.122]                       }
[10:34:44.122]                       else if (inherits(cond, "warning")) {
[10:34:44.122]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.122]                         if (muffled) 
[10:34:44.122]                           invokeRestart("muffleWarning")
[10:34:44.122]                       }
[10:34:44.122]                       else if (inherits(cond, "condition")) {
[10:34:44.122]                         if (!is.null(pattern)) {
[10:34:44.122]                           computeRestarts <- base::computeRestarts
[10:34:44.122]                           grepl <- base::grepl
[10:34:44.122]                           restarts <- computeRestarts(cond)
[10:34:44.122]                           for (restart in restarts) {
[10:34:44.122]                             name <- restart$name
[10:34:44.122]                             if (is.null(name)) 
[10:34:44.122]                               next
[10:34:44.122]                             if (!grepl(pattern, name)) 
[10:34:44.122]                               next
[10:34:44.122]                             invokeRestart(restart)
[10:34:44.122]                             muffled <- TRUE
[10:34:44.122]                             break
[10:34:44.122]                           }
[10:34:44.122]                         }
[10:34:44.122]                       }
[10:34:44.122]                       invisible(muffled)
[10:34:44.122]                     }
[10:34:44.122]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.122]                   }
[10:34:44.122]                 }
[10:34:44.122]             }
[10:34:44.122]         }))
[10:34:44.122]     }, error = function(ex) {
[10:34:44.122]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.122]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.122]                 ...future.rng), started = ...future.startTime, 
[10:34:44.122]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.122]             version = "1.8"), class = "FutureResult")
[10:34:44.122]     }, finally = {
[10:34:44.122]         if (!identical(...future.workdir, getwd())) 
[10:34:44.122]             setwd(...future.workdir)
[10:34:44.122]         {
[10:34:44.122]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.122]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.122]             }
[10:34:44.122]             base::options(...future.oldOptions)
[10:34:44.122]             if (.Platform$OS.type == "windows") {
[10:34:44.122]                 old_names <- names(...future.oldEnvVars)
[10:34:44.122]                 envs <- base::Sys.getenv()
[10:34:44.122]                 names <- names(envs)
[10:34:44.122]                 common <- intersect(names, old_names)
[10:34:44.122]                 added <- setdiff(names, old_names)
[10:34:44.122]                 removed <- setdiff(old_names, names)
[10:34:44.122]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.122]                   envs[common]]
[10:34:44.122]                 NAMES <- toupper(changed)
[10:34:44.122]                 args <- list()
[10:34:44.122]                 for (kk in seq_along(NAMES)) {
[10:34:44.122]                   name <- changed[[kk]]
[10:34:44.122]                   NAME <- NAMES[[kk]]
[10:34:44.122]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.122]                     next
[10:34:44.122]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.122]                 }
[10:34:44.122]                 NAMES <- toupper(added)
[10:34:44.122]                 for (kk in seq_along(NAMES)) {
[10:34:44.122]                   name <- added[[kk]]
[10:34:44.122]                   NAME <- NAMES[[kk]]
[10:34:44.122]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.122]                     next
[10:34:44.122]                   args[[name]] <- ""
[10:34:44.122]                 }
[10:34:44.122]                 NAMES <- toupper(removed)
[10:34:44.122]                 for (kk in seq_along(NAMES)) {
[10:34:44.122]                   name <- removed[[kk]]
[10:34:44.122]                   NAME <- NAMES[[kk]]
[10:34:44.122]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.122]                     next
[10:34:44.122]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.122]                 }
[10:34:44.122]                 if (length(args) > 0) 
[10:34:44.122]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.122]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.122]             }
[10:34:44.122]             else {
[10:34:44.122]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.122]             }
[10:34:44.122]             {
[10:34:44.122]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.122]                   0L) {
[10:34:44.122]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.122]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.122]                   base::options(opts)
[10:34:44.122]                 }
[10:34:44.122]                 {
[10:34:44.122]                   {
[10:34:44.122]                     NULL
[10:34:44.122]                     RNGkind("Mersenne-Twister")
[10:34:44.122]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.122]                       inherits = FALSE)
[10:34:44.122]                   }
[10:34:44.122]                   options(future.plan = NULL)
[10:34:44.122]                   if (is.na(NA_character_)) 
[10:34:44.122]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.122]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.122]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.122]                     .init = FALSE)
[10:34:44.122]                 }
[10:34:44.122]             }
[10:34:44.122]         }
[10:34:44.122]     })
[10:34:44.122]     if (TRUE) {
[10:34:44.122]         base::sink(type = "output", split = FALSE)
[10:34:44.122]         if (TRUE) {
[10:34:44.122]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.122]         }
[10:34:44.122]         else {
[10:34:44.122]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.122]         }
[10:34:44.122]         base::close(...future.stdout)
[10:34:44.122]         ...future.stdout <- NULL
[10:34:44.122]     }
[10:34:44.122]     ...future.result$conditions <- ...future.conditions
[10:34:44.122]     ...future.result$finished <- base::Sys.time()
[10:34:44.122]     ...future.result
[10:34:44.122] }
[10:34:44.124] plan(): Setting new future strategy stack:
[10:34:44.124] List of future strategies:
[10:34:44.124] 1. sequential:
[10:34:44.124]    - args: function (..., envir = parent.frame())
[10:34:44.124]    - tweaked: FALSE
[10:34:44.124]    - call: NULL
[10:34:44.124] plan(): nbrOfWorkers() = 1
[10:34:44.125] plan(): Setting new future strategy stack:
[10:34:44.125] List of future strategies:
[10:34:44.125] 1. sequential:
[10:34:44.125]    - args: function (..., envir = parent.frame())
[10:34:44.125]    - tweaked: FALSE
[10:34:44.125]    - call: plan(strategy)
[10:34:44.126] plan(): nbrOfWorkers() = 1
[10:34:44.126] SequentialFuture started (and completed)
[10:34:44.126] - Launch lazy future ... done
[10:34:44.126] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[10:34:44.126] getGlobalsAndPackages() ...
[10:34:44.126] Searching for globals...
[10:34:44.129] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.129] Searching for globals ... DONE
[10:34:44.129] Resolving globals: FALSE
[10:34:44.130] 
[10:34:44.130] - packages: [1] ‘utils’
[10:34:44.130] getGlobalsAndPackages() ... DONE
[10:34:44.130] run() for ‘Future’ ...
[10:34:44.130] - state: ‘created’
[10:34:44.130] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.131] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.131] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.131]   - Field: ‘label’
[10:34:44.131]   - Field: ‘local’
[10:34:44.131]   - Field: ‘owner’
[10:34:44.131]   - Field: ‘envir’
[10:34:44.131]   - Field: ‘packages’
[10:34:44.131]   - Field: ‘gc’
[10:34:44.131]   - Field: ‘conditions’
[10:34:44.131]   - Field: ‘expr’
[10:34:44.132]   - Field: ‘uuid’
[10:34:44.132]   - Field: ‘seed’
[10:34:44.132]   - Field: ‘version’
[10:34:44.132]   - Field: ‘result’
[10:34:44.132]   - Field: ‘asynchronous’
[10:34:44.132]   - Field: ‘calls’
[10:34:44.132]   - Field: ‘globals’
[10:34:44.132]   - Field: ‘stdout’
[10:34:44.132]   - Field: ‘earlySignal’
[10:34:44.132]   - Field: ‘lazy’
[10:34:44.132]   - Field: ‘state’
[10:34:44.133] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.133] - Launch lazy future ...
[10:34:44.133] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.133] Packages needed by future strategies (n = 0): <none>
[10:34:44.135] {
[10:34:44.135]     {
[10:34:44.135]         {
[10:34:44.135]             ...future.startTime <- base::Sys.time()
[10:34:44.135]             {
[10:34:44.135]                 {
[10:34:44.135]                   {
[10:34:44.135]                     {
[10:34:44.135]                       base::local({
[10:34:44.135]                         has_future <- base::requireNamespace("future", 
[10:34:44.135]                           quietly = TRUE)
[10:34:44.135]                         if (has_future) {
[10:34:44.135]                           ns <- base::getNamespace("future")
[10:34:44.135]                           version <- ns[[".package"]][["version"]]
[10:34:44.135]                           if (is.null(version)) 
[10:34:44.135]                             version <- utils::packageVersion("future")
[10:34:44.135]                         }
[10:34:44.135]                         else {
[10:34:44.135]                           version <- NULL
[10:34:44.135]                         }
[10:34:44.135]                         if (!has_future || version < "1.8.0") {
[10:34:44.135]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.135]                             "", base::R.version$version.string), 
[10:34:44.135]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.135]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.135]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.135]                               "release", "version")], collapse = " "), 
[10:34:44.135]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.135]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.135]                             info)
[10:34:44.135]                           info <- base::paste(info, collapse = "; ")
[10:34:44.135]                           if (!has_future) {
[10:34:44.135]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.135]                               info)
[10:34:44.135]                           }
[10:34:44.135]                           else {
[10:34:44.135]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.135]                               info, version)
[10:34:44.135]                           }
[10:34:44.135]                           base::stop(msg)
[10:34:44.135]                         }
[10:34:44.135]                       })
[10:34:44.135]                     }
[10:34:44.135]                     base::local({
[10:34:44.135]                       for (pkg in "utils") {
[10:34:44.135]                         base::loadNamespace(pkg)
[10:34:44.135]                         base::library(pkg, character.only = TRUE)
[10:34:44.135]                       }
[10:34:44.135]                     })
[10:34:44.135]                   }
[10:34:44.135]                   ...future.strategy.old <- future::plan("list")
[10:34:44.135]                   options(future.plan = NULL)
[10:34:44.135]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.135]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.135]                 }
[10:34:44.135]                 ...future.workdir <- getwd()
[10:34:44.135]             }
[10:34:44.135]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.135]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.135]         }
[10:34:44.135]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.135]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.135]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.135]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.135]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.135]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.135]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.135]             base::names(...future.oldOptions))
[10:34:44.135]     }
[10:34:44.135]     if (FALSE) {
[10:34:44.135]     }
[10:34:44.135]     else {
[10:34:44.135]         if (FALSE) {
[10:34:44.135]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.135]                 open = "w")
[10:34:44.135]         }
[10:34:44.135]         else {
[10:34:44.135]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.135]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.135]         }
[10:34:44.135]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.135]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.135]             base::sink(type = "output", split = FALSE)
[10:34:44.135]             base::close(...future.stdout)
[10:34:44.135]         }, add = TRUE)
[10:34:44.135]     }
[10:34:44.135]     ...future.frame <- base::sys.nframe()
[10:34:44.135]     ...future.conditions <- base::list()
[10:34:44.135]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.135]     if (FALSE) {
[10:34:44.135]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.135]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.135]     }
[10:34:44.135]     ...future.result <- base::tryCatch({
[10:34:44.135]         base::withCallingHandlers({
[10:34:44.135]             ...future.value <- base::withVisible(base::local({
[10:34:44.135]                 print(1:50)
[10:34:44.135]                 str(1:50)
[10:34:44.135]                 cat(letters, sep = "-")
[10:34:44.135]                 cat(1:6, collapse = "\n")
[10:34:44.135]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.135]                 42L
[10:34:44.135]             }))
[10:34:44.135]             future::FutureResult(value = ...future.value$value, 
[10:34:44.135]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.135]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.135]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.135]                     ...future.globalenv.names))
[10:34:44.135]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.135]         }, condition = base::local({
[10:34:44.135]             c <- base::c
[10:34:44.135]             inherits <- base::inherits
[10:34:44.135]             invokeRestart <- base::invokeRestart
[10:34:44.135]             length <- base::length
[10:34:44.135]             list <- base::list
[10:34:44.135]             seq.int <- base::seq.int
[10:34:44.135]             signalCondition <- base::signalCondition
[10:34:44.135]             sys.calls <- base::sys.calls
[10:34:44.135]             `[[` <- base::`[[`
[10:34:44.135]             `+` <- base::`+`
[10:34:44.135]             `<<-` <- base::`<<-`
[10:34:44.135]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.135]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.135]                   3L)]
[10:34:44.135]             }
[10:34:44.135]             function(cond) {
[10:34:44.135]                 is_error <- inherits(cond, "error")
[10:34:44.135]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.135]                   NULL)
[10:34:44.135]                 if (is_error) {
[10:34:44.135]                   sessionInformation <- function() {
[10:34:44.135]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.135]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.135]                       search = base::search(), system = base::Sys.info())
[10:34:44.135]                   }
[10:34:44.135]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.135]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.135]                     cond$call), session = sessionInformation(), 
[10:34:44.135]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.135]                   signalCondition(cond)
[10:34:44.135]                 }
[10:34:44.135]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.135]                 "immediateCondition"))) {
[10:34:44.135]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.135]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.135]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.135]                   if (TRUE && !signal) {
[10:34:44.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.135]                     {
[10:34:44.135]                       inherits <- base::inherits
[10:34:44.135]                       invokeRestart <- base::invokeRestart
[10:34:44.135]                       is.null <- base::is.null
[10:34:44.135]                       muffled <- FALSE
[10:34:44.135]                       if (inherits(cond, "message")) {
[10:34:44.135]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.135]                         if (muffled) 
[10:34:44.135]                           invokeRestart("muffleMessage")
[10:34:44.135]                       }
[10:34:44.135]                       else if (inherits(cond, "warning")) {
[10:34:44.135]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.135]                         if (muffled) 
[10:34:44.135]                           invokeRestart("muffleWarning")
[10:34:44.135]                       }
[10:34:44.135]                       else if (inherits(cond, "condition")) {
[10:34:44.135]                         if (!is.null(pattern)) {
[10:34:44.135]                           computeRestarts <- base::computeRestarts
[10:34:44.135]                           grepl <- base::grepl
[10:34:44.135]                           restarts <- computeRestarts(cond)
[10:34:44.135]                           for (restart in restarts) {
[10:34:44.135]                             name <- restart$name
[10:34:44.135]                             if (is.null(name)) 
[10:34:44.135]                               next
[10:34:44.135]                             if (!grepl(pattern, name)) 
[10:34:44.135]                               next
[10:34:44.135]                             invokeRestart(restart)
[10:34:44.135]                             muffled <- TRUE
[10:34:44.135]                             break
[10:34:44.135]                           }
[10:34:44.135]                         }
[10:34:44.135]                       }
[10:34:44.135]                       invisible(muffled)
[10:34:44.135]                     }
[10:34:44.135]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.135]                   }
[10:34:44.135]                 }
[10:34:44.135]                 else {
[10:34:44.135]                   if (TRUE) {
[10:34:44.135]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.135]                     {
[10:34:44.135]                       inherits <- base::inherits
[10:34:44.135]                       invokeRestart <- base::invokeRestart
[10:34:44.135]                       is.null <- base::is.null
[10:34:44.135]                       muffled <- FALSE
[10:34:44.135]                       if (inherits(cond, "message")) {
[10:34:44.135]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.135]                         if (muffled) 
[10:34:44.135]                           invokeRestart("muffleMessage")
[10:34:44.135]                       }
[10:34:44.135]                       else if (inherits(cond, "warning")) {
[10:34:44.135]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.135]                         if (muffled) 
[10:34:44.135]                           invokeRestart("muffleWarning")
[10:34:44.135]                       }
[10:34:44.135]                       else if (inherits(cond, "condition")) {
[10:34:44.135]                         if (!is.null(pattern)) {
[10:34:44.135]                           computeRestarts <- base::computeRestarts
[10:34:44.135]                           grepl <- base::grepl
[10:34:44.135]                           restarts <- computeRestarts(cond)
[10:34:44.135]                           for (restart in restarts) {
[10:34:44.135]                             name <- restart$name
[10:34:44.135]                             if (is.null(name)) 
[10:34:44.135]                               next
[10:34:44.135]                             if (!grepl(pattern, name)) 
[10:34:44.135]                               next
[10:34:44.135]                             invokeRestart(restart)
[10:34:44.135]                             muffled <- TRUE
[10:34:44.135]                             break
[10:34:44.135]                           }
[10:34:44.135]                         }
[10:34:44.135]                       }
[10:34:44.135]                       invisible(muffled)
[10:34:44.135]                     }
[10:34:44.135]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.135]                   }
[10:34:44.135]                 }
[10:34:44.135]             }
[10:34:44.135]         }))
[10:34:44.135]     }, error = function(ex) {
[10:34:44.135]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.135]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.135]                 ...future.rng), started = ...future.startTime, 
[10:34:44.135]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.135]             version = "1.8"), class = "FutureResult")
[10:34:44.135]     }, finally = {
[10:34:44.135]         if (!identical(...future.workdir, getwd())) 
[10:34:44.135]             setwd(...future.workdir)
[10:34:44.135]         {
[10:34:44.135]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.135]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.135]             }
[10:34:44.135]             base::options(...future.oldOptions)
[10:34:44.135]             if (.Platform$OS.type == "windows") {
[10:34:44.135]                 old_names <- names(...future.oldEnvVars)
[10:34:44.135]                 envs <- base::Sys.getenv()
[10:34:44.135]                 names <- names(envs)
[10:34:44.135]                 common <- intersect(names, old_names)
[10:34:44.135]                 added <- setdiff(names, old_names)
[10:34:44.135]                 removed <- setdiff(old_names, names)
[10:34:44.135]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.135]                   envs[common]]
[10:34:44.135]                 NAMES <- toupper(changed)
[10:34:44.135]                 args <- list()
[10:34:44.135]                 for (kk in seq_along(NAMES)) {
[10:34:44.135]                   name <- changed[[kk]]
[10:34:44.135]                   NAME <- NAMES[[kk]]
[10:34:44.135]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.135]                     next
[10:34:44.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.135]                 }
[10:34:44.135]                 NAMES <- toupper(added)
[10:34:44.135]                 for (kk in seq_along(NAMES)) {
[10:34:44.135]                   name <- added[[kk]]
[10:34:44.135]                   NAME <- NAMES[[kk]]
[10:34:44.135]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.135]                     next
[10:34:44.135]                   args[[name]] <- ""
[10:34:44.135]                 }
[10:34:44.135]                 NAMES <- toupper(removed)
[10:34:44.135]                 for (kk in seq_along(NAMES)) {
[10:34:44.135]                   name <- removed[[kk]]
[10:34:44.135]                   NAME <- NAMES[[kk]]
[10:34:44.135]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.135]                     next
[10:34:44.135]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.135]                 }
[10:34:44.135]                 if (length(args) > 0) 
[10:34:44.135]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.135]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.135]             }
[10:34:44.135]             else {
[10:34:44.135]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.135]             }
[10:34:44.135]             {
[10:34:44.135]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.135]                   0L) {
[10:34:44.135]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.135]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.135]                   base::options(opts)
[10:34:44.135]                 }
[10:34:44.135]                 {
[10:34:44.135]                   {
[10:34:44.135]                     NULL
[10:34:44.135]                     RNGkind("Mersenne-Twister")
[10:34:44.135]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.135]                       inherits = FALSE)
[10:34:44.135]                   }
[10:34:44.135]                   options(future.plan = NULL)
[10:34:44.135]                   if (is.na(NA_character_)) 
[10:34:44.135]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.135]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.135]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.135]                     .init = FALSE)
[10:34:44.135]                 }
[10:34:44.135]             }
[10:34:44.135]         }
[10:34:44.135]     })
[10:34:44.135]     if (TRUE) {
[10:34:44.135]         base::sink(type = "output", split = FALSE)
[10:34:44.135]         if (FALSE) {
[10:34:44.135]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.135]         }
[10:34:44.135]         else {
[10:34:44.135]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.135]         }
[10:34:44.135]         base::close(...future.stdout)
[10:34:44.135]         ...future.stdout <- NULL
[10:34:44.135]     }
[10:34:44.135]     ...future.result$conditions <- ...future.conditions
[10:34:44.135]     ...future.result$finished <- base::Sys.time()
[10:34:44.135]     ...future.result
[10:34:44.135] }
[10:34:44.137] plan(): Setting new future strategy stack:
[10:34:44.137] List of future strategies:
[10:34:44.137] 1. sequential:
[10:34:44.137]    - args: function (..., envir = parent.frame())
[10:34:44.137]    - tweaked: FALSE
[10:34:44.137]    - call: NULL
[10:34:44.137] plan(): nbrOfWorkers() = 1
[10:34:44.138] plan(): Setting new future strategy stack:
[10:34:44.138] List of future strategies:
[10:34:44.138] 1. sequential:
[10:34:44.138]    - args: function (..., envir = parent.frame())
[10:34:44.138]    - tweaked: FALSE
[10:34:44.138]    - call: plan(strategy)
[10:34:44.139] plan(): nbrOfWorkers() = 1
[10:34:44.139] SequentialFuture started (and completed)
[10:34:44.139] - Launch lazy future ... done
[10:34:44.139] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "28208280-3ab2-da24-9824-2c6e0517d440"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90114
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:43"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:44.147] getGlobalsAndPackages() ...
[10:34:44.147] Searching for globals...
[10:34:44.150] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.150] Searching for globals ... DONE
[10:34:44.150] Resolving globals: FALSE
[10:34:44.150] 
[10:34:44.150] - packages: [1] ‘utils’
[10:34:44.150] getGlobalsAndPackages() ... DONE
[10:34:44.151] run() for ‘Future’ ...
[10:34:44.151] - state: ‘created’
[10:34:44.151] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.151] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.151] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.151]   - Field: ‘label’
[10:34:44.152]   - Field: ‘local’
[10:34:44.152]   - Field: ‘owner’
[10:34:44.152]   - Field: ‘envir’
[10:34:44.152]   - Field: ‘packages’
[10:34:44.152]   - Field: ‘gc’
[10:34:44.152]   - Field: ‘conditions’
[10:34:44.152]   - Field: ‘expr’
[10:34:44.152]   - Field: ‘uuid’
[10:34:44.152]   - Field: ‘seed’
[10:34:44.152]   - Field: ‘version’
[10:34:44.152]   - Field: ‘result’
[10:34:44.153]   - Field: ‘asynchronous’
[10:34:44.153]   - Field: ‘calls’
[10:34:44.153]   - Field: ‘globals’
[10:34:44.153]   - Field: ‘stdout’
[10:34:44.153]   - Field: ‘earlySignal’
[10:34:44.153]   - Field: ‘lazy’
[10:34:44.153]   - Field: ‘state’
[10:34:44.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.153] - Launch lazy future ...
[10:34:44.153] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.154] Packages needed by future strategies (n = 0): <none>
[10:34:44.154] {
[10:34:44.154]     {
[10:34:44.154]         {
[10:34:44.154]             ...future.startTime <- base::Sys.time()
[10:34:44.154]             {
[10:34:44.154]                 {
[10:34:44.154]                   {
[10:34:44.154]                     {
[10:34:44.154]                       base::local({
[10:34:44.154]                         has_future <- base::requireNamespace("future", 
[10:34:44.154]                           quietly = TRUE)
[10:34:44.154]                         if (has_future) {
[10:34:44.154]                           ns <- base::getNamespace("future")
[10:34:44.154]                           version <- ns[[".package"]][["version"]]
[10:34:44.154]                           if (is.null(version)) 
[10:34:44.154]                             version <- utils::packageVersion("future")
[10:34:44.154]                         }
[10:34:44.154]                         else {
[10:34:44.154]                           version <- NULL
[10:34:44.154]                         }
[10:34:44.154]                         if (!has_future || version < "1.8.0") {
[10:34:44.154]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.154]                             "", base::R.version$version.string), 
[10:34:44.154]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.154]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.154]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.154]                               "release", "version")], collapse = " "), 
[10:34:44.154]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.154]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.154]                             info)
[10:34:44.154]                           info <- base::paste(info, collapse = "; ")
[10:34:44.154]                           if (!has_future) {
[10:34:44.154]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.154]                               info)
[10:34:44.154]                           }
[10:34:44.154]                           else {
[10:34:44.154]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.154]                               info, version)
[10:34:44.154]                           }
[10:34:44.154]                           base::stop(msg)
[10:34:44.154]                         }
[10:34:44.154]                       })
[10:34:44.154]                     }
[10:34:44.154]                     base::local({
[10:34:44.154]                       for (pkg in "utils") {
[10:34:44.154]                         base::loadNamespace(pkg)
[10:34:44.154]                         base::library(pkg, character.only = TRUE)
[10:34:44.154]                       }
[10:34:44.154]                     })
[10:34:44.154]                   }
[10:34:44.154]                   ...future.strategy.old <- future::plan("list")
[10:34:44.154]                   options(future.plan = NULL)
[10:34:44.154]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.154]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.154]                 }
[10:34:44.154]                 ...future.workdir <- getwd()
[10:34:44.154]             }
[10:34:44.154]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.154]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.154]         }
[10:34:44.154]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.154]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.154]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.154]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.154]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.154]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.154]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.154]             base::names(...future.oldOptions))
[10:34:44.154]     }
[10:34:44.154]     if (FALSE) {
[10:34:44.154]     }
[10:34:44.154]     else {
[10:34:44.154]         if (FALSE) {
[10:34:44.154]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.154]                 open = "w")
[10:34:44.154]         }
[10:34:44.154]         else {
[10:34:44.154]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.154]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.154]         }
[10:34:44.154]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.154]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.154]             base::sink(type = "output", split = FALSE)
[10:34:44.154]             base::close(...future.stdout)
[10:34:44.154]         }, add = TRUE)
[10:34:44.154]     }
[10:34:44.154]     ...future.frame <- base::sys.nframe()
[10:34:44.154]     ...future.conditions <- base::list()
[10:34:44.154]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.154]     if (FALSE) {
[10:34:44.154]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.154]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.154]     }
[10:34:44.154]     ...future.result <- base::tryCatch({
[10:34:44.154]         base::withCallingHandlers({
[10:34:44.154]             ...future.value <- base::withVisible(base::local({
[10:34:44.154]                 print(1:50)
[10:34:44.154]                 str(1:50)
[10:34:44.154]                 cat(letters, sep = "-")
[10:34:44.154]                 cat(1:6, collapse = "\n")
[10:34:44.154]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.154]                 42L
[10:34:44.154]             }))
[10:34:44.154]             future::FutureResult(value = ...future.value$value, 
[10:34:44.154]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.154]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.154]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.154]                     ...future.globalenv.names))
[10:34:44.154]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.154]         }, condition = base::local({
[10:34:44.154]             c <- base::c
[10:34:44.154]             inherits <- base::inherits
[10:34:44.154]             invokeRestart <- base::invokeRestart
[10:34:44.154]             length <- base::length
[10:34:44.154]             list <- base::list
[10:34:44.154]             seq.int <- base::seq.int
[10:34:44.154]             signalCondition <- base::signalCondition
[10:34:44.154]             sys.calls <- base::sys.calls
[10:34:44.154]             `[[` <- base::`[[`
[10:34:44.154]             `+` <- base::`+`
[10:34:44.154]             `<<-` <- base::`<<-`
[10:34:44.154]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.154]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.154]                   3L)]
[10:34:44.154]             }
[10:34:44.154]             function(cond) {
[10:34:44.154]                 is_error <- inherits(cond, "error")
[10:34:44.154]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.154]                   NULL)
[10:34:44.154]                 if (is_error) {
[10:34:44.154]                   sessionInformation <- function() {
[10:34:44.154]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.154]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.154]                       search = base::search(), system = base::Sys.info())
[10:34:44.154]                   }
[10:34:44.154]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.154]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.154]                     cond$call), session = sessionInformation(), 
[10:34:44.154]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.154]                   signalCondition(cond)
[10:34:44.154]                 }
[10:34:44.154]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.154]                 "immediateCondition"))) {
[10:34:44.154]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.154]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.154]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.154]                   if (TRUE && !signal) {
[10:34:44.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.154]                     {
[10:34:44.154]                       inherits <- base::inherits
[10:34:44.154]                       invokeRestart <- base::invokeRestart
[10:34:44.154]                       is.null <- base::is.null
[10:34:44.154]                       muffled <- FALSE
[10:34:44.154]                       if (inherits(cond, "message")) {
[10:34:44.154]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.154]                         if (muffled) 
[10:34:44.154]                           invokeRestart("muffleMessage")
[10:34:44.154]                       }
[10:34:44.154]                       else if (inherits(cond, "warning")) {
[10:34:44.154]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.154]                         if (muffled) 
[10:34:44.154]                           invokeRestart("muffleWarning")
[10:34:44.154]                       }
[10:34:44.154]                       else if (inherits(cond, "condition")) {
[10:34:44.154]                         if (!is.null(pattern)) {
[10:34:44.154]                           computeRestarts <- base::computeRestarts
[10:34:44.154]                           grepl <- base::grepl
[10:34:44.154]                           restarts <- computeRestarts(cond)
[10:34:44.154]                           for (restart in restarts) {
[10:34:44.154]                             name <- restart$name
[10:34:44.154]                             if (is.null(name)) 
[10:34:44.154]                               next
[10:34:44.154]                             if (!grepl(pattern, name)) 
[10:34:44.154]                               next
[10:34:44.154]                             invokeRestart(restart)
[10:34:44.154]                             muffled <- TRUE
[10:34:44.154]                             break
[10:34:44.154]                           }
[10:34:44.154]                         }
[10:34:44.154]                       }
[10:34:44.154]                       invisible(muffled)
[10:34:44.154]                     }
[10:34:44.154]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.154]                   }
[10:34:44.154]                 }
[10:34:44.154]                 else {
[10:34:44.154]                   if (TRUE) {
[10:34:44.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.154]                     {
[10:34:44.154]                       inherits <- base::inherits
[10:34:44.154]                       invokeRestart <- base::invokeRestart
[10:34:44.154]                       is.null <- base::is.null
[10:34:44.154]                       muffled <- FALSE
[10:34:44.154]                       if (inherits(cond, "message")) {
[10:34:44.154]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.154]                         if (muffled) 
[10:34:44.154]                           invokeRestart("muffleMessage")
[10:34:44.154]                       }
[10:34:44.154]                       else if (inherits(cond, "warning")) {
[10:34:44.154]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.154]                         if (muffled) 
[10:34:44.154]                           invokeRestart("muffleWarning")
[10:34:44.154]                       }
[10:34:44.154]                       else if (inherits(cond, "condition")) {
[10:34:44.154]                         if (!is.null(pattern)) {
[10:34:44.154]                           computeRestarts <- base::computeRestarts
[10:34:44.154]                           grepl <- base::grepl
[10:34:44.154]                           restarts <- computeRestarts(cond)
[10:34:44.154]                           for (restart in restarts) {
[10:34:44.154]                             name <- restart$name
[10:34:44.154]                             if (is.null(name)) 
[10:34:44.154]                               next
[10:34:44.154]                             if (!grepl(pattern, name)) 
[10:34:44.154]                               next
[10:34:44.154]                             invokeRestart(restart)
[10:34:44.154]                             muffled <- TRUE
[10:34:44.154]                             break
[10:34:44.154]                           }
[10:34:44.154]                         }
[10:34:44.154]                       }
[10:34:44.154]                       invisible(muffled)
[10:34:44.154]                     }
[10:34:44.154]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.154]                   }
[10:34:44.154]                 }
[10:34:44.154]             }
[10:34:44.154]         }))
[10:34:44.154]     }, error = function(ex) {
[10:34:44.154]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.154]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.154]                 ...future.rng), started = ...future.startTime, 
[10:34:44.154]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.154]             version = "1.8"), class = "FutureResult")
[10:34:44.154]     }, finally = {
[10:34:44.154]         if (!identical(...future.workdir, getwd())) 
[10:34:44.154]             setwd(...future.workdir)
[10:34:44.154]         {
[10:34:44.154]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.154]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.154]             }
[10:34:44.154]             base::options(...future.oldOptions)
[10:34:44.154]             if (.Platform$OS.type == "windows") {
[10:34:44.154]                 old_names <- names(...future.oldEnvVars)
[10:34:44.154]                 envs <- base::Sys.getenv()
[10:34:44.154]                 names <- names(envs)
[10:34:44.154]                 common <- intersect(names, old_names)
[10:34:44.154]                 added <- setdiff(names, old_names)
[10:34:44.154]                 removed <- setdiff(old_names, names)
[10:34:44.154]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.154]                   envs[common]]
[10:34:44.154]                 NAMES <- toupper(changed)
[10:34:44.154]                 args <- list()
[10:34:44.154]                 for (kk in seq_along(NAMES)) {
[10:34:44.154]                   name <- changed[[kk]]
[10:34:44.154]                   NAME <- NAMES[[kk]]
[10:34:44.154]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.154]                     next
[10:34:44.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.154]                 }
[10:34:44.154]                 NAMES <- toupper(added)
[10:34:44.154]                 for (kk in seq_along(NAMES)) {
[10:34:44.154]                   name <- added[[kk]]
[10:34:44.154]                   NAME <- NAMES[[kk]]
[10:34:44.154]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.154]                     next
[10:34:44.154]                   args[[name]] <- ""
[10:34:44.154]                 }
[10:34:44.154]                 NAMES <- toupper(removed)
[10:34:44.154]                 for (kk in seq_along(NAMES)) {
[10:34:44.154]                   name <- removed[[kk]]
[10:34:44.154]                   NAME <- NAMES[[kk]]
[10:34:44.154]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.154]                     next
[10:34:44.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.154]                 }
[10:34:44.154]                 if (length(args) > 0) 
[10:34:44.154]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.154]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.154]             }
[10:34:44.154]             else {
[10:34:44.154]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.154]             }
[10:34:44.154]             {
[10:34:44.154]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.154]                   0L) {
[10:34:44.154]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.154]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.154]                   base::options(opts)
[10:34:44.154]                 }
[10:34:44.154]                 {
[10:34:44.154]                   {
[10:34:44.154]                     NULL
[10:34:44.154]                     RNGkind("Mersenne-Twister")
[10:34:44.154]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.154]                       inherits = FALSE)
[10:34:44.154]                   }
[10:34:44.154]                   options(future.plan = NULL)
[10:34:44.154]                   if (is.na(NA_character_)) 
[10:34:44.154]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.154]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.154]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.154]                     .init = FALSE)
[10:34:44.154]                 }
[10:34:44.154]             }
[10:34:44.154]         }
[10:34:44.154]     })
[10:34:44.154]     if (TRUE) {
[10:34:44.154]         base::sink(type = "output", split = FALSE)
[10:34:44.154]         if (FALSE) {
[10:34:44.154]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.154]         }
[10:34:44.154]         else {
[10:34:44.154]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.154]         }
[10:34:44.154]         base::close(...future.stdout)
[10:34:44.154]         ...future.stdout <- NULL
[10:34:44.154]     }
[10:34:44.154]     ...future.result$conditions <- ...future.conditions
[10:34:44.154]     ...future.result$finished <- base::Sys.time()
[10:34:44.154]     ...future.result
[10:34:44.154] }
[10:34:44.156] plan(): Setting new future strategy stack:
[10:34:44.156] List of future strategies:
[10:34:44.156] 1. sequential:
[10:34:44.156]    - args: function (..., envir = parent.frame())
[10:34:44.156]    - tweaked: FALSE
[10:34:44.156]    - call: NULL
[10:34:44.156] plan(): nbrOfWorkers() = 1
[10:34:44.158] plan(): Setting new future strategy stack:
[10:34:44.158] List of future strategies:
[10:34:44.158] 1. sequential:
[10:34:44.158]    - args: function (..., envir = parent.frame())
[10:34:44.158]    - tweaked: FALSE
[10:34:44.158]    - call: plan(strategy)
[10:34:44.158] plan(): nbrOfWorkers() = 1
[10:34:44.158] SequentialFuture started (and completed)
[10:34:44.158] - Launch lazy future ... done
[10:34:44.159] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.159] getGlobalsAndPackages() ...
[10:34:44.159] Searching for globals...
[10:34:44.159] - globals found: [1] ‘print’
[10:34:44.160] Searching for globals ... DONE
[10:34:44.160] Resolving globals: FALSE
[10:34:44.160] 
[10:34:44.160] 
[10:34:44.160] getGlobalsAndPackages() ... DONE
[10:34:44.160] run() for ‘Future’ ...
[10:34:44.162] - state: ‘created’
[10:34:44.162] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.162] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.162] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.162]   - Field: ‘label’
[10:34:44.162]   - Field: ‘local’
[10:34:44.162]   - Field: ‘owner’
[10:34:44.163]   - Field: ‘envir’
[10:34:44.163]   - Field: ‘packages’
[10:34:44.163]   - Field: ‘gc’
[10:34:44.163]   - Field: ‘conditions’
[10:34:44.163]   - Field: ‘expr’
[10:34:44.163]   - Field: ‘uuid’
[10:34:44.163]   - Field: ‘seed’
[10:34:44.163]   - Field: ‘version’
[10:34:44.163]   - Field: ‘result’
[10:34:44.163]   - Field: ‘asynchronous’
[10:34:44.163]   - Field: ‘calls’
[10:34:44.164]   - Field: ‘globals’
[10:34:44.164]   - Field: ‘stdout’
[10:34:44.164]   - Field: ‘earlySignal’
[10:34:44.164]   - Field: ‘lazy’
[10:34:44.164]   - Field: ‘state’
[10:34:44.164] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.164] - Launch lazy future ...
[10:34:44.164] Packages needed by the future expression (n = 0): <none>
[10:34:44.164] Packages needed by future strategies (n = 0): <none>
[10:34:44.165] {
[10:34:44.165]     {
[10:34:44.165]         {
[10:34:44.165]             ...future.startTime <- base::Sys.time()
[10:34:44.165]             {
[10:34:44.165]                 {
[10:34:44.165]                   {
[10:34:44.165]                     base::local({
[10:34:44.165]                       has_future <- base::requireNamespace("future", 
[10:34:44.165]                         quietly = TRUE)
[10:34:44.165]                       if (has_future) {
[10:34:44.165]                         ns <- base::getNamespace("future")
[10:34:44.165]                         version <- ns[[".package"]][["version"]]
[10:34:44.165]                         if (is.null(version)) 
[10:34:44.165]                           version <- utils::packageVersion("future")
[10:34:44.165]                       }
[10:34:44.165]                       else {
[10:34:44.165]                         version <- NULL
[10:34:44.165]                       }
[10:34:44.165]                       if (!has_future || version < "1.8.0") {
[10:34:44.165]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.165]                           "", base::R.version$version.string), 
[10:34:44.165]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:44.165]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.165]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.165]                             "release", "version")], collapse = " "), 
[10:34:44.165]                           hostname = base::Sys.info()[["nodename"]])
[10:34:44.165]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.165]                           info)
[10:34:44.165]                         info <- base::paste(info, collapse = "; ")
[10:34:44.165]                         if (!has_future) {
[10:34:44.165]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.165]                             info)
[10:34:44.165]                         }
[10:34:44.165]                         else {
[10:34:44.165]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.165]                             info, version)
[10:34:44.165]                         }
[10:34:44.165]                         base::stop(msg)
[10:34:44.165]                       }
[10:34:44.165]                     })
[10:34:44.165]                   }
[10:34:44.165]                   ...future.strategy.old <- future::plan("list")
[10:34:44.165]                   options(future.plan = NULL)
[10:34:44.165]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.165]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.165]                 }
[10:34:44.165]                 ...future.workdir <- getwd()
[10:34:44.165]             }
[10:34:44.165]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.165]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.165]         }
[10:34:44.165]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.165]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.165]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.165]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.165]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.165]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.165]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.165]             base::names(...future.oldOptions))
[10:34:44.165]     }
[10:34:44.165]     if (FALSE) {
[10:34:44.165]     }
[10:34:44.165]     else {
[10:34:44.165]         if (TRUE) {
[10:34:44.165]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.165]                 open = "w")
[10:34:44.165]         }
[10:34:44.165]         else {
[10:34:44.165]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.165]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.165]         }
[10:34:44.165]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.165]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.165]             base::sink(type = "output", split = FALSE)
[10:34:44.165]             base::close(...future.stdout)
[10:34:44.165]         }, add = TRUE)
[10:34:44.165]     }
[10:34:44.165]     ...future.frame <- base::sys.nframe()
[10:34:44.165]     ...future.conditions <- base::list()
[10:34:44.165]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.165]     if (FALSE) {
[10:34:44.165]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.165]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.165]     }
[10:34:44.165]     ...future.result <- base::tryCatch({
[10:34:44.165]         base::withCallingHandlers({
[10:34:44.165]             ...future.value <- base::withVisible(base::local(print(42)))
[10:34:44.165]             future::FutureResult(value = ...future.value$value, 
[10:34:44.165]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.165]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.165]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.165]                     ...future.globalenv.names))
[10:34:44.165]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.165]         }, condition = base::local({
[10:34:44.165]             c <- base::c
[10:34:44.165]             inherits <- base::inherits
[10:34:44.165]             invokeRestart <- base::invokeRestart
[10:34:44.165]             length <- base::length
[10:34:44.165]             list <- base::list
[10:34:44.165]             seq.int <- base::seq.int
[10:34:44.165]             signalCondition <- base::signalCondition
[10:34:44.165]             sys.calls <- base::sys.calls
[10:34:44.165]             `[[` <- base::`[[`
[10:34:44.165]             `+` <- base::`+`
[10:34:44.165]             `<<-` <- base::`<<-`
[10:34:44.165]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.165]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.165]                   3L)]
[10:34:44.165]             }
[10:34:44.165]             function(cond) {
[10:34:44.165]                 is_error <- inherits(cond, "error")
[10:34:44.165]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.165]                   NULL)
[10:34:44.165]                 if (is_error) {
[10:34:44.165]                   sessionInformation <- function() {
[10:34:44.165]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.165]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.165]                       search = base::search(), system = base::Sys.info())
[10:34:44.165]                   }
[10:34:44.165]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.165]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.165]                     cond$call), session = sessionInformation(), 
[10:34:44.165]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.165]                   signalCondition(cond)
[10:34:44.165]                 }
[10:34:44.165]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.165]                 "immediateCondition"))) {
[10:34:44.165]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.165]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.165]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.165]                   if (TRUE && !signal) {
[10:34:44.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.165]                     {
[10:34:44.165]                       inherits <- base::inherits
[10:34:44.165]                       invokeRestart <- base::invokeRestart
[10:34:44.165]                       is.null <- base::is.null
[10:34:44.165]                       muffled <- FALSE
[10:34:44.165]                       if (inherits(cond, "message")) {
[10:34:44.165]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.165]                         if (muffled) 
[10:34:44.165]                           invokeRestart("muffleMessage")
[10:34:44.165]                       }
[10:34:44.165]                       else if (inherits(cond, "warning")) {
[10:34:44.165]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.165]                         if (muffled) 
[10:34:44.165]                           invokeRestart("muffleWarning")
[10:34:44.165]                       }
[10:34:44.165]                       else if (inherits(cond, "condition")) {
[10:34:44.165]                         if (!is.null(pattern)) {
[10:34:44.165]                           computeRestarts <- base::computeRestarts
[10:34:44.165]                           grepl <- base::grepl
[10:34:44.165]                           restarts <- computeRestarts(cond)
[10:34:44.165]                           for (restart in restarts) {
[10:34:44.165]                             name <- restart$name
[10:34:44.165]                             if (is.null(name)) 
[10:34:44.165]                               next
[10:34:44.165]                             if (!grepl(pattern, name)) 
[10:34:44.165]                               next
[10:34:44.165]                             invokeRestart(restart)
[10:34:44.165]                             muffled <- TRUE
[10:34:44.165]                             break
[10:34:44.165]                           }
[10:34:44.165]                         }
[10:34:44.165]                       }
[10:34:44.165]                       invisible(muffled)
[10:34:44.165]                     }
[10:34:44.165]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.165]                   }
[10:34:44.165]                 }
[10:34:44.165]                 else {
[10:34:44.165]                   if (TRUE) {
[10:34:44.165]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.165]                     {
[10:34:44.165]                       inherits <- base::inherits
[10:34:44.165]                       invokeRestart <- base::invokeRestart
[10:34:44.165]                       is.null <- base::is.null
[10:34:44.165]                       muffled <- FALSE
[10:34:44.165]                       if (inherits(cond, "message")) {
[10:34:44.165]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.165]                         if (muffled) 
[10:34:44.165]                           invokeRestart("muffleMessage")
[10:34:44.165]                       }
[10:34:44.165]                       else if (inherits(cond, "warning")) {
[10:34:44.165]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.165]                         if (muffled) 
[10:34:44.165]                           invokeRestart("muffleWarning")
[10:34:44.165]                       }
[10:34:44.165]                       else if (inherits(cond, "condition")) {
[10:34:44.165]                         if (!is.null(pattern)) {
[10:34:44.165]                           computeRestarts <- base::computeRestarts
[10:34:44.165]                           grepl <- base::grepl
[10:34:44.165]                           restarts <- computeRestarts(cond)
[10:34:44.165]                           for (restart in restarts) {
[10:34:44.165]                             name <- restart$name
[10:34:44.165]                             if (is.null(name)) 
[10:34:44.165]                               next
[10:34:44.165]                             if (!grepl(pattern, name)) 
[10:34:44.165]                               next
[10:34:44.165]                             invokeRestart(restart)
[10:34:44.165]                             muffled <- TRUE
[10:34:44.165]                             break
[10:34:44.165]                           }
[10:34:44.165]                         }
[10:34:44.165]                       }
[10:34:44.165]                       invisible(muffled)
[10:34:44.165]                     }
[10:34:44.165]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.165]                   }
[10:34:44.165]                 }
[10:34:44.165]             }
[10:34:44.165]         }))
[10:34:44.165]     }, error = function(ex) {
[10:34:44.165]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.165]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.165]                 ...future.rng), started = ...future.startTime, 
[10:34:44.165]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.165]             version = "1.8"), class = "FutureResult")
[10:34:44.165]     }, finally = {
[10:34:44.165]         if (!identical(...future.workdir, getwd())) 
[10:34:44.165]             setwd(...future.workdir)
[10:34:44.165]         {
[10:34:44.165]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.165]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.165]             }
[10:34:44.165]             base::options(...future.oldOptions)
[10:34:44.165]             if (.Platform$OS.type == "windows") {
[10:34:44.165]                 old_names <- names(...future.oldEnvVars)
[10:34:44.165]                 envs <- base::Sys.getenv()
[10:34:44.165]                 names <- names(envs)
[10:34:44.165]                 common <- intersect(names, old_names)
[10:34:44.165]                 added <- setdiff(names, old_names)
[10:34:44.165]                 removed <- setdiff(old_names, names)
[10:34:44.165]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.165]                   envs[common]]
[10:34:44.165]                 NAMES <- toupper(changed)
[10:34:44.165]                 args <- list()
[10:34:44.165]                 for (kk in seq_along(NAMES)) {
[10:34:44.165]                   name <- changed[[kk]]
[10:34:44.165]                   NAME <- NAMES[[kk]]
[10:34:44.165]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.165]                     next
[10:34:44.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.165]                 }
[10:34:44.165]                 NAMES <- toupper(added)
[10:34:44.165]                 for (kk in seq_along(NAMES)) {
[10:34:44.165]                   name <- added[[kk]]
[10:34:44.165]                   NAME <- NAMES[[kk]]
[10:34:44.165]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.165]                     next
[10:34:44.165]                   args[[name]] <- ""
[10:34:44.165]                 }
[10:34:44.165]                 NAMES <- toupper(removed)
[10:34:44.165]                 for (kk in seq_along(NAMES)) {
[10:34:44.165]                   name <- removed[[kk]]
[10:34:44.165]                   NAME <- NAMES[[kk]]
[10:34:44.165]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.165]                     next
[10:34:44.165]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.165]                 }
[10:34:44.165]                 if (length(args) > 0) 
[10:34:44.165]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.165]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.165]             }
[10:34:44.165]             else {
[10:34:44.165]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.165]             }
[10:34:44.165]             {
[10:34:44.165]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.165]                   0L) {
[10:34:44.165]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.165]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.165]                   base::options(opts)
[10:34:44.165]                 }
[10:34:44.165]                 {
[10:34:44.165]                   {
[10:34:44.165]                     NULL
[10:34:44.165]                     RNGkind("Mersenne-Twister")
[10:34:44.165]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.165]                       inherits = FALSE)
[10:34:44.165]                   }
[10:34:44.165]                   options(future.plan = NULL)
[10:34:44.165]                   if (is.na(NA_character_)) 
[10:34:44.165]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.165]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.165]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.165]                     .init = FALSE)
[10:34:44.165]                 }
[10:34:44.165]             }
[10:34:44.165]         }
[10:34:44.165]     })
[10:34:44.165]     if (TRUE) {
[10:34:44.165]         base::sink(type = "output", split = FALSE)
[10:34:44.165]         if (TRUE) {
[10:34:44.165]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.165]         }
[10:34:44.165]         else {
[10:34:44.165]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.165]         }
[10:34:44.165]         base::close(...future.stdout)
[10:34:44.165]         ...future.stdout <- NULL
[10:34:44.165]     }
[10:34:44.165]     ...future.result$conditions <- ...future.conditions
[10:34:44.165]     ...future.result$finished <- base::Sys.time()
[10:34:44.165]     ...future.result
[10:34:44.165] }
[10:34:44.166] plan(): Setting new future strategy stack:
[10:34:44.167] List of future strategies:
[10:34:44.167] 1. sequential:
[10:34:44.167]    - args: function (..., envir = parent.frame())
[10:34:44.167]    - tweaked: FALSE
[10:34:44.167]    - call: NULL
[10:34:44.167] plan(): nbrOfWorkers() = 1
[10:34:44.168] plan(): Setting new future strategy stack:
[10:34:44.168] List of future strategies:
[10:34:44.168] 1. sequential:
[10:34:44.168]    - args: function (..., envir = parent.frame())
[10:34:44.168]    - tweaked: FALSE
[10:34:44.168]    - call: plan(strategy)
[10:34:44.168] plan(): nbrOfWorkers() = 1
[10:34:44.168] SequentialFuture started (and completed)
[10:34:44.168] - Launch lazy future ... done
[10:34:44.168] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[10:34:44.169] getGlobalsAndPackages() ...
[10:34:44.169] Searching for globals...
[10:34:44.171] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.172] Searching for globals ... DONE
[10:34:44.172] Resolving globals: FALSE
[10:34:44.172] 
[10:34:44.172] - packages: [1] ‘utils’
[10:34:44.172] getGlobalsAndPackages() ... DONE
[10:34:44.173] run() for ‘Future’ ...
[10:34:44.173] - state: ‘created’
[10:34:44.173] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.173] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.173]   - Field: ‘label’
[10:34:44.173]   - Field: ‘local’
[10:34:44.173]   - Field: ‘owner’
[10:34:44.174]   - Field: ‘envir’
[10:34:44.174]   - Field: ‘packages’
[10:34:44.174]   - Field: ‘gc’
[10:34:44.174]   - Field: ‘conditions’
[10:34:44.174]   - Field: ‘expr’
[10:34:44.174]   - Field: ‘uuid’
[10:34:44.174]   - Field: ‘seed’
[10:34:44.174]   - Field: ‘version’
[10:34:44.174]   - Field: ‘result’
[10:34:44.174]   - Field: ‘asynchronous’
[10:34:44.174]   - Field: ‘calls’
[10:34:44.175]   - Field: ‘globals’
[10:34:44.175]   - Field: ‘stdout’
[10:34:44.175]   - Field: ‘earlySignal’
[10:34:44.175]   - Field: ‘lazy’
[10:34:44.175]   - Field: ‘state’
[10:34:44.175] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.175] - Launch lazy future ...
[10:34:44.175] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.175] Packages needed by future strategies (n = 0): <none>
[10:34:44.176] {
[10:34:44.176]     {
[10:34:44.176]         {
[10:34:44.176]             ...future.startTime <- base::Sys.time()
[10:34:44.176]             {
[10:34:44.176]                 {
[10:34:44.176]                   {
[10:34:44.176]                     {
[10:34:44.176]                       base::local({
[10:34:44.176]                         has_future <- base::requireNamespace("future", 
[10:34:44.176]                           quietly = TRUE)
[10:34:44.176]                         if (has_future) {
[10:34:44.176]                           ns <- base::getNamespace("future")
[10:34:44.176]                           version <- ns[[".package"]][["version"]]
[10:34:44.176]                           if (is.null(version)) 
[10:34:44.176]                             version <- utils::packageVersion("future")
[10:34:44.176]                         }
[10:34:44.176]                         else {
[10:34:44.176]                           version <- NULL
[10:34:44.176]                         }
[10:34:44.176]                         if (!has_future || version < "1.8.0") {
[10:34:44.176]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.176]                             "", base::R.version$version.string), 
[10:34:44.176]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.176]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.176]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.176]                               "release", "version")], collapse = " "), 
[10:34:44.176]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.176]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.176]                             info)
[10:34:44.176]                           info <- base::paste(info, collapse = "; ")
[10:34:44.176]                           if (!has_future) {
[10:34:44.176]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.176]                               info)
[10:34:44.176]                           }
[10:34:44.176]                           else {
[10:34:44.176]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.176]                               info, version)
[10:34:44.176]                           }
[10:34:44.176]                           base::stop(msg)
[10:34:44.176]                         }
[10:34:44.176]                       })
[10:34:44.176]                     }
[10:34:44.176]                     base::local({
[10:34:44.176]                       for (pkg in "utils") {
[10:34:44.176]                         base::loadNamespace(pkg)
[10:34:44.176]                         base::library(pkg, character.only = TRUE)
[10:34:44.176]                       }
[10:34:44.176]                     })
[10:34:44.176]                   }
[10:34:44.176]                   ...future.strategy.old <- future::plan("list")
[10:34:44.176]                   options(future.plan = NULL)
[10:34:44.176]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.176]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.176]                 }
[10:34:44.176]                 ...future.workdir <- getwd()
[10:34:44.176]             }
[10:34:44.176]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.176]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.176]         }
[10:34:44.176]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.176]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.176]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.176]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.176]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.176]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.176]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.176]             base::names(...future.oldOptions))
[10:34:44.176]     }
[10:34:44.176]     if (TRUE) {
[10:34:44.176]     }
[10:34:44.176]     else {
[10:34:44.176]         if (NA) {
[10:34:44.176]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.176]                 open = "w")
[10:34:44.176]         }
[10:34:44.176]         else {
[10:34:44.176]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.176]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.176]         }
[10:34:44.176]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.176]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.176]             base::sink(type = "output", split = FALSE)
[10:34:44.176]             base::close(...future.stdout)
[10:34:44.176]         }, add = TRUE)
[10:34:44.176]     }
[10:34:44.176]     ...future.frame <- base::sys.nframe()
[10:34:44.176]     ...future.conditions <- base::list()
[10:34:44.176]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.176]     if (FALSE) {
[10:34:44.176]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.176]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.176]     }
[10:34:44.176]     ...future.result <- base::tryCatch({
[10:34:44.176]         base::withCallingHandlers({
[10:34:44.176]             ...future.value <- base::withVisible(base::local({
[10:34:44.176]                 print(1:50)
[10:34:44.176]                 str(1:50)
[10:34:44.176]                 cat(letters, sep = "-")
[10:34:44.176]                 cat(1:6, collapse = "\n")
[10:34:44.176]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.176]                 42L
[10:34:44.176]             }))
[10:34:44.176]             future::FutureResult(value = ...future.value$value, 
[10:34:44.176]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.176]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.176]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.176]                     ...future.globalenv.names))
[10:34:44.176]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.176]         }, condition = base::local({
[10:34:44.176]             c <- base::c
[10:34:44.176]             inherits <- base::inherits
[10:34:44.176]             invokeRestart <- base::invokeRestart
[10:34:44.176]             length <- base::length
[10:34:44.176]             list <- base::list
[10:34:44.176]             seq.int <- base::seq.int
[10:34:44.176]             signalCondition <- base::signalCondition
[10:34:44.176]             sys.calls <- base::sys.calls
[10:34:44.176]             `[[` <- base::`[[`
[10:34:44.176]             `+` <- base::`+`
[10:34:44.176]             `<<-` <- base::`<<-`
[10:34:44.176]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.176]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.176]                   3L)]
[10:34:44.176]             }
[10:34:44.176]             function(cond) {
[10:34:44.176]                 is_error <- inherits(cond, "error")
[10:34:44.176]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.176]                   NULL)
[10:34:44.176]                 if (is_error) {
[10:34:44.176]                   sessionInformation <- function() {
[10:34:44.176]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.176]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.176]                       search = base::search(), system = base::Sys.info())
[10:34:44.176]                   }
[10:34:44.176]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.176]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.176]                     cond$call), session = sessionInformation(), 
[10:34:44.176]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.176]                   signalCondition(cond)
[10:34:44.176]                 }
[10:34:44.176]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.176]                 "immediateCondition"))) {
[10:34:44.176]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.176]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.176]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.176]                   if (TRUE && !signal) {
[10:34:44.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.176]                     {
[10:34:44.176]                       inherits <- base::inherits
[10:34:44.176]                       invokeRestart <- base::invokeRestart
[10:34:44.176]                       is.null <- base::is.null
[10:34:44.176]                       muffled <- FALSE
[10:34:44.176]                       if (inherits(cond, "message")) {
[10:34:44.176]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.176]                         if (muffled) 
[10:34:44.176]                           invokeRestart("muffleMessage")
[10:34:44.176]                       }
[10:34:44.176]                       else if (inherits(cond, "warning")) {
[10:34:44.176]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.176]                         if (muffled) 
[10:34:44.176]                           invokeRestart("muffleWarning")
[10:34:44.176]                       }
[10:34:44.176]                       else if (inherits(cond, "condition")) {
[10:34:44.176]                         if (!is.null(pattern)) {
[10:34:44.176]                           computeRestarts <- base::computeRestarts
[10:34:44.176]                           grepl <- base::grepl
[10:34:44.176]                           restarts <- computeRestarts(cond)
[10:34:44.176]                           for (restart in restarts) {
[10:34:44.176]                             name <- restart$name
[10:34:44.176]                             if (is.null(name)) 
[10:34:44.176]                               next
[10:34:44.176]                             if (!grepl(pattern, name)) 
[10:34:44.176]                               next
[10:34:44.176]                             invokeRestart(restart)
[10:34:44.176]                             muffled <- TRUE
[10:34:44.176]                             break
[10:34:44.176]                           }
[10:34:44.176]                         }
[10:34:44.176]                       }
[10:34:44.176]                       invisible(muffled)
[10:34:44.176]                     }
[10:34:44.176]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.176]                   }
[10:34:44.176]                 }
[10:34:44.176]                 else {
[10:34:44.176]                   if (TRUE) {
[10:34:44.176]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.176]                     {
[10:34:44.176]                       inherits <- base::inherits
[10:34:44.176]                       invokeRestart <- base::invokeRestart
[10:34:44.176]                       is.null <- base::is.null
[10:34:44.176]                       muffled <- FALSE
[10:34:44.176]                       if (inherits(cond, "message")) {
[10:34:44.176]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.176]                         if (muffled) 
[10:34:44.176]                           invokeRestart("muffleMessage")
[10:34:44.176]                       }
[10:34:44.176]                       else if (inherits(cond, "warning")) {
[10:34:44.176]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.176]                         if (muffled) 
[10:34:44.176]                           invokeRestart("muffleWarning")
[10:34:44.176]                       }
[10:34:44.176]                       else if (inherits(cond, "condition")) {
[10:34:44.176]                         if (!is.null(pattern)) {
[10:34:44.176]                           computeRestarts <- base::computeRestarts
[10:34:44.176]                           grepl <- base::grepl
[10:34:44.176]                           restarts <- computeRestarts(cond)
[10:34:44.176]                           for (restart in restarts) {
[10:34:44.176]                             name <- restart$name
[10:34:44.176]                             if (is.null(name)) 
[10:34:44.176]                               next
[10:34:44.176]                             if (!grepl(pattern, name)) 
[10:34:44.176]                               next
[10:34:44.176]                             invokeRestart(restart)
[10:34:44.176]                             muffled <- TRUE
[10:34:44.176]                             break
[10:34:44.176]                           }
[10:34:44.176]                         }
[10:34:44.176]                       }
[10:34:44.176]                       invisible(muffled)
[10:34:44.176]                     }
[10:34:44.176]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.176]                   }
[10:34:44.176]                 }
[10:34:44.176]             }
[10:34:44.176]         }))
[10:34:44.176]     }, error = function(ex) {
[10:34:44.176]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.176]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.176]                 ...future.rng), started = ...future.startTime, 
[10:34:44.176]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.176]             version = "1.8"), class = "FutureResult")
[10:34:44.176]     }, finally = {
[10:34:44.176]         if (!identical(...future.workdir, getwd())) 
[10:34:44.176]             setwd(...future.workdir)
[10:34:44.176]         {
[10:34:44.176]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.176]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.176]             }
[10:34:44.176]             base::options(...future.oldOptions)
[10:34:44.176]             if (.Platform$OS.type == "windows") {
[10:34:44.176]                 old_names <- names(...future.oldEnvVars)
[10:34:44.176]                 envs <- base::Sys.getenv()
[10:34:44.176]                 names <- names(envs)
[10:34:44.176]                 common <- intersect(names, old_names)
[10:34:44.176]                 added <- setdiff(names, old_names)
[10:34:44.176]                 removed <- setdiff(old_names, names)
[10:34:44.176]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.176]                   envs[common]]
[10:34:44.176]                 NAMES <- toupper(changed)
[10:34:44.176]                 args <- list()
[10:34:44.176]                 for (kk in seq_along(NAMES)) {
[10:34:44.176]                   name <- changed[[kk]]
[10:34:44.176]                   NAME <- NAMES[[kk]]
[10:34:44.176]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.176]                     next
[10:34:44.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.176]                 }
[10:34:44.176]                 NAMES <- toupper(added)
[10:34:44.176]                 for (kk in seq_along(NAMES)) {
[10:34:44.176]                   name <- added[[kk]]
[10:34:44.176]                   NAME <- NAMES[[kk]]
[10:34:44.176]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.176]                     next
[10:34:44.176]                   args[[name]] <- ""
[10:34:44.176]                 }
[10:34:44.176]                 NAMES <- toupper(removed)
[10:34:44.176]                 for (kk in seq_along(NAMES)) {
[10:34:44.176]                   name <- removed[[kk]]
[10:34:44.176]                   NAME <- NAMES[[kk]]
[10:34:44.176]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.176]                     next
[10:34:44.176]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.176]                 }
[10:34:44.176]                 if (length(args) > 0) 
[10:34:44.176]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.176]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.176]             }
[10:34:44.176]             else {
[10:34:44.176]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.176]             }
[10:34:44.176]             {
[10:34:44.176]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.176]                   0L) {
[10:34:44.176]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.176]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.176]                   base::options(opts)
[10:34:44.176]                 }
[10:34:44.176]                 {
[10:34:44.176]                   {
[10:34:44.176]                     NULL
[10:34:44.176]                     RNGkind("Mersenne-Twister")
[10:34:44.176]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.176]                       inherits = FALSE)
[10:34:44.176]                   }
[10:34:44.176]                   options(future.plan = NULL)
[10:34:44.176]                   if (is.na(NA_character_)) 
[10:34:44.176]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.176]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.176]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.176]                     .init = FALSE)
[10:34:44.176]                 }
[10:34:44.176]             }
[10:34:44.176]         }
[10:34:44.176]     })
[10:34:44.176]     if (FALSE) {
[10:34:44.176]         base::sink(type = "output", split = FALSE)
[10:34:44.176]         if (NA) {
[10:34:44.176]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.176]         }
[10:34:44.176]         else {
[10:34:44.176]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.176]         }
[10:34:44.176]         base::close(...future.stdout)
[10:34:44.176]         ...future.stdout <- NULL
[10:34:44.176]     }
[10:34:44.176]     ...future.result$conditions <- ...future.conditions
[10:34:44.176]     ...future.result$finished <- base::Sys.time()
[10:34:44.176]     ...future.result
[10:34:44.176] }
[10:34:44.178] plan(): Setting new future strategy stack:
[10:34:44.178] List of future strategies:
[10:34:44.178] 1. sequential:
[10:34:44.178]    - args: function (..., envir = parent.frame())
[10:34:44.178]    - tweaked: FALSE
[10:34:44.178]    - call: NULL
[10:34:44.178] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[10:34:44.180] plan(): Setting new future strategy stack:
[10:34:44.180] List of future strategies:
[10:34:44.180] 1. sequential:
[10:34:44.180]    - args: function (..., envir = parent.frame())
[10:34:44.180]    - tweaked: FALSE
[10:34:44.180]    - call: plan(strategy)
[10:34:44.180] plan(): nbrOfWorkers() = 1
[10:34:44.180] SequentialFuture started (and completed)
[10:34:44.180] - Launch lazy future ... done
[10:34:44.180] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "28208280-3ab2-da24-9824-2c6e0517d440"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90114
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:43"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:44.189] getGlobalsAndPackages() ...
[10:34:44.189] Searching for globals...
[10:34:44.192] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.192] Searching for globals ... DONE
[10:34:44.192] Resolving globals: FALSE
[10:34:44.192] 
[10:34:44.193] - packages: [1] ‘utils’
[10:34:44.193] getGlobalsAndPackages() ... DONE
[10:34:44.193] run() for ‘Future’ ...
[10:34:44.193] - state: ‘created’
[10:34:44.193] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.193] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.193] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.194]   - Field: ‘label’
[10:34:44.194]   - Field: ‘local’
[10:34:44.194]   - Field: ‘owner’
[10:34:44.194]   - Field: ‘envir’
[10:34:44.194]   - Field: ‘packages’
[10:34:44.194]   - Field: ‘gc’
[10:34:44.194]   - Field: ‘conditions’
[10:34:44.194]   - Field: ‘expr’
[10:34:44.194]   - Field: ‘uuid’
[10:34:44.194]   - Field: ‘seed’
[10:34:44.194]   - Field: ‘version’
[10:34:44.195]   - Field: ‘result’
[10:34:44.195]   - Field: ‘asynchronous’
[10:34:44.195]   - Field: ‘calls’
[10:34:44.195]   - Field: ‘globals’
[10:34:44.195]   - Field: ‘stdout’
[10:34:44.195]   - Field: ‘earlySignal’
[10:34:44.195]   - Field: ‘lazy’
[10:34:44.195]   - Field: ‘state’
[10:34:44.195] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.195] - Launch lazy future ...
[10:34:44.196] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.196] Packages needed by future strategies (n = 0): <none>
[10:34:44.196] {
[10:34:44.196]     {
[10:34:44.196]         {
[10:34:44.196]             ...future.startTime <- base::Sys.time()
[10:34:44.196]             {
[10:34:44.196]                 {
[10:34:44.196]                   {
[10:34:44.196]                     {
[10:34:44.196]                       base::local({
[10:34:44.196]                         has_future <- base::requireNamespace("future", 
[10:34:44.196]                           quietly = TRUE)
[10:34:44.196]                         if (has_future) {
[10:34:44.196]                           ns <- base::getNamespace("future")
[10:34:44.196]                           version <- ns[[".package"]][["version"]]
[10:34:44.196]                           if (is.null(version)) 
[10:34:44.196]                             version <- utils::packageVersion("future")
[10:34:44.196]                         }
[10:34:44.196]                         else {
[10:34:44.196]                           version <- NULL
[10:34:44.196]                         }
[10:34:44.196]                         if (!has_future || version < "1.8.0") {
[10:34:44.196]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.196]                             "", base::R.version$version.string), 
[10:34:44.196]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.196]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.196]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.196]                               "release", "version")], collapse = " "), 
[10:34:44.196]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.196]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.196]                             info)
[10:34:44.196]                           info <- base::paste(info, collapse = "; ")
[10:34:44.196]                           if (!has_future) {
[10:34:44.196]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.196]                               info)
[10:34:44.196]                           }
[10:34:44.196]                           else {
[10:34:44.196]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.196]                               info, version)
[10:34:44.196]                           }
[10:34:44.196]                           base::stop(msg)
[10:34:44.196]                         }
[10:34:44.196]                       })
[10:34:44.196]                     }
[10:34:44.196]                     base::local({
[10:34:44.196]                       for (pkg in "utils") {
[10:34:44.196]                         base::loadNamespace(pkg)
[10:34:44.196]                         base::library(pkg, character.only = TRUE)
[10:34:44.196]                       }
[10:34:44.196]                     })
[10:34:44.196]                   }
[10:34:44.196]                   ...future.strategy.old <- future::plan("list")
[10:34:44.196]                   options(future.plan = NULL)
[10:34:44.196]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.196]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.196]                 }
[10:34:44.196]                 ...future.workdir <- getwd()
[10:34:44.196]             }
[10:34:44.196]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.196]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.196]         }
[10:34:44.196]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.196]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.196]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.196]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.196]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.196]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.196]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.196]             base::names(...future.oldOptions))
[10:34:44.196]     }
[10:34:44.196]     if (TRUE) {
[10:34:44.196]     }
[10:34:44.196]     else {
[10:34:44.196]         if (NA) {
[10:34:44.196]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.196]                 open = "w")
[10:34:44.196]         }
[10:34:44.196]         else {
[10:34:44.196]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.196]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.196]         }
[10:34:44.196]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.196]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.196]             base::sink(type = "output", split = FALSE)
[10:34:44.196]             base::close(...future.stdout)
[10:34:44.196]         }, add = TRUE)
[10:34:44.196]     }
[10:34:44.196]     ...future.frame <- base::sys.nframe()
[10:34:44.196]     ...future.conditions <- base::list()
[10:34:44.196]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.196]     if (FALSE) {
[10:34:44.196]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.196]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.196]     }
[10:34:44.196]     ...future.result <- base::tryCatch({
[10:34:44.196]         base::withCallingHandlers({
[10:34:44.196]             ...future.value <- base::withVisible(base::local({
[10:34:44.196]                 print(1:50)
[10:34:44.196]                 str(1:50)
[10:34:44.196]                 cat(letters, sep = "-")
[10:34:44.196]                 cat(1:6, collapse = "\n")
[10:34:44.196]                 write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.196]                 42L
[10:34:44.196]             }))
[10:34:44.196]             future::FutureResult(value = ...future.value$value, 
[10:34:44.196]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.196]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.196]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.196]                     ...future.globalenv.names))
[10:34:44.196]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.196]         }, condition = base::local({
[10:34:44.196]             c <- base::c
[10:34:44.196]             inherits <- base::inherits
[10:34:44.196]             invokeRestart <- base::invokeRestart
[10:34:44.196]             length <- base::length
[10:34:44.196]             list <- base::list
[10:34:44.196]             seq.int <- base::seq.int
[10:34:44.196]             signalCondition <- base::signalCondition
[10:34:44.196]             sys.calls <- base::sys.calls
[10:34:44.196]             `[[` <- base::`[[`
[10:34:44.196]             `+` <- base::`+`
[10:34:44.196]             `<<-` <- base::`<<-`
[10:34:44.196]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.196]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.196]                   3L)]
[10:34:44.196]             }
[10:34:44.196]             function(cond) {
[10:34:44.196]                 is_error <- inherits(cond, "error")
[10:34:44.196]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.196]                   NULL)
[10:34:44.196]                 if (is_error) {
[10:34:44.196]                   sessionInformation <- function() {
[10:34:44.196]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.196]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.196]                       search = base::search(), system = base::Sys.info())
[10:34:44.196]                   }
[10:34:44.196]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.196]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.196]                     cond$call), session = sessionInformation(), 
[10:34:44.196]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.196]                   signalCondition(cond)
[10:34:44.196]                 }
[10:34:44.196]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.196]                 "immediateCondition"))) {
[10:34:44.196]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.196]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.196]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.196]                   if (TRUE && !signal) {
[10:34:44.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.196]                     {
[10:34:44.196]                       inherits <- base::inherits
[10:34:44.196]                       invokeRestart <- base::invokeRestart
[10:34:44.196]                       is.null <- base::is.null
[10:34:44.196]                       muffled <- FALSE
[10:34:44.196]                       if (inherits(cond, "message")) {
[10:34:44.196]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.196]                         if (muffled) 
[10:34:44.196]                           invokeRestart("muffleMessage")
[10:34:44.196]                       }
[10:34:44.196]                       else if (inherits(cond, "warning")) {
[10:34:44.196]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.196]                         if (muffled) 
[10:34:44.196]                           invokeRestart("muffleWarning")
[10:34:44.196]                       }
[10:34:44.196]                       else if (inherits(cond, "condition")) {
[10:34:44.196]                         if (!is.null(pattern)) {
[10:34:44.196]                           computeRestarts <- base::computeRestarts
[10:34:44.196]                           grepl <- base::grepl
[10:34:44.196]                           restarts <- computeRestarts(cond)
[10:34:44.196]                           for (restart in restarts) {
[10:34:44.196]                             name <- restart$name
[10:34:44.196]                             if (is.null(name)) 
[10:34:44.196]                               next
[10:34:44.196]                             if (!grepl(pattern, name)) 
[10:34:44.196]                               next
[10:34:44.196]                             invokeRestart(restart)
[10:34:44.196]                             muffled <- TRUE
[10:34:44.196]                             break
[10:34:44.196]                           }
[10:34:44.196]                         }
[10:34:44.196]                       }
[10:34:44.196]                       invisible(muffled)
[10:34:44.196]                     }
[10:34:44.196]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.196]                   }
[10:34:44.196]                 }
[10:34:44.196]                 else {
[10:34:44.196]                   if (TRUE) {
[10:34:44.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.196]                     {
[10:34:44.196]                       inherits <- base::inherits
[10:34:44.196]                       invokeRestart <- base::invokeRestart
[10:34:44.196]                       is.null <- base::is.null
[10:34:44.196]                       muffled <- FALSE
[10:34:44.196]                       if (inherits(cond, "message")) {
[10:34:44.196]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.196]                         if (muffled) 
[10:34:44.196]                           invokeRestart("muffleMessage")
[10:34:44.196]                       }
[10:34:44.196]                       else if (inherits(cond, "warning")) {
[10:34:44.196]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.196]                         if (muffled) 
[10:34:44.196]                           invokeRestart("muffleWarning")
[10:34:44.196]                       }
[10:34:44.196]                       else if (inherits(cond, "condition")) {
[10:34:44.196]                         if (!is.null(pattern)) {
[10:34:44.196]                           computeRestarts <- base::computeRestarts
[10:34:44.196]                           grepl <- base::grepl
[10:34:44.196]                           restarts <- computeRestarts(cond)
[10:34:44.196]                           for (restart in restarts) {
[10:34:44.196]                             name <- restart$name
[10:34:44.196]                             if (is.null(name)) 
[10:34:44.196]                               next
[10:34:44.196]                             if (!grepl(pattern, name)) 
[10:34:44.196]                               next
[10:34:44.196]                             invokeRestart(restart)
[10:34:44.196]                             muffled <- TRUE
[10:34:44.196]                             break
[10:34:44.196]                           }
[10:34:44.196]                         }
[10:34:44.196]                       }
[10:34:44.196]                       invisible(muffled)
[10:34:44.196]                     }
[10:34:44.196]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.196]                   }
[10:34:44.196]                 }
[10:34:44.196]             }
[10:34:44.196]         }))
[10:34:44.196]     }, error = function(ex) {
[10:34:44.196]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.196]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.196]                 ...future.rng), started = ...future.startTime, 
[10:34:44.196]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.196]             version = "1.8"), class = "FutureResult")
[10:34:44.196]     }, finally = {
[10:34:44.196]         if (!identical(...future.workdir, getwd())) 
[10:34:44.196]             setwd(...future.workdir)
[10:34:44.196]         {
[10:34:44.196]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.196]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.196]             }
[10:34:44.196]             base::options(...future.oldOptions)
[10:34:44.196]             if (.Platform$OS.type == "windows") {
[10:34:44.196]                 old_names <- names(...future.oldEnvVars)
[10:34:44.196]                 envs <- base::Sys.getenv()
[10:34:44.196]                 names <- names(envs)
[10:34:44.196]                 common <- intersect(names, old_names)
[10:34:44.196]                 added <- setdiff(names, old_names)
[10:34:44.196]                 removed <- setdiff(old_names, names)
[10:34:44.196]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.196]                   envs[common]]
[10:34:44.196]                 NAMES <- toupper(changed)
[10:34:44.196]                 args <- list()
[10:34:44.196]                 for (kk in seq_along(NAMES)) {
[10:34:44.196]                   name <- changed[[kk]]
[10:34:44.196]                   NAME <- NAMES[[kk]]
[10:34:44.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.196]                     next
[10:34:44.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.196]                 }
[10:34:44.196]                 NAMES <- toupper(added)
[10:34:44.196]                 for (kk in seq_along(NAMES)) {
[10:34:44.196]                   name <- added[[kk]]
[10:34:44.196]                   NAME <- NAMES[[kk]]
[10:34:44.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.196]                     next
[10:34:44.196]                   args[[name]] <- ""
[10:34:44.196]                 }
[10:34:44.196]                 NAMES <- toupper(removed)
[10:34:44.196]                 for (kk in seq_along(NAMES)) {
[10:34:44.196]                   name <- removed[[kk]]
[10:34:44.196]                   NAME <- NAMES[[kk]]
[10:34:44.196]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.196]                     next
[10:34:44.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.196]                 }
[10:34:44.196]                 if (length(args) > 0) 
[10:34:44.196]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.196]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.196]             }
[10:34:44.196]             else {
[10:34:44.196]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.196]             }
[10:34:44.196]             {
[10:34:44.196]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.196]                   0L) {
[10:34:44.196]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.196]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.196]                   base::options(opts)
[10:34:44.196]                 }
[10:34:44.196]                 {
[10:34:44.196]                   {
[10:34:44.196]                     NULL
[10:34:44.196]                     RNGkind("Mersenne-Twister")
[10:34:44.196]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.196]                       inherits = FALSE)
[10:34:44.196]                   }
[10:34:44.196]                   options(future.plan = NULL)
[10:34:44.196]                   if (is.na(NA_character_)) 
[10:34:44.196]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.196]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.196]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.196]                     .init = FALSE)
[10:34:44.196]                 }
[10:34:44.196]             }
[10:34:44.196]         }
[10:34:44.196]     })
[10:34:44.196]     if (FALSE) {
[10:34:44.196]         base::sink(type = "output", split = FALSE)
[10:34:44.196]         if (NA) {
[10:34:44.196]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.196]         }
[10:34:44.196]         else {
[10:34:44.196]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.196]         }
[10:34:44.196]         base::close(...future.stdout)
[10:34:44.196]         ...future.stdout <- NULL
[10:34:44.196]     }
[10:34:44.196]     ...future.result$conditions <- ...future.conditions
[10:34:44.196]     ...future.result$finished <- base::Sys.time()
[10:34:44.196]     ...future.result
[10:34:44.196] }
[10:34:44.198] plan(): Setting new future strategy stack:
[10:34:44.198] List of future strategies:
[10:34:44.198] 1. sequential:
[10:34:44.198]    - args: function (..., envir = parent.frame())
[10:34:44.198]    - tweaked: FALSE
[10:34:44.198]    - call: NULL
[10:34:44.198] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[10:34:44.200] plan(): Setting new future strategy stack:
[10:34:44.200] List of future strategies:
[10:34:44.200] 1. sequential:
[10:34:44.200]    - args: function (..., envir = parent.frame())
[10:34:44.200]    - tweaked: FALSE
[10:34:44.200]    - call: plan(strategy)
[10:34:44.200] plan(): nbrOfWorkers() = 1
[10:34:44.200] SequentialFuture started (and completed)
[10:34:44.201] - Launch lazy future ... done
[10:34:44.201] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.201] getGlobalsAndPackages() ...
[10:34:44.201] Searching for globals...
[10:34:44.202] - globals found: [1] ‘print’
[10:34:44.202] Searching for globals ... DONE
[10:34:44.202] Resolving globals: FALSE
[10:34:44.202] 
[10:34:44.202] 
[10:34:44.202] getGlobalsAndPackages() ... DONE
[10:34:44.202] run() for ‘Future’ ...
[10:34:44.202] - state: ‘created’
[10:34:44.203] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:34:44.203] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:34:44.203] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:34:44.203]   - Field: ‘label’
[10:34:44.203]   - Field: ‘local’
[10:34:44.203]   - Field: ‘owner’
[10:34:44.203]   - Field: ‘envir’
[10:34:44.203]   - Field: ‘packages’
[10:34:44.203]   - Field: ‘gc’
[10:34:44.204]   - Field: ‘conditions’
[10:34:44.204]   - Field: ‘expr’
[10:34:44.204]   - Field: ‘uuid’
[10:34:44.204]   - Field: ‘seed’
[10:34:44.204]   - Field: ‘version’
[10:34:44.204]   - Field: ‘result’
[10:34:44.204]   - Field: ‘asynchronous’
[10:34:44.204]   - Field: ‘calls’
[10:34:44.204]   - Field: ‘globals’
[10:34:44.204]   - Field: ‘stdout’
[10:34:44.204]   - Field: ‘earlySignal’
[10:34:44.205]   - Field: ‘lazy’
[10:34:44.205]   - Field: ‘state’
[10:34:44.205] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:34:44.205] - Launch lazy future ...
[10:34:44.205] Packages needed by the future expression (n = 0): <none>
[10:34:44.205] Packages needed by future strategies (n = 0): <none>
[10:34:44.205] {
[10:34:44.205]     {
[10:34:44.205]         {
[10:34:44.205]             ...future.startTime <- base::Sys.time()
[10:34:44.205]             {
[10:34:44.205]                 {
[10:34:44.205]                   {
[10:34:44.205]                     base::local({
[10:34:44.205]                       has_future <- base::requireNamespace("future", 
[10:34:44.205]                         quietly = TRUE)
[10:34:44.205]                       if (has_future) {
[10:34:44.205]                         ns <- base::getNamespace("future")
[10:34:44.205]                         version <- ns[[".package"]][["version"]]
[10:34:44.205]                         if (is.null(version)) 
[10:34:44.205]                           version <- utils::packageVersion("future")
[10:34:44.205]                       }
[10:34:44.205]                       else {
[10:34:44.205]                         version <- NULL
[10:34:44.205]                       }
[10:34:44.205]                       if (!has_future || version < "1.8.0") {
[10:34:44.205]                         info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.205]                           "", base::R.version$version.string), 
[10:34:44.205]                           platform = base::sprintf("%s (%s-bit)", 
[10:34:44.205]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.205]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.205]                             "release", "version")], collapse = " "), 
[10:34:44.205]                           hostname = base::Sys.info()[["nodename"]])
[10:34:44.205]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.205]                           info)
[10:34:44.205]                         info <- base::paste(info, collapse = "; ")
[10:34:44.205]                         if (!has_future) {
[10:34:44.205]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.205]                             info)
[10:34:44.205]                         }
[10:34:44.205]                         else {
[10:34:44.205]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.205]                             info, version)
[10:34:44.205]                         }
[10:34:44.205]                         base::stop(msg)
[10:34:44.205]                       }
[10:34:44.205]                     })
[10:34:44.205]                   }
[10:34:44.205]                   ...future.strategy.old <- future::plan("list")
[10:34:44.205]                   options(future.plan = NULL)
[10:34:44.205]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.205]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.205]                 }
[10:34:44.205]                 ...future.workdir <- getwd()
[10:34:44.205]             }
[10:34:44.205]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.205]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.205]         }
[10:34:44.205]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.205]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.205]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.205]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.205]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.205]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.205]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.205]             base::names(...future.oldOptions))
[10:34:44.205]     }
[10:34:44.205]     if (FALSE) {
[10:34:44.205]     }
[10:34:44.205]     else {
[10:34:44.205]         if (TRUE) {
[10:34:44.205]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.205]                 open = "w")
[10:34:44.205]         }
[10:34:44.205]         else {
[10:34:44.205]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.205]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.205]         }
[10:34:44.205]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.205]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.205]             base::sink(type = "output", split = FALSE)
[10:34:44.205]             base::close(...future.stdout)
[10:34:44.205]         }, add = TRUE)
[10:34:44.205]     }
[10:34:44.205]     ...future.frame <- base::sys.nframe()
[10:34:44.205]     ...future.conditions <- base::list()
[10:34:44.205]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.205]     if (FALSE) {
[10:34:44.205]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.205]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.205]     }
[10:34:44.205]     ...future.result <- base::tryCatch({
[10:34:44.205]         base::withCallingHandlers({
[10:34:44.205]             ...future.value <- base::withVisible(base::local(print(42)))
[10:34:44.205]             future::FutureResult(value = ...future.value$value, 
[10:34:44.205]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.205]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.205]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.205]                     ...future.globalenv.names))
[10:34:44.205]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.205]         }, condition = base::local({
[10:34:44.205]             c <- base::c
[10:34:44.205]             inherits <- base::inherits
[10:34:44.205]             invokeRestart <- base::invokeRestart
[10:34:44.205]             length <- base::length
[10:34:44.205]             list <- base::list
[10:34:44.205]             seq.int <- base::seq.int
[10:34:44.205]             signalCondition <- base::signalCondition
[10:34:44.205]             sys.calls <- base::sys.calls
[10:34:44.205]             `[[` <- base::`[[`
[10:34:44.205]             `+` <- base::`+`
[10:34:44.205]             `<<-` <- base::`<<-`
[10:34:44.205]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.205]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.205]                   3L)]
[10:34:44.205]             }
[10:34:44.205]             function(cond) {
[10:34:44.205]                 is_error <- inherits(cond, "error")
[10:34:44.205]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.205]                   NULL)
[10:34:44.205]                 if (is_error) {
[10:34:44.205]                   sessionInformation <- function() {
[10:34:44.205]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.205]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.205]                       search = base::search(), system = base::Sys.info())
[10:34:44.205]                   }
[10:34:44.205]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.205]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.205]                     cond$call), session = sessionInformation(), 
[10:34:44.205]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.205]                   signalCondition(cond)
[10:34:44.205]                 }
[10:34:44.205]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.205]                 "immediateCondition"))) {
[10:34:44.205]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.205]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.205]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.205]                   if (TRUE && !signal) {
[10:34:44.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.205]                     {
[10:34:44.205]                       inherits <- base::inherits
[10:34:44.205]                       invokeRestart <- base::invokeRestart
[10:34:44.205]                       is.null <- base::is.null
[10:34:44.205]                       muffled <- FALSE
[10:34:44.205]                       if (inherits(cond, "message")) {
[10:34:44.205]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.205]                         if (muffled) 
[10:34:44.205]                           invokeRestart("muffleMessage")
[10:34:44.205]                       }
[10:34:44.205]                       else if (inherits(cond, "warning")) {
[10:34:44.205]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.205]                         if (muffled) 
[10:34:44.205]                           invokeRestart("muffleWarning")
[10:34:44.205]                       }
[10:34:44.205]                       else if (inherits(cond, "condition")) {
[10:34:44.205]                         if (!is.null(pattern)) {
[10:34:44.205]                           computeRestarts <- base::computeRestarts
[10:34:44.205]                           grepl <- base::grepl
[10:34:44.205]                           restarts <- computeRestarts(cond)
[10:34:44.205]                           for (restart in restarts) {
[10:34:44.205]                             name <- restart$name
[10:34:44.205]                             if (is.null(name)) 
[10:34:44.205]                               next
[10:34:44.205]                             if (!grepl(pattern, name)) 
[10:34:44.205]                               next
[10:34:44.205]                             invokeRestart(restart)
[10:34:44.205]                             muffled <- TRUE
[10:34:44.205]                             break
[10:34:44.205]                           }
[10:34:44.205]                         }
[10:34:44.205]                       }
[10:34:44.205]                       invisible(muffled)
[10:34:44.205]                     }
[10:34:44.205]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.205]                   }
[10:34:44.205]                 }
[10:34:44.205]                 else {
[10:34:44.205]                   if (TRUE) {
[10:34:44.205]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.205]                     {
[10:34:44.205]                       inherits <- base::inherits
[10:34:44.205]                       invokeRestart <- base::invokeRestart
[10:34:44.205]                       is.null <- base::is.null
[10:34:44.205]                       muffled <- FALSE
[10:34:44.205]                       if (inherits(cond, "message")) {
[10:34:44.205]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.205]                         if (muffled) 
[10:34:44.205]                           invokeRestart("muffleMessage")
[10:34:44.205]                       }
[10:34:44.205]                       else if (inherits(cond, "warning")) {
[10:34:44.205]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.205]                         if (muffled) 
[10:34:44.205]                           invokeRestart("muffleWarning")
[10:34:44.205]                       }
[10:34:44.205]                       else if (inherits(cond, "condition")) {
[10:34:44.205]                         if (!is.null(pattern)) {
[10:34:44.205]                           computeRestarts <- base::computeRestarts
[10:34:44.205]                           grepl <- base::grepl
[10:34:44.205]                           restarts <- computeRestarts(cond)
[10:34:44.205]                           for (restart in restarts) {
[10:34:44.205]                             name <- restart$name
[10:34:44.205]                             if (is.null(name)) 
[10:34:44.205]                               next
[10:34:44.205]                             if (!grepl(pattern, name)) 
[10:34:44.205]                               next
[10:34:44.205]                             invokeRestart(restart)
[10:34:44.205]                             muffled <- TRUE
[10:34:44.205]                             break
[10:34:44.205]                           }
[10:34:44.205]                         }
[10:34:44.205]                       }
[10:34:44.205]                       invisible(muffled)
[10:34:44.205]                     }
[10:34:44.205]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.205]                   }
[10:34:44.205]                 }
[10:34:44.205]             }
[10:34:44.205]         }))
[10:34:44.205]     }, error = function(ex) {
[10:34:44.205]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.205]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.205]                 ...future.rng), started = ...future.startTime, 
[10:34:44.205]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.205]             version = "1.8"), class = "FutureResult")
[10:34:44.205]     }, finally = {
[10:34:44.205]         if (!identical(...future.workdir, getwd())) 
[10:34:44.205]             setwd(...future.workdir)
[10:34:44.205]         {
[10:34:44.205]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.205]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.205]             }
[10:34:44.205]             base::options(...future.oldOptions)
[10:34:44.205]             if (.Platform$OS.type == "windows") {
[10:34:44.205]                 old_names <- names(...future.oldEnvVars)
[10:34:44.205]                 envs <- base::Sys.getenv()
[10:34:44.205]                 names <- names(envs)
[10:34:44.205]                 common <- intersect(names, old_names)
[10:34:44.205]                 added <- setdiff(names, old_names)
[10:34:44.205]                 removed <- setdiff(old_names, names)
[10:34:44.205]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.205]                   envs[common]]
[10:34:44.205]                 NAMES <- toupper(changed)
[10:34:44.205]                 args <- list()
[10:34:44.205]                 for (kk in seq_along(NAMES)) {
[10:34:44.205]                   name <- changed[[kk]]
[10:34:44.205]                   NAME <- NAMES[[kk]]
[10:34:44.205]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.205]                     next
[10:34:44.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.205]                 }
[10:34:44.205]                 NAMES <- toupper(added)
[10:34:44.205]                 for (kk in seq_along(NAMES)) {
[10:34:44.205]                   name <- added[[kk]]
[10:34:44.205]                   NAME <- NAMES[[kk]]
[10:34:44.205]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.205]                     next
[10:34:44.205]                   args[[name]] <- ""
[10:34:44.205]                 }
[10:34:44.205]                 NAMES <- toupper(removed)
[10:34:44.205]                 for (kk in seq_along(NAMES)) {
[10:34:44.205]                   name <- removed[[kk]]
[10:34:44.205]                   NAME <- NAMES[[kk]]
[10:34:44.205]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.205]                     next
[10:34:44.205]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.205]                 }
[10:34:44.205]                 if (length(args) > 0) 
[10:34:44.205]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.205]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.205]             }
[10:34:44.205]             else {
[10:34:44.205]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.205]             }
[10:34:44.205]             {
[10:34:44.205]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.205]                   0L) {
[10:34:44.205]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.205]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.205]                   base::options(opts)
[10:34:44.205]                 }
[10:34:44.205]                 {
[10:34:44.205]                   {
[10:34:44.205]                     NULL
[10:34:44.205]                     RNGkind("Mersenne-Twister")
[10:34:44.205]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:34:44.205]                       inherits = FALSE)
[10:34:44.205]                   }
[10:34:44.205]                   options(future.plan = NULL)
[10:34:44.205]                   if (is.na(NA_character_)) 
[10:34:44.205]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.205]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.205]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.205]                     .init = FALSE)
[10:34:44.205]                 }
[10:34:44.205]             }
[10:34:44.205]         }
[10:34:44.205]     })
[10:34:44.205]     if (TRUE) {
[10:34:44.205]         base::sink(type = "output", split = FALSE)
[10:34:44.205]         if (TRUE) {
[10:34:44.205]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.205]         }
[10:34:44.205]         else {
[10:34:44.205]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.205]         }
[10:34:44.205]         base::close(...future.stdout)
[10:34:44.205]         ...future.stdout <- NULL
[10:34:44.205]     }
[10:34:44.205]     ...future.result$conditions <- ...future.conditions
[10:34:44.205]     ...future.result$finished <- base::Sys.time()
[10:34:44.205]     ...future.result
[10:34:44.205] }
[10:34:44.207] plan(): Setting new future strategy stack:
[10:34:44.207] List of future strategies:
[10:34:44.207] 1. sequential:
[10:34:44.207]    - args: function (..., envir = parent.frame())
[10:34:44.207]    - tweaked: FALSE
[10:34:44.207]    - call: NULL
[10:34:44.208] plan(): nbrOfWorkers() = 1
[10:34:44.208] plan(): Setting new future strategy stack:
[10:34:44.208] List of future strategies:
[10:34:44.208] 1. sequential:
[10:34:44.208]    - args: function (..., envir = parent.frame())
[10:34:44.208]    - tweaked: FALSE
[10:34:44.208]    - call: plan(strategy)
[10:34:44.209] plan(): nbrOfWorkers() = 1
[10:34:44.209] SequentialFuture started (and completed)
[10:34:44.209] - Launch lazy future ... done
[10:34:44.209] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[10:34:44.215] plan(): Setting new future strategy stack:
[10:34:44.215] List of future strategies:
[10:34:44.215] 1. multicore:
[10:34:44.215]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.215]    - tweaked: FALSE
[10:34:44.215]    - call: plan(strategy)
[10:34:44.219] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[10:34:44.219] getGlobalsAndPackages() ...
[10:34:44.220] Searching for globals...
[10:34:44.222] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.223] Searching for globals ... DONE
[10:34:44.223] Resolving globals: FALSE
[10:34:44.223] 
[10:34:44.223] - packages: [1] ‘utils’
[10:34:44.223] getGlobalsAndPackages() ... DONE
[10:34:44.224] run() for ‘Future’ ...
[10:34:44.224] - state: ‘created’
[10:34:44.224] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.227] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.227] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.228]   - Field: ‘label’
[10:34:44.228]   - Field: ‘local’
[10:34:44.228]   - Field: ‘owner’
[10:34:44.228]   - Field: ‘envir’
[10:34:44.228]   - Field: ‘workers’
[10:34:44.228]   - Field: ‘packages’
[10:34:44.228]   - Field: ‘gc’
[10:34:44.228]   - Field: ‘job’
[10:34:44.228]   - Field: ‘conditions’
[10:34:44.228]   - Field: ‘expr’
[10:34:44.228]   - Field: ‘uuid’
[10:34:44.229]   - Field: ‘seed’
[10:34:44.229]   - Field: ‘version’
[10:34:44.229]   - Field: ‘result’
[10:34:44.229]   - Field: ‘asynchronous’
[10:34:44.229]   - Field: ‘calls’
[10:34:44.229]   - Field: ‘globals’
[10:34:44.229]   - Field: ‘stdout’
[10:34:44.229]   - Field: ‘earlySignal’
[10:34:44.229]   - Field: ‘lazy’
[10:34:44.229]   - Field: ‘state’
[10:34:44.230] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.230] - Launch lazy future ...
[10:34:44.231] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.231] Packages needed by future strategies (n = 0): <none>
[10:34:44.231] {
[10:34:44.231]     {
[10:34:44.231]         {
[10:34:44.231]             ...future.startTime <- base::Sys.time()
[10:34:44.231]             {
[10:34:44.231]                 {
[10:34:44.231]                   {
[10:34:44.231]                     {
[10:34:44.231]                       {
[10:34:44.231]                         base::local({
[10:34:44.231]                           has_future <- base::requireNamespace("future", 
[10:34:44.231]                             quietly = TRUE)
[10:34:44.231]                           if (has_future) {
[10:34:44.231]                             ns <- base::getNamespace("future")
[10:34:44.231]                             version <- ns[[".package"]][["version"]]
[10:34:44.231]                             if (is.null(version)) 
[10:34:44.231]                               version <- utils::packageVersion("future")
[10:34:44.231]                           }
[10:34:44.231]                           else {
[10:34:44.231]                             version <- NULL
[10:34:44.231]                           }
[10:34:44.231]                           if (!has_future || version < "1.8.0") {
[10:34:44.231]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.231]                               "", base::R.version$version.string), 
[10:34:44.231]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.231]                                 base::R.version$platform, 8 * 
[10:34:44.231]                                   base::.Machine$sizeof.pointer), 
[10:34:44.231]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.231]                                 "release", "version")], collapse = " "), 
[10:34:44.231]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.231]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.231]                               info)
[10:34:44.231]                             info <- base::paste(info, collapse = "; ")
[10:34:44.231]                             if (!has_future) {
[10:34:44.231]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.231]                                 info)
[10:34:44.231]                             }
[10:34:44.231]                             else {
[10:34:44.231]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.231]                                 info, version)
[10:34:44.231]                             }
[10:34:44.231]                             base::stop(msg)
[10:34:44.231]                           }
[10:34:44.231]                         })
[10:34:44.231]                       }
[10:34:44.231]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.231]                       base::options(mc.cores = 1L)
[10:34:44.231]                     }
[10:34:44.231]                     base::local({
[10:34:44.231]                       for (pkg in "utils") {
[10:34:44.231]                         base::loadNamespace(pkg)
[10:34:44.231]                         base::library(pkg, character.only = TRUE)
[10:34:44.231]                       }
[10:34:44.231]                     })
[10:34:44.231]                   }
[10:34:44.231]                   ...future.strategy.old <- future::plan("list")
[10:34:44.231]                   options(future.plan = NULL)
[10:34:44.231]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.231]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.231]                 }
[10:34:44.231]                 ...future.workdir <- getwd()
[10:34:44.231]             }
[10:34:44.231]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.231]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.231]         }
[10:34:44.231]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.231]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.231]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.231]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.231]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.231]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.231]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.231]             base::names(...future.oldOptions))
[10:34:44.231]     }
[10:34:44.231]     if (FALSE) {
[10:34:44.231]     }
[10:34:44.231]     else {
[10:34:44.231]         if (TRUE) {
[10:34:44.231]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.231]                 open = "w")
[10:34:44.231]         }
[10:34:44.231]         else {
[10:34:44.231]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.231]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.231]         }
[10:34:44.231]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.231]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.231]             base::sink(type = "output", split = FALSE)
[10:34:44.231]             base::close(...future.stdout)
[10:34:44.231]         }, add = TRUE)
[10:34:44.231]     }
[10:34:44.231]     ...future.frame <- base::sys.nframe()
[10:34:44.231]     ...future.conditions <- base::list()
[10:34:44.231]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.231]     if (FALSE) {
[10:34:44.231]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.231]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.231]     }
[10:34:44.231]     ...future.result <- base::tryCatch({
[10:34:44.231]         base::withCallingHandlers({
[10:34:44.231]             ...future.value <- base::withVisible(base::local({
[10:34:44.231]                 withCallingHandlers({
[10:34:44.231]                   {
[10:34:44.231]                     print(1:50)
[10:34:44.231]                     str(1:50)
[10:34:44.231]                     cat(letters, sep = "-")
[10:34:44.231]                     cat(1:6, collapse = "\n")
[10:34:44.231]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.231]                     42L
[10:34:44.231]                   }
[10:34:44.231]                 }, immediateCondition = function(cond) {
[10:34:44.231]                   save_rds <- function (object, pathname, ...) 
[10:34:44.231]                   {
[10:34:44.231]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.231]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.231]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.231]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.231]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.231]                         fi_tmp[["mtime"]])
[10:34:44.231]                     }
[10:34:44.231]                     tryCatch({
[10:34:44.231]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.231]                     }, error = function(ex) {
[10:34:44.231]                       msg <- conditionMessage(ex)
[10:34:44.231]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.231]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.231]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.231]                         fi_tmp[["mtime"]], msg)
[10:34:44.231]                       ex$message <- msg
[10:34:44.231]                       stop(ex)
[10:34:44.231]                     })
[10:34:44.231]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.231]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.231]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.231]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.231]                       fi <- file.info(pathname)
[10:34:44.231]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.231]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.231]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.231]                         fi[["size"]], fi[["mtime"]])
[10:34:44.231]                       stop(msg)
[10:34:44.231]                     }
[10:34:44.231]                     invisible(pathname)
[10:34:44.231]                   }
[10:34:44.231]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.231]                     rootPath = tempdir()) 
[10:34:44.231]                   {
[10:34:44.231]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.231]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.231]                       tmpdir = path, fileext = ".rds")
[10:34:44.231]                     save_rds(obj, file)
[10:34:44.231]                   }
[10:34:44.231]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.231]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.231]                   {
[10:34:44.231]                     inherits <- base::inherits
[10:34:44.231]                     invokeRestart <- base::invokeRestart
[10:34:44.231]                     is.null <- base::is.null
[10:34:44.231]                     muffled <- FALSE
[10:34:44.231]                     if (inherits(cond, "message")) {
[10:34:44.231]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.231]                       if (muffled) 
[10:34:44.231]                         invokeRestart("muffleMessage")
[10:34:44.231]                     }
[10:34:44.231]                     else if (inherits(cond, "warning")) {
[10:34:44.231]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.231]                       if (muffled) 
[10:34:44.231]                         invokeRestart("muffleWarning")
[10:34:44.231]                     }
[10:34:44.231]                     else if (inherits(cond, "condition")) {
[10:34:44.231]                       if (!is.null(pattern)) {
[10:34:44.231]                         computeRestarts <- base::computeRestarts
[10:34:44.231]                         grepl <- base::grepl
[10:34:44.231]                         restarts <- computeRestarts(cond)
[10:34:44.231]                         for (restart in restarts) {
[10:34:44.231]                           name <- restart$name
[10:34:44.231]                           if (is.null(name)) 
[10:34:44.231]                             next
[10:34:44.231]                           if (!grepl(pattern, name)) 
[10:34:44.231]                             next
[10:34:44.231]                           invokeRestart(restart)
[10:34:44.231]                           muffled <- TRUE
[10:34:44.231]                           break
[10:34:44.231]                         }
[10:34:44.231]                       }
[10:34:44.231]                     }
[10:34:44.231]                     invisible(muffled)
[10:34:44.231]                   }
[10:34:44.231]                   muffleCondition(cond)
[10:34:44.231]                 })
[10:34:44.231]             }))
[10:34:44.231]             future::FutureResult(value = ...future.value$value, 
[10:34:44.231]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.231]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.231]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.231]                     ...future.globalenv.names))
[10:34:44.231]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.231]         }, condition = base::local({
[10:34:44.231]             c <- base::c
[10:34:44.231]             inherits <- base::inherits
[10:34:44.231]             invokeRestart <- base::invokeRestart
[10:34:44.231]             length <- base::length
[10:34:44.231]             list <- base::list
[10:34:44.231]             seq.int <- base::seq.int
[10:34:44.231]             signalCondition <- base::signalCondition
[10:34:44.231]             sys.calls <- base::sys.calls
[10:34:44.231]             `[[` <- base::`[[`
[10:34:44.231]             `+` <- base::`+`
[10:34:44.231]             `<<-` <- base::`<<-`
[10:34:44.231]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.231]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.231]                   3L)]
[10:34:44.231]             }
[10:34:44.231]             function(cond) {
[10:34:44.231]                 is_error <- inherits(cond, "error")
[10:34:44.231]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.231]                   NULL)
[10:34:44.231]                 if (is_error) {
[10:34:44.231]                   sessionInformation <- function() {
[10:34:44.231]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.231]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.231]                       search = base::search(), system = base::Sys.info())
[10:34:44.231]                   }
[10:34:44.231]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.231]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.231]                     cond$call), session = sessionInformation(), 
[10:34:44.231]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.231]                   signalCondition(cond)
[10:34:44.231]                 }
[10:34:44.231]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.231]                 "immediateCondition"))) {
[10:34:44.231]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.231]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.231]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.231]                   if (TRUE && !signal) {
[10:34:44.231]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.231]                     {
[10:34:44.231]                       inherits <- base::inherits
[10:34:44.231]                       invokeRestart <- base::invokeRestart
[10:34:44.231]                       is.null <- base::is.null
[10:34:44.231]                       muffled <- FALSE
[10:34:44.231]                       if (inherits(cond, "message")) {
[10:34:44.231]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.231]                         if (muffled) 
[10:34:44.231]                           invokeRestart("muffleMessage")
[10:34:44.231]                       }
[10:34:44.231]                       else if (inherits(cond, "warning")) {
[10:34:44.231]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.231]                         if (muffled) 
[10:34:44.231]                           invokeRestart("muffleWarning")
[10:34:44.231]                       }
[10:34:44.231]                       else if (inherits(cond, "condition")) {
[10:34:44.231]                         if (!is.null(pattern)) {
[10:34:44.231]                           computeRestarts <- base::computeRestarts
[10:34:44.231]                           grepl <- base::grepl
[10:34:44.231]                           restarts <- computeRestarts(cond)
[10:34:44.231]                           for (restart in restarts) {
[10:34:44.231]                             name <- restart$name
[10:34:44.231]                             if (is.null(name)) 
[10:34:44.231]                               next
[10:34:44.231]                             if (!grepl(pattern, name)) 
[10:34:44.231]                               next
[10:34:44.231]                             invokeRestart(restart)
[10:34:44.231]                             muffled <- TRUE
[10:34:44.231]                             break
[10:34:44.231]                           }
[10:34:44.231]                         }
[10:34:44.231]                       }
[10:34:44.231]                       invisible(muffled)
[10:34:44.231]                     }
[10:34:44.231]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.231]                   }
[10:34:44.231]                 }
[10:34:44.231]                 else {
[10:34:44.231]                   if (TRUE) {
[10:34:44.231]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.231]                     {
[10:34:44.231]                       inherits <- base::inherits
[10:34:44.231]                       invokeRestart <- base::invokeRestart
[10:34:44.231]                       is.null <- base::is.null
[10:34:44.231]                       muffled <- FALSE
[10:34:44.231]                       if (inherits(cond, "message")) {
[10:34:44.231]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.231]                         if (muffled) 
[10:34:44.231]                           invokeRestart("muffleMessage")
[10:34:44.231]                       }
[10:34:44.231]                       else if (inherits(cond, "warning")) {
[10:34:44.231]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.231]                         if (muffled) 
[10:34:44.231]                           invokeRestart("muffleWarning")
[10:34:44.231]                       }
[10:34:44.231]                       else if (inherits(cond, "condition")) {
[10:34:44.231]                         if (!is.null(pattern)) {
[10:34:44.231]                           computeRestarts <- base::computeRestarts
[10:34:44.231]                           grepl <- base::grepl
[10:34:44.231]                           restarts <- computeRestarts(cond)
[10:34:44.231]                           for (restart in restarts) {
[10:34:44.231]                             name <- restart$name
[10:34:44.231]                             if (is.null(name)) 
[10:34:44.231]                               next
[10:34:44.231]                             if (!grepl(pattern, name)) 
[10:34:44.231]                               next
[10:34:44.231]                             invokeRestart(restart)
[10:34:44.231]                             muffled <- TRUE
[10:34:44.231]                             break
[10:34:44.231]                           }
[10:34:44.231]                         }
[10:34:44.231]                       }
[10:34:44.231]                       invisible(muffled)
[10:34:44.231]                     }
[10:34:44.231]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.231]                   }
[10:34:44.231]                 }
[10:34:44.231]             }
[10:34:44.231]         }))
[10:34:44.231]     }, error = function(ex) {
[10:34:44.231]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.231]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.231]                 ...future.rng), started = ...future.startTime, 
[10:34:44.231]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.231]             version = "1.8"), class = "FutureResult")
[10:34:44.231]     }, finally = {
[10:34:44.231]         if (!identical(...future.workdir, getwd())) 
[10:34:44.231]             setwd(...future.workdir)
[10:34:44.231]         {
[10:34:44.231]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.231]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.231]             }
[10:34:44.231]             base::options(...future.oldOptions)
[10:34:44.231]             if (.Platform$OS.type == "windows") {
[10:34:44.231]                 old_names <- names(...future.oldEnvVars)
[10:34:44.231]                 envs <- base::Sys.getenv()
[10:34:44.231]                 names <- names(envs)
[10:34:44.231]                 common <- intersect(names, old_names)
[10:34:44.231]                 added <- setdiff(names, old_names)
[10:34:44.231]                 removed <- setdiff(old_names, names)
[10:34:44.231]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.231]                   envs[common]]
[10:34:44.231]                 NAMES <- toupper(changed)
[10:34:44.231]                 args <- list()
[10:34:44.231]                 for (kk in seq_along(NAMES)) {
[10:34:44.231]                   name <- changed[[kk]]
[10:34:44.231]                   NAME <- NAMES[[kk]]
[10:34:44.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.231]                     next
[10:34:44.231]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.231]                 }
[10:34:44.231]                 NAMES <- toupper(added)
[10:34:44.231]                 for (kk in seq_along(NAMES)) {
[10:34:44.231]                   name <- added[[kk]]
[10:34:44.231]                   NAME <- NAMES[[kk]]
[10:34:44.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.231]                     next
[10:34:44.231]                   args[[name]] <- ""
[10:34:44.231]                 }
[10:34:44.231]                 NAMES <- toupper(removed)
[10:34:44.231]                 for (kk in seq_along(NAMES)) {
[10:34:44.231]                   name <- removed[[kk]]
[10:34:44.231]                   NAME <- NAMES[[kk]]
[10:34:44.231]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.231]                     next
[10:34:44.231]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.231]                 }
[10:34:44.231]                 if (length(args) > 0) 
[10:34:44.231]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.231]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.231]             }
[10:34:44.231]             else {
[10:34:44.231]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.231]             }
[10:34:44.231]             {
[10:34:44.231]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.231]                   0L) {
[10:34:44.231]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.231]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.231]                   base::options(opts)
[10:34:44.231]                 }
[10:34:44.231]                 {
[10:34:44.231]                   {
[10:34:44.231]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.231]                     NULL
[10:34:44.231]                   }
[10:34:44.231]                   options(future.plan = NULL)
[10:34:44.231]                   if (is.na(NA_character_)) 
[10:34:44.231]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.231]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.231]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.231]                     .init = FALSE)
[10:34:44.231]                 }
[10:34:44.231]             }
[10:34:44.231]         }
[10:34:44.231]     })
[10:34:44.231]     if (TRUE) {
[10:34:44.231]         base::sink(type = "output", split = FALSE)
[10:34:44.231]         if (TRUE) {
[10:34:44.231]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.231]         }
[10:34:44.231]         else {
[10:34:44.231]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.231]         }
[10:34:44.231]         base::close(...future.stdout)
[10:34:44.231]         ...future.stdout <- NULL
[10:34:44.231]     }
[10:34:44.231]     ...future.result$conditions <- ...future.conditions
[10:34:44.231]     ...future.result$finished <- base::Sys.time()
[10:34:44.231]     ...future.result
[10:34:44.231] }
[10:34:44.233] requestCore(): workers = 2
[10:34:44.236] MulticoreFuture started
[10:34:44.237] - Launch lazy future ... done
[10:34:44.237] run() for ‘MulticoreFuture’ ... done
[10:34:44.237] plan(): Setting new future strategy stack:
[10:34:44.238] result() for MulticoreFuture ...
[10:34:44.238] List of future strategies:
[10:34:44.238] 1. sequential:
[10:34:44.238]    - args: function (..., envir = parent.frame())
[10:34:44.238]    - tweaked: FALSE
[10:34:44.238]    - call: NULL
[10:34:44.238] plan(): nbrOfWorkers() = 1
[10:34:44.242] plan(): Setting new future strategy stack:
[10:34:44.242] List of future strategies:
[10:34:44.242] 1. multicore:
[10:34:44.242]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.242]    - tweaked: FALSE
[10:34:44.242]    - call: plan(strategy)
[10:34:44.247] plan(): nbrOfWorkers() = 2
[10:34:44.251] result() for MulticoreFuture ...
[10:34:44.252] result() for MulticoreFuture ... done
[10:34:44.252] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "79db12b7-e826-18ae-d004-4729eac4b479"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90138
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:44"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:44.264] result() for MulticoreFuture ...
[10:34:44.264] result() for MulticoreFuture ... done
[10:34:44.264] result() for MulticoreFuture ...
[10:34:44.264] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01070142 secs (started 2025-01-07 10:34:44.23688)
version: 1.8
[10:34:44.265] getGlobalsAndPackages() ...
[10:34:44.265] Searching for globals...
[10:34:44.269] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.269] Searching for globals ... DONE
[10:34:44.269] Resolving globals: FALSE
[10:34:44.270] 
[10:34:44.270] - packages: [1] ‘utils’
[10:34:44.270] getGlobalsAndPackages() ... DONE
[10:34:44.270] run() for ‘Future’ ...
[10:34:44.270] - state: ‘created’
[10:34:44.270] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.274] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.274] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.275]   - Field: ‘label’
[10:34:44.275]   - Field: ‘local’
[10:34:44.275]   - Field: ‘owner’
[10:34:44.275]   - Field: ‘envir’
[10:34:44.275]   - Field: ‘workers’
[10:34:44.275]   - Field: ‘packages’
[10:34:44.275]   - Field: ‘gc’
[10:34:44.275]   - Field: ‘job’
[10:34:44.275]   - Field: ‘conditions’
[10:34:44.276]   - Field: ‘expr’
[10:34:44.276]   - Field: ‘uuid’
[10:34:44.276]   - Field: ‘seed’
[10:34:44.276]   - Field: ‘version’
[10:34:44.276]   - Field: ‘result’
[10:34:44.276]   - Field: ‘asynchronous’
[10:34:44.276]   - Field: ‘calls’
[10:34:44.276]   - Field: ‘globals’
[10:34:44.276]   - Field: ‘stdout’
[10:34:44.276]   - Field: ‘earlySignal’
[10:34:44.277]   - Field: ‘lazy’
[10:34:44.277]   - Field: ‘state’
[10:34:44.277] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.277] - Launch lazy future ...
[10:34:44.277] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.277] Packages needed by future strategies (n = 0): <none>
[10:34:44.278] {
[10:34:44.278]     {
[10:34:44.278]         {
[10:34:44.278]             ...future.startTime <- base::Sys.time()
[10:34:44.278]             {
[10:34:44.278]                 {
[10:34:44.278]                   {
[10:34:44.278]                     {
[10:34:44.278]                       {
[10:34:44.278]                         base::local({
[10:34:44.278]                           has_future <- base::requireNamespace("future", 
[10:34:44.278]                             quietly = TRUE)
[10:34:44.278]                           if (has_future) {
[10:34:44.278]                             ns <- base::getNamespace("future")
[10:34:44.278]                             version <- ns[[".package"]][["version"]]
[10:34:44.278]                             if (is.null(version)) 
[10:34:44.278]                               version <- utils::packageVersion("future")
[10:34:44.278]                           }
[10:34:44.278]                           else {
[10:34:44.278]                             version <- NULL
[10:34:44.278]                           }
[10:34:44.278]                           if (!has_future || version < "1.8.0") {
[10:34:44.278]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.278]                               "", base::R.version$version.string), 
[10:34:44.278]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.278]                                 base::R.version$platform, 8 * 
[10:34:44.278]                                   base::.Machine$sizeof.pointer), 
[10:34:44.278]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.278]                                 "release", "version")], collapse = " "), 
[10:34:44.278]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.278]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.278]                               info)
[10:34:44.278]                             info <- base::paste(info, collapse = "; ")
[10:34:44.278]                             if (!has_future) {
[10:34:44.278]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.278]                                 info)
[10:34:44.278]                             }
[10:34:44.278]                             else {
[10:34:44.278]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.278]                                 info, version)
[10:34:44.278]                             }
[10:34:44.278]                             base::stop(msg)
[10:34:44.278]                           }
[10:34:44.278]                         })
[10:34:44.278]                       }
[10:34:44.278]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.278]                       base::options(mc.cores = 1L)
[10:34:44.278]                     }
[10:34:44.278]                     base::local({
[10:34:44.278]                       for (pkg in "utils") {
[10:34:44.278]                         base::loadNamespace(pkg)
[10:34:44.278]                         base::library(pkg, character.only = TRUE)
[10:34:44.278]                       }
[10:34:44.278]                     })
[10:34:44.278]                   }
[10:34:44.278]                   ...future.strategy.old <- future::plan("list")
[10:34:44.278]                   options(future.plan = NULL)
[10:34:44.278]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.278]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.278]                 }
[10:34:44.278]                 ...future.workdir <- getwd()
[10:34:44.278]             }
[10:34:44.278]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.278]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.278]         }
[10:34:44.278]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.278]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.278]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.278]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.278]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.278]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.278]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.278]             base::names(...future.oldOptions))
[10:34:44.278]     }
[10:34:44.278]     if (FALSE) {
[10:34:44.278]     }
[10:34:44.278]     else {
[10:34:44.278]         if (TRUE) {
[10:34:44.278]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.278]                 open = "w")
[10:34:44.278]         }
[10:34:44.278]         else {
[10:34:44.278]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.278]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.278]         }
[10:34:44.278]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.278]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.278]             base::sink(type = "output", split = FALSE)
[10:34:44.278]             base::close(...future.stdout)
[10:34:44.278]         }, add = TRUE)
[10:34:44.278]     }
[10:34:44.278]     ...future.frame <- base::sys.nframe()
[10:34:44.278]     ...future.conditions <- base::list()
[10:34:44.278]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.278]     if (FALSE) {
[10:34:44.278]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.278]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.278]     }
[10:34:44.278]     ...future.result <- base::tryCatch({
[10:34:44.278]         base::withCallingHandlers({
[10:34:44.278]             ...future.value <- base::withVisible(base::local({
[10:34:44.278]                 withCallingHandlers({
[10:34:44.278]                   {
[10:34:44.278]                     print(1:50)
[10:34:44.278]                     str(1:50)
[10:34:44.278]                     cat(letters, sep = "-")
[10:34:44.278]                     cat(1:6, collapse = "\n")
[10:34:44.278]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.278]                     42L
[10:34:44.278]                   }
[10:34:44.278]                 }, immediateCondition = function(cond) {
[10:34:44.278]                   save_rds <- function (object, pathname, ...) 
[10:34:44.278]                   {
[10:34:44.278]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.278]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.278]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.278]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.278]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.278]                         fi_tmp[["mtime"]])
[10:34:44.278]                     }
[10:34:44.278]                     tryCatch({
[10:34:44.278]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.278]                     }, error = function(ex) {
[10:34:44.278]                       msg <- conditionMessage(ex)
[10:34:44.278]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.278]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.278]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.278]                         fi_tmp[["mtime"]], msg)
[10:34:44.278]                       ex$message <- msg
[10:34:44.278]                       stop(ex)
[10:34:44.278]                     })
[10:34:44.278]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.278]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.278]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.278]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.278]                       fi <- file.info(pathname)
[10:34:44.278]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.278]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.278]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.278]                         fi[["size"]], fi[["mtime"]])
[10:34:44.278]                       stop(msg)
[10:34:44.278]                     }
[10:34:44.278]                     invisible(pathname)
[10:34:44.278]                   }
[10:34:44.278]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.278]                     rootPath = tempdir()) 
[10:34:44.278]                   {
[10:34:44.278]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.278]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.278]                       tmpdir = path, fileext = ".rds")
[10:34:44.278]                     save_rds(obj, file)
[10:34:44.278]                   }
[10:34:44.278]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.278]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.278]                   {
[10:34:44.278]                     inherits <- base::inherits
[10:34:44.278]                     invokeRestart <- base::invokeRestart
[10:34:44.278]                     is.null <- base::is.null
[10:34:44.278]                     muffled <- FALSE
[10:34:44.278]                     if (inherits(cond, "message")) {
[10:34:44.278]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.278]                       if (muffled) 
[10:34:44.278]                         invokeRestart("muffleMessage")
[10:34:44.278]                     }
[10:34:44.278]                     else if (inherits(cond, "warning")) {
[10:34:44.278]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.278]                       if (muffled) 
[10:34:44.278]                         invokeRestart("muffleWarning")
[10:34:44.278]                     }
[10:34:44.278]                     else if (inherits(cond, "condition")) {
[10:34:44.278]                       if (!is.null(pattern)) {
[10:34:44.278]                         computeRestarts <- base::computeRestarts
[10:34:44.278]                         grepl <- base::grepl
[10:34:44.278]                         restarts <- computeRestarts(cond)
[10:34:44.278]                         for (restart in restarts) {
[10:34:44.278]                           name <- restart$name
[10:34:44.278]                           if (is.null(name)) 
[10:34:44.278]                             next
[10:34:44.278]                           if (!grepl(pattern, name)) 
[10:34:44.278]                             next
[10:34:44.278]                           invokeRestart(restart)
[10:34:44.278]                           muffled <- TRUE
[10:34:44.278]                           break
[10:34:44.278]                         }
[10:34:44.278]                       }
[10:34:44.278]                     }
[10:34:44.278]                     invisible(muffled)
[10:34:44.278]                   }
[10:34:44.278]                   muffleCondition(cond)
[10:34:44.278]                 })
[10:34:44.278]             }))
[10:34:44.278]             future::FutureResult(value = ...future.value$value, 
[10:34:44.278]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.278]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.278]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.278]                     ...future.globalenv.names))
[10:34:44.278]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.278]         }, condition = base::local({
[10:34:44.278]             c <- base::c
[10:34:44.278]             inherits <- base::inherits
[10:34:44.278]             invokeRestart <- base::invokeRestart
[10:34:44.278]             length <- base::length
[10:34:44.278]             list <- base::list
[10:34:44.278]             seq.int <- base::seq.int
[10:34:44.278]             signalCondition <- base::signalCondition
[10:34:44.278]             sys.calls <- base::sys.calls
[10:34:44.278]             `[[` <- base::`[[`
[10:34:44.278]             `+` <- base::`+`
[10:34:44.278]             `<<-` <- base::`<<-`
[10:34:44.278]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.278]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.278]                   3L)]
[10:34:44.278]             }
[10:34:44.278]             function(cond) {
[10:34:44.278]                 is_error <- inherits(cond, "error")
[10:34:44.278]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.278]                   NULL)
[10:34:44.278]                 if (is_error) {
[10:34:44.278]                   sessionInformation <- function() {
[10:34:44.278]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.278]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.278]                       search = base::search(), system = base::Sys.info())
[10:34:44.278]                   }
[10:34:44.278]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.278]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.278]                     cond$call), session = sessionInformation(), 
[10:34:44.278]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.278]                   signalCondition(cond)
[10:34:44.278]                 }
[10:34:44.278]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.278]                 "immediateCondition"))) {
[10:34:44.278]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.278]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.278]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.278]                   if (TRUE && !signal) {
[10:34:44.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.278]                     {
[10:34:44.278]                       inherits <- base::inherits
[10:34:44.278]                       invokeRestart <- base::invokeRestart
[10:34:44.278]                       is.null <- base::is.null
[10:34:44.278]                       muffled <- FALSE
[10:34:44.278]                       if (inherits(cond, "message")) {
[10:34:44.278]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.278]                         if (muffled) 
[10:34:44.278]                           invokeRestart("muffleMessage")
[10:34:44.278]                       }
[10:34:44.278]                       else if (inherits(cond, "warning")) {
[10:34:44.278]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.278]                         if (muffled) 
[10:34:44.278]                           invokeRestart("muffleWarning")
[10:34:44.278]                       }
[10:34:44.278]                       else if (inherits(cond, "condition")) {
[10:34:44.278]                         if (!is.null(pattern)) {
[10:34:44.278]                           computeRestarts <- base::computeRestarts
[10:34:44.278]                           grepl <- base::grepl
[10:34:44.278]                           restarts <- computeRestarts(cond)
[10:34:44.278]                           for (restart in restarts) {
[10:34:44.278]                             name <- restart$name
[10:34:44.278]                             if (is.null(name)) 
[10:34:44.278]                               next
[10:34:44.278]                             if (!grepl(pattern, name)) 
[10:34:44.278]                               next
[10:34:44.278]                             invokeRestart(restart)
[10:34:44.278]                             muffled <- TRUE
[10:34:44.278]                             break
[10:34:44.278]                           }
[10:34:44.278]                         }
[10:34:44.278]                       }
[10:34:44.278]                       invisible(muffled)
[10:34:44.278]                     }
[10:34:44.278]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.278]                   }
[10:34:44.278]                 }
[10:34:44.278]                 else {
[10:34:44.278]                   if (TRUE) {
[10:34:44.278]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.278]                     {
[10:34:44.278]                       inherits <- base::inherits
[10:34:44.278]                       invokeRestart <- base::invokeRestart
[10:34:44.278]                       is.null <- base::is.null
[10:34:44.278]                       muffled <- FALSE
[10:34:44.278]                       if (inherits(cond, "message")) {
[10:34:44.278]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.278]                         if (muffled) 
[10:34:44.278]                           invokeRestart("muffleMessage")
[10:34:44.278]                       }
[10:34:44.278]                       else if (inherits(cond, "warning")) {
[10:34:44.278]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.278]                         if (muffled) 
[10:34:44.278]                           invokeRestart("muffleWarning")
[10:34:44.278]                       }
[10:34:44.278]                       else if (inherits(cond, "condition")) {
[10:34:44.278]                         if (!is.null(pattern)) {
[10:34:44.278]                           computeRestarts <- base::computeRestarts
[10:34:44.278]                           grepl <- base::grepl
[10:34:44.278]                           restarts <- computeRestarts(cond)
[10:34:44.278]                           for (restart in restarts) {
[10:34:44.278]                             name <- restart$name
[10:34:44.278]                             if (is.null(name)) 
[10:34:44.278]                               next
[10:34:44.278]                             if (!grepl(pattern, name)) 
[10:34:44.278]                               next
[10:34:44.278]                             invokeRestart(restart)
[10:34:44.278]                             muffled <- TRUE
[10:34:44.278]                             break
[10:34:44.278]                           }
[10:34:44.278]                         }
[10:34:44.278]                       }
[10:34:44.278]                       invisible(muffled)
[10:34:44.278]                     }
[10:34:44.278]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.278]                   }
[10:34:44.278]                 }
[10:34:44.278]             }
[10:34:44.278]         }))
[10:34:44.278]     }, error = function(ex) {
[10:34:44.278]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.278]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.278]                 ...future.rng), started = ...future.startTime, 
[10:34:44.278]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.278]             version = "1.8"), class = "FutureResult")
[10:34:44.278]     }, finally = {
[10:34:44.278]         if (!identical(...future.workdir, getwd())) 
[10:34:44.278]             setwd(...future.workdir)
[10:34:44.278]         {
[10:34:44.278]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.278]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.278]             }
[10:34:44.278]             base::options(...future.oldOptions)
[10:34:44.278]             if (.Platform$OS.type == "windows") {
[10:34:44.278]                 old_names <- names(...future.oldEnvVars)
[10:34:44.278]                 envs <- base::Sys.getenv()
[10:34:44.278]                 names <- names(envs)
[10:34:44.278]                 common <- intersect(names, old_names)
[10:34:44.278]                 added <- setdiff(names, old_names)
[10:34:44.278]                 removed <- setdiff(old_names, names)
[10:34:44.278]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.278]                   envs[common]]
[10:34:44.278]                 NAMES <- toupper(changed)
[10:34:44.278]                 args <- list()
[10:34:44.278]                 for (kk in seq_along(NAMES)) {
[10:34:44.278]                   name <- changed[[kk]]
[10:34:44.278]                   NAME <- NAMES[[kk]]
[10:34:44.278]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.278]                     next
[10:34:44.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.278]                 }
[10:34:44.278]                 NAMES <- toupper(added)
[10:34:44.278]                 for (kk in seq_along(NAMES)) {
[10:34:44.278]                   name <- added[[kk]]
[10:34:44.278]                   NAME <- NAMES[[kk]]
[10:34:44.278]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.278]                     next
[10:34:44.278]                   args[[name]] <- ""
[10:34:44.278]                 }
[10:34:44.278]                 NAMES <- toupper(removed)
[10:34:44.278]                 for (kk in seq_along(NAMES)) {
[10:34:44.278]                   name <- removed[[kk]]
[10:34:44.278]                   NAME <- NAMES[[kk]]
[10:34:44.278]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.278]                     next
[10:34:44.278]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.278]                 }
[10:34:44.278]                 if (length(args) > 0) 
[10:34:44.278]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.278]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.278]             }
[10:34:44.278]             else {
[10:34:44.278]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.278]             }
[10:34:44.278]             {
[10:34:44.278]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.278]                   0L) {
[10:34:44.278]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.278]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.278]                   base::options(opts)
[10:34:44.278]                 }
[10:34:44.278]                 {
[10:34:44.278]                   {
[10:34:44.278]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.278]                     NULL
[10:34:44.278]                   }
[10:34:44.278]                   options(future.plan = NULL)
[10:34:44.278]                   if (is.na(NA_character_)) 
[10:34:44.278]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.278]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.278]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.278]                     .init = FALSE)
[10:34:44.278]                 }
[10:34:44.278]             }
[10:34:44.278]         }
[10:34:44.278]     })
[10:34:44.278]     if (TRUE) {
[10:34:44.278]         base::sink(type = "output", split = FALSE)
[10:34:44.278]         if (TRUE) {
[10:34:44.278]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.278]         }
[10:34:44.278]         else {
[10:34:44.278]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.278]         }
[10:34:44.278]         base::close(...future.stdout)
[10:34:44.278]         ...future.stdout <- NULL
[10:34:44.278]     }
[10:34:44.278]     ...future.result$conditions <- ...future.conditions
[10:34:44.278]     ...future.result$finished <- base::Sys.time()
[10:34:44.278]     ...future.result
[10:34:44.278] }
[10:34:44.280] requestCore(): workers = 2
[10:34:44.282] MulticoreFuture started
[10:34:44.283] - Launch lazy future ... done
[10:34:44.283] run() for ‘MulticoreFuture’ ... done
[10:34:44.283] result() for MulticoreFuture ...
[10:34:44.284] plan(): Setting new future strategy stack:
[10:34:44.284] List of future strategies:
[10:34:44.284] 1. sequential:
[10:34:44.284]    - args: function (..., envir = parent.frame())
[10:34:44.284]    - tweaked: FALSE
[10:34:44.284]    - call: NULL
[10:34:44.285] plan(): nbrOfWorkers() = 1
[10:34:44.288] plan(): Setting new future strategy stack:
[10:34:44.288] List of future strategies:
[10:34:44.288] 1. multicore:
[10:34:44.288]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.288]    - tweaked: FALSE
[10:34:44.288]    - call: plan(strategy)
[10:34:44.293] plan(): nbrOfWorkers() = 2
[10:34:44.294] result() for MulticoreFuture ...
[10:34:44.294] result() for MulticoreFuture ... done
[10:34:44.294] result() for MulticoreFuture ... done
[10:34:44.295] result() for MulticoreFuture ...
[10:34:44.295] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.295] getGlobalsAndPackages() ...
[10:34:44.295] Searching for globals...
[10:34:44.296] - globals found: [1] ‘print’
[10:34:44.296] Searching for globals ... DONE
[10:34:44.297] Resolving globals: FALSE
[10:34:44.297] 
[10:34:44.297] 
[10:34:44.297] getGlobalsAndPackages() ... DONE
[10:34:44.298] run() for ‘Future’ ...
[10:34:44.298] - state: ‘created’
[10:34:44.298] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.302] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.302] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.302]   - Field: ‘label’
[10:34:44.302]   - Field: ‘local’
[10:34:44.303]   - Field: ‘owner’
[10:34:44.303]   - Field: ‘envir’
[10:34:44.303]   - Field: ‘workers’
[10:34:44.303]   - Field: ‘packages’
[10:34:44.303]   - Field: ‘gc’
[10:34:44.303]   - Field: ‘job’
[10:34:44.303]   - Field: ‘conditions’
[10:34:44.303]   - Field: ‘expr’
[10:34:44.303]   - Field: ‘uuid’
[10:34:44.304]   - Field: ‘seed’
[10:34:44.304]   - Field: ‘version’
[10:34:44.304]   - Field: ‘result’
[10:34:44.304]   - Field: ‘asynchronous’
[10:34:44.304]   - Field: ‘calls’
[10:34:44.304]   - Field: ‘globals’
[10:34:44.304]   - Field: ‘stdout’
[10:34:44.304]   - Field: ‘earlySignal’
[10:34:44.305]   - Field: ‘lazy’
[10:34:44.305]   - Field: ‘state’
[10:34:44.305] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.305] - Launch lazy future ...
[10:34:44.305] Packages needed by the future expression (n = 0): <none>
[10:34:44.305] Packages needed by future strategies (n = 0): <none>
[10:34:44.306] {
[10:34:44.306]     {
[10:34:44.306]         {
[10:34:44.306]             ...future.startTime <- base::Sys.time()
[10:34:44.306]             {
[10:34:44.306]                 {
[10:34:44.306]                   {
[10:34:44.306]                     {
[10:34:44.306]                       base::local({
[10:34:44.306]                         has_future <- base::requireNamespace("future", 
[10:34:44.306]                           quietly = TRUE)
[10:34:44.306]                         if (has_future) {
[10:34:44.306]                           ns <- base::getNamespace("future")
[10:34:44.306]                           version <- ns[[".package"]][["version"]]
[10:34:44.306]                           if (is.null(version)) 
[10:34:44.306]                             version <- utils::packageVersion("future")
[10:34:44.306]                         }
[10:34:44.306]                         else {
[10:34:44.306]                           version <- NULL
[10:34:44.306]                         }
[10:34:44.306]                         if (!has_future || version < "1.8.0") {
[10:34:44.306]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.306]                             "", base::R.version$version.string), 
[10:34:44.306]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.306]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.306]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.306]                               "release", "version")], collapse = " "), 
[10:34:44.306]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.306]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.306]                             info)
[10:34:44.306]                           info <- base::paste(info, collapse = "; ")
[10:34:44.306]                           if (!has_future) {
[10:34:44.306]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.306]                               info)
[10:34:44.306]                           }
[10:34:44.306]                           else {
[10:34:44.306]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.306]                               info, version)
[10:34:44.306]                           }
[10:34:44.306]                           base::stop(msg)
[10:34:44.306]                         }
[10:34:44.306]                       })
[10:34:44.306]                     }
[10:34:44.306]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.306]                     base::options(mc.cores = 1L)
[10:34:44.306]                   }
[10:34:44.306]                   ...future.strategy.old <- future::plan("list")
[10:34:44.306]                   options(future.plan = NULL)
[10:34:44.306]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.306]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.306]                 }
[10:34:44.306]                 ...future.workdir <- getwd()
[10:34:44.306]             }
[10:34:44.306]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.306]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.306]         }
[10:34:44.306]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.306]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.306]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.306]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.306]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.306]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.306]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.306]             base::names(...future.oldOptions))
[10:34:44.306]     }
[10:34:44.306]     if (FALSE) {
[10:34:44.306]     }
[10:34:44.306]     else {
[10:34:44.306]         if (TRUE) {
[10:34:44.306]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.306]                 open = "w")
[10:34:44.306]         }
[10:34:44.306]         else {
[10:34:44.306]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.306]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.306]         }
[10:34:44.306]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.306]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.306]             base::sink(type = "output", split = FALSE)
[10:34:44.306]             base::close(...future.stdout)
[10:34:44.306]         }, add = TRUE)
[10:34:44.306]     }
[10:34:44.306]     ...future.frame <- base::sys.nframe()
[10:34:44.306]     ...future.conditions <- base::list()
[10:34:44.306]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.306]     if (FALSE) {
[10:34:44.306]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.306]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.306]     }
[10:34:44.306]     ...future.result <- base::tryCatch({
[10:34:44.306]         base::withCallingHandlers({
[10:34:44.306]             ...future.value <- base::withVisible(base::local({
[10:34:44.306]                 withCallingHandlers({
[10:34:44.306]                   print(42)
[10:34:44.306]                 }, immediateCondition = function(cond) {
[10:34:44.306]                   save_rds <- function (object, pathname, ...) 
[10:34:44.306]                   {
[10:34:44.306]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.306]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.306]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.306]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.306]                         fi_tmp[["mtime"]])
[10:34:44.306]                     }
[10:34:44.306]                     tryCatch({
[10:34:44.306]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.306]                     }, error = function(ex) {
[10:34:44.306]                       msg <- conditionMessage(ex)
[10:34:44.306]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.306]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.306]                         fi_tmp[["mtime"]], msg)
[10:34:44.306]                       ex$message <- msg
[10:34:44.306]                       stop(ex)
[10:34:44.306]                     })
[10:34:44.306]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.306]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.306]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.306]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.306]                       fi <- file.info(pathname)
[10:34:44.306]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.306]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.306]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.306]                         fi[["size"]], fi[["mtime"]])
[10:34:44.306]                       stop(msg)
[10:34:44.306]                     }
[10:34:44.306]                     invisible(pathname)
[10:34:44.306]                   }
[10:34:44.306]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.306]                     rootPath = tempdir()) 
[10:34:44.306]                   {
[10:34:44.306]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.306]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.306]                       tmpdir = path, fileext = ".rds")
[10:34:44.306]                     save_rds(obj, file)
[10:34:44.306]                   }
[10:34:44.306]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.306]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.306]                   {
[10:34:44.306]                     inherits <- base::inherits
[10:34:44.306]                     invokeRestart <- base::invokeRestart
[10:34:44.306]                     is.null <- base::is.null
[10:34:44.306]                     muffled <- FALSE
[10:34:44.306]                     if (inherits(cond, "message")) {
[10:34:44.306]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.306]                       if (muffled) 
[10:34:44.306]                         invokeRestart("muffleMessage")
[10:34:44.306]                     }
[10:34:44.306]                     else if (inherits(cond, "warning")) {
[10:34:44.306]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.306]                       if (muffled) 
[10:34:44.306]                         invokeRestart("muffleWarning")
[10:34:44.306]                     }
[10:34:44.306]                     else if (inherits(cond, "condition")) {
[10:34:44.306]                       if (!is.null(pattern)) {
[10:34:44.306]                         computeRestarts <- base::computeRestarts
[10:34:44.306]                         grepl <- base::grepl
[10:34:44.306]                         restarts <- computeRestarts(cond)
[10:34:44.306]                         for (restart in restarts) {
[10:34:44.306]                           name <- restart$name
[10:34:44.306]                           if (is.null(name)) 
[10:34:44.306]                             next
[10:34:44.306]                           if (!grepl(pattern, name)) 
[10:34:44.306]                             next
[10:34:44.306]                           invokeRestart(restart)
[10:34:44.306]                           muffled <- TRUE
[10:34:44.306]                           break
[10:34:44.306]                         }
[10:34:44.306]                       }
[10:34:44.306]                     }
[10:34:44.306]                     invisible(muffled)
[10:34:44.306]                   }
[10:34:44.306]                   muffleCondition(cond)
[10:34:44.306]                 })
[10:34:44.306]             }))
[10:34:44.306]             future::FutureResult(value = ...future.value$value, 
[10:34:44.306]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.306]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.306]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.306]                     ...future.globalenv.names))
[10:34:44.306]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.306]         }, condition = base::local({
[10:34:44.306]             c <- base::c
[10:34:44.306]             inherits <- base::inherits
[10:34:44.306]             invokeRestart <- base::invokeRestart
[10:34:44.306]             length <- base::length
[10:34:44.306]             list <- base::list
[10:34:44.306]             seq.int <- base::seq.int
[10:34:44.306]             signalCondition <- base::signalCondition
[10:34:44.306]             sys.calls <- base::sys.calls
[10:34:44.306]             `[[` <- base::`[[`
[10:34:44.306]             `+` <- base::`+`
[10:34:44.306]             `<<-` <- base::`<<-`
[10:34:44.306]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.306]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.306]                   3L)]
[10:34:44.306]             }
[10:34:44.306]             function(cond) {
[10:34:44.306]                 is_error <- inherits(cond, "error")
[10:34:44.306]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.306]                   NULL)
[10:34:44.306]                 if (is_error) {
[10:34:44.306]                   sessionInformation <- function() {
[10:34:44.306]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.306]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.306]                       search = base::search(), system = base::Sys.info())
[10:34:44.306]                   }
[10:34:44.306]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.306]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.306]                     cond$call), session = sessionInformation(), 
[10:34:44.306]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.306]                   signalCondition(cond)
[10:34:44.306]                 }
[10:34:44.306]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.306]                 "immediateCondition"))) {
[10:34:44.306]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.306]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.306]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.306]                   if (TRUE && !signal) {
[10:34:44.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.306]                     {
[10:34:44.306]                       inherits <- base::inherits
[10:34:44.306]                       invokeRestart <- base::invokeRestart
[10:34:44.306]                       is.null <- base::is.null
[10:34:44.306]                       muffled <- FALSE
[10:34:44.306]                       if (inherits(cond, "message")) {
[10:34:44.306]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.306]                         if (muffled) 
[10:34:44.306]                           invokeRestart("muffleMessage")
[10:34:44.306]                       }
[10:34:44.306]                       else if (inherits(cond, "warning")) {
[10:34:44.306]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.306]                         if (muffled) 
[10:34:44.306]                           invokeRestart("muffleWarning")
[10:34:44.306]                       }
[10:34:44.306]                       else if (inherits(cond, "condition")) {
[10:34:44.306]                         if (!is.null(pattern)) {
[10:34:44.306]                           computeRestarts <- base::computeRestarts
[10:34:44.306]                           grepl <- base::grepl
[10:34:44.306]                           restarts <- computeRestarts(cond)
[10:34:44.306]                           for (restart in restarts) {
[10:34:44.306]                             name <- restart$name
[10:34:44.306]                             if (is.null(name)) 
[10:34:44.306]                               next
[10:34:44.306]                             if (!grepl(pattern, name)) 
[10:34:44.306]                               next
[10:34:44.306]                             invokeRestart(restart)
[10:34:44.306]                             muffled <- TRUE
[10:34:44.306]                             break
[10:34:44.306]                           }
[10:34:44.306]                         }
[10:34:44.306]                       }
[10:34:44.306]                       invisible(muffled)
[10:34:44.306]                     }
[10:34:44.306]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.306]                   }
[10:34:44.306]                 }
[10:34:44.306]                 else {
[10:34:44.306]                   if (TRUE) {
[10:34:44.306]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.306]                     {
[10:34:44.306]                       inherits <- base::inherits
[10:34:44.306]                       invokeRestart <- base::invokeRestart
[10:34:44.306]                       is.null <- base::is.null
[10:34:44.306]                       muffled <- FALSE
[10:34:44.306]                       if (inherits(cond, "message")) {
[10:34:44.306]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.306]                         if (muffled) 
[10:34:44.306]                           invokeRestart("muffleMessage")
[10:34:44.306]                       }
[10:34:44.306]                       else if (inherits(cond, "warning")) {
[10:34:44.306]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.306]                         if (muffled) 
[10:34:44.306]                           invokeRestart("muffleWarning")
[10:34:44.306]                       }
[10:34:44.306]                       else if (inherits(cond, "condition")) {
[10:34:44.306]                         if (!is.null(pattern)) {
[10:34:44.306]                           computeRestarts <- base::computeRestarts
[10:34:44.306]                           grepl <- base::grepl
[10:34:44.306]                           restarts <- computeRestarts(cond)
[10:34:44.306]                           for (restart in restarts) {
[10:34:44.306]                             name <- restart$name
[10:34:44.306]                             if (is.null(name)) 
[10:34:44.306]                               next
[10:34:44.306]                             if (!grepl(pattern, name)) 
[10:34:44.306]                               next
[10:34:44.306]                             invokeRestart(restart)
[10:34:44.306]                             muffled <- TRUE
[10:34:44.306]                             break
[10:34:44.306]                           }
[10:34:44.306]                         }
[10:34:44.306]                       }
[10:34:44.306]                       invisible(muffled)
[10:34:44.306]                     }
[10:34:44.306]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.306]                   }
[10:34:44.306]                 }
[10:34:44.306]             }
[10:34:44.306]         }))
[10:34:44.306]     }, error = function(ex) {
[10:34:44.306]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.306]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.306]                 ...future.rng), started = ...future.startTime, 
[10:34:44.306]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.306]             version = "1.8"), class = "FutureResult")
[10:34:44.306]     }, finally = {
[10:34:44.306]         if (!identical(...future.workdir, getwd())) 
[10:34:44.306]             setwd(...future.workdir)
[10:34:44.306]         {
[10:34:44.306]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.306]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.306]             }
[10:34:44.306]             base::options(...future.oldOptions)
[10:34:44.306]             if (.Platform$OS.type == "windows") {
[10:34:44.306]                 old_names <- names(...future.oldEnvVars)
[10:34:44.306]                 envs <- base::Sys.getenv()
[10:34:44.306]                 names <- names(envs)
[10:34:44.306]                 common <- intersect(names, old_names)
[10:34:44.306]                 added <- setdiff(names, old_names)
[10:34:44.306]                 removed <- setdiff(old_names, names)
[10:34:44.306]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.306]                   envs[common]]
[10:34:44.306]                 NAMES <- toupper(changed)
[10:34:44.306]                 args <- list()
[10:34:44.306]                 for (kk in seq_along(NAMES)) {
[10:34:44.306]                   name <- changed[[kk]]
[10:34:44.306]                   NAME <- NAMES[[kk]]
[10:34:44.306]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.306]                     next
[10:34:44.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.306]                 }
[10:34:44.306]                 NAMES <- toupper(added)
[10:34:44.306]                 for (kk in seq_along(NAMES)) {
[10:34:44.306]                   name <- added[[kk]]
[10:34:44.306]                   NAME <- NAMES[[kk]]
[10:34:44.306]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.306]                     next
[10:34:44.306]                   args[[name]] <- ""
[10:34:44.306]                 }
[10:34:44.306]                 NAMES <- toupper(removed)
[10:34:44.306]                 for (kk in seq_along(NAMES)) {
[10:34:44.306]                   name <- removed[[kk]]
[10:34:44.306]                   NAME <- NAMES[[kk]]
[10:34:44.306]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.306]                     next
[10:34:44.306]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.306]                 }
[10:34:44.306]                 if (length(args) > 0) 
[10:34:44.306]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.306]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.306]             }
[10:34:44.306]             else {
[10:34:44.306]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.306]             }
[10:34:44.306]             {
[10:34:44.306]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.306]                   0L) {
[10:34:44.306]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.306]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.306]                   base::options(opts)
[10:34:44.306]                 }
[10:34:44.306]                 {
[10:34:44.306]                   {
[10:34:44.306]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.306]                     NULL
[10:34:44.306]                   }
[10:34:44.306]                   options(future.plan = NULL)
[10:34:44.306]                   if (is.na(NA_character_)) 
[10:34:44.306]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.306]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.306]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.306]                     .init = FALSE)
[10:34:44.306]                 }
[10:34:44.306]             }
[10:34:44.306]         }
[10:34:44.306]     })
[10:34:44.306]     if (TRUE) {
[10:34:44.306]         base::sink(type = "output", split = FALSE)
[10:34:44.306]         if (TRUE) {
[10:34:44.306]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.306]         }
[10:34:44.306]         else {
[10:34:44.306]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.306]         }
[10:34:44.306]         base::close(...future.stdout)
[10:34:44.306]         ...future.stdout <- NULL
[10:34:44.306]     }
[10:34:44.306]     ...future.result$conditions <- ...future.conditions
[10:34:44.306]     ...future.result$finished <- base::Sys.time()
[10:34:44.306]     ...future.result
[10:34:44.306] }
[10:34:44.309] requestCore(): workers = 2
[10:34:44.310] MulticoreFuture started
[10:34:44.315] - Launch lazy future ... done
[10:34:44.315] plan(): Setting new future strategy stack:
[10:34:44.315] run() for ‘MulticoreFuture’ ... done
[10:34:44.316] result() for MulticoreFuture ...
[10:34:44.316] List of future strategies:
[10:34:44.316] 1. sequential:
[10:34:44.316]    - args: function (..., envir = parent.frame())
[10:34:44.316]    - tweaked: FALSE
[10:34:44.316]    - call: NULL
[10:34:44.317] plan(): nbrOfWorkers() = 1
[10:34:44.319] plan(): Setting new future strategy stack:
[10:34:44.319] List of future strategies:
[10:34:44.319] 1. multicore:
[10:34:44.319]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.319]    - tweaked: FALSE
[10:34:44.319]    - call: plan(strategy)
[10:34:44.324] plan(): nbrOfWorkers() = 2
[10:34:44.325] result() for MulticoreFuture ...
[10:34:44.325] result() for MulticoreFuture ... done
[10:34:44.325] result() for MulticoreFuture ... done
[10:34:44.325] result() for MulticoreFuture ...
[10:34:44.325] result() for MulticoreFuture ... done
[10:34:44.325] result() for MulticoreFuture ...
[10:34:44.326] result() for MulticoreFuture ... done
[1] 42
[10:34:44.326] result() for MulticoreFuture ...
[10:34:44.326] result() for MulticoreFuture ... done
- stdout = FALSE
[10:34:44.326] getGlobalsAndPackages() ...
[10:34:44.326] Searching for globals...
[10:34:44.330] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.331] Searching for globals ... DONE
[10:34:44.331] Resolving globals: FALSE
[10:34:44.331] 
[10:34:44.331] - packages: [1] ‘utils’
[10:34:44.332] getGlobalsAndPackages() ... DONE
[10:34:44.332] run() for ‘Future’ ...
[10:34:44.332] - state: ‘created’
[10:34:44.332] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.336] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.336] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.336]   - Field: ‘label’
[10:34:44.337]   - Field: ‘local’
[10:34:44.337]   - Field: ‘owner’
[10:34:44.337]   - Field: ‘envir’
[10:34:44.337]   - Field: ‘workers’
[10:34:44.337]   - Field: ‘packages’
[10:34:44.337]   - Field: ‘gc’
[10:34:44.337]   - Field: ‘job’
[10:34:44.337]   - Field: ‘conditions’
[10:34:44.338]   - Field: ‘expr’
[10:34:44.338]   - Field: ‘uuid’
[10:34:44.338]   - Field: ‘seed’
[10:34:44.338]   - Field: ‘version’
[10:34:44.338]   - Field: ‘result’
[10:34:44.338]   - Field: ‘asynchronous’
[10:34:44.338]   - Field: ‘calls’
[10:34:44.338]   - Field: ‘globals’
[10:34:44.338]   - Field: ‘stdout’
[10:34:44.339]   - Field: ‘earlySignal’
[10:34:44.339]   - Field: ‘lazy’
[10:34:44.339]   - Field: ‘state’
[10:34:44.339] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.339] - Launch lazy future ...
[10:34:44.339] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.340] Packages needed by future strategies (n = 0): <none>
[10:34:44.340] {
[10:34:44.340]     {
[10:34:44.340]         {
[10:34:44.340]             ...future.startTime <- base::Sys.time()
[10:34:44.340]             {
[10:34:44.340]                 {
[10:34:44.340]                   {
[10:34:44.340]                     {
[10:34:44.340]                       {
[10:34:44.340]                         base::local({
[10:34:44.340]                           has_future <- base::requireNamespace("future", 
[10:34:44.340]                             quietly = TRUE)
[10:34:44.340]                           if (has_future) {
[10:34:44.340]                             ns <- base::getNamespace("future")
[10:34:44.340]                             version <- ns[[".package"]][["version"]]
[10:34:44.340]                             if (is.null(version)) 
[10:34:44.340]                               version <- utils::packageVersion("future")
[10:34:44.340]                           }
[10:34:44.340]                           else {
[10:34:44.340]                             version <- NULL
[10:34:44.340]                           }
[10:34:44.340]                           if (!has_future || version < "1.8.0") {
[10:34:44.340]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.340]                               "", base::R.version$version.string), 
[10:34:44.340]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.340]                                 base::R.version$platform, 8 * 
[10:34:44.340]                                   base::.Machine$sizeof.pointer), 
[10:34:44.340]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.340]                                 "release", "version")], collapse = " "), 
[10:34:44.340]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.340]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.340]                               info)
[10:34:44.340]                             info <- base::paste(info, collapse = "; ")
[10:34:44.340]                             if (!has_future) {
[10:34:44.340]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.340]                                 info)
[10:34:44.340]                             }
[10:34:44.340]                             else {
[10:34:44.340]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.340]                                 info, version)
[10:34:44.340]                             }
[10:34:44.340]                             base::stop(msg)
[10:34:44.340]                           }
[10:34:44.340]                         })
[10:34:44.340]                       }
[10:34:44.340]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.340]                       base::options(mc.cores = 1L)
[10:34:44.340]                     }
[10:34:44.340]                     base::local({
[10:34:44.340]                       for (pkg in "utils") {
[10:34:44.340]                         base::loadNamespace(pkg)
[10:34:44.340]                         base::library(pkg, character.only = TRUE)
[10:34:44.340]                       }
[10:34:44.340]                     })
[10:34:44.340]                   }
[10:34:44.340]                   ...future.strategy.old <- future::plan("list")
[10:34:44.340]                   options(future.plan = NULL)
[10:34:44.340]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.340]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.340]                 }
[10:34:44.340]                 ...future.workdir <- getwd()
[10:34:44.340]             }
[10:34:44.340]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.340]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.340]         }
[10:34:44.340]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.340]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.340]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.340]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.340]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.340]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.340]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.340]             base::names(...future.oldOptions))
[10:34:44.340]     }
[10:34:44.340]     if (FALSE) {
[10:34:44.340]     }
[10:34:44.340]     else {
[10:34:44.340]         if (FALSE) {
[10:34:44.340]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.340]                 open = "w")
[10:34:44.340]         }
[10:34:44.340]         else {
[10:34:44.340]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.340]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.340]         }
[10:34:44.340]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.340]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.340]             base::sink(type = "output", split = FALSE)
[10:34:44.340]             base::close(...future.stdout)
[10:34:44.340]         }, add = TRUE)
[10:34:44.340]     }
[10:34:44.340]     ...future.frame <- base::sys.nframe()
[10:34:44.340]     ...future.conditions <- base::list()
[10:34:44.340]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.340]     if (FALSE) {
[10:34:44.340]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.340]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.340]     }
[10:34:44.340]     ...future.result <- base::tryCatch({
[10:34:44.340]         base::withCallingHandlers({
[10:34:44.340]             ...future.value <- base::withVisible(base::local({
[10:34:44.340]                 withCallingHandlers({
[10:34:44.340]                   {
[10:34:44.340]                     print(1:50)
[10:34:44.340]                     str(1:50)
[10:34:44.340]                     cat(letters, sep = "-")
[10:34:44.340]                     cat(1:6, collapse = "\n")
[10:34:44.340]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.340]                     42L
[10:34:44.340]                   }
[10:34:44.340]                 }, immediateCondition = function(cond) {
[10:34:44.340]                   save_rds <- function (object, pathname, ...) 
[10:34:44.340]                   {
[10:34:44.340]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.340]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.340]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.340]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.340]                         fi_tmp[["mtime"]])
[10:34:44.340]                     }
[10:34:44.340]                     tryCatch({
[10:34:44.340]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.340]                     }, error = function(ex) {
[10:34:44.340]                       msg <- conditionMessage(ex)
[10:34:44.340]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.340]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.340]                         fi_tmp[["mtime"]], msg)
[10:34:44.340]                       ex$message <- msg
[10:34:44.340]                       stop(ex)
[10:34:44.340]                     })
[10:34:44.340]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.340]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.340]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.340]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.340]                       fi <- file.info(pathname)
[10:34:44.340]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.340]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.340]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.340]                         fi[["size"]], fi[["mtime"]])
[10:34:44.340]                       stop(msg)
[10:34:44.340]                     }
[10:34:44.340]                     invisible(pathname)
[10:34:44.340]                   }
[10:34:44.340]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.340]                     rootPath = tempdir()) 
[10:34:44.340]                   {
[10:34:44.340]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.340]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.340]                       tmpdir = path, fileext = ".rds")
[10:34:44.340]                     save_rds(obj, file)
[10:34:44.340]                   }
[10:34:44.340]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.340]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.340]                   {
[10:34:44.340]                     inherits <- base::inherits
[10:34:44.340]                     invokeRestart <- base::invokeRestart
[10:34:44.340]                     is.null <- base::is.null
[10:34:44.340]                     muffled <- FALSE
[10:34:44.340]                     if (inherits(cond, "message")) {
[10:34:44.340]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.340]                       if (muffled) 
[10:34:44.340]                         invokeRestart("muffleMessage")
[10:34:44.340]                     }
[10:34:44.340]                     else if (inherits(cond, "warning")) {
[10:34:44.340]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.340]                       if (muffled) 
[10:34:44.340]                         invokeRestart("muffleWarning")
[10:34:44.340]                     }
[10:34:44.340]                     else if (inherits(cond, "condition")) {
[10:34:44.340]                       if (!is.null(pattern)) {
[10:34:44.340]                         computeRestarts <- base::computeRestarts
[10:34:44.340]                         grepl <- base::grepl
[10:34:44.340]                         restarts <- computeRestarts(cond)
[10:34:44.340]                         for (restart in restarts) {
[10:34:44.340]                           name <- restart$name
[10:34:44.340]                           if (is.null(name)) 
[10:34:44.340]                             next
[10:34:44.340]                           if (!grepl(pattern, name)) 
[10:34:44.340]                             next
[10:34:44.340]                           invokeRestart(restart)
[10:34:44.340]                           muffled <- TRUE
[10:34:44.340]                           break
[10:34:44.340]                         }
[10:34:44.340]                       }
[10:34:44.340]                     }
[10:34:44.340]                     invisible(muffled)
[10:34:44.340]                   }
[10:34:44.340]                   muffleCondition(cond)
[10:34:44.340]                 })
[10:34:44.340]             }))
[10:34:44.340]             future::FutureResult(value = ...future.value$value, 
[10:34:44.340]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.340]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.340]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.340]                     ...future.globalenv.names))
[10:34:44.340]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.340]         }, condition = base::local({
[10:34:44.340]             c <- base::c
[10:34:44.340]             inherits <- base::inherits
[10:34:44.340]             invokeRestart <- base::invokeRestart
[10:34:44.340]             length <- base::length
[10:34:44.340]             list <- base::list
[10:34:44.340]             seq.int <- base::seq.int
[10:34:44.340]             signalCondition <- base::signalCondition
[10:34:44.340]             sys.calls <- base::sys.calls
[10:34:44.340]             `[[` <- base::`[[`
[10:34:44.340]             `+` <- base::`+`
[10:34:44.340]             `<<-` <- base::`<<-`
[10:34:44.340]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.340]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.340]                   3L)]
[10:34:44.340]             }
[10:34:44.340]             function(cond) {
[10:34:44.340]                 is_error <- inherits(cond, "error")
[10:34:44.340]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.340]                   NULL)
[10:34:44.340]                 if (is_error) {
[10:34:44.340]                   sessionInformation <- function() {
[10:34:44.340]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.340]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.340]                       search = base::search(), system = base::Sys.info())
[10:34:44.340]                   }
[10:34:44.340]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.340]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.340]                     cond$call), session = sessionInformation(), 
[10:34:44.340]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.340]                   signalCondition(cond)
[10:34:44.340]                 }
[10:34:44.340]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.340]                 "immediateCondition"))) {
[10:34:44.340]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.340]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.340]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.340]                   if (TRUE && !signal) {
[10:34:44.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.340]                     {
[10:34:44.340]                       inherits <- base::inherits
[10:34:44.340]                       invokeRestart <- base::invokeRestart
[10:34:44.340]                       is.null <- base::is.null
[10:34:44.340]                       muffled <- FALSE
[10:34:44.340]                       if (inherits(cond, "message")) {
[10:34:44.340]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.340]                         if (muffled) 
[10:34:44.340]                           invokeRestart("muffleMessage")
[10:34:44.340]                       }
[10:34:44.340]                       else if (inherits(cond, "warning")) {
[10:34:44.340]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.340]                         if (muffled) 
[10:34:44.340]                           invokeRestart("muffleWarning")
[10:34:44.340]                       }
[10:34:44.340]                       else if (inherits(cond, "condition")) {
[10:34:44.340]                         if (!is.null(pattern)) {
[10:34:44.340]                           computeRestarts <- base::computeRestarts
[10:34:44.340]                           grepl <- base::grepl
[10:34:44.340]                           restarts <- computeRestarts(cond)
[10:34:44.340]                           for (restart in restarts) {
[10:34:44.340]                             name <- restart$name
[10:34:44.340]                             if (is.null(name)) 
[10:34:44.340]                               next
[10:34:44.340]                             if (!grepl(pattern, name)) 
[10:34:44.340]                               next
[10:34:44.340]                             invokeRestart(restart)
[10:34:44.340]                             muffled <- TRUE
[10:34:44.340]                             break
[10:34:44.340]                           }
[10:34:44.340]                         }
[10:34:44.340]                       }
[10:34:44.340]                       invisible(muffled)
[10:34:44.340]                     }
[10:34:44.340]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.340]                   }
[10:34:44.340]                 }
[10:34:44.340]                 else {
[10:34:44.340]                   if (TRUE) {
[10:34:44.340]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.340]                     {
[10:34:44.340]                       inherits <- base::inherits
[10:34:44.340]                       invokeRestart <- base::invokeRestart
[10:34:44.340]                       is.null <- base::is.null
[10:34:44.340]                       muffled <- FALSE
[10:34:44.340]                       if (inherits(cond, "message")) {
[10:34:44.340]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.340]                         if (muffled) 
[10:34:44.340]                           invokeRestart("muffleMessage")
[10:34:44.340]                       }
[10:34:44.340]                       else if (inherits(cond, "warning")) {
[10:34:44.340]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.340]                         if (muffled) 
[10:34:44.340]                           invokeRestart("muffleWarning")
[10:34:44.340]                       }
[10:34:44.340]                       else if (inherits(cond, "condition")) {
[10:34:44.340]                         if (!is.null(pattern)) {
[10:34:44.340]                           computeRestarts <- base::computeRestarts
[10:34:44.340]                           grepl <- base::grepl
[10:34:44.340]                           restarts <- computeRestarts(cond)
[10:34:44.340]                           for (restart in restarts) {
[10:34:44.340]                             name <- restart$name
[10:34:44.340]                             if (is.null(name)) 
[10:34:44.340]                               next
[10:34:44.340]                             if (!grepl(pattern, name)) 
[10:34:44.340]                               next
[10:34:44.340]                             invokeRestart(restart)
[10:34:44.340]                             muffled <- TRUE
[10:34:44.340]                             break
[10:34:44.340]                           }
[10:34:44.340]                         }
[10:34:44.340]                       }
[10:34:44.340]                       invisible(muffled)
[10:34:44.340]                     }
[10:34:44.340]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.340]                   }
[10:34:44.340]                 }
[10:34:44.340]             }
[10:34:44.340]         }))
[10:34:44.340]     }, error = function(ex) {
[10:34:44.340]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.340]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.340]                 ...future.rng), started = ...future.startTime, 
[10:34:44.340]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.340]             version = "1.8"), class = "FutureResult")
[10:34:44.340]     }, finally = {
[10:34:44.340]         if (!identical(...future.workdir, getwd())) 
[10:34:44.340]             setwd(...future.workdir)
[10:34:44.340]         {
[10:34:44.340]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.340]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.340]             }
[10:34:44.340]             base::options(...future.oldOptions)
[10:34:44.340]             if (.Platform$OS.type == "windows") {
[10:34:44.340]                 old_names <- names(...future.oldEnvVars)
[10:34:44.340]                 envs <- base::Sys.getenv()
[10:34:44.340]                 names <- names(envs)
[10:34:44.340]                 common <- intersect(names, old_names)
[10:34:44.340]                 added <- setdiff(names, old_names)
[10:34:44.340]                 removed <- setdiff(old_names, names)
[10:34:44.340]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.340]                   envs[common]]
[10:34:44.340]                 NAMES <- toupper(changed)
[10:34:44.340]                 args <- list()
[10:34:44.340]                 for (kk in seq_along(NAMES)) {
[10:34:44.340]                   name <- changed[[kk]]
[10:34:44.340]                   NAME <- NAMES[[kk]]
[10:34:44.340]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.340]                     next
[10:34:44.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.340]                 }
[10:34:44.340]                 NAMES <- toupper(added)
[10:34:44.340]                 for (kk in seq_along(NAMES)) {
[10:34:44.340]                   name <- added[[kk]]
[10:34:44.340]                   NAME <- NAMES[[kk]]
[10:34:44.340]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.340]                     next
[10:34:44.340]                   args[[name]] <- ""
[10:34:44.340]                 }
[10:34:44.340]                 NAMES <- toupper(removed)
[10:34:44.340]                 for (kk in seq_along(NAMES)) {
[10:34:44.340]                   name <- removed[[kk]]
[10:34:44.340]                   NAME <- NAMES[[kk]]
[10:34:44.340]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.340]                     next
[10:34:44.340]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.340]                 }
[10:34:44.340]                 if (length(args) > 0) 
[10:34:44.340]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.340]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.340]             }
[10:34:44.340]             else {
[10:34:44.340]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.340]             }
[10:34:44.340]             {
[10:34:44.340]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.340]                   0L) {
[10:34:44.340]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.340]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.340]                   base::options(opts)
[10:34:44.340]                 }
[10:34:44.340]                 {
[10:34:44.340]                   {
[10:34:44.340]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.340]                     NULL
[10:34:44.340]                   }
[10:34:44.340]                   options(future.plan = NULL)
[10:34:44.340]                   if (is.na(NA_character_)) 
[10:34:44.340]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.340]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.340]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.340]                     .init = FALSE)
[10:34:44.340]                 }
[10:34:44.340]             }
[10:34:44.340]         }
[10:34:44.340]     })
[10:34:44.340]     if (TRUE) {
[10:34:44.340]         base::sink(type = "output", split = FALSE)
[10:34:44.340]         if (FALSE) {
[10:34:44.340]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.340]         }
[10:34:44.340]         else {
[10:34:44.340]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.340]         }
[10:34:44.340]         base::close(...future.stdout)
[10:34:44.340]         ...future.stdout <- NULL
[10:34:44.340]     }
[10:34:44.340]     ...future.result$conditions <- ...future.conditions
[10:34:44.340]     ...future.result$finished <- base::Sys.time()
[10:34:44.340]     ...future.result
[10:34:44.340] }
[10:34:44.343] requestCore(): workers = 2
[10:34:44.345] MulticoreFuture started
[10:34:44.345] - Launch lazy future ... done
[10:34:44.345] run() for ‘MulticoreFuture’ ... done
[10:34:44.345] result() for MulticoreFuture ...
[10:34:44.346] plan(): Setting new future strategy stack:
[10:34:44.346] List of future strategies:
[10:34:44.346] 1. sequential:
[10:34:44.346]    - args: function (..., envir = parent.frame())
[10:34:44.346]    - tweaked: FALSE
[10:34:44.346]    - call: NULL
[10:34:44.347] plan(): nbrOfWorkers() = 1
[10:34:44.351] plan(): Setting new future strategy stack:
[10:34:44.351] List of future strategies:
[10:34:44.351] 1. multicore:
[10:34:44.351]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.351]    - tweaked: FALSE
[10:34:44.351]    - call: plan(strategy)
[10:34:44.356] plan(): nbrOfWorkers() = 2
[10:34:44.357] result() for MulticoreFuture ...
[10:34:44.357] result() for MulticoreFuture ... done
[10:34:44.357] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "1e7338f3-f3ab-c0b1-331a-7c94dd671222"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90153
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:44"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:44.367] result() for MulticoreFuture ...
[10:34:44.367] result() for MulticoreFuture ... done
[10:34:44.367] result() for MulticoreFuture ...
[10:34:44.367] result() for MulticoreFuture ... done
[10:34:44.368] getGlobalsAndPackages() ...
[10:34:44.368] Searching for globals...
[10:34:44.374] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.375] Searching for globals ... DONE
[10:34:44.375] Resolving globals: FALSE
[10:34:44.375] 
[10:34:44.376] - packages: [1] ‘utils’
[10:34:44.376] getGlobalsAndPackages() ... DONE
[10:34:44.376] run() for ‘Future’ ...
[10:34:44.376] - state: ‘created’
[10:34:44.376] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.380] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.380] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.381]   - Field: ‘label’
[10:34:44.381]   - Field: ‘local’
[10:34:44.381]   - Field: ‘owner’
[10:34:44.381]   - Field: ‘envir’
[10:34:44.381]   - Field: ‘workers’
[10:34:44.381]   - Field: ‘packages’
[10:34:44.381]   - Field: ‘gc’
[10:34:44.381]   - Field: ‘job’
[10:34:44.382]   - Field: ‘conditions’
[10:34:44.382]   - Field: ‘expr’
[10:34:44.382]   - Field: ‘uuid’
[10:34:44.382]   - Field: ‘seed’
[10:34:44.382]   - Field: ‘version’
[10:34:44.382]   - Field: ‘result’
[10:34:44.382]   - Field: ‘asynchronous’
[10:34:44.382]   - Field: ‘calls’
[10:34:44.382]   - Field: ‘globals’
[10:34:44.383]   - Field: ‘stdout’
[10:34:44.383]   - Field: ‘earlySignal’
[10:34:44.383]   - Field: ‘lazy’
[10:34:44.383]   - Field: ‘state’
[10:34:44.383] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.383] - Launch lazy future ...
[10:34:44.383] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.384] Packages needed by future strategies (n = 0): <none>
[10:34:44.384] {
[10:34:44.384]     {
[10:34:44.384]         {
[10:34:44.384]             ...future.startTime <- base::Sys.time()
[10:34:44.384]             {
[10:34:44.384]                 {
[10:34:44.384]                   {
[10:34:44.384]                     {
[10:34:44.384]                       {
[10:34:44.384]                         base::local({
[10:34:44.384]                           has_future <- base::requireNamespace("future", 
[10:34:44.384]                             quietly = TRUE)
[10:34:44.384]                           if (has_future) {
[10:34:44.384]                             ns <- base::getNamespace("future")
[10:34:44.384]                             version <- ns[[".package"]][["version"]]
[10:34:44.384]                             if (is.null(version)) 
[10:34:44.384]                               version <- utils::packageVersion("future")
[10:34:44.384]                           }
[10:34:44.384]                           else {
[10:34:44.384]                             version <- NULL
[10:34:44.384]                           }
[10:34:44.384]                           if (!has_future || version < "1.8.0") {
[10:34:44.384]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.384]                               "", base::R.version$version.string), 
[10:34:44.384]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.384]                                 base::R.version$platform, 8 * 
[10:34:44.384]                                   base::.Machine$sizeof.pointer), 
[10:34:44.384]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.384]                                 "release", "version")], collapse = " "), 
[10:34:44.384]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.384]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.384]                               info)
[10:34:44.384]                             info <- base::paste(info, collapse = "; ")
[10:34:44.384]                             if (!has_future) {
[10:34:44.384]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.384]                                 info)
[10:34:44.384]                             }
[10:34:44.384]                             else {
[10:34:44.384]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.384]                                 info, version)
[10:34:44.384]                             }
[10:34:44.384]                             base::stop(msg)
[10:34:44.384]                           }
[10:34:44.384]                         })
[10:34:44.384]                       }
[10:34:44.384]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.384]                       base::options(mc.cores = 1L)
[10:34:44.384]                     }
[10:34:44.384]                     base::local({
[10:34:44.384]                       for (pkg in "utils") {
[10:34:44.384]                         base::loadNamespace(pkg)
[10:34:44.384]                         base::library(pkg, character.only = TRUE)
[10:34:44.384]                       }
[10:34:44.384]                     })
[10:34:44.384]                   }
[10:34:44.384]                   ...future.strategy.old <- future::plan("list")
[10:34:44.384]                   options(future.plan = NULL)
[10:34:44.384]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.384]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.384]                 }
[10:34:44.384]                 ...future.workdir <- getwd()
[10:34:44.384]             }
[10:34:44.384]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.384]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.384]         }
[10:34:44.384]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.384]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.384]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.384]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.384]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.384]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.384]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.384]             base::names(...future.oldOptions))
[10:34:44.384]     }
[10:34:44.384]     if (FALSE) {
[10:34:44.384]     }
[10:34:44.384]     else {
[10:34:44.384]         if (FALSE) {
[10:34:44.384]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.384]                 open = "w")
[10:34:44.384]         }
[10:34:44.384]         else {
[10:34:44.384]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.384]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.384]         }
[10:34:44.384]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.384]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.384]             base::sink(type = "output", split = FALSE)
[10:34:44.384]             base::close(...future.stdout)
[10:34:44.384]         }, add = TRUE)
[10:34:44.384]     }
[10:34:44.384]     ...future.frame <- base::sys.nframe()
[10:34:44.384]     ...future.conditions <- base::list()
[10:34:44.384]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.384]     if (FALSE) {
[10:34:44.384]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.384]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.384]     }
[10:34:44.384]     ...future.result <- base::tryCatch({
[10:34:44.384]         base::withCallingHandlers({
[10:34:44.384]             ...future.value <- base::withVisible(base::local({
[10:34:44.384]                 withCallingHandlers({
[10:34:44.384]                   {
[10:34:44.384]                     print(1:50)
[10:34:44.384]                     str(1:50)
[10:34:44.384]                     cat(letters, sep = "-")
[10:34:44.384]                     cat(1:6, collapse = "\n")
[10:34:44.384]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.384]                     42L
[10:34:44.384]                   }
[10:34:44.384]                 }, immediateCondition = function(cond) {
[10:34:44.384]                   save_rds <- function (object, pathname, ...) 
[10:34:44.384]                   {
[10:34:44.384]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.384]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.384]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.384]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.384]                         fi_tmp[["mtime"]])
[10:34:44.384]                     }
[10:34:44.384]                     tryCatch({
[10:34:44.384]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.384]                     }, error = function(ex) {
[10:34:44.384]                       msg <- conditionMessage(ex)
[10:34:44.384]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.384]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.384]                         fi_tmp[["mtime"]], msg)
[10:34:44.384]                       ex$message <- msg
[10:34:44.384]                       stop(ex)
[10:34:44.384]                     })
[10:34:44.384]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.384]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.384]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.384]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.384]                       fi <- file.info(pathname)
[10:34:44.384]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.384]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.384]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.384]                         fi[["size"]], fi[["mtime"]])
[10:34:44.384]                       stop(msg)
[10:34:44.384]                     }
[10:34:44.384]                     invisible(pathname)
[10:34:44.384]                   }
[10:34:44.384]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.384]                     rootPath = tempdir()) 
[10:34:44.384]                   {
[10:34:44.384]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.384]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.384]                       tmpdir = path, fileext = ".rds")
[10:34:44.384]                     save_rds(obj, file)
[10:34:44.384]                   }
[10:34:44.384]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.384]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.384]                   {
[10:34:44.384]                     inherits <- base::inherits
[10:34:44.384]                     invokeRestart <- base::invokeRestart
[10:34:44.384]                     is.null <- base::is.null
[10:34:44.384]                     muffled <- FALSE
[10:34:44.384]                     if (inherits(cond, "message")) {
[10:34:44.384]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.384]                       if (muffled) 
[10:34:44.384]                         invokeRestart("muffleMessage")
[10:34:44.384]                     }
[10:34:44.384]                     else if (inherits(cond, "warning")) {
[10:34:44.384]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.384]                       if (muffled) 
[10:34:44.384]                         invokeRestart("muffleWarning")
[10:34:44.384]                     }
[10:34:44.384]                     else if (inherits(cond, "condition")) {
[10:34:44.384]                       if (!is.null(pattern)) {
[10:34:44.384]                         computeRestarts <- base::computeRestarts
[10:34:44.384]                         grepl <- base::grepl
[10:34:44.384]                         restarts <- computeRestarts(cond)
[10:34:44.384]                         for (restart in restarts) {
[10:34:44.384]                           name <- restart$name
[10:34:44.384]                           if (is.null(name)) 
[10:34:44.384]                             next
[10:34:44.384]                           if (!grepl(pattern, name)) 
[10:34:44.384]                             next
[10:34:44.384]                           invokeRestart(restart)
[10:34:44.384]                           muffled <- TRUE
[10:34:44.384]                           break
[10:34:44.384]                         }
[10:34:44.384]                       }
[10:34:44.384]                     }
[10:34:44.384]                     invisible(muffled)
[10:34:44.384]                   }
[10:34:44.384]                   muffleCondition(cond)
[10:34:44.384]                 })
[10:34:44.384]             }))
[10:34:44.384]             future::FutureResult(value = ...future.value$value, 
[10:34:44.384]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.384]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.384]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.384]                     ...future.globalenv.names))
[10:34:44.384]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.384]         }, condition = base::local({
[10:34:44.384]             c <- base::c
[10:34:44.384]             inherits <- base::inherits
[10:34:44.384]             invokeRestart <- base::invokeRestart
[10:34:44.384]             length <- base::length
[10:34:44.384]             list <- base::list
[10:34:44.384]             seq.int <- base::seq.int
[10:34:44.384]             signalCondition <- base::signalCondition
[10:34:44.384]             sys.calls <- base::sys.calls
[10:34:44.384]             `[[` <- base::`[[`
[10:34:44.384]             `+` <- base::`+`
[10:34:44.384]             `<<-` <- base::`<<-`
[10:34:44.384]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.384]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.384]                   3L)]
[10:34:44.384]             }
[10:34:44.384]             function(cond) {
[10:34:44.384]                 is_error <- inherits(cond, "error")
[10:34:44.384]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.384]                   NULL)
[10:34:44.384]                 if (is_error) {
[10:34:44.384]                   sessionInformation <- function() {
[10:34:44.384]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.384]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.384]                       search = base::search(), system = base::Sys.info())
[10:34:44.384]                   }
[10:34:44.384]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.384]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.384]                     cond$call), session = sessionInformation(), 
[10:34:44.384]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.384]                   signalCondition(cond)
[10:34:44.384]                 }
[10:34:44.384]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.384]                 "immediateCondition"))) {
[10:34:44.384]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.384]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.384]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.384]                   if (TRUE && !signal) {
[10:34:44.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.384]                     {
[10:34:44.384]                       inherits <- base::inherits
[10:34:44.384]                       invokeRestart <- base::invokeRestart
[10:34:44.384]                       is.null <- base::is.null
[10:34:44.384]                       muffled <- FALSE
[10:34:44.384]                       if (inherits(cond, "message")) {
[10:34:44.384]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.384]                         if (muffled) 
[10:34:44.384]                           invokeRestart("muffleMessage")
[10:34:44.384]                       }
[10:34:44.384]                       else if (inherits(cond, "warning")) {
[10:34:44.384]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.384]                         if (muffled) 
[10:34:44.384]                           invokeRestart("muffleWarning")
[10:34:44.384]                       }
[10:34:44.384]                       else if (inherits(cond, "condition")) {
[10:34:44.384]                         if (!is.null(pattern)) {
[10:34:44.384]                           computeRestarts <- base::computeRestarts
[10:34:44.384]                           grepl <- base::grepl
[10:34:44.384]                           restarts <- computeRestarts(cond)
[10:34:44.384]                           for (restart in restarts) {
[10:34:44.384]                             name <- restart$name
[10:34:44.384]                             if (is.null(name)) 
[10:34:44.384]                               next
[10:34:44.384]                             if (!grepl(pattern, name)) 
[10:34:44.384]                               next
[10:34:44.384]                             invokeRestart(restart)
[10:34:44.384]                             muffled <- TRUE
[10:34:44.384]                             break
[10:34:44.384]                           }
[10:34:44.384]                         }
[10:34:44.384]                       }
[10:34:44.384]                       invisible(muffled)
[10:34:44.384]                     }
[10:34:44.384]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.384]                   }
[10:34:44.384]                 }
[10:34:44.384]                 else {
[10:34:44.384]                   if (TRUE) {
[10:34:44.384]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.384]                     {
[10:34:44.384]                       inherits <- base::inherits
[10:34:44.384]                       invokeRestart <- base::invokeRestart
[10:34:44.384]                       is.null <- base::is.null
[10:34:44.384]                       muffled <- FALSE
[10:34:44.384]                       if (inherits(cond, "message")) {
[10:34:44.384]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.384]                         if (muffled) 
[10:34:44.384]                           invokeRestart("muffleMessage")
[10:34:44.384]                       }
[10:34:44.384]                       else if (inherits(cond, "warning")) {
[10:34:44.384]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.384]                         if (muffled) 
[10:34:44.384]                           invokeRestart("muffleWarning")
[10:34:44.384]                       }
[10:34:44.384]                       else if (inherits(cond, "condition")) {
[10:34:44.384]                         if (!is.null(pattern)) {
[10:34:44.384]                           computeRestarts <- base::computeRestarts
[10:34:44.384]                           grepl <- base::grepl
[10:34:44.384]                           restarts <- computeRestarts(cond)
[10:34:44.384]                           for (restart in restarts) {
[10:34:44.384]                             name <- restart$name
[10:34:44.384]                             if (is.null(name)) 
[10:34:44.384]                               next
[10:34:44.384]                             if (!grepl(pattern, name)) 
[10:34:44.384]                               next
[10:34:44.384]                             invokeRestart(restart)
[10:34:44.384]                             muffled <- TRUE
[10:34:44.384]                             break
[10:34:44.384]                           }
[10:34:44.384]                         }
[10:34:44.384]                       }
[10:34:44.384]                       invisible(muffled)
[10:34:44.384]                     }
[10:34:44.384]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.384]                   }
[10:34:44.384]                 }
[10:34:44.384]             }
[10:34:44.384]         }))
[10:34:44.384]     }, error = function(ex) {
[10:34:44.384]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.384]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.384]                 ...future.rng), started = ...future.startTime, 
[10:34:44.384]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.384]             version = "1.8"), class = "FutureResult")
[10:34:44.384]     }, finally = {
[10:34:44.384]         if (!identical(...future.workdir, getwd())) 
[10:34:44.384]             setwd(...future.workdir)
[10:34:44.384]         {
[10:34:44.384]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.384]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.384]             }
[10:34:44.384]             base::options(...future.oldOptions)
[10:34:44.384]             if (.Platform$OS.type == "windows") {
[10:34:44.384]                 old_names <- names(...future.oldEnvVars)
[10:34:44.384]                 envs <- base::Sys.getenv()
[10:34:44.384]                 names <- names(envs)
[10:34:44.384]                 common <- intersect(names, old_names)
[10:34:44.384]                 added <- setdiff(names, old_names)
[10:34:44.384]                 removed <- setdiff(old_names, names)
[10:34:44.384]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.384]                   envs[common]]
[10:34:44.384]                 NAMES <- toupper(changed)
[10:34:44.384]                 args <- list()
[10:34:44.384]                 for (kk in seq_along(NAMES)) {
[10:34:44.384]                   name <- changed[[kk]]
[10:34:44.384]                   NAME <- NAMES[[kk]]
[10:34:44.384]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.384]                     next
[10:34:44.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.384]                 }
[10:34:44.384]                 NAMES <- toupper(added)
[10:34:44.384]                 for (kk in seq_along(NAMES)) {
[10:34:44.384]                   name <- added[[kk]]
[10:34:44.384]                   NAME <- NAMES[[kk]]
[10:34:44.384]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.384]                     next
[10:34:44.384]                   args[[name]] <- ""
[10:34:44.384]                 }
[10:34:44.384]                 NAMES <- toupper(removed)
[10:34:44.384]                 for (kk in seq_along(NAMES)) {
[10:34:44.384]                   name <- removed[[kk]]
[10:34:44.384]                   NAME <- NAMES[[kk]]
[10:34:44.384]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.384]                     next
[10:34:44.384]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.384]                 }
[10:34:44.384]                 if (length(args) > 0) 
[10:34:44.384]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.384]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.384]             }
[10:34:44.384]             else {
[10:34:44.384]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.384]             }
[10:34:44.384]             {
[10:34:44.384]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.384]                   0L) {
[10:34:44.384]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.384]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.384]                   base::options(opts)
[10:34:44.384]                 }
[10:34:44.384]                 {
[10:34:44.384]                   {
[10:34:44.384]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.384]                     NULL
[10:34:44.384]                   }
[10:34:44.384]                   options(future.plan = NULL)
[10:34:44.384]                   if (is.na(NA_character_)) 
[10:34:44.384]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.384]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.384]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.384]                     .init = FALSE)
[10:34:44.384]                 }
[10:34:44.384]             }
[10:34:44.384]         }
[10:34:44.384]     })
[10:34:44.384]     if (TRUE) {
[10:34:44.384]         base::sink(type = "output", split = FALSE)
[10:34:44.384]         if (FALSE) {
[10:34:44.384]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.384]         }
[10:34:44.384]         else {
[10:34:44.384]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.384]         }
[10:34:44.384]         base::close(...future.stdout)
[10:34:44.384]         ...future.stdout <- NULL
[10:34:44.384]     }
[10:34:44.384]     ...future.result$conditions <- ...future.conditions
[10:34:44.384]     ...future.result$finished <- base::Sys.time()
[10:34:44.384]     ...future.result
[10:34:44.384] }
[10:34:44.387] requestCore(): workers = 2
[10:34:44.389] MulticoreFuture started
[10:34:44.389] - Launch lazy future ... done
[10:34:44.389] run() for ‘MulticoreFuture’ ... done
[10:34:44.390] result() for MulticoreFuture ...
[10:34:44.390] plan(): Setting new future strategy stack:
[10:34:44.390] List of future strategies:
[10:34:44.390] 1. sequential:
[10:34:44.390]    - args: function (..., envir = parent.frame())
[10:34:44.390]    - tweaked: FALSE
[10:34:44.390]    - call: NULL
[10:34:44.391] plan(): nbrOfWorkers() = 1
[10:34:44.395] plan(): Setting new future strategy stack:
[10:34:44.395] List of future strategies:
[10:34:44.395] 1. multicore:
[10:34:44.395]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.395]    - tweaked: FALSE
[10:34:44.395]    - call: plan(strategy)
[10:34:44.400] plan(): nbrOfWorkers() = 2
[10:34:44.400] result() for MulticoreFuture ...
[10:34:44.401] result() for MulticoreFuture ... done
[10:34:44.401] result() for MulticoreFuture ... done
[10:34:44.401] result() for MulticoreFuture ...
[10:34:44.401] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.401] getGlobalsAndPackages() ...
[10:34:44.402] Searching for globals...
[10:34:44.402] - globals found: [1] ‘print’
[10:34:44.403] Searching for globals ... DONE
[10:34:44.403] Resolving globals: FALSE
[10:34:44.403] 
[10:34:44.403] 
[10:34:44.403] getGlobalsAndPackages() ... DONE
[10:34:44.404] run() for ‘Future’ ...
[10:34:44.404] - state: ‘created’
[10:34:44.404] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.408] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.408] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.408]   - Field: ‘label’
[10:34:44.409]   - Field: ‘local’
[10:34:44.409]   - Field: ‘owner’
[10:34:44.409]   - Field: ‘envir’
[10:34:44.409]   - Field: ‘workers’
[10:34:44.409]   - Field: ‘packages’
[10:34:44.409]   - Field: ‘gc’
[10:34:44.409]   - Field: ‘job’
[10:34:44.409]   - Field: ‘conditions’
[10:34:44.410]   - Field: ‘expr’
[10:34:44.410]   - Field: ‘uuid’
[10:34:44.410]   - Field: ‘seed’
[10:34:44.410]   - Field: ‘version’
[10:34:44.410]   - Field: ‘result’
[10:34:44.410]   - Field: ‘asynchronous’
[10:34:44.410]   - Field: ‘calls’
[10:34:44.410]   - Field: ‘globals’
[10:34:44.410]   - Field: ‘stdout’
[10:34:44.411]   - Field: ‘earlySignal’
[10:34:44.411]   - Field: ‘lazy’
[10:34:44.411]   - Field: ‘state’
[10:34:44.411] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.411] - Launch lazy future ...
[10:34:44.411] Packages needed by the future expression (n = 0): <none>
[10:34:44.411] Packages needed by future strategies (n = 0): <none>
[10:34:44.412] {
[10:34:44.412]     {
[10:34:44.412]         {
[10:34:44.412]             ...future.startTime <- base::Sys.time()
[10:34:44.412]             {
[10:34:44.412]                 {
[10:34:44.412]                   {
[10:34:44.412]                     {
[10:34:44.412]                       base::local({
[10:34:44.412]                         has_future <- base::requireNamespace("future", 
[10:34:44.412]                           quietly = TRUE)
[10:34:44.412]                         if (has_future) {
[10:34:44.412]                           ns <- base::getNamespace("future")
[10:34:44.412]                           version <- ns[[".package"]][["version"]]
[10:34:44.412]                           if (is.null(version)) 
[10:34:44.412]                             version <- utils::packageVersion("future")
[10:34:44.412]                         }
[10:34:44.412]                         else {
[10:34:44.412]                           version <- NULL
[10:34:44.412]                         }
[10:34:44.412]                         if (!has_future || version < "1.8.0") {
[10:34:44.412]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.412]                             "", base::R.version$version.string), 
[10:34:44.412]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.412]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.412]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.412]                               "release", "version")], collapse = " "), 
[10:34:44.412]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.412]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.412]                             info)
[10:34:44.412]                           info <- base::paste(info, collapse = "; ")
[10:34:44.412]                           if (!has_future) {
[10:34:44.412]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.412]                               info)
[10:34:44.412]                           }
[10:34:44.412]                           else {
[10:34:44.412]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.412]                               info, version)
[10:34:44.412]                           }
[10:34:44.412]                           base::stop(msg)
[10:34:44.412]                         }
[10:34:44.412]                       })
[10:34:44.412]                     }
[10:34:44.412]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.412]                     base::options(mc.cores = 1L)
[10:34:44.412]                   }
[10:34:44.412]                   ...future.strategy.old <- future::plan("list")
[10:34:44.412]                   options(future.plan = NULL)
[10:34:44.412]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.412]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.412]                 }
[10:34:44.412]                 ...future.workdir <- getwd()
[10:34:44.412]             }
[10:34:44.412]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.412]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.412]         }
[10:34:44.412]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.412]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.412]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.412]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.412]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.412]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.412]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.412]             base::names(...future.oldOptions))
[10:34:44.412]     }
[10:34:44.412]     if (FALSE) {
[10:34:44.412]     }
[10:34:44.412]     else {
[10:34:44.412]         if (TRUE) {
[10:34:44.412]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.412]                 open = "w")
[10:34:44.412]         }
[10:34:44.412]         else {
[10:34:44.412]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.412]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.412]         }
[10:34:44.412]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.412]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.412]             base::sink(type = "output", split = FALSE)
[10:34:44.412]             base::close(...future.stdout)
[10:34:44.412]         }, add = TRUE)
[10:34:44.412]     }
[10:34:44.412]     ...future.frame <- base::sys.nframe()
[10:34:44.412]     ...future.conditions <- base::list()
[10:34:44.412]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.412]     if (FALSE) {
[10:34:44.412]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.412]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.412]     }
[10:34:44.412]     ...future.result <- base::tryCatch({
[10:34:44.412]         base::withCallingHandlers({
[10:34:44.412]             ...future.value <- base::withVisible(base::local({
[10:34:44.412]                 withCallingHandlers({
[10:34:44.412]                   print(42)
[10:34:44.412]                 }, immediateCondition = function(cond) {
[10:34:44.412]                   save_rds <- function (object, pathname, ...) 
[10:34:44.412]                   {
[10:34:44.412]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.412]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.412]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.412]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.412]                         fi_tmp[["mtime"]])
[10:34:44.412]                     }
[10:34:44.412]                     tryCatch({
[10:34:44.412]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.412]                     }, error = function(ex) {
[10:34:44.412]                       msg <- conditionMessage(ex)
[10:34:44.412]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.412]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.412]                         fi_tmp[["mtime"]], msg)
[10:34:44.412]                       ex$message <- msg
[10:34:44.412]                       stop(ex)
[10:34:44.412]                     })
[10:34:44.412]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.412]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.412]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.412]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.412]                       fi <- file.info(pathname)
[10:34:44.412]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.412]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.412]                         fi[["size"]], fi[["mtime"]])
[10:34:44.412]                       stop(msg)
[10:34:44.412]                     }
[10:34:44.412]                     invisible(pathname)
[10:34:44.412]                   }
[10:34:44.412]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.412]                     rootPath = tempdir()) 
[10:34:44.412]                   {
[10:34:44.412]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.412]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.412]                       tmpdir = path, fileext = ".rds")
[10:34:44.412]                     save_rds(obj, file)
[10:34:44.412]                   }
[10:34:44.412]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.412]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.412]                   {
[10:34:44.412]                     inherits <- base::inherits
[10:34:44.412]                     invokeRestart <- base::invokeRestart
[10:34:44.412]                     is.null <- base::is.null
[10:34:44.412]                     muffled <- FALSE
[10:34:44.412]                     if (inherits(cond, "message")) {
[10:34:44.412]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.412]                       if (muffled) 
[10:34:44.412]                         invokeRestart("muffleMessage")
[10:34:44.412]                     }
[10:34:44.412]                     else if (inherits(cond, "warning")) {
[10:34:44.412]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.412]                       if (muffled) 
[10:34:44.412]                         invokeRestart("muffleWarning")
[10:34:44.412]                     }
[10:34:44.412]                     else if (inherits(cond, "condition")) {
[10:34:44.412]                       if (!is.null(pattern)) {
[10:34:44.412]                         computeRestarts <- base::computeRestarts
[10:34:44.412]                         grepl <- base::grepl
[10:34:44.412]                         restarts <- computeRestarts(cond)
[10:34:44.412]                         for (restart in restarts) {
[10:34:44.412]                           name <- restart$name
[10:34:44.412]                           if (is.null(name)) 
[10:34:44.412]                             next
[10:34:44.412]                           if (!grepl(pattern, name)) 
[10:34:44.412]                             next
[10:34:44.412]                           invokeRestart(restart)
[10:34:44.412]                           muffled <- TRUE
[10:34:44.412]                           break
[10:34:44.412]                         }
[10:34:44.412]                       }
[10:34:44.412]                     }
[10:34:44.412]                     invisible(muffled)
[10:34:44.412]                   }
[10:34:44.412]                   muffleCondition(cond)
[10:34:44.412]                 })
[10:34:44.412]             }))
[10:34:44.412]             future::FutureResult(value = ...future.value$value, 
[10:34:44.412]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.412]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.412]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.412]                     ...future.globalenv.names))
[10:34:44.412]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.412]         }, condition = base::local({
[10:34:44.412]             c <- base::c
[10:34:44.412]             inherits <- base::inherits
[10:34:44.412]             invokeRestart <- base::invokeRestart
[10:34:44.412]             length <- base::length
[10:34:44.412]             list <- base::list
[10:34:44.412]             seq.int <- base::seq.int
[10:34:44.412]             signalCondition <- base::signalCondition
[10:34:44.412]             sys.calls <- base::sys.calls
[10:34:44.412]             `[[` <- base::`[[`
[10:34:44.412]             `+` <- base::`+`
[10:34:44.412]             `<<-` <- base::`<<-`
[10:34:44.412]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.412]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.412]                   3L)]
[10:34:44.412]             }
[10:34:44.412]             function(cond) {
[10:34:44.412]                 is_error <- inherits(cond, "error")
[10:34:44.412]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.412]                   NULL)
[10:34:44.412]                 if (is_error) {
[10:34:44.412]                   sessionInformation <- function() {
[10:34:44.412]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.412]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.412]                       search = base::search(), system = base::Sys.info())
[10:34:44.412]                   }
[10:34:44.412]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.412]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.412]                     cond$call), session = sessionInformation(), 
[10:34:44.412]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.412]                   signalCondition(cond)
[10:34:44.412]                 }
[10:34:44.412]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.412]                 "immediateCondition"))) {
[10:34:44.412]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.412]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.412]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.412]                   if (TRUE && !signal) {
[10:34:44.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.412]                     {
[10:34:44.412]                       inherits <- base::inherits
[10:34:44.412]                       invokeRestart <- base::invokeRestart
[10:34:44.412]                       is.null <- base::is.null
[10:34:44.412]                       muffled <- FALSE
[10:34:44.412]                       if (inherits(cond, "message")) {
[10:34:44.412]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.412]                         if (muffled) 
[10:34:44.412]                           invokeRestart("muffleMessage")
[10:34:44.412]                       }
[10:34:44.412]                       else if (inherits(cond, "warning")) {
[10:34:44.412]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.412]                         if (muffled) 
[10:34:44.412]                           invokeRestart("muffleWarning")
[10:34:44.412]                       }
[10:34:44.412]                       else if (inherits(cond, "condition")) {
[10:34:44.412]                         if (!is.null(pattern)) {
[10:34:44.412]                           computeRestarts <- base::computeRestarts
[10:34:44.412]                           grepl <- base::grepl
[10:34:44.412]                           restarts <- computeRestarts(cond)
[10:34:44.412]                           for (restart in restarts) {
[10:34:44.412]                             name <- restart$name
[10:34:44.412]                             if (is.null(name)) 
[10:34:44.412]                               next
[10:34:44.412]                             if (!grepl(pattern, name)) 
[10:34:44.412]                               next
[10:34:44.412]                             invokeRestart(restart)
[10:34:44.412]                             muffled <- TRUE
[10:34:44.412]                             break
[10:34:44.412]                           }
[10:34:44.412]                         }
[10:34:44.412]                       }
[10:34:44.412]                       invisible(muffled)
[10:34:44.412]                     }
[10:34:44.412]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.412]                   }
[10:34:44.412]                 }
[10:34:44.412]                 else {
[10:34:44.412]                   if (TRUE) {
[10:34:44.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.412]                     {
[10:34:44.412]                       inherits <- base::inherits
[10:34:44.412]                       invokeRestart <- base::invokeRestart
[10:34:44.412]                       is.null <- base::is.null
[10:34:44.412]                       muffled <- FALSE
[10:34:44.412]                       if (inherits(cond, "message")) {
[10:34:44.412]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.412]                         if (muffled) 
[10:34:44.412]                           invokeRestart("muffleMessage")
[10:34:44.412]                       }
[10:34:44.412]                       else if (inherits(cond, "warning")) {
[10:34:44.412]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.412]                         if (muffled) 
[10:34:44.412]                           invokeRestart("muffleWarning")
[10:34:44.412]                       }
[10:34:44.412]                       else if (inherits(cond, "condition")) {
[10:34:44.412]                         if (!is.null(pattern)) {
[10:34:44.412]                           computeRestarts <- base::computeRestarts
[10:34:44.412]                           grepl <- base::grepl
[10:34:44.412]                           restarts <- computeRestarts(cond)
[10:34:44.412]                           for (restart in restarts) {
[10:34:44.412]                             name <- restart$name
[10:34:44.412]                             if (is.null(name)) 
[10:34:44.412]                               next
[10:34:44.412]                             if (!grepl(pattern, name)) 
[10:34:44.412]                               next
[10:34:44.412]                             invokeRestart(restart)
[10:34:44.412]                             muffled <- TRUE
[10:34:44.412]                             break
[10:34:44.412]                           }
[10:34:44.412]                         }
[10:34:44.412]                       }
[10:34:44.412]                       invisible(muffled)
[10:34:44.412]                     }
[10:34:44.412]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.412]                   }
[10:34:44.412]                 }
[10:34:44.412]             }
[10:34:44.412]         }))
[10:34:44.412]     }, error = function(ex) {
[10:34:44.412]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.412]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.412]                 ...future.rng), started = ...future.startTime, 
[10:34:44.412]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.412]             version = "1.8"), class = "FutureResult")
[10:34:44.412]     }, finally = {
[10:34:44.412]         if (!identical(...future.workdir, getwd())) 
[10:34:44.412]             setwd(...future.workdir)
[10:34:44.412]         {
[10:34:44.412]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.412]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.412]             }
[10:34:44.412]             base::options(...future.oldOptions)
[10:34:44.412]             if (.Platform$OS.type == "windows") {
[10:34:44.412]                 old_names <- names(...future.oldEnvVars)
[10:34:44.412]                 envs <- base::Sys.getenv()
[10:34:44.412]                 names <- names(envs)
[10:34:44.412]                 common <- intersect(names, old_names)
[10:34:44.412]                 added <- setdiff(names, old_names)
[10:34:44.412]                 removed <- setdiff(old_names, names)
[10:34:44.412]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.412]                   envs[common]]
[10:34:44.412]                 NAMES <- toupper(changed)
[10:34:44.412]                 args <- list()
[10:34:44.412]                 for (kk in seq_along(NAMES)) {
[10:34:44.412]                   name <- changed[[kk]]
[10:34:44.412]                   NAME <- NAMES[[kk]]
[10:34:44.412]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.412]                     next
[10:34:44.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.412]                 }
[10:34:44.412]                 NAMES <- toupper(added)
[10:34:44.412]                 for (kk in seq_along(NAMES)) {
[10:34:44.412]                   name <- added[[kk]]
[10:34:44.412]                   NAME <- NAMES[[kk]]
[10:34:44.412]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.412]                     next
[10:34:44.412]                   args[[name]] <- ""
[10:34:44.412]                 }
[10:34:44.412]                 NAMES <- toupper(removed)
[10:34:44.412]                 for (kk in seq_along(NAMES)) {
[10:34:44.412]                   name <- removed[[kk]]
[10:34:44.412]                   NAME <- NAMES[[kk]]
[10:34:44.412]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.412]                     next
[10:34:44.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.412]                 }
[10:34:44.412]                 if (length(args) > 0) 
[10:34:44.412]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.412]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.412]             }
[10:34:44.412]             else {
[10:34:44.412]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.412]             }
[10:34:44.412]             {
[10:34:44.412]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.412]                   0L) {
[10:34:44.412]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.412]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.412]                   base::options(opts)
[10:34:44.412]                 }
[10:34:44.412]                 {
[10:34:44.412]                   {
[10:34:44.412]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.412]                     NULL
[10:34:44.412]                   }
[10:34:44.412]                   options(future.plan = NULL)
[10:34:44.412]                   if (is.na(NA_character_)) 
[10:34:44.412]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.412]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.412]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.412]                     .init = FALSE)
[10:34:44.412]                 }
[10:34:44.412]             }
[10:34:44.412]         }
[10:34:44.412]     })
[10:34:44.412]     if (TRUE) {
[10:34:44.412]         base::sink(type = "output", split = FALSE)
[10:34:44.412]         if (TRUE) {
[10:34:44.412]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.412]         }
[10:34:44.412]         else {
[10:34:44.412]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.412]         }
[10:34:44.412]         base::close(...future.stdout)
[10:34:44.412]         ...future.stdout <- NULL
[10:34:44.412]     }
[10:34:44.412]     ...future.result$conditions <- ...future.conditions
[10:34:44.412]     ...future.result$finished <- base::Sys.time()
[10:34:44.412]     ...future.result
[10:34:44.412] }
[10:34:44.415] requestCore(): workers = 2
[10:34:44.417] MulticoreFuture started
[10:34:44.417] - Launch lazy future ... done
[10:34:44.417] run() for ‘MulticoreFuture’ ... done
[10:34:44.417] result() for MulticoreFuture ...
[10:34:44.418] plan(): Setting new future strategy stack:
[10:34:44.418] List of future strategies:
[10:34:44.418] 1. sequential:
[10:34:44.418]    - args: function (..., envir = parent.frame())
[10:34:44.418]    - tweaked: FALSE
[10:34:44.418]    - call: NULL
[10:34:44.419] plan(): nbrOfWorkers() = 1
[10:34:44.421] plan(): Setting new future strategy stack:
[10:34:44.421] List of future strategies:
[10:34:44.421] 1. multicore:
[10:34:44.421]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.421]    - tweaked: FALSE
[10:34:44.421]    - call: plan(strategy)
[10:34:44.426] plan(): nbrOfWorkers() = 2
[10:34:44.427] result() for MulticoreFuture ...
[10:34:44.427] result() for MulticoreFuture ... done
[10:34:44.427] result() for MulticoreFuture ... done
[10:34:44.427] result() for MulticoreFuture ...
[10:34:44.427] result() for MulticoreFuture ... done
[10:34:44.428] result() for MulticoreFuture ...
[10:34:44.428] result() for MulticoreFuture ... done
[1] 42
[10:34:44.428] result() for MulticoreFuture ...
[10:34:44.428] result() for MulticoreFuture ... done
- stdout = NA
[10:34:44.428] getGlobalsAndPackages() ...
[10:34:44.428] Searching for globals...
[10:34:44.435] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.435] Searching for globals ... DONE
[10:34:44.436] Resolving globals: FALSE
[10:34:44.436] 
[10:34:44.436] - packages: [1] ‘utils’
[10:34:44.437] getGlobalsAndPackages() ... DONE
[10:34:44.437] run() for ‘Future’ ...
[10:34:44.437] - state: ‘created’
[10:34:44.437] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.441] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.441] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.442]   - Field: ‘label’
[10:34:44.442]   - Field: ‘local’
[10:34:44.442]   - Field: ‘owner’
[10:34:44.442]   - Field: ‘envir’
[10:34:44.442]   - Field: ‘workers’
[10:34:44.442]   - Field: ‘packages’
[10:34:44.442]   - Field: ‘gc’
[10:34:44.443]   - Field: ‘job’
[10:34:44.443]   - Field: ‘conditions’
[10:34:44.443]   - Field: ‘expr’
[10:34:44.443]   - Field: ‘uuid’
[10:34:44.443]   - Field: ‘seed’
[10:34:44.443]   - Field: ‘version’
[10:34:44.443]   - Field: ‘result’
[10:34:44.443]   - Field: ‘asynchronous’
[10:34:44.443]   - Field: ‘calls’
[10:34:44.444]   - Field: ‘globals’
[10:34:44.444]   - Field: ‘stdout’
[10:34:44.444]   - Field: ‘earlySignal’
[10:34:44.444]   - Field: ‘lazy’
[10:34:44.444]   - Field: ‘state’
[10:34:44.444] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.444] - Launch lazy future ...
[10:34:44.445] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.445] Packages needed by future strategies (n = 0): <none>
[10:34:44.445] {
[10:34:44.445]     {
[10:34:44.445]         {
[10:34:44.445]             ...future.startTime <- base::Sys.time()
[10:34:44.445]             {
[10:34:44.445]                 {
[10:34:44.445]                   {
[10:34:44.445]                     {
[10:34:44.445]                       {
[10:34:44.445]                         base::local({
[10:34:44.445]                           has_future <- base::requireNamespace("future", 
[10:34:44.445]                             quietly = TRUE)
[10:34:44.445]                           if (has_future) {
[10:34:44.445]                             ns <- base::getNamespace("future")
[10:34:44.445]                             version <- ns[[".package"]][["version"]]
[10:34:44.445]                             if (is.null(version)) 
[10:34:44.445]                               version <- utils::packageVersion("future")
[10:34:44.445]                           }
[10:34:44.445]                           else {
[10:34:44.445]                             version <- NULL
[10:34:44.445]                           }
[10:34:44.445]                           if (!has_future || version < "1.8.0") {
[10:34:44.445]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.445]                               "", base::R.version$version.string), 
[10:34:44.445]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.445]                                 base::R.version$platform, 8 * 
[10:34:44.445]                                   base::.Machine$sizeof.pointer), 
[10:34:44.445]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.445]                                 "release", "version")], collapse = " "), 
[10:34:44.445]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.445]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.445]                               info)
[10:34:44.445]                             info <- base::paste(info, collapse = "; ")
[10:34:44.445]                             if (!has_future) {
[10:34:44.445]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.445]                                 info)
[10:34:44.445]                             }
[10:34:44.445]                             else {
[10:34:44.445]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.445]                                 info, version)
[10:34:44.445]                             }
[10:34:44.445]                             base::stop(msg)
[10:34:44.445]                           }
[10:34:44.445]                         })
[10:34:44.445]                       }
[10:34:44.445]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.445]                       base::options(mc.cores = 1L)
[10:34:44.445]                     }
[10:34:44.445]                     base::local({
[10:34:44.445]                       for (pkg in "utils") {
[10:34:44.445]                         base::loadNamespace(pkg)
[10:34:44.445]                         base::library(pkg, character.only = TRUE)
[10:34:44.445]                       }
[10:34:44.445]                     })
[10:34:44.445]                   }
[10:34:44.445]                   ...future.strategy.old <- future::plan("list")
[10:34:44.445]                   options(future.plan = NULL)
[10:34:44.445]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.445]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.445]                 }
[10:34:44.445]                 ...future.workdir <- getwd()
[10:34:44.445]             }
[10:34:44.445]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.445]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.445]         }
[10:34:44.445]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.445]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.445]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.445]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.445]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.445]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.445]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.445]             base::names(...future.oldOptions))
[10:34:44.445]     }
[10:34:44.445]     if (TRUE) {
[10:34:44.445]     }
[10:34:44.445]     else {
[10:34:44.445]         if (NA) {
[10:34:44.445]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.445]                 open = "w")
[10:34:44.445]         }
[10:34:44.445]         else {
[10:34:44.445]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.445]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.445]         }
[10:34:44.445]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.445]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.445]             base::sink(type = "output", split = FALSE)
[10:34:44.445]             base::close(...future.stdout)
[10:34:44.445]         }, add = TRUE)
[10:34:44.445]     }
[10:34:44.445]     ...future.frame <- base::sys.nframe()
[10:34:44.445]     ...future.conditions <- base::list()
[10:34:44.445]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.445]     if (FALSE) {
[10:34:44.445]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.445]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.445]     }
[10:34:44.445]     ...future.result <- base::tryCatch({
[10:34:44.445]         base::withCallingHandlers({
[10:34:44.445]             ...future.value <- base::withVisible(base::local({
[10:34:44.445]                 withCallingHandlers({
[10:34:44.445]                   {
[10:34:44.445]                     print(1:50)
[10:34:44.445]                     str(1:50)
[10:34:44.445]                     cat(letters, sep = "-")
[10:34:44.445]                     cat(1:6, collapse = "\n")
[10:34:44.445]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.445]                     42L
[10:34:44.445]                   }
[10:34:44.445]                 }, immediateCondition = function(cond) {
[10:34:44.445]                   save_rds <- function (object, pathname, ...) 
[10:34:44.445]                   {
[10:34:44.445]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.445]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.445]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.445]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.445]                         fi_tmp[["mtime"]])
[10:34:44.445]                     }
[10:34:44.445]                     tryCatch({
[10:34:44.445]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.445]                     }, error = function(ex) {
[10:34:44.445]                       msg <- conditionMessage(ex)
[10:34:44.445]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.445]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.445]                         fi_tmp[["mtime"]], msg)
[10:34:44.445]                       ex$message <- msg
[10:34:44.445]                       stop(ex)
[10:34:44.445]                     })
[10:34:44.445]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.445]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.445]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.445]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.445]                       fi <- file.info(pathname)
[10:34:44.445]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.445]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.445]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.445]                         fi[["size"]], fi[["mtime"]])
[10:34:44.445]                       stop(msg)
[10:34:44.445]                     }
[10:34:44.445]                     invisible(pathname)
[10:34:44.445]                   }
[10:34:44.445]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.445]                     rootPath = tempdir()) 
[10:34:44.445]                   {
[10:34:44.445]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.445]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.445]                       tmpdir = path, fileext = ".rds")
[10:34:44.445]                     save_rds(obj, file)
[10:34:44.445]                   }
[10:34:44.445]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.445]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.445]                   {
[10:34:44.445]                     inherits <- base::inherits
[10:34:44.445]                     invokeRestart <- base::invokeRestart
[10:34:44.445]                     is.null <- base::is.null
[10:34:44.445]                     muffled <- FALSE
[10:34:44.445]                     if (inherits(cond, "message")) {
[10:34:44.445]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.445]                       if (muffled) 
[10:34:44.445]                         invokeRestart("muffleMessage")
[10:34:44.445]                     }
[10:34:44.445]                     else if (inherits(cond, "warning")) {
[10:34:44.445]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.445]                       if (muffled) 
[10:34:44.445]                         invokeRestart("muffleWarning")
[10:34:44.445]                     }
[10:34:44.445]                     else if (inherits(cond, "condition")) {
[10:34:44.445]                       if (!is.null(pattern)) {
[10:34:44.445]                         computeRestarts <- base::computeRestarts
[10:34:44.445]                         grepl <- base::grepl
[10:34:44.445]                         restarts <- computeRestarts(cond)
[10:34:44.445]                         for (restart in restarts) {
[10:34:44.445]                           name <- restart$name
[10:34:44.445]                           if (is.null(name)) 
[10:34:44.445]                             next
[10:34:44.445]                           if (!grepl(pattern, name)) 
[10:34:44.445]                             next
[10:34:44.445]                           invokeRestart(restart)
[10:34:44.445]                           muffled <- TRUE
[10:34:44.445]                           break
[10:34:44.445]                         }
[10:34:44.445]                       }
[10:34:44.445]                     }
[10:34:44.445]                     invisible(muffled)
[10:34:44.445]                   }
[10:34:44.445]                   muffleCondition(cond)
[10:34:44.445]                 })
[10:34:44.445]             }))
[10:34:44.445]             future::FutureResult(value = ...future.value$value, 
[10:34:44.445]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.445]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.445]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.445]                     ...future.globalenv.names))
[10:34:44.445]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.445]         }, condition = base::local({
[10:34:44.445]             c <- base::c
[10:34:44.445]             inherits <- base::inherits
[10:34:44.445]             invokeRestart <- base::invokeRestart
[10:34:44.445]             length <- base::length
[10:34:44.445]             list <- base::list
[10:34:44.445]             seq.int <- base::seq.int
[10:34:44.445]             signalCondition <- base::signalCondition
[10:34:44.445]             sys.calls <- base::sys.calls
[10:34:44.445]             `[[` <- base::`[[`
[10:34:44.445]             `+` <- base::`+`
[10:34:44.445]             `<<-` <- base::`<<-`
[10:34:44.445]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.445]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.445]                   3L)]
[10:34:44.445]             }
[10:34:44.445]             function(cond) {
[10:34:44.445]                 is_error <- inherits(cond, "error")
[10:34:44.445]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.445]                   NULL)
[10:34:44.445]                 if (is_error) {
[10:34:44.445]                   sessionInformation <- function() {
[10:34:44.445]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.445]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.445]                       search = base::search(), system = base::Sys.info())
[10:34:44.445]                   }
[10:34:44.445]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.445]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.445]                     cond$call), session = sessionInformation(), 
[10:34:44.445]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.445]                   signalCondition(cond)
[10:34:44.445]                 }
[10:34:44.445]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.445]                 "immediateCondition"))) {
[10:34:44.445]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.445]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.445]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.445]                   if (TRUE && !signal) {
[10:34:44.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.445]                     {
[10:34:44.445]                       inherits <- base::inherits
[10:34:44.445]                       invokeRestart <- base::invokeRestart
[10:34:44.445]                       is.null <- base::is.null
[10:34:44.445]                       muffled <- FALSE
[10:34:44.445]                       if (inherits(cond, "message")) {
[10:34:44.445]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.445]                         if (muffled) 
[10:34:44.445]                           invokeRestart("muffleMessage")
[10:34:44.445]                       }
[10:34:44.445]                       else if (inherits(cond, "warning")) {
[10:34:44.445]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.445]                         if (muffled) 
[10:34:44.445]                           invokeRestart("muffleWarning")
[10:34:44.445]                       }
[10:34:44.445]                       else if (inherits(cond, "condition")) {
[10:34:44.445]                         if (!is.null(pattern)) {
[10:34:44.445]                           computeRestarts <- base::computeRestarts
[10:34:44.445]                           grepl <- base::grepl
[10:34:44.445]                           restarts <- computeRestarts(cond)
[10:34:44.445]                           for (restart in restarts) {
[10:34:44.445]                             name <- restart$name
[10:34:44.445]                             if (is.null(name)) 
[10:34:44.445]                               next
[10:34:44.445]                             if (!grepl(pattern, name)) 
[10:34:44.445]                               next
[10:34:44.445]                             invokeRestart(restart)
[10:34:44.445]                             muffled <- TRUE
[10:34:44.445]                             break
[10:34:44.445]                           }
[10:34:44.445]                         }
[10:34:44.445]                       }
[10:34:44.445]                       invisible(muffled)
[10:34:44.445]                     }
[10:34:44.445]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.445]                   }
[10:34:44.445]                 }
[10:34:44.445]                 else {
[10:34:44.445]                   if (TRUE) {
[10:34:44.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.445]                     {
[10:34:44.445]                       inherits <- base::inherits
[10:34:44.445]                       invokeRestart <- base::invokeRestart
[10:34:44.445]                       is.null <- base::is.null
[10:34:44.445]                       muffled <- FALSE
[10:34:44.445]                       if (inherits(cond, "message")) {
[10:34:44.445]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.445]                         if (muffled) 
[10:34:44.445]                           invokeRestart("muffleMessage")
[10:34:44.445]                       }
[10:34:44.445]                       else if (inherits(cond, "warning")) {
[10:34:44.445]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.445]                         if (muffled) 
[10:34:44.445]                           invokeRestart("muffleWarning")
[10:34:44.445]                       }
[10:34:44.445]                       else if (inherits(cond, "condition")) {
[10:34:44.445]                         if (!is.null(pattern)) {
[10:34:44.445]                           computeRestarts <- base::computeRestarts
[10:34:44.445]                           grepl <- base::grepl
[10:34:44.445]                           restarts <- computeRestarts(cond)
[10:34:44.445]                           for (restart in restarts) {
[10:34:44.445]                             name <- restart$name
[10:34:44.445]                             if (is.null(name)) 
[10:34:44.445]                               next
[10:34:44.445]                             if (!grepl(pattern, name)) 
[10:34:44.445]                               next
[10:34:44.445]                             invokeRestart(restart)
[10:34:44.445]                             muffled <- TRUE
[10:34:44.445]                             break
[10:34:44.445]                           }
[10:34:44.445]                         }
[10:34:44.445]                       }
[10:34:44.445]                       invisible(muffled)
[10:34:44.445]                     }
[10:34:44.445]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.445]                   }
[10:34:44.445]                 }
[10:34:44.445]             }
[10:34:44.445]         }))
[10:34:44.445]     }, error = function(ex) {
[10:34:44.445]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.445]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.445]                 ...future.rng), started = ...future.startTime, 
[10:34:44.445]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.445]             version = "1.8"), class = "FutureResult")
[10:34:44.445]     }, finally = {
[10:34:44.445]         if (!identical(...future.workdir, getwd())) 
[10:34:44.445]             setwd(...future.workdir)
[10:34:44.445]         {
[10:34:44.445]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.445]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.445]             }
[10:34:44.445]             base::options(...future.oldOptions)
[10:34:44.445]             if (.Platform$OS.type == "windows") {
[10:34:44.445]                 old_names <- names(...future.oldEnvVars)
[10:34:44.445]                 envs <- base::Sys.getenv()
[10:34:44.445]                 names <- names(envs)
[10:34:44.445]                 common <- intersect(names, old_names)
[10:34:44.445]                 added <- setdiff(names, old_names)
[10:34:44.445]                 removed <- setdiff(old_names, names)
[10:34:44.445]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.445]                   envs[common]]
[10:34:44.445]                 NAMES <- toupper(changed)
[10:34:44.445]                 args <- list()
[10:34:44.445]                 for (kk in seq_along(NAMES)) {
[10:34:44.445]                   name <- changed[[kk]]
[10:34:44.445]                   NAME <- NAMES[[kk]]
[10:34:44.445]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.445]                     next
[10:34:44.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.445]                 }
[10:34:44.445]                 NAMES <- toupper(added)
[10:34:44.445]                 for (kk in seq_along(NAMES)) {
[10:34:44.445]                   name <- added[[kk]]
[10:34:44.445]                   NAME <- NAMES[[kk]]
[10:34:44.445]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.445]                     next
[10:34:44.445]                   args[[name]] <- ""
[10:34:44.445]                 }
[10:34:44.445]                 NAMES <- toupper(removed)
[10:34:44.445]                 for (kk in seq_along(NAMES)) {
[10:34:44.445]                   name <- removed[[kk]]
[10:34:44.445]                   NAME <- NAMES[[kk]]
[10:34:44.445]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.445]                     next
[10:34:44.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.445]                 }
[10:34:44.445]                 if (length(args) > 0) 
[10:34:44.445]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.445]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.445]             }
[10:34:44.445]             else {
[10:34:44.445]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.445]             }
[10:34:44.445]             {
[10:34:44.445]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.445]                   0L) {
[10:34:44.445]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.445]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.445]                   base::options(opts)
[10:34:44.445]                 }
[10:34:44.445]                 {
[10:34:44.445]                   {
[10:34:44.445]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.445]                     NULL
[10:34:44.445]                   }
[10:34:44.445]                   options(future.plan = NULL)
[10:34:44.445]                   if (is.na(NA_character_)) 
[10:34:44.445]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.445]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.445]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.445]                     .init = FALSE)
[10:34:44.445]                 }
[10:34:44.445]             }
[10:34:44.445]         }
[10:34:44.445]     })
[10:34:44.445]     if (FALSE) {
[10:34:44.445]         base::sink(type = "output", split = FALSE)
[10:34:44.445]         if (NA) {
[10:34:44.445]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.445]         }
[10:34:44.445]         else {
[10:34:44.445]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.445]         }
[10:34:44.445]         base::close(...future.stdout)
[10:34:44.445]         ...future.stdout <- NULL
[10:34:44.445]     }
[10:34:44.445]     ...future.result$conditions <- ...future.conditions
[10:34:44.445]     ...future.result$finished <- base::Sys.time()
[10:34:44.445]     ...future.result
[10:34:44.445] }
[10:34:44.448] requestCore(): workers = 2
[10:34:44.450] MulticoreFuture started
[10:34:44.450] - Launch lazy future ... done
[10:34:44.451] run() for ‘MulticoreFuture’ ... done
[10:34:44.451] result() for MulticoreFuture ...
[10:34:44.452] plan(): Setting new future strategy stack:
[10:34:44.452] List of future strategies:
[10:34:44.452] 1. sequential:
[10:34:44.452]    - args: function (..., envir = parent.frame())
[10:34:44.452]    - tweaked: FALSE
[10:34:44.452]    - call: NULL
[10:34:44.453] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[10:34:44.456] plan(): Setting new future strategy stack:
[10:34:44.456] List of future strategies:
[10:34:44.456] 1. multicore:
[10:34:44.456]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.456]    - tweaked: FALSE
[10:34:44.456]    - call: plan(strategy)
[10:34:44.462] plan(): nbrOfWorkers() = 2
[10:34:44.463] result() for MulticoreFuture ...
[10:34:44.463] result() for MulticoreFuture ... done
[10:34:44.463] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:44"
 $ session_uuid: chr "f0696917-51f7-0030-ad33-614100b3b81d"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90168
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:44"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:44.472] result() for MulticoreFuture ...
[10:34:44.472] result() for MulticoreFuture ... done
[10:34:44.473] result() for MulticoreFuture ...
[10:34:44.473] result() for MulticoreFuture ... done
[10:34:44.473] getGlobalsAndPackages() ...
[10:34:44.473] Searching for globals...
[10:34:44.477] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:44.477] Searching for globals ... DONE
[10:34:44.477] Resolving globals: FALSE
[10:34:44.478] 
[10:34:44.478] - packages: [1] ‘utils’
[10:34:44.478] getGlobalsAndPackages() ... DONE
[10:34:44.479] run() for ‘Future’ ...
[10:34:44.479] - state: ‘created’
[10:34:44.479] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.485] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.486] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.486]   - Field: ‘label’
[10:34:44.486]   - Field: ‘local’
[10:34:44.486]   - Field: ‘owner’
[10:34:44.486]   - Field: ‘envir’
[10:34:44.486]   - Field: ‘workers’
[10:34:44.486]   - Field: ‘packages’
[10:34:44.487]   - Field: ‘gc’
[10:34:44.487]   - Field: ‘job’
[10:34:44.487]   - Field: ‘conditions’
[10:34:44.487]   - Field: ‘expr’
[10:34:44.487]   - Field: ‘uuid’
[10:34:44.487]   - Field: ‘seed’
[10:34:44.487]   - Field: ‘version’
[10:34:44.487]   - Field: ‘result’
[10:34:44.488]   - Field: ‘asynchronous’
[10:34:44.488]   - Field: ‘calls’
[10:34:44.488]   - Field: ‘globals’
[10:34:44.488]   - Field: ‘stdout’
[10:34:44.488]   - Field: ‘earlySignal’
[10:34:44.488]   - Field: ‘lazy’
[10:34:44.488]   - Field: ‘state’
[10:34:44.488] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.489] - Launch lazy future ...
[10:34:44.489] Packages needed by the future expression (n = 1): ‘utils’
[10:34:44.489] Packages needed by future strategies (n = 0): <none>
[10:34:44.490] {
[10:34:44.490]     {
[10:34:44.490]         {
[10:34:44.490]             ...future.startTime <- base::Sys.time()
[10:34:44.490]             {
[10:34:44.490]                 {
[10:34:44.490]                   {
[10:34:44.490]                     {
[10:34:44.490]                       {
[10:34:44.490]                         base::local({
[10:34:44.490]                           has_future <- base::requireNamespace("future", 
[10:34:44.490]                             quietly = TRUE)
[10:34:44.490]                           if (has_future) {
[10:34:44.490]                             ns <- base::getNamespace("future")
[10:34:44.490]                             version <- ns[[".package"]][["version"]]
[10:34:44.490]                             if (is.null(version)) 
[10:34:44.490]                               version <- utils::packageVersion("future")
[10:34:44.490]                           }
[10:34:44.490]                           else {
[10:34:44.490]                             version <- NULL
[10:34:44.490]                           }
[10:34:44.490]                           if (!has_future || version < "1.8.0") {
[10:34:44.490]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.490]                               "", base::R.version$version.string), 
[10:34:44.490]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:44.490]                                 base::R.version$platform, 8 * 
[10:34:44.490]                                   base::.Machine$sizeof.pointer), 
[10:34:44.490]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.490]                                 "release", "version")], collapse = " "), 
[10:34:44.490]                               hostname = base::Sys.info()[["nodename"]])
[10:34:44.490]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.490]                               info)
[10:34:44.490]                             info <- base::paste(info, collapse = "; ")
[10:34:44.490]                             if (!has_future) {
[10:34:44.490]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.490]                                 info)
[10:34:44.490]                             }
[10:34:44.490]                             else {
[10:34:44.490]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.490]                                 info, version)
[10:34:44.490]                             }
[10:34:44.490]                             base::stop(msg)
[10:34:44.490]                           }
[10:34:44.490]                         })
[10:34:44.490]                       }
[10:34:44.490]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.490]                       base::options(mc.cores = 1L)
[10:34:44.490]                     }
[10:34:44.490]                     base::local({
[10:34:44.490]                       for (pkg in "utils") {
[10:34:44.490]                         base::loadNamespace(pkg)
[10:34:44.490]                         base::library(pkg, character.only = TRUE)
[10:34:44.490]                       }
[10:34:44.490]                     })
[10:34:44.490]                   }
[10:34:44.490]                   ...future.strategy.old <- future::plan("list")
[10:34:44.490]                   options(future.plan = NULL)
[10:34:44.490]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.490]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.490]                 }
[10:34:44.490]                 ...future.workdir <- getwd()
[10:34:44.490]             }
[10:34:44.490]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.490]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.490]         }
[10:34:44.490]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.490]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.490]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.490]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.490]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.490]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.490]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.490]             base::names(...future.oldOptions))
[10:34:44.490]     }
[10:34:44.490]     if (TRUE) {
[10:34:44.490]     }
[10:34:44.490]     else {
[10:34:44.490]         if (NA) {
[10:34:44.490]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.490]                 open = "w")
[10:34:44.490]         }
[10:34:44.490]         else {
[10:34:44.490]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.490]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.490]         }
[10:34:44.490]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.490]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.490]             base::sink(type = "output", split = FALSE)
[10:34:44.490]             base::close(...future.stdout)
[10:34:44.490]         }, add = TRUE)
[10:34:44.490]     }
[10:34:44.490]     ...future.frame <- base::sys.nframe()
[10:34:44.490]     ...future.conditions <- base::list()
[10:34:44.490]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.490]     if (FALSE) {
[10:34:44.490]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.490]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.490]     }
[10:34:44.490]     ...future.result <- base::tryCatch({
[10:34:44.490]         base::withCallingHandlers({
[10:34:44.490]             ...future.value <- base::withVisible(base::local({
[10:34:44.490]                 withCallingHandlers({
[10:34:44.490]                   {
[10:34:44.490]                     print(1:50)
[10:34:44.490]                     str(1:50)
[10:34:44.490]                     cat(letters, sep = "-")
[10:34:44.490]                     cat(1:6, collapse = "\n")
[10:34:44.490]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:44.490]                     42L
[10:34:44.490]                   }
[10:34:44.490]                 }, immediateCondition = function(cond) {
[10:34:44.490]                   save_rds <- function (object, pathname, ...) 
[10:34:44.490]                   {
[10:34:44.490]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.490]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.490]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.490]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.490]                         fi_tmp[["mtime"]])
[10:34:44.490]                     }
[10:34:44.490]                     tryCatch({
[10:34:44.490]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.490]                     }, error = function(ex) {
[10:34:44.490]                       msg <- conditionMessage(ex)
[10:34:44.490]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.490]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.490]                         fi_tmp[["mtime"]], msg)
[10:34:44.490]                       ex$message <- msg
[10:34:44.490]                       stop(ex)
[10:34:44.490]                     })
[10:34:44.490]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.490]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.490]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.490]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.490]                       fi <- file.info(pathname)
[10:34:44.490]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.490]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.490]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.490]                         fi[["size"]], fi[["mtime"]])
[10:34:44.490]                       stop(msg)
[10:34:44.490]                     }
[10:34:44.490]                     invisible(pathname)
[10:34:44.490]                   }
[10:34:44.490]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.490]                     rootPath = tempdir()) 
[10:34:44.490]                   {
[10:34:44.490]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.490]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.490]                       tmpdir = path, fileext = ".rds")
[10:34:44.490]                     save_rds(obj, file)
[10:34:44.490]                   }
[10:34:44.490]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.490]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.490]                   {
[10:34:44.490]                     inherits <- base::inherits
[10:34:44.490]                     invokeRestart <- base::invokeRestart
[10:34:44.490]                     is.null <- base::is.null
[10:34:44.490]                     muffled <- FALSE
[10:34:44.490]                     if (inherits(cond, "message")) {
[10:34:44.490]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.490]                       if (muffled) 
[10:34:44.490]                         invokeRestart("muffleMessage")
[10:34:44.490]                     }
[10:34:44.490]                     else if (inherits(cond, "warning")) {
[10:34:44.490]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.490]                       if (muffled) 
[10:34:44.490]                         invokeRestart("muffleWarning")
[10:34:44.490]                     }
[10:34:44.490]                     else if (inherits(cond, "condition")) {
[10:34:44.490]                       if (!is.null(pattern)) {
[10:34:44.490]                         computeRestarts <- base::computeRestarts
[10:34:44.490]                         grepl <- base::grepl
[10:34:44.490]                         restarts <- computeRestarts(cond)
[10:34:44.490]                         for (restart in restarts) {
[10:34:44.490]                           name <- restart$name
[10:34:44.490]                           if (is.null(name)) 
[10:34:44.490]                             next
[10:34:44.490]                           if (!grepl(pattern, name)) 
[10:34:44.490]                             next
[10:34:44.490]                           invokeRestart(restart)
[10:34:44.490]                           muffled <- TRUE
[10:34:44.490]                           break
[10:34:44.490]                         }
[10:34:44.490]                       }
[10:34:44.490]                     }
[10:34:44.490]                     invisible(muffled)
[10:34:44.490]                   }
[10:34:44.490]                   muffleCondition(cond)
[10:34:44.490]                 })
[10:34:44.490]             }))
[10:34:44.490]             future::FutureResult(value = ...future.value$value, 
[10:34:44.490]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.490]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.490]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.490]                     ...future.globalenv.names))
[10:34:44.490]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.490]         }, condition = base::local({
[10:34:44.490]             c <- base::c
[10:34:44.490]             inherits <- base::inherits
[10:34:44.490]             invokeRestart <- base::invokeRestart
[10:34:44.490]             length <- base::length
[10:34:44.490]             list <- base::list
[10:34:44.490]             seq.int <- base::seq.int
[10:34:44.490]             signalCondition <- base::signalCondition
[10:34:44.490]             sys.calls <- base::sys.calls
[10:34:44.490]             `[[` <- base::`[[`
[10:34:44.490]             `+` <- base::`+`
[10:34:44.490]             `<<-` <- base::`<<-`
[10:34:44.490]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.490]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.490]                   3L)]
[10:34:44.490]             }
[10:34:44.490]             function(cond) {
[10:34:44.490]                 is_error <- inherits(cond, "error")
[10:34:44.490]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.490]                   NULL)
[10:34:44.490]                 if (is_error) {
[10:34:44.490]                   sessionInformation <- function() {
[10:34:44.490]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.490]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.490]                       search = base::search(), system = base::Sys.info())
[10:34:44.490]                   }
[10:34:44.490]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.490]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.490]                     cond$call), session = sessionInformation(), 
[10:34:44.490]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.490]                   signalCondition(cond)
[10:34:44.490]                 }
[10:34:44.490]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.490]                 "immediateCondition"))) {
[10:34:44.490]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.490]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.490]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.490]                   if (TRUE && !signal) {
[10:34:44.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.490]                     {
[10:34:44.490]                       inherits <- base::inherits
[10:34:44.490]                       invokeRestart <- base::invokeRestart
[10:34:44.490]                       is.null <- base::is.null
[10:34:44.490]                       muffled <- FALSE
[10:34:44.490]                       if (inherits(cond, "message")) {
[10:34:44.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.490]                         if (muffled) 
[10:34:44.490]                           invokeRestart("muffleMessage")
[10:34:44.490]                       }
[10:34:44.490]                       else if (inherits(cond, "warning")) {
[10:34:44.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.490]                         if (muffled) 
[10:34:44.490]                           invokeRestart("muffleWarning")
[10:34:44.490]                       }
[10:34:44.490]                       else if (inherits(cond, "condition")) {
[10:34:44.490]                         if (!is.null(pattern)) {
[10:34:44.490]                           computeRestarts <- base::computeRestarts
[10:34:44.490]                           grepl <- base::grepl
[10:34:44.490]                           restarts <- computeRestarts(cond)
[10:34:44.490]                           for (restart in restarts) {
[10:34:44.490]                             name <- restart$name
[10:34:44.490]                             if (is.null(name)) 
[10:34:44.490]                               next
[10:34:44.490]                             if (!grepl(pattern, name)) 
[10:34:44.490]                               next
[10:34:44.490]                             invokeRestart(restart)
[10:34:44.490]                             muffled <- TRUE
[10:34:44.490]                             break
[10:34:44.490]                           }
[10:34:44.490]                         }
[10:34:44.490]                       }
[10:34:44.490]                       invisible(muffled)
[10:34:44.490]                     }
[10:34:44.490]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.490]                   }
[10:34:44.490]                 }
[10:34:44.490]                 else {
[10:34:44.490]                   if (TRUE) {
[10:34:44.490]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.490]                     {
[10:34:44.490]                       inherits <- base::inherits
[10:34:44.490]                       invokeRestart <- base::invokeRestart
[10:34:44.490]                       is.null <- base::is.null
[10:34:44.490]                       muffled <- FALSE
[10:34:44.490]                       if (inherits(cond, "message")) {
[10:34:44.490]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.490]                         if (muffled) 
[10:34:44.490]                           invokeRestart("muffleMessage")
[10:34:44.490]                       }
[10:34:44.490]                       else if (inherits(cond, "warning")) {
[10:34:44.490]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.490]                         if (muffled) 
[10:34:44.490]                           invokeRestart("muffleWarning")
[10:34:44.490]                       }
[10:34:44.490]                       else if (inherits(cond, "condition")) {
[10:34:44.490]                         if (!is.null(pattern)) {
[10:34:44.490]                           computeRestarts <- base::computeRestarts
[10:34:44.490]                           grepl <- base::grepl
[10:34:44.490]                           restarts <- computeRestarts(cond)
[10:34:44.490]                           for (restart in restarts) {
[10:34:44.490]                             name <- restart$name
[10:34:44.490]                             if (is.null(name)) 
[10:34:44.490]                               next
[10:34:44.490]                             if (!grepl(pattern, name)) 
[10:34:44.490]                               next
[10:34:44.490]                             invokeRestart(restart)
[10:34:44.490]                             muffled <- TRUE
[10:34:44.490]                             break
[10:34:44.490]                           }
[10:34:44.490]                         }
[10:34:44.490]                       }
[10:34:44.490]                       invisible(muffled)
[10:34:44.490]                     }
[10:34:44.490]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.490]                   }
[10:34:44.490]                 }
[10:34:44.490]             }
[10:34:44.490]         }))
[10:34:44.490]     }, error = function(ex) {
[10:34:44.490]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.490]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.490]                 ...future.rng), started = ...future.startTime, 
[10:34:44.490]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.490]             version = "1.8"), class = "FutureResult")
[10:34:44.490]     }, finally = {
[10:34:44.490]         if (!identical(...future.workdir, getwd())) 
[10:34:44.490]             setwd(...future.workdir)
[10:34:44.490]         {
[10:34:44.490]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.490]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.490]             }
[10:34:44.490]             base::options(...future.oldOptions)
[10:34:44.490]             if (.Platform$OS.type == "windows") {
[10:34:44.490]                 old_names <- names(...future.oldEnvVars)
[10:34:44.490]                 envs <- base::Sys.getenv()
[10:34:44.490]                 names <- names(envs)
[10:34:44.490]                 common <- intersect(names, old_names)
[10:34:44.490]                 added <- setdiff(names, old_names)
[10:34:44.490]                 removed <- setdiff(old_names, names)
[10:34:44.490]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.490]                   envs[common]]
[10:34:44.490]                 NAMES <- toupper(changed)
[10:34:44.490]                 args <- list()
[10:34:44.490]                 for (kk in seq_along(NAMES)) {
[10:34:44.490]                   name <- changed[[kk]]
[10:34:44.490]                   NAME <- NAMES[[kk]]
[10:34:44.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.490]                     next
[10:34:44.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.490]                 }
[10:34:44.490]                 NAMES <- toupper(added)
[10:34:44.490]                 for (kk in seq_along(NAMES)) {
[10:34:44.490]                   name <- added[[kk]]
[10:34:44.490]                   NAME <- NAMES[[kk]]
[10:34:44.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.490]                     next
[10:34:44.490]                   args[[name]] <- ""
[10:34:44.490]                 }
[10:34:44.490]                 NAMES <- toupper(removed)
[10:34:44.490]                 for (kk in seq_along(NAMES)) {
[10:34:44.490]                   name <- removed[[kk]]
[10:34:44.490]                   NAME <- NAMES[[kk]]
[10:34:44.490]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.490]                     next
[10:34:44.490]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.490]                 }
[10:34:44.490]                 if (length(args) > 0) 
[10:34:44.490]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.490]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.490]             }
[10:34:44.490]             else {
[10:34:44.490]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.490]             }
[10:34:44.490]             {
[10:34:44.490]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.490]                   0L) {
[10:34:44.490]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.490]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.490]                   base::options(opts)
[10:34:44.490]                 }
[10:34:44.490]                 {
[10:34:44.490]                   {
[10:34:44.490]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.490]                     NULL
[10:34:44.490]                   }
[10:34:44.490]                   options(future.plan = NULL)
[10:34:44.490]                   if (is.na(NA_character_)) 
[10:34:44.490]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.490]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.490]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.490]                     .init = FALSE)
[10:34:44.490]                 }
[10:34:44.490]             }
[10:34:44.490]         }
[10:34:44.490]     })
[10:34:44.490]     if (FALSE) {
[10:34:44.490]         base::sink(type = "output", split = FALSE)
[10:34:44.490]         if (NA) {
[10:34:44.490]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.490]         }
[10:34:44.490]         else {
[10:34:44.490]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.490]         }
[10:34:44.490]         base::close(...future.stdout)
[10:34:44.490]         ...future.stdout <- NULL
[10:34:44.490]     }
[10:34:44.490]     ...future.result$conditions <- ...future.conditions
[10:34:44.490]     ...future.result$finished <- base::Sys.time()
[10:34:44.490]     ...future.result
[10:34:44.490] }
[10:34:44.492] requestCore(): workers = 2
[10:34:44.494] MulticoreFuture started
[10:34:44.494] - Launch lazy future ... done
[10:34:44.494] run() for ‘MulticoreFuture’ ... done
[10:34:44.495] result() for MulticoreFuture ...
[10:34:44.495] plan(): Setting new future strategy stack:
[10:34:44.496] List of future strategies:
[10:34:44.496] 1. sequential:
[10:34:44.496]    - args: function (..., envir = parent.frame())
[10:34:44.496]    - tweaked: FALSE
[10:34:44.496]    - call: NULL
[10:34:44.496] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[10:34:44.500] plan(): Setting new future strategy stack:
[10:34:44.500] List of future strategies:
[10:34:44.500] 1. multicore:
[10:34:44.500]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.500]    - tweaked: FALSE
[10:34:44.500]    - call: plan(strategy)
[10:34:44.505] plan(): nbrOfWorkers() = 2
[10:34:44.506] result() for MulticoreFuture ...
[10:34:44.506] result() for MulticoreFuture ... done
[10:34:44.506] result() for MulticoreFuture ... done
[10:34:44.506] result() for MulticoreFuture ...
[10:34:44.506] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:44.507] getGlobalsAndPackages() ...
[10:34:44.507] Searching for globals...
[10:34:44.508] - globals found: [1] ‘print’
[10:34:44.508] Searching for globals ... DONE
[10:34:44.508] Resolving globals: FALSE
[10:34:44.508] 
[10:34:44.508] 
[10:34:44.509] getGlobalsAndPackages() ... DONE
[10:34:44.509] run() for ‘Future’ ...
[10:34:44.509] - state: ‘created’
[10:34:44.509] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:34:44.513] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:44.513] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:34:44.514]   - Field: ‘label’
[10:34:44.514]   - Field: ‘local’
[10:34:44.514]   - Field: ‘owner’
[10:34:44.514]   - Field: ‘envir’
[10:34:44.514]   - Field: ‘workers’
[10:34:44.514]   - Field: ‘packages’
[10:34:44.514]   - Field: ‘gc’
[10:34:44.514]   - Field: ‘job’
[10:34:44.515]   - Field: ‘conditions’
[10:34:44.515]   - Field: ‘expr’
[10:34:44.515]   - Field: ‘uuid’
[10:34:44.515]   - Field: ‘seed’
[10:34:44.515]   - Field: ‘version’
[10:34:44.515]   - Field: ‘result’
[10:34:44.515]   - Field: ‘asynchronous’
[10:34:44.515]   - Field: ‘calls’
[10:34:44.515]   - Field: ‘globals’
[10:34:44.516]   - Field: ‘stdout’
[10:34:44.516]   - Field: ‘earlySignal’
[10:34:44.516]   - Field: ‘lazy’
[10:34:44.516]   - Field: ‘state’
[10:34:44.516] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:34:44.516] - Launch lazy future ...
[10:34:44.516] Packages needed by the future expression (n = 0): <none>
[10:34:44.517] Packages needed by future strategies (n = 0): <none>
[10:34:44.517] {
[10:34:44.517]     {
[10:34:44.517]         {
[10:34:44.517]             ...future.startTime <- base::Sys.time()
[10:34:44.517]             {
[10:34:44.517]                 {
[10:34:44.517]                   {
[10:34:44.517]                     {
[10:34:44.517]                       base::local({
[10:34:44.517]                         has_future <- base::requireNamespace("future", 
[10:34:44.517]                           quietly = TRUE)
[10:34:44.517]                         if (has_future) {
[10:34:44.517]                           ns <- base::getNamespace("future")
[10:34:44.517]                           version <- ns[[".package"]][["version"]]
[10:34:44.517]                           if (is.null(version)) 
[10:34:44.517]                             version <- utils::packageVersion("future")
[10:34:44.517]                         }
[10:34:44.517]                         else {
[10:34:44.517]                           version <- NULL
[10:34:44.517]                         }
[10:34:44.517]                         if (!has_future || version < "1.8.0") {
[10:34:44.517]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:44.517]                             "", base::R.version$version.string), 
[10:34:44.517]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:44.517]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:44.517]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:44.517]                               "release", "version")], collapse = " "), 
[10:34:44.517]                             hostname = base::Sys.info()[["nodename"]])
[10:34:44.517]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:44.517]                             info)
[10:34:44.517]                           info <- base::paste(info, collapse = "; ")
[10:34:44.517]                           if (!has_future) {
[10:34:44.517]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:44.517]                               info)
[10:34:44.517]                           }
[10:34:44.517]                           else {
[10:34:44.517]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:44.517]                               info, version)
[10:34:44.517]                           }
[10:34:44.517]                           base::stop(msg)
[10:34:44.517]                         }
[10:34:44.517]                       })
[10:34:44.517]                     }
[10:34:44.517]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:44.517]                     base::options(mc.cores = 1L)
[10:34:44.517]                   }
[10:34:44.517]                   ...future.strategy.old <- future::plan("list")
[10:34:44.517]                   options(future.plan = NULL)
[10:34:44.517]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.517]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:44.517]                 }
[10:34:44.517]                 ...future.workdir <- getwd()
[10:34:44.517]             }
[10:34:44.517]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:44.517]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:44.517]         }
[10:34:44.517]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:44.517]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:44.517]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:44.517]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:44.517]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:44.517]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:44.517]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:44.517]             base::names(...future.oldOptions))
[10:34:44.517]     }
[10:34:44.517]     if (FALSE) {
[10:34:44.517]     }
[10:34:44.517]     else {
[10:34:44.517]         if (TRUE) {
[10:34:44.517]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:44.517]                 open = "w")
[10:34:44.517]         }
[10:34:44.517]         else {
[10:34:44.517]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:44.517]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:44.517]         }
[10:34:44.517]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:44.517]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:44.517]             base::sink(type = "output", split = FALSE)
[10:34:44.517]             base::close(...future.stdout)
[10:34:44.517]         }, add = TRUE)
[10:34:44.517]     }
[10:34:44.517]     ...future.frame <- base::sys.nframe()
[10:34:44.517]     ...future.conditions <- base::list()
[10:34:44.517]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:44.517]     if (FALSE) {
[10:34:44.517]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:44.517]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:44.517]     }
[10:34:44.517]     ...future.result <- base::tryCatch({
[10:34:44.517]         base::withCallingHandlers({
[10:34:44.517]             ...future.value <- base::withVisible(base::local({
[10:34:44.517]                 withCallingHandlers({
[10:34:44.517]                   print(42)
[10:34:44.517]                 }, immediateCondition = function(cond) {
[10:34:44.517]                   save_rds <- function (object, pathname, ...) 
[10:34:44.517]                   {
[10:34:44.517]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:34:44.517]                     if (file_test("-f", pathname_tmp)) {
[10:34:44.517]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.517]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:34:44.517]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.517]                         fi_tmp[["mtime"]])
[10:34:44.517]                     }
[10:34:44.517]                     tryCatch({
[10:34:44.517]                       saveRDS(object, file = pathname_tmp, ...)
[10:34:44.517]                     }, error = function(ex) {
[10:34:44.517]                       msg <- conditionMessage(ex)
[10:34:44.517]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.517]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:34:44.517]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.517]                         fi_tmp[["mtime"]], msg)
[10:34:44.517]                       ex$message <- msg
[10:34:44.517]                       stop(ex)
[10:34:44.517]                     })
[10:34:44.517]                     stopifnot(file_test("-f", pathname_tmp))
[10:34:44.517]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:34:44.517]                     if (!res || file_test("-f", pathname_tmp)) {
[10:34:44.517]                       fi_tmp <- file.info(pathname_tmp)
[10:34:44.517]                       fi <- file.info(pathname)
[10:34:44.517]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:34:44.517]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:34:44.517]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:34:44.517]                         fi[["size"]], fi[["mtime"]])
[10:34:44.517]                       stop(msg)
[10:34:44.517]                     }
[10:34:44.517]                     invisible(pathname)
[10:34:44.517]                   }
[10:34:44.517]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:34:44.517]                     rootPath = tempdir()) 
[10:34:44.517]                   {
[10:34:44.517]                     obj <- list(time = Sys.time(), condition = cond)
[10:34:44.517]                     file <- tempfile(pattern = class(cond)[1], 
[10:34:44.517]                       tmpdir = path, fileext = ".rds")
[10:34:44.517]                     save_rds(obj, file)
[10:34:44.517]                   }
[10:34:44.517]                   saveImmediateCondition(cond, path = "/tmp/RtmpVtULJl/.future/immediateConditions")
[10:34:44.517]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.517]                   {
[10:34:44.517]                     inherits <- base::inherits
[10:34:44.517]                     invokeRestart <- base::invokeRestart
[10:34:44.517]                     is.null <- base::is.null
[10:34:44.517]                     muffled <- FALSE
[10:34:44.517]                     if (inherits(cond, "message")) {
[10:34:44.517]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:44.517]                       if (muffled) 
[10:34:44.517]                         invokeRestart("muffleMessage")
[10:34:44.517]                     }
[10:34:44.517]                     else if (inherits(cond, "warning")) {
[10:34:44.517]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:44.517]                       if (muffled) 
[10:34:44.517]                         invokeRestart("muffleWarning")
[10:34:44.517]                     }
[10:34:44.517]                     else if (inherits(cond, "condition")) {
[10:34:44.517]                       if (!is.null(pattern)) {
[10:34:44.517]                         computeRestarts <- base::computeRestarts
[10:34:44.517]                         grepl <- base::grepl
[10:34:44.517]                         restarts <- computeRestarts(cond)
[10:34:44.517]                         for (restart in restarts) {
[10:34:44.517]                           name <- restart$name
[10:34:44.517]                           if (is.null(name)) 
[10:34:44.517]                             next
[10:34:44.517]                           if (!grepl(pattern, name)) 
[10:34:44.517]                             next
[10:34:44.517]                           invokeRestart(restart)
[10:34:44.517]                           muffled <- TRUE
[10:34:44.517]                           break
[10:34:44.517]                         }
[10:34:44.517]                       }
[10:34:44.517]                     }
[10:34:44.517]                     invisible(muffled)
[10:34:44.517]                   }
[10:34:44.517]                   muffleCondition(cond)
[10:34:44.517]                 })
[10:34:44.517]             }))
[10:34:44.517]             future::FutureResult(value = ...future.value$value, 
[10:34:44.517]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.517]                   ...future.rng), globalenv = if (FALSE) 
[10:34:44.517]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:44.517]                     ...future.globalenv.names))
[10:34:44.517]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:44.517]         }, condition = base::local({
[10:34:44.517]             c <- base::c
[10:34:44.517]             inherits <- base::inherits
[10:34:44.517]             invokeRestart <- base::invokeRestart
[10:34:44.517]             length <- base::length
[10:34:44.517]             list <- base::list
[10:34:44.517]             seq.int <- base::seq.int
[10:34:44.517]             signalCondition <- base::signalCondition
[10:34:44.517]             sys.calls <- base::sys.calls
[10:34:44.517]             `[[` <- base::`[[`
[10:34:44.517]             `+` <- base::`+`
[10:34:44.517]             `<<-` <- base::`<<-`
[10:34:44.517]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:44.517]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:44.517]                   3L)]
[10:34:44.517]             }
[10:34:44.517]             function(cond) {
[10:34:44.517]                 is_error <- inherits(cond, "error")
[10:34:44.517]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:44.517]                   NULL)
[10:34:44.517]                 if (is_error) {
[10:34:44.517]                   sessionInformation <- function() {
[10:34:44.517]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:44.517]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:44.517]                       search = base::search(), system = base::Sys.info())
[10:34:44.517]                   }
[10:34:44.517]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.517]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:44.517]                     cond$call), session = sessionInformation(), 
[10:34:44.517]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:44.517]                   signalCondition(cond)
[10:34:44.517]                 }
[10:34:44.517]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:44.517]                 "immediateCondition"))) {
[10:34:44.517]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:44.517]                   ...future.conditions[[length(...future.conditions) + 
[10:34:44.517]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:44.517]                   if (TRUE && !signal) {
[10:34:44.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.517]                     {
[10:34:44.517]                       inherits <- base::inherits
[10:34:44.517]                       invokeRestart <- base::invokeRestart
[10:34:44.517]                       is.null <- base::is.null
[10:34:44.517]                       muffled <- FALSE
[10:34:44.517]                       if (inherits(cond, "message")) {
[10:34:44.517]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.517]                         if (muffled) 
[10:34:44.517]                           invokeRestart("muffleMessage")
[10:34:44.517]                       }
[10:34:44.517]                       else if (inherits(cond, "warning")) {
[10:34:44.517]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.517]                         if (muffled) 
[10:34:44.517]                           invokeRestart("muffleWarning")
[10:34:44.517]                       }
[10:34:44.517]                       else if (inherits(cond, "condition")) {
[10:34:44.517]                         if (!is.null(pattern)) {
[10:34:44.517]                           computeRestarts <- base::computeRestarts
[10:34:44.517]                           grepl <- base::grepl
[10:34:44.517]                           restarts <- computeRestarts(cond)
[10:34:44.517]                           for (restart in restarts) {
[10:34:44.517]                             name <- restart$name
[10:34:44.517]                             if (is.null(name)) 
[10:34:44.517]                               next
[10:34:44.517]                             if (!grepl(pattern, name)) 
[10:34:44.517]                               next
[10:34:44.517]                             invokeRestart(restart)
[10:34:44.517]                             muffled <- TRUE
[10:34:44.517]                             break
[10:34:44.517]                           }
[10:34:44.517]                         }
[10:34:44.517]                       }
[10:34:44.517]                       invisible(muffled)
[10:34:44.517]                     }
[10:34:44.517]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.517]                   }
[10:34:44.517]                 }
[10:34:44.517]                 else {
[10:34:44.517]                   if (TRUE) {
[10:34:44.517]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:44.517]                     {
[10:34:44.517]                       inherits <- base::inherits
[10:34:44.517]                       invokeRestart <- base::invokeRestart
[10:34:44.517]                       is.null <- base::is.null
[10:34:44.517]                       muffled <- FALSE
[10:34:44.517]                       if (inherits(cond, "message")) {
[10:34:44.517]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:44.517]                         if (muffled) 
[10:34:44.517]                           invokeRestart("muffleMessage")
[10:34:44.517]                       }
[10:34:44.517]                       else if (inherits(cond, "warning")) {
[10:34:44.517]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:44.517]                         if (muffled) 
[10:34:44.517]                           invokeRestart("muffleWarning")
[10:34:44.517]                       }
[10:34:44.517]                       else if (inherits(cond, "condition")) {
[10:34:44.517]                         if (!is.null(pattern)) {
[10:34:44.517]                           computeRestarts <- base::computeRestarts
[10:34:44.517]                           grepl <- base::grepl
[10:34:44.517]                           restarts <- computeRestarts(cond)
[10:34:44.517]                           for (restart in restarts) {
[10:34:44.517]                             name <- restart$name
[10:34:44.517]                             if (is.null(name)) 
[10:34:44.517]                               next
[10:34:44.517]                             if (!grepl(pattern, name)) 
[10:34:44.517]                               next
[10:34:44.517]                             invokeRestart(restart)
[10:34:44.517]                             muffled <- TRUE
[10:34:44.517]                             break
[10:34:44.517]                           }
[10:34:44.517]                         }
[10:34:44.517]                       }
[10:34:44.517]                       invisible(muffled)
[10:34:44.517]                     }
[10:34:44.517]                     muffleCondition(cond, pattern = "^muffle")
[10:34:44.517]                   }
[10:34:44.517]                 }
[10:34:44.517]             }
[10:34:44.517]         }))
[10:34:44.517]     }, error = function(ex) {
[10:34:44.517]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:44.517]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:44.517]                 ...future.rng), started = ...future.startTime, 
[10:34:44.517]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:44.517]             version = "1.8"), class = "FutureResult")
[10:34:44.517]     }, finally = {
[10:34:44.517]         if (!identical(...future.workdir, getwd())) 
[10:34:44.517]             setwd(...future.workdir)
[10:34:44.517]         {
[10:34:44.517]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:44.517]                 ...future.oldOptions$nwarnings <- NULL
[10:34:44.517]             }
[10:34:44.517]             base::options(...future.oldOptions)
[10:34:44.517]             if (.Platform$OS.type == "windows") {
[10:34:44.517]                 old_names <- names(...future.oldEnvVars)
[10:34:44.517]                 envs <- base::Sys.getenv()
[10:34:44.517]                 names <- names(envs)
[10:34:44.517]                 common <- intersect(names, old_names)
[10:34:44.517]                 added <- setdiff(names, old_names)
[10:34:44.517]                 removed <- setdiff(old_names, names)
[10:34:44.517]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:44.517]                   envs[common]]
[10:34:44.517]                 NAMES <- toupper(changed)
[10:34:44.517]                 args <- list()
[10:34:44.517]                 for (kk in seq_along(NAMES)) {
[10:34:44.517]                   name <- changed[[kk]]
[10:34:44.517]                   NAME <- NAMES[[kk]]
[10:34:44.517]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.517]                     next
[10:34:44.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.517]                 }
[10:34:44.517]                 NAMES <- toupper(added)
[10:34:44.517]                 for (kk in seq_along(NAMES)) {
[10:34:44.517]                   name <- added[[kk]]
[10:34:44.517]                   NAME <- NAMES[[kk]]
[10:34:44.517]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.517]                     next
[10:34:44.517]                   args[[name]] <- ""
[10:34:44.517]                 }
[10:34:44.517]                 NAMES <- toupper(removed)
[10:34:44.517]                 for (kk in seq_along(NAMES)) {
[10:34:44.517]                   name <- removed[[kk]]
[10:34:44.517]                   NAME <- NAMES[[kk]]
[10:34:44.517]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:44.517]                     next
[10:34:44.517]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:44.517]                 }
[10:34:44.517]                 if (length(args) > 0) 
[10:34:44.517]                   base::do.call(base::Sys.setenv, args = args)
[10:34:44.517]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:44.517]             }
[10:34:44.517]             else {
[10:34:44.517]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:44.517]             }
[10:34:44.517]             {
[10:34:44.517]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:44.517]                   0L) {
[10:34:44.517]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:44.517]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:44.517]                   base::options(opts)
[10:34:44.517]                 }
[10:34:44.517]                 {
[10:34:44.517]                   {
[10:34:44.517]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:44.517]                     NULL
[10:34:44.517]                   }
[10:34:44.517]                   options(future.plan = NULL)
[10:34:44.517]                   if (is.na(NA_character_)) 
[10:34:44.517]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:44.517]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:44.517]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:44.517]                     .init = FALSE)
[10:34:44.517]                 }
[10:34:44.517]             }
[10:34:44.517]         }
[10:34:44.517]     })
[10:34:44.517]     if (TRUE) {
[10:34:44.517]         base::sink(type = "output", split = FALSE)
[10:34:44.517]         if (TRUE) {
[10:34:44.517]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:44.517]         }
[10:34:44.517]         else {
[10:34:44.517]             ...future.result["stdout"] <- base::list(NULL)
[10:34:44.517]         }
[10:34:44.517]         base::close(...future.stdout)
[10:34:44.517]         ...future.stdout <- NULL
[10:34:44.517]     }
[10:34:44.517]     ...future.result$conditions <- ...future.conditions
[10:34:44.517]     ...future.result$finished <- base::Sys.time()
[10:34:44.517]     ...future.result
[10:34:44.517] }
[10:34:44.520] requestCore(): workers = 2
[10:34:44.522] MulticoreFuture started
[10:34:44.522] - Launch lazy future ... done
[10:34:44.522] run() for ‘MulticoreFuture’ ... done
[10:34:44.522] result() for MulticoreFuture ...
[10:34:44.523] plan(): Setting new future strategy stack:
[10:34:44.523] List of future strategies:
[10:34:44.523] 1. sequential:
[10:34:44.523]    - args: function (..., envir = parent.frame())
[10:34:44.523]    - tweaked: FALSE
[10:34:44.523]    - call: NULL
[10:34:44.524] plan(): nbrOfWorkers() = 1
[10:34:44.526] plan(): Setting new future strategy stack:
[10:34:44.526] List of future strategies:
[10:34:44.526] 1. multicore:
[10:34:44.526]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:34:44.526]    - tweaked: FALSE
[10:34:44.526]    - call: plan(strategy)
[10:34:44.531] plan(): nbrOfWorkers() = 2
[10:34:44.532] result() for MulticoreFuture ...
[10:34:44.532] result() for MulticoreFuture ... done
[10:34:44.532] result() for MulticoreFuture ... done
[10:34:44.532] result() for MulticoreFuture ...
[10:34:44.532] result() for MulticoreFuture ... done
[10:34:44.532] result() for MulticoreFuture ...
[10:34:44.532] result() for MulticoreFuture ... done
[1] 42
[10:34:44.533] result() for MulticoreFuture ...
[10:34:44.533] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[10:34:44.533] plan(): Setting new future strategy stack:
[10:34:44.534] List of future strategies:
[10:34:44.534] 1. multisession:
[10:34:44.534]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:44.534]    - tweaked: FALSE
[10:34:44.534]    - call: plan(strategy)
[10:34:44.534] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:34:44.534] multisession:
[10:34:44.534] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:34:44.534] - tweaked: FALSE
[10:34:44.534] - call: plan(strategy)
[10:34:44.541] getGlobalsAndPackages() ...
[10:34:44.541] Not searching for globals
[10:34:44.542] - globals: [0] <none>
[10:34:44.542] getGlobalsAndPackages() ... DONE
[10:34:44.542] [local output] makeClusterPSOCK() ...
[10:34:44.586] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:34:44.588] [local output] Base port: 11312
[10:34:44.588] [local output] Getting setup options for 2 cluster nodes ...
[10:34:44.588] [local output]  - Node 1 of 2 ...
[10:34:44.588] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:44.589] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtULJl/worker.rank=1.parallelly.parent=90114.160025563834e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpVtULJl/worker.rank=1.parallelly.parent=90114.160025563834e.pid")'’
[10:34:44.776] - Possible to infer worker's PID: TRUE
[10:34:44.777] [local output] Rscript port: 11312

[10:34:44.777] [local output]  - Node 2 of 2 ...
[10:34:44.778] [local output] localMachine=TRUE => revtunnel=FALSE

[10:34:44.778] [local output] Rscript port: 11312

[10:34:44.779] [local output] Getting setup options for 2 cluster nodes ... done
[10:34:44.779] [local output]  - Parallel setup requested for some PSOCK nodes
[10:34:44.779] [local output] Setting up PSOCK nodes in parallel
[10:34:44.780] List of 36
[10:34:44.780]  $ worker          : chr "localhost"
[10:34:44.780]   ..- attr(*, "localhost")= logi TRUE
[10:34:44.780]  $ master          : chr "localhost"
[10:34:44.780]  $ port            : int 11312
[10:34:44.780]  $ connectTimeout  : num 120
[10:34:44.780]  $ timeout         : num 2592000
[10:34:44.780]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:34:44.780]  $ homogeneous     : logi TRUE
[10:34:44.780]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:34:44.780]  $ rscript_envs    : NULL
[10:34:44.780]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:44.780]  $ rscript_startup : NULL
[10:34:44.780]  $ rscript_sh      : chr "sh"
[10:34:44.780]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:44.780]  $ methods         : logi TRUE
[10:34:44.780]  $ socketOptions   : chr "no-delay"
[10:34:44.780]  $ useXDR          : logi FALSE
[10:34:44.780]  $ outfile         : chr "/dev/null"
[10:34:44.780]  $ renice          : int NA
[10:34:44.780]  $ rshcmd          : NULL
[10:34:44.780]  $ user            : chr(0) 
[10:34:44.780]  $ revtunnel       : logi FALSE
[10:34:44.780]  $ rshlogfile      : NULL
[10:34:44.780]  $ rshopts         : chr(0) 
[10:34:44.780]  $ rank            : int 1
[10:34:44.780]  $ manual          : logi FALSE
[10:34:44.780]  $ dryrun          : logi FALSE
[10:34:44.780]  $ quiet           : logi FALSE
[10:34:44.780]  $ setup_strategy  : chr "parallel"
[10:34:44.780]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:44.780]  $ pidfile         : chr "/tmp/RtmpVtULJl/worker.rank=1.parallelly.parent=90114.160025563834e.pid"
[10:34:44.780]  $ rshcmd_label    : NULL
[10:34:44.780]  $ rsh_call        : NULL
[10:34:44.780]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:34:44.780]  $ localMachine    : logi TRUE
[10:34:44.780]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:34:44.780]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:34:44.780]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:34:44.780]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:34:44.780]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:34:44.780]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:34:44.780]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:34:44.780]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:34:44.780]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:34:44.780]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:34:44.780]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:34:44.780]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:34:44.780]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:34:44.780]  $ arguments       :List of 28
[10:34:44.780]   ..$ worker          : chr "localhost"
[10:34:44.780]   ..$ master          : NULL
[10:34:44.780]   ..$ port            : int 11312
[10:34:44.780]   ..$ connectTimeout  : num 120
[10:34:44.780]   ..$ timeout         : num 2592000
[10:34:44.780]   ..$ rscript         : NULL
[10:34:44.780]   ..$ homogeneous     : NULL
[10:34:44.780]   ..$ rscript_args    : NULL
[10:34:44.780]   ..$ rscript_envs    : NULL
[10:34:44.780]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:34:44.780]   ..$ rscript_startup : NULL
[10:34:44.780]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:34:44.780]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:34:44.780]   ..$ methods         : logi TRUE
[10:34:44.780]   ..$ socketOptions   : chr "no-delay"
[10:34:44.780]   ..$ useXDR          : logi FALSE
[10:34:44.780]   ..$ outfile         : chr "/dev/null"
[10:34:44.780]   ..$ renice          : int NA
[10:34:44.780]   ..$ rshcmd          : NULL
[10:34:44.780]   ..$ user            : NULL
[10:34:44.780]   ..$ revtunnel       : logi NA
[10:34:44.780]   ..$ rshlogfile      : NULL
[10:34:44.780]   ..$ rshopts         : NULL
[10:34:44.780]   ..$ rank            : int 1
[10:34:44.780]   ..$ manual          : logi FALSE
[10:34:44.780]   ..$ dryrun          : logi FALSE
[10:34:44.780]   ..$ quiet           : logi FALSE
[10:34:44.780]   ..$ setup_strategy  : chr "parallel"
[10:34:44.780]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:34:44.796] [local output] System call to launch all workers:
[10:34:44.796] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpVtULJl/worker.rank=1.parallelly.parent=90114.160025563834e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11312 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:34:44.797] [local output] Starting PSOCK main server
[10:34:44.802] [local output] Workers launched
[10:34:44.802] [local output] Waiting for workers to connect back
[10:34:44.802]  - [local output] 0 workers out of 2 ready
[10:34:45.046]  - [local output] 0 workers out of 2 ready
[10:34:45.047]  - [local output] 1 workers out of 2 ready
[10:34:45.047]  - [local output] 2 workers out of 2 ready
[10:34:45.047] [local output] Launching of workers completed
[10:34:45.047] [local output] Collecting session information from workers
[10:34:45.048] [local output]  - Worker #1 of 2
[10:34:45.049] [local output]  - Worker #2 of 2
[10:34:45.049] [local output] makeClusterPSOCK() ... done
[10:34:45.060] Packages needed by the future expression (n = 0): <none>
[10:34:45.060] Packages needed by future strategies (n = 0): <none>
[10:34:45.061] {
[10:34:45.061]     {
[10:34:45.061]         {
[10:34:45.061]             ...future.startTime <- base::Sys.time()
[10:34:45.061]             {
[10:34:45.061]                 {
[10:34:45.061]                   {
[10:34:45.061]                     {
[10:34:45.061]                       base::local({
[10:34:45.061]                         has_future <- base::requireNamespace("future", 
[10:34:45.061]                           quietly = TRUE)
[10:34:45.061]                         if (has_future) {
[10:34:45.061]                           ns <- base::getNamespace("future")
[10:34:45.061]                           version <- ns[[".package"]][["version"]]
[10:34:45.061]                           if (is.null(version)) 
[10:34:45.061]                             version <- utils::packageVersion("future")
[10:34:45.061]                         }
[10:34:45.061]                         else {
[10:34:45.061]                           version <- NULL
[10:34:45.061]                         }
[10:34:45.061]                         if (!has_future || version < "1.8.0") {
[10:34:45.061]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.061]                             "", base::R.version$version.string), 
[10:34:45.061]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:45.061]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:45.061]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.061]                               "release", "version")], collapse = " "), 
[10:34:45.061]                             hostname = base::Sys.info()[["nodename"]])
[10:34:45.061]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.061]                             info)
[10:34:45.061]                           info <- base::paste(info, collapse = "; ")
[10:34:45.061]                           if (!has_future) {
[10:34:45.061]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.061]                               info)
[10:34:45.061]                           }
[10:34:45.061]                           else {
[10:34:45.061]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.061]                               info, version)
[10:34:45.061]                           }
[10:34:45.061]                           base::stop(msg)
[10:34:45.061]                         }
[10:34:45.061]                       })
[10:34:45.061]                     }
[10:34:45.061]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.061]                     base::options(mc.cores = 1L)
[10:34:45.061]                   }
[10:34:45.061]                   ...future.strategy.old <- future::plan("list")
[10:34:45.061]                   options(future.plan = NULL)
[10:34:45.061]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.061]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.061]                 }
[10:34:45.061]                 ...future.workdir <- getwd()
[10:34:45.061]             }
[10:34:45.061]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.061]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.061]         }
[10:34:45.061]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.061]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.061]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.061]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.061]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.061]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.061]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.061]             base::names(...future.oldOptions))
[10:34:45.061]     }
[10:34:45.061]     if (FALSE) {
[10:34:45.061]     }
[10:34:45.061]     else {
[10:34:45.061]         if (TRUE) {
[10:34:45.061]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.061]                 open = "w")
[10:34:45.061]         }
[10:34:45.061]         else {
[10:34:45.061]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.061]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.061]         }
[10:34:45.061]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.061]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.061]             base::sink(type = "output", split = FALSE)
[10:34:45.061]             base::close(...future.stdout)
[10:34:45.061]         }, add = TRUE)
[10:34:45.061]     }
[10:34:45.061]     ...future.frame <- base::sys.nframe()
[10:34:45.061]     ...future.conditions <- base::list()
[10:34:45.061]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.061]     if (FALSE) {
[10:34:45.061]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.061]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.061]     }
[10:34:45.061]     ...future.result <- base::tryCatch({
[10:34:45.061]         base::withCallingHandlers({
[10:34:45.061]             ...future.value <- base::withVisible(base::local({
[10:34:45.061]                 ...future.makeSendCondition <- base::local({
[10:34:45.061]                   sendCondition <- NULL
[10:34:45.061]                   function(frame = 1L) {
[10:34:45.061]                     if (is.function(sendCondition)) 
[10:34:45.061]                       return(sendCondition)
[10:34:45.061]                     ns <- getNamespace("parallel")
[10:34:45.061]                     if (exists("sendData", mode = "function", 
[10:34:45.061]                       envir = ns)) {
[10:34:45.061]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.061]                         envir = ns)
[10:34:45.061]                       envir <- sys.frame(frame)
[10:34:45.061]                       master <- NULL
[10:34:45.061]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.061]                         !identical(envir, emptyenv())) {
[10:34:45.061]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.061]                           inherits = FALSE)) {
[10:34:45.061]                           master <- get("master", mode = "list", 
[10:34:45.061]                             envir = envir, inherits = FALSE)
[10:34:45.061]                           if (inherits(master, c("SOCKnode", 
[10:34:45.061]                             "SOCK0node"))) {
[10:34:45.061]                             sendCondition <<- function(cond) {
[10:34:45.061]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.061]                                 success = TRUE)
[10:34:45.061]                               parallel_sendData(master, data)
[10:34:45.061]                             }
[10:34:45.061]                             return(sendCondition)
[10:34:45.061]                           }
[10:34:45.061]                         }
[10:34:45.061]                         frame <- frame + 1L
[10:34:45.061]                         envir <- sys.frame(frame)
[10:34:45.061]                       }
[10:34:45.061]                     }
[10:34:45.061]                     sendCondition <<- function(cond) NULL
[10:34:45.061]                   }
[10:34:45.061]                 })
[10:34:45.061]                 withCallingHandlers({
[10:34:45.061]                   NA
[10:34:45.061]                 }, immediateCondition = function(cond) {
[10:34:45.061]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.061]                   sendCondition(cond)
[10:34:45.061]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.061]                   {
[10:34:45.061]                     inherits <- base::inherits
[10:34:45.061]                     invokeRestart <- base::invokeRestart
[10:34:45.061]                     is.null <- base::is.null
[10:34:45.061]                     muffled <- FALSE
[10:34:45.061]                     if (inherits(cond, "message")) {
[10:34:45.061]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.061]                       if (muffled) 
[10:34:45.061]                         invokeRestart("muffleMessage")
[10:34:45.061]                     }
[10:34:45.061]                     else if (inherits(cond, "warning")) {
[10:34:45.061]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.061]                       if (muffled) 
[10:34:45.061]                         invokeRestart("muffleWarning")
[10:34:45.061]                     }
[10:34:45.061]                     else if (inherits(cond, "condition")) {
[10:34:45.061]                       if (!is.null(pattern)) {
[10:34:45.061]                         computeRestarts <- base::computeRestarts
[10:34:45.061]                         grepl <- base::grepl
[10:34:45.061]                         restarts <- computeRestarts(cond)
[10:34:45.061]                         for (restart in restarts) {
[10:34:45.061]                           name <- restart$name
[10:34:45.061]                           if (is.null(name)) 
[10:34:45.061]                             next
[10:34:45.061]                           if (!grepl(pattern, name)) 
[10:34:45.061]                             next
[10:34:45.061]                           invokeRestart(restart)
[10:34:45.061]                           muffled <- TRUE
[10:34:45.061]                           break
[10:34:45.061]                         }
[10:34:45.061]                       }
[10:34:45.061]                     }
[10:34:45.061]                     invisible(muffled)
[10:34:45.061]                   }
[10:34:45.061]                   muffleCondition(cond)
[10:34:45.061]                 })
[10:34:45.061]             }))
[10:34:45.061]             future::FutureResult(value = ...future.value$value, 
[10:34:45.061]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.061]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.061]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.061]                     ...future.globalenv.names))
[10:34:45.061]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.061]         }, condition = base::local({
[10:34:45.061]             c <- base::c
[10:34:45.061]             inherits <- base::inherits
[10:34:45.061]             invokeRestart <- base::invokeRestart
[10:34:45.061]             length <- base::length
[10:34:45.061]             list <- base::list
[10:34:45.061]             seq.int <- base::seq.int
[10:34:45.061]             signalCondition <- base::signalCondition
[10:34:45.061]             sys.calls <- base::sys.calls
[10:34:45.061]             `[[` <- base::`[[`
[10:34:45.061]             `+` <- base::`+`
[10:34:45.061]             `<<-` <- base::`<<-`
[10:34:45.061]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.061]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.061]                   3L)]
[10:34:45.061]             }
[10:34:45.061]             function(cond) {
[10:34:45.061]                 is_error <- inherits(cond, "error")
[10:34:45.061]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.061]                   NULL)
[10:34:45.061]                 if (is_error) {
[10:34:45.061]                   sessionInformation <- function() {
[10:34:45.061]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.061]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.061]                       search = base::search(), system = base::Sys.info())
[10:34:45.061]                   }
[10:34:45.061]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.061]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.061]                     cond$call), session = sessionInformation(), 
[10:34:45.061]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.061]                   signalCondition(cond)
[10:34:45.061]                 }
[10:34:45.061]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.061]                 "immediateCondition"))) {
[10:34:45.061]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.061]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.061]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.061]                   if (TRUE && !signal) {
[10:34:45.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.061]                     {
[10:34:45.061]                       inherits <- base::inherits
[10:34:45.061]                       invokeRestart <- base::invokeRestart
[10:34:45.061]                       is.null <- base::is.null
[10:34:45.061]                       muffled <- FALSE
[10:34:45.061]                       if (inherits(cond, "message")) {
[10:34:45.061]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.061]                         if (muffled) 
[10:34:45.061]                           invokeRestart("muffleMessage")
[10:34:45.061]                       }
[10:34:45.061]                       else if (inherits(cond, "warning")) {
[10:34:45.061]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.061]                         if (muffled) 
[10:34:45.061]                           invokeRestart("muffleWarning")
[10:34:45.061]                       }
[10:34:45.061]                       else if (inherits(cond, "condition")) {
[10:34:45.061]                         if (!is.null(pattern)) {
[10:34:45.061]                           computeRestarts <- base::computeRestarts
[10:34:45.061]                           grepl <- base::grepl
[10:34:45.061]                           restarts <- computeRestarts(cond)
[10:34:45.061]                           for (restart in restarts) {
[10:34:45.061]                             name <- restart$name
[10:34:45.061]                             if (is.null(name)) 
[10:34:45.061]                               next
[10:34:45.061]                             if (!grepl(pattern, name)) 
[10:34:45.061]                               next
[10:34:45.061]                             invokeRestart(restart)
[10:34:45.061]                             muffled <- TRUE
[10:34:45.061]                             break
[10:34:45.061]                           }
[10:34:45.061]                         }
[10:34:45.061]                       }
[10:34:45.061]                       invisible(muffled)
[10:34:45.061]                     }
[10:34:45.061]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.061]                   }
[10:34:45.061]                 }
[10:34:45.061]                 else {
[10:34:45.061]                   if (TRUE) {
[10:34:45.061]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.061]                     {
[10:34:45.061]                       inherits <- base::inherits
[10:34:45.061]                       invokeRestart <- base::invokeRestart
[10:34:45.061]                       is.null <- base::is.null
[10:34:45.061]                       muffled <- FALSE
[10:34:45.061]                       if (inherits(cond, "message")) {
[10:34:45.061]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.061]                         if (muffled) 
[10:34:45.061]                           invokeRestart("muffleMessage")
[10:34:45.061]                       }
[10:34:45.061]                       else if (inherits(cond, "warning")) {
[10:34:45.061]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.061]                         if (muffled) 
[10:34:45.061]                           invokeRestart("muffleWarning")
[10:34:45.061]                       }
[10:34:45.061]                       else if (inherits(cond, "condition")) {
[10:34:45.061]                         if (!is.null(pattern)) {
[10:34:45.061]                           computeRestarts <- base::computeRestarts
[10:34:45.061]                           grepl <- base::grepl
[10:34:45.061]                           restarts <- computeRestarts(cond)
[10:34:45.061]                           for (restart in restarts) {
[10:34:45.061]                             name <- restart$name
[10:34:45.061]                             if (is.null(name)) 
[10:34:45.061]                               next
[10:34:45.061]                             if (!grepl(pattern, name)) 
[10:34:45.061]                               next
[10:34:45.061]                             invokeRestart(restart)
[10:34:45.061]                             muffled <- TRUE
[10:34:45.061]                             break
[10:34:45.061]                           }
[10:34:45.061]                         }
[10:34:45.061]                       }
[10:34:45.061]                       invisible(muffled)
[10:34:45.061]                     }
[10:34:45.061]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.061]                   }
[10:34:45.061]                 }
[10:34:45.061]             }
[10:34:45.061]         }))
[10:34:45.061]     }, error = function(ex) {
[10:34:45.061]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.061]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.061]                 ...future.rng), started = ...future.startTime, 
[10:34:45.061]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.061]             version = "1.8"), class = "FutureResult")
[10:34:45.061]     }, finally = {
[10:34:45.061]         if (!identical(...future.workdir, getwd())) 
[10:34:45.061]             setwd(...future.workdir)
[10:34:45.061]         {
[10:34:45.061]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.061]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.061]             }
[10:34:45.061]             base::options(...future.oldOptions)
[10:34:45.061]             if (.Platform$OS.type == "windows") {
[10:34:45.061]                 old_names <- names(...future.oldEnvVars)
[10:34:45.061]                 envs <- base::Sys.getenv()
[10:34:45.061]                 names <- names(envs)
[10:34:45.061]                 common <- intersect(names, old_names)
[10:34:45.061]                 added <- setdiff(names, old_names)
[10:34:45.061]                 removed <- setdiff(old_names, names)
[10:34:45.061]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.061]                   envs[common]]
[10:34:45.061]                 NAMES <- toupper(changed)
[10:34:45.061]                 args <- list()
[10:34:45.061]                 for (kk in seq_along(NAMES)) {
[10:34:45.061]                   name <- changed[[kk]]
[10:34:45.061]                   NAME <- NAMES[[kk]]
[10:34:45.061]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.061]                     next
[10:34:45.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.061]                 }
[10:34:45.061]                 NAMES <- toupper(added)
[10:34:45.061]                 for (kk in seq_along(NAMES)) {
[10:34:45.061]                   name <- added[[kk]]
[10:34:45.061]                   NAME <- NAMES[[kk]]
[10:34:45.061]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.061]                     next
[10:34:45.061]                   args[[name]] <- ""
[10:34:45.061]                 }
[10:34:45.061]                 NAMES <- toupper(removed)
[10:34:45.061]                 for (kk in seq_along(NAMES)) {
[10:34:45.061]                   name <- removed[[kk]]
[10:34:45.061]                   NAME <- NAMES[[kk]]
[10:34:45.061]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.061]                     next
[10:34:45.061]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.061]                 }
[10:34:45.061]                 if (length(args) > 0) 
[10:34:45.061]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.061]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.061]             }
[10:34:45.061]             else {
[10:34:45.061]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.061]             }
[10:34:45.061]             {
[10:34:45.061]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.061]                   0L) {
[10:34:45.061]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.061]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.061]                   base::options(opts)
[10:34:45.061]                 }
[10:34:45.061]                 {
[10:34:45.061]                   {
[10:34:45.061]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.061]                     NULL
[10:34:45.061]                   }
[10:34:45.061]                   options(future.plan = NULL)
[10:34:45.061]                   if (is.na(NA_character_)) 
[10:34:45.061]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.061]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.061]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.061]                     .init = FALSE)
[10:34:45.061]                 }
[10:34:45.061]             }
[10:34:45.061]         }
[10:34:45.061]     })
[10:34:45.061]     if (TRUE) {
[10:34:45.061]         base::sink(type = "output", split = FALSE)
[10:34:45.061]         if (TRUE) {
[10:34:45.061]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.061]         }
[10:34:45.061]         else {
[10:34:45.061]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.061]         }
[10:34:45.061]         base::close(...future.stdout)
[10:34:45.061]         ...future.stdout <- NULL
[10:34:45.061]     }
[10:34:45.061]     ...future.result$conditions <- ...future.conditions
[10:34:45.061]     ...future.result$finished <- base::Sys.time()
[10:34:45.061]     ...future.result
[10:34:45.061] }
[10:34:45.114] MultisessionFuture started
[10:34:45.114] result() for ClusterFuture ...
[10:34:45.114] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.115] - Validating connection of MultisessionFuture
[10:34:45.147] - received message: FutureResult
[10:34:45.147] - Received FutureResult
[10:34:45.147] - Erased future from FutureRegistry
[10:34:45.148] result() for ClusterFuture ...
[10:34:45.148] - result already collected: FutureResult
[10:34:45.148] result() for ClusterFuture ... done
[10:34:45.148] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.148] result() for ClusterFuture ... done
[10:34:45.148] result() for ClusterFuture ...
[10:34:45.148] - result already collected: FutureResult
[10:34:45.148] result() for ClusterFuture ... done
[10:34:45.149] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:34:45.152] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[10:34:45.153] getGlobalsAndPackages() ...
[10:34:45.153] Searching for globals...
[10:34:45.157] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.157] Searching for globals ... DONE
[10:34:45.157] Resolving globals: FALSE
[10:34:45.158] 
[10:34:45.158] - packages: [1] ‘utils’
[10:34:45.158] getGlobalsAndPackages() ... DONE
[10:34:45.158] run() for ‘Future’ ...
[10:34:45.158] - state: ‘created’
[10:34:45.159] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.173] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.173]   - Field: ‘node’
[10:34:45.173]   - Field: ‘label’
[10:34:45.173]   - Field: ‘local’
[10:34:45.173]   - Field: ‘owner’
[10:34:45.174]   - Field: ‘envir’
[10:34:45.174]   - Field: ‘workers’
[10:34:45.174]   - Field: ‘packages’
[10:34:45.174]   - Field: ‘gc’
[10:34:45.174]   - Field: ‘conditions’
[10:34:45.174]   - Field: ‘persistent’
[10:34:45.174]   - Field: ‘expr’
[10:34:45.174]   - Field: ‘uuid’
[10:34:45.174]   - Field: ‘seed’
[10:34:45.174]   - Field: ‘version’
[10:34:45.175]   - Field: ‘result’
[10:34:45.175]   - Field: ‘asynchronous’
[10:34:45.175]   - Field: ‘calls’
[10:34:45.175]   - Field: ‘globals’
[10:34:45.175]   - Field: ‘stdout’
[10:34:45.175]   - Field: ‘earlySignal’
[10:34:45.175]   - Field: ‘lazy’
[10:34:45.175]   - Field: ‘state’
[10:34:45.176] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.176] - Launch lazy future ...
[10:34:45.176] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.176] Packages needed by future strategies (n = 0): <none>
[10:34:45.177] {
[10:34:45.177]     {
[10:34:45.177]         {
[10:34:45.177]             ...future.startTime <- base::Sys.time()
[10:34:45.177]             {
[10:34:45.177]                 {
[10:34:45.177]                   {
[10:34:45.177]                     {
[10:34:45.177]                       {
[10:34:45.177]                         base::local({
[10:34:45.177]                           has_future <- base::requireNamespace("future", 
[10:34:45.177]                             quietly = TRUE)
[10:34:45.177]                           if (has_future) {
[10:34:45.177]                             ns <- base::getNamespace("future")
[10:34:45.177]                             version <- ns[[".package"]][["version"]]
[10:34:45.177]                             if (is.null(version)) 
[10:34:45.177]                               version <- utils::packageVersion("future")
[10:34:45.177]                           }
[10:34:45.177]                           else {
[10:34:45.177]                             version <- NULL
[10:34:45.177]                           }
[10:34:45.177]                           if (!has_future || version < "1.8.0") {
[10:34:45.177]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.177]                               "", base::R.version$version.string), 
[10:34:45.177]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.177]                                 base::R.version$platform, 8 * 
[10:34:45.177]                                   base::.Machine$sizeof.pointer), 
[10:34:45.177]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.177]                                 "release", "version")], collapse = " "), 
[10:34:45.177]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.177]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.177]                               info)
[10:34:45.177]                             info <- base::paste(info, collapse = "; ")
[10:34:45.177]                             if (!has_future) {
[10:34:45.177]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.177]                                 info)
[10:34:45.177]                             }
[10:34:45.177]                             else {
[10:34:45.177]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.177]                                 info, version)
[10:34:45.177]                             }
[10:34:45.177]                             base::stop(msg)
[10:34:45.177]                           }
[10:34:45.177]                         })
[10:34:45.177]                       }
[10:34:45.177]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.177]                       base::options(mc.cores = 1L)
[10:34:45.177]                     }
[10:34:45.177]                     base::local({
[10:34:45.177]                       for (pkg in "utils") {
[10:34:45.177]                         base::loadNamespace(pkg)
[10:34:45.177]                         base::library(pkg, character.only = TRUE)
[10:34:45.177]                       }
[10:34:45.177]                     })
[10:34:45.177]                   }
[10:34:45.177]                   ...future.strategy.old <- future::plan("list")
[10:34:45.177]                   options(future.plan = NULL)
[10:34:45.177]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.177]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.177]                 }
[10:34:45.177]                 ...future.workdir <- getwd()
[10:34:45.177]             }
[10:34:45.177]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.177]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.177]         }
[10:34:45.177]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.177]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.177]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.177]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.177]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.177]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.177]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.177]             base::names(...future.oldOptions))
[10:34:45.177]     }
[10:34:45.177]     if (FALSE) {
[10:34:45.177]     }
[10:34:45.177]     else {
[10:34:45.177]         if (TRUE) {
[10:34:45.177]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.177]                 open = "w")
[10:34:45.177]         }
[10:34:45.177]         else {
[10:34:45.177]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.177]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.177]         }
[10:34:45.177]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.177]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.177]             base::sink(type = "output", split = FALSE)
[10:34:45.177]             base::close(...future.stdout)
[10:34:45.177]         }, add = TRUE)
[10:34:45.177]     }
[10:34:45.177]     ...future.frame <- base::sys.nframe()
[10:34:45.177]     ...future.conditions <- base::list()
[10:34:45.177]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.177]     if (FALSE) {
[10:34:45.177]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.177]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.177]     }
[10:34:45.177]     ...future.result <- base::tryCatch({
[10:34:45.177]         base::withCallingHandlers({
[10:34:45.177]             ...future.value <- base::withVisible(base::local({
[10:34:45.177]                 ...future.makeSendCondition <- base::local({
[10:34:45.177]                   sendCondition <- NULL
[10:34:45.177]                   function(frame = 1L) {
[10:34:45.177]                     if (is.function(sendCondition)) 
[10:34:45.177]                       return(sendCondition)
[10:34:45.177]                     ns <- getNamespace("parallel")
[10:34:45.177]                     if (exists("sendData", mode = "function", 
[10:34:45.177]                       envir = ns)) {
[10:34:45.177]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.177]                         envir = ns)
[10:34:45.177]                       envir <- sys.frame(frame)
[10:34:45.177]                       master <- NULL
[10:34:45.177]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.177]                         !identical(envir, emptyenv())) {
[10:34:45.177]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.177]                           inherits = FALSE)) {
[10:34:45.177]                           master <- get("master", mode = "list", 
[10:34:45.177]                             envir = envir, inherits = FALSE)
[10:34:45.177]                           if (inherits(master, c("SOCKnode", 
[10:34:45.177]                             "SOCK0node"))) {
[10:34:45.177]                             sendCondition <<- function(cond) {
[10:34:45.177]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.177]                                 success = TRUE)
[10:34:45.177]                               parallel_sendData(master, data)
[10:34:45.177]                             }
[10:34:45.177]                             return(sendCondition)
[10:34:45.177]                           }
[10:34:45.177]                         }
[10:34:45.177]                         frame <- frame + 1L
[10:34:45.177]                         envir <- sys.frame(frame)
[10:34:45.177]                       }
[10:34:45.177]                     }
[10:34:45.177]                     sendCondition <<- function(cond) NULL
[10:34:45.177]                   }
[10:34:45.177]                 })
[10:34:45.177]                 withCallingHandlers({
[10:34:45.177]                   {
[10:34:45.177]                     print(1:50)
[10:34:45.177]                     str(1:50)
[10:34:45.177]                     cat(letters, sep = "-")
[10:34:45.177]                     cat(1:6, collapse = "\n")
[10:34:45.177]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.177]                     42L
[10:34:45.177]                   }
[10:34:45.177]                 }, immediateCondition = function(cond) {
[10:34:45.177]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.177]                   sendCondition(cond)
[10:34:45.177]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.177]                   {
[10:34:45.177]                     inherits <- base::inherits
[10:34:45.177]                     invokeRestart <- base::invokeRestart
[10:34:45.177]                     is.null <- base::is.null
[10:34:45.177]                     muffled <- FALSE
[10:34:45.177]                     if (inherits(cond, "message")) {
[10:34:45.177]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.177]                       if (muffled) 
[10:34:45.177]                         invokeRestart("muffleMessage")
[10:34:45.177]                     }
[10:34:45.177]                     else if (inherits(cond, "warning")) {
[10:34:45.177]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.177]                       if (muffled) 
[10:34:45.177]                         invokeRestart("muffleWarning")
[10:34:45.177]                     }
[10:34:45.177]                     else if (inherits(cond, "condition")) {
[10:34:45.177]                       if (!is.null(pattern)) {
[10:34:45.177]                         computeRestarts <- base::computeRestarts
[10:34:45.177]                         grepl <- base::grepl
[10:34:45.177]                         restarts <- computeRestarts(cond)
[10:34:45.177]                         for (restart in restarts) {
[10:34:45.177]                           name <- restart$name
[10:34:45.177]                           if (is.null(name)) 
[10:34:45.177]                             next
[10:34:45.177]                           if (!grepl(pattern, name)) 
[10:34:45.177]                             next
[10:34:45.177]                           invokeRestart(restart)
[10:34:45.177]                           muffled <- TRUE
[10:34:45.177]                           break
[10:34:45.177]                         }
[10:34:45.177]                       }
[10:34:45.177]                     }
[10:34:45.177]                     invisible(muffled)
[10:34:45.177]                   }
[10:34:45.177]                   muffleCondition(cond)
[10:34:45.177]                 })
[10:34:45.177]             }))
[10:34:45.177]             future::FutureResult(value = ...future.value$value, 
[10:34:45.177]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.177]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.177]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.177]                     ...future.globalenv.names))
[10:34:45.177]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.177]         }, condition = base::local({
[10:34:45.177]             c <- base::c
[10:34:45.177]             inherits <- base::inherits
[10:34:45.177]             invokeRestart <- base::invokeRestart
[10:34:45.177]             length <- base::length
[10:34:45.177]             list <- base::list
[10:34:45.177]             seq.int <- base::seq.int
[10:34:45.177]             signalCondition <- base::signalCondition
[10:34:45.177]             sys.calls <- base::sys.calls
[10:34:45.177]             `[[` <- base::`[[`
[10:34:45.177]             `+` <- base::`+`
[10:34:45.177]             `<<-` <- base::`<<-`
[10:34:45.177]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.177]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.177]                   3L)]
[10:34:45.177]             }
[10:34:45.177]             function(cond) {
[10:34:45.177]                 is_error <- inherits(cond, "error")
[10:34:45.177]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.177]                   NULL)
[10:34:45.177]                 if (is_error) {
[10:34:45.177]                   sessionInformation <- function() {
[10:34:45.177]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.177]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.177]                       search = base::search(), system = base::Sys.info())
[10:34:45.177]                   }
[10:34:45.177]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.177]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.177]                     cond$call), session = sessionInformation(), 
[10:34:45.177]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.177]                   signalCondition(cond)
[10:34:45.177]                 }
[10:34:45.177]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.177]                 "immediateCondition"))) {
[10:34:45.177]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.177]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.177]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.177]                   if (TRUE && !signal) {
[10:34:45.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.177]                     {
[10:34:45.177]                       inherits <- base::inherits
[10:34:45.177]                       invokeRestart <- base::invokeRestart
[10:34:45.177]                       is.null <- base::is.null
[10:34:45.177]                       muffled <- FALSE
[10:34:45.177]                       if (inherits(cond, "message")) {
[10:34:45.177]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.177]                         if (muffled) 
[10:34:45.177]                           invokeRestart("muffleMessage")
[10:34:45.177]                       }
[10:34:45.177]                       else if (inherits(cond, "warning")) {
[10:34:45.177]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.177]                         if (muffled) 
[10:34:45.177]                           invokeRestart("muffleWarning")
[10:34:45.177]                       }
[10:34:45.177]                       else if (inherits(cond, "condition")) {
[10:34:45.177]                         if (!is.null(pattern)) {
[10:34:45.177]                           computeRestarts <- base::computeRestarts
[10:34:45.177]                           grepl <- base::grepl
[10:34:45.177]                           restarts <- computeRestarts(cond)
[10:34:45.177]                           for (restart in restarts) {
[10:34:45.177]                             name <- restart$name
[10:34:45.177]                             if (is.null(name)) 
[10:34:45.177]                               next
[10:34:45.177]                             if (!grepl(pattern, name)) 
[10:34:45.177]                               next
[10:34:45.177]                             invokeRestart(restart)
[10:34:45.177]                             muffled <- TRUE
[10:34:45.177]                             break
[10:34:45.177]                           }
[10:34:45.177]                         }
[10:34:45.177]                       }
[10:34:45.177]                       invisible(muffled)
[10:34:45.177]                     }
[10:34:45.177]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.177]                   }
[10:34:45.177]                 }
[10:34:45.177]                 else {
[10:34:45.177]                   if (TRUE) {
[10:34:45.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.177]                     {
[10:34:45.177]                       inherits <- base::inherits
[10:34:45.177]                       invokeRestart <- base::invokeRestart
[10:34:45.177]                       is.null <- base::is.null
[10:34:45.177]                       muffled <- FALSE
[10:34:45.177]                       if (inherits(cond, "message")) {
[10:34:45.177]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.177]                         if (muffled) 
[10:34:45.177]                           invokeRestart("muffleMessage")
[10:34:45.177]                       }
[10:34:45.177]                       else if (inherits(cond, "warning")) {
[10:34:45.177]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.177]                         if (muffled) 
[10:34:45.177]                           invokeRestart("muffleWarning")
[10:34:45.177]                       }
[10:34:45.177]                       else if (inherits(cond, "condition")) {
[10:34:45.177]                         if (!is.null(pattern)) {
[10:34:45.177]                           computeRestarts <- base::computeRestarts
[10:34:45.177]                           grepl <- base::grepl
[10:34:45.177]                           restarts <- computeRestarts(cond)
[10:34:45.177]                           for (restart in restarts) {
[10:34:45.177]                             name <- restart$name
[10:34:45.177]                             if (is.null(name)) 
[10:34:45.177]                               next
[10:34:45.177]                             if (!grepl(pattern, name)) 
[10:34:45.177]                               next
[10:34:45.177]                             invokeRestart(restart)
[10:34:45.177]                             muffled <- TRUE
[10:34:45.177]                             break
[10:34:45.177]                           }
[10:34:45.177]                         }
[10:34:45.177]                       }
[10:34:45.177]                       invisible(muffled)
[10:34:45.177]                     }
[10:34:45.177]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.177]                   }
[10:34:45.177]                 }
[10:34:45.177]             }
[10:34:45.177]         }))
[10:34:45.177]     }, error = function(ex) {
[10:34:45.177]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.177]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.177]                 ...future.rng), started = ...future.startTime, 
[10:34:45.177]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.177]             version = "1.8"), class = "FutureResult")
[10:34:45.177]     }, finally = {
[10:34:45.177]         if (!identical(...future.workdir, getwd())) 
[10:34:45.177]             setwd(...future.workdir)
[10:34:45.177]         {
[10:34:45.177]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.177]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.177]             }
[10:34:45.177]             base::options(...future.oldOptions)
[10:34:45.177]             if (.Platform$OS.type == "windows") {
[10:34:45.177]                 old_names <- names(...future.oldEnvVars)
[10:34:45.177]                 envs <- base::Sys.getenv()
[10:34:45.177]                 names <- names(envs)
[10:34:45.177]                 common <- intersect(names, old_names)
[10:34:45.177]                 added <- setdiff(names, old_names)
[10:34:45.177]                 removed <- setdiff(old_names, names)
[10:34:45.177]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.177]                   envs[common]]
[10:34:45.177]                 NAMES <- toupper(changed)
[10:34:45.177]                 args <- list()
[10:34:45.177]                 for (kk in seq_along(NAMES)) {
[10:34:45.177]                   name <- changed[[kk]]
[10:34:45.177]                   NAME <- NAMES[[kk]]
[10:34:45.177]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.177]                     next
[10:34:45.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.177]                 }
[10:34:45.177]                 NAMES <- toupper(added)
[10:34:45.177]                 for (kk in seq_along(NAMES)) {
[10:34:45.177]                   name <- added[[kk]]
[10:34:45.177]                   NAME <- NAMES[[kk]]
[10:34:45.177]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.177]                     next
[10:34:45.177]                   args[[name]] <- ""
[10:34:45.177]                 }
[10:34:45.177]                 NAMES <- toupper(removed)
[10:34:45.177]                 for (kk in seq_along(NAMES)) {
[10:34:45.177]                   name <- removed[[kk]]
[10:34:45.177]                   NAME <- NAMES[[kk]]
[10:34:45.177]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.177]                     next
[10:34:45.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.177]                 }
[10:34:45.177]                 if (length(args) > 0) 
[10:34:45.177]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.177]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.177]             }
[10:34:45.177]             else {
[10:34:45.177]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.177]             }
[10:34:45.177]             {
[10:34:45.177]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.177]                   0L) {
[10:34:45.177]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.177]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.177]                   base::options(opts)
[10:34:45.177]                 }
[10:34:45.177]                 {
[10:34:45.177]                   {
[10:34:45.177]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.177]                     NULL
[10:34:45.177]                   }
[10:34:45.177]                   options(future.plan = NULL)
[10:34:45.177]                   if (is.na(NA_character_)) 
[10:34:45.177]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.177]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.177]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.177]                     .init = FALSE)
[10:34:45.177]                 }
[10:34:45.177]             }
[10:34:45.177]         }
[10:34:45.177]     })
[10:34:45.177]     if (TRUE) {
[10:34:45.177]         base::sink(type = "output", split = FALSE)
[10:34:45.177]         if (TRUE) {
[10:34:45.177]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.177]         }
[10:34:45.177]         else {
[10:34:45.177]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.177]         }
[10:34:45.177]         base::close(...future.stdout)
[10:34:45.177]         ...future.stdout <- NULL
[10:34:45.177]     }
[10:34:45.177]     ...future.result$conditions <- ...future.conditions
[10:34:45.177]     ...future.result$finished <- base::Sys.time()
[10:34:45.177]     ...future.result
[10:34:45.177] }
[10:34:45.180] MultisessionFuture started
[10:34:45.180] - Launch lazy future ... done
[10:34:45.180] run() for ‘MultisessionFuture’ ... done
[10:34:45.181] result() for ClusterFuture ...
[10:34:45.181] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.181] - Validating connection of MultisessionFuture
[10:34:45.230] - received message: FutureResult
[10:34:45.230] - Received FutureResult
[10:34:45.230] - Erased future from FutureRegistry
[10:34:45.230] result() for ClusterFuture ...
[10:34:45.230] - result already collected: FutureResult
[10:34:45.231] result() for ClusterFuture ... done
[10:34:45.231] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.231] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ session_uuid: chr "13804671-66af-7bf7-88c5-a92f4f39d19b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90216
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:45"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:45.240] result() for ClusterFuture ...
[10:34:45.240] - result already collected: FutureResult
[10:34:45.240] result() for ClusterFuture ... done
[10:34:45.241] result() for ClusterFuture ...
[10:34:45.241] - result already collected: FutureResult
[10:34:45.241] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.008692265 secs (started 2025-01-07 10:34:45.221401)
version: 1.8
[10:34:45.242] getGlobalsAndPackages() ...
[10:34:45.242] Searching for globals...
[10:34:45.245] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.246] Searching for globals ... DONE
[10:34:45.246] Resolving globals: FALSE
[10:34:45.246] 
[10:34:45.247] - packages: [1] ‘utils’
[10:34:45.247] getGlobalsAndPackages() ... DONE
[10:34:45.247] run() for ‘Future’ ...
[10:34:45.247] - state: ‘created’
[10:34:45.247] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.262] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.262] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.262]   - Field: ‘node’
[10:34:45.262]   - Field: ‘label’
[10:34:45.262]   - Field: ‘local’
[10:34:45.262]   - Field: ‘owner’
[10:34:45.262]   - Field: ‘envir’
[10:34:45.263]   - Field: ‘workers’
[10:34:45.263]   - Field: ‘packages’
[10:34:45.263]   - Field: ‘gc’
[10:34:45.263]   - Field: ‘conditions’
[10:34:45.263]   - Field: ‘persistent’
[10:34:45.263]   - Field: ‘expr’
[10:34:45.263]   - Field: ‘uuid’
[10:34:45.263]   - Field: ‘seed’
[10:34:45.263]   - Field: ‘version’
[10:34:45.264]   - Field: ‘result’
[10:34:45.264]   - Field: ‘asynchronous’
[10:34:45.264]   - Field: ‘calls’
[10:34:45.264]   - Field: ‘globals’
[10:34:45.264]   - Field: ‘stdout’
[10:34:45.264]   - Field: ‘earlySignal’
[10:34:45.264]   - Field: ‘lazy’
[10:34:45.264]   - Field: ‘state’
[10:34:45.264] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.265] - Launch lazy future ...
[10:34:45.265] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.265] Packages needed by future strategies (n = 0): <none>
[10:34:45.266] {
[10:34:45.266]     {
[10:34:45.266]         {
[10:34:45.266]             ...future.startTime <- base::Sys.time()
[10:34:45.266]             {
[10:34:45.266]                 {
[10:34:45.266]                   {
[10:34:45.266]                     {
[10:34:45.266]                       {
[10:34:45.266]                         base::local({
[10:34:45.266]                           has_future <- base::requireNamespace("future", 
[10:34:45.266]                             quietly = TRUE)
[10:34:45.266]                           if (has_future) {
[10:34:45.266]                             ns <- base::getNamespace("future")
[10:34:45.266]                             version <- ns[[".package"]][["version"]]
[10:34:45.266]                             if (is.null(version)) 
[10:34:45.266]                               version <- utils::packageVersion("future")
[10:34:45.266]                           }
[10:34:45.266]                           else {
[10:34:45.266]                             version <- NULL
[10:34:45.266]                           }
[10:34:45.266]                           if (!has_future || version < "1.8.0") {
[10:34:45.266]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.266]                               "", base::R.version$version.string), 
[10:34:45.266]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.266]                                 base::R.version$platform, 8 * 
[10:34:45.266]                                   base::.Machine$sizeof.pointer), 
[10:34:45.266]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.266]                                 "release", "version")], collapse = " "), 
[10:34:45.266]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.266]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.266]                               info)
[10:34:45.266]                             info <- base::paste(info, collapse = "; ")
[10:34:45.266]                             if (!has_future) {
[10:34:45.266]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.266]                                 info)
[10:34:45.266]                             }
[10:34:45.266]                             else {
[10:34:45.266]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.266]                                 info, version)
[10:34:45.266]                             }
[10:34:45.266]                             base::stop(msg)
[10:34:45.266]                           }
[10:34:45.266]                         })
[10:34:45.266]                       }
[10:34:45.266]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.266]                       base::options(mc.cores = 1L)
[10:34:45.266]                     }
[10:34:45.266]                     base::local({
[10:34:45.266]                       for (pkg in "utils") {
[10:34:45.266]                         base::loadNamespace(pkg)
[10:34:45.266]                         base::library(pkg, character.only = TRUE)
[10:34:45.266]                       }
[10:34:45.266]                     })
[10:34:45.266]                   }
[10:34:45.266]                   ...future.strategy.old <- future::plan("list")
[10:34:45.266]                   options(future.plan = NULL)
[10:34:45.266]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.266]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.266]                 }
[10:34:45.266]                 ...future.workdir <- getwd()
[10:34:45.266]             }
[10:34:45.266]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.266]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.266]         }
[10:34:45.266]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.266]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.266]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.266]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.266]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.266]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.266]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.266]             base::names(...future.oldOptions))
[10:34:45.266]     }
[10:34:45.266]     if (FALSE) {
[10:34:45.266]     }
[10:34:45.266]     else {
[10:34:45.266]         if (TRUE) {
[10:34:45.266]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.266]                 open = "w")
[10:34:45.266]         }
[10:34:45.266]         else {
[10:34:45.266]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.266]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.266]         }
[10:34:45.266]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.266]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.266]             base::sink(type = "output", split = FALSE)
[10:34:45.266]             base::close(...future.stdout)
[10:34:45.266]         }, add = TRUE)
[10:34:45.266]     }
[10:34:45.266]     ...future.frame <- base::sys.nframe()
[10:34:45.266]     ...future.conditions <- base::list()
[10:34:45.266]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.266]     if (FALSE) {
[10:34:45.266]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.266]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.266]     }
[10:34:45.266]     ...future.result <- base::tryCatch({
[10:34:45.266]         base::withCallingHandlers({
[10:34:45.266]             ...future.value <- base::withVisible(base::local({
[10:34:45.266]                 ...future.makeSendCondition <- base::local({
[10:34:45.266]                   sendCondition <- NULL
[10:34:45.266]                   function(frame = 1L) {
[10:34:45.266]                     if (is.function(sendCondition)) 
[10:34:45.266]                       return(sendCondition)
[10:34:45.266]                     ns <- getNamespace("parallel")
[10:34:45.266]                     if (exists("sendData", mode = "function", 
[10:34:45.266]                       envir = ns)) {
[10:34:45.266]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.266]                         envir = ns)
[10:34:45.266]                       envir <- sys.frame(frame)
[10:34:45.266]                       master <- NULL
[10:34:45.266]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.266]                         !identical(envir, emptyenv())) {
[10:34:45.266]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.266]                           inherits = FALSE)) {
[10:34:45.266]                           master <- get("master", mode = "list", 
[10:34:45.266]                             envir = envir, inherits = FALSE)
[10:34:45.266]                           if (inherits(master, c("SOCKnode", 
[10:34:45.266]                             "SOCK0node"))) {
[10:34:45.266]                             sendCondition <<- function(cond) {
[10:34:45.266]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.266]                                 success = TRUE)
[10:34:45.266]                               parallel_sendData(master, data)
[10:34:45.266]                             }
[10:34:45.266]                             return(sendCondition)
[10:34:45.266]                           }
[10:34:45.266]                         }
[10:34:45.266]                         frame <- frame + 1L
[10:34:45.266]                         envir <- sys.frame(frame)
[10:34:45.266]                       }
[10:34:45.266]                     }
[10:34:45.266]                     sendCondition <<- function(cond) NULL
[10:34:45.266]                   }
[10:34:45.266]                 })
[10:34:45.266]                 withCallingHandlers({
[10:34:45.266]                   {
[10:34:45.266]                     print(1:50)
[10:34:45.266]                     str(1:50)
[10:34:45.266]                     cat(letters, sep = "-")
[10:34:45.266]                     cat(1:6, collapse = "\n")
[10:34:45.266]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.266]                     42L
[10:34:45.266]                   }
[10:34:45.266]                 }, immediateCondition = function(cond) {
[10:34:45.266]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.266]                   sendCondition(cond)
[10:34:45.266]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.266]                   {
[10:34:45.266]                     inherits <- base::inherits
[10:34:45.266]                     invokeRestart <- base::invokeRestart
[10:34:45.266]                     is.null <- base::is.null
[10:34:45.266]                     muffled <- FALSE
[10:34:45.266]                     if (inherits(cond, "message")) {
[10:34:45.266]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.266]                       if (muffled) 
[10:34:45.266]                         invokeRestart("muffleMessage")
[10:34:45.266]                     }
[10:34:45.266]                     else if (inherits(cond, "warning")) {
[10:34:45.266]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.266]                       if (muffled) 
[10:34:45.266]                         invokeRestart("muffleWarning")
[10:34:45.266]                     }
[10:34:45.266]                     else if (inherits(cond, "condition")) {
[10:34:45.266]                       if (!is.null(pattern)) {
[10:34:45.266]                         computeRestarts <- base::computeRestarts
[10:34:45.266]                         grepl <- base::grepl
[10:34:45.266]                         restarts <- computeRestarts(cond)
[10:34:45.266]                         for (restart in restarts) {
[10:34:45.266]                           name <- restart$name
[10:34:45.266]                           if (is.null(name)) 
[10:34:45.266]                             next
[10:34:45.266]                           if (!grepl(pattern, name)) 
[10:34:45.266]                             next
[10:34:45.266]                           invokeRestart(restart)
[10:34:45.266]                           muffled <- TRUE
[10:34:45.266]                           break
[10:34:45.266]                         }
[10:34:45.266]                       }
[10:34:45.266]                     }
[10:34:45.266]                     invisible(muffled)
[10:34:45.266]                   }
[10:34:45.266]                   muffleCondition(cond)
[10:34:45.266]                 })
[10:34:45.266]             }))
[10:34:45.266]             future::FutureResult(value = ...future.value$value, 
[10:34:45.266]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.266]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.266]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.266]                     ...future.globalenv.names))
[10:34:45.266]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.266]         }, condition = base::local({
[10:34:45.266]             c <- base::c
[10:34:45.266]             inherits <- base::inherits
[10:34:45.266]             invokeRestart <- base::invokeRestart
[10:34:45.266]             length <- base::length
[10:34:45.266]             list <- base::list
[10:34:45.266]             seq.int <- base::seq.int
[10:34:45.266]             signalCondition <- base::signalCondition
[10:34:45.266]             sys.calls <- base::sys.calls
[10:34:45.266]             `[[` <- base::`[[`
[10:34:45.266]             `+` <- base::`+`
[10:34:45.266]             `<<-` <- base::`<<-`
[10:34:45.266]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.266]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.266]                   3L)]
[10:34:45.266]             }
[10:34:45.266]             function(cond) {
[10:34:45.266]                 is_error <- inherits(cond, "error")
[10:34:45.266]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.266]                   NULL)
[10:34:45.266]                 if (is_error) {
[10:34:45.266]                   sessionInformation <- function() {
[10:34:45.266]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.266]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.266]                       search = base::search(), system = base::Sys.info())
[10:34:45.266]                   }
[10:34:45.266]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.266]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.266]                     cond$call), session = sessionInformation(), 
[10:34:45.266]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.266]                   signalCondition(cond)
[10:34:45.266]                 }
[10:34:45.266]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.266]                 "immediateCondition"))) {
[10:34:45.266]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.266]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.266]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.266]                   if (TRUE && !signal) {
[10:34:45.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.266]                     {
[10:34:45.266]                       inherits <- base::inherits
[10:34:45.266]                       invokeRestart <- base::invokeRestart
[10:34:45.266]                       is.null <- base::is.null
[10:34:45.266]                       muffled <- FALSE
[10:34:45.266]                       if (inherits(cond, "message")) {
[10:34:45.266]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.266]                         if (muffled) 
[10:34:45.266]                           invokeRestart("muffleMessage")
[10:34:45.266]                       }
[10:34:45.266]                       else if (inherits(cond, "warning")) {
[10:34:45.266]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.266]                         if (muffled) 
[10:34:45.266]                           invokeRestart("muffleWarning")
[10:34:45.266]                       }
[10:34:45.266]                       else if (inherits(cond, "condition")) {
[10:34:45.266]                         if (!is.null(pattern)) {
[10:34:45.266]                           computeRestarts <- base::computeRestarts
[10:34:45.266]                           grepl <- base::grepl
[10:34:45.266]                           restarts <- computeRestarts(cond)
[10:34:45.266]                           for (restart in restarts) {
[10:34:45.266]                             name <- restart$name
[10:34:45.266]                             if (is.null(name)) 
[10:34:45.266]                               next
[10:34:45.266]                             if (!grepl(pattern, name)) 
[10:34:45.266]                               next
[10:34:45.266]                             invokeRestart(restart)
[10:34:45.266]                             muffled <- TRUE
[10:34:45.266]                             break
[10:34:45.266]                           }
[10:34:45.266]                         }
[10:34:45.266]                       }
[10:34:45.266]                       invisible(muffled)
[10:34:45.266]                     }
[10:34:45.266]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.266]                   }
[10:34:45.266]                 }
[10:34:45.266]                 else {
[10:34:45.266]                   if (TRUE) {
[10:34:45.266]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.266]                     {
[10:34:45.266]                       inherits <- base::inherits
[10:34:45.266]                       invokeRestart <- base::invokeRestart
[10:34:45.266]                       is.null <- base::is.null
[10:34:45.266]                       muffled <- FALSE
[10:34:45.266]                       if (inherits(cond, "message")) {
[10:34:45.266]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.266]                         if (muffled) 
[10:34:45.266]                           invokeRestart("muffleMessage")
[10:34:45.266]                       }
[10:34:45.266]                       else if (inherits(cond, "warning")) {
[10:34:45.266]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.266]                         if (muffled) 
[10:34:45.266]                           invokeRestart("muffleWarning")
[10:34:45.266]                       }
[10:34:45.266]                       else if (inherits(cond, "condition")) {
[10:34:45.266]                         if (!is.null(pattern)) {
[10:34:45.266]                           computeRestarts <- base::computeRestarts
[10:34:45.266]                           grepl <- base::grepl
[10:34:45.266]                           restarts <- computeRestarts(cond)
[10:34:45.266]                           for (restart in restarts) {
[10:34:45.266]                             name <- restart$name
[10:34:45.266]                             if (is.null(name)) 
[10:34:45.266]                               next
[10:34:45.266]                             if (!grepl(pattern, name)) 
[10:34:45.266]                               next
[10:34:45.266]                             invokeRestart(restart)
[10:34:45.266]                             muffled <- TRUE
[10:34:45.266]                             break
[10:34:45.266]                           }
[10:34:45.266]                         }
[10:34:45.266]                       }
[10:34:45.266]                       invisible(muffled)
[10:34:45.266]                     }
[10:34:45.266]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.266]                   }
[10:34:45.266]                 }
[10:34:45.266]             }
[10:34:45.266]         }))
[10:34:45.266]     }, error = function(ex) {
[10:34:45.266]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.266]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.266]                 ...future.rng), started = ...future.startTime, 
[10:34:45.266]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.266]             version = "1.8"), class = "FutureResult")
[10:34:45.266]     }, finally = {
[10:34:45.266]         if (!identical(...future.workdir, getwd())) 
[10:34:45.266]             setwd(...future.workdir)
[10:34:45.266]         {
[10:34:45.266]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.266]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.266]             }
[10:34:45.266]             base::options(...future.oldOptions)
[10:34:45.266]             if (.Platform$OS.type == "windows") {
[10:34:45.266]                 old_names <- names(...future.oldEnvVars)
[10:34:45.266]                 envs <- base::Sys.getenv()
[10:34:45.266]                 names <- names(envs)
[10:34:45.266]                 common <- intersect(names, old_names)
[10:34:45.266]                 added <- setdiff(names, old_names)
[10:34:45.266]                 removed <- setdiff(old_names, names)
[10:34:45.266]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.266]                   envs[common]]
[10:34:45.266]                 NAMES <- toupper(changed)
[10:34:45.266]                 args <- list()
[10:34:45.266]                 for (kk in seq_along(NAMES)) {
[10:34:45.266]                   name <- changed[[kk]]
[10:34:45.266]                   NAME <- NAMES[[kk]]
[10:34:45.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.266]                     next
[10:34:45.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.266]                 }
[10:34:45.266]                 NAMES <- toupper(added)
[10:34:45.266]                 for (kk in seq_along(NAMES)) {
[10:34:45.266]                   name <- added[[kk]]
[10:34:45.266]                   NAME <- NAMES[[kk]]
[10:34:45.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.266]                     next
[10:34:45.266]                   args[[name]] <- ""
[10:34:45.266]                 }
[10:34:45.266]                 NAMES <- toupper(removed)
[10:34:45.266]                 for (kk in seq_along(NAMES)) {
[10:34:45.266]                   name <- removed[[kk]]
[10:34:45.266]                   NAME <- NAMES[[kk]]
[10:34:45.266]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.266]                     next
[10:34:45.266]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.266]                 }
[10:34:45.266]                 if (length(args) > 0) 
[10:34:45.266]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.266]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.266]             }
[10:34:45.266]             else {
[10:34:45.266]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.266]             }
[10:34:45.266]             {
[10:34:45.266]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.266]                   0L) {
[10:34:45.266]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.266]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.266]                   base::options(opts)
[10:34:45.266]                 }
[10:34:45.266]                 {
[10:34:45.266]                   {
[10:34:45.266]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.266]                     NULL
[10:34:45.266]                   }
[10:34:45.266]                   options(future.plan = NULL)
[10:34:45.266]                   if (is.na(NA_character_)) 
[10:34:45.266]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.266]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.266]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.266]                     .init = FALSE)
[10:34:45.266]                 }
[10:34:45.266]             }
[10:34:45.266]         }
[10:34:45.266]     })
[10:34:45.266]     if (TRUE) {
[10:34:45.266]         base::sink(type = "output", split = FALSE)
[10:34:45.266]         if (TRUE) {
[10:34:45.266]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.266]         }
[10:34:45.266]         else {
[10:34:45.266]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.266]         }
[10:34:45.266]         base::close(...future.stdout)
[10:34:45.266]         ...future.stdout <- NULL
[10:34:45.266]     }
[10:34:45.266]     ...future.result$conditions <- ...future.conditions
[10:34:45.266]     ...future.result$finished <- base::Sys.time()
[10:34:45.266]     ...future.result
[10:34:45.266] }
[10:34:45.269] MultisessionFuture started
[10:34:45.269] - Launch lazy future ... done
[10:34:45.269] run() for ‘MultisessionFuture’ ... done
[10:34:45.270] result() for ClusterFuture ...
[10:34:45.270] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.270] - Validating connection of MultisessionFuture
[10:34:45.271] - received message: FutureResult
[10:34:45.271] - Received FutureResult
[10:34:45.272] - Erased future from FutureRegistry
[10:34:45.274] result() for ClusterFuture ...
[10:34:45.274] - result already collected: FutureResult
[10:34:45.274] result() for ClusterFuture ... done
[10:34:45.274] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.274] result() for ClusterFuture ... done
[10:34:45.274] result() for ClusterFuture ...
[10:34:45.274] - result already collected: FutureResult
[10:34:45.274] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[10:34:45.275] getGlobalsAndPackages() ...
[10:34:45.275] Searching for globals...
[10:34:45.275] - globals found: [1] ‘print’
[10:34:45.275] Searching for globals ... DONE
[10:34:45.275] Resolving globals: FALSE
[10:34:45.276] 
[10:34:45.276] 
[10:34:45.276] getGlobalsAndPackages() ... DONE
[10:34:45.276] run() for ‘Future’ ...
[10:34:45.276] - state: ‘created’
[10:34:45.276] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.290] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.290] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.290]   - Field: ‘node’
[10:34:45.290]   - Field: ‘label’
[10:34:45.290]   - Field: ‘local’
[10:34:45.290]   - Field: ‘owner’
[10:34:45.291]   - Field: ‘envir’
[10:34:45.291]   - Field: ‘workers’
[10:34:45.291]   - Field: ‘packages’
[10:34:45.291]   - Field: ‘gc’
[10:34:45.291]   - Field: ‘conditions’
[10:34:45.291]   - Field: ‘persistent’
[10:34:45.291]   - Field: ‘expr’
[10:34:45.291]   - Field: ‘uuid’
[10:34:45.291]   - Field: ‘seed’
[10:34:45.291]   - Field: ‘version’
[10:34:45.291]   - Field: ‘result’
[10:34:45.292]   - Field: ‘asynchronous’
[10:34:45.292]   - Field: ‘calls’
[10:34:45.292]   - Field: ‘globals’
[10:34:45.292]   - Field: ‘stdout’
[10:34:45.292]   - Field: ‘earlySignal’
[10:34:45.292]   - Field: ‘lazy’
[10:34:45.292]   - Field: ‘state’
[10:34:45.292] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.292] - Launch lazy future ...
[10:34:45.293] Packages needed by the future expression (n = 0): <none>
[10:34:45.293] Packages needed by future strategies (n = 0): <none>
[10:34:45.293] {
[10:34:45.293]     {
[10:34:45.293]         {
[10:34:45.293]             ...future.startTime <- base::Sys.time()
[10:34:45.293]             {
[10:34:45.293]                 {
[10:34:45.293]                   {
[10:34:45.293]                     {
[10:34:45.293]                       base::local({
[10:34:45.293]                         has_future <- base::requireNamespace("future", 
[10:34:45.293]                           quietly = TRUE)
[10:34:45.293]                         if (has_future) {
[10:34:45.293]                           ns <- base::getNamespace("future")
[10:34:45.293]                           version <- ns[[".package"]][["version"]]
[10:34:45.293]                           if (is.null(version)) 
[10:34:45.293]                             version <- utils::packageVersion("future")
[10:34:45.293]                         }
[10:34:45.293]                         else {
[10:34:45.293]                           version <- NULL
[10:34:45.293]                         }
[10:34:45.293]                         if (!has_future || version < "1.8.0") {
[10:34:45.293]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.293]                             "", base::R.version$version.string), 
[10:34:45.293]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:45.293]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:45.293]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.293]                               "release", "version")], collapse = " "), 
[10:34:45.293]                             hostname = base::Sys.info()[["nodename"]])
[10:34:45.293]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.293]                             info)
[10:34:45.293]                           info <- base::paste(info, collapse = "; ")
[10:34:45.293]                           if (!has_future) {
[10:34:45.293]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.293]                               info)
[10:34:45.293]                           }
[10:34:45.293]                           else {
[10:34:45.293]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.293]                               info, version)
[10:34:45.293]                           }
[10:34:45.293]                           base::stop(msg)
[10:34:45.293]                         }
[10:34:45.293]                       })
[10:34:45.293]                     }
[10:34:45.293]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.293]                     base::options(mc.cores = 1L)
[10:34:45.293]                   }
[10:34:45.293]                   ...future.strategy.old <- future::plan("list")
[10:34:45.293]                   options(future.plan = NULL)
[10:34:45.293]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.293]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.293]                 }
[10:34:45.293]                 ...future.workdir <- getwd()
[10:34:45.293]             }
[10:34:45.293]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.293]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.293]         }
[10:34:45.293]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.293]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.293]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.293]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.293]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.293]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.293]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.293]             base::names(...future.oldOptions))
[10:34:45.293]     }
[10:34:45.293]     if (FALSE) {
[10:34:45.293]     }
[10:34:45.293]     else {
[10:34:45.293]         if (TRUE) {
[10:34:45.293]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.293]                 open = "w")
[10:34:45.293]         }
[10:34:45.293]         else {
[10:34:45.293]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.293]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.293]         }
[10:34:45.293]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.293]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.293]             base::sink(type = "output", split = FALSE)
[10:34:45.293]             base::close(...future.stdout)
[10:34:45.293]         }, add = TRUE)
[10:34:45.293]     }
[10:34:45.293]     ...future.frame <- base::sys.nframe()
[10:34:45.293]     ...future.conditions <- base::list()
[10:34:45.293]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.293]     if (FALSE) {
[10:34:45.293]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.293]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.293]     }
[10:34:45.293]     ...future.result <- base::tryCatch({
[10:34:45.293]         base::withCallingHandlers({
[10:34:45.293]             ...future.value <- base::withVisible(base::local({
[10:34:45.293]                 ...future.makeSendCondition <- base::local({
[10:34:45.293]                   sendCondition <- NULL
[10:34:45.293]                   function(frame = 1L) {
[10:34:45.293]                     if (is.function(sendCondition)) 
[10:34:45.293]                       return(sendCondition)
[10:34:45.293]                     ns <- getNamespace("parallel")
[10:34:45.293]                     if (exists("sendData", mode = "function", 
[10:34:45.293]                       envir = ns)) {
[10:34:45.293]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.293]                         envir = ns)
[10:34:45.293]                       envir <- sys.frame(frame)
[10:34:45.293]                       master <- NULL
[10:34:45.293]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.293]                         !identical(envir, emptyenv())) {
[10:34:45.293]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.293]                           inherits = FALSE)) {
[10:34:45.293]                           master <- get("master", mode = "list", 
[10:34:45.293]                             envir = envir, inherits = FALSE)
[10:34:45.293]                           if (inherits(master, c("SOCKnode", 
[10:34:45.293]                             "SOCK0node"))) {
[10:34:45.293]                             sendCondition <<- function(cond) {
[10:34:45.293]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.293]                                 success = TRUE)
[10:34:45.293]                               parallel_sendData(master, data)
[10:34:45.293]                             }
[10:34:45.293]                             return(sendCondition)
[10:34:45.293]                           }
[10:34:45.293]                         }
[10:34:45.293]                         frame <- frame + 1L
[10:34:45.293]                         envir <- sys.frame(frame)
[10:34:45.293]                       }
[10:34:45.293]                     }
[10:34:45.293]                     sendCondition <<- function(cond) NULL
[10:34:45.293]                   }
[10:34:45.293]                 })
[10:34:45.293]                 withCallingHandlers({
[10:34:45.293]                   print(42)
[10:34:45.293]                 }, immediateCondition = function(cond) {
[10:34:45.293]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.293]                   sendCondition(cond)
[10:34:45.293]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.293]                   {
[10:34:45.293]                     inherits <- base::inherits
[10:34:45.293]                     invokeRestart <- base::invokeRestart
[10:34:45.293]                     is.null <- base::is.null
[10:34:45.293]                     muffled <- FALSE
[10:34:45.293]                     if (inherits(cond, "message")) {
[10:34:45.293]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.293]                       if (muffled) 
[10:34:45.293]                         invokeRestart("muffleMessage")
[10:34:45.293]                     }
[10:34:45.293]                     else if (inherits(cond, "warning")) {
[10:34:45.293]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.293]                       if (muffled) 
[10:34:45.293]                         invokeRestart("muffleWarning")
[10:34:45.293]                     }
[10:34:45.293]                     else if (inherits(cond, "condition")) {
[10:34:45.293]                       if (!is.null(pattern)) {
[10:34:45.293]                         computeRestarts <- base::computeRestarts
[10:34:45.293]                         grepl <- base::grepl
[10:34:45.293]                         restarts <- computeRestarts(cond)
[10:34:45.293]                         for (restart in restarts) {
[10:34:45.293]                           name <- restart$name
[10:34:45.293]                           if (is.null(name)) 
[10:34:45.293]                             next
[10:34:45.293]                           if (!grepl(pattern, name)) 
[10:34:45.293]                             next
[10:34:45.293]                           invokeRestart(restart)
[10:34:45.293]                           muffled <- TRUE
[10:34:45.293]                           break
[10:34:45.293]                         }
[10:34:45.293]                       }
[10:34:45.293]                     }
[10:34:45.293]                     invisible(muffled)
[10:34:45.293]                   }
[10:34:45.293]                   muffleCondition(cond)
[10:34:45.293]                 })
[10:34:45.293]             }))
[10:34:45.293]             future::FutureResult(value = ...future.value$value, 
[10:34:45.293]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.293]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.293]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.293]                     ...future.globalenv.names))
[10:34:45.293]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.293]         }, condition = base::local({
[10:34:45.293]             c <- base::c
[10:34:45.293]             inherits <- base::inherits
[10:34:45.293]             invokeRestart <- base::invokeRestart
[10:34:45.293]             length <- base::length
[10:34:45.293]             list <- base::list
[10:34:45.293]             seq.int <- base::seq.int
[10:34:45.293]             signalCondition <- base::signalCondition
[10:34:45.293]             sys.calls <- base::sys.calls
[10:34:45.293]             `[[` <- base::`[[`
[10:34:45.293]             `+` <- base::`+`
[10:34:45.293]             `<<-` <- base::`<<-`
[10:34:45.293]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.293]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.293]                   3L)]
[10:34:45.293]             }
[10:34:45.293]             function(cond) {
[10:34:45.293]                 is_error <- inherits(cond, "error")
[10:34:45.293]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.293]                   NULL)
[10:34:45.293]                 if (is_error) {
[10:34:45.293]                   sessionInformation <- function() {
[10:34:45.293]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.293]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.293]                       search = base::search(), system = base::Sys.info())
[10:34:45.293]                   }
[10:34:45.293]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.293]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.293]                     cond$call), session = sessionInformation(), 
[10:34:45.293]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.293]                   signalCondition(cond)
[10:34:45.293]                 }
[10:34:45.293]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.293]                 "immediateCondition"))) {
[10:34:45.293]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.293]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.293]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.293]                   if (TRUE && !signal) {
[10:34:45.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.293]                     {
[10:34:45.293]                       inherits <- base::inherits
[10:34:45.293]                       invokeRestart <- base::invokeRestart
[10:34:45.293]                       is.null <- base::is.null
[10:34:45.293]                       muffled <- FALSE
[10:34:45.293]                       if (inherits(cond, "message")) {
[10:34:45.293]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.293]                         if (muffled) 
[10:34:45.293]                           invokeRestart("muffleMessage")
[10:34:45.293]                       }
[10:34:45.293]                       else if (inherits(cond, "warning")) {
[10:34:45.293]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.293]                         if (muffled) 
[10:34:45.293]                           invokeRestart("muffleWarning")
[10:34:45.293]                       }
[10:34:45.293]                       else if (inherits(cond, "condition")) {
[10:34:45.293]                         if (!is.null(pattern)) {
[10:34:45.293]                           computeRestarts <- base::computeRestarts
[10:34:45.293]                           grepl <- base::grepl
[10:34:45.293]                           restarts <- computeRestarts(cond)
[10:34:45.293]                           for (restart in restarts) {
[10:34:45.293]                             name <- restart$name
[10:34:45.293]                             if (is.null(name)) 
[10:34:45.293]                               next
[10:34:45.293]                             if (!grepl(pattern, name)) 
[10:34:45.293]                               next
[10:34:45.293]                             invokeRestart(restart)
[10:34:45.293]                             muffled <- TRUE
[10:34:45.293]                             break
[10:34:45.293]                           }
[10:34:45.293]                         }
[10:34:45.293]                       }
[10:34:45.293]                       invisible(muffled)
[10:34:45.293]                     }
[10:34:45.293]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.293]                   }
[10:34:45.293]                 }
[10:34:45.293]                 else {
[10:34:45.293]                   if (TRUE) {
[10:34:45.293]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.293]                     {
[10:34:45.293]                       inherits <- base::inherits
[10:34:45.293]                       invokeRestart <- base::invokeRestart
[10:34:45.293]                       is.null <- base::is.null
[10:34:45.293]                       muffled <- FALSE
[10:34:45.293]                       if (inherits(cond, "message")) {
[10:34:45.293]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.293]                         if (muffled) 
[10:34:45.293]                           invokeRestart("muffleMessage")
[10:34:45.293]                       }
[10:34:45.293]                       else if (inherits(cond, "warning")) {
[10:34:45.293]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.293]                         if (muffled) 
[10:34:45.293]                           invokeRestart("muffleWarning")
[10:34:45.293]                       }
[10:34:45.293]                       else if (inherits(cond, "condition")) {
[10:34:45.293]                         if (!is.null(pattern)) {
[10:34:45.293]                           computeRestarts <- base::computeRestarts
[10:34:45.293]                           grepl <- base::grepl
[10:34:45.293]                           restarts <- computeRestarts(cond)
[10:34:45.293]                           for (restart in restarts) {
[10:34:45.293]                             name <- restart$name
[10:34:45.293]                             if (is.null(name)) 
[10:34:45.293]                               next
[10:34:45.293]                             if (!grepl(pattern, name)) 
[10:34:45.293]                               next
[10:34:45.293]                             invokeRestart(restart)
[10:34:45.293]                             muffled <- TRUE
[10:34:45.293]                             break
[10:34:45.293]                           }
[10:34:45.293]                         }
[10:34:45.293]                       }
[10:34:45.293]                       invisible(muffled)
[10:34:45.293]                     }
[10:34:45.293]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.293]                   }
[10:34:45.293]                 }
[10:34:45.293]             }
[10:34:45.293]         }))
[10:34:45.293]     }, error = function(ex) {
[10:34:45.293]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.293]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.293]                 ...future.rng), started = ...future.startTime, 
[10:34:45.293]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.293]             version = "1.8"), class = "FutureResult")
[10:34:45.293]     }, finally = {
[10:34:45.293]         if (!identical(...future.workdir, getwd())) 
[10:34:45.293]             setwd(...future.workdir)
[10:34:45.293]         {
[10:34:45.293]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.293]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.293]             }
[10:34:45.293]             base::options(...future.oldOptions)
[10:34:45.293]             if (.Platform$OS.type == "windows") {
[10:34:45.293]                 old_names <- names(...future.oldEnvVars)
[10:34:45.293]                 envs <- base::Sys.getenv()
[10:34:45.293]                 names <- names(envs)
[10:34:45.293]                 common <- intersect(names, old_names)
[10:34:45.293]                 added <- setdiff(names, old_names)
[10:34:45.293]                 removed <- setdiff(old_names, names)
[10:34:45.293]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.293]                   envs[common]]
[10:34:45.293]                 NAMES <- toupper(changed)
[10:34:45.293]                 args <- list()
[10:34:45.293]                 for (kk in seq_along(NAMES)) {
[10:34:45.293]                   name <- changed[[kk]]
[10:34:45.293]                   NAME <- NAMES[[kk]]
[10:34:45.293]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.293]                     next
[10:34:45.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.293]                 }
[10:34:45.293]                 NAMES <- toupper(added)
[10:34:45.293]                 for (kk in seq_along(NAMES)) {
[10:34:45.293]                   name <- added[[kk]]
[10:34:45.293]                   NAME <- NAMES[[kk]]
[10:34:45.293]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.293]                     next
[10:34:45.293]                   args[[name]] <- ""
[10:34:45.293]                 }
[10:34:45.293]                 NAMES <- toupper(removed)
[10:34:45.293]                 for (kk in seq_along(NAMES)) {
[10:34:45.293]                   name <- removed[[kk]]
[10:34:45.293]                   NAME <- NAMES[[kk]]
[10:34:45.293]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.293]                     next
[10:34:45.293]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.293]                 }
[10:34:45.293]                 if (length(args) > 0) 
[10:34:45.293]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.293]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.293]             }
[10:34:45.293]             else {
[10:34:45.293]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.293]             }
[10:34:45.293]             {
[10:34:45.293]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.293]                   0L) {
[10:34:45.293]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.293]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.293]                   base::options(opts)
[10:34:45.293]                 }
[10:34:45.293]                 {
[10:34:45.293]                   {
[10:34:45.293]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.293]                     NULL
[10:34:45.293]                   }
[10:34:45.293]                   options(future.plan = NULL)
[10:34:45.293]                   if (is.na(NA_character_)) 
[10:34:45.293]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.293]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.293]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.293]                     .init = FALSE)
[10:34:45.293]                 }
[10:34:45.293]             }
[10:34:45.293]         }
[10:34:45.293]     })
[10:34:45.293]     if (TRUE) {
[10:34:45.293]         base::sink(type = "output", split = FALSE)
[10:34:45.293]         if (TRUE) {
[10:34:45.293]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.293]         }
[10:34:45.293]         else {
[10:34:45.293]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.293]         }
[10:34:45.293]         base::close(...future.stdout)
[10:34:45.293]         ...future.stdout <- NULL
[10:34:45.293]     }
[10:34:45.293]     ...future.result$conditions <- ...future.conditions
[10:34:45.293]     ...future.result$finished <- base::Sys.time()
[10:34:45.293]     ...future.result
[10:34:45.293] }
[10:34:45.296] MultisessionFuture started
[10:34:45.296] - Launch lazy future ... done
[10:34:45.296] run() for ‘MultisessionFuture’ ... done
[10:34:45.296] result() for ClusterFuture ...
[10:34:45.296] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.296] - Validating connection of MultisessionFuture
[10:34:45.297] - received message: FutureResult
[10:34:45.297] - Received FutureResult
[10:34:45.297] - Erased future from FutureRegistry
[10:34:45.298] result() for ClusterFuture ...
[10:34:45.298] - result already collected: FutureResult
[10:34:45.298] result() for ClusterFuture ... done
[10:34:45.298] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.298] result() for ClusterFuture ... done
[10:34:45.298] result() for ClusterFuture ...
[10:34:45.298] - result already collected: FutureResult
[10:34:45.298] result() for ClusterFuture ... done
[10:34:45.298] result() for ClusterFuture ...
[10:34:45.298] - result already collected: FutureResult
[10:34:45.298] result() for ClusterFuture ... done
[1] 42
[10:34:45.299] result() for ClusterFuture ...
[10:34:45.299] - result already collected: FutureResult
[10:34:45.299] result() for ClusterFuture ... done
- stdout = FALSE
[10:34:45.299] getGlobalsAndPackages() ...
[10:34:45.299] Searching for globals...
[10:34:45.302] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.302] Searching for globals ... DONE
[10:34:45.302] Resolving globals: FALSE
[10:34:45.302] 
[10:34:45.303] - packages: [1] ‘utils’
[10:34:45.303] getGlobalsAndPackages() ... DONE
[10:34:45.303] run() for ‘Future’ ...
[10:34:45.303] - state: ‘created’
[10:34:45.303] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.317] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.317] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.317]   - Field: ‘node’
[10:34:45.317]   - Field: ‘label’
[10:34:45.317]   - Field: ‘local’
[10:34:45.317]   - Field: ‘owner’
[10:34:45.317]   - Field: ‘envir’
[10:34:45.318]   - Field: ‘workers’
[10:34:45.318]   - Field: ‘packages’
[10:34:45.318]   - Field: ‘gc’
[10:34:45.318]   - Field: ‘conditions’
[10:34:45.318]   - Field: ‘persistent’
[10:34:45.318]   - Field: ‘expr’
[10:34:45.318]   - Field: ‘uuid’
[10:34:45.318]   - Field: ‘seed’
[10:34:45.318]   - Field: ‘version’
[10:34:45.318]   - Field: ‘result’
[10:34:45.318]   - Field: ‘asynchronous’
[10:34:45.319]   - Field: ‘calls’
[10:34:45.319]   - Field: ‘globals’
[10:34:45.319]   - Field: ‘stdout’
[10:34:45.319]   - Field: ‘earlySignal’
[10:34:45.319]   - Field: ‘lazy’
[10:34:45.319]   - Field: ‘state’
[10:34:45.319] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.319] - Launch lazy future ...
[10:34:45.319] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.320] Packages needed by future strategies (n = 0): <none>
[10:34:45.320] {
[10:34:45.320]     {
[10:34:45.320]         {
[10:34:45.320]             ...future.startTime <- base::Sys.time()
[10:34:45.320]             {
[10:34:45.320]                 {
[10:34:45.320]                   {
[10:34:45.320]                     {
[10:34:45.320]                       {
[10:34:45.320]                         base::local({
[10:34:45.320]                           has_future <- base::requireNamespace("future", 
[10:34:45.320]                             quietly = TRUE)
[10:34:45.320]                           if (has_future) {
[10:34:45.320]                             ns <- base::getNamespace("future")
[10:34:45.320]                             version <- ns[[".package"]][["version"]]
[10:34:45.320]                             if (is.null(version)) 
[10:34:45.320]                               version <- utils::packageVersion("future")
[10:34:45.320]                           }
[10:34:45.320]                           else {
[10:34:45.320]                             version <- NULL
[10:34:45.320]                           }
[10:34:45.320]                           if (!has_future || version < "1.8.0") {
[10:34:45.320]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.320]                               "", base::R.version$version.string), 
[10:34:45.320]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.320]                                 base::R.version$platform, 8 * 
[10:34:45.320]                                   base::.Machine$sizeof.pointer), 
[10:34:45.320]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.320]                                 "release", "version")], collapse = " "), 
[10:34:45.320]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.320]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.320]                               info)
[10:34:45.320]                             info <- base::paste(info, collapse = "; ")
[10:34:45.320]                             if (!has_future) {
[10:34:45.320]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.320]                                 info)
[10:34:45.320]                             }
[10:34:45.320]                             else {
[10:34:45.320]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.320]                                 info, version)
[10:34:45.320]                             }
[10:34:45.320]                             base::stop(msg)
[10:34:45.320]                           }
[10:34:45.320]                         })
[10:34:45.320]                       }
[10:34:45.320]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.320]                       base::options(mc.cores = 1L)
[10:34:45.320]                     }
[10:34:45.320]                     base::local({
[10:34:45.320]                       for (pkg in "utils") {
[10:34:45.320]                         base::loadNamespace(pkg)
[10:34:45.320]                         base::library(pkg, character.only = TRUE)
[10:34:45.320]                       }
[10:34:45.320]                     })
[10:34:45.320]                   }
[10:34:45.320]                   ...future.strategy.old <- future::plan("list")
[10:34:45.320]                   options(future.plan = NULL)
[10:34:45.320]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.320]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.320]                 }
[10:34:45.320]                 ...future.workdir <- getwd()
[10:34:45.320]             }
[10:34:45.320]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.320]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.320]         }
[10:34:45.320]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.320]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.320]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.320]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.320]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.320]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.320]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.320]             base::names(...future.oldOptions))
[10:34:45.320]     }
[10:34:45.320]     if (FALSE) {
[10:34:45.320]     }
[10:34:45.320]     else {
[10:34:45.320]         if (FALSE) {
[10:34:45.320]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.320]                 open = "w")
[10:34:45.320]         }
[10:34:45.320]         else {
[10:34:45.320]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.320]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.320]         }
[10:34:45.320]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.320]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.320]             base::sink(type = "output", split = FALSE)
[10:34:45.320]             base::close(...future.stdout)
[10:34:45.320]         }, add = TRUE)
[10:34:45.320]     }
[10:34:45.320]     ...future.frame <- base::sys.nframe()
[10:34:45.320]     ...future.conditions <- base::list()
[10:34:45.320]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.320]     if (FALSE) {
[10:34:45.320]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.320]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.320]     }
[10:34:45.320]     ...future.result <- base::tryCatch({
[10:34:45.320]         base::withCallingHandlers({
[10:34:45.320]             ...future.value <- base::withVisible(base::local({
[10:34:45.320]                 ...future.makeSendCondition <- base::local({
[10:34:45.320]                   sendCondition <- NULL
[10:34:45.320]                   function(frame = 1L) {
[10:34:45.320]                     if (is.function(sendCondition)) 
[10:34:45.320]                       return(sendCondition)
[10:34:45.320]                     ns <- getNamespace("parallel")
[10:34:45.320]                     if (exists("sendData", mode = "function", 
[10:34:45.320]                       envir = ns)) {
[10:34:45.320]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.320]                         envir = ns)
[10:34:45.320]                       envir <- sys.frame(frame)
[10:34:45.320]                       master <- NULL
[10:34:45.320]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.320]                         !identical(envir, emptyenv())) {
[10:34:45.320]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.320]                           inherits = FALSE)) {
[10:34:45.320]                           master <- get("master", mode = "list", 
[10:34:45.320]                             envir = envir, inherits = FALSE)
[10:34:45.320]                           if (inherits(master, c("SOCKnode", 
[10:34:45.320]                             "SOCK0node"))) {
[10:34:45.320]                             sendCondition <<- function(cond) {
[10:34:45.320]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.320]                                 success = TRUE)
[10:34:45.320]                               parallel_sendData(master, data)
[10:34:45.320]                             }
[10:34:45.320]                             return(sendCondition)
[10:34:45.320]                           }
[10:34:45.320]                         }
[10:34:45.320]                         frame <- frame + 1L
[10:34:45.320]                         envir <- sys.frame(frame)
[10:34:45.320]                       }
[10:34:45.320]                     }
[10:34:45.320]                     sendCondition <<- function(cond) NULL
[10:34:45.320]                   }
[10:34:45.320]                 })
[10:34:45.320]                 withCallingHandlers({
[10:34:45.320]                   {
[10:34:45.320]                     print(1:50)
[10:34:45.320]                     str(1:50)
[10:34:45.320]                     cat(letters, sep = "-")
[10:34:45.320]                     cat(1:6, collapse = "\n")
[10:34:45.320]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.320]                     42L
[10:34:45.320]                   }
[10:34:45.320]                 }, immediateCondition = function(cond) {
[10:34:45.320]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.320]                   sendCondition(cond)
[10:34:45.320]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.320]                   {
[10:34:45.320]                     inherits <- base::inherits
[10:34:45.320]                     invokeRestart <- base::invokeRestart
[10:34:45.320]                     is.null <- base::is.null
[10:34:45.320]                     muffled <- FALSE
[10:34:45.320]                     if (inherits(cond, "message")) {
[10:34:45.320]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.320]                       if (muffled) 
[10:34:45.320]                         invokeRestart("muffleMessage")
[10:34:45.320]                     }
[10:34:45.320]                     else if (inherits(cond, "warning")) {
[10:34:45.320]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.320]                       if (muffled) 
[10:34:45.320]                         invokeRestart("muffleWarning")
[10:34:45.320]                     }
[10:34:45.320]                     else if (inherits(cond, "condition")) {
[10:34:45.320]                       if (!is.null(pattern)) {
[10:34:45.320]                         computeRestarts <- base::computeRestarts
[10:34:45.320]                         grepl <- base::grepl
[10:34:45.320]                         restarts <- computeRestarts(cond)
[10:34:45.320]                         for (restart in restarts) {
[10:34:45.320]                           name <- restart$name
[10:34:45.320]                           if (is.null(name)) 
[10:34:45.320]                             next
[10:34:45.320]                           if (!grepl(pattern, name)) 
[10:34:45.320]                             next
[10:34:45.320]                           invokeRestart(restart)
[10:34:45.320]                           muffled <- TRUE
[10:34:45.320]                           break
[10:34:45.320]                         }
[10:34:45.320]                       }
[10:34:45.320]                     }
[10:34:45.320]                     invisible(muffled)
[10:34:45.320]                   }
[10:34:45.320]                   muffleCondition(cond)
[10:34:45.320]                 })
[10:34:45.320]             }))
[10:34:45.320]             future::FutureResult(value = ...future.value$value, 
[10:34:45.320]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.320]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.320]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.320]                     ...future.globalenv.names))
[10:34:45.320]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.320]         }, condition = base::local({
[10:34:45.320]             c <- base::c
[10:34:45.320]             inherits <- base::inherits
[10:34:45.320]             invokeRestart <- base::invokeRestart
[10:34:45.320]             length <- base::length
[10:34:45.320]             list <- base::list
[10:34:45.320]             seq.int <- base::seq.int
[10:34:45.320]             signalCondition <- base::signalCondition
[10:34:45.320]             sys.calls <- base::sys.calls
[10:34:45.320]             `[[` <- base::`[[`
[10:34:45.320]             `+` <- base::`+`
[10:34:45.320]             `<<-` <- base::`<<-`
[10:34:45.320]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.320]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.320]                   3L)]
[10:34:45.320]             }
[10:34:45.320]             function(cond) {
[10:34:45.320]                 is_error <- inherits(cond, "error")
[10:34:45.320]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.320]                   NULL)
[10:34:45.320]                 if (is_error) {
[10:34:45.320]                   sessionInformation <- function() {
[10:34:45.320]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.320]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.320]                       search = base::search(), system = base::Sys.info())
[10:34:45.320]                   }
[10:34:45.320]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.320]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.320]                     cond$call), session = sessionInformation(), 
[10:34:45.320]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.320]                   signalCondition(cond)
[10:34:45.320]                 }
[10:34:45.320]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.320]                 "immediateCondition"))) {
[10:34:45.320]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.320]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.320]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.320]                   if (TRUE && !signal) {
[10:34:45.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.320]                     {
[10:34:45.320]                       inherits <- base::inherits
[10:34:45.320]                       invokeRestart <- base::invokeRestart
[10:34:45.320]                       is.null <- base::is.null
[10:34:45.320]                       muffled <- FALSE
[10:34:45.320]                       if (inherits(cond, "message")) {
[10:34:45.320]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.320]                         if (muffled) 
[10:34:45.320]                           invokeRestart("muffleMessage")
[10:34:45.320]                       }
[10:34:45.320]                       else if (inherits(cond, "warning")) {
[10:34:45.320]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.320]                         if (muffled) 
[10:34:45.320]                           invokeRestart("muffleWarning")
[10:34:45.320]                       }
[10:34:45.320]                       else if (inherits(cond, "condition")) {
[10:34:45.320]                         if (!is.null(pattern)) {
[10:34:45.320]                           computeRestarts <- base::computeRestarts
[10:34:45.320]                           grepl <- base::grepl
[10:34:45.320]                           restarts <- computeRestarts(cond)
[10:34:45.320]                           for (restart in restarts) {
[10:34:45.320]                             name <- restart$name
[10:34:45.320]                             if (is.null(name)) 
[10:34:45.320]                               next
[10:34:45.320]                             if (!grepl(pattern, name)) 
[10:34:45.320]                               next
[10:34:45.320]                             invokeRestart(restart)
[10:34:45.320]                             muffled <- TRUE
[10:34:45.320]                             break
[10:34:45.320]                           }
[10:34:45.320]                         }
[10:34:45.320]                       }
[10:34:45.320]                       invisible(muffled)
[10:34:45.320]                     }
[10:34:45.320]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.320]                   }
[10:34:45.320]                 }
[10:34:45.320]                 else {
[10:34:45.320]                   if (TRUE) {
[10:34:45.320]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.320]                     {
[10:34:45.320]                       inherits <- base::inherits
[10:34:45.320]                       invokeRestart <- base::invokeRestart
[10:34:45.320]                       is.null <- base::is.null
[10:34:45.320]                       muffled <- FALSE
[10:34:45.320]                       if (inherits(cond, "message")) {
[10:34:45.320]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.320]                         if (muffled) 
[10:34:45.320]                           invokeRestart("muffleMessage")
[10:34:45.320]                       }
[10:34:45.320]                       else if (inherits(cond, "warning")) {
[10:34:45.320]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.320]                         if (muffled) 
[10:34:45.320]                           invokeRestart("muffleWarning")
[10:34:45.320]                       }
[10:34:45.320]                       else if (inherits(cond, "condition")) {
[10:34:45.320]                         if (!is.null(pattern)) {
[10:34:45.320]                           computeRestarts <- base::computeRestarts
[10:34:45.320]                           grepl <- base::grepl
[10:34:45.320]                           restarts <- computeRestarts(cond)
[10:34:45.320]                           for (restart in restarts) {
[10:34:45.320]                             name <- restart$name
[10:34:45.320]                             if (is.null(name)) 
[10:34:45.320]                               next
[10:34:45.320]                             if (!grepl(pattern, name)) 
[10:34:45.320]                               next
[10:34:45.320]                             invokeRestart(restart)
[10:34:45.320]                             muffled <- TRUE
[10:34:45.320]                             break
[10:34:45.320]                           }
[10:34:45.320]                         }
[10:34:45.320]                       }
[10:34:45.320]                       invisible(muffled)
[10:34:45.320]                     }
[10:34:45.320]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.320]                   }
[10:34:45.320]                 }
[10:34:45.320]             }
[10:34:45.320]         }))
[10:34:45.320]     }, error = function(ex) {
[10:34:45.320]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.320]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.320]                 ...future.rng), started = ...future.startTime, 
[10:34:45.320]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.320]             version = "1.8"), class = "FutureResult")
[10:34:45.320]     }, finally = {
[10:34:45.320]         if (!identical(...future.workdir, getwd())) 
[10:34:45.320]             setwd(...future.workdir)
[10:34:45.320]         {
[10:34:45.320]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.320]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.320]             }
[10:34:45.320]             base::options(...future.oldOptions)
[10:34:45.320]             if (.Platform$OS.type == "windows") {
[10:34:45.320]                 old_names <- names(...future.oldEnvVars)
[10:34:45.320]                 envs <- base::Sys.getenv()
[10:34:45.320]                 names <- names(envs)
[10:34:45.320]                 common <- intersect(names, old_names)
[10:34:45.320]                 added <- setdiff(names, old_names)
[10:34:45.320]                 removed <- setdiff(old_names, names)
[10:34:45.320]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.320]                   envs[common]]
[10:34:45.320]                 NAMES <- toupper(changed)
[10:34:45.320]                 args <- list()
[10:34:45.320]                 for (kk in seq_along(NAMES)) {
[10:34:45.320]                   name <- changed[[kk]]
[10:34:45.320]                   NAME <- NAMES[[kk]]
[10:34:45.320]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.320]                     next
[10:34:45.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.320]                 }
[10:34:45.320]                 NAMES <- toupper(added)
[10:34:45.320]                 for (kk in seq_along(NAMES)) {
[10:34:45.320]                   name <- added[[kk]]
[10:34:45.320]                   NAME <- NAMES[[kk]]
[10:34:45.320]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.320]                     next
[10:34:45.320]                   args[[name]] <- ""
[10:34:45.320]                 }
[10:34:45.320]                 NAMES <- toupper(removed)
[10:34:45.320]                 for (kk in seq_along(NAMES)) {
[10:34:45.320]                   name <- removed[[kk]]
[10:34:45.320]                   NAME <- NAMES[[kk]]
[10:34:45.320]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.320]                     next
[10:34:45.320]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.320]                 }
[10:34:45.320]                 if (length(args) > 0) 
[10:34:45.320]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.320]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.320]             }
[10:34:45.320]             else {
[10:34:45.320]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.320]             }
[10:34:45.320]             {
[10:34:45.320]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.320]                   0L) {
[10:34:45.320]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.320]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.320]                   base::options(opts)
[10:34:45.320]                 }
[10:34:45.320]                 {
[10:34:45.320]                   {
[10:34:45.320]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.320]                     NULL
[10:34:45.320]                   }
[10:34:45.320]                   options(future.plan = NULL)
[10:34:45.320]                   if (is.na(NA_character_)) 
[10:34:45.320]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.320]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.320]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.320]                     .init = FALSE)
[10:34:45.320]                 }
[10:34:45.320]             }
[10:34:45.320]         }
[10:34:45.320]     })
[10:34:45.320]     if (TRUE) {
[10:34:45.320]         base::sink(type = "output", split = FALSE)
[10:34:45.320]         if (FALSE) {
[10:34:45.320]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.320]         }
[10:34:45.320]         else {
[10:34:45.320]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.320]         }
[10:34:45.320]         base::close(...future.stdout)
[10:34:45.320]         ...future.stdout <- NULL
[10:34:45.320]     }
[10:34:45.320]     ...future.result$conditions <- ...future.conditions
[10:34:45.320]     ...future.result$finished <- base::Sys.time()
[10:34:45.320]     ...future.result
[10:34:45.320] }
[10:34:45.323] MultisessionFuture started
[10:34:45.323] - Launch lazy future ... done
[10:34:45.323] run() for ‘MultisessionFuture’ ... done
[10:34:45.323] result() for ClusterFuture ...
[10:34:45.323] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.323] - Validating connection of MultisessionFuture
[10:34:45.325] - received message: FutureResult
[10:34:45.325] - Received FutureResult
[10:34:45.326] - Erased future from FutureRegistry
[10:34:45.326] result() for ClusterFuture ...
[10:34:45.326] - result already collected: FutureResult
[10:34:45.326] result() for ClusterFuture ... done
[10:34:45.326] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.326] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ session_uuid: chr "13804671-66af-7bf7-88c5-a92f4f39d19b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90216
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:45"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:45.334] result() for ClusterFuture ...
[10:34:45.334] - result already collected: FutureResult
[10:34:45.334] result() for ClusterFuture ... done
[10:34:45.334] result() for ClusterFuture ...
[10:34:45.334] - result already collected: FutureResult
[10:34:45.334] result() for ClusterFuture ... done
[10:34:45.334] getGlobalsAndPackages() ...
[10:34:45.334] Searching for globals...
[10:34:45.337] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.337] Searching for globals ... DONE
[10:34:45.337] Resolving globals: FALSE
[10:34:45.338] 
[10:34:45.338] - packages: [1] ‘utils’
[10:34:45.338] getGlobalsAndPackages() ... DONE
[10:34:45.338] run() for ‘Future’ ...
[10:34:45.338] - state: ‘created’
[10:34:45.339] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.352] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.352] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.352]   - Field: ‘node’
[10:34:45.352]   - Field: ‘label’
[10:34:45.352]   - Field: ‘local’
[10:34:45.352]   - Field: ‘owner’
[10:34:45.352]   - Field: ‘envir’
[10:34:45.353]   - Field: ‘workers’
[10:34:45.353]   - Field: ‘packages’
[10:34:45.353]   - Field: ‘gc’
[10:34:45.353]   - Field: ‘conditions’
[10:34:45.353]   - Field: ‘persistent’
[10:34:45.353]   - Field: ‘expr’
[10:34:45.353]   - Field: ‘uuid’
[10:34:45.353]   - Field: ‘seed’
[10:34:45.353]   - Field: ‘version’
[10:34:45.353]   - Field: ‘result’
[10:34:45.354]   - Field: ‘asynchronous’
[10:34:45.354]   - Field: ‘calls’
[10:34:45.354]   - Field: ‘globals’
[10:34:45.354]   - Field: ‘stdout’
[10:34:45.354]   - Field: ‘earlySignal’
[10:34:45.354]   - Field: ‘lazy’
[10:34:45.354]   - Field: ‘state’
[10:34:45.354] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.354] - Launch lazy future ...
[10:34:45.355] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.355] Packages needed by future strategies (n = 0): <none>
[10:34:45.355] {
[10:34:45.355]     {
[10:34:45.355]         {
[10:34:45.355]             ...future.startTime <- base::Sys.time()
[10:34:45.355]             {
[10:34:45.355]                 {
[10:34:45.355]                   {
[10:34:45.355]                     {
[10:34:45.355]                       {
[10:34:45.355]                         base::local({
[10:34:45.355]                           has_future <- base::requireNamespace("future", 
[10:34:45.355]                             quietly = TRUE)
[10:34:45.355]                           if (has_future) {
[10:34:45.355]                             ns <- base::getNamespace("future")
[10:34:45.355]                             version <- ns[[".package"]][["version"]]
[10:34:45.355]                             if (is.null(version)) 
[10:34:45.355]                               version <- utils::packageVersion("future")
[10:34:45.355]                           }
[10:34:45.355]                           else {
[10:34:45.355]                             version <- NULL
[10:34:45.355]                           }
[10:34:45.355]                           if (!has_future || version < "1.8.0") {
[10:34:45.355]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.355]                               "", base::R.version$version.string), 
[10:34:45.355]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.355]                                 base::R.version$platform, 8 * 
[10:34:45.355]                                   base::.Machine$sizeof.pointer), 
[10:34:45.355]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.355]                                 "release", "version")], collapse = " "), 
[10:34:45.355]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.355]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.355]                               info)
[10:34:45.355]                             info <- base::paste(info, collapse = "; ")
[10:34:45.355]                             if (!has_future) {
[10:34:45.355]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.355]                                 info)
[10:34:45.355]                             }
[10:34:45.355]                             else {
[10:34:45.355]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.355]                                 info, version)
[10:34:45.355]                             }
[10:34:45.355]                             base::stop(msg)
[10:34:45.355]                           }
[10:34:45.355]                         })
[10:34:45.355]                       }
[10:34:45.355]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.355]                       base::options(mc.cores = 1L)
[10:34:45.355]                     }
[10:34:45.355]                     base::local({
[10:34:45.355]                       for (pkg in "utils") {
[10:34:45.355]                         base::loadNamespace(pkg)
[10:34:45.355]                         base::library(pkg, character.only = TRUE)
[10:34:45.355]                       }
[10:34:45.355]                     })
[10:34:45.355]                   }
[10:34:45.355]                   ...future.strategy.old <- future::plan("list")
[10:34:45.355]                   options(future.plan = NULL)
[10:34:45.355]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.355]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.355]                 }
[10:34:45.355]                 ...future.workdir <- getwd()
[10:34:45.355]             }
[10:34:45.355]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.355]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.355]         }
[10:34:45.355]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.355]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.355]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.355]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.355]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.355]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.355]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.355]             base::names(...future.oldOptions))
[10:34:45.355]     }
[10:34:45.355]     if (FALSE) {
[10:34:45.355]     }
[10:34:45.355]     else {
[10:34:45.355]         if (FALSE) {
[10:34:45.355]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.355]                 open = "w")
[10:34:45.355]         }
[10:34:45.355]         else {
[10:34:45.355]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.355]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.355]         }
[10:34:45.355]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.355]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.355]             base::sink(type = "output", split = FALSE)
[10:34:45.355]             base::close(...future.stdout)
[10:34:45.355]         }, add = TRUE)
[10:34:45.355]     }
[10:34:45.355]     ...future.frame <- base::sys.nframe()
[10:34:45.355]     ...future.conditions <- base::list()
[10:34:45.355]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.355]     if (FALSE) {
[10:34:45.355]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.355]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.355]     }
[10:34:45.355]     ...future.result <- base::tryCatch({
[10:34:45.355]         base::withCallingHandlers({
[10:34:45.355]             ...future.value <- base::withVisible(base::local({
[10:34:45.355]                 ...future.makeSendCondition <- base::local({
[10:34:45.355]                   sendCondition <- NULL
[10:34:45.355]                   function(frame = 1L) {
[10:34:45.355]                     if (is.function(sendCondition)) 
[10:34:45.355]                       return(sendCondition)
[10:34:45.355]                     ns <- getNamespace("parallel")
[10:34:45.355]                     if (exists("sendData", mode = "function", 
[10:34:45.355]                       envir = ns)) {
[10:34:45.355]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.355]                         envir = ns)
[10:34:45.355]                       envir <- sys.frame(frame)
[10:34:45.355]                       master <- NULL
[10:34:45.355]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.355]                         !identical(envir, emptyenv())) {
[10:34:45.355]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.355]                           inherits = FALSE)) {
[10:34:45.355]                           master <- get("master", mode = "list", 
[10:34:45.355]                             envir = envir, inherits = FALSE)
[10:34:45.355]                           if (inherits(master, c("SOCKnode", 
[10:34:45.355]                             "SOCK0node"))) {
[10:34:45.355]                             sendCondition <<- function(cond) {
[10:34:45.355]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.355]                                 success = TRUE)
[10:34:45.355]                               parallel_sendData(master, data)
[10:34:45.355]                             }
[10:34:45.355]                             return(sendCondition)
[10:34:45.355]                           }
[10:34:45.355]                         }
[10:34:45.355]                         frame <- frame + 1L
[10:34:45.355]                         envir <- sys.frame(frame)
[10:34:45.355]                       }
[10:34:45.355]                     }
[10:34:45.355]                     sendCondition <<- function(cond) NULL
[10:34:45.355]                   }
[10:34:45.355]                 })
[10:34:45.355]                 withCallingHandlers({
[10:34:45.355]                   {
[10:34:45.355]                     print(1:50)
[10:34:45.355]                     str(1:50)
[10:34:45.355]                     cat(letters, sep = "-")
[10:34:45.355]                     cat(1:6, collapse = "\n")
[10:34:45.355]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.355]                     42L
[10:34:45.355]                   }
[10:34:45.355]                 }, immediateCondition = function(cond) {
[10:34:45.355]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.355]                   sendCondition(cond)
[10:34:45.355]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.355]                   {
[10:34:45.355]                     inherits <- base::inherits
[10:34:45.355]                     invokeRestart <- base::invokeRestart
[10:34:45.355]                     is.null <- base::is.null
[10:34:45.355]                     muffled <- FALSE
[10:34:45.355]                     if (inherits(cond, "message")) {
[10:34:45.355]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.355]                       if (muffled) 
[10:34:45.355]                         invokeRestart("muffleMessage")
[10:34:45.355]                     }
[10:34:45.355]                     else if (inherits(cond, "warning")) {
[10:34:45.355]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.355]                       if (muffled) 
[10:34:45.355]                         invokeRestart("muffleWarning")
[10:34:45.355]                     }
[10:34:45.355]                     else if (inherits(cond, "condition")) {
[10:34:45.355]                       if (!is.null(pattern)) {
[10:34:45.355]                         computeRestarts <- base::computeRestarts
[10:34:45.355]                         grepl <- base::grepl
[10:34:45.355]                         restarts <- computeRestarts(cond)
[10:34:45.355]                         for (restart in restarts) {
[10:34:45.355]                           name <- restart$name
[10:34:45.355]                           if (is.null(name)) 
[10:34:45.355]                             next
[10:34:45.355]                           if (!grepl(pattern, name)) 
[10:34:45.355]                             next
[10:34:45.355]                           invokeRestart(restart)
[10:34:45.355]                           muffled <- TRUE
[10:34:45.355]                           break
[10:34:45.355]                         }
[10:34:45.355]                       }
[10:34:45.355]                     }
[10:34:45.355]                     invisible(muffled)
[10:34:45.355]                   }
[10:34:45.355]                   muffleCondition(cond)
[10:34:45.355]                 })
[10:34:45.355]             }))
[10:34:45.355]             future::FutureResult(value = ...future.value$value, 
[10:34:45.355]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.355]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.355]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.355]                     ...future.globalenv.names))
[10:34:45.355]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.355]         }, condition = base::local({
[10:34:45.355]             c <- base::c
[10:34:45.355]             inherits <- base::inherits
[10:34:45.355]             invokeRestart <- base::invokeRestart
[10:34:45.355]             length <- base::length
[10:34:45.355]             list <- base::list
[10:34:45.355]             seq.int <- base::seq.int
[10:34:45.355]             signalCondition <- base::signalCondition
[10:34:45.355]             sys.calls <- base::sys.calls
[10:34:45.355]             `[[` <- base::`[[`
[10:34:45.355]             `+` <- base::`+`
[10:34:45.355]             `<<-` <- base::`<<-`
[10:34:45.355]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.355]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.355]                   3L)]
[10:34:45.355]             }
[10:34:45.355]             function(cond) {
[10:34:45.355]                 is_error <- inherits(cond, "error")
[10:34:45.355]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.355]                   NULL)
[10:34:45.355]                 if (is_error) {
[10:34:45.355]                   sessionInformation <- function() {
[10:34:45.355]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.355]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.355]                       search = base::search(), system = base::Sys.info())
[10:34:45.355]                   }
[10:34:45.355]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.355]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.355]                     cond$call), session = sessionInformation(), 
[10:34:45.355]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.355]                   signalCondition(cond)
[10:34:45.355]                 }
[10:34:45.355]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.355]                 "immediateCondition"))) {
[10:34:45.355]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.355]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.355]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.355]                   if (TRUE && !signal) {
[10:34:45.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.355]                     {
[10:34:45.355]                       inherits <- base::inherits
[10:34:45.355]                       invokeRestart <- base::invokeRestart
[10:34:45.355]                       is.null <- base::is.null
[10:34:45.355]                       muffled <- FALSE
[10:34:45.355]                       if (inherits(cond, "message")) {
[10:34:45.355]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.355]                         if (muffled) 
[10:34:45.355]                           invokeRestart("muffleMessage")
[10:34:45.355]                       }
[10:34:45.355]                       else if (inherits(cond, "warning")) {
[10:34:45.355]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.355]                         if (muffled) 
[10:34:45.355]                           invokeRestart("muffleWarning")
[10:34:45.355]                       }
[10:34:45.355]                       else if (inherits(cond, "condition")) {
[10:34:45.355]                         if (!is.null(pattern)) {
[10:34:45.355]                           computeRestarts <- base::computeRestarts
[10:34:45.355]                           grepl <- base::grepl
[10:34:45.355]                           restarts <- computeRestarts(cond)
[10:34:45.355]                           for (restart in restarts) {
[10:34:45.355]                             name <- restart$name
[10:34:45.355]                             if (is.null(name)) 
[10:34:45.355]                               next
[10:34:45.355]                             if (!grepl(pattern, name)) 
[10:34:45.355]                               next
[10:34:45.355]                             invokeRestart(restart)
[10:34:45.355]                             muffled <- TRUE
[10:34:45.355]                             break
[10:34:45.355]                           }
[10:34:45.355]                         }
[10:34:45.355]                       }
[10:34:45.355]                       invisible(muffled)
[10:34:45.355]                     }
[10:34:45.355]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.355]                   }
[10:34:45.355]                 }
[10:34:45.355]                 else {
[10:34:45.355]                   if (TRUE) {
[10:34:45.355]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.355]                     {
[10:34:45.355]                       inherits <- base::inherits
[10:34:45.355]                       invokeRestart <- base::invokeRestart
[10:34:45.355]                       is.null <- base::is.null
[10:34:45.355]                       muffled <- FALSE
[10:34:45.355]                       if (inherits(cond, "message")) {
[10:34:45.355]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.355]                         if (muffled) 
[10:34:45.355]                           invokeRestart("muffleMessage")
[10:34:45.355]                       }
[10:34:45.355]                       else if (inherits(cond, "warning")) {
[10:34:45.355]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.355]                         if (muffled) 
[10:34:45.355]                           invokeRestart("muffleWarning")
[10:34:45.355]                       }
[10:34:45.355]                       else if (inherits(cond, "condition")) {
[10:34:45.355]                         if (!is.null(pattern)) {
[10:34:45.355]                           computeRestarts <- base::computeRestarts
[10:34:45.355]                           grepl <- base::grepl
[10:34:45.355]                           restarts <- computeRestarts(cond)
[10:34:45.355]                           for (restart in restarts) {
[10:34:45.355]                             name <- restart$name
[10:34:45.355]                             if (is.null(name)) 
[10:34:45.355]                               next
[10:34:45.355]                             if (!grepl(pattern, name)) 
[10:34:45.355]                               next
[10:34:45.355]                             invokeRestart(restart)
[10:34:45.355]                             muffled <- TRUE
[10:34:45.355]                             break
[10:34:45.355]                           }
[10:34:45.355]                         }
[10:34:45.355]                       }
[10:34:45.355]                       invisible(muffled)
[10:34:45.355]                     }
[10:34:45.355]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.355]                   }
[10:34:45.355]                 }
[10:34:45.355]             }
[10:34:45.355]         }))
[10:34:45.355]     }, error = function(ex) {
[10:34:45.355]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.355]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.355]                 ...future.rng), started = ...future.startTime, 
[10:34:45.355]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.355]             version = "1.8"), class = "FutureResult")
[10:34:45.355]     }, finally = {
[10:34:45.355]         if (!identical(...future.workdir, getwd())) 
[10:34:45.355]             setwd(...future.workdir)
[10:34:45.355]         {
[10:34:45.355]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.355]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.355]             }
[10:34:45.355]             base::options(...future.oldOptions)
[10:34:45.355]             if (.Platform$OS.type == "windows") {
[10:34:45.355]                 old_names <- names(...future.oldEnvVars)
[10:34:45.355]                 envs <- base::Sys.getenv()
[10:34:45.355]                 names <- names(envs)
[10:34:45.355]                 common <- intersect(names, old_names)
[10:34:45.355]                 added <- setdiff(names, old_names)
[10:34:45.355]                 removed <- setdiff(old_names, names)
[10:34:45.355]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.355]                   envs[common]]
[10:34:45.355]                 NAMES <- toupper(changed)
[10:34:45.355]                 args <- list()
[10:34:45.355]                 for (kk in seq_along(NAMES)) {
[10:34:45.355]                   name <- changed[[kk]]
[10:34:45.355]                   NAME <- NAMES[[kk]]
[10:34:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.355]                     next
[10:34:45.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.355]                 }
[10:34:45.355]                 NAMES <- toupper(added)
[10:34:45.355]                 for (kk in seq_along(NAMES)) {
[10:34:45.355]                   name <- added[[kk]]
[10:34:45.355]                   NAME <- NAMES[[kk]]
[10:34:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.355]                     next
[10:34:45.355]                   args[[name]] <- ""
[10:34:45.355]                 }
[10:34:45.355]                 NAMES <- toupper(removed)
[10:34:45.355]                 for (kk in seq_along(NAMES)) {
[10:34:45.355]                   name <- removed[[kk]]
[10:34:45.355]                   NAME <- NAMES[[kk]]
[10:34:45.355]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.355]                     next
[10:34:45.355]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.355]                 }
[10:34:45.355]                 if (length(args) > 0) 
[10:34:45.355]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.355]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.355]             }
[10:34:45.355]             else {
[10:34:45.355]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.355]             }
[10:34:45.355]             {
[10:34:45.355]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.355]                   0L) {
[10:34:45.355]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.355]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.355]                   base::options(opts)
[10:34:45.355]                 }
[10:34:45.355]                 {
[10:34:45.355]                   {
[10:34:45.355]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.355]                     NULL
[10:34:45.355]                   }
[10:34:45.355]                   options(future.plan = NULL)
[10:34:45.355]                   if (is.na(NA_character_)) 
[10:34:45.355]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.355]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.355]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.355]                     .init = FALSE)
[10:34:45.355]                 }
[10:34:45.355]             }
[10:34:45.355]         }
[10:34:45.355]     })
[10:34:45.355]     if (TRUE) {
[10:34:45.355]         base::sink(type = "output", split = FALSE)
[10:34:45.355]         if (FALSE) {
[10:34:45.355]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.355]         }
[10:34:45.355]         else {
[10:34:45.355]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.355]         }
[10:34:45.355]         base::close(...future.stdout)
[10:34:45.355]         ...future.stdout <- NULL
[10:34:45.355]     }
[10:34:45.355]     ...future.result$conditions <- ...future.conditions
[10:34:45.355]     ...future.result$finished <- base::Sys.time()
[10:34:45.355]     ...future.result
[10:34:45.355] }
[10:34:45.358] MultisessionFuture started
[10:34:45.358] - Launch lazy future ... done
[10:34:45.358] run() for ‘MultisessionFuture’ ... done
[10:34:45.358] result() for ClusterFuture ...
[10:34:45.359] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.359] - Validating connection of MultisessionFuture
[10:34:45.403] - received message: FutureResult
[10:34:45.403] - Received FutureResult
[10:34:45.403] - Erased future from FutureRegistry
[10:34:45.403] result() for ClusterFuture ...
[10:34:45.404] - result already collected: FutureResult
[10:34:45.404] result() for ClusterFuture ... done
[10:34:45.404] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.404] result() for ClusterFuture ... done
[10:34:45.404] result() for ClusterFuture ...
[10:34:45.404] - result already collected: FutureResult
[10:34:45.404] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:45.404] getGlobalsAndPackages() ...
[10:34:45.404] Searching for globals...
[10:34:45.405] - globals found: [1] ‘print’
[10:34:45.405] Searching for globals ... DONE
[10:34:45.405] Resolving globals: FALSE
[10:34:45.405] 
[10:34:45.405] 
[10:34:45.406] getGlobalsAndPackages() ... DONE
[10:34:45.406] run() for ‘Future’ ...
[10:34:45.406] - state: ‘created’
[10:34:45.406] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.419] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.420] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.420]   - Field: ‘node’
[10:34:45.420]   - Field: ‘label’
[10:34:45.420]   - Field: ‘local’
[10:34:45.420]   - Field: ‘owner’
[10:34:45.420]   - Field: ‘envir’
[10:34:45.420]   - Field: ‘workers’
[10:34:45.420]   - Field: ‘packages’
[10:34:45.420]   - Field: ‘gc’
[10:34:45.420]   - Field: ‘conditions’
[10:34:45.421]   - Field: ‘persistent’
[10:34:45.421]   - Field: ‘expr’
[10:34:45.421]   - Field: ‘uuid’
[10:34:45.421]   - Field: ‘seed’
[10:34:45.421]   - Field: ‘version’
[10:34:45.421]   - Field: ‘result’
[10:34:45.421]   - Field: ‘asynchronous’
[10:34:45.421]   - Field: ‘calls’
[10:34:45.421]   - Field: ‘globals’
[10:34:45.421]   - Field: ‘stdout’
[10:34:45.422]   - Field: ‘earlySignal’
[10:34:45.422]   - Field: ‘lazy’
[10:34:45.422]   - Field: ‘state’
[10:34:45.422] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.422] - Launch lazy future ...
[10:34:45.422] Packages needed by the future expression (n = 0): <none>
[10:34:45.422] Packages needed by future strategies (n = 0): <none>
[10:34:45.423] {
[10:34:45.423]     {
[10:34:45.423]         {
[10:34:45.423]             ...future.startTime <- base::Sys.time()
[10:34:45.423]             {
[10:34:45.423]                 {
[10:34:45.423]                   {
[10:34:45.423]                     {
[10:34:45.423]                       base::local({
[10:34:45.423]                         has_future <- base::requireNamespace("future", 
[10:34:45.423]                           quietly = TRUE)
[10:34:45.423]                         if (has_future) {
[10:34:45.423]                           ns <- base::getNamespace("future")
[10:34:45.423]                           version <- ns[[".package"]][["version"]]
[10:34:45.423]                           if (is.null(version)) 
[10:34:45.423]                             version <- utils::packageVersion("future")
[10:34:45.423]                         }
[10:34:45.423]                         else {
[10:34:45.423]                           version <- NULL
[10:34:45.423]                         }
[10:34:45.423]                         if (!has_future || version < "1.8.0") {
[10:34:45.423]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.423]                             "", base::R.version$version.string), 
[10:34:45.423]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:45.423]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:45.423]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.423]                               "release", "version")], collapse = " "), 
[10:34:45.423]                             hostname = base::Sys.info()[["nodename"]])
[10:34:45.423]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.423]                             info)
[10:34:45.423]                           info <- base::paste(info, collapse = "; ")
[10:34:45.423]                           if (!has_future) {
[10:34:45.423]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.423]                               info)
[10:34:45.423]                           }
[10:34:45.423]                           else {
[10:34:45.423]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.423]                               info, version)
[10:34:45.423]                           }
[10:34:45.423]                           base::stop(msg)
[10:34:45.423]                         }
[10:34:45.423]                       })
[10:34:45.423]                     }
[10:34:45.423]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.423]                     base::options(mc.cores = 1L)
[10:34:45.423]                   }
[10:34:45.423]                   ...future.strategy.old <- future::plan("list")
[10:34:45.423]                   options(future.plan = NULL)
[10:34:45.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.423]                 }
[10:34:45.423]                 ...future.workdir <- getwd()
[10:34:45.423]             }
[10:34:45.423]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.423]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.423]         }
[10:34:45.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.423]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.423]             base::names(...future.oldOptions))
[10:34:45.423]     }
[10:34:45.423]     if (FALSE) {
[10:34:45.423]     }
[10:34:45.423]     else {
[10:34:45.423]         if (TRUE) {
[10:34:45.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.423]                 open = "w")
[10:34:45.423]         }
[10:34:45.423]         else {
[10:34:45.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.423]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.423]         }
[10:34:45.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.423]             base::sink(type = "output", split = FALSE)
[10:34:45.423]             base::close(...future.stdout)
[10:34:45.423]         }, add = TRUE)
[10:34:45.423]     }
[10:34:45.423]     ...future.frame <- base::sys.nframe()
[10:34:45.423]     ...future.conditions <- base::list()
[10:34:45.423]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.423]     if (FALSE) {
[10:34:45.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.423]     }
[10:34:45.423]     ...future.result <- base::tryCatch({
[10:34:45.423]         base::withCallingHandlers({
[10:34:45.423]             ...future.value <- base::withVisible(base::local({
[10:34:45.423]                 ...future.makeSendCondition <- base::local({
[10:34:45.423]                   sendCondition <- NULL
[10:34:45.423]                   function(frame = 1L) {
[10:34:45.423]                     if (is.function(sendCondition)) 
[10:34:45.423]                       return(sendCondition)
[10:34:45.423]                     ns <- getNamespace("parallel")
[10:34:45.423]                     if (exists("sendData", mode = "function", 
[10:34:45.423]                       envir = ns)) {
[10:34:45.423]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.423]                         envir = ns)
[10:34:45.423]                       envir <- sys.frame(frame)
[10:34:45.423]                       master <- NULL
[10:34:45.423]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.423]                         !identical(envir, emptyenv())) {
[10:34:45.423]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.423]                           inherits = FALSE)) {
[10:34:45.423]                           master <- get("master", mode = "list", 
[10:34:45.423]                             envir = envir, inherits = FALSE)
[10:34:45.423]                           if (inherits(master, c("SOCKnode", 
[10:34:45.423]                             "SOCK0node"))) {
[10:34:45.423]                             sendCondition <<- function(cond) {
[10:34:45.423]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.423]                                 success = TRUE)
[10:34:45.423]                               parallel_sendData(master, data)
[10:34:45.423]                             }
[10:34:45.423]                             return(sendCondition)
[10:34:45.423]                           }
[10:34:45.423]                         }
[10:34:45.423]                         frame <- frame + 1L
[10:34:45.423]                         envir <- sys.frame(frame)
[10:34:45.423]                       }
[10:34:45.423]                     }
[10:34:45.423]                     sendCondition <<- function(cond) NULL
[10:34:45.423]                   }
[10:34:45.423]                 })
[10:34:45.423]                 withCallingHandlers({
[10:34:45.423]                   print(42)
[10:34:45.423]                 }, immediateCondition = function(cond) {
[10:34:45.423]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.423]                   sendCondition(cond)
[10:34:45.423]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.423]                   {
[10:34:45.423]                     inherits <- base::inherits
[10:34:45.423]                     invokeRestart <- base::invokeRestart
[10:34:45.423]                     is.null <- base::is.null
[10:34:45.423]                     muffled <- FALSE
[10:34:45.423]                     if (inherits(cond, "message")) {
[10:34:45.423]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.423]                       if (muffled) 
[10:34:45.423]                         invokeRestart("muffleMessage")
[10:34:45.423]                     }
[10:34:45.423]                     else if (inherits(cond, "warning")) {
[10:34:45.423]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.423]                       if (muffled) 
[10:34:45.423]                         invokeRestart("muffleWarning")
[10:34:45.423]                     }
[10:34:45.423]                     else if (inherits(cond, "condition")) {
[10:34:45.423]                       if (!is.null(pattern)) {
[10:34:45.423]                         computeRestarts <- base::computeRestarts
[10:34:45.423]                         grepl <- base::grepl
[10:34:45.423]                         restarts <- computeRestarts(cond)
[10:34:45.423]                         for (restart in restarts) {
[10:34:45.423]                           name <- restart$name
[10:34:45.423]                           if (is.null(name)) 
[10:34:45.423]                             next
[10:34:45.423]                           if (!grepl(pattern, name)) 
[10:34:45.423]                             next
[10:34:45.423]                           invokeRestart(restart)
[10:34:45.423]                           muffled <- TRUE
[10:34:45.423]                           break
[10:34:45.423]                         }
[10:34:45.423]                       }
[10:34:45.423]                     }
[10:34:45.423]                     invisible(muffled)
[10:34:45.423]                   }
[10:34:45.423]                   muffleCondition(cond)
[10:34:45.423]                 })
[10:34:45.423]             }))
[10:34:45.423]             future::FutureResult(value = ...future.value$value, 
[10:34:45.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.423]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.423]                     ...future.globalenv.names))
[10:34:45.423]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.423]         }, condition = base::local({
[10:34:45.423]             c <- base::c
[10:34:45.423]             inherits <- base::inherits
[10:34:45.423]             invokeRestart <- base::invokeRestart
[10:34:45.423]             length <- base::length
[10:34:45.423]             list <- base::list
[10:34:45.423]             seq.int <- base::seq.int
[10:34:45.423]             signalCondition <- base::signalCondition
[10:34:45.423]             sys.calls <- base::sys.calls
[10:34:45.423]             `[[` <- base::`[[`
[10:34:45.423]             `+` <- base::`+`
[10:34:45.423]             `<<-` <- base::`<<-`
[10:34:45.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.423]                   3L)]
[10:34:45.423]             }
[10:34:45.423]             function(cond) {
[10:34:45.423]                 is_error <- inherits(cond, "error")
[10:34:45.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.423]                   NULL)
[10:34:45.423]                 if (is_error) {
[10:34:45.423]                   sessionInformation <- function() {
[10:34:45.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.423]                       search = base::search(), system = base::Sys.info())
[10:34:45.423]                   }
[10:34:45.423]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.423]                     cond$call), session = sessionInformation(), 
[10:34:45.423]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.423]                   signalCondition(cond)
[10:34:45.423]                 }
[10:34:45.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.423]                 "immediateCondition"))) {
[10:34:45.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.423]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.423]                   if (TRUE && !signal) {
[10:34:45.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.423]                     {
[10:34:45.423]                       inherits <- base::inherits
[10:34:45.423]                       invokeRestart <- base::invokeRestart
[10:34:45.423]                       is.null <- base::is.null
[10:34:45.423]                       muffled <- FALSE
[10:34:45.423]                       if (inherits(cond, "message")) {
[10:34:45.423]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.423]                         if (muffled) 
[10:34:45.423]                           invokeRestart("muffleMessage")
[10:34:45.423]                       }
[10:34:45.423]                       else if (inherits(cond, "warning")) {
[10:34:45.423]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.423]                         if (muffled) 
[10:34:45.423]                           invokeRestart("muffleWarning")
[10:34:45.423]                       }
[10:34:45.423]                       else if (inherits(cond, "condition")) {
[10:34:45.423]                         if (!is.null(pattern)) {
[10:34:45.423]                           computeRestarts <- base::computeRestarts
[10:34:45.423]                           grepl <- base::grepl
[10:34:45.423]                           restarts <- computeRestarts(cond)
[10:34:45.423]                           for (restart in restarts) {
[10:34:45.423]                             name <- restart$name
[10:34:45.423]                             if (is.null(name)) 
[10:34:45.423]                               next
[10:34:45.423]                             if (!grepl(pattern, name)) 
[10:34:45.423]                               next
[10:34:45.423]                             invokeRestart(restart)
[10:34:45.423]                             muffled <- TRUE
[10:34:45.423]                             break
[10:34:45.423]                           }
[10:34:45.423]                         }
[10:34:45.423]                       }
[10:34:45.423]                       invisible(muffled)
[10:34:45.423]                     }
[10:34:45.423]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.423]                   }
[10:34:45.423]                 }
[10:34:45.423]                 else {
[10:34:45.423]                   if (TRUE) {
[10:34:45.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.423]                     {
[10:34:45.423]                       inherits <- base::inherits
[10:34:45.423]                       invokeRestart <- base::invokeRestart
[10:34:45.423]                       is.null <- base::is.null
[10:34:45.423]                       muffled <- FALSE
[10:34:45.423]                       if (inherits(cond, "message")) {
[10:34:45.423]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.423]                         if (muffled) 
[10:34:45.423]                           invokeRestart("muffleMessage")
[10:34:45.423]                       }
[10:34:45.423]                       else if (inherits(cond, "warning")) {
[10:34:45.423]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.423]                         if (muffled) 
[10:34:45.423]                           invokeRestart("muffleWarning")
[10:34:45.423]                       }
[10:34:45.423]                       else if (inherits(cond, "condition")) {
[10:34:45.423]                         if (!is.null(pattern)) {
[10:34:45.423]                           computeRestarts <- base::computeRestarts
[10:34:45.423]                           grepl <- base::grepl
[10:34:45.423]                           restarts <- computeRestarts(cond)
[10:34:45.423]                           for (restart in restarts) {
[10:34:45.423]                             name <- restart$name
[10:34:45.423]                             if (is.null(name)) 
[10:34:45.423]                               next
[10:34:45.423]                             if (!grepl(pattern, name)) 
[10:34:45.423]                               next
[10:34:45.423]                             invokeRestart(restart)
[10:34:45.423]                             muffled <- TRUE
[10:34:45.423]                             break
[10:34:45.423]                           }
[10:34:45.423]                         }
[10:34:45.423]                       }
[10:34:45.423]                       invisible(muffled)
[10:34:45.423]                     }
[10:34:45.423]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.423]                   }
[10:34:45.423]                 }
[10:34:45.423]             }
[10:34:45.423]         }))
[10:34:45.423]     }, error = function(ex) {
[10:34:45.423]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.423]                 ...future.rng), started = ...future.startTime, 
[10:34:45.423]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.423]             version = "1.8"), class = "FutureResult")
[10:34:45.423]     }, finally = {
[10:34:45.423]         if (!identical(...future.workdir, getwd())) 
[10:34:45.423]             setwd(...future.workdir)
[10:34:45.423]         {
[10:34:45.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.423]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.423]             }
[10:34:45.423]             base::options(...future.oldOptions)
[10:34:45.423]             if (.Platform$OS.type == "windows") {
[10:34:45.423]                 old_names <- names(...future.oldEnvVars)
[10:34:45.423]                 envs <- base::Sys.getenv()
[10:34:45.423]                 names <- names(envs)
[10:34:45.423]                 common <- intersect(names, old_names)
[10:34:45.423]                 added <- setdiff(names, old_names)
[10:34:45.423]                 removed <- setdiff(old_names, names)
[10:34:45.423]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.423]                   envs[common]]
[10:34:45.423]                 NAMES <- toupper(changed)
[10:34:45.423]                 args <- list()
[10:34:45.423]                 for (kk in seq_along(NAMES)) {
[10:34:45.423]                   name <- changed[[kk]]
[10:34:45.423]                   NAME <- NAMES[[kk]]
[10:34:45.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.423]                     next
[10:34:45.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.423]                 }
[10:34:45.423]                 NAMES <- toupper(added)
[10:34:45.423]                 for (kk in seq_along(NAMES)) {
[10:34:45.423]                   name <- added[[kk]]
[10:34:45.423]                   NAME <- NAMES[[kk]]
[10:34:45.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.423]                     next
[10:34:45.423]                   args[[name]] <- ""
[10:34:45.423]                 }
[10:34:45.423]                 NAMES <- toupper(removed)
[10:34:45.423]                 for (kk in seq_along(NAMES)) {
[10:34:45.423]                   name <- removed[[kk]]
[10:34:45.423]                   NAME <- NAMES[[kk]]
[10:34:45.423]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.423]                     next
[10:34:45.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.423]                 }
[10:34:45.423]                 if (length(args) > 0) 
[10:34:45.423]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.423]             }
[10:34:45.423]             else {
[10:34:45.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.423]             }
[10:34:45.423]             {
[10:34:45.423]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.423]                   0L) {
[10:34:45.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.423]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.423]                   base::options(opts)
[10:34:45.423]                 }
[10:34:45.423]                 {
[10:34:45.423]                   {
[10:34:45.423]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.423]                     NULL
[10:34:45.423]                   }
[10:34:45.423]                   options(future.plan = NULL)
[10:34:45.423]                   if (is.na(NA_character_)) 
[10:34:45.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.423]                     .init = FALSE)
[10:34:45.423]                 }
[10:34:45.423]             }
[10:34:45.423]         }
[10:34:45.423]     })
[10:34:45.423]     if (TRUE) {
[10:34:45.423]         base::sink(type = "output", split = FALSE)
[10:34:45.423]         if (TRUE) {
[10:34:45.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.423]         }
[10:34:45.423]         else {
[10:34:45.423]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.423]         }
[10:34:45.423]         base::close(...future.stdout)
[10:34:45.423]         ...future.stdout <- NULL
[10:34:45.423]     }
[10:34:45.423]     ...future.result$conditions <- ...future.conditions
[10:34:45.423]     ...future.result$finished <- base::Sys.time()
[10:34:45.423]     ...future.result
[10:34:45.423] }
[10:34:45.425] MultisessionFuture started
[10:34:45.426] - Launch lazy future ... done
[10:34:45.426] run() for ‘MultisessionFuture’ ... done
[10:34:45.426] result() for ClusterFuture ...
[10:34:45.426] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.426] - Validating connection of MultisessionFuture
[10:34:45.427] - received message: FutureResult
[10:34:45.427] - Received FutureResult
[10:34:45.427] - Erased future from FutureRegistry
[10:34:45.427] result() for ClusterFuture ...
[10:34:45.427] - result already collected: FutureResult
[10:34:45.427] result() for ClusterFuture ... done
[10:34:45.427] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.428] result() for ClusterFuture ... done
[10:34:45.428] result() for ClusterFuture ...
[10:34:45.428] - result already collected: FutureResult
[10:34:45.428] result() for ClusterFuture ... done
[10:34:45.428] result() for ClusterFuture ...
[10:34:45.428] - result already collected: FutureResult
[10:34:45.428] result() for ClusterFuture ... done
[1] 42
[10:34:45.428] result() for ClusterFuture ...
[10:34:45.428] - result already collected: FutureResult
[10:34:45.428] result() for ClusterFuture ... done
- stdout = NA
[10:34:45.429] getGlobalsAndPackages() ...
[10:34:45.429] Searching for globals...
[10:34:45.432] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.432] Searching for globals ... DONE
[10:34:45.432] Resolving globals: FALSE
[10:34:45.432] 
[10:34:45.432] - packages: [1] ‘utils’
[10:34:45.433] getGlobalsAndPackages() ... DONE
[10:34:45.433] run() for ‘Future’ ...
[10:34:45.433] - state: ‘created’
[10:34:45.433] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.447] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.448] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.448]   - Field: ‘node’
[10:34:45.448]   - Field: ‘label’
[10:34:45.448]   - Field: ‘local’
[10:34:45.448]   - Field: ‘owner’
[10:34:45.448]   - Field: ‘envir’
[10:34:45.448]   - Field: ‘workers’
[10:34:45.448]   - Field: ‘packages’
[10:34:45.448]   - Field: ‘gc’
[10:34:45.448]   - Field: ‘conditions’
[10:34:45.449]   - Field: ‘persistent’
[10:34:45.449]   - Field: ‘expr’
[10:34:45.449]   - Field: ‘uuid’
[10:34:45.451]   - Field: ‘seed’
[10:34:45.451]   - Field: ‘version’
[10:34:45.451]   - Field: ‘result’
[10:34:45.451]   - Field: ‘asynchronous’
[10:34:45.451]   - Field: ‘calls’
[10:34:45.451]   - Field: ‘globals’
[10:34:45.451]   - Field: ‘stdout’
[10:34:45.451]   - Field: ‘earlySignal’
[10:34:45.451]   - Field: ‘lazy’
[10:34:45.451]   - Field: ‘state’
[10:34:45.452] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.452] - Launch lazy future ...
[10:34:45.452] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.452] Packages needed by future strategies (n = 0): <none>
[10:34:45.452] {
[10:34:45.452]     {
[10:34:45.452]         {
[10:34:45.452]             ...future.startTime <- base::Sys.time()
[10:34:45.452]             {
[10:34:45.452]                 {
[10:34:45.452]                   {
[10:34:45.452]                     {
[10:34:45.452]                       {
[10:34:45.452]                         base::local({
[10:34:45.452]                           has_future <- base::requireNamespace("future", 
[10:34:45.452]                             quietly = TRUE)
[10:34:45.452]                           if (has_future) {
[10:34:45.452]                             ns <- base::getNamespace("future")
[10:34:45.452]                             version <- ns[[".package"]][["version"]]
[10:34:45.452]                             if (is.null(version)) 
[10:34:45.452]                               version <- utils::packageVersion("future")
[10:34:45.452]                           }
[10:34:45.452]                           else {
[10:34:45.452]                             version <- NULL
[10:34:45.452]                           }
[10:34:45.452]                           if (!has_future || version < "1.8.0") {
[10:34:45.452]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.452]                               "", base::R.version$version.string), 
[10:34:45.452]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.452]                                 base::R.version$platform, 8 * 
[10:34:45.452]                                   base::.Machine$sizeof.pointer), 
[10:34:45.452]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.452]                                 "release", "version")], collapse = " "), 
[10:34:45.452]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.452]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.452]                               info)
[10:34:45.452]                             info <- base::paste(info, collapse = "; ")
[10:34:45.452]                             if (!has_future) {
[10:34:45.452]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.452]                                 info)
[10:34:45.452]                             }
[10:34:45.452]                             else {
[10:34:45.452]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.452]                                 info, version)
[10:34:45.452]                             }
[10:34:45.452]                             base::stop(msg)
[10:34:45.452]                           }
[10:34:45.452]                         })
[10:34:45.452]                       }
[10:34:45.452]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.452]                       base::options(mc.cores = 1L)
[10:34:45.452]                     }
[10:34:45.452]                     base::local({
[10:34:45.452]                       for (pkg in "utils") {
[10:34:45.452]                         base::loadNamespace(pkg)
[10:34:45.452]                         base::library(pkg, character.only = TRUE)
[10:34:45.452]                       }
[10:34:45.452]                     })
[10:34:45.452]                   }
[10:34:45.452]                   ...future.strategy.old <- future::plan("list")
[10:34:45.452]                   options(future.plan = NULL)
[10:34:45.452]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.452]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.452]                 }
[10:34:45.452]                 ...future.workdir <- getwd()
[10:34:45.452]             }
[10:34:45.452]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.452]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.452]         }
[10:34:45.452]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.452]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.452]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.452]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.452]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.452]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.452]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.452]             base::names(...future.oldOptions))
[10:34:45.452]     }
[10:34:45.452]     if (TRUE) {
[10:34:45.452]     }
[10:34:45.452]     else {
[10:34:45.452]         if (NA) {
[10:34:45.452]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.452]                 open = "w")
[10:34:45.452]         }
[10:34:45.452]         else {
[10:34:45.452]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.452]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.452]         }
[10:34:45.452]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.452]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.452]             base::sink(type = "output", split = FALSE)
[10:34:45.452]             base::close(...future.stdout)
[10:34:45.452]         }, add = TRUE)
[10:34:45.452]     }
[10:34:45.452]     ...future.frame <- base::sys.nframe()
[10:34:45.452]     ...future.conditions <- base::list()
[10:34:45.452]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.452]     if (FALSE) {
[10:34:45.452]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.452]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.452]     }
[10:34:45.452]     ...future.result <- base::tryCatch({
[10:34:45.452]         base::withCallingHandlers({
[10:34:45.452]             ...future.value <- base::withVisible(base::local({
[10:34:45.452]                 ...future.makeSendCondition <- base::local({
[10:34:45.452]                   sendCondition <- NULL
[10:34:45.452]                   function(frame = 1L) {
[10:34:45.452]                     if (is.function(sendCondition)) 
[10:34:45.452]                       return(sendCondition)
[10:34:45.452]                     ns <- getNamespace("parallel")
[10:34:45.452]                     if (exists("sendData", mode = "function", 
[10:34:45.452]                       envir = ns)) {
[10:34:45.452]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.452]                         envir = ns)
[10:34:45.452]                       envir <- sys.frame(frame)
[10:34:45.452]                       master <- NULL
[10:34:45.452]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.452]                         !identical(envir, emptyenv())) {
[10:34:45.452]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.452]                           inherits = FALSE)) {
[10:34:45.452]                           master <- get("master", mode = "list", 
[10:34:45.452]                             envir = envir, inherits = FALSE)
[10:34:45.452]                           if (inherits(master, c("SOCKnode", 
[10:34:45.452]                             "SOCK0node"))) {
[10:34:45.452]                             sendCondition <<- function(cond) {
[10:34:45.452]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.452]                                 success = TRUE)
[10:34:45.452]                               parallel_sendData(master, data)
[10:34:45.452]                             }
[10:34:45.452]                             return(sendCondition)
[10:34:45.452]                           }
[10:34:45.452]                         }
[10:34:45.452]                         frame <- frame + 1L
[10:34:45.452]                         envir <- sys.frame(frame)
[10:34:45.452]                       }
[10:34:45.452]                     }
[10:34:45.452]                     sendCondition <<- function(cond) NULL
[10:34:45.452]                   }
[10:34:45.452]                 })
[10:34:45.452]                 withCallingHandlers({
[10:34:45.452]                   {
[10:34:45.452]                     print(1:50)
[10:34:45.452]                     str(1:50)
[10:34:45.452]                     cat(letters, sep = "-")
[10:34:45.452]                     cat(1:6, collapse = "\n")
[10:34:45.452]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.452]                     42L
[10:34:45.452]                   }
[10:34:45.452]                 }, immediateCondition = function(cond) {
[10:34:45.452]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.452]                   sendCondition(cond)
[10:34:45.452]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.452]                   {
[10:34:45.452]                     inherits <- base::inherits
[10:34:45.452]                     invokeRestart <- base::invokeRestart
[10:34:45.452]                     is.null <- base::is.null
[10:34:45.452]                     muffled <- FALSE
[10:34:45.452]                     if (inherits(cond, "message")) {
[10:34:45.452]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.452]                       if (muffled) 
[10:34:45.452]                         invokeRestart("muffleMessage")
[10:34:45.452]                     }
[10:34:45.452]                     else if (inherits(cond, "warning")) {
[10:34:45.452]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.452]                       if (muffled) 
[10:34:45.452]                         invokeRestart("muffleWarning")
[10:34:45.452]                     }
[10:34:45.452]                     else if (inherits(cond, "condition")) {
[10:34:45.452]                       if (!is.null(pattern)) {
[10:34:45.452]                         computeRestarts <- base::computeRestarts
[10:34:45.452]                         grepl <- base::grepl
[10:34:45.452]                         restarts <- computeRestarts(cond)
[10:34:45.452]                         for (restart in restarts) {
[10:34:45.452]                           name <- restart$name
[10:34:45.452]                           if (is.null(name)) 
[10:34:45.452]                             next
[10:34:45.452]                           if (!grepl(pattern, name)) 
[10:34:45.452]                             next
[10:34:45.452]                           invokeRestart(restart)
[10:34:45.452]                           muffled <- TRUE
[10:34:45.452]                           break
[10:34:45.452]                         }
[10:34:45.452]                       }
[10:34:45.452]                     }
[10:34:45.452]                     invisible(muffled)
[10:34:45.452]                   }
[10:34:45.452]                   muffleCondition(cond)
[10:34:45.452]                 })
[10:34:45.452]             }))
[10:34:45.452]             future::FutureResult(value = ...future.value$value, 
[10:34:45.452]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.452]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.452]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.452]                     ...future.globalenv.names))
[10:34:45.452]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.452]         }, condition = base::local({
[10:34:45.452]             c <- base::c
[10:34:45.452]             inherits <- base::inherits
[10:34:45.452]             invokeRestart <- base::invokeRestart
[10:34:45.452]             length <- base::length
[10:34:45.452]             list <- base::list
[10:34:45.452]             seq.int <- base::seq.int
[10:34:45.452]             signalCondition <- base::signalCondition
[10:34:45.452]             sys.calls <- base::sys.calls
[10:34:45.452]             `[[` <- base::`[[`
[10:34:45.452]             `+` <- base::`+`
[10:34:45.452]             `<<-` <- base::`<<-`
[10:34:45.452]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.452]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.452]                   3L)]
[10:34:45.452]             }
[10:34:45.452]             function(cond) {
[10:34:45.452]                 is_error <- inherits(cond, "error")
[10:34:45.452]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.452]                   NULL)
[10:34:45.452]                 if (is_error) {
[10:34:45.452]                   sessionInformation <- function() {
[10:34:45.452]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.452]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.452]                       search = base::search(), system = base::Sys.info())
[10:34:45.452]                   }
[10:34:45.452]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.452]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.452]                     cond$call), session = sessionInformation(), 
[10:34:45.452]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.452]                   signalCondition(cond)
[10:34:45.452]                 }
[10:34:45.452]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.452]                 "immediateCondition"))) {
[10:34:45.452]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.452]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.452]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.452]                   if (TRUE && !signal) {
[10:34:45.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.452]                     {
[10:34:45.452]                       inherits <- base::inherits
[10:34:45.452]                       invokeRestart <- base::invokeRestart
[10:34:45.452]                       is.null <- base::is.null
[10:34:45.452]                       muffled <- FALSE
[10:34:45.452]                       if (inherits(cond, "message")) {
[10:34:45.452]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.452]                         if (muffled) 
[10:34:45.452]                           invokeRestart("muffleMessage")
[10:34:45.452]                       }
[10:34:45.452]                       else if (inherits(cond, "warning")) {
[10:34:45.452]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.452]                         if (muffled) 
[10:34:45.452]                           invokeRestart("muffleWarning")
[10:34:45.452]                       }
[10:34:45.452]                       else if (inherits(cond, "condition")) {
[10:34:45.452]                         if (!is.null(pattern)) {
[10:34:45.452]                           computeRestarts <- base::computeRestarts
[10:34:45.452]                           grepl <- base::grepl
[10:34:45.452]                           restarts <- computeRestarts(cond)
[10:34:45.452]                           for (restart in restarts) {
[10:34:45.452]                             name <- restart$name
[10:34:45.452]                             if (is.null(name)) 
[10:34:45.452]                               next
[10:34:45.452]                             if (!grepl(pattern, name)) 
[10:34:45.452]                               next
[10:34:45.452]                             invokeRestart(restart)
[10:34:45.452]                             muffled <- TRUE
[10:34:45.452]                             break
[10:34:45.452]                           }
[10:34:45.452]                         }
[10:34:45.452]                       }
[10:34:45.452]                       invisible(muffled)
[10:34:45.452]                     }
[10:34:45.452]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.452]                   }
[10:34:45.452]                 }
[10:34:45.452]                 else {
[10:34:45.452]                   if (TRUE) {
[10:34:45.452]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.452]                     {
[10:34:45.452]                       inherits <- base::inherits
[10:34:45.452]                       invokeRestart <- base::invokeRestart
[10:34:45.452]                       is.null <- base::is.null
[10:34:45.452]                       muffled <- FALSE
[10:34:45.452]                       if (inherits(cond, "message")) {
[10:34:45.452]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.452]                         if (muffled) 
[10:34:45.452]                           invokeRestart("muffleMessage")
[10:34:45.452]                       }
[10:34:45.452]                       else if (inherits(cond, "warning")) {
[10:34:45.452]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.452]                         if (muffled) 
[10:34:45.452]                           invokeRestart("muffleWarning")
[10:34:45.452]                       }
[10:34:45.452]                       else if (inherits(cond, "condition")) {
[10:34:45.452]                         if (!is.null(pattern)) {
[10:34:45.452]                           computeRestarts <- base::computeRestarts
[10:34:45.452]                           grepl <- base::grepl
[10:34:45.452]                           restarts <- computeRestarts(cond)
[10:34:45.452]                           for (restart in restarts) {
[10:34:45.452]                             name <- restart$name
[10:34:45.452]                             if (is.null(name)) 
[10:34:45.452]                               next
[10:34:45.452]                             if (!grepl(pattern, name)) 
[10:34:45.452]                               next
[10:34:45.452]                             invokeRestart(restart)
[10:34:45.452]                             muffled <- TRUE
[10:34:45.452]                             break
[10:34:45.452]                           }
[10:34:45.452]                         }
[10:34:45.452]                       }
[10:34:45.452]                       invisible(muffled)
[10:34:45.452]                     }
[10:34:45.452]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.452]                   }
[10:34:45.452]                 }
[10:34:45.452]             }
[10:34:45.452]         }))
[10:34:45.452]     }, error = function(ex) {
[10:34:45.452]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.452]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.452]                 ...future.rng), started = ...future.startTime, 
[10:34:45.452]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.452]             version = "1.8"), class = "FutureResult")
[10:34:45.452]     }, finally = {
[10:34:45.452]         if (!identical(...future.workdir, getwd())) 
[10:34:45.452]             setwd(...future.workdir)
[10:34:45.452]         {
[10:34:45.452]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.452]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.452]             }
[10:34:45.452]             base::options(...future.oldOptions)
[10:34:45.452]             if (.Platform$OS.type == "windows") {
[10:34:45.452]                 old_names <- names(...future.oldEnvVars)
[10:34:45.452]                 envs <- base::Sys.getenv()
[10:34:45.452]                 names <- names(envs)
[10:34:45.452]                 common <- intersect(names, old_names)
[10:34:45.452]                 added <- setdiff(names, old_names)
[10:34:45.452]                 removed <- setdiff(old_names, names)
[10:34:45.452]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.452]                   envs[common]]
[10:34:45.452]                 NAMES <- toupper(changed)
[10:34:45.452]                 args <- list()
[10:34:45.452]                 for (kk in seq_along(NAMES)) {
[10:34:45.452]                   name <- changed[[kk]]
[10:34:45.452]                   NAME <- NAMES[[kk]]
[10:34:45.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.452]                     next
[10:34:45.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.452]                 }
[10:34:45.452]                 NAMES <- toupper(added)
[10:34:45.452]                 for (kk in seq_along(NAMES)) {
[10:34:45.452]                   name <- added[[kk]]
[10:34:45.452]                   NAME <- NAMES[[kk]]
[10:34:45.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.452]                     next
[10:34:45.452]                   args[[name]] <- ""
[10:34:45.452]                 }
[10:34:45.452]                 NAMES <- toupper(removed)
[10:34:45.452]                 for (kk in seq_along(NAMES)) {
[10:34:45.452]                   name <- removed[[kk]]
[10:34:45.452]                   NAME <- NAMES[[kk]]
[10:34:45.452]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.452]                     next
[10:34:45.452]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.452]                 }
[10:34:45.452]                 if (length(args) > 0) 
[10:34:45.452]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.452]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.452]             }
[10:34:45.452]             else {
[10:34:45.452]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.452]             }
[10:34:45.452]             {
[10:34:45.452]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.452]                   0L) {
[10:34:45.452]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.452]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.452]                   base::options(opts)
[10:34:45.452]                 }
[10:34:45.452]                 {
[10:34:45.452]                   {
[10:34:45.452]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.452]                     NULL
[10:34:45.452]                   }
[10:34:45.452]                   options(future.plan = NULL)
[10:34:45.452]                   if (is.na(NA_character_)) 
[10:34:45.452]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.452]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.452]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.452]                     .init = FALSE)
[10:34:45.452]                 }
[10:34:45.452]             }
[10:34:45.452]         }
[10:34:45.452]     })
[10:34:45.452]     if (FALSE) {
[10:34:45.452]         base::sink(type = "output", split = FALSE)
[10:34:45.452]         if (NA) {
[10:34:45.452]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.452]         }
[10:34:45.452]         else {
[10:34:45.452]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.452]         }
[10:34:45.452]         base::close(...future.stdout)
[10:34:45.452]         ...future.stdout <- NULL
[10:34:45.452]     }
[10:34:45.452]     ...future.result$conditions <- ...future.conditions
[10:34:45.452]     ...future.result$finished <- base::Sys.time()
[10:34:45.452]     ...future.result
[10:34:45.452] }
[10:34:45.455] MultisessionFuture started
[10:34:45.456] - Launch lazy future ... done
[10:34:45.456] run() for ‘MultisessionFuture’ ... done
[10:34:45.456] result() for ClusterFuture ...
[10:34:45.456] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.456] - Validating connection of MultisessionFuture
[10:34:45.499] - received message: FutureResult
[10:34:45.499] - Received FutureResult
[10:34:45.499] - Erased future from FutureRegistry
[10:34:45.500] result() for ClusterFuture ...
[10:34:45.500] - result already collected: FutureResult
[10:34:45.500] result() for ClusterFuture ... done
[10:34:45.500] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.500] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ finished    : POSIXct[1:1], format: "2025-01-07 10:34:45"
 $ session_uuid: chr "13804671-66af-7bf7-88c5-a92f4f39d19b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "c3bfbccbe859"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "c3bfbccbe859" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 90216
  .. ..$ time  : POSIXct[1:1], format: "2025-01-07 10:34:45"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[10:34:45.507] result() for ClusterFuture ...
[10:34:45.507] - result already collected: FutureResult
[10:34:45.508] result() for ClusterFuture ... done
[10:34:45.508] result() for ClusterFuture ...
[10:34:45.508] - result already collected: FutureResult
[10:34:45.508] result() for ClusterFuture ... done
[10:34:45.508] getGlobalsAndPackages() ...
[10:34:45.508] Searching for globals...
[10:34:45.511] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[10:34:45.511] Searching for globals ... DONE
[10:34:45.511] Resolving globals: FALSE
[10:34:45.512] 
[10:34:45.512] - packages: [1] ‘utils’
[10:34:45.512] getGlobalsAndPackages() ... DONE
[10:34:45.512] run() for ‘Future’ ...
[10:34:45.512] - state: ‘created’
[10:34:45.512] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.526] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.526]   - Field: ‘node’
[10:34:45.526]   - Field: ‘label’
[10:34:45.527]   - Field: ‘local’
[10:34:45.527]   - Field: ‘owner’
[10:34:45.527]   - Field: ‘envir’
[10:34:45.527]   - Field: ‘workers’
[10:34:45.527]   - Field: ‘packages’
[10:34:45.527]   - Field: ‘gc’
[10:34:45.527]   - Field: ‘conditions’
[10:34:45.527]   - Field: ‘persistent’
[10:34:45.527]   - Field: ‘expr’
[10:34:45.527]   - Field: ‘uuid’
[10:34:45.527]   - Field: ‘seed’
[10:34:45.528]   - Field: ‘version’
[10:34:45.528]   - Field: ‘result’
[10:34:45.528]   - Field: ‘asynchronous’
[10:34:45.528]   - Field: ‘calls’
[10:34:45.528]   - Field: ‘globals’
[10:34:45.528]   - Field: ‘stdout’
[10:34:45.528]   - Field: ‘earlySignal’
[10:34:45.528]   - Field: ‘lazy’
[10:34:45.528]   - Field: ‘state’
[10:34:45.528] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.528] - Launch lazy future ...
[10:34:45.529] Packages needed by the future expression (n = 1): ‘utils’
[10:34:45.529] Packages needed by future strategies (n = 0): <none>
[10:34:45.529] {
[10:34:45.529]     {
[10:34:45.529]         {
[10:34:45.529]             ...future.startTime <- base::Sys.time()
[10:34:45.529]             {
[10:34:45.529]                 {
[10:34:45.529]                   {
[10:34:45.529]                     {
[10:34:45.529]                       {
[10:34:45.529]                         base::local({
[10:34:45.529]                           has_future <- base::requireNamespace("future", 
[10:34:45.529]                             quietly = TRUE)
[10:34:45.529]                           if (has_future) {
[10:34:45.529]                             ns <- base::getNamespace("future")
[10:34:45.529]                             version <- ns[[".package"]][["version"]]
[10:34:45.529]                             if (is.null(version)) 
[10:34:45.529]                               version <- utils::packageVersion("future")
[10:34:45.529]                           }
[10:34:45.529]                           else {
[10:34:45.529]                             version <- NULL
[10:34:45.529]                           }
[10:34:45.529]                           if (!has_future || version < "1.8.0") {
[10:34:45.529]                             info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.529]                               "", base::R.version$version.string), 
[10:34:45.529]                               platform = base::sprintf("%s (%s-bit)", 
[10:34:45.529]                                 base::R.version$platform, 8 * 
[10:34:45.529]                                   base::.Machine$sizeof.pointer), 
[10:34:45.529]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.529]                                 "release", "version")], collapse = " "), 
[10:34:45.529]                               hostname = base::Sys.info()[["nodename"]])
[10:34:45.529]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.529]                               info)
[10:34:45.529]                             info <- base::paste(info, collapse = "; ")
[10:34:45.529]                             if (!has_future) {
[10:34:45.529]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.529]                                 info)
[10:34:45.529]                             }
[10:34:45.529]                             else {
[10:34:45.529]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.529]                                 info, version)
[10:34:45.529]                             }
[10:34:45.529]                             base::stop(msg)
[10:34:45.529]                           }
[10:34:45.529]                         })
[10:34:45.529]                       }
[10:34:45.529]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.529]                       base::options(mc.cores = 1L)
[10:34:45.529]                     }
[10:34:45.529]                     base::local({
[10:34:45.529]                       for (pkg in "utils") {
[10:34:45.529]                         base::loadNamespace(pkg)
[10:34:45.529]                         base::library(pkg, character.only = TRUE)
[10:34:45.529]                       }
[10:34:45.529]                     })
[10:34:45.529]                   }
[10:34:45.529]                   ...future.strategy.old <- future::plan("list")
[10:34:45.529]                   options(future.plan = NULL)
[10:34:45.529]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.529]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.529]                 }
[10:34:45.529]                 ...future.workdir <- getwd()
[10:34:45.529]             }
[10:34:45.529]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.529]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.529]         }
[10:34:45.529]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.529]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.529]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.529]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.529]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.529]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.529]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.529]             base::names(...future.oldOptions))
[10:34:45.529]     }
[10:34:45.529]     if (TRUE) {
[10:34:45.529]     }
[10:34:45.529]     else {
[10:34:45.529]         if (NA) {
[10:34:45.529]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.529]                 open = "w")
[10:34:45.529]         }
[10:34:45.529]         else {
[10:34:45.529]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.529]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.529]         }
[10:34:45.529]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.529]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.529]             base::sink(type = "output", split = FALSE)
[10:34:45.529]             base::close(...future.stdout)
[10:34:45.529]         }, add = TRUE)
[10:34:45.529]     }
[10:34:45.529]     ...future.frame <- base::sys.nframe()
[10:34:45.529]     ...future.conditions <- base::list()
[10:34:45.529]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.529]     if (FALSE) {
[10:34:45.529]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.529]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.529]     }
[10:34:45.529]     ...future.result <- base::tryCatch({
[10:34:45.529]         base::withCallingHandlers({
[10:34:45.529]             ...future.value <- base::withVisible(base::local({
[10:34:45.529]                 ...future.makeSendCondition <- base::local({
[10:34:45.529]                   sendCondition <- NULL
[10:34:45.529]                   function(frame = 1L) {
[10:34:45.529]                     if (is.function(sendCondition)) 
[10:34:45.529]                       return(sendCondition)
[10:34:45.529]                     ns <- getNamespace("parallel")
[10:34:45.529]                     if (exists("sendData", mode = "function", 
[10:34:45.529]                       envir = ns)) {
[10:34:45.529]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.529]                         envir = ns)
[10:34:45.529]                       envir <- sys.frame(frame)
[10:34:45.529]                       master <- NULL
[10:34:45.529]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.529]                         !identical(envir, emptyenv())) {
[10:34:45.529]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.529]                           inherits = FALSE)) {
[10:34:45.529]                           master <- get("master", mode = "list", 
[10:34:45.529]                             envir = envir, inherits = FALSE)
[10:34:45.529]                           if (inherits(master, c("SOCKnode", 
[10:34:45.529]                             "SOCK0node"))) {
[10:34:45.529]                             sendCondition <<- function(cond) {
[10:34:45.529]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.529]                                 success = TRUE)
[10:34:45.529]                               parallel_sendData(master, data)
[10:34:45.529]                             }
[10:34:45.529]                             return(sendCondition)
[10:34:45.529]                           }
[10:34:45.529]                         }
[10:34:45.529]                         frame <- frame + 1L
[10:34:45.529]                         envir <- sys.frame(frame)
[10:34:45.529]                       }
[10:34:45.529]                     }
[10:34:45.529]                     sendCondition <<- function(cond) NULL
[10:34:45.529]                   }
[10:34:45.529]                 })
[10:34:45.529]                 withCallingHandlers({
[10:34:45.529]                   {
[10:34:45.529]                     print(1:50)
[10:34:45.529]                     str(1:50)
[10:34:45.529]                     cat(letters, sep = "-")
[10:34:45.529]                     cat(1:6, collapse = "\n")
[10:34:45.529]                     write.table(datasets::iris[1:10, ], sep = "\t")
[10:34:45.529]                     42L
[10:34:45.529]                   }
[10:34:45.529]                 }, immediateCondition = function(cond) {
[10:34:45.529]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.529]                   sendCondition(cond)
[10:34:45.529]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.529]                   {
[10:34:45.529]                     inherits <- base::inherits
[10:34:45.529]                     invokeRestart <- base::invokeRestart
[10:34:45.529]                     is.null <- base::is.null
[10:34:45.529]                     muffled <- FALSE
[10:34:45.529]                     if (inherits(cond, "message")) {
[10:34:45.529]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.529]                       if (muffled) 
[10:34:45.529]                         invokeRestart("muffleMessage")
[10:34:45.529]                     }
[10:34:45.529]                     else if (inherits(cond, "warning")) {
[10:34:45.529]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.529]                       if (muffled) 
[10:34:45.529]                         invokeRestart("muffleWarning")
[10:34:45.529]                     }
[10:34:45.529]                     else if (inherits(cond, "condition")) {
[10:34:45.529]                       if (!is.null(pattern)) {
[10:34:45.529]                         computeRestarts <- base::computeRestarts
[10:34:45.529]                         grepl <- base::grepl
[10:34:45.529]                         restarts <- computeRestarts(cond)
[10:34:45.529]                         for (restart in restarts) {
[10:34:45.529]                           name <- restart$name
[10:34:45.529]                           if (is.null(name)) 
[10:34:45.529]                             next
[10:34:45.529]                           if (!grepl(pattern, name)) 
[10:34:45.529]                             next
[10:34:45.529]                           invokeRestart(restart)
[10:34:45.529]                           muffled <- TRUE
[10:34:45.529]                           break
[10:34:45.529]                         }
[10:34:45.529]                       }
[10:34:45.529]                     }
[10:34:45.529]                     invisible(muffled)
[10:34:45.529]                   }
[10:34:45.529]                   muffleCondition(cond)
[10:34:45.529]                 })
[10:34:45.529]             }))
[10:34:45.529]             future::FutureResult(value = ...future.value$value, 
[10:34:45.529]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.529]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.529]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.529]                     ...future.globalenv.names))
[10:34:45.529]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.529]         }, condition = base::local({
[10:34:45.529]             c <- base::c
[10:34:45.529]             inherits <- base::inherits
[10:34:45.529]             invokeRestart <- base::invokeRestart
[10:34:45.529]             length <- base::length
[10:34:45.529]             list <- base::list
[10:34:45.529]             seq.int <- base::seq.int
[10:34:45.529]             signalCondition <- base::signalCondition
[10:34:45.529]             sys.calls <- base::sys.calls
[10:34:45.529]             `[[` <- base::`[[`
[10:34:45.529]             `+` <- base::`+`
[10:34:45.529]             `<<-` <- base::`<<-`
[10:34:45.529]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.529]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.529]                   3L)]
[10:34:45.529]             }
[10:34:45.529]             function(cond) {
[10:34:45.529]                 is_error <- inherits(cond, "error")
[10:34:45.529]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.529]                   NULL)
[10:34:45.529]                 if (is_error) {
[10:34:45.529]                   sessionInformation <- function() {
[10:34:45.529]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.529]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.529]                       search = base::search(), system = base::Sys.info())
[10:34:45.529]                   }
[10:34:45.529]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.529]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.529]                     cond$call), session = sessionInformation(), 
[10:34:45.529]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.529]                   signalCondition(cond)
[10:34:45.529]                 }
[10:34:45.529]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.529]                 "immediateCondition"))) {
[10:34:45.529]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.529]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.529]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.529]                   if (TRUE && !signal) {
[10:34:45.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.529]                     {
[10:34:45.529]                       inherits <- base::inherits
[10:34:45.529]                       invokeRestart <- base::invokeRestart
[10:34:45.529]                       is.null <- base::is.null
[10:34:45.529]                       muffled <- FALSE
[10:34:45.529]                       if (inherits(cond, "message")) {
[10:34:45.529]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.529]                         if (muffled) 
[10:34:45.529]                           invokeRestart("muffleMessage")
[10:34:45.529]                       }
[10:34:45.529]                       else if (inherits(cond, "warning")) {
[10:34:45.529]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.529]                         if (muffled) 
[10:34:45.529]                           invokeRestart("muffleWarning")
[10:34:45.529]                       }
[10:34:45.529]                       else if (inherits(cond, "condition")) {
[10:34:45.529]                         if (!is.null(pattern)) {
[10:34:45.529]                           computeRestarts <- base::computeRestarts
[10:34:45.529]                           grepl <- base::grepl
[10:34:45.529]                           restarts <- computeRestarts(cond)
[10:34:45.529]                           for (restart in restarts) {
[10:34:45.529]                             name <- restart$name
[10:34:45.529]                             if (is.null(name)) 
[10:34:45.529]                               next
[10:34:45.529]                             if (!grepl(pattern, name)) 
[10:34:45.529]                               next
[10:34:45.529]                             invokeRestart(restart)
[10:34:45.529]                             muffled <- TRUE
[10:34:45.529]                             break
[10:34:45.529]                           }
[10:34:45.529]                         }
[10:34:45.529]                       }
[10:34:45.529]                       invisible(muffled)
[10:34:45.529]                     }
[10:34:45.529]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.529]                   }
[10:34:45.529]                 }
[10:34:45.529]                 else {
[10:34:45.529]                   if (TRUE) {
[10:34:45.529]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.529]                     {
[10:34:45.529]                       inherits <- base::inherits
[10:34:45.529]                       invokeRestart <- base::invokeRestart
[10:34:45.529]                       is.null <- base::is.null
[10:34:45.529]                       muffled <- FALSE
[10:34:45.529]                       if (inherits(cond, "message")) {
[10:34:45.529]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.529]                         if (muffled) 
[10:34:45.529]                           invokeRestart("muffleMessage")
[10:34:45.529]                       }
[10:34:45.529]                       else if (inherits(cond, "warning")) {
[10:34:45.529]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.529]                         if (muffled) 
[10:34:45.529]                           invokeRestart("muffleWarning")
[10:34:45.529]                       }
[10:34:45.529]                       else if (inherits(cond, "condition")) {
[10:34:45.529]                         if (!is.null(pattern)) {
[10:34:45.529]                           computeRestarts <- base::computeRestarts
[10:34:45.529]                           grepl <- base::grepl
[10:34:45.529]                           restarts <- computeRestarts(cond)
[10:34:45.529]                           for (restart in restarts) {
[10:34:45.529]                             name <- restart$name
[10:34:45.529]                             if (is.null(name)) 
[10:34:45.529]                               next
[10:34:45.529]                             if (!grepl(pattern, name)) 
[10:34:45.529]                               next
[10:34:45.529]                             invokeRestart(restart)
[10:34:45.529]                             muffled <- TRUE
[10:34:45.529]                             break
[10:34:45.529]                           }
[10:34:45.529]                         }
[10:34:45.529]                       }
[10:34:45.529]                       invisible(muffled)
[10:34:45.529]                     }
[10:34:45.529]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.529]                   }
[10:34:45.529]                 }
[10:34:45.529]             }
[10:34:45.529]         }))
[10:34:45.529]     }, error = function(ex) {
[10:34:45.529]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.529]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.529]                 ...future.rng), started = ...future.startTime, 
[10:34:45.529]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.529]             version = "1.8"), class = "FutureResult")
[10:34:45.529]     }, finally = {
[10:34:45.529]         if (!identical(...future.workdir, getwd())) 
[10:34:45.529]             setwd(...future.workdir)
[10:34:45.529]         {
[10:34:45.529]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.529]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.529]             }
[10:34:45.529]             base::options(...future.oldOptions)
[10:34:45.529]             if (.Platform$OS.type == "windows") {
[10:34:45.529]                 old_names <- names(...future.oldEnvVars)
[10:34:45.529]                 envs <- base::Sys.getenv()
[10:34:45.529]                 names <- names(envs)
[10:34:45.529]                 common <- intersect(names, old_names)
[10:34:45.529]                 added <- setdiff(names, old_names)
[10:34:45.529]                 removed <- setdiff(old_names, names)
[10:34:45.529]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.529]                   envs[common]]
[10:34:45.529]                 NAMES <- toupper(changed)
[10:34:45.529]                 args <- list()
[10:34:45.529]                 for (kk in seq_along(NAMES)) {
[10:34:45.529]                   name <- changed[[kk]]
[10:34:45.529]                   NAME <- NAMES[[kk]]
[10:34:45.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.529]                     next
[10:34:45.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.529]                 }
[10:34:45.529]                 NAMES <- toupper(added)
[10:34:45.529]                 for (kk in seq_along(NAMES)) {
[10:34:45.529]                   name <- added[[kk]]
[10:34:45.529]                   NAME <- NAMES[[kk]]
[10:34:45.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.529]                     next
[10:34:45.529]                   args[[name]] <- ""
[10:34:45.529]                 }
[10:34:45.529]                 NAMES <- toupper(removed)
[10:34:45.529]                 for (kk in seq_along(NAMES)) {
[10:34:45.529]                   name <- removed[[kk]]
[10:34:45.529]                   NAME <- NAMES[[kk]]
[10:34:45.529]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.529]                     next
[10:34:45.529]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.529]                 }
[10:34:45.529]                 if (length(args) > 0) 
[10:34:45.529]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.529]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.529]             }
[10:34:45.529]             else {
[10:34:45.529]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.529]             }
[10:34:45.529]             {
[10:34:45.529]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.529]                   0L) {
[10:34:45.529]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.529]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.529]                   base::options(opts)
[10:34:45.529]                 }
[10:34:45.529]                 {
[10:34:45.529]                   {
[10:34:45.529]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.529]                     NULL
[10:34:45.529]                   }
[10:34:45.529]                   options(future.plan = NULL)
[10:34:45.529]                   if (is.na(NA_character_)) 
[10:34:45.529]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.529]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.529]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.529]                     .init = FALSE)
[10:34:45.529]                 }
[10:34:45.529]             }
[10:34:45.529]         }
[10:34:45.529]     })
[10:34:45.529]     if (FALSE) {
[10:34:45.529]         base::sink(type = "output", split = FALSE)
[10:34:45.529]         if (NA) {
[10:34:45.529]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.529]         }
[10:34:45.529]         else {
[10:34:45.529]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.529]         }
[10:34:45.529]         base::close(...future.stdout)
[10:34:45.529]         ...future.stdout <- NULL
[10:34:45.529]     }
[10:34:45.529]     ...future.result$conditions <- ...future.conditions
[10:34:45.529]     ...future.result$finished <- base::Sys.time()
[10:34:45.529]     ...future.result
[10:34:45.529] }
[10:34:45.532] MultisessionFuture started
[10:34:45.532] - Launch lazy future ... done
[10:34:45.532] run() for ‘MultisessionFuture’ ... done
[10:34:45.533] result() for ClusterFuture ...
[10:34:45.533] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.533] - Validating connection of MultisessionFuture
[10:34:45.575] - received message: FutureResult
[10:34:45.575] - Received FutureResult
[10:34:45.575] - Erased future from FutureRegistry
[10:34:45.576] result() for ClusterFuture ...
[10:34:45.576] - result already collected: FutureResult
[10:34:45.576] result() for ClusterFuture ... done
[10:34:45.576] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.576] result() for ClusterFuture ... done
[10:34:45.576] result() for ClusterFuture ...
[10:34:45.576] - result already collected: FutureResult
[10:34:45.576] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[10:34:45.577] getGlobalsAndPackages() ...
[10:34:45.577] Searching for globals...
[10:34:45.577] - globals found: [1] ‘print’
[10:34:45.577] Searching for globals ... DONE
[10:34:45.577] Resolving globals: FALSE
[10:34:45.578] 
[10:34:45.578] 
[10:34:45.578] getGlobalsAndPackages() ... DONE
[10:34:45.578] run() for ‘Future’ ...
[10:34:45.578] - state: ‘created’
[10:34:45.578] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:34:45.592] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:34:45.592] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:34:45.592]   - Field: ‘node’
[10:34:45.592]   - Field: ‘label’
[10:34:45.592]   - Field: ‘local’
[10:34:45.592]   - Field: ‘owner’
[10:34:45.592]   - Field: ‘envir’
[10:34:45.592]   - Field: ‘workers’
[10:34:45.593]   - Field: ‘packages’
[10:34:45.593]   - Field: ‘gc’
[10:34:45.593]   - Field: ‘conditions’
[10:34:45.593]   - Field: ‘persistent’
[10:34:45.593]   - Field: ‘expr’
[10:34:45.593]   - Field: ‘uuid’
[10:34:45.593]   - Field: ‘seed’
[10:34:45.593]   - Field: ‘version’
[10:34:45.593]   - Field: ‘result’
[10:34:45.593]   - Field: ‘asynchronous’
[10:34:45.594]   - Field: ‘calls’
[10:34:45.594]   - Field: ‘globals’
[10:34:45.594]   - Field: ‘stdout’
[10:34:45.594]   - Field: ‘earlySignal’
[10:34:45.594]   - Field: ‘lazy’
[10:34:45.594]   - Field: ‘state’
[10:34:45.594] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:34:45.594] - Launch lazy future ...
[10:34:45.594] Packages needed by the future expression (n = 0): <none>
[10:34:45.595] Packages needed by future strategies (n = 0): <none>
[10:34:45.595] {
[10:34:45.595]     {
[10:34:45.595]         {
[10:34:45.595]             ...future.startTime <- base::Sys.time()
[10:34:45.595]             {
[10:34:45.595]                 {
[10:34:45.595]                   {
[10:34:45.595]                     {
[10:34:45.595]                       base::local({
[10:34:45.595]                         has_future <- base::requireNamespace("future", 
[10:34:45.595]                           quietly = TRUE)
[10:34:45.595]                         if (has_future) {
[10:34:45.595]                           ns <- base::getNamespace("future")
[10:34:45.595]                           version <- ns[[".package"]][["version"]]
[10:34:45.595]                           if (is.null(version)) 
[10:34:45.595]                             version <- utils::packageVersion("future")
[10:34:45.595]                         }
[10:34:45.595]                         else {
[10:34:45.595]                           version <- NULL
[10:34:45.595]                         }
[10:34:45.595]                         if (!has_future || version < "1.8.0") {
[10:34:45.595]                           info <- base::c(r_version = base::gsub("R version ", 
[10:34:45.595]                             "", base::R.version$version.string), 
[10:34:45.595]                             platform = base::sprintf("%s (%s-bit)", 
[10:34:45.595]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:34:45.595]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:34:45.595]                               "release", "version")], collapse = " "), 
[10:34:45.595]                             hostname = base::Sys.info()[["nodename"]])
[10:34:45.595]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:34:45.595]                             info)
[10:34:45.595]                           info <- base::paste(info, collapse = "; ")
[10:34:45.595]                           if (!has_future) {
[10:34:45.595]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:34:45.595]                               info)
[10:34:45.595]                           }
[10:34:45.595]                           else {
[10:34:45.595]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:34:45.595]                               info, version)
[10:34:45.595]                           }
[10:34:45.595]                           base::stop(msg)
[10:34:45.595]                         }
[10:34:45.595]                       })
[10:34:45.595]                     }
[10:34:45.595]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:34:45.595]                     base::options(mc.cores = 1L)
[10:34:45.595]                   }
[10:34:45.595]                   ...future.strategy.old <- future::plan("list")
[10:34:45.595]                   options(future.plan = NULL)
[10:34:45.595]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.595]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:34:45.595]                 }
[10:34:45.595]                 ...future.workdir <- getwd()
[10:34:45.595]             }
[10:34:45.595]             ...future.oldOptions <- base::as.list(base::.Options)
[10:34:45.595]             ...future.oldEnvVars <- base::Sys.getenv()
[10:34:45.595]         }
[10:34:45.595]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:34:45.595]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:34:45.595]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:34:45.595]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:34:45.595]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:34:45.595]             future.stdout.windows.reencode = NULL, width = 80L)
[10:34:45.595]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:34:45.595]             base::names(...future.oldOptions))
[10:34:45.595]     }
[10:34:45.595]     if (FALSE) {
[10:34:45.595]     }
[10:34:45.595]     else {
[10:34:45.595]         if (TRUE) {
[10:34:45.595]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:34:45.595]                 open = "w")
[10:34:45.595]         }
[10:34:45.595]         else {
[10:34:45.595]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:34:45.595]                 windows = "NUL", "/dev/null"), open = "w")
[10:34:45.595]         }
[10:34:45.595]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:34:45.595]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:34:45.595]             base::sink(type = "output", split = FALSE)
[10:34:45.595]             base::close(...future.stdout)
[10:34:45.595]         }, add = TRUE)
[10:34:45.595]     }
[10:34:45.595]     ...future.frame <- base::sys.nframe()
[10:34:45.595]     ...future.conditions <- base::list()
[10:34:45.595]     ...future.rng <- base::globalenv()$.Random.seed
[10:34:45.595]     if (FALSE) {
[10:34:45.595]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:34:45.595]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:34:45.595]     }
[10:34:45.595]     ...future.result <- base::tryCatch({
[10:34:45.595]         base::withCallingHandlers({
[10:34:45.595]             ...future.value <- base::withVisible(base::local({
[10:34:45.595]                 ...future.makeSendCondition <- base::local({
[10:34:45.595]                   sendCondition <- NULL
[10:34:45.595]                   function(frame = 1L) {
[10:34:45.595]                     if (is.function(sendCondition)) 
[10:34:45.595]                       return(sendCondition)
[10:34:45.595]                     ns <- getNamespace("parallel")
[10:34:45.595]                     if (exists("sendData", mode = "function", 
[10:34:45.595]                       envir = ns)) {
[10:34:45.595]                       parallel_sendData <- get("sendData", mode = "function", 
[10:34:45.595]                         envir = ns)
[10:34:45.595]                       envir <- sys.frame(frame)
[10:34:45.595]                       master <- NULL
[10:34:45.595]                       while (!identical(envir, .GlobalEnv) && 
[10:34:45.595]                         !identical(envir, emptyenv())) {
[10:34:45.595]                         if (exists("master", mode = "list", envir = envir, 
[10:34:45.595]                           inherits = FALSE)) {
[10:34:45.595]                           master <- get("master", mode = "list", 
[10:34:45.595]                             envir = envir, inherits = FALSE)
[10:34:45.595]                           if (inherits(master, c("SOCKnode", 
[10:34:45.595]                             "SOCK0node"))) {
[10:34:45.595]                             sendCondition <<- function(cond) {
[10:34:45.595]                               data <- list(type = "VALUE", value = cond, 
[10:34:45.595]                                 success = TRUE)
[10:34:45.595]                               parallel_sendData(master, data)
[10:34:45.595]                             }
[10:34:45.595]                             return(sendCondition)
[10:34:45.595]                           }
[10:34:45.595]                         }
[10:34:45.595]                         frame <- frame + 1L
[10:34:45.595]                         envir <- sys.frame(frame)
[10:34:45.595]                       }
[10:34:45.595]                     }
[10:34:45.595]                     sendCondition <<- function(cond) NULL
[10:34:45.595]                   }
[10:34:45.595]                 })
[10:34:45.595]                 withCallingHandlers({
[10:34:45.595]                   print(42)
[10:34:45.595]                 }, immediateCondition = function(cond) {
[10:34:45.595]                   sendCondition <- ...future.makeSendCondition()
[10:34:45.595]                   sendCondition(cond)
[10:34:45.595]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.595]                   {
[10:34:45.595]                     inherits <- base::inherits
[10:34:45.595]                     invokeRestart <- base::invokeRestart
[10:34:45.595]                     is.null <- base::is.null
[10:34:45.595]                     muffled <- FALSE
[10:34:45.595]                     if (inherits(cond, "message")) {
[10:34:45.595]                       muffled <- grepl(pattern, "muffleMessage")
[10:34:45.595]                       if (muffled) 
[10:34:45.595]                         invokeRestart("muffleMessage")
[10:34:45.595]                     }
[10:34:45.595]                     else if (inherits(cond, "warning")) {
[10:34:45.595]                       muffled <- grepl(pattern, "muffleWarning")
[10:34:45.595]                       if (muffled) 
[10:34:45.595]                         invokeRestart("muffleWarning")
[10:34:45.595]                     }
[10:34:45.595]                     else if (inherits(cond, "condition")) {
[10:34:45.595]                       if (!is.null(pattern)) {
[10:34:45.595]                         computeRestarts <- base::computeRestarts
[10:34:45.595]                         grepl <- base::grepl
[10:34:45.595]                         restarts <- computeRestarts(cond)
[10:34:45.595]                         for (restart in restarts) {
[10:34:45.595]                           name <- restart$name
[10:34:45.595]                           if (is.null(name)) 
[10:34:45.595]                             next
[10:34:45.595]                           if (!grepl(pattern, name)) 
[10:34:45.595]                             next
[10:34:45.595]                           invokeRestart(restart)
[10:34:45.595]                           muffled <- TRUE
[10:34:45.595]                           break
[10:34:45.595]                         }
[10:34:45.595]                       }
[10:34:45.595]                     }
[10:34:45.595]                     invisible(muffled)
[10:34:45.595]                   }
[10:34:45.595]                   muffleCondition(cond)
[10:34:45.595]                 })
[10:34:45.595]             }))
[10:34:45.595]             future::FutureResult(value = ...future.value$value, 
[10:34:45.595]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.595]                   ...future.rng), globalenv = if (FALSE) 
[10:34:45.595]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:34:45.595]                     ...future.globalenv.names))
[10:34:45.595]                 else NULL, started = ...future.startTime, version = "1.8")
[10:34:45.595]         }, condition = base::local({
[10:34:45.595]             c <- base::c
[10:34:45.595]             inherits <- base::inherits
[10:34:45.595]             invokeRestart <- base::invokeRestart
[10:34:45.595]             length <- base::length
[10:34:45.595]             list <- base::list
[10:34:45.595]             seq.int <- base::seq.int
[10:34:45.595]             signalCondition <- base::signalCondition
[10:34:45.595]             sys.calls <- base::sys.calls
[10:34:45.595]             `[[` <- base::`[[`
[10:34:45.595]             `+` <- base::`+`
[10:34:45.595]             `<<-` <- base::`<<-`
[10:34:45.595]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:34:45.595]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:34:45.595]                   3L)]
[10:34:45.595]             }
[10:34:45.595]             function(cond) {
[10:34:45.595]                 is_error <- inherits(cond, "error")
[10:34:45.595]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:34:45.595]                   NULL)
[10:34:45.595]                 if (is_error) {
[10:34:45.595]                   sessionInformation <- function() {
[10:34:45.595]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:34:45.595]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:34:45.595]                       search = base::search(), system = base::Sys.info())
[10:34:45.595]                   }
[10:34:45.595]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.595]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:34:45.595]                     cond$call), session = sessionInformation(), 
[10:34:45.595]                     timestamp = base::Sys.time(), signaled = 0L)
[10:34:45.595]                   signalCondition(cond)
[10:34:45.595]                 }
[10:34:45.595]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:34:45.595]                 "immediateCondition"))) {
[10:34:45.595]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:34:45.595]                   ...future.conditions[[length(...future.conditions) + 
[10:34:45.595]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:34:45.595]                   if (TRUE && !signal) {
[10:34:45.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.595]                     {
[10:34:45.595]                       inherits <- base::inherits
[10:34:45.595]                       invokeRestart <- base::invokeRestart
[10:34:45.595]                       is.null <- base::is.null
[10:34:45.595]                       muffled <- FALSE
[10:34:45.595]                       if (inherits(cond, "message")) {
[10:34:45.595]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.595]                         if (muffled) 
[10:34:45.595]                           invokeRestart("muffleMessage")
[10:34:45.595]                       }
[10:34:45.595]                       else if (inherits(cond, "warning")) {
[10:34:45.595]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.595]                         if (muffled) 
[10:34:45.595]                           invokeRestart("muffleWarning")
[10:34:45.595]                       }
[10:34:45.595]                       else if (inherits(cond, "condition")) {
[10:34:45.595]                         if (!is.null(pattern)) {
[10:34:45.595]                           computeRestarts <- base::computeRestarts
[10:34:45.595]                           grepl <- base::grepl
[10:34:45.595]                           restarts <- computeRestarts(cond)
[10:34:45.595]                           for (restart in restarts) {
[10:34:45.595]                             name <- restart$name
[10:34:45.595]                             if (is.null(name)) 
[10:34:45.595]                               next
[10:34:45.595]                             if (!grepl(pattern, name)) 
[10:34:45.595]                               next
[10:34:45.595]                             invokeRestart(restart)
[10:34:45.595]                             muffled <- TRUE
[10:34:45.595]                             break
[10:34:45.595]                           }
[10:34:45.595]                         }
[10:34:45.595]                       }
[10:34:45.595]                       invisible(muffled)
[10:34:45.595]                     }
[10:34:45.595]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.595]                   }
[10:34:45.595]                 }
[10:34:45.595]                 else {
[10:34:45.595]                   if (TRUE) {
[10:34:45.595]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:34:45.595]                     {
[10:34:45.595]                       inherits <- base::inherits
[10:34:45.595]                       invokeRestart <- base::invokeRestart
[10:34:45.595]                       is.null <- base::is.null
[10:34:45.595]                       muffled <- FALSE
[10:34:45.595]                       if (inherits(cond, "message")) {
[10:34:45.595]                         muffled <- grepl(pattern, "muffleMessage")
[10:34:45.595]                         if (muffled) 
[10:34:45.595]                           invokeRestart("muffleMessage")
[10:34:45.595]                       }
[10:34:45.595]                       else if (inherits(cond, "warning")) {
[10:34:45.595]                         muffled <- grepl(pattern, "muffleWarning")
[10:34:45.595]                         if (muffled) 
[10:34:45.595]                           invokeRestart("muffleWarning")
[10:34:45.595]                       }
[10:34:45.595]                       else if (inherits(cond, "condition")) {
[10:34:45.595]                         if (!is.null(pattern)) {
[10:34:45.595]                           computeRestarts <- base::computeRestarts
[10:34:45.595]                           grepl <- base::grepl
[10:34:45.595]                           restarts <- computeRestarts(cond)
[10:34:45.595]                           for (restart in restarts) {
[10:34:45.595]                             name <- restart$name
[10:34:45.595]                             if (is.null(name)) 
[10:34:45.595]                               next
[10:34:45.595]                             if (!grepl(pattern, name)) 
[10:34:45.595]                               next
[10:34:45.595]                             invokeRestart(restart)
[10:34:45.595]                             muffled <- TRUE
[10:34:45.595]                             break
[10:34:45.595]                           }
[10:34:45.595]                         }
[10:34:45.595]                       }
[10:34:45.595]                       invisible(muffled)
[10:34:45.595]                     }
[10:34:45.595]                     muffleCondition(cond, pattern = "^muffle")
[10:34:45.595]                   }
[10:34:45.595]                 }
[10:34:45.595]             }
[10:34:45.595]         }))
[10:34:45.595]     }, error = function(ex) {
[10:34:45.595]         base::structure(base::list(value = NULL, visible = NULL, 
[10:34:45.595]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:34:45.595]                 ...future.rng), started = ...future.startTime, 
[10:34:45.595]             finished = Sys.time(), session_uuid = NA_character_, 
[10:34:45.595]             version = "1.8"), class = "FutureResult")
[10:34:45.595]     }, finally = {
[10:34:45.595]         if (!identical(...future.workdir, getwd())) 
[10:34:45.595]             setwd(...future.workdir)
[10:34:45.595]         {
[10:34:45.595]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:34:45.595]                 ...future.oldOptions$nwarnings <- NULL
[10:34:45.595]             }
[10:34:45.595]             base::options(...future.oldOptions)
[10:34:45.595]             if (.Platform$OS.type == "windows") {
[10:34:45.595]                 old_names <- names(...future.oldEnvVars)
[10:34:45.595]                 envs <- base::Sys.getenv()
[10:34:45.595]                 names <- names(envs)
[10:34:45.595]                 common <- intersect(names, old_names)
[10:34:45.595]                 added <- setdiff(names, old_names)
[10:34:45.595]                 removed <- setdiff(old_names, names)
[10:34:45.595]                 changed <- common[...future.oldEnvVars[common] != 
[10:34:45.595]                   envs[common]]
[10:34:45.595]                 NAMES <- toupper(changed)
[10:34:45.595]                 args <- list()
[10:34:45.595]                 for (kk in seq_along(NAMES)) {
[10:34:45.595]                   name <- changed[[kk]]
[10:34:45.595]                   NAME <- NAMES[[kk]]
[10:34:45.595]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.595]                     next
[10:34:45.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.595]                 }
[10:34:45.595]                 NAMES <- toupper(added)
[10:34:45.595]                 for (kk in seq_along(NAMES)) {
[10:34:45.595]                   name <- added[[kk]]
[10:34:45.595]                   NAME <- NAMES[[kk]]
[10:34:45.595]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.595]                     next
[10:34:45.595]                   args[[name]] <- ""
[10:34:45.595]                 }
[10:34:45.595]                 NAMES <- toupper(removed)
[10:34:45.595]                 for (kk in seq_along(NAMES)) {
[10:34:45.595]                   name <- removed[[kk]]
[10:34:45.595]                   NAME <- NAMES[[kk]]
[10:34:45.595]                   if (name != NAME && is.element(NAME, old_names)) 
[10:34:45.595]                     next
[10:34:45.595]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:34:45.595]                 }
[10:34:45.595]                 if (length(args) > 0) 
[10:34:45.595]                   base::do.call(base::Sys.setenv, args = args)
[10:34:45.595]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:34:45.595]             }
[10:34:45.595]             else {
[10:34:45.595]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:34:45.595]             }
[10:34:45.595]             {
[10:34:45.595]                 if (base::length(...future.futureOptionsAdded) > 
[10:34:45.595]                   0L) {
[10:34:45.595]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:34:45.595]                   base::names(opts) <- ...future.futureOptionsAdded
[10:34:45.595]                   base::options(opts)
[10:34:45.595]                 }
[10:34:45.595]                 {
[10:34:45.595]                   {
[10:34:45.595]                     base::options(mc.cores = ...future.mc.cores.old)
[10:34:45.595]                     NULL
[10:34:45.595]                   }
[10:34:45.595]                   options(future.plan = NULL)
[10:34:45.595]                   if (is.na(NA_character_)) 
[10:34:45.595]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:34:45.595]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:34:45.595]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[10:34:45.595]                     .init = FALSE)
[10:34:45.595]                 }
[10:34:45.595]             }
[10:34:45.595]         }
[10:34:45.595]     })
[10:34:45.595]     if (TRUE) {
[10:34:45.595]         base::sink(type = "output", split = FALSE)
[10:34:45.595]         if (TRUE) {
[10:34:45.595]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:34:45.595]         }
[10:34:45.595]         else {
[10:34:45.595]             ...future.result["stdout"] <- base::list(NULL)
[10:34:45.595]         }
[10:34:45.595]         base::close(...future.stdout)
[10:34:45.595]         ...future.stdout <- NULL
[10:34:45.595]     }
[10:34:45.595]     ...future.result$conditions <- ...future.conditions
[10:34:45.595]     ...future.result$finished <- base::Sys.time()
[10:34:45.595]     ...future.result
[10:34:45.595] }
[10:34:45.598] MultisessionFuture started
[10:34:45.598] - Launch lazy future ... done
[10:34:45.598] run() for ‘MultisessionFuture’ ... done
[10:34:45.598] result() for ClusterFuture ...
[10:34:45.598] receiveMessageFromWorker() for ClusterFuture ...
[10:34:45.598] - Validating connection of MultisessionFuture
[10:34:45.599] - received message: FutureResult
[10:34:45.599] - Received FutureResult
[10:34:45.600] - Erased future from FutureRegistry
[10:34:45.600] result() for ClusterFuture ...
[10:34:45.600] - result already collected: FutureResult
[10:34:45.600] result() for ClusterFuture ... done
[10:34:45.600] receiveMessageFromWorker() for ClusterFuture ... done
[10:34:45.600] result() for ClusterFuture ... done
[10:34:45.600] result() for ClusterFuture ...
[10:34:45.600] - result already collected: FutureResult
[10:34:45.600] result() for ClusterFuture ... done
[10:34:45.600] result() for ClusterFuture ...
[10:34:45.600] - result already collected: FutureResult
[10:34:45.600] result() for ClusterFuture ... done
[1] 42
[10:34:45.601] result() for ClusterFuture ...
[10:34:45.601] - result already collected: FutureResult
[10:34:45.601] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[10:34:45.602] plan(): Setting new future strategy stack:
[10:34:45.602] List of future strategies:
[10:34:45.602] 1. FutureStrategy:
[10:34:45.602]    - args: function (..., envir = parent.frame())
[10:34:45.602]    - tweaked: FALSE
[10:34:45.602]    - call: future::plan(oplan)
[10:34:45.602] plan(): nbrOfWorkers() = 1
> 
