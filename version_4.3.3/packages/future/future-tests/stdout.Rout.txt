
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:22:35.977] plan(): Setting new future strategy stack:
[16:22:35.977] List of future strategies:
[16:22:35.977] 1. sequential:
[16:22:35.977]    - args: function (..., envir = parent.frame())
[16:22:35.977]    - tweaked: FALSE
[16:22:35.977]    - call: future::plan("sequential")
[16:22:35.991] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[16:22:36.036] plan(): Setting new future strategy stack:
[16:22:36.036] List of future strategies:
[16:22:36.036] 1. sequential:
[16:22:36.036]    - args: function (..., envir = parent.frame())
[16:22:36.036]    - tweaked: FALSE
[16:22:36.036]    - call: plan(strategy)
[16:22:36.046] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[16:22:36.047] getGlobalsAndPackages() ...
[16:22:36.047] Searching for globals...
[16:22:36.056] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.057] Searching for globals ... DONE
[16:22:36.057] Resolving globals: FALSE
[16:22:36.057] 
[16:22:36.058] - packages: [1] ‘utils’
[16:22:36.058] getGlobalsAndPackages() ... DONE
[16:22:36.058] run() for ‘Future’ ...
[16:22:36.058] - state: ‘created’
[16:22:36.059] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.059] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.059] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.059]   - Field: ‘label’
[16:22:36.059]   - Field: ‘local’
[16:22:36.059]   - Field: ‘owner’
[16:22:36.060]   - Field: ‘envir’
[16:22:36.060]   - Field: ‘packages’
[16:22:36.060]   - Field: ‘gc’
[16:22:36.060]   - Field: ‘conditions’
[16:22:36.060]   - Field: ‘expr’
[16:22:36.060]   - Field: ‘uuid’
[16:22:36.060]   - Field: ‘seed’
[16:22:36.060]   - Field: ‘version’
[16:22:36.060]   - Field: ‘result’
[16:22:36.060]   - Field: ‘asynchronous’
[16:22:36.060]   - Field: ‘calls’
[16:22:36.061]   - Field: ‘globals’
[16:22:36.061]   - Field: ‘stdout’
[16:22:36.061]   - Field: ‘earlySignal’
[16:22:36.061]   - Field: ‘lazy’
[16:22:36.061]   - Field: ‘state’
[16:22:36.061] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.061] - Launch lazy future ...
[16:22:36.062] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.062] Packages needed by future strategies (n = 0): <none>
[16:22:36.063] {
[16:22:36.063]     {
[16:22:36.063]         {
[16:22:36.063]             ...future.startTime <- base::Sys.time()
[16:22:36.063]             {
[16:22:36.063]                 {
[16:22:36.063]                   {
[16:22:36.063]                     {
[16:22:36.063]                       base::local({
[16:22:36.063]                         has_future <- base::requireNamespace("future", 
[16:22:36.063]                           quietly = TRUE)
[16:22:36.063]                         if (has_future) {
[16:22:36.063]                           ns <- base::getNamespace("future")
[16:22:36.063]                           version <- ns[[".package"]][["version"]]
[16:22:36.063]                           if (is.null(version)) 
[16:22:36.063]                             version <- utils::packageVersion("future")
[16:22:36.063]                         }
[16:22:36.063]                         else {
[16:22:36.063]                           version <- NULL
[16:22:36.063]                         }
[16:22:36.063]                         if (!has_future || version < "1.8.0") {
[16:22:36.063]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.063]                             "", base::R.version$version.string), 
[16:22:36.063]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.063]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.063]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.063]                               "release", "version")], collapse = " "), 
[16:22:36.063]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.063]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.063]                             info)
[16:22:36.063]                           info <- base::paste(info, collapse = "; ")
[16:22:36.063]                           if (!has_future) {
[16:22:36.063]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.063]                               info)
[16:22:36.063]                           }
[16:22:36.063]                           else {
[16:22:36.063]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.063]                               info, version)
[16:22:36.063]                           }
[16:22:36.063]                           base::stop(msg)
[16:22:36.063]                         }
[16:22:36.063]                       })
[16:22:36.063]                     }
[16:22:36.063]                     base::local({
[16:22:36.063]                       for (pkg in "utils") {
[16:22:36.063]                         base::loadNamespace(pkg)
[16:22:36.063]                         base::library(pkg, character.only = TRUE)
[16:22:36.063]                       }
[16:22:36.063]                     })
[16:22:36.063]                   }
[16:22:36.063]                   ...future.strategy.old <- future::plan("list")
[16:22:36.063]                   options(future.plan = NULL)
[16:22:36.063]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.063]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.063]                 }
[16:22:36.063]                 ...future.workdir <- getwd()
[16:22:36.063]             }
[16:22:36.063]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.063]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.063]         }
[16:22:36.063]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.063]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.063]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.063]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.063]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.063]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.063]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.063]             base::names(...future.oldOptions))
[16:22:36.063]     }
[16:22:36.063]     if (FALSE) {
[16:22:36.063]     }
[16:22:36.063]     else {
[16:22:36.063]         if (TRUE) {
[16:22:36.063]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.063]                 open = "w")
[16:22:36.063]         }
[16:22:36.063]         else {
[16:22:36.063]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.063]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.063]         }
[16:22:36.063]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.063]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.063]             base::sink(type = "output", split = FALSE)
[16:22:36.063]             base::close(...future.stdout)
[16:22:36.063]         }, add = TRUE)
[16:22:36.063]     }
[16:22:36.063]     ...future.frame <- base::sys.nframe()
[16:22:36.063]     ...future.conditions <- base::list()
[16:22:36.063]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.063]     if (FALSE) {
[16:22:36.063]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.063]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.063]     }
[16:22:36.063]     ...future.result <- base::tryCatch({
[16:22:36.063]         base::withCallingHandlers({
[16:22:36.063]             ...future.value <- base::withVisible(base::local({
[16:22:36.063]                 print(1:50)
[16:22:36.063]                 str(1:50)
[16:22:36.063]                 cat(letters, sep = "-")
[16:22:36.063]                 cat(1:6, collapse = "\n")
[16:22:36.063]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.063]                 42L
[16:22:36.063]             }))
[16:22:36.063]             future::FutureResult(value = ...future.value$value, 
[16:22:36.063]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.063]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.063]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.063]                     ...future.globalenv.names))
[16:22:36.063]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.063]         }, condition = base::local({
[16:22:36.063]             c <- base::c
[16:22:36.063]             inherits <- base::inherits
[16:22:36.063]             invokeRestart <- base::invokeRestart
[16:22:36.063]             length <- base::length
[16:22:36.063]             list <- base::list
[16:22:36.063]             seq.int <- base::seq.int
[16:22:36.063]             signalCondition <- base::signalCondition
[16:22:36.063]             sys.calls <- base::sys.calls
[16:22:36.063]             `[[` <- base::`[[`
[16:22:36.063]             `+` <- base::`+`
[16:22:36.063]             `<<-` <- base::`<<-`
[16:22:36.063]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.063]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.063]                   3L)]
[16:22:36.063]             }
[16:22:36.063]             function(cond) {
[16:22:36.063]                 is_error <- inherits(cond, "error")
[16:22:36.063]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.063]                   NULL)
[16:22:36.063]                 if (is_error) {
[16:22:36.063]                   sessionInformation <- function() {
[16:22:36.063]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.063]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.063]                       search = base::search(), system = base::Sys.info())
[16:22:36.063]                   }
[16:22:36.063]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.063]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.063]                     cond$call), session = sessionInformation(), 
[16:22:36.063]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.063]                   signalCondition(cond)
[16:22:36.063]                 }
[16:22:36.063]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.063]                 "immediateCondition"))) {
[16:22:36.063]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.063]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.063]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.063]                   if (TRUE && !signal) {
[16:22:36.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.063]                     {
[16:22:36.063]                       inherits <- base::inherits
[16:22:36.063]                       invokeRestart <- base::invokeRestart
[16:22:36.063]                       is.null <- base::is.null
[16:22:36.063]                       muffled <- FALSE
[16:22:36.063]                       if (inherits(cond, "message")) {
[16:22:36.063]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.063]                         if (muffled) 
[16:22:36.063]                           invokeRestart("muffleMessage")
[16:22:36.063]                       }
[16:22:36.063]                       else if (inherits(cond, "warning")) {
[16:22:36.063]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.063]                         if (muffled) 
[16:22:36.063]                           invokeRestart("muffleWarning")
[16:22:36.063]                       }
[16:22:36.063]                       else if (inherits(cond, "condition")) {
[16:22:36.063]                         if (!is.null(pattern)) {
[16:22:36.063]                           computeRestarts <- base::computeRestarts
[16:22:36.063]                           grepl <- base::grepl
[16:22:36.063]                           restarts <- computeRestarts(cond)
[16:22:36.063]                           for (restart in restarts) {
[16:22:36.063]                             name <- restart$name
[16:22:36.063]                             if (is.null(name)) 
[16:22:36.063]                               next
[16:22:36.063]                             if (!grepl(pattern, name)) 
[16:22:36.063]                               next
[16:22:36.063]                             invokeRestart(restart)
[16:22:36.063]                             muffled <- TRUE
[16:22:36.063]                             break
[16:22:36.063]                           }
[16:22:36.063]                         }
[16:22:36.063]                       }
[16:22:36.063]                       invisible(muffled)
[16:22:36.063]                     }
[16:22:36.063]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.063]                   }
[16:22:36.063]                 }
[16:22:36.063]                 else {
[16:22:36.063]                   if (TRUE) {
[16:22:36.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.063]                     {
[16:22:36.063]                       inherits <- base::inherits
[16:22:36.063]                       invokeRestart <- base::invokeRestart
[16:22:36.063]                       is.null <- base::is.null
[16:22:36.063]                       muffled <- FALSE
[16:22:36.063]                       if (inherits(cond, "message")) {
[16:22:36.063]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.063]                         if (muffled) 
[16:22:36.063]                           invokeRestart("muffleMessage")
[16:22:36.063]                       }
[16:22:36.063]                       else if (inherits(cond, "warning")) {
[16:22:36.063]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.063]                         if (muffled) 
[16:22:36.063]                           invokeRestart("muffleWarning")
[16:22:36.063]                       }
[16:22:36.063]                       else if (inherits(cond, "condition")) {
[16:22:36.063]                         if (!is.null(pattern)) {
[16:22:36.063]                           computeRestarts <- base::computeRestarts
[16:22:36.063]                           grepl <- base::grepl
[16:22:36.063]                           restarts <- computeRestarts(cond)
[16:22:36.063]                           for (restart in restarts) {
[16:22:36.063]                             name <- restart$name
[16:22:36.063]                             if (is.null(name)) 
[16:22:36.063]                               next
[16:22:36.063]                             if (!grepl(pattern, name)) 
[16:22:36.063]                               next
[16:22:36.063]                             invokeRestart(restart)
[16:22:36.063]                             muffled <- TRUE
[16:22:36.063]                             break
[16:22:36.063]                           }
[16:22:36.063]                         }
[16:22:36.063]                       }
[16:22:36.063]                       invisible(muffled)
[16:22:36.063]                     }
[16:22:36.063]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.063]                   }
[16:22:36.063]                 }
[16:22:36.063]             }
[16:22:36.063]         }))
[16:22:36.063]     }, error = function(ex) {
[16:22:36.063]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.063]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.063]                 ...future.rng), started = ...future.startTime, 
[16:22:36.063]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.063]             version = "1.8"), class = "FutureResult")
[16:22:36.063]     }, finally = {
[16:22:36.063]         if (!identical(...future.workdir, getwd())) 
[16:22:36.063]             setwd(...future.workdir)
[16:22:36.063]         {
[16:22:36.063]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.063]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.063]             }
[16:22:36.063]             base::options(...future.oldOptions)
[16:22:36.063]             if (.Platform$OS.type == "windows") {
[16:22:36.063]                 old_names <- names(...future.oldEnvVars)
[16:22:36.063]                 envs <- base::Sys.getenv()
[16:22:36.063]                 names <- names(envs)
[16:22:36.063]                 common <- intersect(names, old_names)
[16:22:36.063]                 added <- setdiff(names, old_names)
[16:22:36.063]                 removed <- setdiff(old_names, names)
[16:22:36.063]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.063]                   envs[common]]
[16:22:36.063]                 NAMES <- toupper(changed)
[16:22:36.063]                 args <- list()
[16:22:36.063]                 for (kk in seq_along(NAMES)) {
[16:22:36.063]                   name <- changed[[kk]]
[16:22:36.063]                   NAME <- NAMES[[kk]]
[16:22:36.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.063]                     next
[16:22:36.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.063]                 }
[16:22:36.063]                 NAMES <- toupper(added)
[16:22:36.063]                 for (kk in seq_along(NAMES)) {
[16:22:36.063]                   name <- added[[kk]]
[16:22:36.063]                   NAME <- NAMES[[kk]]
[16:22:36.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.063]                     next
[16:22:36.063]                   args[[name]] <- ""
[16:22:36.063]                 }
[16:22:36.063]                 NAMES <- toupper(removed)
[16:22:36.063]                 for (kk in seq_along(NAMES)) {
[16:22:36.063]                   name <- removed[[kk]]
[16:22:36.063]                   NAME <- NAMES[[kk]]
[16:22:36.063]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.063]                     next
[16:22:36.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.063]                 }
[16:22:36.063]                 if (length(args) > 0) 
[16:22:36.063]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.063]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.063]             }
[16:22:36.063]             else {
[16:22:36.063]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.063]             }
[16:22:36.063]             {
[16:22:36.063]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.063]                   0L) {
[16:22:36.063]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.063]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.063]                   base::options(opts)
[16:22:36.063]                 }
[16:22:36.063]                 {
[16:22:36.063]                   {
[16:22:36.063]                     NULL
[16:22:36.063]                     RNGkind("Mersenne-Twister")
[16:22:36.063]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.063]                       inherits = FALSE)
[16:22:36.063]                   }
[16:22:36.063]                   options(future.plan = NULL)
[16:22:36.063]                   if (is.na(NA_character_)) 
[16:22:36.063]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.063]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.063]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.063]                     .init = FALSE)
[16:22:36.063]                 }
[16:22:36.063]             }
[16:22:36.063]         }
[16:22:36.063]     })
[16:22:36.063]     if (TRUE) {
[16:22:36.063]         base::sink(type = "output", split = FALSE)
[16:22:36.063]         if (TRUE) {
[16:22:36.063]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.063]         }
[16:22:36.063]         else {
[16:22:36.063]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.063]         }
[16:22:36.063]         base::close(...future.stdout)
[16:22:36.063]         ...future.stdout <- NULL
[16:22:36.063]     }
[16:22:36.063]     ...future.result$conditions <- ...future.conditions
[16:22:36.063]     ...future.result$finished <- base::Sys.time()
[16:22:36.063]     ...future.result
[16:22:36.063] }
[16:22:36.065] plan(): Setting new future strategy stack:
[16:22:36.065] List of future strategies:
[16:22:36.065] 1. sequential:
[16:22:36.065]    - args: function (..., envir = parent.frame())
[16:22:36.065]    - tweaked: FALSE
[16:22:36.065]    - call: NULL
[16:22:36.065] plan(): nbrOfWorkers() = 1
[16:22:36.067] plan(): Setting new future strategy stack:
[16:22:36.067] List of future strategies:
[16:22:36.067] 1. sequential:
[16:22:36.067]    - args: function (..., envir = parent.frame())
[16:22:36.067]    - tweaked: FALSE
[16:22:36.067]    - call: plan(strategy)
[16:22:36.067] plan(): nbrOfWorkers() = 1
[16:22:36.068] SequentialFuture started (and completed)
[16:22:36.068] - Launch lazy future ... done
[16:22:36.068] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "a112773e-09c0-3b7f-c544-6ca02b39ebbc"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89851
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:35"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.00307703 secs (started 2025-01-06 16:22:36.065038)
version: 1.8
[16:22:36.078] getGlobalsAndPackages() ...
[16:22:36.078] Searching for globals...
[16:22:36.082] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.082] Searching for globals ... DONE
[16:22:36.083] Resolving globals: FALSE
[16:22:36.083] 
[16:22:36.083] - packages: [1] ‘utils’
[16:22:36.083] getGlobalsAndPackages() ... DONE
[16:22:36.083] run() for ‘Future’ ...
[16:22:36.084] - state: ‘created’
[16:22:36.084] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.084] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.084] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.084]   - Field: ‘label’
[16:22:36.084]   - Field: ‘local’
[16:22:36.084]   - Field: ‘owner’
[16:22:36.084]   - Field: ‘envir’
[16:22:36.085]   - Field: ‘packages’
[16:22:36.085]   - Field: ‘gc’
[16:22:36.085]   - Field: ‘conditions’
[16:22:36.085]   - Field: ‘expr’
[16:22:36.085]   - Field: ‘uuid’
[16:22:36.085]   - Field: ‘seed’
[16:22:36.085]   - Field: ‘version’
[16:22:36.085]   - Field: ‘result’
[16:22:36.085]   - Field: ‘asynchronous’
[16:22:36.085]   - Field: ‘calls’
[16:22:36.085]   - Field: ‘globals’
[16:22:36.086]   - Field: ‘stdout’
[16:22:36.086]   - Field: ‘earlySignal’
[16:22:36.086]   - Field: ‘lazy’
[16:22:36.086]   - Field: ‘state’
[16:22:36.086] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.086] - Launch lazy future ...
[16:22:36.086] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.086] Packages needed by future strategies (n = 0): <none>
[16:22:36.087] {
[16:22:36.087]     {
[16:22:36.087]         {
[16:22:36.087]             ...future.startTime <- base::Sys.time()
[16:22:36.087]             {
[16:22:36.087]                 {
[16:22:36.087]                   {
[16:22:36.087]                     {
[16:22:36.087]                       base::local({
[16:22:36.087]                         has_future <- base::requireNamespace("future", 
[16:22:36.087]                           quietly = TRUE)
[16:22:36.087]                         if (has_future) {
[16:22:36.087]                           ns <- base::getNamespace("future")
[16:22:36.087]                           version <- ns[[".package"]][["version"]]
[16:22:36.087]                           if (is.null(version)) 
[16:22:36.087]                             version <- utils::packageVersion("future")
[16:22:36.087]                         }
[16:22:36.087]                         else {
[16:22:36.087]                           version <- NULL
[16:22:36.087]                         }
[16:22:36.087]                         if (!has_future || version < "1.8.0") {
[16:22:36.087]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.087]                             "", base::R.version$version.string), 
[16:22:36.087]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.087]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.087]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.087]                               "release", "version")], collapse = " "), 
[16:22:36.087]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.087]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.087]                             info)
[16:22:36.087]                           info <- base::paste(info, collapse = "; ")
[16:22:36.087]                           if (!has_future) {
[16:22:36.087]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.087]                               info)
[16:22:36.087]                           }
[16:22:36.087]                           else {
[16:22:36.087]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.087]                               info, version)
[16:22:36.087]                           }
[16:22:36.087]                           base::stop(msg)
[16:22:36.087]                         }
[16:22:36.087]                       })
[16:22:36.087]                     }
[16:22:36.087]                     base::local({
[16:22:36.087]                       for (pkg in "utils") {
[16:22:36.087]                         base::loadNamespace(pkg)
[16:22:36.087]                         base::library(pkg, character.only = TRUE)
[16:22:36.087]                       }
[16:22:36.087]                     })
[16:22:36.087]                   }
[16:22:36.087]                   ...future.strategy.old <- future::plan("list")
[16:22:36.087]                   options(future.plan = NULL)
[16:22:36.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.087]                 }
[16:22:36.087]                 ...future.workdir <- getwd()
[16:22:36.087]             }
[16:22:36.087]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.087]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.087]         }
[16:22:36.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.087]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.087]             base::names(...future.oldOptions))
[16:22:36.087]     }
[16:22:36.087]     if (FALSE) {
[16:22:36.087]     }
[16:22:36.087]     else {
[16:22:36.087]         if (TRUE) {
[16:22:36.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.087]                 open = "w")
[16:22:36.087]         }
[16:22:36.087]         else {
[16:22:36.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.087]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.087]         }
[16:22:36.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.087]             base::sink(type = "output", split = FALSE)
[16:22:36.087]             base::close(...future.stdout)
[16:22:36.087]         }, add = TRUE)
[16:22:36.087]     }
[16:22:36.087]     ...future.frame <- base::sys.nframe()
[16:22:36.087]     ...future.conditions <- base::list()
[16:22:36.087]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.087]     if (FALSE) {
[16:22:36.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.087]     }
[16:22:36.087]     ...future.result <- base::tryCatch({
[16:22:36.087]         base::withCallingHandlers({
[16:22:36.087]             ...future.value <- base::withVisible(base::local({
[16:22:36.087]                 print(1:50)
[16:22:36.087]                 str(1:50)
[16:22:36.087]                 cat(letters, sep = "-")
[16:22:36.087]                 cat(1:6, collapse = "\n")
[16:22:36.087]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.087]                 42L
[16:22:36.087]             }))
[16:22:36.087]             future::FutureResult(value = ...future.value$value, 
[16:22:36.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.087]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.087]                     ...future.globalenv.names))
[16:22:36.087]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.087]         }, condition = base::local({
[16:22:36.087]             c <- base::c
[16:22:36.087]             inherits <- base::inherits
[16:22:36.087]             invokeRestart <- base::invokeRestart
[16:22:36.087]             length <- base::length
[16:22:36.087]             list <- base::list
[16:22:36.087]             seq.int <- base::seq.int
[16:22:36.087]             signalCondition <- base::signalCondition
[16:22:36.087]             sys.calls <- base::sys.calls
[16:22:36.087]             `[[` <- base::`[[`
[16:22:36.087]             `+` <- base::`+`
[16:22:36.087]             `<<-` <- base::`<<-`
[16:22:36.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.087]                   3L)]
[16:22:36.087]             }
[16:22:36.087]             function(cond) {
[16:22:36.087]                 is_error <- inherits(cond, "error")
[16:22:36.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.087]                   NULL)
[16:22:36.087]                 if (is_error) {
[16:22:36.087]                   sessionInformation <- function() {
[16:22:36.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.087]                       search = base::search(), system = base::Sys.info())
[16:22:36.087]                   }
[16:22:36.087]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.087]                     cond$call), session = sessionInformation(), 
[16:22:36.087]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.087]                   signalCondition(cond)
[16:22:36.087]                 }
[16:22:36.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.087]                 "immediateCondition"))) {
[16:22:36.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.087]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.087]                   if (TRUE && !signal) {
[16:22:36.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.087]                     {
[16:22:36.087]                       inherits <- base::inherits
[16:22:36.087]                       invokeRestart <- base::invokeRestart
[16:22:36.087]                       is.null <- base::is.null
[16:22:36.087]                       muffled <- FALSE
[16:22:36.087]                       if (inherits(cond, "message")) {
[16:22:36.087]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.087]                         if (muffled) 
[16:22:36.087]                           invokeRestart("muffleMessage")
[16:22:36.087]                       }
[16:22:36.087]                       else if (inherits(cond, "warning")) {
[16:22:36.087]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.087]                         if (muffled) 
[16:22:36.087]                           invokeRestart("muffleWarning")
[16:22:36.087]                       }
[16:22:36.087]                       else if (inherits(cond, "condition")) {
[16:22:36.087]                         if (!is.null(pattern)) {
[16:22:36.087]                           computeRestarts <- base::computeRestarts
[16:22:36.087]                           grepl <- base::grepl
[16:22:36.087]                           restarts <- computeRestarts(cond)
[16:22:36.087]                           for (restart in restarts) {
[16:22:36.087]                             name <- restart$name
[16:22:36.087]                             if (is.null(name)) 
[16:22:36.087]                               next
[16:22:36.087]                             if (!grepl(pattern, name)) 
[16:22:36.087]                               next
[16:22:36.087]                             invokeRestart(restart)
[16:22:36.087]                             muffled <- TRUE
[16:22:36.087]                             break
[16:22:36.087]                           }
[16:22:36.087]                         }
[16:22:36.087]                       }
[16:22:36.087]                       invisible(muffled)
[16:22:36.087]                     }
[16:22:36.087]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.087]                   }
[16:22:36.087]                 }
[16:22:36.087]                 else {
[16:22:36.087]                   if (TRUE) {
[16:22:36.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.087]                     {
[16:22:36.087]                       inherits <- base::inherits
[16:22:36.087]                       invokeRestart <- base::invokeRestart
[16:22:36.087]                       is.null <- base::is.null
[16:22:36.087]                       muffled <- FALSE
[16:22:36.087]                       if (inherits(cond, "message")) {
[16:22:36.087]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.087]                         if (muffled) 
[16:22:36.087]                           invokeRestart("muffleMessage")
[16:22:36.087]                       }
[16:22:36.087]                       else if (inherits(cond, "warning")) {
[16:22:36.087]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.087]                         if (muffled) 
[16:22:36.087]                           invokeRestart("muffleWarning")
[16:22:36.087]                       }
[16:22:36.087]                       else if (inherits(cond, "condition")) {
[16:22:36.087]                         if (!is.null(pattern)) {
[16:22:36.087]                           computeRestarts <- base::computeRestarts
[16:22:36.087]                           grepl <- base::grepl
[16:22:36.087]                           restarts <- computeRestarts(cond)
[16:22:36.087]                           for (restart in restarts) {
[16:22:36.087]                             name <- restart$name
[16:22:36.087]                             if (is.null(name)) 
[16:22:36.087]                               next
[16:22:36.087]                             if (!grepl(pattern, name)) 
[16:22:36.087]                               next
[16:22:36.087]                             invokeRestart(restart)
[16:22:36.087]                             muffled <- TRUE
[16:22:36.087]                             break
[16:22:36.087]                           }
[16:22:36.087]                         }
[16:22:36.087]                       }
[16:22:36.087]                       invisible(muffled)
[16:22:36.087]                     }
[16:22:36.087]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.087]                   }
[16:22:36.087]                 }
[16:22:36.087]             }
[16:22:36.087]         }))
[16:22:36.087]     }, error = function(ex) {
[16:22:36.087]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.087]                 ...future.rng), started = ...future.startTime, 
[16:22:36.087]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.087]             version = "1.8"), class = "FutureResult")
[16:22:36.087]     }, finally = {
[16:22:36.087]         if (!identical(...future.workdir, getwd())) 
[16:22:36.087]             setwd(...future.workdir)
[16:22:36.087]         {
[16:22:36.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.087]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.087]             }
[16:22:36.087]             base::options(...future.oldOptions)
[16:22:36.087]             if (.Platform$OS.type == "windows") {
[16:22:36.087]                 old_names <- names(...future.oldEnvVars)
[16:22:36.087]                 envs <- base::Sys.getenv()
[16:22:36.087]                 names <- names(envs)
[16:22:36.087]                 common <- intersect(names, old_names)
[16:22:36.087]                 added <- setdiff(names, old_names)
[16:22:36.087]                 removed <- setdiff(old_names, names)
[16:22:36.087]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.087]                   envs[common]]
[16:22:36.087]                 NAMES <- toupper(changed)
[16:22:36.087]                 args <- list()
[16:22:36.087]                 for (kk in seq_along(NAMES)) {
[16:22:36.087]                   name <- changed[[kk]]
[16:22:36.087]                   NAME <- NAMES[[kk]]
[16:22:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.087]                     next
[16:22:36.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.087]                 }
[16:22:36.087]                 NAMES <- toupper(added)
[16:22:36.087]                 for (kk in seq_along(NAMES)) {
[16:22:36.087]                   name <- added[[kk]]
[16:22:36.087]                   NAME <- NAMES[[kk]]
[16:22:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.087]                     next
[16:22:36.087]                   args[[name]] <- ""
[16:22:36.087]                 }
[16:22:36.087]                 NAMES <- toupper(removed)
[16:22:36.087]                 for (kk in seq_along(NAMES)) {
[16:22:36.087]                   name <- removed[[kk]]
[16:22:36.087]                   NAME <- NAMES[[kk]]
[16:22:36.087]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.087]                     next
[16:22:36.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.087]                 }
[16:22:36.087]                 if (length(args) > 0) 
[16:22:36.087]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.087]             }
[16:22:36.087]             else {
[16:22:36.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.087]             }
[16:22:36.087]             {
[16:22:36.087]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.087]                   0L) {
[16:22:36.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.087]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.087]                   base::options(opts)
[16:22:36.087]                 }
[16:22:36.087]                 {
[16:22:36.087]                   {
[16:22:36.087]                     NULL
[16:22:36.087]                     RNGkind("Mersenne-Twister")
[16:22:36.087]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.087]                       inherits = FALSE)
[16:22:36.087]                   }
[16:22:36.087]                   options(future.plan = NULL)
[16:22:36.087]                   if (is.na(NA_character_)) 
[16:22:36.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.087]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.087]                     .init = FALSE)
[16:22:36.087]                 }
[16:22:36.087]             }
[16:22:36.087]         }
[16:22:36.087]     })
[16:22:36.087]     if (TRUE) {
[16:22:36.087]         base::sink(type = "output", split = FALSE)
[16:22:36.087]         if (TRUE) {
[16:22:36.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.087]         }
[16:22:36.087]         else {
[16:22:36.087]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.087]         }
[16:22:36.087]         base::close(...future.stdout)
[16:22:36.087]         ...future.stdout <- NULL
[16:22:36.087]     }
[16:22:36.087]     ...future.result$conditions <- ...future.conditions
[16:22:36.087]     ...future.result$finished <- base::Sys.time()
[16:22:36.087]     ...future.result
[16:22:36.087] }
[16:22:36.089] plan(): Setting new future strategy stack:
[16:22:36.089] List of future strategies:
[16:22:36.089] 1. sequential:
[16:22:36.089]    - args: function (..., envir = parent.frame())
[16:22:36.089]    - tweaked: FALSE
[16:22:36.089]    - call: NULL
[16:22:36.089] plan(): nbrOfWorkers() = 1
[16:22:36.090] plan(): Setting new future strategy stack:
[16:22:36.090] List of future strategies:
[16:22:36.090] 1. sequential:
[16:22:36.090]    - args: function (..., envir = parent.frame())
[16:22:36.090]    - tweaked: FALSE
[16:22:36.090]    - call: plan(strategy)
[16:22:36.091] plan(): nbrOfWorkers() = 1
[16:22:36.091] SequentialFuture started (and completed)
[16:22:36.091] - Launch lazy future ... done
[16:22:36.091] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.092] getGlobalsAndPackages() ...
[16:22:36.092] Searching for globals...
[16:22:36.092] - globals found: [1] ‘print’
[16:22:36.092] Searching for globals ... DONE
[16:22:36.092] Resolving globals: FALSE
[16:22:36.093] 
[16:22:36.093] 
[16:22:36.093] getGlobalsAndPackages() ... DONE
[16:22:36.093] run() for ‘Future’ ...
[16:22:36.093] - state: ‘created’
[16:22:36.093] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.093] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.094] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.094]   - Field: ‘label’
[16:22:36.094]   - Field: ‘local’
[16:22:36.094]   - Field: ‘owner’
[16:22:36.094]   - Field: ‘envir’
[16:22:36.094]   - Field: ‘packages’
[16:22:36.094]   - Field: ‘gc’
[16:22:36.094]   - Field: ‘conditions’
[16:22:36.094]   - Field: ‘expr’
[16:22:36.094]   - Field: ‘uuid’
[16:22:36.094]   - Field: ‘seed’
[16:22:36.095]   - Field: ‘version’
[16:22:36.095]   - Field: ‘result’
[16:22:36.095]   - Field: ‘asynchronous’
[16:22:36.095]   - Field: ‘calls’
[16:22:36.095]   - Field: ‘globals’
[16:22:36.095]   - Field: ‘stdout’
[16:22:36.095]   - Field: ‘earlySignal’
[16:22:36.095]   - Field: ‘lazy’
[16:22:36.095]   - Field: ‘state’
[16:22:36.095] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.095] - Launch lazy future ...
[16:22:36.096] Packages needed by the future expression (n = 0): <none>
[16:22:36.096] Packages needed by future strategies (n = 0): <none>
[16:22:36.096] {
[16:22:36.096]     {
[16:22:36.096]         {
[16:22:36.096]             ...future.startTime <- base::Sys.time()
[16:22:36.096]             {
[16:22:36.096]                 {
[16:22:36.096]                   {
[16:22:36.096]                     base::local({
[16:22:36.096]                       has_future <- base::requireNamespace("future", 
[16:22:36.096]                         quietly = TRUE)
[16:22:36.096]                       if (has_future) {
[16:22:36.096]                         ns <- base::getNamespace("future")
[16:22:36.096]                         version <- ns[[".package"]][["version"]]
[16:22:36.096]                         if (is.null(version)) 
[16:22:36.096]                           version <- utils::packageVersion("future")
[16:22:36.096]                       }
[16:22:36.096]                       else {
[16:22:36.096]                         version <- NULL
[16:22:36.096]                       }
[16:22:36.096]                       if (!has_future || version < "1.8.0") {
[16:22:36.096]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.096]                           "", base::R.version$version.string), 
[16:22:36.096]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:36.096]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.096]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.096]                             "release", "version")], collapse = " "), 
[16:22:36.096]                           hostname = base::Sys.info()[["nodename"]])
[16:22:36.096]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.096]                           info)
[16:22:36.096]                         info <- base::paste(info, collapse = "; ")
[16:22:36.096]                         if (!has_future) {
[16:22:36.096]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.096]                             info)
[16:22:36.096]                         }
[16:22:36.096]                         else {
[16:22:36.096]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.096]                             info, version)
[16:22:36.096]                         }
[16:22:36.096]                         base::stop(msg)
[16:22:36.096]                       }
[16:22:36.096]                     })
[16:22:36.096]                   }
[16:22:36.096]                   ...future.strategy.old <- future::plan("list")
[16:22:36.096]                   options(future.plan = NULL)
[16:22:36.096]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.096]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.096]                 }
[16:22:36.096]                 ...future.workdir <- getwd()
[16:22:36.096]             }
[16:22:36.096]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.096]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.096]         }
[16:22:36.096]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.096]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.096]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.096]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.096]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.096]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.096]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.096]             base::names(...future.oldOptions))
[16:22:36.096]     }
[16:22:36.096]     if (FALSE) {
[16:22:36.096]     }
[16:22:36.096]     else {
[16:22:36.096]         if (TRUE) {
[16:22:36.096]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.096]                 open = "w")
[16:22:36.096]         }
[16:22:36.096]         else {
[16:22:36.096]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.096]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.096]         }
[16:22:36.096]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.096]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.096]             base::sink(type = "output", split = FALSE)
[16:22:36.096]             base::close(...future.stdout)
[16:22:36.096]         }, add = TRUE)
[16:22:36.096]     }
[16:22:36.096]     ...future.frame <- base::sys.nframe()
[16:22:36.096]     ...future.conditions <- base::list()
[16:22:36.096]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.096]     if (FALSE) {
[16:22:36.096]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.096]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.096]     }
[16:22:36.096]     ...future.result <- base::tryCatch({
[16:22:36.096]         base::withCallingHandlers({
[16:22:36.096]             ...future.value <- base::withVisible(base::local(print(42)))
[16:22:36.096]             future::FutureResult(value = ...future.value$value, 
[16:22:36.096]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.096]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.096]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.096]                     ...future.globalenv.names))
[16:22:36.096]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.096]         }, condition = base::local({
[16:22:36.096]             c <- base::c
[16:22:36.096]             inherits <- base::inherits
[16:22:36.096]             invokeRestart <- base::invokeRestart
[16:22:36.096]             length <- base::length
[16:22:36.096]             list <- base::list
[16:22:36.096]             seq.int <- base::seq.int
[16:22:36.096]             signalCondition <- base::signalCondition
[16:22:36.096]             sys.calls <- base::sys.calls
[16:22:36.096]             `[[` <- base::`[[`
[16:22:36.096]             `+` <- base::`+`
[16:22:36.096]             `<<-` <- base::`<<-`
[16:22:36.096]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.096]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.096]                   3L)]
[16:22:36.096]             }
[16:22:36.096]             function(cond) {
[16:22:36.096]                 is_error <- inherits(cond, "error")
[16:22:36.096]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.096]                   NULL)
[16:22:36.096]                 if (is_error) {
[16:22:36.096]                   sessionInformation <- function() {
[16:22:36.096]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.096]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.096]                       search = base::search(), system = base::Sys.info())
[16:22:36.096]                   }
[16:22:36.096]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.096]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.096]                     cond$call), session = sessionInformation(), 
[16:22:36.096]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.096]                   signalCondition(cond)
[16:22:36.096]                 }
[16:22:36.096]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.096]                 "immediateCondition"))) {
[16:22:36.096]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.096]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.096]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.096]                   if (TRUE && !signal) {
[16:22:36.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.096]                     {
[16:22:36.096]                       inherits <- base::inherits
[16:22:36.096]                       invokeRestart <- base::invokeRestart
[16:22:36.096]                       is.null <- base::is.null
[16:22:36.096]                       muffled <- FALSE
[16:22:36.096]                       if (inherits(cond, "message")) {
[16:22:36.096]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.096]                         if (muffled) 
[16:22:36.096]                           invokeRestart("muffleMessage")
[16:22:36.096]                       }
[16:22:36.096]                       else if (inherits(cond, "warning")) {
[16:22:36.096]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.096]                         if (muffled) 
[16:22:36.096]                           invokeRestart("muffleWarning")
[16:22:36.096]                       }
[16:22:36.096]                       else if (inherits(cond, "condition")) {
[16:22:36.096]                         if (!is.null(pattern)) {
[16:22:36.096]                           computeRestarts <- base::computeRestarts
[16:22:36.096]                           grepl <- base::grepl
[16:22:36.096]                           restarts <- computeRestarts(cond)
[16:22:36.096]                           for (restart in restarts) {
[16:22:36.096]                             name <- restart$name
[16:22:36.096]                             if (is.null(name)) 
[16:22:36.096]                               next
[16:22:36.096]                             if (!grepl(pattern, name)) 
[16:22:36.096]                               next
[16:22:36.096]                             invokeRestart(restart)
[16:22:36.096]                             muffled <- TRUE
[16:22:36.096]                             break
[16:22:36.096]                           }
[16:22:36.096]                         }
[16:22:36.096]                       }
[16:22:36.096]                       invisible(muffled)
[16:22:36.096]                     }
[16:22:36.096]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.096]                   }
[16:22:36.096]                 }
[16:22:36.096]                 else {
[16:22:36.096]                   if (TRUE) {
[16:22:36.096]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.096]                     {
[16:22:36.096]                       inherits <- base::inherits
[16:22:36.096]                       invokeRestart <- base::invokeRestart
[16:22:36.096]                       is.null <- base::is.null
[16:22:36.096]                       muffled <- FALSE
[16:22:36.096]                       if (inherits(cond, "message")) {
[16:22:36.096]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.096]                         if (muffled) 
[16:22:36.096]                           invokeRestart("muffleMessage")
[16:22:36.096]                       }
[16:22:36.096]                       else if (inherits(cond, "warning")) {
[16:22:36.096]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.096]                         if (muffled) 
[16:22:36.096]                           invokeRestart("muffleWarning")
[16:22:36.096]                       }
[16:22:36.096]                       else if (inherits(cond, "condition")) {
[16:22:36.096]                         if (!is.null(pattern)) {
[16:22:36.096]                           computeRestarts <- base::computeRestarts
[16:22:36.096]                           grepl <- base::grepl
[16:22:36.096]                           restarts <- computeRestarts(cond)
[16:22:36.096]                           for (restart in restarts) {
[16:22:36.096]                             name <- restart$name
[16:22:36.096]                             if (is.null(name)) 
[16:22:36.096]                               next
[16:22:36.096]                             if (!grepl(pattern, name)) 
[16:22:36.096]                               next
[16:22:36.096]                             invokeRestart(restart)
[16:22:36.096]                             muffled <- TRUE
[16:22:36.096]                             break
[16:22:36.096]                           }
[16:22:36.096]                         }
[16:22:36.096]                       }
[16:22:36.096]                       invisible(muffled)
[16:22:36.096]                     }
[16:22:36.096]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.096]                   }
[16:22:36.096]                 }
[16:22:36.096]             }
[16:22:36.096]         }))
[16:22:36.096]     }, error = function(ex) {
[16:22:36.096]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.096]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.096]                 ...future.rng), started = ...future.startTime, 
[16:22:36.096]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.096]             version = "1.8"), class = "FutureResult")
[16:22:36.096]     }, finally = {
[16:22:36.096]         if (!identical(...future.workdir, getwd())) 
[16:22:36.096]             setwd(...future.workdir)
[16:22:36.096]         {
[16:22:36.096]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.096]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.096]             }
[16:22:36.096]             base::options(...future.oldOptions)
[16:22:36.096]             if (.Platform$OS.type == "windows") {
[16:22:36.096]                 old_names <- names(...future.oldEnvVars)
[16:22:36.096]                 envs <- base::Sys.getenv()
[16:22:36.096]                 names <- names(envs)
[16:22:36.096]                 common <- intersect(names, old_names)
[16:22:36.096]                 added <- setdiff(names, old_names)
[16:22:36.096]                 removed <- setdiff(old_names, names)
[16:22:36.096]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.096]                   envs[common]]
[16:22:36.096]                 NAMES <- toupper(changed)
[16:22:36.096]                 args <- list()
[16:22:36.096]                 for (kk in seq_along(NAMES)) {
[16:22:36.096]                   name <- changed[[kk]]
[16:22:36.096]                   NAME <- NAMES[[kk]]
[16:22:36.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.096]                     next
[16:22:36.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.096]                 }
[16:22:36.096]                 NAMES <- toupper(added)
[16:22:36.096]                 for (kk in seq_along(NAMES)) {
[16:22:36.096]                   name <- added[[kk]]
[16:22:36.096]                   NAME <- NAMES[[kk]]
[16:22:36.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.096]                     next
[16:22:36.096]                   args[[name]] <- ""
[16:22:36.096]                 }
[16:22:36.096]                 NAMES <- toupper(removed)
[16:22:36.096]                 for (kk in seq_along(NAMES)) {
[16:22:36.096]                   name <- removed[[kk]]
[16:22:36.096]                   NAME <- NAMES[[kk]]
[16:22:36.096]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.096]                     next
[16:22:36.096]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.096]                 }
[16:22:36.096]                 if (length(args) > 0) 
[16:22:36.096]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.096]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.096]             }
[16:22:36.096]             else {
[16:22:36.096]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.096]             }
[16:22:36.096]             {
[16:22:36.096]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.096]                   0L) {
[16:22:36.096]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.096]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.096]                   base::options(opts)
[16:22:36.096]                 }
[16:22:36.096]                 {
[16:22:36.096]                   {
[16:22:36.096]                     NULL
[16:22:36.096]                     RNGkind("Mersenne-Twister")
[16:22:36.096]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.096]                       inherits = FALSE)
[16:22:36.096]                   }
[16:22:36.096]                   options(future.plan = NULL)
[16:22:36.096]                   if (is.na(NA_character_)) 
[16:22:36.096]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.096]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.096]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.096]                     .init = FALSE)
[16:22:36.096]                 }
[16:22:36.096]             }
[16:22:36.096]         }
[16:22:36.096]     })
[16:22:36.096]     if (TRUE) {
[16:22:36.096]         base::sink(type = "output", split = FALSE)
[16:22:36.096]         if (TRUE) {
[16:22:36.096]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.096]         }
[16:22:36.096]         else {
[16:22:36.096]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.096]         }
[16:22:36.096]         base::close(...future.stdout)
[16:22:36.096]         ...future.stdout <- NULL
[16:22:36.096]     }
[16:22:36.096]     ...future.result$conditions <- ...future.conditions
[16:22:36.096]     ...future.result$finished <- base::Sys.time()
[16:22:36.096]     ...future.result
[16:22:36.096] }
[16:22:36.098] plan(): Setting new future strategy stack:
[16:22:36.098] List of future strategies:
[16:22:36.098] 1. sequential:
[16:22:36.098]    - args: function (..., envir = parent.frame())
[16:22:36.098]    - tweaked: FALSE
[16:22:36.098]    - call: NULL
[16:22:36.098] plan(): nbrOfWorkers() = 1
[16:22:36.099] plan(): Setting new future strategy stack:
[16:22:36.099] List of future strategies:
[16:22:36.099] 1. sequential:
[16:22:36.099]    - args: function (..., envir = parent.frame())
[16:22:36.099]    - tweaked: FALSE
[16:22:36.099]    - call: plan(strategy)
[16:22:36.099] plan(): nbrOfWorkers() = 1
[16:22:36.100] SequentialFuture started (and completed)
[16:22:36.100] - Launch lazy future ... done
[16:22:36.100] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[16:22:36.100] getGlobalsAndPackages() ...
[16:22:36.100] Searching for globals...
[16:22:36.103] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.103] Searching for globals ... DONE
[16:22:36.103] Resolving globals: FALSE
[16:22:36.103] 
[16:22:36.103] - packages: [1] ‘utils’
[16:22:36.104] getGlobalsAndPackages() ... DONE
[16:22:36.104] run() for ‘Future’ ...
[16:22:36.104] - state: ‘created’
[16:22:36.104] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.104] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.104] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.105]   - Field: ‘label’
[16:22:36.105]   - Field: ‘local’
[16:22:36.105]   - Field: ‘owner’
[16:22:36.105]   - Field: ‘envir’
[16:22:36.105]   - Field: ‘packages’
[16:22:36.105]   - Field: ‘gc’
[16:22:36.105]   - Field: ‘conditions’
[16:22:36.105]   - Field: ‘expr’
[16:22:36.105]   - Field: ‘uuid’
[16:22:36.105]   - Field: ‘seed’
[16:22:36.105]   - Field: ‘version’
[16:22:36.106]   - Field: ‘result’
[16:22:36.106]   - Field: ‘asynchronous’
[16:22:36.106]   - Field: ‘calls’
[16:22:36.106]   - Field: ‘globals’
[16:22:36.106]   - Field: ‘stdout’
[16:22:36.106]   - Field: ‘earlySignal’
[16:22:36.106]   - Field: ‘lazy’
[16:22:36.106]   - Field: ‘state’
[16:22:36.106] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.106] - Launch lazy future ...
[16:22:36.106] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.107] Packages needed by future strategies (n = 0): <none>
[16:22:36.108] {
[16:22:36.108]     {
[16:22:36.108]         {
[16:22:36.108]             ...future.startTime <- base::Sys.time()
[16:22:36.108]             {
[16:22:36.108]                 {
[16:22:36.108]                   {
[16:22:36.108]                     {
[16:22:36.108]                       base::local({
[16:22:36.108]                         has_future <- base::requireNamespace("future", 
[16:22:36.108]                           quietly = TRUE)
[16:22:36.108]                         if (has_future) {
[16:22:36.108]                           ns <- base::getNamespace("future")
[16:22:36.108]                           version <- ns[[".package"]][["version"]]
[16:22:36.108]                           if (is.null(version)) 
[16:22:36.108]                             version <- utils::packageVersion("future")
[16:22:36.108]                         }
[16:22:36.108]                         else {
[16:22:36.108]                           version <- NULL
[16:22:36.108]                         }
[16:22:36.108]                         if (!has_future || version < "1.8.0") {
[16:22:36.108]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.108]                             "", base::R.version$version.string), 
[16:22:36.108]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.108]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.108]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.108]                               "release", "version")], collapse = " "), 
[16:22:36.108]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.108]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.108]                             info)
[16:22:36.108]                           info <- base::paste(info, collapse = "; ")
[16:22:36.108]                           if (!has_future) {
[16:22:36.108]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.108]                               info)
[16:22:36.108]                           }
[16:22:36.108]                           else {
[16:22:36.108]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.108]                               info, version)
[16:22:36.108]                           }
[16:22:36.108]                           base::stop(msg)
[16:22:36.108]                         }
[16:22:36.108]                       })
[16:22:36.108]                     }
[16:22:36.108]                     base::local({
[16:22:36.108]                       for (pkg in "utils") {
[16:22:36.108]                         base::loadNamespace(pkg)
[16:22:36.108]                         base::library(pkg, character.only = TRUE)
[16:22:36.108]                       }
[16:22:36.108]                     })
[16:22:36.108]                   }
[16:22:36.108]                   ...future.strategy.old <- future::plan("list")
[16:22:36.108]                   options(future.plan = NULL)
[16:22:36.108]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.108]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.108]                 }
[16:22:36.108]                 ...future.workdir <- getwd()
[16:22:36.108]             }
[16:22:36.108]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.108]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.108]         }
[16:22:36.108]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.108]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.108]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.108]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.108]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.108]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.108]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.108]             base::names(...future.oldOptions))
[16:22:36.108]     }
[16:22:36.108]     if (FALSE) {
[16:22:36.108]     }
[16:22:36.108]     else {
[16:22:36.108]         if (FALSE) {
[16:22:36.108]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.108]                 open = "w")
[16:22:36.108]         }
[16:22:36.108]         else {
[16:22:36.108]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.108]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.108]         }
[16:22:36.108]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.108]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.108]             base::sink(type = "output", split = FALSE)
[16:22:36.108]             base::close(...future.stdout)
[16:22:36.108]         }, add = TRUE)
[16:22:36.108]     }
[16:22:36.108]     ...future.frame <- base::sys.nframe()
[16:22:36.108]     ...future.conditions <- base::list()
[16:22:36.108]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.108]     if (FALSE) {
[16:22:36.108]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.108]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.108]     }
[16:22:36.108]     ...future.result <- base::tryCatch({
[16:22:36.108]         base::withCallingHandlers({
[16:22:36.108]             ...future.value <- base::withVisible(base::local({
[16:22:36.108]                 print(1:50)
[16:22:36.108]                 str(1:50)
[16:22:36.108]                 cat(letters, sep = "-")
[16:22:36.108]                 cat(1:6, collapse = "\n")
[16:22:36.108]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.108]                 42L
[16:22:36.108]             }))
[16:22:36.108]             future::FutureResult(value = ...future.value$value, 
[16:22:36.108]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.108]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.108]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.108]                     ...future.globalenv.names))
[16:22:36.108]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.108]         }, condition = base::local({
[16:22:36.108]             c <- base::c
[16:22:36.108]             inherits <- base::inherits
[16:22:36.108]             invokeRestart <- base::invokeRestart
[16:22:36.108]             length <- base::length
[16:22:36.108]             list <- base::list
[16:22:36.108]             seq.int <- base::seq.int
[16:22:36.108]             signalCondition <- base::signalCondition
[16:22:36.108]             sys.calls <- base::sys.calls
[16:22:36.108]             `[[` <- base::`[[`
[16:22:36.108]             `+` <- base::`+`
[16:22:36.108]             `<<-` <- base::`<<-`
[16:22:36.108]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.108]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.108]                   3L)]
[16:22:36.108]             }
[16:22:36.108]             function(cond) {
[16:22:36.108]                 is_error <- inherits(cond, "error")
[16:22:36.108]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.108]                   NULL)
[16:22:36.108]                 if (is_error) {
[16:22:36.108]                   sessionInformation <- function() {
[16:22:36.108]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.108]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.108]                       search = base::search(), system = base::Sys.info())
[16:22:36.108]                   }
[16:22:36.108]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.108]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.108]                     cond$call), session = sessionInformation(), 
[16:22:36.108]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.108]                   signalCondition(cond)
[16:22:36.108]                 }
[16:22:36.108]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.108]                 "immediateCondition"))) {
[16:22:36.108]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.108]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.108]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.108]                   if (TRUE && !signal) {
[16:22:36.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.108]                     {
[16:22:36.108]                       inherits <- base::inherits
[16:22:36.108]                       invokeRestart <- base::invokeRestart
[16:22:36.108]                       is.null <- base::is.null
[16:22:36.108]                       muffled <- FALSE
[16:22:36.108]                       if (inherits(cond, "message")) {
[16:22:36.108]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.108]                         if (muffled) 
[16:22:36.108]                           invokeRestart("muffleMessage")
[16:22:36.108]                       }
[16:22:36.108]                       else if (inherits(cond, "warning")) {
[16:22:36.108]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.108]                         if (muffled) 
[16:22:36.108]                           invokeRestart("muffleWarning")
[16:22:36.108]                       }
[16:22:36.108]                       else if (inherits(cond, "condition")) {
[16:22:36.108]                         if (!is.null(pattern)) {
[16:22:36.108]                           computeRestarts <- base::computeRestarts
[16:22:36.108]                           grepl <- base::grepl
[16:22:36.108]                           restarts <- computeRestarts(cond)
[16:22:36.108]                           for (restart in restarts) {
[16:22:36.108]                             name <- restart$name
[16:22:36.108]                             if (is.null(name)) 
[16:22:36.108]                               next
[16:22:36.108]                             if (!grepl(pattern, name)) 
[16:22:36.108]                               next
[16:22:36.108]                             invokeRestart(restart)
[16:22:36.108]                             muffled <- TRUE
[16:22:36.108]                             break
[16:22:36.108]                           }
[16:22:36.108]                         }
[16:22:36.108]                       }
[16:22:36.108]                       invisible(muffled)
[16:22:36.108]                     }
[16:22:36.108]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.108]                   }
[16:22:36.108]                 }
[16:22:36.108]                 else {
[16:22:36.108]                   if (TRUE) {
[16:22:36.108]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.108]                     {
[16:22:36.108]                       inherits <- base::inherits
[16:22:36.108]                       invokeRestart <- base::invokeRestart
[16:22:36.108]                       is.null <- base::is.null
[16:22:36.108]                       muffled <- FALSE
[16:22:36.108]                       if (inherits(cond, "message")) {
[16:22:36.108]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.108]                         if (muffled) 
[16:22:36.108]                           invokeRestart("muffleMessage")
[16:22:36.108]                       }
[16:22:36.108]                       else if (inherits(cond, "warning")) {
[16:22:36.108]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.108]                         if (muffled) 
[16:22:36.108]                           invokeRestart("muffleWarning")
[16:22:36.108]                       }
[16:22:36.108]                       else if (inherits(cond, "condition")) {
[16:22:36.108]                         if (!is.null(pattern)) {
[16:22:36.108]                           computeRestarts <- base::computeRestarts
[16:22:36.108]                           grepl <- base::grepl
[16:22:36.108]                           restarts <- computeRestarts(cond)
[16:22:36.108]                           for (restart in restarts) {
[16:22:36.108]                             name <- restart$name
[16:22:36.108]                             if (is.null(name)) 
[16:22:36.108]                               next
[16:22:36.108]                             if (!grepl(pattern, name)) 
[16:22:36.108]                               next
[16:22:36.108]                             invokeRestart(restart)
[16:22:36.108]                             muffled <- TRUE
[16:22:36.108]                             break
[16:22:36.108]                           }
[16:22:36.108]                         }
[16:22:36.108]                       }
[16:22:36.108]                       invisible(muffled)
[16:22:36.108]                     }
[16:22:36.108]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.108]                   }
[16:22:36.108]                 }
[16:22:36.108]             }
[16:22:36.108]         }))
[16:22:36.108]     }, error = function(ex) {
[16:22:36.108]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.108]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.108]                 ...future.rng), started = ...future.startTime, 
[16:22:36.108]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.108]             version = "1.8"), class = "FutureResult")
[16:22:36.108]     }, finally = {
[16:22:36.108]         if (!identical(...future.workdir, getwd())) 
[16:22:36.108]             setwd(...future.workdir)
[16:22:36.108]         {
[16:22:36.108]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.108]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.108]             }
[16:22:36.108]             base::options(...future.oldOptions)
[16:22:36.108]             if (.Platform$OS.type == "windows") {
[16:22:36.108]                 old_names <- names(...future.oldEnvVars)
[16:22:36.108]                 envs <- base::Sys.getenv()
[16:22:36.108]                 names <- names(envs)
[16:22:36.108]                 common <- intersect(names, old_names)
[16:22:36.108]                 added <- setdiff(names, old_names)
[16:22:36.108]                 removed <- setdiff(old_names, names)
[16:22:36.108]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.108]                   envs[common]]
[16:22:36.108]                 NAMES <- toupper(changed)
[16:22:36.108]                 args <- list()
[16:22:36.108]                 for (kk in seq_along(NAMES)) {
[16:22:36.108]                   name <- changed[[kk]]
[16:22:36.108]                   NAME <- NAMES[[kk]]
[16:22:36.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.108]                     next
[16:22:36.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.108]                 }
[16:22:36.108]                 NAMES <- toupper(added)
[16:22:36.108]                 for (kk in seq_along(NAMES)) {
[16:22:36.108]                   name <- added[[kk]]
[16:22:36.108]                   NAME <- NAMES[[kk]]
[16:22:36.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.108]                     next
[16:22:36.108]                   args[[name]] <- ""
[16:22:36.108]                 }
[16:22:36.108]                 NAMES <- toupper(removed)
[16:22:36.108]                 for (kk in seq_along(NAMES)) {
[16:22:36.108]                   name <- removed[[kk]]
[16:22:36.108]                   NAME <- NAMES[[kk]]
[16:22:36.108]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.108]                     next
[16:22:36.108]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.108]                 }
[16:22:36.108]                 if (length(args) > 0) 
[16:22:36.108]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.108]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.108]             }
[16:22:36.108]             else {
[16:22:36.108]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.108]             }
[16:22:36.108]             {
[16:22:36.108]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.108]                   0L) {
[16:22:36.108]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.108]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.108]                   base::options(opts)
[16:22:36.108]                 }
[16:22:36.108]                 {
[16:22:36.108]                   {
[16:22:36.108]                     NULL
[16:22:36.108]                     RNGkind("Mersenne-Twister")
[16:22:36.108]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.108]                       inherits = FALSE)
[16:22:36.108]                   }
[16:22:36.108]                   options(future.plan = NULL)
[16:22:36.108]                   if (is.na(NA_character_)) 
[16:22:36.108]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.108]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.108]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.108]                     .init = FALSE)
[16:22:36.108]                 }
[16:22:36.108]             }
[16:22:36.108]         }
[16:22:36.108]     })
[16:22:36.108]     if (TRUE) {
[16:22:36.108]         base::sink(type = "output", split = FALSE)
[16:22:36.108]         if (FALSE) {
[16:22:36.108]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.108]         }
[16:22:36.108]         else {
[16:22:36.108]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.108]         }
[16:22:36.108]         base::close(...future.stdout)
[16:22:36.108]         ...future.stdout <- NULL
[16:22:36.108]     }
[16:22:36.108]     ...future.result$conditions <- ...future.conditions
[16:22:36.108]     ...future.result$finished <- base::Sys.time()
[16:22:36.108]     ...future.result
[16:22:36.108] }
[16:22:36.110] plan(): Setting new future strategy stack:
[16:22:36.110] List of future strategies:
[16:22:36.110] 1. sequential:
[16:22:36.110]    - args: function (..., envir = parent.frame())
[16:22:36.110]    - tweaked: FALSE
[16:22:36.110]    - call: NULL
[16:22:36.110] plan(): nbrOfWorkers() = 1
[16:22:36.112] plan(): Setting new future strategy stack:
[16:22:36.112] List of future strategies:
[16:22:36.112] 1. sequential:
[16:22:36.112]    - args: function (..., envir = parent.frame())
[16:22:36.112]    - tweaked: FALSE
[16:22:36.112]    - call: plan(strategy)
[16:22:36.112] plan(): nbrOfWorkers() = 1
[16:22:36.112] SequentialFuture started (and completed)
[16:22:36.112] - Launch lazy future ... done
[16:22:36.112] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "a112773e-09c0-3b7f-c544-6ca02b39ebbc"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89851
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:35"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:36.120] getGlobalsAndPackages() ...
[16:22:36.120] Searching for globals...
[16:22:36.123] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.123] Searching for globals ... DONE
[16:22:36.123] Resolving globals: FALSE
[16:22:36.123] 
[16:22:36.123] - packages: [1] ‘utils’
[16:22:36.123] getGlobalsAndPackages() ... DONE
[16:22:36.124] run() for ‘Future’ ...
[16:22:36.124] - state: ‘created’
[16:22:36.124] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.124] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.124] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.124]   - Field: ‘label’
[16:22:36.124]   - Field: ‘local’
[16:22:36.125]   - Field: ‘owner’
[16:22:36.125]   - Field: ‘envir’
[16:22:36.125]   - Field: ‘packages’
[16:22:36.125]   - Field: ‘gc’
[16:22:36.125]   - Field: ‘conditions’
[16:22:36.125]   - Field: ‘expr’
[16:22:36.125]   - Field: ‘uuid’
[16:22:36.125]   - Field: ‘seed’
[16:22:36.125]   - Field: ‘version’
[16:22:36.125]   - Field: ‘result’
[16:22:36.125]   - Field: ‘asynchronous’
[16:22:36.126]   - Field: ‘calls’
[16:22:36.126]   - Field: ‘globals’
[16:22:36.126]   - Field: ‘stdout’
[16:22:36.126]   - Field: ‘earlySignal’
[16:22:36.126]   - Field: ‘lazy’
[16:22:36.126]   - Field: ‘state’
[16:22:36.126] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.126] - Launch lazy future ...
[16:22:36.126] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.126] Packages needed by future strategies (n = 0): <none>
[16:22:36.127] {
[16:22:36.127]     {
[16:22:36.127]         {
[16:22:36.127]             ...future.startTime <- base::Sys.time()
[16:22:36.127]             {
[16:22:36.127]                 {
[16:22:36.127]                   {
[16:22:36.127]                     {
[16:22:36.127]                       base::local({
[16:22:36.127]                         has_future <- base::requireNamespace("future", 
[16:22:36.127]                           quietly = TRUE)
[16:22:36.127]                         if (has_future) {
[16:22:36.127]                           ns <- base::getNamespace("future")
[16:22:36.127]                           version <- ns[[".package"]][["version"]]
[16:22:36.127]                           if (is.null(version)) 
[16:22:36.127]                             version <- utils::packageVersion("future")
[16:22:36.127]                         }
[16:22:36.127]                         else {
[16:22:36.127]                           version <- NULL
[16:22:36.127]                         }
[16:22:36.127]                         if (!has_future || version < "1.8.0") {
[16:22:36.127]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.127]                             "", base::R.version$version.string), 
[16:22:36.127]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.127]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.127]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.127]                               "release", "version")], collapse = " "), 
[16:22:36.127]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.127]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.127]                             info)
[16:22:36.127]                           info <- base::paste(info, collapse = "; ")
[16:22:36.127]                           if (!has_future) {
[16:22:36.127]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.127]                               info)
[16:22:36.127]                           }
[16:22:36.127]                           else {
[16:22:36.127]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.127]                               info, version)
[16:22:36.127]                           }
[16:22:36.127]                           base::stop(msg)
[16:22:36.127]                         }
[16:22:36.127]                       })
[16:22:36.127]                     }
[16:22:36.127]                     base::local({
[16:22:36.127]                       for (pkg in "utils") {
[16:22:36.127]                         base::loadNamespace(pkg)
[16:22:36.127]                         base::library(pkg, character.only = TRUE)
[16:22:36.127]                       }
[16:22:36.127]                     })
[16:22:36.127]                   }
[16:22:36.127]                   ...future.strategy.old <- future::plan("list")
[16:22:36.127]                   options(future.plan = NULL)
[16:22:36.127]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.127]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.127]                 }
[16:22:36.127]                 ...future.workdir <- getwd()
[16:22:36.127]             }
[16:22:36.127]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.127]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.127]         }
[16:22:36.127]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.127]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.127]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.127]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.127]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.127]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.127]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.127]             base::names(...future.oldOptions))
[16:22:36.127]     }
[16:22:36.127]     if (FALSE) {
[16:22:36.127]     }
[16:22:36.127]     else {
[16:22:36.127]         if (FALSE) {
[16:22:36.127]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.127]                 open = "w")
[16:22:36.127]         }
[16:22:36.127]         else {
[16:22:36.127]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.127]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.127]         }
[16:22:36.127]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.127]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.127]             base::sink(type = "output", split = FALSE)
[16:22:36.127]             base::close(...future.stdout)
[16:22:36.127]         }, add = TRUE)
[16:22:36.127]     }
[16:22:36.127]     ...future.frame <- base::sys.nframe()
[16:22:36.127]     ...future.conditions <- base::list()
[16:22:36.127]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.127]     if (FALSE) {
[16:22:36.127]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.127]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.127]     }
[16:22:36.127]     ...future.result <- base::tryCatch({
[16:22:36.127]         base::withCallingHandlers({
[16:22:36.127]             ...future.value <- base::withVisible(base::local({
[16:22:36.127]                 print(1:50)
[16:22:36.127]                 str(1:50)
[16:22:36.127]                 cat(letters, sep = "-")
[16:22:36.127]                 cat(1:6, collapse = "\n")
[16:22:36.127]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.127]                 42L
[16:22:36.127]             }))
[16:22:36.127]             future::FutureResult(value = ...future.value$value, 
[16:22:36.127]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.127]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.127]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.127]                     ...future.globalenv.names))
[16:22:36.127]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.127]         }, condition = base::local({
[16:22:36.127]             c <- base::c
[16:22:36.127]             inherits <- base::inherits
[16:22:36.127]             invokeRestart <- base::invokeRestart
[16:22:36.127]             length <- base::length
[16:22:36.127]             list <- base::list
[16:22:36.127]             seq.int <- base::seq.int
[16:22:36.127]             signalCondition <- base::signalCondition
[16:22:36.127]             sys.calls <- base::sys.calls
[16:22:36.127]             `[[` <- base::`[[`
[16:22:36.127]             `+` <- base::`+`
[16:22:36.127]             `<<-` <- base::`<<-`
[16:22:36.127]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.127]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.127]                   3L)]
[16:22:36.127]             }
[16:22:36.127]             function(cond) {
[16:22:36.127]                 is_error <- inherits(cond, "error")
[16:22:36.127]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.127]                   NULL)
[16:22:36.127]                 if (is_error) {
[16:22:36.127]                   sessionInformation <- function() {
[16:22:36.127]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.127]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.127]                       search = base::search(), system = base::Sys.info())
[16:22:36.127]                   }
[16:22:36.127]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.127]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.127]                     cond$call), session = sessionInformation(), 
[16:22:36.127]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.127]                   signalCondition(cond)
[16:22:36.127]                 }
[16:22:36.127]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.127]                 "immediateCondition"))) {
[16:22:36.127]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.127]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.127]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.127]                   if (TRUE && !signal) {
[16:22:36.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.127]                     {
[16:22:36.127]                       inherits <- base::inherits
[16:22:36.127]                       invokeRestart <- base::invokeRestart
[16:22:36.127]                       is.null <- base::is.null
[16:22:36.127]                       muffled <- FALSE
[16:22:36.127]                       if (inherits(cond, "message")) {
[16:22:36.127]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.127]                         if (muffled) 
[16:22:36.127]                           invokeRestart("muffleMessage")
[16:22:36.127]                       }
[16:22:36.127]                       else if (inherits(cond, "warning")) {
[16:22:36.127]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.127]                         if (muffled) 
[16:22:36.127]                           invokeRestart("muffleWarning")
[16:22:36.127]                       }
[16:22:36.127]                       else if (inherits(cond, "condition")) {
[16:22:36.127]                         if (!is.null(pattern)) {
[16:22:36.127]                           computeRestarts <- base::computeRestarts
[16:22:36.127]                           grepl <- base::grepl
[16:22:36.127]                           restarts <- computeRestarts(cond)
[16:22:36.127]                           for (restart in restarts) {
[16:22:36.127]                             name <- restart$name
[16:22:36.127]                             if (is.null(name)) 
[16:22:36.127]                               next
[16:22:36.127]                             if (!grepl(pattern, name)) 
[16:22:36.127]                               next
[16:22:36.127]                             invokeRestart(restart)
[16:22:36.127]                             muffled <- TRUE
[16:22:36.127]                             break
[16:22:36.127]                           }
[16:22:36.127]                         }
[16:22:36.127]                       }
[16:22:36.127]                       invisible(muffled)
[16:22:36.127]                     }
[16:22:36.127]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.127]                   }
[16:22:36.127]                 }
[16:22:36.127]                 else {
[16:22:36.127]                   if (TRUE) {
[16:22:36.127]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.127]                     {
[16:22:36.127]                       inherits <- base::inherits
[16:22:36.127]                       invokeRestart <- base::invokeRestart
[16:22:36.127]                       is.null <- base::is.null
[16:22:36.127]                       muffled <- FALSE
[16:22:36.127]                       if (inherits(cond, "message")) {
[16:22:36.127]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.127]                         if (muffled) 
[16:22:36.127]                           invokeRestart("muffleMessage")
[16:22:36.127]                       }
[16:22:36.127]                       else if (inherits(cond, "warning")) {
[16:22:36.127]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.127]                         if (muffled) 
[16:22:36.127]                           invokeRestart("muffleWarning")
[16:22:36.127]                       }
[16:22:36.127]                       else if (inherits(cond, "condition")) {
[16:22:36.127]                         if (!is.null(pattern)) {
[16:22:36.127]                           computeRestarts <- base::computeRestarts
[16:22:36.127]                           grepl <- base::grepl
[16:22:36.127]                           restarts <- computeRestarts(cond)
[16:22:36.127]                           for (restart in restarts) {
[16:22:36.127]                             name <- restart$name
[16:22:36.127]                             if (is.null(name)) 
[16:22:36.127]                               next
[16:22:36.127]                             if (!grepl(pattern, name)) 
[16:22:36.127]                               next
[16:22:36.127]                             invokeRestart(restart)
[16:22:36.127]                             muffled <- TRUE
[16:22:36.127]                             break
[16:22:36.127]                           }
[16:22:36.127]                         }
[16:22:36.127]                       }
[16:22:36.127]                       invisible(muffled)
[16:22:36.127]                     }
[16:22:36.127]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.127]                   }
[16:22:36.127]                 }
[16:22:36.127]             }
[16:22:36.127]         }))
[16:22:36.127]     }, error = function(ex) {
[16:22:36.127]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.127]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.127]                 ...future.rng), started = ...future.startTime, 
[16:22:36.127]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.127]             version = "1.8"), class = "FutureResult")
[16:22:36.127]     }, finally = {
[16:22:36.127]         if (!identical(...future.workdir, getwd())) 
[16:22:36.127]             setwd(...future.workdir)
[16:22:36.127]         {
[16:22:36.127]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.127]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.127]             }
[16:22:36.127]             base::options(...future.oldOptions)
[16:22:36.127]             if (.Platform$OS.type == "windows") {
[16:22:36.127]                 old_names <- names(...future.oldEnvVars)
[16:22:36.127]                 envs <- base::Sys.getenv()
[16:22:36.127]                 names <- names(envs)
[16:22:36.127]                 common <- intersect(names, old_names)
[16:22:36.127]                 added <- setdiff(names, old_names)
[16:22:36.127]                 removed <- setdiff(old_names, names)
[16:22:36.127]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.127]                   envs[common]]
[16:22:36.127]                 NAMES <- toupper(changed)
[16:22:36.127]                 args <- list()
[16:22:36.127]                 for (kk in seq_along(NAMES)) {
[16:22:36.127]                   name <- changed[[kk]]
[16:22:36.127]                   NAME <- NAMES[[kk]]
[16:22:36.127]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.127]                     next
[16:22:36.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.127]                 }
[16:22:36.127]                 NAMES <- toupper(added)
[16:22:36.127]                 for (kk in seq_along(NAMES)) {
[16:22:36.127]                   name <- added[[kk]]
[16:22:36.127]                   NAME <- NAMES[[kk]]
[16:22:36.127]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.127]                     next
[16:22:36.127]                   args[[name]] <- ""
[16:22:36.127]                 }
[16:22:36.127]                 NAMES <- toupper(removed)
[16:22:36.127]                 for (kk in seq_along(NAMES)) {
[16:22:36.127]                   name <- removed[[kk]]
[16:22:36.127]                   NAME <- NAMES[[kk]]
[16:22:36.127]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.127]                     next
[16:22:36.127]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.127]                 }
[16:22:36.127]                 if (length(args) > 0) 
[16:22:36.127]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.127]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.127]             }
[16:22:36.127]             else {
[16:22:36.127]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.127]             }
[16:22:36.127]             {
[16:22:36.127]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.127]                   0L) {
[16:22:36.127]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.127]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.127]                   base::options(opts)
[16:22:36.127]                 }
[16:22:36.127]                 {
[16:22:36.127]                   {
[16:22:36.127]                     NULL
[16:22:36.127]                     RNGkind("Mersenne-Twister")
[16:22:36.127]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.127]                       inherits = FALSE)
[16:22:36.127]                   }
[16:22:36.127]                   options(future.plan = NULL)
[16:22:36.127]                   if (is.na(NA_character_)) 
[16:22:36.127]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.127]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.127]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.127]                     .init = FALSE)
[16:22:36.127]                 }
[16:22:36.127]             }
[16:22:36.127]         }
[16:22:36.127]     })
[16:22:36.127]     if (TRUE) {
[16:22:36.127]         base::sink(type = "output", split = FALSE)
[16:22:36.127]         if (FALSE) {
[16:22:36.127]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.127]         }
[16:22:36.127]         else {
[16:22:36.127]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.127]         }
[16:22:36.127]         base::close(...future.stdout)
[16:22:36.127]         ...future.stdout <- NULL
[16:22:36.127]     }
[16:22:36.127]     ...future.result$conditions <- ...future.conditions
[16:22:36.127]     ...future.result$finished <- base::Sys.time()
[16:22:36.127]     ...future.result
[16:22:36.127] }
[16:22:36.129] plan(): Setting new future strategy stack:
[16:22:36.129] List of future strategies:
[16:22:36.129] 1. sequential:
[16:22:36.129]    - args: function (..., envir = parent.frame())
[16:22:36.129]    - tweaked: FALSE
[16:22:36.129]    - call: NULL
[16:22:36.129] plan(): nbrOfWorkers() = 1
[16:22:36.130] plan(): Setting new future strategy stack:
[16:22:36.131] List of future strategies:
[16:22:36.131] 1. sequential:
[16:22:36.131]    - args: function (..., envir = parent.frame())
[16:22:36.131]    - tweaked: FALSE
[16:22:36.131]    - call: plan(strategy)
[16:22:36.131] plan(): nbrOfWorkers() = 1
[16:22:36.131] SequentialFuture started (and completed)
[16:22:36.131] - Launch lazy future ... done
[16:22:36.131] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.132] getGlobalsAndPackages() ...
[16:22:36.132] Searching for globals...
[16:22:36.132] - globals found: [1] ‘print’
[16:22:36.132] Searching for globals ... DONE
[16:22:36.132] Resolving globals: FALSE
[16:22:36.133] 
[16:22:36.133] 
[16:22:36.133] getGlobalsAndPackages() ... DONE
[16:22:36.133] run() for ‘Future’ ...
[16:22:36.134] - state: ‘created’
[16:22:36.134] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.134] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.135] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.135]   - Field: ‘label’
[16:22:36.135]   - Field: ‘local’
[16:22:36.135]   - Field: ‘owner’
[16:22:36.135]   - Field: ‘envir’
[16:22:36.135]   - Field: ‘packages’
[16:22:36.135]   - Field: ‘gc’
[16:22:36.135]   - Field: ‘conditions’
[16:22:36.135]   - Field: ‘expr’
[16:22:36.135]   - Field: ‘uuid’
[16:22:36.136]   - Field: ‘seed’
[16:22:36.136]   - Field: ‘version’
[16:22:36.136]   - Field: ‘result’
[16:22:36.136]   - Field: ‘asynchronous’
[16:22:36.136]   - Field: ‘calls’
[16:22:36.136]   - Field: ‘globals’
[16:22:36.136]   - Field: ‘stdout’
[16:22:36.136]   - Field: ‘earlySignal’
[16:22:36.136]   - Field: ‘lazy’
[16:22:36.136]   - Field: ‘state’
[16:22:36.136] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.137] - Launch lazy future ...
[16:22:36.137] Packages needed by the future expression (n = 0): <none>
[16:22:36.137] Packages needed by future strategies (n = 0): <none>
[16:22:36.137] {
[16:22:36.137]     {
[16:22:36.137]         {
[16:22:36.137]             ...future.startTime <- base::Sys.time()
[16:22:36.137]             {
[16:22:36.137]                 {
[16:22:36.137]                   {
[16:22:36.137]                     base::local({
[16:22:36.137]                       has_future <- base::requireNamespace("future", 
[16:22:36.137]                         quietly = TRUE)
[16:22:36.137]                       if (has_future) {
[16:22:36.137]                         ns <- base::getNamespace("future")
[16:22:36.137]                         version <- ns[[".package"]][["version"]]
[16:22:36.137]                         if (is.null(version)) 
[16:22:36.137]                           version <- utils::packageVersion("future")
[16:22:36.137]                       }
[16:22:36.137]                       else {
[16:22:36.137]                         version <- NULL
[16:22:36.137]                       }
[16:22:36.137]                       if (!has_future || version < "1.8.0") {
[16:22:36.137]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.137]                           "", base::R.version$version.string), 
[16:22:36.137]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:36.137]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.137]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.137]                             "release", "version")], collapse = " "), 
[16:22:36.137]                           hostname = base::Sys.info()[["nodename"]])
[16:22:36.137]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.137]                           info)
[16:22:36.137]                         info <- base::paste(info, collapse = "; ")
[16:22:36.137]                         if (!has_future) {
[16:22:36.137]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.137]                             info)
[16:22:36.137]                         }
[16:22:36.137]                         else {
[16:22:36.137]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.137]                             info, version)
[16:22:36.137]                         }
[16:22:36.137]                         base::stop(msg)
[16:22:36.137]                       }
[16:22:36.137]                     })
[16:22:36.137]                   }
[16:22:36.137]                   ...future.strategy.old <- future::plan("list")
[16:22:36.137]                   options(future.plan = NULL)
[16:22:36.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.137]                 }
[16:22:36.137]                 ...future.workdir <- getwd()
[16:22:36.137]             }
[16:22:36.137]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.137]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.137]         }
[16:22:36.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.137]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.137]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.137]             base::names(...future.oldOptions))
[16:22:36.137]     }
[16:22:36.137]     if (FALSE) {
[16:22:36.137]     }
[16:22:36.137]     else {
[16:22:36.137]         if (TRUE) {
[16:22:36.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.137]                 open = "w")
[16:22:36.137]         }
[16:22:36.137]         else {
[16:22:36.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.137]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.137]         }
[16:22:36.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.137]             base::sink(type = "output", split = FALSE)
[16:22:36.137]             base::close(...future.stdout)
[16:22:36.137]         }, add = TRUE)
[16:22:36.137]     }
[16:22:36.137]     ...future.frame <- base::sys.nframe()
[16:22:36.137]     ...future.conditions <- base::list()
[16:22:36.137]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.137]     if (FALSE) {
[16:22:36.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.137]     }
[16:22:36.137]     ...future.result <- base::tryCatch({
[16:22:36.137]         base::withCallingHandlers({
[16:22:36.137]             ...future.value <- base::withVisible(base::local(print(42)))
[16:22:36.137]             future::FutureResult(value = ...future.value$value, 
[16:22:36.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.137]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.137]                     ...future.globalenv.names))
[16:22:36.137]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.137]         }, condition = base::local({
[16:22:36.137]             c <- base::c
[16:22:36.137]             inherits <- base::inherits
[16:22:36.137]             invokeRestart <- base::invokeRestart
[16:22:36.137]             length <- base::length
[16:22:36.137]             list <- base::list
[16:22:36.137]             seq.int <- base::seq.int
[16:22:36.137]             signalCondition <- base::signalCondition
[16:22:36.137]             sys.calls <- base::sys.calls
[16:22:36.137]             `[[` <- base::`[[`
[16:22:36.137]             `+` <- base::`+`
[16:22:36.137]             `<<-` <- base::`<<-`
[16:22:36.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.137]                   3L)]
[16:22:36.137]             }
[16:22:36.137]             function(cond) {
[16:22:36.137]                 is_error <- inherits(cond, "error")
[16:22:36.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.137]                   NULL)
[16:22:36.137]                 if (is_error) {
[16:22:36.137]                   sessionInformation <- function() {
[16:22:36.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.137]                       search = base::search(), system = base::Sys.info())
[16:22:36.137]                   }
[16:22:36.137]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.137]                     cond$call), session = sessionInformation(), 
[16:22:36.137]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.137]                   signalCondition(cond)
[16:22:36.137]                 }
[16:22:36.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.137]                 "immediateCondition"))) {
[16:22:36.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.137]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.137]                   if (TRUE && !signal) {
[16:22:36.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.137]                     {
[16:22:36.137]                       inherits <- base::inherits
[16:22:36.137]                       invokeRestart <- base::invokeRestart
[16:22:36.137]                       is.null <- base::is.null
[16:22:36.137]                       muffled <- FALSE
[16:22:36.137]                       if (inherits(cond, "message")) {
[16:22:36.137]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.137]                         if (muffled) 
[16:22:36.137]                           invokeRestart("muffleMessage")
[16:22:36.137]                       }
[16:22:36.137]                       else if (inherits(cond, "warning")) {
[16:22:36.137]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.137]                         if (muffled) 
[16:22:36.137]                           invokeRestart("muffleWarning")
[16:22:36.137]                       }
[16:22:36.137]                       else if (inherits(cond, "condition")) {
[16:22:36.137]                         if (!is.null(pattern)) {
[16:22:36.137]                           computeRestarts <- base::computeRestarts
[16:22:36.137]                           grepl <- base::grepl
[16:22:36.137]                           restarts <- computeRestarts(cond)
[16:22:36.137]                           for (restart in restarts) {
[16:22:36.137]                             name <- restart$name
[16:22:36.137]                             if (is.null(name)) 
[16:22:36.137]                               next
[16:22:36.137]                             if (!grepl(pattern, name)) 
[16:22:36.137]                               next
[16:22:36.137]                             invokeRestart(restart)
[16:22:36.137]                             muffled <- TRUE
[16:22:36.137]                             break
[16:22:36.137]                           }
[16:22:36.137]                         }
[16:22:36.137]                       }
[16:22:36.137]                       invisible(muffled)
[16:22:36.137]                     }
[16:22:36.137]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.137]                   }
[16:22:36.137]                 }
[16:22:36.137]                 else {
[16:22:36.137]                   if (TRUE) {
[16:22:36.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.137]                     {
[16:22:36.137]                       inherits <- base::inherits
[16:22:36.137]                       invokeRestart <- base::invokeRestart
[16:22:36.137]                       is.null <- base::is.null
[16:22:36.137]                       muffled <- FALSE
[16:22:36.137]                       if (inherits(cond, "message")) {
[16:22:36.137]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.137]                         if (muffled) 
[16:22:36.137]                           invokeRestart("muffleMessage")
[16:22:36.137]                       }
[16:22:36.137]                       else if (inherits(cond, "warning")) {
[16:22:36.137]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.137]                         if (muffled) 
[16:22:36.137]                           invokeRestart("muffleWarning")
[16:22:36.137]                       }
[16:22:36.137]                       else if (inherits(cond, "condition")) {
[16:22:36.137]                         if (!is.null(pattern)) {
[16:22:36.137]                           computeRestarts <- base::computeRestarts
[16:22:36.137]                           grepl <- base::grepl
[16:22:36.137]                           restarts <- computeRestarts(cond)
[16:22:36.137]                           for (restart in restarts) {
[16:22:36.137]                             name <- restart$name
[16:22:36.137]                             if (is.null(name)) 
[16:22:36.137]                               next
[16:22:36.137]                             if (!grepl(pattern, name)) 
[16:22:36.137]                               next
[16:22:36.137]                             invokeRestart(restart)
[16:22:36.137]                             muffled <- TRUE
[16:22:36.137]                             break
[16:22:36.137]                           }
[16:22:36.137]                         }
[16:22:36.137]                       }
[16:22:36.137]                       invisible(muffled)
[16:22:36.137]                     }
[16:22:36.137]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.137]                   }
[16:22:36.137]                 }
[16:22:36.137]             }
[16:22:36.137]         }))
[16:22:36.137]     }, error = function(ex) {
[16:22:36.137]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.137]                 ...future.rng), started = ...future.startTime, 
[16:22:36.137]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.137]             version = "1.8"), class = "FutureResult")
[16:22:36.137]     }, finally = {
[16:22:36.137]         if (!identical(...future.workdir, getwd())) 
[16:22:36.137]             setwd(...future.workdir)
[16:22:36.137]         {
[16:22:36.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.137]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.137]             }
[16:22:36.137]             base::options(...future.oldOptions)
[16:22:36.137]             if (.Platform$OS.type == "windows") {
[16:22:36.137]                 old_names <- names(...future.oldEnvVars)
[16:22:36.137]                 envs <- base::Sys.getenv()
[16:22:36.137]                 names <- names(envs)
[16:22:36.137]                 common <- intersect(names, old_names)
[16:22:36.137]                 added <- setdiff(names, old_names)
[16:22:36.137]                 removed <- setdiff(old_names, names)
[16:22:36.137]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.137]                   envs[common]]
[16:22:36.137]                 NAMES <- toupper(changed)
[16:22:36.137]                 args <- list()
[16:22:36.137]                 for (kk in seq_along(NAMES)) {
[16:22:36.137]                   name <- changed[[kk]]
[16:22:36.137]                   NAME <- NAMES[[kk]]
[16:22:36.137]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.137]                     next
[16:22:36.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.137]                 }
[16:22:36.137]                 NAMES <- toupper(added)
[16:22:36.137]                 for (kk in seq_along(NAMES)) {
[16:22:36.137]                   name <- added[[kk]]
[16:22:36.137]                   NAME <- NAMES[[kk]]
[16:22:36.137]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.137]                     next
[16:22:36.137]                   args[[name]] <- ""
[16:22:36.137]                 }
[16:22:36.137]                 NAMES <- toupper(removed)
[16:22:36.137]                 for (kk in seq_along(NAMES)) {
[16:22:36.137]                   name <- removed[[kk]]
[16:22:36.137]                   NAME <- NAMES[[kk]]
[16:22:36.137]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.137]                     next
[16:22:36.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.137]                 }
[16:22:36.137]                 if (length(args) > 0) 
[16:22:36.137]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.137]             }
[16:22:36.137]             else {
[16:22:36.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.137]             }
[16:22:36.137]             {
[16:22:36.137]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.137]                   0L) {
[16:22:36.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.137]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.137]                   base::options(opts)
[16:22:36.137]                 }
[16:22:36.137]                 {
[16:22:36.137]                   {
[16:22:36.137]                     NULL
[16:22:36.137]                     RNGkind("Mersenne-Twister")
[16:22:36.137]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.137]                       inherits = FALSE)
[16:22:36.137]                   }
[16:22:36.137]                   options(future.plan = NULL)
[16:22:36.137]                   if (is.na(NA_character_)) 
[16:22:36.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.137]                     .init = FALSE)
[16:22:36.137]                 }
[16:22:36.137]             }
[16:22:36.137]         }
[16:22:36.137]     })
[16:22:36.137]     if (TRUE) {
[16:22:36.137]         base::sink(type = "output", split = FALSE)
[16:22:36.137]         if (TRUE) {
[16:22:36.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.137]         }
[16:22:36.137]         else {
[16:22:36.137]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.137]         }
[16:22:36.137]         base::close(...future.stdout)
[16:22:36.137]         ...future.stdout <- NULL
[16:22:36.137]     }
[16:22:36.137]     ...future.result$conditions <- ...future.conditions
[16:22:36.137]     ...future.result$finished <- base::Sys.time()
[16:22:36.137]     ...future.result
[16:22:36.137] }
[16:22:36.139] plan(): Setting new future strategy stack:
[16:22:36.139] List of future strategies:
[16:22:36.139] 1. sequential:
[16:22:36.139]    - args: function (..., envir = parent.frame())
[16:22:36.139]    - tweaked: FALSE
[16:22:36.139]    - call: NULL
[16:22:36.139] plan(): nbrOfWorkers() = 1
[16:22:36.140] plan(): Setting new future strategy stack:
[16:22:36.140] List of future strategies:
[16:22:36.140] 1. sequential:
[16:22:36.140]    - args: function (..., envir = parent.frame())
[16:22:36.140]    - tweaked: FALSE
[16:22:36.140]    - call: plan(strategy)
[16:22:36.140] plan(): nbrOfWorkers() = 1
[16:22:36.141] SequentialFuture started (and completed)
[16:22:36.141] - Launch lazy future ... done
[16:22:36.141] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[16:22:36.141] getGlobalsAndPackages() ...
[16:22:36.141] Searching for globals...
[16:22:36.144] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.144] Searching for globals ... DONE
[16:22:36.144] Resolving globals: FALSE
[16:22:36.144] 
[16:22:36.145] - packages: [1] ‘utils’
[16:22:36.145] getGlobalsAndPackages() ... DONE
[16:22:36.145] run() for ‘Future’ ...
[16:22:36.145] - state: ‘created’
[16:22:36.145] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.145] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.145] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.146]   - Field: ‘label’
[16:22:36.146]   - Field: ‘local’
[16:22:36.146]   - Field: ‘owner’
[16:22:36.146]   - Field: ‘envir’
[16:22:36.146]   - Field: ‘packages’
[16:22:36.146]   - Field: ‘gc’
[16:22:36.146]   - Field: ‘conditions’
[16:22:36.146]   - Field: ‘expr’
[16:22:36.146]   - Field: ‘uuid’
[16:22:36.146]   - Field: ‘seed’
[16:22:36.146]   - Field: ‘version’
[16:22:36.146]   - Field: ‘result’
[16:22:36.147]   - Field: ‘asynchronous’
[16:22:36.147]   - Field: ‘calls’
[16:22:36.147]   - Field: ‘globals’
[16:22:36.147]   - Field: ‘stdout’
[16:22:36.147]   - Field: ‘earlySignal’
[16:22:36.147]   - Field: ‘lazy’
[16:22:36.147]   - Field: ‘state’
[16:22:36.147] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.147] - Launch lazy future ...
[16:22:36.147] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.148] Packages needed by future strategies (n = 0): <none>
[16:22:36.148] {
[16:22:36.148]     {
[16:22:36.148]         {
[16:22:36.148]             ...future.startTime <- base::Sys.time()
[16:22:36.148]             {
[16:22:36.148]                 {
[16:22:36.148]                   {
[16:22:36.148]                     {
[16:22:36.148]                       base::local({
[16:22:36.148]                         has_future <- base::requireNamespace("future", 
[16:22:36.148]                           quietly = TRUE)
[16:22:36.148]                         if (has_future) {
[16:22:36.148]                           ns <- base::getNamespace("future")
[16:22:36.148]                           version <- ns[[".package"]][["version"]]
[16:22:36.148]                           if (is.null(version)) 
[16:22:36.148]                             version <- utils::packageVersion("future")
[16:22:36.148]                         }
[16:22:36.148]                         else {
[16:22:36.148]                           version <- NULL
[16:22:36.148]                         }
[16:22:36.148]                         if (!has_future || version < "1.8.0") {
[16:22:36.148]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.148]                             "", base::R.version$version.string), 
[16:22:36.148]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.148]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.148]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.148]                               "release", "version")], collapse = " "), 
[16:22:36.148]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.148]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.148]                             info)
[16:22:36.148]                           info <- base::paste(info, collapse = "; ")
[16:22:36.148]                           if (!has_future) {
[16:22:36.148]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.148]                               info)
[16:22:36.148]                           }
[16:22:36.148]                           else {
[16:22:36.148]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.148]                               info, version)
[16:22:36.148]                           }
[16:22:36.148]                           base::stop(msg)
[16:22:36.148]                         }
[16:22:36.148]                       })
[16:22:36.148]                     }
[16:22:36.148]                     base::local({
[16:22:36.148]                       for (pkg in "utils") {
[16:22:36.148]                         base::loadNamespace(pkg)
[16:22:36.148]                         base::library(pkg, character.only = TRUE)
[16:22:36.148]                       }
[16:22:36.148]                     })
[16:22:36.148]                   }
[16:22:36.148]                   ...future.strategy.old <- future::plan("list")
[16:22:36.148]                   options(future.plan = NULL)
[16:22:36.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.148]                 }
[16:22:36.148]                 ...future.workdir <- getwd()
[16:22:36.148]             }
[16:22:36.148]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.148]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.148]         }
[16:22:36.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.148]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.148]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.148]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.148]             base::names(...future.oldOptions))
[16:22:36.148]     }
[16:22:36.148]     if (TRUE) {
[16:22:36.148]     }
[16:22:36.148]     else {
[16:22:36.148]         if (NA) {
[16:22:36.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.148]                 open = "w")
[16:22:36.148]         }
[16:22:36.148]         else {
[16:22:36.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.148]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.148]         }
[16:22:36.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.148]             base::sink(type = "output", split = FALSE)
[16:22:36.148]             base::close(...future.stdout)
[16:22:36.148]         }, add = TRUE)
[16:22:36.148]     }
[16:22:36.148]     ...future.frame <- base::sys.nframe()
[16:22:36.148]     ...future.conditions <- base::list()
[16:22:36.148]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.148]     if (FALSE) {
[16:22:36.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.148]     }
[16:22:36.148]     ...future.result <- base::tryCatch({
[16:22:36.148]         base::withCallingHandlers({
[16:22:36.148]             ...future.value <- base::withVisible(base::local({
[16:22:36.148]                 print(1:50)
[16:22:36.148]                 str(1:50)
[16:22:36.148]                 cat(letters, sep = "-")
[16:22:36.148]                 cat(1:6, collapse = "\n")
[16:22:36.148]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.148]                 42L
[16:22:36.148]             }))
[16:22:36.148]             future::FutureResult(value = ...future.value$value, 
[16:22:36.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.148]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.148]                     ...future.globalenv.names))
[16:22:36.148]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.148]         }, condition = base::local({
[16:22:36.148]             c <- base::c
[16:22:36.148]             inherits <- base::inherits
[16:22:36.148]             invokeRestart <- base::invokeRestart
[16:22:36.148]             length <- base::length
[16:22:36.148]             list <- base::list
[16:22:36.148]             seq.int <- base::seq.int
[16:22:36.148]             signalCondition <- base::signalCondition
[16:22:36.148]             sys.calls <- base::sys.calls
[16:22:36.148]             `[[` <- base::`[[`
[16:22:36.148]             `+` <- base::`+`
[16:22:36.148]             `<<-` <- base::`<<-`
[16:22:36.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.148]                   3L)]
[16:22:36.148]             }
[16:22:36.148]             function(cond) {
[16:22:36.148]                 is_error <- inherits(cond, "error")
[16:22:36.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.148]                   NULL)
[16:22:36.148]                 if (is_error) {
[16:22:36.148]                   sessionInformation <- function() {
[16:22:36.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.148]                       search = base::search(), system = base::Sys.info())
[16:22:36.148]                   }
[16:22:36.148]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.148]                     cond$call), session = sessionInformation(), 
[16:22:36.148]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.148]                   signalCondition(cond)
[16:22:36.148]                 }
[16:22:36.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.148]                 "immediateCondition"))) {
[16:22:36.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.148]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.148]                   if (TRUE && !signal) {
[16:22:36.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.148]                     {
[16:22:36.148]                       inherits <- base::inherits
[16:22:36.148]                       invokeRestart <- base::invokeRestart
[16:22:36.148]                       is.null <- base::is.null
[16:22:36.148]                       muffled <- FALSE
[16:22:36.148]                       if (inherits(cond, "message")) {
[16:22:36.148]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.148]                         if (muffled) 
[16:22:36.148]                           invokeRestart("muffleMessage")
[16:22:36.148]                       }
[16:22:36.148]                       else if (inherits(cond, "warning")) {
[16:22:36.148]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.148]                         if (muffled) 
[16:22:36.148]                           invokeRestart("muffleWarning")
[16:22:36.148]                       }
[16:22:36.148]                       else if (inherits(cond, "condition")) {
[16:22:36.148]                         if (!is.null(pattern)) {
[16:22:36.148]                           computeRestarts <- base::computeRestarts
[16:22:36.148]                           grepl <- base::grepl
[16:22:36.148]                           restarts <- computeRestarts(cond)
[16:22:36.148]                           for (restart in restarts) {
[16:22:36.148]                             name <- restart$name
[16:22:36.148]                             if (is.null(name)) 
[16:22:36.148]                               next
[16:22:36.148]                             if (!grepl(pattern, name)) 
[16:22:36.148]                               next
[16:22:36.148]                             invokeRestart(restart)
[16:22:36.148]                             muffled <- TRUE
[16:22:36.148]                             break
[16:22:36.148]                           }
[16:22:36.148]                         }
[16:22:36.148]                       }
[16:22:36.148]                       invisible(muffled)
[16:22:36.148]                     }
[16:22:36.148]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.148]                   }
[16:22:36.148]                 }
[16:22:36.148]                 else {
[16:22:36.148]                   if (TRUE) {
[16:22:36.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.148]                     {
[16:22:36.148]                       inherits <- base::inherits
[16:22:36.148]                       invokeRestart <- base::invokeRestart
[16:22:36.148]                       is.null <- base::is.null
[16:22:36.148]                       muffled <- FALSE
[16:22:36.148]                       if (inherits(cond, "message")) {
[16:22:36.148]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.148]                         if (muffled) 
[16:22:36.148]                           invokeRestart("muffleMessage")
[16:22:36.148]                       }
[16:22:36.148]                       else if (inherits(cond, "warning")) {
[16:22:36.148]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.148]                         if (muffled) 
[16:22:36.148]                           invokeRestart("muffleWarning")
[16:22:36.148]                       }
[16:22:36.148]                       else if (inherits(cond, "condition")) {
[16:22:36.148]                         if (!is.null(pattern)) {
[16:22:36.148]                           computeRestarts <- base::computeRestarts
[16:22:36.148]                           grepl <- base::grepl
[16:22:36.148]                           restarts <- computeRestarts(cond)
[16:22:36.148]                           for (restart in restarts) {
[16:22:36.148]                             name <- restart$name
[16:22:36.148]                             if (is.null(name)) 
[16:22:36.148]                               next
[16:22:36.148]                             if (!grepl(pattern, name)) 
[16:22:36.148]                               next
[16:22:36.148]                             invokeRestart(restart)
[16:22:36.148]                             muffled <- TRUE
[16:22:36.148]                             break
[16:22:36.148]                           }
[16:22:36.148]                         }
[16:22:36.148]                       }
[16:22:36.148]                       invisible(muffled)
[16:22:36.148]                     }
[16:22:36.148]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.148]                   }
[16:22:36.148]                 }
[16:22:36.148]             }
[16:22:36.148]         }))
[16:22:36.148]     }, error = function(ex) {
[16:22:36.148]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.148]                 ...future.rng), started = ...future.startTime, 
[16:22:36.148]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.148]             version = "1.8"), class = "FutureResult")
[16:22:36.148]     }, finally = {
[16:22:36.148]         if (!identical(...future.workdir, getwd())) 
[16:22:36.148]             setwd(...future.workdir)
[16:22:36.148]         {
[16:22:36.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.148]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.148]             }
[16:22:36.148]             base::options(...future.oldOptions)
[16:22:36.148]             if (.Platform$OS.type == "windows") {
[16:22:36.148]                 old_names <- names(...future.oldEnvVars)
[16:22:36.148]                 envs <- base::Sys.getenv()
[16:22:36.148]                 names <- names(envs)
[16:22:36.148]                 common <- intersect(names, old_names)
[16:22:36.148]                 added <- setdiff(names, old_names)
[16:22:36.148]                 removed <- setdiff(old_names, names)
[16:22:36.148]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.148]                   envs[common]]
[16:22:36.148]                 NAMES <- toupper(changed)
[16:22:36.148]                 args <- list()
[16:22:36.148]                 for (kk in seq_along(NAMES)) {
[16:22:36.148]                   name <- changed[[kk]]
[16:22:36.148]                   NAME <- NAMES[[kk]]
[16:22:36.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.148]                     next
[16:22:36.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.148]                 }
[16:22:36.148]                 NAMES <- toupper(added)
[16:22:36.148]                 for (kk in seq_along(NAMES)) {
[16:22:36.148]                   name <- added[[kk]]
[16:22:36.148]                   NAME <- NAMES[[kk]]
[16:22:36.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.148]                     next
[16:22:36.148]                   args[[name]] <- ""
[16:22:36.148]                 }
[16:22:36.148]                 NAMES <- toupper(removed)
[16:22:36.148]                 for (kk in seq_along(NAMES)) {
[16:22:36.148]                   name <- removed[[kk]]
[16:22:36.148]                   NAME <- NAMES[[kk]]
[16:22:36.148]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.148]                     next
[16:22:36.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.148]                 }
[16:22:36.148]                 if (length(args) > 0) 
[16:22:36.148]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.148]             }
[16:22:36.148]             else {
[16:22:36.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.148]             }
[16:22:36.148]             {
[16:22:36.148]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.148]                   0L) {
[16:22:36.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.148]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.148]                   base::options(opts)
[16:22:36.148]                 }
[16:22:36.148]                 {
[16:22:36.148]                   {
[16:22:36.148]                     NULL
[16:22:36.148]                     RNGkind("Mersenne-Twister")
[16:22:36.148]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.148]                       inherits = FALSE)
[16:22:36.148]                   }
[16:22:36.148]                   options(future.plan = NULL)
[16:22:36.148]                   if (is.na(NA_character_)) 
[16:22:36.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.148]                     .init = FALSE)
[16:22:36.148]                 }
[16:22:36.148]             }
[16:22:36.148]         }
[16:22:36.148]     })
[16:22:36.148]     if (FALSE) {
[16:22:36.148]         base::sink(type = "output", split = FALSE)
[16:22:36.148]         if (NA) {
[16:22:36.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.148]         }
[16:22:36.148]         else {
[16:22:36.148]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.148]         }
[16:22:36.148]         base::close(...future.stdout)
[16:22:36.148]         ...future.stdout <- NULL
[16:22:36.148]     }
[16:22:36.148]     ...future.result$conditions <- ...future.conditions
[16:22:36.148]     ...future.result$finished <- base::Sys.time()
[16:22:36.148]     ...future.result
[16:22:36.148] }
[16:22:36.150] plan(): Setting new future strategy stack:
[16:22:36.150] List of future strategies:
[16:22:36.150] 1. sequential:
[16:22:36.150]    - args: function (..., envir = parent.frame())
[16:22:36.150]    - tweaked: FALSE
[16:22:36.150]    - call: NULL
[16:22:36.150] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[16:22:36.152] plan(): Setting new future strategy stack:
[16:22:36.152] List of future strategies:
[16:22:36.152] 1. sequential:
[16:22:36.152]    - args: function (..., envir = parent.frame())
[16:22:36.152]    - tweaked: FALSE
[16:22:36.152]    - call: plan(strategy)
[16:22:36.152] plan(): nbrOfWorkers() = 1
[16:22:36.152] SequentialFuture started (and completed)
[16:22:36.152] - Launch lazy future ... done
[16:22:36.153] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "a112773e-09c0-3b7f-c544-6ca02b39ebbc"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89851
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:35"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:36.161] getGlobalsAndPackages() ...
[16:22:36.161] Searching for globals...
[16:22:36.164] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.164] Searching for globals ... DONE
[16:22:36.164] Resolving globals: FALSE
[16:22:36.164] 
[16:22:36.164] - packages: [1] ‘utils’
[16:22:36.164] getGlobalsAndPackages() ... DONE
[16:22:36.165] run() for ‘Future’ ...
[16:22:36.165] - state: ‘created’
[16:22:36.165] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.165] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.165] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.165]   - Field: ‘label’
[16:22:36.165]   - Field: ‘local’
[16:22:36.166]   - Field: ‘owner’
[16:22:36.166]   - Field: ‘envir’
[16:22:36.166]   - Field: ‘packages’
[16:22:36.166]   - Field: ‘gc’
[16:22:36.166]   - Field: ‘conditions’
[16:22:36.166]   - Field: ‘expr’
[16:22:36.166]   - Field: ‘uuid’
[16:22:36.166]   - Field: ‘seed’
[16:22:36.166]   - Field: ‘version’
[16:22:36.166]   - Field: ‘result’
[16:22:36.166]   - Field: ‘asynchronous’
[16:22:36.167]   - Field: ‘calls’
[16:22:36.167]   - Field: ‘globals’
[16:22:36.167]   - Field: ‘stdout’
[16:22:36.167]   - Field: ‘earlySignal’
[16:22:36.167]   - Field: ‘lazy’
[16:22:36.167]   - Field: ‘state’
[16:22:36.167] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.167] - Launch lazy future ...
[16:22:36.167] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.167] Packages needed by future strategies (n = 0): <none>
[16:22:36.168] {
[16:22:36.168]     {
[16:22:36.168]         {
[16:22:36.168]             ...future.startTime <- base::Sys.time()
[16:22:36.168]             {
[16:22:36.168]                 {
[16:22:36.168]                   {
[16:22:36.168]                     {
[16:22:36.168]                       base::local({
[16:22:36.168]                         has_future <- base::requireNamespace("future", 
[16:22:36.168]                           quietly = TRUE)
[16:22:36.168]                         if (has_future) {
[16:22:36.168]                           ns <- base::getNamespace("future")
[16:22:36.168]                           version <- ns[[".package"]][["version"]]
[16:22:36.168]                           if (is.null(version)) 
[16:22:36.168]                             version <- utils::packageVersion("future")
[16:22:36.168]                         }
[16:22:36.168]                         else {
[16:22:36.168]                           version <- NULL
[16:22:36.168]                         }
[16:22:36.168]                         if (!has_future || version < "1.8.0") {
[16:22:36.168]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.168]                             "", base::R.version$version.string), 
[16:22:36.168]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.168]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.168]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.168]                               "release", "version")], collapse = " "), 
[16:22:36.168]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.168]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.168]                             info)
[16:22:36.168]                           info <- base::paste(info, collapse = "; ")
[16:22:36.168]                           if (!has_future) {
[16:22:36.168]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.168]                               info)
[16:22:36.168]                           }
[16:22:36.168]                           else {
[16:22:36.168]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.168]                               info, version)
[16:22:36.168]                           }
[16:22:36.168]                           base::stop(msg)
[16:22:36.168]                         }
[16:22:36.168]                       })
[16:22:36.168]                     }
[16:22:36.168]                     base::local({
[16:22:36.168]                       for (pkg in "utils") {
[16:22:36.168]                         base::loadNamespace(pkg)
[16:22:36.168]                         base::library(pkg, character.only = TRUE)
[16:22:36.168]                       }
[16:22:36.168]                     })
[16:22:36.168]                   }
[16:22:36.168]                   ...future.strategy.old <- future::plan("list")
[16:22:36.168]                   options(future.plan = NULL)
[16:22:36.168]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.168]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.168]                 }
[16:22:36.168]                 ...future.workdir <- getwd()
[16:22:36.168]             }
[16:22:36.168]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.168]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.168]         }
[16:22:36.168]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.168]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.168]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.168]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.168]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.168]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.168]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.168]             base::names(...future.oldOptions))
[16:22:36.168]     }
[16:22:36.168]     if (TRUE) {
[16:22:36.168]     }
[16:22:36.168]     else {
[16:22:36.168]         if (NA) {
[16:22:36.168]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.168]                 open = "w")
[16:22:36.168]         }
[16:22:36.168]         else {
[16:22:36.168]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.168]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.168]         }
[16:22:36.168]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.168]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.168]             base::sink(type = "output", split = FALSE)
[16:22:36.168]             base::close(...future.stdout)
[16:22:36.168]         }, add = TRUE)
[16:22:36.168]     }
[16:22:36.168]     ...future.frame <- base::sys.nframe()
[16:22:36.168]     ...future.conditions <- base::list()
[16:22:36.168]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.168]     if (FALSE) {
[16:22:36.168]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.168]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.168]     }
[16:22:36.168]     ...future.result <- base::tryCatch({
[16:22:36.168]         base::withCallingHandlers({
[16:22:36.168]             ...future.value <- base::withVisible(base::local({
[16:22:36.168]                 print(1:50)
[16:22:36.168]                 str(1:50)
[16:22:36.168]                 cat(letters, sep = "-")
[16:22:36.168]                 cat(1:6, collapse = "\n")
[16:22:36.168]                 write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.168]                 42L
[16:22:36.168]             }))
[16:22:36.168]             future::FutureResult(value = ...future.value$value, 
[16:22:36.168]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.168]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.168]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.168]                     ...future.globalenv.names))
[16:22:36.168]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.168]         }, condition = base::local({
[16:22:36.168]             c <- base::c
[16:22:36.168]             inherits <- base::inherits
[16:22:36.168]             invokeRestart <- base::invokeRestart
[16:22:36.168]             length <- base::length
[16:22:36.168]             list <- base::list
[16:22:36.168]             seq.int <- base::seq.int
[16:22:36.168]             signalCondition <- base::signalCondition
[16:22:36.168]             sys.calls <- base::sys.calls
[16:22:36.168]             `[[` <- base::`[[`
[16:22:36.168]             `+` <- base::`+`
[16:22:36.168]             `<<-` <- base::`<<-`
[16:22:36.168]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.168]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.168]                   3L)]
[16:22:36.168]             }
[16:22:36.168]             function(cond) {
[16:22:36.168]                 is_error <- inherits(cond, "error")
[16:22:36.168]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.168]                   NULL)
[16:22:36.168]                 if (is_error) {
[16:22:36.168]                   sessionInformation <- function() {
[16:22:36.168]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.168]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.168]                       search = base::search(), system = base::Sys.info())
[16:22:36.168]                   }
[16:22:36.168]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.168]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.168]                     cond$call), session = sessionInformation(), 
[16:22:36.168]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.168]                   signalCondition(cond)
[16:22:36.168]                 }
[16:22:36.168]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.168]                 "immediateCondition"))) {
[16:22:36.168]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.168]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.168]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.168]                   if (TRUE && !signal) {
[16:22:36.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.168]                     {
[16:22:36.168]                       inherits <- base::inherits
[16:22:36.168]                       invokeRestart <- base::invokeRestart
[16:22:36.168]                       is.null <- base::is.null
[16:22:36.168]                       muffled <- FALSE
[16:22:36.168]                       if (inherits(cond, "message")) {
[16:22:36.168]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.168]                         if (muffled) 
[16:22:36.168]                           invokeRestart("muffleMessage")
[16:22:36.168]                       }
[16:22:36.168]                       else if (inherits(cond, "warning")) {
[16:22:36.168]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.168]                         if (muffled) 
[16:22:36.168]                           invokeRestart("muffleWarning")
[16:22:36.168]                       }
[16:22:36.168]                       else if (inherits(cond, "condition")) {
[16:22:36.168]                         if (!is.null(pattern)) {
[16:22:36.168]                           computeRestarts <- base::computeRestarts
[16:22:36.168]                           grepl <- base::grepl
[16:22:36.168]                           restarts <- computeRestarts(cond)
[16:22:36.168]                           for (restart in restarts) {
[16:22:36.168]                             name <- restart$name
[16:22:36.168]                             if (is.null(name)) 
[16:22:36.168]                               next
[16:22:36.168]                             if (!grepl(pattern, name)) 
[16:22:36.168]                               next
[16:22:36.168]                             invokeRestart(restart)
[16:22:36.168]                             muffled <- TRUE
[16:22:36.168]                             break
[16:22:36.168]                           }
[16:22:36.168]                         }
[16:22:36.168]                       }
[16:22:36.168]                       invisible(muffled)
[16:22:36.168]                     }
[16:22:36.168]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.168]                   }
[16:22:36.168]                 }
[16:22:36.168]                 else {
[16:22:36.168]                   if (TRUE) {
[16:22:36.168]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.168]                     {
[16:22:36.168]                       inherits <- base::inherits
[16:22:36.168]                       invokeRestart <- base::invokeRestart
[16:22:36.168]                       is.null <- base::is.null
[16:22:36.168]                       muffled <- FALSE
[16:22:36.168]                       if (inherits(cond, "message")) {
[16:22:36.168]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.168]                         if (muffled) 
[16:22:36.168]                           invokeRestart("muffleMessage")
[16:22:36.168]                       }
[16:22:36.168]                       else if (inherits(cond, "warning")) {
[16:22:36.168]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.168]                         if (muffled) 
[16:22:36.168]                           invokeRestart("muffleWarning")
[16:22:36.168]                       }
[16:22:36.168]                       else if (inherits(cond, "condition")) {
[16:22:36.168]                         if (!is.null(pattern)) {
[16:22:36.168]                           computeRestarts <- base::computeRestarts
[16:22:36.168]                           grepl <- base::grepl
[16:22:36.168]                           restarts <- computeRestarts(cond)
[16:22:36.168]                           for (restart in restarts) {
[16:22:36.168]                             name <- restart$name
[16:22:36.168]                             if (is.null(name)) 
[16:22:36.168]                               next
[16:22:36.168]                             if (!grepl(pattern, name)) 
[16:22:36.168]                               next
[16:22:36.168]                             invokeRestart(restart)
[16:22:36.168]                             muffled <- TRUE
[16:22:36.168]                             break
[16:22:36.168]                           }
[16:22:36.168]                         }
[16:22:36.168]                       }
[16:22:36.168]                       invisible(muffled)
[16:22:36.168]                     }
[16:22:36.168]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.168]                   }
[16:22:36.168]                 }
[16:22:36.168]             }
[16:22:36.168]         }))
[16:22:36.168]     }, error = function(ex) {
[16:22:36.168]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.168]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.168]                 ...future.rng), started = ...future.startTime, 
[16:22:36.168]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.168]             version = "1.8"), class = "FutureResult")
[16:22:36.168]     }, finally = {
[16:22:36.168]         if (!identical(...future.workdir, getwd())) 
[16:22:36.168]             setwd(...future.workdir)
[16:22:36.168]         {
[16:22:36.168]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.168]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.168]             }
[16:22:36.168]             base::options(...future.oldOptions)
[16:22:36.168]             if (.Platform$OS.type == "windows") {
[16:22:36.168]                 old_names <- names(...future.oldEnvVars)
[16:22:36.168]                 envs <- base::Sys.getenv()
[16:22:36.168]                 names <- names(envs)
[16:22:36.168]                 common <- intersect(names, old_names)
[16:22:36.168]                 added <- setdiff(names, old_names)
[16:22:36.168]                 removed <- setdiff(old_names, names)
[16:22:36.168]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.168]                   envs[common]]
[16:22:36.168]                 NAMES <- toupper(changed)
[16:22:36.168]                 args <- list()
[16:22:36.168]                 for (kk in seq_along(NAMES)) {
[16:22:36.168]                   name <- changed[[kk]]
[16:22:36.168]                   NAME <- NAMES[[kk]]
[16:22:36.168]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.168]                     next
[16:22:36.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.168]                 }
[16:22:36.168]                 NAMES <- toupper(added)
[16:22:36.168]                 for (kk in seq_along(NAMES)) {
[16:22:36.168]                   name <- added[[kk]]
[16:22:36.168]                   NAME <- NAMES[[kk]]
[16:22:36.168]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.168]                     next
[16:22:36.168]                   args[[name]] <- ""
[16:22:36.168]                 }
[16:22:36.168]                 NAMES <- toupper(removed)
[16:22:36.168]                 for (kk in seq_along(NAMES)) {
[16:22:36.168]                   name <- removed[[kk]]
[16:22:36.168]                   NAME <- NAMES[[kk]]
[16:22:36.168]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.168]                     next
[16:22:36.168]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.168]                 }
[16:22:36.168]                 if (length(args) > 0) 
[16:22:36.168]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.168]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.168]             }
[16:22:36.168]             else {
[16:22:36.168]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.168]             }
[16:22:36.168]             {
[16:22:36.168]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.168]                   0L) {
[16:22:36.168]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.168]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.168]                   base::options(opts)
[16:22:36.168]                 }
[16:22:36.168]                 {
[16:22:36.168]                   {
[16:22:36.168]                     NULL
[16:22:36.168]                     RNGkind("Mersenne-Twister")
[16:22:36.168]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.168]                       inherits = FALSE)
[16:22:36.168]                   }
[16:22:36.168]                   options(future.plan = NULL)
[16:22:36.168]                   if (is.na(NA_character_)) 
[16:22:36.168]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.168]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.168]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.168]                     .init = FALSE)
[16:22:36.168]                 }
[16:22:36.168]             }
[16:22:36.168]         }
[16:22:36.168]     })
[16:22:36.168]     if (FALSE) {
[16:22:36.168]         base::sink(type = "output", split = FALSE)
[16:22:36.168]         if (NA) {
[16:22:36.168]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.168]         }
[16:22:36.168]         else {
[16:22:36.168]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.168]         }
[16:22:36.168]         base::close(...future.stdout)
[16:22:36.168]         ...future.stdout <- NULL
[16:22:36.168]     }
[16:22:36.168]     ...future.result$conditions <- ...future.conditions
[16:22:36.168]     ...future.result$finished <- base::Sys.time()
[16:22:36.168]     ...future.result
[16:22:36.168] }
[16:22:36.170] plan(): Setting new future strategy stack:
[16:22:36.170] List of future strategies:
[16:22:36.170] 1. sequential:
[16:22:36.170]    - args: function (..., envir = parent.frame())
[16:22:36.170]    - tweaked: FALSE
[16:22:36.170]    - call: NULL
[16:22:36.170] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[16:22:36.172] plan(): Setting new future strategy stack:
[16:22:36.172] List of future strategies:
[16:22:36.172] 1. sequential:
[16:22:36.172]    - args: function (..., envir = parent.frame())
[16:22:36.172]    - tweaked: FALSE
[16:22:36.172]    - call: plan(strategy)
[16:22:36.172] plan(): nbrOfWorkers() = 1
[16:22:36.172] SequentialFuture started (and completed)
[16:22:36.172] - Launch lazy future ... done
[16:22:36.173] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.173] getGlobalsAndPackages() ...
[16:22:36.173] Searching for globals...
[16:22:36.173] - globals found: [1] ‘print’
[16:22:36.174] Searching for globals ... DONE
[16:22:36.174] Resolving globals: FALSE
[16:22:36.174] 
[16:22:36.174] 
[16:22:36.174] getGlobalsAndPackages() ... DONE
[16:22:36.174] run() for ‘Future’ ...
[16:22:36.174] - state: ‘created’
[16:22:36.174] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:22:36.175] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:22:36.175] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:22:36.175]   - Field: ‘label’
[16:22:36.175]   - Field: ‘local’
[16:22:36.175]   - Field: ‘owner’
[16:22:36.175]   - Field: ‘envir’
[16:22:36.175]   - Field: ‘packages’
[16:22:36.175]   - Field: ‘gc’
[16:22:36.176]   - Field: ‘conditions’
[16:22:36.176]   - Field: ‘expr’
[16:22:36.176]   - Field: ‘uuid’
[16:22:36.176]   - Field: ‘seed’
[16:22:36.176]   - Field: ‘version’
[16:22:36.176]   - Field: ‘result’
[16:22:36.176]   - Field: ‘asynchronous’
[16:22:36.176]   - Field: ‘calls’
[16:22:36.176]   - Field: ‘globals’
[16:22:36.176]   - Field: ‘stdout’
[16:22:36.176]   - Field: ‘earlySignal’
[16:22:36.177]   - Field: ‘lazy’
[16:22:36.177]   - Field: ‘state’
[16:22:36.177] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:22:36.177] - Launch lazy future ...
[16:22:36.177] Packages needed by the future expression (n = 0): <none>
[16:22:36.177] Packages needed by future strategies (n = 0): <none>
[16:22:36.178] {
[16:22:36.178]     {
[16:22:36.178]         {
[16:22:36.178]             ...future.startTime <- base::Sys.time()
[16:22:36.178]             {
[16:22:36.178]                 {
[16:22:36.178]                   {
[16:22:36.178]                     base::local({
[16:22:36.178]                       has_future <- base::requireNamespace("future", 
[16:22:36.178]                         quietly = TRUE)
[16:22:36.178]                       if (has_future) {
[16:22:36.178]                         ns <- base::getNamespace("future")
[16:22:36.178]                         version <- ns[[".package"]][["version"]]
[16:22:36.178]                         if (is.null(version)) 
[16:22:36.178]                           version <- utils::packageVersion("future")
[16:22:36.178]                       }
[16:22:36.178]                       else {
[16:22:36.178]                         version <- NULL
[16:22:36.178]                       }
[16:22:36.178]                       if (!has_future || version < "1.8.0") {
[16:22:36.178]                         info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.178]                           "", base::R.version$version.string), 
[16:22:36.178]                           platform = base::sprintf("%s (%s-bit)", 
[16:22:36.178]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.178]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.178]                             "release", "version")], collapse = " "), 
[16:22:36.178]                           hostname = base::Sys.info()[["nodename"]])
[16:22:36.178]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.178]                           info)
[16:22:36.178]                         info <- base::paste(info, collapse = "; ")
[16:22:36.178]                         if (!has_future) {
[16:22:36.178]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.178]                             info)
[16:22:36.178]                         }
[16:22:36.178]                         else {
[16:22:36.178]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.178]                             info, version)
[16:22:36.178]                         }
[16:22:36.178]                         base::stop(msg)
[16:22:36.178]                       }
[16:22:36.178]                     })
[16:22:36.178]                   }
[16:22:36.178]                   ...future.strategy.old <- future::plan("list")
[16:22:36.178]                   options(future.plan = NULL)
[16:22:36.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.178]                 }
[16:22:36.178]                 ...future.workdir <- getwd()
[16:22:36.178]             }
[16:22:36.178]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.178]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.178]         }
[16:22:36.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.178]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.178]             base::names(...future.oldOptions))
[16:22:36.178]     }
[16:22:36.178]     if (FALSE) {
[16:22:36.178]     }
[16:22:36.178]     else {
[16:22:36.178]         if (TRUE) {
[16:22:36.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.178]                 open = "w")
[16:22:36.178]         }
[16:22:36.178]         else {
[16:22:36.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.178]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.178]         }
[16:22:36.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.178]             base::sink(type = "output", split = FALSE)
[16:22:36.178]             base::close(...future.stdout)
[16:22:36.178]         }, add = TRUE)
[16:22:36.178]     }
[16:22:36.178]     ...future.frame <- base::sys.nframe()
[16:22:36.178]     ...future.conditions <- base::list()
[16:22:36.178]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.178]     if (FALSE) {
[16:22:36.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.178]     }
[16:22:36.178]     ...future.result <- base::tryCatch({
[16:22:36.178]         base::withCallingHandlers({
[16:22:36.178]             ...future.value <- base::withVisible(base::local(print(42)))
[16:22:36.178]             future::FutureResult(value = ...future.value$value, 
[16:22:36.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.178]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.178]                     ...future.globalenv.names))
[16:22:36.178]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.178]         }, condition = base::local({
[16:22:36.178]             c <- base::c
[16:22:36.178]             inherits <- base::inherits
[16:22:36.178]             invokeRestart <- base::invokeRestart
[16:22:36.178]             length <- base::length
[16:22:36.178]             list <- base::list
[16:22:36.178]             seq.int <- base::seq.int
[16:22:36.178]             signalCondition <- base::signalCondition
[16:22:36.178]             sys.calls <- base::sys.calls
[16:22:36.178]             `[[` <- base::`[[`
[16:22:36.178]             `+` <- base::`+`
[16:22:36.178]             `<<-` <- base::`<<-`
[16:22:36.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.178]                   3L)]
[16:22:36.178]             }
[16:22:36.178]             function(cond) {
[16:22:36.178]                 is_error <- inherits(cond, "error")
[16:22:36.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.178]                   NULL)
[16:22:36.178]                 if (is_error) {
[16:22:36.178]                   sessionInformation <- function() {
[16:22:36.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.178]                       search = base::search(), system = base::Sys.info())
[16:22:36.178]                   }
[16:22:36.178]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.178]                     cond$call), session = sessionInformation(), 
[16:22:36.178]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.178]                   signalCondition(cond)
[16:22:36.178]                 }
[16:22:36.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.178]                 "immediateCondition"))) {
[16:22:36.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.178]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.178]                   if (TRUE && !signal) {
[16:22:36.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.178]                     {
[16:22:36.178]                       inherits <- base::inherits
[16:22:36.178]                       invokeRestart <- base::invokeRestart
[16:22:36.178]                       is.null <- base::is.null
[16:22:36.178]                       muffled <- FALSE
[16:22:36.178]                       if (inherits(cond, "message")) {
[16:22:36.178]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.178]                         if (muffled) 
[16:22:36.178]                           invokeRestart("muffleMessage")
[16:22:36.178]                       }
[16:22:36.178]                       else if (inherits(cond, "warning")) {
[16:22:36.178]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.178]                         if (muffled) 
[16:22:36.178]                           invokeRestart("muffleWarning")
[16:22:36.178]                       }
[16:22:36.178]                       else if (inherits(cond, "condition")) {
[16:22:36.178]                         if (!is.null(pattern)) {
[16:22:36.178]                           computeRestarts <- base::computeRestarts
[16:22:36.178]                           grepl <- base::grepl
[16:22:36.178]                           restarts <- computeRestarts(cond)
[16:22:36.178]                           for (restart in restarts) {
[16:22:36.178]                             name <- restart$name
[16:22:36.178]                             if (is.null(name)) 
[16:22:36.178]                               next
[16:22:36.178]                             if (!grepl(pattern, name)) 
[16:22:36.178]                               next
[16:22:36.178]                             invokeRestart(restart)
[16:22:36.178]                             muffled <- TRUE
[16:22:36.178]                             break
[16:22:36.178]                           }
[16:22:36.178]                         }
[16:22:36.178]                       }
[16:22:36.178]                       invisible(muffled)
[16:22:36.178]                     }
[16:22:36.178]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.178]                   }
[16:22:36.178]                 }
[16:22:36.178]                 else {
[16:22:36.178]                   if (TRUE) {
[16:22:36.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.178]                     {
[16:22:36.178]                       inherits <- base::inherits
[16:22:36.178]                       invokeRestart <- base::invokeRestart
[16:22:36.178]                       is.null <- base::is.null
[16:22:36.178]                       muffled <- FALSE
[16:22:36.178]                       if (inherits(cond, "message")) {
[16:22:36.178]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.178]                         if (muffled) 
[16:22:36.178]                           invokeRestart("muffleMessage")
[16:22:36.178]                       }
[16:22:36.178]                       else if (inherits(cond, "warning")) {
[16:22:36.178]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.178]                         if (muffled) 
[16:22:36.178]                           invokeRestart("muffleWarning")
[16:22:36.178]                       }
[16:22:36.178]                       else if (inherits(cond, "condition")) {
[16:22:36.178]                         if (!is.null(pattern)) {
[16:22:36.178]                           computeRestarts <- base::computeRestarts
[16:22:36.178]                           grepl <- base::grepl
[16:22:36.178]                           restarts <- computeRestarts(cond)
[16:22:36.178]                           for (restart in restarts) {
[16:22:36.178]                             name <- restart$name
[16:22:36.178]                             if (is.null(name)) 
[16:22:36.178]                               next
[16:22:36.178]                             if (!grepl(pattern, name)) 
[16:22:36.178]                               next
[16:22:36.178]                             invokeRestart(restart)
[16:22:36.178]                             muffled <- TRUE
[16:22:36.178]                             break
[16:22:36.178]                           }
[16:22:36.178]                         }
[16:22:36.178]                       }
[16:22:36.178]                       invisible(muffled)
[16:22:36.178]                     }
[16:22:36.178]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.178]                   }
[16:22:36.178]                 }
[16:22:36.178]             }
[16:22:36.178]         }))
[16:22:36.178]     }, error = function(ex) {
[16:22:36.178]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.178]                 ...future.rng), started = ...future.startTime, 
[16:22:36.178]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.178]             version = "1.8"), class = "FutureResult")
[16:22:36.178]     }, finally = {
[16:22:36.178]         if (!identical(...future.workdir, getwd())) 
[16:22:36.178]             setwd(...future.workdir)
[16:22:36.178]         {
[16:22:36.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.178]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.178]             }
[16:22:36.178]             base::options(...future.oldOptions)
[16:22:36.178]             if (.Platform$OS.type == "windows") {
[16:22:36.178]                 old_names <- names(...future.oldEnvVars)
[16:22:36.178]                 envs <- base::Sys.getenv()
[16:22:36.178]                 names <- names(envs)
[16:22:36.178]                 common <- intersect(names, old_names)
[16:22:36.178]                 added <- setdiff(names, old_names)
[16:22:36.178]                 removed <- setdiff(old_names, names)
[16:22:36.178]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.178]                   envs[common]]
[16:22:36.178]                 NAMES <- toupper(changed)
[16:22:36.178]                 args <- list()
[16:22:36.178]                 for (kk in seq_along(NAMES)) {
[16:22:36.178]                   name <- changed[[kk]]
[16:22:36.178]                   NAME <- NAMES[[kk]]
[16:22:36.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.178]                     next
[16:22:36.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.178]                 }
[16:22:36.178]                 NAMES <- toupper(added)
[16:22:36.178]                 for (kk in seq_along(NAMES)) {
[16:22:36.178]                   name <- added[[kk]]
[16:22:36.178]                   NAME <- NAMES[[kk]]
[16:22:36.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.178]                     next
[16:22:36.178]                   args[[name]] <- ""
[16:22:36.178]                 }
[16:22:36.178]                 NAMES <- toupper(removed)
[16:22:36.178]                 for (kk in seq_along(NAMES)) {
[16:22:36.178]                   name <- removed[[kk]]
[16:22:36.178]                   NAME <- NAMES[[kk]]
[16:22:36.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.178]                     next
[16:22:36.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.178]                 }
[16:22:36.178]                 if (length(args) > 0) 
[16:22:36.178]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.178]             }
[16:22:36.178]             else {
[16:22:36.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.178]             }
[16:22:36.178]             {
[16:22:36.178]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.178]                   0L) {
[16:22:36.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.178]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.178]                   base::options(opts)
[16:22:36.178]                 }
[16:22:36.178]                 {
[16:22:36.178]                   {
[16:22:36.178]                     NULL
[16:22:36.178]                     RNGkind("Mersenne-Twister")
[16:22:36.178]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:22:36.178]                       inherits = FALSE)
[16:22:36.178]                   }
[16:22:36.178]                   options(future.plan = NULL)
[16:22:36.178]                   if (is.na(NA_character_)) 
[16:22:36.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.178]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.178]                     .init = FALSE)
[16:22:36.178]                 }
[16:22:36.178]             }
[16:22:36.178]         }
[16:22:36.178]     })
[16:22:36.178]     if (TRUE) {
[16:22:36.178]         base::sink(type = "output", split = FALSE)
[16:22:36.178]         if (TRUE) {
[16:22:36.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.178]         }
[16:22:36.178]         else {
[16:22:36.178]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.178]         }
[16:22:36.178]         base::close(...future.stdout)
[16:22:36.178]         ...future.stdout <- NULL
[16:22:36.178]     }
[16:22:36.178]     ...future.result$conditions <- ...future.conditions
[16:22:36.178]     ...future.result$finished <- base::Sys.time()
[16:22:36.178]     ...future.result
[16:22:36.178] }
[16:22:36.179] plan(): Setting new future strategy stack:
[16:22:36.179] List of future strategies:
[16:22:36.179] 1. sequential:
[16:22:36.179]    - args: function (..., envir = parent.frame())
[16:22:36.179]    - tweaked: FALSE
[16:22:36.179]    - call: NULL
[16:22:36.180] plan(): nbrOfWorkers() = 1
[16:22:36.180] plan(): Setting new future strategy stack:
[16:22:36.180] List of future strategies:
[16:22:36.180] 1. sequential:
[16:22:36.180]    - args: function (..., envir = parent.frame())
[16:22:36.180]    - tweaked: FALSE
[16:22:36.180]    - call: plan(strategy)
[16:22:36.181] plan(): nbrOfWorkers() = 1
[16:22:36.181] SequentialFuture started (and completed)
[16:22:36.181] - Launch lazy future ... done
[16:22:36.181] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[16:22:36.188] plan(): Setting new future strategy stack:
[16:22:36.188] List of future strategies:
[16:22:36.188] 1. multicore:
[16:22:36.188]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.188]    - tweaked: FALSE
[16:22:36.188]    - call: plan(strategy)
[16:22:36.191] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[16:22:36.192] getGlobalsAndPackages() ...
[16:22:36.192] Searching for globals...
[16:22:36.194] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.195] Searching for globals ... DONE
[16:22:36.195] Resolving globals: FALSE
[16:22:36.195] 
[16:22:36.195] - packages: [1] ‘utils’
[16:22:36.195] getGlobalsAndPackages() ... DONE
[16:22:36.196] run() for ‘Future’ ...
[16:22:36.196] - state: ‘created’
[16:22:36.196] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.199] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.199] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.199]   - Field: ‘label’
[16:22:36.200]   - Field: ‘local’
[16:22:36.200]   - Field: ‘owner’
[16:22:36.200]   - Field: ‘envir’
[16:22:36.200]   - Field: ‘workers’
[16:22:36.200]   - Field: ‘packages’
[16:22:36.200]   - Field: ‘gc’
[16:22:36.200]   - Field: ‘job’
[16:22:36.200]   - Field: ‘conditions’
[16:22:36.200]   - Field: ‘expr’
[16:22:36.200]   - Field: ‘uuid’
[16:22:36.201]   - Field: ‘seed’
[16:22:36.201]   - Field: ‘version’
[16:22:36.201]   - Field: ‘result’
[16:22:36.201]   - Field: ‘asynchronous’
[16:22:36.201]   - Field: ‘calls’
[16:22:36.201]   - Field: ‘globals’
[16:22:36.201]   - Field: ‘stdout’
[16:22:36.201]   - Field: ‘earlySignal’
[16:22:36.201]   - Field: ‘lazy’
[16:22:36.201]   - Field: ‘state’
[16:22:36.201] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.202] - Launch lazy future ...
[16:22:36.203] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.203] Packages needed by future strategies (n = 0): <none>
[16:22:36.203] {
[16:22:36.203]     {
[16:22:36.203]         {
[16:22:36.203]             ...future.startTime <- base::Sys.time()
[16:22:36.203]             {
[16:22:36.203]                 {
[16:22:36.203]                   {
[16:22:36.203]                     {
[16:22:36.203]                       {
[16:22:36.203]                         base::local({
[16:22:36.203]                           has_future <- base::requireNamespace("future", 
[16:22:36.203]                             quietly = TRUE)
[16:22:36.203]                           if (has_future) {
[16:22:36.203]                             ns <- base::getNamespace("future")
[16:22:36.203]                             version <- ns[[".package"]][["version"]]
[16:22:36.203]                             if (is.null(version)) 
[16:22:36.203]                               version <- utils::packageVersion("future")
[16:22:36.203]                           }
[16:22:36.203]                           else {
[16:22:36.203]                             version <- NULL
[16:22:36.203]                           }
[16:22:36.203]                           if (!has_future || version < "1.8.0") {
[16:22:36.203]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.203]                               "", base::R.version$version.string), 
[16:22:36.203]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.203]                                 base::R.version$platform, 8 * 
[16:22:36.203]                                   base::.Machine$sizeof.pointer), 
[16:22:36.203]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.203]                                 "release", "version")], collapse = " "), 
[16:22:36.203]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.203]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.203]                               info)
[16:22:36.203]                             info <- base::paste(info, collapse = "; ")
[16:22:36.203]                             if (!has_future) {
[16:22:36.203]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.203]                                 info)
[16:22:36.203]                             }
[16:22:36.203]                             else {
[16:22:36.203]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.203]                                 info, version)
[16:22:36.203]                             }
[16:22:36.203]                             base::stop(msg)
[16:22:36.203]                           }
[16:22:36.203]                         })
[16:22:36.203]                       }
[16:22:36.203]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.203]                       base::options(mc.cores = 1L)
[16:22:36.203]                     }
[16:22:36.203]                     base::local({
[16:22:36.203]                       for (pkg in "utils") {
[16:22:36.203]                         base::loadNamespace(pkg)
[16:22:36.203]                         base::library(pkg, character.only = TRUE)
[16:22:36.203]                       }
[16:22:36.203]                     })
[16:22:36.203]                   }
[16:22:36.203]                   ...future.strategy.old <- future::plan("list")
[16:22:36.203]                   options(future.plan = NULL)
[16:22:36.203]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.203]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.203]                 }
[16:22:36.203]                 ...future.workdir <- getwd()
[16:22:36.203]             }
[16:22:36.203]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.203]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.203]         }
[16:22:36.203]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.203]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.203]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.203]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.203]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.203]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.203]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.203]             base::names(...future.oldOptions))
[16:22:36.203]     }
[16:22:36.203]     if (FALSE) {
[16:22:36.203]     }
[16:22:36.203]     else {
[16:22:36.203]         if (TRUE) {
[16:22:36.203]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.203]                 open = "w")
[16:22:36.203]         }
[16:22:36.203]         else {
[16:22:36.203]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.203]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.203]         }
[16:22:36.203]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.203]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.203]             base::sink(type = "output", split = FALSE)
[16:22:36.203]             base::close(...future.stdout)
[16:22:36.203]         }, add = TRUE)
[16:22:36.203]     }
[16:22:36.203]     ...future.frame <- base::sys.nframe()
[16:22:36.203]     ...future.conditions <- base::list()
[16:22:36.203]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.203]     if (FALSE) {
[16:22:36.203]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.203]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.203]     }
[16:22:36.203]     ...future.result <- base::tryCatch({
[16:22:36.203]         base::withCallingHandlers({
[16:22:36.203]             ...future.value <- base::withVisible(base::local({
[16:22:36.203]                 withCallingHandlers({
[16:22:36.203]                   {
[16:22:36.203]                     print(1:50)
[16:22:36.203]                     str(1:50)
[16:22:36.203]                     cat(letters, sep = "-")
[16:22:36.203]                     cat(1:6, collapse = "\n")
[16:22:36.203]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.203]                     42L
[16:22:36.203]                   }
[16:22:36.203]                 }, immediateCondition = function(cond) {
[16:22:36.203]                   save_rds <- function (object, pathname, ...) 
[16:22:36.203]                   {
[16:22:36.203]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.203]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.203]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.203]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.203]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.203]                         fi_tmp[["mtime"]])
[16:22:36.203]                     }
[16:22:36.203]                     tryCatch({
[16:22:36.203]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.203]                     }, error = function(ex) {
[16:22:36.203]                       msg <- conditionMessage(ex)
[16:22:36.203]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.203]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.203]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.203]                         fi_tmp[["mtime"]], msg)
[16:22:36.203]                       ex$message <- msg
[16:22:36.203]                       stop(ex)
[16:22:36.203]                     })
[16:22:36.203]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.203]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.203]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.203]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.203]                       fi <- file.info(pathname)
[16:22:36.203]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.203]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.203]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.203]                         fi[["size"]], fi[["mtime"]])
[16:22:36.203]                       stop(msg)
[16:22:36.203]                     }
[16:22:36.203]                     invisible(pathname)
[16:22:36.203]                   }
[16:22:36.203]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.203]                     rootPath = tempdir()) 
[16:22:36.203]                   {
[16:22:36.203]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.203]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.203]                       tmpdir = path, fileext = ".rds")
[16:22:36.203]                     save_rds(obj, file)
[16:22:36.203]                   }
[16:22:36.203]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.203]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.203]                   {
[16:22:36.203]                     inherits <- base::inherits
[16:22:36.203]                     invokeRestart <- base::invokeRestart
[16:22:36.203]                     is.null <- base::is.null
[16:22:36.203]                     muffled <- FALSE
[16:22:36.203]                     if (inherits(cond, "message")) {
[16:22:36.203]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.203]                       if (muffled) 
[16:22:36.203]                         invokeRestart("muffleMessage")
[16:22:36.203]                     }
[16:22:36.203]                     else if (inherits(cond, "warning")) {
[16:22:36.203]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.203]                       if (muffled) 
[16:22:36.203]                         invokeRestart("muffleWarning")
[16:22:36.203]                     }
[16:22:36.203]                     else if (inherits(cond, "condition")) {
[16:22:36.203]                       if (!is.null(pattern)) {
[16:22:36.203]                         computeRestarts <- base::computeRestarts
[16:22:36.203]                         grepl <- base::grepl
[16:22:36.203]                         restarts <- computeRestarts(cond)
[16:22:36.203]                         for (restart in restarts) {
[16:22:36.203]                           name <- restart$name
[16:22:36.203]                           if (is.null(name)) 
[16:22:36.203]                             next
[16:22:36.203]                           if (!grepl(pattern, name)) 
[16:22:36.203]                             next
[16:22:36.203]                           invokeRestart(restart)
[16:22:36.203]                           muffled <- TRUE
[16:22:36.203]                           break
[16:22:36.203]                         }
[16:22:36.203]                       }
[16:22:36.203]                     }
[16:22:36.203]                     invisible(muffled)
[16:22:36.203]                   }
[16:22:36.203]                   muffleCondition(cond)
[16:22:36.203]                 })
[16:22:36.203]             }))
[16:22:36.203]             future::FutureResult(value = ...future.value$value, 
[16:22:36.203]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.203]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.203]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.203]                     ...future.globalenv.names))
[16:22:36.203]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.203]         }, condition = base::local({
[16:22:36.203]             c <- base::c
[16:22:36.203]             inherits <- base::inherits
[16:22:36.203]             invokeRestart <- base::invokeRestart
[16:22:36.203]             length <- base::length
[16:22:36.203]             list <- base::list
[16:22:36.203]             seq.int <- base::seq.int
[16:22:36.203]             signalCondition <- base::signalCondition
[16:22:36.203]             sys.calls <- base::sys.calls
[16:22:36.203]             `[[` <- base::`[[`
[16:22:36.203]             `+` <- base::`+`
[16:22:36.203]             `<<-` <- base::`<<-`
[16:22:36.203]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.203]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.203]                   3L)]
[16:22:36.203]             }
[16:22:36.203]             function(cond) {
[16:22:36.203]                 is_error <- inherits(cond, "error")
[16:22:36.203]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.203]                   NULL)
[16:22:36.203]                 if (is_error) {
[16:22:36.203]                   sessionInformation <- function() {
[16:22:36.203]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.203]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.203]                       search = base::search(), system = base::Sys.info())
[16:22:36.203]                   }
[16:22:36.203]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.203]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.203]                     cond$call), session = sessionInformation(), 
[16:22:36.203]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.203]                   signalCondition(cond)
[16:22:36.203]                 }
[16:22:36.203]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.203]                 "immediateCondition"))) {
[16:22:36.203]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.203]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.203]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.203]                   if (TRUE && !signal) {
[16:22:36.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.203]                     {
[16:22:36.203]                       inherits <- base::inherits
[16:22:36.203]                       invokeRestart <- base::invokeRestart
[16:22:36.203]                       is.null <- base::is.null
[16:22:36.203]                       muffled <- FALSE
[16:22:36.203]                       if (inherits(cond, "message")) {
[16:22:36.203]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.203]                         if (muffled) 
[16:22:36.203]                           invokeRestart("muffleMessage")
[16:22:36.203]                       }
[16:22:36.203]                       else if (inherits(cond, "warning")) {
[16:22:36.203]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.203]                         if (muffled) 
[16:22:36.203]                           invokeRestart("muffleWarning")
[16:22:36.203]                       }
[16:22:36.203]                       else if (inherits(cond, "condition")) {
[16:22:36.203]                         if (!is.null(pattern)) {
[16:22:36.203]                           computeRestarts <- base::computeRestarts
[16:22:36.203]                           grepl <- base::grepl
[16:22:36.203]                           restarts <- computeRestarts(cond)
[16:22:36.203]                           for (restart in restarts) {
[16:22:36.203]                             name <- restart$name
[16:22:36.203]                             if (is.null(name)) 
[16:22:36.203]                               next
[16:22:36.203]                             if (!grepl(pattern, name)) 
[16:22:36.203]                               next
[16:22:36.203]                             invokeRestart(restart)
[16:22:36.203]                             muffled <- TRUE
[16:22:36.203]                             break
[16:22:36.203]                           }
[16:22:36.203]                         }
[16:22:36.203]                       }
[16:22:36.203]                       invisible(muffled)
[16:22:36.203]                     }
[16:22:36.203]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.203]                   }
[16:22:36.203]                 }
[16:22:36.203]                 else {
[16:22:36.203]                   if (TRUE) {
[16:22:36.203]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.203]                     {
[16:22:36.203]                       inherits <- base::inherits
[16:22:36.203]                       invokeRestart <- base::invokeRestart
[16:22:36.203]                       is.null <- base::is.null
[16:22:36.203]                       muffled <- FALSE
[16:22:36.203]                       if (inherits(cond, "message")) {
[16:22:36.203]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.203]                         if (muffled) 
[16:22:36.203]                           invokeRestart("muffleMessage")
[16:22:36.203]                       }
[16:22:36.203]                       else if (inherits(cond, "warning")) {
[16:22:36.203]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.203]                         if (muffled) 
[16:22:36.203]                           invokeRestart("muffleWarning")
[16:22:36.203]                       }
[16:22:36.203]                       else if (inherits(cond, "condition")) {
[16:22:36.203]                         if (!is.null(pattern)) {
[16:22:36.203]                           computeRestarts <- base::computeRestarts
[16:22:36.203]                           grepl <- base::grepl
[16:22:36.203]                           restarts <- computeRestarts(cond)
[16:22:36.203]                           for (restart in restarts) {
[16:22:36.203]                             name <- restart$name
[16:22:36.203]                             if (is.null(name)) 
[16:22:36.203]                               next
[16:22:36.203]                             if (!grepl(pattern, name)) 
[16:22:36.203]                               next
[16:22:36.203]                             invokeRestart(restart)
[16:22:36.203]                             muffled <- TRUE
[16:22:36.203]                             break
[16:22:36.203]                           }
[16:22:36.203]                         }
[16:22:36.203]                       }
[16:22:36.203]                       invisible(muffled)
[16:22:36.203]                     }
[16:22:36.203]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.203]                   }
[16:22:36.203]                 }
[16:22:36.203]             }
[16:22:36.203]         }))
[16:22:36.203]     }, error = function(ex) {
[16:22:36.203]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.203]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.203]                 ...future.rng), started = ...future.startTime, 
[16:22:36.203]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.203]             version = "1.8"), class = "FutureResult")
[16:22:36.203]     }, finally = {
[16:22:36.203]         if (!identical(...future.workdir, getwd())) 
[16:22:36.203]             setwd(...future.workdir)
[16:22:36.203]         {
[16:22:36.203]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.203]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.203]             }
[16:22:36.203]             base::options(...future.oldOptions)
[16:22:36.203]             if (.Platform$OS.type == "windows") {
[16:22:36.203]                 old_names <- names(...future.oldEnvVars)
[16:22:36.203]                 envs <- base::Sys.getenv()
[16:22:36.203]                 names <- names(envs)
[16:22:36.203]                 common <- intersect(names, old_names)
[16:22:36.203]                 added <- setdiff(names, old_names)
[16:22:36.203]                 removed <- setdiff(old_names, names)
[16:22:36.203]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.203]                   envs[common]]
[16:22:36.203]                 NAMES <- toupper(changed)
[16:22:36.203]                 args <- list()
[16:22:36.203]                 for (kk in seq_along(NAMES)) {
[16:22:36.203]                   name <- changed[[kk]]
[16:22:36.203]                   NAME <- NAMES[[kk]]
[16:22:36.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.203]                     next
[16:22:36.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.203]                 }
[16:22:36.203]                 NAMES <- toupper(added)
[16:22:36.203]                 for (kk in seq_along(NAMES)) {
[16:22:36.203]                   name <- added[[kk]]
[16:22:36.203]                   NAME <- NAMES[[kk]]
[16:22:36.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.203]                     next
[16:22:36.203]                   args[[name]] <- ""
[16:22:36.203]                 }
[16:22:36.203]                 NAMES <- toupper(removed)
[16:22:36.203]                 for (kk in seq_along(NAMES)) {
[16:22:36.203]                   name <- removed[[kk]]
[16:22:36.203]                   NAME <- NAMES[[kk]]
[16:22:36.203]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.203]                     next
[16:22:36.203]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.203]                 }
[16:22:36.203]                 if (length(args) > 0) 
[16:22:36.203]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.203]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.203]             }
[16:22:36.203]             else {
[16:22:36.203]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.203]             }
[16:22:36.203]             {
[16:22:36.203]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.203]                   0L) {
[16:22:36.203]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.203]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.203]                   base::options(opts)
[16:22:36.203]                 }
[16:22:36.203]                 {
[16:22:36.203]                   {
[16:22:36.203]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.203]                     NULL
[16:22:36.203]                   }
[16:22:36.203]                   options(future.plan = NULL)
[16:22:36.203]                   if (is.na(NA_character_)) 
[16:22:36.203]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.203]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.203]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.203]                     .init = FALSE)
[16:22:36.203]                 }
[16:22:36.203]             }
[16:22:36.203]         }
[16:22:36.203]     })
[16:22:36.203]     if (TRUE) {
[16:22:36.203]         base::sink(type = "output", split = FALSE)
[16:22:36.203]         if (TRUE) {
[16:22:36.203]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.203]         }
[16:22:36.203]         else {
[16:22:36.203]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.203]         }
[16:22:36.203]         base::close(...future.stdout)
[16:22:36.203]         ...future.stdout <- NULL
[16:22:36.203]     }
[16:22:36.203]     ...future.result$conditions <- ...future.conditions
[16:22:36.203]     ...future.result$finished <- base::Sys.time()
[16:22:36.203]     ...future.result
[16:22:36.203] }
[16:22:36.205] requestCore(): workers = 2
[16:22:36.208] MulticoreFuture started
[16:22:36.209] - Launch lazy future ... done
[16:22:36.209] run() for ‘MulticoreFuture’ ... done
[16:22:36.209] plan(): Setting new future strategy stack:
[16:22:36.210] result() for MulticoreFuture ...
[16:22:36.210] List of future strategies:
[16:22:36.210] 1. sequential:
[16:22:36.210]    - args: function (..., envir = parent.frame())
[16:22:36.210]    - tweaked: FALSE
[16:22:36.210]    - call: NULL
[16:22:36.210] plan(): nbrOfWorkers() = 1
[16:22:36.214] plan(): Setting new future strategy stack:
[16:22:36.214] List of future strategies:
[16:22:36.214] 1. multicore:
[16:22:36.214]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.214]    - tweaked: FALSE
[16:22:36.214]    - call: plan(strategy)
[16:22:36.219] plan(): nbrOfWorkers() = 2
[16:22:36.223] result() for MulticoreFuture ...
[16:22:36.223] result() for MulticoreFuture ... done
[16:22:36.223] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "8ecd08f5-7566-1d00-70aa-f10873d4edff"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89875
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:36"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:36.236] result() for MulticoreFuture ...
[16:22:36.236] result() for MulticoreFuture ... done
[16:22:36.236] result() for MulticoreFuture ...
[16:22:36.236] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.01047993 secs (started 2025-01-06 16:22:36.208901)
version: 1.8
[16:22:36.237] getGlobalsAndPackages() ...
[16:22:36.237] Searching for globals...
[16:22:36.240] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.241] Searching for globals ... DONE
[16:22:36.241] Resolving globals: FALSE
[16:22:36.241] 
[16:22:36.241] - packages: [1] ‘utils’
[16:22:36.241] getGlobalsAndPackages() ... DONE
[16:22:36.242] run() for ‘Future’ ...
[16:22:36.242] - state: ‘created’
[16:22:36.242] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.246] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.246] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.246]   - Field: ‘label’
[16:22:36.246]   - Field: ‘local’
[16:22:36.246]   - Field: ‘owner’
[16:22:36.246]   - Field: ‘envir’
[16:22:36.247]   - Field: ‘workers’
[16:22:36.247]   - Field: ‘packages’
[16:22:36.247]   - Field: ‘gc’
[16:22:36.247]   - Field: ‘job’
[16:22:36.247]   - Field: ‘conditions’
[16:22:36.247]   - Field: ‘expr’
[16:22:36.247]   - Field: ‘uuid’
[16:22:36.247]   - Field: ‘seed’
[16:22:36.247]   - Field: ‘version’
[16:22:36.247]   - Field: ‘result’
[16:22:36.248]   - Field: ‘asynchronous’
[16:22:36.248]   - Field: ‘calls’
[16:22:36.248]   - Field: ‘globals’
[16:22:36.248]   - Field: ‘stdout’
[16:22:36.248]   - Field: ‘earlySignal’
[16:22:36.248]   - Field: ‘lazy’
[16:22:36.248]   - Field: ‘state’
[16:22:36.248] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.249] - Launch lazy future ...
[16:22:36.249] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.249] Packages needed by future strategies (n = 0): <none>
[16:22:36.249] {
[16:22:36.249]     {
[16:22:36.249]         {
[16:22:36.249]             ...future.startTime <- base::Sys.time()
[16:22:36.249]             {
[16:22:36.249]                 {
[16:22:36.249]                   {
[16:22:36.249]                     {
[16:22:36.249]                       {
[16:22:36.249]                         base::local({
[16:22:36.249]                           has_future <- base::requireNamespace("future", 
[16:22:36.249]                             quietly = TRUE)
[16:22:36.249]                           if (has_future) {
[16:22:36.249]                             ns <- base::getNamespace("future")
[16:22:36.249]                             version <- ns[[".package"]][["version"]]
[16:22:36.249]                             if (is.null(version)) 
[16:22:36.249]                               version <- utils::packageVersion("future")
[16:22:36.249]                           }
[16:22:36.249]                           else {
[16:22:36.249]                             version <- NULL
[16:22:36.249]                           }
[16:22:36.249]                           if (!has_future || version < "1.8.0") {
[16:22:36.249]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.249]                               "", base::R.version$version.string), 
[16:22:36.249]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.249]                                 base::R.version$platform, 8 * 
[16:22:36.249]                                   base::.Machine$sizeof.pointer), 
[16:22:36.249]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.249]                                 "release", "version")], collapse = " "), 
[16:22:36.249]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.249]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.249]                               info)
[16:22:36.249]                             info <- base::paste(info, collapse = "; ")
[16:22:36.249]                             if (!has_future) {
[16:22:36.249]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.249]                                 info)
[16:22:36.249]                             }
[16:22:36.249]                             else {
[16:22:36.249]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.249]                                 info, version)
[16:22:36.249]                             }
[16:22:36.249]                             base::stop(msg)
[16:22:36.249]                           }
[16:22:36.249]                         })
[16:22:36.249]                       }
[16:22:36.249]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.249]                       base::options(mc.cores = 1L)
[16:22:36.249]                     }
[16:22:36.249]                     base::local({
[16:22:36.249]                       for (pkg in "utils") {
[16:22:36.249]                         base::loadNamespace(pkg)
[16:22:36.249]                         base::library(pkg, character.only = TRUE)
[16:22:36.249]                       }
[16:22:36.249]                     })
[16:22:36.249]                   }
[16:22:36.249]                   ...future.strategy.old <- future::plan("list")
[16:22:36.249]                   options(future.plan = NULL)
[16:22:36.249]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.249]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.249]                 }
[16:22:36.249]                 ...future.workdir <- getwd()
[16:22:36.249]             }
[16:22:36.249]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.249]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.249]         }
[16:22:36.249]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.249]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.249]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.249]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.249]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.249]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.249]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.249]             base::names(...future.oldOptions))
[16:22:36.249]     }
[16:22:36.249]     if (FALSE) {
[16:22:36.249]     }
[16:22:36.249]     else {
[16:22:36.249]         if (TRUE) {
[16:22:36.249]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.249]                 open = "w")
[16:22:36.249]         }
[16:22:36.249]         else {
[16:22:36.249]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.249]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.249]         }
[16:22:36.249]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.249]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.249]             base::sink(type = "output", split = FALSE)
[16:22:36.249]             base::close(...future.stdout)
[16:22:36.249]         }, add = TRUE)
[16:22:36.249]     }
[16:22:36.249]     ...future.frame <- base::sys.nframe()
[16:22:36.249]     ...future.conditions <- base::list()
[16:22:36.249]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.249]     if (FALSE) {
[16:22:36.249]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.249]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.249]     }
[16:22:36.249]     ...future.result <- base::tryCatch({
[16:22:36.249]         base::withCallingHandlers({
[16:22:36.249]             ...future.value <- base::withVisible(base::local({
[16:22:36.249]                 withCallingHandlers({
[16:22:36.249]                   {
[16:22:36.249]                     print(1:50)
[16:22:36.249]                     str(1:50)
[16:22:36.249]                     cat(letters, sep = "-")
[16:22:36.249]                     cat(1:6, collapse = "\n")
[16:22:36.249]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.249]                     42L
[16:22:36.249]                   }
[16:22:36.249]                 }, immediateCondition = function(cond) {
[16:22:36.249]                   save_rds <- function (object, pathname, ...) 
[16:22:36.249]                   {
[16:22:36.249]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.249]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.249]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.249]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.249]                         fi_tmp[["mtime"]])
[16:22:36.249]                     }
[16:22:36.249]                     tryCatch({
[16:22:36.249]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.249]                     }, error = function(ex) {
[16:22:36.249]                       msg <- conditionMessage(ex)
[16:22:36.249]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.249]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.249]                         fi_tmp[["mtime"]], msg)
[16:22:36.249]                       ex$message <- msg
[16:22:36.249]                       stop(ex)
[16:22:36.249]                     })
[16:22:36.249]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.249]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.249]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.249]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.249]                       fi <- file.info(pathname)
[16:22:36.249]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.249]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.249]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.249]                         fi[["size"]], fi[["mtime"]])
[16:22:36.249]                       stop(msg)
[16:22:36.249]                     }
[16:22:36.249]                     invisible(pathname)
[16:22:36.249]                   }
[16:22:36.249]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.249]                     rootPath = tempdir()) 
[16:22:36.249]                   {
[16:22:36.249]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.249]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.249]                       tmpdir = path, fileext = ".rds")
[16:22:36.249]                     save_rds(obj, file)
[16:22:36.249]                   }
[16:22:36.249]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.249]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.249]                   {
[16:22:36.249]                     inherits <- base::inherits
[16:22:36.249]                     invokeRestart <- base::invokeRestart
[16:22:36.249]                     is.null <- base::is.null
[16:22:36.249]                     muffled <- FALSE
[16:22:36.249]                     if (inherits(cond, "message")) {
[16:22:36.249]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.249]                       if (muffled) 
[16:22:36.249]                         invokeRestart("muffleMessage")
[16:22:36.249]                     }
[16:22:36.249]                     else if (inherits(cond, "warning")) {
[16:22:36.249]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.249]                       if (muffled) 
[16:22:36.249]                         invokeRestart("muffleWarning")
[16:22:36.249]                     }
[16:22:36.249]                     else if (inherits(cond, "condition")) {
[16:22:36.249]                       if (!is.null(pattern)) {
[16:22:36.249]                         computeRestarts <- base::computeRestarts
[16:22:36.249]                         grepl <- base::grepl
[16:22:36.249]                         restarts <- computeRestarts(cond)
[16:22:36.249]                         for (restart in restarts) {
[16:22:36.249]                           name <- restart$name
[16:22:36.249]                           if (is.null(name)) 
[16:22:36.249]                             next
[16:22:36.249]                           if (!grepl(pattern, name)) 
[16:22:36.249]                             next
[16:22:36.249]                           invokeRestart(restart)
[16:22:36.249]                           muffled <- TRUE
[16:22:36.249]                           break
[16:22:36.249]                         }
[16:22:36.249]                       }
[16:22:36.249]                     }
[16:22:36.249]                     invisible(muffled)
[16:22:36.249]                   }
[16:22:36.249]                   muffleCondition(cond)
[16:22:36.249]                 })
[16:22:36.249]             }))
[16:22:36.249]             future::FutureResult(value = ...future.value$value, 
[16:22:36.249]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.249]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.249]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.249]                     ...future.globalenv.names))
[16:22:36.249]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.249]         }, condition = base::local({
[16:22:36.249]             c <- base::c
[16:22:36.249]             inherits <- base::inherits
[16:22:36.249]             invokeRestart <- base::invokeRestart
[16:22:36.249]             length <- base::length
[16:22:36.249]             list <- base::list
[16:22:36.249]             seq.int <- base::seq.int
[16:22:36.249]             signalCondition <- base::signalCondition
[16:22:36.249]             sys.calls <- base::sys.calls
[16:22:36.249]             `[[` <- base::`[[`
[16:22:36.249]             `+` <- base::`+`
[16:22:36.249]             `<<-` <- base::`<<-`
[16:22:36.249]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.249]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.249]                   3L)]
[16:22:36.249]             }
[16:22:36.249]             function(cond) {
[16:22:36.249]                 is_error <- inherits(cond, "error")
[16:22:36.249]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.249]                   NULL)
[16:22:36.249]                 if (is_error) {
[16:22:36.249]                   sessionInformation <- function() {
[16:22:36.249]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.249]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.249]                       search = base::search(), system = base::Sys.info())
[16:22:36.249]                   }
[16:22:36.249]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.249]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.249]                     cond$call), session = sessionInformation(), 
[16:22:36.249]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.249]                   signalCondition(cond)
[16:22:36.249]                 }
[16:22:36.249]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.249]                 "immediateCondition"))) {
[16:22:36.249]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.249]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.249]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.249]                   if (TRUE && !signal) {
[16:22:36.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.249]                     {
[16:22:36.249]                       inherits <- base::inherits
[16:22:36.249]                       invokeRestart <- base::invokeRestart
[16:22:36.249]                       is.null <- base::is.null
[16:22:36.249]                       muffled <- FALSE
[16:22:36.249]                       if (inherits(cond, "message")) {
[16:22:36.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.249]                         if (muffled) 
[16:22:36.249]                           invokeRestart("muffleMessage")
[16:22:36.249]                       }
[16:22:36.249]                       else if (inherits(cond, "warning")) {
[16:22:36.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.249]                         if (muffled) 
[16:22:36.249]                           invokeRestart("muffleWarning")
[16:22:36.249]                       }
[16:22:36.249]                       else if (inherits(cond, "condition")) {
[16:22:36.249]                         if (!is.null(pattern)) {
[16:22:36.249]                           computeRestarts <- base::computeRestarts
[16:22:36.249]                           grepl <- base::grepl
[16:22:36.249]                           restarts <- computeRestarts(cond)
[16:22:36.249]                           for (restart in restarts) {
[16:22:36.249]                             name <- restart$name
[16:22:36.249]                             if (is.null(name)) 
[16:22:36.249]                               next
[16:22:36.249]                             if (!grepl(pattern, name)) 
[16:22:36.249]                               next
[16:22:36.249]                             invokeRestart(restart)
[16:22:36.249]                             muffled <- TRUE
[16:22:36.249]                             break
[16:22:36.249]                           }
[16:22:36.249]                         }
[16:22:36.249]                       }
[16:22:36.249]                       invisible(muffled)
[16:22:36.249]                     }
[16:22:36.249]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.249]                   }
[16:22:36.249]                 }
[16:22:36.249]                 else {
[16:22:36.249]                   if (TRUE) {
[16:22:36.249]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.249]                     {
[16:22:36.249]                       inherits <- base::inherits
[16:22:36.249]                       invokeRestart <- base::invokeRestart
[16:22:36.249]                       is.null <- base::is.null
[16:22:36.249]                       muffled <- FALSE
[16:22:36.249]                       if (inherits(cond, "message")) {
[16:22:36.249]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.249]                         if (muffled) 
[16:22:36.249]                           invokeRestart("muffleMessage")
[16:22:36.249]                       }
[16:22:36.249]                       else if (inherits(cond, "warning")) {
[16:22:36.249]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.249]                         if (muffled) 
[16:22:36.249]                           invokeRestart("muffleWarning")
[16:22:36.249]                       }
[16:22:36.249]                       else if (inherits(cond, "condition")) {
[16:22:36.249]                         if (!is.null(pattern)) {
[16:22:36.249]                           computeRestarts <- base::computeRestarts
[16:22:36.249]                           grepl <- base::grepl
[16:22:36.249]                           restarts <- computeRestarts(cond)
[16:22:36.249]                           for (restart in restarts) {
[16:22:36.249]                             name <- restart$name
[16:22:36.249]                             if (is.null(name)) 
[16:22:36.249]                               next
[16:22:36.249]                             if (!grepl(pattern, name)) 
[16:22:36.249]                               next
[16:22:36.249]                             invokeRestart(restart)
[16:22:36.249]                             muffled <- TRUE
[16:22:36.249]                             break
[16:22:36.249]                           }
[16:22:36.249]                         }
[16:22:36.249]                       }
[16:22:36.249]                       invisible(muffled)
[16:22:36.249]                     }
[16:22:36.249]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.249]                   }
[16:22:36.249]                 }
[16:22:36.249]             }
[16:22:36.249]         }))
[16:22:36.249]     }, error = function(ex) {
[16:22:36.249]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.249]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.249]                 ...future.rng), started = ...future.startTime, 
[16:22:36.249]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.249]             version = "1.8"), class = "FutureResult")
[16:22:36.249]     }, finally = {
[16:22:36.249]         if (!identical(...future.workdir, getwd())) 
[16:22:36.249]             setwd(...future.workdir)
[16:22:36.249]         {
[16:22:36.249]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.249]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.249]             }
[16:22:36.249]             base::options(...future.oldOptions)
[16:22:36.249]             if (.Platform$OS.type == "windows") {
[16:22:36.249]                 old_names <- names(...future.oldEnvVars)
[16:22:36.249]                 envs <- base::Sys.getenv()
[16:22:36.249]                 names <- names(envs)
[16:22:36.249]                 common <- intersect(names, old_names)
[16:22:36.249]                 added <- setdiff(names, old_names)
[16:22:36.249]                 removed <- setdiff(old_names, names)
[16:22:36.249]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.249]                   envs[common]]
[16:22:36.249]                 NAMES <- toupper(changed)
[16:22:36.249]                 args <- list()
[16:22:36.249]                 for (kk in seq_along(NAMES)) {
[16:22:36.249]                   name <- changed[[kk]]
[16:22:36.249]                   NAME <- NAMES[[kk]]
[16:22:36.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.249]                     next
[16:22:36.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.249]                 }
[16:22:36.249]                 NAMES <- toupper(added)
[16:22:36.249]                 for (kk in seq_along(NAMES)) {
[16:22:36.249]                   name <- added[[kk]]
[16:22:36.249]                   NAME <- NAMES[[kk]]
[16:22:36.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.249]                     next
[16:22:36.249]                   args[[name]] <- ""
[16:22:36.249]                 }
[16:22:36.249]                 NAMES <- toupper(removed)
[16:22:36.249]                 for (kk in seq_along(NAMES)) {
[16:22:36.249]                   name <- removed[[kk]]
[16:22:36.249]                   NAME <- NAMES[[kk]]
[16:22:36.249]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.249]                     next
[16:22:36.249]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.249]                 }
[16:22:36.249]                 if (length(args) > 0) 
[16:22:36.249]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.249]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.249]             }
[16:22:36.249]             else {
[16:22:36.249]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.249]             }
[16:22:36.249]             {
[16:22:36.249]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.249]                   0L) {
[16:22:36.249]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.249]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.249]                   base::options(opts)
[16:22:36.249]                 }
[16:22:36.249]                 {
[16:22:36.249]                   {
[16:22:36.249]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.249]                     NULL
[16:22:36.249]                   }
[16:22:36.249]                   options(future.plan = NULL)
[16:22:36.249]                   if (is.na(NA_character_)) 
[16:22:36.249]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.249]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.249]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.249]                     .init = FALSE)
[16:22:36.249]                 }
[16:22:36.249]             }
[16:22:36.249]         }
[16:22:36.249]     })
[16:22:36.249]     if (TRUE) {
[16:22:36.249]         base::sink(type = "output", split = FALSE)
[16:22:36.249]         if (TRUE) {
[16:22:36.249]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.249]         }
[16:22:36.249]         else {
[16:22:36.249]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.249]         }
[16:22:36.249]         base::close(...future.stdout)
[16:22:36.249]         ...future.stdout <- NULL
[16:22:36.249]     }
[16:22:36.249]     ...future.result$conditions <- ...future.conditions
[16:22:36.249]     ...future.result$finished <- base::Sys.time()
[16:22:36.249]     ...future.result
[16:22:36.249] }
[16:22:36.252] requestCore(): workers = 2
[16:22:36.254] MulticoreFuture started
[16:22:36.254] - Launch lazy future ... done
[16:22:36.254] run() for ‘MulticoreFuture’ ... done
[16:22:36.255] result() for MulticoreFuture ...
[16:22:36.255] plan(): Setting new future strategy stack:
[16:22:36.255] List of future strategies:
[16:22:36.255] 1. sequential:
[16:22:36.255]    - args: function (..., envir = parent.frame())
[16:22:36.255]    - tweaked: FALSE
[16:22:36.255]    - call: NULL
[16:22:36.256] plan(): nbrOfWorkers() = 1
[16:22:36.260] plan(): Setting new future strategy stack:
[16:22:36.260] List of future strategies:
[16:22:36.260] 1. multicore:
[16:22:36.260]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.260]    - tweaked: FALSE
[16:22:36.260]    - call: plan(strategy)
[16:22:36.265] plan(): nbrOfWorkers() = 2
[16:22:36.265] result() for MulticoreFuture ...
[16:22:36.266] result() for MulticoreFuture ... done
[16:22:36.266] result() for MulticoreFuture ... done
[16:22:36.266] result() for MulticoreFuture ...
[16:22:36.266] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.267] getGlobalsAndPackages() ...
[16:22:36.267] Searching for globals...
[16:22:36.267] - globals found: [1] ‘print’
[16:22:36.268] Searching for globals ... DONE
[16:22:36.268] Resolving globals: FALSE
[16:22:36.268] 
[16:22:36.268] 
[16:22:36.268] getGlobalsAndPackages() ... DONE
[16:22:36.269] run() for ‘Future’ ...
[16:22:36.269] - state: ‘created’
[16:22:36.269] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.273] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.273] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.273]   - Field: ‘label’
[16:22:36.273]   - Field: ‘local’
[16:22:36.273]   - Field: ‘owner’
[16:22:36.273]   - Field: ‘envir’
[16:22:36.274]   - Field: ‘workers’
[16:22:36.274]   - Field: ‘packages’
[16:22:36.274]   - Field: ‘gc’
[16:22:36.274]   - Field: ‘job’
[16:22:36.274]   - Field: ‘conditions’
[16:22:36.274]   - Field: ‘expr’
[16:22:36.274]   - Field: ‘uuid’
[16:22:36.274]   - Field: ‘seed’
[16:22:36.275]   - Field: ‘version’
[16:22:36.275]   - Field: ‘result’
[16:22:36.275]   - Field: ‘asynchronous’
[16:22:36.275]   - Field: ‘calls’
[16:22:36.275]   - Field: ‘globals’
[16:22:36.275]   - Field: ‘stdout’
[16:22:36.275]   - Field: ‘earlySignal’
[16:22:36.275]   - Field: ‘lazy’
[16:22:36.275]   - Field: ‘state’
[16:22:36.276] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.276] - Launch lazy future ...
[16:22:36.276] Packages needed by the future expression (n = 0): <none>
[16:22:36.276] Packages needed by future strategies (n = 0): <none>
[16:22:36.277] {
[16:22:36.277]     {
[16:22:36.277]         {
[16:22:36.277]             ...future.startTime <- base::Sys.time()
[16:22:36.277]             {
[16:22:36.277]                 {
[16:22:36.277]                   {
[16:22:36.277]                     {
[16:22:36.277]                       base::local({
[16:22:36.277]                         has_future <- base::requireNamespace("future", 
[16:22:36.277]                           quietly = TRUE)
[16:22:36.277]                         if (has_future) {
[16:22:36.277]                           ns <- base::getNamespace("future")
[16:22:36.277]                           version <- ns[[".package"]][["version"]]
[16:22:36.277]                           if (is.null(version)) 
[16:22:36.277]                             version <- utils::packageVersion("future")
[16:22:36.277]                         }
[16:22:36.277]                         else {
[16:22:36.277]                           version <- NULL
[16:22:36.277]                         }
[16:22:36.277]                         if (!has_future || version < "1.8.0") {
[16:22:36.277]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.277]                             "", base::R.version$version.string), 
[16:22:36.277]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.277]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.277]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.277]                               "release", "version")], collapse = " "), 
[16:22:36.277]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.277]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.277]                             info)
[16:22:36.277]                           info <- base::paste(info, collapse = "; ")
[16:22:36.277]                           if (!has_future) {
[16:22:36.277]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.277]                               info)
[16:22:36.277]                           }
[16:22:36.277]                           else {
[16:22:36.277]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.277]                               info, version)
[16:22:36.277]                           }
[16:22:36.277]                           base::stop(msg)
[16:22:36.277]                         }
[16:22:36.277]                       })
[16:22:36.277]                     }
[16:22:36.277]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.277]                     base::options(mc.cores = 1L)
[16:22:36.277]                   }
[16:22:36.277]                   ...future.strategy.old <- future::plan("list")
[16:22:36.277]                   options(future.plan = NULL)
[16:22:36.277]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.277]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.277]                 }
[16:22:36.277]                 ...future.workdir <- getwd()
[16:22:36.277]             }
[16:22:36.277]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.277]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.277]         }
[16:22:36.277]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.277]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.277]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.277]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.277]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.277]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.277]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.277]             base::names(...future.oldOptions))
[16:22:36.277]     }
[16:22:36.277]     if (FALSE) {
[16:22:36.277]     }
[16:22:36.277]     else {
[16:22:36.277]         if (TRUE) {
[16:22:36.277]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.277]                 open = "w")
[16:22:36.277]         }
[16:22:36.277]         else {
[16:22:36.277]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.277]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.277]         }
[16:22:36.277]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.277]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.277]             base::sink(type = "output", split = FALSE)
[16:22:36.277]             base::close(...future.stdout)
[16:22:36.277]         }, add = TRUE)
[16:22:36.277]     }
[16:22:36.277]     ...future.frame <- base::sys.nframe()
[16:22:36.277]     ...future.conditions <- base::list()
[16:22:36.277]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.277]     if (FALSE) {
[16:22:36.277]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.277]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.277]     }
[16:22:36.277]     ...future.result <- base::tryCatch({
[16:22:36.277]         base::withCallingHandlers({
[16:22:36.277]             ...future.value <- base::withVisible(base::local({
[16:22:36.277]                 withCallingHandlers({
[16:22:36.277]                   print(42)
[16:22:36.277]                 }, immediateCondition = function(cond) {
[16:22:36.277]                   save_rds <- function (object, pathname, ...) 
[16:22:36.277]                   {
[16:22:36.277]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.277]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.277]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.277]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.277]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.277]                         fi_tmp[["mtime"]])
[16:22:36.277]                     }
[16:22:36.277]                     tryCatch({
[16:22:36.277]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.277]                     }, error = function(ex) {
[16:22:36.277]                       msg <- conditionMessage(ex)
[16:22:36.277]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.277]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.277]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.277]                         fi_tmp[["mtime"]], msg)
[16:22:36.277]                       ex$message <- msg
[16:22:36.277]                       stop(ex)
[16:22:36.277]                     })
[16:22:36.277]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.277]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.277]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.277]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.277]                       fi <- file.info(pathname)
[16:22:36.277]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.277]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.277]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.277]                         fi[["size"]], fi[["mtime"]])
[16:22:36.277]                       stop(msg)
[16:22:36.277]                     }
[16:22:36.277]                     invisible(pathname)
[16:22:36.277]                   }
[16:22:36.277]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.277]                     rootPath = tempdir()) 
[16:22:36.277]                   {
[16:22:36.277]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.277]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.277]                       tmpdir = path, fileext = ".rds")
[16:22:36.277]                     save_rds(obj, file)
[16:22:36.277]                   }
[16:22:36.277]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.277]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.277]                   {
[16:22:36.277]                     inherits <- base::inherits
[16:22:36.277]                     invokeRestart <- base::invokeRestart
[16:22:36.277]                     is.null <- base::is.null
[16:22:36.277]                     muffled <- FALSE
[16:22:36.277]                     if (inherits(cond, "message")) {
[16:22:36.277]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.277]                       if (muffled) 
[16:22:36.277]                         invokeRestart("muffleMessage")
[16:22:36.277]                     }
[16:22:36.277]                     else if (inherits(cond, "warning")) {
[16:22:36.277]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.277]                       if (muffled) 
[16:22:36.277]                         invokeRestart("muffleWarning")
[16:22:36.277]                     }
[16:22:36.277]                     else if (inherits(cond, "condition")) {
[16:22:36.277]                       if (!is.null(pattern)) {
[16:22:36.277]                         computeRestarts <- base::computeRestarts
[16:22:36.277]                         grepl <- base::grepl
[16:22:36.277]                         restarts <- computeRestarts(cond)
[16:22:36.277]                         for (restart in restarts) {
[16:22:36.277]                           name <- restart$name
[16:22:36.277]                           if (is.null(name)) 
[16:22:36.277]                             next
[16:22:36.277]                           if (!grepl(pattern, name)) 
[16:22:36.277]                             next
[16:22:36.277]                           invokeRestart(restart)
[16:22:36.277]                           muffled <- TRUE
[16:22:36.277]                           break
[16:22:36.277]                         }
[16:22:36.277]                       }
[16:22:36.277]                     }
[16:22:36.277]                     invisible(muffled)
[16:22:36.277]                   }
[16:22:36.277]                   muffleCondition(cond)
[16:22:36.277]                 })
[16:22:36.277]             }))
[16:22:36.277]             future::FutureResult(value = ...future.value$value, 
[16:22:36.277]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.277]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.277]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.277]                     ...future.globalenv.names))
[16:22:36.277]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.277]         }, condition = base::local({
[16:22:36.277]             c <- base::c
[16:22:36.277]             inherits <- base::inherits
[16:22:36.277]             invokeRestart <- base::invokeRestart
[16:22:36.277]             length <- base::length
[16:22:36.277]             list <- base::list
[16:22:36.277]             seq.int <- base::seq.int
[16:22:36.277]             signalCondition <- base::signalCondition
[16:22:36.277]             sys.calls <- base::sys.calls
[16:22:36.277]             `[[` <- base::`[[`
[16:22:36.277]             `+` <- base::`+`
[16:22:36.277]             `<<-` <- base::`<<-`
[16:22:36.277]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.277]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.277]                   3L)]
[16:22:36.277]             }
[16:22:36.277]             function(cond) {
[16:22:36.277]                 is_error <- inherits(cond, "error")
[16:22:36.277]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.277]                   NULL)
[16:22:36.277]                 if (is_error) {
[16:22:36.277]                   sessionInformation <- function() {
[16:22:36.277]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.277]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.277]                       search = base::search(), system = base::Sys.info())
[16:22:36.277]                   }
[16:22:36.277]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.277]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.277]                     cond$call), session = sessionInformation(), 
[16:22:36.277]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.277]                   signalCondition(cond)
[16:22:36.277]                 }
[16:22:36.277]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.277]                 "immediateCondition"))) {
[16:22:36.277]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.277]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.277]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.277]                   if (TRUE && !signal) {
[16:22:36.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.277]                     {
[16:22:36.277]                       inherits <- base::inherits
[16:22:36.277]                       invokeRestart <- base::invokeRestart
[16:22:36.277]                       is.null <- base::is.null
[16:22:36.277]                       muffled <- FALSE
[16:22:36.277]                       if (inherits(cond, "message")) {
[16:22:36.277]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.277]                         if (muffled) 
[16:22:36.277]                           invokeRestart("muffleMessage")
[16:22:36.277]                       }
[16:22:36.277]                       else if (inherits(cond, "warning")) {
[16:22:36.277]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.277]                         if (muffled) 
[16:22:36.277]                           invokeRestart("muffleWarning")
[16:22:36.277]                       }
[16:22:36.277]                       else if (inherits(cond, "condition")) {
[16:22:36.277]                         if (!is.null(pattern)) {
[16:22:36.277]                           computeRestarts <- base::computeRestarts
[16:22:36.277]                           grepl <- base::grepl
[16:22:36.277]                           restarts <- computeRestarts(cond)
[16:22:36.277]                           for (restart in restarts) {
[16:22:36.277]                             name <- restart$name
[16:22:36.277]                             if (is.null(name)) 
[16:22:36.277]                               next
[16:22:36.277]                             if (!grepl(pattern, name)) 
[16:22:36.277]                               next
[16:22:36.277]                             invokeRestart(restart)
[16:22:36.277]                             muffled <- TRUE
[16:22:36.277]                             break
[16:22:36.277]                           }
[16:22:36.277]                         }
[16:22:36.277]                       }
[16:22:36.277]                       invisible(muffled)
[16:22:36.277]                     }
[16:22:36.277]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.277]                   }
[16:22:36.277]                 }
[16:22:36.277]                 else {
[16:22:36.277]                   if (TRUE) {
[16:22:36.277]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.277]                     {
[16:22:36.277]                       inherits <- base::inherits
[16:22:36.277]                       invokeRestart <- base::invokeRestart
[16:22:36.277]                       is.null <- base::is.null
[16:22:36.277]                       muffled <- FALSE
[16:22:36.277]                       if (inherits(cond, "message")) {
[16:22:36.277]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.277]                         if (muffled) 
[16:22:36.277]                           invokeRestart("muffleMessage")
[16:22:36.277]                       }
[16:22:36.277]                       else if (inherits(cond, "warning")) {
[16:22:36.277]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.277]                         if (muffled) 
[16:22:36.277]                           invokeRestart("muffleWarning")
[16:22:36.277]                       }
[16:22:36.277]                       else if (inherits(cond, "condition")) {
[16:22:36.277]                         if (!is.null(pattern)) {
[16:22:36.277]                           computeRestarts <- base::computeRestarts
[16:22:36.277]                           grepl <- base::grepl
[16:22:36.277]                           restarts <- computeRestarts(cond)
[16:22:36.277]                           for (restart in restarts) {
[16:22:36.277]                             name <- restart$name
[16:22:36.277]                             if (is.null(name)) 
[16:22:36.277]                               next
[16:22:36.277]                             if (!grepl(pattern, name)) 
[16:22:36.277]                               next
[16:22:36.277]                             invokeRestart(restart)
[16:22:36.277]                             muffled <- TRUE
[16:22:36.277]                             break
[16:22:36.277]                           }
[16:22:36.277]                         }
[16:22:36.277]                       }
[16:22:36.277]                       invisible(muffled)
[16:22:36.277]                     }
[16:22:36.277]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.277]                   }
[16:22:36.277]                 }
[16:22:36.277]             }
[16:22:36.277]         }))
[16:22:36.277]     }, error = function(ex) {
[16:22:36.277]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.277]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.277]                 ...future.rng), started = ...future.startTime, 
[16:22:36.277]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.277]             version = "1.8"), class = "FutureResult")
[16:22:36.277]     }, finally = {
[16:22:36.277]         if (!identical(...future.workdir, getwd())) 
[16:22:36.277]             setwd(...future.workdir)
[16:22:36.277]         {
[16:22:36.277]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.277]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.277]             }
[16:22:36.277]             base::options(...future.oldOptions)
[16:22:36.277]             if (.Platform$OS.type == "windows") {
[16:22:36.277]                 old_names <- names(...future.oldEnvVars)
[16:22:36.277]                 envs <- base::Sys.getenv()
[16:22:36.277]                 names <- names(envs)
[16:22:36.277]                 common <- intersect(names, old_names)
[16:22:36.277]                 added <- setdiff(names, old_names)
[16:22:36.277]                 removed <- setdiff(old_names, names)
[16:22:36.277]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.277]                   envs[common]]
[16:22:36.277]                 NAMES <- toupper(changed)
[16:22:36.277]                 args <- list()
[16:22:36.277]                 for (kk in seq_along(NAMES)) {
[16:22:36.277]                   name <- changed[[kk]]
[16:22:36.277]                   NAME <- NAMES[[kk]]
[16:22:36.277]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.277]                     next
[16:22:36.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.277]                 }
[16:22:36.277]                 NAMES <- toupper(added)
[16:22:36.277]                 for (kk in seq_along(NAMES)) {
[16:22:36.277]                   name <- added[[kk]]
[16:22:36.277]                   NAME <- NAMES[[kk]]
[16:22:36.277]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.277]                     next
[16:22:36.277]                   args[[name]] <- ""
[16:22:36.277]                 }
[16:22:36.277]                 NAMES <- toupper(removed)
[16:22:36.277]                 for (kk in seq_along(NAMES)) {
[16:22:36.277]                   name <- removed[[kk]]
[16:22:36.277]                   NAME <- NAMES[[kk]]
[16:22:36.277]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.277]                     next
[16:22:36.277]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.277]                 }
[16:22:36.277]                 if (length(args) > 0) 
[16:22:36.277]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.277]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.277]             }
[16:22:36.277]             else {
[16:22:36.277]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.277]             }
[16:22:36.277]             {
[16:22:36.277]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.277]                   0L) {
[16:22:36.277]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.277]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.277]                   base::options(opts)
[16:22:36.277]                 }
[16:22:36.277]                 {
[16:22:36.277]                   {
[16:22:36.277]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.277]                     NULL
[16:22:36.277]                   }
[16:22:36.277]                   options(future.plan = NULL)
[16:22:36.277]                   if (is.na(NA_character_)) 
[16:22:36.277]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.277]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.277]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.277]                     .init = FALSE)
[16:22:36.277]                 }
[16:22:36.277]             }
[16:22:36.277]         }
[16:22:36.277]     })
[16:22:36.277]     if (TRUE) {
[16:22:36.277]         base::sink(type = "output", split = FALSE)
[16:22:36.277]         if (TRUE) {
[16:22:36.277]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.277]         }
[16:22:36.277]         else {
[16:22:36.277]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.277]         }
[16:22:36.277]         base::close(...future.stdout)
[16:22:36.277]         ...future.stdout <- NULL
[16:22:36.277]     }
[16:22:36.277]     ...future.result$conditions <- ...future.conditions
[16:22:36.277]     ...future.result$finished <- base::Sys.time()
[16:22:36.277]     ...future.result
[16:22:36.277] }
[16:22:36.279] requestCore(): workers = 2
[16:22:36.281] MulticoreFuture started
[16:22:36.285] - Launch lazy future ... done
[16:22:36.285] plan(): Setting new future strategy stack:
[16:22:36.285] run() for ‘MulticoreFuture’ ... done
[16:22:36.286] result() for MulticoreFuture ...
[16:22:36.286] List of future strategies:
[16:22:36.286] 1. sequential:
[16:22:36.286]    - args: function (..., envir = parent.frame())
[16:22:36.286]    - tweaked: FALSE
[16:22:36.286]    - call: NULL
[16:22:36.287] plan(): nbrOfWorkers() = 1
[16:22:36.289] plan(): Setting new future strategy stack:
[16:22:36.289] List of future strategies:
[16:22:36.289] 1. multicore:
[16:22:36.289]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.289]    - tweaked: FALSE
[16:22:36.289]    - call: plan(strategy)
[16:22:36.294] plan(): nbrOfWorkers() = 2
[16:22:36.295] result() for MulticoreFuture ...
[16:22:36.295] result() for MulticoreFuture ... done
[16:22:36.295] result() for MulticoreFuture ... done
[16:22:36.296] result() for MulticoreFuture ...
[16:22:36.296] result() for MulticoreFuture ... done
[16:22:36.296] result() for MulticoreFuture ...
[16:22:36.296] result() for MulticoreFuture ... done
[1] 42
[16:22:36.296] result() for MulticoreFuture ...
[16:22:36.297] result() for MulticoreFuture ... done
- stdout = FALSE
[16:22:36.297] getGlobalsAndPackages() ...
[16:22:36.297] Searching for globals...
[16:22:36.301] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.301] Searching for globals ... DONE
[16:22:36.301] Resolving globals: FALSE
[16:22:36.302] 
[16:22:36.302] - packages: [1] ‘utils’
[16:22:36.302] getGlobalsAndPackages() ... DONE
[16:22:36.303] run() for ‘Future’ ...
[16:22:36.303] - state: ‘created’
[16:22:36.303] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.307] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.307] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.307]   - Field: ‘label’
[16:22:36.307]   - Field: ‘local’
[16:22:36.307]   - Field: ‘owner’
[16:22:36.307]   - Field: ‘envir’
[16:22:36.308]   - Field: ‘workers’
[16:22:36.308]   - Field: ‘packages’
[16:22:36.308]   - Field: ‘gc’
[16:22:36.308]   - Field: ‘job’
[16:22:36.308]   - Field: ‘conditions’
[16:22:36.308]   - Field: ‘expr’
[16:22:36.308]   - Field: ‘uuid’
[16:22:36.308]   - Field: ‘seed’
[16:22:36.308]   - Field: ‘version’
[16:22:36.309]   - Field: ‘result’
[16:22:36.309]   - Field: ‘asynchronous’
[16:22:36.309]   - Field: ‘calls’
[16:22:36.309]   - Field: ‘globals’
[16:22:36.309]   - Field: ‘stdout’
[16:22:36.309]   - Field: ‘earlySignal’
[16:22:36.309]   - Field: ‘lazy’
[16:22:36.309]   - Field: ‘state’
[16:22:36.309] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.310] - Launch lazy future ...
[16:22:36.310] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.310] Packages needed by future strategies (n = 0): <none>
[16:22:36.311] {
[16:22:36.311]     {
[16:22:36.311]         {
[16:22:36.311]             ...future.startTime <- base::Sys.time()
[16:22:36.311]             {
[16:22:36.311]                 {
[16:22:36.311]                   {
[16:22:36.311]                     {
[16:22:36.311]                       {
[16:22:36.311]                         base::local({
[16:22:36.311]                           has_future <- base::requireNamespace("future", 
[16:22:36.311]                             quietly = TRUE)
[16:22:36.311]                           if (has_future) {
[16:22:36.311]                             ns <- base::getNamespace("future")
[16:22:36.311]                             version <- ns[[".package"]][["version"]]
[16:22:36.311]                             if (is.null(version)) 
[16:22:36.311]                               version <- utils::packageVersion("future")
[16:22:36.311]                           }
[16:22:36.311]                           else {
[16:22:36.311]                             version <- NULL
[16:22:36.311]                           }
[16:22:36.311]                           if (!has_future || version < "1.8.0") {
[16:22:36.311]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.311]                               "", base::R.version$version.string), 
[16:22:36.311]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.311]                                 base::R.version$platform, 8 * 
[16:22:36.311]                                   base::.Machine$sizeof.pointer), 
[16:22:36.311]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.311]                                 "release", "version")], collapse = " "), 
[16:22:36.311]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.311]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.311]                               info)
[16:22:36.311]                             info <- base::paste(info, collapse = "; ")
[16:22:36.311]                             if (!has_future) {
[16:22:36.311]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.311]                                 info)
[16:22:36.311]                             }
[16:22:36.311]                             else {
[16:22:36.311]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.311]                                 info, version)
[16:22:36.311]                             }
[16:22:36.311]                             base::stop(msg)
[16:22:36.311]                           }
[16:22:36.311]                         })
[16:22:36.311]                       }
[16:22:36.311]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.311]                       base::options(mc.cores = 1L)
[16:22:36.311]                     }
[16:22:36.311]                     base::local({
[16:22:36.311]                       for (pkg in "utils") {
[16:22:36.311]                         base::loadNamespace(pkg)
[16:22:36.311]                         base::library(pkg, character.only = TRUE)
[16:22:36.311]                       }
[16:22:36.311]                     })
[16:22:36.311]                   }
[16:22:36.311]                   ...future.strategy.old <- future::plan("list")
[16:22:36.311]                   options(future.plan = NULL)
[16:22:36.311]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.311]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.311]                 }
[16:22:36.311]                 ...future.workdir <- getwd()
[16:22:36.311]             }
[16:22:36.311]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.311]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.311]         }
[16:22:36.311]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.311]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.311]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.311]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.311]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.311]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.311]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.311]             base::names(...future.oldOptions))
[16:22:36.311]     }
[16:22:36.311]     if (FALSE) {
[16:22:36.311]     }
[16:22:36.311]     else {
[16:22:36.311]         if (FALSE) {
[16:22:36.311]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.311]                 open = "w")
[16:22:36.311]         }
[16:22:36.311]         else {
[16:22:36.311]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.311]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.311]         }
[16:22:36.311]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.311]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.311]             base::sink(type = "output", split = FALSE)
[16:22:36.311]             base::close(...future.stdout)
[16:22:36.311]         }, add = TRUE)
[16:22:36.311]     }
[16:22:36.311]     ...future.frame <- base::sys.nframe()
[16:22:36.311]     ...future.conditions <- base::list()
[16:22:36.311]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.311]     if (FALSE) {
[16:22:36.311]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.311]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.311]     }
[16:22:36.311]     ...future.result <- base::tryCatch({
[16:22:36.311]         base::withCallingHandlers({
[16:22:36.311]             ...future.value <- base::withVisible(base::local({
[16:22:36.311]                 withCallingHandlers({
[16:22:36.311]                   {
[16:22:36.311]                     print(1:50)
[16:22:36.311]                     str(1:50)
[16:22:36.311]                     cat(letters, sep = "-")
[16:22:36.311]                     cat(1:6, collapse = "\n")
[16:22:36.311]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.311]                     42L
[16:22:36.311]                   }
[16:22:36.311]                 }, immediateCondition = function(cond) {
[16:22:36.311]                   save_rds <- function (object, pathname, ...) 
[16:22:36.311]                   {
[16:22:36.311]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.311]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.311]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.311]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.311]                         fi_tmp[["mtime"]])
[16:22:36.311]                     }
[16:22:36.311]                     tryCatch({
[16:22:36.311]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.311]                     }, error = function(ex) {
[16:22:36.311]                       msg <- conditionMessage(ex)
[16:22:36.311]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.311]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.311]                         fi_tmp[["mtime"]], msg)
[16:22:36.311]                       ex$message <- msg
[16:22:36.311]                       stop(ex)
[16:22:36.311]                     })
[16:22:36.311]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.311]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.311]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.311]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.311]                       fi <- file.info(pathname)
[16:22:36.311]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.311]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.311]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.311]                         fi[["size"]], fi[["mtime"]])
[16:22:36.311]                       stop(msg)
[16:22:36.311]                     }
[16:22:36.311]                     invisible(pathname)
[16:22:36.311]                   }
[16:22:36.311]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.311]                     rootPath = tempdir()) 
[16:22:36.311]                   {
[16:22:36.311]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.311]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.311]                       tmpdir = path, fileext = ".rds")
[16:22:36.311]                     save_rds(obj, file)
[16:22:36.311]                   }
[16:22:36.311]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.311]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.311]                   {
[16:22:36.311]                     inherits <- base::inherits
[16:22:36.311]                     invokeRestart <- base::invokeRestart
[16:22:36.311]                     is.null <- base::is.null
[16:22:36.311]                     muffled <- FALSE
[16:22:36.311]                     if (inherits(cond, "message")) {
[16:22:36.311]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.311]                       if (muffled) 
[16:22:36.311]                         invokeRestart("muffleMessage")
[16:22:36.311]                     }
[16:22:36.311]                     else if (inherits(cond, "warning")) {
[16:22:36.311]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.311]                       if (muffled) 
[16:22:36.311]                         invokeRestart("muffleWarning")
[16:22:36.311]                     }
[16:22:36.311]                     else if (inherits(cond, "condition")) {
[16:22:36.311]                       if (!is.null(pattern)) {
[16:22:36.311]                         computeRestarts <- base::computeRestarts
[16:22:36.311]                         grepl <- base::grepl
[16:22:36.311]                         restarts <- computeRestarts(cond)
[16:22:36.311]                         for (restart in restarts) {
[16:22:36.311]                           name <- restart$name
[16:22:36.311]                           if (is.null(name)) 
[16:22:36.311]                             next
[16:22:36.311]                           if (!grepl(pattern, name)) 
[16:22:36.311]                             next
[16:22:36.311]                           invokeRestart(restart)
[16:22:36.311]                           muffled <- TRUE
[16:22:36.311]                           break
[16:22:36.311]                         }
[16:22:36.311]                       }
[16:22:36.311]                     }
[16:22:36.311]                     invisible(muffled)
[16:22:36.311]                   }
[16:22:36.311]                   muffleCondition(cond)
[16:22:36.311]                 })
[16:22:36.311]             }))
[16:22:36.311]             future::FutureResult(value = ...future.value$value, 
[16:22:36.311]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.311]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.311]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.311]                     ...future.globalenv.names))
[16:22:36.311]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.311]         }, condition = base::local({
[16:22:36.311]             c <- base::c
[16:22:36.311]             inherits <- base::inherits
[16:22:36.311]             invokeRestart <- base::invokeRestart
[16:22:36.311]             length <- base::length
[16:22:36.311]             list <- base::list
[16:22:36.311]             seq.int <- base::seq.int
[16:22:36.311]             signalCondition <- base::signalCondition
[16:22:36.311]             sys.calls <- base::sys.calls
[16:22:36.311]             `[[` <- base::`[[`
[16:22:36.311]             `+` <- base::`+`
[16:22:36.311]             `<<-` <- base::`<<-`
[16:22:36.311]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.311]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.311]                   3L)]
[16:22:36.311]             }
[16:22:36.311]             function(cond) {
[16:22:36.311]                 is_error <- inherits(cond, "error")
[16:22:36.311]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.311]                   NULL)
[16:22:36.311]                 if (is_error) {
[16:22:36.311]                   sessionInformation <- function() {
[16:22:36.311]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.311]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.311]                       search = base::search(), system = base::Sys.info())
[16:22:36.311]                   }
[16:22:36.311]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.311]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.311]                     cond$call), session = sessionInformation(), 
[16:22:36.311]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.311]                   signalCondition(cond)
[16:22:36.311]                 }
[16:22:36.311]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.311]                 "immediateCondition"))) {
[16:22:36.311]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.311]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.311]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.311]                   if (TRUE && !signal) {
[16:22:36.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.311]                     {
[16:22:36.311]                       inherits <- base::inherits
[16:22:36.311]                       invokeRestart <- base::invokeRestart
[16:22:36.311]                       is.null <- base::is.null
[16:22:36.311]                       muffled <- FALSE
[16:22:36.311]                       if (inherits(cond, "message")) {
[16:22:36.311]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.311]                         if (muffled) 
[16:22:36.311]                           invokeRestart("muffleMessage")
[16:22:36.311]                       }
[16:22:36.311]                       else if (inherits(cond, "warning")) {
[16:22:36.311]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.311]                         if (muffled) 
[16:22:36.311]                           invokeRestart("muffleWarning")
[16:22:36.311]                       }
[16:22:36.311]                       else if (inherits(cond, "condition")) {
[16:22:36.311]                         if (!is.null(pattern)) {
[16:22:36.311]                           computeRestarts <- base::computeRestarts
[16:22:36.311]                           grepl <- base::grepl
[16:22:36.311]                           restarts <- computeRestarts(cond)
[16:22:36.311]                           for (restart in restarts) {
[16:22:36.311]                             name <- restart$name
[16:22:36.311]                             if (is.null(name)) 
[16:22:36.311]                               next
[16:22:36.311]                             if (!grepl(pattern, name)) 
[16:22:36.311]                               next
[16:22:36.311]                             invokeRestart(restart)
[16:22:36.311]                             muffled <- TRUE
[16:22:36.311]                             break
[16:22:36.311]                           }
[16:22:36.311]                         }
[16:22:36.311]                       }
[16:22:36.311]                       invisible(muffled)
[16:22:36.311]                     }
[16:22:36.311]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.311]                   }
[16:22:36.311]                 }
[16:22:36.311]                 else {
[16:22:36.311]                   if (TRUE) {
[16:22:36.311]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.311]                     {
[16:22:36.311]                       inherits <- base::inherits
[16:22:36.311]                       invokeRestart <- base::invokeRestart
[16:22:36.311]                       is.null <- base::is.null
[16:22:36.311]                       muffled <- FALSE
[16:22:36.311]                       if (inherits(cond, "message")) {
[16:22:36.311]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.311]                         if (muffled) 
[16:22:36.311]                           invokeRestart("muffleMessage")
[16:22:36.311]                       }
[16:22:36.311]                       else if (inherits(cond, "warning")) {
[16:22:36.311]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.311]                         if (muffled) 
[16:22:36.311]                           invokeRestart("muffleWarning")
[16:22:36.311]                       }
[16:22:36.311]                       else if (inherits(cond, "condition")) {
[16:22:36.311]                         if (!is.null(pattern)) {
[16:22:36.311]                           computeRestarts <- base::computeRestarts
[16:22:36.311]                           grepl <- base::grepl
[16:22:36.311]                           restarts <- computeRestarts(cond)
[16:22:36.311]                           for (restart in restarts) {
[16:22:36.311]                             name <- restart$name
[16:22:36.311]                             if (is.null(name)) 
[16:22:36.311]                               next
[16:22:36.311]                             if (!grepl(pattern, name)) 
[16:22:36.311]                               next
[16:22:36.311]                             invokeRestart(restart)
[16:22:36.311]                             muffled <- TRUE
[16:22:36.311]                             break
[16:22:36.311]                           }
[16:22:36.311]                         }
[16:22:36.311]                       }
[16:22:36.311]                       invisible(muffled)
[16:22:36.311]                     }
[16:22:36.311]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.311]                   }
[16:22:36.311]                 }
[16:22:36.311]             }
[16:22:36.311]         }))
[16:22:36.311]     }, error = function(ex) {
[16:22:36.311]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.311]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.311]                 ...future.rng), started = ...future.startTime, 
[16:22:36.311]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.311]             version = "1.8"), class = "FutureResult")
[16:22:36.311]     }, finally = {
[16:22:36.311]         if (!identical(...future.workdir, getwd())) 
[16:22:36.311]             setwd(...future.workdir)
[16:22:36.311]         {
[16:22:36.311]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.311]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.311]             }
[16:22:36.311]             base::options(...future.oldOptions)
[16:22:36.311]             if (.Platform$OS.type == "windows") {
[16:22:36.311]                 old_names <- names(...future.oldEnvVars)
[16:22:36.311]                 envs <- base::Sys.getenv()
[16:22:36.311]                 names <- names(envs)
[16:22:36.311]                 common <- intersect(names, old_names)
[16:22:36.311]                 added <- setdiff(names, old_names)
[16:22:36.311]                 removed <- setdiff(old_names, names)
[16:22:36.311]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.311]                   envs[common]]
[16:22:36.311]                 NAMES <- toupper(changed)
[16:22:36.311]                 args <- list()
[16:22:36.311]                 for (kk in seq_along(NAMES)) {
[16:22:36.311]                   name <- changed[[kk]]
[16:22:36.311]                   NAME <- NAMES[[kk]]
[16:22:36.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.311]                     next
[16:22:36.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.311]                 }
[16:22:36.311]                 NAMES <- toupper(added)
[16:22:36.311]                 for (kk in seq_along(NAMES)) {
[16:22:36.311]                   name <- added[[kk]]
[16:22:36.311]                   NAME <- NAMES[[kk]]
[16:22:36.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.311]                     next
[16:22:36.311]                   args[[name]] <- ""
[16:22:36.311]                 }
[16:22:36.311]                 NAMES <- toupper(removed)
[16:22:36.311]                 for (kk in seq_along(NAMES)) {
[16:22:36.311]                   name <- removed[[kk]]
[16:22:36.311]                   NAME <- NAMES[[kk]]
[16:22:36.311]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.311]                     next
[16:22:36.311]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.311]                 }
[16:22:36.311]                 if (length(args) > 0) 
[16:22:36.311]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.311]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.311]             }
[16:22:36.311]             else {
[16:22:36.311]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.311]             }
[16:22:36.311]             {
[16:22:36.311]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.311]                   0L) {
[16:22:36.311]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.311]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.311]                   base::options(opts)
[16:22:36.311]                 }
[16:22:36.311]                 {
[16:22:36.311]                   {
[16:22:36.311]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.311]                     NULL
[16:22:36.311]                   }
[16:22:36.311]                   options(future.plan = NULL)
[16:22:36.311]                   if (is.na(NA_character_)) 
[16:22:36.311]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.311]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.311]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.311]                     .init = FALSE)
[16:22:36.311]                 }
[16:22:36.311]             }
[16:22:36.311]         }
[16:22:36.311]     })
[16:22:36.311]     if (TRUE) {
[16:22:36.311]         base::sink(type = "output", split = FALSE)
[16:22:36.311]         if (FALSE) {
[16:22:36.311]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.311]         }
[16:22:36.311]         else {
[16:22:36.311]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.311]         }
[16:22:36.311]         base::close(...future.stdout)
[16:22:36.311]         ...future.stdout <- NULL
[16:22:36.311]     }
[16:22:36.311]     ...future.result$conditions <- ...future.conditions
[16:22:36.311]     ...future.result$finished <- base::Sys.time()
[16:22:36.311]     ...future.result
[16:22:36.311] }
[16:22:36.313] requestCore(): workers = 2
[16:22:36.315] MulticoreFuture started
[16:22:36.315] - Launch lazy future ... done
[16:22:36.315] run() for ‘MulticoreFuture’ ... done
[16:22:36.316] result() for MulticoreFuture ...
[16:22:36.316] plan(): Setting new future strategy stack:
[16:22:36.317] List of future strategies:
[16:22:36.317] 1. sequential:
[16:22:36.317]    - args: function (..., envir = parent.frame())
[16:22:36.317]    - tweaked: FALSE
[16:22:36.317]    - call: NULL
[16:22:36.317] plan(): nbrOfWorkers() = 1
[16:22:36.321] plan(): Setting new future strategy stack:
[16:22:36.321] List of future strategies:
[16:22:36.321] 1. multicore:
[16:22:36.321]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.321]    - tweaked: FALSE
[16:22:36.321]    - call: plan(strategy)
[16:22:36.326] plan(): nbrOfWorkers() = 2
[16:22:36.327] result() for MulticoreFuture ...
[16:22:36.327] result() for MulticoreFuture ... done
[16:22:36.327] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "f796f93b-032d-a450-bb22-2054beb63222"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89890
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:36"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:36.337] result() for MulticoreFuture ...
[16:22:36.337] result() for MulticoreFuture ... done
[16:22:36.337] result() for MulticoreFuture ...
[16:22:36.337] result() for MulticoreFuture ... done
[16:22:36.338] getGlobalsAndPackages() ...
[16:22:36.338] Searching for globals...
[16:22:36.344] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.344] Searching for globals ... DONE
[16:22:36.344] Resolving globals: FALSE
[16:22:36.345] 
[16:22:36.345] - packages: [1] ‘utils’
[16:22:36.345] getGlobalsAndPackages() ... DONE
[16:22:36.345] run() for ‘Future’ ...
[16:22:36.346] - state: ‘created’
[16:22:36.346] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.350] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.350] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.350]   - Field: ‘label’
[16:22:36.350]   - Field: ‘local’
[16:22:36.350]   - Field: ‘owner’
[16:22:36.350]   - Field: ‘envir’
[16:22:36.350]   - Field: ‘workers’
[16:22:36.351]   - Field: ‘packages’
[16:22:36.351]   - Field: ‘gc’
[16:22:36.351]   - Field: ‘job’
[16:22:36.351]   - Field: ‘conditions’
[16:22:36.351]   - Field: ‘expr’
[16:22:36.351]   - Field: ‘uuid’
[16:22:36.351]   - Field: ‘seed’
[16:22:36.351]   - Field: ‘version’
[16:22:36.351]   - Field: ‘result’
[16:22:36.352]   - Field: ‘asynchronous’
[16:22:36.352]   - Field: ‘calls’
[16:22:36.352]   - Field: ‘globals’
[16:22:36.352]   - Field: ‘stdout’
[16:22:36.352]   - Field: ‘earlySignal’
[16:22:36.352]   - Field: ‘lazy’
[16:22:36.352]   - Field: ‘state’
[16:22:36.352] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.352] - Launch lazy future ...
[16:22:36.353] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.353] Packages needed by future strategies (n = 0): <none>
[16:22:36.353] {
[16:22:36.353]     {
[16:22:36.353]         {
[16:22:36.353]             ...future.startTime <- base::Sys.time()
[16:22:36.353]             {
[16:22:36.353]                 {
[16:22:36.353]                   {
[16:22:36.353]                     {
[16:22:36.353]                       {
[16:22:36.353]                         base::local({
[16:22:36.353]                           has_future <- base::requireNamespace("future", 
[16:22:36.353]                             quietly = TRUE)
[16:22:36.353]                           if (has_future) {
[16:22:36.353]                             ns <- base::getNamespace("future")
[16:22:36.353]                             version <- ns[[".package"]][["version"]]
[16:22:36.353]                             if (is.null(version)) 
[16:22:36.353]                               version <- utils::packageVersion("future")
[16:22:36.353]                           }
[16:22:36.353]                           else {
[16:22:36.353]                             version <- NULL
[16:22:36.353]                           }
[16:22:36.353]                           if (!has_future || version < "1.8.0") {
[16:22:36.353]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.353]                               "", base::R.version$version.string), 
[16:22:36.353]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.353]                                 base::R.version$platform, 8 * 
[16:22:36.353]                                   base::.Machine$sizeof.pointer), 
[16:22:36.353]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.353]                                 "release", "version")], collapse = " "), 
[16:22:36.353]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.353]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.353]                               info)
[16:22:36.353]                             info <- base::paste(info, collapse = "; ")
[16:22:36.353]                             if (!has_future) {
[16:22:36.353]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.353]                                 info)
[16:22:36.353]                             }
[16:22:36.353]                             else {
[16:22:36.353]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.353]                                 info, version)
[16:22:36.353]                             }
[16:22:36.353]                             base::stop(msg)
[16:22:36.353]                           }
[16:22:36.353]                         })
[16:22:36.353]                       }
[16:22:36.353]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.353]                       base::options(mc.cores = 1L)
[16:22:36.353]                     }
[16:22:36.353]                     base::local({
[16:22:36.353]                       for (pkg in "utils") {
[16:22:36.353]                         base::loadNamespace(pkg)
[16:22:36.353]                         base::library(pkg, character.only = TRUE)
[16:22:36.353]                       }
[16:22:36.353]                     })
[16:22:36.353]                   }
[16:22:36.353]                   ...future.strategy.old <- future::plan("list")
[16:22:36.353]                   options(future.plan = NULL)
[16:22:36.353]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.353]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.353]                 }
[16:22:36.353]                 ...future.workdir <- getwd()
[16:22:36.353]             }
[16:22:36.353]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.353]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.353]         }
[16:22:36.353]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.353]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.353]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.353]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.353]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.353]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.353]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.353]             base::names(...future.oldOptions))
[16:22:36.353]     }
[16:22:36.353]     if (FALSE) {
[16:22:36.353]     }
[16:22:36.353]     else {
[16:22:36.353]         if (FALSE) {
[16:22:36.353]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.353]                 open = "w")
[16:22:36.353]         }
[16:22:36.353]         else {
[16:22:36.353]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.353]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.353]         }
[16:22:36.353]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.353]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.353]             base::sink(type = "output", split = FALSE)
[16:22:36.353]             base::close(...future.stdout)
[16:22:36.353]         }, add = TRUE)
[16:22:36.353]     }
[16:22:36.353]     ...future.frame <- base::sys.nframe()
[16:22:36.353]     ...future.conditions <- base::list()
[16:22:36.353]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.353]     if (FALSE) {
[16:22:36.353]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.353]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.353]     }
[16:22:36.353]     ...future.result <- base::tryCatch({
[16:22:36.353]         base::withCallingHandlers({
[16:22:36.353]             ...future.value <- base::withVisible(base::local({
[16:22:36.353]                 withCallingHandlers({
[16:22:36.353]                   {
[16:22:36.353]                     print(1:50)
[16:22:36.353]                     str(1:50)
[16:22:36.353]                     cat(letters, sep = "-")
[16:22:36.353]                     cat(1:6, collapse = "\n")
[16:22:36.353]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.353]                     42L
[16:22:36.353]                   }
[16:22:36.353]                 }, immediateCondition = function(cond) {
[16:22:36.353]                   save_rds <- function (object, pathname, ...) 
[16:22:36.353]                   {
[16:22:36.353]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.353]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.353]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.353]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.353]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.353]                         fi_tmp[["mtime"]])
[16:22:36.353]                     }
[16:22:36.353]                     tryCatch({
[16:22:36.353]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.353]                     }, error = function(ex) {
[16:22:36.353]                       msg <- conditionMessage(ex)
[16:22:36.353]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.353]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.353]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.353]                         fi_tmp[["mtime"]], msg)
[16:22:36.353]                       ex$message <- msg
[16:22:36.353]                       stop(ex)
[16:22:36.353]                     })
[16:22:36.353]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.353]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.353]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.353]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.353]                       fi <- file.info(pathname)
[16:22:36.353]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.353]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.353]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.353]                         fi[["size"]], fi[["mtime"]])
[16:22:36.353]                       stop(msg)
[16:22:36.353]                     }
[16:22:36.353]                     invisible(pathname)
[16:22:36.353]                   }
[16:22:36.353]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.353]                     rootPath = tempdir()) 
[16:22:36.353]                   {
[16:22:36.353]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.353]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.353]                       tmpdir = path, fileext = ".rds")
[16:22:36.353]                     save_rds(obj, file)
[16:22:36.353]                   }
[16:22:36.353]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.353]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.353]                   {
[16:22:36.353]                     inherits <- base::inherits
[16:22:36.353]                     invokeRestart <- base::invokeRestart
[16:22:36.353]                     is.null <- base::is.null
[16:22:36.353]                     muffled <- FALSE
[16:22:36.353]                     if (inherits(cond, "message")) {
[16:22:36.353]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.353]                       if (muffled) 
[16:22:36.353]                         invokeRestart("muffleMessage")
[16:22:36.353]                     }
[16:22:36.353]                     else if (inherits(cond, "warning")) {
[16:22:36.353]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.353]                       if (muffled) 
[16:22:36.353]                         invokeRestart("muffleWarning")
[16:22:36.353]                     }
[16:22:36.353]                     else if (inherits(cond, "condition")) {
[16:22:36.353]                       if (!is.null(pattern)) {
[16:22:36.353]                         computeRestarts <- base::computeRestarts
[16:22:36.353]                         grepl <- base::grepl
[16:22:36.353]                         restarts <- computeRestarts(cond)
[16:22:36.353]                         for (restart in restarts) {
[16:22:36.353]                           name <- restart$name
[16:22:36.353]                           if (is.null(name)) 
[16:22:36.353]                             next
[16:22:36.353]                           if (!grepl(pattern, name)) 
[16:22:36.353]                             next
[16:22:36.353]                           invokeRestart(restart)
[16:22:36.353]                           muffled <- TRUE
[16:22:36.353]                           break
[16:22:36.353]                         }
[16:22:36.353]                       }
[16:22:36.353]                     }
[16:22:36.353]                     invisible(muffled)
[16:22:36.353]                   }
[16:22:36.353]                   muffleCondition(cond)
[16:22:36.353]                 })
[16:22:36.353]             }))
[16:22:36.353]             future::FutureResult(value = ...future.value$value, 
[16:22:36.353]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.353]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.353]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.353]                     ...future.globalenv.names))
[16:22:36.353]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.353]         }, condition = base::local({
[16:22:36.353]             c <- base::c
[16:22:36.353]             inherits <- base::inherits
[16:22:36.353]             invokeRestart <- base::invokeRestart
[16:22:36.353]             length <- base::length
[16:22:36.353]             list <- base::list
[16:22:36.353]             seq.int <- base::seq.int
[16:22:36.353]             signalCondition <- base::signalCondition
[16:22:36.353]             sys.calls <- base::sys.calls
[16:22:36.353]             `[[` <- base::`[[`
[16:22:36.353]             `+` <- base::`+`
[16:22:36.353]             `<<-` <- base::`<<-`
[16:22:36.353]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.353]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.353]                   3L)]
[16:22:36.353]             }
[16:22:36.353]             function(cond) {
[16:22:36.353]                 is_error <- inherits(cond, "error")
[16:22:36.353]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.353]                   NULL)
[16:22:36.353]                 if (is_error) {
[16:22:36.353]                   sessionInformation <- function() {
[16:22:36.353]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.353]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.353]                       search = base::search(), system = base::Sys.info())
[16:22:36.353]                   }
[16:22:36.353]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.353]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.353]                     cond$call), session = sessionInformation(), 
[16:22:36.353]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.353]                   signalCondition(cond)
[16:22:36.353]                 }
[16:22:36.353]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.353]                 "immediateCondition"))) {
[16:22:36.353]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.353]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.353]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.353]                   if (TRUE && !signal) {
[16:22:36.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.353]                     {
[16:22:36.353]                       inherits <- base::inherits
[16:22:36.353]                       invokeRestart <- base::invokeRestart
[16:22:36.353]                       is.null <- base::is.null
[16:22:36.353]                       muffled <- FALSE
[16:22:36.353]                       if (inherits(cond, "message")) {
[16:22:36.353]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.353]                         if (muffled) 
[16:22:36.353]                           invokeRestart("muffleMessage")
[16:22:36.353]                       }
[16:22:36.353]                       else if (inherits(cond, "warning")) {
[16:22:36.353]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.353]                         if (muffled) 
[16:22:36.353]                           invokeRestart("muffleWarning")
[16:22:36.353]                       }
[16:22:36.353]                       else if (inherits(cond, "condition")) {
[16:22:36.353]                         if (!is.null(pattern)) {
[16:22:36.353]                           computeRestarts <- base::computeRestarts
[16:22:36.353]                           grepl <- base::grepl
[16:22:36.353]                           restarts <- computeRestarts(cond)
[16:22:36.353]                           for (restart in restarts) {
[16:22:36.353]                             name <- restart$name
[16:22:36.353]                             if (is.null(name)) 
[16:22:36.353]                               next
[16:22:36.353]                             if (!grepl(pattern, name)) 
[16:22:36.353]                               next
[16:22:36.353]                             invokeRestart(restart)
[16:22:36.353]                             muffled <- TRUE
[16:22:36.353]                             break
[16:22:36.353]                           }
[16:22:36.353]                         }
[16:22:36.353]                       }
[16:22:36.353]                       invisible(muffled)
[16:22:36.353]                     }
[16:22:36.353]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.353]                   }
[16:22:36.353]                 }
[16:22:36.353]                 else {
[16:22:36.353]                   if (TRUE) {
[16:22:36.353]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.353]                     {
[16:22:36.353]                       inherits <- base::inherits
[16:22:36.353]                       invokeRestart <- base::invokeRestart
[16:22:36.353]                       is.null <- base::is.null
[16:22:36.353]                       muffled <- FALSE
[16:22:36.353]                       if (inherits(cond, "message")) {
[16:22:36.353]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.353]                         if (muffled) 
[16:22:36.353]                           invokeRestart("muffleMessage")
[16:22:36.353]                       }
[16:22:36.353]                       else if (inherits(cond, "warning")) {
[16:22:36.353]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.353]                         if (muffled) 
[16:22:36.353]                           invokeRestart("muffleWarning")
[16:22:36.353]                       }
[16:22:36.353]                       else if (inherits(cond, "condition")) {
[16:22:36.353]                         if (!is.null(pattern)) {
[16:22:36.353]                           computeRestarts <- base::computeRestarts
[16:22:36.353]                           grepl <- base::grepl
[16:22:36.353]                           restarts <- computeRestarts(cond)
[16:22:36.353]                           for (restart in restarts) {
[16:22:36.353]                             name <- restart$name
[16:22:36.353]                             if (is.null(name)) 
[16:22:36.353]                               next
[16:22:36.353]                             if (!grepl(pattern, name)) 
[16:22:36.353]                               next
[16:22:36.353]                             invokeRestart(restart)
[16:22:36.353]                             muffled <- TRUE
[16:22:36.353]                             break
[16:22:36.353]                           }
[16:22:36.353]                         }
[16:22:36.353]                       }
[16:22:36.353]                       invisible(muffled)
[16:22:36.353]                     }
[16:22:36.353]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.353]                   }
[16:22:36.353]                 }
[16:22:36.353]             }
[16:22:36.353]         }))
[16:22:36.353]     }, error = function(ex) {
[16:22:36.353]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.353]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.353]                 ...future.rng), started = ...future.startTime, 
[16:22:36.353]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.353]             version = "1.8"), class = "FutureResult")
[16:22:36.353]     }, finally = {
[16:22:36.353]         if (!identical(...future.workdir, getwd())) 
[16:22:36.353]             setwd(...future.workdir)
[16:22:36.353]         {
[16:22:36.353]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.353]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.353]             }
[16:22:36.353]             base::options(...future.oldOptions)
[16:22:36.353]             if (.Platform$OS.type == "windows") {
[16:22:36.353]                 old_names <- names(...future.oldEnvVars)
[16:22:36.353]                 envs <- base::Sys.getenv()
[16:22:36.353]                 names <- names(envs)
[16:22:36.353]                 common <- intersect(names, old_names)
[16:22:36.353]                 added <- setdiff(names, old_names)
[16:22:36.353]                 removed <- setdiff(old_names, names)
[16:22:36.353]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.353]                   envs[common]]
[16:22:36.353]                 NAMES <- toupper(changed)
[16:22:36.353]                 args <- list()
[16:22:36.353]                 for (kk in seq_along(NAMES)) {
[16:22:36.353]                   name <- changed[[kk]]
[16:22:36.353]                   NAME <- NAMES[[kk]]
[16:22:36.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.353]                     next
[16:22:36.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.353]                 }
[16:22:36.353]                 NAMES <- toupper(added)
[16:22:36.353]                 for (kk in seq_along(NAMES)) {
[16:22:36.353]                   name <- added[[kk]]
[16:22:36.353]                   NAME <- NAMES[[kk]]
[16:22:36.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.353]                     next
[16:22:36.353]                   args[[name]] <- ""
[16:22:36.353]                 }
[16:22:36.353]                 NAMES <- toupper(removed)
[16:22:36.353]                 for (kk in seq_along(NAMES)) {
[16:22:36.353]                   name <- removed[[kk]]
[16:22:36.353]                   NAME <- NAMES[[kk]]
[16:22:36.353]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.353]                     next
[16:22:36.353]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.353]                 }
[16:22:36.353]                 if (length(args) > 0) 
[16:22:36.353]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.353]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.353]             }
[16:22:36.353]             else {
[16:22:36.353]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.353]             }
[16:22:36.353]             {
[16:22:36.353]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.353]                   0L) {
[16:22:36.353]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.353]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.353]                   base::options(opts)
[16:22:36.353]                 }
[16:22:36.353]                 {
[16:22:36.353]                   {
[16:22:36.353]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.353]                     NULL
[16:22:36.353]                   }
[16:22:36.353]                   options(future.plan = NULL)
[16:22:36.353]                   if (is.na(NA_character_)) 
[16:22:36.353]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.353]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.353]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.353]                     .init = FALSE)
[16:22:36.353]                 }
[16:22:36.353]             }
[16:22:36.353]         }
[16:22:36.353]     })
[16:22:36.353]     if (TRUE) {
[16:22:36.353]         base::sink(type = "output", split = FALSE)
[16:22:36.353]         if (FALSE) {
[16:22:36.353]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.353]         }
[16:22:36.353]         else {
[16:22:36.353]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.353]         }
[16:22:36.353]         base::close(...future.stdout)
[16:22:36.353]         ...future.stdout <- NULL
[16:22:36.353]     }
[16:22:36.353]     ...future.result$conditions <- ...future.conditions
[16:22:36.353]     ...future.result$finished <- base::Sys.time()
[16:22:36.353]     ...future.result
[16:22:36.353] }
[16:22:36.356] requestCore(): workers = 2
[16:22:36.358] MulticoreFuture started
[16:22:36.358] - Launch lazy future ... done
[16:22:36.358] run() for ‘MulticoreFuture’ ... done
[16:22:36.359] result() for MulticoreFuture ...
[16:22:36.359] plan(): Setting new future strategy stack:
[16:22:36.359] List of future strategies:
[16:22:36.359] 1. sequential:
[16:22:36.359]    - args: function (..., envir = parent.frame())
[16:22:36.359]    - tweaked: FALSE
[16:22:36.359]    - call: NULL
[16:22:36.360] plan(): nbrOfWorkers() = 1
[16:22:36.363] plan(): Setting new future strategy stack:
[16:22:36.363] List of future strategies:
[16:22:36.363] 1. multicore:
[16:22:36.363]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.363]    - tweaked: FALSE
[16:22:36.363]    - call: plan(strategy)
[16:22:36.368] plan(): nbrOfWorkers() = 2
[16:22:36.369] result() for MulticoreFuture ...
[16:22:36.369] result() for MulticoreFuture ... done
[16:22:36.369] result() for MulticoreFuture ... done
[16:22:36.369] result() for MulticoreFuture ...
[16:22:36.369] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.370] getGlobalsAndPackages() ...
[16:22:36.370] Searching for globals...
[16:22:36.371] - globals found: [1] ‘print’
[16:22:36.371] Searching for globals ... DONE
[16:22:36.371] Resolving globals: FALSE
[16:22:36.371] 
[16:22:36.372] 
[16:22:36.372] getGlobalsAndPackages() ... DONE
[16:22:36.372] run() for ‘Future’ ...
[16:22:36.372] - state: ‘created’
[16:22:36.372] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.376] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.376] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.377]   - Field: ‘label’
[16:22:36.377]   - Field: ‘local’
[16:22:36.377]   - Field: ‘owner’
[16:22:36.377]   - Field: ‘envir’
[16:22:36.377]   - Field: ‘workers’
[16:22:36.377]   - Field: ‘packages’
[16:22:36.377]   - Field: ‘gc’
[16:22:36.377]   - Field: ‘job’
[16:22:36.377]   - Field: ‘conditions’
[16:22:36.378]   - Field: ‘expr’
[16:22:36.378]   - Field: ‘uuid’
[16:22:36.378]   - Field: ‘seed’
[16:22:36.378]   - Field: ‘version’
[16:22:36.378]   - Field: ‘result’
[16:22:36.378]   - Field: ‘asynchronous’
[16:22:36.378]   - Field: ‘calls’
[16:22:36.378]   - Field: ‘globals’
[16:22:36.378]   - Field: ‘stdout’
[16:22:36.379]   - Field: ‘earlySignal’
[16:22:36.379]   - Field: ‘lazy’
[16:22:36.379]   - Field: ‘state’
[16:22:36.379] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.379] - Launch lazy future ...
[16:22:36.379] Packages needed by the future expression (n = 0): <none>
[16:22:36.379] Packages needed by future strategies (n = 0): <none>
[16:22:36.380] {
[16:22:36.380]     {
[16:22:36.380]         {
[16:22:36.380]             ...future.startTime <- base::Sys.time()
[16:22:36.380]             {
[16:22:36.380]                 {
[16:22:36.380]                   {
[16:22:36.380]                     {
[16:22:36.380]                       base::local({
[16:22:36.380]                         has_future <- base::requireNamespace("future", 
[16:22:36.380]                           quietly = TRUE)
[16:22:36.380]                         if (has_future) {
[16:22:36.380]                           ns <- base::getNamespace("future")
[16:22:36.380]                           version <- ns[[".package"]][["version"]]
[16:22:36.380]                           if (is.null(version)) 
[16:22:36.380]                             version <- utils::packageVersion("future")
[16:22:36.380]                         }
[16:22:36.380]                         else {
[16:22:36.380]                           version <- NULL
[16:22:36.380]                         }
[16:22:36.380]                         if (!has_future || version < "1.8.0") {
[16:22:36.380]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.380]                             "", base::R.version$version.string), 
[16:22:36.380]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.380]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.380]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.380]                               "release", "version")], collapse = " "), 
[16:22:36.380]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.380]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.380]                             info)
[16:22:36.380]                           info <- base::paste(info, collapse = "; ")
[16:22:36.380]                           if (!has_future) {
[16:22:36.380]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.380]                               info)
[16:22:36.380]                           }
[16:22:36.380]                           else {
[16:22:36.380]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.380]                               info, version)
[16:22:36.380]                           }
[16:22:36.380]                           base::stop(msg)
[16:22:36.380]                         }
[16:22:36.380]                       })
[16:22:36.380]                     }
[16:22:36.380]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.380]                     base::options(mc.cores = 1L)
[16:22:36.380]                   }
[16:22:36.380]                   ...future.strategy.old <- future::plan("list")
[16:22:36.380]                   options(future.plan = NULL)
[16:22:36.380]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.380]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.380]                 }
[16:22:36.380]                 ...future.workdir <- getwd()
[16:22:36.380]             }
[16:22:36.380]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.380]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.380]         }
[16:22:36.380]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.380]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.380]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.380]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.380]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.380]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.380]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.380]             base::names(...future.oldOptions))
[16:22:36.380]     }
[16:22:36.380]     if (FALSE) {
[16:22:36.380]     }
[16:22:36.380]     else {
[16:22:36.380]         if (TRUE) {
[16:22:36.380]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.380]                 open = "w")
[16:22:36.380]         }
[16:22:36.380]         else {
[16:22:36.380]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.380]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.380]         }
[16:22:36.380]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.380]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.380]             base::sink(type = "output", split = FALSE)
[16:22:36.380]             base::close(...future.stdout)
[16:22:36.380]         }, add = TRUE)
[16:22:36.380]     }
[16:22:36.380]     ...future.frame <- base::sys.nframe()
[16:22:36.380]     ...future.conditions <- base::list()
[16:22:36.380]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.380]     if (FALSE) {
[16:22:36.380]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.380]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.380]     }
[16:22:36.380]     ...future.result <- base::tryCatch({
[16:22:36.380]         base::withCallingHandlers({
[16:22:36.380]             ...future.value <- base::withVisible(base::local({
[16:22:36.380]                 withCallingHandlers({
[16:22:36.380]                   print(42)
[16:22:36.380]                 }, immediateCondition = function(cond) {
[16:22:36.380]                   save_rds <- function (object, pathname, ...) 
[16:22:36.380]                   {
[16:22:36.380]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.380]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.380]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.380]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.380]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.380]                         fi_tmp[["mtime"]])
[16:22:36.380]                     }
[16:22:36.380]                     tryCatch({
[16:22:36.380]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.380]                     }, error = function(ex) {
[16:22:36.380]                       msg <- conditionMessage(ex)
[16:22:36.380]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.380]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.380]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.380]                         fi_tmp[["mtime"]], msg)
[16:22:36.380]                       ex$message <- msg
[16:22:36.380]                       stop(ex)
[16:22:36.380]                     })
[16:22:36.380]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.380]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.380]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.380]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.380]                       fi <- file.info(pathname)
[16:22:36.380]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.380]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.380]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.380]                         fi[["size"]], fi[["mtime"]])
[16:22:36.380]                       stop(msg)
[16:22:36.380]                     }
[16:22:36.380]                     invisible(pathname)
[16:22:36.380]                   }
[16:22:36.380]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.380]                     rootPath = tempdir()) 
[16:22:36.380]                   {
[16:22:36.380]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.380]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.380]                       tmpdir = path, fileext = ".rds")
[16:22:36.380]                     save_rds(obj, file)
[16:22:36.380]                   }
[16:22:36.380]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.380]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.380]                   {
[16:22:36.380]                     inherits <- base::inherits
[16:22:36.380]                     invokeRestart <- base::invokeRestart
[16:22:36.380]                     is.null <- base::is.null
[16:22:36.380]                     muffled <- FALSE
[16:22:36.380]                     if (inherits(cond, "message")) {
[16:22:36.380]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.380]                       if (muffled) 
[16:22:36.380]                         invokeRestart("muffleMessage")
[16:22:36.380]                     }
[16:22:36.380]                     else if (inherits(cond, "warning")) {
[16:22:36.380]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.380]                       if (muffled) 
[16:22:36.380]                         invokeRestart("muffleWarning")
[16:22:36.380]                     }
[16:22:36.380]                     else if (inherits(cond, "condition")) {
[16:22:36.380]                       if (!is.null(pattern)) {
[16:22:36.380]                         computeRestarts <- base::computeRestarts
[16:22:36.380]                         grepl <- base::grepl
[16:22:36.380]                         restarts <- computeRestarts(cond)
[16:22:36.380]                         for (restart in restarts) {
[16:22:36.380]                           name <- restart$name
[16:22:36.380]                           if (is.null(name)) 
[16:22:36.380]                             next
[16:22:36.380]                           if (!grepl(pattern, name)) 
[16:22:36.380]                             next
[16:22:36.380]                           invokeRestart(restart)
[16:22:36.380]                           muffled <- TRUE
[16:22:36.380]                           break
[16:22:36.380]                         }
[16:22:36.380]                       }
[16:22:36.380]                     }
[16:22:36.380]                     invisible(muffled)
[16:22:36.380]                   }
[16:22:36.380]                   muffleCondition(cond)
[16:22:36.380]                 })
[16:22:36.380]             }))
[16:22:36.380]             future::FutureResult(value = ...future.value$value, 
[16:22:36.380]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.380]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.380]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.380]                     ...future.globalenv.names))
[16:22:36.380]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.380]         }, condition = base::local({
[16:22:36.380]             c <- base::c
[16:22:36.380]             inherits <- base::inherits
[16:22:36.380]             invokeRestart <- base::invokeRestart
[16:22:36.380]             length <- base::length
[16:22:36.380]             list <- base::list
[16:22:36.380]             seq.int <- base::seq.int
[16:22:36.380]             signalCondition <- base::signalCondition
[16:22:36.380]             sys.calls <- base::sys.calls
[16:22:36.380]             `[[` <- base::`[[`
[16:22:36.380]             `+` <- base::`+`
[16:22:36.380]             `<<-` <- base::`<<-`
[16:22:36.380]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.380]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.380]                   3L)]
[16:22:36.380]             }
[16:22:36.380]             function(cond) {
[16:22:36.380]                 is_error <- inherits(cond, "error")
[16:22:36.380]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.380]                   NULL)
[16:22:36.380]                 if (is_error) {
[16:22:36.380]                   sessionInformation <- function() {
[16:22:36.380]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.380]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.380]                       search = base::search(), system = base::Sys.info())
[16:22:36.380]                   }
[16:22:36.380]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.380]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.380]                     cond$call), session = sessionInformation(), 
[16:22:36.380]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.380]                   signalCondition(cond)
[16:22:36.380]                 }
[16:22:36.380]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.380]                 "immediateCondition"))) {
[16:22:36.380]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.380]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.380]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.380]                   if (TRUE && !signal) {
[16:22:36.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.380]                     {
[16:22:36.380]                       inherits <- base::inherits
[16:22:36.380]                       invokeRestart <- base::invokeRestart
[16:22:36.380]                       is.null <- base::is.null
[16:22:36.380]                       muffled <- FALSE
[16:22:36.380]                       if (inherits(cond, "message")) {
[16:22:36.380]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.380]                         if (muffled) 
[16:22:36.380]                           invokeRestart("muffleMessage")
[16:22:36.380]                       }
[16:22:36.380]                       else if (inherits(cond, "warning")) {
[16:22:36.380]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.380]                         if (muffled) 
[16:22:36.380]                           invokeRestart("muffleWarning")
[16:22:36.380]                       }
[16:22:36.380]                       else if (inherits(cond, "condition")) {
[16:22:36.380]                         if (!is.null(pattern)) {
[16:22:36.380]                           computeRestarts <- base::computeRestarts
[16:22:36.380]                           grepl <- base::grepl
[16:22:36.380]                           restarts <- computeRestarts(cond)
[16:22:36.380]                           for (restart in restarts) {
[16:22:36.380]                             name <- restart$name
[16:22:36.380]                             if (is.null(name)) 
[16:22:36.380]                               next
[16:22:36.380]                             if (!grepl(pattern, name)) 
[16:22:36.380]                               next
[16:22:36.380]                             invokeRestart(restart)
[16:22:36.380]                             muffled <- TRUE
[16:22:36.380]                             break
[16:22:36.380]                           }
[16:22:36.380]                         }
[16:22:36.380]                       }
[16:22:36.380]                       invisible(muffled)
[16:22:36.380]                     }
[16:22:36.380]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.380]                   }
[16:22:36.380]                 }
[16:22:36.380]                 else {
[16:22:36.380]                   if (TRUE) {
[16:22:36.380]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.380]                     {
[16:22:36.380]                       inherits <- base::inherits
[16:22:36.380]                       invokeRestart <- base::invokeRestart
[16:22:36.380]                       is.null <- base::is.null
[16:22:36.380]                       muffled <- FALSE
[16:22:36.380]                       if (inherits(cond, "message")) {
[16:22:36.380]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.380]                         if (muffled) 
[16:22:36.380]                           invokeRestart("muffleMessage")
[16:22:36.380]                       }
[16:22:36.380]                       else if (inherits(cond, "warning")) {
[16:22:36.380]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.380]                         if (muffled) 
[16:22:36.380]                           invokeRestart("muffleWarning")
[16:22:36.380]                       }
[16:22:36.380]                       else if (inherits(cond, "condition")) {
[16:22:36.380]                         if (!is.null(pattern)) {
[16:22:36.380]                           computeRestarts <- base::computeRestarts
[16:22:36.380]                           grepl <- base::grepl
[16:22:36.380]                           restarts <- computeRestarts(cond)
[16:22:36.380]                           for (restart in restarts) {
[16:22:36.380]                             name <- restart$name
[16:22:36.380]                             if (is.null(name)) 
[16:22:36.380]                               next
[16:22:36.380]                             if (!grepl(pattern, name)) 
[16:22:36.380]                               next
[16:22:36.380]                             invokeRestart(restart)
[16:22:36.380]                             muffled <- TRUE
[16:22:36.380]                             break
[16:22:36.380]                           }
[16:22:36.380]                         }
[16:22:36.380]                       }
[16:22:36.380]                       invisible(muffled)
[16:22:36.380]                     }
[16:22:36.380]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.380]                   }
[16:22:36.380]                 }
[16:22:36.380]             }
[16:22:36.380]         }))
[16:22:36.380]     }, error = function(ex) {
[16:22:36.380]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.380]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.380]                 ...future.rng), started = ...future.startTime, 
[16:22:36.380]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.380]             version = "1.8"), class = "FutureResult")
[16:22:36.380]     }, finally = {
[16:22:36.380]         if (!identical(...future.workdir, getwd())) 
[16:22:36.380]             setwd(...future.workdir)
[16:22:36.380]         {
[16:22:36.380]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.380]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.380]             }
[16:22:36.380]             base::options(...future.oldOptions)
[16:22:36.380]             if (.Platform$OS.type == "windows") {
[16:22:36.380]                 old_names <- names(...future.oldEnvVars)
[16:22:36.380]                 envs <- base::Sys.getenv()
[16:22:36.380]                 names <- names(envs)
[16:22:36.380]                 common <- intersect(names, old_names)
[16:22:36.380]                 added <- setdiff(names, old_names)
[16:22:36.380]                 removed <- setdiff(old_names, names)
[16:22:36.380]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.380]                   envs[common]]
[16:22:36.380]                 NAMES <- toupper(changed)
[16:22:36.380]                 args <- list()
[16:22:36.380]                 for (kk in seq_along(NAMES)) {
[16:22:36.380]                   name <- changed[[kk]]
[16:22:36.380]                   NAME <- NAMES[[kk]]
[16:22:36.380]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.380]                     next
[16:22:36.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.380]                 }
[16:22:36.380]                 NAMES <- toupper(added)
[16:22:36.380]                 for (kk in seq_along(NAMES)) {
[16:22:36.380]                   name <- added[[kk]]
[16:22:36.380]                   NAME <- NAMES[[kk]]
[16:22:36.380]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.380]                     next
[16:22:36.380]                   args[[name]] <- ""
[16:22:36.380]                 }
[16:22:36.380]                 NAMES <- toupper(removed)
[16:22:36.380]                 for (kk in seq_along(NAMES)) {
[16:22:36.380]                   name <- removed[[kk]]
[16:22:36.380]                   NAME <- NAMES[[kk]]
[16:22:36.380]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.380]                     next
[16:22:36.380]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.380]                 }
[16:22:36.380]                 if (length(args) > 0) 
[16:22:36.380]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.380]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.380]             }
[16:22:36.380]             else {
[16:22:36.380]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.380]             }
[16:22:36.380]             {
[16:22:36.380]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.380]                   0L) {
[16:22:36.380]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.380]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.380]                   base::options(opts)
[16:22:36.380]                 }
[16:22:36.380]                 {
[16:22:36.380]                   {
[16:22:36.380]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.380]                     NULL
[16:22:36.380]                   }
[16:22:36.380]                   options(future.plan = NULL)
[16:22:36.380]                   if (is.na(NA_character_)) 
[16:22:36.380]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.380]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.380]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.380]                     .init = FALSE)
[16:22:36.380]                 }
[16:22:36.380]             }
[16:22:36.380]         }
[16:22:36.380]     })
[16:22:36.380]     if (TRUE) {
[16:22:36.380]         base::sink(type = "output", split = FALSE)
[16:22:36.380]         if (TRUE) {
[16:22:36.380]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.380]         }
[16:22:36.380]         else {
[16:22:36.380]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.380]         }
[16:22:36.380]         base::close(...future.stdout)
[16:22:36.380]         ...future.stdout <- NULL
[16:22:36.380]     }
[16:22:36.380]     ...future.result$conditions <- ...future.conditions
[16:22:36.380]     ...future.result$finished <- base::Sys.time()
[16:22:36.380]     ...future.result
[16:22:36.380] }
[16:22:36.383] requestCore(): workers = 2
[16:22:36.384] MulticoreFuture started
[16:22:36.385] - Launch lazy future ... done
[16:22:36.385] run() for ‘MulticoreFuture’ ... done
[16:22:36.385] result() for MulticoreFuture ...
[16:22:36.385] plan(): Setting new future strategy stack:
[16:22:36.386] List of future strategies:
[16:22:36.386] 1. sequential:
[16:22:36.386]    - args: function (..., envir = parent.frame())
[16:22:36.386]    - tweaked: FALSE
[16:22:36.386]    - call: NULL
[16:22:36.386] plan(): nbrOfWorkers() = 1
[16:22:36.388] plan(): Setting new future strategy stack:
[16:22:36.389] List of future strategies:
[16:22:36.389] 1. multicore:
[16:22:36.389]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.389]    - tweaked: FALSE
[16:22:36.389]    - call: plan(strategy)
[16:22:36.394] plan(): nbrOfWorkers() = 2
[16:22:36.394] result() for MulticoreFuture ...
[16:22:36.395] result() for MulticoreFuture ... done
[16:22:36.395] result() for MulticoreFuture ... done
[16:22:36.395] result() for MulticoreFuture ...
[16:22:36.395] result() for MulticoreFuture ... done
[16:22:36.395] result() for MulticoreFuture ...
[16:22:36.395] result() for MulticoreFuture ... done
[1] 42
[16:22:36.395] result() for MulticoreFuture ...
[16:22:36.396] result() for MulticoreFuture ... done
- stdout = NA
[16:22:36.396] getGlobalsAndPackages() ...
[16:22:36.396] Searching for globals...
[16:22:36.403] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.403] Searching for globals ... DONE
[16:22:36.403] Resolving globals: FALSE
[16:22:36.404] 
[16:22:36.404] - packages: [1] ‘utils’
[16:22:36.404] getGlobalsAndPackages() ... DONE
[16:22:36.404] run() for ‘Future’ ...
[16:22:36.404] - state: ‘created’
[16:22:36.405] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.408] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.409] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.409]   - Field: ‘label’
[16:22:36.409]   - Field: ‘local’
[16:22:36.409]   - Field: ‘owner’
[16:22:36.409]   - Field: ‘envir’
[16:22:36.409]   - Field: ‘workers’
[16:22:36.409]   - Field: ‘packages’
[16:22:36.410]   - Field: ‘gc’
[16:22:36.410]   - Field: ‘job’
[16:22:36.410]   - Field: ‘conditions’
[16:22:36.410]   - Field: ‘expr’
[16:22:36.410]   - Field: ‘uuid’
[16:22:36.410]   - Field: ‘seed’
[16:22:36.410]   - Field: ‘version’
[16:22:36.410]   - Field: ‘result’
[16:22:36.410]   - Field: ‘asynchronous’
[16:22:36.411]   - Field: ‘calls’
[16:22:36.411]   - Field: ‘globals’
[16:22:36.411]   - Field: ‘stdout’
[16:22:36.411]   - Field: ‘earlySignal’
[16:22:36.411]   - Field: ‘lazy’
[16:22:36.411]   - Field: ‘state’
[16:22:36.411] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.411] - Launch lazy future ...
[16:22:36.412] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.412] Packages needed by future strategies (n = 0): <none>
[16:22:36.412] {
[16:22:36.412]     {
[16:22:36.412]         {
[16:22:36.412]             ...future.startTime <- base::Sys.time()
[16:22:36.412]             {
[16:22:36.412]                 {
[16:22:36.412]                   {
[16:22:36.412]                     {
[16:22:36.412]                       {
[16:22:36.412]                         base::local({
[16:22:36.412]                           has_future <- base::requireNamespace("future", 
[16:22:36.412]                             quietly = TRUE)
[16:22:36.412]                           if (has_future) {
[16:22:36.412]                             ns <- base::getNamespace("future")
[16:22:36.412]                             version <- ns[[".package"]][["version"]]
[16:22:36.412]                             if (is.null(version)) 
[16:22:36.412]                               version <- utils::packageVersion("future")
[16:22:36.412]                           }
[16:22:36.412]                           else {
[16:22:36.412]                             version <- NULL
[16:22:36.412]                           }
[16:22:36.412]                           if (!has_future || version < "1.8.0") {
[16:22:36.412]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.412]                               "", base::R.version$version.string), 
[16:22:36.412]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.412]                                 base::R.version$platform, 8 * 
[16:22:36.412]                                   base::.Machine$sizeof.pointer), 
[16:22:36.412]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.412]                                 "release", "version")], collapse = " "), 
[16:22:36.412]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.412]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.412]                               info)
[16:22:36.412]                             info <- base::paste(info, collapse = "; ")
[16:22:36.412]                             if (!has_future) {
[16:22:36.412]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.412]                                 info)
[16:22:36.412]                             }
[16:22:36.412]                             else {
[16:22:36.412]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.412]                                 info, version)
[16:22:36.412]                             }
[16:22:36.412]                             base::stop(msg)
[16:22:36.412]                           }
[16:22:36.412]                         })
[16:22:36.412]                       }
[16:22:36.412]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.412]                       base::options(mc.cores = 1L)
[16:22:36.412]                     }
[16:22:36.412]                     base::local({
[16:22:36.412]                       for (pkg in "utils") {
[16:22:36.412]                         base::loadNamespace(pkg)
[16:22:36.412]                         base::library(pkg, character.only = TRUE)
[16:22:36.412]                       }
[16:22:36.412]                     })
[16:22:36.412]                   }
[16:22:36.412]                   ...future.strategy.old <- future::plan("list")
[16:22:36.412]                   options(future.plan = NULL)
[16:22:36.412]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.412]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.412]                 }
[16:22:36.412]                 ...future.workdir <- getwd()
[16:22:36.412]             }
[16:22:36.412]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.412]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.412]         }
[16:22:36.412]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.412]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.412]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.412]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.412]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.412]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.412]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.412]             base::names(...future.oldOptions))
[16:22:36.412]     }
[16:22:36.412]     if (TRUE) {
[16:22:36.412]     }
[16:22:36.412]     else {
[16:22:36.412]         if (NA) {
[16:22:36.412]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.412]                 open = "w")
[16:22:36.412]         }
[16:22:36.412]         else {
[16:22:36.412]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.412]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.412]         }
[16:22:36.412]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.412]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.412]             base::sink(type = "output", split = FALSE)
[16:22:36.412]             base::close(...future.stdout)
[16:22:36.412]         }, add = TRUE)
[16:22:36.412]     }
[16:22:36.412]     ...future.frame <- base::sys.nframe()
[16:22:36.412]     ...future.conditions <- base::list()
[16:22:36.412]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.412]     if (FALSE) {
[16:22:36.412]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.412]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.412]     }
[16:22:36.412]     ...future.result <- base::tryCatch({
[16:22:36.412]         base::withCallingHandlers({
[16:22:36.412]             ...future.value <- base::withVisible(base::local({
[16:22:36.412]                 withCallingHandlers({
[16:22:36.412]                   {
[16:22:36.412]                     print(1:50)
[16:22:36.412]                     str(1:50)
[16:22:36.412]                     cat(letters, sep = "-")
[16:22:36.412]                     cat(1:6, collapse = "\n")
[16:22:36.412]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.412]                     42L
[16:22:36.412]                   }
[16:22:36.412]                 }, immediateCondition = function(cond) {
[16:22:36.412]                   save_rds <- function (object, pathname, ...) 
[16:22:36.412]                   {
[16:22:36.412]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.412]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.412]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.412]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.412]                         fi_tmp[["mtime"]])
[16:22:36.412]                     }
[16:22:36.412]                     tryCatch({
[16:22:36.412]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.412]                     }, error = function(ex) {
[16:22:36.412]                       msg <- conditionMessage(ex)
[16:22:36.412]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.412]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.412]                         fi_tmp[["mtime"]], msg)
[16:22:36.412]                       ex$message <- msg
[16:22:36.412]                       stop(ex)
[16:22:36.412]                     })
[16:22:36.412]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.412]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.412]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.412]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.412]                       fi <- file.info(pathname)
[16:22:36.412]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.412]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.412]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.412]                         fi[["size"]], fi[["mtime"]])
[16:22:36.412]                       stop(msg)
[16:22:36.412]                     }
[16:22:36.412]                     invisible(pathname)
[16:22:36.412]                   }
[16:22:36.412]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.412]                     rootPath = tempdir()) 
[16:22:36.412]                   {
[16:22:36.412]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.412]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.412]                       tmpdir = path, fileext = ".rds")
[16:22:36.412]                     save_rds(obj, file)
[16:22:36.412]                   }
[16:22:36.412]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.412]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.412]                   {
[16:22:36.412]                     inherits <- base::inherits
[16:22:36.412]                     invokeRestart <- base::invokeRestart
[16:22:36.412]                     is.null <- base::is.null
[16:22:36.412]                     muffled <- FALSE
[16:22:36.412]                     if (inherits(cond, "message")) {
[16:22:36.412]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.412]                       if (muffled) 
[16:22:36.412]                         invokeRestart("muffleMessage")
[16:22:36.412]                     }
[16:22:36.412]                     else if (inherits(cond, "warning")) {
[16:22:36.412]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.412]                       if (muffled) 
[16:22:36.412]                         invokeRestart("muffleWarning")
[16:22:36.412]                     }
[16:22:36.412]                     else if (inherits(cond, "condition")) {
[16:22:36.412]                       if (!is.null(pattern)) {
[16:22:36.412]                         computeRestarts <- base::computeRestarts
[16:22:36.412]                         grepl <- base::grepl
[16:22:36.412]                         restarts <- computeRestarts(cond)
[16:22:36.412]                         for (restart in restarts) {
[16:22:36.412]                           name <- restart$name
[16:22:36.412]                           if (is.null(name)) 
[16:22:36.412]                             next
[16:22:36.412]                           if (!grepl(pattern, name)) 
[16:22:36.412]                             next
[16:22:36.412]                           invokeRestart(restart)
[16:22:36.412]                           muffled <- TRUE
[16:22:36.412]                           break
[16:22:36.412]                         }
[16:22:36.412]                       }
[16:22:36.412]                     }
[16:22:36.412]                     invisible(muffled)
[16:22:36.412]                   }
[16:22:36.412]                   muffleCondition(cond)
[16:22:36.412]                 })
[16:22:36.412]             }))
[16:22:36.412]             future::FutureResult(value = ...future.value$value, 
[16:22:36.412]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.412]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.412]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.412]                     ...future.globalenv.names))
[16:22:36.412]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.412]         }, condition = base::local({
[16:22:36.412]             c <- base::c
[16:22:36.412]             inherits <- base::inherits
[16:22:36.412]             invokeRestart <- base::invokeRestart
[16:22:36.412]             length <- base::length
[16:22:36.412]             list <- base::list
[16:22:36.412]             seq.int <- base::seq.int
[16:22:36.412]             signalCondition <- base::signalCondition
[16:22:36.412]             sys.calls <- base::sys.calls
[16:22:36.412]             `[[` <- base::`[[`
[16:22:36.412]             `+` <- base::`+`
[16:22:36.412]             `<<-` <- base::`<<-`
[16:22:36.412]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.412]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.412]                   3L)]
[16:22:36.412]             }
[16:22:36.412]             function(cond) {
[16:22:36.412]                 is_error <- inherits(cond, "error")
[16:22:36.412]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.412]                   NULL)
[16:22:36.412]                 if (is_error) {
[16:22:36.412]                   sessionInformation <- function() {
[16:22:36.412]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.412]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.412]                       search = base::search(), system = base::Sys.info())
[16:22:36.412]                   }
[16:22:36.412]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.412]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.412]                     cond$call), session = sessionInformation(), 
[16:22:36.412]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.412]                   signalCondition(cond)
[16:22:36.412]                 }
[16:22:36.412]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.412]                 "immediateCondition"))) {
[16:22:36.412]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.412]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.412]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.412]                   if (TRUE && !signal) {
[16:22:36.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.412]                     {
[16:22:36.412]                       inherits <- base::inherits
[16:22:36.412]                       invokeRestart <- base::invokeRestart
[16:22:36.412]                       is.null <- base::is.null
[16:22:36.412]                       muffled <- FALSE
[16:22:36.412]                       if (inherits(cond, "message")) {
[16:22:36.412]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.412]                         if (muffled) 
[16:22:36.412]                           invokeRestart("muffleMessage")
[16:22:36.412]                       }
[16:22:36.412]                       else if (inherits(cond, "warning")) {
[16:22:36.412]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.412]                         if (muffled) 
[16:22:36.412]                           invokeRestart("muffleWarning")
[16:22:36.412]                       }
[16:22:36.412]                       else if (inherits(cond, "condition")) {
[16:22:36.412]                         if (!is.null(pattern)) {
[16:22:36.412]                           computeRestarts <- base::computeRestarts
[16:22:36.412]                           grepl <- base::grepl
[16:22:36.412]                           restarts <- computeRestarts(cond)
[16:22:36.412]                           for (restart in restarts) {
[16:22:36.412]                             name <- restart$name
[16:22:36.412]                             if (is.null(name)) 
[16:22:36.412]                               next
[16:22:36.412]                             if (!grepl(pattern, name)) 
[16:22:36.412]                               next
[16:22:36.412]                             invokeRestart(restart)
[16:22:36.412]                             muffled <- TRUE
[16:22:36.412]                             break
[16:22:36.412]                           }
[16:22:36.412]                         }
[16:22:36.412]                       }
[16:22:36.412]                       invisible(muffled)
[16:22:36.412]                     }
[16:22:36.412]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.412]                   }
[16:22:36.412]                 }
[16:22:36.412]                 else {
[16:22:36.412]                   if (TRUE) {
[16:22:36.412]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.412]                     {
[16:22:36.412]                       inherits <- base::inherits
[16:22:36.412]                       invokeRestart <- base::invokeRestart
[16:22:36.412]                       is.null <- base::is.null
[16:22:36.412]                       muffled <- FALSE
[16:22:36.412]                       if (inherits(cond, "message")) {
[16:22:36.412]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.412]                         if (muffled) 
[16:22:36.412]                           invokeRestart("muffleMessage")
[16:22:36.412]                       }
[16:22:36.412]                       else if (inherits(cond, "warning")) {
[16:22:36.412]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.412]                         if (muffled) 
[16:22:36.412]                           invokeRestart("muffleWarning")
[16:22:36.412]                       }
[16:22:36.412]                       else if (inherits(cond, "condition")) {
[16:22:36.412]                         if (!is.null(pattern)) {
[16:22:36.412]                           computeRestarts <- base::computeRestarts
[16:22:36.412]                           grepl <- base::grepl
[16:22:36.412]                           restarts <- computeRestarts(cond)
[16:22:36.412]                           for (restart in restarts) {
[16:22:36.412]                             name <- restart$name
[16:22:36.412]                             if (is.null(name)) 
[16:22:36.412]                               next
[16:22:36.412]                             if (!grepl(pattern, name)) 
[16:22:36.412]                               next
[16:22:36.412]                             invokeRestart(restart)
[16:22:36.412]                             muffled <- TRUE
[16:22:36.412]                             break
[16:22:36.412]                           }
[16:22:36.412]                         }
[16:22:36.412]                       }
[16:22:36.412]                       invisible(muffled)
[16:22:36.412]                     }
[16:22:36.412]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.412]                   }
[16:22:36.412]                 }
[16:22:36.412]             }
[16:22:36.412]         }))
[16:22:36.412]     }, error = function(ex) {
[16:22:36.412]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.412]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.412]                 ...future.rng), started = ...future.startTime, 
[16:22:36.412]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.412]             version = "1.8"), class = "FutureResult")
[16:22:36.412]     }, finally = {
[16:22:36.412]         if (!identical(...future.workdir, getwd())) 
[16:22:36.412]             setwd(...future.workdir)
[16:22:36.412]         {
[16:22:36.412]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.412]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.412]             }
[16:22:36.412]             base::options(...future.oldOptions)
[16:22:36.412]             if (.Platform$OS.type == "windows") {
[16:22:36.412]                 old_names <- names(...future.oldEnvVars)
[16:22:36.412]                 envs <- base::Sys.getenv()
[16:22:36.412]                 names <- names(envs)
[16:22:36.412]                 common <- intersect(names, old_names)
[16:22:36.412]                 added <- setdiff(names, old_names)
[16:22:36.412]                 removed <- setdiff(old_names, names)
[16:22:36.412]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.412]                   envs[common]]
[16:22:36.412]                 NAMES <- toupper(changed)
[16:22:36.412]                 args <- list()
[16:22:36.412]                 for (kk in seq_along(NAMES)) {
[16:22:36.412]                   name <- changed[[kk]]
[16:22:36.412]                   NAME <- NAMES[[kk]]
[16:22:36.412]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.412]                     next
[16:22:36.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.412]                 }
[16:22:36.412]                 NAMES <- toupper(added)
[16:22:36.412]                 for (kk in seq_along(NAMES)) {
[16:22:36.412]                   name <- added[[kk]]
[16:22:36.412]                   NAME <- NAMES[[kk]]
[16:22:36.412]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.412]                     next
[16:22:36.412]                   args[[name]] <- ""
[16:22:36.412]                 }
[16:22:36.412]                 NAMES <- toupper(removed)
[16:22:36.412]                 for (kk in seq_along(NAMES)) {
[16:22:36.412]                   name <- removed[[kk]]
[16:22:36.412]                   NAME <- NAMES[[kk]]
[16:22:36.412]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.412]                     next
[16:22:36.412]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.412]                 }
[16:22:36.412]                 if (length(args) > 0) 
[16:22:36.412]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.412]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.412]             }
[16:22:36.412]             else {
[16:22:36.412]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.412]             }
[16:22:36.412]             {
[16:22:36.412]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.412]                   0L) {
[16:22:36.412]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.412]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.412]                   base::options(opts)
[16:22:36.412]                 }
[16:22:36.412]                 {
[16:22:36.412]                   {
[16:22:36.412]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.412]                     NULL
[16:22:36.412]                   }
[16:22:36.412]                   options(future.plan = NULL)
[16:22:36.412]                   if (is.na(NA_character_)) 
[16:22:36.412]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.412]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.412]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.412]                     .init = FALSE)
[16:22:36.412]                 }
[16:22:36.412]             }
[16:22:36.412]         }
[16:22:36.412]     })
[16:22:36.412]     if (FALSE) {
[16:22:36.412]         base::sink(type = "output", split = FALSE)
[16:22:36.412]         if (NA) {
[16:22:36.412]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.412]         }
[16:22:36.412]         else {
[16:22:36.412]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.412]         }
[16:22:36.412]         base::close(...future.stdout)
[16:22:36.412]         ...future.stdout <- NULL
[16:22:36.412]     }
[16:22:36.412]     ...future.result$conditions <- ...future.conditions
[16:22:36.412]     ...future.result$finished <- base::Sys.time()
[16:22:36.412]     ...future.result
[16:22:36.412] }
[16:22:36.415] requestCore(): workers = 2
[16:22:36.416] MulticoreFuture started
[16:22:36.417] - Launch lazy future ... done
[16:22:36.417] run() for ‘MulticoreFuture’ ... done
[16:22:36.417] result() for MulticoreFuture ...
[16:22:36.418] plan(): Setting new future strategy stack:
[16:22:36.418] List of future strategies:
[16:22:36.418] 1. sequential:
[16:22:36.418]    - args: function (..., envir = parent.frame())
[16:22:36.418]    - tweaked: FALSE
[16:22:36.418]    - call: NULL
[16:22:36.419] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[16:22:36.423] plan(): Setting new future strategy stack:
[16:22:36.423] List of future strategies:
[16:22:36.423] 1. multicore:
[16:22:36.423]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.423]    - tweaked: FALSE
[16:22:36.423]    - call: plan(strategy)
[16:22:36.428] plan(): nbrOfWorkers() = 2
[16:22:36.428] result() for MulticoreFuture ...
[16:22:36.429] result() for MulticoreFuture ... done
[16:22:36.429] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:36"
 $ session_uuid: chr "2cfca225-8493-cf66-80dd-2bdbbbd61b44"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89905
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:36"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:36.438] result() for MulticoreFuture ...
[16:22:36.438] result() for MulticoreFuture ... done
[16:22:36.438] result() for MulticoreFuture ...
[16:22:36.439] result() for MulticoreFuture ... done
[16:22:36.439] getGlobalsAndPackages() ...
[16:22:36.439] Searching for globals...
[16:22:36.443] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:36.443] Searching for globals ... DONE
[16:22:36.443] Resolving globals: FALSE
[16:22:36.444] 
[16:22:36.444] - packages: [1] ‘utils’
[16:22:36.444] getGlobalsAndPackages() ... DONE
[16:22:36.444] run() for ‘Future’ ...
[16:22:36.444] - state: ‘created’
[16:22:36.445] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.451] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.451] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.451]   - Field: ‘label’
[16:22:36.451]   - Field: ‘local’
[16:22:36.451]   - Field: ‘owner’
[16:22:36.452]   - Field: ‘envir’
[16:22:36.452]   - Field: ‘workers’
[16:22:36.452]   - Field: ‘packages’
[16:22:36.452]   - Field: ‘gc’
[16:22:36.452]   - Field: ‘job’
[16:22:36.452]   - Field: ‘conditions’
[16:22:36.452]   - Field: ‘expr’
[16:22:36.452]   - Field: ‘uuid’
[16:22:36.453]   - Field: ‘seed’
[16:22:36.453]   - Field: ‘version’
[16:22:36.453]   - Field: ‘result’
[16:22:36.453]   - Field: ‘asynchronous’
[16:22:36.453]   - Field: ‘calls’
[16:22:36.453]   - Field: ‘globals’
[16:22:36.453]   - Field: ‘stdout’
[16:22:36.453]   - Field: ‘earlySignal’
[16:22:36.454]   - Field: ‘lazy’
[16:22:36.454]   - Field: ‘state’
[16:22:36.454] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.454] - Launch lazy future ...
[16:22:36.454] Packages needed by the future expression (n = 1): ‘utils’
[16:22:36.454] Packages needed by future strategies (n = 0): <none>
[16:22:36.455] {
[16:22:36.455]     {
[16:22:36.455]         {
[16:22:36.455]             ...future.startTime <- base::Sys.time()
[16:22:36.455]             {
[16:22:36.455]                 {
[16:22:36.455]                   {
[16:22:36.455]                     {
[16:22:36.455]                       {
[16:22:36.455]                         base::local({
[16:22:36.455]                           has_future <- base::requireNamespace("future", 
[16:22:36.455]                             quietly = TRUE)
[16:22:36.455]                           if (has_future) {
[16:22:36.455]                             ns <- base::getNamespace("future")
[16:22:36.455]                             version <- ns[[".package"]][["version"]]
[16:22:36.455]                             if (is.null(version)) 
[16:22:36.455]                               version <- utils::packageVersion("future")
[16:22:36.455]                           }
[16:22:36.455]                           else {
[16:22:36.455]                             version <- NULL
[16:22:36.455]                           }
[16:22:36.455]                           if (!has_future || version < "1.8.0") {
[16:22:36.455]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.455]                               "", base::R.version$version.string), 
[16:22:36.455]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:36.455]                                 base::R.version$platform, 8 * 
[16:22:36.455]                                   base::.Machine$sizeof.pointer), 
[16:22:36.455]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.455]                                 "release", "version")], collapse = " "), 
[16:22:36.455]                               hostname = base::Sys.info()[["nodename"]])
[16:22:36.455]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.455]                               info)
[16:22:36.455]                             info <- base::paste(info, collapse = "; ")
[16:22:36.455]                             if (!has_future) {
[16:22:36.455]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.455]                                 info)
[16:22:36.455]                             }
[16:22:36.455]                             else {
[16:22:36.455]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.455]                                 info, version)
[16:22:36.455]                             }
[16:22:36.455]                             base::stop(msg)
[16:22:36.455]                           }
[16:22:36.455]                         })
[16:22:36.455]                       }
[16:22:36.455]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.455]                       base::options(mc.cores = 1L)
[16:22:36.455]                     }
[16:22:36.455]                     base::local({
[16:22:36.455]                       for (pkg in "utils") {
[16:22:36.455]                         base::loadNamespace(pkg)
[16:22:36.455]                         base::library(pkg, character.only = TRUE)
[16:22:36.455]                       }
[16:22:36.455]                     })
[16:22:36.455]                   }
[16:22:36.455]                   ...future.strategy.old <- future::plan("list")
[16:22:36.455]                   options(future.plan = NULL)
[16:22:36.455]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.455]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.455]                 }
[16:22:36.455]                 ...future.workdir <- getwd()
[16:22:36.455]             }
[16:22:36.455]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.455]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.455]         }
[16:22:36.455]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.455]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.455]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.455]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.455]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.455]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.455]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.455]             base::names(...future.oldOptions))
[16:22:36.455]     }
[16:22:36.455]     if (TRUE) {
[16:22:36.455]     }
[16:22:36.455]     else {
[16:22:36.455]         if (NA) {
[16:22:36.455]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.455]                 open = "w")
[16:22:36.455]         }
[16:22:36.455]         else {
[16:22:36.455]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.455]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.455]         }
[16:22:36.455]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.455]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.455]             base::sink(type = "output", split = FALSE)
[16:22:36.455]             base::close(...future.stdout)
[16:22:36.455]         }, add = TRUE)
[16:22:36.455]     }
[16:22:36.455]     ...future.frame <- base::sys.nframe()
[16:22:36.455]     ...future.conditions <- base::list()
[16:22:36.455]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.455]     if (FALSE) {
[16:22:36.455]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.455]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.455]     }
[16:22:36.455]     ...future.result <- base::tryCatch({
[16:22:36.455]         base::withCallingHandlers({
[16:22:36.455]             ...future.value <- base::withVisible(base::local({
[16:22:36.455]                 withCallingHandlers({
[16:22:36.455]                   {
[16:22:36.455]                     print(1:50)
[16:22:36.455]                     str(1:50)
[16:22:36.455]                     cat(letters, sep = "-")
[16:22:36.455]                     cat(1:6, collapse = "\n")
[16:22:36.455]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:36.455]                     42L
[16:22:36.455]                   }
[16:22:36.455]                 }, immediateCondition = function(cond) {
[16:22:36.455]                   save_rds <- function (object, pathname, ...) 
[16:22:36.455]                   {
[16:22:36.455]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.455]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.455]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.455]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.455]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.455]                         fi_tmp[["mtime"]])
[16:22:36.455]                     }
[16:22:36.455]                     tryCatch({
[16:22:36.455]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.455]                     }, error = function(ex) {
[16:22:36.455]                       msg <- conditionMessage(ex)
[16:22:36.455]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.455]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.455]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.455]                         fi_tmp[["mtime"]], msg)
[16:22:36.455]                       ex$message <- msg
[16:22:36.455]                       stop(ex)
[16:22:36.455]                     })
[16:22:36.455]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.455]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.455]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.455]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.455]                       fi <- file.info(pathname)
[16:22:36.455]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.455]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.455]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.455]                         fi[["size"]], fi[["mtime"]])
[16:22:36.455]                       stop(msg)
[16:22:36.455]                     }
[16:22:36.455]                     invisible(pathname)
[16:22:36.455]                   }
[16:22:36.455]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.455]                     rootPath = tempdir()) 
[16:22:36.455]                   {
[16:22:36.455]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.455]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.455]                       tmpdir = path, fileext = ".rds")
[16:22:36.455]                     save_rds(obj, file)
[16:22:36.455]                   }
[16:22:36.455]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.455]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.455]                   {
[16:22:36.455]                     inherits <- base::inherits
[16:22:36.455]                     invokeRestart <- base::invokeRestart
[16:22:36.455]                     is.null <- base::is.null
[16:22:36.455]                     muffled <- FALSE
[16:22:36.455]                     if (inherits(cond, "message")) {
[16:22:36.455]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.455]                       if (muffled) 
[16:22:36.455]                         invokeRestart("muffleMessage")
[16:22:36.455]                     }
[16:22:36.455]                     else if (inherits(cond, "warning")) {
[16:22:36.455]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.455]                       if (muffled) 
[16:22:36.455]                         invokeRestart("muffleWarning")
[16:22:36.455]                     }
[16:22:36.455]                     else if (inherits(cond, "condition")) {
[16:22:36.455]                       if (!is.null(pattern)) {
[16:22:36.455]                         computeRestarts <- base::computeRestarts
[16:22:36.455]                         grepl <- base::grepl
[16:22:36.455]                         restarts <- computeRestarts(cond)
[16:22:36.455]                         for (restart in restarts) {
[16:22:36.455]                           name <- restart$name
[16:22:36.455]                           if (is.null(name)) 
[16:22:36.455]                             next
[16:22:36.455]                           if (!grepl(pattern, name)) 
[16:22:36.455]                             next
[16:22:36.455]                           invokeRestart(restart)
[16:22:36.455]                           muffled <- TRUE
[16:22:36.455]                           break
[16:22:36.455]                         }
[16:22:36.455]                       }
[16:22:36.455]                     }
[16:22:36.455]                     invisible(muffled)
[16:22:36.455]                   }
[16:22:36.455]                   muffleCondition(cond)
[16:22:36.455]                 })
[16:22:36.455]             }))
[16:22:36.455]             future::FutureResult(value = ...future.value$value, 
[16:22:36.455]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.455]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.455]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.455]                     ...future.globalenv.names))
[16:22:36.455]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.455]         }, condition = base::local({
[16:22:36.455]             c <- base::c
[16:22:36.455]             inherits <- base::inherits
[16:22:36.455]             invokeRestart <- base::invokeRestart
[16:22:36.455]             length <- base::length
[16:22:36.455]             list <- base::list
[16:22:36.455]             seq.int <- base::seq.int
[16:22:36.455]             signalCondition <- base::signalCondition
[16:22:36.455]             sys.calls <- base::sys.calls
[16:22:36.455]             `[[` <- base::`[[`
[16:22:36.455]             `+` <- base::`+`
[16:22:36.455]             `<<-` <- base::`<<-`
[16:22:36.455]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.455]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.455]                   3L)]
[16:22:36.455]             }
[16:22:36.455]             function(cond) {
[16:22:36.455]                 is_error <- inherits(cond, "error")
[16:22:36.455]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.455]                   NULL)
[16:22:36.455]                 if (is_error) {
[16:22:36.455]                   sessionInformation <- function() {
[16:22:36.455]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.455]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.455]                       search = base::search(), system = base::Sys.info())
[16:22:36.455]                   }
[16:22:36.455]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.455]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.455]                     cond$call), session = sessionInformation(), 
[16:22:36.455]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.455]                   signalCondition(cond)
[16:22:36.455]                 }
[16:22:36.455]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.455]                 "immediateCondition"))) {
[16:22:36.455]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.455]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.455]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.455]                   if (TRUE && !signal) {
[16:22:36.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.455]                     {
[16:22:36.455]                       inherits <- base::inherits
[16:22:36.455]                       invokeRestart <- base::invokeRestart
[16:22:36.455]                       is.null <- base::is.null
[16:22:36.455]                       muffled <- FALSE
[16:22:36.455]                       if (inherits(cond, "message")) {
[16:22:36.455]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.455]                         if (muffled) 
[16:22:36.455]                           invokeRestart("muffleMessage")
[16:22:36.455]                       }
[16:22:36.455]                       else if (inherits(cond, "warning")) {
[16:22:36.455]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.455]                         if (muffled) 
[16:22:36.455]                           invokeRestart("muffleWarning")
[16:22:36.455]                       }
[16:22:36.455]                       else if (inherits(cond, "condition")) {
[16:22:36.455]                         if (!is.null(pattern)) {
[16:22:36.455]                           computeRestarts <- base::computeRestarts
[16:22:36.455]                           grepl <- base::grepl
[16:22:36.455]                           restarts <- computeRestarts(cond)
[16:22:36.455]                           for (restart in restarts) {
[16:22:36.455]                             name <- restart$name
[16:22:36.455]                             if (is.null(name)) 
[16:22:36.455]                               next
[16:22:36.455]                             if (!grepl(pattern, name)) 
[16:22:36.455]                               next
[16:22:36.455]                             invokeRestart(restart)
[16:22:36.455]                             muffled <- TRUE
[16:22:36.455]                             break
[16:22:36.455]                           }
[16:22:36.455]                         }
[16:22:36.455]                       }
[16:22:36.455]                       invisible(muffled)
[16:22:36.455]                     }
[16:22:36.455]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.455]                   }
[16:22:36.455]                 }
[16:22:36.455]                 else {
[16:22:36.455]                   if (TRUE) {
[16:22:36.455]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.455]                     {
[16:22:36.455]                       inherits <- base::inherits
[16:22:36.455]                       invokeRestart <- base::invokeRestart
[16:22:36.455]                       is.null <- base::is.null
[16:22:36.455]                       muffled <- FALSE
[16:22:36.455]                       if (inherits(cond, "message")) {
[16:22:36.455]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.455]                         if (muffled) 
[16:22:36.455]                           invokeRestart("muffleMessage")
[16:22:36.455]                       }
[16:22:36.455]                       else if (inherits(cond, "warning")) {
[16:22:36.455]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.455]                         if (muffled) 
[16:22:36.455]                           invokeRestart("muffleWarning")
[16:22:36.455]                       }
[16:22:36.455]                       else if (inherits(cond, "condition")) {
[16:22:36.455]                         if (!is.null(pattern)) {
[16:22:36.455]                           computeRestarts <- base::computeRestarts
[16:22:36.455]                           grepl <- base::grepl
[16:22:36.455]                           restarts <- computeRestarts(cond)
[16:22:36.455]                           for (restart in restarts) {
[16:22:36.455]                             name <- restart$name
[16:22:36.455]                             if (is.null(name)) 
[16:22:36.455]                               next
[16:22:36.455]                             if (!grepl(pattern, name)) 
[16:22:36.455]                               next
[16:22:36.455]                             invokeRestart(restart)
[16:22:36.455]                             muffled <- TRUE
[16:22:36.455]                             break
[16:22:36.455]                           }
[16:22:36.455]                         }
[16:22:36.455]                       }
[16:22:36.455]                       invisible(muffled)
[16:22:36.455]                     }
[16:22:36.455]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.455]                   }
[16:22:36.455]                 }
[16:22:36.455]             }
[16:22:36.455]         }))
[16:22:36.455]     }, error = function(ex) {
[16:22:36.455]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.455]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.455]                 ...future.rng), started = ...future.startTime, 
[16:22:36.455]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.455]             version = "1.8"), class = "FutureResult")
[16:22:36.455]     }, finally = {
[16:22:36.455]         if (!identical(...future.workdir, getwd())) 
[16:22:36.455]             setwd(...future.workdir)
[16:22:36.455]         {
[16:22:36.455]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.455]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.455]             }
[16:22:36.455]             base::options(...future.oldOptions)
[16:22:36.455]             if (.Platform$OS.type == "windows") {
[16:22:36.455]                 old_names <- names(...future.oldEnvVars)
[16:22:36.455]                 envs <- base::Sys.getenv()
[16:22:36.455]                 names <- names(envs)
[16:22:36.455]                 common <- intersect(names, old_names)
[16:22:36.455]                 added <- setdiff(names, old_names)
[16:22:36.455]                 removed <- setdiff(old_names, names)
[16:22:36.455]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.455]                   envs[common]]
[16:22:36.455]                 NAMES <- toupper(changed)
[16:22:36.455]                 args <- list()
[16:22:36.455]                 for (kk in seq_along(NAMES)) {
[16:22:36.455]                   name <- changed[[kk]]
[16:22:36.455]                   NAME <- NAMES[[kk]]
[16:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.455]                     next
[16:22:36.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.455]                 }
[16:22:36.455]                 NAMES <- toupper(added)
[16:22:36.455]                 for (kk in seq_along(NAMES)) {
[16:22:36.455]                   name <- added[[kk]]
[16:22:36.455]                   NAME <- NAMES[[kk]]
[16:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.455]                     next
[16:22:36.455]                   args[[name]] <- ""
[16:22:36.455]                 }
[16:22:36.455]                 NAMES <- toupper(removed)
[16:22:36.455]                 for (kk in seq_along(NAMES)) {
[16:22:36.455]                   name <- removed[[kk]]
[16:22:36.455]                   NAME <- NAMES[[kk]]
[16:22:36.455]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.455]                     next
[16:22:36.455]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.455]                 }
[16:22:36.455]                 if (length(args) > 0) 
[16:22:36.455]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.455]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.455]             }
[16:22:36.455]             else {
[16:22:36.455]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.455]             }
[16:22:36.455]             {
[16:22:36.455]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.455]                   0L) {
[16:22:36.455]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.455]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.455]                   base::options(opts)
[16:22:36.455]                 }
[16:22:36.455]                 {
[16:22:36.455]                   {
[16:22:36.455]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.455]                     NULL
[16:22:36.455]                   }
[16:22:36.455]                   options(future.plan = NULL)
[16:22:36.455]                   if (is.na(NA_character_)) 
[16:22:36.455]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.455]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.455]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.455]                     .init = FALSE)
[16:22:36.455]                 }
[16:22:36.455]             }
[16:22:36.455]         }
[16:22:36.455]     })
[16:22:36.455]     if (FALSE) {
[16:22:36.455]         base::sink(type = "output", split = FALSE)
[16:22:36.455]         if (NA) {
[16:22:36.455]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.455]         }
[16:22:36.455]         else {
[16:22:36.455]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.455]         }
[16:22:36.455]         base::close(...future.stdout)
[16:22:36.455]         ...future.stdout <- NULL
[16:22:36.455]     }
[16:22:36.455]     ...future.result$conditions <- ...future.conditions
[16:22:36.455]     ...future.result$finished <- base::Sys.time()
[16:22:36.455]     ...future.result
[16:22:36.455] }
[16:22:36.457] requestCore(): workers = 2
[16:22:36.459] MulticoreFuture started
[16:22:36.459] - Launch lazy future ... done
[16:22:36.459] run() for ‘MulticoreFuture’ ... done
[16:22:36.460] result() for MulticoreFuture ...
[16:22:36.461] plan(): Setting new future strategy stack:
[16:22:36.461] List of future strategies:
[16:22:36.461] 1. sequential:
[16:22:36.461]    - args: function (..., envir = parent.frame())
[16:22:36.461]    - tweaked: FALSE
[16:22:36.461]    - call: NULL
[16:22:36.462] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[16:22:36.465] plan(): Setting new future strategy stack:
[16:22:36.465] List of future strategies:
[16:22:36.465] 1. multicore:
[16:22:36.465]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.465]    - tweaked: FALSE
[16:22:36.465]    - call: plan(strategy)
[16:22:36.470] plan(): nbrOfWorkers() = 2
[16:22:36.471] result() for MulticoreFuture ...
[16:22:36.471] result() for MulticoreFuture ... done
[16:22:36.471] result() for MulticoreFuture ... done
[16:22:36.472] result() for MulticoreFuture ...
[16:22:36.472] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:36.472] getGlobalsAndPackages() ...
[16:22:36.472] Searching for globals...
[16:22:36.473] - globals found: [1] ‘print’
[16:22:36.473] Searching for globals ... DONE
[16:22:36.474] Resolving globals: FALSE
[16:22:36.474] 
[16:22:36.474] 
[16:22:36.474] getGlobalsAndPackages() ... DONE
[16:22:36.475] run() for ‘Future’ ...
[16:22:36.475] - state: ‘created’
[16:22:36.475] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:22:36.479] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:36.479] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:22:36.479]   - Field: ‘label’
[16:22:36.480]   - Field: ‘local’
[16:22:36.480]   - Field: ‘owner’
[16:22:36.480]   - Field: ‘envir’
[16:22:36.480]   - Field: ‘workers’
[16:22:36.480]   - Field: ‘packages’
[16:22:36.480]   - Field: ‘gc’
[16:22:36.480]   - Field: ‘job’
[16:22:36.480]   - Field: ‘conditions’
[16:22:36.481]   - Field: ‘expr’
[16:22:36.481]   - Field: ‘uuid’
[16:22:36.481]   - Field: ‘seed’
[16:22:36.481]   - Field: ‘version’
[16:22:36.481]   - Field: ‘result’
[16:22:36.481]   - Field: ‘asynchronous’
[16:22:36.481]   - Field: ‘calls’
[16:22:36.481]   - Field: ‘globals’
[16:22:36.481]   - Field: ‘stdout’
[16:22:36.482]   - Field: ‘earlySignal’
[16:22:36.482]   - Field: ‘lazy’
[16:22:36.482]   - Field: ‘state’
[16:22:36.482] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:22:36.482] - Launch lazy future ...
[16:22:36.482] Packages needed by the future expression (n = 0): <none>
[16:22:36.482] Packages needed by future strategies (n = 0): <none>
[16:22:36.483] {
[16:22:36.483]     {
[16:22:36.483]         {
[16:22:36.483]             ...future.startTime <- base::Sys.time()
[16:22:36.483]             {
[16:22:36.483]                 {
[16:22:36.483]                   {
[16:22:36.483]                     {
[16:22:36.483]                       base::local({
[16:22:36.483]                         has_future <- base::requireNamespace("future", 
[16:22:36.483]                           quietly = TRUE)
[16:22:36.483]                         if (has_future) {
[16:22:36.483]                           ns <- base::getNamespace("future")
[16:22:36.483]                           version <- ns[[".package"]][["version"]]
[16:22:36.483]                           if (is.null(version)) 
[16:22:36.483]                             version <- utils::packageVersion("future")
[16:22:36.483]                         }
[16:22:36.483]                         else {
[16:22:36.483]                           version <- NULL
[16:22:36.483]                         }
[16:22:36.483]                         if (!has_future || version < "1.8.0") {
[16:22:36.483]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:36.483]                             "", base::R.version$version.string), 
[16:22:36.483]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:36.483]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:36.483]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:36.483]                               "release", "version")], collapse = " "), 
[16:22:36.483]                             hostname = base::Sys.info()[["nodename"]])
[16:22:36.483]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:36.483]                             info)
[16:22:36.483]                           info <- base::paste(info, collapse = "; ")
[16:22:36.483]                           if (!has_future) {
[16:22:36.483]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:36.483]                               info)
[16:22:36.483]                           }
[16:22:36.483]                           else {
[16:22:36.483]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:36.483]                               info, version)
[16:22:36.483]                           }
[16:22:36.483]                           base::stop(msg)
[16:22:36.483]                         }
[16:22:36.483]                       })
[16:22:36.483]                     }
[16:22:36.483]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:36.483]                     base::options(mc.cores = 1L)
[16:22:36.483]                   }
[16:22:36.483]                   ...future.strategy.old <- future::plan("list")
[16:22:36.483]                   options(future.plan = NULL)
[16:22:36.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:36.483]                 }
[16:22:36.483]                 ...future.workdir <- getwd()
[16:22:36.483]             }
[16:22:36.483]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:36.483]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:36.483]         }
[16:22:36.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:36.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:36.483]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:36.483]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:36.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:36.483]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:36.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:36.483]             base::names(...future.oldOptions))
[16:22:36.483]     }
[16:22:36.483]     if (FALSE) {
[16:22:36.483]     }
[16:22:36.483]     else {
[16:22:36.483]         if (TRUE) {
[16:22:36.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:36.483]                 open = "w")
[16:22:36.483]         }
[16:22:36.483]         else {
[16:22:36.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:36.483]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:36.483]         }
[16:22:36.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:36.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:36.483]             base::sink(type = "output", split = FALSE)
[16:22:36.483]             base::close(...future.stdout)
[16:22:36.483]         }, add = TRUE)
[16:22:36.483]     }
[16:22:36.483]     ...future.frame <- base::sys.nframe()
[16:22:36.483]     ...future.conditions <- base::list()
[16:22:36.483]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:36.483]     if (FALSE) {
[16:22:36.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:36.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:36.483]     }
[16:22:36.483]     ...future.result <- base::tryCatch({
[16:22:36.483]         base::withCallingHandlers({
[16:22:36.483]             ...future.value <- base::withVisible(base::local({
[16:22:36.483]                 withCallingHandlers({
[16:22:36.483]                   print(42)
[16:22:36.483]                 }, immediateCondition = function(cond) {
[16:22:36.483]                   save_rds <- function (object, pathname, ...) 
[16:22:36.483]                   {
[16:22:36.483]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:22:36.483]                     if (file_test("-f", pathname_tmp)) {
[16:22:36.483]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.483]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:22:36.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.483]                         fi_tmp[["mtime"]])
[16:22:36.483]                     }
[16:22:36.483]                     tryCatch({
[16:22:36.483]                       saveRDS(object, file = pathname_tmp, ...)
[16:22:36.483]                     }, error = function(ex) {
[16:22:36.483]                       msg <- conditionMessage(ex)
[16:22:36.483]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.483]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:22:36.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.483]                         fi_tmp[["mtime"]], msg)
[16:22:36.483]                       ex$message <- msg
[16:22:36.483]                       stop(ex)
[16:22:36.483]                     })
[16:22:36.483]                     stopifnot(file_test("-f", pathname_tmp))
[16:22:36.483]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:22:36.483]                     if (!res || file_test("-f", pathname_tmp)) {
[16:22:36.483]                       fi_tmp <- file.info(pathname_tmp)
[16:22:36.483]                       fi <- file.info(pathname)
[16:22:36.483]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:22:36.483]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:22:36.483]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:22:36.483]                         fi[["size"]], fi[["mtime"]])
[16:22:36.483]                       stop(msg)
[16:22:36.483]                     }
[16:22:36.483]                     invisible(pathname)
[16:22:36.483]                   }
[16:22:36.483]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:22:36.483]                     rootPath = tempdir()) 
[16:22:36.483]                   {
[16:22:36.483]                     obj <- list(time = Sys.time(), condition = cond)
[16:22:36.483]                     file <- tempfile(pattern = class(cond)[1], 
[16:22:36.483]                       tmpdir = path, fileext = ".rds")
[16:22:36.483]                     save_rds(obj, file)
[16:22:36.483]                   }
[16:22:36.483]                   saveImmediateCondition(cond, path = "/tmp/Rtmpl3wvr2/.future/immediateConditions")
[16:22:36.483]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.483]                   {
[16:22:36.483]                     inherits <- base::inherits
[16:22:36.483]                     invokeRestart <- base::invokeRestart
[16:22:36.483]                     is.null <- base::is.null
[16:22:36.483]                     muffled <- FALSE
[16:22:36.483]                     if (inherits(cond, "message")) {
[16:22:36.483]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:36.483]                       if (muffled) 
[16:22:36.483]                         invokeRestart("muffleMessage")
[16:22:36.483]                     }
[16:22:36.483]                     else if (inherits(cond, "warning")) {
[16:22:36.483]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:36.483]                       if (muffled) 
[16:22:36.483]                         invokeRestart("muffleWarning")
[16:22:36.483]                     }
[16:22:36.483]                     else if (inherits(cond, "condition")) {
[16:22:36.483]                       if (!is.null(pattern)) {
[16:22:36.483]                         computeRestarts <- base::computeRestarts
[16:22:36.483]                         grepl <- base::grepl
[16:22:36.483]                         restarts <- computeRestarts(cond)
[16:22:36.483]                         for (restart in restarts) {
[16:22:36.483]                           name <- restart$name
[16:22:36.483]                           if (is.null(name)) 
[16:22:36.483]                             next
[16:22:36.483]                           if (!grepl(pattern, name)) 
[16:22:36.483]                             next
[16:22:36.483]                           invokeRestart(restart)
[16:22:36.483]                           muffled <- TRUE
[16:22:36.483]                           break
[16:22:36.483]                         }
[16:22:36.483]                       }
[16:22:36.483]                     }
[16:22:36.483]                     invisible(muffled)
[16:22:36.483]                   }
[16:22:36.483]                   muffleCondition(cond)
[16:22:36.483]                 })
[16:22:36.483]             }))
[16:22:36.483]             future::FutureResult(value = ...future.value$value, 
[16:22:36.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.483]                   ...future.rng), globalenv = if (FALSE) 
[16:22:36.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:36.483]                     ...future.globalenv.names))
[16:22:36.483]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:36.483]         }, condition = base::local({
[16:22:36.483]             c <- base::c
[16:22:36.483]             inherits <- base::inherits
[16:22:36.483]             invokeRestart <- base::invokeRestart
[16:22:36.483]             length <- base::length
[16:22:36.483]             list <- base::list
[16:22:36.483]             seq.int <- base::seq.int
[16:22:36.483]             signalCondition <- base::signalCondition
[16:22:36.483]             sys.calls <- base::sys.calls
[16:22:36.483]             `[[` <- base::`[[`
[16:22:36.483]             `+` <- base::`+`
[16:22:36.483]             `<<-` <- base::`<<-`
[16:22:36.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:36.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:36.483]                   3L)]
[16:22:36.483]             }
[16:22:36.483]             function(cond) {
[16:22:36.483]                 is_error <- inherits(cond, "error")
[16:22:36.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:36.483]                   NULL)
[16:22:36.483]                 if (is_error) {
[16:22:36.483]                   sessionInformation <- function() {
[16:22:36.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:36.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:36.483]                       search = base::search(), system = base::Sys.info())
[16:22:36.483]                   }
[16:22:36.483]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:36.483]                     cond$call), session = sessionInformation(), 
[16:22:36.483]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:36.483]                   signalCondition(cond)
[16:22:36.483]                 }
[16:22:36.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:36.483]                 "immediateCondition"))) {
[16:22:36.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:36.483]                   ...future.conditions[[length(...future.conditions) + 
[16:22:36.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:36.483]                   if (TRUE && !signal) {
[16:22:36.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.483]                     {
[16:22:36.483]                       inherits <- base::inherits
[16:22:36.483]                       invokeRestart <- base::invokeRestart
[16:22:36.483]                       is.null <- base::is.null
[16:22:36.483]                       muffled <- FALSE
[16:22:36.483]                       if (inherits(cond, "message")) {
[16:22:36.483]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.483]                         if (muffled) 
[16:22:36.483]                           invokeRestart("muffleMessage")
[16:22:36.483]                       }
[16:22:36.483]                       else if (inherits(cond, "warning")) {
[16:22:36.483]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.483]                         if (muffled) 
[16:22:36.483]                           invokeRestart("muffleWarning")
[16:22:36.483]                       }
[16:22:36.483]                       else if (inherits(cond, "condition")) {
[16:22:36.483]                         if (!is.null(pattern)) {
[16:22:36.483]                           computeRestarts <- base::computeRestarts
[16:22:36.483]                           grepl <- base::grepl
[16:22:36.483]                           restarts <- computeRestarts(cond)
[16:22:36.483]                           for (restart in restarts) {
[16:22:36.483]                             name <- restart$name
[16:22:36.483]                             if (is.null(name)) 
[16:22:36.483]                               next
[16:22:36.483]                             if (!grepl(pattern, name)) 
[16:22:36.483]                               next
[16:22:36.483]                             invokeRestart(restart)
[16:22:36.483]                             muffled <- TRUE
[16:22:36.483]                             break
[16:22:36.483]                           }
[16:22:36.483]                         }
[16:22:36.483]                       }
[16:22:36.483]                       invisible(muffled)
[16:22:36.483]                     }
[16:22:36.483]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.483]                   }
[16:22:36.483]                 }
[16:22:36.483]                 else {
[16:22:36.483]                   if (TRUE) {
[16:22:36.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:36.483]                     {
[16:22:36.483]                       inherits <- base::inherits
[16:22:36.483]                       invokeRestart <- base::invokeRestart
[16:22:36.483]                       is.null <- base::is.null
[16:22:36.483]                       muffled <- FALSE
[16:22:36.483]                       if (inherits(cond, "message")) {
[16:22:36.483]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:36.483]                         if (muffled) 
[16:22:36.483]                           invokeRestart("muffleMessage")
[16:22:36.483]                       }
[16:22:36.483]                       else if (inherits(cond, "warning")) {
[16:22:36.483]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:36.483]                         if (muffled) 
[16:22:36.483]                           invokeRestart("muffleWarning")
[16:22:36.483]                       }
[16:22:36.483]                       else if (inherits(cond, "condition")) {
[16:22:36.483]                         if (!is.null(pattern)) {
[16:22:36.483]                           computeRestarts <- base::computeRestarts
[16:22:36.483]                           grepl <- base::grepl
[16:22:36.483]                           restarts <- computeRestarts(cond)
[16:22:36.483]                           for (restart in restarts) {
[16:22:36.483]                             name <- restart$name
[16:22:36.483]                             if (is.null(name)) 
[16:22:36.483]                               next
[16:22:36.483]                             if (!grepl(pattern, name)) 
[16:22:36.483]                               next
[16:22:36.483]                             invokeRestart(restart)
[16:22:36.483]                             muffled <- TRUE
[16:22:36.483]                             break
[16:22:36.483]                           }
[16:22:36.483]                         }
[16:22:36.483]                       }
[16:22:36.483]                       invisible(muffled)
[16:22:36.483]                     }
[16:22:36.483]                     muffleCondition(cond, pattern = "^muffle")
[16:22:36.483]                   }
[16:22:36.483]                 }
[16:22:36.483]             }
[16:22:36.483]         }))
[16:22:36.483]     }, error = function(ex) {
[16:22:36.483]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:36.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:36.483]                 ...future.rng), started = ...future.startTime, 
[16:22:36.483]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:36.483]             version = "1.8"), class = "FutureResult")
[16:22:36.483]     }, finally = {
[16:22:36.483]         if (!identical(...future.workdir, getwd())) 
[16:22:36.483]             setwd(...future.workdir)
[16:22:36.483]         {
[16:22:36.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:36.483]                 ...future.oldOptions$nwarnings <- NULL
[16:22:36.483]             }
[16:22:36.483]             base::options(...future.oldOptions)
[16:22:36.483]             if (.Platform$OS.type == "windows") {
[16:22:36.483]                 old_names <- names(...future.oldEnvVars)
[16:22:36.483]                 envs <- base::Sys.getenv()
[16:22:36.483]                 names <- names(envs)
[16:22:36.483]                 common <- intersect(names, old_names)
[16:22:36.483]                 added <- setdiff(names, old_names)
[16:22:36.483]                 removed <- setdiff(old_names, names)
[16:22:36.483]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:36.483]                   envs[common]]
[16:22:36.483]                 NAMES <- toupper(changed)
[16:22:36.483]                 args <- list()
[16:22:36.483]                 for (kk in seq_along(NAMES)) {
[16:22:36.483]                   name <- changed[[kk]]
[16:22:36.483]                   NAME <- NAMES[[kk]]
[16:22:36.483]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.483]                     next
[16:22:36.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.483]                 }
[16:22:36.483]                 NAMES <- toupper(added)
[16:22:36.483]                 for (kk in seq_along(NAMES)) {
[16:22:36.483]                   name <- added[[kk]]
[16:22:36.483]                   NAME <- NAMES[[kk]]
[16:22:36.483]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.483]                     next
[16:22:36.483]                   args[[name]] <- ""
[16:22:36.483]                 }
[16:22:36.483]                 NAMES <- toupper(removed)
[16:22:36.483]                 for (kk in seq_along(NAMES)) {
[16:22:36.483]                   name <- removed[[kk]]
[16:22:36.483]                   NAME <- NAMES[[kk]]
[16:22:36.483]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:36.483]                     next
[16:22:36.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:36.483]                 }
[16:22:36.483]                 if (length(args) > 0) 
[16:22:36.483]                   base::do.call(base::Sys.setenv, args = args)
[16:22:36.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:36.483]             }
[16:22:36.483]             else {
[16:22:36.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:36.483]             }
[16:22:36.483]             {
[16:22:36.483]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:36.483]                   0L) {
[16:22:36.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:36.483]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:36.483]                   base::options(opts)
[16:22:36.483]                 }
[16:22:36.483]                 {
[16:22:36.483]                   {
[16:22:36.483]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:36.483]                     NULL
[16:22:36.483]                   }
[16:22:36.483]                   options(future.plan = NULL)
[16:22:36.483]                   if (is.na(NA_character_)) 
[16:22:36.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:36.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:36.483]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:36.483]                     .init = FALSE)
[16:22:36.483]                 }
[16:22:36.483]             }
[16:22:36.483]         }
[16:22:36.483]     })
[16:22:36.483]     if (TRUE) {
[16:22:36.483]         base::sink(type = "output", split = FALSE)
[16:22:36.483]         if (TRUE) {
[16:22:36.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:36.483]         }
[16:22:36.483]         else {
[16:22:36.483]             ...future.result["stdout"] <- base::list(NULL)
[16:22:36.483]         }
[16:22:36.483]         base::close(...future.stdout)
[16:22:36.483]         ...future.stdout <- NULL
[16:22:36.483]     }
[16:22:36.483]     ...future.result$conditions <- ...future.conditions
[16:22:36.483]     ...future.result$finished <- base::Sys.time()
[16:22:36.483]     ...future.result
[16:22:36.483] }
[16:22:36.486] requestCore(): workers = 2
[16:22:36.488] MulticoreFuture started
[16:22:36.488] - Launch lazy future ... done
[16:22:36.488] run() for ‘MulticoreFuture’ ... done
[16:22:36.489] result() for MulticoreFuture ...
[16:22:36.489] plan(): Setting new future strategy stack:
[16:22:36.489] List of future strategies:
[16:22:36.489] 1. sequential:
[16:22:36.489]    - args: function (..., envir = parent.frame())
[16:22:36.489]    - tweaked: FALSE
[16:22:36.489]    - call: NULL
[16:22:36.490] plan(): nbrOfWorkers() = 1
[16:22:36.492] plan(): Setting new future strategy stack:
[16:22:36.492] List of future strategies:
[16:22:36.492] 1. multicore:
[16:22:36.492]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:22:36.492]    - tweaked: FALSE
[16:22:36.492]    - call: plan(strategy)
[16:22:36.498] plan(): nbrOfWorkers() = 2
[16:22:36.499] result() for MulticoreFuture ...
[16:22:36.499] result() for MulticoreFuture ... done
[16:22:36.499] result() for MulticoreFuture ... done
[16:22:36.499] result() for MulticoreFuture ...
[16:22:36.499] result() for MulticoreFuture ... done
[16:22:36.499] result() for MulticoreFuture ...
[16:22:36.499] result() for MulticoreFuture ... done
[1] 42
[16:22:36.500] result() for MulticoreFuture ...
[16:22:36.500] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[16:22:36.501] plan(): Setting new future strategy stack:
[16:22:36.501] List of future strategies:
[16:22:36.501] 1. multisession:
[16:22:36.501]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:36.501]    - tweaked: FALSE
[16:22:36.501]    - call: plan(strategy)
[16:22:36.501] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:22:36.501] multisession:
[16:22:36.501] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:22:36.501] - tweaked: FALSE
[16:22:36.501] - call: plan(strategy)
[16:22:36.508] getGlobalsAndPackages() ...
[16:22:36.509] Not searching for globals
[16:22:36.509] - globals: [0] <none>
[16:22:36.509] getGlobalsAndPackages() ... DONE
[16:22:36.510] [local output] makeClusterPSOCK() ...
[16:22:36.554] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:22:36.555] [local output] Base port: 11077
[16:22:36.555] [local output] Getting setup options for 2 cluster nodes ...
[16:22:36.555] [local output]  - Node 1 of 2 ...
[16:22:36.556] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:36.556] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpl3wvr2/worker.rank=1.parallelly.parent=89851.15efb7669cd0.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpl3wvr2/worker.rank=1.parallelly.parent=89851.15efb7669cd0.pid")'’
[16:22:36.747] - Possible to infer worker's PID: TRUE
[16:22:36.747] [local output] Rscript port: 11077

[16:22:36.748] [local output]  - Node 2 of 2 ...
[16:22:36.748] [local output] localMachine=TRUE => revtunnel=FALSE

[16:22:36.749] [local output] Rscript port: 11077

[16:22:36.749] [local output] Getting setup options for 2 cluster nodes ... done
[16:22:36.749] [local output]  - Parallel setup requested for some PSOCK nodes
[16:22:36.750] [local output] Setting up PSOCK nodes in parallel
[16:22:36.750] List of 36
[16:22:36.750]  $ worker          : chr "localhost"
[16:22:36.750]   ..- attr(*, "localhost")= logi TRUE
[16:22:36.750]  $ master          : chr "localhost"
[16:22:36.750]  $ port            : int 11077
[16:22:36.750]  $ connectTimeout  : num 120
[16:22:36.750]  $ timeout         : num 2592000
[16:22:36.750]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:22:36.750]  $ homogeneous     : logi TRUE
[16:22:36.750]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:22:36.750]  $ rscript_envs    : NULL
[16:22:36.750]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:36.750]  $ rscript_startup : NULL
[16:22:36.750]  $ rscript_sh      : chr "sh"
[16:22:36.750]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:36.750]  $ methods         : logi TRUE
[16:22:36.750]  $ socketOptions   : chr "no-delay"
[16:22:36.750]  $ useXDR          : logi FALSE
[16:22:36.750]  $ outfile         : chr "/dev/null"
[16:22:36.750]  $ renice          : int NA
[16:22:36.750]  $ rshcmd          : NULL
[16:22:36.750]  $ user            : chr(0) 
[16:22:36.750]  $ revtunnel       : logi FALSE
[16:22:36.750]  $ rshlogfile      : NULL
[16:22:36.750]  $ rshopts         : chr(0) 
[16:22:36.750]  $ rank            : int 1
[16:22:36.750]  $ manual          : logi FALSE
[16:22:36.750]  $ dryrun          : logi FALSE
[16:22:36.750]  $ quiet           : logi FALSE
[16:22:36.750]  $ setup_strategy  : chr "parallel"
[16:22:36.750]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:36.750]  $ pidfile         : chr "/tmp/Rtmpl3wvr2/worker.rank=1.parallelly.parent=89851.15efb7669cd0.pid"
[16:22:36.750]  $ rshcmd_label    : NULL
[16:22:36.750]  $ rsh_call        : NULL
[16:22:36.750]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:22:36.750]  $ localMachine    : logi TRUE
[16:22:36.750]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:22:36.750]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:22:36.750]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:22:36.750]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:22:36.750]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:22:36.750]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:22:36.750]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:22:36.750]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:22:36.750]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:22:36.750]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:22:36.750]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:22:36.750]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:22:36.750]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:22:36.750]  $ arguments       :List of 28
[16:22:36.750]   ..$ worker          : chr "localhost"
[16:22:36.750]   ..$ master          : NULL
[16:22:36.750]   ..$ port            : int 11077
[16:22:36.750]   ..$ connectTimeout  : num 120
[16:22:36.750]   ..$ timeout         : num 2592000
[16:22:36.750]   ..$ rscript         : NULL
[16:22:36.750]   ..$ homogeneous     : NULL
[16:22:36.750]   ..$ rscript_args    : NULL
[16:22:36.750]   ..$ rscript_envs    : NULL
[16:22:36.750]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:22:36.750]   ..$ rscript_startup : NULL
[16:22:36.750]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:22:36.750]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:22:36.750]   ..$ methods         : logi TRUE
[16:22:36.750]   ..$ socketOptions   : chr "no-delay"
[16:22:36.750]   ..$ useXDR          : logi FALSE
[16:22:36.750]   ..$ outfile         : chr "/dev/null"
[16:22:36.750]   ..$ renice          : int NA
[16:22:36.750]   ..$ rshcmd          : NULL
[16:22:36.750]   ..$ user            : NULL
[16:22:36.750]   ..$ revtunnel       : logi NA
[16:22:36.750]   ..$ rshlogfile      : NULL
[16:22:36.750]   ..$ rshopts         : NULL
[16:22:36.750]   ..$ rank            : int 1
[16:22:36.750]   ..$ manual          : logi FALSE
[16:22:36.750]   ..$ dryrun          : logi FALSE
[16:22:36.750]   ..$ quiet           : logi FALSE
[16:22:36.750]   ..$ setup_strategy  : chr "parallel"
[16:22:36.750]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:22:36.766] [local output] System call to launch all workers:
[16:22:36.767] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpl3wvr2/worker.rank=1.parallelly.parent=89851.15efb7669cd0.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11077 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:22:36.767] [local output] Starting PSOCK main server
[16:22:36.772] [local output] Workers launched
[16:22:36.773] [local output] Waiting for workers to connect back
[16:22:36.773]  - [local output] 0 workers out of 2 ready
[16:22:37.016]  - [local output] 0 workers out of 2 ready
[16:22:37.017]  - [local output] 1 workers out of 2 ready
[16:22:37.017]  - [local output] 2 workers out of 2 ready
[16:22:37.017] [local output] Launching of workers completed
[16:22:37.017] [local output] Collecting session information from workers
[16:22:37.018] [local output]  - Worker #1 of 2
[16:22:37.019] [local output]  - Worker #2 of 2
[16:22:37.019] [local output] makeClusterPSOCK() ... done
[16:22:37.030] Packages needed by the future expression (n = 0): <none>
[16:22:37.030] Packages needed by future strategies (n = 0): <none>
[16:22:37.031] {
[16:22:37.031]     {
[16:22:37.031]         {
[16:22:37.031]             ...future.startTime <- base::Sys.time()
[16:22:37.031]             {
[16:22:37.031]                 {
[16:22:37.031]                   {
[16:22:37.031]                     {
[16:22:37.031]                       base::local({
[16:22:37.031]                         has_future <- base::requireNamespace("future", 
[16:22:37.031]                           quietly = TRUE)
[16:22:37.031]                         if (has_future) {
[16:22:37.031]                           ns <- base::getNamespace("future")
[16:22:37.031]                           version <- ns[[".package"]][["version"]]
[16:22:37.031]                           if (is.null(version)) 
[16:22:37.031]                             version <- utils::packageVersion("future")
[16:22:37.031]                         }
[16:22:37.031]                         else {
[16:22:37.031]                           version <- NULL
[16:22:37.031]                         }
[16:22:37.031]                         if (!has_future || version < "1.8.0") {
[16:22:37.031]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.031]                             "", base::R.version$version.string), 
[16:22:37.031]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:37.031]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:37.031]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.031]                               "release", "version")], collapse = " "), 
[16:22:37.031]                             hostname = base::Sys.info()[["nodename"]])
[16:22:37.031]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.031]                             info)
[16:22:37.031]                           info <- base::paste(info, collapse = "; ")
[16:22:37.031]                           if (!has_future) {
[16:22:37.031]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.031]                               info)
[16:22:37.031]                           }
[16:22:37.031]                           else {
[16:22:37.031]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.031]                               info, version)
[16:22:37.031]                           }
[16:22:37.031]                           base::stop(msg)
[16:22:37.031]                         }
[16:22:37.031]                       })
[16:22:37.031]                     }
[16:22:37.031]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.031]                     base::options(mc.cores = 1L)
[16:22:37.031]                   }
[16:22:37.031]                   ...future.strategy.old <- future::plan("list")
[16:22:37.031]                   options(future.plan = NULL)
[16:22:37.031]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.031]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.031]                 }
[16:22:37.031]                 ...future.workdir <- getwd()
[16:22:37.031]             }
[16:22:37.031]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.031]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.031]         }
[16:22:37.031]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.031]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.031]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.031]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.031]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.031]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.031]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.031]             base::names(...future.oldOptions))
[16:22:37.031]     }
[16:22:37.031]     if (FALSE) {
[16:22:37.031]     }
[16:22:37.031]     else {
[16:22:37.031]         if (TRUE) {
[16:22:37.031]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.031]                 open = "w")
[16:22:37.031]         }
[16:22:37.031]         else {
[16:22:37.031]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.031]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.031]         }
[16:22:37.031]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.031]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.031]             base::sink(type = "output", split = FALSE)
[16:22:37.031]             base::close(...future.stdout)
[16:22:37.031]         }, add = TRUE)
[16:22:37.031]     }
[16:22:37.031]     ...future.frame <- base::sys.nframe()
[16:22:37.031]     ...future.conditions <- base::list()
[16:22:37.031]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.031]     if (FALSE) {
[16:22:37.031]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.031]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.031]     }
[16:22:37.031]     ...future.result <- base::tryCatch({
[16:22:37.031]         base::withCallingHandlers({
[16:22:37.031]             ...future.value <- base::withVisible(base::local({
[16:22:37.031]                 ...future.makeSendCondition <- base::local({
[16:22:37.031]                   sendCondition <- NULL
[16:22:37.031]                   function(frame = 1L) {
[16:22:37.031]                     if (is.function(sendCondition)) 
[16:22:37.031]                       return(sendCondition)
[16:22:37.031]                     ns <- getNamespace("parallel")
[16:22:37.031]                     if (exists("sendData", mode = "function", 
[16:22:37.031]                       envir = ns)) {
[16:22:37.031]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.031]                         envir = ns)
[16:22:37.031]                       envir <- sys.frame(frame)
[16:22:37.031]                       master <- NULL
[16:22:37.031]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.031]                         !identical(envir, emptyenv())) {
[16:22:37.031]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.031]                           inherits = FALSE)) {
[16:22:37.031]                           master <- get("master", mode = "list", 
[16:22:37.031]                             envir = envir, inherits = FALSE)
[16:22:37.031]                           if (inherits(master, c("SOCKnode", 
[16:22:37.031]                             "SOCK0node"))) {
[16:22:37.031]                             sendCondition <<- function(cond) {
[16:22:37.031]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.031]                                 success = TRUE)
[16:22:37.031]                               parallel_sendData(master, data)
[16:22:37.031]                             }
[16:22:37.031]                             return(sendCondition)
[16:22:37.031]                           }
[16:22:37.031]                         }
[16:22:37.031]                         frame <- frame + 1L
[16:22:37.031]                         envir <- sys.frame(frame)
[16:22:37.031]                       }
[16:22:37.031]                     }
[16:22:37.031]                     sendCondition <<- function(cond) NULL
[16:22:37.031]                   }
[16:22:37.031]                 })
[16:22:37.031]                 withCallingHandlers({
[16:22:37.031]                   NA
[16:22:37.031]                 }, immediateCondition = function(cond) {
[16:22:37.031]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.031]                   sendCondition(cond)
[16:22:37.031]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.031]                   {
[16:22:37.031]                     inherits <- base::inherits
[16:22:37.031]                     invokeRestart <- base::invokeRestart
[16:22:37.031]                     is.null <- base::is.null
[16:22:37.031]                     muffled <- FALSE
[16:22:37.031]                     if (inherits(cond, "message")) {
[16:22:37.031]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.031]                       if (muffled) 
[16:22:37.031]                         invokeRestart("muffleMessage")
[16:22:37.031]                     }
[16:22:37.031]                     else if (inherits(cond, "warning")) {
[16:22:37.031]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.031]                       if (muffled) 
[16:22:37.031]                         invokeRestart("muffleWarning")
[16:22:37.031]                     }
[16:22:37.031]                     else if (inherits(cond, "condition")) {
[16:22:37.031]                       if (!is.null(pattern)) {
[16:22:37.031]                         computeRestarts <- base::computeRestarts
[16:22:37.031]                         grepl <- base::grepl
[16:22:37.031]                         restarts <- computeRestarts(cond)
[16:22:37.031]                         for (restart in restarts) {
[16:22:37.031]                           name <- restart$name
[16:22:37.031]                           if (is.null(name)) 
[16:22:37.031]                             next
[16:22:37.031]                           if (!grepl(pattern, name)) 
[16:22:37.031]                             next
[16:22:37.031]                           invokeRestart(restart)
[16:22:37.031]                           muffled <- TRUE
[16:22:37.031]                           break
[16:22:37.031]                         }
[16:22:37.031]                       }
[16:22:37.031]                     }
[16:22:37.031]                     invisible(muffled)
[16:22:37.031]                   }
[16:22:37.031]                   muffleCondition(cond)
[16:22:37.031]                 })
[16:22:37.031]             }))
[16:22:37.031]             future::FutureResult(value = ...future.value$value, 
[16:22:37.031]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.031]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.031]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.031]                     ...future.globalenv.names))
[16:22:37.031]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.031]         }, condition = base::local({
[16:22:37.031]             c <- base::c
[16:22:37.031]             inherits <- base::inherits
[16:22:37.031]             invokeRestart <- base::invokeRestart
[16:22:37.031]             length <- base::length
[16:22:37.031]             list <- base::list
[16:22:37.031]             seq.int <- base::seq.int
[16:22:37.031]             signalCondition <- base::signalCondition
[16:22:37.031]             sys.calls <- base::sys.calls
[16:22:37.031]             `[[` <- base::`[[`
[16:22:37.031]             `+` <- base::`+`
[16:22:37.031]             `<<-` <- base::`<<-`
[16:22:37.031]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.031]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.031]                   3L)]
[16:22:37.031]             }
[16:22:37.031]             function(cond) {
[16:22:37.031]                 is_error <- inherits(cond, "error")
[16:22:37.031]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.031]                   NULL)
[16:22:37.031]                 if (is_error) {
[16:22:37.031]                   sessionInformation <- function() {
[16:22:37.031]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.031]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.031]                       search = base::search(), system = base::Sys.info())
[16:22:37.031]                   }
[16:22:37.031]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.031]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.031]                     cond$call), session = sessionInformation(), 
[16:22:37.031]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.031]                   signalCondition(cond)
[16:22:37.031]                 }
[16:22:37.031]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.031]                 "immediateCondition"))) {
[16:22:37.031]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.031]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.031]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.031]                   if (TRUE && !signal) {
[16:22:37.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.031]                     {
[16:22:37.031]                       inherits <- base::inherits
[16:22:37.031]                       invokeRestart <- base::invokeRestart
[16:22:37.031]                       is.null <- base::is.null
[16:22:37.031]                       muffled <- FALSE
[16:22:37.031]                       if (inherits(cond, "message")) {
[16:22:37.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.031]                         if (muffled) 
[16:22:37.031]                           invokeRestart("muffleMessage")
[16:22:37.031]                       }
[16:22:37.031]                       else if (inherits(cond, "warning")) {
[16:22:37.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.031]                         if (muffled) 
[16:22:37.031]                           invokeRestart("muffleWarning")
[16:22:37.031]                       }
[16:22:37.031]                       else if (inherits(cond, "condition")) {
[16:22:37.031]                         if (!is.null(pattern)) {
[16:22:37.031]                           computeRestarts <- base::computeRestarts
[16:22:37.031]                           grepl <- base::grepl
[16:22:37.031]                           restarts <- computeRestarts(cond)
[16:22:37.031]                           for (restart in restarts) {
[16:22:37.031]                             name <- restart$name
[16:22:37.031]                             if (is.null(name)) 
[16:22:37.031]                               next
[16:22:37.031]                             if (!grepl(pattern, name)) 
[16:22:37.031]                               next
[16:22:37.031]                             invokeRestart(restart)
[16:22:37.031]                             muffled <- TRUE
[16:22:37.031]                             break
[16:22:37.031]                           }
[16:22:37.031]                         }
[16:22:37.031]                       }
[16:22:37.031]                       invisible(muffled)
[16:22:37.031]                     }
[16:22:37.031]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.031]                   }
[16:22:37.031]                 }
[16:22:37.031]                 else {
[16:22:37.031]                   if (TRUE) {
[16:22:37.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.031]                     {
[16:22:37.031]                       inherits <- base::inherits
[16:22:37.031]                       invokeRestart <- base::invokeRestart
[16:22:37.031]                       is.null <- base::is.null
[16:22:37.031]                       muffled <- FALSE
[16:22:37.031]                       if (inherits(cond, "message")) {
[16:22:37.031]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.031]                         if (muffled) 
[16:22:37.031]                           invokeRestart("muffleMessage")
[16:22:37.031]                       }
[16:22:37.031]                       else if (inherits(cond, "warning")) {
[16:22:37.031]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.031]                         if (muffled) 
[16:22:37.031]                           invokeRestart("muffleWarning")
[16:22:37.031]                       }
[16:22:37.031]                       else if (inherits(cond, "condition")) {
[16:22:37.031]                         if (!is.null(pattern)) {
[16:22:37.031]                           computeRestarts <- base::computeRestarts
[16:22:37.031]                           grepl <- base::grepl
[16:22:37.031]                           restarts <- computeRestarts(cond)
[16:22:37.031]                           for (restart in restarts) {
[16:22:37.031]                             name <- restart$name
[16:22:37.031]                             if (is.null(name)) 
[16:22:37.031]                               next
[16:22:37.031]                             if (!grepl(pattern, name)) 
[16:22:37.031]                               next
[16:22:37.031]                             invokeRestart(restart)
[16:22:37.031]                             muffled <- TRUE
[16:22:37.031]                             break
[16:22:37.031]                           }
[16:22:37.031]                         }
[16:22:37.031]                       }
[16:22:37.031]                       invisible(muffled)
[16:22:37.031]                     }
[16:22:37.031]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.031]                   }
[16:22:37.031]                 }
[16:22:37.031]             }
[16:22:37.031]         }))
[16:22:37.031]     }, error = function(ex) {
[16:22:37.031]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.031]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.031]                 ...future.rng), started = ...future.startTime, 
[16:22:37.031]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.031]             version = "1.8"), class = "FutureResult")
[16:22:37.031]     }, finally = {
[16:22:37.031]         if (!identical(...future.workdir, getwd())) 
[16:22:37.031]             setwd(...future.workdir)
[16:22:37.031]         {
[16:22:37.031]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.031]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.031]             }
[16:22:37.031]             base::options(...future.oldOptions)
[16:22:37.031]             if (.Platform$OS.type == "windows") {
[16:22:37.031]                 old_names <- names(...future.oldEnvVars)
[16:22:37.031]                 envs <- base::Sys.getenv()
[16:22:37.031]                 names <- names(envs)
[16:22:37.031]                 common <- intersect(names, old_names)
[16:22:37.031]                 added <- setdiff(names, old_names)
[16:22:37.031]                 removed <- setdiff(old_names, names)
[16:22:37.031]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.031]                   envs[common]]
[16:22:37.031]                 NAMES <- toupper(changed)
[16:22:37.031]                 args <- list()
[16:22:37.031]                 for (kk in seq_along(NAMES)) {
[16:22:37.031]                   name <- changed[[kk]]
[16:22:37.031]                   NAME <- NAMES[[kk]]
[16:22:37.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.031]                     next
[16:22:37.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.031]                 }
[16:22:37.031]                 NAMES <- toupper(added)
[16:22:37.031]                 for (kk in seq_along(NAMES)) {
[16:22:37.031]                   name <- added[[kk]]
[16:22:37.031]                   NAME <- NAMES[[kk]]
[16:22:37.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.031]                     next
[16:22:37.031]                   args[[name]] <- ""
[16:22:37.031]                 }
[16:22:37.031]                 NAMES <- toupper(removed)
[16:22:37.031]                 for (kk in seq_along(NAMES)) {
[16:22:37.031]                   name <- removed[[kk]]
[16:22:37.031]                   NAME <- NAMES[[kk]]
[16:22:37.031]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.031]                     next
[16:22:37.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.031]                 }
[16:22:37.031]                 if (length(args) > 0) 
[16:22:37.031]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.031]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.031]             }
[16:22:37.031]             else {
[16:22:37.031]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.031]             }
[16:22:37.031]             {
[16:22:37.031]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.031]                   0L) {
[16:22:37.031]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.031]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.031]                   base::options(opts)
[16:22:37.031]                 }
[16:22:37.031]                 {
[16:22:37.031]                   {
[16:22:37.031]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.031]                     NULL
[16:22:37.031]                   }
[16:22:37.031]                   options(future.plan = NULL)
[16:22:37.031]                   if (is.na(NA_character_)) 
[16:22:37.031]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.031]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.031]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.031]                     .init = FALSE)
[16:22:37.031]                 }
[16:22:37.031]             }
[16:22:37.031]         }
[16:22:37.031]     })
[16:22:37.031]     if (TRUE) {
[16:22:37.031]         base::sink(type = "output", split = FALSE)
[16:22:37.031]         if (TRUE) {
[16:22:37.031]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.031]         }
[16:22:37.031]         else {
[16:22:37.031]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.031]         }
[16:22:37.031]         base::close(...future.stdout)
[16:22:37.031]         ...future.stdout <- NULL
[16:22:37.031]     }
[16:22:37.031]     ...future.result$conditions <- ...future.conditions
[16:22:37.031]     ...future.result$finished <- base::Sys.time()
[16:22:37.031]     ...future.result
[16:22:37.031] }
[16:22:37.083] MultisessionFuture started
[16:22:37.083] result() for ClusterFuture ...
[16:22:37.084] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.084] - Validating connection of MultisessionFuture
[16:22:37.116] - received message: FutureResult
[16:22:37.116] - Received FutureResult
[16:22:37.117] - Erased future from FutureRegistry
[16:22:37.117] result() for ClusterFuture ...
[16:22:37.117] - result already collected: FutureResult
[16:22:37.117] result() for ClusterFuture ... done
[16:22:37.117] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.117] result() for ClusterFuture ... done
[16:22:37.117] result() for ClusterFuture ...
[16:22:37.117] - result already collected: FutureResult
[16:22:37.118] result() for ClusterFuture ... done
[16:22:37.118] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:22:37.122] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[16:22:37.122] getGlobalsAndPackages() ...
[16:22:37.122] Searching for globals...
[16:22:37.126] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.126] Searching for globals ... DONE
[16:22:37.126] Resolving globals: FALSE
[16:22:37.127] 
[16:22:37.127] - packages: [1] ‘utils’
[16:22:37.127] getGlobalsAndPackages() ... DONE
[16:22:37.128] run() for ‘Future’ ...
[16:22:37.128] - state: ‘created’
[16:22:37.128] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.142] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.142] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.142]   - Field: ‘node’
[16:22:37.142]   - Field: ‘label’
[16:22:37.143]   - Field: ‘local’
[16:22:37.143]   - Field: ‘owner’
[16:22:37.143]   - Field: ‘envir’
[16:22:37.143]   - Field: ‘workers’
[16:22:37.143]   - Field: ‘packages’
[16:22:37.143]   - Field: ‘gc’
[16:22:37.143]   - Field: ‘conditions’
[16:22:37.143]   - Field: ‘persistent’
[16:22:37.143]   - Field: ‘expr’
[16:22:37.143]   - Field: ‘uuid’
[16:22:37.144]   - Field: ‘seed’
[16:22:37.144]   - Field: ‘version’
[16:22:37.144]   - Field: ‘result’
[16:22:37.144]   - Field: ‘asynchronous’
[16:22:37.144]   - Field: ‘calls’
[16:22:37.144]   - Field: ‘globals’
[16:22:37.144]   - Field: ‘stdout’
[16:22:37.144]   - Field: ‘earlySignal’
[16:22:37.145]   - Field: ‘lazy’
[16:22:37.145]   - Field: ‘state’
[16:22:37.145] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.145] - Launch lazy future ...
[16:22:37.145] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.145] Packages needed by future strategies (n = 0): <none>
[16:22:37.146] {
[16:22:37.146]     {
[16:22:37.146]         {
[16:22:37.146]             ...future.startTime <- base::Sys.time()
[16:22:37.146]             {
[16:22:37.146]                 {
[16:22:37.146]                   {
[16:22:37.146]                     {
[16:22:37.146]                       {
[16:22:37.146]                         base::local({
[16:22:37.146]                           has_future <- base::requireNamespace("future", 
[16:22:37.146]                             quietly = TRUE)
[16:22:37.146]                           if (has_future) {
[16:22:37.146]                             ns <- base::getNamespace("future")
[16:22:37.146]                             version <- ns[[".package"]][["version"]]
[16:22:37.146]                             if (is.null(version)) 
[16:22:37.146]                               version <- utils::packageVersion("future")
[16:22:37.146]                           }
[16:22:37.146]                           else {
[16:22:37.146]                             version <- NULL
[16:22:37.146]                           }
[16:22:37.146]                           if (!has_future || version < "1.8.0") {
[16:22:37.146]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.146]                               "", base::R.version$version.string), 
[16:22:37.146]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.146]                                 base::R.version$platform, 8 * 
[16:22:37.146]                                   base::.Machine$sizeof.pointer), 
[16:22:37.146]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.146]                                 "release", "version")], collapse = " "), 
[16:22:37.146]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.146]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.146]                               info)
[16:22:37.146]                             info <- base::paste(info, collapse = "; ")
[16:22:37.146]                             if (!has_future) {
[16:22:37.146]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.146]                                 info)
[16:22:37.146]                             }
[16:22:37.146]                             else {
[16:22:37.146]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.146]                                 info, version)
[16:22:37.146]                             }
[16:22:37.146]                             base::stop(msg)
[16:22:37.146]                           }
[16:22:37.146]                         })
[16:22:37.146]                       }
[16:22:37.146]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.146]                       base::options(mc.cores = 1L)
[16:22:37.146]                     }
[16:22:37.146]                     base::local({
[16:22:37.146]                       for (pkg in "utils") {
[16:22:37.146]                         base::loadNamespace(pkg)
[16:22:37.146]                         base::library(pkg, character.only = TRUE)
[16:22:37.146]                       }
[16:22:37.146]                     })
[16:22:37.146]                   }
[16:22:37.146]                   ...future.strategy.old <- future::plan("list")
[16:22:37.146]                   options(future.plan = NULL)
[16:22:37.146]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.146]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.146]                 }
[16:22:37.146]                 ...future.workdir <- getwd()
[16:22:37.146]             }
[16:22:37.146]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.146]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.146]         }
[16:22:37.146]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.146]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.146]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.146]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.146]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.146]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.146]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.146]             base::names(...future.oldOptions))
[16:22:37.146]     }
[16:22:37.146]     if (FALSE) {
[16:22:37.146]     }
[16:22:37.146]     else {
[16:22:37.146]         if (TRUE) {
[16:22:37.146]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.146]                 open = "w")
[16:22:37.146]         }
[16:22:37.146]         else {
[16:22:37.146]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.146]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.146]         }
[16:22:37.146]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.146]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.146]             base::sink(type = "output", split = FALSE)
[16:22:37.146]             base::close(...future.stdout)
[16:22:37.146]         }, add = TRUE)
[16:22:37.146]     }
[16:22:37.146]     ...future.frame <- base::sys.nframe()
[16:22:37.146]     ...future.conditions <- base::list()
[16:22:37.146]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.146]     if (FALSE) {
[16:22:37.146]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.146]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.146]     }
[16:22:37.146]     ...future.result <- base::tryCatch({
[16:22:37.146]         base::withCallingHandlers({
[16:22:37.146]             ...future.value <- base::withVisible(base::local({
[16:22:37.146]                 ...future.makeSendCondition <- base::local({
[16:22:37.146]                   sendCondition <- NULL
[16:22:37.146]                   function(frame = 1L) {
[16:22:37.146]                     if (is.function(sendCondition)) 
[16:22:37.146]                       return(sendCondition)
[16:22:37.146]                     ns <- getNamespace("parallel")
[16:22:37.146]                     if (exists("sendData", mode = "function", 
[16:22:37.146]                       envir = ns)) {
[16:22:37.146]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.146]                         envir = ns)
[16:22:37.146]                       envir <- sys.frame(frame)
[16:22:37.146]                       master <- NULL
[16:22:37.146]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.146]                         !identical(envir, emptyenv())) {
[16:22:37.146]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.146]                           inherits = FALSE)) {
[16:22:37.146]                           master <- get("master", mode = "list", 
[16:22:37.146]                             envir = envir, inherits = FALSE)
[16:22:37.146]                           if (inherits(master, c("SOCKnode", 
[16:22:37.146]                             "SOCK0node"))) {
[16:22:37.146]                             sendCondition <<- function(cond) {
[16:22:37.146]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.146]                                 success = TRUE)
[16:22:37.146]                               parallel_sendData(master, data)
[16:22:37.146]                             }
[16:22:37.146]                             return(sendCondition)
[16:22:37.146]                           }
[16:22:37.146]                         }
[16:22:37.146]                         frame <- frame + 1L
[16:22:37.146]                         envir <- sys.frame(frame)
[16:22:37.146]                       }
[16:22:37.146]                     }
[16:22:37.146]                     sendCondition <<- function(cond) NULL
[16:22:37.146]                   }
[16:22:37.146]                 })
[16:22:37.146]                 withCallingHandlers({
[16:22:37.146]                   {
[16:22:37.146]                     print(1:50)
[16:22:37.146]                     str(1:50)
[16:22:37.146]                     cat(letters, sep = "-")
[16:22:37.146]                     cat(1:6, collapse = "\n")
[16:22:37.146]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.146]                     42L
[16:22:37.146]                   }
[16:22:37.146]                 }, immediateCondition = function(cond) {
[16:22:37.146]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.146]                   sendCondition(cond)
[16:22:37.146]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.146]                   {
[16:22:37.146]                     inherits <- base::inherits
[16:22:37.146]                     invokeRestart <- base::invokeRestart
[16:22:37.146]                     is.null <- base::is.null
[16:22:37.146]                     muffled <- FALSE
[16:22:37.146]                     if (inherits(cond, "message")) {
[16:22:37.146]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.146]                       if (muffled) 
[16:22:37.146]                         invokeRestart("muffleMessage")
[16:22:37.146]                     }
[16:22:37.146]                     else if (inherits(cond, "warning")) {
[16:22:37.146]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.146]                       if (muffled) 
[16:22:37.146]                         invokeRestart("muffleWarning")
[16:22:37.146]                     }
[16:22:37.146]                     else if (inherits(cond, "condition")) {
[16:22:37.146]                       if (!is.null(pattern)) {
[16:22:37.146]                         computeRestarts <- base::computeRestarts
[16:22:37.146]                         grepl <- base::grepl
[16:22:37.146]                         restarts <- computeRestarts(cond)
[16:22:37.146]                         for (restart in restarts) {
[16:22:37.146]                           name <- restart$name
[16:22:37.146]                           if (is.null(name)) 
[16:22:37.146]                             next
[16:22:37.146]                           if (!grepl(pattern, name)) 
[16:22:37.146]                             next
[16:22:37.146]                           invokeRestart(restart)
[16:22:37.146]                           muffled <- TRUE
[16:22:37.146]                           break
[16:22:37.146]                         }
[16:22:37.146]                       }
[16:22:37.146]                     }
[16:22:37.146]                     invisible(muffled)
[16:22:37.146]                   }
[16:22:37.146]                   muffleCondition(cond)
[16:22:37.146]                 })
[16:22:37.146]             }))
[16:22:37.146]             future::FutureResult(value = ...future.value$value, 
[16:22:37.146]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.146]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.146]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.146]                     ...future.globalenv.names))
[16:22:37.146]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.146]         }, condition = base::local({
[16:22:37.146]             c <- base::c
[16:22:37.146]             inherits <- base::inherits
[16:22:37.146]             invokeRestart <- base::invokeRestart
[16:22:37.146]             length <- base::length
[16:22:37.146]             list <- base::list
[16:22:37.146]             seq.int <- base::seq.int
[16:22:37.146]             signalCondition <- base::signalCondition
[16:22:37.146]             sys.calls <- base::sys.calls
[16:22:37.146]             `[[` <- base::`[[`
[16:22:37.146]             `+` <- base::`+`
[16:22:37.146]             `<<-` <- base::`<<-`
[16:22:37.146]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.146]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.146]                   3L)]
[16:22:37.146]             }
[16:22:37.146]             function(cond) {
[16:22:37.146]                 is_error <- inherits(cond, "error")
[16:22:37.146]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.146]                   NULL)
[16:22:37.146]                 if (is_error) {
[16:22:37.146]                   sessionInformation <- function() {
[16:22:37.146]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.146]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.146]                       search = base::search(), system = base::Sys.info())
[16:22:37.146]                   }
[16:22:37.146]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.146]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.146]                     cond$call), session = sessionInformation(), 
[16:22:37.146]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.146]                   signalCondition(cond)
[16:22:37.146]                 }
[16:22:37.146]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.146]                 "immediateCondition"))) {
[16:22:37.146]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.146]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.146]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.146]                   if (TRUE && !signal) {
[16:22:37.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.146]                     {
[16:22:37.146]                       inherits <- base::inherits
[16:22:37.146]                       invokeRestart <- base::invokeRestart
[16:22:37.146]                       is.null <- base::is.null
[16:22:37.146]                       muffled <- FALSE
[16:22:37.146]                       if (inherits(cond, "message")) {
[16:22:37.146]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.146]                         if (muffled) 
[16:22:37.146]                           invokeRestart("muffleMessage")
[16:22:37.146]                       }
[16:22:37.146]                       else if (inherits(cond, "warning")) {
[16:22:37.146]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.146]                         if (muffled) 
[16:22:37.146]                           invokeRestart("muffleWarning")
[16:22:37.146]                       }
[16:22:37.146]                       else if (inherits(cond, "condition")) {
[16:22:37.146]                         if (!is.null(pattern)) {
[16:22:37.146]                           computeRestarts <- base::computeRestarts
[16:22:37.146]                           grepl <- base::grepl
[16:22:37.146]                           restarts <- computeRestarts(cond)
[16:22:37.146]                           for (restart in restarts) {
[16:22:37.146]                             name <- restart$name
[16:22:37.146]                             if (is.null(name)) 
[16:22:37.146]                               next
[16:22:37.146]                             if (!grepl(pattern, name)) 
[16:22:37.146]                               next
[16:22:37.146]                             invokeRestart(restart)
[16:22:37.146]                             muffled <- TRUE
[16:22:37.146]                             break
[16:22:37.146]                           }
[16:22:37.146]                         }
[16:22:37.146]                       }
[16:22:37.146]                       invisible(muffled)
[16:22:37.146]                     }
[16:22:37.146]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.146]                   }
[16:22:37.146]                 }
[16:22:37.146]                 else {
[16:22:37.146]                   if (TRUE) {
[16:22:37.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.146]                     {
[16:22:37.146]                       inherits <- base::inherits
[16:22:37.146]                       invokeRestart <- base::invokeRestart
[16:22:37.146]                       is.null <- base::is.null
[16:22:37.146]                       muffled <- FALSE
[16:22:37.146]                       if (inherits(cond, "message")) {
[16:22:37.146]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.146]                         if (muffled) 
[16:22:37.146]                           invokeRestart("muffleMessage")
[16:22:37.146]                       }
[16:22:37.146]                       else if (inherits(cond, "warning")) {
[16:22:37.146]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.146]                         if (muffled) 
[16:22:37.146]                           invokeRestart("muffleWarning")
[16:22:37.146]                       }
[16:22:37.146]                       else if (inherits(cond, "condition")) {
[16:22:37.146]                         if (!is.null(pattern)) {
[16:22:37.146]                           computeRestarts <- base::computeRestarts
[16:22:37.146]                           grepl <- base::grepl
[16:22:37.146]                           restarts <- computeRestarts(cond)
[16:22:37.146]                           for (restart in restarts) {
[16:22:37.146]                             name <- restart$name
[16:22:37.146]                             if (is.null(name)) 
[16:22:37.146]                               next
[16:22:37.146]                             if (!grepl(pattern, name)) 
[16:22:37.146]                               next
[16:22:37.146]                             invokeRestart(restart)
[16:22:37.146]                             muffled <- TRUE
[16:22:37.146]                             break
[16:22:37.146]                           }
[16:22:37.146]                         }
[16:22:37.146]                       }
[16:22:37.146]                       invisible(muffled)
[16:22:37.146]                     }
[16:22:37.146]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.146]                   }
[16:22:37.146]                 }
[16:22:37.146]             }
[16:22:37.146]         }))
[16:22:37.146]     }, error = function(ex) {
[16:22:37.146]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.146]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.146]                 ...future.rng), started = ...future.startTime, 
[16:22:37.146]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.146]             version = "1.8"), class = "FutureResult")
[16:22:37.146]     }, finally = {
[16:22:37.146]         if (!identical(...future.workdir, getwd())) 
[16:22:37.146]             setwd(...future.workdir)
[16:22:37.146]         {
[16:22:37.146]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.146]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.146]             }
[16:22:37.146]             base::options(...future.oldOptions)
[16:22:37.146]             if (.Platform$OS.type == "windows") {
[16:22:37.146]                 old_names <- names(...future.oldEnvVars)
[16:22:37.146]                 envs <- base::Sys.getenv()
[16:22:37.146]                 names <- names(envs)
[16:22:37.146]                 common <- intersect(names, old_names)
[16:22:37.146]                 added <- setdiff(names, old_names)
[16:22:37.146]                 removed <- setdiff(old_names, names)
[16:22:37.146]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.146]                   envs[common]]
[16:22:37.146]                 NAMES <- toupper(changed)
[16:22:37.146]                 args <- list()
[16:22:37.146]                 for (kk in seq_along(NAMES)) {
[16:22:37.146]                   name <- changed[[kk]]
[16:22:37.146]                   NAME <- NAMES[[kk]]
[16:22:37.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.146]                     next
[16:22:37.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.146]                 }
[16:22:37.146]                 NAMES <- toupper(added)
[16:22:37.146]                 for (kk in seq_along(NAMES)) {
[16:22:37.146]                   name <- added[[kk]]
[16:22:37.146]                   NAME <- NAMES[[kk]]
[16:22:37.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.146]                     next
[16:22:37.146]                   args[[name]] <- ""
[16:22:37.146]                 }
[16:22:37.146]                 NAMES <- toupper(removed)
[16:22:37.146]                 for (kk in seq_along(NAMES)) {
[16:22:37.146]                   name <- removed[[kk]]
[16:22:37.146]                   NAME <- NAMES[[kk]]
[16:22:37.146]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.146]                     next
[16:22:37.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.146]                 }
[16:22:37.146]                 if (length(args) > 0) 
[16:22:37.146]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.146]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.146]             }
[16:22:37.146]             else {
[16:22:37.146]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.146]             }
[16:22:37.146]             {
[16:22:37.146]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.146]                   0L) {
[16:22:37.146]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.146]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.146]                   base::options(opts)
[16:22:37.146]                 }
[16:22:37.146]                 {
[16:22:37.146]                   {
[16:22:37.146]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.146]                     NULL
[16:22:37.146]                   }
[16:22:37.146]                   options(future.plan = NULL)
[16:22:37.146]                   if (is.na(NA_character_)) 
[16:22:37.146]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.146]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.146]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.146]                     .init = FALSE)
[16:22:37.146]                 }
[16:22:37.146]             }
[16:22:37.146]         }
[16:22:37.146]     })
[16:22:37.146]     if (TRUE) {
[16:22:37.146]         base::sink(type = "output", split = FALSE)
[16:22:37.146]         if (TRUE) {
[16:22:37.146]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.146]         }
[16:22:37.146]         else {
[16:22:37.146]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.146]         }
[16:22:37.146]         base::close(...future.stdout)
[16:22:37.146]         ...future.stdout <- NULL
[16:22:37.146]     }
[16:22:37.146]     ...future.result$conditions <- ...future.conditions
[16:22:37.146]     ...future.result$finished <- base::Sys.time()
[16:22:37.146]     ...future.result
[16:22:37.146] }
[16:22:37.149] MultisessionFuture started
[16:22:37.150] - Launch lazy future ... done
[16:22:37.150] run() for ‘MultisessionFuture’ ... done
[16:22:37.150] result() for ClusterFuture ...
[16:22:37.150] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.150] - Validating connection of MultisessionFuture
[16:22:37.201] - received message: FutureResult
[16:22:37.201] - Received FutureResult
[16:22:37.201] - Erased future from FutureRegistry
[16:22:37.201] result() for ClusterFuture ...
[16:22:37.201] - result already collected: FutureResult
[16:22:37.202] result() for ClusterFuture ... done
[16:22:37.202] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.202] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ session_uuid: chr "68f71266-8b11-db57-3d34-353f0f70cd36"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89954
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:37"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:37.211] result() for ClusterFuture ...
[16:22:37.212] - result already collected: FutureResult
[16:22:37.212] result() for ClusterFuture ... done
[16:22:37.212] result() for ClusterFuture ...
[16:22:37.212] - result already collected: FutureResult
[16:22:37.212] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.008260489 secs (started 2025-01-06 16:22:37.192892)
version: 1.8
[16:22:37.213] getGlobalsAndPackages() ...
[16:22:37.213] Searching for globals...
[16:22:37.217] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.217] Searching for globals ... DONE
[16:22:37.217] Resolving globals: FALSE
[16:22:37.217] 
[16:22:37.218] - packages: [1] ‘utils’
[16:22:37.218] getGlobalsAndPackages() ... DONE
[16:22:37.218] run() for ‘Future’ ...
[16:22:37.218] - state: ‘created’
[16:22:37.218] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.233] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.233] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.233]   - Field: ‘node’
[16:22:37.233]   - Field: ‘label’
[16:22:37.233]   - Field: ‘local’
[16:22:37.233]   - Field: ‘owner’
[16:22:37.233]   - Field: ‘envir’
[16:22:37.233]   - Field: ‘workers’
[16:22:37.234]   - Field: ‘packages’
[16:22:37.234]   - Field: ‘gc’
[16:22:37.234]   - Field: ‘conditions’
[16:22:37.234]   - Field: ‘persistent’
[16:22:37.234]   - Field: ‘expr’
[16:22:37.234]   - Field: ‘uuid’
[16:22:37.234]   - Field: ‘seed’
[16:22:37.234]   - Field: ‘version’
[16:22:37.235]   - Field: ‘result’
[16:22:37.235]   - Field: ‘asynchronous’
[16:22:37.235]   - Field: ‘calls’
[16:22:37.235]   - Field: ‘globals’
[16:22:37.235]   - Field: ‘stdout’
[16:22:37.235]   - Field: ‘earlySignal’
[16:22:37.235]   - Field: ‘lazy’
[16:22:37.235]   - Field: ‘state’
[16:22:37.235] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.236] - Launch lazy future ...
[16:22:37.236] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.236] Packages needed by future strategies (n = 0): <none>
[16:22:37.237] {
[16:22:37.237]     {
[16:22:37.237]         {
[16:22:37.237]             ...future.startTime <- base::Sys.time()
[16:22:37.237]             {
[16:22:37.237]                 {
[16:22:37.237]                   {
[16:22:37.237]                     {
[16:22:37.237]                       {
[16:22:37.237]                         base::local({
[16:22:37.237]                           has_future <- base::requireNamespace("future", 
[16:22:37.237]                             quietly = TRUE)
[16:22:37.237]                           if (has_future) {
[16:22:37.237]                             ns <- base::getNamespace("future")
[16:22:37.237]                             version <- ns[[".package"]][["version"]]
[16:22:37.237]                             if (is.null(version)) 
[16:22:37.237]                               version <- utils::packageVersion("future")
[16:22:37.237]                           }
[16:22:37.237]                           else {
[16:22:37.237]                             version <- NULL
[16:22:37.237]                           }
[16:22:37.237]                           if (!has_future || version < "1.8.0") {
[16:22:37.237]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.237]                               "", base::R.version$version.string), 
[16:22:37.237]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.237]                                 base::R.version$platform, 8 * 
[16:22:37.237]                                   base::.Machine$sizeof.pointer), 
[16:22:37.237]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.237]                                 "release", "version")], collapse = " "), 
[16:22:37.237]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.237]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.237]                               info)
[16:22:37.237]                             info <- base::paste(info, collapse = "; ")
[16:22:37.237]                             if (!has_future) {
[16:22:37.237]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.237]                                 info)
[16:22:37.237]                             }
[16:22:37.237]                             else {
[16:22:37.237]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.237]                                 info, version)
[16:22:37.237]                             }
[16:22:37.237]                             base::stop(msg)
[16:22:37.237]                           }
[16:22:37.237]                         })
[16:22:37.237]                       }
[16:22:37.237]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.237]                       base::options(mc.cores = 1L)
[16:22:37.237]                     }
[16:22:37.237]                     base::local({
[16:22:37.237]                       for (pkg in "utils") {
[16:22:37.237]                         base::loadNamespace(pkg)
[16:22:37.237]                         base::library(pkg, character.only = TRUE)
[16:22:37.237]                       }
[16:22:37.237]                     })
[16:22:37.237]                   }
[16:22:37.237]                   ...future.strategy.old <- future::plan("list")
[16:22:37.237]                   options(future.plan = NULL)
[16:22:37.237]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.237]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.237]                 }
[16:22:37.237]                 ...future.workdir <- getwd()
[16:22:37.237]             }
[16:22:37.237]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.237]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.237]         }
[16:22:37.237]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.237]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.237]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.237]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.237]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.237]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.237]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.237]             base::names(...future.oldOptions))
[16:22:37.237]     }
[16:22:37.237]     if (FALSE) {
[16:22:37.237]     }
[16:22:37.237]     else {
[16:22:37.237]         if (TRUE) {
[16:22:37.237]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.237]                 open = "w")
[16:22:37.237]         }
[16:22:37.237]         else {
[16:22:37.237]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.237]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.237]         }
[16:22:37.237]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.237]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.237]             base::sink(type = "output", split = FALSE)
[16:22:37.237]             base::close(...future.stdout)
[16:22:37.237]         }, add = TRUE)
[16:22:37.237]     }
[16:22:37.237]     ...future.frame <- base::sys.nframe()
[16:22:37.237]     ...future.conditions <- base::list()
[16:22:37.237]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.237]     if (FALSE) {
[16:22:37.237]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.237]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.237]     }
[16:22:37.237]     ...future.result <- base::tryCatch({
[16:22:37.237]         base::withCallingHandlers({
[16:22:37.237]             ...future.value <- base::withVisible(base::local({
[16:22:37.237]                 ...future.makeSendCondition <- base::local({
[16:22:37.237]                   sendCondition <- NULL
[16:22:37.237]                   function(frame = 1L) {
[16:22:37.237]                     if (is.function(sendCondition)) 
[16:22:37.237]                       return(sendCondition)
[16:22:37.237]                     ns <- getNamespace("parallel")
[16:22:37.237]                     if (exists("sendData", mode = "function", 
[16:22:37.237]                       envir = ns)) {
[16:22:37.237]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.237]                         envir = ns)
[16:22:37.237]                       envir <- sys.frame(frame)
[16:22:37.237]                       master <- NULL
[16:22:37.237]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.237]                         !identical(envir, emptyenv())) {
[16:22:37.237]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.237]                           inherits = FALSE)) {
[16:22:37.237]                           master <- get("master", mode = "list", 
[16:22:37.237]                             envir = envir, inherits = FALSE)
[16:22:37.237]                           if (inherits(master, c("SOCKnode", 
[16:22:37.237]                             "SOCK0node"))) {
[16:22:37.237]                             sendCondition <<- function(cond) {
[16:22:37.237]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.237]                                 success = TRUE)
[16:22:37.237]                               parallel_sendData(master, data)
[16:22:37.237]                             }
[16:22:37.237]                             return(sendCondition)
[16:22:37.237]                           }
[16:22:37.237]                         }
[16:22:37.237]                         frame <- frame + 1L
[16:22:37.237]                         envir <- sys.frame(frame)
[16:22:37.237]                       }
[16:22:37.237]                     }
[16:22:37.237]                     sendCondition <<- function(cond) NULL
[16:22:37.237]                   }
[16:22:37.237]                 })
[16:22:37.237]                 withCallingHandlers({
[16:22:37.237]                   {
[16:22:37.237]                     print(1:50)
[16:22:37.237]                     str(1:50)
[16:22:37.237]                     cat(letters, sep = "-")
[16:22:37.237]                     cat(1:6, collapse = "\n")
[16:22:37.237]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.237]                     42L
[16:22:37.237]                   }
[16:22:37.237]                 }, immediateCondition = function(cond) {
[16:22:37.237]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.237]                   sendCondition(cond)
[16:22:37.237]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.237]                   {
[16:22:37.237]                     inherits <- base::inherits
[16:22:37.237]                     invokeRestart <- base::invokeRestart
[16:22:37.237]                     is.null <- base::is.null
[16:22:37.237]                     muffled <- FALSE
[16:22:37.237]                     if (inherits(cond, "message")) {
[16:22:37.237]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.237]                       if (muffled) 
[16:22:37.237]                         invokeRestart("muffleMessage")
[16:22:37.237]                     }
[16:22:37.237]                     else if (inherits(cond, "warning")) {
[16:22:37.237]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.237]                       if (muffled) 
[16:22:37.237]                         invokeRestart("muffleWarning")
[16:22:37.237]                     }
[16:22:37.237]                     else if (inherits(cond, "condition")) {
[16:22:37.237]                       if (!is.null(pattern)) {
[16:22:37.237]                         computeRestarts <- base::computeRestarts
[16:22:37.237]                         grepl <- base::grepl
[16:22:37.237]                         restarts <- computeRestarts(cond)
[16:22:37.237]                         for (restart in restarts) {
[16:22:37.237]                           name <- restart$name
[16:22:37.237]                           if (is.null(name)) 
[16:22:37.237]                             next
[16:22:37.237]                           if (!grepl(pattern, name)) 
[16:22:37.237]                             next
[16:22:37.237]                           invokeRestart(restart)
[16:22:37.237]                           muffled <- TRUE
[16:22:37.237]                           break
[16:22:37.237]                         }
[16:22:37.237]                       }
[16:22:37.237]                     }
[16:22:37.237]                     invisible(muffled)
[16:22:37.237]                   }
[16:22:37.237]                   muffleCondition(cond)
[16:22:37.237]                 })
[16:22:37.237]             }))
[16:22:37.237]             future::FutureResult(value = ...future.value$value, 
[16:22:37.237]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.237]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.237]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.237]                     ...future.globalenv.names))
[16:22:37.237]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.237]         }, condition = base::local({
[16:22:37.237]             c <- base::c
[16:22:37.237]             inherits <- base::inherits
[16:22:37.237]             invokeRestart <- base::invokeRestart
[16:22:37.237]             length <- base::length
[16:22:37.237]             list <- base::list
[16:22:37.237]             seq.int <- base::seq.int
[16:22:37.237]             signalCondition <- base::signalCondition
[16:22:37.237]             sys.calls <- base::sys.calls
[16:22:37.237]             `[[` <- base::`[[`
[16:22:37.237]             `+` <- base::`+`
[16:22:37.237]             `<<-` <- base::`<<-`
[16:22:37.237]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.237]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.237]                   3L)]
[16:22:37.237]             }
[16:22:37.237]             function(cond) {
[16:22:37.237]                 is_error <- inherits(cond, "error")
[16:22:37.237]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.237]                   NULL)
[16:22:37.237]                 if (is_error) {
[16:22:37.237]                   sessionInformation <- function() {
[16:22:37.237]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.237]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.237]                       search = base::search(), system = base::Sys.info())
[16:22:37.237]                   }
[16:22:37.237]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.237]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.237]                     cond$call), session = sessionInformation(), 
[16:22:37.237]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.237]                   signalCondition(cond)
[16:22:37.237]                 }
[16:22:37.237]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.237]                 "immediateCondition"))) {
[16:22:37.237]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.237]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.237]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.237]                   if (TRUE && !signal) {
[16:22:37.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.237]                     {
[16:22:37.237]                       inherits <- base::inherits
[16:22:37.237]                       invokeRestart <- base::invokeRestart
[16:22:37.237]                       is.null <- base::is.null
[16:22:37.237]                       muffled <- FALSE
[16:22:37.237]                       if (inherits(cond, "message")) {
[16:22:37.237]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.237]                         if (muffled) 
[16:22:37.237]                           invokeRestart("muffleMessage")
[16:22:37.237]                       }
[16:22:37.237]                       else if (inherits(cond, "warning")) {
[16:22:37.237]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.237]                         if (muffled) 
[16:22:37.237]                           invokeRestart("muffleWarning")
[16:22:37.237]                       }
[16:22:37.237]                       else if (inherits(cond, "condition")) {
[16:22:37.237]                         if (!is.null(pattern)) {
[16:22:37.237]                           computeRestarts <- base::computeRestarts
[16:22:37.237]                           grepl <- base::grepl
[16:22:37.237]                           restarts <- computeRestarts(cond)
[16:22:37.237]                           for (restart in restarts) {
[16:22:37.237]                             name <- restart$name
[16:22:37.237]                             if (is.null(name)) 
[16:22:37.237]                               next
[16:22:37.237]                             if (!grepl(pattern, name)) 
[16:22:37.237]                               next
[16:22:37.237]                             invokeRestart(restart)
[16:22:37.237]                             muffled <- TRUE
[16:22:37.237]                             break
[16:22:37.237]                           }
[16:22:37.237]                         }
[16:22:37.237]                       }
[16:22:37.237]                       invisible(muffled)
[16:22:37.237]                     }
[16:22:37.237]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.237]                   }
[16:22:37.237]                 }
[16:22:37.237]                 else {
[16:22:37.237]                   if (TRUE) {
[16:22:37.237]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.237]                     {
[16:22:37.237]                       inherits <- base::inherits
[16:22:37.237]                       invokeRestart <- base::invokeRestart
[16:22:37.237]                       is.null <- base::is.null
[16:22:37.237]                       muffled <- FALSE
[16:22:37.237]                       if (inherits(cond, "message")) {
[16:22:37.237]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.237]                         if (muffled) 
[16:22:37.237]                           invokeRestart("muffleMessage")
[16:22:37.237]                       }
[16:22:37.237]                       else if (inherits(cond, "warning")) {
[16:22:37.237]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.237]                         if (muffled) 
[16:22:37.237]                           invokeRestart("muffleWarning")
[16:22:37.237]                       }
[16:22:37.237]                       else if (inherits(cond, "condition")) {
[16:22:37.237]                         if (!is.null(pattern)) {
[16:22:37.237]                           computeRestarts <- base::computeRestarts
[16:22:37.237]                           grepl <- base::grepl
[16:22:37.237]                           restarts <- computeRestarts(cond)
[16:22:37.237]                           for (restart in restarts) {
[16:22:37.237]                             name <- restart$name
[16:22:37.237]                             if (is.null(name)) 
[16:22:37.237]                               next
[16:22:37.237]                             if (!grepl(pattern, name)) 
[16:22:37.237]                               next
[16:22:37.237]                             invokeRestart(restart)
[16:22:37.237]                             muffled <- TRUE
[16:22:37.237]                             break
[16:22:37.237]                           }
[16:22:37.237]                         }
[16:22:37.237]                       }
[16:22:37.237]                       invisible(muffled)
[16:22:37.237]                     }
[16:22:37.237]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.237]                   }
[16:22:37.237]                 }
[16:22:37.237]             }
[16:22:37.237]         }))
[16:22:37.237]     }, error = function(ex) {
[16:22:37.237]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.237]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.237]                 ...future.rng), started = ...future.startTime, 
[16:22:37.237]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.237]             version = "1.8"), class = "FutureResult")
[16:22:37.237]     }, finally = {
[16:22:37.237]         if (!identical(...future.workdir, getwd())) 
[16:22:37.237]             setwd(...future.workdir)
[16:22:37.237]         {
[16:22:37.237]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.237]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.237]             }
[16:22:37.237]             base::options(...future.oldOptions)
[16:22:37.237]             if (.Platform$OS.type == "windows") {
[16:22:37.237]                 old_names <- names(...future.oldEnvVars)
[16:22:37.237]                 envs <- base::Sys.getenv()
[16:22:37.237]                 names <- names(envs)
[16:22:37.237]                 common <- intersect(names, old_names)
[16:22:37.237]                 added <- setdiff(names, old_names)
[16:22:37.237]                 removed <- setdiff(old_names, names)
[16:22:37.237]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.237]                   envs[common]]
[16:22:37.237]                 NAMES <- toupper(changed)
[16:22:37.237]                 args <- list()
[16:22:37.237]                 for (kk in seq_along(NAMES)) {
[16:22:37.237]                   name <- changed[[kk]]
[16:22:37.237]                   NAME <- NAMES[[kk]]
[16:22:37.237]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.237]                     next
[16:22:37.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.237]                 }
[16:22:37.237]                 NAMES <- toupper(added)
[16:22:37.237]                 for (kk in seq_along(NAMES)) {
[16:22:37.237]                   name <- added[[kk]]
[16:22:37.237]                   NAME <- NAMES[[kk]]
[16:22:37.237]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.237]                     next
[16:22:37.237]                   args[[name]] <- ""
[16:22:37.237]                 }
[16:22:37.237]                 NAMES <- toupper(removed)
[16:22:37.237]                 for (kk in seq_along(NAMES)) {
[16:22:37.237]                   name <- removed[[kk]]
[16:22:37.237]                   NAME <- NAMES[[kk]]
[16:22:37.237]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.237]                     next
[16:22:37.237]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.237]                 }
[16:22:37.237]                 if (length(args) > 0) 
[16:22:37.237]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.237]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.237]             }
[16:22:37.237]             else {
[16:22:37.237]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.237]             }
[16:22:37.237]             {
[16:22:37.237]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.237]                   0L) {
[16:22:37.237]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.237]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.237]                   base::options(opts)
[16:22:37.237]                 }
[16:22:37.237]                 {
[16:22:37.237]                   {
[16:22:37.237]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.237]                     NULL
[16:22:37.237]                   }
[16:22:37.237]                   options(future.plan = NULL)
[16:22:37.237]                   if (is.na(NA_character_)) 
[16:22:37.237]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.237]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.237]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.237]                     .init = FALSE)
[16:22:37.237]                 }
[16:22:37.237]             }
[16:22:37.237]         }
[16:22:37.237]     })
[16:22:37.237]     if (TRUE) {
[16:22:37.237]         base::sink(type = "output", split = FALSE)
[16:22:37.237]         if (TRUE) {
[16:22:37.237]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.237]         }
[16:22:37.237]         else {
[16:22:37.237]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.237]         }
[16:22:37.237]         base::close(...future.stdout)
[16:22:37.237]         ...future.stdout <- NULL
[16:22:37.237]     }
[16:22:37.237]     ...future.result$conditions <- ...future.conditions
[16:22:37.237]     ...future.result$finished <- base::Sys.time()
[16:22:37.237]     ...future.result
[16:22:37.237] }
[16:22:37.240] MultisessionFuture started
[16:22:37.240] - Launch lazy future ... done
[16:22:37.240] run() for ‘MultisessionFuture’ ... done
[16:22:37.241] result() for ClusterFuture ...
[16:22:37.241] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.241] - Validating connection of MultisessionFuture
[16:22:37.242] - received message: FutureResult
[16:22:37.242] - Received FutureResult
[16:22:37.242] - Erased future from FutureRegistry
[16:22:37.245] result() for ClusterFuture ...
[16:22:37.245] - result already collected: FutureResult
[16:22:37.245] result() for ClusterFuture ... done
[16:22:37.245] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.245] result() for ClusterFuture ... done
[16:22:37.245] result() for ClusterFuture ...
[16:22:37.245] - result already collected: FutureResult
[16:22:37.245] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[16:22:37.246] getGlobalsAndPackages() ...
[16:22:37.246] Searching for globals...
[16:22:37.246] - globals found: [1] ‘print’
[16:22:37.247] Searching for globals ... DONE
[16:22:37.247] Resolving globals: FALSE
[16:22:37.247] 
[16:22:37.247] 
[16:22:37.247] getGlobalsAndPackages() ... DONE
[16:22:37.247] run() for ‘Future’ ...
[16:22:37.247] - state: ‘created’
[16:22:37.247] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.261] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.261] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.261]   - Field: ‘node’
[16:22:37.261]   - Field: ‘label’
[16:22:37.262]   - Field: ‘local’
[16:22:37.262]   - Field: ‘owner’
[16:22:37.262]   - Field: ‘envir’
[16:22:37.262]   - Field: ‘workers’
[16:22:37.262]   - Field: ‘packages’
[16:22:37.262]   - Field: ‘gc’
[16:22:37.262]   - Field: ‘conditions’
[16:22:37.262]   - Field: ‘persistent’
[16:22:37.262]   - Field: ‘expr’
[16:22:37.262]   - Field: ‘uuid’
[16:22:37.262]   - Field: ‘seed’
[16:22:37.263]   - Field: ‘version’
[16:22:37.263]   - Field: ‘result’
[16:22:37.263]   - Field: ‘asynchronous’
[16:22:37.263]   - Field: ‘calls’
[16:22:37.263]   - Field: ‘globals’
[16:22:37.263]   - Field: ‘stdout’
[16:22:37.263]   - Field: ‘earlySignal’
[16:22:37.263]   - Field: ‘lazy’
[16:22:37.263]   - Field: ‘state’
[16:22:37.263] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.263] - Launch lazy future ...
[16:22:37.264] Packages needed by the future expression (n = 0): <none>
[16:22:37.264] Packages needed by future strategies (n = 0): <none>
[16:22:37.264] {
[16:22:37.264]     {
[16:22:37.264]         {
[16:22:37.264]             ...future.startTime <- base::Sys.time()
[16:22:37.264]             {
[16:22:37.264]                 {
[16:22:37.264]                   {
[16:22:37.264]                     {
[16:22:37.264]                       base::local({
[16:22:37.264]                         has_future <- base::requireNamespace("future", 
[16:22:37.264]                           quietly = TRUE)
[16:22:37.264]                         if (has_future) {
[16:22:37.264]                           ns <- base::getNamespace("future")
[16:22:37.264]                           version <- ns[[".package"]][["version"]]
[16:22:37.264]                           if (is.null(version)) 
[16:22:37.264]                             version <- utils::packageVersion("future")
[16:22:37.264]                         }
[16:22:37.264]                         else {
[16:22:37.264]                           version <- NULL
[16:22:37.264]                         }
[16:22:37.264]                         if (!has_future || version < "1.8.0") {
[16:22:37.264]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.264]                             "", base::R.version$version.string), 
[16:22:37.264]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:37.264]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:37.264]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.264]                               "release", "version")], collapse = " "), 
[16:22:37.264]                             hostname = base::Sys.info()[["nodename"]])
[16:22:37.264]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.264]                             info)
[16:22:37.264]                           info <- base::paste(info, collapse = "; ")
[16:22:37.264]                           if (!has_future) {
[16:22:37.264]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.264]                               info)
[16:22:37.264]                           }
[16:22:37.264]                           else {
[16:22:37.264]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.264]                               info, version)
[16:22:37.264]                           }
[16:22:37.264]                           base::stop(msg)
[16:22:37.264]                         }
[16:22:37.264]                       })
[16:22:37.264]                     }
[16:22:37.264]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.264]                     base::options(mc.cores = 1L)
[16:22:37.264]                   }
[16:22:37.264]                   ...future.strategy.old <- future::plan("list")
[16:22:37.264]                   options(future.plan = NULL)
[16:22:37.264]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.264]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.264]                 }
[16:22:37.264]                 ...future.workdir <- getwd()
[16:22:37.264]             }
[16:22:37.264]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.264]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.264]         }
[16:22:37.264]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.264]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.264]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.264]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.264]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.264]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.264]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.264]             base::names(...future.oldOptions))
[16:22:37.264]     }
[16:22:37.264]     if (FALSE) {
[16:22:37.264]     }
[16:22:37.264]     else {
[16:22:37.264]         if (TRUE) {
[16:22:37.264]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.264]                 open = "w")
[16:22:37.264]         }
[16:22:37.264]         else {
[16:22:37.264]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.264]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.264]         }
[16:22:37.264]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.264]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.264]             base::sink(type = "output", split = FALSE)
[16:22:37.264]             base::close(...future.stdout)
[16:22:37.264]         }, add = TRUE)
[16:22:37.264]     }
[16:22:37.264]     ...future.frame <- base::sys.nframe()
[16:22:37.264]     ...future.conditions <- base::list()
[16:22:37.264]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.264]     if (FALSE) {
[16:22:37.264]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.264]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.264]     }
[16:22:37.264]     ...future.result <- base::tryCatch({
[16:22:37.264]         base::withCallingHandlers({
[16:22:37.264]             ...future.value <- base::withVisible(base::local({
[16:22:37.264]                 ...future.makeSendCondition <- base::local({
[16:22:37.264]                   sendCondition <- NULL
[16:22:37.264]                   function(frame = 1L) {
[16:22:37.264]                     if (is.function(sendCondition)) 
[16:22:37.264]                       return(sendCondition)
[16:22:37.264]                     ns <- getNamespace("parallel")
[16:22:37.264]                     if (exists("sendData", mode = "function", 
[16:22:37.264]                       envir = ns)) {
[16:22:37.264]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.264]                         envir = ns)
[16:22:37.264]                       envir <- sys.frame(frame)
[16:22:37.264]                       master <- NULL
[16:22:37.264]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.264]                         !identical(envir, emptyenv())) {
[16:22:37.264]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.264]                           inherits = FALSE)) {
[16:22:37.264]                           master <- get("master", mode = "list", 
[16:22:37.264]                             envir = envir, inherits = FALSE)
[16:22:37.264]                           if (inherits(master, c("SOCKnode", 
[16:22:37.264]                             "SOCK0node"))) {
[16:22:37.264]                             sendCondition <<- function(cond) {
[16:22:37.264]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.264]                                 success = TRUE)
[16:22:37.264]                               parallel_sendData(master, data)
[16:22:37.264]                             }
[16:22:37.264]                             return(sendCondition)
[16:22:37.264]                           }
[16:22:37.264]                         }
[16:22:37.264]                         frame <- frame + 1L
[16:22:37.264]                         envir <- sys.frame(frame)
[16:22:37.264]                       }
[16:22:37.264]                     }
[16:22:37.264]                     sendCondition <<- function(cond) NULL
[16:22:37.264]                   }
[16:22:37.264]                 })
[16:22:37.264]                 withCallingHandlers({
[16:22:37.264]                   print(42)
[16:22:37.264]                 }, immediateCondition = function(cond) {
[16:22:37.264]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.264]                   sendCondition(cond)
[16:22:37.264]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.264]                   {
[16:22:37.264]                     inherits <- base::inherits
[16:22:37.264]                     invokeRestart <- base::invokeRestart
[16:22:37.264]                     is.null <- base::is.null
[16:22:37.264]                     muffled <- FALSE
[16:22:37.264]                     if (inherits(cond, "message")) {
[16:22:37.264]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.264]                       if (muffled) 
[16:22:37.264]                         invokeRestart("muffleMessage")
[16:22:37.264]                     }
[16:22:37.264]                     else if (inherits(cond, "warning")) {
[16:22:37.264]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.264]                       if (muffled) 
[16:22:37.264]                         invokeRestart("muffleWarning")
[16:22:37.264]                     }
[16:22:37.264]                     else if (inherits(cond, "condition")) {
[16:22:37.264]                       if (!is.null(pattern)) {
[16:22:37.264]                         computeRestarts <- base::computeRestarts
[16:22:37.264]                         grepl <- base::grepl
[16:22:37.264]                         restarts <- computeRestarts(cond)
[16:22:37.264]                         for (restart in restarts) {
[16:22:37.264]                           name <- restart$name
[16:22:37.264]                           if (is.null(name)) 
[16:22:37.264]                             next
[16:22:37.264]                           if (!grepl(pattern, name)) 
[16:22:37.264]                             next
[16:22:37.264]                           invokeRestart(restart)
[16:22:37.264]                           muffled <- TRUE
[16:22:37.264]                           break
[16:22:37.264]                         }
[16:22:37.264]                       }
[16:22:37.264]                     }
[16:22:37.264]                     invisible(muffled)
[16:22:37.264]                   }
[16:22:37.264]                   muffleCondition(cond)
[16:22:37.264]                 })
[16:22:37.264]             }))
[16:22:37.264]             future::FutureResult(value = ...future.value$value, 
[16:22:37.264]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.264]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.264]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.264]                     ...future.globalenv.names))
[16:22:37.264]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.264]         }, condition = base::local({
[16:22:37.264]             c <- base::c
[16:22:37.264]             inherits <- base::inherits
[16:22:37.264]             invokeRestart <- base::invokeRestart
[16:22:37.264]             length <- base::length
[16:22:37.264]             list <- base::list
[16:22:37.264]             seq.int <- base::seq.int
[16:22:37.264]             signalCondition <- base::signalCondition
[16:22:37.264]             sys.calls <- base::sys.calls
[16:22:37.264]             `[[` <- base::`[[`
[16:22:37.264]             `+` <- base::`+`
[16:22:37.264]             `<<-` <- base::`<<-`
[16:22:37.264]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.264]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.264]                   3L)]
[16:22:37.264]             }
[16:22:37.264]             function(cond) {
[16:22:37.264]                 is_error <- inherits(cond, "error")
[16:22:37.264]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.264]                   NULL)
[16:22:37.264]                 if (is_error) {
[16:22:37.264]                   sessionInformation <- function() {
[16:22:37.264]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.264]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.264]                       search = base::search(), system = base::Sys.info())
[16:22:37.264]                   }
[16:22:37.264]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.264]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.264]                     cond$call), session = sessionInformation(), 
[16:22:37.264]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.264]                   signalCondition(cond)
[16:22:37.264]                 }
[16:22:37.264]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.264]                 "immediateCondition"))) {
[16:22:37.264]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.264]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.264]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.264]                   if (TRUE && !signal) {
[16:22:37.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.264]                     {
[16:22:37.264]                       inherits <- base::inherits
[16:22:37.264]                       invokeRestart <- base::invokeRestart
[16:22:37.264]                       is.null <- base::is.null
[16:22:37.264]                       muffled <- FALSE
[16:22:37.264]                       if (inherits(cond, "message")) {
[16:22:37.264]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.264]                         if (muffled) 
[16:22:37.264]                           invokeRestart("muffleMessage")
[16:22:37.264]                       }
[16:22:37.264]                       else if (inherits(cond, "warning")) {
[16:22:37.264]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.264]                         if (muffled) 
[16:22:37.264]                           invokeRestart("muffleWarning")
[16:22:37.264]                       }
[16:22:37.264]                       else if (inherits(cond, "condition")) {
[16:22:37.264]                         if (!is.null(pattern)) {
[16:22:37.264]                           computeRestarts <- base::computeRestarts
[16:22:37.264]                           grepl <- base::grepl
[16:22:37.264]                           restarts <- computeRestarts(cond)
[16:22:37.264]                           for (restart in restarts) {
[16:22:37.264]                             name <- restart$name
[16:22:37.264]                             if (is.null(name)) 
[16:22:37.264]                               next
[16:22:37.264]                             if (!grepl(pattern, name)) 
[16:22:37.264]                               next
[16:22:37.264]                             invokeRestart(restart)
[16:22:37.264]                             muffled <- TRUE
[16:22:37.264]                             break
[16:22:37.264]                           }
[16:22:37.264]                         }
[16:22:37.264]                       }
[16:22:37.264]                       invisible(muffled)
[16:22:37.264]                     }
[16:22:37.264]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.264]                   }
[16:22:37.264]                 }
[16:22:37.264]                 else {
[16:22:37.264]                   if (TRUE) {
[16:22:37.264]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.264]                     {
[16:22:37.264]                       inherits <- base::inherits
[16:22:37.264]                       invokeRestart <- base::invokeRestart
[16:22:37.264]                       is.null <- base::is.null
[16:22:37.264]                       muffled <- FALSE
[16:22:37.264]                       if (inherits(cond, "message")) {
[16:22:37.264]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.264]                         if (muffled) 
[16:22:37.264]                           invokeRestart("muffleMessage")
[16:22:37.264]                       }
[16:22:37.264]                       else if (inherits(cond, "warning")) {
[16:22:37.264]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.264]                         if (muffled) 
[16:22:37.264]                           invokeRestart("muffleWarning")
[16:22:37.264]                       }
[16:22:37.264]                       else if (inherits(cond, "condition")) {
[16:22:37.264]                         if (!is.null(pattern)) {
[16:22:37.264]                           computeRestarts <- base::computeRestarts
[16:22:37.264]                           grepl <- base::grepl
[16:22:37.264]                           restarts <- computeRestarts(cond)
[16:22:37.264]                           for (restart in restarts) {
[16:22:37.264]                             name <- restart$name
[16:22:37.264]                             if (is.null(name)) 
[16:22:37.264]                               next
[16:22:37.264]                             if (!grepl(pattern, name)) 
[16:22:37.264]                               next
[16:22:37.264]                             invokeRestart(restart)
[16:22:37.264]                             muffled <- TRUE
[16:22:37.264]                             break
[16:22:37.264]                           }
[16:22:37.264]                         }
[16:22:37.264]                       }
[16:22:37.264]                       invisible(muffled)
[16:22:37.264]                     }
[16:22:37.264]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.264]                   }
[16:22:37.264]                 }
[16:22:37.264]             }
[16:22:37.264]         }))
[16:22:37.264]     }, error = function(ex) {
[16:22:37.264]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.264]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.264]                 ...future.rng), started = ...future.startTime, 
[16:22:37.264]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.264]             version = "1.8"), class = "FutureResult")
[16:22:37.264]     }, finally = {
[16:22:37.264]         if (!identical(...future.workdir, getwd())) 
[16:22:37.264]             setwd(...future.workdir)
[16:22:37.264]         {
[16:22:37.264]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.264]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.264]             }
[16:22:37.264]             base::options(...future.oldOptions)
[16:22:37.264]             if (.Platform$OS.type == "windows") {
[16:22:37.264]                 old_names <- names(...future.oldEnvVars)
[16:22:37.264]                 envs <- base::Sys.getenv()
[16:22:37.264]                 names <- names(envs)
[16:22:37.264]                 common <- intersect(names, old_names)
[16:22:37.264]                 added <- setdiff(names, old_names)
[16:22:37.264]                 removed <- setdiff(old_names, names)
[16:22:37.264]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.264]                   envs[common]]
[16:22:37.264]                 NAMES <- toupper(changed)
[16:22:37.264]                 args <- list()
[16:22:37.264]                 for (kk in seq_along(NAMES)) {
[16:22:37.264]                   name <- changed[[kk]]
[16:22:37.264]                   NAME <- NAMES[[kk]]
[16:22:37.264]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.264]                     next
[16:22:37.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.264]                 }
[16:22:37.264]                 NAMES <- toupper(added)
[16:22:37.264]                 for (kk in seq_along(NAMES)) {
[16:22:37.264]                   name <- added[[kk]]
[16:22:37.264]                   NAME <- NAMES[[kk]]
[16:22:37.264]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.264]                     next
[16:22:37.264]                   args[[name]] <- ""
[16:22:37.264]                 }
[16:22:37.264]                 NAMES <- toupper(removed)
[16:22:37.264]                 for (kk in seq_along(NAMES)) {
[16:22:37.264]                   name <- removed[[kk]]
[16:22:37.264]                   NAME <- NAMES[[kk]]
[16:22:37.264]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.264]                     next
[16:22:37.264]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.264]                 }
[16:22:37.264]                 if (length(args) > 0) 
[16:22:37.264]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.264]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.264]             }
[16:22:37.264]             else {
[16:22:37.264]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.264]             }
[16:22:37.264]             {
[16:22:37.264]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.264]                   0L) {
[16:22:37.264]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.264]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.264]                   base::options(opts)
[16:22:37.264]                 }
[16:22:37.264]                 {
[16:22:37.264]                   {
[16:22:37.264]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.264]                     NULL
[16:22:37.264]                   }
[16:22:37.264]                   options(future.plan = NULL)
[16:22:37.264]                   if (is.na(NA_character_)) 
[16:22:37.264]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.264]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.264]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.264]                     .init = FALSE)
[16:22:37.264]                 }
[16:22:37.264]             }
[16:22:37.264]         }
[16:22:37.264]     })
[16:22:37.264]     if (TRUE) {
[16:22:37.264]         base::sink(type = "output", split = FALSE)
[16:22:37.264]         if (TRUE) {
[16:22:37.264]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.264]         }
[16:22:37.264]         else {
[16:22:37.264]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.264]         }
[16:22:37.264]         base::close(...future.stdout)
[16:22:37.264]         ...future.stdout <- NULL
[16:22:37.264]     }
[16:22:37.264]     ...future.result$conditions <- ...future.conditions
[16:22:37.264]     ...future.result$finished <- base::Sys.time()
[16:22:37.264]     ...future.result
[16:22:37.264] }
[16:22:37.267] MultisessionFuture started
[16:22:37.267] - Launch lazy future ... done
[16:22:37.267] run() for ‘MultisessionFuture’ ... done
[16:22:37.268] result() for ClusterFuture ...
[16:22:37.268] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.268] - Validating connection of MultisessionFuture
[16:22:37.269] - received message: FutureResult
[16:22:37.269] - Received FutureResult
[16:22:37.269] - Erased future from FutureRegistry
[16:22:37.269] result() for ClusterFuture ...
[16:22:37.269] - result already collected: FutureResult
[16:22:37.269] result() for ClusterFuture ... done
[16:22:37.270] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.270] result() for ClusterFuture ... done
[16:22:37.270] result() for ClusterFuture ...
[16:22:37.270] - result already collected: FutureResult
[16:22:37.270] result() for ClusterFuture ... done
[16:22:37.270] result() for ClusterFuture ...
[16:22:37.270] - result already collected: FutureResult
[16:22:37.270] result() for ClusterFuture ... done
[1] 42
[16:22:37.270] result() for ClusterFuture ...
[16:22:37.270] - result already collected: FutureResult
[16:22:37.270] result() for ClusterFuture ... done
- stdout = FALSE
[16:22:37.271] getGlobalsAndPackages() ...
[16:22:37.271] Searching for globals...
[16:22:37.273] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.274] Searching for globals ... DONE
[16:22:37.274] Resolving globals: FALSE
[16:22:37.274] 
[16:22:37.274] - packages: [1] ‘utils’
[16:22:37.274] getGlobalsAndPackages() ... DONE
[16:22:37.275] run() for ‘Future’ ...
[16:22:37.275] - state: ‘created’
[16:22:37.275] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.288] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.288] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.289]   - Field: ‘node’
[16:22:37.289]   - Field: ‘label’
[16:22:37.289]   - Field: ‘local’
[16:22:37.289]   - Field: ‘owner’
[16:22:37.289]   - Field: ‘envir’
[16:22:37.289]   - Field: ‘workers’
[16:22:37.289]   - Field: ‘packages’
[16:22:37.289]   - Field: ‘gc’
[16:22:37.289]   - Field: ‘conditions’
[16:22:37.289]   - Field: ‘persistent’
[16:22:37.289]   - Field: ‘expr’
[16:22:37.290]   - Field: ‘uuid’
[16:22:37.290]   - Field: ‘seed’
[16:22:37.290]   - Field: ‘version’
[16:22:37.290]   - Field: ‘result’
[16:22:37.290]   - Field: ‘asynchronous’
[16:22:37.290]   - Field: ‘calls’
[16:22:37.290]   - Field: ‘globals’
[16:22:37.290]   - Field: ‘stdout’
[16:22:37.290]   - Field: ‘earlySignal’
[16:22:37.290]   - Field: ‘lazy’
[16:22:37.290]   - Field: ‘state’
[16:22:37.291] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.291] - Launch lazy future ...
[16:22:37.291] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.291] Packages needed by future strategies (n = 0): <none>
[16:22:37.291] {
[16:22:37.291]     {
[16:22:37.291]         {
[16:22:37.291]             ...future.startTime <- base::Sys.time()
[16:22:37.291]             {
[16:22:37.291]                 {
[16:22:37.291]                   {
[16:22:37.291]                     {
[16:22:37.291]                       {
[16:22:37.291]                         base::local({
[16:22:37.291]                           has_future <- base::requireNamespace("future", 
[16:22:37.291]                             quietly = TRUE)
[16:22:37.291]                           if (has_future) {
[16:22:37.291]                             ns <- base::getNamespace("future")
[16:22:37.291]                             version <- ns[[".package"]][["version"]]
[16:22:37.291]                             if (is.null(version)) 
[16:22:37.291]                               version <- utils::packageVersion("future")
[16:22:37.291]                           }
[16:22:37.291]                           else {
[16:22:37.291]                             version <- NULL
[16:22:37.291]                           }
[16:22:37.291]                           if (!has_future || version < "1.8.0") {
[16:22:37.291]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.291]                               "", base::R.version$version.string), 
[16:22:37.291]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.291]                                 base::R.version$platform, 8 * 
[16:22:37.291]                                   base::.Machine$sizeof.pointer), 
[16:22:37.291]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.291]                                 "release", "version")], collapse = " "), 
[16:22:37.291]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.291]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.291]                               info)
[16:22:37.291]                             info <- base::paste(info, collapse = "; ")
[16:22:37.291]                             if (!has_future) {
[16:22:37.291]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.291]                                 info)
[16:22:37.291]                             }
[16:22:37.291]                             else {
[16:22:37.291]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.291]                                 info, version)
[16:22:37.291]                             }
[16:22:37.291]                             base::stop(msg)
[16:22:37.291]                           }
[16:22:37.291]                         })
[16:22:37.291]                       }
[16:22:37.291]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.291]                       base::options(mc.cores = 1L)
[16:22:37.291]                     }
[16:22:37.291]                     base::local({
[16:22:37.291]                       for (pkg in "utils") {
[16:22:37.291]                         base::loadNamespace(pkg)
[16:22:37.291]                         base::library(pkg, character.only = TRUE)
[16:22:37.291]                       }
[16:22:37.291]                     })
[16:22:37.291]                   }
[16:22:37.291]                   ...future.strategy.old <- future::plan("list")
[16:22:37.291]                   options(future.plan = NULL)
[16:22:37.291]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.291]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.291]                 }
[16:22:37.291]                 ...future.workdir <- getwd()
[16:22:37.291]             }
[16:22:37.291]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.291]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.291]         }
[16:22:37.291]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.291]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.291]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.291]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.291]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.291]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.291]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.291]             base::names(...future.oldOptions))
[16:22:37.291]     }
[16:22:37.291]     if (FALSE) {
[16:22:37.291]     }
[16:22:37.291]     else {
[16:22:37.291]         if (FALSE) {
[16:22:37.291]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.291]                 open = "w")
[16:22:37.291]         }
[16:22:37.291]         else {
[16:22:37.291]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.291]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.291]         }
[16:22:37.291]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.291]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.291]             base::sink(type = "output", split = FALSE)
[16:22:37.291]             base::close(...future.stdout)
[16:22:37.291]         }, add = TRUE)
[16:22:37.291]     }
[16:22:37.291]     ...future.frame <- base::sys.nframe()
[16:22:37.291]     ...future.conditions <- base::list()
[16:22:37.291]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.291]     if (FALSE) {
[16:22:37.291]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.291]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.291]     }
[16:22:37.291]     ...future.result <- base::tryCatch({
[16:22:37.291]         base::withCallingHandlers({
[16:22:37.291]             ...future.value <- base::withVisible(base::local({
[16:22:37.291]                 ...future.makeSendCondition <- base::local({
[16:22:37.291]                   sendCondition <- NULL
[16:22:37.291]                   function(frame = 1L) {
[16:22:37.291]                     if (is.function(sendCondition)) 
[16:22:37.291]                       return(sendCondition)
[16:22:37.291]                     ns <- getNamespace("parallel")
[16:22:37.291]                     if (exists("sendData", mode = "function", 
[16:22:37.291]                       envir = ns)) {
[16:22:37.291]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.291]                         envir = ns)
[16:22:37.291]                       envir <- sys.frame(frame)
[16:22:37.291]                       master <- NULL
[16:22:37.291]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.291]                         !identical(envir, emptyenv())) {
[16:22:37.291]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.291]                           inherits = FALSE)) {
[16:22:37.291]                           master <- get("master", mode = "list", 
[16:22:37.291]                             envir = envir, inherits = FALSE)
[16:22:37.291]                           if (inherits(master, c("SOCKnode", 
[16:22:37.291]                             "SOCK0node"))) {
[16:22:37.291]                             sendCondition <<- function(cond) {
[16:22:37.291]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.291]                                 success = TRUE)
[16:22:37.291]                               parallel_sendData(master, data)
[16:22:37.291]                             }
[16:22:37.291]                             return(sendCondition)
[16:22:37.291]                           }
[16:22:37.291]                         }
[16:22:37.291]                         frame <- frame + 1L
[16:22:37.291]                         envir <- sys.frame(frame)
[16:22:37.291]                       }
[16:22:37.291]                     }
[16:22:37.291]                     sendCondition <<- function(cond) NULL
[16:22:37.291]                   }
[16:22:37.291]                 })
[16:22:37.291]                 withCallingHandlers({
[16:22:37.291]                   {
[16:22:37.291]                     print(1:50)
[16:22:37.291]                     str(1:50)
[16:22:37.291]                     cat(letters, sep = "-")
[16:22:37.291]                     cat(1:6, collapse = "\n")
[16:22:37.291]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.291]                     42L
[16:22:37.291]                   }
[16:22:37.291]                 }, immediateCondition = function(cond) {
[16:22:37.291]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.291]                   sendCondition(cond)
[16:22:37.291]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.291]                   {
[16:22:37.291]                     inherits <- base::inherits
[16:22:37.291]                     invokeRestart <- base::invokeRestart
[16:22:37.291]                     is.null <- base::is.null
[16:22:37.291]                     muffled <- FALSE
[16:22:37.291]                     if (inherits(cond, "message")) {
[16:22:37.291]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.291]                       if (muffled) 
[16:22:37.291]                         invokeRestart("muffleMessage")
[16:22:37.291]                     }
[16:22:37.291]                     else if (inherits(cond, "warning")) {
[16:22:37.291]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.291]                       if (muffled) 
[16:22:37.291]                         invokeRestart("muffleWarning")
[16:22:37.291]                     }
[16:22:37.291]                     else if (inherits(cond, "condition")) {
[16:22:37.291]                       if (!is.null(pattern)) {
[16:22:37.291]                         computeRestarts <- base::computeRestarts
[16:22:37.291]                         grepl <- base::grepl
[16:22:37.291]                         restarts <- computeRestarts(cond)
[16:22:37.291]                         for (restart in restarts) {
[16:22:37.291]                           name <- restart$name
[16:22:37.291]                           if (is.null(name)) 
[16:22:37.291]                             next
[16:22:37.291]                           if (!grepl(pattern, name)) 
[16:22:37.291]                             next
[16:22:37.291]                           invokeRestart(restart)
[16:22:37.291]                           muffled <- TRUE
[16:22:37.291]                           break
[16:22:37.291]                         }
[16:22:37.291]                       }
[16:22:37.291]                     }
[16:22:37.291]                     invisible(muffled)
[16:22:37.291]                   }
[16:22:37.291]                   muffleCondition(cond)
[16:22:37.291]                 })
[16:22:37.291]             }))
[16:22:37.291]             future::FutureResult(value = ...future.value$value, 
[16:22:37.291]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.291]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.291]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.291]                     ...future.globalenv.names))
[16:22:37.291]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.291]         }, condition = base::local({
[16:22:37.291]             c <- base::c
[16:22:37.291]             inherits <- base::inherits
[16:22:37.291]             invokeRestart <- base::invokeRestart
[16:22:37.291]             length <- base::length
[16:22:37.291]             list <- base::list
[16:22:37.291]             seq.int <- base::seq.int
[16:22:37.291]             signalCondition <- base::signalCondition
[16:22:37.291]             sys.calls <- base::sys.calls
[16:22:37.291]             `[[` <- base::`[[`
[16:22:37.291]             `+` <- base::`+`
[16:22:37.291]             `<<-` <- base::`<<-`
[16:22:37.291]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.291]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.291]                   3L)]
[16:22:37.291]             }
[16:22:37.291]             function(cond) {
[16:22:37.291]                 is_error <- inherits(cond, "error")
[16:22:37.291]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.291]                   NULL)
[16:22:37.291]                 if (is_error) {
[16:22:37.291]                   sessionInformation <- function() {
[16:22:37.291]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.291]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.291]                       search = base::search(), system = base::Sys.info())
[16:22:37.291]                   }
[16:22:37.291]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.291]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.291]                     cond$call), session = sessionInformation(), 
[16:22:37.291]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.291]                   signalCondition(cond)
[16:22:37.291]                 }
[16:22:37.291]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.291]                 "immediateCondition"))) {
[16:22:37.291]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.291]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.291]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.291]                   if (TRUE && !signal) {
[16:22:37.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.291]                     {
[16:22:37.291]                       inherits <- base::inherits
[16:22:37.291]                       invokeRestart <- base::invokeRestart
[16:22:37.291]                       is.null <- base::is.null
[16:22:37.291]                       muffled <- FALSE
[16:22:37.291]                       if (inherits(cond, "message")) {
[16:22:37.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.291]                         if (muffled) 
[16:22:37.291]                           invokeRestart("muffleMessage")
[16:22:37.291]                       }
[16:22:37.291]                       else if (inherits(cond, "warning")) {
[16:22:37.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.291]                         if (muffled) 
[16:22:37.291]                           invokeRestart("muffleWarning")
[16:22:37.291]                       }
[16:22:37.291]                       else if (inherits(cond, "condition")) {
[16:22:37.291]                         if (!is.null(pattern)) {
[16:22:37.291]                           computeRestarts <- base::computeRestarts
[16:22:37.291]                           grepl <- base::grepl
[16:22:37.291]                           restarts <- computeRestarts(cond)
[16:22:37.291]                           for (restart in restarts) {
[16:22:37.291]                             name <- restart$name
[16:22:37.291]                             if (is.null(name)) 
[16:22:37.291]                               next
[16:22:37.291]                             if (!grepl(pattern, name)) 
[16:22:37.291]                               next
[16:22:37.291]                             invokeRestart(restart)
[16:22:37.291]                             muffled <- TRUE
[16:22:37.291]                             break
[16:22:37.291]                           }
[16:22:37.291]                         }
[16:22:37.291]                       }
[16:22:37.291]                       invisible(muffled)
[16:22:37.291]                     }
[16:22:37.291]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.291]                   }
[16:22:37.291]                 }
[16:22:37.291]                 else {
[16:22:37.291]                   if (TRUE) {
[16:22:37.291]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.291]                     {
[16:22:37.291]                       inherits <- base::inherits
[16:22:37.291]                       invokeRestart <- base::invokeRestart
[16:22:37.291]                       is.null <- base::is.null
[16:22:37.291]                       muffled <- FALSE
[16:22:37.291]                       if (inherits(cond, "message")) {
[16:22:37.291]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.291]                         if (muffled) 
[16:22:37.291]                           invokeRestart("muffleMessage")
[16:22:37.291]                       }
[16:22:37.291]                       else if (inherits(cond, "warning")) {
[16:22:37.291]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.291]                         if (muffled) 
[16:22:37.291]                           invokeRestart("muffleWarning")
[16:22:37.291]                       }
[16:22:37.291]                       else if (inherits(cond, "condition")) {
[16:22:37.291]                         if (!is.null(pattern)) {
[16:22:37.291]                           computeRestarts <- base::computeRestarts
[16:22:37.291]                           grepl <- base::grepl
[16:22:37.291]                           restarts <- computeRestarts(cond)
[16:22:37.291]                           for (restart in restarts) {
[16:22:37.291]                             name <- restart$name
[16:22:37.291]                             if (is.null(name)) 
[16:22:37.291]                               next
[16:22:37.291]                             if (!grepl(pattern, name)) 
[16:22:37.291]                               next
[16:22:37.291]                             invokeRestart(restart)
[16:22:37.291]                             muffled <- TRUE
[16:22:37.291]                             break
[16:22:37.291]                           }
[16:22:37.291]                         }
[16:22:37.291]                       }
[16:22:37.291]                       invisible(muffled)
[16:22:37.291]                     }
[16:22:37.291]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.291]                   }
[16:22:37.291]                 }
[16:22:37.291]             }
[16:22:37.291]         }))
[16:22:37.291]     }, error = function(ex) {
[16:22:37.291]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.291]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.291]                 ...future.rng), started = ...future.startTime, 
[16:22:37.291]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.291]             version = "1.8"), class = "FutureResult")
[16:22:37.291]     }, finally = {
[16:22:37.291]         if (!identical(...future.workdir, getwd())) 
[16:22:37.291]             setwd(...future.workdir)
[16:22:37.291]         {
[16:22:37.291]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.291]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.291]             }
[16:22:37.291]             base::options(...future.oldOptions)
[16:22:37.291]             if (.Platform$OS.type == "windows") {
[16:22:37.291]                 old_names <- names(...future.oldEnvVars)
[16:22:37.291]                 envs <- base::Sys.getenv()
[16:22:37.291]                 names <- names(envs)
[16:22:37.291]                 common <- intersect(names, old_names)
[16:22:37.291]                 added <- setdiff(names, old_names)
[16:22:37.291]                 removed <- setdiff(old_names, names)
[16:22:37.291]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.291]                   envs[common]]
[16:22:37.291]                 NAMES <- toupper(changed)
[16:22:37.291]                 args <- list()
[16:22:37.291]                 for (kk in seq_along(NAMES)) {
[16:22:37.291]                   name <- changed[[kk]]
[16:22:37.291]                   NAME <- NAMES[[kk]]
[16:22:37.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.291]                     next
[16:22:37.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.291]                 }
[16:22:37.291]                 NAMES <- toupper(added)
[16:22:37.291]                 for (kk in seq_along(NAMES)) {
[16:22:37.291]                   name <- added[[kk]]
[16:22:37.291]                   NAME <- NAMES[[kk]]
[16:22:37.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.291]                     next
[16:22:37.291]                   args[[name]] <- ""
[16:22:37.291]                 }
[16:22:37.291]                 NAMES <- toupper(removed)
[16:22:37.291]                 for (kk in seq_along(NAMES)) {
[16:22:37.291]                   name <- removed[[kk]]
[16:22:37.291]                   NAME <- NAMES[[kk]]
[16:22:37.291]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.291]                     next
[16:22:37.291]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.291]                 }
[16:22:37.291]                 if (length(args) > 0) 
[16:22:37.291]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.291]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.291]             }
[16:22:37.291]             else {
[16:22:37.291]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.291]             }
[16:22:37.291]             {
[16:22:37.291]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.291]                   0L) {
[16:22:37.291]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.291]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.291]                   base::options(opts)
[16:22:37.291]                 }
[16:22:37.291]                 {
[16:22:37.291]                   {
[16:22:37.291]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.291]                     NULL
[16:22:37.291]                   }
[16:22:37.291]                   options(future.plan = NULL)
[16:22:37.291]                   if (is.na(NA_character_)) 
[16:22:37.291]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.291]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.291]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.291]                     .init = FALSE)
[16:22:37.291]                 }
[16:22:37.291]             }
[16:22:37.291]         }
[16:22:37.291]     })
[16:22:37.291]     if (TRUE) {
[16:22:37.291]         base::sink(type = "output", split = FALSE)
[16:22:37.291]         if (FALSE) {
[16:22:37.291]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.291]         }
[16:22:37.291]         else {
[16:22:37.291]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.291]         }
[16:22:37.291]         base::close(...future.stdout)
[16:22:37.291]         ...future.stdout <- NULL
[16:22:37.291]     }
[16:22:37.291]     ...future.result$conditions <- ...future.conditions
[16:22:37.291]     ...future.result$finished <- base::Sys.time()
[16:22:37.291]     ...future.result
[16:22:37.291] }
[16:22:37.294] MultisessionFuture started
[16:22:37.295] - Launch lazy future ... done
[16:22:37.295] run() for ‘MultisessionFuture’ ... done
[16:22:37.295] result() for ClusterFuture ...
[16:22:37.295] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.295] - Validating connection of MultisessionFuture
[16:22:37.339] - received message: FutureResult
[16:22:37.339] - Received FutureResult
[16:22:37.339] - Erased future from FutureRegistry
[16:22:37.339] result() for ClusterFuture ...
[16:22:37.339] - result already collected: FutureResult
[16:22:37.339] result() for ClusterFuture ... done
[16:22:37.339] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.339] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ session_uuid: chr "68f71266-8b11-db57-3d34-353f0f70cd36"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89954
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:37"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:37.347] result() for ClusterFuture ...
[16:22:37.347] - result already collected: FutureResult
[16:22:37.347] result() for ClusterFuture ... done
[16:22:37.347] result() for ClusterFuture ...
[16:22:37.347] - result already collected: FutureResult
[16:22:37.347] result() for ClusterFuture ... done
[16:22:37.348] getGlobalsAndPackages() ...
[16:22:37.348] Searching for globals...
[16:22:37.351] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.351] Searching for globals ... DONE
[16:22:37.351] Resolving globals: FALSE
[16:22:37.351] 
[16:22:37.351] - packages: [1] ‘utils’
[16:22:37.352] getGlobalsAndPackages() ... DONE
[16:22:37.352] run() for ‘Future’ ...
[16:22:37.352] - state: ‘created’
[16:22:37.352] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.366] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.366] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.366]   - Field: ‘node’
[16:22:37.366]   - Field: ‘label’
[16:22:37.366]   - Field: ‘local’
[16:22:37.366]   - Field: ‘owner’
[16:22:37.366]   - Field: ‘envir’
[16:22:37.366]   - Field: ‘workers’
[16:22:37.367]   - Field: ‘packages’
[16:22:37.367]   - Field: ‘gc’
[16:22:37.367]   - Field: ‘conditions’
[16:22:37.367]   - Field: ‘persistent’
[16:22:37.367]   - Field: ‘expr’
[16:22:37.367]   - Field: ‘uuid’
[16:22:37.367]   - Field: ‘seed’
[16:22:37.367]   - Field: ‘version’
[16:22:37.367]   - Field: ‘result’
[16:22:37.367]   - Field: ‘asynchronous’
[16:22:37.367]   - Field: ‘calls’
[16:22:37.368]   - Field: ‘globals’
[16:22:37.368]   - Field: ‘stdout’
[16:22:37.368]   - Field: ‘earlySignal’
[16:22:37.368]   - Field: ‘lazy’
[16:22:37.368]   - Field: ‘state’
[16:22:37.368] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.368] - Launch lazy future ...
[16:22:37.368] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.369] Packages needed by future strategies (n = 0): <none>
[16:22:37.369] {
[16:22:37.369]     {
[16:22:37.369]         {
[16:22:37.369]             ...future.startTime <- base::Sys.time()
[16:22:37.369]             {
[16:22:37.369]                 {
[16:22:37.369]                   {
[16:22:37.369]                     {
[16:22:37.369]                       {
[16:22:37.369]                         base::local({
[16:22:37.369]                           has_future <- base::requireNamespace("future", 
[16:22:37.369]                             quietly = TRUE)
[16:22:37.369]                           if (has_future) {
[16:22:37.369]                             ns <- base::getNamespace("future")
[16:22:37.369]                             version <- ns[[".package"]][["version"]]
[16:22:37.369]                             if (is.null(version)) 
[16:22:37.369]                               version <- utils::packageVersion("future")
[16:22:37.369]                           }
[16:22:37.369]                           else {
[16:22:37.369]                             version <- NULL
[16:22:37.369]                           }
[16:22:37.369]                           if (!has_future || version < "1.8.0") {
[16:22:37.369]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.369]                               "", base::R.version$version.string), 
[16:22:37.369]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.369]                                 base::R.version$platform, 8 * 
[16:22:37.369]                                   base::.Machine$sizeof.pointer), 
[16:22:37.369]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.369]                                 "release", "version")], collapse = " "), 
[16:22:37.369]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.369]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.369]                               info)
[16:22:37.369]                             info <- base::paste(info, collapse = "; ")
[16:22:37.369]                             if (!has_future) {
[16:22:37.369]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.369]                                 info)
[16:22:37.369]                             }
[16:22:37.369]                             else {
[16:22:37.369]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.369]                                 info, version)
[16:22:37.369]                             }
[16:22:37.369]                             base::stop(msg)
[16:22:37.369]                           }
[16:22:37.369]                         })
[16:22:37.369]                       }
[16:22:37.369]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.369]                       base::options(mc.cores = 1L)
[16:22:37.369]                     }
[16:22:37.369]                     base::local({
[16:22:37.369]                       for (pkg in "utils") {
[16:22:37.369]                         base::loadNamespace(pkg)
[16:22:37.369]                         base::library(pkg, character.only = TRUE)
[16:22:37.369]                       }
[16:22:37.369]                     })
[16:22:37.369]                   }
[16:22:37.369]                   ...future.strategy.old <- future::plan("list")
[16:22:37.369]                   options(future.plan = NULL)
[16:22:37.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.369]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.369]                 }
[16:22:37.369]                 ...future.workdir <- getwd()
[16:22:37.369]             }
[16:22:37.369]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.369]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.369]         }
[16:22:37.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.369]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.369]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.369]             base::names(...future.oldOptions))
[16:22:37.369]     }
[16:22:37.369]     if (FALSE) {
[16:22:37.369]     }
[16:22:37.369]     else {
[16:22:37.369]         if (FALSE) {
[16:22:37.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.369]                 open = "w")
[16:22:37.369]         }
[16:22:37.369]         else {
[16:22:37.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.369]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.369]         }
[16:22:37.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.369]             base::sink(type = "output", split = FALSE)
[16:22:37.369]             base::close(...future.stdout)
[16:22:37.369]         }, add = TRUE)
[16:22:37.369]     }
[16:22:37.369]     ...future.frame <- base::sys.nframe()
[16:22:37.369]     ...future.conditions <- base::list()
[16:22:37.369]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.369]     if (FALSE) {
[16:22:37.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.369]     }
[16:22:37.369]     ...future.result <- base::tryCatch({
[16:22:37.369]         base::withCallingHandlers({
[16:22:37.369]             ...future.value <- base::withVisible(base::local({
[16:22:37.369]                 ...future.makeSendCondition <- base::local({
[16:22:37.369]                   sendCondition <- NULL
[16:22:37.369]                   function(frame = 1L) {
[16:22:37.369]                     if (is.function(sendCondition)) 
[16:22:37.369]                       return(sendCondition)
[16:22:37.369]                     ns <- getNamespace("parallel")
[16:22:37.369]                     if (exists("sendData", mode = "function", 
[16:22:37.369]                       envir = ns)) {
[16:22:37.369]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.369]                         envir = ns)
[16:22:37.369]                       envir <- sys.frame(frame)
[16:22:37.369]                       master <- NULL
[16:22:37.369]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.369]                         !identical(envir, emptyenv())) {
[16:22:37.369]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.369]                           inherits = FALSE)) {
[16:22:37.369]                           master <- get("master", mode = "list", 
[16:22:37.369]                             envir = envir, inherits = FALSE)
[16:22:37.369]                           if (inherits(master, c("SOCKnode", 
[16:22:37.369]                             "SOCK0node"))) {
[16:22:37.369]                             sendCondition <<- function(cond) {
[16:22:37.369]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.369]                                 success = TRUE)
[16:22:37.369]                               parallel_sendData(master, data)
[16:22:37.369]                             }
[16:22:37.369]                             return(sendCondition)
[16:22:37.369]                           }
[16:22:37.369]                         }
[16:22:37.369]                         frame <- frame + 1L
[16:22:37.369]                         envir <- sys.frame(frame)
[16:22:37.369]                       }
[16:22:37.369]                     }
[16:22:37.369]                     sendCondition <<- function(cond) NULL
[16:22:37.369]                   }
[16:22:37.369]                 })
[16:22:37.369]                 withCallingHandlers({
[16:22:37.369]                   {
[16:22:37.369]                     print(1:50)
[16:22:37.369]                     str(1:50)
[16:22:37.369]                     cat(letters, sep = "-")
[16:22:37.369]                     cat(1:6, collapse = "\n")
[16:22:37.369]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.369]                     42L
[16:22:37.369]                   }
[16:22:37.369]                 }, immediateCondition = function(cond) {
[16:22:37.369]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.369]                   sendCondition(cond)
[16:22:37.369]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.369]                   {
[16:22:37.369]                     inherits <- base::inherits
[16:22:37.369]                     invokeRestart <- base::invokeRestart
[16:22:37.369]                     is.null <- base::is.null
[16:22:37.369]                     muffled <- FALSE
[16:22:37.369]                     if (inherits(cond, "message")) {
[16:22:37.369]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.369]                       if (muffled) 
[16:22:37.369]                         invokeRestart("muffleMessage")
[16:22:37.369]                     }
[16:22:37.369]                     else if (inherits(cond, "warning")) {
[16:22:37.369]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.369]                       if (muffled) 
[16:22:37.369]                         invokeRestart("muffleWarning")
[16:22:37.369]                     }
[16:22:37.369]                     else if (inherits(cond, "condition")) {
[16:22:37.369]                       if (!is.null(pattern)) {
[16:22:37.369]                         computeRestarts <- base::computeRestarts
[16:22:37.369]                         grepl <- base::grepl
[16:22:37.369]                         restarts <- computeRestarts(cond)
[16:22:37.369]                         for (restart in restarts) {
[16:22:37.369]                           name <- restart$name
[16:22:37.369]                           if (is.null(name)) 
[16:22:37.369]                             next
[16:22:37.369]                           if (!grepl(pattern, name)) 
[16:22:37.369]                             next
[16:22:37.369]                           invokeRestart(restart)
[16:22:37.369]                           muffled <- TRUE
[16:22:37.369]                           break
[16:22:37.369]                         }
[16:22:37.369]                       }
[16:22:37.369]                     }
[16:22:37.369]                     invisible(muffled)
[16:22:37.369]                   }
[16:22:37.369]                   muffleCondition(cond)
[16:22:37.369]                 })
[16:22:37.369]             }))
[16:22:37.369]             future::FutureResult(value = ...future.value$value, 
[16:22:37.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.369]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.369]                     ...future.globalenv.names))
[16:22:37.369]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.369]         }, condition = base::local({
[16:22:37.369]             c <- base::c
[16:22:37.369]             inherits <- base::inherits
[16:22:37.369]             invokeRestart <- base::invokeRestart
[16:22:37.369]             length <- base::length
[16:22:37.369]             list <- base::list
[16:22:37.369]             seq.int <- base::seq.int
[16:22:37.369]             signalCondition <- base::signalCondition
[16:22:37.369]             sys.calls <- base::sys.calls
[16:22:37.369]             `[[` <- base::`[[`
[16:22:37.369]             `+` <- base::`+`
[16:22:37.369]             `<<-` <- base::`<<-`
[16:22:37.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.369]                   3L)]
[16:22:37.369]             }
[16:22:37.369]             function(cond) {
[16:22:37.369]                 is_error <- inherits(cond, "error")
[16:22:37.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.369]                   NULL)
[16:22:37.369]                 if (is_error) {
[16:22:37.369]                   sessionInformation <- function() {
[16:22:37.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.369]                       search = base::search(), system = base::Sys.info())
[16:22:37.369]                   }
[16:22:37.369]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.369]                     cond$call), session = sessionInformation(), 
[16:22:37.369]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.369]                   signalCondition(cond)
[16:22:37.369]                 }
[16:22:37.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.369]                 "immediateCondition"))) {
[16:22:37.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.369]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.369]                   if (TRUE && !signal) {
[16:22:37.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.369]                     {
[16:22:37.369]                       inherits <- base::inherits
[16:22:37.369]                       invokeRestart <- base::invokeRestart
[16:22:37.369]                       is.null <- base::is.null
[16:22:37.369]                       muffled <- FALSE
[16:22:37.369]                       if (inherits(cond, "message")) {
[16:22:37.369]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.369]                         if (muffled) 
[16:22:37.369]                           invokeRestart("muffleMessage")
[16:22:37.369]                       }
[16:22:37.369]                       else if (inherits(cond, "warning")) {
[16:22:37.369]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.369]                         if (muffled) 
[16:22:37.369]                           invokeRestart("muffleWarning")
[16:22:37.369]                       }
[16:22:37.369]                       else if (inherits(cond, "condition")) {
[16:22:37.369]                         if (!is.null(pattern)) {
[16:22:37.369]                           computeRestarts <- base::computeRestarts
[16:22:37.369]                           grepl <- base::grepl
[16:22:37.369]                           restarts <- computeRestarts(cond)
[16:22:37.369]                           for (restart in restarts) {
[16:22:37.369]                             name <- restart$name
[16:22:37.369]                             if (is.null(name)) 
[16:22:37.369]                               next
[16:22:37.369]                             if (!grepl(pattern, name)) 
[16:22:37.369]                               next
[16:22:37.369]                             invokeRestart(restart)
[16:22:37.369]                             muffled <- TRUE
[16:22:37.369]                             break
[16:22:37.369]                           }
[16:22:37.369]                         }
[16:22:37.369]                       }
[16:22:37.369]                       invisible(muffled)
[16:22:37.369]                     }
[16:22:37.369]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.369]                   }
[16:22:37.369]                 }
[16:22:37.369]                 else {
[16:22:37.369]                   if (TRUE) {
[16:22:37.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.369]                     {
[16:22:37.369]                       inherits <- base::inherits
[16:22:37.369]                       invokeRestart <- base::invokeRestart
[16:22:37.369]                       is.null <- base::is.null
[16:22:37.369]                       muffled <- FALSE
[16:22:37.369]                       if (inherits(cond, "message")) {
[16:22:37.369]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.369]                         if (muffled) 
[16:22:37.369]                           invokeRestart("muffleMessage")
[16:22:37.369]                       }
[16:22:37.369]                       else if (inherits(cond, "warning")) {
[16:22:37.369]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.369]                         if (muffled) 
[16:22:37.369]                           invokeRestart("muffleWarning")
[16:22:37.369]                       }
[16:22:37.369]                       else if (inherits(cond, "condition")) {
[16:22:37.369]                         if (!is.null(pattern)) {
[16:22:37.369]                           computeRestarts <- base::computeRestarts
[16:22:37.369]                           grepl <- base::grepl
[16:22:37.369]                           restarts <- computeRestarts(cond)
[16:22:37.369]                           for (restart in restarts) {
[16:22:37.369]                             name <- restart$name
[16:22:37.369]                             if (is.null(name)) 
[16:22:37.369]                               next
[16:22:37.369]                             if (!grepl(pattern, name)) 
[16:22:37.369]                               next
[16:22:37.369]                             invokeRestart(restart)
[16:22:37.369]                             muffled <- TRUE
[16:22:37.369]                             break
[16:22:37.369]                           }
[16:22:37.369]                         }
[16:22:37.369]                       }
[16:22:37.369]                       invisible(muffled)
[16:22:37.369]                     }
[16:22:37.369]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.369]                   }
[16:22:37.369]                 }
[16:22:37.369]             }
[16:22:37.369]         }))
[16:22:37.369]     }, error = function(ex) {
[16:22:37.369]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.369]                 ...future.rng), started = ...future.startTime, 
[16:22:37.369]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.369]             version = "1.8"), class = "FutureResult")
[16:22:37.369]     }, finally = {
[16:22:37.369]         if (!identical(...future.workdir, getwd())) 
[16:22:37.369]             setwd(...future.workdir)
[16:22:37.369]         {
[16:22:37.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.369]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.369]             }
[16:22:37.369]             base::options(...future.oldOptions)
[16:22:37.369]             if (.Platform$OS.type == "windows") {
[16:22:37.369]                 old_names <- names(...future.oldEnvVars)
[16:22:37.369]                 envs <- base::Sys.getenv()
[16:22:37.369]                 names <- names(envs)
[16:22:37.369]                 common <- intersect(names, old_names)
[16:22:37.369]                 added <- setdiff(names, old_names)
[16:22:37.369]                 removed <- setdiff(old_names, names)
[16:22:37.369]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.369]                   envs[common]]
[16:22:37.369]                 NAMES <- toupper(changed)
[16:22:37.369]                 args <- list()
[16:22:37.369]                 for (kk in seq_along(NAMES)) {
[16:22:37.369]                   name <- changed[[kk]]
[16:22:37.369]                   NAME <- NAMES[[kk]]
[16:22:37.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.369]                     next
[16:22:37.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.369]                 }
[16:22:37.369]                 NAMES <- toupper(added)
[16:22:37.369]                 for (kk in seq_along(NAMES)) {
[16:22:37.369]                   name <- added[[kk]]
[16:22:37.369]                   NAME <- NAMES[[kk]]
[16:22:37.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.369]                     next
[16:22:37.369]                   args[[name]] <- ""
[16:22:37.369]                 }
[16:22:37.369]                 NAMES <- toupper(removed)
[16:22:37.369]                 for (kk in seq_along(NAMES)) {
[16:22:37.369]                   name <- removed[[kk]]
[16:22:37.369]                   NAME <- NAMES[[kk]]
[16:22:37.369]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.369]                     next
[16:22:37.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.369]                 }
[16:22:37.369]                 if (length(args) > 0) 
[16:22:37.369]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.369]             }
[16:22:37.369]             else {
[16:22:37.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.369]             }
[16:22:37.369]             {
[16:22:37.369]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.369]                   0L) {
[16:22:37.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.369]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.369]                   base::options(opts)
[16:22:37.369]                 }
[16:22:37.369]                 {
[16:22:37.369]                   {
[16:22:37.369]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.369]                     NULL
[16:22:37.369]                   }
[16:22:37.369]                   options(future.plan = NULL)
[16:22:37.369]                   if (is.na(NA_character_)) 
[16:22:37.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.369]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.369]                     .init = FALSE)
[16:22:37.369]                 }
[16:22:37.369]             }
[16:22:37.369]         }
[16:22:37.369]     })
[16:22:37.369]     if (TRUE) {
[16:22:37.369]         base::sink(type = "output", split = FALSE)
[16:22:37.369]         if (FALSE) {
[16:22:37.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.369]         }
[16:22:37.369]         else {
[16:22:37.369]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.369]         }
[16:22:37.369]         base::close(...future.stdout)
[16:22:37.369]         ...future.stdout <- NULL
[16:22:37.369]     }
[16:22:37.369]     ...future.result$conditions <- ...future.conditions
[16:22:37.369]     ...future.result$finished <- base::Sys.time()
[16:22:37.369]     ...future.result
[16:22:37.369] }
[16:22:37.372] MultisessionFuture started
[16:22:37.372] - Launch lazy future ... done
[16:22:37.372] run() for ‘MultisessionFuture’ ... done
[16:22:37.372] result() for ClusterFuture ...
[16:22:37.372] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.373] - Validating connection of MultisessionFuture
[16:22:37.374] - received message: FutureResult
[16:22:37.374] - Received FutureResult
[16:22:37.374] - Erased future from FutureRegistry
[16:22:37.375] result() for ClusterFuture ...
[16:22:37.375] - result already collected: FutureResult
[16:22:37.375] result() for ClusterFuture ... done
[16:22:37.375] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.375] result() for ClusterFuture ... done
[16:22:37.375] result() for ClusterFuture ...
[16:22:37.375] - result already collected: FutureResult
[16:22:37.375] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:37.375] getGlobalsAndPackages() ...
[16:22:37.375] Searching for globals...
[16:22:37.376] - globals found: [1] ‘print’
[16:22:37.376] Searching for globals ... DONE
[16:22:37.376] Resolving globals: FALSE
[16:22:37.376] 
[16:22:37.377] 
[16:22:37.377] getGlobalsAndPackages() ... DONE
[16:22:37.377] run() for ‘Future’ ...
[16:22:37.377] - state: ‘created’
[16:22:37.377] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.390] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.391] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.391]   - Field: ‘node’
[16:22:37.391]   - Field: ‘label’
[16:22:37.391]   - Field: ‘local’
[16:22:37.391]   - Field: ‘owner’
[16:22:37.391]   - Field: ‘envir’
[16:22:37.391]   - Field: ‘workers’
[16:22:37.391]   - Field: ‘packages’
[16:22:37.391]   - Field: ‘gc’
[16:22:37.391]   - Field: ‘conditions’
[16:22:37.392]   - Field: ‘persistent’
[16:22:37.392]   - Field: ‘expr’
[16:22:37.392]   - Field: ‘uuid’
[16:22:37.392]   - Field: ‘seed’
[16:22:37.392]   - Field: ‘version’
[16:22:37.392]   - Field: ‘result’
[16:22:37.392]   - Field: ‘asynchronous’
[16:22:37.392]   - Field: ‘calls’
[16:22:37.392]   - Field: ‘globals’
[16:22:37.392]   - Field: ‘stdout’
[16:22:37.393]   - Field: ‘earlySignal’
[16:22:37.393]   - Field: ‘lazy’
[16:22:37.393]   - Field: ‘state’
[16:22:37.393] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.393] - Launch lazy future ...
[16:22:37.393] Packages needed by the future expression (n = 0): <none>
[16:22:37.393] Packages needed by future strategies (n = 0): <none>
[16:22:37.394] {
[16:22:37.394]     {
[16:22:37.394]         {
[16:22:37.394]             ...future.startTime <- base::Sys.time()
[16:22:37.394]             {
[16:22:37.394]                 {
[16:22:37.394]                   {
[16:22:37.394]                     {
[16:22:37.394]                       base::local({
[16:22:37.394]                         has_future <- base::requireNamespace("future", 
[16:22:37.394]                           quietly = TRUE)
[16:22:37.394]                         if (has_future) {
[16:22:37.394]                           ns <- base::getNamespace("future")
[16:22:37.394]                           version <- ns[[".package"]][["version"]]
[16:22:37.394]                           if (is.null(version)) 
[16:22:37.394]                             version <- utils::packageVersion("future")
[16:22:37.394]                         }
[16:22:37.394]                         else {
[16:22:37.394]                           version <- NULL
[16:22:37.394]                         }
[16:22:37.394]                         if (!has_future || version < "1.8.0") {
[16:22:37.394]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.394]                             "", base::R.version$version.string), 
[16:22:37.394]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:37.394]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:37.394]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.394]                               "release", "version")], collapse = " "), 
[16:22:37.394]                             hostname = base::Sys.info()[["nodename"]])
[16:22:37.394]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.394]                             info)
[16:22:37.394]                           info <- base::paste(info, collapse = "; ")
[16:22:37.394]                           if (!has_future) {
[16:22:37.394]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.394]                               info)
[16:22:37.394]                           }
[16:22:37.394]                           else {
[16:22:37.394]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.394]                               info, version)
[16:22:37.394]                           }
[16:22:37.394]                           base::stop(msg)
[16:22:37.394]                         }
[16:22:37.394]                       })
[16:22:37.394]                     }
[16:22:37.394]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.394]                     base::options(mc.cores = 1L)
[16:22:37.394]                   }
[16:22:37.394]                   ...future.strategy.old <- future::plan("list")
[16:22:37.394]                   options(future.plan = NULL)
[16:22:37.394]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.394]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.394]                 }
[16:22:37.394]                 ...future.workdir <- getwd()
[16:22:37.394]             }
[16:22:37.394]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.394]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.394]         }
[16:22:37.394]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.394]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.394]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.394]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.394]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.394]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.394]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.394]             base::names(...future.oldOptions))
[16:22:37.394]     }
[16:22:37.394]     if (FALSE) {
[16:22:37.394]     }
[16:22:37.394]     else {
[16:22:37.394]         if (TRUE) {
[16:22:37.394]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.394]                 open = "w")
[16:22:37.394]         }
[16:22:37.394]         else {
[16:22:37.394]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.394]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.394]         }
[16:22:37.394]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.394]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.394]             base::sink(type = "output", split = FALSE)
[16:22:37.394]             base::close(...future.stdout)
[16:22:37.394]         }, add = TRUE)
[16:22:37.394]     }
[16:22:37.394]     ...future.frame <- base::sys.nframe()
[16:22:37.394]     ...future.conditions <- base::list()
[16:22:37.394]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.394]     if (FALSE) {
[16:22:37.394]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.394]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.394]     }
[16:22:37.394]     ...future.result <- base::tryCatch({
[16:22:37.394]         base::withCallingHandlers({
[16:22:37.394]             ...future.value <- base::withVisible(base::local({
[16:22:37.394]                 ...future.makeSendCondition <- base::local({
[16:22:37.394]                   sendCondition <- NULL
[16:22:37.394]                   function(frame = 1L) {
[16:22:37.394]                     if (is.function(sendCondition)) 
[16:22:37.394]                       return(sendCondition)
[16:22:37.394]                     ns <- getNamespace("parallel")
[16:22:37.394]                     if (exists("sendData", mode = "function", 
[16:22:37.394]                       envir = ns)) {
[16:22:37.394]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.394]                         envir = ns)
[16:22:37.394]                       envir <- sys.frame(frame)
[16:22:37.394]                       master <- NULL
[16:22:37.394]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.394]                         !identical(envir, emptyenv())) {
[16:22:37.394]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.394]                           inherits = FALSE)) {
[16:22:37.394]                           master <- get("master", mode = "list", 
[16:22:37.394]                             envir = envir, inherits = FALSE)
[16:22:37.394]                           if (inherits(master, c("SOCKnode", 
[16:22:37.394]                             "SOCK0node"))) {
[16:22:37.394]                             sendCondition <<- function(cond) {
[16:22:37.394]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.394]                                 success = TRUE)
[16:22:37.394]                               parallel_sendData(master, data)
[16:22:37.394]                             }
[16:22:37.394]                             return(sendCondition)
[16:22:37.394]                           }
[16:22:37.394]                         }
[16:22:37.394]                         frame <- frame + 1L
[16:22:37.394]                         envir <- sys.frame(frame)
[16:22:37.394]                       }
[16:22:37.394]                     }
[16:22:37.394]                     sendCondition <<- function(cond) NULL
[16:22:37.394]                   }
[16:22:37.394]                 })
[16:22:37.394]                 withCallingHandlers({
[16:22:37.394]                   print(42)
[16:22:37.394]                 }, immediateCondition = function(cond) {
[16:22:37.394]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.394]                   sendCondition(cond)
[16:22:37.394]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.394]                   {
[16:22:37.394]                     inherits <- base::inherits
[16:22:37.394]                     invokeRestart <- base::invokeRestart
[16:22:37.394]                     is.null <- base::is.null
[16:22:37.394]                     muffled <- FALSE
[16:22:37.394]                     if (inherits(cond, "message")) {
[16:22:37.394]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.394]                       if (muffled) 
[16:22:37.394]                         invokeRestart("muffleMessage")
[16:22:37.394]                     }
[16:22:37.394]                     else if (inherits(cond, "warning")) {
[16:22:37.394]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.394]                       if (muffled) 
[16:22:37.394]                         invokeRestart("muffleWarning")
[16:22:37.394]                     }
[16:22:37.394]                     else if (inherits(cond, "condition")) {
[16:22:37.394]                       if (!is.null(pattern)) {
[16:22:37.394]                         computeRestarts <- base::computeRestarts
[16:22:37.394]                         grepl <- base::grepl
[16:22:37.394]                         restarts <- computeRestarts(cond)
[16:22:37.394]                         for (restart in restarts) {
[16:22:37.394]                           name <- restart$name
[16:22:37.394]                           if (is.null(name)) 
[16:22:37.394]                             next
[16:22:37.394]                           if (!grepl(pattern, name)) 
[16:22:37.394]                             next
[16:22:37.394]                           invokeRestart(restart)
[16:22:37.394]                           muffled <- TRUE
[16:22:37.394]                           break
[16:22:37.394]                         }
[16:22:37.394]                       }
[16:22:37.394]                     }
[16:22:37.394]                     invisible(muffled)
[16:22:37.394]                   }
[16:22:37.394]                   muffleCondition(cond)
[16:22:37.394]                 })
[16:22:37.394]             }))
[16:22:37.394]             future::FutureResult(value = ...future.value$value, 
[16:22:37.394]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.394]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.394]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.394]                     ...future.globalenv.names))
[16:22:37.394]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.394]         }, condition = base::local({
[16:22:37.394]             c <- base::c
[16:22:37.394]             inherits <- base::inherits
[16:22:37.394]             invokeRestart <- base::invokeRestart
[16:22:37.394]             length <- base::length
[16:22:37.394]             list <- base::list
[16:22:37.394]             seq.int <- base::seq.int
[16:22:37.394]             signalCondition <- base::signalCondition
[16:22:37.394]             sys.calls <- base::sys.calls
[16:22:37.394]             `[[` <- base::`[[`
[16:22:37.394]             `+` <- base::`+`
[16:22:37.394]             `<<-` <- base::`<<-`
[16:22:37.394]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.394]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.394]                   3L)]
[16:22:37.394]             }
[16:22:37.394]             function(cond) {
[16:22:37.394]                 is_error <- inherits(cond, "error")
[16:22:37.394]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.394]                   NULL)
[16:22:37.394]                 if (is_error) {
[16:22:37.394]                   sessionInformation <- function() {
[16:22:37.394]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.394]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.394]                       search = base::search(), system = base::Sys.info())
[16:22:37.394]                   }
[16:22:37.394]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.394]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.394]                     cond$call), session = sessionInformation(), 
[16:22:37.394]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.394]                   signalCondition(cond)
[16:22:37.394]                 }
[16:22:37.394]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.394]                 "immediateCondition"))) {
[16:22:37.394]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.394]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.394]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.394]                   if (TRUE && !signal) {
[16:22:37.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.394]                     {
[16:22:37.394]                       inherits <- base::inherits
[16:22:37.394]                       invokeRestart <- base::invokeRestart
[16:22:37.394]                       is.null <- base::is.null
[16:22:37.394]                       muffled <- FALSE
[16:22:37.394]                       if (inherits(cond, "message")) {
[16:22:37.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.394]                         if (muffled) 
[16:22:37.394]                           invokeRestart("muffleMessage")
[16:22:37.394]                       }
[16:22:37.394]                       else if (inherits(cond, "warning")) {
[16:22:37.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.394]                         if (muffled) 
[16:22:37.394]                           invokeRestart("muffleWarning")
[16:22:37.394]                       }
[16:22:37.394]                       else if (inherits(cond, "condition")) {
[16:22:37.394]                         if (!is.null(pattern)) {
[16:22:37.394]                           computeRestarts <- base::computeRestarts
[16:22:37.394]                           grepl <- base::grepl
[16:22:37.394]                           restarts <- computeRestarts(cond)
[16:22:37.394]                           for (restart in restarts) {
[16:22:37.394]                             name <- restart$name
[16:22:37.394]                             if (is.null(name)) 
[16:22:37.394]                               next
[16:22:37.394]                             if (!grepl(pattern, name)) 
[16:22:37.394]                               next
[16:22:37.394]                             invokeRestart(restart)
[16:22:37.394]                             muffled <- TRUE
[16:22:37.394]                             break
[16:22:37.394]                           }
[16:22:37.394]                         }
[16:22:37.394]                       }
[16:22:37.394]                       invisible(muffled)
[16:22:37.394]                     }
[16:22:37.394]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.394]                   }
[16:22:37.394]                 }
[16:22:37.394]                 else {
[16:22:37.394]                   if (TRUE) {
[16:22:37.394]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.394]                     {
[16:22:37.394]                       inherits <- base::inherits
[16:22:37.394]                       invokeRestart <- base::invokeRestart
[16:22:37.394]                       is.null <- base::is.null
[16:22:37.394]                       muffled <- FALSE
[16:22:37.394]                       if (inherits(cond, "message")) {
[16:22:37.394]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.394]                         if (muffled) 
[16:22:37.394]                           invokeRestart("muffleMessage")
[16:22:37.394]                       }
[16:22:37.394]                       else if (inherits(cond, "warning")) {
[16:22:37.394]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.394]                         if (muffled) 
[16:22:37.394]                           invokeRestart("muffleWarning")
[16:22:37.394]                       }
[16:22:37.394]                       else if (inherits(cond, "condition")) {
[16:22:37.394]                         if (!is.null(pattern)) {
[16:22:37.394]                           computeRestarts <- base::computeRestarts
[16:22:37.394]                           grepl <- base::grepl
[16:22:37.394]                           restarts <- computeRestarts(cond)
[16:22:37.394]                           for (restart in restarts) {
[16:22:37.394]                             name <- restart$name
[16:22:37.394]                             if (is.null(name)) 
[16:22:37.394]                               next
[16:22:37.394]                             if (!grepl(pattern, name)) 
[16:22:37.394]                               next
[16:22:37.394]                             invokeRestart(restart)
[16:22:37.394]                             muffled <- TRUE
[16:22:37.394]                             break
[16:22:37.394]                           }
[16:22:37.394]                         }
[16:22:37.394]                       }
[16:22:37.394]                       invisible(muffled)
[16:22:37.394]                     }
[16:22:37.394]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.394]                   }
[16:22:37.394]                 }
[16:22:37.394]             }
[16:22:37.394]         }))
[16:22:37.394]     }, error = function(ex) {
[16:22:37.394]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.394]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.394]                 ...future.rng), started = ...future.startTime, 
[16:22:37.394]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.394]             version = "1.8"), class = "FutureResult")
[16:22:37.394]     }, finally = {
[16:22:37.394]         if (!identical(...future.workdir, getwd())) 
[16:22:37.394]             setwd(...future.workdir)
[16:22:37.394]         {
[16:22:37.394]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.394]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.394]             }
[16:22:37.394]             base::options(...future.oldOptions)
[16:22:37.394]             if (.Platform$OS.type == "windows") {
[16:22:37.394]                 old_names <- names(...future.oldEnvVars)
[16:22:37.394]                 envs <- base::Sys.getenv()
[16:22:37.394]                 names <- names(envs)
[16:22:37.394]                 common <- intersect(names, old_names)
[16:22:37.394]                 added <- setdiff(names, old_names)
[16:22:37.394]                 removed <- setdiff(old_names, names)
[16:22:37.394]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.394]                   envs[common]]
[16:22:37.394]                 NAMES <- toupper(changed)
[16:22:37.394]                 args <- list()
[16:22:37.394]                 for (kk in seq_along(NAMES)) {
[16:22:37.394]                   name <- changed[[kk]]
[16:22:37.394]                   NAME <- NAMES[[kk]]
[16:22:37.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.394]                     next
[16:22:37.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.394]                 }
[16:22:37.394]                 NAMES <- toupper(added)
[16:22:37.394]                 for (kk in seq_along(NAMES)) {
[16:22:37.394]                   name <- added[[kk]]
[16:22:37.394]                   NAME <- NAMES[[kk]]
[16:22:37.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.394]                     next
[16:22:37.394]                   args[[name]] <- ""
[16:22:37.394]                 }
[16:22:37.394]                 NAMES <- toupper(removed)
[16:22:37.394]                 for (kk in seq_along(NAMES)) {
[16:22:37.394]                   name <- removed[[kk]]
[16:22:37.394]                   NAME <- NAMES[[kk]]
[16:22:37.394]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.394]                     next
[16:22:37.394]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.394]                 }
[16:22:37.394]                 if (length(args) > 0) 
[16:22:37.394]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.394]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.394]             }
[16:22:37.394]             else {
[16:22:37.394]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.394]             }
[16:22:37.394]             {
[16:22:37.394]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.394]                   0L) {
[16:22:37.394]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.394]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.394]                   base::options(opts)
[16:22:37.394]                 }
[16:22:37.394]                 {
[16:22:37.394]                   {
[16:22:37.394]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.394]                     NULL
[16:22:37.394]                   }
[16:22:37.394]                   options(future.plan = NULL)
[16:22:37.394]                   if (is.na(NA_character_)) 
[16:22:37.394]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.394]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.394]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.394]                     .init = FALSE)
[16:22:37.394]                 }
[16:22:37.394]             }
[16:22:37.394]         }
[16:22:37.394]     })
[16:22:37.394]     if (TRUE) {
[16:22:37.394]         base::sink(type = "output", split = FALSE)
[16:22:37.394]         if (TRUE) {
[16:22:37.394]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.394]         }
[16:22:37.394]         else {
[16:22:37.394]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.394]         }
[16:22:37.394]         base::close(...future.stdout)
[16:22:37.394]         ...future.stdout <- NULL
[16:22:37.394]     }
[16:22:37.394]     ...future.result$conditions <- ...future.conditions
[16:22:37.394]     ...future.result$finished <- base::Sys.time()
[16:22:37.394]     ...future.result
[16:22:37.394] }
[16:22:37.397] MultisessionFuture started
[16:22:37.397] - Launch lazy future ... done
[16:22:37.397] run() for ‘MultisessionFuture’ ... done
[16:22:37.397] result() for ClusterFuture ...
[16:22:37.397] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.397] - Validating connection of MultisessionFuture
[16:22:37.398] - received message: FutureResult
[16:22:37.399] - Received FutureResult
[16:22:37.399] - Erased future from FutureRegistry
[16:22:37.399] result() for ClusterFuture ...
[16:22:37.399] - result already collected: FutureResult
[16:22:37.399] result() for ClusterFuture ... done
[16:22:37.399] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.399] result() for ClusterFuture ... done
[16:22:37.399] result() for ClusterFuture ...
[16:22:37.399] - result already collected: FutureResult
[16:22:37.399] result() for ClusterFuture ... done
[16:22:37.399] result() for ClusterFuture ...
[16:22:37.400] - result already collected: FutureResult
[16:22:37.400] result() for ClusterFuture ... done
[1] 42
[16:22:37.400] result() for ClusterFuture ...
[16:22:37.400] - result already collected: FutureResult
[16:22:37.400] result() for ClusterFuture ... done
- stdout = NA
[16:22:37.400] getGlobalsAndPackages() ...
[16:22:37.400] Searching for globals...
[16:22:37.403] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.403] Searching for globals ... DONE
[16:22:37.403] Resolving globals: FALSE
[16:22:37.404] 
[16:22:37.404] - packages: [1] ‘utils’
[16:22:37.404] getGlobalsAndPackages() ... DONE
[16:22:37.404] run() for ‘Future’ ...
[16:22:37.404] - state: ‘created’
[16:22:37.405] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.418] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.418] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.418]   - Field: ‘node’
[16:22:37.419]   - Field: ‘label’
[16:22:37.419]   - Field: ‘local’
[16:22:37.419]   - Field: ‘owner’
[16:22:37.419]   - Field: ‘envir’
[16:22:37.419]   - Field: ‘workers’
[16:22:37.419]   - Field: ‘packages’
[16:22:37.419]   - Field: ‘gc’
[16:22:37.419]   - Field: ‘conditions’
[16:22:37.419]   - Field: ‘persistent’
[16:22:37.419]   - Field: ‘expr’
[16:22:37.419]   - Field: ‘uuid’
[16:22:37.422]   - Field: ‘seed’
[16:22:37.422]   - Field: ‘version’
[16:22:37.422]   - Field: ‘result’
[16:22:37.422]   - Field: ‘asynchronous’
[16:22:37.422]   - Field: ‘calls’
[16:22:37.422]   - Field: ‘globals’
[16:22:37.422]   - Field: ‘stdout’
[16:22:37.422]   - Field: ‘earlySignal’
[16:22:37.422]   - Field: ‘lazy’
[16:22:37.422]   - Field: ‘state’
[16:22:37.423] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.423] - Launch lazy future ...
[16:22:37.423] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.423] Packages needed by future strategies (n = 0): <none>
[16:22:37.423] {
[16:22:37.423]     {
[16:22:37.423]         {
[16:22:37.423]             ...future.startTime <- base::Sys.time()
[16:22:37.423]             {
[16:22:37.423]                 {
[16:22:37.423]                   {
[16:22:37.423]                     {
[16:22:37.423]                       {
[16:22:37.423]                         base::local({
[16:22:37.423]                           has_future <- base::requireNamespace("future", 
[16:22:37.423]                             quietly = TRUE)
[16:22:37.423]                           if (has_future) {
[16:22:37.423]                             ns <- base::getNamespace("future")
[16:22:37.423]                             version <- ns[[".package"]][["version"]]
[16:22:37.423]                             if (is.null(version)) 
[16:22:37.423]                               version <- utils::packageVersion("future")
[16:22:37.423]                           }
[16:22:37.423]                           else {
[16:22:37.423]                             version <- NULL
[16:22:37.423]                           }
[16:22:37.423]                           if (!has_future || version < "1.8.0") {
[16:22:37.423]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.423]                               "", base::R.version$version.string), 
[16:22:37.423]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.423]                                 base::R.version$platform, 8 * 
[16:22:37.423]                                   base::.Machine$sizeof.pointer), 
[16:22:37.423]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.423]                                 "release", "version")], collapse = " "), 
[16:22:37.423]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.423]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.423]                               info)
[16:22:37.423]                             info <- base::paste(info, collapse = "; ")
[16:22:37.423]                             if (!has_future) {
[16:22:37.423]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.423]                                 info)
[16:22:37.423]                             }
[16:22:37.423]                             else {
[16:22:37.423]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.423]                                 info, version)
[16:22:37.423]                             }
[16:22:37.423]                             base::stop(msg)
[16:22:37.423]                           }
[16:22:37.423]                         })
[16:22:37.423]                       }
[16:22:37.423]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.423]                       base::options(mc.cores = 1L)
[16:22:37.423]                     }
[16:22:37.423]                     base::local({
[16:22:37.423]                       for (pkg in "utils") {
[16:22:37.423]                         base::loadNamespace(pkg)
[16:22:37.423]                         base::library(pkg, character.only = TRUE)
[16:22:37.423]                       }
[16:22:37.423]                     })
[16:22:37.423]                   }
[16:22:37.423]                   ...future.strategy.old <- future::plan("list")
[16:22:37.423]                   options(future.plan = NULL)
[16:22:37.423]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.423]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.423]                 }
[16:22:37.423]                 ...future.workdir <- getwd()
[16:22:37.423]             }
[16:22:37.423]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.423]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.423]         }
[16:22:37.423]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.423]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.423]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.423]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.423]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.423]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.423]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.423]             base::names(...future.oldOptions))
[16:22:37.423]     }
[16:22:37.423]     if (TRUE) {
[16:22:37.423]     }
[16:22:37.423]     else {
[16:22:37.423]         if (NA) {
[16:22:37.423]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.423]                 open = "w")
[16:22:37.423]         }
[16:22:37.423]         else {
[16:22:37.423]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.423]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.423]         }
[16:22:37.423]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.423]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.423]             base::sink(type = "output", split = FALSE)
[16:22:37.423]             base::close(...future.stdout)
[16:22:37.423]         }, add = TRUE)
[16:22:37.423]     }
[16:22:37.423]     ...future.frame <- base::sys.nframe()
[16:22:37.423]     ...future.conditions <- base::list()
[16:22:37.423]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.423]     if (FALSE) {
[16:22:37.423]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.423]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.423]     }
[16:22:37.423]     ...future.result <- base::tryCatch({
[16:22:37.423]         base::withCallingHandlers({
[16:22:37.423]             ...future.value <- base::withVisible(base::local({
[16:22:37.423]                 ...future.makeSendCondition <- base::local({
[16:22:37.423]                   sendCondition <- NULL
[16:22:37.423]                   function(frame = 1L) {
[16:22:37.423]                     if (is.function(sendCondition)) 
[16:22:37.423]                       return(sendCondition)
[16:22:37.423]                     ns <- getNamespace("parallel")
[16:22:37.423]                     if (exists("sendData", mode = "function", 
[16:22:37.423]                       envir = ns)) {
[16:22:37.423]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.423]                         envir = ns)
[16:22:37.423]                       envir <- sys.frame(frame)
[16:22:37.423]                       master <- NULL
[16:22:37.423]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.423]                         !identical(envir, emptyenv())) {
[16:22:37.423]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.423]                           inherits = FALSE)) {
[16:22:37.423]                           master <- get("master", mode = "list", 
[16:22:37.423]                             envir = envir, inherits = FALSE)
[16:22:37.423]                           if (inherits(master, c("SOCKnode", 
[16:22:37.423]                             "SOCK0node"))) {
[16:22:37.423]                             sendCondition <<- function(cond) {
[16:22:37.423]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.423]                                 success = TRUE)
[16:22:37.423]                               parallel_sendData(master, data)
[16:22:37.423]                             }
[16:22:37.423]                             return(sendCondition)
[16:22:37.423]                           }
[16:22:37.423]                         }
[16:22:37.423]                         frame <- frame + 1L
[16:22:37.423]                         envir <- sys.frame(frame)
[16:22:37.423]                       }
[16:22:37.423]                     }
[16:22:37.423]                     sendCondition <<- function(cond) NULL
[16:22:37.423]                   }
[16:22:37.423]                 })
[16:22:37.423]                 withCallingHandlers({
[16:22:37.423]                   {
[16:22:37.423]                     print(1:50)
[16:22:37.423]                     str(1:50)
[16:22:37.423]                     cat(letters, sep = "-")
[16:22:37.423]                     cat(1:6, collapse = "\n")
[16:22:37.423]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.423]                     42L
[16:22:37.423]                   }
[16:22:37.423]                 }, immediateCondition = function(cond) {
[16:22:37.423]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.423]                   sendCondition(cond)
[16:22:37.423]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.423]                   {
[16:22:37.423]                     inherits <- base::inherits
[16:22:37.423]                     invokeRestart <- base::invokeRestart
[16:22:37.423]                     is.null <- base::is.null
[16:22:37.423]                     muffled <- FALSE
[16:22:37.423]                     if (inherits(cond, "message")) {
[16:22:37.423]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.423]                       if (muffled) 
[16:22:37.423]                         invokeRestart("muffleMessage")
[16:22:37.423]                     }
[16:22:37.423]                     else if (inherits(cond, "warning")) {
[16:22:37.423]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.423]                       if (muffled) 
[16:22:37.423]                         invokeRestart("muffleWarning")
[16:22:37.423]                     }
[16:22:37.423]                     else if (inherits(cond, "condition")) {
[16:22:37.423]                       if (!is.null(pattern)) {
[16:22:37.423]                         computeRestarts <- base::computeRestarts
[16:22:37.423]                         grepl <- base::grepl
[16:22:37.423]                         restarts <- computeRestarts(cond)
[16:22:37.423]                         for (restart in restarts) {
[16:22:37.423]                           name <- restart$name
[16:22:37.423]                           if (is.null(name)) 
[16:22:37.423]                             next
[16:22:37.423]                           if (!grepl(pattern, name)) 
[16:22:37.423]                             next
[16:22:37.423]                           invokeRestart(restart)
[16:22:37.423]                           muffled <- TRUE
[16:22:37.423]                           break
[16:22:37.423]                         }
[16:22:37.423]                       }
[16:22:37.423]                     }
[16:22:37.423]                     invisible(muffled)
[16:22:37.423]                   }
[16:22:37.423]                   muffleCondition(cond)
[16:22:37.423]                 })
[16:22:37.423]             }))
[16:22:37.423]             future::FutureResult(value = ...future.value$value, 
[16:22:37.423]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.423]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.423]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.423]                     ...future.globalenv.names))
[16:22:37.423]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.423]         }, condition = base::local({
[16:22:37.423]             c <- base::c
[16:22:37.423]             inherits <- base::inherits
[16:22:37.423]             invokeRestart <- base::invokeRestart
[16:22:37.423]             length <- base::length
[16:22:37.423]             list <- base::list
[16:22:37.423]             seq.int <- base::seq.int
[16:22:37.423]             signalCondition <- base::signalCondition
[16:22:37.423]             sys.calls <- base::sys.calls
[16:22:37.423]             `[[` <- base::`[[`
[16:22:37.423]             `+` <- base::`+`
[16:22:37.423]             `<<-` <- base::`<<-`
[16:22:37.423]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.423]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.423]                   3L)]
[16:22:37.423]             }
[16:22:37.423]             function(cond) {
[16:22:37.423]                 is_error <- inherits(cond, "error")
[16:22:37.423]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.423]                   NULL)
[16:22:37.423]                 if (is_error) {
[16:22:37.423]                   sessionInformation <- function() {
[16:22:37.423]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.423]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.423]                       search = base::search(), system = base::Sys.info())
[16:22:37.423]                   }
[16:22:37.423]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.423]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.423]                     cond$call), session = sessionInformation(), 
[16:22:37.423]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.423]                   signalCondition(cond)
[16:22:37.423]                 }
[16:22:37.423]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.423]                 "immediateCondition"))) {
[16:22:37.423]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.423]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.423]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.423]                   if (TRUE && !signal) {
[16:22:37.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.423]                     {
[16:22:37.423]                       inherits <- base::inherits
[16:22:37.423]                       invokeRestart <- base::invokeRestart
[16:22:37.423]                       is.null <- base::is.null
[16:22:37.423]                       muffled <- FALSE
[16:22:37.423]                       if (inherits(cond, "message")) {
[16:22:37.423]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.423]                         if (muffled) 
[16:22:37.423]                           invokeRestart("muffleMessage")
[16:22:37.423]                       }
[16:22:37.423]                       else if (inherits(cond, "warning")) {
[16:22:37.423]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.423]                         if (muffled) 
[16:22:37.423]                           invokeRestart("muffleWarning")
[16:22:37.423]                       }
[16:22:37.423]                       else if (inherits(cond, "condition")) {
[16:22:37.423]                         if (!is.null(pattern)) {
[16:22:37.423]                           computeRestarts <- base::computeRestarts
[16:22:37.423]                           grepl <- base::grepl
[16:22:37.423]                           restarts <- computeRestarts(cond)
[16:22:37.423]                           for (restart in restarts) {
[16:22:37.423]                             name <- restart$name
[16:22:37.423]                             if (is.null(name)) 
[16:22:37.423]                               next
[16:22:37.423]                             if (!grepl(pattern, name)) 
[16:22:37.423]                               next
[16:22:37.423]                             invokeRestart(restart)
[16:22:37.423]                             muffled <- TRUE
[16:22:37.423]                             break
[16:22:37.423]                           }
[16:22:37.423]                         }
[16:22:37.423]                       }
[16:22:37.423]                       invisible(muffled)
[16:22:37.423]                     }
[16:22:37.423]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.423]                   }
[16:22:37.423]                 }
[16:22:37.423]                 else {
[16:22:37.423]                   if (TRUE) {
[16:22:37.423]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.423]                     {
[16:22:37.423]                       inherits <- base::inherits
[16:22:37.423]                       invokeRestart <- base::invokeRestart
[16:22:37.423]                       is.null <- base::is.null
[16:22:37.423]                       muffled <- FALSE
[16:22:37.423]                       if (inherits(cond, "message")) {
[16:22:37.423]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.423]                         if (muffled) 
[16:22:37.423]                           invokeRestart("muffleMessage")
[16:22:37.423]                       }
[16:22:37.423]                       else if (inherits(cond, "warning")) {
[16:22:37.423]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.423]                         if (muffled) 
[16:22:37.423]                           invokeRestart("muffleWarning")
[16:22:37.423]                       }
[16:22:37.423]                       else if (inherits(cond, "condition")) {
[16:22:37.423]                         if (!is.null(pattern)) {
[16:22:37.423]                           computeRestarts <- base::computeRestarts
[16:22:37.423]                           grepl <- base::grepl
[16:22:37.423]                           restarts <- computeRestarts(cond)
[16:22:37.423]                           for (restart in restarts) {
[16:22:37.423]                             name <- restart$name
[16:22:37.423]                             if (is.null(name)) 
[16:22:37.423]                               next
[16:22:37.423]                             if (!grepl(pattern, name)) 
[16:22:37.423]                               next
[16:22:37.423]                             invokeRestart(restart)
[16:22:37.423]                             muffled <- TRUE
[16:22:37.423]                             break
[16:22:37.423]                           }
[16:22:37.423]                         }
[16:22:37.423]                       }
[16:22:37.423]                       invisible(muffled)
[16:22:37.423]                     }
[16:22:37.423]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.423]                   }
[16:22:37.423]                 }
[16:22:37.423]             }
[16:22:37.423]         }))
[16:22:37.423]     }, error = function(ex) {
[16:22:37.423]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.423]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.423]                 ...future.rng), started = ...future.startTime, 
[16:22:37.423]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.423]             version = "1.8"), class = "FutureResult")
[16:22:37.423]     }, finally = {
[16:22:37.423]         if (!identical(...future.workdir, getwd())) 
[16:22:37.423]             setwd(...future.workdir)
[16:22:37.423]         {
[16:22:37.423]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.423]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.423]             }
[16:22:37.423]             base::options(...future.oldOptions)
[16:22:37.423]             if (.Platform$OS.type == "windows") {
[16:22:37.423]                 old_names <- names(...future.oldEnvVars)
[16:22:37.423]                 envs <- base::Sys.getenv()
[16:22:37.423]                 names <- names(envs)
[16:22:37.423]                 common <- intersect(names, old_names)
[16:22:37.423]                 added <- setdiff(names, old_names)
[16:22:37.423]                 removed <- setdiff(old_names, names)
[16:22:37.423]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.423]                   envs[common]]
[16:22:37.423]                 NAMES <- toupper(changed)
[16:22:37.423]                 args <- list()
[16:22:37.423]                 for (kk in seq_along(NAMES)) {
[16:22:37.423]                   name <- changed[[kk]]
[16:22:37.423]                   NAME <- NAMES[[kk]]
[16:22:37.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.423]                     next
[16:22:37.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.423]                 }
[16:22:37.423]                 NAMES <- toupper(added)
[16:22:37.423]                 for (kk in seq_along(NAMES)) {
[16:22:37.423]                   name <- added[[kk]]
[16:22:37.423]                   NAME <- NAMES[[kk]]
[16:22:37.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.423]                     next
[16:22:37.423]                   args[[name]] <- ""
[16:22:37.423]                 }
[16:22:37.423]                 NAMES <- toupper(removed)
[16:22:37.423]                 for (kk in seq_along(NAMES)) {
[16:22:37.423]                   name <- removed[[kk]]
[16:22:37.423]                   NAME <- NAMES[[kk]]
[16:22:37.423]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.423]                     next
[16:22:37.423]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.423]                 }
[16:22:37.423]                 if (length(args) > 0) 
[16:22:37.423]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.423]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.423]             }
[16:22:37.423]             else {
[16:22:37.423]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.423]             }
[16:22:37.423]             {
[16:22:37.423]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.423]                   0L) {
[16:22:37.423]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.423]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.423]                   base::options(opts)
[16:22:37.423]                 }
[16:22:37.423]                 {
[16:22:37.423]                   {
[16:22:37.423]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.423]                     NULL
[16:22:37.423]                   }
[16:22:37.423]                   options(future.plan = NULL)
[16:22:37.423]                   if (is.na(NA_character_)) 
[16:22:37.423]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.423]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.423]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.423]                     .init = FALSE)
[16:22:37.423]                 }
[16:22:37.423]             }
[16:22:37.423]         }
[16:22:37.423]     })
[16:22:37.423]     if (FALSE) {
[16:22:37.423]         base::sink(type = "output", split = FALSE)
[16:22:37.423]         if (NA) {
[16:22:37.423]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.423]         }
[16:22:37.423]         else {
[16:22:37.423]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.423]         }
[16:22:37.423]         base::close(...future.stdout)
[16:22:37.423]         ...future.stdout <- NULL
[16:22:37.423]     }
[16:22:37.423]     ...future.result$conditions <- ...future.conditions
[16:22:37.423]     ...future.result$finished <- base::Sys.time()
[16:22:37.423]     ...future.result
[16:22:37.423] }
[16:22:37.426] MultisessionFuture started
[16:22:37.426] - Launch lazy future ... done
[16:22:37.427] run() for ‘MultisessionFuture’ ... done
[16:22:37.427] result() for ClusterFuture ...
[16:22:37.427] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.427] - Validating connection of MultisessionFuture
[16:22:37.428] - received message: FutureResult
[16:22:37.429] - Received FutureResult
[16:22:37.429] - Erased future from FutureRegistry
[16:22:37.429] result() for ClusterFuture ...
[16:22:37.429] - result already collected: FutureResult
[16:22:37.429] result() for ClusterFuture ... done
[16:22:37.429] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.429] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ finished    : POSIXct[1:1], format: "2025-01-06 16:22:37"
 $ session_uuid: chr "68f71266-8b11-db57-3d34-353f0f70cd36"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "b478068843b5"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.5.0-1025-azure" "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024" "b478068843b5" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 89954
  .. ..$ time  : POSIXct[1:1], format: "2025-01-06 16:22:37"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 3 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[16:22:37.437] result() for ClusterFuture ...
[16:22:37.437] - result already collected: FutureResult
[16:22:37.437] result() for ClusterFuture ... done
[16:22:37.437] result() for ClusterFuture ...
[16:22:37.437] - result already collected: FutureResult
[16:22:37.437] result() for ClusterFuture ... done
[16:22:37.437] getGlobalsAndPackages() ...
[16:22:37.437] Searching for globals...
[16:22:37.440] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[16:22:37.440] Searching for globals ... DONE
[16:22:37.440] Resolving globals: FALSE
[16:22:37.441] 
[16:22:37.441] - packages: [1] ‘utils’
[16:22:37.441] getGlobalsAndPackages() ... DONE
[16:22:37.441] run() for ‘Future’ ...
[16:22:37.441] - state: ‘created’
[16:22:37.441] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.455] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.455] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.455]   - Field: ‘node’
[16:22:37.455]   - Field: ‘label’
[16:22:37.455]   - Field: ‘local’
[16:22:37.455]   - Field: ‘owner’
[16:22:37.456]   - Field: ‘envir’
[16:22:37.456]   - Field: ‘workers’
[16:22:37.456]   - Field: ‘packages’
[16:22:37.456]   - Field: ‘gc’
[16:22:37.456]   - Field: ‘conditions’
[16:22:37.456]   - Field: ‘persistent’
[16:22:37.456]   - Field: ‘expr’
[16:22:37.456]   - Field: ‘uuid’
[16:22:37.456]   - Field: ‘seed’
[16:22:37.456]   - Field: ‘version’
[16:22:37.457]   - Field: ‘result’
[16:22:37.457]   - Field: ‘asynchronous’
[16:22:37.457]   - Field: ‘calls’
[16:22:37.457]   - Field: ‘globals’
[16:22:37.457]   - Field: ‘stdout’
[16:22:37.457]   - Field: ‘earlySignal’
[16:22:37.457]   - Field: ‘lazy’
[16:22:37.457]   - Field: ‘state’
[16:22:37.457] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.457] - Launch lazy future ...
[16:22:37.458] Packages needed by the future expression (n = 1): ‘utils’
[16:22:37.458] Packages needed by future strategies (n = 0): <none>
[16:22:37.458] {
[16:22:37.458]     {
[16:22:37.458]         {
[16:22:37.458]             ...future.startTime <- base::Sys.time()
[16:22:37.458]             {
[16:22:37.458]                 {
[16:22:37.458]                   {
[16:22:37.458]                     {
[16:22:37.458]                       {
[16:22:37.458]                         base::local({
[16:22:37.458]                           has_future <- base::requireNamespace("future", 
[16:22:37.458]                             quietly = TRUE)
[16:22:37.458]                           if (has_future) {
[16:22:37.458]                             ns <- base::getNamespace("future")
[16:22:37.458]                             version <- ns[[".package"]][["version"]]
[16:22:37.458]                             if (is.null(version)) 
[16:22:37.458]                               version <- utils::packageVersion("future")
[16:22:37.458]                           }
[16:22:37.458]                           else {
[16:22:37.458]                             version <- NULL
[16:22:37.458]                           }
[16:22:37.458]                           if (!has_future || version < "1.8.0") {
[16:22:37.458]                             info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.458]                               "", base::R.version$version.string), 
[16:22:37.458]                               platform = base::sprintf("%s (%s-bit)", 
[16:22:37.458]                                 base::R.version$platform, 8 * 
[16:22:37.458]                                   base::.Machine$sizeof.pointer), 
[16:22:37.458]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.458]                                 "release", "version")], collapse = " "), 
[16:22:37.458]                               hostname = base::Sys.info()[["nodename"]])
[16:22:37.458]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.458]                               info)
[16:22:37.458]                             info <- base::paste(info, collapse = "; ")
[16:22:37.458]                             if (!has_future) {
[16:22:37.458]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.458]                                 info)
[16:22:37.458]                             }
[16:22:37.458]                             else {
[16:22:37.458]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.458]                                 info, version)
[16:22:37.458]                             }
[16:22:37.458]                             base::stop(msg)
[16:22:37.458]                           }
[16:22:37.458]                         })
[16:22:37.458]                       }
[16:22:37.458]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.458]                       base::options(mc.cores = 1L)
[16:22:37.458]                     }
[16:22:37.458]                     base::local({
[16:22:37.458]                       for (pkg in "utils") {
[16:22:37.458]                         base::loadNamespace(pkg)
[16:22:37.458]                         base::library(pkg, character.only = TRUE)
[16:22:37.458]                       }
[16:22:37.458]                     })
[16:22:37.458]                   }
[16:22:37.458]                   ...future.strategy.old <- future::plan("list")
[16:22:37.458]                   options(future.plan = NULL)
[16:22:37.458]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.458]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.458]                 }
[16:22:37.458]                 ...future.workdir <- getwd()
[16:22:37.458]             }
[16:22:37.458]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.458]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.458]         }
[16:22:37.458]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.458]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.458]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.458]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.458]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.458]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.458]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.458]             base::names(...future.oldOptions))
[16:22:37.458]     }
[16:22:37.458]     if (TRUE) {
[16:22:37.458]     }
[16:22:37.458]     else {
[16:22:37.458]         if (NA) {
[16:22:37.458]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.458]                 open = "w")
[16:22:37.458]         }
[16:22:37.458]         else {
[16:22:37.458]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.458]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.458]         }
[16:22:37.458]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.458]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.458]             base::sink(type = "output", split = FALSE)
[16:22:37.458]             base::close(...future.stdout)
[16:22:37.458]         }, add = TRUE)
[16:22:37.458]     }
[16:22:37.458]     ...future.frame <- base::sys.nframe()
[16:22:37.458]     ...future.conditions <- base::list()
[16:22:37.458]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.458]     if (FALSE) {
[16:22:37.458]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.458]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.458]     }
[16:22:37.458]     ...future.result <- base::tryCatch({
[16:22:37.458]         base::withCallingHandlers({
[16:22:37.458]             ...future.value <- base::withVisible(base::local({
[16:22:37.458]                 ...future.makeSendCondition <- base::local({
[16:22:37.458]                   sendCondition <- NULL
[16:22:37.458]                   function(frame = 1L) {
[16:22:37.458]                     if (is.function(sendCondition)) 
[16:22:37.458]                       return(sendCondition)
[16:22:37.458]                     ns <- getNamespace("parallel")
[16:22:37.458]                     if (exists("sendData", mode = "function", 
[16:22:37.458]                       envir = ns)) {
[16:22:37.458]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.458]                         envir = ns)
[16:22:37.458]                       envir <- sys.frame(frame)
[16:22:37.458]                       master <- NULL
[16:22:37.458]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.458]                         !identical(envir, emptyenv())) {
[16:22:37.458]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.458]                           inherits = FALSE)) {
[16:22:37.458]                           master <- get("master", mode = "list", 
[16:22:37.458]                             envir = envir, inherits = FALSE)
[16:22:37.458]                           if (inherits(master, c("SOCKnode", 
[16:22:37.458]                             "SOCK0node"))) {
[16:22:37.458]                             sendCondition <<- function(cond) {
[16:22:37.458]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.458]                                 success = TRUE)
[16:22:37.458]                               parallel_sendData(master, data)
[16:22:37.458]                             }
[16:22:37.458]                             return(sendCondition)
[16:22:37.458]                           }
[16:22:37.458]                         }
[16:22:37.458]                         frame <- frame + 1L
[16:22:37.458]                         envir <- sys.frame(frame)
[16:22:37.458]                       }
[16:22:37.458]                     }
[16:22:37.458]                     sendCondition <<- function(cond) NULL
[16:22:37.458]                   }
[16:22:37.458]                 })
[16:22:37.458]                 withCallingHandlers({
[16:22:37.458]                   {
[16:22:37.458]                     print(1:50)
[16:22:37.458]                     str(1:50)
[16:22:37.458]                     cat(letters, sep = "-")
[16:22:37.458]                     cat(1:6, collapse = "\n")
[16:22:37.458]                     write.table(datasets::iris[1:10, ], sep = "\t")
[16:22:37.458]                     42L
[16:22:37.458]                   }
[16:22:37.458]                 }, immediateCondition = function(cond) {
[16:22:37.458]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.458]                   sendCondition(cond)
[16:22:37.458]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.458]                   {
[16:22:37.458]                     inherits <- base::inherits
[16:22:37.458]                     invokeRestart <- base::invokeRestart
[16:22:37.458]                     is.null <- base::is.null
[16:22:37.458]                     muffled <- FALSE
[16:22:37.458]                     if (inherits(cond, "message")) {
[16:22:37.458]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.458]                       if (muffled) 
[16:22:37.458]                         invokeRestart("muffleMessage")
[16:22:37.458]                     }
[16:22:37.458]                     else if (inherits(cond, "warning")) {
[16:22:37.458]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.458]                       if (muffled) 
[16:22:37.458]                         invokeRestart("muffleWarning")
[16:22:37.458]                     }
[16:22:37.458]                     else if (inherits(cond, "condition")) {
[16:22:37.458]                       if (!is.null(pattern)) {
[16:22:37.458]                         computeRestarts <- base::computeRestarts
[16:22:37.458]                         grepl <- base::grepl
[16:22:37.458]                         restarts <- computeRestarts(cond)
[16:22:37.458]                         for (restart in restarts) {
[16:22:37.458]                           name <- restart$name
[16:22:37.458]                           if (is.null(name)) 
[16:22:37.458]                             next
[16:22:37.458]                           if (!grepl(pattern, name)) 
[16:22:37.458]                             next
[16:22:37.458]                           invokeRestart(restart)
[16:22:37.458]                           muffled <- TRUE
[16:22:37.458]                           break
[16:22:37.458]                         }
[16:22:37.458]                       }
[16:22:37.458]                     }
[16:22:37.458]                     invisible(muffled)
[16:22:37.458]                   }
[16:22:37.458]                   muffleCondition(cond)
[16:22:37.458]                 })
[16:22:37.458]             }))
[16:22:37.458]             future::FutureResult(value = ...future.value$value, 
[16:22:37.458]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.458]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.458]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.458]                     ...future.globalenv.names))
[16:22:37.458]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.458]         }, condition = base::local({
[16:22:37.458]             c <- base::c
[16:22:37.458]             inherits <- base::inherits
[16:22:37.458]             invokeRestart <- base::invokeRestart
[16:22:37.458]             length <- base::length
[16:22:37.458]             list <- base::list
[16:22:37.458]             seq.int <- base::seq.int
[16:22:37.458]             signalCondition <- base::signalCondition
[16:22:37.458]             sys.calls <- base::sys.calls
[16:22:37.458]             `[[` <- base::`[[`
[16:22:37.458]             `+` <- base::`+`
[16:22:37.458]             `<<-` <- base::`<<-`
[16:22:37.458]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.458]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.458]                   3L)]
[16:22:37.458]             }
[16:22:37.458]             function(cond) {
[16:22:37.458]                 is_error <- inherits(cond, "error")
[16:22:37.458]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.458]                   NULL)
[16:22:37.458]                 if (is_error) {
[16:22:37.458]                   sessionInformation <- function() {
[16:22:37.458]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.458]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.458]                       search = base::search(), system = base::Sys.info())
[16:22:37.458]                   }
[16:22:37.458]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.458]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.458]                     cond$call), session = sessionInformation(), 
[16:22:37.458]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.458]                   signalCondition(cond)
[16:22:37.458]                 }
[16:22:37.458]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.458]                 "immediateCondition"))) {
[16:22:37.458]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.458]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.458]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.458]                   if (TRUE && !signal) {
[16:22:37.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.458]                     {
[16:22:37.458]                       inherits <- base::inherits
[16:22:37.458]                       invokeRestart <- base::invokeRestart
[16:22:37.458]                       is.null <- base::is.null
[16:22:37.458]                       muffled <- FALSE
[16:22:37.458]                       if (inherits(cond, "message")) {
[16:22:37.458]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.458]                         if (muffled) 
[16:22:37.458]                           invokeRestart("muffleMessage")
[16:22:37.458]                       }
[16:22:37.458]                       else if (inherits(cond, "warning")) {
[16:22:37.458]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.458]                         if (muffled) 
[16:22:37.458]                           invokeRestart("muffleWarning")
[16:22:37.458]                       }
[16:22:37.458]                       else if (inherits(cond, "condition")) {
[16:22:37.458]                         if (!is.null(pattern)) {
[16:22:37.458]                           computeRestarts <- base::computeRestarts
[16:22:37.458]                           grepl <- base::grepl
[16:22:37.458]                           restarts <- computeRestarts(cond)
[16:22:37.458]                           for (restart in restarts) {
[16:22:37.458]                             name <- restart$name
[16:22:37.458]                             if (is.null(name)) 
[16:22:37.458]                               next
[16:22:37.458]                             if (!grepl(pattern, name)) 
[16:22:37.458]                               next
[16:22:37.458]                             invokeRestart(restart)
[16:22:37.458]                             muffled <- TRUE
[16:22:37.458]                             break
[16:22:37.458]                           }
[16:22:37.458]                         }
[16:22:37.458]                       }
[16:22:37.458]                       invisible(muffled)
[16:22:37.458]                     }
[16:22:37.458]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.458]                   }
[16:22:37.458]                 }
[16:22:37.458]                 else {
[16:22:37.458]                   if (TRUE) {
[16:22:37.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.458]                     {
[16:22:37.458]                       inherits <- base::inherits
[16:22:37.458]                       invokeRestart <- base::invokeRestart
[16:22:37.458]                       is.null <- base::is.null
[16:22:37.458]                       muffled <- FALSE
[16:22:37.458]                       if (inherits(cond, "message")) {
[16:22:37.458]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.458]                         if (muffled) 
[16:22:37.458]                           invokeRestart("muffleMessage")
[16:22:37.458]                       }
[16:22:37.458]                       else if (inherits(cond, "warning")) {
[16:22:37.458]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.458]                         if (muffled) 
[16:22:37.458]                           invokeRestart("muffleWarning")
[16:22:37.458]                       }
[16:22:37.458]                       else if (inherits(cond, "condition")) {
[16:22:37.458]                         if (!is.null(pattern)) {
[16:22:37.458]                           computeRestarts <- base::computeRestarts
[16:22:37.458]                           grepl <- base::grepl
[16:22:37.458]                           restarts <- computeRestarts(cond)
[16:22:37.458]                           for (restart in restarts) {
[16:22:37.458]                             name <- restart$name
[16:22:37.458]                             if (is.null(name)) 
[16:22:37.458]                               next
[16:22:37.458]                             if (!grepl(pattern, name)) 
[16:22:37.458]                               next
[16:22:37.458]                             invokeRestart(restart)
[16:22:37.458]                             muffled <- TRUE
[16:22:37.458]                             break
[16:22:37.458]                           }
[16:22:37.458]                         }
[16:22:37.458]                       }
[16:22:37.458]                       invisible(muffled)
[16:22:37.458]                     }
[16:22:37.458]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.458]                   }
[16:22:37.458]                 }
[16:22:37.458]             }
[16:22:37.458]         }))
[16:22:37.458]     }, error = function(ex) {
[16:22:37.458]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.458]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.458]                 ...future.rng), started = ...future.startTime, 
[16:22:37.458]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.458]             version = "1.8"), class = "FutureResult")
[16:22:37.458]     }, finally = {
[16:22:37.458]         if (!identical(...future.workdir, getwd())) 
[16:22:37.458]             setwd(...future.workdir)
[16:22:37.458]         {
[16:22:37.458]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.458]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.458]             }
[16:22:37.458]             base::options(...future.oldOptions)
[16:22:37.458]             if (.Platform$OS.type == "windows") {
[16:22:37.458]                 old_names <- names(...future.oldEnvVars)
[16:22:37.458]                 envs <- base::Sys.getenv()
[16:22:37.458]                 names <- names(envs)
[16:22:37.458]                 common <- intersect(names, old_names)
[16:22:37.458]                 added <- setdiff(names, old_names)
[16:22:37.458]                 removed <- setdiff(old_names, names)
[16:22:37.458]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.458]                   envs[common]]
[16:22:37.458]                 NAMES <- toupper(changed)
[16:22:37.458]                 args <- list()
[16:22:37.458]                 for (kk in seq_along(NAMES)) {
[16:22:37.458]                   name <- changed[[kk]]
[16:22:37.458]                   NAME <- NAMES[[kk]]
[16:22:37.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.458]                     next
[16:22:37.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.458]                 }
[16:22:37.458]                 NAMES <- toupper(added)
[16:22:37.458]                 for (kk in seq_along(NAMES)) {
[16:22:37.458]                   name <- added[[kk]]
[16:22:37.458]                   NAME <- NAMES[[kk]]
[16:22:37.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.458]                     next
[16:22:37.458]                   args[[name]] <- ""
[16:22:37.458]                 }
[16:22:37.458]                 NAMES <- toupper(removed)
[16:22:37.458]                 for (kk in seq_along(NAMES)) {
[16:22:37.458]                   name <- removed[[kk]]
[16:22:37.458]                   NAME <- NAMES[[kk]]
[16:22:37.458]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.458]                     next
[16:22:37.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.458]                 }
[16:22:37.458]                 if (length(args) > 0) 
[16:22:37.458]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.458]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.458]             }
[16:22:37.458]             else {
[16:22:37.458]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.458]             }
[16:22:37.458]             {
[16:22:37.458]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.458]                   0L) {
[16:22:37.458]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.458]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.458]                   base::options(opts)
[16:22:37.458]                 }
[16:22:37.458]                 {
[16:22:37.458]                   {
[16:22:37.458]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.458]                     NULL
[16:22:37.458]                   }
[16:22:37.458]                   options(future.plan = NULL)
[16:22:37.458]                   if (is.na(NA_character_)) 
[16:22:37.458]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.458]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.458]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.458]                     .init = FALSE)
[16:22:37.458]                 }
[16:22:37.458]             }
[16:22:37.458]         }
[16:22:37.458]     })
[16:22:37.458]     if (FALSE) {
[16:22:37.458]         base::sink(type = "output", split = FALSE)
[16:22:37.458]         if (NA) {
[16:22:37.458]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.458]         }
[16:22:37.458]         else {
[16:22:37.458]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.458]         }
[16:22:37.458]         base::close(...future.stdout)
[16:22:37.458]         ...future.stdout <- NULL
[16:22:37.458]     }
[16:22:37.458]     ...future.result$conditions <- ...future.conditions
[16:22:37.458]     ...future.result$finished <- base::Sys.time()
[16:22:37.458]     ...future.result
[16:22:37.458] }
[16:22:37.461] MultisessionFuture started
[16:22:37.461] - Launch lazy future ... done
[16:22:37.461] run() for ‘MultisessionFuture’ ... done
[16:22:37.462] result() for ClusterFuture ...
[16:22:37.462] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.462] - Validating connection of MultisessionFuture
[16:22:37.506] - received message: FutureResult
[16:22:37.506] - Received FutureResult
[16:22:37.507] - Erased future from FutureRegistry
[16:22:37.507] result() for ClusterFuture ...
[16:22:37.507] - result already collected: FutureResult
[16:22:37.507] result() for ClusterFuture ... done
[16:22:37.507] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.507] result() for ClusterFuture ... done
[16:22:37.507] result() for ClusterFuture ...
[16:22:37.507] - result already collected: FutureResult
[16:22:37.507] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[16:22:37.508] getGlobalsAndPackages() ...
[16:22:37.508] Searching for globals...
[16:22:37.508] - globals found: [1] ‘print’
[16:22:37.508] Searching for globals ... DONE
[16:22:37.508] Resolving globals: FALSE
[16:22:37.509] 
[16:22:37.509] 
[16:22:37.509] getGlobalsAndPackages() ... DONE
[16:22:37.509] run() for ‘Future’ ...
[16:22:37.509] - state: ‘created’
[16:22:37.509] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:22:37.523] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:22:37.523] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:22:37.523]   - Field: ‘node’
[16:22:37.523]   - Field: ‘label’
[16:22:37.524]   - Field: ‘local’
[16:22:37.524]   - Field: ‘owner’
[16:22:37.524]   - Field: ‘envir’
[16:22:37.524]   - Field: ‘workers’
[16:22:37.524]   - Field: ‘packages’
[16:22:37.524]   - Field: ‘gc’
[16:22:37.524]   - Field: ‘conditions’
[16:22:37.524]   - Field: ‘persistent’
[16:22:37.524]   - Field: ‘expr’
[16:22:37.524]   - Field: ‘uuid’
[16:22:37.525]   - Field: ‘seed’
[16:22:37.525]   - Field: ‘version’
[16:22:37.525]   - Field: ‘result’
[16:22:37.525]   - Field: ‘asynchronous’
[16:22:37.525]   - Field: ‘calls’
[16:22:37.525]   - Field: ‘globals’
[16:22:37.525]   - Field: ‘stdout’
[16:22:37.525]   - Field: ‘earlySignal’
[16:22:37.525]   - Field: ‘lazy’
[16:22:37.525]   - Field: ‘state’
[16:22:37.526] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:22:37.526] - Launch lazy future ...
[16:22:37.526] Packages needed by the future expression (n = 0): <none>
[16:22:37.526] Packages needed by future strategies (n = 0): <none>
[16:22:37.526] {
[16:22:37.526]     {
[16:22:37.526]         {
[16:22:37.526]             ...future.startTime <- base::Sys.time()
[16:22:37.526]             {
[16:22:37.526]                 {
[16:22:37.526]                   {
[16:22:37.526]                     {
[16:22:37.526]                       base::local({
[16:22:37.526]                         has_future <- base::requireNamespace("future", 
[16:22:37.526]                           quietly = TRUE)
[16:22:37.526]                         if (has_future) {
[16:22:37.526]                           ns <- base::getNamespace("future")
[16:22:37.526]                           version <- ns[[".package"]][["version"]]
[16:22:37.526]                           if (is.null(version)) 
[16:22:37.526]                             version <- utils::packageVersion("future")
[16:22:37.526]                         }
[16:22:37.526]                         else {
[16:22:37.526]                           version <- NULL
[16:22:37.526]                         }
[16:22:37.526]                         if (!has_future || version < "1.8.0") {
[16:22:37.526]                           info <- base::c(r_version = base::gsub("R version ", 
[16:22:37.526]                             "", base::R.version$version.string), 
[16:22:37.526]                             platform = base::sprintf("%s (%s-bit)", 
[16:22:37.526]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:22:37.526]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:22:37.526]                               "release", "version")], collapse = " "), 
[16:22:37.526]                             hostname = base::Sys.info()[["nodename"]])
[16:22:37.526]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:22:37.526]                             info)
[16:22:37.526]                           info <- base::paste(info, collapse = "; ")
[16:22:37.526]                           if (!has_future) {
[16:22:37.526]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:22:37.526]                               info)
[16:22:37.526]                           }
[16:22:37.526]                           else {
[16:22:37.526]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:22:37.526]                               info, version)
[16:22:37.526]                           }
[16:22:37.526]                           base::stop(msg)
[16:22:37.526]                         }
[16:22:37.526]                       })
[16:22:37.526]                     }
[16:22:37.526]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:22:37.526]                     base::options(mc.cores = 1L)
[16:22:37.526]                   }
[16:22:37.526]                   ...future.strategy.old <- future::plan("list")
[16:22:37.526]                   options(future.plan = NULL)
[16:22:37.526]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.526]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:22:37.526]                 }
[16:22:37.526]                 ...future.workdir <- getwd()
[16:22:37.526]             }
[16:22:37.526]             ...future.oldOptions <- base::as.list(base::.Options)
[16:22:37.526]             ...future.oldEnvVars <- base::Sys.getenv()
[16:22:37.526]         }
[16:22:37.526]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:22:37.526]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:22:37.526]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:22:37.526]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:22:37.526]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:22:37.526]             future.stdout.windows.reencode = NULL, width = 80L)
[16:22:37.526]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:22:37.526]             base::names(...future.oldOptions))
[16:22:37.526]     }
[16:22:37.526]     if (FALSE) {
[16:22:37.526]     }
[16:22:37.526]     else {
[16:22:37.526]         if (TRUE) {
[16:22:37.526]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:22:37.526]                 open = "w")
[16:22:37.526]         }
[16:22:37.526]         else {
[16:22:37.526]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:22:37.526]                 windows = "NUL", "/dev/null"), open = "w")
[16:22:37.526]         }
[16:22:37.526]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:22:37.526]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:22:37.526]             base::sink(type = "output", split = FALSE)
[16:22:37.526]             base::close(...future.stdout)
[16:22:37.526]         }, add = TRUE)
[16:22:37.526]     }
[16:22:37.526]     ...future.frame <- base::sys.nframe()
[16:22:37.526]     ...future.conditions <- base::list()
[16:22:37.526]     ...future.rng <- base::globalenv()$.Random.seed
[16:22:37.526]     if (FALSE) {
[16:22:37.526]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:22:37.526]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:22:37.526]     }
[16:22:37.526]     ...future.result <- base::tryCatch({
[16:22:37.526]         base::withCallingHandlers({
[16:22:37.526]             ...future.value <- base::withVisible(base::local({
[16:22:37.526]                 ...future.makeSendCondition <- base::local({
[16:22:37.526]                   sendCondition <- NULL
[16:22:37.526]                   function(frame = 1L) {
[16:22:37.526]                     if (is.function(sendCondition)) 
[16:22:37.526]                       return(sendCondition)
[16:22:37.526]                     ns <- getNamespace("parallel")
[16:22:37.526]                     if (exists("sendData", mode = "function", 
[16:22:37.526]                       envir = ns)) {
[16:22:37.526]                       parallel_sendData <- get("sendData", mode = "function", 
[16:22:37.526]                         envir = ns)
[16:22:37.526]                       envir <- sys.frame(frame)
[16:22:37.526]                       master <- NULL
[16:22:37.526]                       while (!identical(envir, .GlobalEnv) && 
[16:22:37.526]                         !identical(envir, emptyenv())) {
[16:22:37.526]                         if (exists("master", mode = "list", envir = envir, 
[16:22:37.526]                           inherits = FALSE)) {
[16:22:37.526]                           master <- get("master", mode = "list", 
[16:22:37.526]                             envir = envir, inherits = FALSE)
[16:22:37.526]                           if (inherits(master, c("SOCKnode", 
[16:22:37.526]                             "SOCK0node"))) {
[16:22:37.526]                             sendCondition <<- function(cond) {
[16:22:37.526]                               data <- list(type = "VALUE", value = cond, 
[16:22:37.526]                                 success = TRUE)
[16:22:37.526]                               parallel_sendData(master, data)
[16:22:37.526]                             }
[16:22:37.526]                             return(sendCondition)
[16:22:37.526]                           }
[16:22:37.526]                         }
[16:22:37.526]                         frame <- frame + 1L
[16:22:37.526]                         envir <- sys.frame(frame)
[16:22:37.526]                       }
[16:22:37.526]                     }
[16:22:37.526]                     sendCondition <<- function(cond) NULL
[16:22:37.526]                   }
[16:22:37.526]                 })
[16:22:37.526]                 withCallingHandlers({
[16:22:37.526]                   print(42)
[16:22:37.526]                 }, immediateCondition = function(cond) {
[16:22:37.526]                   sendCondition <- ...future.makeSendCondition()
[16:22:37.526]                   sendCondition(cond)
[16:22:37.526]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.526]                   {
[16:22:37.526]                     inherits <- base::inherits
[16:22:37.526]                     invokeRestart <- base::invokeRestart
[16:22:37.526]                     is.null <- base::is.null
[16:22:37.526]                     muffled <- FALSE
[16:22:37.526]                     if (inherits(cond, "message")) {
[16:22:37.526]                       muffled <- grepl(pattern, "muffleMessage")
[16:22:37.526]                       if (muffled) 
[16:22:37.526]                         invokeRestart("muffleMessage")
[16:22:37.526]                     }
[16:22:37.526]                     else if (inherits(cond, "warning")) {
[16:22:37.526]                       muffled <- grepl(pattern, "muffleWarning")
[16:22:37.526]                       if (muffled) 
[16:22:37.526]                         invokeRestart("muffleWarning")
[16:22:37.526]                     }
[16:22:37.526]                     else if (inherits(cond, "condition")) {
[16:22:37.526]                       if (!is.null(pattern)) {
[16:22:37.526]                         computeRestarts <- base::computeRestarts
[16:22:37.526]                         grepl <- base::grepl
[16:22:37.526]                         restarts <- computeRestarts(cond)
[16:22:37.526]                         for (restart in restarts) {
[16:22:37.526]                           name <- restart$name
[16:22:37.526]                           if (is.null(name)) 
[16:22:37.526]                             next
[16:22:37.526]                           if (!grepl(pattern, name)) 
[16:22:37.526]                             next
[16:22:37.526]                           invokeRestart(restart)
[16:22:37.526]                           muffled <- TRUE
[16:22:37.526]                           break
[16:22:37.526]                         }
[16:22:37.526]                       }
[16:22:37.526]                     }
[16:22:37.526]                     invisible(muffled)
[16:22:37.526]                   }
[16:22:37.526]                   muffleCondition(cond)
[16:22:37.526]                 })
[16:22:37.526]             }))
[16:22:37.526]             future::FutureResult(value = ...future.value$value, 
[16:22:37.526]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.526]                   ...future.rng), globalenv = if (FALSE) 
[16:22:37.526]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:22:37.526]                     ...future.globalenv.names))
[16:22:37.526]                 else NULL, started = ...future.startTime, version = "1.8")
[16:22:37.526]         }, condition = base::local({
[16:22:37.526]             c <- base::c
[16:22:37.526]             inherits <- base::inherits
[16:22:37.526]             invokeRestart <- base::invokeRestart
[16:22:37.526]             length <- base::length
[16:22:37.526]             list <- base::list
[16:22:37.526]             seq.int <- base::seq.int
[16:22:37.526]             signalCondition <- base::signalCondition
[16:22:37.526]             sys.calls <- base::sys.calls
[16:22:37.526]             `[[` <- base::`[[`
[16:22:37.526]             `+` <- base::`+`
[16:22:37.526]             `<<-` <- base::`<<-`
[16:22:37.526]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:22:37.526]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:22:37.526]                   3L)]
[16:22:37.526]             }
[16:22:37.526]             function(cond) {
[16:22:37.526]                 is_error <- inherits(cond, "error")
[16:22:37.526]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:22:37.526]                   NULL)
[16:22:37.526]                 if (is_error) {
[16:22:37.526]                   sessionInformation <- function() {
[16:22:37.526]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:22:37.526]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:22:37.526]                       search = base::search(), system = base::Sys.info())
[16:22:37.526]                   }
[16:22:37.526]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.526]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:22:37.526]                     cond$call), session = sessionInformation(), 
[16:22:37.526]                     timestamp = base::Sys.time(), signaled = 0L)
[16:22:37.526]                   signalCondition(cond)
[16:22:37.526]                 }
[16:22:37.526]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:22:37.526]                 "immediateCondition"))) {
[16:22:37.526]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:22:37.526]                   ...future.conditions[[length(...future.conditions) + 
[16:22:37.526]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:22:37.526]                   if (TRUE && !signal) {
[16:22:37.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.526]                     {
[16:22:37.526]                       inherits <- base::inherits
[16:22:37.526]                       invokeRestart <- base::invokeRestart
[16:22:37.526]                       is.null <- base::is.null
[16:22:37.526]                       muffled <- FALSE
[16:22:37.526]                       if (inherits(cond, "message")) {
[16:22:37.526]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.526]                         if (muffled) 
[16:22:37.526]                           invokeRestart("muffleMessage")
[16:22:37.526]                       }
[16:22:37.526]                       else if (inherits(cond, "warning")) {
[16:22:37.526]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.526]                         if (muffled) 
[16:22:37.526]                           invokeRestart("muffleWarning")
[16:22:37.526]                       }
[16:22:37.526]                       else if (inherits(cond, "condition")) {
[16:22:37.526]                         if (!is.null(pattern)) {
[16:22:37.526]                           computeRestarts <- base::computeRestarts
[16:22:37.526]                           grepl <- base::grepl
[16:22:37.526]                           restarts <- computeRestarts(cond)
[16:22:37.526]                           for (restart in restarts) {
[16:22:37.526]                             name <- restart$name
[16:22:37.526]                             if (is.null(name)) 
[16:22:37.526]                               next
[16:22:37.526]                             if (!grepl(pattern, name)) 
[16:22:37.526]                               next
[16:22:37.526]                             invokeRestart(restart)
[16:22:37.526]                             muffled <- TRUE
[16:22:37.526]                             break
[16:22:37.526]                           }
[16:22:37.526]                         }
[16:22:37.526]                       }
[16:22:37.526]                       invisible(muffled)
[16:22:37.526]                     }
[16:22:37.526]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.526]                   }
[16:22:37.526]                 }
[16:22:37.526]                 else {
[16:22:37.526]                   if (TRUE) {
[16:22:37.526]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:22:37.526]                     {
[16:22:37.526]                       inherits <- base::inherits
[16:22:37.526]                       invokeRestart <- base::invokeRestart
[16:22:37.526]                       is.null <- base::is.null
[16:22:37.526]                       muffled <- FALSE
[16:22:37.526]                       if (inherits(cond, "message")) {
[16:22:37.526]                         muffled <- grepl(pattern, "muffleMessage")
[16:22:37.526]                         if (muffled) 
[16:22:37.526]                           invokeRestart("muffleMessage")
[16:22:37.526]                       }
[16:22:37.526]                       else if (inherits(cond, "warning")) {
[16:22:37.526]                         muffled <- grepl(pattern, "muffleWarning")
[16:22:37.526]                         if (muffled) 
[16:22:37.526]                           invokeRestart("muffleWarning")
[16:22:37.526]                       }
[16:22:37.526]                       else if (inherits(cond, "condition")) {
[16:22:37.526]                         if (!is.null(pattern)) {
[16:22:37.526]                           computeRestarts <- base::computeRestarts
[16:22:37.526]                           grepl <- base::grepl
[16:22:37.526]                           restarts <- computeRestarts(cond)
[16:22:37.526]                           for (restart in restarts) {
[16:22:37.526]                             name <- restart$name
[16:22:37.526]                             if (is.null(name)) 
[16:22:37.526]                               next
[16:22:37.526]                             if (!grepl(pattern, name)) 
[16:22:37.526]                               next
[16:22:37.526]                             invokeRestart(restart)
[16:22:37.526]                             muffled <- TRUE
[16:22:37.526]                             break
[16:22:37.526]                           }
[16:22:37.526]                         }
[16:22:37.526]                       }
[16:22:37.526]                       invisible(muffled)
[16:22:37.526]                     }
[16:22:37.526]                     muffleCondition(cond, pattern = "^muffle")
[16:22:37.526]                   }
[16:22:37.526]                 }
[16:22:37.526]             }
[16:22:37.526]         }))
[16:22:37.526]     }, error = function(ex) {
[16:22:37.526]         base::structure(base::list(value = NULL, visible = NULL, 
[16:22:37.526]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:22:37.526]                 ...future.rng), started = ...future.startTime, 
[16:22:37.526]             finished = Sys.time(), session_uuid = NA_character_, 
[16:22:37.526]             version = "1.8"), class = "FutureResult")
[16:22:37.526]     }, finally = {
[16:22:37.526]         if (!identical(...future.workdir, getwd())) 
[16:22:37.526]             setwd(...future.workdir)
[16:22:37.526]         {
[16:22:37.526]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:22:37.526]                 ...future.oldOptions$nwarnings <- NULL
[16:22:37.526]             }
[16:22:37.526]             base::options(...future.oldOptions)
[16:22:37.526]             if (.Platform$OS.type == "windows") {
[16:22:37.526]                 old_names <- names(...future.oldEnvVars)
[16:22:37.526]                 envs <- base::Sys.getenv()
[16:22:37.526]                 names <- names(envs)
[16:22:37.526]                 common <- intersect(names, old_names)
[16:22:37.526]                 added <- setdiff(names, old_names)
[16:22:37.526]                 removed <- setdiff(old_names, names)
[16:22:37.526]                 changed <- common[...future.oldEnvVars[common] != 
[16:22:37.526]                   envs[common]]
[16:22:37.526]                 NAMES <- toupper(changed)
[16:22:37.526]                 args <- list()
[16:22:37.526]                 for (kk in seq_along(NAMES)) {
[16:22:37.526]                   name <- changed[[kk]]
[16:22:37.526]                   NAME <- NAMES[[kk]]
[16:22:37.526]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.526]                     next
[16:22:37.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.526]                 }
[16:22:37.526]                 NAMES <- toupper(added)
[16:22:37.526]                 for (kk in seq_along(NAMES)) {
[16:22:37.526]                   name <- added[[kk]]
[16:22:37.526]                   NAME <- NAMES[[kk]]
[16:22:37.526]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.526]                     next
[16:22:37.526]                   args[[name]] <- ""
[16:22:37.526]                 }
[16:22:37.526]                 NAMES <- toupper(removed)
[16:22:37.526]                 for (kk in seq_along(NAMES)) {
[16:22:37.526]                   name <- removed[[kk]]
[16:22:37.526]                   NAME <- NAMES[[kk]]
[16:22:37.526]                   if (name != NAME && is.element(NAME, old_names)) 
[16:22:37.526]                     next
[16:22:37.526]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:22:37.526]                 }
[16:22:37.526]                 if (length(args) > 0) 
[16:22:37.526]                   base::do.call(base::Sys.setenv, args = args)
[16:22:37.526]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:22:37.526]             }
[16:22:37.526]             else {
[16:22:37.526]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:22:37.526]             }
[16:22:37.526]             {
[16:22:37.526]                 if (base::length(...future.futureOptionsAdded) > 
[16:22:37.526]                   0L) {
[16:22:37.526]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:22:37.526]                   base::names(opts) <- ...future.futureOptionsAdded
[16:22:37.526]                   base::options(opts)
[16:22:37.526]                 }
[16:22:37.526]                 {
[16:22:37.526]                   {
[16:22:37.526]                     base::options(mc.cores = ...future.mc.cores.old)
[16:22:37.526]                     NULL
[16:22:37.526]                   }
[16:22:37.526]                   options(future.plan = NULL)
[16:22:37.526]                   if (is.na(NA_character_)) 
[16:22:37.526]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:22:37.526]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:22:37.526]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:22:37.526]                     .init = FALSE)
[16:22:37.526]                 }
[16:22:37.526]             }
[16:22:37.526]         }
[16:22:37.526]     })
[16:22:37.526]     if (TRUE) {
[16:22:37.526]         base::sink(type = "output", split = FALSE)
[16:22:37.526]         if (TRUE) {
[16:22:37.526]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:22:37.526]         }
[16:22:37.526]         else {
[16:22:37.526]             ...future.result["stdout"] <- base::list(NULL)
[16:22:37.526]         }
[16:22:37.526]         base::close(...future.stdout)
[16:22:37.526]         ...future.stdout <- NULL
[16:22:37.526]     }
[16:22:37.526]     ...future.result$conditions <- ...future.conditions
[16:22:37.526]     ...future.result$finished <- base::Sys.time()
[16:22:37.526]     ...future.result
[16:22:37.526] }
[16:22:37.529] MultisessionFuture started
[16:22:37.529] - Launch lazy future ... done
[16:22:37.529] run() for ‘MultisessionFuture’ ... done
[16:22:37.529] result() for ClusterFuture ...
[16:22:37.530] receiveMessageFromWorker() for ClusterFuture ...
[16:22:37.530] - Validating connection of MultisessionFuture
[16:22:37.530] - received message: FutureResult
[16:22:37.531] - Received FutureResult
[16:22:37.531] - Erased future from FutureRegistry
[16:22:37.531] result() for ClusterFuture ...
[16:22:37.531] - result already collected: FutureResult
[16:22:37.531] result() for ClusterFuture ... done
[16:22:37.531] receiveMessageFromWorker() for ClusterFuture ... done
[16:22:37.531] result() for ClusterFuture ... done
[16:22:37.531] result() for ClusterFuture ...
[16:22:37.531] - result already collected: FutureResult
[16:22:37.531] result() for ClusterFuture ... done
[16:22:37.531] result() for ClusterFuture ...
[16:22:37.532] - result already collected: FutureResult
[16:22:37.532] result() for ClusterFuture ... done
[1] 42
[16:22:37.532] result() for ClusterFuture ...
[16:22:37.532] - result already collected: FutureResult
[16:22:37.532] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[16:22:37.533] plan(): Setting new future strategy stack:
[16:22:37.533] List of future strategies:
[16:22:37.533] 1. FutureStrategy:
[16:22:37.533]    - args: function (..., envir = parent.frame())
[16:22:37.533]    - tweaked: FALSE
[16:22:37.533]    - call: future::plan(oplan)
[16:22:37.533] plan(): nbrOfWorkers() = 1
> 
