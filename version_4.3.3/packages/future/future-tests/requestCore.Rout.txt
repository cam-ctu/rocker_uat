
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:21:40.082] plan(): Setting new future strategy stack:
[16:21:40.083] List of future strategies:
[16:21:40.083] 1. sequential:
[16:21:40.083]    - args: function (..., envir = parent.frame())
[16:21:40.083]    - tweaked: FALSE
[16:21:40.083]    - call: future::plan("sequential")
[16:21:40.096] plan(): nbrOfWorkers() = 1
> 
> message("*** requestCore() ...")
*** requestCore() ...
> 
> message("*** requestCore() - exceptions ...")
*** requestCore() - exceptions ...
> 
> ## There are no cores to choose from
> res <- try(requestCore(function() {}, workers = 0), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(requestCore(function() {}, timeout = -1.0), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(requestCore(function() {}, alpha = 0.0), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** requestCore() - exceptions ... DONE")
*** requestCore() - exceptions ... DONE
> 
> 
> if (supportsMulticore()) {
+   message("*** requestCore() - timeout ...")
+   
+   plan(multicore, workers = 2L)
+   a %<-% { Sys.sleep(2); 1 }
+   
+   ## Fake single-worker multicore by using workers = 1L
+   res <- try(requestCore(function() {}, workers = 1L, timeout = 0.5, delta = 0.1))
+   stopifnot(inherits(res, "try-error"))
+   stopifnot(a == 1)
+   
+   message("*** requestCore() - timeout ... DONE")
+ }
*** requestCore() - timeout ...
[16:21:40.113] plan(): Setting new future strategy stack:
[16:21:40.114] List of future strategies:
[16:21:40.114] 1. multicore:
[16:21:40.114]    - args: function (..., workers = 2L, envir = parent.frame())
[16:21:40.114]    - tweaked: TRUE
[16:21:40.114]    - call: plan(multicore, workers = 2L)
[16:21:40.124] plan(): nbrOfWorkers() = 2
[16:21:40.126] getGlobalsAndPackages() ...
[16:21:40.126] Searching for globals...
[16:21:40.132] - globals found: [2] ‘{’, ‘Sys.sleep’
[16:21:40.132] Searching for globals ... DONE
[16:21:40.133] Resolving globals: FALSE
[16:21:40.133] 
[16:21:40.133] 
[16:21:40.133] getGlobalsAndPackages() ... DONE
[16:21:40.134] run() for ‘Future’ ...
[16:21:40.134] - state: ‘created’
[16:21:40.134] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:21:40.135] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:21:40.135] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:21:40.135]   - Field: ‘label’
[16:21:40.135]   - Field: ‘local’
[16:21:40.135]   - Field: ‘owner’
[16:21:40.135]   - Field: ‘envir’
[16:21:40.135]   - Field: ‘workers’
[16:21:40.135]   - Field: ‘packages’
[16:21:40.136]   - Field: ‘gc’
[16:21:40.136]   - Field: ‘job’
[16:21:40.136]   - Field: ‘conditions’
[16:21:40.136]   - Field: ‘expr’
[16:21:40.136]   - Field: ‘uuid’
[16:21:40.136]   - Field: ‘seed’
[16:21:40.136]   - Field: ‘version’
[16:21:40.136]   - Field: ‘result’
[16:21:40.136]   - Field: ‘asynchronous’
[16:21:40.136]   - Field: ‘calls’
[16:21:40.137]   - Field: ‘globals’
[16:21:40.137]   - Field: ‘stdout’
[16:21:40.137]   - Field: ‘earlySignal’
[16:21:40.137]   - Field: ‘lazy’
[16:21:40.137]   - Field: ‘state’
[16:21:40.137] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:21:40.137] - Launch lazy future ...
[16:21:40.140] Packages needed by the future expression (n = 0): <none>
[16:21:40.140] Packages needed by future strategies (n = 0): <none>
[16:21:40.141] {
[16:21:40.141]     {
[16:21:40.141]         {
[16:21:40.141]             ...future.startTime <- base::Sys.time()
[16:21:40.141]             {
[16:21:40.141]                 {
[16:21:40.141]                   {
[16:21:40.141]                     {
[16:21:40.141]                       base::local({
[16:21:40.141]                         has_future <- base::requireNamespace("future", 
[16:21:40.141]                           quietly = TRUE)
[16:21:40.141]                         if (has_future) {
[16:21:40.141]                           ns <- base::getNamespace("future")
[16:21:40.141]                           version <- ns[[".package"]][["version"]]
[16:21:40.141]                           if (is.null(version)) 
[16:21:40.141]                             version <- utils::packageVersion("future")
[16:21:40.141]                         }
[16:21:40.141]                         else {
[16:21:40.141]                           version <- NULL
[16:21:40.141]                         }
[16:21:40.141]                         if (!has_future || version < "1.8.0") {
[16:21:40.141]                           info <- base::c(r_version = base::gsub("R version ", 
[16:21:40.141]                             "", base::R.version$version.string), 
[16:21:40.141]                             platform = base::sprintf("%s (%s-bit)", 
[16:21:40.141]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:21:40.141]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:21:40.141]                               "release", "version")], collapse = " "), 
[16:21:40.141]                             hostname = base::Sys.info()[["nodename"]])
[16:21:40.141]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:21:40.141]                             info)
[16:21:40.141]                           info <- base::paste(info, collapse = "; ")
[16:21:40.141]                           if (!has_future) {
[16:21:40.141]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:21:40.141]                               info)
[16:21:40.141]                           }
[16:21:40.141]                           else {
[16:21:40.141]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:21:40.141]                               info, version)
[16:21:40.141]                           }
[16:21:40.141]                           base::stop(msg)
[16:21:40.141]                         }
[16:21:40.141]                       })
[16:21:40.141]                     }
[16:21:40.141]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:21:40.141]                     base::options(mc.cores = 1L)
[16:21:40.141]                   }
[16:21:40.141]                   ...future.strategy.old <- future::plan("list")
[16:21:40.141]                   options(future.plan = NULL)
[16:21:40.141]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:21:40.141]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:21:40.141]                 }
[16:21:40.141]                 ...future.workdir <- getwd()
[16:21:40.141]             }
[16:21:40.141]             ...future.oldOptions <- base::as.list(base::.Options)
[16:21:40.141]             ...future.oldEnvVars <- base::Sys.getenv()
[16:21:40.141]         }
[16:21:40.141]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:21:40.141]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:21:40.141]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:21:40.141]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:21:40.141]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:21:40.141]             future.stdout.windows.reencode = NULL, width = 80L)
[16:21:40.141]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:21:40.141]             base::names(...future.oldOptions))
[16:21:40.141]     }
[16:21:40.141]     if (FALSE) {
[16:21:40.141]     }
[16:21:40.141]     else {
[16:21:40.141]         if (TRUE) {
[16:21:40.141]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:21:40.141]                 open = "w")
[16:21:40.141]         }
[16:21:40.141]         else {
[16:21:40.141]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:21:40.141]                 windows = "NUL", "/dev/null"), open = "w")
[16:21:40.141]         }
[16:21:40.141]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:21:40.141]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:21:40.141]             base::sink(type = "output", split = FALSE)
[16:21:40.141]             base::close(...future.stdout)
[16:21:40.141]         }, add = TRUE)
[16:21:40.141]     }
[16:21:40.141]     ...future.frame <- base::sys.nframe()
[16:21:40.141]     ...future.conditions <- base::list()
[16:21:40.141]     ...future.rng <- base::globalenv()$.Random.seed
[16:21:40.141]     if (FALSE) {
[16:21:40.141]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:21:40.141]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:21:40.141]     }
[16:21:40.141]     ...future.result <- base::tryCatch({
[16:21:40.141]         base::withCallingHandlers({
[16:21:40.141]             ...future.value <- base::withVisible(base::local({
[16:21:40.141]                 withCallingHandlers({
[16:21:40.141]                   {
[16:21:40.141]                     Sys.sleep(2)
[16:21:40.141]                     1
[16:21:40.141]                   }
[16:21:40.141]                 }, immediateCondition = function(cond) {
[16:21:40.141]                   save_rds <- function (object, pathname, ...) 
[16:21:40.141]                   {
[16:21:40.141]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:21:40.141]                     if (file_test("-f", pathname_tmp)) {
[16:21:40.141]                       fi_tmp <- file.info(pathname_tmp)
[16:21:40.141]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:21:40.141]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:40.141]                         fi_tmp[["mtime"]])
[16:21:40.141]                     }
[16:21:40.141]                     tryCatch({
[16:21:40.141]                       saveRDS(object, file = pathname_tmp, ...)
[16:21:40.141]                     }, error = function(ex) {
[16:21:40.141]                       msg <- conditionMessage(ex)
[16:21:40.141]                       fi_tmp <- file.info(pathname_tmp)
[16:21:40.141]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:21:40.141]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:40.141]                         fi_tmp[["mtime"]], msg)
[16:21:40.141]                       ex$message <- msg
[16:21:40.141]                       stop(ex)
[16:21:40.141]                     })
[16:21:40.141]                     stopifnot(file_test("-f", pathname_tmp))
[16:21:40.141]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:21:40.141]                     if (!res || file_test("-f", pathname_tmp)) {
[16:21:40.141]                       fi_tmp <- file.info(pathname_tmp)
[16:21:40.141]                       fi <- file.info(pathname)
[16:21:40.141]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:21:40.141]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:21:40.141]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:21:40.141]                         fi[["size"]], fi[["mtime"]])
[16:21:40.141]                       stop(msg)
[16:21:40.141]                     }
[16:21:40.141]                     invisible(pathname)
[16:21:40.141]                   }
[16:21:40.141]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:21:40.141]                     rootPath = tempdir()) 
[16:21:40.141]                   {
[16:21:40.141]                     obj <- list(time = Sys.time(), condition = cond)
[16:21:40.141]                     file <- tempfile(pattern = class(cond)[1], 
[16:21:40.141]                       tmpdir = path, fileext = ".rds")
[16:21:40.141]                     save_rds(obj, file)
[16:21:40.141]                   }
[16:21:40.141]                   saveImmediateCondition(cond, path = "/tmp/RtmpvOh4iE/.future/immediateConditions")
[16:21:40.141]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:40.141]                   {
[16:21:40.141]                     inherits <- base::inherits
[16:21:40.141]                     invokeRestart <- base::invokeRestart
[16:21:40.141]                     is.null <- base::is.null
[16:21:40.141]                     muffled <- FALSE
[16:21:40.141]                     if (inherits(cond, "message")) {
[16:21:40.141]                       muffled <- grepl(pattern, "muffleMessage")
[16:21:40.141]                       if (muffled) 
[16:21:40.141]                         invokeRestart("muffleMessage")
[16:21:40.141]                     }
[16:21:40.141]                     else if (inherits(cond, "warning")) {
[16:21:40.141]                       muffled <- grepl(pattern, "muffleWarning")
[16:21:40.141]                       if (muffled) 
[16:21:40.141]                         invokeRestart("muffleWarning")
[16:21:40.141]                     }
[16:21:40.141]                     else if (inherits(cond, "condition")) {
[16:21:40.141]                       if (!is.null(pattern)) {
[16:21:40.141]                         computeRestarts <- base::computeRestarts
[16:21:40.141]                         grepl <- base::grepl
[16:21:40.141]                         restarts <- computeRestarts(cond)
[16:21:40.141]                         for (restart in restarts) {
[16:21:40.141]                           name <- restart$name
[16:21:40.141]                           if (is.null(name)) 
[16:21:40.141]                             next
[16:21:40.141]                           if (!grepl(pattern, name)) 
[16:21:40.141]                             next
[16:21:40.141]                           invokeRestart(restart)
[16:21:40.141]                           muffled <- TRUE
[16:21:40.141]                           break
[16:21:40.141]                         }
[16:21:40.141]                       }
[16:21:40.141]                     }
[16:21:40.141]                     invisible(muffled)
[16:21:40.141]                   }
[16:21:40.141]                   muffleCondition(cond)
[16:21:40.141]                 })
[16:21:40.141]             }))
[16:21:40.141]             future::FutureResult(value = ...future.value$value, 
[16:21:40.141]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:40.141]                   ...future.rng), globalenv = if (FALSE) 
[16:21:40.141]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:21:40.141]                     ...future.globalenv.names))
[16:21:40.141]                 else NULL, started = ...future.startTime, version = "1.8")
[16:21:40.141]         }, condition = base::local({
[16:21:40.141]             c <- base::c
[16:21:40.141]             inherits <- base::inherits
[16:21:40.141]             invokeRestart <- base::invokeRestart
[16:21:40.141]             length <- base::length
[16:21:40.141]             list <- base::list
[16:21:40.141]             seq.int <- base::seq.int
[16:21:40.141]             signalCondition <- base::signalCondition
[16:21:40.141]             sys.calls <- base::sys.calls
[16:21:40.141]             `[[` <- base::`[[`
[16:21:40.141]             `+` <- base::`+`
[16:21:40.141]             `<<-` <- base::`<<-`
[16:21:40.141]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:21:40.141]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:21:40.141]                   3L)]
[16:21:40.141]             }
[16:21:40.141]             function(cond) {
[16:21:40.141]                 is_error <- inherits(cond, "error")
[16:21:40.141]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:21:40.141]                   NULL)
[16:21:40.141]                 if (is_error) {
[16:21:40.141]                   sessionInformation <- function() {
[16:21:40.141]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:21:40.141]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:21:40.141]                       search = base::search(), system = base::Sys.info())
[16:21:40.141]                   }
[16:21:40.141]                   ...future.conditions[[length(...future.conditions) + 
[16:21:40.141]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:21:40.141]                     cond$call), session = sessionInformation(), 
[16:21:40.141]                     timestamp = base::Sys.time(), signaled = 0L)
[16:21:40.141]                   signalCondition(cond)
[16:21:40.141]                 }
[16:21:40.141]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:21:40.141]                 "immediateCondition"))) {
[16:21:40.141]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:21:40.141]                   ...future.conditions[[length(...future.conditions) + 
[16:21:40.141]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:21:40.141]                   if (TRUE && !signal) {
[16:21:40.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:40.141]                     {
[16:21:40.141]                       inherits <- base::inherits
[16:21:40.141]                       invokeRestart <- base::invokeRestart
[16:21:40.141]                       is.null <- base::is.null
[16:21:40.141]                       muffled <- FALSE
[16:21:40.141]                       if (inherits(cond, "message")) {
[16:21:40.141]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:40.141]                         if (muffled) 
[16:21:40.141]                           invokeRestart("muffleMessage")
[16:21:40.141]                       }
[16:21:40.141]                       else if (inherits(cond, "warning")) {
[16:21:40.141]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:40.141]                         if (muffled) 
[16:21:40.141]                           invokeRestart("muffleWarning")
[16:21:40.141]                       }
[16:21:40.141]                       else if (inherits(cond, "condition")) {
[16:21:40.141]                         if (!is.null(pattern)) {
[16:21:40.141]                           computeRestarts <- base::computeRestarts
[16:21:40.141]                           grepl <- base::grepl
[16:21:40.141]                           restarts <- computeRestarts(cond)
[16:21:40.141]                           for (restart in restarts) {
[16:21:40.141]                             name <- restart$name
[16:21:40.141]                             if (is.null(name)) 
[16:21:40.141]                               next
[16:21:40.141]                             if (!grepl(pattern, name)) 
[16:21:40.141]                               next
[16:21:40.141]                             invokeRestart(restart)
[16:21:40.141]                             muffled <- TRUE
[16:21:40.141]                             break
[16:21:40.141]                           }
[16:21:40.141]                         }
[16:21:40.141]                       }
[16:21:40.141]                       invisible(muffled)
[16:21:40.141]                     }
[16:21:40.141]                     muffleCondition(cond, pattern = "^muffle")
[16:21:40.141]                   }
[16:21:40.141]                 }
[16:21:40.141]                 else {
[16:21:40.141]                   if (TRUE) {
[16:21:40.141]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:21:40.141]                     {
[16:21:40.141]                       inherits <- base::inherits
[16:21:40.141]                       invokeRestart <- base::invokeRestart
[16:21:40.141]                       is.null <- base::is.null
[16:21:40.141]                       muffled <- FALSE
[16:21:40.141]                       if (inherits(cond, "message")) {
[16:21:40.141]                         muffled <- grepl(pattern, "muffleMessage")
[16:21:40.141]                         if (muffled) 
[16:21:40.141]                           invokeRestart("muffleMessage")
[16:21:40.141]                       }
[16:21:40.141]                       else if (inherits(cond, "warning")) {
[16:21:40.141]                         muffled <- grepl(pattern, "muffleWarning")
[16:21:40.141]                         if (muffled) 
[16:21:40.141]                           invokeRestart("muffleWarning")
[16:21:40.141]                       }
[16:21:40.141]                       else if (inherits(cond, "condition")) {
[16:21:40.141]                         if (!is.null(pattern)) {
[16:21:40.141]                           computeRestarts <- base::computeRestarts
[16:21:40.141]                           grepl <- base::grepl
[16:21:40.141]                           restarts <- computeRestarts(cond)
[16:21:40.141]                           for (restart in restarts) {
[16:21:40.141]                             name <- restart$name
[16:21:40.141]                             if (is.null(name)) 
[16:21:40.141]                               next
[16:21:40.141]                             if (!grepl(pattern, name)) 
[16:21:40.141]                               next
[16:21:40.141]                             invokeRestart(restart)
[16:21:40.141]                             muffled <- TRUE
[16:21:40.141]                             break
[16:21:40.141]                           }
[16:21:40.141]                         }
[16:21:40.141]                       }
[16:21:40.141]                       invisible(muffled)
[16:21:40.141]                     }
[16:21:40.141]                     muffleCondition(cond, pattern = "^muffle")
[16:21:40.141]                   }
[16:21:40.141]                 }
[16:21:40.141]             }
[16:21:40.141]         }))
[16:21:40.141]     }, error = function(ex) {
[16:21:40.141]         base::structure(base::list(value = NULL, visible = NULL, 
[16:21:40.141]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:21:40.141]                 ...future.rng), started = ...future.startTime, 
[16:21:40.141]             finished = Sys.time(), session_uuid = NA_character_, 
[16:21:40.141]             version = "1.8"), class = "FutureResult")
[16:21:40.141]     }, finally = {
[16:21:40.141]         if (!identical(...future.workdir, getwd())) 
[16:21:40.141]             setwd(...future.workdir)
[16:21:40.141]         {
[16:21:40.141]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:21:40.141]                 ...future.oldOptions$nwarnings <- NULL
[16:21:40.141]             }
[16:21:40.141]             base::options(...future.oldOptions)
[16:21:40.141]             if (.Platform$OS.type == "windows") {
[16:21:40.141]                 old_names <- names(...future.oldEnvVars)
[16:21:40.141]                 envs <- base::Sys.getenv()
[16:21:40.141]                 names <- names(envs)
[16:21:40.141]                 common <- intersect(names, old_names)
[16:21:40.141]                 added <- setdiff(names, old_names)
[16:21:40.141]                 removed <- setdiff(old_names, names)
[16:21:40.141]                 changed <- common[...future.oldEnvVars[common] != 
[16:21:40.141]                   envs[common]]
[16:21:40.141]                 NAMES <- toupper(changed)
[16:21:40.141]                 args <- list()
[16:21:40.141]                 for (kk in seq_along(NAMES)) {
[16:21:40.141]                   name <- changed[[kk]]
[16:21:40.141]                   NAME <- NAMES[[kk]]
[16:21:40.141]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:40.141]                     next
[16:21:40.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:40.141]                 }
[16:21:40.141]                 NAMES <- toupper(added)
[16:21:40.141]                 for (kk in seq_along(NAMES)) {
[16:21:40.141]                   name <- added[[kk]]
[16:21:40.141]                   NAME <- NAMES[[kk]]
[16:21:40.141]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:40.141]                     next
[16:21:40.141]                   args[[name]] <- ""
[16:21:40.141]                 }
[16:21:40.141]                 NAMES <- toupper(removed)
[16:21:40.141]                 for (kk in seq_along(NAMES)) {
[16:21:40.141]                   name <- removed[[kk]]
[16:21:40.141]                   NAME <- NAMES[[kk]]
[16:21:40.141]                   if (name != NAME && is.element(NAME, old_names)) 
[16:21:40.141]                     next
[16:21:40.141]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:21:40.141]                 }
[16:21:40.141]                 if (length(args) > 0) 
[16:21:40.141]                   base::do.call(base::Sys.setenv, args = args)
[16:21:40.141]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:21:40.141]             }
[16:21:40.141]             else {
[16:21:40.141]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:21:40.141]             }
[16:21:40.141]             {
[16:21:40.141]                 if (base::length(...future.futureOptionsAdded) > 
[16:21:40.141]                   0L) {
[16:21:40.141]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:21:40.141]                   base::names(opts) <- ...future.futureOptionsAdded
[16:21:40.141]                   base::options(opts)
[16:21:40.141]                 }
[16:21:40.141]                 {
[16:21:40.141]                   {
[16:21:40.141]                     base::options(mc.cores = ...future.mc.cores.old)
[16:21:40.141]                     NULL
[16:21:40.141]                   }
[16:21:40.141]                   options(future.plan = NULL)
[16:21:40.141]                   if (is.na(NA_character_)) 
[16:21:40.141]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:21:40.141]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:21:40.141]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[16:21:40.141]                     .init = FALSE)
[16:21:40.141]                 }
[16:21:40.141]             }
[16:21:40.141]         }
[16:21:40.141]     })
[16:21:40.141]     if (TRUE) {
[16:21:40.141]         base::sink(type = "output", split = FALSE)
[16:21:40.141]         if (TRUE) {
[16:21:40.141]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:21:40.141]         }
[16:21:40.141]         else {
[16:21:40.141]             ...future.result["stdout"] <- base::list(NULL)
[16:21:40.141]         }
[16:21:40.141]         base::close(...future.stdout)
[16:21:40.141]         ...future.stdout <- NULL
[16:21:40.141]     }
[16:21:40.141]     ...future.result$conditions <- ...future.conditions
[16:21:40.141]     ...future.result$finished <- base::Sys.time()
[16:21:40.141]     ...future.result
[16:21:40.141] }
[16:21:40.143] requestCore(): workers = 2
[16:21:40.147] MulticoreFuture started
[16:21:40.147] - Launch lazy future ... done
[16:21:40.147] run() for ‘MulticoreFuture’ ... done
[16:21:40.147] plan(): Setting new future strategy stack:
[16:21:40.148] requestCore(): workers = 1
[16:21:40.148] List of future strategies:
[16:21:40.148] 1. sequential:
[16:21:40.148]    - args: function (..., envir = parent.frame())
[16:21:40.148]    - tweaked: FALSE
[16:21:40.148]    - call: NULL
[16:21:40.149] plan(): nbrOfWorkers() = 1
[16:21:40.149] Poll #1 (0): usedCores() = 1, workers = 1
[16:21:40.252] Poll #2 (0.1 secs): usedCores() = 1, workers = 1
[16:21:40.355] Poll #3 (0.21 secs): usedCores() = 1, workers = 1
[16:21:40.458] Poll #4 (0.31 secs): usedCores() = 1, workers = 1
[16:21:40.562] Poll #5 (0.41 secs): usedCores() = 1, workers = 1
[16:21:40.667] TIMEOUT: All 1 cores are still occupied after 0.52 secs (polled 6 times)
Error in requestCore(function() { : 
  TIMEOUT: All 1 cores are still occupied after 0.52 secs (polled 6 times)
[16:21:40.669] result() for MulticoreFuture ...
[16:21:42.154] plan(): Setting new future strategy stack:
[16:21:42.154] List of future strategies:
[16:21:42.154] 1. multicore:
[16:21:42.154]    - args: function (..., workers = 2L, envir = parent.frame())
[16:21:42.154]    - tweaked: TRUE
[16:21:42.154]    - call: plan(multicore, workers = 2L)
[16:21:42.155] plan(): nbrOfWorkers() = 2
[16:21:42.160] result() for MulticoreFuture ...
[16:21:42.160] result() for MulticoreFuture ... done
[16:21:42.160] result() for MulticoreFuture ... done
[16:21:42.160] result() for MulticoreFuture ...
[16:21:42.160] result() for MulticoreFuture ... done
*** requestCore() - timeout ... DONE
> 
> message("*** requestCore() ... DONE")
*** requestCore() ... DONE
> 
> source("incl/end.R")
[16:21:42.161] plan(): Setting new future strategy stack:
[16:21:42.161] List of future strategies:
[16:21:42.161] 1. FutureStrategy:
[16:21:42.161]    - args: function (..., envir = parent.frame())
[16:21:42.161]    - tweaked: FALSE
[16:21:42.161]    - call: future::plan(oplan)
[16:21:42.162] plan(): nbrOfWorkers() = 1
> 
